
atomic_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .itcm         00001140  00000000  08000298  00020000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00019bd0  080013e0  080013e0  000213e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .user_flash   00000000  08100000  08100000  000402e8  2**0
                  CONTENTS
  4 .rodata       000035f8  0801afb0  0801afb0  0003afb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  0801e5a8  0801e5a8  0003e5a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .init_array   00000004  0801e5b0  0801e5b0  0003e5b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801e5b4  0801e5b4  0003e5b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  0801e5b8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  20000228  0801e7e0  00040228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  20000288  0801e840  00040288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00007fb8  200002e8  0801e8a0  000402e8  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200082a0  0801e8a0  000482a0  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000402e8  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00040316  2**0
                  CONTENTS, READONLY
 15 .debug_info   00038995  00000000  00000000  00040359  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000744d  00000000  00000000  00078cee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002978  00000000  00000000  00080140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000020fa  00000000  00000000  00082ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00011b73  00000000  00000000  00084bb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000404f6  00000000  00000000  00096725  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001a921b  00000000  00000000  000d6c1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000bef0  00000000  00000000  0027fe38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000052  00000000  00000000  0028bd28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .itcm:

00000000 <synth_writereg>:
  * @param  Address
  * @param  Chip address
  * @param  Verify
  * @retval Contents read back from register
  */
static uint32_t synth_writereg(const uint32_t data, const uint32_t reg_address, const uint32_t chip_address, const bool verify) {
       0:	b580      	push	{r7, lr}
       2:	b08a      	sub	sp, #40	; 0x28
       4:	af00      	add	r7, sp, #0
       6:	60f8      	str	r0, [r7, #12]
       8:	60b9      	str	r1, [r7, #8]
       a:	607a      	str	r2, [r7, #4]
       c:	70fb      	strb	r3, [r7, #3]

	uint32_t read_data = 0;
       e:	2300      	movs	r3, #0
      10:	627b      	str	r3, [r7, #36]	; 0x24
	const uint32_t write_data = (data << 8) | (reg_address << 3) | chip_address; // This is what we will write, 32 bits in total.
      12:	68fb      	ldr	r3, [r7, #12]
      14:	021a      	lsls	r2, r3, #8
      16:	68bb      	ldr	r3, [r7, #8]
      18:	00db      	lsls	r3, r3, #3
      1a:	4313      	orrs	r3, r2
      1c:	687a      	ldr	r2, [r7, #4]
      1e:	4313      	orrs	r3, r2
      20:	61fb      	str	r3, [r7, #28]
#ifdef SPI_DEBUG
	printf("SPI BYTES WRITTEN: 0x%X \r\n", write_data);
#endif
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
      22:	2200      	movs	r2, #0
      24:	f44f 7180 	mov.w	r1, #256	; 0x100
      28:	4830      	ldr	r0, [pc, #192]	; (ec <synth_writereg+0xec>)
      2a:	f001 f885 	bl	1138 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 0); // Take SEN low to indicate we are sending data
      2e:	2200      	movs	r2, #0
      30:	f44f 6100 	mov.w	r1, #2048	; 0x800
      34:	482d      	ldr	r0, [pc, #180]	; (ec <synth_writereg+0xec>)
      36:	f001 f87f 	bl	1138 <__HAL_GPIO_WritePin_veneer>

	/* Clock in the data */
	for (uint32_t i = 0; i < SYNTH_SPI_BITS; i++) {
      3a:	2300      	movs	r3, #0
      3c:	623b      	str	r3, [r7, #32]
      3e:	e036      	b.n	ae <synth_writereg+0xae>

		/* Data written on the rising edge */
		uint32_t bit = (SYNTH_SPI_BITS - 1 - i);
      40:	2220      	movs	r2, #32
      42:	6a3b      	ldr	r3, [r7, #32]
      44:	1ad3      	subs	r3, r2, r3
      46:	3b01      	subs	r3, #1
      48:	617b      	str	r3, [r7, #20]
		HAL_GPIO_WritePin(MOSI_GPIO_Port, MOSI_Pin, !!(write_data & (1 << bit)));
      4a:	2201      	movs	r2, #1
      4c:	697b      	ldr	r3, [r7, #20]
      4e:	fa02 f303 	lsl.w	r3, r2, r3
      52:	461a      	mov	r2, r3
      54:	69fb      	ldr	r3, [r7, #28]
      56:	4013      	ands	r3, r2
      58:	2b00      	cmp	r3, #0
      5a:	bf14      	ite	ne
      5c:	2301      	movne	r3, #1
      5e:	2300      	moveq	r3, #0
      60:	b2db      	uxtb	r3, r3
      62:	461a      	mov	r2, r3
      64:	f44f 7100 	mov.w	r1, #512	; 0x200
      68:	4820      	ldr	r0, [pc, #128]	; (ec <synth_writereg+0xec>)
      6a:	f001 f865 	bl	1138 <__HAL_GPIO_WritePin_veneer>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 1);
      6e:	2201      	movs	r2, #1
      70:	f44f 7180 	mov.w	r1, #256	; 0x100
      74:	481d      	ldr	r0, [pc, #116]	; (ec <synth_writereg+0xec>)
      76:	f001 f85f 	bl	1138 <__HAL_GPIO_WritePin_veneer>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
      7a:	2200      	movs	r2, #0
      7c:	f44f 7180 	mov.w	r1, #256	; 0x100
      80:	481a      	ldr	r0, [pc, #104]	; (ec <synth_writereg+0xec>)
      82:	f001 f859 	bl	1138 <__HAL_GPIO_WritePin_veneer>

		/* Data read on the falling edge */
		read_data = read_data
				| (HAL_GPIO_ReadPin(MISO_GPIO_Port, MISO_Pin)
      86:	f44f 6180 	mov.w	r1, #1024	; 0x400
      8a:	4818      	ldr	r0, [pc, #96]	; (ec <synth_writereg+0xec>)
      8c:	f001 f838 	bl	1100 <__HAL_GPIO_ReadPin_veneer>
      90:	4603      	mov	r3, r0
      92:	4619      	mov	r1, r3
						<< (SYNTH_SPI_BITS - 1 - i));
      94:	2220      	movs	r2, #32
      96:	6a3b      	ldr	r3, [r7, #32]
      98:	1ad3      	subs	r3, r2, r3
      9a:	3b01      	subs	r3, #1
      9c:	fa01 f303 	lsl.w	r3, r1, r3
      a0:	461a      	mov	r2, r3
		read_data = read_data
      a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
      a4:	4313      	orrs	r3, r2
      a6:	627b      	str	r3, [r7, #36]	; 0x24
	for (uint32_t i = 0; i < SYNTH_SPI_BITS; i++) {
      a8:	6a3b      	ldr	r3, [r7, #32]
      aa:	3301      	adds	r3, #1
      ac:	623b      	str	r3, [r7, #32]
      ae:	2220      	movs	r2, #32
      b0:	6a3b      	ldr	r3, [r7, #32]
      b2:	4293      	cmp	r3, r2
      b4:	d3c4      	bcc.n	40 <synth_writereg+0x40>
	}

	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 1); // Assert the SEN line to register the transmitted data
      b6:	2201      	movs	r2, #1
      b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
      bc:	480b      	ldr	r0, [pc, #44]	; (ec <synth_writereg+0xec>)
      be:	f001 f83b 	bl	1138 <__HAL_GPIO_WritePin_veneer>

	if (verify) {
      c2:	78fb      	ldrb	r3, [r7, #3]
      c4:	2b00      	cmp	r3, #0
      c6:	d00c      	beq.n	e2 <synth_writereg+0xe2>
		const uint32_t verify_data = synth_readreg(reg_address); // Data returned on the second cycle
      c8:	68b8      	ldr	r0, [r7, #8]
      ca:	f000 f813 	bl	f4 <synth_readreg>
      ce:	61b8      	str	r0, [r7, #24]
		if (verify_data != data) {
      d0:	69ba      	ldr	r2, [r7, #24]
      d2:	68fb      	ldr	r3, [r7, #12]
      d4:	429a      	cmp	r2, r3
      d6:	d004      	beq.n	e2 <synth_writereg+0xe2>
			printf("SPI transmission error!\n");
      d8:	4805      	ldr	r0, [pc, #20]	; (f0 <synth_writereg+0xf0>)
      da:	f001 f815 	bl	1108 <__puts_veneer>
			Error_Handler(); // We enter an infinite loop here
      de:	f001 f803 	bl	10e8 <__Error_Handler_veneer>
		}
	}

	return read_data;
      e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
      e4:	4618      	mov	r0, r3
      e6:	3728      	adds	r7, #40	; 0x28
      e8:	46bd      	mov	sp, r7
      ea:	bd80      	pop	{r7, pc}
      ec:	58020800 	.word	0x58020800
      f0:	0801b200 	.word	0x0801b200

000000f4 <synth_readreg>:
/**
  * @brief  Reads a register.
  * @param  Address
  * @retval Register contents
  */
static uint32_t synth_readreg(const uint32_t reg_address){
      f4:	b580      	push	{r7, lr}
      f6:	b084      	sub	sp, #16
      f8:	af00      	add	r7, sp, #0
      fa:	6078      	str	r0, [r7, #4]

    synth_writereg(reg_address, 0x0, 0x0, DONT_VERIFY); // First cycle to send the read address
      fc:	2300      	movs	r3, #0
      fe:	2200      	movs	r2, #0
     100:	2100      	movs	r1, #0
     102:	6878      	ldr	r0, [r7, #4]
     104:	f7ff ff7c 	bl	0 <synth_writereg>
    const uint32_t read_data = synth_writereg(reg_address, 0x0, 0x0, DONT_VERIFY);  // Data returned on the second cycle
     108:	2300      	movs	r3, #0
     10a:	2200      	movs	r2, #0
     10c:	2100      	movs	r1, #0
     10e:	6878      	ldr	r0, [r7, #4]
     110:	f7ff ff76 	bl	0 <synth_writereg>
     114:	60f8      	str	r0, [r7, #12]

    return (read_data >> 8); // We only care about the first 24 bits returned.
     116:	68fb      	ldr	r3, [r7, #12]
     118:	0a1b      	lsrs	r3, r3, #8

}
     11a:	4618      	mov	r0, r3
     11c:	3710      	adds	r7, #16
     11e:	46bd      	mov	sp, r7
     120:	bd80      	pop	{r7, pc}

00000122 <set_MW_power>:
/**
  * @brief  Program LO2 output gain.
  * @param  MW power setting
  * @retval Success/fail
  */
uint32_t set_MW_power (const uint8_t mw_power) {
     122:	b580      	push	{r7, lr}
     124:	b084      	sub	sp, #16
     126:	af00      	add	r7, sp, #0
     128:	4603      	mov	r3, r0
     12a:	71fb      	strb	r3, [r7, #7]
	if (mw_power > 3) {//check that LO2GAIN is an integer from 0 to 3 inclusive
     12c:	79fb      	ldrb	r3, [r7, #7]
     12e:	2b03      	cmp	r3, #3
     130:	d904      	bls.n	13c <set_MW_power+0x1a>
		printf("illegal mw_power - must be an integer from 0 to 3!\n");
     132:	4811      	ldr	r0, [pc, #68]	; (178 <set_MW_power+0x56>)
     134:	f000 ffe8 	bl	1108 <__puts_veneer>
		Error_Handler(); // We enter an infinite loop here
     138:	f000 ffd6 	bl	10e8 <__Error_Handler_veneer>
	}
	uint32_t read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
     13c:	2016      	movs	r0, #22
     13e:	f7ff ffd9 	bl	f4 <synth_readreg>
     142:	60f8      	str	r0, [r7, #12]
	read_data &= 0xFFFFFCFF; 		// Zero bits 8:9.
     144:	68fb      	ldr	r3, [r7, #12]
     146:	f423 7340 	bic.w	r3, r3, #768	; 0x300
     14a:	60fb      	str	r3, [r7, #12]
	read_data |= (mw_power << 8);	// Set LO2GAIN value.
     14c:	79fb      	ldrb	r3, [r7, #7]
     14e:	021b      	lsls	r3, r3, #8
     150:	461a      	mov	r2, r3
     152:	68fb      	ldr	r3, [r7, #12]
     154:	4313      	orrs	r3, r2
     156:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
     158:	2301      	movs	r3, #1
     15a:	2200      	movs	r2, #0
     15c:	2116      	movs	r1, #22
     15e:	68f8      	ldr	r0, [r7, #12]
     160:	f7ff ff4e 	bl	0 <synth_writereg>
	#ifdef MW_VERBOSE
		printf("PROGRAMMED GAIN DIVIDER REGISTER: 0x%lX \r\n", read_data);
	#endif
	printf("LO2 gain setting: %u \r\n", mw_power);
     164:	79fb      	ldrb	r3, [r7, #7]
     166:	4619      	mov	r1, r3
     168:	4804      	ldr	r0, [pc, #16]	; (17c <set_MW_power+0x5a>)
     16a:	f000 ffc1 	bl	10f0 <__printf_veneer>
	return SUCCESS;
     16e:	2300      	movs	r3, #0
}
     170:	4618      	mov	r0, r3
     172:	3710      	adds	r7, #16
     174:	46bd      	mov	sp, r7
     176:	bd80      	pop	{r7, pc}
     178:	0801b218 	.word	0x0801b218
     17c:	0801b24c 	.word	0x0801b24c

00000180 <init_synthesiser>:
/**
  * @brief  Initialises HMC835 synthesiser.
  * @param  MW power setting
  * @retval Success/fail
  */
uint32_t init_synthesiser(const uint8_t mw_power) {
     180:	b580      	push	{r7, lr}
     182:	b084      	sub	sp, #16
     184:	af00      	add	r7, sp, #0
     186:	4603      	mov	r3, r0
     188:	71fb      	strb	r3, [r7, #7]

	//Set pins to required initial conditions
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET); // Turn off the amber lock LED
     18a:	2200      	movs	r2, #0
     18c:	2102      	movs	r1, #2
     18e:	4856      	ldr	r0, [pc, #344]	; (2e8 <_Min_Heap_Size+0xe8>)
     190:	f000 ffd2 	bl	1138 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
     194:	2201      	movs	r2, #1
     196:	2101      	movs	r1, #1
     198:	4854      	ldr	r0, [pc, #336]	; (2ec <_Min_Heap_Size+0xec>)
     19a:	f000 ffcd 	bl	1138 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
     19e:	2200      	movs	r2, #0
     1a0:	f44f 7180 	mov.w	r1, #256	; 0x100
     1a4:	4852      	ldr	r0, [pc, #328]	; (2f0 <_Min_Heap_Size+0xf0>)
     1a6:	f000 ffc7 	bl	1138 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 1);
     1aa:	2201      	movs	r2, #1
     1ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
     1b0:	484f      	ldr	r0, [pc, #316]	; (2f0 <_Min_Heap_Size+0xf0>)
     1b2:	f000 ffc1 	bl	1138 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 1); // Enable the main regulator.
     1b6:	2201      	movs	r2, #1
     1b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
     1bc:	484c      	ldr	r0, [pc, #304]	; (2f0 <_Min_Heap_Size+0xf0>)
     1be:	f000 ffbb 	bl	1138 <__HAL_GPIO_WritePin_veneer>

	HAL_Delay(100); // Wait 100 ms for the supply to stabilise.
     1c2:	2064      	movs	r0, #100	; 0x64
     1c4:	f000 ffb4 	bl	1130 <__HAL_Delay_veneer>

	synth_writereg(0x1UL << 5, OPEN_MODE_READ_ADDRESS, 0x0, DONT_VERIFY); // Soft reset.
     1c8:	2300      	movs	r3, #0
     1ca:	2200      	movs	r2, #0
     1cc:	2100      	movs	r1, #0
     1ce:	2020      	movs	r0, #32
     1d0:	f7ff ff16 	bl	0 <synth_writereg>
	synth_writereg(0x41BFFF, ANALOG_EN_REGISTER, 0x0, VERIFY); // Set the SDO output level to 3.3 Volts
     1d4:	2301      	movs	r3, #1
     1d6:	2200      	movs	r2, #0
     1d8:	2108      	movs	r1, #8
     1da:	4846      	ldr	r0, [pc, #280]	; (2f4 <_Min_Heap_Size+0xf4>)
     1dc:	f7ff ff10 	bl	0 <synth_writereg>

	uint32_t read_data = synth_readreg(ID_REGISTER); // Read the ID register to check the chip is communicating
     1e0:	2000      	movs	r0, #0
     1e2:	f7ff ff87 	bl	f4 <synth_readreg>
     1e6:	60f8      	str	r0, [r7, #12]
	/* Check we have the correct ID */
	if (read_data != SYNTH_ID) {
     1e8:	4a43      	ldr	r2, [pc, #268]	; (2f8 <_Min_Heap_Size+0xf8>)
     1ea:	68fb      	ldr	r3, [r7, #12]
     1ec:	4293      	cmp	r3, r2
     1ee:	d00a      	beq.n	206 <_Min_Heap_Size+0x6>
		HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 0); // Disable the main regulator.
     1f0:	2200      	movs	r2, #0
     1f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
     1f6:	483e      	ldr	r0, [pc, #248]	; (2f0 <_Min_Heap_Size+0xf0>)
     1f8:	f000 ff9e 	bl	1138 <__HAL_GPIO_WritePin_veneer>
		printf("Incorrect synthesiser ID!\r\n");
     1fc:	483f      	ldr	r0, [pc, #252]	; (2fc <_Min_Heap_Size+0xfc>)
     1fe:	f000 ff83 	bl	1108 <__puts_veneer>
		return ERROR;
     202:	2301      	movs	r3, #1
     204:	e065      	b.n	2d2 <_Min_Heap_Size+0xd2>
	}

	/* Everything looks good, we can communicate with the chip :-) */
	printf("HMC835 Detected.\r\n");
     206:	483e      	ldr	r0, [pc, #248]	; (300 <_Min_Heap_Size+0x100>)
     208:	f000 ff7e 	bl	1108 <__puts_veneer>

	/* Enables Single-Ended output mode for LO2 output */
	read_data = synth_readreg(MODES_REGISTER); // Get the current value of the modes register
     20c:	2017      	movs	r0, #23
     20e:	f7ff ff71 	bl	f4 <synth_readreg>
     212:	60f8      	str	r0, [r7, #12]
#ifdef MW_VERBOSE
	printf("READ MODES REGISTER: 0x%lX \r\n", read_data);
#endif
	read_data |= (0x1UL << 9);     // Enable single ended output for LO2 (LO2_P)
     214:	68fb      	ldr	r3, [r7, #12]
     216:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     21a:	60fb      	str	r3, [r7, #12]
	read_data  &= ~(!AUTO_MUTE << 7); //can disable auto_mute - see variable declarations
     21c:	2301      	movs	r3, #1
     21e:	f083 0301 	eor.w	r3, r3, #1
     222:	b2db      	uxtb	r3, r3
     224:	01db      	lsls	r3, r3, #7
     226:	43db      	mvns	r3, r3
     228:	461a      	mov	r2, r3
     22a:	68fb      	ldr	r3, [r7, #12]
     22c:	4013      	ands	r3, r2
     22e:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, MODES_REGISTER, 0x0, VERIFY); // Send
     230:	2301      	movs	r3, #1
     232:	2200      	movs	r2, #0
     234:	2117      	movs	r1, #23
     236:	68f8      	ldr	r0, [r7, #12]
     238:	f7ff fee2 	bl	0 <synth_writereg>
	//read_data = synth_readreg(LOCK_DETECT_REGISTER); // Get the current value.
	//read_data &= 0xFFFFFFF8; // Zero the first 3 LSBs.
	//read_data |= 0x07;
	//synth_writereg(read_data, LOCK_DETECT_REGISTER, 0x0, VERIFY); // Update the VCO divide register.

	synth_writereg(1, REFDIV_REGISTER, 0x0, VERIFY); // Reference divider setting.
     23c:	2301      	movs	r3, #1
     23e:	2200      	movs	r2, #0
     240:	2102      	movs	r1, #2
     242:	2001      	movs	r0, #1
     244:	f7ff fedc 	bl	0 <synth_writereg>
	printf("PROGRAMMED DIVIDER REGISTER: 0x01 \r\n");
#endif

	/* Lock detect training: This must be done after any change to the PD
	 * reference frequency or after power cycle. */
	read_data = synth_readreg(LOCK_DETECT_REGISTER); // Get contents of lock detect register
     248:	2007      	movs	r0, #7
     24a:	f7ff ff53 	bl	f4 <synth_readreg>
     24e:	60f8      	str	r0, [r7, #12]
#ifdef MW_VERBOSE
	printf("READ LOCK_DETECT_REGISTER: 0x%lX \r\n", read_data);
#endif
	read_data |= (0x1UL << 11);      // Enable lock-detect counters.
     250:	68fb      	ldr	r3, [r7, #12]
     252:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
     256:	60fb      	str	r3, [r7, #12]
	read_data |= (0x1UL << 14);      // Enable the lock-detect timer.
     258:	68fb      	ldr	r3, [r7, #12]
     25a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     25e:	60fb      	str	r3, [r7, #12]
	read_data |= (0x1UL << 20);      // Train the lock-detect timer.
     260:	68fb      	ldr	r3, [r7, #12]
     262:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     266:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, LOCK_DETECT_REGISTER, 0x0, VERIFY); // Send
     268:	2301      	movs	r3, #1
     26a:	2200      	movs	r2, #0
     26c:	2107      	movs	r1, #7
     26e:	68f8      	ldr	r0, [r7, #12]
     270:	f7ff fec6 	bl	0 <synth_writereg>
#ifdef MW_VERBOSE
	printf("PROGRAMMED LOCK DETECT REGISTER: 0x%lX \r\n", read_data);
#endif
	HAL_Delay(10); // Wait 10 ms for training to complete, not sure if we really need to do this.
     274:	200a      	movs	r0, #10
     276:	f000 ff5b 	bl	1130 <__HAL_Delay_veneer>

	/* Program LO2 output gain */
	if (mw_power > 3) {//check that LO2GAIN is an integer from 0 to 3 inclusive
     27a:	79fb      	ldrb	r3, [r7, #7]
     27c:	2b03      	cmp	r3, #3
     27e:	d904      	bls.n	28a <_Min_Heap_Size+0x8a>
		printf("illegal mw_power - must be an integer from 0 to 3!\n");
     280:	4820      	ldr	r0, [pc, #128]	; (304 <_Min_Heap_Size+0x104>)
     282:	f000 ff41 	bl	1108 <__puts_veneer>
		Error_Handler(); // We enter an infinite loop here
     286:	f000 ff2f 	bl	10e8 <__Error_Handler_veneer>
	}
	read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
     28a:	2016      	movs	r0, #22
     28c:	f7ff ff32 	bl	f4 <synth_readreg>
     290:	60f8      	str	r0, [r7, #12]
	read_data &= 0xFFFFFCFF; 		// Zero bits 8:9.
     292:	68fb      	ldr	r3, [r7, #12]
     294:	f423 7340 	bic.w	r3, r3, #768	; 0x300
     298:	60fb      	str	r3, [r7, #12]
	read_data |= (mw_power << 8);	// Set LO2GAIN value.
     29a:	79fb      	ldrb	r3, [r7, #7]
     29c:	021b      	lsls	r3, r3, #8
     29e:	461a      	mov	r2, r3
     2a0:	68fb      	ldr	r3, [r7, #12]
     2a2:	4313      	orrs	r3, r2
     2a4:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
     2a6:	2301      	movs	r3, #1
     2a8:	2200      	movs	r2, #0
     2aa:	2116      	movs	r1, #22
     2ac:	68f8      	ldr	r0, [r7, #12]
     2ae:	f7ff fea7 	bl	0 <synth_writereg>
	printf("PROGRAMMED GAIN DIVIDER REGISTER: 0x%lX \r\n", read_data);
	printf("LO2 gain setting: %u \r\n", mw_power);
#endif

	/* Sets output frequency to the hyperfine value */
	set_frequency_hz(HYPERFINE);
     2b2:	ed9f 7b0b 	vldr	d7, [pc, #44]	; 2e0 <_Min_Heap_Size+0xe0>
     2b6:	eeb0 0b47 	vmov.f64	d0, d7
     2ba:	f000 f83c 	bl	336 <set_frequency_hz>
	//printf("Single frequency output: %f Hz \r\n", HYPERFINE);
	printf("Single frequency output: %.10g Hz \r\n", HYPERFINE);
     2be:	a308      	add	r3, pc, #32	; (adr r3, 2e0 <_Min_Heap_Size+0xe0>)
     2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
     2c4:	4810      	ldr	r0, [pc, #64]	; (308 <_Min_Heap_Size+0x108>)
     2c6:	f000 ff13 	bl	10f0 <__printf_veneer>
//	struct MW_struct *mw_sweep_settings = 0;  //create a structure to store the sweep settings
	mw_sweep_settings.state = MW_FIXED_FREQ;
     2ca:	4b10      	ldr	r3, [pc, #64]	; (30c <_Min_Heap_Size+0x10c>)
     2cc:	2201      	movs	r2, #1
     2ce:	701a      	strb	r2, [r3, #0]
	return SUCCESS;
     2d0:	2300      	movs	r3, #0
}
     2d2:	4618      	mov	r0, r3
     2d4:	3710      	adds	r7, #16
     2d6:	46bd      	mov	sp, r7
     2d8:	bd80      	pop	{r7, pc}
     2da:	bf00      	nop
     2dc:	f3af 8000 	nop.w
     2e0:	6d600000 	.word	0x6d600000
     2e4:	41e69e35 	.word	0x41e69e35
     2e8:	58021000 	.word	0x58021000
     2ec:	58021800 	.word	0x58021800
     2f0:	58020800 	.word	0x58020800
     2f4:	0041bfff 	.word	0x0041bfff
     2f8:	00c7701a 	.word	0x00c7701a
     2fc:	0801b264 	.word	0x0801b264
     300:	0801b280 	.word	0x0801b280
     304:	0801b218 	.word	0x0801b218
     308:	0801b294 	.word	0x0801b294
     30c:	200005c8 	.word	0x200005c8

00000310 <lock_status>:
/**
  * @brief  Checks for MW frequency lock
  * @param  None
  * @retval Lock status
  */
static const bool lock_status(void) {
     310:	b580      	push	{r7, lr}
     312:	b082      	sub	sp, #8
     314:	af00      	add	r7, sp, #0

	bool locked = synth_readreg(GPOLD_REGISTER) & (1UL << 1);
     316:	2012      	movs	r0, #18
     318:	f7ff feec 	bl	f4 <synth_readreg>
     31c:	4603      	mov	r3, r0
     31e:	f003 0302 	and.w	r3, r3, #2
     322:	2b00      	cmp	r3, #0
     324:	bf14      	ite	ne
     326:	2301      	movne	r3, #1
     328:	2300      	moveq	r3, #0
     32a:	71fb      	strb	r3, [r7, #7]
	return locked;
     32c:	79fb      	ldrb	r3, [r7, #7]

}
     32e:	4618      	mov	r0, r3
     330:	3708      	adds	r7, #8
     332:	46bd      	mov	sp, r7
     334:	bd80      	pop	{r7, pc}

00000336 <set_frequency_hz>:
/**
  * @brief  Translate a frequency into register values for programming to HMC835
  * @param  Frequency
  * @retval None
  */
void set_frequency_hz(const double fo) {
     336:	b580      	push	{r7, lr}
     338:	b088      	sub	sp, #32
     33a:	af00      	add	r7, sp, #0
     33c:	ed87 0b00 	vstr	d0, [r7]

#ifdef OPTIMISED_FOR_3_035GHZ_GENERATION
	/* Code optimisation for Generation of frequencies close to 3.035GHz
	 * k always equals 1
	 */
	uint32_t k = 1;
     340:	2301      	movs	r3, #1
     342:	61fb      	str	r3, [r7, #28]
		}
	}
#endif //OPTIMISED_FOR_3_035GHZ_GENERATION

	/* Calculate the N division ratio */
	const double N = ((fo * k) / REF_FREQ);
     344:	69fb      	ldr	r3, [r7, #28]
     346:	ee07 3a90 	vmov	s15, r3
     34a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     34e:	ed97 7b00 	vldr	d7, [r7]
     352:	ee26 6b07 	vmul.f64	d6, d6, d7
     356:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 400 <_Min_Stack_Size>
     35a:	ee86 7b05 	vdiv.f64	d7, d6, d5
     35e:	ed87 7b04 	vstr	d7, [r7, #16]

	/* Extract the fractional and integer parts */
	const uint32_t NINT = N;
     362:	ed97 7b04 	vldr	d7, [r7, #16]
     366:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     36a:	ee17 3a90 	vmov	r3, s15
     36e:	60fb      	str	r3, [r7, #12]
	const uint32_t NFRAC = ((N - NINT) * (1 << 24)) + 0.5;
     370:	68fb      	ldr	r3, [r7, #12]
     372:	ee07 3a90 	vmov	s15, r3
     376:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     37a:	ed97 6b04 	vldr	d6, [r7, #16]
     37e:	ee36 7b47 	vsub.f64	d7, d6, d7
     382:	ed9f 6b21 	vldr	d6, [pc, #132]	; 408 <_Min_Stack_Size+0x8>
     386:	ee27 7b06 	vmul.f64	d7, d7, d6
     38a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     38e:	ee37 7b06 	vadd.f64	d7, d7, d6
     392:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     396:	ee17 3a90 	vmov	r3, s15
     39a:	60bb      	str	r3, [r7, #8]
		printf("Failed to establish synthesiser frequency accurately\r\n");
		Error_Handler();
	}
#endif

	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); //Sets MW_invalid pin high
     39c:	2201      	movs	r2, #1
     39e:	2102      	movs	r1, #2
     3a0:	481b      	ldr	r0, [pc, #108]	; (410 <_Min_Stack_Size+0x10>)
     3a2:	f000 fec9 	bl	1138 <__HAL_GPIO_WritePin_veneer>
	//set_frequency(NINT, NFRAC, k, MANUAL_MUTE); //Sets only the necessary Hittite registers
	set_freq_regs(NINT, NFRAC, k); //Sets only the necessary Hittite registers
     3a6:	69fa      	ldr	r2, [r7, #28]
     3a8:	68b9      	ldr	r1, [r7, #8]
     3aa:	68f8      	ldr	r0, [r7, #12]
     3ac:	f000 f838 	bl	420 <set_freq_regs>

	//MW stabilisation delay and check for lock
	timer_delay(MW_TIMER, MW_STABILISE_TIME_US);
     3b0:	4b18      	ldr	r3, [pc, #96]	; (414 <_Min_Stack_Size+0x14>)
     3b2:	681b      	ldr	r3, [r3, #0]
     3b4:	f241 3288 	movw	r2, #5000	; 0x1388
     3b8:	4611      	mov	r1, r2
     3ba:	4618      	mov	r0, r3
     3bc:	f000 fdc6 	bl	f4c <timer_delay>
	//if (!poll_until_locked(LOCK_WAIT_US)) {
	if (!lock_status()) {
     3c0:	f7ff ffa6 	bl	310 <lock_status>
     3c4:	4603      	mov	r3, r0
     3c6:	f083 0301 	eor.w	r3, r3, #1
     3ca:	b2db      	uxtb	r3, r3
     3cc:	2b00      	cmp	r3, #0
     3ce:	d011      	beq.n	3f4 <set_frequency_hz+0xbe>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET); //turn off amber LED
     3d0:	2200      	movs	r2, #0
     3d2:	2102      	movs	r1, #2
     3d4:	4810      	ldr	r0, [pc, #64]	; (418 <_Min_Stack_Size+0x18>)
     3d6:	f000 feaf 	bl	1138 <__HAL_GPIO_WritePin_veneer>
		printf("Failed to establish MW Lock within %ld us of setting frequency!\r\n", MW_STABILISE_TIME_US);
     3da:	f241 3388 	movw	r3, #5000	; 0x1388
     3de:	4619      	mov	r1, r3
     3e0:	480e      	ldr	r0, [pc, #56]	; (41c <_Min_Stack_Size+0x1c>)
     3e2:	f000 fe85 	bl	10f0 <__printf_veneer>
#ifdef HALT_ON_LOSS_OF_LOCK
		Error_Handler();
     3e6:	f000 fe7f 	bl	10e8 <__Error_Handler_veneer>
#endif //HALT_ON_LOSS_OF_LOCK
		HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); //Sets MW_invalid pin low
     3ea:	2200      	movs	r2, #0
     3ec:	2102      	movs	r1, #2
     3ee:	4808      	ldr	r0, [pc, #32]	; (410 <_Min_Stack_Size+0x10>)
     3f0:	f000 fea2 	bl	1138 <__HAL_GPIO_WritePin_veneer>
	}

}
     3f4:	bf00      	nop
     3f6:	3720      	adds	r7, #32
     3f8:	46bd      	mov	sp, r7
     3fa:	bd80      	pop	{r7, pc}
     3fc:	f3af 8000 	nop.w
     400:	00000000 	.word	0x00000000
     404:	4187d784 	.word	0x4187d784
     408:	00000000 	.word	0x00000000
     40c:	41700000 	.word	0x41700000
     410:	58020400 	.word	0x58020400
     414:	2000001c 	.word	0x2000001c
     418:	58021000 	.word	0x58021000
     41c:	0801b2bc 	.word	0x0801b2bc

00000420 <set_freq_regs>:
static void set_freq_regs(const uint32_t integer, const uint32_t fraction, const uint32_t vco_divider) {
     420:	b580      	push	{r7, lr}
     422:	b086      	sub	sp, #24
     424:	af00      	add	r7, sp, #0
     426:	60f8      	str	r0, [r7, #12]
     428:	60b9      	str	r1, [r7, #8]
     42a:	607a      	str	r2, [r7, #4]
	uint32_t read_data = 0x0;
     42c:	2300      	movs	r3, #0
     42e:	617b      	str	r3, [r7, #20]
	if (last_vcodiv == -1 || (last_vcodiv != vco_divider)) {
     430:	4b24      	ldr	r3, [pc, #144]	; (4c4 <set_freq_regs+0xa4>)
     432:	681b      	ldr	r3, [r3, #0]
     434:	f1b3 3fff 	cmp.w	r3, #4294967295
     438:	d004      	beq.n	444 <set_freq_regs+0x24>
     43a:	4b22      	ldr	r3, [pc, #136]	; (4c4 <set_freq_regs+0xa4>)
     43c:	681b      	ldr	r3, [r3, #0]
     43e:	687a      	ldr	r2, [r7, #4]
     440:	429a      	cmp	r2, r3
     442:	d014      	beq.n	46e <set_freq_regs+0x4e>
		read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
     444:	2016      	movs	r0, #22
     446:	f7ff fe55 	bl	f4 <synth_readreg>
     44a:	6178      	str	r0, [r7, #20]
		read_data &= 0xFFFFFFC0; // Zero the first 6 LSBs (VCO division value - mute).
     44c:	697b      	ldr	r3, [r7, #20]
     44e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
     452:	617b      	str	r3, [r7, #20]
		read_data |= vco_divider; // This will set k which will un-mute the outputs */
     454:	697a      	ldr	r2, [r7, #20]
     456:	687b      	ldr	r3, [r7, #4]
     458:	4313      	orrs	r3, r2
     45a:	617b      	str	r3, [r7, #20]
		synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
     45c:	2301      	movs	r3, #1
     45e:	2200      	movs	r2, #0
     460:	2116      	movs	r1, #22
     462:	6978      	ldr	r0, [r7, #20]
     464:	f7ff fdcc 	bl	0 <synth_writereg>
		last_vcodiv = vco_divider;
     468:	4a16      	ldr	r2, [pc, #88]	; (4c4 <set_freq_regs+0xa4>)
     46a:	687b      	ldr	r3, [r7, #4]
     46c:	6013      	str	r3, [r2, #0]
	if (last_integer == -1 || (last_integer != integer)) {
     46e:	4b16      	ldr	r3, [pc, #88]	; (4c8 <set_freq_regs+0xa8>)
     470:	681b      	ldr	r3, [r3, #0]
     472:	f1b3 3fff 	cmp.w	r3, #4294967295
     476:	d004      	beq.n	482 <set_freq_regs+0x62>
     478:	4b13      	ldr	r3, [pc, #76]	; (4c8 <set_freq_regs+0xa8>)
     47a:	681b      	ldr	r3, [r3, #0]
     47c:	68fa      	ldr	r2, [r7, #12]
     47e:	429a      	cmp	r2, r3
     480:	d008      	beq.n	494 <set_freq_regs+0x74>
		synth_writereg(integer, INTEGER_FREQUENCY_REGISTER, 0x0, VERIFY);   // Integer register.
     482:	2301      	movs	r3, #1
     484:	2200      	movs	r2, #0
     486:	2103      	movs	r1, #3
     488:	68f8      	ldr	r0, [r7, #12]
     48a:	f7ff fdb9 	bl	0 <synth_writereg>
		last_integer = integer;
     48e:	4a0e      	ldr	r2, [pc, #56]	; (4c8 <set_freq_regs+0xa8>)
     490:	68fb      	ldr	r3, [r7, #12]
     492:	6013      	str	r3, [r2, #0]
	if (last_fraction == -1 || (last_fraction != fraction)) {
     494:	4b0d      	ldr	r3, [pc, #52]	; (4cc <set_freq_regs+0xac>)
     496:	681b      	ldr	r3, [r3, #0]
     498:	f1b3 3fff 	cmp.w	r3, #4294967295
     49c:	d004      	beq.n	4a8 <set_freq_regs+0x88>
     49e:	4b0b      	ldr	r3, [pc, #44]	; (4cc <set_freq_regs+0xac>)
     4a0:	681b      	ldr	r3, [r3, #0]
     4a2:	68ba      	ldr	r2, [r7, #8]
     4a4:	429a      	cmp	r2, r3
     4a6:	d008      	beq.n	4ba <set_freq_regs+0x9a>
		synth_writereg(fraction, FRACTIONAL_FREQUENCY_REGISTER, 0x0, VERIFY);  // Fractional register.
     4a8:	2301      	movs	r3, #1
     4aa:	2200      	movs	r2, #0
     4ac:	2104      	movs	r1, #4
     4ae:	68b8      	ldr	r0, [r7, #8]
     4b0:	f7ff fda6 	bl	0 <synth_writereg>
		last_fraction = fraction;
     4b4:	4a05      	ldr	r2, [pc, #20]	; (4cc <set_freq_regs+0xac>)
     4b6:	68bb      	ldr	r3, [r7, #8]
     4b8:	6013      	str	r3, [r2, #0]
}
     4ba:	bf00      	nop
     4bc:	3718      	adds	r7, #24
     4be:	46bd      	mov	sp, r7
     4c0:	bd80      	pop	{r7, pc}
     4c2:	bf00      	nop
     4c4:	20000004 	.word	0x20000004
     4c8:	20000008 	.word	0x20000008
     4cc:	2000000c 	.word	0x2000000c

000004d0 <print_mw_sweep_settings>:
/**
  * @brief  Print out the contents of the mw_sweep_settings structure
  * @param  None
  * @retval None
  */
  static void print_mw_sweep_settings (void) {
     4d0:	b580      	push	{r7, lr}
     4d2:	af00      	add	r7, sp, #0
  	// Check that I've populated everything
  	printf("state: %u \r\n", mw_sweep_settings.state);
     4d4:	4b1b      	ldr	r3, [pc, #108]	; (544 <print_mw_sweep_settings+0x74>)
     4d6:	781b      	ldrb	r3, [r3, #0]
     4d8:	4619      	mov	r1, r3
     4da:	481b      	ldr	r0, [pc, #108]	; (548 <print_mw_sweep_settings+0x78>)
     4dc:	f000 fe08 	bl	10f0 <__printf_veneer>
  	printf("k: %u \r\n", mw_sweep_settings.k);
     4e0:	4b18      	ldr	r3, [pc, #96]	; (544 <print_mw_sweep_settings+0x74>)
     4e2:	785b      	ldrb	r3, [r3, #1]
     4e4:	4619      	mov	r1, r3
     4e6:	4819      	ldr	r0, [pc, #100]	; (54c <print_mw_sweep_settings+0x7c>)
     4e8:	f000 fe02 	bl	10f0 <__printf_veneer>
  	printf("NINT: %lu \r\n", mw_sweep_settings.NINT);
     4ec:	4b15      	ldr	r3, [pc, #84]	; (544 <print_mw_sweep_settings+0x74>)
     4ee:	685b      	ldr	r3, [r3, #4]
     4f0:	4619      	mov	r1, r3
     4f2:	4817      	ldr	r0, [pc, #92]	; (550 <print_mw_sweep_settings+0x80>)
     4f4:	f000 fdfc 	bl	10f0 <__printf_veneer>
  	printf("NFRAC_start: %lu \r\n", mw_sweep_settings.NFRAC_start);
     4f8:	4b12      	ldr	r3, [pc, #72]	; (544 <print_mw_sweep_settings+0x74>)
     4fa:	689b      	ldr	r3, [r3, #8]
     4fc:	4619      	mov	r1, r3
     4fe:	4815      	ldr	r0, [pc, #84]	; (554 <print_mw_sweep_settings+0x84>)
     500:	f000 fdf6 	bl	10f0 <__printf_veneer>
  	printf("num_steps: %lu \r\n", mw_sweep_settings.num_steps);
     504:	4b0f      	ldr	r3, [pc, #60]	; (544 <print_mw_sweep_settings+0x74>)
     506:	68db      	ldr	r3, [r3, #12]
     508:	4619      	mov	r1, r3
     50a:	4813      	ldr	r0, [pc, #76]	; (558 <print_mw_sweep_settings+0x88>)
     50c:	f000 fdf0 	bl	10f0 <__printf_veneer>
  	printf("step_size: %lu \r\n", mw_sweep_settings.step_size);
     510:	4b0c      	ldr	r3, [pc, #48]	; (544 <print_mw_sweep_settings+0x74>)
     512:	691b      	ldr	r3, [r3, #16]
     514:	4619      	mov	r1, r3
     516:	4811      	ldr	r0, [pc, #68]	; (55c <print_mw_sweep_settings+0x8c>)
     518:	f000 fdea 	bl	10f0 <__printf_veneer>
  	printf("stabilise_time: %lu us\r\n", mw_sweep_settings.stabilise_time);
     51c:	4b09      	ldr	r3, [pc, #36]	; (544 <print_mw_sweep_settings+0x74>)
     51e:	695b      	ldr	r3, [r3, #20]
     520:	4619      	mov	r1, r3
     522:	480f      	ldr	r0, [pc, #60]	; (560 <print_mw_sweep_settings+0x90>)
     524:	f000 fde4 	bl	10f0 <__printf_veneer>
  	printf("dwell_time: %lu us\r\n", mw_sweep_settings.dwell_time);
     528:	4b06      	ldr	r3, [pc, #24]	; (544 <print_mw_sweep_settings+0x74>)
     52a:	699b      	ldr	r3, [r3, #24]
     52c:	4619      	mov	r1, r3
     52e:	480d      	ldr	r0, [pc, #52]	; (564 <print_mw_sweep_settings+0x94>)
     530:	f000 fdde 	bl	10f0 <__printf_veneer>
  	printf("current_point: %lu us\r\n", mw_sweep_settings.current_point);
     534:	4b03      	ldr	r3, [pc, #12]	; (544 <print_mw_sweep_settings+0x74>)
     536:	69db      	ldr	r3, [r3, #28]
     538:	4619      	mov	r1, r3
     53a:	480b      	ldr	r0, [pc, #44]	; (568 <print_mw_sweep_settings+0x98>)
     53c:	f000 fdd8 	bl	10f0 <__printf_veneer>
}
     540:	bf00      	nop
     542:	bd80      	pop	{r7, pc}
     544:	200005c8 	.word	0x200005c8
     548:	0801b300 	.word	0x0801b300
     54c:	0801b310 	.word	0x0801b310
     550:	0801b31c 	.word	0x0801b31c
     554:	0801b32c 	.word	0x0801b32c
     558:	0801b340 	.word	0x0801b340
     55c:	0801b354 	.word	0x0801b354
     560:	0801b368 	.word	0x0801b368
     564:	0801b384 	.word	0x0801b384
     568:	0801b39c 	.word	0x0801b39c

0000056c <calc_defined_step_MW_sweep>:
  * @param  Span in Hz
  * @param  POP cycles per step
  * @param  Number of points
  * @retval Success/failure or early termination
  */
bool calc_defined_step_MW_sweep(const double centre_freq, const double span, const uint32_t pop_cycles_per_step, const uint32_t num_points_req) {
     56c:	b580      	push	{r7, lr}
     56e:	b098      	sub	sp, #96	; 0x60
     570:	af02      	add	r7, sp, #8
     572:	ed87 0b06 	vstr	d0, [r7, #24]
     576:	ed87 1b04 	vstr	d1, [r7, #16]
     57a:	60f8      	str	r0, [r7, #12]
     57c:	60b9      	str	r1, [r7, #8]
	printf("MW sweep will have %.9g GHz centre frequency with %.5g Hz span\r\n", centre_freq/1000000000, span);
     57e:	ed97 7b06 	vldr	d7, [r7, #24]
     582:	ed9f 6b8f 	vldr	d6, [pc, #572]	; 7c0 <calc_defined_step_MW_sweep+0x254>
     586:	ee87 5b06 	vdiv.f64	d5, d7, d6
     58a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
     58e:	e9cd 2300 	strd	r2, r3, [sp]
     592:	ec53 2b15 	vmov	r2, r3, d5
     596:	4896      	ldr	r0, [pc, #600]	; (7f0 <calc_defined_step_MW_sweep+0x284>)
     598:	f000 fdaa 	bl	10f0 <__printf_veneer>
	printf("and %ld POP cycles per step\r\n", pop_cycles_per_step);
     59c:	68f9      	ldr	r1, [r7, #12]
     59e:	4895      	ldr	r0, [pc, #596]	; (7f4 <calc_defined_step_MW_sweep+0x288>)
     5a0:	f000 fda6 	bl	10f0 <__printf_veneer>

	/* Calculate start frequency */
	double start_freq = centre_freq - 0.5* span;
     5a4:	ed97 7b04 	vldr	d7, [r7, #16]
     5a8:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     5ac:	ee27 7b06 	vmul.f64	d7, d7, d6
     5b0:	ed97 6b06 	vldr	d6, [r7, #24]
     5b4:	ee36 7b47 	vsub.f64	d7, d6, d7
     5b8:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48

	/* Calculate k */
	uint8_t local_k = VCO_MAX_FREQ / start_freq;
     5bc:	ed9f 5b82 	vldr	d5, [pc, #520]	; 7c8 <calc_defined_step_MW_sweep+0x25c>
     5c0:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
     5c4:	ee85 7b06 	vdiv.f64	d7, d5, d6
     5c8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     5cc:	edc7 7a01 	vstr	s15, [r7, #4]
     5d0:	793b      	ldrb	r3, [r7, #4]
     5d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (local_k != 1) {
     5d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
     5da:	2b01      	cmp	r3, #1
     5dc:	d010      	beq.n	600 <calc_defined_step_MW_sweep+0x94>
		while (local_k > 62 || local_k % 2) {
     5de:	e004      	b.n	5ea <calc_defined_step_MW_sweep+0x7e>
			local_k --;
     5e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
     5e4:	3b01      	subs	r3, #1
     5e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		while (local_k > 62 || local_k % 2) {
     5ea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
     5ee:	2b3e      	cmp	r3, #62	; 0x3e
     5f0:	d8f6      	bhi.n	5e0 <calc_defined_step_MW_sweep+0x74>
     5f2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
     5f6:	f003 0301 	and.w	r3, r3, #1
     5fa:	b2db      	uxtb	r3, r3
     5fc:	2b00      	cmp	r3, #0
     5fe:	d1ef      	bne.n	5e0 <calc_defined_step_MW_sweep+0x74>
		}
	}
	mw_sweep_settings.k = local_k;
     600:	4a7d      	ldr	r2, [pc, #500]	; (7f8 <calc_defined_step_MW_sweep+0x28c>)
     602:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
     606:	7053      	strb	r3, [r2, #1]

	/* Extrapolate step size requested versus achievable  */
	const double step_size_Hz = span / (num_points_req - 1);
     608:	68bb      	ldr	r3, [r7, #8]
     60a:	3b01      	subs	r3, #1
     60c:	ee07 3a90 	vmov	s15, r3
     610:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     614:	ed97 5b04 	vldr	d5, [r7, #16]
     618:	ee85 7b06 	vdiv.f64	d7, d5, d6
     61c:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
	printf("Requested %ld steps, therefore step size of %.3g Hz\r\n", num_points_req, step_size_Hz);
     620:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
     624:	68b9      	ldr	r1, [r7, #8]
     626:	4875      	ldr	r0, [pc, #468]	; (7fc <calc_defined_step_MW_sweep+0x290>)
     628:	f000 fd62 	bl	10f0 <__printf_veneer>
	const double unit_step_size_Hz = REF_FREQ / (double) (local_k * (1 << 24)); //minimum step size possible
     62c:	ed9f 5b68 	vldr	d5, [pc, #416]	; 7d0 <calc_defined_step_MW_sweep+0x264>
     630:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
     634:	061b      	lsls	r3, r3, #24
     636:	ee07 3a90 	vmov	s15, r3
     63a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
     63e:	ee85 7b06 	vdiv.f64	d7, d5, d6
     642:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
	//printf("Unit step size: %.3g Hz\r\n", unit_step_size_Hz);
	mw_sweep_settings.step_size = (step_size_Hz / unit_step_size_Hz + 0.5);
     646:	ed97 5b10 	vldr	d5, [r7, #64]	; 0x40
     64a:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
     64e:	ee85 7b06 	vdiv.f64	d7, d5, d6
     652:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     656:	ee37 7b06 	vadd.f64	d7, d7, d6
     65a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     65e:	ee17 2a90 	vmov	r2, s15
     662:	4b65      	ldr	r3, [pc, #404]	; (7f8 <calc_defined_step_MW_sweep+0x28c>)
     664:	611a      	str	r2, [r3, #16]
	if (!mw_sweep_settings.step_size) { //step_size must be a positive non-zero integer
     666:	4b64      	ldr	r3, [pc, #400]	; (7f8 <calc_defined_step_MW_sweep+0x28c>)
     668:	691b      	ldr	r3, [r3, #16]
     66a:	2b00      	cmp	r3, #0
     66c:	d104      	bne.n	678 <calc_defined_step_MW_sweep+0x10c>
		mw_sweep_settings.step_size++;
     66e:	4b62      	ldr	r3, [pc, #392]	; (7f8 <calc_defined_step_MW_sweep+0x28c>)
     670:	691b      	ldr	r3, [r3, #16]
     672:	3301      	adds	r3, #1
     674:	4a60      	ldr	r2, [pc, #384]	; (7f8 <calc_defined_step_MW_sweep+0x28c>)
     676:	6113      	str	r3, [r2, #16]
	}
	const double achieved_step_size = (double) (mw_sweep_settings.step_size * unit_step_size_Hz);
     678:	4b5f      	ldr	r3, [pc, #380]	; (7f8 <calc_defined_step_MW_sweep+0x28c>)
     67a:	691b      	ldr	r3, [r3, #16]
     67c:	ee07 3a90 	vmov	s15, r3
     680:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     684:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
     688:	ee26 7b07 	vmul.f64	d7, d6, d7
     68c:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
	printf("Step size achieved: %.3g Hz\r\n", achieved_step_size);
     690:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
     694:	485a      	ldr	r0, [pc, #360]	; (800 <calc_defined_step_MW_sweep+0x294>)
     696:	f000 fd2b 	bl	10f0 <__printf_veneer>
	mw_sweep_settings.num_steps = span / achieved_step_size;
     69a:	ed97 5b04 	vldr	d5, [r7, #16]
     69e:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     6a2:	ee85 7b06 	vdiv.f64	d7, d5, d6
     6a6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     6aa:	ee17 2a90 	vmov	r2, s15
     6ae:	4b52      	ldr	r3, [pc, #328]	; (7f8 <calc_defined_step_MW_sweep+0x28c>)
     6b0:	60da      	str	r2, [r3, #12]

	/* Can avoid spurs if frequency requested can be encoded exactly  */
	start_freq = ((long)(start_freq/unit_step_size_Hz)) * unit_step_size_Hz;
     6b2:	ed97 5b12 	vldr	d5, [r7, #72]	; 0x48
     6b6:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
     6ba:	ee85 7b06 	vdiv.f64	d7, d5, d6
     6be:	eefd 7bc7 	vcvt.s32.f64	s15, d7
     6c2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
     6c6:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
     6ca:	ee26 7b07 	vmul.f64	d7, d6, d7
     6ce:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48

	/* Calculate the N division ratio, extracting the fractional and integer parts */
	const double N = ((start_freq * local_k) / REF_FREQ);
     6d2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
     6d6:	ee07 3a90 	vmov	s15, r3
     6da:	eeb8 6be7 	vcvt.f64.s32	d6, s15
     6de:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
     6e2:	ee26 6b07 	vmul.f64	d6, d6, d7
     6e6:	ed9f 5b3a 	vldr	d5, [pc, #232]	; 7d0 <calc_defined_step_MW_sweep+0x264>
     6ea:	ee86 7b05 	vdiv.f64	d7, d6, d5
     6ee:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	mw_sweep_settings.NINT = N;
     6f2:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
     6f6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     6fa:	ee17 2a90 	vmov	r2, s15
     6fe:	4b3e      	ldr	r3, [pc, #248]	; (7f8 <calc_defined_step_MW_sweep+0x28c>)
     700:	605a      	str	r2, [r3, #4]
	mw_sweep_settings.NFRAC_start = ((N - mw_sweep_settings.NINT) * (1 << 24)) + 0.5;
     702:	4b3d      	ldr	r3, [pc, #244]	; (7f8 <calc_defined_step_MW_sweep+0x28c>)
     704:	685b      	ldr	r3, [r3, #4]
     706:	ee07 3a90 	vmov	s15, r3
     70a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     70e:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
     712:	ee36 7b47 	vsub.f64	d7, d6, d7
     716:	ed9f 6b30 	vldr	d6, [pc, #192]	; 7d8 <calc_defined_step_MW_sweep+0x26c>
     71a:	ee27 7b06 	vmul.f64	d7, d7, d6
     71e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     722:	ee37 7b06 	vadd.f64	d7, d7, d6
     726:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     72a:	ee17 2a90 	vmov	r2, s15
     72e:	4b32      	ldr	r3, [pc, #200]	; (7f8 <calc_defined_step_MW_sweep+0x28c>)
     730:	609a      	str	r2, [r3, #8]

	/* Calculate dwell time at each MW frequency */
	mw_sweep_settings.stabilise_time = MW_STABILISE_TIME_US; //Global MW stabilisation time
     732:	f241 3288 	movw	r2, #5000	; 0x1388
     736:	4b30      	ldr	r3, [pc, #192]	; (7f8 <calc_defined_step_MW_sweep+0x28c>)
     738:	615a      	str	r2, [r3, #20]
	mw_sweep_settings.dwell_time = pop_cycles_per_step * POP_CYCLE_TIME_US;
     73a:	f245 22d4 	movw	r2, #21204	; 0x52d4
     73e:	68fb      	ldr	r3, [r7, #12]
     740:	fb02 f303 	mul.w	r3, r2, r3
     744:	4a2c      	ldr	r2, [pc, #176]	; (7f8 <calc_defined_step_MW_sweep+0x28c>)
     746:	6193      	str	r3, [r2, #24]

	/* Calculate the period of a sweep */
	const double period_s = (double)(MW_STABILISE_TIME_US + MW_PROCESSING_TIME + mw_sweep_settings.dwell_time) * (double)(mw_sweep_settings.num_steps)/1000000;
     748:	f241 3288 	movw	r2, #5000	; 0x1388
     74c:	f641 73cc 	movw	r3, #8140	; 0x1fcc
     750:	441a      	add	r2, r3
     752:	4b29      	ldr	r3, [pc, #164]	; (7f8 <calc_defined_step_MW_sweep+0x28c>)
     754:	699b      	ldr	r3, [r3, #24]
     756:	4413      	add	r3, r2
     758:	ee07 3a90 	vmov	s15, r3
     75c:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     760:	4b25      	ldr	r3, [pc, #148]	; (7f8 <calc_defined_step_MW_sweep+0x28c>)
     762:	68db      	ldr	r3, [r3, #12]
     764:	ee07 3a90 	vmov	s15, r3
     768:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     76c:	ee26 6b07 	vmul.f64	d6, d6, d7
     770:	ed9f 5b1b 	vldr	d5, [pc, #108]	; 7e0 <calc_defined_step_MW_sweep+0x274>
     774:	ee86 7b05 	vdiv.f64	d7, d6, d5
     778:	ed87 7b08 	vstr	d7, [r7, #32]
	printf("Sweep period: %.3g s\r\n", period_s);
     77c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
     780:	4820      	ldr	r0, [pc, #128]	; (804 <calc_defined_step_MW_sweep+0x298>)
     782:	f000 fcb5 	bl	10f0 <__printf_veneer>
	printf("%ld steps, %.3g ms each\r\n", mw_sweep_settings.num_steps, 1000* period_s / mw_sweep_settings.num_steps);
     786:	4b1c      	ldr	r3, [pc, #112]	; (7f8 <calc_defined_step_MW_sweep+0x28c>)
     788:	68d9      	ldr	r1, [r3, #12]
     78a:	ed97 7b08 	vldr	d7, [r7, #32]
     78e:	ed9f 6b16 	vldr	d6, [pc, #88]	; 7e8 <calc_defined_step_MW_sweep+0x27c>
     792:	ee27 6b06 	vmul.f64	d6, d7, d6
     796:	4b18      	ldr	r3, [pc, #96]	; (7f8 <calc_defined_step_MW_sweep+0x28c>)
     798:	68db      	ldr	r3, [r3, #12]
     79a:	ee07 3a90 	vmov	s15, r3
     79e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     7a2:	ee86 5b07 	vdiv.f64	d5, d6, d7
     7a6:	ec53 2b15 	vmov	r2, r3, d5
     7aa:	4817      	ldr	r0, [pc, #92]	; (808 <calc_defined_step_MW_sweep+0x29c>)
     7ac:	f000 fca0 	bl	10f0 <__printf_veneer>

	mw_sweep_settings.current_point = 0;
     7b0:	4b11      	ldr	r3, [pc, #68]	; (7f8 <calc_defined_step_MW_sweep+0x28c>)
     7b2:	2200      	movs	r2, #0
     7b4:	61da      	str	r2, [r3, #28]

	//print_mw_sweep_settings();
	return(true);
     7b6:	2301      	movs	r3, #1
}
     7b8:	4618      	mov	r0, r3
     7ba:	3758      	adds	r7, #88	; 0x58
     7bc:	46bd      	mov	sp, r7
     7be:	bd80      	pop	{r7, pc}
     7c0:	00000000 	.word	0x00000000
     7c4:	41cdcd65 	.word	0x41cdcd65
     7c8:	20000000 	.word	0x20000000
     7cc:	41ee8c21 	.word	0x41ee8c21
     7d0:	00000000 	.word	0x00000000
     7d4:	4187d784 	.word	0x4187d784
     7d8:	00000000 	.word	0x00000000
     7dc:	41700000 	.word	0x41700000
     7e0:	00000000 	.word	0x00000000
     7e4:	412e8480 	.word	0x412e8480
     7e8:	00000000 	.word	0x00000000
     7ec:	408f4000 	.word	0x408f4000
     7f0:	0801b3b4 	.word	0x0801b3b4
     7f4:	0801b3f8 	.word	0x0801b3f8
     7f8:	200005c8 	.word	0x200005c8
     7fc:	0801b418 	.word	0x0801b418
     800:	0801b450 	.word	0x0801b450
     804:	0801b470 	.word	0x0801b470
     808:	0801b488 	.word	0x0801b488

0000080c <calc_fixed_time_MW_sweep>:
  * @param  Centre frequency in Hz
  * @param  Span in Hz
  * @param  Sweep period in s
  * @retval Success/failure or early termination
  */
bool calc_fixed_time_MW_sweep(const double centre_freq, const double span, const double sweep_period) {
     80c:	b580      	push	{r7, lr}
     80e:	b098      	sub	sp, #96	; 0x60
     810:	af02      	add	r7, sp, #8
     812:	ed87 0b06 	vstr	d0, [r7, #24]
     816:	ed87 1b04 	vstr	d1, [r7, #16]
     81a:	ed87 2b02 	vstr	d2, [r7, #8]
	//Dwell time must be a minimum of one POP cycle
	//Dwell time should be at least 50% of sweep time
	//Number of points shall be maximised within the available time

	//uint32_t pop_cycles_per_step, const uint32_t num_points_req) {
	printf("MW sweep will have %.9g GHz centre frequency with %.5g Hz span\r\n", centre_freq/1000000000, span);
     81e:	ed97 7b06 	vldr	d7, [r7, #24]
     822:	ed9f 6ba7 	vldr	d6, [pc, #668]	; ac0 <calc_fixed_time_MW_sweep+0x2b4>
     826:	ee87 5b06 	vdiv.f64	d5, d7, d6
     82a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
     82e:	e9cd 2300 	strd	r2, r3, [sp]
     832:	ec53 2b15 	vmov	r2, r3, d5
     836:	48ae      	ldr	r0, [pc, #696]	; (af0 <calc_fixed_time_MW_sweep+0x2e4>)
     838:	f000 fc5a 	bl	10f0 <__printf_veneer>
	printf("and period of %.3g s\r\n", sweep_period);
     83c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     840:	48ac      	ldr	r0, [pc, #688]	; (af4 <calc_fixed_time_MW_sweep+0x2e8>)
     842:	f000 fc55 	bl	10f0 <__printf_veneer>

	mw_sweep_settings.dwell_time = POP_CYCLE_TIME_US; //minimum possible value of dwell_time in us
     846:	f245 22d4 	movw	r2, #21204	; 0x52d4
     84a:	4bab      	ldr	r3, [pc, #684]	; (af8 <calc_fixed_time_MW_sweep+0x2ec>)
     84c:	619a      	str	r2, [r3, #24]
	uint32_t step_time = MW_STABILISE_TIME_US + MW_PROCESSING_TIME + mw_sweep_settings.dwell_time; //minimum possible value in us
     84e:	f241 3288 	movw	r2, #5000	; 0x1388
     852:	f641 73cc 	movw	r3, #8140	; 0x1fcc
     856:	441a      	add	r2, r3
     858:	4ba7      	ldr	r3, [pc, #668]	; (af8 <calc_fixed_time_MW_sweep+0x2ec>)
     85a:	699b      	ldr	r3, [r3, #24]
     85c:	4413      	add	r3, r2
     85e:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t steps_in_sweep = sweep_period * (double)(1000000 / step_time); //maximum possible number of steps in sweep, rounded down to an integer
     860:	4aa6      	ldr	r2, [pc, #664]	; (afc <calc_fixed_time_MW_sweep+0x2f0>)
     862:	6d3b      	ldr	r3, [r7, #80]	; 0x50
     864:	fbb2 f3f3 	udiv	r3, r2, r3
     868:	ee07 3a90 	vmov	s15, r3
     86c:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     870:	ed97 7b02 	vldr	d7, [r7, #8]
     874:	ee26 7b07 	vmul.f64	d7, d6, d7
     878:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     87c:	ee17 3a90 	vmov	r3, s15
     880:	64fb      	str	r3, [r7, #76]	; 0x4c
	//printf("%lu steps in sweep, maximum\r\n", steps_in_sweep);

	/* now figure out the unit_step_size and how many steps will be taken in the span */

	/* Calculate start frequency */
	double start_freq = centre_freq - 0.5* span;
     882:	ed97 7b04 	vldr	d7, [r7, #16]
     886:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     88a:	ee27 7b06 	vmul.f64	d7, d7, d6
     88e:	ed97 6b06 	vldr	d6, [r7, #24]
     892:	ee36 7b47 	vsub.f64	d7, d6, d7
     896:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40

	/* Calculate k */
	uint8_t local_k = VCO_MAX_FREQ / start_freq;
     89a:	ed9f 5b8b 	vldr	d5, [pc, #556]	; ac8 <calc_fixed_time_MW_sweep+0x2bc>
     89e:	ed97 6b10 	vldr	d6, [r7, #64]	; 0x40
     8a2:	ee85 7b06 	vdiv.f64	d7, d5, d6
     8a6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     8aa:	edc7 7a01 	vstr	s15, [r7, #4]
     8ae:	793b      	ldrb	r3, [r7, #4]
     8b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (local_k != 1) {
     8b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
     8b8:	2b01      	cmp	r3, #1
     8ba:	d010      	beq.n	8de <calc_fixed_time_MW_sweep+0xd2>
		while (local_k > 62 || local_k % 2) {
     8bc:	e004      	b.n	8c8 <calc_fixed_time_MW_sweep+0xbc>
			local_k --;
     8be:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
     8c2:	3b01      	subs	r3, #1
     8c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		while (local_k > 62 || local_k % 2) {
     8c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
     8cc:	2b3e      	cmp	r3, #62	; 0x3e
     8ce:	d8f6      	bhi.n	8be <calc_fixed_time_MW_sweep+0xb2>
     8d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
     8d4:	f003 0301 	and.w	r3, r3, #1
     8d8:	b2db      	uxtb	r3, r3
     8da:	2b00      	cmp	r3, #0
     8dc:	d1ef      	bne.n	8be <calc_fixed_time_MW_sweep+0xb2>
		}
	}
	mw_sweep_settings.k = local_k;
     8de:	4a86      	ldr	r2, [pc, #536]	; (af8 <calc_fixed_time_MW_sweep+0x2ec>)
     8e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
     8e4:	7053      	strb	r3, [r2, #1]

	//steps should be evenly sized
	//selected step size should be an integer multiple of the unit step size
	//increase the step_size value until the sweep fits into the available period
	const double unit_step_size_Hz = REF_FREQ / (double) (local_k * (1 << 24)); //minimum step size possible
     8e6:	ed9f 5b7a 	vldr	d5, [pc, #488]	; ad0 <calc_fixed_time_MW_sweep+0x2c4>
     8ea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
     8ee:	061b      	lsls	r3, r3, #24
     8f0:	ee07 3a90 	vmov	s15, r3
     8f4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
     8f8:	ee85 7b06 	vdiv.f64	d7, d5, d6
     8fc:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
	//printf("Unit step size: %.3g Hz\r\n", unit_step_size_Hz);
	mw_sweep_settings.step_size = 1;
     900:	4b7d      	ldr	r3, [pc, #500]	; (af8 <calc_fixed_time_MW_sweep+0x2ec>)
     902:	2201      	movs	r2, #1
     904:	611a      	str	r2, [r3, #16]
	while ((mw_sweep_settings.step_size * steps_in_sweep) < (span / unit_step_size_Hz)) {
     906:	e004      	b.n	912 <calc_fixed_time_MW_sweep+0x106>
		mw_sweep_settings.step_size++;
     908:	4b7b      	ldr	r3, [pc, #492]	; (af8 <calc_fixed_time_MW_sweep+0x2ec>)
     90a:	691b      	ldr	r3, [r3, #16]
     90c:	3301      	adds	r3, #1
     90e:	4a7a      	ldr	r2, [pc, #488]	; (af8 <calc_fixed_time_MW_sweep+0x2ec>)
     910:	6113      	str	r3, [r2, #16]
	while ((mw_sweep_settings.step_size * steps_in_sweep) < (span / unit_step_size_Hz)) {
     912:	4b79      	ldr	r3, [pc, #484]	; (af8 <calc_fixed_time_MW_sweep+0x2ec>)
     914:	691b      	ldr	r3, [r3, #16]
     916:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
     918:	fb02 f303 	mul.w	r3, r2, r3
     91c:	ee07 3a90 	vmov	s15, r3
     920:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     924:	ed97 4b04 	vldr	d4, [r7, #16]
     928:	ed97 5b0e 	vldr	d5, [r7, #56]	; 0x38
     92c:	ee84 7b05 	vdiv.f64	d7, d4, d5
     930:	eeb4 6bc7 	vcmpe.f64	d6, d7
     934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     938:	d4e6      	bmi.n	908 <calc_fixed_time_MW_sweep+0xfc>
	}
	const double achieved_step_size = (double) (mw_sweep_settings.step_size * unit_step_size_Hz);
     93a:	4b6f      	ldr	r3, [pc, #444]	; (af8 <calc_fixed_time_MW_sweep+0x2ec>)
     93c:	691b      	ldr	r3, [r3, #16]
     93e:	ee07 3a90 	vmov	s15, r3
     942:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     946:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
     94a:	ee26 7b07 	vmul.f64	d7, d6, d7
     94e:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
	printf("Step size: %lu x unit step i.e. %.3g Hz\r\n", mw_sweep_settings.step_size, achieved_step_size);
     952:	4b69      	ldr	r3, [pc, #420]	; (af8 <calc_fixed_time_MW_sweep+0x2ec>)
     954:	6919      	ldr	r1, [r3, #16]
     956:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
     95a:	4869      	ldr	r0, [pc, #420]	; (b00 <calc_fixed_time_MW_sweep+0x2f4>)
     95c:	f000 fbc8 	bl	10f0 <__printf_veneer>

	//calculate number of steps in sweep and round off to integer
	mw_sweep_settings.num_steps = (span / achieved_step_size) + 0.5;
     960:	ed97 5b04 	vldr	d5, [r7, #16]
     964:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     968:	ee85 7b06 	vdiv.f64	d7, d5, d6
     96c:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     970:	ee37 7b06 	vadd.f64	d7, d7, d6
     974:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     978:	ee17 2a90 	vmov	r2, s15
     97c:	4b5e      	ldr	r3, [pc, #376]	; (af8 <calc_fixed_time_MW_sweep+0x2ec>)
     97e:	60da      	str	r2, [r3, #12]
	printf("%lu steps in sweep, %.3g ms each\r\n", mw_sweep_settings.num_steps, (1000 * sweep_period / mw_sweep_settings.num_steps));
     980:	4b5d      	ldr	r3, [pc, #372]	; (af8 <calc_fixed_time_MW_sweep+0x2ec>)
     982:	68d9      	ldr	r1, [r3, #12]
     984:	ed97 7b02 	vldr	d7, [r7, #8]
     988:	ed9f 6b53 	vldr	d6, [pc, #332]	; ad8 <calc_fixed_time_MW_sweep+0x2cc>
     98c:	ee27 6b06 	vmul.f64	d6, d7, d6
     990:	4b59      	ldr	r3, [pc, #356]	; (af8 <calc_fixed_time_MW_sweep+0x2ec>)
     992:	68db      	ldr	r3, [r3, #12]
     994:	ee07 3a90 	vmov	s15, r3
     998:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     99c:	ee86 5b07 	vdiv.f64	d5, d6, d7
     9a0:	ec53 2b15 	vmov	r2, r3, d5
     9a4:	4857      	ldr	r0, [pc, #348]	; (b04 <calc_fixed_time_MW_sweep+0x2f8>)
     9a6:	f000 fba3 	bl	10f0 <__printf_veneer>

	/* Can avoid spurs if frequency requested can be encoded exactly  */
	start_freq = ((long)(start_freq/unit_step_size_Hz)) * unit_step_size_Hz;
     9aa:	ed97 5b10 	vldr	d5, [r7, #64]	; 0x40
     9ae:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
     9b2:	ee85 7b06 	vdiv.f64	d7, d5, d6
     9b6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
     9ba:	eeb8 7be7 	vcvt.f64.s32	d7, s15
     9be:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
     9c2:	ee26 7b07 	vmul.f64	d7, d6, d7
     9c6:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40

	/* Calculate the N division ratio, extracting the fractional and integer parts */
	const double N = ((start_freq * local_k) / REF_FREQ);
     9ca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
     9ce:	ee07 3a90 	vmov	s15, r3
     9d2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
     9d6:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
     9da:	ee26 6b07 	vmul.f64	d6, d6, d7
     9de:	ed9f 5b3c 	vldr	d5, [pc, #240]	; ad0 <calc_fixed_time_MW_sweep+0x2c4>
     9e2:	ee86 7b05 	vdiv.f64	d7, d6, d5
     9e6:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	mw_sweep_settings.NINT = N;
     9ea:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
     9ee:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     9f2:	ee17 2a90 	vmov	r2, s15
     9f6:	4b40      	ldr	r3, [pc, #256]	; (af8 <calc_fixed_time_MW_sweep+0x2ec>)
     9f8:	605a      	str	r2, [r3, #4]
	mw_sweep_settings.NFRAC_start = ((N - mw_sweep_settings.NINT) * (1 << 24)) + 0.5;
     9fa:	4b3f      	ldr	r3, [pc, #252]	; (af8 <calc_fixed_time_MW_sweep+0x2ec>)
     9fc:	685b      	ldr	r3, [r3, #4]
     9fe:	ee07 3a90 	vmov	s15, r3
     a02:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     a06:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
     a0a:	ee36 7b47 	vsub.f64	d7, d6, d7
     a0e:	ed9f 6b34 	vldr	d6, [pc, #208]	; ae0 <calc_fixed_time_MW_sweep+0x2d4>
     a12:	ee27 7b06 	vmul.f64	d7, d7, d6
     a16:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     a1a:	ee37 7b06 	vadd.f64	d7, d7, d6
     a1e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     a22:	ee17 2a90 	vmov	r2, s15
     a26:	4b34      	ldr	r3, [pc, #208]	; (af8 <calc_fixed_time_MW_sweep+0x2ec>)
     a28:	609a      	str	r2, [r3, #8]

	/* Calculate the period of a sweep */
	double period_s = (double)(MW_STABILISE_TIME_US + MW_PROCESSING_TIME + mw_sweep_settings.dwell_time) * (double)(mw_sweep_settings.num_steps)/1000000;
     a2a:	f241 3288 	movw	r2, #5000	; 0x1388
     a2e:	f641 73cc 	movw	r3, #8140	; 0x1fcc
     a32:	441a      	add	r2, r3
     a34:	4b30      	ldr	r3, [pc, #192]	; (af8 <calc_fixed_time_MW_sweep+0x2ec>)
     a36:	699b      	ldr	r3, [r3, #24]
     a38:	4413      	add	r3, r2
     a3a:	ee07 3a90 	vmov	s15, r3
     a3e:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     a42:	4b2d      	ldr	r3, [pc, #180]	; (af8 <calc_fixed_time_MW_sweep+0x2ec>)
     a44:	68db      	ldr	r3, [r3, #12]
     a46:	ee07 3a90 	vmov	s15, r3
     a4a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     a4e:	ee26 6b07 	vmul.f64	d6, d6, d7
     a52:	ed9f 5b25 	vldr	d5, [pc, #148]	; ae8 <calc_fixed_time_MW_sweep+0x2dc>
     a56:	ee86 7b05 	vdiv.f64	d7, d6, d5
     a5a:	ed87 7b08 	vstr	d7, [r7, #32]
	printf("Sweep period could be reduced to %.3g s with same number of POP samples\r\n", period_s);
     a5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
     a62:	4829      	ldr	r0, [pc, #164]	; (b08 <calc_fixed_time_MW_sweep+0x2fc>)
     a64:	f000 fb44 	bl	10f0 <__printf_veneer>
	/* Increase dwell time until the sweep is just slightly longer than the sweep period requested */
	while ((double)(mw_sweep_settings.num_steps * (MW_STABILISE_TIME_US + MW_PROCESSING_TIME + mw_sweep_settings.dwell_time)/1000000) < sweep_period) {
     a68:	e004      	b.n	a74 <calc_fixed_time_MW_sweep+0x268>
		mw_sweep_settings.dwell_time++;
     a6a:	4b23      	ldr	r3, [pc, #140]	; (af8 <calc_fixed_time_MW_sweep+0x2ec>)
     a6c:	699b      	ldr	r3, [r3, #24]
     a6e:	3301      	adds	r3, #1
     a70:	4a21      	ldr	r2, [pc, #132]	; (af8 <calc_fixed_time_MW_sweep+0x2ec>)
     a72:	6193      	str	r3, [r2, #24]
	while ((double)(mw_sweep_settings.num_steps * (MW_STABILISE_TIME_US + MW_PROCESSING_TIME + mw_sweep_settings.dwell_time)/1000000) < sweep_period) {
     a74:	4b20      	ldr	r3, [pc, #128]	; (af8 <calc_fixed_time_MW_sweep+0x2ec>)
     a76:	68db      	ldr	r3, [r3, #12]
     a78:	f241 3188 	movw	r1, #5000	; 0x1388
     a7c:	f641 72cc 	movw	r2, #8140	; 0x1fcc
     a80:	4411      	add	r1, r2
     a82:	4a1d      	ldr	r2, [pc, #116]	; (af8 <calc_fixed_time_MW_sweep+0x2ec>)
     a84:	6992      	ldr	r2, [r2, #24]
     a86:	440a      	add	r2, r1
     a88:	fb02 f303 	mul.w	r3, r2, r3
     a8c:	4a1f      	ldr	r2, [pc, #124]	; (b0c <calc_fixed_time_MW_sweep+0x300>)
     a8e:	fba2 2303 	umull	r2, r3, r2, r3
     a92:	0c9b      	lsrs	r3, r3, #18
     a94:	ee07 3a90 	vmov	s15, r3
     a98:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     a9c:	ed97 6b02 	vldr	d6, [r7, #8]
     aa0:	eeb4 6bc7 	vcmpe.f64	d6, d7
     aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     aa8:	dcdf      	bgt.n	a6a <calc_fixed_time_MW_sweep+0x25e>
	}
	//Double check of the sweep period selected
	//period_s = (double)(MW_STABILISE_TIME_US + MW_PROCESSING_TIME + mw_sweep_settings.dwell_time) * (double)(mw_sweep_settings.num_steps)/1000000;
	//printf("Final calculated sweep period: %.3g s\r\n", period_s);

	mw_sweep_settings.current_point = 0;
     aaa:	4b13      	ldr	r3, [pc, #76]	; (af8 <calc_fixed_time_MW_sweep+0x2ec>)
     aac:	2200      	movs	r2, #0
     aae:	61da      	str	r2, [r3, #28]
	//print_mw_sweep_settings();
	return(true);
     ab0:	2301      	movs	r3, #1
}
     ab2:	4618      	mov	r0, r3
     ab4:	3758      	adds	r7, #88	; 0x58
     ab6:	46bd      	mov	sp, r7
     ab8:	bd80      	pop	{r7, pc}
     aba:	bf00      	nop
     abc:	f3af 8000 	nop.w
     ac0:	00000000 	.word	0x00000000
     ac4:	41cdcd65 	.word	0x41cdcd65
     ac8:	20000000 	.word	0x20000000
     acc:	41ee8c21 	.word	0x41ee8c21
     ad0:	00000000 	.word	0x00000000
     ad4:	4187d784 	.word	0x4187d784
     ad8:	00000000 	.word	0x00000000
     adc:	408f4000 	.word	0x408f4000
     ae0:	00000000 	.word	0x00000000
     ae4:	41700000 	.word	0x41700000
     ae8:	00000000 	.word	0x00000000
     aec:	412e8480 	.word	0x412e8480
     af0:	0801b3b4 	.word	0x0801b3b4
     af4:	0801b4a4 	.word	0x0801b4a4
     af8:	200005c8 	.word	0x200005c8
     afc:	000f4240 	.word	0x000f4240
     b00:	0801b4bc 	.word	0x0801b4bc
     b04:	0801b4e8 	.word	0x0801b4e8
     b08:	0801b50c 	.word	0x0801b50c
     b0c:	431bde83 	.word	0x431bde83

00000b10 <start_MW_sweep>:

/**
  * @brief  Starts a MW sweep
  * @retval Success/failure
  */
const bool start_MW_sweep(void) {
     b10:	b580      	push	{r7, lr}
     b12:	af00      	add	r7, sp, #0
	//uses settings from the mw_sweep_settings structure
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET); // Assume MW lock, the LED will be disabled if lock fails.
     b14:	2201      	movs	r2, #1
     b16:	2102      	movs	r1, #2
     b18:	4811      	ldr	r0, [pc, #68]	; (b60 <start_MW_sweep+0x50>)
     b1a:	f000 fb0d 	bl	1138 <__HAL_GPIO_WritePin_veneer>

	#ifdef MW_VERBOSE
		printf("Setting trigger output low \r\n");
	#endif //MW_VERBOSE

	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); //Sets MW_invalid pin high
     b1e:	2201      	movs	r2, #1
     b20:	2102      	movs	r1, #2
     b22:	4810      	ldr	r0, [pc, #64]	; (b64 <start_MW_sweep+0x54>)
     b24:	f000 fb08 	bl	1138 <__HAL_GPIO_WritePin_veneer>
//	set_frequency(mw_sweep_settings.NINT, mw_sweep_settings.NFRAC_start, mw_sweep_settings.k, MANUAL_MUTE); //program initial MW frequency
	set_freq_regs(mw_sweep_settings.NINT, mw_sweep_settings.NFRAC_start, mw_sweep_settings.k); //program initial MW frequency
     b28:	4b0f      	ldr	r3, [pc, #60]	; (b68 <start_MW_sweep+0x58>)
     b2a:	685b      	ldr	r3, [r3, #4]
     b2c:	4a0e      	ldr	r2, [pc, #56]	; (b68 <start_MW_sweep+0x58>)
     b2e:	6891      	ldr	r1, [r2, #8]
     b30:	4a0d      	ldr	r2, [pc, #52]	; (b68 <start_MW_sweep+0x58>)
     b32:	7852      	ldrb	r2, [r2, #1]
     b34:	4618      	mov	r0, r3
     b36:	f7ff fc73 	bl	420 <set_freq_regs>
	mw_sweep_settings.state = MW_STABILISING; //waiting for MW output to stabilise
     b3a:	4b0b      	ldr	r3, [pc, #44]	; (b68 <start_MW_sweep+0x58>)
     b3c:	2202      	movs	r2, #2
     b3e:	701a      	strb	r2, [r3, #0]
	mw_sweep_settings.current_point = 0; //currently on at start of ramp i.e. point 0
     b40:	4b09      	ldr	r3, [pc, #36]	; (b68 <start_MW_sweep+0x58>)
     b42:	2200      	movs	r2, #0
     b44:	61da      	str	r2, [r3, #28]
	/* Output used for triggering external scope */
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET); // Sets trigger output low
     b46:	2200      	movs	r2, #0
     b48:	2101      	movs	r1, #1
     b4a:	4808      	ldr	r0, [pc, #32]	; (b6c <start_MW_sweep+0x5c>)
     b4c:	f000 faf4 	bl	1138 <__HAL_GPIO_WritePin_veneer>
	start_timer(MW_TIMER); //reset MW_timer and start counting
     b50:	4b07      	ldr	r3, [pc, #28]	; (b70 <start_MW_sweep+0x60>)
     b52:	681b      	ldr	r3, [r3, #0]
     b54:	4618      	mov	r0, r3
     b56:	f000 f9bd 	bl	ed4 <start_timer>
	return(true);
     b5a:	2301      	movs	r3, #1
}
     b5c:	4618      	mov	r0, r3
     b5e:	bd80      	pop	{r7, pc}
     b60:	58021000 	.word	0x58021000
     b64:	58020400 	.word	0x58020400
     b68:	200005c8 	.word	0x200005c8
     b6c:	58021800 	.word	0x58021800
     b70:	2000001c 	.word	0x2000001c

00000b74 <MW_update>:

/**
  * @brief  Checks MW status to see if a timer has elapsed and if frequency needs changing.
  * @retval True if an action was taken
  */
const bool MW_update(void) {
     b74:	b580      	push	{r7, lr}
     b76:	b082      	sub	sp, #8
     b78:	af00      	add	r7, sp, #0
	uint8_t local_copy_of_MW_state = mw_sweep_settings.state; //hack to make switch statement behave
     b7a:	4b49      	ldr	r3, [pc, #292]	; (ca0 <MW_update+0x12c>)
     b7c:	781b      	ldrb	r3, [r3, #0]
     b7e:	71bb      	strb	r3, [r7, #6]
	//switch (mw_sweep_settings.state)
	bool action_taken = false;
     b80:	2300      	movs	r3, #0
     b82:	71fb      	strb	r3, [r7, #7]
	switch (local_copy_of_MW_state)
     b84:	79bb      	ldrb	r3, [r7, #6]
     b86:	2b03      	cmp	r3, #3
     b88:	d029      	beq.n	bde <MW_update+0x6a>
     b8a:	2b03      	cmp	r3, #3
     b8c:	dc75      	bgt.n	c7a <MW_update+0x106>
     b8e:	2b01      	cmp	r3, #1
     b90:	dc02      	bgt.n	b98 <MW_update+0x24>
     b92:	2b00      	cmp	r3, #0
     b94:	da7d      	bge.n	c92 <MW_update+0x11e>
     b96:	e070      	b.n	c7a <MW_update+0x106>
     b98:	2b02      	cmp	r3, #2
     b9a:	d16e      	bne.n	c7a <MW_update+0x106>
		case MW_STOPPED:
		case MW_FIXED_FREQ:
			break; //no action to take

		case MW_STABILISING: //waiting for MW output to stabilise
			if (check_timer(MW_TIMER) < MW_STABILISE_TIME_US) return(false); //Still waiting, no action taken
     b9c:	4b41      	ldr	r3, [pc, #260]	; (ca4 <MW_update+0x130>)
     b9e:	681b      	ldr	r3, [r3, #0]
     ba0:	4618      	mov	r0, r3
     ba2:	f000 f9c7 	bl	f34 <check_timer>
     ba6:	4603      	mov	r3, r0
     ba8:	f241 3288 	movw	r2, #5000	; 0x1388
     bac:	4293      	cmp	r3, r2
     bae:	d201      	bcs.n	bb4 <MW_update+0x40>
     bb0:	2300      	movs	r3, #0
     bb2:	e070      	b.n	c96 <MW_update+0x122>
			//Otherwise MW stabilisation timer has elapsed
			stop_timer(MW_TIMER);
     bb4:	4b3b      	ldr	r3, [pc, #236]	; (ca4 <MW_update+0x130>)
     bb6:	681b      	ldr	r3, [r3, #0]
     bb8:	4618      	mov	r0, r3
     bba:	f000 f9a9 	bl	f10 <stop_timer>
			HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); //Sets MW_invalid pin low as MW now stable
     bbe:	2200      	movs	r2, #0
     bc0:	2102      	movs	r1, #2
     bc2:	4839      	ldr	r0, [pc, #228]	; (ca8 <MW_update+0x134>)
     bc4:	f000 fab8 	bl	1138 <__HAL_GPIO_WritePin_veneer>
			mw_sweep_settings.state = MW_DWELL;
     bc8:	4b35      	ldr	r3, [pc, #212]	; (ca0 <MW_update+0x12c>)
     bca:	2203      	movs	r2, #3
     bcc:	701a      	strb	r2, [r3, #0]
			start_timer(MW_TIMER); //Restart timer for DWELL time
     bce:	4b35      	ldr	r3, [pc, #212]	; (ca4 <MW_update+0x130>)
     bd0:	681b      	ldr	r3, [r3, #0]
     bd2:	4618      	mov	r0, r3
     bd4:	f000 f97e 	bl	ed4 <start_timer>
			action_taken = true;
     bd8:	2301      	movs	r3, #1
     bda:	71fb      	strb	r3, [r7, #7]
			break;
     bdc:	e05a      	b.n	c94 <MW_update+0x120>

		case MW_DWELL: //valid MW output waiting for end of dwell time
			if (check_timer(MW_TIMER) < mw_sweep_settings.dwell_time) return(false); //Still waiting
     bde:	4b31      	ldr	r3, [pc, #196]	; (ca4 <MW_update+0x130>)
     be0:	681b      	ldr	r3, [r3, #0]
     be2:	4618      	mov	r0, r3
     be4:	f000 f9a6 	bl	f34 <check_timer>
     be8:	4602      	mov	r2, r0
     bea:	4b2d      	ldr	r3, [pc, #180]	; (ca0 <MW_update+0x12c>)
     bec:	699b      	ldr	r3, [r3, #24]
     bee:	429a      	cmp	r2, r3
     bf0:	d201      	bcs.n	bf6 <MW_update+0x82>
     bf2:	2300      	movs	r3, #0
     bf4:	e04f      	b.n	c96 <MW_update+0x122>
			//Otherwise dwell timer has elapsed
			action_taken = true;
     bf6:	2301      	movs	r3, #1
     bf8:	71fb      	strb	r3, [r7, #7]
			stop_timer(MW_TIMER);
     bfa:	4b2a      	ldr	r3, [pc, #168]	; (ca4 <MW_update+0x130>)
     bfc:	681b      	ldr	r3, [r3, #0]
     bfe:	4618      	mov	r0, r3
     c00:	f000 f986 	bl	f10 <stop_timer>
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //toggles red LED
     c04:	f44f 4180 	mov.w	r1, #16384	; 0x4000
     c08:	4827      	ldr	r0, [pc, #156]	; (ca8 <MW_update+0x134>)
     c0a:	f000 fa81 	bl	1110 <__HAL_GPIO_TogglePin_veneer>
			HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); //Sets MW_invalid pin high as about to change frequency
     c0e:	2201      	movs	r2, #1
     c10:	2102      	movs	r1, #2
     c12:	4825      	ldr	r0, [pc, #148]	; (ca8 <MW_update+0x134>)
     c14:	f000 fa90 	bl	1138 <__HAL_GPIO_WritePin_veneer>
			mw_sweep_settings.state = MW_STABILISING;
     c18:	4b21      	ldr	r3, [pc, #132]	; (ca0 <MW_update+0x12c>)
     c1a:	2202      	movs	r2, #2
     c1c:	701a      	strb	r2, [r3, #0]
			if (mw_sweep_settings.current_point == mw_sweep_settings.num_steps) {
     c1e:	4b20      	ldr	r3, [pc, #128]	; (ca0 <MW_update+0x12c>)
     c20:	69da      	ldr	r2, [r3, #28]
     c22:	4b1f      	ldr	r3, [pc, #124]	; (ca0 <MW_update+0x12c>)
     c24:	68db      	ldr	r3, [r3, #12]
     c26:	429a      	cmp	r2, r3
     c28:	d10a      	bne.n	c40 <MW_update+0xcc>
				/* All steps completed, tidy up and restart next sweep */
				HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
     c2a:	2201      	movs	r2, #1
     c2c:	2101      	movs	r1, #1
     c2e:	481f      	ldr	r0, [pc, #124]	; (cac <MW_update+0x138>)
     c30:	f000 fa82 	bl	1138 <__HAL_GPIO_WritePin_veneer>
				printf("Sweep complete\r\n");
     c34:	481e      	ldr	r0, [pc, #120]	; (cb0 <MW_update+0x13c>)
     c36:	f000 fa67 	bl	1108 <__puts_veneer>
				start_MW_sweep(); //restart the MW sweep
     c3a:	f7ff ff69 	bl	b10 <start_MW_sweep>
						printf("Failure to program value to DAC \r\n");
						Error_Handler();
					}
				#endif //RAMP_DAC
			}
			break;
     c3e:	e029      	b.n	c94 <MW_update+0x120>
				mw_sweep_settings.current_point++; //increment point counter
     c40:	4b17      	ldr	r3, [pc, #92]	; (ca0 <MW_update+0x12c>)
     c42:	69db      	ldr	r3, [r3, #28]
     c44:	3301      	adds	r3, #1
     c46:	4a16      	ldr	r2, [pc, #88]	; (ca0 <MW_update+0x12c>)
     c48:	61d3      	str	r3, [r2, #28]
				uint32_t local_NFRAC = mw_sweep_settings.NFRAC_start + mw_sweep_settings.step_size * mw_sweep_settings.current_point;
     c4a:	4b15      	ldr	r3, [pc, #84]	; (ca0 <MW_update+0x12c>)
     c4c:	689a      	ldr	r2, [r3, #8]
     c4e:	4b14      	ldr	r3, [pc, #80]	; (ca0 <MW_update+0x12c>)
     c50:	691b      	ldr	r3, [r3, #16]
     c52:	4913      	ldr	r1, [pc, #76]	; (ca0 <MW_update+0x12c>)
     c54:	69c9      	ldr	r1, [r1, #28]
     c56:	fb01 f303 	mul.w	r3, r1, r3
     c5a:	4413      	add	r3, r2
     c5c:	603b      	str	r3, [r7, #0]
				set_freq_regs(mw_sweep_settings.NINT, local_NFRAC, mw_sweep_settings.k); //program new MW frequency
     c5e:	4b10      	ldr	r3, [pc, #64]	; (ca0 <MW_update+0x12c>)
     c60:	685b      	ldr	r3, [r3, #4]
     c62:	4a0f      	ldr	r2, [pc, #60]	; (ca0 <MW_update+0x12c>)
     c64:	7852      	ldrb	r2, [r2, #1]
     c66:	6839      	ldr	r1, [r7, #0]
     c68:	4618      	mov	r0, r3
     c6a:	f7ff fbd9 	bl	420 <set_freq_regs>
				start_timer(MW_TIMER); //Restart timer for MW stabilisation time
     c6e:	4b0d      	ldr	r3, [pc, #52]	; (ca4 <MW_update+0x130>)
     c70:	681b      	ldr	r3, [r3, #0]
     c72:	4618      	mov	r0, r3
     c74:	f000 f92e 	bl	ed4 <start_timer>
			break;
     c78:	e00c      	b.n	c94 <MW_update+0x120>

		default: // Other state
	       printf("MW_update has detected illegal state: %u \r\n", mw_sweep_settings.state);
     c7a:	4b09      	ldr	r3, [pc, #36]	; (ca0 <MW_update+0x12c>)
     c7c:	781b      	ldrb	r3, [r3, #0]
     c7e:	4619      	mov	r1, r3
     c80:	480c      	ldr	r0, [pc, #48]	; (cb4 <MW_update+0x140>)
     c82:	f000 fa35 	bl	10f0 <__printf_veneer>
	       printf("local version: %u \r\n", local_copy_of_MW_state);
     c86:	79bb      	ldrb	r3, [r7, #6]
     c88:	4619      	mov	r1, r3
     c8a:	480b      	ldr	r0, [pc, #44]	; (cb8 <MW_update+0x144>)
     c8c:	f000 fa30 	bl	10f0 <__printf_veneer>
     c90:	e000      	b.n	c94 <MW_update+0x120>
			break; //no action to take
     c92:	bf00      	nop
	}
    return(action_taken);
     c94:	79fb      	ldrb	r3, [r7, #7]
}
     c96:	4618      	mov	r0, r3
     c98:	3708      	adds	r7, #8
     c9a:	46bd      	mov	sp, r7
     c9c:	bd80      	pop	{r7, pc}
     c9e:	bf00      	nop
     ca0:	200005c8 	.word	0x200005c8
     ca4:	2000001c 	.word	0x2000001c
     ca8:	58020400 	.word	0x58020400
     cac:	58021800 	.word	0x58021800
     cb0:	0801b558 	.word	0x0801b558
     cb4:	0801b568 	.word	0x0801b568
     cb8:	0801b594 	.word	0x0801b594

00000cbc <MW_frequency_toggle>:


/* Function to check MW settling time
 * Toggles between two MW frequencies
 */
void MW_frequency_toggle (const double f_one, const double f_two) {
     cbc:	b580      	push	{r7, lr}
     cbe:	b090      	sub	sp, #64	; 0x40
     cc0:	af02      	add	r7, sp, #8
     cc2:	ed87 0b02 	vstr	d0, [r7, #8]
     cc6:	ed87 1b00 	vstr	d1, [r7]
	printf("MW frequency toggling experiment\r\n");
     cca:	486b      	ldr	r0, [pc, #428]	; (e78 <MW_frequency_toggle+0x1bc>)
     ccc:	f000 fa1c 	bl	1108 <__puts_veneer>
	printf("Toggling between %.9g and %.9g GHz\r\n", f_one/1000000000, f_two/1000000000);
     cd0:	ed97 7b02 	vldr	d7, [r7, #8]
     cd4:	ed9f 6b60 	vldr	d6, [pc, #384]	; e58 <MW_frequency_toggle+0x19c>
     cd8:	ee87 4b06 	vdiv.f64	d4, d7, d6
     cdc:	ed97 6b00 	vldr	d6, [r7]
     ce0:	ed9f 5b5d 	vldr	d5, [pc, #372]	; e58 <MW_frequency_toggle+0x19c>
     ce4:	ee86 7b05 	vdiv.f64	d7, d6, d5
     ce8:	ed8d 7b00 	vstr	d7, [sp]
     cec:	ec53 2b14 	vmov	r2, r3, d4
     cf0:	4862      	ldr	r0, [pc, #392]	; (e7c <MW_frequency_toggle+0x1c0>)
     cf2:	f000 f9fd 	bl	10f0 <__printf_veneer>

	/* For the k divider we need to find the smallest even integer or use a max of 62*/
	uint32_t k_one = VCO_MAX_FREQ / f_one;
     cf6:	ed9f 5b5a 	vldr	d5, [pc, #360]	; e60 <MW_frequency_toggle+0x1a4>
     cfa:	ed97 6b02 	vldr	d6, [r7, #8]
     cfe:	ee85 7b06 	vdiv.f64	d7, d5, d6
     d02:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     d06:	ee17 3a90 	vmov	r3, s15
     d0a:	637b      	str	r3, [r7, #52]	; 0x34
	if (k_one != 1) {
     d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     d0e:	2b01      	cmp	r3, #1
     d10:	d00b      	beq.n	d2a <MW_frequency_toggle+0x6e>
		while (k_one > 62 || k_one % 2) {
     d12:	e002      	b.n	d1a <MW_frequency_toggle+0x5e>
			k_one--;
     d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     d16:	3b01      	subs	r3, #1
     d18:	637b      	str	r3, [r7, #52]	; 0x34
		while (k_one > 62 || k_one % 2) {
     d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     d1c:	2b3e      	cmp	r3, #62	; 0x3e
     d1e:	d8f9      	bhi.n	d14 <MW_frequency_toggle+0x58>
     d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     d22:	f003 0301 	and.w	r3, r3, #1
     d26:	2b00      	cmp	r3, #0
     d28:	d1f4      	bne.n	d14 <MW_frequency_toggle+0x58>
		}
	}
	uint32_t k_two = VCO_MAX_FREQ / f_two;
     d2a:	ed9f 5b4d 	vldr	d5, [pc, #308]	; e60 <MW_frequency_toggle+0x1a4>
     d2e:	ed97 6b00 	vldr	d6, [r7]
     d32:	ee85 7b06 	vdiv.f64	d7, d5, d6
     d36:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     d3a:	ee17 3a90 	vmov	r3, s15
     d3e:	633b      	str	r3, [r7, #48]	; 0x30
	if (k_two != 1) {
     d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     d42:	2b01      	cmp	r3, #1
     d44:	d00b      	beq.n	d5e <MW_frequency_toggle+0xa2>
		while (k_two > 62 || k_two % 2) {
     d46:	e002      	b.n	d4e <MW_frequency_toggle+0x92>
			k_two--;
     d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     d4a:	3b01      	subs	r3, #1
     d4c:	633b      	str	r3, [r7, #48]	; 0x30
		while (k_two > 62 || k_two % 2) {
     d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     d50:	2b3e      	cmp	r3, #62	; 0x3e
     d52:	d8f9      	bhi.n	d48 <MW_frequency_toggle+0x8c>
     d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     d56:	f003 0301 	and.w	r3, r3, #1
     d5a:	2b00      	cmp	r3, #0
     d5c:	d1f4      	bne.n	d48 <MW_frequency_toggle+0x8c>
		}
	}

	const double N_one = ((f_one * k_one) / REF_FREQ);
     d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     d60:	ee07 3a90 	vmov	s15, r3
     d64:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     d68:	ed97 7b02 	vldr	d7, [r7, #8]
     d6c:	ee26 6b07 	vmul.f64	d6, d6, d7
     d70:	ed9f 5b3d 	vldr	d5, [pc, #244]	; e68 <MW_frequency_toggle+0x1ac>
     d74:	ee86 7b05 	vdiv.f64	d7, d6, d5
     d78:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	const double N_two = ((f_two * k_two) / REF_FREQ);
     d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     d7e:	ee07 3a90 	vmov	s15, r3
     d82:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     d86:	ed97 7b00 	vldr	d7, [r7]
     d8a:	ee26 6b07 	vmul.f64	d6, d6, d7
     d8e:	ed9f 5b36 	vldr	d5, [pc, #216]	; e68 <MW_frequency_toggle+0x1ac>
     d92:	ee86 7b05 	vdiv.f64	d7, d6, d5
     d96:	ed87 7b08 	vstr	d7, [r7, #32]

	/* Extract the fractional and integer parts */
	const uint32_t N_one_INT = N_one;
     d9a:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
     d9e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     da2:	ee17 3a90 	vmov	r3, s15
     da6:	61fb      	str	r3, [r7, #28]
	const uint32_t N_one_FRAC = ((N_one - N_one_INT) * (1 << 24)) + 0.5;
     da8:	69fb      	ldr	r3, [r7, #28]
     daa:	ee07 3a90 	vmov	s15, r3
     dae:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     db2:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
     db6:	ee36 7b47 	vsub.f64	d7, d6, d7
     dba:	ed9f 6b2d 	vldr	d6, [pc, #180]	; e70 <MW_frequency_toggle+0x1b4>
     dbe:	ee27 7b06 	vmul.f64	d7, d7, d6
     dc2:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     dc6:	ee37 7b06 	vadd.f64	d7, d7, d6
     dca:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     dce:	ee17 3a90 	vmov	r3, s15
     dd2:	61bb      	str	r3, [r7, #24]
	const uint32_t N_two_INT = N_two;
     dd4:	ed97 7b08 	vldr	d7, [r7, #32]
     dd8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     ddc:	ee17 3a90 	vmov	r3, s15
     de0:	617b      	str	r3, [r7, #20]
	const uint32_t N_two_FRAC = ((N_two - N_two_INT) * (1 << 24)) + 0.5;
     de2:	697b      	ldr	r3, [r7, #20]
     de4:	ee07 3a90 	vmov	s15, r3
     de8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     dec:	ed97 6b08 	vldr	d6, [r7, #32]
     df0:	ee36 7b47 	vsub.f64	d7, d6, d7
     df4:	ed9f 6b1e 	vldr	d6, [pc, #120]	; e70 <MW_frequency_toggle+0x1b4>
     df8:	ee27 7b06 	vmul.f64	d7, d7, d6
     dfc:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     e00:	ee37 7b06 	vadd.f64	d7, d7, d6
     e04:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     e08:	ee17 3a90 	vmov	r3, s15
     e0c:	613b      	str	r3, [r7, #16]

	while (1) {
//	set_frequency(N_one_INT, N_one_FRAC, k_one, MANUAL_MUTE); //Program necessary values for f_one
	set_freq_regs(N_one_INT, N_one_FRAC, k_one); //Program necessary values for f_one
     e0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     e10:	69b9      	ldr	r1, [r7, #24]
     e12:	69f8      	ldr	r0, [r7, #28]
     e14:	f7ff fb04 	bl	420 <set_freq_regs>
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET); // Sets trigger output low
     e18:	2200      	movs	r2, #0
     e1a:	2101      	movs	r1, #1
     e1c:	4818      	ldr	r0, [pc, #96]	; (e80 <MW_frequency_toggle+0x1c4>)
     e1e:	f000 f98b 	bl	1138 <__HAL_GPIO_WritePin_veneer>
	timer_delay(SLOW_TIMER, 1000); //100ms delay
     e22:	4b18      	ldr	r3, [pc, #96]	; (e84 <MW_frequency_toggle+0x1c8>)
     e24:	681b      	ldr	r3, [r3, #0]
     e26:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
     e2a:	4618      	mov	r0, r3
     e2c:	f000 f88e 	bl	f4c <timer_delay>
//	set_frequency(N_two_INT, N_two_FRAC, k_two, MANUAL_MUTE); //Program necessary values for f_two
	set_freq_regs(N_two_INT, N_two_FRAC, k_two); //Program necessary values for f_two
     e30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     e32:	6939      	ldr	r1, [r7, #16]
     e34:	6978      	ldr	r0, [r7, #20]
     e36:	f7ff faf3 	bl	420 <set_freq_regs>
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
     e3a:	2201      	movs	r2, #1
     e3c:	2101      	movs	r1, #1
     e3e:	4810      	ldr	r0, [pc, #64]	; (e80 <MW_frequency_toggle+0x1c4>)
     e40:	f000 f97a 	bl	1138 <__HAL_GPIO_WritePin_veneer>
	timer_delay(SLOW_TIMER, 1000); //100ms delay
     e44:	4b0f      	ldr	r3, [pc, #60]	; (e84 <MW_frequency_toggle+0x1c8>)
     e46:	681b      	ldr	r3, [r3, #0]
     e48:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
     e4c:	4618      	mov	r0, r3
     e4e:	f000 f87d 	bl	f4c <timer_delay>
	set_freq_regs(N_one_INT, N_one_FRAC, k_one); //Program necessary values for f_one
     e52:	e7dc      	b.n	e0e <MW_frequency_toggle+0x152>
     e54:	f3af 8000 	nop.w
     e58:	00000000 	.word	0x00000000
     e5c:	41cdcd65 	.word	0x41cdcd65
     e60:	20000000 	.word	0x20000000
     e64:	41ee8c21 	.word	0x41ee8c21
     e68:	00000000 	.word	0x00000000
     e6c:	4187d784 	.word	0x4187d784
     e70:	00000000 	.word	0x00000000
     e74:	41700000 	.word	0x41700000
     e78:	0801b5ac 	.word	0x0801b5ac
     e7c:	0801b5d0 	.word	0x0801b5d0
     e80:	58021800 	.word	0x58021800
     e84:	20000018 	.word	0x20000018

00000e88 <set_SDO_output>:
/* Selects SDO pin connectivity/functionality
 * By default, the SDO pin will output 'Lock detect' but can be connected
 * to other internal signals. See table 2.15 of HMC835 datasheet (v04.1113)
 * for more details all options
 */
 void set_SDO_output(const uint32_t GPO_setting) {
     e88:	b580      	push	{r7, lr}
     e8a:	b084      	sub	sp, #16
     e8c:	af00      	add	r7, sp, #0
     e8e:	6078      	str	r0, [r7, #4]
	//Default output on SDO pin is 'Lock detect output', value 0x01
	//VCO divider is 0x0A
	//See table 2.15 of HMC835 datasheet for more details (v04.1113)
	uint32_t read_data = 0x0;
     e90:	2300      	movs	r3, #0
     e92:	60fb      	str	r3, [r7, #12]

	if (GPO_setting > 31) {
     e94:	687b      	ldr	r3, [r7, #4]
     e96:	2b1f      	cmp	r3, #31
     e98:	d904      	bls.n	ea4 <set_SDO_output+0x1c>
		printf("SDO pin value must be less that 32\r\n");
     e9a:	480d      	ldr	r0, [pc, #52]	; (ed0 <set_SDO_output+0x48>)
     e9c:	f000 f934 	bl	1108 <__puts_veneer>
		Error_Handler();
     ea0:	f000 f922 	bl	10e8 <__Error_Handler_veneer>
	}
	read_data = synth_readreg(GPO_REGISTER); // Get the current value.
     ea4:	200f      	movs	r0, #15
     ea6:	f7ff f925 	bl	f4 <synth_readreg>
     eaa:	60f8      	str	r0, [r7, #12]
	read_data &= 0xFFFFFFE0; // Zero the first 5 LSBs.
     eac:	68fb      	ldr	r3, [r7, #12]
     eae:	f023 031f 	bic.w	r3, r3, #31
     eb2:	60fb      	str	r3, [r7, #12]
	//read_data |= 0x0A; //Select VCO divider output
	read_data |= GPO_setting; //Select GPO output dependent on function input value
     eb4:	68fa      	ldr	r2, [r7, #12]
     eb6:	687b      	ldr	r3, [r7, #4]
     eb8:	4313      	orrs	r3, r2
     eba:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, GPO_REGISTER, 0x0, VERIFY); // Update the GPO register.
     ebc:	2301      	movs	r3, #1
     ebe:	2200      	movs	r2, #0
     ec0:	210f      	movs	r1, #15
     ec2:	68f8      	ldr	r0, [r7, #12]
     ec4:	f7ff f89c 	bl	0 <synth_writereg>
}
     ec8:	bf00      	nop
     eca:	3710      	adds	r7, #16
     ecc:	46bd      	mov	sp, r7
     ece:	bd80      	pop	{r7, pc}
     ed0:	0801b5f8 	.word	0x0801b5f8

00000ed4 <start_timer>:

/**
  * @brief  Starts a timer.
  * @retval uint32_t
  */
uint32_t start_timer(TIM_TypeDef * timer) {
     ed4:	b480      	push	{r7}
     ed6:	b083      	sub	sp, #12
     ed8:	af00      	add	r7, sp, #0
     eda:	6078      	str	r0, [r7, #4]

	timer->CR1 &= ~(TIM_CR1_CEN);
     edc:	687b      	ldr	r3, [r7, #4]
     ede:	681b      	ldr	r3, [r3, #0]
     ee0:	f023 0201 	bic.w	r2, r3, #1
     ee4:	687b      	ldr	r3, [r7, #4]
     ee6:	601a      	str	r2, [r3, #0]
	timer->EGR |= TIM_EGR_UG;  // Reset CNT and PSC
     ee8:	687b      	ldr	r3, [r7, #4]
     eea:	695b      	ldr	r3, [r3, #20]
     eec:	f043 0201 	orr.w	r2, r3, #1
     ef0:	687b      	ldr	r3, [r7, #4]
     ef2:	615a      	str	r2, [r3, #20]
	timer->CR1 |= TIM_CR1_CEN;
     ef4:	687b      	ldr	r3, [r7, #4]
     ef6:	681b      	ldr	r3, [r3, #0]
     ef8:	f043 0201 	orr.w	r2, r3, #1
     efc:	687b      	ldr	r3, [r7, #4]
     efe:	601a      	str	r2, [r3, #0]
	//printf("Started timer with returned CNT value: %ld \r\n", timer->CNT);
	return timer->CNT;
     f00:	687b      	ldr	r3, [r7, #4]
     f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
     f04:	4618      	mov	r0, r3
     f06:	370c      	adds	r7, #12
     f08:	46bd      	mov	sp, r7
     f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f0e:	4770      	bx	lr

00000f10 <stop_timer>:

/**
  * @brief  Stops a timer.
  * @retval uint32_t
  */
uint32_t stop_timer(TIM_TypeDef *timer) {
     f10:	b480      	push	{r7}
     f12:	b083      	sub	sp, #12
     f14:	af00      	add	r7, sp, #0
     f16:	6078      	str	r0, [r7, #4]

	timer->CR1 &= ~(TIM_CR1_CEN);
     f18:	687b      	ldr	r3, [r7, #4]
     f1a:	681b      	ldr	r3, [r3, #0]
     f1c:	f023 0201 	bic.w	r2, r3, #1
     f20:	687b      	ldr	r3, [r7, #4]
     f22:	601a      	str	r2, [r3, #0]
	return timer->CNT;
     f24:	687b      	ldr	r3, [r7, #4]
     f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
     f28:	4618      	mov	r0, r3
     f2a:	370c      	adds	r7, #12
     f2c:	46bd      	mov	sp, r7
     f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
     f32:	4770      	bx	lr

00000f34 <check_timer>:
/**
  * @brief  Returns timer counter value
  * @param  Timer
  * @retval Counter value
  */
uint32_t check_timer(TIM_TypeDef *timer) {
     f34:	b480      	push	{r7}
     f36:	b083      	sub	sp, #12
     f38:	af00      	add	r7, sp, #0
     f3a:	6078      	str	r0, [r7, #4]

	return timer->CNT;
     f3c:	687b      	ldr	r3, [r7, #4]
     f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
     f40:	4618      	mov	r0, r3
     f42:	370c      	adds	r7, #12
     f44:	46bd      	mov	sp, r7
     f46:	f85d 7b04 	ldr.w	r7, [sp], #4
     f4a:	4770      	bx	lr

00000f4c <timer_delay>:

/**
  * @brief  Uses a H/W timer to loop for the cycle count requested.
  */
void timer_delay(TIM_TypeDef *timer, const uint32_t delay_count){
     f4c:	b580      	push	{r7, lr}
     f4e:	b084      	sub	sp, #16
     f50:	af00      	add	r7, sp, #0
     f52:	6078      	str	r0, [r7, #4]
     f54:	6039      	str	r1, [r7, #0]

	/* Note that we don't consider overflow.
	 * MW_TIMER will take approximately 65 ms to overflow.
	 * SLOW_TIMER will take 650ms */

	uint32_t start = start_timer(timer);
     f56:	6878      	ldr	r0, [r7, #4]
     f58:	f7ff ffbc 	bl	ed4 <start_timer>
     f5c:	60f8      	str	r0, [r7, #12]
//	timer->EGR |= TIM_EGR_UG;  // Reset CNT and PSC
//	timer->CR1 |= TIM_CR1_CEN; // Enable the timer
//	uint32_t start = timer->CNT; // Get the start value of the timer

//	while((timer->CNT - start) < delay_count){} // Loop until delay_us has expired
	while(timer->CNT < delay_count){} // Loop until delay_us has expired
     f5e:	bf00      	nop
     f60:	687b      	ldr	r3, [r7, #4]
     f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     f64:	683a      	ldr	r2, [r7, #0]
     f66:	429a      	cmp	r2, r3
     f68:	d8fa      	bhi.n	f60 <timer_delay+0x14>

	stop_timer(timer);
     f6a:	6878      	ldr	r0, [r7, #4]
     f6c:	f7ff ffd0 	bl	f10 <stop_timer>
//	timer->CR1 &= ~(TIM_CR1_CEN); // Disable the timer

}
     f70:	bf00      	nop
     f72:	3710      	adds	r7, #16
     f74:	46bd      	mov	sp, r7
     f76:	bd80      	pop	{r7, pc}

00000f78 <start_pop>:

	printf("POP cycle stopped!\r\n");

}

void start_pop() {
     f78:	b580      	push	{r7, lr}
     f7a:	af00      	add	r7, sp, #0

	/* Timer A is the LASER enable, Timer E is the microwave pulse */
	if (HAL_HRTIM_WaveformOutputStart(&hhrtim,
     f7c:	f240 1103 	movw	r1, #259	; 0x103
     f80:	480f      	ldr	r0, [pc, #60]	; (fc0 <start_pop+0x48>)
     f82:	f000 f8cd 	bl	1120 <__HAL_HRTIM_WaveformOutputStart_veneer>
     f86:	4603      	mov	r3, r0
     f88:	2b00      	cmp	r3, #0
     f8a:	d004      	beq.n	f96 <start_pop+0x1e>
	HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TE1) != HAL_OK) {
		printf("Failed to start POP!\r\n");
     f8c:	480d      	ldr	r0, [pc, #52]	; (fc4 <start_pop+0x4c>)
     f8e:	f000 f8bb 	bl	1108 <__puts_veneer>
		Error_Handler();
     f92:	f000 f8a9 	bl	10e8 <__Error_Handler_veneer>
		Error_Handler();
	}

#endif

	if (HAL_HRTIM_WaveformCounterStart_IT(&hhrtim,
     f96:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
     f9a:	4809      	ldr	r0, [pc, #36]	; (fc0 <start_pop+0x48>)
     f9c:	f000 f8bc 	bl	1118 <__HAL_HRTIM_WaveformCountStart_IT_veneer>
     fa0:	4603      	mov	r3, r0
     fa2:	2b00      	cmp	r3, #0
     fa4:	d004      	beq.n	fb0 <start_pop+0x38>
	HRTIM_TIMERID_TIMER_A | HRTIM_TIMERID_TIMER_E) != HAL_OK) {
		printf("POP failure point E!\r\n");
     fa6:	4808      	ldr	r0, [pc, #32]	; (fc8 <start_pop+0x50>)
     fa8:	f000 f8ae 	bl	1108 <__puts_veneer>
		Error_Handler();
     fac:	f000 f89c 	bl	10e8 <__Error_Handler_veneer>
	}

	pop_running = true;
     fb0:	4b06      	ldr	r3, [pc, #24]	; (fcc <start_pop+0x54>)
     fb2:	2201      	movs	r2, #1
     fb4:	701a      	strb	r2, [r3, #0]

	printf("POP cycle running!\r\n");
     fb6:	4806      	ldr	r0, [pc, #24]	; (fd0 <start_pop+0x58>)
     fb8:	f000 f8a6 	bl	1108 <__puts_veneer>

}
     fbc:	bf00      	nop
     fbe:	bd80      	pop	{r7, pc}
     fc0:	2000037c 	.word	0x2000037c
     fc4:	0801b61c 	.word	0x0801b61c
     fc8:	0801b634 	.word	0x0801b634
     fcc:	200005f0 	.word	0x200005f0
     fd0:	0801b64c 	.word	0x0801b64c

00000fd4 <stop_pop>:
void stop_pop() {
     fd4:	b580      	push	{r7, lr}
     fd6:	af00      	add	r7, sp, #0
	if (HAL_HRTIM_WaveformOutputStop(&hhrtim,
     fd8:	f240 1103 	movw	r1, #259	; 0x103
     fdc:	4813      	ldr	r0, [pc, #76]	; (102c <stop_pop+0x58>)
     fde:	f000 f88b 	bl	10f8 <__HAL_HRTIM_WaveformOutputStop_veneer>
     fe2:	4603      	mov	r3, r0
     fe4:	2b00      	cmp	r3, #0
     fe6:	d004      	beq.n	ff2 <stop_pop+0x1e>
		printf("POP failure point A!\r\n");
     fe8:	4811      	ldr	r0, [pc, #68]	; (1030 <stop_pop+0x5c>)
     fea:	f000 f88d 	bl	1108 <__puts_veneer>
		Error_Handler();
     fee:	f000 f87b 	bl	10e8 <__Error_Handler_veneer>
	if (HAL_HRTIM_WaveformCounterStop_IT(&hhrtim,
     ff2:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
     ff6:	480d      	ldr	r0, [pc, #52]	; (102c <stop_pop+0x58>)
     ff8:	f000 f896 	bl	1128 <__HAL_HRTIM_WaveformCountStop_IT_veneer>
     ffc:	4603      	mov	r3, r0
     ffe:	2b00      	cmp	r3, #0
    1000:	d004      	beq.n	100c <stop_pop+0x38>
		printf("POP failure point B!\r\n");
    1002:	480c      	ldr	r0, [pc, #48]	; (1034 <stop_pop+0x60>)
    1004:	f000 f880 	bl	1108 <__puts_veneer>
		Error_Handler();
    1008:	f000 f86e 	bl	10e8 <__Error_Handler_veneer>
	pop_cycle_count = 0;
    100c:	4b0a      	ldr	r3, [pc, #40]	; (1038 <stop_pop+0x64>)
    100e:	2200      	movs	r2, #0
    1010:	601a      	str	r2, [r3, #0]
	pop_running = false;
    1012:	4b0a      	ldr	r3, [pc, #40]	; (103c <stop_pop+0x68>)
    1014:	2200      	movs	r2, #0
    1016:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0); //turn off amber LED
    1018:	2200      	movs	r2, #0
    101a:	2102      	movs	r1, #2
    101c:	4808      	ldr	r0, [pc, #32]	; (1040 <stop_pop+0x6c>)
    101e:	f000 f88b 	bl	1138 <__HAL_GPIO_WritePin_veneer>
	printf("POP cycle stopped!\r\n");
    1022:	4808      	ldr	r0, [pc, #32]	; (1044 <stop_pop+0x70>)
    1024:	f000 f870 	bl	1108 <__puts_veneer>
}
    1028:	bf00      	nop
    102a:	bd80      	pop	{r7, pc}
    102c:	2000037c 	.word	0x2000037c
    1030:	0801b660 	.word	0x0801b660
    1034:	0801b678 	.word	0x0801b678
    1038:	200005ec 	.word	0x200005ec
    103c:	200005f0 	.word	0x200005f0
    1040:	58021000 	.word	0x58021000
    1044:	0801b690 	.word	0x0801b690

00001048 <set_aom_atten>:
static void set_aom_atten(const struct AttenuatorSettings a) {
    1048:	b580      	push	{r7, lr}
    104a:	b082      	sub	sp, #8
    104c:	af00      	add	r7, sp, #0
    104e:	7138      	strb	r0, [r7, #4]
	HAL_GPIO_WritePin(ATT_LE_GPIO_Port, ATT_LE_Pin, GPIO_PIN_SET);
    1050:	2201      	movs	r2, #1
    1052:	2180      	movs	r1, #128	; 0x80
    1054:	4822      	ldr	r0, [pc, #136]	; (10e0 <set_aom_atten+0x98>)
    1056:	f000 f86f 	bl	1138 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_025_GPIO_Port, ATT_025_Pin, a.ATT_0DB25);
    105a:	793b      	ldrb	r3, [r7, #4]
    105c:	f3c3 0300 	ubfx	r3, r3, #0, #1
    1060:	b2db      	uxtb	r3, r3
    1062:	461a      	mov	r2, r3
    1064:	2140      	movs	r1, #64	; 0x40
    1066:	481e      	ldr	r0, [pc, #120]	; (10e0 <set_aom_atten+0x98>)
    1068:	f000 f866 	bl	1138 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_05_GPIO_Port, ATT_05_Pin, a.ATT_0DB5);
    106c:	793b      	ldrb	r3, [r7, #4]
    106e:	f3c3 0340 	ubfx	r3, r3, #1, #1
    1072:	b2db      	uxtb	r3, r3
    1074:	461a      	mov	r2, r3
    1076:	2120      	movs	r1, #32
    1078:	4819      	ldr	r0, [pc, #100]	; (10e0 <set_aom_atten+0x98>)
    107a:	f000 f85d 	bl	1138 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_1_GPIO_Port, ATT_1_Pin, a.ATT_1DB);
    107e:	793b      	ldrb	r3, [r7, #4]
    1080:	f3c3 0380 	ubfx	r3, r3, #2, #1
    1084:	b2db      	uxtb	r3, r3
    1086:	461a      	mov	r2, r3
    1088:	2110      	movs	r1, #16
    108a:	4815      	ldr	r0, [pc, #84]	; (10e0 <set_aom_atten+0x98>)
    108c:	f000 f854 	bl	1138 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_2_GPIO_Port, ATT_2_Pin, a.ATT_2DB);
    1090:	793b      	ldrb	r3, [r7, #4]
    1092:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    1096:	b2db      	uxtb	r3, r3
    1098:	461a      	mov	r2, r3
    109a:	2108      	movs	r1, #8
    109c:	4810      	ldr	r0, [pc, #64]	; (10e0 <set_aom_atten+0x98>)
    109e:	f000 f84b 	bl	1138 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_4_GPIO_Port, ATT_4_Pin, a.ATT_4DB);
    10a2:	793b      	ldrb	r3, [r7, #4]
    10a4:	f3c3 1300 	ubfx	r3, r3, #4, #1
    10a8:	b2db      	uxtb	r3, r3
    10aa:	461a      	mov	r2, r3
    10ac:	2104      	movs	r1, #4
    10ae:	480d      	ldr	r0, [pc, #52]	; (10e4 <set_aom_atten+0x9c>)
    10b0:	f000 f842 	bl	1138 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_8_GPIO_Port, ATT_8_Pin, a.ATT_8DB);
    10b4:	793b      	ldrb	r3, [r7, #4]
    10b6:	f3c3 1340 	ubfx	r3, r3, #5, #1
    10ba:	b2db      	uxtb	r3, r3
    10bc:	461a      	mov	r2, r3
    10be:	2110      	movs	r1, #16
    10c0:	4808      	ldr	r0, [pc, #32]	; (10e4 <set_aom_atten+0x9c>)
    10c2:	f000 f839 	bl	1138 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_16_GPIO_Port, ATT_16_Pin, a.ATT_16DB);
    10c6:	793b      	ldrb	r3, [r7, #4]
    10c8:	f3c3 1380 	ubfx	r3, r3, #6, #1
    10cc:	b2db      	uxtb	r3, r3
    10ce:	461a      	mov	r2, r3
    10d0:	2120      	movs	r1, #32
    10d2:	4804      	ldr	r0, [pc, #16]	; (10e4 <set_aom_atten+0x9c>)
    10d4:	f000 f830 	bl	1138 <__HAL_GPIO_WritePin_veneer>
}
    10d8:	bf00      	nop
    10da:	3708      	adds	r7, #8
    10dc:	46bd      	mov	sp, r7
    10de:	bd80      	pop	{r7, pc}
    10e0:	58020c00 	.word	0x58020c00
    10e4:	58021000 	.word	0x58021000

000010e8 <__Error_Handler_veneer>:
    10e8:	f85f f000 	ldr.w	pc, [pc]	; 10ec <__Error_Handler_veneer+0x4>
    10ec:	080025c9 	.word	0x080025c9

000010f0 <__printf_veneer>:
    10f0:	f85f f000 	ldr.w	pc, [pc]	; 10f4 <__printf_veneer+0x4>
    10f4:	0801904d 	.word	0x0801904d

000010f8 <__HAL_HRTIM_WaveformOutputStop_veneer>:
    10f8:	f85f f000 	ldr.w	pc, [pc]	; 10fc <__HAL_HRTIM_WaveformOutputStop_veneer+0x4>
    10fc:	080075fd 	.word	0x080075fd

00001100 <__HAL_GPIO_ReadPin_veneer>:
    1100:	f85f f000 	ldr.w	pc, [pc]	; 1104 <__HAL_GPIO_ReadPin_veneer+0x4>
    1104:	08006eb1 	.word	0x08006eb1

00001108 <__puts_veneer>:
    1108:	f85f f000 	ldr.w	pc, [pc]	; 110c <__puts_veneer+0x4>
    110c:	08019119 	.word	0x08019119

00001110 <__HAL_GPIO_TogglePin_veneer>:
    1110:	f85f f000 	ldr.w	pc, [pc]	; 1114 <__HAL_GPIO_TogglePin_veneer+0x4>
    1114:	08006f13 	.word	0x08006f13

00001118 <__HAL_HRTIM_WaveformCountStart_IT_veneer>:
    1118:	f85f f000 	ldr.w	pc, [pc]	; 111c <__HAL_HRTIM_WaveformCountStart_IT_veneer+0x4>
    111c:	08007659 	.word	0x08007659

00001120 <__HAL_HRTIM_WaveformOutputStart_veneer>:
    1120:	f85f f000 	ldr.w	pc, [pc]	; 1124 <__HAL_HRTIM_WaveformOutputStart_veneer+0x4>
    1124:	080075a3 	.word	0x080075a3

00001128 <__HAL_HRTIM_WaveformCountStop_IT_veneer>:
    1128:	f85f f000 	ldr.w	pc, [pc]	; 112c <__HAL_HRTIM_WaveformCountStop_IT_veneer+0x4>
    112c:	08007739 	.word	0x08007739

00001130 <__HAL_Delay_veneer>:
    1130:	f85f f000 	ldr.w	pc, [pc]	; 1134 <__HAL_Delay_veneer+0x4>
    1134:	08003405 	.word	0x08003405

00001138 <__HAL_GPIO_WritePin_veneer>:
    1138:	f85f f000 	ldr.w	pc, [pc]	; 113c <__HAL_GPIO_WritePin_veneer+0x4>
    113c:	08006ee1 	.word	0x08006ee1

Disassembly of section .text:

080013e0 <__do_global_dtors_aux>:
 80013e0:	b510      	push	{r4, lr}
 80013e2:	4c05      	ldr	r4, [pc, #20]	; (80013f8 <__do_global_dtors_aux+0x18>)
 80013e4:	7823      	ldrb	r3, [r4, #0]
 80013e6:	b933      	cbnz	r3, 80013f6 <__do_global_dtors_aux+0x16>
 80013e8:	4b04      	ldr	r3, [pc, #16]	; (80013fc <__do_global_dtors_aux+0x1c>)
 80013ea:	b113      	cbz	r3, 80013f2 <__do_global_dtors_aux+0x12>
 80013ec:	4804      	ldr	r0, [pc, #16]	; (8001400 <__do_global_dtors_aux+0x20>)
 80013ee:	f3af 8000 	nop.w
 80013f2:	2301      	movs	r3, #1
 80013f4:	7023      	strb	r3, [r4, #0]
 80013f6:	bd10      	pop	{r4, pc}
 80013f8:	200002e8 	.word	0x200002e8
 80013fc:	00000000 	.word	0x00000000
 8001400:	0801af50 	.word	0x0801af50

08001404 <frame_dummy>:
 8001404:	b508      	push	{r3, lr}
 8001406:	4b03      	ldr	r3, [pc, #12]	; (8001414 <frame_dummy+0x10>)
 8001408:	b11b      	cbz	r3, 8001412 <frame_dummy+0xe>
 800140a:	4903      	ldr	r1, [pc, #12]	; (8001418 <frame_dummy+0x14>)
 800140c:	4803      	ldr	r0, [pc, #12]	; (800141c <frame_dummy+0x18>)
 800140e:	f3af 8000 	nop.w
 8001412:	bd08      	pop	{r3, pc}
 8001414:	00000000 	.word	0x00000000
 8001418:	200002ec 	.word	0x200002ec
 800141c:	0801af50 	.word	0x0801af50

08001420 <memchr>:
 8001420:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8001424:	2a10      	cmp	r2, #16
 8001426:	db2b      	blt.n	8001480 <memchr+0x60>
 8001428:	f010 0f07 	tst.w	r0, #7
 800142c:	d008      	beq.n	8001440 <memchr+0x20>
 800142e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001432:	3a01      	subs	r2, #1
 8001434:	428b      	cmp	r3, r1
 8001436:	d02d      	beq.n	8001494 <memchr+0x74>
 8001438:	f010 0f07 	tst.w	r0, #7
 800143c:	b342      	cbz	r2, 8001490 <memchr+0x70>
 800143e:	d1f6      	bne.n	800142e <memchr+0xe>
 8001440:	b4f0      	push	{r4, r5, r6, r7}
 8001442:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8001446:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800144a:	f022 0407 	bic.w	r4, r2, #7
 800144e:	f07f 0700 	mvns.w	r7, #0
 8001452:	2300      	movs	r3, #0
 8001454:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8001458:	3c08      	subs	r4, #8
 800145a:	ea85 0501 	eor.w	r5, r5, r1
 800145e:	ea86 0601 	eor.w	r6, r6, r1
 8001462:	fa85 f547 	uadd8	r5, r5, r7
 8001466:	faa3 f587 	sel	r5, r3, r7
 800146a:	fa86 f647 	uadd8	r6, r6, r7
 800146e:	faa5 f687 	sel	r6, r5, r7
 8001472:	b98e      	cbnz	r6, 8001498 <memchr+0x78>
 8001474:	d1ee      	bne.n	8001454 <memchr+0x34>
 8001476:	bcf0      	pop	{r4, r5, r6, r7}
 8001478:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800147c:	f002 0207 	and.w	r2, r2, #7
 8001480:	b132      	cbz	r2, 8001490 <memchr+0x70>
 8001482:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001486:	3a01      	subs	r2, #1
 8001488:	ea83 0301 	eor.w	r3, r3, r1
 800148c:	b113      	cbz	r3, 8001494 <memchr+0x74>
 800148e:	d1f8      	bne.n	8001482 <memchr+0x62>
 8001490:	2000      	movs	r0, #0
 8001492:	4770      	bx	lr
 8001494:	3801      	subs	r0, #1
 8001496:	4770      	bx	lr
 8001498:	2d00      	cmp	r5, #0
 800149a:	bf06      	itte	eq
 800149c:	4635      	moveq	r5, r6
 800149e:	3803      	subeq	r0, #3
 80014a0:	3807      	subne	r0, #7
 80014a2:	f015 0f01 	tst.w	r5, #1
 80014a6:	d107      	bne.n	80014b8 <memchr+0x98>
 80014a8:	3001      	adds	r0, #1
 80014aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80014ae:	bf02      	ittt	eq
 80014b0:	3001      	addeq	r0, #1
 80014b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80014b6:	3001      	addeq	r0, #1
 80014b8:	bcf0      	pop	{r4, r5, r6, r7}
 80014ba:	3801      	subs	r0, #1
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop

080014c0 <strlen>:
 80014c0:	4603      	mov	r3, r0
 80014c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80014c6:	2a00      	cmp	r2, #0
 80014c8:	d1fb      	bne.n	80014c2 <strlen+0x2>
 80014ca:	1a18      	subs	r0, r3, r0
 80014cc:	3801      	subs	r0, #1
 80014ce:	4770      	bx	lr

080014d0 <__aeabi_uldivmod>:
 80014d0:	b953      	cbnz	r3, 80014e8 <__aeabi_uldivmod+0x18>
 80014d2:	b94a      	cbnz	r2, 80014e8 <__aeabi_uldivmod+0x18>
 80014d4:	2900      	cmp	r1, #0
 80014d6:	bf08      	it	eq
 80014d8:	2800      	cmpeq	r0, #0
 80014da:	bf1c      	itt	ne
 80014dc:	f04f 31ff 	movne.w	r1, #4294967295
 80014e0:	f04f 30ff 	movne.w	r0, #4294967295
 80014e4:	f000 b970 	b.w	80017c8 <__aeabi_idiv0>
 80014e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80014ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80014f0:	f000 f806 	bl	8001500 <__udivmoddi4>
 80014f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80014f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80014fc:	b004      	add	sp, #16
 80014fe:	4770      	bx	lr

08001500 <__udivmoddi4>:
 8001500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001504:	9e08      	ldr	r6, [sp, #32]
 8001506:	460d      	mov	r5, r1
 8001508:	4604      	mov	r4, r0
 800150a:	460f      	mov	r7, r1
 800150c:	2b00      	cmp	r3, #0
 800150e:	d14a      	bne.n	80015a6 <__udivmoddi4+0xa6>
 8001510:	428a      	cmp	r2, r1
 8001512:	4694      	mov	ip, r2
 8001514:	d965      	bls.n	80015e2 <__udivmoddi4+0xe2>
 8001516:	fab2 f382 	clz	r3, r2
 800151a:	b143      	cbz	r3, 800152e <__udivmoddi4+0x2e>
 800151c:	fa02 fc03 	lsl.w	ip, r2, r3
 8001520:	f1c3 0220 	rsb	r2, r3, #32
 8001524:	409f      	lsls	r7, r3
 8001526:	fa20 f202 	lsr.w	r2, r0, r2
 800152a:	4317      	orrs	r7, r2
 800152c:	409c      	lsls	r4, r3
 800152e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001532:	fa1f f58c 	uxth.w	r5, ip
 8001536:	fbb7 f1fe 	udiv	r1, r7, lr
 800153a:	0c22      	lsrs	r2, r4, #16
 800153c:	fb0e 7711 	mls	r7, lr, r1, r7
 8001540:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8001544:	fb01 f005 	mul.w	r0, r1, r5
 8001548:	4290      	cmp	r0, r2
 800154a:	d90a      	bls.n	8001562 <__udivmoddi4+0x62>
 800154c:	eb1c 0202 	adds.w	r2, ip, r2
 8001550:	f101 37ff 	add.w	r7, r1, #4294967295
 8001554:	f080 811c 	bcs.w	8001790 <__udivmoddi4+0x290>
 8001558:	4290      	cmp	r0, r2
 800155a:	f240 8119 	bls.w	8001790 <__udivmoddi4+0x290>
 800155e:	3902      	subs	r1, #2
 8001560:	4462      	add	r2, ip
 8001562:	1a12      	subs	r2, r2, r0
 8001564:	b2a4      	uxth	r4, r4
 8001566:	fbb2 f0fe 	udiv	r0, r2, lr
 800156a:	fb0e 2210 	mls	r2, lr, r0, r2
 800156e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001572:	fb00 f505 	mul.w	r5, r0, r5
 8001576:	42a5      	cmp	r5, r4
 8001578:	d90a      	bls.n	8001590 <__udivmoddi4+0x90>
 800157a:	eb1c 0404 	adds.w	r4, ip, r4
 800157e:	f100 32ff 	add.w	r2, r0, #4294967295
 8001582:	f080 8107 	bcs.w	8001794 <__udivmoddi4+0x294>
 8001586:	42a5      	cmp	r5, r4
 8001588:	f240 8104 	bls.w	8001794 <__udivmoddi4+0x294>
 800158c:	4464      	add	r4, ip
 800158e:	3802      	subs	r0, #2
 8001590:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001594:	1b64      	subs	r4, r4, r5
 8001596:	2100      	movs	r1, #0
 8001598:	b11e      	cbz	r6, 80015a2 <__udivmoddi4+0xa2>
 800159a:	40dc      	lsrs	r4, r3
 800159c:	2300      	movs	r3, #0
 800159e:	e9c6 4300 	strd	r4, r3, [r6]
 80015a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80015a6:	428b      	cmp	r3, r1
 80015a8:	d908      	bls.n	80015bc <__udivmoddi4+0xbc>
 80015aa:	2e00      	cmp	r6, #0
 80015ac:	f000 80ed 	beq.w	800178a <__udivmoddi4+0x28a>
 80015b0:	2100      	movs	r1, #0
 80015b2:	e9c6 0500 	strd	r0, r5, [r6]
 80015b6:	4608      	mov	r0, r1
 80015b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80015bc:	fab3 f183 	clz	r1, r3
 80015c0:	2900      	cmp	r1, #0
 80015c2:	d149      	bne.n	8001658 <__udivmoddi4+0x158>
 80015c4:	42ab      	cmp	r3, r5
 80015c6:	d302      	bcc.n	80015ce <__udivmoddi4+0xce>
 80015c8:	4282      	cmp	r2, r0
 80015ca:	f200 80f8 	bhi.w	80017be <__udivmoddi4+0x2be>
 80015ce:	1a84      	subs	r4, r0, r2
 80015d0:	eb65 0203 	sbc.w	r2, r5, r3
 80015d4:	2001      	movs	r0, #1
 80015d6:	4617      	mov	r7, r2
 80015d8:	2e00      	cmp	r6, #0
 80015da:	d0e2      	beq.n	80015a2 <__udivmoddi4+0xa2>
 80015dc:	e9c6 4700 	strd	r4, r7, [r6]
 80015e0:	e7df      	b.n	80015a2 <__udivmoddi4+0xa2>
 80015e2:	b902      	cbnz	r2, 80015e6 <__udivmoddi4+0xe6>
 80015e4:	deff      	udf	#255	; 0xff
 80015e6:	fab2 f382 	clz	r3, r2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f040 8090 	bne.w	8001710 <__udivmoddi4+0x210>
 80015f0:	1a8a      	subs	r2, r1, r2
 80015f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80015f6:	fa1f fe8c 	uxth.w	lr, ip
 80015fa:	2101      	movs	r1, #1
 80015fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8001600:	fb07 2015 	mls	r0, r7, r5, r2
 8001604:	0c22      	lsrs	r2, r4, #16
 8001606:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800160a:	fb0e f005 	mul.w	r0, lr, r5
 800160e:	4290      	cmp	r0, r2
 8001610:	d908      	bls.n	8001624 <__udivmoddi4+0x124>
 8001612:	eb1c 0202 	adds.w	r2, ip, r2
 8001616:	f105 38ff 	add.w	r8, r5, #4294967295
 800161a:	d202      	bcs.n	8001622 <__udivmoddi4+0x122>
 800161c:	4290      	cmp	r0, r2
 800161e:	f200 80cb 	bhi.w	80017b8 <__udivmoddi4+0x2b8>
 8001622:	4645      	mov	r5, r8
 8001624:	1a12      	subs	r2, r2, r0
 8001626:	b2a4      	uxth	r4, r4
 8001628:	fbb2 f0f7 	udiv	r0, r2, r7
 800162c:	fb07 2210 	mls	r2, r7, r0, r2
 8001630:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001634:	fb0e fe00 	mul.w	lr, lr, r0
 8001638:	45a6      	cmp	lr, r4
 800163a:	d908      	bls.n	800164e <__udivmoddi4+0x14e>
 800163c:	eb1c 0404 	adds.w	r4, ip, r4
 8001640:	f100 32ff 	add.w	r2, r0, #4294967295
 8001644:	d202      	bcs.n	800164c <__udivmoddi4+0x14c>
 8001646:	45a6      	cmp	lr, r4
 8001648:	f200 80bb 	bhi.w	80017c2 <__udivmoddi4+0x2c2>
 800164c:	4610      	mov	r0, r2
 800164e:	eba4 040e 	sub.w	r4, r4, lr
 8001652:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8001656:	e79f      	b.n	8001598 <__udivmoddi4+0x98>
 8001658:	f1c1 0720 	rsb	r7, r1, #32
 800165c:	408b      	lsls	r3, r1
 800165e:	fa22 fc07 	lsr.w	ip, r2, r7
 8001662:	ea4c 0c03 	orr.w	ip, ip, r3
 8001666:	fa05 f401 	lsl.w	r4, r5, r1
 800166a:	fa20 f307 	lsr.w	r3, r0, r7
 800166e:	40fd      	lsrs	r5, r7
 8001670:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001674:	4323      	orrs	r3, r4
 8001676:	fbb5 f8f9 	udiv	r8, r5, r9
 800167a:	fa1f fe8c 	uxth.w	lr, ip
 800167e:	fb09 5518 	mls	r5, r9, r8, r5
 8001682:	0c1c      	lsrs	r4, r3, #16
 8001684:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001688:	fb08 f50e 	mul.w	r5, r8, lr
 800168c:	42a5      	cmp	r5, r4
 800168e:	fa02 f201 	lsl.w	r2, r2, r1
 8001692:	fa00 f001 	lsl.w	r0, r0, r1
 8001696:	d90b      	bls.n	80016b0 <__udivmoddi4+0x1b0>
 8001698:	eb1c 0404 	adds.w	r4, ip, r4
 800169c:	f108 3aff 	add.w	sl, r8, #4294967295
 80016a0:	f080 8088 	bcs.w	80017b4 <__udivmoddi4+0x2b4>
 80016a4:	42a5      	cmp	r5, r4
 80016a6:	f240 8085 	bls.w	80017b4 <__udivmoddi4+0x2b4>
 80016aa:	f1a8 0802 	sub.w	r8, r8, #2
 80016ae:	4464      	add	r4, ip
 80016b0:	1b64      	subs	r4, r4, r5
 80016b2:	b29d      	uxth	r5, r3
 80016b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80016b8:	fb09 4413 	mls	r4, r9, r3, r4
 80016bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80016c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80016c4:	45a6      	cmp	lr, r4
 80016c6:	d908      	bls.n	80016da <__udivmoddi4+0x1da>
 80016c8:	eb1c 0404 	adds.w	r4, ip, r4
 80016cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80016d0:	d26c      	bcs.n	80017ac <__udivmoddi4+0x2ac>
 80016d2:	45a6      	cmp	lr, r4
 80016d4:	d96a      	bls.n	80017ac <__udivmoddi4+0x2ac>
 80016d6:	3b02      	subs	r3, #2
 80016d8:	4464      	add	r4, ip
 80016da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80016de:	fba3 9502 	umull	r9, r5, r3, r2
 80016e2:	eba4 040e 	sub.w	r4, r4, lr
 80016e6:	42ac      	cmp	r4, r5
 80016e8:	46c8      	mov	r8, r9
 80016ea:	46ae      	mov	lr, r5
 80016ec:	d356      	bcc.n	800179c <__udivmoddi4+0x29c>
 80016ee:	d053      	beq.n	8001798 <__udivmoddi4+0x298>
 80016f0:	b156      	cbz	r6, 8001708 <__udivmoddi4+0x208>
 80016f2:	ebb0 0208 	subs.w	r2, r0, r8
 80016f6:	eb64 040e 	sbc.w	r4, r4, lr
 80016fa:	fa04 f707 	lsl.w	r7, r4, r7
 80016fe:	40ca      	lsrs	r2, r1
 8001700:	40cc      	lsrs	r4, r1
 8001702:	4317      	orrs	r7, r2
 8001704:	e9c6 7400 	strd	r7, r4, [r6]
 8001708:	4618      	mov	r0, r3
 800170a:	2100      	movs	r1, #0
 800170c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001710:	f1c3 0120 	rsb	r1, r3, #32
 8001714:	fa02 fc03 	lsl.w	ip, r2, r3
 8001718:	fa20 f201 	lsr.w	r2, r0, r1
 800171c:	fa25 f101 	lsr.w	r1, r5, r1
 8001720:	409d      	lsls	r5, r3
 8001722:	432a      	orrs	r2, r5
 8001724:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001728:	fa1f fe8c 	uxth.w	lr, ip
 800172c:	fbb1 f0f7 	udiv	r0, r1, r7
 8001730:	fb07 1510 	mls	r5, r7, r0, r1
 8001734:	0c11      	lsrs	r1, r2, #16
 8001736:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800173a:	fb00 f50e 	mul.w	r5, r0, lr
 800173e:	428d      	cmp	r5, r1
 8001740:	fa04 f403 	lsl.w	r4, r4, r3
 8001744:	d908      	bls.n	8001758 <__udivmoddi4+0x258>
 8001746:	eb1c 0101 	adds.w	r1, ip, r1
 800174a:	f100 38ff 	add.w	r8, r0, #4294967295
 800174e:	d22f      	bcs.n	80017b0 <__udivmoddi4+0x2b0>
 8001750:	428d      	cmp	r5, r1
 8001752:	d92d      	bls.n	80017b0 <__udivmoddi4+0x2b0>
 8001754:	3802      	subs	r0, #2
 8001756:	4461      	add	r1, ip
 8001758:	1b49      	subs	r1, r1, r5
 800175a:	b292      	uxth	r2, r2
 800175c:	fbb1 f5f7 	udiv	r5, r1, r7
 8001760:	fb07 1115 	mls	r1, r7, r5, r1
 8001764:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001768:	fb05 f10e 	mul.w	r1, r5, lr
 800176c:	4291      	cmp	r1, r2
 800176e:	d908      	bls.n	8001782 <__udivmoddi4+0x282>
 8001770:	eb1c 0202 	adds.w	r2, ip, r2
 8001774:	f105 38ff 	add.w	r8, r5, #4294967295
 8001778:	d216      	bcs.n	80017a8 <__udivmoddi4+0x2a8>
 800177a:	4291      	cmp	r1, r2
 800177c:	d914      	bls.n	80017a8 <__udivmoddi4+0x2a8>
 800177e:	3d02      	subs	r5, #2
 8001780:	4462      	add	r2, ip
 8001782:	1a52      	subs	r2, r2, r1
 8001784:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001788:	e738      	b.n	80015fc <__udivmoddi4+0xfc>
 800178a:	4631      	mov	r1, r6
 800178c:	4630      	mov	r0, r6
 800178e:	e708      	b.n	80015a2 <__udivmoddi4+0xa2>
 8001790:	4639      	mov	r1, r7
 8001792:	e6e6      	b.n	8001562 <__udivmoddi4+0x62>
 8001794:	4610      	mov	r0, r2
 8001796:	e6fb      	b.n	8001590 <__udivmoddi4+0x90>
 8001798:	4548      	cmp	r0, r9
 800179a:	d2a9      	bcs.n	80016f0 <__udivmoddi4+0x1f0>
 800179c:	ebb9 0802 	subs.w	r8, r9, r2
 80017a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80017a4:	3b01      	subs	r3, #1
 80017a6:	e7a3      	b.n	80016f0 <__udivmoddi4+0x1f0>
 80017a8:	4645      	mov	r5, r8
 80017aa:	e7ea      	b.n	8001782 <__udivmoddi4+0x282>
 80017ac:	462b      	mov	r3, r5
 80017ae:	e794      	b.n	80016da <__udivmoddi4+0x1da>
 80017b0:	4640      	mov	r0, r8
 80017b2:	e7d1      	b.n	8001758 <__udivmoddi4+0x258>
 80017b4:	46d0      	mov	r8, sl
 80017b6:	e77b      	b.n	80016b0 <__udivmoddi4+0x1b0>
 80017b8:	3d02      	subs	r5, #2
 80017ba:	4462      	add	r2, ip
 80017bc:	e732      	b.n	8001624 <__udivmoddi4+0x124>
 80017be:	4608      	mov	r0, r1
 80017c0:	e70a      	b.n	80015d8 <__udivmoddi4+0xd8>
 80017c2:	4464      	add	r4, ip
 80017c4:	3802      	subs	r0, #2
 80017c6:	e742      	b.n	800164e <__udivmoddi4+0x14e>

080017c8 <__aeabi_idiv0>:
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop

080017cc <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 80017d4:	1d39      	adds	r1, r7, #4
 80017d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017da:	2201      	movs	r2, #1
 80017dc:	4803      	ldr	r0, [pc, #12]	; (80017ec <__io_putchar+0x20>)
 80017de:	f00b fbef 	bl	800cfc0 <HAL_UART_Transmit>
	return ch;
 80017e2:	687b      	ldr	r3, [r7, #4]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	20000528 	.word	0x20000528

080017f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* Copy from FLASH to itcm */
  memcpy(&_sitcm, &_siitcm, ((void*) &_eitcm - (void*) &_sitcm));
 80017f6:	4ab4      	ldr	r2, [pc, #720]	; (8001ac8 <main+0x2d8>)
 80017f8:	4bb4      	ldr	r3, [pc, #720]	; (8001acc <main+0x2dc>)
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	461a      	mov	r2, r3
 80017fe:	49b4      	ldr	r1, [pc, #720]	; (8001ad0 <main+0x2e0>)
 8001800:	48b2      	ldr	r0, [pc, #712]	; (8001acc <main+0x2dc>)
 8001802:	f017 fdf1 	bl	80193e8 <memcpy>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001806:	4bb3      	ldr	r3, [pc, #716]	; (8001ad4 <main+0x2e4>)
 8001808:	695b      	ldr	r3, [r3, #20]
 800180a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d11b      	bne.n	800184a <main+0x5a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001812:	f3bf 8f4f 	dsb	sy
}
 8001816:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001818:	f3bf 8f6f 	isb	sy
}
 800181c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800181e:	4bad      	ldr	r3, [pc, #692]	; (8001ad4 <main+0x2e4>)
 8001820:	2200      	movs	r2, #0
 8001822:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001826:	f3bf 8f4f 	dsb	sy
}
 800182a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800182c:	f3bf 8f6f 	isb	sy
}
 8001830:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001832:	4ba8      	ldr	r3, [pc, #672]	; (8001ad4 <main+0x2e4>)
 8001834:	695b      	ldr	r3, [r3, #20]
 8001836:	4aa7      	ldr	r2, [pc, #668]	; (8001ad4 <main+0x2e4>)
 8001838:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800183c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800183e:	f3bf 8f4f 	dsb	sy
}
 8001842:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001844:	f3bf 8f6f 	isb	sy
}
 8001848:	e000      	b.n	800184c <main+0x5c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800184a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800184c:	4ba1      	ldr	r3, [pc, #644]	; (8001ad4 <main+0x2e4>)
 800184e:	695b      	ldr	r3, [r3, #20]
 8001850:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d138      	bne.n	80018ca <main+0xda>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001858:	4b9e      	ldr	r3, [pc, #632]	; (8001ad4 <main+0x2e4>)
 800185a:	2200      	movs	r2, #0
 800185c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001860:	f3bf 8f4f 	dsb	sy
}
 8001864:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001866:	4b9b      	ldr	r3, [pc, #620]	; (8001ad4 <main+0x2e4>)
 8001868:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800186c:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	0b5b      	lsrs	r3, r3, #13
 8001872:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001876:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	08db      	lsrs	r3, r3, #3
 800187c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001880:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	015a      	lsls	r2, r3, #5
 8001886:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800188a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001890:	4990      	ldr	r1, [pc, #576]	; (8001ad4 <main+0x2e4>)
 8001892:	4313      	orrs	r3, r2
 8001894:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	1e5a      	subs	r2, r3, #1
 800189c:	607a      	str	r2, [r7, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1ef      	bne.n	8001882 <main+0x92>
    } while(sets-- != 0U);
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	1e5a      	subs	r2, r3, #1
 80018a6:	60ba      	str	r2, [r7, #8]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d1e5      	bne.n	8001878 <main+0x88>
  __ASM volatile ("dsb 0xF":::"memory");
 80018ac:	f3bf 8f4f 	dsb	sy
}
 80018b0:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80018b2:	4b88      	ldr	r3, [pc, #544]	; (8001ad4 <main+0x2e4>)
 80018b4:	695b      	ldr	r3, [r3, #20]
 80018b6:	4a87      	ldr	r2, [pc, #540]	; (8001ad4 <main+0x2e4>)
 80018b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018bc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80018be:	f3bf 8f4f 	dsb	sy
}
 80018c2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018c4:	f3bf 8f6f 	isb	sy
}
 80018c8:	e000      	b.n	80018cc <main+0xdc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80018ca:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018cc:	f001 fd08 	bl	80032e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018d0:	f000 f93a 	bl	8001b48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018d4:	f000 fcfa 	bl	80022cc <MX_GPIO_Init>
  MX_LPTIM1_Init();
 80018d8:	f000 fbda 	bl	8002090 <MX_LPTIM1_Init>
  MX_DAC1_Init();
 80018dc:	f000 fa54 	bl	8001d88 <MX_DAC1_Init>
  MX_USART3_UART_Init();
 80018e0:	f000 fca6 	bl	8002230 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 80018e4:	f000 fc56 	bl	8002194 <MX_TIM3_Init>
  MX_TIM1_Init();
 80018e8:	f000 fc00 	bl	80020ec <MX_TIM1_Init>
  MX_HRTIM_Init();
 80018ec:	f000 fa7e 	bl	8001dec <MX_HRTIM_Init>
  MX_ADC3_Init();
 80018f0:	f000 f9e8 	bl	8001cc4 <MX_ADC3_Init>
  MX_LWIP_Init();
 80018f4:	f00c fc78 	bl	800e1e8 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  printf("\033c"); //clears screen
 80018f8:	4877      	ldr	r0, [pc, #476]	; (8001ad8 <main+0x2e8>)
 80018fa:	f017 fba7 	bl	801904c <iprintf>
  printf("Atomic Clock - Source __TIMESTAMP__: %s\r\n", __TIMESTAMP__);
 80018fe:	4977      	ldr	r1, [pc, #476]	; (8001adc <main+0x2ec>)
 8001900:	4877      	ldr	r0, [pc, #476]	; (8001ae0 <main+0x2f0>)
 8001902:	f017 fba3 	bl	801904c <iprintf>

	#ifdef SYNTH_ENABLE
		if (init_synthesiser(MW_power) != SUCCESS) {
 8001906:	4b77      	ldr	r3, [pc, #476]	; (8001ae4 <main+0x2f4>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	4618      	mov	r0, r3
 800190c:	f019 fb40 	bl	801af90 <__init_synthesiser_veneer>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d004      	beq.n	8001920 <main+0x130>
			printf("Synthesiser initialisation failed!\r\n");
 8001916:	4874      	ldr	r0, [pc, #464]	; (8001ae8 <main+0x2f8>)
 8001918:	f017 fbfe 	bl	8019118 <puts>
			Error_Handler();
 800191c:	f000 fe54 	bl	80025c8 <Error_Handler>
		}
		#ifdef MW_VERBOSE
			printf("LO2GAIN set at: 0x%x \r\n", MW_power);
 8001920:	4b70      	ldr	r3, [pc, #448]	; (8001ae4 <main+0x2f4>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	4619      	mov	r1, r3
 8001926:	4871      	ldr	r0, [pc, #452]	; (8001aec <main+0x2fc>)
 8001928:	f017 fb90 	bl	801904c <iprintf>
		#endif	//MW_VERBOSE
	#endif //SYNTH_ENABLE

	/* Start a low power timer to flash an LED approximately every second */
	if (HAL_LPTIM_Counter_Start_IT(&hlptim1, 1024) != HAL_OK) {
 800192c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001930:	486f      	ldr	r0, [pc, #444]	; (8001af0 <main+0x300>)
 8001932:	f006 fee1 	bl	80086f8 <HAL_LPTIM_Counter_Start_IT>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d004      	beq.n	8001946 <main+0x156>
		printf("Failed to start slow flashing LED!\r\n");
 800193c:	486d      	ldr	r0, [pc, #436]	; (8001af4 <main+0x304>)
 800193e:	f017 fbeb 	bl	8019118 <puts>
		Error_Handler();
 8001942:	f000 fe41 	bl	80025c8 <Error_Handler>
	}

	/* Start the DAC and zero its output */
	if (HAL_DAC_Start(&hdac1, DAC_CHANNEL_1) != HAL_OK) {
 8001946:	2100      	movs	r1, #0
 8001948:	486b      	ldr	r0, [pc, #428]	; (8001af8 <main+0x308>)
 800194a:	f003 fc4c 	bl	80051e6 <HAL_DAC_Start>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d004      	beq.n	800195e <main+0x16e>
		printf("Failure to initialise DAC \r\n");
 8001954:	4869      	ldr	r0, [pc, #420]	; (8001afc <main+0x30c>)
 8001956:	f017 fbdf 	bl	8019118 <puts>
		Error_Handler();
 800195a:	f000 fe35 	bl	80025c8 <Error_Handler>
	}
	printf("Setting DAC output to 1.00V \r\n");
 800195e:	4868      	ldr	r0, [pc, #416]	; (8001b00 <main+0x310>)
 8001960:	f017 fbda 	bl	8019118 <puts>
	if(HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 1241) != HAL_OK){
 8001964:	f240 43d9 	movw	r3, #1241	; 0x4d9
 8001968:	2200      	movs	r2, #0
 800196a:	2100      	movs	r1, #0
 800196c:	4862      	ldr	r0, [pc, #392]	; (8001af8 <main+0x308>)
 800196e:	f003 fc8c 	bl	800528a <HAL_DAC_SetValue>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d004      	beq.n	8001982 <main+0x192>
			printf("DAC setup failed!\r\n");
 8001978:	4862      	ldr	r0, [pc, #392]	; (8001b04 <main+0x314>)
 800197a:	f017 fbcd 	bl	8019118 <puts>
		Error_Handler();
 800197e:	f000 fe23 	bl	80025c8 <Error_Handler>
//	printf("Setting spare SMA output high \r\n");
//	HAL_GPIO_WritePin(SPARE_OUT_GPIO_Port, SPARE_OUT_Pin, GPIO_PIN_RESET); // Sets spare SMA output low

	/* Laser tuning pin */
//	LASER_TUNING_GPIO_Port, LASER_TUNING_Pin
	HAL_GPIO_WritePin(LASER_TUNING_GPIO_Port, LASER_TUNING_Pin, GPIO_PIN_SET); // Laser_tuning output high
 8001982:	2201      	movs	r2, #1
 8001984:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001988:	485f      	ldr	r0, [pc, #380]	; (8001b08 <main+0x318>)
 800198a:	f005 faa9 	bl	8006ee0 <HAL_GPIO_WritePin>
	printf("Requesting FPGA CW absorption \r\n");
 800198e:	485f      	ldr	r0, [pc, #380]	; (8001b0c <main+0x31c>)
 8001990:	f017 fbc2 	bl	8019118 <puts>
//	HAL_GPIO_WritePin(LASER_TUNING_GPIO_Port, LASER_TUNING_Pin, GPIO_PIN_RESET); // Laser_tuning SMA output low

	/* MW invalid */
//	MW_INVALID_GPIO_Port, MW_INVALID_Pin
//	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); // MW_invalid output high
	printf("Setting MW invalid output low \r\n");
 8001994:	485e      	ldr	r0, [pc, #376]	; (8001b10 <main+0x320>)
 8001996:	f017 fbbf 	bl	8019118 <puts>
	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); // MW_invalid output low
 800199a:	2200      	movs	r2, #0
 800199c:	2102      	movs	r1, #2
 800199e:	485a      	ldr	r0, [pc, #360]	; (8001b08 <main+0x318>)
 80019a0:	f005 fa9e 	bl	8006ee0 <HAL_GPIO_WritePin>

	/* Fire up the ADC */
	// external trigger, single conversion selected in ioc file
	// calibrate ADC for better accuracy and start it w/ interrupt
	if(HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK){
 80019a4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80019a8:	2100      	movs	r1, #0
 80019aa:	485a      	ldr	r0, [pc, #360]	; (8001b14 <main+0x324>)
 80019ac:	f003 fa54 	bl	8004e58 <HAL_ADCEx_Calibration_Start>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d004      	beq.n	80019c0 <main+0x1d0>
		printf("ADC calibration failure \r\n");
 80019b6:	4858      	ldr	r0, [pc, #352]	; (8001b18 <main+0x328>)
 80019b8:	f017 fbae 	bl	8019118 <puts>
		Error_Handler();
 80019bc:	f000 fe04 	bl	80025c8 <Error_Handler>
	}
	printf("ADC calibrated successfully \r\n");
 80019c0:	4856      	ldr	r0, [pc, #344]	; (8001b1c <main+0x32c>)
 80019c2:	f017 fba9 	bl	8019118 <puts>
	//Start the ADC with interrupts enabled
	if(HAL_ADC_Start_IT(&hadc3) != HAL_OK){
 80019c6:	4853      	ldr	r0, [pc, #332]	; (8001b14 <main+0x324>)
 80019c8:	f002 f934 	bl	8003c34 <HAL_ADC_Start_IT>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d004      	beq.n	80019dc <main+0x1ec>
		printf("Failed to start ADC with interrupt capability \r\n");
 80019d2:	4853      	ldr	r0, [pc, #332]	; (8001b20 <main+0x330>)
 80019d4:	f017 fba0 	bl	8019118 <puts>
	                Error_Handler();
 80019d8:	f000 fdf6 	bl	80025c8 <Error_Handler>
	}
	printf("ADC interrupt callback enabled \r\n");
 80019dc:	4851      	ldr	r0, [pc, #324]	; (8001b24 <main+0x334>)
 80019de:	f017 fb9b 	bl	8019118 <puts>
//	calc_fixed_time_MW_sweep(3035736939, 10000, 50); //10kHz sweep, 50s
//	calc_fixed_time_MW_sweep(3035736939, 5000, 50); //10kHz sweep, 50s
//	calc_fixed_time_MW_sweep(3035735539, 5000, 50); //10kHz sweep, 50s
//	calc_fixed_time_MW_sweep(3035735539, 1500, 20); //10kHz sweep, 50s
//	calc_fixed_time_MW_sweep(3035735539, 5000, 58); //5kHz sweep, 58s
	calc_fixed_time_MW_sweep(3035735539, 1900, 22); //1.8kHz sweep, 21s
 80019e2:	eeb3 2b06 	vmov.f64	d2, #54	; 0x41b00000  22.0
 80019e6:	ed9f 1b34 	vldr	d1, [pc, #208]	; 8001ab8 <main+0x2c8>
 80019ea:	ed9f 0b35 	vldr	d0, [pc, #212]	; 8001ac0 <main+0x2d0>
 80019ee:	f019 fabb 	bl	801af68 <__calc_fixed_time_MW_sweep_veneer>
//		if (pin_status != last_pin_status) {
//			printf("Blue button status: %u \r\n", pin_status);
//			last_pin_status = pin_status;
//		}

		blue_button_status = HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin);
 80019f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019f6:	484c      	ldr	r0, [pc, #304]	; (8001b28 <main+0x338>)
 80019f8:	f005 fa5a 	bl	8006eb0 <HAL_GPIO_ReadPin>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	bf14      	ite	ne
 8001a02:	2301      	movne	r3, #1
 8001a04:	2300      	moveq	r3, #0
 8001a06:	b2da      	uxtb	r2, r3
 8001a08:	4b48      	ldr	r3, [pc, #288]	; (8001b2c <main+0x33c>)
 8001a0a:	701a      	strb	r2, [r3, #0]
		if (blue_button_status) {// If blue button is pressed
 8001a0c:	4b47      	ldr	r3, [pc, #284]	; (8001b2c <main+0x33c>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d04a      	beq.n	8001aac <main+0x2bc>
			printf("Blue button pressed....\r\n");
 8001a16:	4846      	ldr	r0, [pc, #280]	; (8001b30 <main+0x340>)
 8001a18:	f017 fb7e 	bl	8019118 <puts>
			printf("Requesting FPGA POP \r\n");
 8001a1c:	4845      	ldr	r0, [pc, #276]	; (8001b34 <main+0x344>)
 8001a1e:	f017 fb7b 	bl	8019118 <puts>
			HAL_GPIO_WritePin(LASER_TUNING_GPIO_Port, LASER_TUNING_Pin, GPIO_PIN_RESET); // Laser_tuning SMA output low
 8001a22:	2200      	movs	r2, #0
 8001a24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a28:	4837      	ldr	r0, [pc, #220]	; (8001b08 <main+0x318>)
 8001a2a:	f005 fa59 	bl	8006ee0 <HAL_GPIO_WritePin>
			//set_MW_power(0x03); //set maximum MW power to improve contrast
			//MW_frequency_toggle (3035733689, 3035733789); //infinite loop toggling 100Hz on left of DR dip
			//MW_frequency_toggle (3035733689, 3035733699); //infinite loop toggling 10Hz on left of DR dip

			//change the MW power each time the button is pressed, unless it's the first time round this loop
			if (mw_sweep_started) {
 8001a2e:	4b42      	ldr	r3, [pc, #264]	; (8001b38 <main+0x348>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d018      	beq.n	8001a6a <main+0x27a>
				++MW_power; //increase MW_power value by 1
 8001a38:	4b2a      	ldr	r3, [pc, #168]	; (8001ae4 <main+0x2f4>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	4b28      	ldr	r3, [pc, #160]	; (8001ae4 <main+0x2f4>)
 8001a42:	701a      	strb	r2, [r3, #0]
				if (MW_power>3) { //Loop MW_power back round to 0 if above maximum permissible value i.e. 3
 8001a44:	4b27      	ldr	r3, [pc, #156]	; (8001ae4 <main+0x2f4>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b03      	cmp	r3, #3
 8001a4a:	d902      	bls.n	8001a52 <main+0x262>
					MW_power = 0;
 8001a4c:	4b25      	ldr	r3, [pc, #148]	; (8001ae4 <main+0x2f4>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	701a      	strb	r2, [r3, #0]
				}
				set_MW_power(MW_power);
 8001a52:	4b24      	ldr	r3, [pc, #144]	; (8001ae4 <main+0x2f4>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f019 fa9e 	bl	801af98 <__set_MW_power_veneer>
			#ifdef MW_VERBOSE
				printf("LO2GAIN changed to: 0x%x \r\n", MW_power);
 8001a5c:	4b21      	ldr	r3, [pc, #132]	; (8001ae4 <main+0x2f4>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	4619      	mov	r1, r3
 8001a62:	4836      	ldr	r0, [pc, #216]	; (8001b3c <main+0x34c>)
 8001a64:	f017 faf2 	bl	801904c <iprintf>
 8001a68:	e01b      	b.n	8001aa2 <main+0x2b2>
			#endif //MW_VERBOSE
			} else {
				printf("Initiating sweep.\r\n");
 8001a6a:	4835      	ldr	r0, [pc, #212]	; (8001b40 <main+0x350>)
 8001a6c:	f017 fb54 	bl	8019118 <puts>
				mw_sweep_started = true;
 8001a70:	4b31      	ldr	r3, [pc, #196]	; (8001b38 <main+0x348>)
 8001a72:	2201      	movs	r2, #1
 8001a74:	701a      	strb	r2, [r3, #0]
				start_MW_sweep();
 8001a76:	f019 fa97 	bl	801afa8 <__start_MW_sweep_veneer>
			}
			while(blue_button_status) {//remain here polling button until it is released
 8001a7a:	e012      	b.n	8001aa2 <main+0x2b2>
				timer_delay(SLOW_TIMER, 100); //10ms delay
 8001a7c:	4b31      	ldr	r3, [pc, #196]	; (8001b44 <main+0x354>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2164      	movs	r1, #100	; 0x64
 8001a82:	4618      	mov	r0, r3
 8001a84:	f019 fa80 	bl	801af88 <__timer_delay_veneer>
				blue_button_status = HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin);
 8001a88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a8c:	4826      	ldr	r0, [pc, #152]	; (8001b28 <main+0x338>)
 8001a8e:	f005 fa0f 	bl	8006eb0 <HAL_GPIO_ReadPin>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	bf14      	ite	ne
 8001a98:	2301      	movne	r3, #1
 8001a9a:	2300      	moveq	r3, #0
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	4b23      	ldr	r3, [pc, #140]	; (8001b2c <main+0x33c>)
 8001aa0:	701a      	strb	r2, [r3, #0]
			while(blue_button_status) {//remain here polling button until it is released
 8001aa2:	4b22      	ldr	r3, [pc, #136]	; (8001b2c <main+0x33c>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1e7      	bne.n	8001a7c <main+0x28c>
			}
		}

		if (mw_sweep_started) {//won't execute until the first time the blue button is pressed
 8001aac:	4b22      	ldr	r3, [pc, #136]	; (8001b38 <main+0x348>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
//			run_sweep();
//			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET); //turn off red LED
			//printf("Sweep complete.\r\n");
			//printf("LO2GAIN: 0x%x \r\n", MW_power);
		}
		MW_update();
 8001ab0:	f019 fa66 	bl	801af80 <__MW_update_veneer>
		blue_button_status = HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin);
 8001ab4:	e79d      	b.n	80019f2 <main+0x202>
 8001ab6:	bf00      	nop
 8001ab8:	00000000 	.word	0x00000000
 8001abc:	409db000 	.word	0x409db000
 8001ac0:	be600000 	.word	0xbe600000
 8001ac4:	41e69e34 	.word	0x41e69e34
 8001ac8:	00001140 	.word	0x00001140
 8001acc:	00000000 	.word	0x00000000
 8001ad0:	08000298 	.word	0x08000298
 8001ad4:	e000ed00 	.word	0xe000ed00
 8001ad8:	0801afb0 	.word	0x0801afb0
 8001adc:	0801afb4 	.word	0x0801afb4
 8001ae0:	0801afd0 	.word	0x0801afd0
 8001ae4:	20000000 	.word	0x20000000
 8001ae8:	0801affc 	.word	0x0801affc
 8001aec:	0801b020 	.word	0x0801b020
 8001af0:	20000458 	.word	0x20000458
 8001af4:	0801b038 	.word	0x0801b038
 8001af8:	20000368 	.word	0x20000368
 8001afc:	0801b05c 	.word	0x0801b05c
 8001b00:	0801b078 	.word	0x0801b078
 8001b04:	0801b098 	.word	0x0801b098
 8001b08:	58020400 	.word	0x58020400
 8001b0c:	0801b0ac 	.word	0x0801b0ac
 8001b10:	0801b0cc 	.word	0x0801b0cc
 8001b14:	20000304 	.word	0x20000304
 8001b18:	0801b0ec 	.word	0x0801b0ec
 8001b1c:	0801b108 	.word	0x0801b108
 8001b20:	0801b128 	.word	0x0801b128
 8001b24:	0801b158 	.word	0x0801b158
 8001b28:	58020800 	.word	0x58020800
 8001b2c:	200005bd 	.word	0x200005bd
 8001b30:	0801b17c 	.word	0x0801b17c
 8001b34:	0801b198 	.word	0x0801b198
 8001b38:	200005bc 	.word	0x200005bc
 8001b3c:	0801b1b0 	.word	0x0801b1b0
 8001b40:	0801b1cc 	.word	0x0801b1cc
 8001b44:	20000018 	.word	0x20000018

08001b48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b0a4      	sub	sp, #144	; 0x90
 8001b4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b4e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001b52:	224c      	movs	r2, #76	; 0x4c
 8001b54:	2100      	movs	r1, #0
 8001b56:	4618      	mov	r0, r3
 8001b58:	f017 fbce 	bl	80192f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b60:	2220      	movs	r2, #32
 8001b62:	2100      	movs	r1, #0
 8001b64:	4618      	mov	r0, r3
 8001b66:	f017 fbc7 	bl	80192f8 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 8001b6a:	f107 030c 	add.w	r3, r7, #12
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	605a      	str	r2, [r3, #4]
 8001b74:	609a      	str	r2, [r3, #8]
 8001b76:	60da      	str	r2, [r3, #12]
 8001b78:	611a      	str	r2, [r3, #16]
 8001b7a:	615a      	str	r2, [r3, #20]

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001b7c:	2002      	movs	r0, #2
 8001b7e:	f007 f919 	bl	8008db4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b82:	2300      	movs	r3, #0
 8001b84:	60bb      	str	r3, [r7, #8]
 8001b86:	4b4c      	ldr	r3, [pc, #304]	; (8001cb8 <SystemClock_Config+0x170>)
 8001b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8a:	4a4b      	ldr	r2, [pc, #300]	; (8001cb8 <SystemClock_Config+0x170>)
 8001b8c:	f023 0301 	bic.w	r3, r3, #1
 8001b90:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001b92:	4b49      	ldr	r3, [pc, #292]	; (8001cb8 <SystemClock_Config+0x170>)
 8001b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	60bb      	str	r3, [r7, #8]
 8001b9c:	4b47      	ldr	r3, [pc, #284]	; (8001cbc <SystemClock_Config+0x174>)
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	4a46      	ldr	r2, [pc, #280]	; (8001cbc <SystemClock_Config+0x174>)
 8001ba2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ba6:	6193      	str	r3, [r2, #24]
 8001ba8:	4b44      	ldr	r3, [pc, #272]	; (8001cbc <SystemClock_Config+0x174>)
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bb0:	60bb      	str	r3, [r7, #8]
 8001bb2:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001bb4:	bf00      	nop
 8001bb6:	4b41      	ldr	r3, [pc, #260]	; (8001cbc <SystemClock_Config+0x174>)
 8001bb8:	699b      	ldr	r3, [r3, #24]
 8001bba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bc2:	d1f8      	bne.n	8001bb6 <SystemClock_Config+0x6e>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001bc4:	f007 f8e6 	bl	8008d94 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001bc8:	f001 fc40 	bl	800344c <HAL_GetREVID>
 8001bcc:	4b3c      	ldr	r3, [pc, #240]	; (8001cc0 <SystemClock_Config+0x178>)
 8001bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd0:	4a3b      	ldr	r2, [pc, #236]	; (8001cc0 <SystemClock_Config+0x178>)
 8001bd2:	f023 0318 	bic.w	r3, r3, #24
 8001bd6:	6713      	str	r3, [r2, #112]	; 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 8001bd8:	2325      	movs	r3, #37	; 0x25
 8001bda:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001bdc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001be0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001be2:	2301      	movs	r3, #1
 8001be4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001be6:	2301      	movs	r3, #1
 8001be8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bea:	2302      	movs	r3, #2
 8001bec:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001bf6:	2350      	movs	r3, #80	; 0x50
 8001bf8:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001bfe:	2304      	movs	r3, #4
 8001c00:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c02:	2302      	movs	r3, #2
 8001c04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001c08:	230c      	movs	r3, #12
 8001c0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c1a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f007 f902 	bl	8008e28 <HAL_RCC_OscConfig>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001c2a:	f000 fccd 	bl	80025c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c2e:	233f      	movs	r3, #63	; 0x3f
 8001c30:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c32:	2303      	movs	r3, #3
 8001c34:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001c36:	2300      	movs	r3, #0
 8001c38:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV4;
 8001c3a:	2309      	movs	r3, #9
 8001c3c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001c42:	2300      	movs	r3, #0
 8001c44:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV16;
 8001c46:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	643b      	str	r3, [r7, #64]	; 0x40

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001c50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c54:	2101      	movs	r1, #1
 8001c56:	4618      	mov	r0, r3
 8001c58:	f007 fd40 	bl	80096dc <HAL_RCC_ClockConfig>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <SystemClock_Config+0x11e>
  {
    Error_Handler();
 8001c62:	f000 fcb1 	bl	80025c8 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001c66:	f007 feef 	bl	8009a48 <HAL_RCC_EnableCSS>

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 8001c6a:	4b15      	ldr	r3, [pc, #84]	; (8001cc0 <SystemClock_Config+0x178>)
 8001c6c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001c70:	4a13      	ldr	r2, [pc, #76]	; (8001cc0 <SystemClock_Config+0x178>)
 8001c72:	f043 0302 	orr.w	r3, r3, #2
 8001c76:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001c7a:	4b11      	ldr	r3, [pc, #68]	; (8001cc0 <SystemClock_Config+0x178>)
 8001c7c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	607b      	str	r3, [r7, #4]
 8001c86:	687b      	ldr	r3, [r7, #4]

  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_LSE;
 8001c8c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001c90:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 8001c92:	2300      	movs	r3, #0
 8001c94:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,32768);
 8001c96:	f240 53b7 	movw	r3, #1463	; 0x5b7
 8001c9a:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 8001c9c:	2322      	movs	r3, #34	; 0x22
 8001c9e:	61fb      	str	r3, [r7, #28]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 8001ca0:	2320      	movs	r3, #32
 8001ca2:	623b      	str	r3, [r7, #32]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 8001ca4:	f107 030c 	add.w	r3, r7, #12
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f00a fc69 	bl	800c580 <HAL_RCCEx_CRSConfig>
}
 8001cae:	bf00      	nop
 8001cb0:	3790      	adds	r7, #144	; 0x90
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	58000400 	.word	0x58000400
 8001cbc:	58024800 	.word	0x58024800
 8001cc0:	58024400 	.word	0x58024400

08001cc4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b088      	sub	sp, #32
 8001cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001cca:	1d3b      	adds	r3, r7, #4
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	60da      	str	r2, [r3, #12]
 8001cd6:	611a      	str	r2, [r3, #16]
 8001cd8:	615a      	str	r2, [r3, #20]
 8001cda:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001cdc:	4b28      	ldr	r3, [pc, #160]	; (8001d80 <MX_ADC3_Init+0xbc>)
 8001cde:	4a29      	ldr	r2, [pc, #164]	; (8001d84 <MX_ADC3_Init+0xc0>)
 8001ce0:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8001ce2:	4b27      	ldr	r3, [pc, #156]	; (8001d80 <MX_ADC3_Init+0xbc>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001ce8:	4b25      	ldr	r3, [pc, #148]	; (8001d80 <MX_ADC3_Init+0xbc>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001cee:	4b24      	ldr	r3, [pc, #144]	; (8001d80 <MX_ADC3_Init+0xbc>)
 8001cf0:	2204      	movs	r2, #4
 8001cf2:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001cf4:	4b22      	ldr	r3, [pc, #136]	; (8001d80 <MX_ADC3_Init+0xbc>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001cfa:	4b21      	ldr	r3, [pc, #132]	; (8001d80 <MX_ADC3_Init+0xbc>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8001d00:	4b1f      	ldr	r3, [pc, #124]	; (8001d80 <MX_ADC3_Init+0xbc>)
 8001d02:	2201      	movs	r2, #1
 8001d04:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001d06:	4b1e      	ldr	r3, [pc, #120]	; (8001d80 <MX_ADC3_Init+0xbc>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_EXT_IT11;
 8001d0c:	4b1c      	ldr	r3, [pc, #112]	; (8001d80 <MX_ADC3_Init+0xbc>)
 8001d0e:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8001d12:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001d14:	4b1a      	ldr	r3, [pc, #104]	; (8001d80 <MX_ADC3_Init+0xbc>)
 8001d16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d1a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001d1c:	4b18      	ldr	r3, [pc, #96]	; (8001d80 <MX_ADC3_Init+0xbc>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001d22:	4b17      	ldr	r3, [pc, #92]	; (8001d80 <MX_ADC3_Init+0xbc>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001d28:	4b15      	ldr	r3, [pc, #84]	; (8001d80 <MX_ADC3_Init+0xbc>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001d2e:	4b14      	ldr	r3, [pc, #80]	; (8001d80 <MX_ADC3_Init+0xbc>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001d36:	4812      	ldr	r0, [pc, #72]	; (8001d80 <MX_ADC3_Init+0xbc>)
 8001d38:	f001 fdda 	bl	80038f0 <HAL_ADC_Init>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <MX_ADC3_Init+0x82>
  {
    Error_Handler();
 8001d42:	f000 fc41 	bl	80025c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001d46:	2301      	movs	r3, #1
 8001d48:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d4a:	2306      	movs	r3, #6
 8001d4c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001d52:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001d56:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001d58:	2304      	movs	r3, #4
 8001d5a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001d60:	2300      	movs	r3, #0
 8001d62:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001d64:	1d3b      	adds	r3, r7, #4
 8001d66:	4619      	mov	r1, r3
 8001d68:	4805      	ldr	r0, [pc, #20]	; (8001d80 <MX_ADC3_Init+0xbc>)
 8001d6a:	f002 fafd 	bl	8004368 <HAL_ADC_ConfigChannel>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 8001d74:	f000 fc28 	bl	80025c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001d78:	bf00      	nop
 8001d7a:	3720      	adds	r7, #32
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	20000304 	.word	0x20000304
 8001d84:	58026000 	.word	0x58026000

08001d88 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b08a      	sub	sp, #40	; 0x28
 8001d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001d8e:	1d3b      	adds	r3, r7, #4
 8001d90:	2224      	movs	r2, #36	; 0x24
 8001d92:	2100      	movs	r1, #0
 8001d94:	4618      	mov	r0, r3
 8001d96:	f017 faaf 	bl	80192f8 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001d9a:	4b12      	ldr	r3, [pc, #72]	; (8001de4 <MX_DAC1_Init+0x5c>)
 8001d9c:	4a12      	ldr	r2, [pc, #72]	; (8001de8 <MX_DAC1_Init+0x60>)
 8001d9e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001da0:	4810      	ldr	r0, [pc, #64]	; (8001de4 <MX_DAC1_Init+0x5c>)
 8001da2:	f003 f9fe 	bl	80051a2 <HAL_DAC_Init>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001dac:	f000 fc0c 	bl	80025c8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001db0:	2300      	movs	r3, #0
 8001db2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001db4:	2300      	movs	r3, #0
 8001db6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001db8:	2300      	movs	r3, #0
 8001dba:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001dc4:	1d3b      	adds	r3, r7, #4
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4806      	ldr	r0, [pc, #24]	; (8001de4 <MX_DAC1_Init+0x5c>)
 8001dcc:	f003 fa82 	bl	80052d4 <HAL_DAC_ConfigChannel>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001dd6:	f000 fbf7 	bl	80025c8 <Error_Handler>
//    Error_Handler();
//  }

  /* USER CODE END DAC1_Init 2 */

}
 8001dda:	bf00      	nop
 8001ddc:	3728      	adds	r7, #40	; 0x28
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	20000368 	.word	0x20000368
 8001de8:	40007400 	.word	0x40007400

08001dec <MX_HRTIM_Init>:
  * @brief HRTIM Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM_Init(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b0a4      	sub	sp, #144	; 0x90
 8001df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM_Init 0 */

  /* USER CODE END HRTIM_Init 0 */

  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8001df2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001df6:	2200      	movs	r2, #0
 8001df8:	601a      	str	r2, [r3, #0]
 8001dfa:	605a      	str	r2, [r3, #4]
 8001dfc:	609a      	str	r2, [r3, #8]
 8001dfe:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8001e00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e04:	2254      	movs	r2, #84	; 0x54
 8001e06:	2100      	movs	r1, #0
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f017 fa75 	bl	80192f8 <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 8001e0e:	f107 0320 	add.w	r3, r7, #32
 8001e12:	2200      	movs	r2, #0
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	605a      	str	r2, [r3, #4]
 8001e18:	609a      	str	r2, [r3, #8]
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 8001e1a:	463b      	mov	r3, r7
 8001e1c:	2220      	movs	r2, #32
 8001e1e:	2100      	movs	r1, #0
 8001e20:	4618      	mov	r0, r3
 8001e22:	f017 fa69 	bl	80192f8 <memset>

  /* USER CODE BEGIN HRTIM_Init 1 */

  /* USER CODE END HRTIM_Init 1 */
  hhrtim.Instance = HRTIM1;
 8001e26:	4b98      	ldr	r3, [pc, #608]	; (8002088 <MX_HRTIM_Init+0x29c>)
 8001e28:	4a98      	ldr	r2, [pc, #608]	; (800208c <MX_HRTIM_Init+0x2a0>)
 8001e2a:	601a      	str	r2, [r3, #0]
  hhrtim.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 8001e2c:	4b96      	ldr	r3, [pc, #600]	; (8002088 <MX_HRTIM_Init+0x29c>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	605a      	str	r2, [r3, #4]
  hhrtim.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8001e32:	4b95      	ldr	r3, [pc, #596]	; (8002088 <MX_HRTIM_Init+0x29c>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim) != HAL_OK)
 8001e38:	4893      	ldr	r0, [pc, #588]	; (8002088 <MX_HRTIM_Init+0x29c>)
 8001e3a:	f005 f8a9 	bl	8006f90 <HAL_HRTIM_Init>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <MX_HRTIM_Init+0x5c>
  {
    Error_Handler();
 8001e44:	f000 fbc0 	bl	80025c8 <Error_Handler>
  }
  pTimeBaseCfg.Period = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME+PROBE_WIDTH+POP_CYCLE_DELAY;
 8001e48:	f24c 2318 	movw	r3, #49688	; 0xc218
 8001e4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8001e50:	2300      	movs	r3, #0
 8001e52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV4;
 8001e56:	2307      	movs	r3, #7
 8001e58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8001e5c:	2308      	movs	r3, #8
 8001e5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 8001e62:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001e66:	461a      	mov	r2, r3
 8001e68:	2100      	movs	r1, #0
 8001e6a:	4887      	ldr	r0, [pc, #540]	; (8002088 <MX_HRTIM_Init+0x29c>)
 8001e6c:	f005 f960 	bl	8007130 <HAL_HRTIM_TimeBaseConfig>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <MX_HRTIM_Init+0x8e>
  {
    Error_Handler();
 8001e76:	f000 fba7 	bl	80025c8 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_CMP3|HRTIM_TIM_IT_REP;
 8001e7a:	2314      	movs	r3, #20
 8001e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.DMASrcAddress = 0x0000;
 8001e82:	2300      	movs	r3, #0
 8001e84:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.DMADstAddress = 0x0000;
 8001e86:	2300      	movs	r3, #0
 8001e88:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.DMASize = 0x1;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	643b      	str	r3, [r7, #64]	; 0x40
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8001e92:	2300      	movs	r3, #0
 8001e94:	647b      	str	r3, [r7, #68]	; 0x44
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8001e96:	2300      	movs	r3, #0
 8001e98:	64bb      	str	r3, [r7, #72]	; 0x48
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	653b      	str	r3, [r7, #80]	; 0x50
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	65bb      	str	r3, [r7, #88]	; 0x58
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	65fb      	str	r3, [r7, #92]	; 0x5c
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	66bb      	str	r3, [r7, #104]	; 0x68
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	66fb      	str	r3, [r7, #108]	; 0x6c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	673b      	str	r3, [r7, #112]	; 0x70
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	677b      	str	r3, [r7, #116]	; 0x74
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	67bb      	str	r3, [r7, #120]	; 0x78
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 8001ece:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	486c      	ldr	r0, [pc, #432]	; (8002088 <MX_HRTIM_Init+0x29c>)
 8001ed8:	f005 f952 	bl	8007180 <HAL_HRTIM_WaveformTimerConfig>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <MX_HRTIM_Init+0xfa>
  {
    Error_Handler();
 8001ee2:	f000 fb71 	bl	80025c8 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_CMP2|HRTIM_TIM_IT_CMP3;
 8001ee6:	2306      	movs	r3, #6
 8001ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 8001eea:	2300      	movs	r3, #0
 8001eec:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimerCfg) != HAL_OK)
 8001eee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	2104      	movs	r1, #4
 8001ef6:	4864      	ldr	r0, [pc, #400]	; (8002088 <MX_HRTIM_Init+0x29c>)
 8001ef8:	f005 f942 	bl	8007180 <HAL_HRTIM_WaveformTimerConfig>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <MX_HRTIM_Init+0x11a>
  {
    Error_Handler();
 8001f02:	f000 fb61 	bl	80025c8 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH;
 8001f06:	f240 631b 	movw	r3, #1563	; 0x61b
 8001f0a:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8001f0c:	f107 0320 	add.w	r3, r7, #32
 8001f10:	2201      	movs	r2, #1
 8001f12:	2100      	movs	r1, #0
 8001f14:	485c      	ldr	r0, [pc, #368]	; (8002088 <MX_HRTIM_Init+0x29c>)
 8001f16:	f005 f9a5 	bl	8007264 <HAL_HRTIM_WaveformCompareConfig>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_HRTIM_Init+0x138>
  {
    Error_Handler();
 8001f20:	f000 fb52 	bl	80025c8 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME;
 8001f24:	f244 5395 	movw	r3, #17813	; 0x4595
 8001f28:	623b      	str	r3, [r7, #32]
  pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	627b      	str	r3, [r7, #36]	; 0x24
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8001f32:	f107 0320 	add.w	r3, r7, #32
 8001f36:	2202      	movs	r2, #2
 8001f38:	2100      	movs	r1, #0
 8001f3a:	4853      	ldr	r0, [pc, #332]	; (8002088 <MX_HRTIM_Init+0x29c>)
 8001f3c:	f005 f992 	bl	8007264 <HAL_HRTIM_WaveformCompareConfig>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <MX_HRTIM_Init+0x15e>
  {
    Error_Handler();
 8001f46:	f000 fb3f 	bl	80025c8 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH;
 8001f4a:	f640 536e 	movw	r3, #3438	; 0xd6e
 8001f4e:	623b      	str	r3, [r7, #32]

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8001f50:	f107 0320 	add.w	r3, r7, #32
 8001f54:	2202      	movs	r2, #2
 8001f56:	2104      	movs	r1, #4
 8001f58:	484b      	ldr	r0, [pc, #300]	; (8002088 <MX_HRTIM_Init+0x29c>)
 8001f5a:	f005 f983 	bl	8007264 <HAL_HRTIM_WaveformCompareConfig>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <MX_HRTIM_Init+0x17c>
  {
    Error_Handler();
 8001f64:	f000 fb30 	bl	80025c8 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME+PROBE_WIDTH;
 8001f68:	f644 0306 	movw	r3, #18438	; 0x4806
 8001f6c:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 8001f6e:	f107 0320 	add.w	r3, r7, #32
 8001f72:	2204      	movs	r2, #4
 8001f74:	2100      	movs	r1, #0
 8001f76:	4844      	ldr	r0, [pc, #272]	; (8002088 <MX_HRTIM_Init+0x29c>)
 8001f78:	f005 f974 	bl	8007264 <HAL_HRTIM_WaveformCompareConfig>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <MX_HRTIM_Init+0x19a>
  {
    Error_Handler();
 8001f82:	f000 fb21 	bl	80025c8 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH+RAMSEY_TIME+MICROWAVE_WIDTH;
 8001f86:	f244 435d 	movw	r3, #17501	; 0x445d
 8001f8a:	623b      	str	r3, [r7, #32]

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_4, &pCompareCfg) != HAL_OK)
 8001f8c:	f107 0320 	add.w	r3, r7, #32
 8001f90:	2208      	movs	r2, #8
 8001f92:	2104      	movs	r1, #4
 8001f94:	483c      	ldr	r0, [pc, #240]	; (8002088 <MX_HRTIM_Init+0x29c>)
 8001f96:	f005 f965 	bl	8007264 <HAL_HRTIM_WaveformCompareConfig>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <MX_HRTIM_Init+0x1b8>
  {
    Error_Handler();
 8001fa0:	f000 fb12 	bl	80025c8 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_LOW;
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP1|HRTIM_OUTPUTSET_TIMCMP3;
 8001fa8:	2328      	movs	r3, #40	; 0x28
 8001faa:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2|HRTIM_OUTPUTRESET_TIMPER;
 8001fac:	2314      	movs	r3, #20
 8001fae:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_ACTIVE;
 8001fb4:	2308      	movs	r3, #8
 8001fb6:	613b      	str	r3, [r7, #16]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	617b      	str	r3, [r7, #20]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	61bb      	str	r3, [r7, #24]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	61fb      	str	r3, [r7, #28]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 8001fc4:	463b      	mov	r3, r7
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	2100      	movs	r1, #0
 8001fca:	482f      	ldr	r0, [pc, #188]	; (8002088 <MX_HRTIM_Init+0x29c>)
 8001fcc:	f005 fab8 	bl	8007540 <HAL_HRTIM_WaveformOutputConfig>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <MX_HRTIM_Init+0x1ee>
  {
    Error_Handler();
 8001fd6:	f000 faf7 	bl	80025c8 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	603b      	str	r3, [r7, #0]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2|HRTIM_OUTPUTRESET_TIMCMP4;
 8001fde:	2350      	movs	r3, #80	; 0x50
 8001fe0:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	613b      	str	r3, [r7, #16]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE1, &pOutputCfg) != HAL_OK)
 8001fe6:	463b      	mov	r3, r7
 8001fe8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fec:	2104      	movs	r1, #4
 8001fee:	4826      	ldr	r0, [pc, #152]	; (8002088 <MX_HRTIM_Init+0x29c>)
 8001ff0:	f005 faa6 	bl	8007540 <HAL_HRTIM_WaveformOutputConfig>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <MX_HRTIM_Init+0x212>
  {
    Error_Handler();
 8001ffa:	f000 fae5 	bl	80025c8 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_LOW;
 8001ffe:	2302      	movs	r3, #2
 8002000:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP3;
 8002002:	2320      	movs	r3, #32
 8002004:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2;
 8002006:	2310      	movs	r3, #16
 8002008:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_ACTIVE;
 800200a:	2308      	movs	r3, #8
 800200c:	613b      	str	r3, [r7, #16]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 800200e:	463b      	mov	r3, r7
 8002010:	2202      	movs	r2, #2
 8002012:	2100      	movs	r1, #0
 8002014:	481c      	ldr	r0, [pc, #112]	; (8002088 <MX_HRTIM_Init+0x29c>)
 8002016:	f005 fa93 	bl	8007540 <HAL_HRTIM_WaveformOutputConfig>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <MX_HRTIM_Init+0x238>
  {
    Error_Handler();
 8002020:	f000 fad2 	bl	80025c8 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimeBaseCfg) != HAL_OK)
 8002024:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002028:	461a      	mov	r2, r3
 800202a:	2104      	movs	r1, #4
 800202c:	4816      	ldr	r0, [pc, #88]	; (8002088 <MX_HRTIM_Init+0x29c>)
 800202e:	f005 f87f 	bl	8007130 <HAL_HRTIM_TimeBaseConfig>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <MX_HRTIM_Init+0x250>
  {
    Error_Handler();
 8002038:	f000 fac6 	bl	80025c8 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY;
 800203c:	f240 7353 	movw	r3, #1875	; 0x753
 8002040:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8002042:	f107 0320 	add.w	r3, r7, #32
 8002046:	2201      	movs	r2, #1
 8002048:	2104      	movs	r1, #4
 800204a:	480f      	ldr	r0, [pc, #60]	; (8002088 <MX_HRTIM_Init+0x29c>)
 800204c:	f005 f90a 	bl	8007264 <HAL_HRTIM_WaveformCompareConfig>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <MX_HRTIM_Init+0x26e>
  {
    Error_Handler();
 8002056:	f000 fab7 	bl	80025c8 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH+RAMSEY_TIME;
 800205a:	f643 6342 	movw	r3, #15938	; 0x3e42
 800205e:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 8002060:	f107 0320 	add.w	r3, r7, #32
 8002064:	2204      	movs	r2, #4
 8002066:	2104      	movs	r1, #4
 8002068:	4807      	ldr	r0, [pc, #28]	; (8002088 <MX_HRTIM_Init+0x29c>)
 800206a:	f005 f8fb 	bl	8007264 <HAL_HRTIM_WaveformCompareConfig>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <MX_HRTIM_Init+0x28c>
  {
    Error_Handler();
 8002074:	f000 faa8 	bl	80025c8 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM_Init 2 */

  /* USER CODE END HRTIM_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim);
 8002078:	4803      	ldr	r0, [pc, #12]	; (8002088 <MX_HRTIM_Init+0x29c>)
 800207a:	f000 fbe7 	bl	800284c <HAL_HRTIM_MspPostInit>

}
 800207e:	bf00      	nop
 8002080:	3790      	adds	r7, #144	; 0x90
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	2000037c 	.word	0x2000037c
 800208c:	40017400 	.word	0x40017400

08002090 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8002094:	4b13      	ldr	r3, [pc, #76]	; (80020e4 <MX_LPTIM1_Init+0x54>)
 8002096:	4a14      	ldr	r2, [pc, #80]	; (80020e8 <MX_LPTIM1_Init+0x58>)
 8002098:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800209a:	4b12      	ldr	r3, [pc, #72]	; (80020e4 <MX_LPTIM1_Init+0x54>)
 800209c:	2200      	movs	r2, #0
 800209e:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV32;
 80020a0:	4b10      	ldr	r3, [pc, #64]	; (80020e4 <MX_LPTIM1_Init+0x54>)
 80020a2:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80020a6:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80020a8:	4b0e      	ldr	r3, [pc, #56]	; (80020e4 <MX_LPTIM1_Init+0x54>)
 80020aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020ae:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80020b0:	4b0c      	ldr	r3, [pc, #48]	; (80020e4 <MX_LPTIM1_Init+0x54>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80020b6:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <MX_LPTIM1_Init+0x54>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 80020bc:	4b09      	ldr	r3, [pc, #36]	; (80020e4 <MX_LPTIM1_Init+0x54>)
 80020be:	2200      	movs	r2, #0
 80020c0:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 80020c2:	4b08      	ldr	r3, [pc, #32]	; (80020e4 <MX_LPTIM1_Init+0x54>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 80020c8:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <MX_LPTIM1_Init+0x54>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 80020ce:	4805      	ldr	r0, [pc, #20]	; (80020e4 <MX_LPTIM1_Init+0x54>)
 80020d0:	f006 fa62 	bl	8008598 <HAL_LPTIM_Init>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 80020da:	f000 fa75 	bl	80025c8 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 80020de:	bf00      	nop
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	20000458 	.word	0x20000458
 80020e8:	40002400 	.word	0x40002400

080020ec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b088      	sub	sp, #32
 80020f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020f2:	f107 0310 	add.w	r3, r7, #16
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	605a      	str	r2, [r3, #4]
 80020fc:	609a      	str	r2, [r3, #8]
 80020fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002100:	1d3b      	adds	r3, r7, #4
 8002102:	2200      	movs	r2, #0
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	605a      	str	r2, [r3, #4]
 8002108:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800210a:	4b20      	ldr	r3, [pc, #128]	; (800218c <MX_TIM1_Init+0xa0>)
 800210c:	4a20      	ldr	r2, [pc, #128]	; (8002190 <MX_TIM1_Init+0xa4>)
 800210e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1249;
 8002110:	4b1e      	ldr	r3, [pc, #120]	; (800218c <MX_TIM1_Init+0xa0>)
 8002112:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8002116:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002118:	4b1c      	ldr	r3, [pc, #112]	; (800218c <MX_TIM1_Init+0xa0>)
 800211a:	2200      	movs	r2, #0
 800211c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800211e:	4b1b      	ldr	r3, [pc, #108]	; (800218c <MX_TIM1_Init+0xa0>)
 8002120:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002124:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002126:	4b19      	ldr	r3, [pc, #100]	; (800218c <MX_TIM1_Init+0xa0>)
 8002128:	2200      	movs	r2, #0
 800212a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800212c:	4b17      	ldr	r3, [pc, #92]	; (800218c <MX_TIM1_Init+0xa0>)
 800212e:	2200      	movs	r2, #0
 8002130:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002132:	4b16      	ldr	r3, [pc, #88]	; (800218c <MX_TIM1_Init+0xa0>)
 8002134:	2200      	movs	r2, #0
 8002136:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002138:	4814      	ldr	r0, [pc, #80]	; (800218c <MX_TIM1_Init+0xa0>)
 800213a:	f00a fbdb 	bl	800c8f4 <HAL_TIM_Base_Init>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8002144:	f000 fa40 	bl	80025c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002148:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800214c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800214e:	f107 0310 	add.w	r3, r7, #16
 8002152:	4619      	mov	r1, r3
 8002154:	480d      	ldr	r0, [pc, #52]	; (800218c <MX_TIM1_Init+0xa0>)
 8002156:	f00a fc25 	bl	800c9a4 <HAL_TIM_ConfigClockSource>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8002160:	f000 fa32 	bl	80025c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002164:	2300      	movs	r3, #0
 8002166:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002168:	2300      	movs	r3, #0
 800216a:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800216c:	2300      	movs	r3, #0
 800216e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002170:	1d3b      	adds	r3, r7, #4
 8002172:	4619      	mov	r1, r3
 8002174:	4805      	ldr	r0, [pc, #20]	; (800218c <MX_TIM1_Init+0xa0>)
 8002176:	f00a fe45 	bl	800ce04 <HAL_TIMEx_MasterConfigSynchronization>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002180:	f000 fa22 	bl	80025c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002184:	bf00      	nop
 8002186:	3720      	adds	r7, #32
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	20000490 	.word	0x20000490
 8002190:	40010000 	.word	0x40010000

08002194 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b088      	sub	sp, #32
 8002198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800219a:	f107 0310 	add.w	r3, r7, #16
 800219e:	2200      	movs	r2, #0
 80021a0:	601a      	str	r2, [r3, #0]
 80021a2:	605a      	str	r2, [r3, #4]
 80021a4:	609a      	str	r2, [r3, #8]
 80021a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021a8:	1d3b      	adds	r3, r7, #4
 80021aa:	2200      	movs	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	605a      	str	r2, [r3, #4]
 80021b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80021b2:	4b1d      	ldr	r3, [pc, #116]	; (8002228 <MX_TIM3_Init+0x94>)
 80021b4:	4a1d      	ldr	r2, [pc, #116]	; (800222c <MX_TIM3_Init+0x98>)
 80021b6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 124;
 80021b8:	4b1b      	ldr	r3, [pc, #108]	; (8002228 <MX_TIM3_Init+0x94>)
 80021ba:	227c      	movs	r2, #124	; 0x7c
 80021bc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021be:	4b1a      	ldr	r3, [pc, #104]	; (8002228 <MX_TIM3_Init+0x94>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80021c4:	4b18      	ldr	r3, [pc, #96]	; (8002228 <MX_TIM3_Init+0x94>)
 80021c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021ca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021cc:	4b16      	ldr	r3, [pc, #88]	; (8002228 <MX_TIM3_Init+0x94>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021d2:	4b15      	ldr	r3, [pc, #84]	; (8002228 <MX_TIM3_Init+0x94>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80021d8:	4813      	ldr	r0, [pc, #76]	; (8002228 <MX_TIM3_Init+0x94>)
 80021da:	f00a fb8b 	bl	800c8f4 <HAL_TIM_Base_Init>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80021e4:	f000 f9f0 	bl	80025c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021ec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80021ee:	f107 0310 	add.w	r3, r7, #16
 80021f2:	4619      	mov	r1, r3
 80021f4:	480c      	ldr	r0, [pc, #48]	; (8002228 <MX_TIM3_Init+0x94>)
 80021f6:	f00a fbd5 	bl	800c9a4 <HAL_TIM_ConfigClockSource>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002200:	f000 f9e2 	bl	80025c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002204:	2300      	movs	r3, #0
 8002206:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002208:	2300      	movs	r3, #0
 800220a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800220c:	1d3b      	adds	r3, r7, #4
 800220e:	4619      	mov	r1, r3
 8002210:	4805      	ldr	r0, [pc, #20]	; (8002228 <MX_TIM3_Init+0x94>)
 8002212:	f00a fdf7 	bl	800ce04 <HAL_TIMEx_MasterConfigSynchronization>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800221c:	f000 f9d4 	bl	80025c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002220:	bf00      	nop
 8002222:	3720      	adds	r7, #32
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	200004dc 	.word	0x200004dc
 800222c:	40000400 	.word	0x40000400

08002230 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002234:	4b22      	ldr	r3, [pc, #136]	; (80022c0 <MX_USART3_UART_Init+0x90>)
 8002236:	4a23      	ldr	r2, [pc, #140]	; (80022c4 <MX_USART3_UART_Init+0x94>)
 8002238:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1000000;
 800223a:	4b21      	ldr	r3, [pc, #132]	; (80022c0 <MX_USART3_UART_Init+0x90>)
 800223c:	4a22      	ldr	r2, [pc, #136]	; (80022c8 <MX_USART3_UART_Init+0x98>)
 800223e:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002240:	4b1f      	ldr	r3, [pc, #124]	; (80022c0 <MX_USART3_UART_Init+0x90>)
 8002242:	2200      	movs	r2, #0
 8002244:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002246:	4b1e      	ldr	r3, [pc, #120]	; (80022c0 <MX_USART3_UART_Init+0x90>)
 8002248:	2200      	movs	r2, #0
 800224a:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800224c:	4b1c      	ldr	r3, [pc, #112]	; (80022c0 <MX_USART3_UART_Init+0x90>)
 800224e:	2200      	movs	r2, #0
 8002250:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002252:	4b1b      	ldr	r3, [pc, #108]	; (80022c0 <MX_USART3_UART_Init+0x90>)
 8002254:	220c      	movs	r2, #12
 8002256:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002258:	4b19      	ldr	r3, [pc, #100]	; (80022c0 <MX_USART3_UART_Init+0x90>)
 800225a:	2200      	movs	r2, #0
 800225c:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800225e:	4b18      	ldr	r3, [pc, #96]	; (80022c0 <MX_USART3_UART_Init+0x90>)
 8002260:	2200      	movs	r2, #0
 8002262:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002264:	4b16      	ldr	r3, [pc, #88]	; (80022c0 <MX_USART3_UART_Init+0x90>)
 8002266:	2200      	movs	r2, #0
 8002268:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800226a:	4b15      	ldr	r3, [pc, #84]	; (80022c0 <MX_USART3_UART_Init+0x90>)
 800226c:	2200      	movs	r2, #0
 800226e:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002270:	4b13      	ldr	r3, [pc, #76]	; (80022c0 <MX_USART3_UART_Init+0x90>)
 8002272:	2200      	movs	r2, #0
 8002274:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002276:	4812      	ldr	r0, [pc, #72]	; (80022c0 <MX_USART3_UART_Init+0x90>)
 8002278:	f00a fe52 	bl	800cf20 <HAL_UART_Init>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8002282:	f000 f9a1 	bl	80025c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002286:	2100      	movs	r1, #0
 8002288:	480d      	ldr	r0, [pc, #52]	; (80022c0 <MX_USART3_UART_Init+0x90>)
 800228a:	f00b fee2 	bl	800e052 <HAL_UARTEx_SetTxFifoThreshold>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8002294:	f000 f998 	bl	80025c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002298:	2100      	movs	r1, #0
 800229a:	4809      	ldr	r0, [pc, #36]	; (80022c0 <MX_USART3_UART_Init+0x90>)
 800229c:	f00b ff17 	bl	800e0ce <HAL_UARTEx_SetRxFifoThreshold>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 80022a6:	f000 f98f 	bl	80025c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80022aa:	4805      	ldr	r0, [pc, #20]	; (80022c0 <MX_USART3_UART_Init+0x90>)
 80022ac:	f00b fe98 	bl	800dfe0 <HAL_UARTEx_DisableFifoMode>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 80022b6:	f000 f987 	bl	80025c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80022ba:	bf00      	nop
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	20000528 	.word	0x20000528
 80022c4:	40004800 	.word	0x40004800
 80022c8:	000f4240 	.word	0x000f4240

080022cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b08e      	sub	sp, #56	; 0x38
 80022d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022d6:	2200      	movs	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	605a      	str	r2, [r3, #4]
 80022dc:	609a      	str	r2, [r3, #8]
 80022de:	60da      	str	r2, [r3, #12]
 80022e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80022e2:	4ba0      	ldr	r3, [pc, #640]	; (8002564 <MX_GPIO_Init+0x298>)
 80022e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022e8:	4a9e      	ldr	r2, [pc, #632]	; (8002564 <MX_GPIO_Init+0x298>)
 80022ea:	f043 0310 	orr.w	r3, r3, #16
 80022ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022f2:	4b9c      	ldr	r3, [pc, #624]	; (8002564 <MX_GPIO_Init+0x298>)
 80022f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022f8:	f003 0310 	and.w	r3, r3, #16
 80022fc:	623b      	str	r3, [r7, #32]
 80022fe:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002300:	4b98      	ldr	r3, [pc, #608]	; (8002564 <MX_GPIO_Init+0x298>)
 8002302:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002306:	4a97      	ldr	r2, [pc, #604]	; (8002564 <MX_GPIO_Init+0x298>)
 8002308:	f043 0304 	orr.w	r3, r3, #4
 800230c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002310:	4b94      	ldr	r3, [pc, #592]	; (8002564 <MX_GPIO_Init+0x298>)
 8002312:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002316:	f003 0304 	and.w	r3, r3, #4
 800231a:	61fb      	str	r3, [r7, #28]
 800231c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800231e:	4b91      	ldr	r3, [pc, #580]	; (8002564 <MX_GPIO_Init+0x298>)
 8002320:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002324:	4a8f      	ldr	r2, [pc, #572]	; (8002564 <MX_GPIO_Init+0x298>)
 8002326:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800232a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800232e:	4b8d      	ldr	r3, [pc, #564]	; (8002564 <MX_GPIO_Init+0x298>)
 8002330:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002338:	61bb      	str	r3, [r7, #24]
 800233a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800233c:	4b89      	ldr	r3, [pc, #548]	; (8002564 <MX_GPIO_Init+0x298>)
 800233e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002342:	4a88      	ldr	r2, [pc, #544]	; (8002564 <MX_GPIO_Init+0x298>)
 8002344:	f043 0301 	orr.w	r3, r3, #1
 8002348:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800234c:	4b85      	ldr	r3, [pc, #532]	; (8002564 <MX_GPIO_Init+0x298>)
 800234e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	617b      	str	r3, [r7, #20]
 8002358:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800235a:	4b82      	ldr	r3, [pc, #520]	; (8002564 <MX_GPIO_Init+0x298>)
 800235c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002360:	4a80      	ldr	r2, [pc, #512]	; (8002564 <MX_GPIO_Init+0x298>)
 8002362:	f043 0302 	orr.w	r3, r3, #2
 8002366:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800236a:	4b7e      	ldr	r3, [pc, #504]	; (8002564 <MX_GPIO_Init+0x298>)
 800236c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	613b      	str	r3, [r7, #16]
 8002376:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002378:	4b7a      	ldr	r3, [pc, #488]	; (8002564 <MX_GPIO_Init+0x298>)
 800237a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800237e:	4a79      	ldr	r2, [pc, #484]	; (8002564 <MX_GPIO_Init+0x298>)
 8002380:	f043 0320 	orr.w	r3, r3, #32
 8002384:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002388:	4b76      	ldr	r3, [pc, #472]	; (8002564 <MX_GPIO_Init+0x298>)
 800238a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800238e:	f003 0320 	and.w	r3, r3, #32
 8002392:	60fb      	str	r3, [r7, #12]
 8002394:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002396:	4b73      	ldr	r3, [pc, #460]	; (8002564 <MX_GPIO_Init+0x298>)
 8002398:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800239c:	4a71      	ldr	r2, [pc, #452]	; (8002564 <MX_GPIO_Init+0x298>)
 800239e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023a6:	4b6f      	ldr	r3, [pc, #444]	; (8002564 <MX_GPIO_Init+0x298>)
 80023a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023b0:	60bb      	str	r3, [r7, #8]
 80023b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023b4:	4b6b      	ldr	r3, [pc, #428]	; (8002564 <MX_GPIO_Init+0x298>)
 80023b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023ba:	4a6a      	ldr	r2, [pc, #424]	; (8002564 <MX_GPIO_Init+0x298>)
 80023bc:	f043 0308 	orr.w	r3, r3, #8
 80023c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023c4:	4b67      	ldr	r3, [pc, #412]	; (8002564 <MX_GPIO_Init+0x298>)
 80023c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023ca:	f003 0308 	and.w	r3, r3, #8
 80023ce:	607b      	str	r3, [r7, #4]
 80023d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ATT_4_Pin|ATT_8_Pin|ATT_16_Pin, GPIO_PIN_SET);
 80023d2:	2201      	movs	r2, #1
 80023d4:	2134      	movs	r1, #52	; 0x34
 80023d6:	4864      	ldr	r0, [pc, #400]	; (8002568 <MX_GPIO_Init+0x29c>)
 80023d8:	f004 fd82 	bl	8006ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|MW_INVALID_Pin|LASER_TUNING_Pin|LD3_Pin
 80023dc:	2200      	movs	r2, #0
 80023de:	f245 1103 	movw	r1, #20739	; 0x5103
 80023e2:	4862      	ldr	r0, [pc, #392]	; (800256c <MX_GPIO_Init+0x2a0>)
 80023e4:	f004 fd7c 	bl	8006ee0 <HAL_GPIO_WritePin>
                          |SPARE_OUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET);
 80023e8:	2200      	movs	r2, #0
 80023ea:	2101      	movs	r1, #1
 80023ec:	4860      	ldr	r0, [pc, #384]	; (8002570 <MX_GPIO_Init+0x2a4>)
 80023ee:	f004 fd77 	bl	8006ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80023f2:	2200      	movs	r2, #0
 80023f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023f8:	485e      	ldr	r0, [pc, #376]	; (8002574 <MX_GPIO_Init+0x2a8>)
 80023fa:	f004 fd71 	bl	8006ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SCLK_Pin|MOSI_Pin|REG_EN_Pin, GPIO_PIN_RESET);
 80023fe:	2200      	movs	r2, #0
 8002400:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 8002404:	485c      	ldr	r0, [pc, #368]	; (8002578 <MX_GPIO_Init+0x2ac>)
 8002406:	f004 fd6b 	bl	8006ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 800240a:	2201      	movs	r2, #1
 800240c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002410:	4859      	ldr	r0, [pc, #356]	; (8002578 <MX_GPIO_Init+0x2ac>)
 8002412:	f004 fd65 	bl	8006ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ATT_2_Pin|ATT_1_Pin|ATT_05_Pin|ATT_025_Pin
 8002416:	2201      	movs	r2, #1
 8002418:	21f8      	movs	r1, #248	; 0xf8
 800241a:	4856      	ldr	r0, [pc, #344]	; (8002574 <MX_GPIO_Init+0x2a8>)
 800241c:	f004 fd60 	bl	8006ee0 <HAL_GPIO_WritePin>
                          |ATT_LE_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002420:	2200      	movs	r2, #0
 8002422:	2102      	movs	r1, #2
 8002424:	4850      	ldr	r0, [pc, #320]	; (8002568 <MX_GPIO_Init+0x29c>)
 8002426:	f004 fd5b 	bl	8006ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ATT_4_Pin ATT_8_Pin ATT_16_Pin LD2_Pin */
  GPIO_InitStruct.Pin = ATT_4_Pin|ATT_8_Pin|ATT_16_Pin|LD2_Pin;
 800242a:	2336      	movs	r3, #54	; 0x36
 800242c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800242e:	2301      	movs	r3, #1
 8002430:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002432:	2300      	movs	r3, #0
 8002434:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002436:	2300      	movs	r3, #0
 8002438:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800243a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800243e:	4619      	mov	r1, r3
 8002440:	4849      	ldr	r0, [pc, #292]	; (8002568 <MX_GPIO_Init+0x29c>)
 8002442:	f004 fb85 	bl	8006b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 8002446:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800244a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800244c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002450:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002452:	2300      	movs	r3, #0
 8002454:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002456:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800245a:	4619      	mov	r1, r3
 800245c:	4846      	ldr	r0, [pc, #280]	; (8002578 <MX_GPIO_Init+0x2ac>)
 800245e:	f004 fb77 	bl	8006b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin MW_INVALID_Pin LASER_TUNING_Pin LD3_Pin
                           SPARE_OUT_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|MW_INVALID_Pin|LASER_TUNING_Pin|LD3_Pin
 8002462:	f245 1303 	movw	r3, #20739	; 0x5103
 8002466:	627b      	str	r3, [r7, #36]	; 0x24
                          |SPARE_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002468:	2301      	movs	r3, #1
 800246a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246c:	2300      	movs	r3, #0
 800246e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002470:	2300      	movs	r3, #0
 8002472:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002474:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002478:	4619      	mov	r1, r3
 800247a:	483c      	ldr	r0, [pc, #240]	; (800256c <MX_GPIO_Init+0x2a0>)
 800247c:	f004 fb68 	bl	8006b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002480:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002484:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002486:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800248a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248c:	2300      	movs	r3, #0
 800248e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002490:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002494:	4619      	mov	r1, r3
 8002496:	4839      	ldr	r0, [pc, #228]	; (800257c <MX_GPIO_Init+0x2b0>)
 8002498:	f004 fb5a 	bl	8006b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : SCOPE_TRIG_OUT_Pin */
  GPIO_InitStruct.Pin = SCOPE_TRIG_OUT_Pin;
 800249c:	2301      	movs	r3, #1
 800249e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024a0:	2301      	movs	r3, #1
 80024a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a4:	2300      	movs	r3, #0
 80024a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a8:	2300      	movs	r3, #0
 80024aa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SCOPE_TRIG_OUT_GPIO_Port, &GPIO_InitStruct);
 80024ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024b0:	4619      	mov	r1, r3
 80024b2:	482f      	ldr	r0, [pc, #188]	; (8002570 <MX_GPIO_Init+0x2a4>)
 80024b4:	f004 fb4c 	bl	8006b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin ATT_2_Pin ATT_1_Pin ATT_05_Pin
                           ATT_025_Pin ATT_LE_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|ATT_2_Pin|ATT_1_Pin|ATT_05_Pin
 80024b8:	f44f 639f 	mov.w	r3, #1272	; 0x4f8
 80024bc:	627b      	str	r3, [r7, #36]	; 0x24
                          |ATT_025_Pin|ATT_LE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024be:	2301      	movs	r3, #1
 80024c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c2:	2300      	movs	r3, #0
 80024c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c6:	2300      	movs	r3, #0
 80024c8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024ce:	4619      	mov	r1, r3
 80024d0:	4828      	ldr	r0, [pc, #160]	; (8002574 <MX_GPIO_Init+0x2a8>)
 80024d2:	f004 fb3d 	bl	8006b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 80024d6:	2380      	movs	r3, #128	; 0x80
 80024d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80024da:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80024de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e0:	2300      	movs	r3, #0
 80024e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80024e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024e8:	4619      	mov	r1, r3
 80024ea:	4821      	ldr	r0, [pc, #132]	; (8002570 <MX_GPIO_Init+0x2a4>)
 80024ec:	f004 fb30 	bl	8006b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : SCLK_Pin MOSI_Pin SEN_Pin REG_EN_Pin */
  GPIO_InitStruct.Pin = SCLK_Pin|MOSI_Pin|SEN_Pin|REG_EN_Pin;
 80024f0:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 80024f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024f6:	2301      	movs	r3, #1
 80024f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80024fa:	2302      	movs	r3, #2
 80024fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024fe:	2300      	movs	r3, #0
 8002500:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002502:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002506:	4619      	mov	r1, r3
 8002508:	481b      	ldr	r0, [pc, #108]	; (8002578 <MX_GPIO_Init+0x2ac>)
 800250a:	f004 fb21 	bl	8006b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800250e:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8002512:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002514:	2302      	movs	r3, #2
 8002516:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002518:	2300      	movs	r3, #0
 800251a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800251c:	2300      	movs	r3, #0
 800251e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002520:	230a      	movs	r3, #10
 8002522:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002524:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002528:	4619      	mov	r1, r3
 800252a:	4815      	ldr	r0, [pc, #84]	; (8002580 <MX_GPIO_Init+0x2b4>)
 800252c:	f004 fb10 	bl	8006b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : MISO_Pin */
  GPIO_InitStruct.Pin = MISO_Pin;
 8002530:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002534:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002536:	2300      	movs	r3, #0
 8002538:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253a:	2300      	movs	r3, #0
 800253c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MISO_GPIO_Port, &GPIO_InitStruct);
 800253e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002542:	4619      	mov	r1, r3
 8002544:	480c      	ldr	r0, [pc, #48]	; (8002578 <MX_GPIO_Init+0x2ac>)
 8002546:	f004 fb03 	bl	8006b50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800254a:	2200      	movs	r2, #0
 800254c:	2100      	movs	r1, #0
 800254e:	2028      	movs	r0, #40	; 0x28
 8002550:	f002 fdf3 	bl	800513a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002554:	2028      	movs	r0, #40	; 0x28
 8002556:	f002 fe0a 	bl	800516e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800255a:	bf00      	nop
 800255c:	3738      	adds	r7, #56	; 0x38
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	58024400 	.word	0x58024400
 8002568:	58021000 	.word	0x58021000
 800256c:	58020400 	.word	0x58020400
 8002570:	58021800 	.word	0x58021800
 8002574:	58020c00 	.word	0x58020c00
 8002578:	58020800 	.word	0x58020800
 800257c:	58021400 	.word	0x58021400
 8002580:	58020000 	.word	0x58020000

08002584 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  adc_val = HAL_ADC_GetValue(&hadc3);
 800258c:	480a      	ldr	r0, [pc, #40]	; (80025b8 <HAL_ADC_ConvCpltCallback+0x34>)
 800258e:	f001 fc8f 	bl	8003eb0 <HAL_ADC_GetValue>
 8002592:	4603      	mov	r3, r0
 8002594:	4a09      	ldr	r2, [pc, #36]	; (80025bc <HAL_ADC_ConvCpltCallback+0x38>)
 8002596:	6013      	str	r3, [r2, #0]
  //printf("ADC value: %lu \r\n", adc_val);
  dac_val = adc_val >> 4;
 8002598:	4b08      	ldr	r3, [pc, #32]	; (80025bc <HAL_ADC_ConvCpltCallback+0x38>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	091b      	lsrs	r3, r3, #4
 800259e:	4a08      	ldr	r2, [pc, #32]	; (80025c0 <HAL_ADC_ConvCpltCallback+0x3c>)
 80025a0:	6013      	str	r3, [r2, #0]
	  printf("ADC reading: %lu, max: %lu, min: %lu \r\n", adc_val, adc_max, adc_min);
  }
  //printf("ADC reading: %lu, max: %lu, min: %lu \r\n", adc_val, adc_max, adc_min);
#endif //QUANTIFY_ADC_NOISE
  //printf("ADC value: %lu, DAC value: %lu \r\n", adc_val, dac_val);
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_val);
 80025a2:	4b07      	ldr	r3, [pc, #28]	; (80025c0 <HAL_ADC_ConvCpltCallback+0x3c>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2200      	movs	r2, #0
 80025a8:	2100      	movs	r1, #0
 80025aa:	4806      	ldr	r0, [pc, #24]	; (80025c4 <HAL_ADC_ConvCpltCallback+0x40>)
 80025ac:	f002 fe6d 	bl	800528a <HAL_DAC_SetValue>
  //HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);
}
 80025b0:	bf00      	nop
 80025b2:	3708      	adds	r7, #8
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	20000304 	.word	0x20000304
 80025bc:	200005c0 	.word	0x200005c0
 80025c0:	200005c4 	.word	0x200005c4
 80025c4:	20000368 	.word	0x20000368

080025c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80025cc:	b672      	cpsid	i
}
 80025ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	__disable_irq();

	printf("Error handler routine called\r\n");
 80025d0:	4810      	ldr	r0, [pc, #64]	; (8002614 <Error_Handler+0x4c>)
 80025d2:	f016 fda1 	bl	8019118 <puts>

	/* Disable the AOM */
	HAL_HRTIM_WaveformOutputStop(&hhrtim, HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TE1);
 80025d6:	f240 1103 	movw	r1, #259	; 0x103
 80025da:	480f      	ldr	r0, [pc, #60]	; (8002618 <Error_Handler+0x50>)
 80025dc:	f005 f80e 	bl	80075fc <HAL_HRTIM_WaveformOutputStop>
	HAL_HRTIM_WaveformCounterStop_IT(&hhrtim, HRTIM_TIMERID_TIMER_A | HRTIM_TIMERID_TIMER_E);
 80025e0:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
 80025e4:	480c      	ldr	r0, [pc, #48]	; (8002618 <Error_Handler+0x50>)
 80025e6:	f005 f8a7 	bl	8007738 <HAL_HRTIM_WaveformCountStop_IT>

	/* Power down the synthesiser */
	HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 0);
 80025ea:	2200      	movs	r2, #0
 80025ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025f0:	480a      	ldr	r0, [pc, #40]	; (800261c <Error_Handler+0x54>)
 80025f2:	f004 fc75 	bl	8006ee0 <HAL_GPIO_WritePin>

	while (1) {
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //toggle red LED
 80025f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80025fa:	4809      	ldr	r0, [pc, #36]	; (8002620 <Error_Handler+0x58>)
 80025fc:	f004 fc89 	bl	8006f12 <HAL_GPIO_TogglePin>
		timer_delay(SLOW_TIMER, ERROR_LED_DELAY);
 8002600:	4b08      	ldr	r3, [pc, #32]	; (8002624 <Error_Handler+0x5c>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002608:	4611      	mov	r1, r2
 800260a:	4618      	mov	r0, r3
 800260c:	f018 fcbc 	bl	801af88 <__timer_delay_veneer>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //toggle red LED
 8002610:	e7f1      	b.n	80025f6 <Error_Handler+0x2e>
 8002612:	bf00      	nop
 8002614:	0801b1e0 	.word	0x0801b1e0
 8002618:	2000037c 	.word	0x2000037c
 800261c:	58020800 	.word	0x58020800
 8002620:	58020400 	.word	0x58020400
 8002624:	20000018 	.word	0x20000018

08002628 <HAL_MspInit>:
void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef *hhrtim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800262e:	4b0a      	ldr	r3, [pc, #40]	; (8002658 <HAL_MspInit+0x30>)
 8002630:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002634:	4a08      	ldr	r2, [pc, #32]	; (8002658 <HAL_MspInit+0x30>)
 8002636:	f043 0302 	orr.w	r3, r3, #2
 800263a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800263e:	4b06      	ldr	r3, [pc, #24]	; (8002658 <HAL_MspInit+0x30>)
 8002640:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	607b      	str	r3, [r7, #4]
 800264a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr
 8002658:	58024400 	.word	0x58024400

0800265c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b0b4      	sub	sp, #208	; 0xd0
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002664:	f107 0310 	add.w	r3, r7, #16
 8002668:	22c0      	movs	r2, #192	; 0xc0
 800266a:	2100      	movs	r1, #0
 800266c:	4618      	mov	r0, r3
 800266e:	f016 fe43 	bl	80192f8 <memset>
  if(hadc->Instance==ADC3)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a2b      	ldr	r2, [pc, #172]	; (8002724 <HAL_ADC_MspInit+0xc8>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d14e      	bne.n	800271a <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800267c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002680:	f04f 0300 	mov.w	r3, #0
 8002684:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8002688:	2301      	movs	r3, #1
 800268a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 19;
 800268c:	2313      	movs	r3, #19
 800268e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 79;
 8002690:	234f      	movs	r3, #79	; 0x4f
 8002692:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8002694:	2302      	movs	r3, #2
 8002696:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8002698:	2302      	movs	r3, #2
 800269a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800269c:	23c0      	movs	r3, #192	; 0xc0
 800269e:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80026a0:	2320      	movs	r3, #32
 80026a2:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80026a4:	2300      	movs	r3, #0
 80026a6:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80026a8:	2300      	movs	r3, #0
 80026aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026ae:	f107 0310 	add.w	r3, r7, #16
 80026b2:	4618      	mov	r0, r3
 80026b4:	f007 fbca 	bl	8009e4c <HAL_RCCEx_PeriphCLKConfig>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <HAL_ADC_MspInit+0x66>
    {
      Error_Handler();
 80026be:	f7ff ff83 	bl	80025c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80026c2:	4b19      	ldr	r3, [pc, #100]	; (8002728 <HAL_ADC_MspInit+0xcc>)
 80026c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026c8:	4a17      	ldr	r2, [pc, #92]	; (8002728 <HAL_ADC_MspInit+0xcc>)
 80026ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026d2:	4b15      	ldr	r3, [pc, #84]	; (8002728 <HAL_ADC_MspInit+0xcc>)
 80026d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026dc:	60fb      	str	r3, [r7, #12]
 80026de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026e0:	4b11      	ldr	r3, [pc, #68]	; (8002728 <HAL_ADC_MspInit+0xcc>)
 80026e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026e6:	4a10      	ldr	r2, [pc, #64]	; (8002728 <HAL_ADC_MspInit+0xcc>)
 80026e8:	f043 0304 	orr.w	r3, r3, #4
 80026ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026f0:	4b0d      	ldr	r3, [pc, #52]	; (8002728 <HAL_ADC_MspInit+0xcc>)
 80026f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026f6:	f003 0304 	and.w	r3, r3, #4
 80026fa:	60bb      	str	r3, [r7, #8]
 80026fc:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PC2_C     ------> ADC3_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80026fe:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8002702:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002706:	f000 fec1 	bl	800348c <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 800270a:	2200      	movs	r2, #0
 800270c:	2100      	movs	r1, #0
 800270e:	207f      	movs	r0, #127	; 0x7f
 8002710:	f002 fd13 	bl	800513a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8002714:	207f      	movs	r0, #127	; 0x7f
 8002716:	f002 fd2a 	bl	800516e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800271a:	bf00      	nop
 800271c:	37d0      	adds	r7, #208	; 0xd0
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	58026000 	.word	0x58026000
 8002728:	58024400 	.word	0x58024400

0800272c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b08a      	sub	sp, #40	; 0x28
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002734:	f107 0314 	add.w	r3, r7, #20
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	605a      	str	r2, [r3, #4]
 800273e:	609a      	str	r2, [r3, #8]
 8002740:	60da      	str	r2, [r3, #12]
 8002742:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a18      	ldr	r2, [pc, #96]	; (80027ac <HAL_DAC_MspInit+0x80>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d129      	bne.n	80027a2 <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800274e:	4b18      	ldr	r3, [pc, #96]	; (80027b0 <HAL_DAC_MspInit+0x84>)
 8002750:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002754:	4a16      	ldr	r2, [pc, #88]	; (80027b0 <HAL_DAC_MspInit+0x84>)
 8002756:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800275a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800275e:	4b14      	ldr	r3, [pc, #80]	; (80027b0 <HAL_DAC_MspInit+0x84>)
 8002760:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002764:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002768:	613b      	str	r3, [r7, #16]
 800276a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800276c:	4b10      	ldr	r3, [pc, #64]	; (80027b0 <HAL_DAC_MspInit+0x84>)
 800276e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002772:	4a0f      	ldr	r2, [pc, #60]	; (80027b0 <HAL_DAC_MspInit+0x84>)
 8002774:	f043 0301 	orr.w	r3, r3, #1
 8002778:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800277c:	4b0c      	ldr	r3, [pc, #48]	; (80027b0 <HAL_DAC_MspInit+0x84>)
 800277e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	60fb      	str	r3, [r7, #12]
 8002788:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800278a:	2310      	movs	r3, #16
 800278c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800278e:	2303      	movs	r3, #3
 8002790:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002792:	2300      	movs	r3, #0
 8002794:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002796:	f107 0314 	add.w	r3, r7, #20
 800279a:	4619      	mov	r1, r3
 800279c:	4805      	ldr	r0, [pc, #20]	; (80027b4 <HAL_DAC_MspInit+0x88>)
 800279e:	f004 f9d7 	bl	8006b50 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80027a2:	bf00      	nop
 80027a4:	3728      	adds	r7, #40	; 0x28
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	40007400 	.word	0x40007400
 80027b0:	58024400 	.word	0x58024400
 80027b4:	58020000 	.word	0x58020000

080027b8 <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b0b4      	sub	sp, #208	; 0xd0
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027c0:	f107 0310 	add.w	r3, r7, #16
 80027c4:	22c0      	movs	r2, #192	; 0xc0
 80027c6:	2100      	movs	r1, #0
 80027c8:	4618      	mov	r0, r3
 80027ca:	f016 fd95 	bl	80192f8 <memset>
  if(hhrtim->Instance==HRTIM1)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a1c      	ldr	r2, [pc, #112]	; (8002844 <HAL_HRTIM_MspInit+0x8c>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d131      	bne.n	800283c <HAL_HRTIM_MspInit+0x84>

  /* USER CODE END HRTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1;
 80027d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027dc:	f04f 0300 	mov.w	r3, #0
 80027e0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Hrtim1ClockSelection = RCC_HRTIM1CLK_TIMCLK;
 80027e4:	2300      	movs	r3, #0
 80027e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027ea:	f107 0310 	add.w	r3, r7, #16
 80027ee:	4618      	mov	r0, r3
 80027f0:	f007 fb2c 	bl	8009e4c <HAL_RCCEx_PeriphCLKConfig>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <HAL_HRTIM_MspInit+0x46>
    {
      Error_Handler();
 80027fa:	f7ff fee5 	bl	80025c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 80027fe:	4b12      	ldr	r3, [pc, #72]	; (8002848 <HAL_HRTIM_MspInit+0x90>)
 8002800:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002804:	4a10      	ldr	r2, [pc, #64]	; (8002848 <HAL_HRTIM_MspInit+0x90>)
 8002806:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800280a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800280e:	4b0e      	ldr	r3, [pc, #56]	; (8002848 <HAL_HRTIM_MspInit+0x90>)
 8002810:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002814:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002818:	60fb      	str	r3, [r7, #12]
 800281a:	68fb      	ldr	r3, [r7, #12]
    /* HRTIM1 interrupt Init */
    HAL_NVIC_SetPriority(HRTIM1_TIMA_IRQn, 0, 0);
 800281c:	2200      	movs	r2, #0
 800281e:	2100      	movs	r1, #0
 8002820:	2068      	movs	r0, #104	; 0x68
 8002822:	f002 fc8a 	bl	800513a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIMA_IRQn);
 8002826:	2068      	movs	r0, #104	; 0x68
 8002828:	f002 fca1 	bl	800516e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(HRTIM1_TIME_IRQn, 0, 0);
 800282c:	2200      	movs	r2, #0
 800282e:	2100      	movs	r1, #0
 8002830:	206c      	movs	r0, #108	; 0x6c
 8002832:	f002 fc82 	bl	800513a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIME_IRQn);
 8002836:	206c      	movs	r0, #108	; 0x6c
 8002838:	f002 fc99 	bl	800516e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }

}
 800283c:	bf00      	nop
 800283e:	37d0      	adds	r7, #208	; 0xd0
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	40017400 	.word	0x40017400
 8002848:	58024400 	.word	0x58024400

0800284c <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b08a      	sub	sp, #40	; 0x28
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002854:	f107 0314 	add.w	r3, r7, #20
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	605a      	str	r2, [r3, #4]
 800285e:	609a      	str	r2, [r3, #8]
 8002860:	60da      	str	r2, [r3, #12]
 8002862:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a22      	ldr	r2, [pc, #136]	; (80028f4 <HAL_HRTIM_MspPostInit+0xa8>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d13d      	bne.n	80028ea <HAL_HRTIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800286e:	4b22      	ldr	r3, [pc, #136]	; (80028f8 <HAL_HRTIM_MspPostInit+0xac>)
 8002870:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002874:	4a20      	ldr	r2, [pc, #128]	; (80028f8 <HAL_HRTIM_MspPostInit+0xac>)
 8002876:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800287a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800287e:	4b1e      	ldr	r3, [pc, #120]	; (80028f8 <HAL_HRTIM_MspPostInit+0xac>)
 8002880:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002888:	613b      	str	r3, [r7, #16]
 800288a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800288c:	4b1a      	ldr	r3, [pc, #104]	; (80028f8 <HAL_HRTIM_MspPostInit+0xac>)
 800288e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002892:	4a19      	ldr	r2, [pc, #100]	; (80028f8 <HAL_HRTIM_MspPostInit+0xac>)
 8002894:	f043 0304 	orr.w	r3, r3, #4
 8002898:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800289c:	4b16      	ldr	r3, [pc, #88]	; (80028f8 <HAL_HRTIM_MspPostInit+0xac>)
 800289e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028a2:	f003 0304 	and.w	r3, r3, #4
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	68fb      	ldr	r3, [r7, #12]
    /**HRTIM GPIO Configuration
    PG6     ------> HRTIM_CHE1
    PC6     ------> HRTIM_CHA1
    PC7     ------> HRTIM_CHA2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80028aa:	2340      	movs	r3, #64	; 0x40
 80028ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ae:	2302      	movs	r3, #2
 80028b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b2:	2300      	movs	r3, #0
 80028b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028b6:	2303      	movs	r3, #3
 80028b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_HRTIM1;
 80028ba:	2302      	movs	r3, #2
 80028bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80028be:	f107 0314 	add.w	r3, r7, #20
 80028c2:	4619      	mov	r1, r3
 80028c4:	480d      	ldr	r0, [pc, #52]	; (80028fc <HAL_HRTIM_MspPostInit+0xb0>)
 80028c6:	f004 f943 	bl	8006b50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80028ca:	23c0      	movs	r3, #192	; 0xc0
 80028cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ce:	2302      	movs	r3, #2
 80028d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d2:	2300      	movs	r3, #0
 80028d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028d6:	2303      	movs	r3, #3
 80028d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_HRTIM1;
 80028da:	2301      	movs	r3, #1
 80028dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028de:	f107 0314 	add.w	r3, r7, #20
 80028e2:	4619      	mov	r1, r3
 80028e4:	4806      	ldr	r0, [pc, #24]	; (8002900 <HAL_HRTIM_MspPostInit+0xb4>)
 80028e6:	f004 f933 	bl	8006b50 <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 80028ea:	bf00      	nop
 80028ec:	3728      	adds	r7, #40	; 0x28
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	40017400 	.word	0x40017400
 80028f8:	58024400 	.word	0x58024400
 80028fc:	58021800 	.word	0x58021800
 8002900:	58020800 	.word	0x58020800

08002904 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b0b4      	sub	sp, #208	; 0xd0
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800290c:	f107 0310 	add.w	r3, r7, #16
 8002910:	22c0      	movs	r2, #192	; 0xc0
 8002912:	2100      	movs	r1, #0
 8002914:	4618      	mov	r0, r3
 8002916:	f016 fcef 	bl	80192f8 <memset>
  if(hlptim->Instance==LPTIM1)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a19      	ldr	r2, [pc, #100]	; (8002984 <HAL_LPTIM_MspInit+0x80>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d12a      	bne.n	800297a <HAL_LPTIM_MspInit+0x76>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8002924:	f04f 0220 	mov.w	r2, #32
 8002928:	f04f 0300 	mov.w	r3, #0
 800292c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8002930:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002934:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002938:	f107 0310 	add.w	r3, r7, #16
 800293c:	4618      	mov	r0, r3
 800293e:	f007 fa85 	bl	8009e4c <HAL_RCCEx_PeriphCLKConfig>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <HAL_LPTIM_MspInit+0x48>
    {
      Error_Handler();
 8002948:	f7ff fe3e 	bl	80025c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800294c:	4b0e      	ldr	r3, [pc, #56]	; (8002988 <HAL_LPTIM_MspInit+0x84>)
 800294e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002952:	4a0d      	ldr	r2, [pc, #52]	; (8002988 <HAL_LPTIM_MspInit+0x84>)
 8002954:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002958:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800295c:	4b0a      	ldr	r3, [pc, #40]	; (8002988 <HAL_LPTIM_MspInit+0x84>)
 800295e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002962:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	68fb      	ldr	r3, [r7, #12]
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 800296a:	2200      	movs	r2, #0
 800296c:	2100      	movs	r1, #0
 800296e:	205d      	movs	r0, #93	; 0x5d
 8002970:	f002 fbe3 	bl	800513a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8002974:	205d      	movs	r0, #93	; 0x5d
 8002976:	f002 fbfa 	bl	800516e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 800297a:	bf00      	nop
 800297c:	37d0      	adds	r7, #208	; 0xd0
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	40002400 	.word	0x40002400
 8002988:	58024400 	.word	0x58024400

0800298c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a16      	ldr	r2, [pc, #88]	; (80029f4 <HAL_TIM_Base_MspInit+0x68>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d10f      	bne.n	80029be <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800299e:	4b16      	ldr	r3, [pc, #88]	; (80029f8 <HAL_TIM_Base_MspInit+0x6c>)
 80029a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80029a4:	4a14      	ldr	r2, [pc, #80]	; (80029f8 <HAL_TIM_Base_MspInit+0x6c>)
 80029a6:	f043 0301 	orr.w	r3, r3, #1
 80029aa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80029ae:	4b12      	ldr	r3, [pc, #72]	; (80029f8 <HAL_TIM_Base_MspInit+0x6c>)
 80029b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	60fb      	str	r3, [r7, #12]
 80029ba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80029bc:	e013      	b.n	80029e6 <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM3)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a0e      	ldr	r2, [pc, #56]	; (80029fc <HAL_TIM_Base_MspInit+0x70>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d10e      	bne.n	80029e6 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029c8:	4b0b      	ldr	r3, [pc, #44]	; (80029f8 <HAL_TIM_Base_MspInit+0x6c>)
 80029ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80029ce:	4a0a      	ldr	r2, [pc, #40]	; (80029f8 <HAL_TIM_Base_MspInit+0x6c>)
 80029d0:	f043 0302 	orr.w	r3, r3, #2
 80029d4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80029d8:	4b07      	ldr	r3, [pc, #28]	; (80029f8 <HAL_TIM_Base_MspInit+0x6c>)
 80029da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	60bb      	str	r3, [r7, #8]
 80029e4:	68bb      	ldr	r3, [r7, #8]
}
 80029e6:	bf00      	nop
 80029e8:	3714      	adds	r7, #20
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	40010000 	.word	0x40010000
 80029f8:	58024400 	.word	0x58024400
 80029fc:	40000400 	.word	0x40000400

08002a00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b0ba      	sub	sp, #232	; 0xe8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a08:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	605a      	str	r2, [r3, #4]
 8002a12:	609a      	str	r2, [r3, #8]
 8002a14:	60da      	str	r2, [r3, #12]
 8002a16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a18:	f107 0310 	add.w	r3, r7, #16
 8002a1c:	22c0      	movs	r2, #192	; 0xc0
 8002a1e:	2100      	movs	r1, #0
 8002a20:	4618      	mov	r0, r3
 8002a22:	f016 fc69 	bl	80192f8 <memset>
  if(huart->Instance==USART3)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a27      	ldr	r2, [pc, #156]	; (8002ac8 <HAL_UART_MspInit+0xc8>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d146      	bne.n	8002abe <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002a30:	f04f 0202 	mov.w	r2, #2
 8002a34:	f04f 0300 	mov.w	r3, #0
 8002a38:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a42:	f107 0310 	add.w	r3, r7, #16
 8002a46:	4618      	mov	r0, r3
 8002a48:	f007 fa00 	bl	8009e4c <HAL_RCCEx_PeriphCLKConfig>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002a52:	f7ff fdb9 	bl	80025c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002a56:	4b1d      	ldr	r3, [pc, #116]	; (8002acc <HAL_UART_MspInit+0xcc>)
 8002a58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a5c:	4a1b      	ldr	r2, [pc, #108]	; (8002acc <HAL_UART_MspInit+0xcc>)
 8002a5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a62:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002a66:	4b19      	ldr	r3, [pc, #100]	; (8002acc <HAL_UART_MspInit+0xcc>)
 8002a68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a70:	60fb      	str	r3, [r7, #12]
 8002a72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a74:	4b15      	ldr	r3, [pc, #84]	; (8002acc <HAL_UART_MspInit+0xcc>)
 8002a76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a7a:	4a14      	ldr	r2, [pc, #80]	; (8002acc <HAL_UART_MspInit+0xcc>)
 8002a7c:	f043 0308 	orr.w	r3, r3, #8
 8002a80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a84:	4b11      	ldr	r3, [pc, #68]	; (8002acc <HAL_UART_MspInit+0xcc>)
 8002a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a8a:	f003 0308 	and.w	r3, r3, #8
 8002a8e:	60bb      	str	r3, [r7, #8]
 8002a90:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002a92:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002aac:	2307      	movs	r3, #7
 8002aae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ab2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	4805      	ldr	r0, [pc, #20]	; (8002ad0 <HAL_UART_MspInit+0xd0>)
 8002aba:	f004 f849 	bl	8006b50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002abe:	bf00      	nop
 8002ac0:	37e8      	adds	r7, #232	; 0xe8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	40004800 	.word	0x40004800
 8002acc:	58024400 	.word	0x58024400
 8002ad0:	58020c00 	.word	0x58020c00

08002ad4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002ad8:	f007 f99c 	bl	8009e14 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
		Error_Handler();
 8002adc:	f7ff fd74 	bl	80025c8 <Error_Handler>
 8002ae0:	e7fc      	b.n	8002adc <NMI_Handler+0x8>

08002ae2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  Error_Handler();
 8002ae6:	f7ff fd6f 	bl	80025c8 <Error_Handler>
 8002aea:	e7fc      	b.n	8002ae6 <HardFault_Handler+0x4>

08002aec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  Error_Handler();
 8002af0:	f7ff fd6a 	bl	80025c8 <Error_Handler>
 8002af4:	e7fc      	b.n	8002af0 <MemManage_Handler+0x4>

08002af6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002af6:	b580      	push	{r7, lr}
 8002af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  Error_Handler();
 8002afa:	f7ff fd65 	bl	80025c8 <Error_Handler>
 8002afe:	e7fc      	b.n	8002afa <BusFault_Handler+0x4>

08002b00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  Error_Handler();
 8002b04:	f7ff fd60 	bl	80025c8 <Error_Handler>
 8002b08:	e7fc      	b.n	8002b04 <UsageFault_Handler+0x4>

08002b0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b0e:	bf00      	nop
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b1c:	bf00      	nop
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr

08002b26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b26:	b480      	push	{r7}
 8002b28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b2a:	bf00      	nop
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b38:	f000 fc44 	bl	80033c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b3c:	bf00      	nop
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002b44:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002b48:	f004 f9fd 	bl	8006f46 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 8002b4c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002b50:	f004 f9f9 	bl	8006f46 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002b54:	bf00      	nop
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */
  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8002b5c:	4802      	ldr	r0, [pc, #8]	; (8002b68 <LPTIM1_IRQHandler+0x10>)
 8002b5e:	f005 fe32 	bl	80087c6 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */
  /* USER CODE END LPTIM1_IRQn 1 */
}
 8002b62:	bf00      	nop
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	20000458 	.word	0x20000458

08002b6c <HRTIM1_TIMA_IRQHandler>:

/**
  * @brief This function handles HRTIM timer A global interrupt.
  */
void HRTIM1_TIMA_IRQHandler(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIMA_IRQn 0 */

  /* USER CODE END HRTIM1_TIMA_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim,HRTIM_TIMERINDEX_TIMER_A);
 8002b70:	2100      	movs	r1, #0
 8002b72:	4802      	ldr	r0, [pc, #8]	; (8002b7c <HRTIM1_TIMA_IRQHandler+0x10>)
 8002b74:	f004 fe5e 	bl	8007834 <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIMA_IRQn 1 */

  /* USER CODE END HRTIM1_TIMA_IRQn 1 */
}
 8002b78:	bf00      	nop
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	2000037c 	.word	0x2000037c

08002b80 <HRTIM1_TIME_IRQHandler>:

/**
  * @brief This function handles HRTIM timer E global interrupt.
  */
void HRTIM1_TIME_IRQHandler(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIME_IRQn 0 */

  /* USER CODE END HRTIM1_TIME_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim,HRTIM_TIMERINDEX_TIMER_E);
 8002b84:	2104      	movs	r1, #4
 8002b86:	4802      	ldr	r0, [pc, #8]	; (8002b90 <HRTIM1_TIME_IRQHandler+0x10>)
 8002b88:	f004 fe54 	bl	8007834 <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIME_IRQn 1 */

  /* USER CODE END HRTIM1_TIME_IRQn 1 */
}
 8002b8c:	bf00      	nop
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	2000037c 	.word	0x2000037c

08002b94 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8002b98:	4802      	ldr	r0, [pc, #8]	; (8002ba4 <ADC3_IRQHandler+0x10>)
 8002b9a:	f001 f997 	bl	8003ecc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8002b9e:	bf00      	nop
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	20000304 	.word	0x20000304

08002ba8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
	return 1;
 8002bac:	2301      	movs	r3, #1
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <_kill>:

int _kill(int pid, int sig)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002bc2:	4b05      	ldr	r3, [pc, #20]	; (8002bd8 <_kill+0x20>)
 8002bc4:	2216      	movs	r2, #22
 8002bc6:	601a      	str	r2, [r3, #0]
	return -1;
 8002bc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr
 8002bd8:	20008290 	.word	0x20008290

08002bdc <_exit>:

void _exit (int status)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002be4:	f04f 31ff 	mov.w	r1, #4294967295
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f7ff ffe5 	bl	8002bb8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002bee:	e7fe      	b.n	8002bee <_exit+0x12>

08002bf0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b086      	sub	sp, #24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	617b      	str	r3, [r7, #20]
 8002c00:	e00a      	b.n	8002c18 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002c02:	f3af 8000 	nop.w
 8002c06:	4601      	mov	r1, r0
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	1c5a      	adds	r2, r3, #1
 8002c0c:	60ba      	str	r2, [r7, #8]
 8002c0e:	b2ca      	uxtb	r2, r1
 8002c10:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	3301      	adds	r3, #1
 8002c16:	617b      	str	r3, [r7, #20]
 8002c18:	697a      	ldr	r2, [r7, #20]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	dbf0      	blt.n	8002c02 <_read+0x12>
	}

return len;
 8002c20:	687b      	ldr	r3, [r7, #4]
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3718      	adds	r7, #24
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b086      	sub	sp, #24
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	60f8      	str	r0, [r7, #12]
 8002c32:	60b9      	str	r1, [r7, #8]
 8002c34:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c36:	2300      	movs	r3, #0
 8002c38:	617b      	str	r3, [r7, #20]
 8002c3a:	e009      	b.n	8002c50 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	1c5a      	adds	r2, r3, #1
 8002c40:	60ba      	str	r2, [r7, #8]
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7fe fdc1 	bl	80017cc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	617b      	str	r3, [r7, #20]
 8002c50:	697a      	ldr	r2, [r7, #20]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	dbf1      	blt.n	8002c3c <_write+0x12>
	}
	return len;
 8002c58:	687b      	ldr	r3, [r7, #4]
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3718      	adds	r7, #24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <_close>:

int _close(int file)
{
 8002c62:	b480      	push	{r7}
 8002c64:	b083      	sub	sp, #12
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
	return -1;
 8002c6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b083      	sub	sp, #12
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
 8002c82:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c8a:	605a      	str	r2, [r3, #4]
	return 0;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <_isatty>:

int _isatty(int file)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b083      	sub	sp, #12
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
	return 1;
 8002ca2:	2301      	movs	r3, #1
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b085      	sub	sp, #20
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
	return 0;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3714      	adds	r7, #20
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
	...

08002ccc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b087      	sub	sp, #28
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cd4:	4a14      	ldr	r2, [pc, #80]	; (8002d28 <_sbrk+0x5c>)
 8002cd6:	4b15      	ldr	r3, [pc, #84]	; (8002d2c <_sbrk+0x60>)
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ce0:	4b13      	ldr	r3, [pc, #76]	; (8002d30 <_sbrk+0x64>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d102      	bne.n	8002cee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ce8:	4b11      	ldr	r3, [pc, #68]	; (8002d30 <_sbrk+0x64>)
 8002cea:	4a12      	ldr	r2, [pc, #72]	; (8002d34 <_sbrk+0x68>)
 8002cec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cee:	4b10      	ldr	r3, [pc, #64]	; (8002d30 <_sbrk+0x64>)
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	693a      	ldr	r2, [r7, #16]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d205      	bcs.n	8002d08 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8002cfc:	4b0e      	ldr	r3, [pc, #56]	; (8002d38 <_sbrk+0x6c>)
 8002cfe:	220c      	movs	r2, #12
 8002d00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d02:	f04f 33ff 	mov.w	r3, #4294967295
 8002d06:	e009      	b.n	8002d1c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d08:	4b09      	ldr	r3, [pc, #36]	; (8002d30 <_sbrk+0x64>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d0e:	4b08      	ldr	r3, [pc, #32]	; (8002d30 <_sbrk+0x64>)
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4413      	add	r3, r2
 8002d16:	4a06      	ldr	r2, [pc, #24]	; (8002d30 <_sbrk+0x64>)
 8002d18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	371c      	adds	r7, #28
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr
 8002d28:	20020000 	.word	0x20020000
 8002d2c:	00000400 	.word	0x00000400
 8002d30:	200005e8 	.word	0x200005e8
 8002d34:	200082a0 	.word	0x200082a0
 8002d38:	20008290 	.word	0x20008290

08002d3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002d40:	4b37      	ldr	r3, [pc, #220]	; (8002e20 <SystemInit+0xe4>)
 8002d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d46:	4a36      	ldr	r2, [pc, #216]	; (8002e20 <SystemInit+0xe4>)
 8002d48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002d50:	4b34      	ldr	r3, [pc, #208]	; (8002e24 <SystemInit+0xe8>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 030f 	and.w	r3, r3, #15
 8002d58:	2b06      	cmp	r3, #6
 8002d5a:	d807      	bhi.n	8002d6c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */

	  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002d5c:	4b31      	ldr	r3, [pc, #196]	; (8002e24 <SystemInit+0xe8>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f023 030f 	bic.w	r3, r3, #15
 8002d64:	4a2f      	ldr	r2, [pc, #188]	; (8002e24 <SystemInit+0xe8>)
 8002d66:	f043 0307 	orr.w	r3, r3, #7
 8002d6a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002d6c:	4b2e      	ldr	r3, [pc, #184]	; (8002e28 <SystemInit+0xec>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a2d      	ldr	r2, [pc, #180]	; (8002e28 <SystemInit+0xec>)
 8002d72:	f043 0301 	orr.w	r3, r3, #1
 8002d76:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002d78:	4b2b      	ldr	r3, [pc, #172]	; (8002e28 <SystemInit+0xec>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002d7e:	4b2a      	ldr	r3, [pc, #168]	; (8002e28 <SystemInit+0xec>)
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	4929      	ldr	r1, [pc, #164]	; (8002e28 <SystemInit+0xec>)
 8002d84:	4b29      	ldr	r3, [pc, #164]	; (8002e2c <SystemInit+0xf0>)
 8002d86:	4013      	ands	r3, r2
 8002d88:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002d8a:	4b26      	ldr	r3, [pc, #152]	; (8002e24 <SystemInit+0xe8>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0308 	and.w	r3, r3, #8
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d007      	beq.n	8002da6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002d96:	4b23      	ldr	r3, [pc, #140]	; (8002e24 <SystemInit+0xe8>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f023 030f 	bic.w	r3, r3, #15
 8002d9e:	4a21      	ldr	r2, [pc, #132]	; (8002e24 <SystemInit+0xe8>)
 8002da0:	f043 0307 	orr.w	r3, r3, #7
 8002da4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002da6:	4b20      	ldr	r3, [pc, #128]	; (8002e28 <SystemInit+0xec>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002dac:	4b1e      	ldr	r3, [pc, #120]	; (8002e28 <SystemInit+0xec>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002db2:	4b1d      	ldr	r3, [pc, #116]	; (8002e28 <SystemInit+0xec>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002db8:	4b1b      	ldr	r3, [pc, #108]	; (8002e28 <SystemInit+0xec>)
 8002dba:	4a1d      	ldr	r2, [pc, #116]	; (8002e30 <SystemInit+0xf4>)
 8002dbc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002dbe:	4b1a      	ldr	r3, [pc, #104]	; (8002e28 <SystemInit+0xec>)
 8002dc0:	4a1c      	ldr	r2, [pc, #112]	; (8002e34 <SystemInit+0xf8>)
 8002dc2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002dc4:	4b18      	ldr	r3, [pc, #96]	; (8002e28 <SystemInit+0xec>)
 8002dc6:	4a1c      	ldr	r2, [pc, #112]	; (8002e38 <SystemInit+0xfc>)
 8002dc8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002dca:	4b17      	ldr	r3, [pc, #92]	; (8002e28 <SystemInit+0xec>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002dd0:	4b15      	ldr	r3, [pc, #84]	; (8002e28 <SystemInit+0xec>)
 8002dd2:	4a19      	ldr	r2, [pc, #100]	; (8002e38 <SystemInit+0xfc>)
 8002dd4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002dd6:	4b14      	ldr	r3, [pc, #80]	; (8002e28 <SystemInit+0xec>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002ddc:	4b12      	ldr	r3, [pc, #72]	; (8002e28 <SystemInit+0xec>)
 8002dde:	4a16      	ldr	r2, [pc, #88]	; (8002e38 <SystemInit+0xfc>)
 8002de0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002de2:	4b11      	ldr	r3, [pc, #68]	; (8002e28 <SystemInit+0xec>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002de8:	4b0f      	ldr	r3, [pc, #60]	; (8002e28 <SystemInit+0xec>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a0e      	ldr	r2, [pc, #56]	; (8002e28 <SystemInit+0xec>)
 8002dee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002df2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002df4:	4b0c      	ldr	r3, [pc, #48]	; (8002e28 <SystemInit+0xec>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002dfa:	4b10      	ldr	r3, [pc, #64]	; (8002e3c <SystemInit+0x100>)
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	4b10      	ldr	r3, [pc, #64]	; (8002e40 <SystemInit+0x104>)
 8002e00:	4013      	ands	r3, r2
 8002e02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e06:	d202      	bcs.n	8002e0e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002e08:	4b0e      	ldr	r3, [pc, #56]	; (8002e44 <SystemInit+0x108>)
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002e0e:	4b0e      	ldr	r3, [pc, #56]	; (8002e48 <SystemInit+0x10c>)
 8002e10:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002e14:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002e16:	bf00      	nop
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr
 8002e20:	e000ed00 	.word	0xe000ed00
 8002e24:	52002000 	.word	0x52002000
 8002e28:	58024400 	.word	0x58024400
 8002e2c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002e30:	02020200 	.word	0x02020200
 8002e34:	01ff0000 	.word	0x01ff0000
 8002e38:	01010280 	.word	0x01010280
 8002e3c:	5c001000 	.word	0x5c001000
 8002e40:	ffff0000 	.word	0xffff0000
 8002e44:	51008108 	.word	0x51008108
 8002e48:	52004000 	.word	0x52004000

08002e4c <HAL_LPTIM_AutoReloadMatchCallback>:
//		}
//
//	}
//}

void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim){
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin); //toggle green LED
 8002e54:	2101      	movs	r1, #1
 8002e56:	4803      	ldr	r0, [pc, #12]	; (8002e64 <HAL_LPTIM_AutoReloadMatchCallback+0x18>)
 8002e58:	f004 f85b 	bl	8006f12 <HAL_GPIO_TogglePin>
}
 8002e5c:	bf00      	nop
 8002e5e:	3708      	adds	r7, #8
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	58020400 	.word	0x58020400

08002e68 <HAL_HRTIM_Compare2EventCallback>:

void HAL_HRTIM_Compare2EventCallback(HRTIM_HandleTypeDef *hhrtim, uint32_t TimerIdx) {
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]

	/* Called when the first microwave pulse goes low */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_E) {
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	2b04      	cmp	r3, #4
 8002e76:	d11e      	bne.n	8002eb6 <HAL_HRTIM_Compare2EventCallback+0x4e>
#ifdef ATTENUATOR_CODE
		/* Configure the LASER AOM drive attenuator */
		const struct AttenuatorSettings a = {0,0,0,0,0,1,0}; // 8 dB
 8002e78:	7b3b      	ldrb	r3, [r7, #12]
 8002e7a:	f36f 0300 	bfc	r3, #0, #1
 8002e7e:	733b      	strb	r3, [r7, #12]
 8002e80:	7b3b      	ldrb	r3, [r7, #12]
 8002e82:	f36f 0341 	bfc	r3, #1, #1
 8002e86:	733b      	strb	r3, [r7, #12]
 8002e88:	7b3b      	ldrb	r3, [r7, #12]
 8002e8a:	f36f 0382 	bfc	r3, #2, #1
 8002e8e:	733b      	strb	r3, [r7, #12]
 8002e90:	7b3b      	ldrb	r3, [r7, #12]
 8002e92:	f36f 03c3 	bfc	r3, #3, #1
 8002e96:	733b      	strb	r3, [r7, #12]
 8002e98:	7b3b      	ldrb	r3, [r7, #12]
 8002e9a:	f36f 1304 	bfc	r3, #4, #1
 8002e9e:	733b      	strb	r3, [r7, #12]
 8002ea0:	7b3b      	ldrb	r3, [r7, #12]
 8002ea2:	f043 0320 	orr.w	r3, r3, #32
 8002ea6:	733b      	strb	r3, [r7, #12]
 8002ea8:	7b3b      	ldrb	r3, [r7, #12]
 8002eaa:	f36f 1386 	bfc	r3, #6, #1
 8002eae:	733b      	strb	r3, [r7, #12]
		set_aom_atten(a);
 8002eb0:	7b38      	ldrb	r0, [r7, #12]
 8002eb2:	f018 f85d 	bl	801af70 <__set_aom_atten_veneer>
#endif //ATTENUATOR_CODE
	}

}
 8002eb6:	bf00      	nop
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
	...

08002ec0 <HAL_HRTIM_Compare3EventCallback>:

void HAL_HRTIM_Compare3EventCallback(HRTIM_HandleTypeDef *hhrtim, uint32_t TimerIdx) {
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b088      	sub	sp, #32
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]

	/* Called at the end of a POP cycle */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_A) {
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d162      	bne.n	8002f96 <HAL_HRTIM_Compare3EventCallback+0xd6>
#ifdef ATTENUATOR_CODE
		/* Reset the attenuator to 0 dB */
		const struct AttenuatorSettings a = { 0, 0, 0, 0, 0, 0, 0 }; // 0 dB
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	723b      	strb	r3, [r7, #8]
		set_aom_atten(a);
 8002ed4:	7a38      	ldrb	r0, [r7, #8]
 8002ed6:	f018 f84b 	bl	801af70 <__set_aom_atten_veneer>
#endif //ATTENUATOR_CODE

		const double start_freq = ((long)(sweep_settings.req_start_freq/sweep_settings.step_size)) * sweep_settings.step_size;
 8002eda:	4b31      	ldr	r3, [pc, #196]	; (8002fa0 <HAL_HRTIM_Compare3EventCallback+0xe0>)
 8002edc:	ed93 5b00 	vldr	d5, [r3]
 8002ee0:	4b2f      	ldr	r3, [pc, #188]	; (8002fa0 <HAL_HRTIM_Compare3EventCallback+0xe0>)
 8002ee2:	ed93 6b04 	vldr	d6, [r3, #16]
 8002ee6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002eea:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002eee:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002ef2:	4b2b      	ldr	r3, [pc, #172]	; (8002fa0 <HAL_HRTIM_Compare3EventCallback+0xe0>)
 8002ef4:	ed93 7b04 	vldr	d7, [r3, #16]
 8002ef8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002efc:	ed87 7b06 	vstr	d7, [r7, #24]
		const double stop_freq = ((long)((sweep_settings.req_stop_freq/sweep_settings.step_size) + 0.5)) * sweep_settings.step_size;
 8002f00:	4b27      	ldr	r3, [pc, #156]	; (8002fa0 <HAL_HRTIM_Compare3EventCallback+0xe0>)
 8002f02:	ed93 5b02 	vldr	d5, [r3, #8]
 8002f06:	4b26      	ldr	r3, [pc, #152]	; (8002fa0 <HAL_HRTIM_Compare3EventCallback+0xe0>)
 8002f08:	ed93 6b04 	vldr	d6, [r3, #16]
 8002f0c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002f10:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8002f14:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002f18:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002f1c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002f20:	4b1f      	ldr	r3, [pc, #124]	; (8002fa0 <HAL_HRTIM_Compare3EventCallback+0xe0>)
 8002f22:	ed93 7b04 	vldr	d7, [r3, #16]
 8002f26:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002f2a:	ed87 7b04 	vstr	d7, [r7, #16]
		const uint32_t num_points = ((stop_freq - start_freq)/sweep_settings.step_size) + 1;
 8002f2e:	ed97 6b04 	vldr	d6, [r7, #16]
 8002f32:	ed97 7b06 	vldr	d7, [r7, #24]
 8002f36:	ee36 5b47 	vsub.f64	d5, d6, d7
 8002f3a:	4b19      	ldr	r3, [pc, #100]	; (8002fa0 <HAL_HRTIM_Compare3EventCallback+0xe0>)
 8002f3c:	ed93 6b04 	vldr	d6, [r3, #16]
 8002f40:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002f44:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002f48:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002f4c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002f50:	ee17 3a90 	vmov	r3, s15
 8002f54:	60fb      	str	r3, [r7, #12]
		static uint32_t i = 0;

		/* Configure the Microwave frequency */
		if (i == num_points) {
 8002f56:	4b13      	ldr	r3, [pc, #76]	; (8002fa4 <HAL_HRTIM_Compare3EventCallback+0xe4>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d106      	bne.n	8002f6e <HAL_HRTIM_Compare3EventCallback+0xae>
			stop_pop();
 8002f60:	f018 f81e 	bl	801afa0 <__stop_pop_veneer>
			i = 0;
 8002f64:	4b0f      	ldr	r3, [pc, #60]	; (8002fa4 <HAL_HRTIM_Compare3EventCallback+0xe4>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	601a      	str	r2, [r3, #0]
			start_pop();
 8002f6a:	f018 f805 	bl	801af78 <__start_pop_veneer>

#ifdef SYNTH_ENABLE
		set_frequency_hz(start_freq + (i * sweep_settings.step_size));
#endif

		i = i + 1;
 8002f6e:	4b0d      	ldr	r3, [pc, #52]	; (8002fa4 <HAL_HRTIM_Compare3EventCallback+0xe4>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	3301      	adds	r3, #1
 8002f74:	4a0b      	ldr	r2, [pc, #44]	; (8002fa4 <HAL_HRTIM_Compare3EventCallback+0xe4>)
 8002f76:	6013      	str	r3, [r2, #0]

		pop_cycle_count = pop_cycle_count + 1;
 8002f78:	4b0b      	ldr	r3, [pc, #44]	; (8002fa8 <HAL_HRTIM_Compare3EventCallback+0xe8>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	4a0a      	ldr	r2, [pc, #40]	; (8002fa8 <HAL_HRTIM_Compare3EventCallback+0xe8>)
 8002f80:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); //toggle amber LED
 8002f82:	2102      	movs	r1, #2
 8002f84:	4809      	ldr	r0, [pc, #36]	; (8002fac <HAL_HRTIM_Compare3EventCallback+0xec>)
 8002f86:	f003 ffc4 	bl	8006f12 <HAL_GPIO_TogglePin>
		printf("POP Cycle %lu done.\r\n", pop_cycle_count);
 8002f8a:	4b07      	ldr	r3, [pc, #28]	; (8002fa8 <HAL_HRTIM_Compare3EventCallback+0xe8>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4619      	mov	r1, r3
 8002f90:	4807      	ldr	r0, [pc, #28]	; (8002fb0 <HAL_HRTIM_Compare3EventCallback+0xf0>)
 8002f92:	f016 f85b 	bl	801904c <iprintf>

	/* Called when the second microwave pulse goes high */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_E) {
	}

}
 8002f96:	bf00      	nop
 8002f98:	3720      	adds	r7, #32
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	0801e0a0 	.word	0x0801e0a0
 8002fa4:	200005f4 	.word	0x200005f4
 8002fa8:	200005ec 	.word	0x200005ec
 8002fac:	58021000 	.word	0x58021000
 8002fb0:	0801b6a4 	.word	0x0801b6a4

08002fb4 <HAL_HRTIM_RepetitionEventCallback>:

void HAL_HRTIM_RepetitionEventCallback(HRTIM_HandleTypeDef *hhrtim,
		uint32_t TimerIdx) {
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]

	/* Called at the start of the next POP cycle */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_A) {
	}
}
 8002fbe:	bf00      	nop
 8002fc0:	370c      	adds	r7, #12
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
	...

08002fcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002fcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003004 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002fd0:	f7ff feb4 	bl	8002d3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002fd4:	480c      	ldr	r0, [pc, #48]	; (8003008 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002fd6:	490d      	ldr	r1, [pc, #52]	; (800300c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002fd8:	4a0d      	ldr	r2, [pc, #52]	; (8003010 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002fda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fdc:	e002      	b.n	8002fe4 <LoopCopyDataInit>

08002fde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fe0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fe2:	3304      	adds	r3, #4

08002fe4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fe4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fe6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fe8:	d3f9      	bcc.n	8002fde <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fea:	4a0a      	ldr	r2, [pc, #40]	; (8003014 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002fec:	4c0a      	ldr	r4, [pc, #40]	; (8003018 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002fee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ff0:	e001      	b.n	8002ff6 <LoopFillZerobss>

08002ff2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ff2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ff4:	3204      	adds	r2, #4

08002ff6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ff6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ff8:	d3fb      	bcc.n	8002ff2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ffa:	f016 f9cf 	bl	801939c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ffe:	f7fe fbf7 	bl	80017f0 <main>
  bx  lr
 8003002:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003004:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003008:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800300c:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 8003010:	0801e5b8 	.word	0x0801e5b8
  ldr r2, =_sbss
 8003014:	200002e8 	.word	0x200002e8
  ldr r4, =_ebss
 8003018:	200082a0 	.word	0x200082a0

0800301c <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800301c:	e7fe      	b.n	800301c <ADC_IRQHandler>

0800301e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800301e:	b480      	push	{r7}
 8003020:	b083      	sub	sp, #12
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
 8003026:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00b      	beq.n	8003046 <LAN8742_RegisterBusIO+0x28>
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d007      	beq.n	8003046 <LAN8742_RegisterBusIO+0x28>
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d003      	beq.n	8003046 <LAN8742_RegisterBusIO+0x28>
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d102      	bne.n	800304c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8003046:	f04f 33ff 	mov.w	r3, #4294967295
 800304a:	e014      	b.n	8003076 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685a      	ldr	r2, [r3, #4]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	68da      	ldr	r2, [r3, #12]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	689a      	ldr	r2, [r3, #8]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	691a      	ldr	r2, [r3, #16]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr

08003082 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8003082:	b580      	push	{r7, lr}
 8003084:	b086      	sub	sp, #24
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800308a:	2300      	movs	r3, #0
 800308c:	60fb      	str	r3, [r7, #12]
 800308e:	2300      	movs	r3, #0
 8003090:	60bb      	str	r3, [r7, #8]
 8003092:	2300      	movs	r3, #0
 8003094:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8003096:	2300      	movs	r3, #0
 8003098:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d17c      	bne.n	800319c <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d002      	beq.n	80030b0 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2220      	movs	r2, #32
 80030b4:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80030b6:	2300      	movs	r3, #0
 80030b8:	617b      	str	r3, [r7, #20]
 80030ba:	e01c      	b.n	80030f6 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	695b      	ldr	r3, [r3, #20]
 80030c0:	f107 0208 	add.w	r2, r7, #8
 80030c4:	2112      	movs	r1, #18
 80030c6:	6978      	ldr	r0, [r7, #20]
 80030c8:	4798      	blx	r3
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	da03      	bge.n	80030d8 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 80030d0:	f06f 0304 	mvn.w	r3, #4
 80030d4:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 80030d6:	e00b      	b.n	80030f0 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	f003 031f 	and.w	r3, r3, #31
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d105      	bne.n	80030f0 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80030ea:	2300      	movs	r3, #0
 80030ec:	613b      	str	r3, [r7, #16]
         break;
 80030ee:	e005      	b.n	80030fc <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	3301      	adds	r3, #1
 80030f4:	617b      	str	r3, [r7, #20]
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	2b1f      	cmp	r3, #31
 80030fa:	d9df      	bls.n	80030bc <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2b1f      	cmp	r3, #31
 8003102:	d902      	bls.n	800310a <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8003104:	f06f 0302 	mvn.w	r3, #2
 8003108:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d145      	bne.n	800319c <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	6810      	ldr	r0, [r2, #0]
 8003118:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800311c:	2100      	movs	r1, #0
 800311e:	4798      	blx	r3
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	db37      	blt.n	8003196 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	6810      	ldr	r0, [r2, #0]
 800312e:	f107 0208 	add.w	r2, r7, #8
 8003132:	2100      	movs	r1, #0
 8003134:	4798      	blx	r3
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	db28      	blt.n	800318e <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	4798      	blx	r3
 8003142:	4603      	mov	r3, r0
 8003144:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8003146:	e01c      	b.n	8003182 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	4798      	blx	r3
 800314e:	4603      	mov	r3, r0
 8003150:	461a      	mov	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800315a:	d80e      	bhi.n	800317a <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	695b      	ldr	r3, [r3, #20]
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	6810      	ldr	r0, [r2, #0]
 8003164:	f107 0208 	add.w	r2, r7, #8
 8003168:	2100      	movs	r1, #0
 800316a:	4798      	blx	r3
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	da07      	bge.n	8003182 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8003172:	f06f 0304 	mvn.w	r3, #4
 8003176:	613b      	str	r3, [r7, #16]
                 break;
 8003178:	e010      	b.n	800319c <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800317a:	f06f 0301 	mvn.w	r3, #1
 800317e:	613b      	str	r3, [r7, #16]
               break;
 8003180:	e00c      	b.n	800319c <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d1dd      	bne.n	8003148 <LAN8742_Init+0xc6>
 800318c:	e006      	b.n	800319c <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800318e:	f06f 0304 	mvn.w	r3, #4
 8003192:	613b      	str	r3, [r7, #16]
 8003194:	e002      	b.n	800319c <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8003196:	f06f 0303 	mvn.w	r3, #3
 800319a:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d112      	bne.n	80031c8 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	4798      	blx	r3
 80031a8:	4603      	mov	r3, r0
 80031aa:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80031ac:	bf00      	nop
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	4798      	blx	r3
 80031b4:	4603      	mov	r3, r0
 80031b6:	461a      	mov	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80031c0:	d9f5      	bls.n	80031ae <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 80031c8:	693b      	ldr	r3, [r7, #16]
 }
 80031ca:	4618      	mov	r0, r3
 80031cc:	3718      	adds	r7, #24
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b084      	sub	sp, #16
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80031da:	2300      	movs	r3, #0
 80031dc:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	6810      	ldr	r0, [r2, #0]
 80031e6:	f107 020c 	add.w	r2, r7, #12
 80031ea:	2101      	movs	r1, #1
 80031ec:	4798      	blx	r3
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	da02      	bge.n	80031fa <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80031f4:	f06f 0304 	mvn.w	r3, #4
 80031f8:	e06e      	b.n	80032d8 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	6810      	ldr	r0, [r2, #0]
 8003202:	f107 020c 	add.w	r2, r7, #12
 8003206:	2101      	movs	r1, #1
 8003208:	4798      	blx	r3
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	da02      	bge.n	8003216 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8003210:	f06f 0304 	mvn.w	r3, #4
 8003214:	e060      	b.n	80032d8 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f003 0304 	and.w	r3, r3, #4
 800321c:	2b00      	cmp	r3, #0
 800321e:	d101      	bne.n	8003224 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8003220:	2301      	movs	r3, #1
 8003222:	e059      	b.n	80032d8 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	695b      	ldr	r3, [r3, #20]
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	6810      	ldr	r0, [r2, #0]
 800322c:	f107 020c 	add.w	r2, r7, #12
 8003230:	2100      	movs	r1, #0
 8003232:	4798      	blx	r3
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	da02      	bge.n	8003240 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800323a:	f06f 0304 	mvn.w	r3, #4
 800323e:	e04b      	b.n	80032d8 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d11b      	bne.n	8003282 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d006      	beq.n	8003262 <LAN8742_GetLinkState+0x90>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800325e:	2302      	movs	r3, #2
 8003260:	e03a      	b.n	80032d8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d001      	beq.n	8003270 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800326c:	2303      	movs	r3, #3
 800326e:	e033      	b.n	80032d8 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800327a:	2304      	movs	r3, #4
 800327c:	e02c      	b.n	80032d8 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800327e:	2305      	movs	r3, #5
 8003280:	e02a      	b.n	80032d8 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	6810      	ldr	r0, [r2, #0]
 800328a:	f107 020c 	add.w	r2, r7, #12
 800328e:	211f      	movs	r1, #31
 8003290:	4798      	blx	r3
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	da02      	bge.n	800329e <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8003298:	f06f 0304 	mvn.w	r3, #4
 800329c:	e01c      	b.n	80032d8 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d101      	bne.n	80032ac <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80032a8:	2306      	movs	r3, #6
 80032aa:	e015      	b.n	80032d8 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f003 031c 	and.w	r3, r3, #28
 80032b2:	2b18      	cmp	r3, #24
 80032b4:	d101      	bne.n	80032ba <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80032b6:	2302      	movs	r3, #2
 80032b8:	e00e      	b.n	80032d8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f003 031c 	and.w	r3, r3, #28
 80032c0:	2b08      	cmp	r3, #8
 80032c2:	d101      	bne.n	80032c8 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e007      	b.n	80032d8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f003 031c 	and.w	r3, r3, #28
 80032ce:	2b14      	cmp	r3, #20
 80032d0:	d101      	bne.n	80032d6 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80032d2:	2304      	movs	r3, #4
 80032d4:	e000      	b.n	80032d8 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80032d6:	2305      	movs	r3, #5
    }				
  }
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3710      	adds	r7, #16
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032e6:	2003      	movs	r0, #3
 80032e8:	f001 ff1c 	bl	8005124 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80032ec:	f006 fbbc 	bl	8009a68 <HAL_RCC_GetSysClockFreq>
 80032f0:	4602      	mov	r2, r0
 80032f2:	4b15      	ldr	r3, [pc, #84]	; (8003348 <HAL_Init+0x68>)
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	0a1b      	lsrs	r3, r3, #8
 80032f8:	f003 030f 	and.w	r3, r3, #15
 80032fc:	4913      	ldr	r1, [pc, #76]	; (800334c <HAL_Init+0x6c>)
 80032fe:	5ccb      	ldrb	r3, [r1, r3]
 8003300:	f003 031f 	and.w	r3, r3, #31
 8003304:	fa22 f303 	lsr.w	r3, r2, r3
 8003308:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800330a:	4b0f      	ldr	r3, [pc, #60]	; (8003348 <HAL_Init+0x68>)
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	f003 030f 	and.w	r3, r3, #15
 8003312:	4a0e      	ldr	r2, [pc, #56]	; (800334c <HAL_Init+0x6c>)
 8003314:	5cd3      	ldrb	r3, [r2, r3]
 8003316:	f003 031f 	and.w	r3, r3, #31
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	fa22 f303 	lsr.w	r3, r2, r3
 8003320:	4a0b      	ldr	r2, [pc, #44]	; (8003350 <HAL_Init+0x70>)
 8003322:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003324:	4a0b      	ldr	r2, [pc, #44]	; (8003354 <HAL_Init+0x74>)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800332a:	2000      	movs	r0, #0
 800332c:	f000 f814 	bl	8003358 <HAL_InitTick>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e002      	b.n	8003340 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800333a:	f7ff f975 	bl	8002628 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	3708      	adds	r7, #8
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	58024400 	.word	0x58024400
 800334c:	0801e0b8 	.word	0x0801e0b8
 8003350:	20000014 	.word	0x20000014
 8003354:	20000010 	.word	0x20000010

08003358 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003360:	4b15      	ldr	r3, [pc, #84]	; (80033b8 <HAL_InitTick+0x60>)
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d101      	bne.n	800336c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e021      	b.n	80033b0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800336c:	4b13      	ldr	r3, [pc, #76]	; (80033bc <HAL_InitTick+0x64>)
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	4b11      	ldr	r3, [pc, #68]	; (80033b8 <HAL_InitTick+0x60>)
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	4619      	mov	r1, r3
 8003376:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800337a:	fbb3 f3f1 	udiv	r3, r3, r1
 800337e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003382:	4618      	mov	r0, r3
 8003384:	f001 ff01 	bl	800518a <HAL_SYSTICK_Config>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e00e      	b.n	80033b0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2b0f      	cmp	r3, #15
 8003396:	d80a      	bhi.n	80033ae <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003398:	2200      	movs	r2, #0
 800339a:	6879      	ldr	r1, [r7, #4]
 800339c:	f04f 30ff 	mov.w	r0, #4294967295
 80033a0:	f001 fecb 	bl	800513a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80033a4:	4a06      	ldr	r2, [pc, #24]	; (80033c0 <HAL_InitTick+0x68>)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
 80033ac:	e000      	b.n	80033b0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3708      	adds	r7, #8
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	20000024 	.word	0x20000024
 80033bc:	20000010 	.word	0x20000010
 80033c0:	20000020 	.word	0x20000020

080033c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033c4:	b480      	push	{r7}
 80033c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80033c8:	4b06      	ldr	r3, [pc, #24]	; (80033e4 <HAL_IncTick+0x20>)
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	461a      	mov	r2, r3
 80033ce:	4b06      	ldr	r3, [pc, #24]	; (80033e8 <HAL_IncTick+0x24>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4413      	add	r3, r2
 80033d4:	4a04      	ldr	r2, [pc, #16]	; (80033e8 <HAL_IncTick+0x24>)
 80033d6:	6013      	str	r3, [r2, #0]
}
 80033d8:	bf00      	nop
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	20000024 	.word	0x20000024
 80033e8:	200005f8 	.word	0x200005f8

080033ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	af00      	add	r7, sp, #0
  return uwTick;
 80033f0:	4b03      	ldr	r3, [pc, #12]	; (8003400 <HAL_GetTick+0x14>)
 80033f2:	681b      	ldr	r3, [r3, #0]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	200005f8 	.word	0x200005f8

08003404 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800340c:	f7ff ffee 	bl	80033ec <HAL_GetTick>
 8003410:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800341c:	d005      	beq.n	800342a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800341e:	4b0a      	ldr	r3, [pc, #40]	; (8003448 <HAL_Delay+0x44>)
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	461a      	mov	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	4413      	add	r3, r2
 8003428:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800342a:	bf00      	nop
 800342c:	f7ff ffde 	bl	80033ec <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	429a      	cmp	r2, r3
 800343a:	d8f7      	bhi.n	800342c <HAL_Delay+0x28>
  {
  }
}
 800343c:	bf00      	nop
 800343e:	bf00      	nop
 8003440:	3710      	adds	r7, #16
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	20000024 	.word	0x20000024

0800344c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003450:	4b03      	ldr	r3, [pc, #12]	; (8003460 <HAL_GetREVID+0x14>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	0c1b      	lsrs	r3, r3, #16
}
 8003456:	4618      	mov	r0, r3
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr
 8003460:	5c001000 	.word	0x5c001000

08003464 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800346c:	4b06      	ldr	r3, [pc, #24]	; (8003488 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003474:	4904      	ldr	r1, [pc, #16]	; (8003488 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4313      	orrs	r3, r2
 800347a:	604b      	str	r3, [r1, #4]
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr
 8003488:	58000400 	.word	0x58000400

0800348c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003496:	4b07      	ldr	r3, [pc, #28]	; (80034b4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003498:	685a      	ldr	r2, [r3, #4]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	43db      	mvns	r3, r3
 800349e:	401a      	ands	r2, r3
 80034a0:	4904      	ldr	r1, [pc, #16]	; (80034b4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	604b      	str	r3, [r1, #4]
}
 80034a8:	bf00      	nop
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr
 80034b4:	58000400 	.word	0x58000400

080034b8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	431a      	orrs	r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	609a      	str	r2, [r3, #8]
}
 80034d2:	bf00      	nop
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr

080034de <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80034de:	b480      	push	{r7}
 80034e0:	b083      	sub	sp, #12
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
 80034e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	431a      	orrs	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	609a      	str	r2, [r3, #8]
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003514:	4618      	mov	r0, r3
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003520:	b480      	push	{r7}
 8003522:	b087      	sub	sp, #28
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
 800352c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	3360      	adds	r3, #96	; 0x60
 8003532:	461a      	mov	r2, r3
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4413      	add	r3, r2
 800353a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	430b      	orrs	r3, r1
 800354e:	431a      	orrs	r2, r3
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003554:	bf00      	nop
 8003556:	371c      	adds	r7, #28
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003560:	b480      	push	{r7}
 8003562:	b085      	sub	sp, #20
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	691b      	ldr	r3, [r3, #16]
 8003570:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	f003 031f 	and.w	r3, r3, #31
 800357a:	6879      	ldr	r1, [r7, #4]
 800357c:	fa01 f303 	lsl.w	r3, r1, r3
 8003580:	431a      	orrs	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	611a      	str	r2, [r3, #16]
}
 8003586:	bf00      	nop
 8003588:	3714      	adds	r7, #20
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr

08003592 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003592:	b480      	push	{r7}
 8003594:	b087      	sub	sp, #28
 8003596:	af00      	add	r7, sp, #0
 8003598:	60f8      	str	r0, [r7, #12]
 800359a:	60b9      	str	r1, [r7, #8]
 800359c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	3360      	adds	r3, #96	; 0x60
 80035a2:	461a      	mov	r2, r3
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	4413      	add	r3, r2
 80035aa:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	431a      	orrs	r2, r3
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	601a      	str	r2, [r3, #0]
  }
}
 80035bc:	bf00      	nop
 80035be:	371c      	adds	r7, #28
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d101      	bne.n	80035e0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80035dc:	2301      	movs	r3, #1
 80035de:	e000      	b.n	80035e2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr

080035ee <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80035ee:	b480      	push	{r7}
 80035f0:	b087      	sub	sp, #28
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	60f8      	str	r0, [r7, #12]
 80035f6:	60b9      	str	r1, [r7, #8]
 80035f8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	3330      	adds	r3, #48	; 0x30
 80035fe:	461a      	mov	r2, r3
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	0a1b      	lsrs	r3, r3, #8
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	f003 030c 	and.w	r3, r3, #12
 800360a:	4413      	add	r3, r2
 800360c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	f003 031f 	and.w	r3, r3, #31
 8003618:	211f      	movs	r1, #31
 800361a:	fa01 f303 	lsl.w	r3, r1, r3
 800361e:	43db      	mvns	r3, r3
 8003620:	401a      	ands	r2, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	0e9b      	lsrs	r3, r3, #26
 8003626:	f003 011f 	and.w	r1, r3, #31
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	f003 031f 	and.w	r3, r3, #31
 8003630:	fa01 f303 	lsl.w	r3, r1, r3
 8003634:	431a      	orrs	r2, r3
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800363a:	bf00      	nop
 800363c:	371c      	adds	r7, #28
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr

08003646 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003646:	b480      	push	{r7}
 8003648:	b083      	sub	sp, #12
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003652:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800365a:	2301      	movs	r3, #1
 800365c:	e000      	b.n	8003660 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800366c:	b480      	push	{r7}
 800366e:	b087      	sub	sp, #28
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	3314      	adds	r3, #20
 800367c:	461a      	mov	r2, r3
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	0e5b      	lsrs	r3, r3, #25
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	f003 0304 	and.w	r3, r3, #4
 8003688:	4413      	add	r3, r2
 800368a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	0d1b      	lsrs	r3, r3, #20
 8003694:	f003 031f 	and.w	r3, r3, #31
 8003698:	2107      	movs	r1, #7
 800369a:	fa01 f303 	lsl.w	r3, r1, r3
 800369e:	43db      	mvns	r3, r3
 80036a0:	401a      	ands	r2, r3
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	0d1b      	lsrs	r3, r3, #20
 80036a6:	f003 031f 	and.w	r3, r3, #31
 80036aa:	6879      	ldr	r1, [r7, #4]
 80036ac:	fa01 f303 	lsl.w	r3, r1, r3
 80036b0:	431a      	orrs	r2, r3
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80036b6:	bf00      	nop
 80036b8:	371c      	adds	r7, #28
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
	...

080036c4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b085      	sub	sp, #20
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036dc:	43db      	mvns	r3, r3
 80036de:	401a      	ands	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f003 0318 	and.w	r3, r3, #24
 80036e6:	4908      	ldr	r1, [pc, #32]	; (8003708 <LL_ADC_SetChannelSingleDiff+0x44>)
 80036e8:	40d9      	lsrs	r1, r3
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	400b      	ands	r3, r1
 80036ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036f2:	431a      	orrs	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80036fa:	bf00      	nop
 80036fc:	3714      	adds	r7, #20
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	000fffff 	.word	0x000fffff

0800370c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f003 031f 	and.w	r3, r3, #31
}
 800371c:	4618      	mov	r0, r3
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8003738:	4618      	mov	r0, r3
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689a      	ldr	r2, [r3, #8]
 8003750:	4b04      	ldr	r3, [pc, #16]	; (8003764 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003752:	4013      	ands	r3, r2
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	6093      	str	r3, [r2, #8]
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr
 8003764:	5fffffc0 	.word	0x5fffffc0

08003768 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003778:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800377c:	d101      	bne.n	8003782 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800377e:	2301      	movs	r3, #1
 8003780:	e000      	b.n	8003784 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003782:	2300      	movs	r3, #0
}
 8003784:	4618      	mov	r0, r3
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689a      	ldr	r2, [r3, #8]
 800379c:	4b05      	ldr	r3, [pc, #20]	; (80037b4 <LL_ADC_EnableInternalRegulator+0x24>)
 800379e:	4013      	ands	r3, r2
 80037a0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr
 80037b4:	6fffffc0 	.word	0x6fffffc0

080037b8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037cc:	d101      	bne.n	80037d2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80037ce:	2301      	movs	r3, #1
 80037d0:	e000      	b.n	80037d4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689a      	ldr	r2, [r3, #8]
 80037ec:	4b05      	ldr	r3, [pc, #20]	; (8003804 <LL_ADC_Enable+0x24>)
 80037ee:	4013      	ands	r3, r2
 80037f0:	f043 0201 	orr.w	r2, r3, #1
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80037f8:	bf00      	nop
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr
 8003804:	7fffffc0 	.word	0x7fffffc0

08003808 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689a      	ldr	r2, [r3, #8]
 8003814:	4b05      	ldr	r3, [pc, #20]	; (800382c <LL_ADC_Disable+0x24>)
 8003816:	4013      	ands	r3, r2
 8003818:	f043 0202 	orr.w	r2, r3, #2
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr
 800382c:	7fffffc0 	.word	0x7fffffc0

08003830 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f003 0301 	and.w	r3, r3, #1
 8003840:	2b01      	cmp	r3, #1
 8003842:	d101      	bne.n	8003848 <LL_ADC_IsEnabled+0x18>
 8003844:	2301      	movs	r3, #1
 8003846:	e000      	b.n	800384a <LL_ADC_IsEnabled+0x1a>
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	370c      	adds	r7, #12
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr

08003856 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003856:	b480      	push	{r7}
 8003858:	b083      	sub	sp, #12
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b02      	cmp	r3, #2
 8003868:	d101      	bne.n	800386e <LL_ADC_IsDisableOngoing+0x18>
 800386a:	2301      	movs	r3, #1
 800386c:	e000      	b.n	8003870 <LL_ADC_IsDisableOngoing+0x1a>
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689a      	ldr	r2, [r3, #8]
 8003888:	4b05      	ldr	r3, [pc, #20]	; (80038a0 <LL_ADC_REG_StartConversion+0x24>)
 800388a:	4013      	ands	r3, r2
 800388c:	f043 0204 	orr.w	r2, r3, #4
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr
 80038a0:	7fffffc0 	.word	0x7fffffc0

080038a4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f003 0304 	and.w	r3, r3, #4
 80038b4:	2b04      	cmp	r3, #4
 80038b6:	d101      	bne.n	80038bc <LL_ADC_REG_IsConversionOngoing+0x18>
 80038b8:	2301      	movs	r3, #1
 80038ba:	e000      	b.n	80038be <LL_ADC_REG_IsConversionOngoing+0x1a>
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr

080038ca <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80038ca:	b480      	push	{r7}
 80038cc:	b083      	sub	sp, #12
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f003 0308 	and.w	r3, r3, #8
 80038da:	2b08      	cmp	r3, #8
 80038dc:	d101      	bne.n	80038e2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80038de:	2301      	movs	r3, #1
 80038e0:	e000      	b.n	80038e4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80038f0:	b590      	push	{r4, r7, lr}
 80038f2:	b089      	sub	sp, #36	; 0x24
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038f8:	2300      	movs	r3, #0
 80038fa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80038fc:	2300      	movs	r3, #0
 80038fe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d101      	bne.n	800390a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e18f      	b.n	8003c2a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003914:	2b00      	cmp	r3, #0
 8003916:	d109      	bne.n	800392c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f7fe fe9f 	bl	800265c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4618      	mov	r0, r3
 8003932:	f7ff ff19 	bl	8003768 <LL_ADC_IsDeepPowerDownEnabled>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d004      	beq.n	8003946 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4618      	mov	r0, r3
 8003942:	f7ff feff 	bl	8003744 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4618      	mov	r0, r3
 800394c:	f7ff ff34 	bl	80037b8 <LL_ADC_IsInternalRegulatorEnabled>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d114      	bne.n	8003980 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4618      	mov	r0, r3
 800395c:	f7ff ff18 	bl	8003790 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003960:	4b87      	ldr	r3, [pc, #540]	; (8003b80 <HAL_ADC_Init+0x290>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	099b      	lsrs	r3, r3, #6
 8003966:	4a87      	ldr	r2, [pc, #540]	; (8003b84 <HAL_ADC_Init+0x294>)
 8003968:	fba2 2303 	umull	r2, r3, r2, r3
 800396c:	099b      	lsrs	r3, r3, #6
 800396e:	3301      	adds	r3, #1
 8003970:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003972:	e002      	b.n	800397a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	3b01      	subs	r3, #1
 8003978:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1f9      	bne.n	8003974 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4618      	mov	r0, r3
 8003986:	f7ff ff17 	bl	80037b8 <LL_ADC_IsInternalRegulatorEnabled>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d10d      	bne.n	80039ac <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003994:	f043 0210 	orr.w	r2, r3, #16
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a0:	f043 0201 	orr.w	r2, r3, #1
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7ff ff77 	bl	80038a4 <LL_ADC_REG_IsConversionOngoing>
 80039b6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039bc:	f003 0310 	and.w	r3, r3, #16
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f040 8129 	bne.w	8003c18 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	f040 8125 	bne.w	8003c18 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80039d6:	f043 0202 	orr.w	r2, r3, #2
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7ff ff24 	bl	8003830 <LL_ADC_IsEnabled>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d136      	bne.n	8003a5c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a65      	ldr	r2, [pc, #404]	; (8003b88 <HAL_ADC_Init+0x298>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d004      	beq.n	8003a02 <HAL_ADC_Init+0x112>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a63      	ldr	r2, [pc, #396]	; (8003b8c <HAL_ADC_Init+0x29c>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d10e      	bne.n	8003a20 <HAL_ADC_Init+0x130>
 8003a02:	4861      	ldr	r0, [pc, #388]	; (8003b88 <HAL_ADC_Init+0x298>)
 8003a04:	f7ff ff14 	bl	8003830 <LL_ADC_IsEnabled>
 8003a08:	4604      	mov	r4, r0
 8003a0a:	4860      	ldr	r0, [pc, #384]	; (8003b8c <HAL_ADC_Init+0x29c>)
 8003a0c:	f7ff ff10 	bl	8003830 <LL_ADC_IsEnabled>
 8003a10:	4603      	mov	r3, r0
 8003a12:	4323      	orrs	r3, r4
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	bf0c      	ite	eq
 8003a18:	2301      	moveq	r3, #1
 8003a1a:	2300      	movne	r3, #0
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	e008      	b.n	8003a32 <HAL_ADC_Init+0x142>
 8003a20:	485b      	ldr	r0, [pc, #364]	; (8003b90 <HAL_ADC_Init+0x2a0>)
 8003a22:	f7ff ff05 	bl	8003830 <LL_ADC_IsEnabled>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	bf0c      	ite	eq
 8003a2c:	2301      	moveq	r3, #1
 8003a2e:	2300      	movne	r3, #0
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d012      	beq.n	8003a5c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a53      	ldr	r2, [pc, #332]	; (8003b88 <HAL_ADC_Init+0x298>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d004      	beq.n	8003a4a <HAL_ADC_Init+0x15a>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a51      	ldr	r2, [pc, #324]	; (8003b8c <HAL_ADC_Init+0x29c>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d101      	bne.n	8003a4e <HAL_ADC_Init+0x15e>
 8003a4a:	4a52      	ldr	r2, [pc, #328]	; (8003b94 <HAL_ADC_Init+0x2a4>)
 8003a4c:	e000      	b.n	8003a50 <HAL_ADC_Init+0x160>
 8003a4e:	4a52      	ldr	r2, [pc, #328]	; (8003b98 <HAL_ADC_Init+0x2a8>)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	4619      	mov	r1, r3
 8003a56:	4610      	mov	r0, r2
 8003a58:	f7ff fd2e 	bl	80034b8 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003a5c:	f7ff fcf6 	bl	800344c <HAL_GetREVID>
 8003a60:	4603      	mov	r3, r0
 8003a62:	f241 0203 	movw	r2, #4099	; 0x1003
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d914      	bls.n	8003a94 <HAL_ADC_Init+0x1a4>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	2b10      	cmp	r3, #16
 8003a70:	d110      	bne.n	8003a94 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	7d5b      	ldrb	r3, [r3, #21]
 8003a76:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003a7c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003a82:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	7f1b      	ldrb	r3, [r3, #28]
 8003a88:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003a8a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003a8c:	f043 030c 	orr.w	r3, r3, #12
 8003a90:	61bb      	str	r3, [r7, #24]
 8003a92:	e00d      	b.n	8003ab0 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	7d5b      	ldrb	r3, [r3, #21]
 8003a98:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003a9e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003aa4:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	7f1b      	ldrb	r3, [r3, #28]
 8003aaa:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003aac:	4313      	orrs	r3, r2
 8003aae:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	7f1b      	ldrb	r3, [r3, #28]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d106      	bne.n	8003ac6 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a1b      	ldr	r3, [r3, #32]
 8003abc:	3b01      	subs	r3, #1
 8003abe:	045b      	lsls	r3, r3, #17
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d009      	beq.n	8003ae2 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad2:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ada:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68da      	ldr	r2, [r3, #12]
 8003ae8:	4b2c      	ldr	r3, [pc, #176]	; (8003b9c <HAL_ADC_Init+0x2ac>)
 8003aea:	4013      	ands	r3, r2
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	6812      	ldr	r2, [r2, #0]
 8003af0:	69b9      	ldr	r1, [r7, #24]
 8003af2:	430b      	orrs	r3, r1
 8003af4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7ff fed2 	bl	80038a4 <LL_ADC_REG_IsConversionOngoing>
 8003b00:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7ff fedf 	bl	80038ca <LL_ADC_INJ_IsConversionOngoing>
 8003b0c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d15f      	bne.n	8003bd4 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d15c      	bne.n	8003bd4 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	7d1b      	ldrb	r3, [r3, #20]
 8003b1e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8003b24:	4313      	orrs	r3, r2
 8003b26:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68da      	ldr	r2, [r3, #12]
 8003b2e:	4b1c      	ldr	r3, [pc, #112]	; (8003ba0 <HAL_ADC_Init+0x2b0>)
 8003b30:	4013      	ands	r3, r2
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	6812      	ldr	r2, [r2, #0]
 8003b36:	69b9      	ldr	r1, [r7, #24]
 8003b38:	430b      	orrs	r3, r1
 8003b3a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d130      	bne.n	8003ba8 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	691a      	ldr	r2, [r3, #16]
 8003b52:	4b14      	ldr	r3, [pc, #80]	; (8003ba4 <HAL_ADC_Init+0x2b4>)
 8003b54:	4013      	ands	r3, r2
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003b5a:	3a01      	subs	r2, #1
 8003b5c:	0411      	lsls	r1, r2, #16
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003b62:	4311      	orrs	r1, r2
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003b68:	4311      	orrs	r1, r2
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	431a      	orrs	r2, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f042 0201 	orr.w	r2, r2, #1
 8003b7a:	611a      	str	r2, [r3, #16]
 8003b7c:	e01c      	b.n	8003bb8 <HAL_ADC_Init+0x2c8>
 8003b7e:	bf00      	nop
 8003b80:	20000010 	.word	0x20000010
 8003b84:	053e2d63 	.word	0x053e2d63
 8003b88:	40022000 	.word	0x40022000
 8003b8c:	40022100 	.word	0x40022100
 8003b90:	58026000 	.word	0x58026000
 8003b94:	40022300 	.word	0x40022300
 8003b98:	58026300 	.word	0x58026300
 8003b9c:	fff0c003 	.word	0xfff0c003
 8003ba0:	ffffbffc 	.word	0xffffbffc
 8003ba4:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	691a      	ldr	r2, [r3, #16]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f022 0201 	bic.w	r2, r2, #1
 8003bb6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f001 f804 	bl	8004bdc <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d10c      	bne.n	8003bf6 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be2:	f023 010f 	bic.w	r1, r3, #15
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	1e5a      	subs	r2, r3, #1
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	430a      	orrs	r2, r1
 8003bf2:	631a      	str	r2, [r3, #48]	; 0x30
 8003bf4:	e007      	b.n	8003c06 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f022 020f 	bic.w	r2, r2, #15
 8003c04:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c0a:	f023 0303 	bic.w	r3, r3, #3
 8003c0e:	f043 0201 	orr.w	r2, r3, #1
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	655a      	str	r2, [r3, #84]	; 0x54
 8003c16:	e007      	b.n	8003c28 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c1c:	f043 0210 	orr.w	r2, r3, #16
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003c28:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3724      	adds	r7, #36	; 0x24
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd90      	pop	{r4, r7, pc}
 8003c32:	bf00      	nop

08003c34 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b086      	sub	sp, #24
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a92      	ldr	r2, [pc, #584]	; (8003e8c <HAL_ADC_Start_IT+0x258>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d004      	beq.n	8003c50 <HAL_ADC_Start_IT+0x1c>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a91      	ldr	r2, [pc, #580]	; (8003e90 <HAL_ADC_Start_IT+0x25c>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d101      	bne.n	8003c54 <HAL_ADC_Start_IT+0x20>
 8003c50:	4b90      	ldr	r3, [pc, #576]	; (8003e94 <HAL_ADC_Start_IT+0x260>)
 8003c52:	e000      	b.n	8003c56 <HAL_ADC_Start_IT+0x22>
 8003c54:	4b90      	ldr	r3, [pc, #576]	; (8003e98 <HAL_ADC_Start_IT+0x264>)
 8003c56:	4618      	mov	r0, r3
 8003c58:	f7ff fd58 	bl	800370c <LL_ADC_GetMultimode>
 8003c5c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7ff fe1e 	bl	80038a4 <LL_ADC_REG_IsConversionOngoing>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f040 8118 	bne.w	8003ea0 <HAL_ADC_Start_IT+0x26c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d101      	bne.n	8003c7e <HAL_ADC_Start_IT+0x4a>
 8003c7a:	2302      	movs	r3, #2
 8003c7c:	e113      	b.n	8003ea6 <HAL_ADC_Start_IT+0x272>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 febe 	bl	8004a08 <ADC_Enable>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003c90:	7dfb      	ldrb	r3, [r7, #23]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f040 80f5 	bne.w	8003e82 <HAL_ADC_Start_IT+0x24e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c9c:	4b7f      	ldr	r3, [pc, #508]	; (8003e9c <HAL_ADC_Start_IT+0x268>)
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a78      	ldr	r2, [pc, #480]	; (8003e90 <HAL_ADC_Start_IT+0x25c>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d002      	beq.n	8003cb8 <HAL_ADC_Start_IT+0x84>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	e000      	b.n	8003cba <HAL_ADC_Start_IT+0x86>
 8003cb8:	4b74      	ldr	r3, [pc, #464]	; (8003e8c <HAL_ADC_Start_IT+0x258>)
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	6812      	ldr	r2, [r2, #0]
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d002      	beq.n	8003cc8 <HAL_ADC_Start_IT+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d105      	bne.n	8003cd4 <HAL_ADC_Start_IT+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ccc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d006      	beq.n	8003cee <HAL_ADC_Start_IT+0xba>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce4:	f023 0206 	bic.w	r2, r3, #6
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	659a      	str	r2, [r3, #88]	; 0x58
 8003cec:	e002      	b.n	8003cf4 <HAL_ADC_Start_IT+0xc0>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	221c      	movs	r2, #28
 8003cfa:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	685a      	ldr	r2, [r3, #4]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f022 021c 	bic.w	r2, r2, #28
 8003d12:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	2b08      	cmp	r3, #8
 8003d1a:	d108      	bne.n	8003d2e <HAL_ADC_Start_IT+0xfa>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	685a      	ldr	r2, [r3, #4]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f042 0208 	orr.w	r2, r2, #8
 8003d2a:	605a      	str	r2, [r3, #4]
          break;
 8003d2c:	e008      	b.n	8003d40 <HAL_ADC_Start_IT+0x10c>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	685a      	ldr	r2, [r3, #4]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f042 0204 	orr.w	r2, r2, #4
 8003d3c:	605a      	str	r2, [r3, #4]
          break;
 8003d3e:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d107      	bne.n	8003d58 <HAL_ADC_Start_IT+0x124>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	685a      	ldr	r2, [r3, #4]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f042 0210 	orr.w	r2, r2, #16
 8003d56:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a4c      	ldr	r2, [pc, #304]	; (8003e90 <HAL_ADC_Start_IT+0x25c>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d002      	beq.n	8003d68 <HAL_ADC_Start_IT+0x134>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	e000      	b.n	8003d6a <HAL_ADC_Start_IT+0x136>
 8003d68:	4b48      	ldr	r3, [pc, #288]	; (8003e8c <HAL_ADC_Start_IT+0x258>)
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	6812      	ldr	r2, [r2, #0]
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d008      	beq.n	8003d84 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d005      	beq.n	8003d84 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	2b05      	cmp	r3, #5
 8003d7c:	d002      	beq.n	8003d84 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	2b09      	cmp	r3, #9
 8003d82:	d13a      	bne.n	8003dfa <HAL_ADC_Start_IT+0x1c6>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d02d      	beq.n	8003dee <HAL_ADC_Start_IT+0x1ba>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d96:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003d9a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	2b08      	cmp	r3, #8
 8003da8:	d110      	bne.n	8003dcc <HAL_ADC_Start_IT+0x198>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	685a      	ldr	r2, [r3, #4]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f022 0220 	bic.w	r2, r2, #32
 8003db8:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	685a      	ldr	r2, [r3, #4]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dc8:	605a      	str	r2, [r3, #4]
              break;
 8003dca:	e010      	b.n	8003dee <HAL_ADC_Start_IT+0x1ba>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	685a      	ldr	r2, [r3, #4]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dda:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	685a      	ldr	r2, [r3, #4]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f042 0220 	orr.w	r2, r2, #32
 8003dea:	605a      	str	r2, [r3, #4]
              break;
 8003dec:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7ff fd42 	bl	800387c <LL_ADC_REG_StartConversion>
 8003df8:	e054      	b.n	8003ea4 <HAL_ADC_Start_IT+0x270>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dfe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a21      	ldr	r2, [pc, #132]	; (8003e90 <HAL_ADC_Start_IT+0x25c>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d002      	beq.n	8003e16 <HAL_ADC_Start_IT+0x1e2>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	e000      	b.n	8003e18 <HAL_ADC_Start_IT+0x1e4>
 8003e16:	4b1d      	ldr	r3, [pc, #116]	; (8003e8c <HAL_ADC_Start_IT+0x258>)
 8003e18:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d03e      	beq.n	8003ea4 <HAL_ADC_Start_IT+0x270>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e2a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003e2e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	2b08      	cmp	r3, #8
 8003e3c:	d110      	bne.n	8003e60 <HAL_ADC_Start_IT+0x22c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	685a      	ldr	r2, [r3, #4]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f022 0220 	bic.w	r2, r2, #32
 8003e4c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	685a      	ldr	r2, [r3, #4]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e5c:	605a      	str	r2, [r3, #4]
              break;
 8003e5e:	e021      	b.n	8003ea4 <HAL_ADC_Start_IT+0x270>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	685a      	ldr	r2, [r3, #4]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e6e:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	685a      	ldr	r2, [r3, #4]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f042 0220 	orr.w	r2, r2, #32
 8003e7e:	605a      	str	r2, [r3, #4]
              break;
 8003e80:	e010      	b.n	8003ea4 <HAL_ADC_Start_IT+0x270>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003e8a:	e00b      	b.n	8003ea4 <HAL_ADC_Start_IT+0x270>
 8003e8c:	40022000 	.word	0x40022000
 8003e90:	40022100 	.word	0x40022100
 8003e94:	40022300 	.word	0x40022300
 8003e98:	58026300 	.word	0x58026300
 8003e9c:	fffff0fe 	.word	0xfffff0fe
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003ea4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3718      	adds	r7, #24
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop

08003eb0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	370c      	adds	r7, #12
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
	...

08003ecc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b08a      	sub	sp, #40	; 0x28
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a87      	ldr	r2, [pc, #540]	; (800410c <HAL_ADC_IRQHandler+0x240>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d004      	beq.n	8003efc <HAL_ADC_IRQHandler+0x30>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a86      	ldr	r2, [pc, #536]	; (8004110 <HAL_ADC_IRQHandler+0x244>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d101      	bne.n	8003f00 <HAL_ADC_IRQHandler+0x34>
 8003efc:	4b85      	ldr	r3, [pc, #532]	; (8004114 <HAL_ADC_IRQHandler+0x248>)
 8003efe:	e000      	b.n	8003f02 <HAL_ADC_IRQHandler+0x36>
 8003f00:	4b85      	ldr	r3, [pc, #532]	; (8004118 <HAL_ADC_IRQHandler+0x24c>)
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7ff fc02 	bl	800370c <LL_ADC_GetMultimode>
 8003f08:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	f003 0302 	and.w	r3, r3, #2
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d017      	beq.n	8003f44 <HAL_ADC_IRQHandler+0x78>
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d012      	beq.n	8003f44 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f22:	f003 0310 	and.w	r3, r3, #16
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d105      	bne.n	8003f36 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f2e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f001 f81a 	bl	8004f70 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2202      	movs	r2, #2
 8003f42:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	f003 0304 	and.w	r3, r3, #4
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d004      	beq.n	8003f58 <HAL_ADC_IRQHandler+0x8c>
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	f003 0304 	and.w	r3, r3, #4
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d10a      	bne.n	8003f6e <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f000 8083 	beq.w	800406a <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	f003 0308 	and.w	r3, r3, #8
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d07d      	beq.n	800406a <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f72:	f003 0310 	and.w	r3, r3, #16
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d105      	bne.n	8003f86 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f7e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7ff fb1c 	bl	80035c8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d062      	beq.n	800405c <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a5d      	ldr	r2, [pc, #372]	; (8004110 <HAL_ADC_IRQHandler+0x244>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d002      	beq.n	8003fa6 <HAL_ADC_IRQHandler+0xda>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	e000      	b.n	8003fa8 <HAL_ADC_IRQHandler+0xdc>
 8003fa6:	4b59      	ldr	r3, [pc, #356]	; (800410c <HAL_ADC_IRQHandler+0x240>)
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	6812      	ldr	r2, [r2, #0]
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d008      	beq.n	8003fc2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d005      	beq.n	8003fc2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	2b05      	cmp	r3, #5
 8003fba:	d002      	beq.n	8003fc2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	2b09      	cmp	r3, #9
 8003fc0:	d104      	bne.n	8003fcc <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	623b      	str	r3, [r7, #32]
 8003fca:	e00c      	b.n	8003fe6 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a4f      	ldr	r2, [pc, #316]	; (8004110 <HAL_ADC_IRQHandler+0x244>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d002      	beq.n	8003fdc <HAL_ADC_IRQHandler+0x110>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	e000      	b.n	8003fde <HAL_ADC_IRQHandler+0x112>
 8003fdc:	4b4b      	ldr	r3, [pc, #300]	; (800410c <HAL_ADC_IRQHandler+0x240>)
 8003fde:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003fe6:	6a3b      	ldr	r3, [r7, #32]
 8003fe8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d135      	bne.n	800405c <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0308 	and.w	r3, r3, #8
 8003ffa:	2b08      	cmp	r3, #8
 8003ffc:	d12e      	bne.n	800405c <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4618      	mov	r0, r3
 8004004:	f7ff fc4e 	bl	80038a4 <LL_ADC_REG_IsConversionOngoing>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d11a      	bne.n	8004044 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	685a      	ldr	r2, [r3, #4]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f022 020c 	bic.w	r2, r2, #12
 800401c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004022:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800402e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d112      	bne.n	800405c <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800403a:	f043 0201 	orr.w	r2, r3, #1
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	655a      	str	r2, [r3, #84]	; 0x54
 8004042:	e00b      	b.n	800405c <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004048:	f043 0210 	orr.w	r2, r3, #16
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004054:	f043 0201 	orr.w	r2, r3, #1
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f7fe fa91 	bl	8002584 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	220c      	movs	r2, #12
 8004068:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	f003 0320 	and.w	r3, r3, #32
 8004070:	2b00      	cmp	r3, #0
 8004072:	d004      	beq.n	800407e <HAL_ADC_IRQHandler+0x1b2>
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	f003 0320 	and.w	r3, r3, #32
 800407a:	2b00      	cmp	r3, #0
 800407c:	d10b      	bne.n	8004096 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004084:	2b00      	cmp	r3, #0
 8004086:	f000 80a0 	beq.w	80041ca <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004090:	2b00      	cmp	r3, #0
 8004092:	f000 809a 	beq.w	80041ca <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800409a:	f003 0310 	and.w	r3, r3, #16
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d105      	bne.n	80040ae <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4618      	mov	r0, r3
 80040b4:	f7ff fac7 	bl	8003646 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80040b8:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4618      	mov	r0, r3
 80040c0:	f7ff fa82 	bl	80035c8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80040c4:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a11      	ldr	r2, [pc, #68]	; (8004110 <HAL_ADC_IRQHandler+0x244>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d002      	beq.n	80040d6 <HAL_ADC_IRQHandler+0x20a>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	e000      	b.n	80040d8 <HAL_ADC_IRQHandler+0x20c>
 80040d6:	4b0d      	ldr	r3, [pc, #52]	; (800410c <HAL_ADC_IRQHandler+0x240>)
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	6812      	ldr	r2, [r2, #0]
 80040dc:	4293      	cmp	r3, r2
 80040de:	d008      	beq.n	80040f2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d005      	beq.n	80040f2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	2b06      	cmp	r3, #6
 80040ea:	d002      	beq.n	80040f2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	2b07      	cmp	r3, #7
 80040f0:	d104      	bne.n	80040fc <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	623b      	str	r3, [r7, #32]
 80040fa:	e014      	b.n	8004126 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a03      	ldr	r2, [pc, #12]	; (8004110 <HAL_ADC_IRQHandler+0x244>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d00a      	beq.n	800411c <HAL_ADC_IRQHandler+0x250>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	e008      	b.n	800411e <HAL_ADC_IRQHandler+0x252>
 800410c:	40022000 	.word	0x40022000
 8004110:	40022100 	.word	0x40022100
 8004114:	40022300 	.word	0x40022300
 8004118:	58026300 	.word	0x58026300
 800411c:	4b84      	ldr	r3, [pc, #528]	; (8004330 <HAL_ADC_IRQHandler+0x464>)
 800411e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d047      	beq.n	80041bc <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800412c:	6a3b      	ldr	r3, [r7, #32]
 800412e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d007      	beq.n	8004146 <HAL_ADC_IRQHandler+0x27a>
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d03f      	beq.n	80041bc <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800413c:	6a3b      	ldr	r3, [r7, #32]
 800413e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004142:	2b00      	cmp	r3, #0
 8004144:	d13a      	bne.n	80041bc <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004150:	2b40      	cmp	r3, #64	; 0x40
 8004152:	d133      	bne.n	80041bc <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004154:	6a3b      	ldr	r3, [r7, #32]
 8004156:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d12e      	bne.n	80041bc <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4618      	mov	r0, r3
 8004164:	f7ff fbb1 	bl	80038ca <LL_ADC_INJ_IsConversionOngoing>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d11a      	bne.n	80041a4 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	685a      	ldr	r2, [r3, #4]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800417c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004182:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800418e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004192:	2b00      	cmp	r3, #0
 8004194:	d112      	bne.n	80041bc <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800419a:	f043 0201 	orr.w	r2, r3, #1
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	655a      	str	r2, [r3, #84]	; 0x54
 80041a2:	e00b      	b.n	80041bc <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a8:	f043 0210 	orr.w	r2, r3, #16
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b4:	f043 0201 	orr.w	r2, r3, #1
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f000 feaf 	bl	8004f20 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2260      	movs	r2, #96	; 0x60
 80041c8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d011      	beq.n	80041f8 <HAL_ADC_IRQHandler+0x32c>
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00c      	beq.n	80041f8 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 f8a8 	bl	8004340 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2280      	movs	r2, #128	; 0x80
 80041f6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d012      	beq.n	8004228 <HAL_ADC_IRQHandler+0x35c>
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004208:	2b00      	cmp	r3, #0
 800420a:	d00d      	beq.n	8004228 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004210:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 fe95 	bl	8004f48 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004226:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800422e:	2b00      	cmp	r3, #0
 8004230:	d012      	beq.n	8004258 <HAL_ADC_IRQHandler+0x38c>
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004238:	2b00      	cmp	r3, #0
 800423a:	d00d      	beq.n	8004258 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004240:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f000 fe87 	bl	8004f5c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004256:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	f003 0310 	and.w	r3, r3, #16
 800425e:	2b00      	cmp	r3, #0
 8004260:	d043      	beq.n	80042ea <HAL_ADC_IRQHandler+0x41e>
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	f003 0310 	and.w	r3, r3, #16
 8004268:	2b00      	cmp	r3, #0
 800426a:	d03e      	beq.n	80042ea <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004270:	2b00      	cmp	r3, #0
 8004272:	d102      	bne.n	800427a <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8004274:	2301      	movs	r3, #1
 8004276:	627b      	str	r3, [r7, #36]	; 0x24
 8004278:	e021      	b.n	80042be <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d015      	beq.n	80042ac <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a2a      	ldr	r2, [pc, #168]	; (8004330 <HAL_ADC_IRQHandler+0x464>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d004      	beq.n	8004294 <HAL_ADC_IRQHandler+0x3c8>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a29      	ldr	r2, [pc, #164]	; (8004334 <HAL_ADC_IRQHandler+0x468>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d101      	bne.n	8004298 <HAL_ADC_IRQHandler+0x3cc>
 8004294:	4b28      	ldr	r3, [pc, #160]	; (8004338 <HAL_ADC_IRQHandler+0x46c>)
 8004296:	e000      	b.n	800429a <HAL_ADC_IRQHandler+0x3ce>
 8004298:	4b28      	ldr	r3, [pc, #160]	; (800433c <HAL_ADC_IRQHandler+0x470>)
 800429a:	4618      	mov	r0, r3
 800429c:	f7ff fa44 	bl	8003728 <LL_ADC_GetMultiDMATransfer>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00b      	beq.n	80042be <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80042a6:	2301      	movs	r3, #1
 80042a8:	627b      	str	r3, [r7, #36]	; 0x24
 80042aa:	e008      	b.n	80042be <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	f003 0303 	and.w	r3, r3, #3
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d001      	beq.n	80042be <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80042ba:	2301      	movs	r3, #1
 80042bc:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80042be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d10e      	bne.n	80042e2 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042d4:	f043 0202 	orr.w	r2, r3, #2
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f000 f839 	bl	8004354 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2210      	movs	r2, #16
 80042e8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d018      	beq.n	8004326 <HAL_ADC_IRQHandler+0x45a>
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d013      	beq.n	8004326 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004302:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800430e:	f043 0208 	orr.w	r2, r3, #8
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800431e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 fe07 	bl	8004f34 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004326:	bf00      	nop
 8004328:	3728      	adds	r7, #40	; 0x28
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	40022000 	.word	0x40022000
 8004334:	40022100 	.word	0x40022100
 8004338:	40022300 	.word	0x40022300
 800433c:	58026300 	.word	0x58026300

08004340 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004348:	bf00      	nop
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004368:	b590      	push	{r4, r7, lr}
 800436a:	b0a1      	sub	sp, #132	; 0x84
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004372:	2300      	movs	r3, #0
 8004374:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004378:	2300      	movs	r3, #0
 800437a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	4a9d      	ldr	r2, [pc, #628]	; (80045f8 <HAL_ADC_ConfigChannel+0x290>)
 8004382:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800438a:	2b01      	cmp	r3, #1
 800438c:	d101      	bne.n	8004392 <HAL_ADC_ConfigChannel+0x2a>
 800438e:	2302      	movs	r3, #2
 8004390:	e321      	b.n	80049d6 <HAL_ADC_ConfigChannel+0x66e>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4618      	mov	r0, r3
 80043a0:	f7ff fa80 	bl	80038a4 <LL_ADC_REG_IsConversionOngoing>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	f040 8306 	bne.w	80049b8 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d108      	bne.n	80043ca <HAL_ADC_ConfigChannel+0x62>
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	0e9b      	lsrs	r3, r3, #26
 80043be:	f003 031f 	and.w	r3, r3, #31
 80043c2:	2201      	movs	r2, #1
 80043c4:	fa02 f303 	lsl.w	r3, r2, r3
 80043c8:	e016      	b.n	80043f8 <HAL_ADC_ConfigChannel+0x90>
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043d2:	fa93 f3a3 	rbit	r3, r3
 80043d6:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80043d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043da:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80043dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d101      	bne.n	80043e6 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80043e2:	2320      	movs	r3, #32
 80043e4:	e003      	b.n	80043ee <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80043e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80043e8:	fab3 f383 	clz	r3, r3
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	f003 031f 	and.w	r3, r3, #31
 80043f2:	2201      	movs	r2, #1
 80043f4:	fa02 f303 	lsl.w	r3, r2, r3
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	6812      	ldr	r2, [r2, #0]
 80043fc:	69d1      	ldr	r1, [r2, #28]
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	6812      	ldr	r2, [r2, #0]
 8004402:	430b      	orrs	r3, r1
 8004404:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6818      	ldr	r0, [r3, #0]
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	6859      	ldr	r1, [r3, #4]
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	461a      	mov	r2, r3
 8004414:	f7ff f8eb 	bl	80035ee <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4618      	mov	r0, r3
 800441e:	f7ff fa41 	bl	80038a4 <LL_ADC_REG_IsConversionOngoing>
 8004422:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4618      	mov	r0, r3
 800442a:	f7ff fa4e 	bl	80038ca <LL_ADC_INJ_IsConversionOngoing>
 800442e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004430:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004432:	2b00      	cmp	r3, #0
 8004434:	f040 80b3 	bne.w	800459e <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004438:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800443a:	2b00      	cmp	r3, #0
 800443c:	f040 80af 	bne.w	800459e <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6818      	ldr	r0, [r3, #0]
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	6819      	ldr	r1, [r3, #0]
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	461a      	mov	r2, r3
 800444e:	f7ff f90d 	bl	800366c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004452:	4b6a      	ldr	r3, [pc, #424]	; (80045fc <HAL_ADC_ConfigChannel+0x294>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800445a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800445e:	d10b      	bne.n	8004478 <HAL_ADC_ConfigChannel+0x110>
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	695a      	ldr	r2, [r3, #20]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	089b      	lsrs	r3, r3, #2
 800446c:	f003 0307 	and.w	r3, r3, #7
 8004470:	005b      	lsls	r3, r3, #1
 8004472:	fa02 f303 	lsl.w	r3, r2, r3
 8004476:	e01d      	b.n	80044b4 <HAL_ADC_ConfigChannel+0x14c>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	f003 0310 	and.w	r3, r3, #16
 8004482:	2b00      	cmp	r3, #0
 8004484:	d10b      	bne.n	800449e <HAL_ADC_ConfigChannel+0x136>
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	695a      	ldr	r2, [r3, #20]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	089b      	lsrs	r3, r3, #2
 8004492:	f003 0307 	and.w	r3, r3, #7
 8004496:	005b      	lsls	r3, r3, #1
 8004498:	fa02 f303 	lsl.w	r3, r2, r3
 800449c:	e00a      	b.n	80044b4 <HAL_ADC_ConfigChannel+0x14c>
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	695a      	ldr	r2, [r3, #20]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	089b      	lsrs	r3, r3, #2
 80044aa:	f003 0304 	and.w	r3, r3, #4
 80044ae:	005b      	lsls	r3, r3, #1
 80044b0:	fa02 f303 	lsl.w	r3, r2, r3
 80044b4:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	2b04      	cmp	r3, #4
 80044bc:	d027      	beq.n	800450e <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6818      	ldr	r0, [r3, #0]
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	6919      	ldr	r1, [r3, #16]
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044cc:	f7ff f828 	bl	8003520 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6818      	ldr	r0, [r3, #0]
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	6919      	ldr	r1, [r3, #16]
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	7e5b      	ldrb	r3, [r3, #25]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d102      	bne.n	80044e6 <HAL_ADC_ConfigChannel+0x17e>
 80044e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80044e4:	e000      	b.n	80044e8 <HAL_ADC_ConfigChannel+0x180>
 80044e6:	2300      	movs	r3, #0
 80044e8:	461a      	mov	r2, r3
 80044ea:	f7ff f852 	bl	8003592 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6818      	ldr	r0, [r3, #0]
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	6919      	ldr	r1, [r3, #16]
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	7e1b      	ldrb	r3, [r3, #24]
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d102      	bne.n	8004504 <HAL_ADC_ConfigChannel+0x19c>
 80044fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004502:	e000      	b.n	8004506 <HAL_ADC_ConfigChannel+0x19e>
 8004504:	2300      	movs	r3, #0
 8004506:	461a      	mov	r2, r3
 8004508:	f7ff f82a 	bl	8003560 <LL_ADC_SetDataRightShift>
 800450c:	e047      	b.n	800459e <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004514:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	069b      	lsls	r3, r3, #26
 800451e:	429a      	cmp	r2, r3
 8004520:	d107      	bne.n	8004532 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004530:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004538:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	069b      	lsls	r3, r3, #26
 8004542:	429a      	cmp	r2, r3
 8004544:	d107      	bne.n	8004556 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004554:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800455c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	069b      	lsls	r3, r3, #26
 8004566:	429a      	cmp	r2, r3
 8004568:	d107      	bne.n	800457a <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004578:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004580:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	069b      	lsls	r3, r3, #26
 800458a:	429a      	cmp	r2, r3
 800458c:	d107      	bne.n	800459e <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800459c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4618      	mov	r0, r3
 80045a4:	f7ff f944 	bl	8003830 <LL_ADC_IsEnabled>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	f040 820d 	bne.w	80049ca <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6818      	ldr	r0, [r3, #0]
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	6819      	ldr	r1, [r3, #0]
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	461a      	mov	r2, r3
 80045be:	f7ff f881 	bl	80036c4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	4a0c      	ldr	r2, [pc, #48]	; (80045f8 <HAL_ADC_ConfigChannel+0x290>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	f040 8133 	bne.w	8004834 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d110      	bne.n	8004600 <HAL_ADC_ConfigChannel+0x298>
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	0e9b      	lsrs	r3, r3, #26
 80045e4:	3301      	adds	r3, #1
 80045e6:	f003 031f 	and.w	r3, r3, #31
 80045ea:	2b09      	cmp	r3, #9
 80045ec:	bf94      	ite	ls
 80045ee:	2301      	movls	r3, #1
 80045f0:	2300      	movhi	r3, #0
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	e01e      	b.n	8004634 <HAL_ADC_ConfigChannel+0x2cc>
 80045f6:	bf00      	nop
 80045f8:	47ff0000 	.word	0x47ff0000
 80045fc:	5c001000 	.word	0x5c001000
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004606:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004608:	fa93 f3a3 	rbit	r3, r3
 800460c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800460e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004610:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004612:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004614:	2b00      	cmp	r3, #0
 8004616:	d101      	bne.n	800461c <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8004618:	2320      	movs	r3, #32
 800461a:	e003      	b.n	8004624 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 800461c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800461e:	fab3 f383 	clz	r3, r3
 8004622:	b2db      	uxtb	r3, r3
 8004624:	3301      	adds	r3, #1
 8004626:	f003 031f 	and.w	r3, r3, #31
 800462a:	2b09      	cmp	r3, #9
 800462c:	bf94      	ite	ls
 800462e:	2301      	movls	r3, #1
 8004630:	2300      	movhi	r3, #0
 8004632:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004634:	2b00      	cmp	r3, #0
 8004636:	d079      	beq.n	800472c <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004640:	2b00      	cmp	r3, #0
 8004642:	d107      	bne.n	8004654 <HAL_ADC_ConfigChannel+0x2ec>
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	0e9b      	lsrs	r3, r3, #26
 800464a:	3301      	adds	r3, #1
 800464c:	069b      	lsls	r3, r3, #26
 800464e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004652:	e015      	b.n	8004680 <HAL_ADC_ConfigChannel+0x318>
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800465a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800465c:	fa93 f3a3 	rbit	r3, r3
 8004660:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004662:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004664:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004666:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004668:	2b00      	cmp	r3, #0
 800466a:	d101      	bne.n	8004670 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 800466c:	2320      	movs	r3, #32
 800466e:	e003      	b.n	8004678 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8004670:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004672:	fab3 f383 	clz	r3, r3
 8004676:	b2db      	uxtb	r3, r3
 8004678:	3301      	adds	r3, #1
 800467a:	069b      	lsls	r3, r3, #26
 800467c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004688:	2b00      	cmp	r3, #0
 800468a:	d109      	bne.n	80046a0 <HAL_ADC_ConfigChannel+0x338>
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	0e9b      	lsrs	r3, r3, #26
 8004692:	3301      	adds	r3, #1
 8004694:	f003 031f 	and.w	r3, r3, #31
 8004698:	2101      	movs	r1, #1
 800469a:	fa01 f303 	lsl.w	r3, r1, r3
 800469e:	e017      	b.n	80046d0 <HAL_ADC_ConfigChannel+0x368>
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046a8:	fa93 f3a3 	rbit	r3, r3
 80046ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80046ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046b0:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80046b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d101      	bne.n	80046bc <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80046b8:	2320      	movs	r3, #32
 80046ba:	e003      	b.n	80046c4 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80046bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046be:	fab3 f383 	clz	r3, r3
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	3301      	adds	r3, #1
 80046c6:	f003 031f 	and.w	r3, r3, #31
 80046ca:	2101      	movs	r1, #1
 80046cc:	fa01 f303 	lsl.w	r3, r1, r3
 80046d0:	ea42 0103 	orr.w	r1, r2, r3
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d10a      	bne.n	80046f6 <HAL_ADC_ConfigChannel+0x38e>
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	0e9b      	lsrs	r3, r3, #26
 80046e6:	3301      	adds	r3, #1
 80046e8:	f003 021f 	and.w	r2, r3, #31
 80046ec:	4613      	mov	r3, r2
 80046ee:	005b      	lsls	r3, r3, #1
 80046f0:	4413      	add	r3, r2
 80046f2:	051b      	lsls	r3, r3, #20
 80046f4:	e018      	b.n	8004728 <HAL_ADC_ConfigChannel+0x3c0>
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046fe:	fa93 f3a3 	rbit	r3, r3
 8004702:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004706:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800470a:	2b00      	cmp	r3, #0
 800470c:	d101      	bne.n	8004712 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 800470e:	2320      	movs	r3, #32
 8004710:	e003      	b.n	800471a <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8004712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004714:	fab3 f383 	clz	r3, r3
 8004718:	b2db      	uxtb	r3, r3
 800471a:	3301      	adds	r3, #1
 800471c:	f003 021f 	and.w	r2, r3, #31
 8004720:	4613      	mov	r3, r2
 8004722:	005b      	lsls	r3, r3, #1
 8004724:	4413      	add	r3, r2
 8004726:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004728:	430b      	orrs	r3, r1
 800472a:	e07e      	b.n	800482a <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004734:	2b00      	cmp	r3, #0
 8004736:	d107      	bne.n	8004748 <HAL_ADC_ConfigChannel+0x3e0>
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	0e9b      	lsrs	r3, r3, #26
 800473e:	3301      	adds	r3, #1
 8004740:	069b      	lsls	r3, r3, #26
 8004742:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004746:	e015      	b.n	8004774 <HAL_ADC_ConfigChannel+0x40c>
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800474e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004750:	fa93 f3a3 	rbit	r3, r3
 8004754:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004758:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800475a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800475c:	2b00      	cmp	r3, #0
 800475e:	d101      	bne.n	8004764 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8004760:	2320      	movs	r3, #32
 8004762:	e003      	b.n	800476c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8004764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004766:	fab3 f383 	clz	r3, r3
 800476a:	b2db      	uxtb	r3, r3
 800476c:	3301      	adds	r3, #1
 800476e:	069b      	lsls	r3, r3, #26
 8004770:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800477c:	2b00      	cmp	r3, #0
 800477e:	d109      	bne.n	8004794 <HAL_ADC_ConfigChannel+0x42c>
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	0e9b      	lsrs	r3, r3, #26
 8004786:	3301      	adds	r3, #1
 8004788:	f003 031f 	and.w	r3, r3, #31
 800478c:	2101      	movs	r1, #1
 800478e:	fa01 f303 	lsl.w	r3, r1, r3
 8004792:	e017      	b.n	80047c4 <HAL_ADC_ConfigChannel+0x45c>
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	fa93 f3a3 	rbit	r3, r3
 80047a0:	61bb      	str	r3, [r7, #24]
  return result;
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80047a6:	6a3b      	ldr	r3, [r7, #32]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d101      	bne.n	80047b0 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80047ac:	2320      	movs	r3, #32
 80047ae:	e003      	b.n	80047b8 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80047b0:	6a3b      	ldr	r3, [r7, #32]
 80047b2:	fab3 f383 	clz	r3, r3
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	3301      	adds	r3, #1
 80047ba:	f003 031f 	and.w	r3, r3, #31
 80047be:	2101      	movs	r1, #1
 80047c0:	fa01 f303 	lsl.w	r3, r1, r3
 80047c4:	ea42 0103 	orr.w	r1, r2, r3
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d10d      	bne.n	80047f0 <HAL_ADC_ConfigChannel+0x488>
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	0e9b      	lsrs	r3, r3, #26
 80047da:	3301      	adds	r3, #1
 80047dc:	f003 021f 	and.w	r2, r3, #31
 80047e0:	4613      	mov	r3, r2
 80047e2:	005b      	lsls	r3, r3, #1
 80047e4:	4413      	add	r3, r2
 80047e6:	3b1e      	subs	r3, #30
 80047e8:	051b      	lsls	r3, r3, #20
 80047ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80047ee:	e01b      	b.n	8004828 <HAL_ADC_ConfigChannel+0x4c0>
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	fa93 f3a3 	rbit	r3, r3
 80047fc:	60fb      	str	r3, [r7, #12]
  return result;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d101      	bne.n	800480c <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8004808:	2320      	movs	r3, #32
 800480a:	e003      	b.n	8004814 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	fab3 f383 	clz	r3, r3
 8004812:	b2db      	uxtb	r3, r3
 8004814:	3301      	adds	r3, #1
 8004816:	f003 021f 	and.w	r2, r3, #31
 800481a:	4613      	mov	r3, r2
 800481c:	005b      	lsls	r3, r3, #1
 800481e:	4413      	add	r3, r2
 8004820:	3b1e      	subs	r3, #30
 8004822:	051b      	lsls	r3, r3, #20
 8004824:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004828:	430b      	orrs	r3, r1
 800482a:	683a      	ldr	r2, [r7, #0]
 800482c:	6892      	ldr	r2, [r2, #8]
 800482e:	4619      	mov	r1, r3
 8004830:	f7fe ff1c 	bl	800366c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2b00      	cmp	r3, #0
 800483a:	f280 80c6 	bge.w	80049ca <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a67      	ldr	r2, [pc, #412]	; (80049e0 <HAL_ADC_ConfigChannel+0x678>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d004      	beq.n	8004852 <HAL_ADC_ConfigChannel+0x4ea>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a65      	ldr	r2, [pc, #404]	; (80049e4 <HAL_ADC_ConfigChannel+0x67c>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d101      	bne.n	8004856 <HAL_ADC_ConfigChannel+0x4ee>
 8004852:	4b65      	ldr	r3, [pc, #404]	; (80049e8 <HAL_ADC_ConfigChannel+0x680>)
 8004854:	e000      	b.n	8004858 <HAL_ADC_ConfigChannel+0x4f0>
 8004856:	4b65      	ldr	r3, [pc, #404]	; (80049ec <HAL_ADC_ConfigChannel+0x684>)
 8004858:	4618      	mov	r0, r3
 800485a:	f7fe fe53 	bl	8003504 <LL_ADC_GetCommonPathInternalCh>
 800485e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a5e      	ldr	r2, [pc, #376]	; (80049e0 <HAL_ADC_ConfigChannel+0x678>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d004      	beq.n	8004874 <HAL_ADC_ConfigChannel+0x50c>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a5d      	ldr	r2, [pc, #372]	; (80049e4 <HAL_ADC_ConfigChannel+0x67c>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d10e      	bne.n	8004892 <HAL_ADC_ConfigChannel+0x52a>
 8004874:	485a      	ldr	r0, [pc, #360]	; (80049e0 <HAL_ADC_ConfigChannel+0x678>)
 8004876:	f7fe ffdb 	bl	8003830 <LL_ADC_IsEnabled>
 800487a:	4604      	mov	r4, r0
 800487c:	4859      	ldr	r0, [pc, #356]	; (80049e4 <HAL_ADC_ConfigChannel+0x67c>)
 800487e:	f7fe ffd7 	bl	8003830 <LL_ADC_IsEnabled>
 8004882:	4603      	mov	r3, r0
 8004884:	4323      	orrs	r3, r4
 8004886:	2b00      	cmp	r3, #0
 8004888:	bf0c      	ite	eq
 800488a:	2301      	moveq	r3, #1
 800488c:	2300      	movne	r3, #0
 800488e:	b2db      	uxtb	r3, r3
 8004890:	e008      	b.n	80048a4 <HAL_ADC_ConfigChannel+0x53c>
 8004892:	4857      	ldr	r0, [pc, #348]	; (80049f0 <HAL_ADC_ConfigChannel+0x688>)
 8004894:	f7fe ffcc 	bl	8003830 <LL_ADC_IsEnabled>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	bf0c      	ite	eq
 800489e:	2301      	moveq	r3, #1
 80048a0:	2300      	movne	r3, #0
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d07d      	beq.n	80049a4 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a51      	ldr	r2, [pc, #324]	; (80049f4 <HAL_ADC_ConfigChannel+0x68c>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d130      	bne.n	8004914 <HAL_ADC_ConfigChannel+0x5ac>
 80048b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d12b      	bne.n	8004914 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a4b      	ldr	r2, [pc, #300]	; (80049f0 <HAL_ADC_ConfigChannel+0x688>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	f040 8081 	bne.w	80049ca <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a44      	ldr	r2, [pc, #272]	; (80049e0 <HAL_ADC_ConfigChannel+0x678>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d004      	beq.n	80048dc <HAL_ADC_ConfigChannel+0x574>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a43      	ldr	r2, [pc, #268]	; (80049e4 <HAL_ADC_ConfigChannel+0x67c>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d101      	bne.n	80048e0 <HAL_ADC_ConfigChannel+0x578>
 80048dc:	4a42      	ldr	r2, [pc, #264]	; (80049e8 <HAL_ADC_ConfigChannel+0x680>)
 80048de:	e000      	b.n	80048e2 <HAL_ADC_ConfigChannel+0x57a>
 80048e0:	4a42      	ldr	r2, [pc, #264]	; (80049ec <HAL_ADC_ConfigChannel+0x684>)
 80048e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80048e8:	4619      	mov	r1, r3
 80048ea:	4610      	mov	r0, r2
 80048ec:	f7fe fdf7 	bl	80034de <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80048f0:	4b41      	ldr	r3, [pc, #260]	; (80049f8 <HAL_ADC_ConfigChannel+0x690>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	099b      	lsrs	r3, r3, #6
 80048f6:	4a41      	ldr	r2, [pc, #260]	; (80049fc <HAL_ADC_ConfigChannel+0x694>)
 80048f8:	fba2 2303 	umull	r2, r3, r2, r3
 80048fc:	099b      	lsrs	r3, r3, #6
 80048fe:	3301      	adds	r3, #1
 8004900:	005b      	lsls	r3, r3, #1
 8004902:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004904:	e002      	b.n	800490c <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	3b01      	subs	r3, #1
 800490a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1f9      	bne.n	8004906 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004912:	e05a      	b.n	80049ca <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a39      	ldr	r2, [pc, #228]	; (8004a00 <HAL_ADC_ConfigChannel+0x698>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d11e      	bne.n	800495c <HAL_ADC_ConfigChannel+0x5f4>
 800491e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004920:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d119      	bne.n	800495c <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a30      	ldr	r2, [pc, #192]	; (80049f0 <HAL_ADC_ConfigChannel+0x688>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d14b      	bne.n	80049ca <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a2a      	ldr	r2, [pc, #168]	; (80049e0 <HAL_ADC_ConfigChannel+0x678>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d004      	beq.n	8004946 <HAL_ADC_ConfigChannel+0x5de>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a28      	ldr	r2, [pc, #160]	; (80049e4 <HAL_ADC_ConfigChannel+0x67c>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d101      	bne.n	800494a <HAL_ADC_ConfigChannel+0x5e2>
 8004946:	4a28      	ldr	r2, [pc, #160]	; (80049e8 <HAL_ADC_ConfigChannel+0x680>)
 8004948:	e000      	b.n	800494c <HAL_ADC_ConfigChannel+0x5e4>
 800494a:	4a28      	ldr	r2, [pc, #160]	; (80049ec <HAL_ADC_ConfigChannel+0x684>)
 800494c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800494e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004952:	4619      	mov	r1, r3
 8004954:	4610      	mov	r0, r2
 8004956:	f7fe fdc2 	bl	80034de <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800495a:	e036      	b.n	80049ca <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a28      	ldr	r2, [pc, #160]	; (8004a04 <HAL_ADC_ConfigChannel+0x69c>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d131      	bne.n	80049ca <HAL_ADC_ConfigChannel+0x662>
 8004966:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004968:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d12c      	bne.n	80049ca <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a1e      	ldr	r2, [pc, #120]	; (80049f0 <HAL_ADC_ConfigChannel+0x688>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d127      	bne.n	80049ca <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a18      	ldr	r2, [pc, #96]	; (80049e0 <HAL_ADC_ConfigChannel+0x678>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d004      	beq.n	800498e <HAL_ADC_ConfigChannel+0x626>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a16      	ldr	r2, [pc, #88]	; (80049e4 <HAL_ADC_ConfigChannel+0x67c>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d101      	bne.n	8004992 <HAL_ADC_ConfigChannel+0x62a>
 800498e:	4a16      	ldr	r2, [pc, #88]	; (80049e8 <HAL_ADC_ConfigChannel+0x680>)
 8004990:	e000      	b.n	8004994 <HAL_ADC_ConfigChannel+0x62c>
 8004992:	4a16      	ldr	r2, [pc, #88]	; (80049ec <HAL_ADC_ConfigChannel+0x684>)
 8004994:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004996:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800499a:	4619      	mov	r1, r3
 800499c:	4610      	mov	r0, r2
 800499e:	f7fe fd9e 	bl	80034de <LL_ADC_SetCommonPathInternalCh>
 80049a2:	e012      	b.n	80049ca <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049a8:	f043 0220 	orr.w	r2, r3, #32
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80049b6:	e008      	b.n	80049ca <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049bc:	f043 0220 	orr.w	r2, r3, #32
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80049d2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3784      	adds	r7, #132	; 0x84
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd90      	pop	{r4, r7, pc}
 80049de:	bf00      	nop
 80049e0:	40022000 	.word	0x40022000
 80049e4:	40022100 	.word	0x40022100
 80049e8:	40022300 	.word	0x40022300
 80049ec:	58026300 	.word	0x58026300
 80049f0:	58026000 	.word	0x58026000
 80049f4:	cb840000 	.word	0xcb840000
 80049f8:	20000010 	.word	0x20000010
 80049fc:	053e2d63 	.word	0x053e2d63
 8004a00:	c7520000 	.word	0xc7520000
 8004a04:	cfb80000 	.word	0xcfb80000

08004a08 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4618      	mov	r0, r3
 8004a16:	f7fe ff0b 	bl	8003830 <LL_ADC_IsEnabled>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d16e      	bne.n	8004afe <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	689a      	ldr	r2, [r3, #8]
 8004a26:	4b38      	ldr	r3, [pc, #224]	; (8004b08 <ADC_Enable+0x100>)
 8004a28:	4013      	ands	r3, r2
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00d      	beq.n	8004a4a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a32:	f043 0210 	orr.w	r2, r3, #16
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a3e:	f043 0201 	orr.w	r2, r3, #1
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e05a      	b.n	8004b00 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f7fe fec6 	bl	80037e0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004a54:	f7fe fcca 	bl	80033ec <HAL_GetTick>
 8004a58:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a2b      	ldr	r2, [pc, #172]	; (8004b0c <ADC_Enable+0x104>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d004      	beq.n	8004a6e <ADC_Enable+0x66>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a29      	ldr	r2, [pc, #164]	; (8004b10 <ADC_Enable+0x108>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d101      	bne.n	8004a72 <ADC_Enable+0x6a>
 8004a6e:	4b29      	ldr	r3, [pc, #164]	; (8004b14 <ADC_Enable+0x10c>)
 8004a70:	e000      	b.n	8004a74 <ADC_Enable+0x6c>
 8004a72:	4b29      	ldr	r3, [pc, #164]	; (8004b18 <ADC_Enable+0x110>)
 8004a74:	4618      	mov	r0, r3
 8004a76:	f7fe fe49 	bl	800370c <LL_ADC_GetMultimode>
 8004a7a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a23      	ldr	r2, [pc, #140]	; (8004b10 <ADC_Enable+0x108>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d002      	beq.n	8004a8c <ADC_Enable+0x84>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	e000      	b.n	8004a8e <ADC_Enable+0x86>
 8004a8c:	4b1f      	ldr	r3, [pc, #124]	; (8004b0c <ADC_Enable+0x104>)
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	6812      	ldr	r2, [r2, #0]
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d02c      	beq.n	8004af0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d130      	bne.n	8004afe <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a9c:	e028      	b.n	8004af0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7fe fec4 	bl	8003830 <LL_ADC_IsEnabled>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d104      	bne.n	8004ab8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7fe fe94 	bl	80037e0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004ab8:	f7fe fc98 	bl	80033ec <HAL_GetTick>
 8004abc:	4602      	mov	r2, r0
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	2b02      	cmp	r3, #2
 8004ac4:	d914      	bls.n	8004af0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0301 	and.w	r3, r3, #1
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d00d      	beq.n	8004af0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ad8:	f043 0210 	orr.w	r2, r3, #16
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ae4:	f043 0201 	orr.w	r2, r3, #1
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e007      	b.n	8004b00 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0301 	and.w	r3, r3, #1
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d1cf      	bne.n	8004a9e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004afe:	2300      	movs	r3, #0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3710      	adds	r7, #16
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	8000003f 	.word	0x8000003f
 8004b0c:	40022000 	.word	0x40022000
 8004b10:	40022100 	.word	0x40022100
 8004b14:	40022300 	.word	0x40022300
 8004b18:	58026300 	.word	0x58026300

08004b1c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f7fe fe94 	bl	8003856 <LL_ADC_IsDisableOngoing>
 8004b2e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4618      	mov	r0, r3
 8004b36:	f7fe fe7b 	bl	8003830 <LL_ADC_IsEnabled>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d047      	beq.n	8004bd0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d144      	bne.n	8004bd0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	f003 030d 	and.w	r3, r3, #13
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d10c      	bne.n	8004b6e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f7fe fe55 	bl	8003808 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2203      	movs	r2, #3
 8004b64:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004b66:	f7fe fc41 	bl	80033ec <HAL_GetTick>
 8004b6a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004b6c:	e029      	b.n	8004bc2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b72:	f043 0210 	orr.w	r2, r3, #16
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b7e:	f043 0201 	orr.w	r2, r3, #1
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e023      	b.n	8004bd2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004b8a:	f7fe fc2f 	bl	80033ec <HAL_GetTick>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d914      	bls.n	8004bc2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	f003 0301 	and.w	r3, r3, #1
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00d      	beq.n	8004bc2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004baa:	f043 0210 	orr.w	r2, r3, #16
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bb6:	f043 0201 	orr.w	r2, r3, #1
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e007      	b.n	8004bd2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	f003 0301 	and.w	r3, r3, #1
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d1dc      	bne.n	8004b8a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3710      	adds	r7, #16
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
	...

08004bdc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a7a      	ldr	r2, [pc, #488]	; (8004dd4 <ADC_ConfigureBoostMode+0x1f8>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d004      	beq.n	8004bf8 <ADC_ConfigureBoostMode+0x1c>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a79      	ldr	r2, [pc, #484]	; (8004dd8 <ADC_ConfigureBoostMode+0x1fc>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d109      	bne.n	8004c0c <ADC_ConfigureBoostMode+0x30>
 8004bf8:	4b78      	ldr	r3, [pc, #480]	; (8004ddc <ADC_ConfigureBoostMode+0x200>)
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	bf14      	ite	ne
 8004c04:	2301      	movne	r3, #1
 8004c06:	2300      	moveq	r3, #0
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	e008      	b.n	8004c1e <ADC_ConfigureBoostMode+0x42>
 8004c0c:	4b74      	ldr	r3, [pc, #464]	; (8004de0 <ADC_ConfigureBoostMode+0x204>)
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	bf14      	ite	ne
 8004c18:	2301      	movne	r3, #1
 8004c1a:	2300      	moveq	r3, #0
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d01c      	beq.n	8004c5c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004c22:	f005 f89b 	bl	8009d5c <HAL_RCC_GetHCLKFreq>
 8004c26:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004c30:	d010      	beq.n	8004c54 <ADC_ConfigureBoostMode+0x78>
 8004c32:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004c36:	d873      	bhi.n	8004d20 <ADC_ConfigureBoostMode+0x144>
 8004c38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c3c:	d002      	beq.n	8004c44 <ADC_ConfigureBoostMode+0x68>
 8004c3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c42:	d16d      	bne.n	8004d20 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	0c1b      	lsrs	r3, r3, #16
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c50:	60fb      	str	r3, [r7, #12]
        break;
 8004c52:	e068      	b.n	8004d26 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	089b      	lsrs	r3, r3, #2
 8004c58:	60fb      	str	r3, [r7, #12]
        break;
 8004c5a:	e064      	b.n	8004d26 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004c5c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004c60:	f04f 0100 	mov.w	r1, #0
 8004c64:	f006 fafc 	bl	800b260 <HAL_RCCEx_GetPeriphCLKFreq>
 8004c68:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004c72:	d051      	beq.n	8004d18 <ADC_ConfigureBoostMode+0x13c>
 8004c74:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004c78:	d854      	bhi.n	8004d24 <ADC_ConfigureBoostMode+0x148>
 8004c7a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004c7e:	d047      	beq.n	8004d10 <ADC_ConfigureBoostMode+0x134>
 8004c80:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004c84:	d84e      	bhi.n	8004d24 <ADC_ConfigureBoostMode+0x148>
 8004c86:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004c8a:	d03d      	beq.n	8004d08 <ADC_ConfigureBoostMode+0x12c>
 8004c8c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004c90:	d848      	bhi.n	8004d24 <ADC_ConfigureBoostMode+0x148>
 8004c92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c96:	d033      	beq.n	8004d00 <ADC_ConfigureBoostMode+0x124>
 8004c98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c9c:	d842      	bhi.n	8004d24 <ADC_ConfigureBoostMode+0x148>
 8004c9e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004ca2:	d029      	beq.n	8004cf8 <ADC_ConfigureBoostMode+0x11c>
 8004ca4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004ca8:	d83c      	bhi.n	8004d24 <ADC_ConfigureBoostMode+0x148>
 8004caa:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004cae:	d01a      	beq.n	8004ce6 <ADC_ConfigureBoostMode+0x10a>
 8004cb0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004cb4:	d836      	bhi.n	8004d24 <ADC_ConfigureBoostMode+0x148>
 8004cb6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004cba:	d014      	beq.n	8004ce6 <ADC_ConfigureBoostMode+0x10a>
 8004cbc:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004cc0:	d830      	bhi.n	8004d24 <ADC_ConfigureBoostMode+0x148>
 8004cc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cc6:	d00e      	beq.n	8004ce6 <ADC_ConfigureBoostMode+0x10a>
 8004cc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ccc:	d82a      	bhi.n	8004d24 <ADC_ConfigureBoostMode+0x148>
 8004cce:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004cd2:	d008      	beq.n	8004ce6 <ADC_ConfigureBoostMode+0x10a>
 8004cd4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004cd8:	d824      	bhi.n	8004d24 <ADC_ConfigureBoostMode+0x148>
 8004cda:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004cde:	d002      	beq.n	8004ce6 <ADC_ConfigureBoostMode+0x10a>
 8004ce0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004ce4:	d11e      	bne.n	8004d24 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	0c9b      	lsrs	r3, r3, #18
 8004cec:	005b      	lsls	r3, r3, #1
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cf4:	60fb      	str	r3, [r7, #12]
        break;
 8004cf6:	e016      	b.n	8004d26 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	091b      	lsrs	r3, r3, #4
 8004cfc:	60fb      	str	r3, [r7, #12]
        break;
 8004cfe:	e012      	b.n	8004d26 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	095b      	lsrs	r3, r3, #5
 8004d04:	60fb      	str	r3, [r7, #12]
        break;
 8004d06:	e00e      	b.n	8004d26 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	099b      	lsrs	r3, r3, #6
 8004d0c:	60fb      	str	r3, [r7, #12]
        break;
 8004d0e:	e00a      	b.n	8004d26 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	09db      	lsrs	r3, r3, #7
 8004d14:	60fb      	str	r3, [r7, #12]
        break;
 8004d16:	e006      	b.n	8004d26 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	0a1b      	lsrs	r3, r3, #8
 8004d1c:	60fb      	str	r3, [r7, #12]
        break;
 8004d1e:	e002      	b.n	8004d26 <ADC_ConfigureBoostMode+0x14a>
        break;
 8004d20:	bf00      	nop
 8004d22:	e000      	b.n	8004d26 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004d24:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004d26:	f7fe fb91 	bl	800344c <HAL_GetREVID>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	f241 0203 	movw	r2, #4099	; 0x1003
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d815      	bhi.n	8004d60 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	4a2b      	ldr	r2, [pc, #172]	; (8004de4 <ADC_ConfigureBoostMode+0x208>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d908      	bls.n	8004d4e <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	689a      	ldr	r2, [r3, #8]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d4a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004d4c:	e03e      	b.n	8004dcc <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	689a      	ldr	r2, [r3, #8]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d5c:	609a      	str	r2, [r3, #8]
}
 8004d5e:	e035      	b.n	8004dcc <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	085b      	lsrs	r3, r3, #1
 8004d64:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	4a1f      	ldr	r2, [pc, #124]	; (8004de8 <ADC_ConfigureBoostMode+0x20c>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d808      	bhi.n	8004d80 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	689a      	ldr	r2, [r3, #8]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004d7c:	609a      	str	r2, [r3, #8]
}
 8004d7e:	e025      	b.n	8004dcc <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	4a1a      	ldr	r2, [pc, #104]	; (8004dec <ADC_ConfigureBoostMode+0x210>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d80a      	bhi.n	8004d9e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d9a:	609a      	str	r2, [r3, #8]
}
 8004d9c:	e016      	b.n	8004dcc <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	4a13      	ldr	r2, [pc, #76]	; (8004df0 <ADC_ConfigureBoostMode+0x214>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d80a      	bhi.n	8004dbc <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004db8:	609a      	str	r2, [r3, #8]
}
 8004dba:	e007      	b.n	8004dcc <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	689a      	ldr	r2, [r3, #8]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004dca:	609a      	str	r2, [r3, #8]
}
 8004dcc:	bf00      	nop
 8004dce:	3710      	adds	r7, #16
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	40022000 	.word	0x40022000
 8004dd8:	40022100 	.word	0x40022100
 8004ddc:	40022300 	.word	0x40022300
 8004de0:	58026300 	.word	0x58026300
 8004de4:	01312d00 	.word	0x01312d00
 8004de8:	005f5e10 	.word	0x005f5e10
 8004dec:	00bebc20 	.word	0x00bebc20
 8004df0:	017d7840 	.word	0x017d7840

08004df4 <LL_ADC_StartCalibration>:
{
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	689a      	ldr	r2, [r3, #8]
 8004e04:	4b09      	ldr	r3, [pc, #36]	; (8004e2c <LL_ADC_StartCalibration+0x38>)
 8004e06:	4013      	ands	r3, r2
 8004e08:	68ba      	ldr	r2, [r7, #8]
 8004e0a:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004e14:	430a      	orrs	r2, r1
 8004e16:	4313      	orrs	r3, r2
 8004e18:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	609a      	str	r2, [r3, #8]
}
 8004e20:	bf00      	nop
 8004e22:	3714      	adds	r7, #20
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr
 8004e2c:	3ffeffc0 	.word	0x3ffeffc0

08004e30 <LL_ADC_IsCalibrationOnGoing>:
{
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e44:	d101      	bne.n	8004e4a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004e46:	2301      	movs	r3, #1
 8004e48:	e000      	b.n	8004e4c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b086      	sub	sp, #24
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004e64:	2300      	movs	r3, #0
 8004e66:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d101      	bne.n	8004e76 <HAL_ADCEx_Calibration_Start+0x1e>
 8004e72:	2302      	movs	r3, #2
 8004e74:	e04c      	b.n	8004f10 <HAL_ADCEx_Calibration_Start+0xb8>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004e7e:	68f8      	ldr	r0, [r7, #12]
 8004e80:	f7ff fe4c 	bl	8004b1c <ADC_Disable>
 8004e84:	4603      	mov	r3, r0
 8004e86:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004e88:	7dfb      	ldrb	r3, [r7, #23]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d135      	bne.n	8004efa <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e92:	4b21      	ldr	r3, [pc, #132]	; (8004f18 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004e94:	4013      	ands	r3, r2
 8004e96:	f043 0202 	orr.w	r2, r3, #2
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	68b9      	ldr	r1, [r7, #8]
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f7ff ffa4 	bl	8004df4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004eac:	e014      	b.n	8004ed8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	3301      	adds	r3, #1
 8004eb2:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	4a19      	ldr	r2, [pc, #100]	; (8004f1c <HAL_ADCEx_Calibration_Start+0xc4>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d30d      	bcc.n	8004ed8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec0:	f023 0312 	bic.w	r3, r3, #18
 8004ec4:	f043 0210 	orr.w	r2, r3, #16
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e01b      	b.n	8004f10 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4618      	mov	r0, r3
 8004ede:	f7ff ffa7 	bl	8004e30 <LL_ADC_IsCalibrationOnGoing>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1e2      	bne.n	8004eae <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eec:	f023 0303 	bic.w	r3, r3, #3
 8004ef0:	f043 0201 	orr.w	r2, r3, #1
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	655a      	str	r2, [r3, #84]	; 0x54
 8004ef8:	e005      	b.n	8004f06 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004efe:	f043 0210 	orr.w	r2, r3, #16
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3718      	adds	r7, #24
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	ffffeefd 	.word	0xffffeefd
 8004f1c:	25c3f800 	.word	0x25c3f800

08004f20 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004f28:	bf00      	nop
 8004f2a:	370c      	adds	r7, #12
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr

08004f34 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004f3c:	bf00      	nop
 8004f3e:	370c      	adds	r7, #12
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004f50:	bf00      	nop
 8004f52:	370c      	adds	r7, #12
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr

08004f5c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004f64:	bf00      	nop
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004f78:	bf00      	nop
 8004f7a:	370c      	adds	r7, #12
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <__NVIC_SetPriorityGrouping>:
{
 8004f84:	b480      	push	{r7}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f003 0307 	and.w	r3, r3, #7
 8004f92:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f94:	4b0b      	ldr	r3, [pc, #44]	; (8004fc4 <__NVIC_SetPriorityGrouping+0x40>)
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f9a:	68ba      	ldr	r2, [r7, #8]
 8004f9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004fac:	4b06      	ldr	r3, [pc, #24]	; (8004fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004fb2:	4a04      	ldr	r2, [pc, #16]	; (8004fc4 <__NVIC_SetPriorityGrouping+0x40>)
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	60d3      	str	r3, [r2, #12]
}
 8004fb8:	bf00      	nop
 8004fba:	3714      	adds	r7, #20
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr
 8004fc4:	e000ed00 	.word	0xe000ed00
 8004fc8:	05fa0000 	.word	0x05fa0000

08004fcc <__NVIC_GetPriorityGrouping>:
{
 8004fcc:	b480      	push	{r7}
 8004fce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004fd0:	4b04      	ldr	r3, [pc, #16]	; (8004fe4 <__NVIC_GetPriorityGrouping+0x18>)
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	0a1b      	lsrs	r3, r3, #8
 8004fd6:	f003 0307 	and.w	r3, r3, #7
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr
 8004fe4:	e000ed00 	.word	0xe000ed00

08004fe8 <__NVIC_EnableIRQ>:
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	4603      	mov	r3, r0
 8004ff0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004ff2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	db0b      	blt.n	8005012 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ffa:	88fb      	ldrh	r3, [r7, #6]
 8004ffc:	f003 021f 	and.w	r2, r3, #31
 8005000:	4907      	ldr	r1, [pc, #28]	; (8005020 <__NVIC_EnableIRQ+0x38>)
 8005002:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005006:	095b      	lsrs	r3, r3, #5
 8005008:	2001      	movs	r0, #1
 800500a:	fa00 f202 	lsl.w	r2, r0, r2
 800500e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005012:	bf00      	nop
 8005014:	370c      	adds	r7, #12
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
 800501e:	bf00      	nop
 8005020:	e000e100 	.word	0xe000e100

08005024 <__NVIC_SetPriority>:
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	4603      	mov	r3, r0
 800502c:	6039      	str	r1, [r7, #0]
 800502e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005030:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005034:	2b00      	cmp	r3, #0
 8005036:	db0a      	blt.n	800504e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	b2da      	uxtb	r2, r3
 800503c:	490c      	ldr	r1, [pc, #48]	; (8005070 <__NVIC_SetPriority+0x4c>)
 800503e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005042:	0112      	lsls	r2, r2, #4
 8005044:	b2d2      	uxtb	r2, r2
 8005046:	440b      	add	r3, r1
 8005048:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800504c:	e00a      	b.n	8005064 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	b2da      	uxtb	r2, r3
 8005052:	4908      	ldr	r1, [pc, #32]	; (8005074 <__NVIC_SetPriority+0x50>)
 8005054:	88fb      	ldrh	r3, [r7, #6]
 8005056:	f003 030f 	and.w	r3, r3, #15
 800505a:	3b04      	subs	r3, #4
 800505c:	0112      	lsls	r2, r2, #4
 800505e:	b2d2      	uxtb	r2, r2
 8005060:	440b      	add	r3, r1
 8005062:	761a      	strb	r2, [r3, #24]
}
 8005064:	bf00      	nop
 8005066:	370c      	adds	r7, #12
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr
 8005070:	e000e100 	.word	0xe000e100
 8005074:	e000ed00 	.word	0xe000ed00

08005078 <NVIC_EncodePriority>:
{
 8005078:	b480      	push	{r7}
 800507a:	b089      	sub	sp, #36	; 0x24
 800507c:	af00      	add	r7, sp, #0
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f003 0307 	and.w	r3, r3, #7
 800508a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	f1c3 0307 	rsb	r3, r3, #7
 8005092:	2b04      	cmp	r3, #4
 8005094:	bf28      	it	cs
 8005096:	2304      	movcs	r3, #4
 8005098:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	3304      	adds	r3, #4
 800509e:	2b06      	cmp	r3, #6
 80050a0:	d902      	bls.n	80050a8 <NVIC_EncodePriority+0x30>
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	3b03      	subs	r3, #3
 80050a6:	e000      	b.n	80050aa <NVIC_EncodePriority+0x32>
 80050a8:	2300      	movs	r3, #0
 80050aa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050ac:	f04f 32ff 	mov.w	r2, #4294967295
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	fa02 f303 	lsl.w	r3, r2, r3
 80050b6:	43da      	mvns	r2, r3
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	401a      	ands	r2, r3
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80050c0:	f04f 31ff 	mov.w	r1, #4294967295
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	fa01 f303 	lsl.w	r3, r1, r3
 80050ca:	43d9      	mvns	r1, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050d0:	4313      	orrs	r3, r2
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3724      	adds	r7, #36	; 0x24
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
	...

080050e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	3b01      	subs	r3, #1
 80050ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80050f0:	d301      	bcc.n	80050f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80050f2:	2301      	movs	r3, #1
 80050f4:	e00f      	b.n	8005116 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80050f6:	4a0a      	ldr	r2, [pc, #40]	; (8005120 <SysTick_Config+0x40>)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	3b01      	subs	r3, #1
 80050fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80050fe:	210f      	movs	r1, #15
 8005100:	f04f 30ff 	mov.w	r0, #4294967295
 8005104:	f7ff ff8e 	bl	8005024 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005108:	4b05      	ldr	r3, [pc, #20]	; (8005120 <SysTick_Config+0x40>)
 800510a:	2200      	movs	r2, #0
 800510c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800510e:	4b04      	ldr	r3, [pc, #16]	; (8005120 <SysTick_Config+0x40>)
 8005110:	2207      	movs	r2, #7
 8005112:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3708      	adds	r7, #8
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	e000e010 	.word	0xe000e010

08005124 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f7ff ff29 	bl	8004f84 <__NVIC_SetPriorityGrouping>
}
 8005132:	bf00      	nop
 8005134:	3708      	adds	r7, #8
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}

0800513a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800513a:	b580      	push	{r7, lr}
 800513c:	b086      	sub	sp, #24
 800513e:	af00      	add	r7, sp, #0
 8005140:	4603      	mov	r3, r0
 8005142:	60b9      	str	r1, [r7, #8]
 8005144:	607a      	str	r2, [r7, #4]
 8005146:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005148:	f7ff ff40 	bl	8004fcc <__NVIC_GetPriorityGrouping>
 800514c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	68b9      	ldr	r1, [r7, #8]
 8005152:	6978      	ldr	r0, [r7, #20]
 8005154:	f7ff ff90 	bl	8005078 <NVIC_EncodePriority>
 8005158:	4602      	mov	r2, r0
 800515a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800515e:	4611      	mov	r1, r2
 8005160:	4618      	mov	r0, r3
 8005162:	f7ff ff5f 	bl	8005024 <__NVIC_SetPriority>
}
 8005166:	bf00      	nop
 8005168:	3718      	adds	r7, #24
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}

0800516e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800516e:	b580      	push	{r7, lr}
 8005170:	b082      	sub	sp, #8
 8005172:	af00      	add	r7, sp, #0
 8005174:	4603      	mov	r3, r0
 8005176:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005178:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800517c:	4618      	mov	r0, r3
 800517e:	f7ff ff33 	bl	8004fe8 <__NVIC_EnableIRQ>
}
 8005182:	bf00      	nop
 8005184:	3708      	adds	r7, #8
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}

0800518a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800518a:	b580      	push	{r7, lr}
 800518c:	b082      	sub	sp, #8
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f7ff ffa4 	bl	80050e0 <SysTick_Config>
 8005198:	4603      	mov	r3, r0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3708      	adds	r7, #8
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}

080051a2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80051a2:	b580      	push	{r7, lr}
 80051a4:	b082      	sub	sp, #8
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d101      	bne.n	80051b4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e014      	b.n	80051de <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	791b      	ldrb	r3, [r3, #4]
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d105      	bne.n	80051ca <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f7fd fab1 	bl	800272c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2202      	movs	r2, #2
 80051ce:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2201      	movs	r2, #1
 80051da:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3708      	adds	r7, #8
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}

080051e6 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80051e6:	b480      	push	{r7}
 80051e8:	b083      	sub	sp, #12
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
 80051ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	795b      	ldrb	r3, [r3, #5]
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d101      	bne.n	80051fc <HAL_DAC_Start+0x16>
 80051f8:	2302      	movs	r3, #2
 80051fa:	e040      	b.n	800527e <HAL_DAC_Start+0x98>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2202      	movs	r2, #2
 8005206:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	6819      	ldr	r1, [r3, #0]
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	f003 0310 	and.w	r3, r3, #16
 8005214:	2201      	movs	r2, #1
 8005216:	409a      	lsls	r2, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	430a      	orrs	r2, r1
 800521e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d10f      	bne.n	8005246 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8005230:	2b02      	cmp	r3, #2
 8005232:	d11d      	bne.n	8005270 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	685a      	ldr	r2, [r3, #4]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f042 0201 	orr.w	r2, r2, #1
 8005242:	605a      	str	r2, [r3, #4]
 8005244:	e014      	b.n	8005270 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	f003 0310 	and.w	r3, r3, #16
 8005256:	2102      	movs	r1, #2
 8005258:	fa01 f303 	lsl.w	r3, r1, r3
 800525c:	429a      	cmp	r2, r3
 800525e:	d107      	bne.n	8005270 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	685a      	ldr	r2, [r3, #4]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f042 0202 	orr.w	r2, r2, #2
 800526e:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	370c      	adds	r7, #12
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr

0800528a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800528a:	b480      	push	{r7}
 800528c:	b087      	sub	sp, #28
 800528e:	af00      	add	r7, sp, #0
 8005290:	60f8      	str	r0, [r7, #12]
 8005292:	60b9      	str	r1, [r7, #8]
 8005294:	607a      	str	r2, [r7, #4]
 8005296:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005298:	2300      	movs	r3, #0
 800529a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d105      	bne.n	80052b4 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80052a8:	697a      	ldr	r2, [r7, #20]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4413      	add	r3, r2
 80052ae:	3308      	adds	r3, #8
 80052b0:	617b      	str	r3, [r7, #20]
 80052b2:	e004      	b.n	80052be <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80052b4:	697a      	ldr	r2, [r7, #20]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4413      	add	r3, r2
 80052ba:	3314      	adds	r3, #20
 80052bc:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	461a      	mov	r2, r3
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	371c      	adds	r7, #28
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b088      	sub	sp, #32
 80052d8:	af00      	add	r7, sp, #0
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	795b      	ldrb	r3, [r3, #5]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d101      	bne.n	80052ec <HAL_DAC_ConfigChannel+0x18>
 80052e8:	2302      	movs	r3, #2
 80052ea:	e12a      	b.n	8005542 <HAL_DAC_ConfigChannel+0x26e>
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2201      	movs	r2, #1
 80052f0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2202      	movs	r2, #2
 80052f6:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2b04      	cmp	r3, #4
 80052fe:	f040 8081 	bne.w	8005404 <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005302:	f7fe f873 	bl	80033ec <HAL_GetTick>
 8005306:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d140      	bne.n	8005390 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800530e:	e018      	b.n	8005342 <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005310:	f7fe f86c 	bl	80033ec <HAL_GetTick>
 8005314:	4602      	mov	r2, r0
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	2b01      	cmp	r3, #1
 800531c:	d911      	bls.n	8005342 <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005324:	4b89      	ldr	r3, [pc, #548]	; (800554c <HAL_DAC_ConfigChannel+0x278>)
 8005326:	4013      	ands	r3, r2
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00a      	beq.n	8005342 <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	691b      	ldr	r3, [r3, #16]
 8005330:	f043 0208 	orr.w	r2, r3, #8
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2203      	movs	r2, #3
 800533c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e0ff      	b.n	8005542 <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005348:	4b80      	ldr	r3, [pc, #512]	; (800554c <HAL_DAC_ConfigChannel+0x278>)
 800534a:	4013      	ands	r3, r2
 800534c:	2b00      	cmp	r3, #0
 800534e:	d1df      	bne.n	8005310 <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 8005350:	2001      	movs	r0, #1
 8005352:	f7fe f857 	bl	8003404 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68ba      	ldr	r2, [r7, #8]
 800535c:	6992      	ldr	r2, [r2, #24]
 800535e:	641a      	str	r2, [r3, #64]	; 0x40
 8005360:	e023      	b.n	80053aa <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005362:	f7fe f843 	bl	80033ec <HAL_GetTick>
 8005366:	4602      	mov	r2, r0
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	2b01      	cmp	r3, #1
 800536e:	d90f      	bls.n	8005390 <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005376:	2b00      	cmp	r3, #0
 8005378:	da0a      	bge.n	8005390 <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	f043 0208 	orr.w	r2, r3, #8
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2203      	movs	r2, #3
 800538a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800538c:	2303      	movs	r3, #3
 800538e:	e0d8      	b.n	8005542 <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005396:	2b00      	cmp	r3, #0
 8005398:	dbe3      	blt.n	8005362 <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 800539a:	2001      	movs	r0, #1
 800539c:	f7fe f832 	bl	8003404 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68ba      	ldr	r2, [r7, #8]
 80053a6:	6992      	ldr	r2, [r2, #24]
 80053a8:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f003 0310 	and.w	r3, r3, #16
 80053b6:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80053ba:	fa01 f303 	lsl.w	r3, r1, r3
 80053be:	43db      	mvns	r3, r3
 80053c0:	ea02 0103 	and.w	r1, r2, r3
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	69da      	ldr	r2, [r3, #28]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f003 0310 	and.w	r3, r3, #16
 80053ce:	409a      	lsls	r2, r3
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	430a      	orrs	r2, r1
 80053d6:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f003 0310 	and.w	r3, r3, #16
 80053e4:	21ff      	movs	r1, #255	; 0xff
 80053e6:	fa01 f303 	lsl.w	r3, r1, r3
 80053ea:	43db      	mvns	r3, r3
 80053ec:	ea02 0103 	and.w	r1, r2, r3
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	6a1a      	ldr	r2, [r3, #32]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f003 0310 	and.w	r3, r3, #16
 80053fa:	409a      	lsls	r2, r3
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	430a      	orrs	r2, r1
 8005402:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	691b      	ldr	r3, [r3, #16]
 8005408:	2b01      	cmp	r3, #1
 800540a:	d11d      	bne.n	8005448 <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005412:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f003 0310 	and.w	r3, r3, #16
 800541a:	221f      	movs	r2, #31
 800541c:	fa02 f303 	lsl.w	r3, r2, r3
 8005420:	43db      	mvns	r3, r3
 8005422:	697a      	ldr	r2, [r7, #20]
 8005424:	4013      	ands	r3, r2
 8005426:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	695b      	ldr	r3, [r3, #20]
 800542c:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f003 0310 	and.w	r3, r3, #16
 8005434:	693a      	ldr	r2, [r7, #16]
 8005436:	fa02 f303 	lsl.w	r3, r2, r3
 800543a:	697a      	ldr	r2, [r7, #20]
 800543c:	4313      	orrs	r3, r2
 800543e:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	697a      	ldr	r2, [r7, #20]
 8005446:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800544e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f003 0310 	and.w	r3, r3, #16
 8005456:	2207      	movs	r2, #7
 8005458:	fa02 f303 	lsl.w	r3, r2, r3
 800545c:	43db      	mvns	r3, r3
 800545e:	697a      	ldr	r2, [r7, #20]
 8005460:	4013      	ands	r3, r2
 8005462:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	2b01      	cmp	r3, #1
 800546a:	d102      	bne.n	8005472 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
 800546c:	2300      	movs	r3, #0
 800546e:	61fb      	str	r3, [r7, #28]
 8005470:	e00f      	b.n	8005492 <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	2b02      	cmp	r3, #2
 8005478:	d102      	bne.n	8005480 <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800547a:	2301      	movs	r3, #1
 800547c:	61fb      	str	r3, [r7, #28]
 800547e:	e008      	b.n	8005492 <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d102      	bne.n	800548e <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005488:	2301      	movs	r3, #1
 800548a:	61fb      	str	r3, [r7, #28]
 800548c:	e001      	b.n	8005492 <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800548e:	2300      	movs	r3, #0
 8005490:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	4313      	orrs	r3, r2
 800549c:	69fa      	ldr	r2, [r7, #28]
 800549e:	4313      	orrs	r3, r2
 80054a0:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f003 0310 	and.w	r3, r3, #16
 80054a8:	693a      	ldr	r2, [r7, #16]
 80054aa:	fa02 f303 	lsl.w	r3, r2, r3
 80054ae:	697a      	ldr	r2, [r7, #20]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	697a      	ldr	r2, [r7, #20]
 80054ba:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	6819      	ldr	r1, [r3, #0]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f003 0310 	and.w	r3, r3, #16
 80054c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80054cc:	fa02 f303 	lsl.w	r3, r2, r3
 80054d0:	43da      	mvns	r2, r3
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	400a      	ands	r2, r1
 80054d8:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f003 0310 	and.w	r3, r3, #16
 80054e8:	f640 72fe 	movw	r2, #4094	; 0xffe
 80054ec:	fa02 f303 	lsl.w	r3, r2, r3
 80054f0:	43db      	mvns	r3, r3
 80054f2:	697a      	ldr	r2, [r7, #20]
 80054f4:	4013      	ands	r3, r2
 80054f6:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f003 0310 	and.w	r3, r3, #16
 8005504:	693a      	ldr	r2, [r7, #16]
 8005506:	fa02 f303 	lsl.w	r3, r2, r3
 800550a:	697a      	ldr	r2, [r7, #20]
 800550c:	4313      	orrs	r3, r2
 800550e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	697a      	ldr	r2, [r7, #20]
 8005516:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	6819      	ldr	r1, [r3, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f003 0310 	and.w	r3, r3, #16
 8005524:	22c0      	movs	r2, #192	; 0xc0
 8005526:	fa02 f303 	lsl.w	r3, r2, r3
 800552a:	43da      	mvns	r2, r3
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	400a      	ands	r2, r1
 8005532:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2201      	movs	r2, #1
 8005538:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	3720      	adds	r7, #32
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	20008000 	.word	0x20008000

08005550 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d101      	bne.n	8005562 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e0cf      	b.n	8005702 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005568:	2b00      	cmp	r3, #0
 800556a:	d106      	bne.n	800557a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2223      	movs	r2, #35	; 0x23
 8005570:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f009 f8db 	bl	800e730 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800557a:	4b64      	ldr	r3, [pc, #400]	; (800570c <HAL_ETH_Init+0x1bc>)
 800557c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005580:	4a62      	ldr	r2, [pc, #392]	; (800570c <HAL_ETH_Init+0x1bc>)
 8005582:	f043 0302 	orr.w	r3, r3, #2
 8005586:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800558a:	4b60      	ldr	r3, [pc, #384]	; (800570c <HAL_ETH_Init+0x1bc>)
 800558c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005590:	f003 0302 	and.w	r3, r3, #2
 8005594:	60bb      	str	r3, [r7, #8]
 8005596:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	7a1b      	ldrb	r3, [r3, #8]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d103      	bne.n	80055a8 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80055a0:	2000      	movs	r0, #0
 80055a2:	f7fd ff5f 	bl	8003464 <HAL_SYSCFG_ETHInterfaceSelect>
 80055a6:	e003      	b.n	80055b0 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80055a8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80055ac:	f7fd ff5a 	bl	8003464 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80055b0:	4b57      	ldr	r3, [pc, #348]	; (8005710 <HAL_ETH_Init+0x1c0>)
 80055b2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	6812      	ldr	r2, [r2, #0]
 80055c2:	f043 0301 	orr.w	r3, r3, #1
 80055c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80055ca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80055cc:	f7fd ff0e 	bl	80033ec <HAL_GetTick>
 80055d0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80055d2:	e011      	b.n	80055f8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80055d4:	f7fd ff0a 	bl	80033ec <HAL_GetTick>
 80055d8:	4602      	mov	r2, r0
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80055e2:	d909      	bls.n	80055f8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2204      	movs	r2, #4
 80055e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	22e0      	movs	r2, #224	; 0xe0
 80055f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e084      	b.n	8005702 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0301 	and.w	r3, r3, #1
 8005606:	2b00      	cmp	r3, #0
 8005608:	d1e4      	bne.n	80055d4 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 fcd4 	bl	8005fb8 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8005610:	f004 fba4 	bl	8009d5c <HAL_RCC_GetHCLKFreq>
 8005614:	4603      	mov	r3, r0
 8005616:	4a3f      	ldr	r2, [pc, #252]	; (8005714 <HAL_ETH_Init+0x1c4>)
 8005618:	fba2 2303 	umull	r2, r3, r2, r3
 800561c:	0c9a      	lsrs	r2, r3, #18
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	3a01      	subs	r2, #1
 8005624:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f000 febf 	bl	80063ac <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005636:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800563a:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	6812      	ldr	r2, [r2, #0]
 8005642:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005646:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800564a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	695b      	ldr	r3, [r3, #20]
 8005652:	f003 0303 	and.w	r3, r3, #3
 8005656:	2b00      	cmp	r3, #0
 8005658:	d009      	beq.n	800566e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2201      	movs	r2, #1
 800565e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	22e0      	movs	r2, #224	; 0xe0
 8005666:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e049      	b.n	8005702 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005676:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800567a:	4b27      	ldr	r3, [pc, #156]	; (8005718 <HAL_ETH_Init+0x1c8>)
 800567c:	4013      	ands	r3, r2
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	6952      	ldr	r2, [r2, #20]
 8005682:	0051      	lsls	r1, r2, #1
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	6812      	ldr	r2, [r2, #0]
 8005688:	430b      	orrs	r3, r1
 800568a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800568e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 ff27 	bl	80064e6 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f000 ff6d 	bl	8006578 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	3305      	adds	r3, #5
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	021a      	lsls	r2, r3, #8
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	3304      	adds	r3, #4
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	4619      	mov	r1, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	430a      	orrs	r2, r1
 80056b8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	3303      	adds	r3, #3
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	061a      	lsls	r2, r3, #24
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	3302      	adds	r3, #2
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	041b      	lsls	r3, r3, #16
 80056d0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	3301      	adds	r3, #1
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80056dc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80056ea:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80056ec:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2210      	movs	r2, #16
 80056fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005700:	2300      	movs	r3, #0
}
 8005702:	4618      	mov	r0, r3
 8005704:	3710      	adds	r7, #16
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	58024400 	.word	0x58024400
 8005710:	58000400 	.word	0x58000400
 8005714:	431bde83 	.word	0x431bde83
 8005718:	ffff8001 	.word	0xffff8001

0800571c <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b082      	sub	sp, #8
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800572a:	2b10      	cmp	r3, #16
 800572c:	d153      	bne.n	80057d6 <HAL_ETH_Start+0xba>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2223      	movs	r2, #35	; 0x23
 8005732:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2204      	movs	r2, #4
 800573a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 f936 	bl	80059ae <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f042 0202 	orr.w	r2, r2, #2
 8005750:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f042 0201 	orr.w	r2, r2, #1
 8005760:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f042 0201 	orr.w	r2, r2, #1
 8005772:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800577e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	6812      	ldr	r2, [r2, #0]
 8005786:	f043 0301 	orr.w	r3, r3, #1
 800578a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800578e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800579a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	6812      	ldr	r2, [r2, #0]
 80057a2:	f043 0301 	orr.w	r3, r3, #1
 80057a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80057aa:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057b6:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	6812      	ldr	r2, [r2, #0]
 80057be:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 80057c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80057c6:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160

    heth->gState = HAL_ETH_STATE_STARTED;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2223      	movs	r2, #35	; 0x23
 80057ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80057d2:	2300      	movs	r3, #0
 80057d4:	e000      	b.n	80057d8 <HAL_ETH_Start+0xbc>
  }
  else
  {
    return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
  }
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3708      	adds	r7, #8
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_STARTED)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057ee:	2b23      	cmp	r3, #35	; 0x23
 80057f0:	d13f      	bne.n	8005872 <HAL_ETH_Stop+0x92>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2223      	movs	r2, #35	; 0x23
 80057f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005802:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	6812      	ldr	r2, [r2, #0]
 800580a:	f023 0301 	bic.w	r3, r3, #1
 800580e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005812:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800581e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	6812      	ldr	r2, [r2, #0]
 8005826:	f023 0301 	bic.w	r3, r3, #1
 800582a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800582e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f022 0201 	bic.w	r2, r2, #1
 8005840:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f042 0201 	orr.w	r2, r2, #1
 8005852:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f022 0202 	bic.w	r2, r2, #2
 8005864:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2210      	movs	r2, #16
 800586a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 800586e:	2300      	movs	r3, #0
 8005870:	e000      	b.n	8005874 <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
  }
}
 8005874:	4618      	mov	r0, r3
 8005876:	370c      	adds	r7, #12
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b086      	sub	sp, #24
 8005884:	af00      	add	r7, sp, #0
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d109      	bne.n	80058a6 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005898:	f043 0201 	orr.w	r2, r3, #1
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e07f      	b.n	80059a6 <HAL_ETH_Transmit+0x126>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058ac:	2b23      	cmp	r3, #35	; 0x23
 80058ae:	d179      	bne.n	80059a4 <HAL_ETH_Transmit+0x124>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80058b0:	2200      	movs	r2, #0
 80058b2:	68b9      	ldr	r1, [r7, #8]
 80058b4:	68f8      	ldr	r0, [r7, #12]
 80058b6:	f000 febd 	bl	8006634 <ETH_Prepare_Tx_Descriptors>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d009      	beq.n	80058d4 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058c6:	f043 0202 	orr.w	r2, r3, #2
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e068      	b.n	80059a6 <HAL_ETH_Transmit+0x126>
  __ASM volatile ("dsb 0xF":::"memory");
 80058d4:	f3bf 8f4f 	dsb	sy
}
 80058d8:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	3206      	adds	r2, #6
 80058e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058e6:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ec:	1c5a      	adds	r2, r3, #1
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	629a      	str	r2, [r3, #40]	; 0x28
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f6:	2b03      	cmp	r3, #3
 80058f8:	d904      	bls.n	8005904 <HAL_ETH_Transmit+0x84>
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058fe:	1f1a      	subs	r2, r3, #4
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	3106      	adds	r1, #6
 8005910:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005914:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005918:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    tickstart = HAL_GetTick();
 800591c:	f7fd fd66 	bl	80033ec <HAL_GetTick>
 8005920:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8005922:	e039      	b.n	8005998 <HAL_ETH_Transmit+0x118>
    {
      if ((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800592c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8005930:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005934:	2b00      	cmp	r3, #0
 8005936:	d012      	beq.n	800595e <HAL_ETH_Transmit+0xde>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800593e:	f043 0208 	orr.w	r2, r3, #8
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005950:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e023      	b.n	80059a6 <HAL_ETH_Transmit+0x126>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005964:	d018      	beq.n	8005998 <HAL_ETH_Transmit+0x118>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005966:	f7fd fd41 	bl	80033ec <HAL_GetTick>
 800596a:	4602      	mov	r2, r0
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	429a      	cmp	r2, r3
 8005974:	d302      	bcc.n	800597c <HAL_ETH_Transmit+0xfc>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d10d      	bne.n	8005998 <HAL_ETH_Transmit+0x118>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005982:	f043 0204 	orr.w	r2, r3, #4
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC3 = (ETH_DMATXNDESCWBF_FD | ETH_DMATXNDESCWBF_LD);
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8005992:	60da      	str	r2, [r3, #12]
          return HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	e006      	b.n	80059a6 <HAL_ETH_Transmit+0x126>
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	2b00      	cmp	r3, #0
 800599e:	dbc1      	blt.n	8005924 <HAL_ETH_Transmit+0xa4>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80059a0:	2300      	movs	r3, #0
 80059a2:	e000      	b.n	80059a6 <HAL_ETH_Transmit+0x126>
  }
  else
  {
    return HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
  }
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3718      	adds	r7, #24
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}

080059ae <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80059ae:	b580      	push	{r7, lr}
 80059b0:	b088      	sub	sp, #32
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80059b6:	2300      	movs	r3, #0
 80059b8:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 80059ba:	2301      	movs	r3, #1
 80059bc:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059c2:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	69fa      	ldr	r2, [r7, #28]
 80059c8:	3212      	adds	r2, #18
 80059ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059ce:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059d4:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80059d6:	e03b      	b.n	8005a50 <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d112      	bne.n	8005a06 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80059e0:	f107 030c 	add.w	r3, r7, #12
 80059e4:	4618      	mov	r0, r3
 80059e6:	f009 f84b 	bl	800ea80 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d102      	bne.n	80059f6 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80059f0:	2300      	movs	r3, #0
 80059f2:	74fb      	strb	r3, [r7, #19]
 80059f4:	e007      	b.n	8005a06 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	461a      	mov	r2, r3
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	461a      	mov	r2, r3
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8005a06:	7cfb      	ldrb	r3, [r7, #19]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d021      	beq.n	8005a50 <ETH_UpdateDescriptor+0xa2>
  __ASM volatile ("dmb 0xF":::"memory");
 8005a0c:	f3bf 8f5f 	dmb	sy
}
 8005a10:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d004      	beq.n	8005a24 <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 8005a20:	60da      	str	r2, [r3, #12]
 8005a22:	e003      	b.n	8005a2c <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 8005a2a:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	3301      	adds	r3, #1
 8005a30:	61fb      	str	r3, [r7, #28]
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	2b03      	cmp	r3, #3
 8005a36:	d902      	bls.n	8005a3e <ETH_UpdateDescriptor+0x90>
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	3b04      	subs	r3, #4
 8005a3c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	69fa      	ldr	r2, [r7, #28]
 8005a42:	3212      	adds	r2, #18
 8005a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a48:	617b      	str	r3, [r7, #20]
      desccount--;
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	3b01      	subs	r3, #1
 8005a4e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d002      	beq.n	8005a5c <ETH_UpdateDescriptor+0xae>
 8005a56:	7cfb      	ldrb	r3, [r7, #19]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d1bd      	bne.n	80059d8 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a60:	69ba      	ldr	r2, [r7, #24]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d00d      	beq.n	8005a82 <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a6e:	461a      	mov	r2, r3
 8005a70:	2300      	movs	r3, #0
 8005a72:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	69fa      	ldr	r2, [r7, #28]
 8005a7a:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	69ba      	ldr	r2, [r7, #24]
 8005a80:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8005a82:	bf00      	nop
 8005a84:	3720      	adds	r7, #32
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}

08005a8a <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8005a8a:	b580      	push	{r7, lr}
 8005a8c:	b086      	sub	sp, #24
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	60f8      	str	r0, [r7, #12]
 8005a92:	60b9      	str	r1, [r7, #8]
 8005a94:	607a      	str	r2, [r7, #4]
 8005a96:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005aa0:	f003 0301 	and.w	r3, r3, #1
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d001      	beq.n	8005aac <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e03e      	b.n	8005b2a <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005ab4:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	055b      	lsls	r3, r3, #21
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	041b      	lsls	r3, r3, #16
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	f043 030c 	orr.w	r3, r3, #12
 8005ad8:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	f043 0301 	orr.w	r3, r3, #1
 8005ae0:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8005aec:	f7fd fc7e 	bl	80033ec <HAL_GetTick>
 8005af0:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8005af2:	e009      	b.n	8005b08 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8005af4:	f7fd fc7a 	bl	80033ec <HAL_GetTick>
 8005af8:	4602      	mov	r2, r0
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b02:	d901      	bls.n	8005b08 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	e010      	b.n	8005b2a <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005b10:	f003 0301 	and.w	r3, r3, #1
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d1ed      	bne.n	8005af4 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	461a      	mov	r2, r3
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3718      	adds	r7, #24
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
	...

08005b34 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b086      	sub	sp, #24
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	60b9      	str	r1, [r7, #8]
 8005b3e:	607a      	str	r2, [r7, #4]
 8005b40:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005b4a:	f003 0301 	and.w	r3, r3, #1
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d001      	beq.n	8005b56 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e03c      	b.n	8005bd0 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005b5e:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	055b      	lsls	r3, r3, #21
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	041b      	lsls	r3, r3, #16
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	f023 030c 	bic.w	r3, r3, #12
 8005b82:	f043 0304 	orr.w	r3, r3, #4
 8005b86:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	f043 0301 	orr.w	r3, r3, #1
 8005b8e:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	b29a      	uxth	r2, r3
 8005b94:	4b10      	ldr	r3, [pc, #64]	; (8005bd8 <HAL_ETH_WritePHYRegister+0xa4>)
 8005b96:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8005b9a:	4a0f      	ldr	r2, [pc, #60]	; (8005bd8 <HAL_ETH_WritePHYRegister+0xa4>)
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8005ba2:	f7fd fc23 	bl	80033ec <HAL_GetTick>
 8005ba6:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8005ba8:	e009      	b.n	8005bbe <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8005baa:	f7fd fc1f 	bl	80033ec <HAL_GetTick>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005bb8:	d901      	bls.n	8005bbe <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e008      	b.n	8005bd0 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005bc6:	f003 0301 	and.w	r3, r3, #1
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d1ed      	bne.n	8005baa <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8005bce:	2300      	movs	r3, #0
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3718      	adds	r7, #24
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	40028000 	.word	0x40028000

08005bdc <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d101      	bne.n	8005bf0 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e1c3      	b.n	8005f78 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 020c 	and.w	r2, r3, #12
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 0310 	and.w	r3, r3, #16
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	bf14      	ite	ne
 8005c0c:	2301      	movne	r3, #1
 8005c0e:	2300      	moveq	r3, #0
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	461a      	mov	r2, r3
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	bf0c      	ite	eq
 8005c36:	2301      	moveq	r3, #1
 8005c38:	2300      	movne	r3, #0
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	bf14      	ite	ne
 8005c52:	2301      	movne	r3, #1
 8005c54:	2300      	moveq	r3, #0
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	bf0c      	ite	eq
 8005c6c:	2301      	moveq	r3, #1
 8005c6e:	2300      	movne	r3, #0
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	461a      	mov	r2, r3
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8005c7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	bf14      	ite	ne
 8005c86:	2301      	movne	r3, #1
 8005c88:	2300      	moveq	r3, #0
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	bf14      	ite	ne
 8005ca0:	2301      	movne	r3, #1
 8005ca2:	2300      	moveq	r3, #0
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	bf14      	ite	ne
 8005cd6:	2301      	movne	r3, #1
 8005cd8:	2300      	moveq	r3, #0
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	461a      	mov	r2, r3
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	bf0c      	ite	eq
 8005cf0:	2301      	moveq	r3, #1
 8005cf2:	2300      	movne	r3, #0
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	bf0c      	ite	eq
 8005d0a:	2301      	moveq	r3, #1
 8005d0c:	2300      	movne	r3, #0
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	461a      	mov	r2, r3
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	bf14      	ite	ne
 8005d24:	2301      	movne	r3, #1
 8005d26:	2300      	moveq	r3, #0
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	bf14      	ite	ne
 8005d3e:	2301      	movne	r3, #1
 8005d40:	2300      	moveq	r3, #0
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	461a      	mov	r2, r3
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	bf14      	ite	ne
 8005d58:	2301      	movne	r3, #1
 8005d5a:	2300      	moveq	r3, #0
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	461a      	mov	r2, r3
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8005d6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	bf14      	ite	ne
 8005d72:	2301      	movne	r3, #1
 8005d74:	2300      	moveq	r3, #0
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	bf14      	ite	ne
 8005d9a:	2301      	movne	r3, #1
 8005d9c:	2300      	moveq	r3, #0
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	461a      	mov	r2, r3
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	bf0c      	ite	eq
 8005dd0:	2301      	moveq	r3, #1
 8005dd2:	2300      	movne	r3, #0
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	bf14      	ite	ne
 8005dec:	2301      	movne	r3, #1
 8005dee:	2300      	moveq	r3, #0
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	461a      	mov	r2, r3
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8005e00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	bf14      	ite	ne
 8005e08:	2301      	movne	r3, #1
 8005e0a:	2300      	moveq	r3, #0
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	bf14      	ite	ne
 8005e24:	2301      	movne	r3, #1
 8005e26:	2300      	moveq	r3, #0
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	0e5b      	lsrs	r3, r3, #25
 8005e3a:	f003 021f 	and.w	r2, r3, #31
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	68db      	ldr	r3, [r3, #12]
 8005e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	bf14      	ite	ne
 8005e50:	2301      	movne	r3, #1
 8005e52:	2300      	moveq	r3, #0
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	461a      	mov	r2, r3
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	f003 020f 	and.w	r2, r3, #15
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e72:	f003 0302 	and.w	r3, r3, #2
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	bf14      	ite	ne
 8005e7a:	2301      	movne	r3, #1
 8005e7c:	2300      	moveq	r3, #0
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	461a      	mov	r2, r3
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	bf0c      	ite	eq
 8005e96:	2301      	moveq	r3, #1
 8005e98:	2300      	movne	r3, #0
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eaa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eb8:	0c1b      	lsrs	r3, r3, #16
 8005eba:	b29a      	uxth	r2, r3
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ec8:	f003 0301 	and.w	r3, r3, #1
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	bf14      	ite	ne
 8005ed0:	2301      	movne	r3, #1
 8005ed2:	2300      	moveq	r3, #0
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ee6:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	bf14      	ite	ne
 8005eee:	2301      	movne	r3, #1
 8005ef0:	2300      	moveq	r3, #0
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8005f04:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8005f14:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8005f24:	f003 0308 	and.w	r3, r3, #8
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	bf14      	ite	ne
 8005f2c:	2301      	movne	r3, #1
 8005f2e:	2300      	moveq	r3, #0
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8005f42:	f003 0310 	and.w	r3, r3, #16
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	bf14      	ite	ne
 8005f4a:	2301      	movne	r3, #1
 8005f4c:	2300      	moveq	r3, #0
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	461a      	mov	r2, r3
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8005f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	bf0c      	ite	eq
 8005f68:	2301      	moveq	r3, #1
 8005f6a:	2300      	movne	r3, #0
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8005f76:	2300      	movs	r3, #0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	370c      	adds	r7, #12
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr

08005f84 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b082      	sub	sp, #8
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d101      	bne.n	8005f98 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	e00b      	b.n	8005fb0 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f9e:	2b10      	cmp	r3, #16
 8005fa0:	d105      	bne.n	8005fae <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8005fa2:	6839      	ldr	r1, [r7, #0]
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f000 f85f 	bl	8006068 <ETH_SetMACConfig>

    return HAL_OK;
 8005faa:	2300      	movs	r3, #0
 8005fac:	e000      	b.n	8005fb0 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
  }
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3708      	adds	r7, #8
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005fc8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005fd0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8005fd2:	f003 fec3 	bl	8009d5c <HAL_RCC_GetHCLKFreq>
 8005fd6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	4a1e      	ldr	r2, [pc, #120]	; (8006054 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d908      	bls.n	8005ff2 <HAL_ETH_SetMDIOClockRange+0x3a>
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	4a1d      	ldr	r2, [pc, #116]	; (8006058 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d804      	bhi.n	8005ff2 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005fee:	60fb      	str	r3, [r7, #12]
 8005ff0:	e027      	b.n	8006042 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	4a18      	ldr	r2, [pc, #96]	; (8006058 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d908      	bls.n	800600c <HAL_ETH_SetMDIOClockRange+0x54>
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	4a17      	ldr	r2, [pc, #92]	; (800605c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d204      	bcs.n	800600c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006008:	60fb      	str	r3, [r7, #12]
 800600a:	e01a      	b.n	8006042 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	4a13      	ldr	r2, [pc, #76]	; (800605c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d303      	bcc.n	800601c <HAL_ETH_SetMDIOClockRange+0x64>
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	4a12      	ldr	r2, [pc, #72]	; (8006060 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d911      	bls.n	8006040 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	4a10      	ldr	r2, [pc, #64]	; (8006060 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d908      	bls.n	8006036 <HAL_ETH_SetMDIOClockRange+0x7e>
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	4a0f      	ldr	r2, [pc, #60]	; (8006064 <HAL_ETH_SetMDIOClockRange+0xac>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d804      	bhi.n	8006036 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006032:	60fb      	str	r3, [r7, #12]
 8006034:	e005      	b.n	8006042 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800603c:	60fb      	str	r3, [r7, #12]
 800603e:	e000      	b.n	8006042 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8006040:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800604c:	bf00      	nop
 800604e:	3710      	adds	r7, #16
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}
 8006054:	01312cff 	.word	0x01312cff
 8006058:	02160ebf 	.word	0x02160ebf
 800605c:	03938700 	.word	0x03938700
 8006060:	05f5e0ff 	.word	0x05f5e0ff
 8006064:	08f0d17f 	.word	0x08f0d17f

08006068 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8006068:	b480      	push	{r7}
 800606a:	b085      	sub	sp, #20
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800607a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	791b      	ldrb	r3, [r3, #4]
 8006080:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8006082:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	7b1b      	ldrb	r3, [r3, #12]
 8006088:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800608a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	7b5b      	ldrb	r3, [r3, #13]
 8006090:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8006092:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	7b9b      	ldrb	r3, [r3, #14]
 8006098:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800609a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	7bdb      	ldrb	r3, [r3, #15]
 80060a0:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80060a2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80060a4:	683a      	ldr	r2, [r7, #0]
 80060a6:	7c12      	ldrb	r2, [r2, #16]
 80060a8:	2a00      	cmp	r2, #0
 80060aa:	d102      	bne.n	80060b2 <ETH_SetMACConfig+0x4a>
 80060ac:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80060b0:	e000      	b.n	80060b4 <ETH_SetMACConfig+0x4c>
 80060b2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80060b4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80060b6:	683a      	ldr	r2, [r7, #0]
 80060b8:	7c52      	ldrb	r2, [r2, #17]
 80060ba:	2a00      	cmp	r2, #0
 80060bc:	d102      	bne.n	80060c4 <ETH_SetMACConfig+0x5c>
 80060be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80060c2:	e000      	b.n	80060c6 <ETH_SetMACConfig+0x5e>
 80060c4:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80060c6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	7c9b      	ldrb	r3, [r3, #18]
 80060cc:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80060ce:	431a      	orrs	r2, r3
               macconf->Speed |
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80060d4:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80060da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	7f1b      	ldrb	r3, [r3, #28]
 80060e0:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80060e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	7f5b      	ldrb	r3, [r3, #29]
 80060e8:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80060ea:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80060ec:	683a      	ldr	r2, [r7, #0]
 80060ee:	7f92      	ldrb	r2, [r2, #30]
 80060f0:	2a00      	cmp	r2, #0
 80060f2:	d102      	bne.n	80060fa <ETH_SetMACConfig+0x92>
 80060f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80060f8:	e000      	b.n	80060fc <ETH_SetMACConfig+0x94>
 80060fa:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80060fc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	7fdb      	ldrb	r3, [r3, #31]
 8006102:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8006104:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8006106:	683a      	ldr	r2, [r7, #0]
 8006108:	f892 2020 	ldrb.w	r2, [r2, #32]
 800610c:	2a00      	cmp	r2, #0
 800610e:	d102      	bne.n	8006116 <ETH_SetMACConfig+0xae>
 8006110:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006114:	e000      	b.n	8006118 <ETH_SetMACConfig+0xb0>
 8006116:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8006118:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800611e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006126:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8006128:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800612e:	4313      	orrs	r3, r2
 8006130:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	4b56      	ldr	r3, [pc, #344]	; (8006294 <ETH_SetMACConfig+0x22c>)
 800613a:	4013      	ands	r3, r2
 800613c:	687a      	ldr	r2, [r7, #4]
 800613e:	6812      	ldr	r2, [r2, #0]
 8006140:	68f9      	ldr	r1, [r7, #12]
 8006142:	430b      	orrs	r3, r1
 8006144:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800614a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006152:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8006154:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800615c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800615e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006166:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8006168:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800616a:	683a      	ldr	r2, [r7, #0]
 800616c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8006170:	2a00      	cmp	r2, #0
 8006172:	d102      	bne.n	800617a <ETH_SetMACConfig+0x112>
 8006174:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006178:	e000      	b.n	800617c <ETH_SetMACConfig+0x114>
 800617a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800617c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8006182:	4313      	orrs	r3, r2
 8006184:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	685a      	ldr	r2, [r3, #4]
 800618c:	4b42      	ldr	r3, [pc, #264]	; (8006298 <ETH_SetMACConfig+0x230>)
 800618e:	4013      	ands	r3, r2
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	6812      	ldr	r2, [r2, #0]
 8006194:	68f9      	ldr	r1, [r7, #12]
 8006196:	430b      	orrs	r3, r1
 8006198:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061a0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80061a6:	4313      	orrs	r3, r2
 80061a8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	68da      	ldr	r2, [r3, #12]
 80061b0:	4b3a      	ldr	r3, [pc, #232]	; (800629c <ETH_SetMACConfig+0x234>)
 80061b2:	4013      	ands	r3, r2
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	6812      	ldr	r2, [r2, #0]
 80061b8:	68f9      	ldr	r1, [r7, #12]
 80061ba:	430b      	orrs	r3, r1
 80061bc:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80061c4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80061ca:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80061cc:	683a      	ldr	r2, [r7, #0]
 80061ce:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80061d2:	2a00      	cmp	r2, #0
 80061d4:	d101      	bne.n	80061da <ETH_SetMACConfig+0x172>
 80061d6:	2280      	movs	r2, #128	; 0x80
 80061d8:	e000      	b.n	80061dc <ETH_SetMACConfig+0x174>
 80061da:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80061dc:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061e2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80061e4:	4313      	orrs	r3, r2
 80061e6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80061ee:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80061f2:	4013      	ands	r3, r2
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	6812      	ldr	r2, [r2, #0]
 80061f8:	68f9      	ldr	r1, [r7, #12]
 80061fa:	430b      	orrs	r3, r1
 80061fc:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8006204:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800620c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800620e:	4313      	orrs	r3, r2
 8006210:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800621a:	f023 0103 	bic.w	r1, r3, #3
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	68fa      	ldr	r2, [r7, #12]
 8006224:	430a      	orrs	r2, r1
 8006226:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8006232:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	430a      	orrs	r2, r1
 8006240:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8006248:	683a      	ldr	r2, [r7, #0]
 800624a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800624e:	2a00      	cmp	r2, #0
 8006250:	d101      	bne.n	8006256 <ETH_SetMACConfig+0x1ee>
 8006252:	2240      	movs	r2, #64	; 0x40
 8006254:	e000      	b.n	8006258 <ETH_SetMACConfig+0x1f0>
 8006256:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8006258:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8006260:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8006262:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800626a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800626c:	4313      	orrs	r3, r2
 800626e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8006278:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	68fa      	ldr	r2, [r7, #12]
 8006282:	430a      	orrs	r2, r1
 8006284:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8006288:	bf00      	nop
 800628a:	3714      	adds	r7, #20
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr
 8006294:	00048083 	.word	0x00048083
 8006298:	c0f88000 	.word	0xc0f88000
 800629c:	fffffef0 	.word	0xfffffef0

080062a0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b085      	sub	sp, #20
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	4b38      	ldr	r3, [pc, #224]	; (8006398 <ETH_SetDMAConfig+0xf8>)
 80062b6:	4013      	ands	r3, r2
 80062b8:	683a      	ldr	r2, [r7, #0]
 80062ba:	6811      	ldr	r1, [r2, #0]
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	6812      	ldr	r2, [r2, #0]
 80062c0:	430b      	orrs	r3, r1
 80062c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80062c6:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	791b      	ldrb	r3, [r3, #4]
 80062cc:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80062d2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	7b1b      	ldrb	r3, [r3, #12]
 80062d8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80062da:	4313      	orrs	r3, r2
 80062dc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062e6:	685a      	ldr	r2, [r3, #4]
 80062e8:	4b2c      	ldr	r3, [pc, #176]	; (800639c <ETH_SetDMAConfig+0xfc>)
 80062ea:	4013      	ands	r3, r2
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	6812      	ldr	r2, [r2, #0]
 80062f0:	68f9      	ldr	r1, [r7, #12]
 80062f2:	430b      	orrs	r3, r1
 80062f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80062f8:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	7b5b      	ldrb	r3, [r3, #13]
 80062fe:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8006304:	4313      	orrs	r3, r2
 8006306:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006310:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8006314:	4b22      	ldr	r3, [pc, #136]	; (80063a0 <ETH_SetDMAConfig+0x100>)
 8006316:	4013      	ands	r3, r2
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	6812      	ldr	r2, [r2, #0]
 800631c:	68f9      	ldr	r1, [r7, #12]
 800631e:	430b      	orrs	r3, r1
 8006320:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006324:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	7d1b      	ldrb	r3, [r3, #20]
 8006330:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8006332:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	7f5b      	ldrb	r3, [r3, #29]
 8006338:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800633a:	4313      	orrs	r3, r2
 800633c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006346:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800634a:	4b16      	ldr	r3, [pc, #88]	; (80063a4 <ETH_SetDMAConfig+0x104>)
 800634c:	4013      	ands	r3, r2
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	6812      	ldr	r2, [r2, #0]
 8006352:	68f9      	ldr	r1, [r7, #12]
 8006354:	430b      	orrs	r3, r1
 8006356:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800635a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	7f1b      	ldrb	r3, [r3, #28]
 8006362:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8006368:	4313      	orrs	r3, r2
 800636a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006374:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8006378:	4b0b      	ldr	r3, [pc, #44]	; (80063a8 <ETH_SetDMAConfig+0x108>)
 800637a:	4013      	ands	r3, r2
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	6812      	ldr	r2, [r2, #0]
 8006380:	68f9      	ldr	r1, [r7, #12]
 8006382:	430b      	orrs	r3, r1
 8006384:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006388:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 800638c:	bf00      	nop
 800638e:	3714      	adds	r7, #20
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr
 8006398:	ffff87fd 	.word	0xffff87fd
 800639c:	ffff2ffe 	.word	0xffff2ffe
 80063a0:	fffec000 	.word	0xfffec000
 80063a4:	ffc0efef 	.word	0xffc0efef
 80063a8:	7fc0ffff 	.word	0x7fc0ffff

080063ac <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b0a4      	sub	sp, #144	; 0x90
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80063b4:	2301      	movs	r3, #1
 80063b6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80063ba:	2300      	movs	r3, #0
 80063bc:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80063be:	2300      	movs	r3, #0
 80063c0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80063c4:	2300      	movs	r3, #0
 80063c6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80063ca:	2301      	movs	r3, #1
 80063cc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80063d0:	2301      	movs	r3, #1
 80063d2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80063d6:	2301      	movs	r3, #1
 80063d8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80063dc:	2300      	movs	r3, #0
 80063de:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80063e2:	2301      	movs	r3, #1
 80063e4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80063e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80063ec:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80063ee:	2300      	movs	r3, #0
 80063f0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80063f4:	2300      	movs	r3, #0
 80063f6:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80063f8:	2300      	movs	r3, #0
 80063fa:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80063fe:	2300      	movs	r3, #0
 8006400:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8006404:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8006408:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800640a:	2300      	movs	r3, #0
 800640c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8006410:	2300      	movs	r3, #0
 8006412:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8006414:	2301      	movs	r3, #1
 8006416:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800641a:	2300      	movs	r3, #0
 800641c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8006420:	2300      	movs	r3, #0
 8006422:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8006426:	2300      	movs	r3, #0
 8006428:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800642a:	2300      	movs	r3, #0
 800642c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800642e:	2300      	movs	r3, #0
 8006430:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8006432:	2300      	movs	r3, #0
 8006434:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8006438:	2300      	movs	r3, #0
 800643a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800643e:	2301      	movs	r3, #1
 8006440:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8006444:	2320      	movs	r3, #32
 8006446:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800644a:	2301      	movs	r3, #1
 800644c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8006450:	2300      	movs	r3, #0
 8006452:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8006456:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800645a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800645c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006460:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8006462:	2300      	movs	r3, #0
 8006464:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8006468:	2302      	movs	r3, #2
 800646a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800646e:	2300      	movs	r3, #0
 8006470:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8006474:	2300      	movs	r3, #0
 8006476:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800647a:	2300      	movs	r3, #0
 800647c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8006480:	2301      	movs	r3, #1
 8006482:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8006486:	2300      	movs	r3, #0
 8006488:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800648a:	2301      	movs	r3, #1
 800648c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8006490:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006494:	4619      	mov	r1, r3
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f7ff fde6 	bl	8006068 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800649c:	2301      	movs	r3, #1
 800649e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80064a0:	2301      	movs	r3, #1
 80064a2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80064a4:	2300      	movs	r3, #0
 80064a6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80064a8:	2300      	movs	r3, #0
 80064aa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80064ae:	2300      	movs	r3, #0
 80064b0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80064b2:	2300      	movs	r3, #0
 80064b4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80064b6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80064ba:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80064bc:	2300      	movs	r3, #0
 80064be:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80064c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80064c4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80064c6:	2300      	movs	r3, #0
 80064c8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80064cc:	f44f 7306 	mov.w	r3, #536	; 0x218
 80064d0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80064d2:	f107 0308 	add.w	r3, r7, #8
 80064d6:	4619      	mov	r1, r3
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f7ff fee1 	bl	80062a0 <ETH_SetDMAConfig>
}
 80064de:	bf00      	nop
 80064e0:	3790      	adds	r7, #144	; 0x90
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}

080064e6 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80064e6:	b480      	push	{r7}
 80064e8:	b085      	sub	sp, #20
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80064ee:	2300      	movs	r3, #0
 80064f0:	60fb      	str	r3, [r7, #12]
 80064f2:	e01d      	b.n	8006530 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	68d9      	ldr	r1, [r3, #12]
 80064f8:	68fa      	ldr	r2, [r7, #12]
 80064fa:	4613      	mov	r3, r2
 80064fc:	005b      	lsls	r3, r3, #1
 80064fe:	4413      	add	r3, r2
 8006500:	00db      	lsls	r3, r3, #3
 8006502:	440b      	add	r3, r1
 8006504:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	2200      	movs	r2, #0
 800650a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	2200      	movs	r2, #0
 8006510:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	2200      	movs	r2, #0
 8006516:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	2200      	movs	r2, #0
 800651c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800651e:	68b9      	ldr	r1, [r7, #8]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	3206      	adds	r2, #6
 8006526:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	3301      	adds	r3, #1
 800652e:	60fb      	str	r3, [r7, #12]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2b03      	cmp	r3, #3
 8006534:	d9de      	bls.n	80064f4 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006544:	461a      	mov	r2, r3
 8006546:	2303      	movs	r3, #3
 8006548:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	68da      	ldr	r2, [r3, #12]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006558:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	68da      	ldr	r2, [r3, #12]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006568:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 800656c:	bf00      	nop
 800656e:	3714      	adds	r7, #20
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr

08006578 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8006578:	b480      	push	{r7}
 800657a:	b085      	sub	sp, #20
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006580:	2300      	movs	r3, #0
 8006582:	60fb      	str	r3, [r7, #12]
 8006584:	e023      	b.n	80065ce <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6919      	ldr	r1, [r3, #16]
 800658a:	68fa      	ldr	r2, [r7, #12]
 800658c:	4613      	mov	r3, r2
 800658e:	005b      	lsls	r3, r3, #1
 8006590:	4413      	add	r3, r2
 8006592:	00db      	lsls	r3, r3, #3
 8006594:	440b      	add	r3, r1
 8006596:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	2200      	movs	r2, #0
 800659c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	2200      	movs	r2, #0
 80065a2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	2200      	movs	r2, #0
 80065a8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	2200      	movs	r2, #0
 80065ae:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	2200      	movs	r2, #0
 80065b4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	2200      	movs	r2, #0
 80065ba:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80065bc:	68b9      	ldr	r1, [r7, #8]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	68fa      	ldr	r2, [r7, #12]
 80065c2:	3212      	adds	r2, #18
 80065c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	3301      	adds	r3, #1
 80065cc:	60fb      	str	r3, [r7, #12]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2b03      	cmp	r3, #3
 80065d2:	d9d8      	bls.n	8006586 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2200      	movs	r2, #0
 80065d8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065fa:	461a      	mov	r2, r3
 80065fc:	2303      	movs	r3, #3
 80065fe:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	691a      	ldr	r2, [r3, #16]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800660e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006622:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8006626:	bf00      	nop
 8006628:	3714      	adds	r7, #20
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr
	...

08006634 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8006634:	b480      	push	{r7}
 8006636:	b08d      	sub	sp, #52	; 0x34
 8006638:	af00      	add	r7, sp, #0
 800663a:	60f8      	str	r0, [r7, #12]
 800663c:	60b9      	str	r1, [r7, #8]
 800663e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	3318      	adds	r3, #24
 8006644:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	691b      	ldr	r3, [r3, #16]
 8006650:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8006652:	2300      	movs	r3, #0
 8006654:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800665a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800665e:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8006666:	2300      	movs	r3, #0
 8006668:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800666a:	6a3b      	ldr	r3, [r7, #32]
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006672:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006676:	d007      	beq.n	8006688 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8006678:	697a      	ldr	r2, [r7, #20]
 800667a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800667c:	3304      	adds	r3, #4
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	4413      	add	r3, r2
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d001      	beq.n	800668c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8006688:	2302      	movs	r3, #2
 800668a:	e259      	b.n	8006b40 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f003 0304 	and.w	r3, r3, #4
 8006694:	2b00      	cmp	r3, #0
 8006696:	d044      	beq.n	8006722 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8006698:	6a3b      	ldr	r3, [r7, #32]
 800669a:	68da      	ldr	r2, [r3, #12]
 800669c:	4b75      	ldr	r3, [pc, #468]	; (8006874 <ETH_Prepare_Tx_Descriptors+0x240>)
 800669e:	4013      	ands	r3, r2
 80066a0:	68ba      	ldr	r2, [r7, #8]
 80066a2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80066a4:	431a      	orrs	r2, r3
 80066a6:	6a3b      	ldr	r3, [r7, #32]
 80066a8:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 80066aa:	6a3b      	ldr	r3, [r7, #32]
 80066ac:	68db      	ldr	r3, [r3, #12]
 80066ae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80066b2:	6a3b      	ldr	r3, [r7, #32]
 80066b4:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80066c4:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f003 0308 	and.w	r3, r3, #8
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d027      	beq.n	8006722 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 80066d2:	6a3b      	ldr	r3, [r7, #32]
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	b29a      	uxth	r2, r3
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066dc:	041b      	lsls	r3, r3, #16
 80066de:	431a      	orrs	r2, r3
 80066e0:	6a3b      	ldr	r3, [r7, #32]
 80066e2:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 80066e4:	6a3b      	ldr	r3, [r7, #32]
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80066ec:	6a3b      	ldr	r3, [r7, #32]
 80066ee:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 80066f0:	6a3b      	ldr	r3, [r7, #32]
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066fc:	431a      	orrs	r2, r3
 80066fe:	6a3b      	ldr	r3, [r7, #32]
 8006700:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006710:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006720:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 0310 	and.w	r3, r3, #16
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00e      	beq.n	800674c <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 800672e:	6a3b      	ldr	r3, [r7, #32]
 8006730:	689a      	ldr	r2, [r3, #8]
 8006732:	4b51      	ldr	r3, [pc, #324]	; (8006878 <ETH_Prepare_Tx_Descriptors+0x244>)
 8006734:	4013      	ands	r3, r2
 8006736:	68ba      	ldr	r2, [r7, #8]
 8006738:	6992      	ldr	r2, [r2, #24]
 800673a:	431a      	orrs	r2, r3
 800673c:	6a3b      	ldr	r3, [r7, #32]
 800673e:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8006740:	6a3b      	ldr	r3, [r7, #32]
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006748:	6a3b      	ldr	r3, [r7, #32]
 800674a:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f003 0304 	and.w	r3, r3, #4
 8006754:	2b00      	cmp	r3, #0
 8006756:	d105      	bne.n	8006764 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f003 0310 	and.w	r3, r3, #16
 8006760:	2b00      	cmp	r3, #0
 8006762:	d036      	beq.n	80067d2 <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8006764:	6a3b      	ldr	r3, [r7, #32]
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800676c:	6a3b      	ldr	r3, [r7, #32]
 800676e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8006770:	f3bf 8f5f 	dmb	sy
}
 8006774:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8006776:	6a3b      	ldr	r3, [r7, #32]
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800677e:	6a3b      	ldr	r3, [r7, #32]
 8006780:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8006782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006784:	3301      	adds	r3, #1
 8006786:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800678a:	2b03      	cmp	r3, #3
 800678c:	d902      	bls.n	8006794 <ETH_Prepare_Tx_Descriptors+0x160>
 800678e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006790:	3b04      	subs	r3, #4
 8006792:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800679c:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 800679e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a0:	3301      	adds	r3, #1
 80067a2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80067a4:	6a3b      	ldr	r3, [r7, #32]
 80067a6:	68db      	ldr	r3, [r3, #12]
 80067a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067b0:	d10f      	bne.n	80067d2 <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	693a      	ldr	r2, [r7, #16]
 80067b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ba:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 80067bc:	f3bf 8f5f 	dmb	sy
}
 80067c0:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80067c2:	6a3b      	ldr	r3, [r7, #32]
 80067c4:	68db      	ldr	r3, [r3, #12]
 80067c6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80067ca:	6a3b      	ldr	r3, [r7, #32]
 80067cc:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 80067ce:	2302      	movs	r3, #2
 80067d0:	e1b6      	b.n	8006b40 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 80067d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d4:	3301      	adds	r3, #1
 80067d6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	461a      	mov	r2, r3
 80067de:	6a3b      	ldr	r3, [r7, #32]
 80067e0:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80067e2:	6a3b      	ldr	r3, [r7, #32]
 80067e4:	689a      	ldr	r2, [r3, #8]
 80067e6:	4b24      	ldr	r3, [pc, #144]	; (8006878 <ETH_Prepare_Tx_Descriptors+0x244>)
 80067e8:	4013      	ands	r3, r2
 80067ea:	69fa      	ldr	r2, [r7, #28]
 80067ec:	6852      	ldr	r2, [r2, #4]
 80067ee:	431a      	orrs	r2, r3
 80067f0:	6a3b      	ldr	r3, [r7, #32]
 80067f2:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 80067f4:	69fb      	ldr	r3, [r7, #28]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d012      	beq.n	8006822 <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	461a      	mov	r2, r3
 8006808:	6a3b      	ldr	r3, [r7, #32]
 800680a:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 800680c:	6a3b      	ldr	r3, [r7, #32]
 800680e:	689a      	ldr	r2, [r3, #8]
 8006810:	4b1a      	ldr	r3, [pc, #104]	; (800687c <ETH_Prepare_Tx_Descriptors+0x248>)
 8006812:	4013      	ands	r3, r2
 8006814:	69fa      	ldr	r2, [r7, #28]
 8006816:	6852      	ldr	r2, [r2, #4]
 8006818:	0412      	lsls	r2, r2, #16
 800681a:	431a      	orrs	r2, r3
 800681c:	6a3b      	ldr	r3, [r7, #32]
 800681e:	609a      	str	r2, [r3, #8]
 8006820:	e008      	b.n	8006834 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8006822:	6a3b      	ldr	r3, [r7, #32]
 8006824:	2200      	movs	r2, #0
 8006826:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8006828:	6a3b      	ldr	r3, [r7, #32]
 800682a:	689a      	ldr	r2, [r3, #8]
 800682c:	4b13      	ldr	r3, [pc, #76]	; (800687c <ETH_Prepare_Tx_Descriptors+0x248>)
 800682e:	4013      	ands	r3, r2
 8006830:	6a3a      	ldr	r2, [r7, #32]
 8006832:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f003 0310 	and.w	r3, r3, #16
 800683c:	2b00      	cmp	r3, #0
 800683e:	d021      	beq.n	8006884 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8006840:	6a3b      	ldr	r3, [r7, #32]
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	6a1b      	ldr	r3, [r3, #32]
 800684c:	04db      	lsls	r3, r3, #19
 800684e:	431a      	orrs	r2, r3
 8006850:	6a3b      	ldr	r3, [r7, #32]
 8006852:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8006854:	6a3b      	ldr	r3, [r7, #32]
 8006856:	68da      	ldr	r2, [r3, #12]
 8006858:	4b09      	ldr	r3, [pc, #36]	; (8006880 <ETH_Prepare_Tx_Descriptors+0x24c>)
 800685a:	4013      	ands	r3, r2
 800685c:	68ba      	ldr	r2, [r7, #8]
 800685e:	69d2      	ldr	r2, [r2, #28]
 8006860:	431a      	orrs	r2, r3
 8006862:	6a3b      	ldr	r3, [r7, #32]
 8006864:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8006866:	6a3b      	ldr	r3, [r7, #32]
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800686e:	6a3b      	ldr	r3, [r7, #32]
 8006870:	60da      	str	r2, [r3, #12]
 8006872:	e02e      	b.n	80068d2 <ETH_Prepare_Tx_Descriptors+0x29e>
 8006874:	ffff0000 	.word	0xffff0000
 8006878:	ffffc000 	.word	0xffffc000
 800687c:	c000ffff 	.word	0xc000ffff
 8006880:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8006884:	6a3b      	ldr	r3, [r7, #32]
 8006886:	68da      	ldr	r2, [r3, #12]
 8006888:	4b7b      	ldr	r3, [pc, #492]	; (8006a78 <ETH_Prepare_Tx_Descriptors+0x444>)
 800688a:	4013      	ands	r3, r2
 800688c:	68ba      	ldr	r2, [r7, #8]
 800688e:	6852      	ldr	r2, [r2, #4]
 8006890:	431a      	orrs	r2, r3
 8006892:	6a3b      	ldr	r3, [r7, #32]
 8006894:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 0301 	and.w	r3, r3, #1
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d008      	beq.n	80068b4 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80068a2:	6a3b      	ldr	r3, [r7, #32]
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	695b      	ldr	r3, [r3, #20]
 80068ae:	431a      	orrs	r2, r3
 80068b0:	6a3b      	ldr	r3, [r7, #32]
 80068b2:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f003 0320 	and.w	r3, r3, #32
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d008      	beq.n	80068d2 <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 80068c0:	6a3b      	ldr	r3, [r7, #32]
 80068c2:	68db      	ldr	r3, [r3, #12]
 80068c4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	691b      	ldr	r3, [r3, #16]
 80068cc:	431a      	orrs	r2, r3
 80068ce:	6a3b      	ldr	r3, [r7, #32]
 80068d0:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 0304 	and.w	r3, r3, #4
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d008      	beq.n	80068f0 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 80068de:	6a3b      	ldr	r3, [r7, #32]
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ea:	431a      	orrs	r2, r3
 80068ec:	6a3b      	ldr	r3, [r7, #32]
 80068ee:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80068f0:	6a3b      	ldr	r3, [r7, #32]
 80068f2:	68db      	ldr	r3, [r3, #12]
 80068f4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80068f8:	6a3b      	ldr	r3, [r7, #32]
 80068fa:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80068fc:	6a3b      	ldr	r3, [r7, #32]
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006904:	6a3b      	ldr	r3, [r7, #32]
 8006906:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8006908:	f3bf 8f5f 	dmb	sy
}
 800690c:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800690e:	6a3b      	ldr	r3, [r7, #32]
 8006910:	68db      	ldr	r3, [r3, #12]
 8006912:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006916:	6a3b      	ldr	r3, [r7, #32]
 8006918:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f003 0302 	and.w	r3, r3, #2
 8006922:	2b00      	cmp	r3, #0
 8006924:	f000 80da 	beq.w	8006adc <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8006928:	6a3b      	ldr	r3, [r7, #32]
 800692a:	68db      	ldr	r3, [r3, #12]
 800692c:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	431a      	orrs	r2, r3
 8006936:	6a3b      	ldr	r3, [r7, #32]
 8006938:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800693a:	e0cf      	b.n	8006adc <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800693c:	6a3b      	ldr	r3, [r7, #32]
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006944:	6a3b      	ldr	r3, [r7, #32]
 8006946:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8006948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800694a:	3301      	adds	r3, #1
 800694c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800694e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006950:	2b03      	cmp	r3, #3
 8006952:	d902      	bls.n	800695a <ETH_Prepare_Tx_Descriptors+0x326>
 8006954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006956:	3b04      	subs	r3, #4
 8006958:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800695e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006962:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8006964:	6a3b      	ldr	r3, [r7, #32]
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800696c:	6a3b      	ldr	r3, [r7, #32]
 800696e:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8006970:	6a3b      	ldr	r3, [r7, #32]
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006978:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800697c:	d007      	beq.n	800698e <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800697e:	697a      	ldr	r2, [r7, #20]
 8006980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006982:	3304      	adds	r3, #4
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	4413      	add	r3, r2
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d029      	beq.n	80069e2 <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006996:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800699a:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800699c:	2300      	movs	r3, #0
 800699e:	62bb      	str	r3, [r7, #40]	; 0x28
 80069a0:	e019      	b.n	80069d6 <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 80069a2:	f3bf 8f5f 	dmb	sy
}
 80069a6:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80069a8:	6a3b      	ldr	r3, [r7, #32]
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80069b0:	6a3b      	ldr	r3, [r7, #32]
 80069b2:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80069b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b6:	3301      	adds	r3, #1
 80069b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069bc:	2b03      	cmp	r3, #3
 80069be:	d902      	bls.n	80069c6 <ETH_Prepare_Tx_Descriptors+0x392>
 80069c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c2:	3b04      	subs	r3, #4
 80069c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069ce:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 80069d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d2:	3301      	adds	r3, #1
 80069d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80069d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069da:	429a      	cmp	r2, r3
 80069dc:	d3e1      	bcc.n	80069a2 <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 80069de:	2302      	movs	r3, #2
 80069e0:	e0ae      	b.n	8006b40 <ETH_Prepare_Tx_Descriptors+0x50c>
    }

    descnbr += 1U;
 80069e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e4:	3301      	adds	r3, #1
 80069e6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80069e8:	69fb      	ldr	r3, [r7, #28]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80069ee:	69fb      	ldr	r3, [r7, #28]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	461a      	mov	r2, r3
 80069f4:	6a3b      	ldr	r3, [r7, #32]
 80069f6:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80069f8:	6a3b      	ldr	r3, [r7, #32]
 80069fa:	689a      	ldr	r2, [r3, #8]
 80069fc:	4b1f      	ldr	r3, [pc, #124]	; (8006a7c <ETH_Prepare_Tx_Descriptors+0x448>)
 80069fe:	4013      	ands	r3, r2
 8006a00:	69fa      	ldr	r2, [r7, #28]
 8006a02:	6852      	ldr	r2, [r2, #4]
 8006a04:	431a      	orrs	r2, r3
 8006a06:	6a3b      	ldr	r3, [r7, #32]
 8006a08:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8006a0a:	69fb      	ldr	r3, [r7, #28]
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d012      	beq.n	8006a38 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8006a18:	69fb      	ldr	r3, [r7, #28]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	6a3b      	ldr	r3, [r7, #32]
 8006a20:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8006a22:	6a3b      	ldr	r3, [r7, #32]
 8006a24:	689a      	ldr	r2, [r3, #8]
 8006a26:	4b16      	ldr	r3, [pc, #88]	; (8006a80 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8006a28:	4013      	ands	r3, r2
 8006a2a:	69fa      	ldr	r2, [r7, #28]
 8006a2c:	6852      	ldr	r2, [r2, #4]
 8006a2e:	0412      	lsls	r2, r2, #16
 8006a30:	431a      	orrs	r2, r3
 8006a32:	6a3b      	ldr	r3, [r7, #32]
 8006a34:	609a      	str	r2, [r3, #8]
 8006a36:	e008      	b.n	8006a4a <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8006a38:	6a3b      	ldr	r3, [r7, #32]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8006a3e:	6a3b      	ldr	r3, [r7, #32]
 8006a40:	689a      	ldr	r2, [r3, #8]
 8006a42:	4b0f      	ldr	r3, [pc, #60]	; (8006a80 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8006a44:	4013      	ands	r3, r2
 8006a46:	6a3a      	ldr	r2, [r7, #32]
 8006a48:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f003 0310 	and.w	r3, r3, #16
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d018      	beq.n	8006a88 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8006a56:	6a3b      	ldr	r3, [r7, #32]
 8006a58:	68da      	ldr	r2, [r3, #12]
 8006a5a:	4b0a      	ldr	r3, [pc, #40]	; (8006a84 <ETH_Prepare_Tx_Descriptors+0x450>)
 8006a5c:	4013      	ands	r3, r2
 8006a5e:	68ba      	ldr	r2, [r7, #8]
 8006a60:	69d2      	ldr	r2, [r2, #28]
 8006a62:	431a      	orrs	r2, r3
 8006a64:	6a3b      	ldr	r3, [r7, #32]
 8006a66:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8006a68:	6a3b      	ldr	r3, [r7, #32]
 8006a6a:	68db      	ldr	r3, [r3, #12]
 8006a6c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006a70:	6a3b      	ldr	r3, [r7, #32]
 8006a72:	60da      	str	r2, [r3, #12]
 8006a74:	e020      	b.n	8006ab8 <ETH_Prepare_Tx_Descriptors+0x484>
 8006a76:	bf00      	nop
 8006a78:	ffff8000 	.word	0xffff8000
 8006a7c:	ffffc000 	.word	0xffffc000
 8006a80:	c000ffff 	.word	0xc000ffff
 8006a84:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8006a88:	6a3b      	ldr	r3, [r7, #32]
 8006a8a:	68da      	ldr	r2, [r3, #12]
 8006a8c:	4b2f      	ldr	r3, [pc, #188]	; (8006b4c <ETH_Prepare_Tx_Descriptors+0x518>)
 8006a8e:	4013      	ands	r3, r2
 8006a90:	68ba      	ldr	r2, [r7, #8]
 8006a92:	6852      	ldr	r2, [r2, #4]
 8006a94:	431a      	orrs	r2, r3
 8006a96:	6a3b      	ldr	r3, [r7, #32]
 8006a98:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f003 0301 	and.w	r3, r3, #1
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d008      	beq.n	8006ab8 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8006aa6:	6a3b      	ldr	r3, [r7, #32]
 8006aa8:	68db      	ldr	r3, [r3, #12]
 8006aaa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	695b      	ldr	r3, [r3, #20]
 8006ab2:	431a      	orrs	r2, r3
 8006ab4:	6a3b      	ldr	r3, [r7, #32]
 8006ab6:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8006ab8:	69bb      	ldr	r3, [r7, #24]
 8006aba:	3301      	adds	r3, #1
 8006abc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8006abe:	f3bf 8f5f 	dmb	sy
}
 8006ac2:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8006ac4:	6a3b      	ldr	r3, [r7, #32]
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006acc:	6a3b      	ldr	r3, [r7, #32]
 8006ace:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8006ad0:	6a3b      	ldr	r3, [r7, #32]
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006ad8:	6a3b      	ldr	r3, [r7, #32]
 8006ada:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	f47f af2b 	bne.w	800693c <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d006      	beq.n	8006afa <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8006aec:	6a3b      	ldr	r3, [r7, #32]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006af4:	6a3b      	ldr	r3, [r7, #32]
 8006af6:	609a      	str	r2, [r3, #8]
 8006af8:	e005      	b.n	8006b06 <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8006afa:	6a3b      	ldr	r3, [r7, #32]
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006b02:	6a3b      	ldr	r3, [r7, #32]
 8006b04:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8006b06:	6a3b      	ldr	r3, [r7, #32]
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006b0e:	6a3b      	ldr	r3, [r7, #32]
 8006b10:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b16:	6979      	ldr	r1, [r7, #20]
 8006b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b1a:	3304      	adds	r3, #4
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	440b      	add	r3, r1
 8006b20:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b26:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8006b28:	b672      	cpsid	i
}
 8006b2a:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	4413      	add	r3, r2
 8006b34:	1c5a      	adds	r2, r3, #1
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8006b3a:	b662      	cpsie	i
}
 8006b3c:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8006b3e:	2300      	movs	r3, #0
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3734      	adds	r7, #52	; 0x34
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr
 8006b4c:	ffff8000 	.word	0xffff8000

08006b50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b089      	sub	sp, #36	; 0x24
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006b5e:	4b89      	ldr	r3, [pc, #548]	; (8006d84 <HAL_GPIO_Init+0x234>)
 8006b60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006b62:	e194      	b.n	8006e8e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	2101      	movs	r1, #1
 8006b6a:	69fb      	ldr	r3, [r7, #28]
 8006b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8006b70:	4013      	ands	r3, r2
 8006b72:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	f000 8186 	beq.w	8006e88 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	f003 0303 	and.w	r3, r3, #3
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d005      	beq.n	8006b94 <HAL_GPIO_Init+0x44>
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	f003 0303 	and.w	r3, r3, #3
 8006b90:	2b02      	cmp	r3, #2
 8006b92:	d130      	bne.n	8006bf6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	005b      	lsls	r3, r3, #1
 8006b9e:	2203      	movs	r2, #3
 8006ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba4:	43db      	mvns	r3, r3
 8006ba6:	69ba      	ldr	r2, [r7, #24]
 8006ba8:	4013      	ands	r3, r2
 8006baa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	68da      	ldr	r2, [r3, #12]
 8006bb0:	69fb      	ldr	r3, [r7, #28]
 8006bb2:	005b      	lsls	r3, r3, #1
 8006bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8006bb8:	69ba      	ldr	r2, [r7, #24]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	69ba      	ldr	r2, [r7, #24]
 8006bc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006bca:	2201      	movs	r2, #1
 8006bcc:	69fb      	ldr	r3, [r7, #28]
 8006bce:	fa02 f303 	lsl.w	r3, r2, r3
 8006bd2:	43db      	mvns	r3, r3
 8006bd4:	69ba      	ldr	r2, [r7, #24]
 8006bd6:	4013      	ands	r3, r2
 8006bd8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	091b      	lsrs	r3, r3, #4
 8006be0:	f003 0201 	and.w	r2, r3, #1
 8006be4:	69fb      	ldr	r3, [r7, #28]
 8006be6:	fa02 f303 	lsl.w	r3, r2, r3
 8006bea:	69ba      	ldr	r2, [r7, #24]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	69ba      	ldr	r2, [r7, #24]
 8006bf4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	f003 0303 	and.w	r3, r3, #3
 8006bfe:	2b03      	cmp	r3, #3
 8006c00:	d017      	beq.n	8006c32 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006c08:	69fb      	ldr	r3, [r7, #28]
 8006c0a:	005b      	lsls	r3, r3, #1
 8006c0c:	2203      	movs	r2, #3
 8006c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c12:	43db      	mvns	r3, r3
 8006c14:	69ba      	ldr	r2, [r7, #24]
 8006c16:	4013      	ands	r3, r2
 8006c18:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	689a      	ldr	r2, [r3, #8]
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	005b      	lsls	r3, r3, #1
 8006c22:	fa02 f303 	lsl.w	r3, r2, r3
 8006c26:	69ba      	ldr	r2, [r7, #24]
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	69ba      	ldr	r2, [r7, #24]
 8006c30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	f003 0303 	and.w	r3, r3, #3
 8006c3a:	2b02      	cmp	r3, #2
 8006c3c:	d123      	bne.n	8006c86 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006c3e:	69fb      	ldr	r3, [r7, #28]
 8006c40:	08da      	lsrs	r2, r3, #3
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	3208      	adds	r2, #8
 8006c46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006c4c:	69fb      	ldr	r3, [r7, #28]
 8006c4e:	f003 0307 	and.w	r3, r3, #7
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	220f      	movs	r2, #15
 8006c56:	fa02 f303 	lsl.w	r3, r2, r3
 8006c5a:	43db      	mvns	r3, r3
 8006c5c:	69ba      	ldr	r2, [r7, #24]
 8006c5e:	4013      	ands	r3, r2
 8006c60:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	691a      	ldr	r2, [r3, #16]
 8006c66:	69fb      	ldr	r3, [r7, #28]
 8006c68:	f003 0307 	and.w	r3, r3, #7
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c72:	69ba      	ldr	r2, [r7, #24]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006c78:	69fb      	ldr	r3, [r7, #28]
 8006c7a:	08da      	lsrs	r2, r3, #3
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	3208      	adds	r2, #8
 8006c80:	69b9      	ldr	r1, [r7, #24]
 8006c82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006c8c:	69fb      	ldr	r3, [r7, #28]
 8006c8e:	005b      	lsls	r3, r3, #1
 8006c90:	2203      	movs	r2, #3
 8006c92:	fa02 f303 	lsl.w	r3, r2, r3
 8006c96:	43db      	mvns	r3, r3
 8006c98:	69ba      	ldr	r2, [r7, #24]
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	f003 0203 	and.w	r2, r3, #3
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	005b      	lsls	r3, r3, #1
 8006caa:	fa02 f303 	lsl.w	r3, r2, r3
 8006cae:	69ba      	ldr	r2, [r7, #24]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	69ba      	ldr	r2, [r7, #24]
 8006cb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	f000 80e0 	beq.w	8006e88 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006cc8:	4b2f      	ldr	r3, [pc, #188]	; (8006d88 <HAL_GPIO_Init+0x238>)
 8006cca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006cce:	4a2e      	ldr	r2, [pc, #184]	; (8006d88 <HAL_GPIO_Init+0x238>)
 8006cd0:	f043 0302 	orr.w	r3, r3, #2
 8006cd4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006cd8:	4b2b      	ldr	r3, [pc, #172]	; (8006d88 <HAL_GPIO_Init+0x238>)
 8006cda:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006cde:	f003 0302 	and.w	r3, r3, #2
 8006ce2:	60fb      	str	r3, [r7, #12]
 8006ce4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006ce6:	4a29      	ldr	r2, [pc, #164]	; (8006d8c <HAL_GPIO_Init+0x23c>)
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	089b      	lsrs	r3, r3, #2
 8006cec:	3302      	adds	r3, #2
 8006cee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006cf4:	69fb      	ldr	r3, [r7, #28]
 8006cf6:	f003 0303 	and.w	r3, r3, #3
 8006cfa:	009b      	lsls	r3, r3, #2
 8006cfc:	220f      	movs	r2, #15
 8006cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8006d02:	43db      	mvns	r3, r3
 8006d04:	69ba      	ldr	r2, [r7, #24]
 8006d06:	4013      	ands	r3, r2
 8006d08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a20      	ldr	r2, [pc, #128]	; (8006d90 <HAL_GPIO_Init+0x240>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d052      	beq.n	8006db8 <HAL_GPIO_Init+0x268>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4a1f      	ldr	r2, [pc, #124]	; (8006d94 <HAL_GPIO_Init+0x244>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d031      	beq.n	8006d7e <HAL_GPIO_Init+0x22e>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4a1e      	ldr	r2, [pc, #120]	; (8006d98 <HAL_GPIO_Init+0x248>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d02b      	beq.n	8006d7a <HAL_GPIO_Init+0x22a>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	4a1d      	ldr	r2, [pc, #116]	; (8006d9c <HAL_GPIO_Init+0x24c>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d025      	beq.n	8006d76 <HAL_GPIO_Init+0x226>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4a1c      	ldr	r2, [pc, #112]	; (8006da0 <HAL_GPIO_Init+0x250>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d01f      	beq.n	8006d72 <HAL_GPIO_Init+0x222>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	4a1b      	ldr	r2, [pc, #108]	; (8006da4 <HAL_GPIO_Init+0x254>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d019      	beq.n	8006d6e <HAL_GPIO_Init+0x21e>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	4a1a      	ldr	r2, [pc, #104]	; (8006da8 <HAL_GPIO_Init+0x258>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d013      	beq.n	8006d6a <HAL_GPIO_Init+0x21a>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	4a19      	ldr	r2, [pc, #100]	; (8006dac <HAL_GPIO_Init+0x25c>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d00d      	beq.n	8006d66 <HAL_GPIO_Init+0x216>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4a18      	ldr	r2, [pc, #96]	; (8006db0 <HAL_GPIO_Init+0x260>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d007      	beq.n	8006d62 <HAL_GPIO_Init+0x212>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	4a17      	ldr	r2, [pc, #92]	; (8006db4 <HAL_GPIO_Init+0x264>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d101      	bne.n	8006d5e <HAL_GPIO_Init+0x20e>
 8006d5a:	2309      	movs	r3, #9
 8006d5c:	e02d      	b.n	8006dba <HAL_GPIO_Init+0x26a>
 8006d5e:	230a      	movs	r3, #10
 8006d60:	e02b      	b.n	8006dba <HAL_GPIO_Init+0x26a>
 8006d62:	2308      	movs	r3, #8
 8006d64:	e029      	b.n	8006dba <HAL_GPIO_Init+0x26a>
 8006d66:	2307      	movs	r3, #7
 8006d68:	e027      	b.n	8006dba <HAL_GPIO_Init+0x26a>
 8006d6a:	2306      	movs	r3, #6
 8006d6c:	e025      	b.n	8006dba <HAL_GPIO_Init+0x26a>
 8006d6e:	2305      	movs	r3, #5
 8006d70:	e023      	b.n	8006dba <HAL_GPIO_Init+0x26a>
 8006d72:	2304      	movs	r3, #4
 8006d74:	e021      	b.n	8006dba <HAL_GPIO_Init+0x26a>
 8006d76:	2303      	movs	r3, #3
 8006d78:	e01f      	b.n	8006dba <HAL_GPIO_Init+0x26a>
 8006d7a:	2302      	movs	r3, #2
 8006d7c:	e01d      	b.n	8006dba <HAL_GPIO_Init+0x26a>
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e01b      	b.n	8006dba <HAL_GPIO_Init+0x26a>
 8006d82:	bf00      	nop
 8006d84:	58000080 	.word	0x58000080
 8006d88:	58024400 	.word	0x58024400
 8006d8c:	58000400 	.word	0x58000400
 8006d90:	58020000 	.word	0x58020000
 8006d94:	58020400 	.word	0x58020400
 8006d98:	58020800 	.word	0x58020800
 8006d9c:	58020c00 	.word	0x58020c00
 8006da0:	58021000 	.word	0x58021000
 8006da4:	58021400 	.word	0x58021400
 8006da8:	58021800 	.word	0x58021800
 8006dac:	58021c00 	.word	0x58021c00
 8006db0:	58022000 	.word	0x58022000
 8006db4:	58022400 	.word	0x58022400
 8006db8:	2300      	movs	r3, #0
 8006dba:	69fa      	ldr	r2, [r7, #28]
 8006dbc:	f002 0203 	and.w	r2, r2, #3
 8006dc0:	0092      	lsls	r2, r2, #2
 8006dc2:	4093      	lsls	r3, r2
 8006dc4:	69ba      	ldr	r2, [r7, #24]
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006dca:	4938      	ldr	r1, [pc, #224]	; (8006eac <HAL_GPIO_Init+0x35c>)
 8006dcc:	69fb      	ldr	r3, [r7, #28]
 8006dce:	089b      	lsrs	r3, r3, #2
 8006dd0:	3302      	adds	r3, #2
 8006dd2:	69ba      	ldr	r2, [r7, #24]
 8006dd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006dd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	43db      	mvns	r3, r3
 8006de4:	69ba      	ldr	r2, [r7, #24]
 8006de6:	4013      	ands	r3, r2
 8006de8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d003      	beq.n	8006dfe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006df6:	69ba      	ldr	r2, [r7, #24]
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006dfe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e02:	69bb      	ldr	r3, [r7, #24]
 8006e04:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006e06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	43db      	mvns	r3, r3
 8006e12:	69ba      	ldr	r2, [r7, #24]
 8006e14:	4013      	ands	r3, r2
 8006e16:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d003      	beq.n	8006e2c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006e24:	69ba      	ldr	r2, [r7, #24]
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006e2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e30:	69bb      	ldr	r3, [r7, #24]
 8006e32:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	43db      	mvns	r3, r3
 8006e3e:	69ba      	ldr	r2, [r7, #24]
 8006e40:	4013      	ands	r3, r2
 8006e42:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d003      	beq.n	8006e58 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006e50:	69ba      	ldr	r2, [r7, #24]
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	4313      	orrs	r3, r2
 8006e56:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	69ba      	ldr	r2, [r7, #24]
 8006e5c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	43db      	mvns	r3, r3
 8006e68:	69ba      	ldr	r2, [r7, #24]
 8006e6a:	4013      	ands	r3, r2
 8006e6c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d003      	beq.n	8006e82 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006e7a:	69ba      	ldr	r2, [r7, #24]
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	69ba      	ldr	r2, [r7, #24]
 8006e86:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006e88:	69fb      	ldr	r3, [r7, #28]
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	69fb      	ldr	r3, [r7, #28]
 8006e94:	fa22 f303 	lsr.w	r3, r2, r3
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	f47f ae63 	bne.w	8006b64 <HAL_GPIO_Init+0x14>
  }
}
 8006e9e:	bf00      	nop
 8006ea0:	bf00      	nop
 8006ea2:	3724      	adds	r7, #36	; 0x24
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr
 8006eac:	58000400 	.word	0x58000400

08006eb0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b085      	sub	sp, #20
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	460b      	mov	r3, r1
 8006eba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	691a      	ldr	r2, [r3, #16]
 8006ec0:	887b      	ldrh	r3, [r7, #2]
 8006ec2:	4013      	ands	r3, r2
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d002      	beq.n	8006ece <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	73fb      	strb	r3, [r7, #15]
 8006ecc:	e001      	b.n	8006ed2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3714      	adds	r7, #20
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	460b      	mov	r3, r1
 8006eea:	807b      	strh	r3, [r7, #2]
 8006eec:	4613      	mov	r3, r2
 8006eee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006ef0:	787b      	ldrb	r3, [r7, #1]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d003      	beq.n	8006efe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006ef6:	887a      	ldrh	r2, [r7, #2]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006efc:	e003      	b.n	8006f06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006efe:	887b      	ldrh	r3, [r7, #2]
 8006f00:	041a      	lsls	r2, r3, #16
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	619a      	str	r2, [r3, #24]
}
 8006f06:	bf00      	nop
 8006f08:	370c      	adds	r7, #12
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr

08006f12 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006f12:	b480      	push	{r7}
 8006f14:	b085      	sub	sp, #20
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
 8006f1a:	460b      	mov	r3, r1
 8006f1c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	695b      	ldr	r3, [r3, #20]
 8006f22:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006f24:	887a      	ldrh	r2, [r7, #2]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	4013      	ands	r3, r2
 8006f2a:	041a      	lsls	r2, r3, #16
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	43d9      	mvns	r1, r3
 8006f30:	887b      	ldrh	r3, [r7, #2]
 8006f32:	400b      	ands	r3, r1
 8006f34:	431a      	orrs	r2, r3
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	619a      	str	r2, [r3, #24]
}
 8006f3a:	bf00      	nop
 8006f3c:	3714      	adds	r7, #20
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr

08006f46 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006f46:	b580      	push	{r7, lr}
 8006f48:	b082      	sub	sp, #8
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8006f50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f54:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006f58:	88fb      	ldrh	r3, [r7, #6]
 8006f5a:	4013      	ands	r3, r2
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d008      	beq.n	8006f72 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006f60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f64:	88fb      	ldrh	r3, [r7, #6]
 8006f66:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006f6a:	88fb      	ldrh	r3, [r7, #6]
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f000 f804 	bl	8006f7a <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8006f72:	bf00      	nop
 8006f74:	3708      	adds	r7, #8
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}

08006f7a <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006f7a:	b480      	push	{r7}
 8006f7c:	b083      	sub	sp, #12
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	4603      	mov	r3, r0
 8006f82:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006f84:	bf00      	nop
 8006f86:	370c      	adds	r7, #12
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b086      	sub	sp, #24
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d101      	bne.n	8006fa2 <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	e0bd      	b.n	800711e <HAL_HRTIM_Init+0x18e>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2202      	movs	r2, #2
 8006fa6:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	f003 0301 	and.w	r3, r3, #1
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d031      	beq.n	800704a <HAL_HRTIM_Init+0xba>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a4f      	ldr	r2, [pc, #316]	; (8007128 <HAL_HRTIM_Init+0x198>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d10e      	bne.n	800700e <HAL_HRTIM_Init+0x7e>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8006ff0:	4b4e      	ldr	r3, [pc, #312]	; (800712c <HAL_HRTIM_Init+0x19c>)
 8006ff2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006ff6:	4a4d      	ldr	r2, [pc, #308]	; (800712c <HAL_HRTIM_Init+0x19c>)
 8006ff8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ffc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007000:	4b4a      	ldr	r3, [pc, #296]	; (800712c <HAL_HRTIM_Init+0x19c>)
 8007002:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007006:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800700a:	60fb      	str	r3, [r7, #12]
 800700c:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800701c:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	691b      	ldr	r3, [r3, #16]
 8007022:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007026:	693a      	ldr	r2, [r7, #16]
 8007028:	4313      	orrs	r3, r2
 800702a:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007032:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	695b      	ldr	r3, [r3, #20]
 8007038:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800703c:	693a      	ldr	r2, [r7, #16]
 800703e:	4313      	orrs	r3, r2
 8007040:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	693a      	ldr	r2, [r7, #16]
 8007048:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f7fb fbb4 	bl	80027b8 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	689b      	ldr	r3, [r3, #8]
 8007054:	f003 0302 	and.w	r3, r3, #2
 8007058:	2b00      	cmp	r3, #0
 800705a:	d012      	beq.n	8007082 <HAL_HRTIM_Init+0xf2>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800706a:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007074:	693a      	ldr	r2, [r7, #16]
 8007076:	4313      	orrs	r3, r2
 8007078:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	693a      	ldr	r2, [r7, #16]
 8007080:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2201      	movs	r2, #1
 8007086:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2200      	movs	r2, #0
 800708e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8007092:	2300      	movs	r3, #0
 8007094:	75fb      	strb	r3, [r7, #23]
 8007096:	e03e      	b.n	8007116 <HAL_HRTIM_Init+0x186>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8007098:	7dfa      	ldrb	r2, [r7, #23]
 800709a:	6879      	ldr	r1, [r7, #4]
 800709c:	4613      	mov	r3, r2
 800709e:	00db      	lsls	r3, r3, #3
 80070a0:	1a9b      	subs	r3, r3, r2
 80070a2:	009b      	lsls	r3, r3, #2
 80070a4:	440b      	add	r3, r1
 80070a6:	3318      	adds	r3, #24
 80070a8:	2200      	movs	r2, #0
 80070aa:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 80070ac:	7dfa      	ldrb	r2, [r7, #23]
 80070ae:	6879      	ldr	r1, [r7, #4]
 80070b0:	4613      	mov	r3, r2
 80070b2:	00db      	lsls	r3, r3, #3
 80070b4:	1a9b      	subs	r3, r3, r2
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	440b      	add	r3, r1
 80070ba:	331c      	adds	r3, #28
 80070bc:	2200      	movs	r2, #0
 80070be:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 80070c0:	7dfa      	ldrb	r2, [r7, #23]
 80070c2:	6879      	ldr	r1, [r7, #4]
 80070c4:	4613      	mov	r3, r2
 80070c6:	00db      	lsls	r3, r3, #3
 80070c8:	1a9b      	subs	r3, r3, r2
 80070ca:	009b      	lsls	r3, r3, #2
 80070cc:	440b      	add	r3, r1
 80070ce:	3320      	adds	r3, #32
 80070d0:	2200      	movs	r2, #0
 80070d2:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 80070d4:	7dfa      	ldrb	r2, [r7, #23]
 80070d6:	6879      	ldr	r1, [r7, #4]
 80070d8:	4613      	mov	r3, r2
 80070da:	00db      	lsls	r3, r3, #3
 80070dc:	1a9b      	subs	r3, r3, r2
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	440b      	add	r3, r1
 80070e2:	3324      	adds	r3, #36	; 0x24
 80070e4:	2200      	movs	r2, #0
 80070e6:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 80070e8:	7dfa      	ldrb	r2, [r7, #23]
 80070ea:	6879      	ldr	r1, [r7, #4]
 80070ec:	4613      	mov	r3, r2
 80070ee:	00db      	lsls	r3, r3, #3
 80070f0:	1a9b      	subs	r3, r3, r2
 80070f2:	009b      	lsls	r3, r3, #2
 80070f4:	440b      	add	r3, r1
 80070f6:	3328      	adds	r3, #40	; 0x28
 80070f8:	2200      	movs	r2, #0
 80070fa:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 80070fc:	7dfa      	ldrb	r2, [r7, #23]
 80070fe:	6879      	ldr	r1, [r7, #4]
 8007100:	4613      	mov	r3, r2
 8007102:	00db      	lsls	r3, r3, #3
 8007104:	1a9b      	subs	r3, r3, r2
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	440b      	add	r3, r1
 800710a:	3330      	adds	r3, #48	; 0x30
 800710c:	2200      	movs	r2, #0
 800710e:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8007110:	7dfb      	ldrb	r3, [r7, #23]
 8007112:	3301      	adds	r3, #1
 8007114:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 8007116:	7dfb      	ldrb	r3, [r7, #23]
 8007118:	2b05      	cmp	r3, #5
 800711a:	d9bd      	bls.n	8007098 <HAL_HRTIM_Init+0x108>
  }

  return HAL_OK;
 800711c:	2300      	movs	r3, #0
}
 800711e:	4618      	mov	r0, r3
 8007120:	3718      	adds	r7, #24
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	40017400 	.word	0x40017400
 800712c:	58024400 	.word	0x58024400

08007130 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	60f8      	str	r0, [r7, #12]
 8007138:	60b9      	str	r1, [r7, #8]
 800713a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8007142:	b2db      	uxtb	r3, r3
 8007144:	2b02      	cmp	r3, #2
 8007146:	d101      	bne.n	800714c <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8007148:	2302      	movs	r3, #2
 800714a:	e015      	b.n	8007178 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2202      	movs	r2, #2
 8007150:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	2b05      	cmp	r3, #5
 8007158:	d104      	bne.n	8007164 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 800715a:	6879      	ldr	r1, [r7, #4]
 800715c:	68f8      	ldr	r0, [r7, #12]
 800715e:	f000 fc4d 	bl	80079fc <HRTIM_MasterBase_Config>
 8007162:	e004      	b.n	800716e <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	68b9      	ldr	r1, [r7, #8]
 8007168:	68f8      	ldr	r0, [r7, #12]
 800716a:	f000 fc76 	bl	8007a5a <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2201      	movs	r2, #1
 8007172:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  return HAL_OK;
 8007176:	2300      	movs	r3, #0
}
 8007178:	4618      	mov	r0, r3
 800717a:	3710      	adds	r7, #16
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}

08007180 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b084      	sub	sp, #16
 8007184:	af00      	add	r7, sp, #0
 8007186:	60f8      	str	r0, [r7, #12]
 8007188:	60b9      	str	r1, [r7, #8]
 800718a:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8007192:	b2db      	uxtb	r3, r3
 8007194:	2b02      	cmp	r3, #2
 8007196:	d101      	bne.n	800719c <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 8007198:	2302      	movs	r3, #2
 800719a:	e05f      	b.n	800725c <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	d101      	bne.n	80071aa <HAL_HRTIM_WaveformTimerConfig+0x2a>
 80071a6:	2302      	movs	r3, #2
 80071a8:	e058      	b.n	800725c <HAL_HRTIM_WaveformTimerConfig+0xdc>
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2201      	movs	r2, #1
 80071ae:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2202      	movs	r2, #2
 80071b6:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	2b05      	cmp	r3, #5
 80071be:	d104      	bne.n	80071ca <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 80071c0:	6879      	ldr	r1, [r7, #4]
 80071c2:	68f8      	ldr	r0, [r7, #12]
 80071c4:	f000 fc89 	bl	8007ada <HRTIM_MasterWaveform_Config>
 80071c8:	e004      	b.n	80071d4 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	68b9      	ldr	r1, [r7, #8]
 80071ce:	68f8      	ldr	r0, [r7, #12]
 80071d0:	f000 fcea 	bl	8007ba8 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6819      	ldr	r1, [r3, #0]
 80071d8:	68f8      	ldr	r0, [r7, #12]
 80071da:	68ba      	ldr	r2, [r7, #8]
 80071dc:	4613      	mov	r3, r2
 80071de:	00db      	lsls	r3, r3, #3
 80071e0:	1a9b      	subs	r3, r3, r2
 80071e2:	009b      	lsls	r3, r3, #2
 80071e4:	4403      	add	r3, r0
 80071e6:	3320      	adds	r3, #32
 80071e8:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6859      	ldr	r1, [r3, #4]
 80071ee:	68f8      	ldr	r0, [r7, #12]
 80071f0:	68ba      	ldr	r2, [r7, #8]
 80071f2:	4613      	mov	r3, r2
 80071f4:	00db      	lsls	r3, r3, #3
 80071f6:	1a9b      	subs	r3, r3, r2
 80071f8:	009b      	lsls	r3, r3, #2
 80071fa:	4403      	add	r3, r0
 80071fc:	3324      	adds	r3, #36	; 0x24
 80071fe:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6899      	ldr	r1, [r3, #8]
 8007204:	68f8      	ldr	r0, [r7, #12]
 8007206:	68ba      	ldr	r2, [r7, #8]
 8007208:	4613      	mov	r3, r2
 800720a:	00db      	lsls	r3, r3, #3
 800720c:	1a9b      	subs	r3, r3, r2
 800720e:	009b      	lsls	r3, r3, #2
 8007210:	4403      	add	r3, r0
 8007212:	3328      	adds	r3, #40	; 0x28
 8007214:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	68d9      	ldr	r1, [r3, #12]
 800721a:	68f8      	ldr	r0, [r7, #12]
 800721c:	68ba      	ldr	r2, [r7, #8]
 800721e:	4613      	mov	r3, r2
 8007220:	00db      	lsls	r3, r3, #3
 8007222:	1a9b      	subs	r3, r3, r2
 8007224:	009b      	lsls	r3, r3, #2
 8007226:	4403      	add	r3, r0
 8007228:	332c      	adds	r3, #44	; 0x2c
 800722a:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6919      	ldr	r1, [r3, #16]
 8007230:	68f8      	ldr	r0, [r7, #12]
 8007232:	68ba      	ldr	r2, [r7, #8]
 8007234:	4613      	mov	r3, r2
 8007236:	00db      	lsls	r3, r3, #3
 8007238:	1a9b      	subs	r3, r3, r2
 800723a:	009b      	lsls	r3, r3, #2
 800723c:	4403      	add	r3, r0
 800723e:	3330      	adds	r3, #48	; 0x30
 8007240:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8007242:	68b9      	ldr	r1, [r7, #8]
 8007244:	68f8      	ldr	r0, [r7, #12]
 8007246:	f000 fec7 	bl	8007fd8 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2201      	movs	r2, #1
 800724e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2200      	movs	r2, #0
 8007256:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 800725a:	2300      	movs	r3, #0
}
 800725c:	4618      	mov	r0, r3
 800725e:	3710      	adds	r7, #16
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  const HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 8007264:	b480      	push	{r7}
 8007266:	b085      	sub	sp, #20
 8007268:	af00      	add	r7, sp, #0
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	60b9      	str	r1, [r7, #8]
 800726e:	607a      	str	r2, [r7, #4]
 8007270:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8007278:	b2db      	uxtb	r3, r3
 800727a:	2b02      	cmp	r3, #2
 800727c:	d101      	bne.n	8007282 <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 800727e:	2302      	movs	r3, #2
 8007280:	e157      	b.n	8007532 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8007288:	2b01      	cmp	r3, #1
 800728a:	d101      	bne.n	8007290 <HAL_HRTIM_WaveformCompareConfig+0x2c>
 800728c:	2302      	movs	r3, #2
 800728e:	e150      	b.n	8007532 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2201      	movs	r2, #1
 8007294:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2202      	movs	r2, #2
 800729c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	2b05      	cmp	r3, #5
 80072a4:	d140      	bne.n	8007328 <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	3b01      	subs	r3, #1
 80072aa:	2b07      	cmp	r3, #7
 80072ac:	d82a      	bhi.n	8007304 <HAL_HRTIM_WaveformCompareConfig+0xa0>
 80072ae:	a201      	add	r2, pc, #4	; (adr r2, 80072b4 <HAL_HRTIM_WaveformCompareConfig+0x50>)
 80072b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072b4:	080072d5 	.word	0x080072d5
 80072b8:	080072e1 	.word	0x080072e1
 80072bc:	08007305 	.word	0x08007305
 80072c0:	080072ed 	.word	0x080072ed
 80072c4:	08007305 	.word	0x08007305
 80072c8:	08007305 	.word	0x08007305
 80072cc:	08007305 	.word	0x08007305
 80072d0:	080072f9 	.word	0x080072f9
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	683a      	ldr	r2, [r7, #0]
 80072da:	6812      	ldr	r2, [r2, #0]
 80072dc:	61da      	str	r2, [r3, #28]
        break;
 80072de:	e01a      	b.n	8007316 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	683a      	ldr	r2, [r7, #0]
 80072e6:	6812      	ldr	r2, [r2, #0]
 80072e8:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 80072ea:	e014      	b.n	8007316 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	683a      	ldr	r2, [r7, #0]
 80072f2:	6812      	ldr	r2, [r2, #0]
 80072f4:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 80072f6:	e00e      	b.n	8007316 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	683a      	ldr	r2, [r7, #0]
 80072fe:	6812      	ldr	r2, [r2, #0]
 8007300:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 8007302:	e008      	b.n	8007316 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2207      	movs	r2, #7
 8007308:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2200      	movs	r2, #0
 8007310:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

        break;
 8007314:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800731c:	b2db      	uxtb	r3, r3
 800731e:	2b07      	cmp	r3, #7
 8007320:	f040 80fe 	bne.w	8007520 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 8007324:	2301      	movs	r3, #1
 8007326:	e104      	b.n	8007532 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	3b01      	subs	r3, #1
 800732c:	2b07      	cmp	r3, #7
 800732e:	f200 80e3 	bhi.w	80074f8 <HAL_HRTIM_WaveformCompareConfig+0x294>
 8007332:	a201      	add	r2, pc, #4	; (adr r2, 8007338 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 8007334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007338:	08007359 	.word	0x08007359
 800733c:	0800736d 	.word	0x0800736d
 8007340:	080074f9 	.word	0x080074f9
 8007344:	08007429 	.word	0x08007429
 8007348:	080074f9 	.word	0x080074f9
 800734c:	080074f9 	.word	0x080074f9
 8007350:	080074f9 	.word	0x080074f9
 8007354:	0800743d 	.word	0x0800743d
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	6819      	ldr	r1, [r3, #0]
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	681a      	ldr	r2, [r3, #0]
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	01db      	lsls	r3, r3, #7
 8007364:	440b      	add	r3, r1
 8007366:	339c      	adds	r3, #156	; 0x9c
 8007368:	601a      	str	r2, [r3, #0]
        break;
 800736a:	e0d1      	b.n	8007510 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	6819      	ldr	r1, [r3, #0]
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	681a      	ldr	r2, [r3, #0]
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	01db      	lsls	r3, r3, #7
 8007378:	440b      	add	r3, r1
 800737a:	33a4      	adds	r3, #164	; 0xa4
 800737c:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d03f      	beq.n	8007406 <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	3301      	adds	r3, #1
 800738e:	01db      	lsls	r3, r3, #7
 8007390:	4413      	add	r3, r2
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	68fa      	ldr	r2, [r7, #12]
 8007396:	6811      	ldr	r1, [r2, #0]
 8007398:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	3301      	adds	r3, #1
 80073a0:	01db      	lsls	r3, r3, #7
 80073a2:	440b      	add	r3, r1
 80073a4:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	3301      	adds	r3, #1
 80073ae:	01db      	lsls	r3, r3, #7
 80073b0:	4413      	add	r3, r2
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	68f9      	ldr	r1, [r7, #12]
 80073ba:	6809      	ldr	r1, [r1, #0]
 80073bc:	431a      	orrs	r2, r3
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	3301      	adds	r3, #1
 80073c2:	01db      	lsls	r3, r3, #7
 80073c4:	440b      	add	r3, r1
 80073c6:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073d0:	d109      	bne.n	80073e6 <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	6819      	ldr	r1, [r3, #0]
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	689a      	ldr	r2, [r3, #8]
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	01db      	lsls	r3, r3, #7
 80073de:	440b      	add	r3, r1
 80073e0:	339c      	adds	r3, #156	; 0x9c
 80073e2:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 80073e4:	e091      	b.n	800750a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80073ee:	f040 808c 	bne.w	800750a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	6819      	ldr	r1, [r3, #0]
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	689a      	ldr	r2, [r3, #8]
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	01db      	lsls	r3, r3, #7
 80073fe:	440b      	add	r3, r1
 8007400:	33a8      	adds	r3, #168	; 0xa8
 8007402:	601a      	str	r2, [r3, #0]
         break;
 8007404:	e081      	b.n	800750a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	3301      	adds	r3, #1
 800740e:	01db      	lsls	r3, r3, #7
 8007410:	4413      	add	r3, r2
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	68fa      	ldr	r2, [r7, #12]
 8007416:	6811      	ldr	r1, [r2, #0]
 8007418:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	3301      	adds	r3, #1
 8007420:	01db      	lsls	r3, r3, #7
 8007422:	440b      	add	r3, r1
 8007424:	601a      	str	r2, [r3, #0]
         break;
 8007426:	e070      	b.n	800750a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	6819      	ldr	r1, [r3, #0]
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	01db      	lsls	r3, r3, #7
 8007434:	440b      	add	r3, r1
 8007436:	33a8      	adds	r3, #168	; 0xa8
 8007438:	601a      	str	r2, [r3, #0]
        break;
 800743a:	e069      	b.n	8007510 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	6819      	ldr	r1, [r3, #0]
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	681a      	ldr	r2, [r3, #0]
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	01db      	lsls	r3, r3, #7
 8007448:	440b      	add	r3, r1
 800744a:	33ac      	adds	r3, #172	; 0xac
 800744c:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d03f      	beq.n	80074d6 <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	3301      	adds	r3, #1
 800745e:	01db      	lsls	r3, r3, #7
 8007460:	4413      	add	r3, r2
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	68fa      	ldr	r2, [r7, #12]
 8007466:	6811      	ldr	r1, [r2, #0]
 8007468:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	3301      	adds	r3, #1
 8007470:	01db      	lsls	r3, r3, #7
 8007472:	440b      	add	r3, r1
 8007474:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681a      	ldr	r2, [r3, #0]
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	3301      	adds	r3, #1
 800747e:	01db      	lsls	r3, r3, #7
 8007480:	4413      	add	r3, r2
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	68f9      	ldr	r1, [r7, #12]
 800748c:	6809      	ldr	r1, [r1, #0]
 800748e:	431a      	orrs	r2, r3
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	3301      	adds	r3, #1
 8007494:	01db      	lsls	r3, r3, #7
 8007496:	440b      	add	r3, r1
 8007498:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074a2:	d109      	bne.n	80074b8 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	6819      	ldr	r1, [r3, #0]
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	689a      	ldr	r2, [r3, #8]
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	01db      	lsls	r3, r3, #7
 80074b0:	440b      	add	r3, r1
 80074b2:	339c      	adds	r3, #156	; 0x9c
 80074b4:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 80074b6:	e02a      	b.n	800750e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80074c0:	d125      	bne.n	800750e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	6819      	ldr	r1, [r3, #0]
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	689a      	ldr	r2, [r3, #8]
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	01db      	lsls	r3, r3, #7
 80074ce:	440b      	add	r3, r1
 80074d0:	33a8      	adds	r3, #168	; 0xa8
 80074d2:	601a      	str	r2, [r3, #0]
         break;
 80074d4:	e01b      	b.n	800750e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	3301      	adds	r3, #1
 80074de:	01db      	lsls	r3, r3, #7
 80074e0:	4413      	add	r3, r2
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	68fa      	ldr	r2, [r7, #12]
 80074e6:	6811      	ldr	r1, [r2, #0]
 80074e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	3301      	adds	r3, #1
 80074f0:	01db      	lsls	r3, r3, #7
 80074f2:	440b      	add	r3, r1
 80074f4:	601a      	str	r2, [r3, #0]
         break;
 80074f6:	e00a      	b.n	800750e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2207      	movs	r2, #7
 80074fc:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2200      	movs	r2, #0
 8007504:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      break;
 8007508:	e002      	b.n	8007510 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 800750a:	bf00      	nop
 800750c:	e000      	b.n	8007510 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 800750e:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8007516:	b2db      	uxtb	r3, r3
 8007518:	2b07      	cmp	r3, #7
 800751a:	d101      	bne.n	8007520 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 800751c:	2301      	movs	r3, #1
 800751e:	e008      	b.n	8007532 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2201      	movs	r2, #1
 8007524:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2200      	movs	r2, #0
 800752c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8007530:	2300      	movs	r3, #0
}
 8007532:	4618      	mov	r0, r3
 8007534:	3714      	adds	r7, #20
 8007536:	46bd      	mov	sp, r7
 8007538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753c:	4770      	bx	lr
 800753e:	bf00      	nop

08007540 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b084      	sub	sp, #16
 8007544:	af00      	add	r7, sp, #0
 8007546:	60f8      	str	r0, [r7, #12]
 8007548:	60b9      	str	r1, [r7, #8]
 800754a:	607a      	str	r2, [r7, #4]
 800754c:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8007554:	b2db      	uxtb	r3, r3
 8007556:	2b02      	cmp	r3, #2
 8007558:	d101      	bne.n	800755e <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 800755a:	2302      	movs	r3, #2
 800755c:	e01d      	b.n	800759a <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8007564:	2b01      	cmp	r3, #1
 8007566:	d101      	bne.n	800756c <HAL_HRTIM_WaveformOutputConfig+0x2c>
 8007568:	2302      	movs	r3, #2
 800756a:	e016      	b.n	800759a <HAL_HRTIM_WaveformOutputConfig+0x5a>
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2201      	movs	r2, #1
 8007570:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2202      	movs	r2, #2
 8007578:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	68b9      	ldr	r1, [r7, #8]
 8007582:	68f8      	ldr	r0, [r7, #12]
 8007584:	f000 fc50 	bl	8007e28 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2201      	movs	r2, #1
 800758c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2200      	movs	r2, #0
 8007594:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8007598:	2300      	movs	r3, #0
}
 800759a:	4618      	mov	r0, r3
 800759c:	3710      	adds	r7, #16
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}

080075a2 <HAL_HRTIM_WaveformOutputStart>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t OutputsToStart)
{
 80075a2:	b480      	push	{r7}
 80075a4:	b083      	sub	sp, #12
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
 80075aa:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStart));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d101      	bne.n	80075ba <HAL_HRTIM_WaveformOutputStart+0x18>
 80075b6:	2302      	movs	r3, #2
 80075b8:	e01a      	b.n	80075f0 <HAL_HRTIM_WaveformOutputStart+0x4e>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2201      	movs	r2, #1
 80075be:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2202      	movs	r2, #2
 80075c6:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f8d3 1394 	ldr.w	r1, [r3, #916]	; 0x394
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	683a      	ldr	r2, [r7, #0]
 80075d8:	430a      	orrs	r2, r1
 80075da:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2201      	movs	r2, #1
 80075e2:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80075ee:	2300      	movs	r3, #0
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	370c      	adds	r7, #12
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr

080075fc <HAL_HRTIM_WaveformOutputStop>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStop(HRTIM_HandleTypeDef * hhrtim,
                                               uint32_t OutputsToStop)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b083      	sub	sp, #12
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStop));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800760c:	2b01      	cmp	r3, #1
 800760e:	d101      	bne.n	8007614 <HAL_HRTIM_WaveformOutputStop+0x18>
 8007610:	2302      	movs	r3, #2
 8007612:	e01a      	b.n	800764a <HAL_HRTIM_WaveformOutputStop+0x4e>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2201      	movs	r2, #1
 8007618:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2202      	movs	r2, #2
 8007620:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.ODISR |= (OutputsToStop);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f8d3 1398 	ldr.w	r1, [r3, #920]	; 0x398
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	683a      	ldr	r2, [r7, #0]
 8007632:	430a      	orrs	r2, r1
 8007634:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2201      	movs	r2, #1
 800763c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2200      	movs	r2, #0
 8007644:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8007648:	2300      	movs	r3, #0
}
 800764a:	4618      	mov	r0, r3
 800764c:	370c      	adds	r7, #12
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr
	...

08007658 <HAL_HRTIM_WaveformCountStart_IT>:
  *       function.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart_IT(HRTIM_HandleTypeDef * hhrtim,
                                                    uint32_t Timers)
{
 8007658:	b480      	push	{r7}
 800765a:	b085      	sub	sp, #20
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8007668:	2b01      	cmp	r3, #1
 800766a:	d101      	bne.n	8007670 <HAL_HRTIM_WaveformCountStart_IT+0x18>
 800766c:	2302      	movs	r3, #2
 800766e:	e05b      	b.n	8007728 <HAL_HRTIM_WaveformCountStart_IT+0xd0>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2201      	movs	r2, #1
 8007674:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2202      	movs	r2, #2
 800767c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable HRTIM interrupts (if required) */
  __HAL_HRTIM_ENABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f8d3 1390 	ldr.w	r1, [r3, #912]	; 0x390
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	685a      	ldr	r2, [r3, #4]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	430a      	orrs	r2, r1
 8007692:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390

  /* Enable master timer related interrupts (if required) */
  if ((Timers & HRTIM_TIMERID_MASTER) != 0U)
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800769c:	2b00      	cmp	r3, #0
 800769e:	d009      	beq.n	80076b4 <HAL_HRTIM_WaveformCountStart_IT+0x5c>
  {
    __HAL_HRTIM_MASTER_ENABLE_IT(hhrtim,
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	68d9      	ldr	r1, [r3, #12]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	430a      	orrs	r2, r1
 80076b2:	60da      	str	r2, [r3, #12]
                                 hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].InterruptRequests);
  }

  /* Enable timing unit related interrupts (if required) */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 80076b4:	2300      	movs	r3, #0
 80076b6:	73fb      	strb	r3, [r7, #15]
 80076b8:	e022      	b.n	8007700 <HAL_HRTIM_WaveformCountStart_IT+0xa8>
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 80076ba:	7bfb      	ldrb	r3, [r7, #15]
 80076bc:	4a1d      	ldr	r2, [pc, #116]	; (8007734 <HAL_HRTIM_WaveformCountStart_IT+0xdc>)
 80076be:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	4013      	ands	r3, r2
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d017      	beq.n	80076fa <HAL_HRTIM_WaveformCountStart_IT+0xa2>
    {
      __HAL_HRTIM_TIMER_ENABLE_IT(hhrtim,
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	7bfb      	ldrb	r3, [r7, #15]
 80076d0:	01db      	lsls	r3, r3, #7
 80076d2:	4413      	add	r3, r2
 80076d4:	338c      	adds	r3, #140	; 0x8c
 80076d6:	6818      	ldr	r0, [r3, #0]
 80076d8:	7bfa      	ldrb	r2, [r7, #15]
 80076da:	6879      	ldr	r1, [r7, #4]
 80076dc:	4613      	mov	r3, r2
 80076de:	00db      	lsls	r3, r3, #3
 80076e0:	1a9b      	subs	r3, r3, r2
 80076e2:	009b      	lsls	r3, r3, #2
 80076e4:	440b      	add	r3, r1
 80076e6:	3320      	adds	r3, #32
 80076e8:	681a      	ldr	r2, [r3, #0]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6819      	ldr	r1, [r3, #0]
 80076ee:	7bfb      	ldrb	r3, [r7, #15]
 80076f0:	4302      	orrs	r2, r0
 80076f2:	01db      	lsls	r3, r3, #7
 80076f4:	440b      	add	r3, r1
 80076f6:	338c      	adds	r3, #140	; 0x8c
 80076f8:	601a      	str	r2, [r3, #0]
       timer_idx++)
 80076fa:	7bfb      	ldrb	r3, [r7, #15]
 80076fc:	3301      	adds	r3, #1
 80076fe:	73fb      	strb	r3, [r7, #15]
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
 8007700:	7bfb      	ldrb	r3, [r7, #15]
 8007702:	2b04      	cmp	r3, #4
 8007704:	d9d9      	bls.n	80076ba <HAL_HRTIM_WaveformCountStart_IT+0x62>
                                  hhrtim->TimerParam[timer_idx].InterruptRequests);
    }
  }

  /* Enable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	6819      	ldr	r1, [r3, #0]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	683a      	ldr	r2, [r7, #0]
 8007712:	430a      	orrs	r2, r1
 8007714:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2201      	movs	r2, #1
 800771a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;}
 8007726:	2300      	movs	r3, #0
 8007728:	4618      	mov	r0, r3
 800772a:	3714      	adds	r7, #20
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr
 8007734:	20000028 	.word	0x20000028

08007738 <HAL_HRTIM_WaveformCountStop_IT>:
  * @note The counter of a timer is stopped only if all timer outputs are disabled
  * @note All enabled timer related interrupts are disabled.
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStop_IT(HRTIM_HandleTypeDef * hhrtim,
                                                   uint32_t Timers)
{
 8007738:	b480      	push	{r7}
 800773a:	b085      	sub	sp, #20
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
  /* ++ WA */
  __IO uint32_t delai = (uint32_t)(0x17FU);
 8007742:	f240 137f 	movw	r3, #383	; 0x17f
 8007746:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800774e:	2b01      	cmp	r3, #1
 8007750:	d101      	bne.n	8007756 <HAL_HRTIM_WaveformCountStop_IT+0x1e>
 8007752:	2302      	movs	r3, #2
 8007754:	e065      	b.n	8007822 <HAL_HRTIM_WaveformCountStop_IT+0xea>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2201      	movs	r2, #1
 800775a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2202      	movs	r2, #2
 8007762:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Disable HRTIM interrupts (if required) */
  __HAL_HRTIM_DISABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f8d3 1390 	ldr.w	r1, [r3, #912]	; 0x390
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	43da      	mvns	r2, r3
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	400a      	ands	r2, r1
 800777a:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390

  /* Disable master timer related interrupts (if required) */
  if ((Timers & HRTIM_TIMERID_MASTER) != 0U)
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007784:	2b00      	cmp	r3, #0
 8007786:	d00a      	beq.n	800779e <HAL_HRTIM_WaveformCountStop_IT+0x66>
  {
    /* Interrupts enable flag must be cleared one by one */
    __HAL_HRTIM_MASTER_DISABLE_IT(hhrtim, hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].InterruptRequests);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	68d9      	ldr	r1, [r3, #12]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007794:	43da      	mvns	r2, r3
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	400a      	ands	r2, r1
 800779c:	60da      	str	r2, [r3, #12]
  }

  /* Disable timing unit related interrupts (if required) */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 800779e:	2300      	movs	r3, #0
 80077a0:	73fb      	strb	r3, [r7, #15]
 80077a2:	e023      	b.n	80077ec <HAL_HRTIM_WaveformCountStop_IT+0xb4>
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 80077a4:	7bfb      	ldrb	r3, [r7, #15]
 80077a6:	4a22      	ldr	r2, [pc, #136]	; (8007830 <HAL_HRTIM_WaveformCountStop_IT+0xf8>)
 80077a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	4013      	ands	r3, r2
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d018      	beq.n	80077e6 <HAL_HRTIM_WaveformCountStop_IT+0xae>
    {
      __HAL_HRTIM_TIMER_DISABLE_IT(hhrtim, timer_idx, hhrtim->TimerParam[timer_idx].InterruptRequests);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681a      	ldr	r2, [r3, #0]
 80077b8:	7bfb      	ldrb	r3, [r7, #15]
 80077ba:	01db      	lsls	r3, r3, #7
 80077bc:	4413      	add	r3, r2
 80077be:	338c      	adds	r3, #140	; 0x8c
 80077c0:	6818      	ldr	r0, [r3, #0]
 80077c2:	7bfa      	ldrb	r2, [r7, #15]
 80077c4:	6879      	ldr	r1, [r7, #4]
 80077c6:	4613      	mov	r3, r2
 80077c8:	00db      	lsls	r3, r3, #3
 80077ca:	1a9b      	subs	r3, r3, r2
 80077cc:	009b      	lsls	r3, r3, #2
 80077ce:	440b      	add	r3, r1
 80077d0:	3320      	adds	r3, #32
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	43da      	mvns	r2, r3
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6819      	ldr	r1, [r3, #0]
 80077da:	7bfb      	ldrb	r3, [r7, #15]
 80077dc:	4002      	ands	r2, r0
 80077de:	01db      	lsls	r3, r3, #7
 80077e0:	440b      	add	r3, r1
 80077e2:	338c      	adds	r3, #140	; 0x8c
 80077e4:	601a      	str	r2, [r3, #0]
       timer_idx++)
 80077e6:	7bfb      	ldrb	r3, [r7, #15]
 80077e8:	3301      	adds	r3, #1
 80077ea:	73fb      	strb	r3, [r7, #15]
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
 80077ec:	7bfb      	ldrb	r3, [r7, #15]
 80077ee:	2b04      	cmp	r3, #4
 80077f0:	d9d8      	bls.n	80077a4 <HAL_HRTIM_WaveformCountStop_IT+0x6c>
    }
  }

  /* ++ WA */
  do { delai--; } while (delai != 0U);
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	3b01      	subs	r3, #1
 80077f6:	60bb      	str	r3, [r7, #8]
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d1f9      	bne.n	80077f2 <HAL_HRTIM_WaveformCountStop_IT+0xba>
  /* -- WA */

  /* Disable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR &= ~(Timers);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	6819      	ldr	r1, [r3, #0]
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	43da      	mvns	r2, r3
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	400a      	ands	r2, r1
 800780e:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2201      	movs	r2, #1
 8007814:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2200      	movs	r2, #0
 800781c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8007820:	2300      	movs	r3, #0
}
 8007822:	4618      	mov	r0, r3
 8007824:	3714      	adds	r7, #20
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr
 800782e:	bf00      	nop
 8007830:	20000028 	.word	0x20000028

08007834 <HAL_HRTIM_IRQHandler>:
  *                   This parameter can be any value of HRTIM_Timer_Index
  * @retval None
  */
void HAL_HRTIM_IRQHandler(HRTIM_HandleTypeDef * hhrtim,
                          uint32_t TimerIdx)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b082      	sub	sp, #8
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	6039      	str	r1, [r7, #0]
  /* HRTIM interrupts handling */
  if (TimerIdx == HRTIM_TIMERINDEX_COMMON)
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	2bff      	cmp	r3, #255	; 0xff
 8007842:	d103      	bne.n	800784c <HAL_HRTIM_IRQHandler+0x18>
  {
    HRTIM_HRTIM_ISR(hhrtim);
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 fc29 	bl	800809c <HRTIM_HRTIM_ISR>
  {
    /* Timing unit related interrupts handling */
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
  }

}
 800784a:	e00a      	b.n	8007862 <HAL_HRTIM_IRQHandler+0x2e>
  else if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	2b05      	cmp	r3, #5
 8007850:	d103      	bne.n	800785a <HAL_HRTIM_IRQHandler+0x26>
    HRTIM_Master_ISR(hhrtim);
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 fca0 	bl	8008198 <HRTIM_Master_ISR>
}
 8007858:	e003      	b.n	8007862 <HAL_HRTIM_IRQHandler+0x2e>
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
 800785a:	6839      	ldr	r1, [r7, #0]
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 fd45 	bl	80082ec <HRTIM_Timer_ISR>
}
 8007862:	bf00      	nop
 8007864:	3708      	adds	r7, #8
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}

0800786a <HAL_HRTIM_Fault1Callback>:
  * @brief  Callback function invoked when a fault 1 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle  * @retval None
  * @retval None
  */
__weak void HAL_HRTIM_Fault1Callback(HRTIM_HandleTypeDef * hhrtim)
{
 800786a:	b480      	push	{r7}
 800786c:	b083      	sub	sp, #12
 800786e:	af00      	add	r7, sp, #0
 8007870:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault1Callback could be implemented in the user file
   */
}
 8007872:	bf00      	nop
 8007874:	370c      	adds	r7, #12
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr

0800787e <HAL_HRTIM_Fault2Callback>:
  * @brief  Callback function invoked when a fault 2 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault2Callback(HRTIM_HandleTypeDef * hhrtim)
{
 800787e:	b480      	push	{r7}
 8007880:	b083      	sub	sp, #12
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault2Callback could be implemented in the user file
   */
}
 8007886:	bf00      	nop
 8007888:	370c      	adds	r7, #12
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr

08007892 <HAL_HRTIM_Fault3Callback>:
  * @brief  Callback function invoked when a fault 3 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault3Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8007892:	b480      	push	{r7}
 8007894:	b083      	sub	sp, #12
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault3Callback could be implemented in the user file
   */
}
 800789a:	bf00      	nop
 800789c:	370c      	adds	r7, #12
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr

080078a6 <HAL_HRTIM_Fault4Callback>:
  * @brief  Callback function invoked when a fault 4 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault4Callback(HRTIM_HandleTypeDef * hhrtim)
{
 80078a6:	b480      	push	{r7}
 80078a8:	b083      	sub	sp, #12
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault4Callback could be implemented in the user file
   */
}
 80078ae:	bf00      	nop
 80078b0:	370c      	adds	r7, #12
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr

080078ba <HAL_HRTIM_Fault5Callback>:
  * @brief  Callback function invoked when a fault 5 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault5Callback(HRTIM_HandleTypeDef * hhrtim)
{
 80078ba:	b480      	push	{r7}
 80078bc:	b083      	sub	sp, #12
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault5Callback could be implemented in the user file
   */
}
 80078c2:	bf00      	nop
 80078c4:	370c      	adds	r7, #12
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr

080078ce <HAL_HRTIM_SystemFaultCallback>:
  * @brief  Callback function invoked when a system fault interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SystemFaultCallback(HRTIM_HandleTypeDef * hhrtim)
{
 80078ce:	b480      	push	{r7}
 80078d0:	b083      	sub	sp, #12
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SystemFaultCallback could be implemented in the user file
   */
}
 80078d6:	bf00      	nop
 80078d8:	370c      	adds	r7, #12
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr

080078e2 <HAL_HRTIM_BurstModePeriodCallback>:
  * @brief  Callback function invoked when the end of the burst mode period is reached
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_BurstModePeriodCallback(HRTIM_HandleTypeDef * hhrtim)
{
 80078e2:	b480      	push	{r7}
 80078e4:	b083      	sub	sp, #12
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_BurstModeCallback could be implemented in the user file
   */
}
 80078ea:	bf00      	nop
 80078ec:	370c      	adds	r7, #12
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr

080078f6 <HAL_HRTIM_SynchronizationEventCallback>:
  * @brief  Callback function invoked when a synchronization input event is received
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SynchronizationEventCallback(HRTIM_HandleTypeDef * hhrtim)
{
 80078f6:	b480      	push	{r7}
 80078f8:	b083      	sub	sp, #12
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SynchronizationEventCallback could be implemented in the user file
   */
}
 80078fe:	bf00      	nop
 8007900:	370c      	adds	r7, #12
 8007902:	46bd      	mov	sp, r7
 8007904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007908:	4770      	bx	lr

0800790a <HAL_HRTIM_RegistersUpdateCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_RegistersUpdateCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800790a:	b480      	push	{r7}
 800790c:	b083      	sub	sp, #12
 800790e:	af00      	add	r7, sp, #0
 8007910:	6078      	str	r0, [r7, #4]
 8007912:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RegistersUpdateCallback could be implemented in the user file
   */
}
 8007914:	bf00      	nop
 8007916:	370c      	adds	r7, #12
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr

08007920 <HAL_HRTIM_Compare1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007920:	b480      	push	{r7}
 8007922:	b083      	sub	sp, #12
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare1EventCallback could be implemented in the user file
   */
}
 800792a:	bf00      	nop
 800792c:	370c      	adds	r7, #12
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr

08007936 <HAL_HRTIM_Compare4EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare4EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007936:	b480      	push	{r7}
 8007938:	b083      	sub	sp, #12
 800793a:	af00      	add	r7, sp, #0
 800793c:	6078      	str	r0, [r7, #4]
 800793e:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare4EventCallback could be implemented in the user file
   */
}
 8007940:	bf00      	nop
 8007942:	370c      	adds	r7, #12
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr

0800794c <HAL_HRTIM_Capture1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Capture1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800794c:	b480      	push	{r7}
 800794e:	b083      	sub	sp, #12
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture1EventCallback could be implemented in the user file
   */
}
 8007956:	bf00      	nop
 8007958:	370c      	adds	r7, #12
 800795a:	46bd      	mov	sp, r7
 800795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007960:	4770      	bx	lr

08007962 <HAL_HRTIM_Capture2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Capture2EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007962:	b480      	push	{r7}
 8007964:	b083      	sub	sp, #12
 8007966:	af00      	add	r7, sp, #0
 8007968:	6078      	str	r0, [r7, #4]
 800796a:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture2EventCallback could be implemented in the user file
   */
}
 800796c:	bf00      	nop
 800796e:	370c      	adds	r7, #12
 8007970:	46bd      	mov	sp, r7
 8007972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007976:	4770      	bx	lr

08007978 <HAL_HRTIM_DelayedProtectionCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_DelayedProtectionCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007978:	b480      	push	{r7}
 800797a:	b083      	sub	sp, #12
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_DelayedProtectionCallback could be implemented in the user file
   */
}
 8007982:	bf00      	nop
 8007984:	370c      	adds	r7, #12
 8007986:	46bd      	mov	sp, r7
 8007988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798c:	4770      	bx	lr

0800798e <HAL_HRTIM_CounterResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_CounterResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800798e:	b480      	push	{r7}
 8007990:	b083      	sub	sp, #12
 8007992:	af00      	add	r7, sp, #0
 8007994:	6078      	str	r0, [r7, #4]
 8007996:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_CounterResetCallback could be implemented in the user file
   */
}
 8007998:	bf00      	nop
 800799a:	370c      	adds	r7, #12
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr

080079a4 <HAL_HRTIM_Output1SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output1SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b083      	sub	sp, #12
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1SetCallback could be implemented in the user file
   */
}
 80079ae:	bf00      	nop
 80079b0:	370c      	adds	r7, #12
 80079b2:	46bd      	mov	sp, r7
 80079b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b8:	4770      	bx	lr

080079ba <HAL_HRTIM_Output1ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output1ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80079ba:	b480      	push	{r7}
 80079bc:	b083      	sub	sp, #12
 80079be:	af00      	add	r7, sp, #0
 80079c0:	6078      	str	r0, [r7, #4]
 80079c2:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1ResetCallback could be implemented in the user file
   */
}
 80079c4:	bf00      	nop
 80079c6:	370c      	adds	r7, #12
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr

080079d0 <HAL_HRTIM_Output2SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output2SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b083      	sub	sp, #12
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2SetCallback could be implemented in the user file
   */
}
 80079da:	bf00      	nop
 80079dc:	370c      	adds	r7, #12
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr

080079e6 <HAL_HRTIM_Output2ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output2ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80079e6:	b480      	push	{r7}
 80079e8:	b083      	sub	sp, #12
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
 80079ee:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2ResetCallback could be implemented in the user file
   */
}
 80079f0:	bf00      	nop
 80079f2:	370c      	adds	r7, #12
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr

080079fc <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b085      	sub	sp, #20
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f023 0307 	bic.w	r3, r3, #7
 8007a14:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	68fa      	ldr	r2, [r7, #12]
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f023 0318 	bic.w	r3, r3, #24
 8007a26:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	68db      	ldr	r3, [r3, #12]
 8007a2c:	68fa      	ldr	r2, [r7, #12]
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	68fa      	ldr	r2, [r7, #12]
 8007a38:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	683a      	ldr	r2, [r7, #0]
 8007a40:	6812      	ldr	r2, [r2, #0]
 8007a42:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	683a      	ldr	r2, [r7, #0]
 8007a4a:	6852      	ldr	r2, [r2, #4]
 8007a4c:	619a      	str	r2, [r3, #24]
}
 8007a4e:	bf00      	nop
 8007a50:	3714      	adds	r7, #20
 8007a52:	46bd      	mov	sp, r7
 8007a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a58:	4770      	bx	lr

08007a5a <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8007a5a:	b480      	push	{r7}
 8007a5c:	b087      	sub	sp, #28
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	60f8      	str	r0, [r7, #12]
 8007a62:	60b9      	str	r1, [r7, #8]
 8007a64:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	3301      	adds	r3, #1
 8007a6e:	01db      	lsls	r3, r3, #7
 8007a70:	4413      	add	r3, r2
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	f023 0307 	bic.w	r3, r3, #7
 8007a7c:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	689b      	ldr	r3, [r3, #8]
 8007a82:	697a      	ldr	r2, [r7, #20]
 8007a84:	4313      	orrs	r3, r2
 8007a86:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	f023 0318 	bic.w	r3, r3, #24
 8007a8e:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	68db      	ldr	r3, [r3, #12]
 8007a94:	697a      	ldr	r2, [r7, #20]
 8007a96:	4313      	orrs	r3, r2
 8007a98:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681a      	ldr	r2, [r3, #0]
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	3301      	adds	r3, #1
 8007aa2:	01db      	lsls	r3, r3, #7
 8007aa4:	4413      	add	r3, r2
 8007aa6:	697a      	ldr	r2, [r7, #20]
 8007aa8:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	6819      	ldr	r1, [r3, #0]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681a      	ldr	r2, [r3, #0]
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	01db      	lsls	r3, r3, #7
 8007ab6:	440b      	add	r3, r1
 8007ab8:	3394      	adds	r3, #148	; 0x94
 8007aba:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	6819      	ldr	r1, [r3, #0]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	685a      	ldr	r2, [r3, #4]
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	01db      	lsls	r3, r3, #7
 8007ac8:	440b      	add	r3, r1
 8007aca:	3398      	adds	r3, #152	; 0x98
 8007acc:	601a      	str	r2, [r3, #0]
}
 8007ace:	bf00      	nop
 8007ad0:	371c      	adds	r7, #28
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr

08007ada <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8007ada:	b480      	push	{r7}
 8007adc:	b085      	sub	sp, #20
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	6078      	str	r0, [r7, #4]
 8007ae2:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8007af4:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	f023 0320 	bic.w	r3, r3, #32
 8007afc:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	695b      	ldr	r3, [r3, #20]
 8007b02:	68fa      	ldr	r2, [r7, #12]
 8007b04:	4313      	orrs	r3, r2
 8007b06:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b0e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	699b      	ldr	r3, [r3, #24]
 8007b14:	68fa      	ldr	r2, [r7, #12]
 8007b16:	4313      	orrs	r3, r2
 8007b18:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b20:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	69db      	ldr	r3, [r3, #28]
 8007b26:	68fa      	ldr	r2, [r7, #12]
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007b32:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	6a1b      	ldr	r3, [r3, #32]
 8007b38:	68fa      	ldr	r2, [r7, #12]
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8007b44:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b4a:	68fa      	ldr	r2, [r7, #12]
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8007b56:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b5c:	009b      	lsls	r3, r3, #2
 8007b5e:	68fa      	ldr	r2, [r7, #12]
 8007b60:	4313      	orrs	r3, r2
 8007b62:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007b6a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b70:	68fa      	ldr	r2, [r7, #12]
 8007b72:	4313      	orrs	r3, r2
 8007b74:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b7c:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b82:	68ba      	ldr	r2, [r7, #8]
 8007b84:	4313      	orrs	r3, r2
 8007b86:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	68fa      	ldr	r2, [r7, #12]
 8007b8e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	68ba      	ldr	r2, [r7, #8]
 8007b96:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8007b9a:	bf00      	nop
 8007b9c:	3714      	adds	r7, #20
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba4:	4770      	bx	lr
	...

08007ba8 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b08b      	sub	sp, #44	; 0x2c
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	60b9      	str	r1, [r7, #8]
 8007bb2:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	3301      	adds	r3, #1
 8007bbc:	01db      	lsls	r3, r3, #7
 8007bbe:	4413      	add	r3, r2
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	68fa      	ldr	r2, [r7, #12]
 8007bc4:	6811      	ldr	r1, [r2, #0]
 8007bc6:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	3301      	adds	r3, #1
 8007bce:	01db      	lsls	r3, r3, #7
 8007bd0:	440b      	add	r3, r1
 8007bd2:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	3301      	adds	r3, #1
 8007bdc:	01db      	lsls	r3, r3, #7
 8007bde:	4413      	add	r3, r2
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681a      	ldr	r2, [r3, #0]
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	01db      	lsls	r3, r3, #7
 8007bec:	4413      	add	r3, r2
 8007bee:	33e8      	adds	r3, #232	; 0xe8
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	01db      	lsls	r3, r3, #7
 8007bfc:	4413      	add	r3, r2
 8007bfe:	33e4      	adds	r3, #228	; 0xe4
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8007c0c:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8007c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c10:	f023 0320 	bic.w	r3, r3, #32
 8007c14:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	695b      	ldr	r3, [r3, #20]
 8007c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8007c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c26:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	699b      	ldr	r3, [r3, #24]
 8007c2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8007c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c38:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	69db      	ldr	r3, [r3, #28]
 8007c3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c40:	4313      	orrs	r3, r2
 8007c42:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8007c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c46:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007c4a:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6a1b      	ldr	r3, [r3, #32]
 8007c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c52:	4313      	orrs	r3, r2
 8007c54:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8007c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c58:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8007c5c:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c64:	4313      	orrs	r3, r2
 8007c66:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8007c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007c6e:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c76:	4313      	orrs	r3, r2
 8007c78:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8007c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007c80:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c8a:	d103      	bne.n	8007c94 <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8007c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c92:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8007c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c9a:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8007ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007cac:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8007cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cba:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 8007cbe:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8007cca:	69bb      	ldr	r3, [r7, #24]
 8007ccc:	f023 031f 	bic.w	r3, r3, #31
 8007cd0:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd6:	f003 031f 	and.w	r3, r3, #31
 8007cda:	69ba      	ldr	r2, [r7, #24]
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8007ce0:	69bb      	ldr	r3, [r7, #24]
 8007ce2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ce6:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cec:	69ba      	ldr	r2, [r7, #24]
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d108      	bne.n	8007d0c <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8007cfa:	6a3b      	ldr	r3, [r7, #32]
 8007cfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d00:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d06:	6a3a      	ldr	r2, [r7, #32]
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d10:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8007d14:	d004      	beq.n	8007d20 <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d1a:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8007d1e:	d103      	bne.n	8007d28 <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d24:	2b40      	cmp	r3, #64	; 0x40
 8007d26:	d108      	bne.n	8007d3a <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8007d28:	6a3b      	ldr	r3, [r7, #32]
 8007d2a:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 8007d2e:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d34:	6a3a      	ldr	r2, [r7, #32]
 8007d36:	4313      	orrs	r3, r2
 8007d38:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d3e:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	2b04      	cmp	r3, #4
 8007d44:	d843      	bhi.n	8007dce <HRTIM_TimingUnitWaveform_Config+0x226>
 8007d46:	a201      	add	r2, pc, #4	; (adr r2, 8007d4c <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 8007d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d4c:	08007d61 	.word	0x08007d61
 8007d50:	08007d77 	.word	0x08007d77
 8007d54:	08007d8d 	.word	0x08007d8d
 8007d58:	08007da3 	.word	0x08007da3
 8007d5c:	08007db9 	.word	0x08007db9
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8007d60:	69fb      	ldr	r3, [r7, #28]
 8007d62:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007d66:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d6c:	005b      	lsls	r3, r3, #1
 8007d6e:	69fa      	ldr	r2, [r7, #28]
 8007d70:	4313      	orrs	r3, r2
 8007d72:	61fb      	str	r3, [r7, #28]
      break;
 8007d74:	e02c      	b.n	8007dd0 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8007d76:	69fb      	ldr	r3, [r7, #28]
 8007d78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d7c:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d82:	009b      	lsls	r3, r3, #2
 8007d84:	69fa      	ldr	r2, [r7, #28]
 8007d86:	4313      	orrs	r3, r2
 8007d88:	61fb      	str	r3, [r7, #28]
      break;
 8007d8a:	e021      	b.n	8007dd0 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8007d8c:	69fb      	ldr	r3, [r7, #28]
 8007d8e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8007d92:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d98:	00db      	lsls	r3, r3, #3
 8007d9a:	69fa      	ldr	r2, [r7, #28]
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	61fb      	str	r3, [r7, #28]
      break;
 8007da0:	e016      	b.n	8007dd0 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8007da2:	69fb      	ldr	r3, [r7, #28]
 8007da4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007da8:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dae:	011b      	lsls	r3, r3, #4
 8007db0:	69fa      	ldr	r2, [r7, #28]
 8007db2:	4313      	orrs	r3, r2
 8007db4:	61fb      	str	r3, [r7, #28]
      break;
 8007db6:	e00b      	b.n	8007dd0 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8007db8:	69fb      	ldr	r3, [r7, #28]
 8007dba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007dbe:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc4:	015b      	lsls	r3, r3, #5
 8007dc6:	69fa      	ldr	r2, [r7, #28]
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	61fb      	str	r3, [r7, #28]
      break;
 8007dcc:	e000      	b.n	8007dd0 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  default:
    break;
 8007dce:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	01db      	lsls	r3, r3, #7
 8007dda:	4413      	add	r3, r2
 8007ddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dde:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	01db      	lsls	r3, r3, #7
 8007de8:	4413      	add	r3, r2
 8007dea:	33e8      	adds	r3, #232	; 0xe8
 8007dec:	69ba      	ldr	r2, [r7, #24]
 8007dee:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681a      	ldr	r2, [r3, #0]
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	01db      	lsls	r3, r3, #7
 8007df8:	4413      	add	r3, r2
 8007dfa:	33e4      	adds	r3, #228	; 0xe4
 8007dfc:	6a3a      	ldr	r2, [r7, #32]
 8007dfe:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	01db      	lsls	r3, r3, #7
 8007e08:	4413      	add	r3, r2
 8007e0a:	33d4      	adds	r3, #212	; 0xd4
 8007e0c:	697a      	ldr	r2, [r7, #20]
 8007e0e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	69fa      	ldr	r2, [r7, #28]
 8007e16:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8007e1a:	bf00      	nop
 8007e1c:	372c      	adds	r7, #44	; 0x2c
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr
 8007e26:	bf00      	nop

08007e28 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b089      	sub	sp, #36	; 0x24
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	60f8      	str	r0, [r7, #12]
 8007e30:	60b9      	str	r1, [r7, #8]
 8007e32:	607a      	str	r2, [r7, #4]
 8007e34:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8007e36:	2300      	movs	r3, #0
 8007e38:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681a      	ldr	r2, [r3, #0]
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	01db      	lsls	r3, r3, #7
 8007e42:	4413      	add	r3, r2
 8007e44:	33e4      	adds	r3, #228	; 0xe4
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681a      	ldr	r2, [r3, #0]
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	01db      	lsls	r3, r3, #7
 8007e52:	4413      	add	r3, r2
 8007e54:	33b8      	adds	r3, #184	; 0xb8
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	617b      	str	r3, [r7, #20]

  switch (Output)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e60:	d04d      	beq.n	8007efe <HRTIM_OutputConfig+0xd6>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e68:	d85e      	bhi.n	8007f28 <HRTIM_OutputConfig+0x100>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e70:	d032      	beq.n	8007ed8 <HRTIM_OutputConfig+0xb0>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e78:	d856      	bhi.n	8007f28 <HRTIM_OutputConfig+0x100>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2b80      	cmp	r3, #128	; 0x80
 8007e7e:	d03e      	beq.n	8007efe <HRTIM_OutputConfig+0xd6>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2b80      	cmp	r3, #128	; 0x80
 8007e84:	d850      	bhi.n	8007f28 <HRTIM_OutputConfig+0x100>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2b40      	cmp	r3, #64	; 0x40
 8007e8a:	d025      	beq.n	8007ed8 <HRTIM_OutputConfig+0xb0>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2b40      	cmp	r3, #64	; 0x40
 8007e90:	d84a      	bhi.n	8007f28 <HRTIM_OutputConfig+0x100>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d01f      	beq.n	8007ed8 <HRTIM_OutputConfig+0xb0>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d044      	beq.n	8007f28 <HRTIM_OutputConfig+0x100>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2b20      	cmp	r3, #32
 8007ea2:	d841      	bhi.n	8007f28 <HRTIM_OutputConfig+0x100>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2b02      	cmp	r3, #2
 8007ea8:	d33e      	bcc.n	8007f28 <HRTIM_OutputConfig+0x100>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	3b02      	subs	r3, #2
 8007eae:	2201      	movs	r2, #1
 8007eb0:	409a      	lsls	r2, r3
 8007eb2:	4b48      	ldr	r3, [pc, #288]	; (8007fd4 <HRTIM_OutputConfig+0x1ac>)
 8007eb4:	4013      	ands	r3, r2
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	bf14      	ite	ne
 8007eba:	2301      	movne	r3, #1
 8007ebc:	2300      	moveq	r3, #0
 8007ebe:	b2db      	uxtb	r3, r3
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d11c      	bne.n	8007efe <HRTIM_OutputConfig+0xd6>
 8007ec4:	f244 0304 	movw	r3, #16388	; 0x4004
 8007ec8:	4013      	ands	r3, r2
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	bf14      	ite	ne
 8007ece:	2301      	movne	r3, #1
 8007ed0:	2300      	moveq	r3, #0
 8007ed2:	b2db      	uxtb	r3, r3
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d027      	beq.n	8007f28 <HRTIM_OutputConfig+0x100>
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	6819      	ldr	r1, [r3, #0]
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	685a      	ldr	r2, [r3, #4]
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	01db      	lsls	r3, r3, #7
 8007ee4:	440b      	add	r3, r1
 8007ee6:	33bc      	adds	r3, #188	; 0xbc
 8007ee8:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	6819      	ldr	r1, [r3, #0]
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	689a      	ldr	r2, [r3, #8]
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	01db      	lsls	r3, r3, #7
 8007ef6:	440b      	add	r3, r1
 8007ef8:	33c0      	adds	r3, #192	; 0xc0
 8007efa:	601a      	str	r2, [r3, #0]
      break;
 8007efc:	e015      	b.n	8007f2a <HRTIM_OutputConfig+0x102>
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	6819      	ldr	r1, [r3, #0]
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	685a      	ldr	r2, [r3, #4]
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	01db      	lsls	r3, r3, #7
 8007f0a:	440b      	add	r3, r1
 8007f0c:	33c4      	adds	r3, #196	; 0xc4
 8007f0e:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	6819      	ldr	r1, [r3, #0]
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	689a      	ldr	r2, [r3, #8]
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	01db      	lsls	r3, r3, #7
 8007f1c:	440b      	add	r3, r1
 8007f1e:	33c8      	adds	r3, #200	; 0xc8
 8007f20:	601a      	str	r2, [r3, #0]
      shift = 16U;
 8007f22:	2310      	movs	r3, #16
 8007f24:	61bb      	str	r3, [r7, #24]
      break;
 8007f26:	e000      	b.n	8007f2a <HRTIM_OutputConfig+0x102>
    }

  default:
    break;
 8007f28:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 8007f2a:	22fe      	movs	r2, #254	; 0xfe
 8007f2c:	69bb      	ldr	r3, [r7, #24]
 8007f2e:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8007f32:	43db      	mvns	r3, r3
 8007f34:	69fa      	ldr	r2, [r7, #28]
 8007f36:	4013      	ands	r3, r2
 8007f38:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	681a      	ldr	r2, [r3, #0]
 8007f3e:	69bb      	ldr	r3, [r7, #24]
 8007f40:	fa02 f303 	lsl.w	r3, r2, r3
 8007f44:	69fa      	ldr	r2, [r7, #28]
 8007f46:	4313      	orrs	r3, r2
 8007f48:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	68da      	ldr	r2, [r3, #12]
 8007f4e:	69bb      	ldr	r3, [r7, #24]
 8007f50:	fa02 f303 	lsl.w	r3, r2, r3
 8007f54:	69fa      	ldr	r2, [r7, #28]
 8007f56:	4313      	orrs	r3, r2
 8007f58:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	691a      	ldr	r2, [r3, #16]
 8007f5e:	69bb      	ldr	r3, [r7, #24]
 8007f60:	fa02 f303 	lsl.w	r3, r2, r3
 8007f64:	69fa      	ldr	r2, [r7, #28]
 8007f66:	4313      	orrs	r3, r2
 8007f68:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	695a      	ldr	r2, [r3, #20]
 8007f6e:	69bb      	ldr	r3, [r7, #24]
 8007f70:	fa02 f303 	lsl.w	r3, r2, r3
 8007f74:	69fa      	ldr	r2, [r7, #28]
 8007f76:	4313      	orrs	r3, r2
 8007f78:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	699a      	ldr	r2, [r3, #24]
 8007f7e:	69bb      	ldr	r3, [r7, #24]
 8007f80:	fa02 f303 	lsl.w	r3, r2, r3
 8007f84:	69fa      	ldr	r2, [r7, #28]
 8007f86:	4313      	orrs	r3, r2
 8007f88:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	691b      	ldr	r3, [r3, #16]
 8007f8e:	2b08      	cmp	r3, #8
 8007f90:	d111      	bne.n	8007fb6 <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d10c      	bne.n	8007fb6 <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d107      	bne.n	8007fb6 <HRTIM_OutputConfig+0x18e>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	69da      	ldr	r2, [r3, #28]
 8007faa:	69bb      	ldr	r3, [r7, #24]
 8007fac:	fa02 f303 	lsl.w	r3, r2, r3
 8007fb0:	69fa      	ldr	r2, [r7, #28]
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681a      	ldr	r2, [r3, #0]
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	01db      	lsls	r3, r3, #7
 8007fbe:	4413      	add	r3, r2
 8007fc0:	33e4      	adds	r3, #228	; 0xe4
 8007fc2:	69fa      	ldr	r2, [r7, #28]
 8007fc4:	601a      	str	r2, [r3, #0]
}
 8007fc6:	bf00      	nop
 8007fc8:	3724      	adds	r7, #36	; 0x24
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd0:	4770      	bx	lr
 8007fd2:	bf00      	nop
 8007fd4:	40000041 	.word	0x40000041

08007fd8 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b083      	sub	sp, #12
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	2b05      	cmp	r3, #5
 8007fe6:	d851      	bhi.n	800808c <HRTIM_ForceRegistersUpdate+0xb4>
 8007fe8:	a201      	add	r2, pc, #4	; (adr r2, 8007ff0 <HRTIM_ForceRegistersUpdate+0x18>)
 8007fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fee:	bf00      	nop
 8007ff0:	0800801f 	.word	0x0800801f
 8007ff4:	08008035 	.word	0x08008035
 8007ff8:	0800804b 	.word	0x0800804b
 8007ffc:	08008061 	.word	0x08008061
 8008000:	08008077 	.word	0x08008077
 8008004:	08008009 	.word	0x08008009
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f042 0201 	orr.w	r2, r2, #1
 8008018:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800801c:	e037      	b.n	800808e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f042 0202 	orr.w	r2, r2, #2
 800802e:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8008032:	e02c      	b.n	800808e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f042 0204 	orr.w	r2, r2, #4
 8008044:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8008048:	e021      	b.n	800808e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f042 0208 	orr.w	r2, r2, #8
 800805a:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800805e:	e016      	b.n	800808e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f042 0210 	orr.w	r2, r2, #16
 8008070:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8008074:	e00b      	b.n	800808e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f042 0220 	orr.w	r2, r2, #32
 8008086:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800808a:	e000      	b.n	800808e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  default:
    break;
 800808c:	bf00      	nop
  }
}
 800808e:	bf00      	nop
 8008090:	370c      	adds	r7, #12
 8008092:	46bd      	mov	sp, r7
 8008094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008098:	4770      	bx	lr
 800809a:	bf00      	nop

0800809c <HRTIM_HRTIM_ISR>:
  * @brief  HRTIM interrupts service routine
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
static void HRTIM_HRTIM_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b084      	sub	sp, #16
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 80080ac:	60fb      	str	r3, [r7, #12]
  uint32_t ierits   = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 80080b6:	60bb      	str	r3, [r7, #8]

  /* Fault 1 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT1) != (uint32_t)RESET)
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f003 0301 	and.w	r3, r3, #1
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d00c      	beq.n	80080dc <HRTIM_HRTIM_ISR+0x40>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT1) != (uint32_t)RESET)
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	f003 0301 	and.w	r3, r3, #1
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d007      	beq.n	80080dc <HRTIM_HRTIM_ISR+0x40>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT1);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	2201      	movs	r2, #1
 80080d2:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault1Callback(hhrtim);
#else
      HAL_HRTIM_Fault1Callback(hhrtim);
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f7ff fbc7 	bl	800786a <HAL_HRTIM_Fault1Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 2 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT2) != (uint32_t)RESET)
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f003 0302 	and.w	r3, r3, #2
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d00c      	beq.n	8008100 <HRTIM_HRTIM_ISR+0x64>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT2) != (uint32_t)RESET)
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	f003 0302 	and.w	r3, r3, #2
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d007      	beq.n	8008100 <HRTIM_HRTIM_ISR+0x64>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT2);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	2202      	movs	r2, #2
 80080f6:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault2Callback(hhrtim);
#else
      HAL_HRTIM_Fault2Callback(hhrtim);
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f7ff fbbf 	bl	800787e <HAL_HRTIM_Fault2Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 3 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT3) != (uint32_t)RESET)
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f003 0304 	and.w	r3, r3, #4
 8008106:	2b00      	cmp	r3, #0
 8008108:	d00c      	beq.n	8008124 <HRTIM_HRTIM_ISR+0x88>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT3) != (uint32_t)RESET)
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	f003 0304 	and.w	r3, r3, #4
 8008110:	2b00      	cmp	r3, #0
 8008112:	d007      	beq.n	8008124 <HRTIM_HRTIM_ISR+0x88>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT3);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	2204      	movs	r2, #4
 800811a:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault3Callback(hhrtim);
#else
      HAL_HRTIM_Fault3Callback(hhrtim);
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f7ff fbb7 	bl	8007892 <HAL_HRTIM_Fault3Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 4 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT4) != (uint32_t)RESET)
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f003 0308 	and.w	r3, r3, #8
 800812a:	2b00      	cmp	r3, #0
 800812c:	d00c      	beq.n	8008148 <HRTIM_HRTIM_ISR+0xac>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT4) != (uint32_t)RESET)
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	f003 0308 	and.w	r3, r3, #8
 8008134:	2b00      	cmp	r3, #0
 8008136:	d007      	beq.n	8008148 <HRTIM_HRTIM_ISR+0xac>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT4);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	2208      	movs	r2, #8
 800813e:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault4Callback(hhrtim);
#else
      HAL_HRTIM_Fault4Callback(hhrtim);
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f7ff fbaf 	bl	80078a6 <HAL_HRTIM_Fault4Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 5 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT5) != (uint32_t)RESET)
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f003 0310 	and.w	r3, r3, #16
 800814e:	2b00      	cmp	r3, #0
 8008150:	d00c      	beq.n	800816c <HRTIM_HRTIM_ISR+0xd0>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT5) != (uint32_t)RESET)
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	f003 0310 	and.w	r3, r3, #16
 8008158:	2b00      	cmp	r3, #0
 800815a:	d007      	beq.n	800816c <HRTIM_HRTIM_ISR+0xd0>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT5);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	2210      	movs	r2, #16
 8008162:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 5 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault5Callback(hhrtim);
#else
      HAL_HRTIM_Fault5Callback(hhrtim);
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f7ff fba7 	bl	80078ba <HAL_HRTIM_Fault5Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* System fault event */
  if((uint32_t)(isrflags & HRTIM_FLAG_SYSFLT) != (uint32_t)RESET)
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f003 0320 	and.w	r3, r3, #32
 8008172:	2b00      	cmp	r3, #0
 8008174:	d00c      	beq.n	8008190 <HRTIM_HRTIM_ISR+0xf4>
  {
    if((uint32_t)(ierits & HRTIM_IT_SYSFLT) != (uint32_t)RESET)
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	f003 0320 	and.w	r3, r3, #32
 800817c:	2b00      	cmp	r3, #0
 800817e:	d007      	beq.n	8008190 <HRTIM_HRTIM_ISR+0xf4>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_SYSFLT);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	2220      	movs	r2, #32
 8008186:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SystemFaultCallback(hhrtim);
#else
      HAL_HRTIM_SystemFaultCallback(hhrtim);
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f7ff fb9f 	bl	80078ce <HAL_HRTIM_SystemFaultCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8008190:	bf00      	nop
 8008192:	3710      	adds	r7, #16
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <HRTIM_Master_ISR>:
* @brief  Master timer interrupts service routine
* @param  hhrtim pointer to HAL HRTIM handle
* @retval None
*/
static void HRTIM_Master_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b086      	sub	sp, #24
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 80081a8:	617b      	str	r3, [r7, #20]
  uint32_t ierits    = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 80081b2:	613b      	str	r3, [r7, #16]
  uint32_t misrflags = READ_REG(hhrtim->Instance->sMasterRegs.MISR);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	60fb      	str	r3, [r7, #12]
  uint32_t mdierits  = READ_REG(hhrtim->Instance->sMasterRegs.MDIER);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	68db      	ldr	r3, [r3, #12]
 80081c2:	60bb      	str	r3, [r7, #8]

  /* Burst mode period event */
  if((uint32_t)(isrflags & HRTIM_FLAG_BMPER) != (uint32_t)RESET)
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d00d      	beq.n	80081ea <HRTIM_Master_ISR+0x52>
  {
    if((uint32_t)(ierits & HRTIM_IT_BMPER) != (uint32_t)RESET)
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d008      	beq.n	80081ea <HRTIM_Master_ISR+0x52>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_BMPER);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80081e0:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Burst mode period event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->BurstModePeriodCallback(hhrtim);
#else
      HAL_HRTIM_BurstModePeriodCallback(hhrtim);
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f7ff fb7c 	bl	80078e2 <HAL_HRTIM_BurstModePeriodCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 1 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP1) != (uint32_t)RESET)
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	f003 0301 	and.w	r3, r3, #1
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d00c      	beq.n	800820e <HRTIM_Master_ISR+0x76>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP1) != (uint32_t)RESET)
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	f003 0301 	and.w	r3, r3, #1
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d007      	beq.n	800820e <HRTIM_Master_ISR+0x76>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP1);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	2201      	movs	r2, #1
 8008204:	609a      	str	r2, [r3, #8]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8008206:	2105      	movs	r1, #5
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f7ff fb89 	bl	8007920 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 2 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP2) != (uint32_t)RESET)
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f003 0302 	and.w	r3, r3, #2
 8008214:	2b00      	cmp	r3, #0
 8008216:	d00c      	beq.n	8008232 <HRTIM_Master_ISR+0x9a>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP2) != (uint32_t)RESET)
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	f003 0302 	and.w	r3, r3, #2
 800821e:	2b00      	cmp	r3, #0
 8008220:	d007      	beq.n	8008232 <HRTIM_Master_ISR+0x9a>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP2);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	2202      	movs	r2, #2
 8008228:	609a      	str	r2, [r3, #8]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800822a:	2105      	movs	r1, #5
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f7fa fe1b 	bl	8002e68 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 3 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP3) != (uint32_t)RESET)
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	f003 0304 	and.w	r3, r3, #4
 8008238:	2b00      	cmp	r3, #0
 800823a:	d00c      	beq.n	8008256 <HRTIM_Master_ISR+0xbe>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP3) != (uint32_t)RESET)
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	f003 0304 	and.w	r3, r3, #4
 8008242:	2b00      	cmp	r3, #0
 8008244:	d007      	beq.n	8008256 <HRTIM_Master_ISR+0xbe>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP3);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	2204      	movs	r2, #4
 800824c:	609a      	str	r2, [r3, #8]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800824e:	2105      	movs	r1, #5
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f7fa fe35 	bl	8002ec0 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 4 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP4) != (uint32_t)RESET)
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	f003 0308 	and.w	r3, r3, #8
 800825c:	2b00      	cmp	r3, #0
 800825e:	d00c      	beq.n	800827a <HRTIM_Master_ISR+0xe2>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP4) != (uint32_t)RESET)
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	f003 0308 	and.w	r3, r3, #8
 8008266:	2b00      	cmp	r3, #0
 8008268:	d007      	beq.n	800827a <HRTIM_Master_ISR+0xe2>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP4);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	2208      	movs	r2, #8
 8008270:	609a      	str	r2, [r3, #8]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8008272:	2105      	movs	r1, #5
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f7ff fb5e 	bl	8007936 <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer repetition event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MREP) != (uint32_t)RESET)
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	f003 0310 	and.w	r3, r3, #16
 8008280:	2b00      	cmp	r3, #0
 8008282:	d00c      	beq.n	800829e <HRTIM_Master_ISR+0x106>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MREP) != (uint32_t)RESET)
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	f003 0310 	and.w	r3, r3, #16
 800828a:	2b00      	cmp	r3, #0
 800828c:	d007      	beq.n	800829e <HRTIM_Master_ISR+0x106>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MREP);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	2210      	movs	r2, #16
 8008294:	609a      	str	r2, [r3, #8]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8008296:	2105      	movs	r1, #5
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f7fa fe8b 	bl	8002fb4 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Synchronization input event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_SYNC) != (uint32_t)RESET)
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f003 0320 	and.w	r3, r3, #32
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d00b      	beq.n	80082c0 <HRTIM_Master_ISR+0x128>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_SYNC) != (uint32_t)RESET)
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	f003 0320 	and.w	r3, r3, #32
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d006      	beq.n	80082c0 <HRTIM_Master_ISR+0x128>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_SYNC);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	2220      	movs	r2, #32
 80082b8:	609a      	str	r2, [r3, #8]

      /* Invoke synchronization event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SynchronizationEventCallback(hhrtim);
#else
      HAL_HRTIM_SynchronizationEventCallback(hhrtim);
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f7ff fb1b 	bl	80078f6 <HAL_HRTIM_SynchronizationEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer registers update event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MUPD) != (uint32_t)RESET)
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d00c      	beq.n	80082e4 <HRTIM_Master_ISR+0x14c>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MUPD) != (uint32_t)RESET)
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d007      	beq.n	80082e4 <HRTIM_Master_ISR+0x14c>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MUPD);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	2240      	movs	r2, #64	; 0x40
 80082da:	609a      	str	r2, [r3, #8]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80082dc:	2105      	movs	r1, #5
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f7ff fb13 	bl	800790a <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 80082e4:	bf00      	nop
 80082e6:	3718      	adds	r7, #24
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <HRTIM_Timer_ISR>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
*/
static void HRTIM_Timer_ISR(HRTIM_HandleTypeDef * hhrtim,
                     uint32_t TimerIdx)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b084      	sub	sp, #16
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	6039      	str	r1, [r7, #0]
  uint32_t tisrflags = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxISR);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681a      	ldr	r2, [r3, #0]
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	3301      	adds	r3, #1
 80082fe:	01db      	lsls	r3, r3, #7
 8008300:	4413      	add	r3, r2
 8008302:	3304      	adds	r3, #4
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	60fb      	str	r3, [r7, #12]
  uint32_t tdierits  = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxDIER);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681a      	ldr	r2, [r3, #0]
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	01db      	lsls	r3, r3, #7
 8008310:	4413      	add	r3, r2
 8008312:	338c      	adds	r3, #140	; 0x8c
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	60bb      	str	r3, [r7, #8]

  /* Timer compare 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP1) != (uint32_t)RESET)
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f003 0301 	and.w	r3, r3, #1
 800831e:	2b00      	cmp	r3, #0
 8008320:	d010      	beq.n	8008344 <HRTIM_Timer_ISR+0x58>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP1) != (uint32_t)RESET)
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	f003 0301 	and.w	r3, r3, #1
 8008328:	2b00      	cmp	r3, #0
 800832a:	d00b      	beq.n	8008344 <HRTIM_Timer_ISR+0x58>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP1);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681a      	ldr	r2, [r3, #0]
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	01db      	lsls	r3, r3, #7
 8008334:	4413      	add	r3, r2
 8008336:	3388      	adds	r3, #136	; 0x88
 8008338:	2201      	movs	r2, #1
 800833a:	601a      	str	r2, [r3, #0]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, TimerIdx);
 800833c:	6839      	ldr	r1, [r7, #0]
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f7ff faee 	bl	8007920 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP2) != (uint32_t)RESET)
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f003 0302 	and.w	r3, r3, #2
 800834a:	2b00      	cmp	r3, #0
 800834c:	d010      	beq.n	8008370 <HRTIM_Timer_ISR+0x84>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP2) != (uint32_t)RESET)
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	f003 0302 	and.w	r3, r3, #2
 8008354:	2b00      	cmp	r3, #0
 8008356:	d00b      	beq.n	8008370 <HRTIM_Timer_ISR+0x84>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP2);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681a      	ldr	r2, [r3, #0]
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	01db      	lsls	r3, r3, #7
 8008360:	4413      	add	r3, r2
 8008362:	3388      	adds	r3, #136	; 0x88
 8008364:	2202      	movs	r2, #2
 8008366:	601a      	str	r2, [r3, #0]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, TimerIdx);
 8008368:	6839      	ldr	r1, [r7, #0]
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f7fa fd7c 	bl	8002e68 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 3 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP3) != (uint32_t)RESET)
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f003 0304 	and.w	r3, r3, #4
 8008376:	2b00      	cmp	r3, #0
 8008378:	d010      	beq.n	800839c <HRTIM_Timer_ISR+0xb0>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP3) != (uint32_t)RESET)
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	f003 0304 	and.w	r3, r3, #4
 8008380:	2b00      	cmp	r3, #0
 8008382:	d00b      	beq.n	800839c <HRTIM_Timer_ISR+0xb0>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP3);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681a      	ldr	r2, [r3, #0]
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	01db      	lsls	r3, r3, #7
 800838c:	4413      	add	r3, r2
 800838e:	3388      	adds	r3, #136	; 0x88
 8008390:	2204      	movs	r2, #4
 8008392:	601a      	str	r2, [r3, #0]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, TimerIdx);
 8008394:	6839      	ldr	r1, [r7, #0]
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f7fa fd92 	bl	8002ec0 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 4 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP4) != (uint32_t)RESET)
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f003 0308 	and.w	r3, r3, #8
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d010      	beq.n	80083c8 <HRTIM_Timer_ISR+0xdc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP4) != (uint32_t)RESET)
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	f003 0308 	and.w	r3, r3, #8
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d00b      	beq.n	80083c8 <HRTIM_Timer_ISR+0xdc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP4);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681a      	ldr	r2, [r3, #0]
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	01db      	lsls	r3, r3, #7
 80083b8:	4413      	add	r3, r2
 80083ba:	3388      	adds	r3, #136	; 0x88
 80083bc:	2208      	movs	r2, #8
 80083be:	601a      	str	r2, [r3, #0]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, TimerIdx);
 80083c0:	6839      	ldr	r1, [r7, #0]
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f7ff fab7 	bl	8007936 <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer repetition event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_REP) != (uint32_t)RESET)
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f003 0310 	and.w	r3, r3, #16
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d010      	beq.n	80083f4 <HRTIM_Timer_ISR+0x108>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_REP) != (uint32_t)RESET)
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	f003 0310 	and.w	r3, r3, #16
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d00b      	beq.n	80083f4 <HRTIM_Timer_ISR+0x108>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_REP);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681a      	ldr	r2, [r3, #0]
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	01db      	lsls	r3, r3, #7
 80083e4:	4413      	add	r3, r2
 80083e6:	3388      	adds	r3, #136	; 0x88
 80083e8:	2210      	movs	r2, #16
 80083ea:	601a      	str	r2, [r3, #0]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, TimerIdx);
 80083ec:	6839      	ldr	r1, [r7, #0]
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f7fa fde0 	bl	8002fb4 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer registers update event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_UPD) != (uint32_t)RESET)
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d010      	beq.n	8008420 <HRTIM_Timer_ISR+0x134>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_UPD) != (uint32_t)RESET)
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008404:	2b00      	cmp	r3, #0
 8008406:	d00b      	beq.n	8008420 <HRTIM_Timer_ISR+0x134>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_UPD);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681a      	ldr	r2, [r3, #0]
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	01db      	lsls	r3, r3, #7
 8008410:	4413      	add	r3, r2
 8008412:	3388      	adds	r3, #136	; 0x88
 8008414:	2240      	movs	r2, #64	; 0x40
 8008416:	601a      	str	r2, [r3, #0]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, TimerIdx);
 8008418:	6839      	ldr	r1, [r7, #0]
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f7ff fa75 	bl	800790a <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT1) != (uint32_t)RESET)
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008426:	2b00      	cmp	r3, #0
 8008428:	d010      	beq.n	800844c <HRTIM_Timer_ISR+0x160>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT1) != (uint32_t)RESET)
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008430:	2b00      	cmp	r3, #0
 8008432:	d00b      	beq.n	800844c <HRTIM_Timer_ISR+0x160>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT1);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681a      	ldr	r2, [r3, #0]
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	01db      	lsls	r3, r3, #7
 800843c:	4413      	add	r3, r2
 800843e:	3388      	adds	r3, #136	; 0x88
 8008440:	2280      	movs	r2, #128	; 0x80
 8008442:	601a      	str	r2, [r3, #0]

      /* Invoke capture 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture1EventCallback(hhrtim, TimerIdx);
 8008444:	6839      	ldr	r1, [r7, #0]
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f7ff fa80 	bl	800794c <HAL_HRTIM_Capture1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT2) != (uint32_t)RESET)
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008452:	2b00      	cmp	r3, #0
 8008454:	d011      	beq.n	800847a <HRTIM_Timer_ISR+0x18e>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT2) != (uint32_t)RESET)
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800845c:	2b00      	cmp	r3, #0
 800845e:	d00c      	beq.n	800847a <HRTIM_Timer_ISR+0x18e>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT2);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	01db      	lsls	r3, r3, #7
 8008468:	4413      	add	r3, r2
 800846a:	3388      	adds	r3, #136	; 0x88
 800846c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008470:	601a      	str	r2, [r3, #0]

      /* Invoke capture 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture2EventCallback(hhrtim, TimerIdx);
 8008472:	6839      	ldr	r1, [r7, #0]
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f7ff fa74 	bl	8007962 <HAL_HRTIM_Capture2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET1) != (uint32_t)RESET)
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008480:	2b00      	cmp	r3, #0
 8008482:	d011      	beq.n	80084a8 <HRTIM_Timer_ISR+0x1bc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET1) != (uint32_t)RESET)
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800848a:	2b00      	cmp	r3, #0
 800848c:	d00c      	beq.n	80084a8 <HRTIM_Timer_ISR+0x1bc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET1);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681a      	ldr	r2, [r3, #0]
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	01db      	lsls	r3, r3, #7
 8008496:	4413      	add	r3, r2
 8008498:	3388      	adds	r3, #136	; 0x88
 800849a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800849e:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1SetCallback(hhrtim, TimerIdx);
 80084a0:	6839      	ldr	r1, [r7, #0]
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f7ff fa7e 	bl	80079a4 <HAL_HRTIM_Output1SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST1) != (uint32_t)RESET)
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d011      	beq.n	80084d6 <HRTIM_Timer_ISR+0x1ea>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST1) != (uint32_t)RESET)
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d00c      	beq.n	80084d6 <HRTIM_Timer_ISR+0x1ea>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST1);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681a      	ldr	r2, [r3, #0]
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	01db      	lsls	r3, r3, #7
 80084c4:	4413      	add	r3, r2
 80084c6:	3388      	adds	r3, #136	; 0x88
 80084c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80084cc:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1ResetCallback(hhrtim, TimerIdx);
 80084ce:	6839      	ldr	r1, [r7, #0]
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f7ff fa72 	bl	80079ba <HAL_HRTIM_Output1ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET2) != (uint32_t)RESET)
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d011      	beq.n	8008504 <HRTIM_Timer_ISR+0x218>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET2) != (uint32_t)RESET)
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d00c      	beq.n	8008504 <HRTIM_Timer_ISR+0x218>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET2);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681a      	ldr	r2, [r3, #0]
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	01db      	lsls	r3, r3, #7
 80084f2:	4413      	add	r3, r2
 80084f4:	3388      	adds	r3, #136	; 0x88
 80084f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80084fa:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2SetCallback(hhrtim, TimerIdx);
 80084fc:	6839      	ldr	r1, [r7, #0]
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f7ff fa66 	bl	80079d0 <HAL_HRTIM_Output2SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST2) != (uint32_t)RESET)
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800850a:	2b00      	cmp	r3, #0
 800850c:	d011      	beq.n	8008532 <HRTIM_Timer_ISR+0x246>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST2) != (uint32_t)RESET)
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008514:	2b00      	cmp	r3, #0
 8008516:	d00c      	beq.n	8008532 <HRTIM_Timer_ISR+0x246>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST2);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681a      	ldr	r2, [r3, #0]
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	01db      	lsls	r3, r3, #7
 8008520:	4413      	add	r3, r2
 8008522:	3388      	adds	r3, #136	; 0x88
 8008524:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008528:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2ResetCallback(hhrtim, TimerIdx);
 800852a:	6839      	ldr	r1, [r7, #0]
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f7ff fa5a 	bl	80079e6 <HAL_HRTIM_Output2ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST) != (uint32_t)RESET)
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008538:	2b00      	cmp	r3, #0
 800853a:	d011      	beq.n	8008560 <HRTIM_Timer_ISR+0x274>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST) != (uint32_t)RESET)
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008542:	2b00      	cmp	r3, #0
 8008544:	d00c      	beq.n	8008560 <HRTIM_Timer_ISR+0x274>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681a      	ldr	r2, [r3, #0]
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	01db      	lsls	r3, r3, #7
 800854e:	4413      	add	r3, r2
 8008550:	3388      	adds	r3, #136	; 0x88
 8008552:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008556:	601a      	str	r2, [r3, #0]

      /* Invoke timer reset callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->CounterResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_CounterResetCallback(hhrtim, TimerIdx);
 8008558:	6839      	ldr	r1, [r7, #0]
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f7ff fa17 	bl	800798e <HAL_HRTIM_CounterResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Delayed protection event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_DLYPRT) != (uint32_t)RESET)
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008566:	2b00      	cmp	r3, #0
 8008568:	d011      	beq.n	800858e <HRTIM_Timer_ISR+0x2a2>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_DLYPRT) != (uint32_t)RESET)
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008570:	2b00      	cmp	r3, #0
 8008572:	d00c      	beq.n	800858e <HRTIM_Timer_ISR+0x2a2>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_DLYPRT);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681a      	ldr	r2, [r3, #0]
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	01db      	lsls	r3, r3, #7
 800857c:	4413      	add	r3, r2
 800857e:	3388      	adds	r3, #136	; 0x88
 8008580:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008584:	601a      	str	r2, [r3, #0]

      /* Invoke delayed protection callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DelayedProtectionCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_DelayedProtectionCallback(hhrtim, TimerIdx);
 8008586:	6839      	ldr	r1, [r7, #0]
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f7ff f9f5 	bl	8007978 <HAL_HRTIM_DelayedProtectionCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 800858e:	bf00      	nop
 8008590:	3710      	adds	r7, #16
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
	...

08008598 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d101      	bne.n	80085aa <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 80085a6:	2301      	movs	r3, #1
 80085a8:	e097      	b.n	80086da <HAL_LPTIM_Init+0x142>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80085b6:	b2db      	uxtb	r3, r3
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d106      	bne.n	80085ca <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2200      	movs	r2, #0
 80085c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f7fa f99d 	bl	8002904 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2202      	movs	r2, #2
 80085ce:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	68db      	ldr	r3, [r3, #12]
 80085d8:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	2b01      	cmp	r3, #1
 80085e0:	d004      	beq.n	80085ec <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80085ea:	d103      	bne.n	80085f4 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	f023 031e 	bic.w	r3, r3, #30
 80085f2:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	695b      	ldr	r3, [r3, #20]
 80085f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d003      	beq.n	8008608 <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8008600:	68fa      	ldr	r2, [r7, #12]
 8008602:	4b38      	ldr	r3, [pc, #224]	; (80086e4 <HAL_LPTIM_Init+0x14c>)
 8008604:	4013      	ands	r3, r2
 8008606:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8008608:	68fa      	ldr	r2, [r7, #12]
 800860a:	4b37      	ldr	r3, [pc, #220]	; (80086e8 <HAL_LPTIM_Init+0x150>)
 800860c:	4013      	ands	r3, r2
 800860e:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8008618:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 800861e:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8008624:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 800862a:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800862c:	68fa      	ldr	r2, [r7, #12]
 800862e:	4313      	orrs	r3, r2
 8008630:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d107      	bne.n	800864a <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8008642:	4313      	orrs	r3, r2
 8008644:	68fa      	ldr	r2, [r7, #12]
 8008646:	4313      	orrs	r3, r2
 8008648:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	685b      	ldr	r3, [r3, #4]
 800864e:	2b01      	cmp	r3, #1
 8008650:	d004      	beq.n	800865c <HAL_LPTIM_Init+0xc4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008656:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800865a:	d107      	bne.n	800866c <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8008664:	4313      	orrs	r3, r2
 8008666:	68fa      	ldr	r2, [r7, #12]
 8008668:	4313      	orrs	r3, r2
 800866a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	695b      	ldr	r3, [r3, #20]
 8008670:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008674:	4293      	cmp	r3, r2
 8008676:	d00a      	beq.n	800868e <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8008680:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8008686:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8008688:	68fa      	ldr	r2, [r7, #12]
 800868a:	4313      	orrs	r3, r2
 800868c:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	68fa      	ldr	r2, [r7, #12]
 8008694:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a14      	ldr	r2, [pc, #80]	; (80086ec <HAL_LPTIM_Init+0x154>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d004      	beq.n	80086aa <HAL_LPTIM_Init+0x112>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a12      	ldr	r2, [pc, #72]	; (80086f0 <HAL_LPTIM_Init+0x158>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d108      	bne.n	80086bc <HAL_LPTIM_Init+0x124>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	430a      	orrs	r2, r1
 80086b8:	625a      	str	r2, [r3, #36]	; 0x24
 80086ba:	e009      	b.n	80086d0 <HAL_LPTIM_Init+0x138>
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a0c      	ldr	r2, [pc, #48]	; (80086f4 <HAL_LPTIM_Init+0x15c>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d104      	bne.n	80086d0 <HAL_LPTIM_Init+0x138>
    {
      /* Check LPTIM3 Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM3 Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	687a      	ldr	r2, [r7, #4]
 80086cc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80086ce:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2201      	movs	r2, #1
 80086d4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 80086d8:	2300      	movs	r3, #0
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3710      	adds	r7, #16
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}
 80086e2:	bf00      	nop
 80086e4:	ffff1f3f 	.word	0xffff1f3f
 80086e8:	ff19f1fe 	.word	0xff19f1fe
 80086ec:	40002400 	.word	0x40002400
 80086f0:	58002400 	.word	0x58002400
 80086f4:	58002800 	.word	0x58002800

080086f8 <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b082      	sub	sp, #8
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2202      	movs	r2, #2
 8008706:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	2b01      	cmp	r3, #1
 8008710:	d00c      	beq.n	800872c <HAL_LPTIM_Counter_Start_IT+0x34>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008716:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800871a:	d107      	bne.n	800872c <HAL_LPTIM_Counter_Start_IT+0x34>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	68da      	ldr	r2, [r3, #12]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 800872a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	691a      	ldr	r2, [r3, #16]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f042 0201 	orr.w	r2, r2, #1
 800873a:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	2210      	movs	r2, #16
 8008742:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	683a      	ldr	r2, [r7, #0]
 800874a:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800874c:	2110      	movs	r1, #16
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f000 f91e 	bl	8008990 <LPTIM_WaitForFlag>
 8008754:	4603      	mov	r3, r0
 8008756:	2b03      	cmp	r3, #3
 8008758:	d101      	bne.n	800875e <HAL_LPTIM_Counter_Start_IT+0x66>
  {
    return HAL_TIMEOUT;
 800875a:	2303      	movs	r3, #3
 800875c:	e02f      	b.n	80087be <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f000 f946 	bl	80089f0 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f000 f905 	bl	8008974 <HAL_LPTIM_GetState>
 800876a:	4603      	mov	r3, r0
 800876c:	2b03      	cmp	r3, #3
 800876e:	d101      	bne.n	8008774 <HAL_LPTIM_Counter_Start_IT+0x7c>
  {
    return HAL_TIMEOUT;
 8008770:	2303      	movs	r3, #3
 8008772:	e024      	b.n	80087be <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	689a      	ldr	r2, [r3, #8]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f042 0210 	orr.w	r2, r2, #16
 8008782:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	689a      	ldr	r2, [r3, #8]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f042 0202 	orr.w	r2, r2, #2
 8008792:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	691a      	ldr	r2, [r3, #16]
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f042 0201 	orr.w	r2, r2, #1
 80087a2:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	691a      	ldr	r2, [r3, #16]
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f042 0204 	orr.w	r2, r2, #4
 80087b2:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2201      	movs	r2, #1
 80087b8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 80087bc:	2300      	movs	r3, #0
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3708      	adds	r7, #8
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}

080087c6 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 80087c6:	b580      	push	{r7, lr}
 80087c8:	b082      	sub	sp, #8
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f003 0301 	and.w	r3, r3, #1
 80087d8:	2b01      	cmp	r3, #1
 80087da:	d10d      	bne.n	80087f8 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	689b      	ldr	r3, [r3, #8]
 80087e2:	f003 0301 	and.w	r3, r3, #1
 80087e6:	2b01      	cmp	r3, #1
 80087e8:	d106      	bne.n	80087f8 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	2201      	movs	r2, #1
 80087f0:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f000 f882 	bl	80088fc <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f003 0302 	and.w	r3, r3, #2
 8008802:	2b02      	cmp	r3, #2
 8008804:	d10d      	bne.n	8008822 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	689b      	ldr	r3, [r3, #8]
 800880c:	f003 0302 	and.w	r3, r3, #2
 8008810:	2b02      	cmp	r3, #2
 8008812:	d106      	bne.n	8008822 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	2202      	movs	r2, #2
 800881a:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f7fa fb15 	bl	8002e4c <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f003 0304 	and.w	r3, r3, #4
 800882c:	2b04      	cmp	r3, #4
 800882e:	d10d      	bne.n	800884c <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	689b      	ldr	r3, [r3, #8]
 8008836:	f003 0304 	and.w	r3, r3, #4
 800883a:	2b04      	cmp	r3, #4
 800883c:	d106      	bne.n	800884c <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	2204      	movs	r2, #4
 8008844:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f000 f862 	bl	8008910 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f003 0308 	and.w	r3, r3, #8
 8008856:	2b08      	cmp	r3, #8
 8008858:	d10d      	bne.n	8008876 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	689b      	ldr	r3, [r3, #8]
 8008860:	f003 0308 	and.w	r3, r3, #8
 8008864:	2b08      	cmp	r3, #8
 8008866:	d106      	bne.n	8008876 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	2208      	movs	r2, #8
 800886e:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f000 f857 	bl	8008924 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f003 0310 	and.w	r3, r3, #16
 8008880:	2b10      	cmp	r3, #16
 8008882:	d10d      	bne.n	80088a0 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	689b      	ldr	r3, [r3, #8]
 800888a:	f003 0310 	and.w	r3, r3, #16
 800888e:	2b10      	cmp	r3, #16
 8008890:	d106      	bne.n	80088a0 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	2210      	movs	r2, #16
 8008898:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f000 f84c 	bl	8008938 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f003 0320 	and.w	r3, r3, #32
 80088aa:	2b20      	cmp	r3, #32
 80088ac:	d10d      	bne.n	80088ca <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	689b      	ldr	r3, [r3, #8]
 80088b4:	f003 0320 	and.w	r3, r3, #32
 80088b8:	2b20      	cmp	r3, #32
 80088ba:	d106      	bne.n	80088ca <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	2220      	movs	r2, #32
 80088c2:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f000 f841 	bl	800894c <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088d4:	2b40      	cmp	r3, #64	; 0x40
 80088d6:	d10d      	bne.n	80088f4 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	689b      	ldr	r3, [r3, #8]
 80088de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088e2:	2b40      	cmp	r3, #64	; 0x40
 80088e4:	d106      	bne.n	80088f4 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	2240      	movs	r2, #64	; 0x40
 80088ec:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f000 f836 	bl	8008960 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 80088f4:	bf00      	nop
 80088f6:	3708      	adds	r7, #8
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}

080088fc <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b083      	sub	sp, #12
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8008904:	bf00      	nop
 8008906:	370c      	adds	r7, #12
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr

08008910 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8008910:	b480      	push	{r7}
 8008912:	b083      	sub	sp, #12
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8008918:	bf00      	nop
 800891a:	370c      	adds	r7, #12
 800891c:	46bd      	mov	sp, r7
 800891e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008922:	4770      	bx	lr

08008924 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8008924:	b480      	push	{r7}
 8008926:	b083      	sub	sp, #12
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 800892c:	bf00      	nop
 800892e:	370c      	adds	r7, #12
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr

08008938 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8008938:	b480      	push	{r7}
 800893a:	b083      	sub	sp, #12
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8008940:	bf00      	nop
 8008942:	370c      	adds	r7, #12
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr

0800894c <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 800894c:	b480      	push	{r7}
 800894e:	b083      	sub	sp, #12
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8008954:	bf00      	nop
 8008956:	370c      	adds	r7, #12
 8008958:	46bd      	mov	sp, r7
 800895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895e:	4770      	bx	lr

08008960 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8008960:	b480      	push	{r7}
 8008962:	b083      	sub	sp, #12
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8008968:	bf00      	nop
 800896a:	370c      	adds	r7, #12
 800896c:	46bd      	mov	sp, r7
 800896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008972:	4770      	bx	lr

08008974 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 8008974:	b480      	push	{r7}
 8008976:	b083      	sub	sp, #12
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8008982:	b2db      	uxtb	r3, r3
}
 8008984:	4618      	mov	r0, r3
 8008986:	370c      	adds	r7, #12
 8008988:	46bd      	mov	sp, r7
 800898a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898e:	4770      	bx	lr

08008990 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8008990:	b480      	push	{r7}
 8008992:	b085      	sub	sp, #20
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 800899a:	2300      	movs	r3, #0
 800899c:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 800899e:	4b12      	ldr	r3, [pc, #72]	; (80089e8 <LPTIM_WaitForFlag+0x58>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	4a12      	ldr	r2, [pc, #72]	; (80089ec <LPTIM_WaitForFlag+0x5c>)
 80089a4:	fba2 2303 	umull	r2, r3, r2, r3
 80089a8:	0b9b      	lsrs	r3, r3, #14
 80089aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80089ae:	fb02 f303 	mul.w	r3, r2, r3
 80089b2:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	3b01      	subs	r3, #1
 80089b8:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d101      	bne.n	80089c4 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 80089c0:	2303      	movs	r3, #3
 80089c2:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	681a      	ldr	r2, [r3, #0]
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	4013      	ands	r3, r2
 80089ce:	683a      	ldr	r2, [r7, #0]
 80089d0:	429a      	cmp	r2, r3
 80089d2:	d002      	beq.n	80089da <LPTIM_WaitForFlag+0x4a>
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d1ec      	bne.n	80089b4 <LPTIM_WaitForFlag+0x24>

  return result;
 80089da:	7bfb      	ldrb	r3, [r7, #15]
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3714      	adds	r7, #20
 80089e0:	46bd      	mov	sp, r7
 80089e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e6:	4770      	bx	lr
 80089e8:	20000010 	.word	0x20000010
 80089ec:	d1b71759 	.word	0xd1b71759

080089f0 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b08c      	sub	sp, #48	; 0x30
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 80089f8:	2300      	movs	r3, #0
 80089fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089fc:	f3ef 8310 	mrs	r3, PRIMASK
 8008a00:	60fb      	str	r3, [r7, #12]
  return(result);
 8008a02:	68fb      	ldr	r3, [r7, #12]
  uint32_t tmpARR;
  uint32_t primask_bit;
  uint32_t tmpCFGR2;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8008a04:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a06:	2301      	movs	r3, #1
 8008a08:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	f383 8810 	msr	PRIMASK, r3
}
 8008a10:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4a81      	ldr	r2, [pc, #516]	; (8008c1c <LPTIM_Disable+0x22c>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d02d      	beq.n	8008a78 <LPTIM_Disable+0x88>
 8008a1c:	4a7f      	ldr	r2, [pc, #508]	; (8008c1c <LPTIM_Disable+0x22c>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d830      	bhi.n	8008a84 <LPTIM_Disable+0x94>
 8008a22:	4a7f      	ldr	r2, [pc, #508]	; (8008c20 <LPTIM_Disable+0x230>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d021      	beq.n	8008a6c <LPTIM_Disable+0x7c>
 8008a28:	4a7d      	ldr	r2, [pc, #500]	; (8008c20 <LPTIM_Disable+0x230>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d82a      	bhi.n	8008a84 <LPTIM_Disable+0x94>
 8008a2e:	4a7d      	ldr	r2, [pc, #500]	; (8008c24 <LPTIM_Disable+0x234>)
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d015      	beq.n	8008a60 <LPTIM_Disable+0x70>
 8008a34:	4a7b      	ldr	r2, [pc, #492]	; (8008c24 <LPTIM_Disable+0x234>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d824      	bhi.n	8008a84 <LPTIM_Disable+0x94>
 8008a3a:	4a7b      	ldr	r2, [pc, #492]	; (8008c28 <LPTIM_Disable+0x238>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d003      	beq.n	8008a48 <LPTIM_Disable+0x58>
 8008a40:	4a7a      	ldr	r2, [pc, #488]	; (8008c2c <LPTIM_Disable+0x23c>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d006      	beq.n	8008a54 <LPTIM_Disable+0x64>
    case LPTIM5_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
      break;
#endif /* LPTIM5 */
    default:
      break;
 8008a46:	e01d      	b.n	8008a84 <LPTIM_Disable+0x94>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008a48:	4b79      	ldr	r3, [pc, #484]	; (8008c30 <LPTIM_Disable+0x240>)
 8008a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a4c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008a50:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8008a52:	e018      	b.n	8008a86 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008a54:	4b76      	ldr	r3, [pc, #472]	; (8008c30 <LPTIM_Disable+0x240>)
 8008a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a58:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8008a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8008a5e:	e012      	b.n	8008a86 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
 8008a60:	4b73      	ldr	r3, [pc, #460]	; (8008c30 <LPTIM_Disable+0x240>)
 8008a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a64:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008a68:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8008a6a:	e00c      	b.n	8008a86 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM4_SOURCE();
 8008a6c:	4b70      	ldr	r3, [pc, #448]	; (8008c30 <LPTIM_Disable+0x240>)
 8008a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a70:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008a74:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8008a76:	e006      	b.n	8008a86 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
 8008a78:	4b6d      	ldr	r3, [pc, #436]	; (8008c30 <LPTIM_Disable+0x240>)
 8008a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a7c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008a80:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8008a82:	e000      	b.n	8008a86 <LPTIM_Disable+0x96>
      break;
 8008a84:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	689b      	ldr	r3, [r3, #8]
 8008a8c:	627b      	str	r3, [r7, #36]	; 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	68db      	ldr	r3, [r3, #12]
 8008a94:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	695b      	ldr	r3, [r3, #20]
 8008a9c:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	699b      	ldr	r3, [r3, #24]
 8008aa4:	61bb      	str	r3, [r7, #24]
  tmpCFGR2 = hlptim->Instance->CFGR2;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aac:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4a5a      	ldr	r2, [pc, #360]	; (8008c1c <LPTIM_Disable+0x22c>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d059      	beq.n	8008b6c <LPTIM_Disable+0x17c>
 8008ab8:	4a58      	ldr	r2, [pc, #352]	; (8008c1c <LPTIM_Disable+0x22c>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d867      	bhi.n	8008b8e <LPTIM_Disable+0x19e>
 8008abe:	4a58      	ldr	r2, [pc, #352]	; (8008c20 <LPTIM_Disable+0x230>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d042      	beq.n	8008b4a <LPTIM_Disable+0x15a>
 8008ac4:	4a56      	ldr	r2, [pc, #344]	; (8008c20 <LPTIM_Disable+0x230>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d861      	bhi.n	8008b8e <LPTIM_Disable+0x19e>
 8008aca:	4a56      	ldr	r2, [pc, #344]	; (8008c24 <LPTIM_Disable+0x234>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d02b      	beq.n	8008b28 <LPTIM_Disable+0x138>
 8008ad0:	4a54      	ldr	r2, [pc, #336]	; (8008c24 <LPTIM_Disable+0x234>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d85b      	bhi.n	8008b8e <LPTIM_Disable+0x19e>
 8008ad6:	4a54      	ldr	r2, [pc, #336]	; (8008c28 <LPTIM_Disable+0x238>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d003      	beq.n	8008ae4 <LPTIM_Disable+0xf4>
 8008adc:	4a53      	ldr	r2, [pc, #332]	; (8008c2c <LPTIM_Disable+0x23c>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d011      	beq.n	8008b06 <LPTIM_Disable+0x116>
      __HAL_RCC_LPTIM5_FORCE_RESET();
      __HAL_RCC_LPTIM5_RELEASE_RESET();
      break;
#endif /* LPTIM5 */
    default:
      break;
 8008ae2:	e054      	b.n	8008b8e <LPTIM_Disable+0x19e>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8008ae4:	4b52      	ldr	r3, [pc, #328]	; (8008c30 <LPTIM_Disable+0x240>)
 8008ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008aea:	4a51      	ldr	r2, [pc, #324]	; (8008c30 <LPTIM_Disable+0x240>)
 8008aec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008af0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8008af4:	4b4e      	ldr	r3, [pc, #312]	; (8008c30 <LPTIM_Disable+0x240>)
 8008af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008afa:	4a4d      	ldr	r2, [pc, #308]	; (8008c30 <LPTIM_Disable+0x240>)
 8008afc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008b00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      break;
 8008b04:	e044      	b.n	8008b90 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8008b06:	4b4a      	ldr	r3, [pc, #296]	; (8008c30 <LPTIM_Disable+0x240>)
 8008b08:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008b0c:	4a48      	ldr	r2, [pc, #288]	; (8008c30 <LPTIM_Disable+0x240>)
 8008b0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008b12:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8008b16:	4b46      	ldr	r3, [pc, #280]	; (8008c30 <LPTIM_Disable+0x240>)
 8008b18:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008b1c:	4a44      	ldr	r2, [pc, #272]	; (8008c30 <LPTIM_Disable+0x240>)
 8008b1e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008b22:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8008b26:	e033      	b.n	8008b90 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM3_FORCE_RESET();
 8008b28:	4b41      	ldr	r3, [pc, #260]	; (8008c30 <LPTIM_Disable+0x240>)
 8008b2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008b2e:	4a40      	ldr	r2, [pc, #256]	; (8008c30 <LPTIM_Disable+0x240>)
 8008b30:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008b34:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM3_RELEASE_RESET();
 8008b38:	4b3d      	ldr	r3, [pc, #244]	; (8008c30 <LPTIM_Disable+0x240>)
 8008b3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008b3e:	4a3c      	ldr	r2, [pc, #240]	; (8008c30 <LPTIM_Disable+0x240>)
 8008b40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b44:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8008b48:	e022      	b.n	8008b90 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM4_FORCE_RESET();
 8008b4a:	4b39      	ldr	r3, [pc, #228]	; (8008c30 <LPTIM_Disable+0x240>)
 8008b4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008b50:	4a37      	ldr	r2, [pc, #220]	; (8008c30 <LPTIM_Disable+0x240>)
 8008b52:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008b56:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM4_RELEASE_RESET();
 8008b5a:	4b35      	ldr	r3, [pc, #212]	; (8008c30 <LPTIM_Disable+0x240>)
 8008b5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008b60:	4a33      	ldr	r2, [pc, #204]	; (8008c30 <LPTIM_Disable+0x240>)
 8008b62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b66:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8008b6a:	e011      	b.n	8008b90 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM5_FORCE_RESET();
 8008b6c:	4b30      	ldr	r3, [pc, #192]	; (8008c30 <LPTIM_Disable+0x240>)
 8008b6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008b72:	4a2f      	ldr	r2, [pc, #188]	; (8008c30 <LPTIM_Disable+0x240>)
 8008b74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008b78:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM5_RELEASE_RESET();
 8008b7c:	4b2c      	ldr	r3, [pc, #176]	; (8008c30 <LPTIM_Disable+0x240>)
 8008b7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008b82:	4a2b      	ldr	r2, [pc, #172]	; (8008c30 <LPTIM_Disable+0x240>)
 8008b84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b88:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8008b8c:	e000      	b.n	8008b90 <LPTIM_Disable+0x1a0>
      break;
 8008b8e:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8008b90:	69fb      	ldr	r3, [r7, #28]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d103      	bne.n	8008b9e <LPTIM_Disable+0x1ae>
 8008b96:	69bb      	ldr	r3, [r7, #24]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	f000 80d1 	beq.w	8008d40 <LPTIM_Disable+0x350>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4a1e      	ldr	r2, [pc, #120]	; (8008c1c <LPTIM_Disable+0x22c>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d031      	beq.n	8008c0c <LPTIM_Disable+0x21c>
 8008ba8:	4a1c      	ldr	r2, [pc, #112]	; (8008c1c <LPTIM_Disable+0x22c>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d842      	bhi.n	8008c34 <LPTIM_Disable+0x244>
 8008bae:	4a1c      	ldr	r2, [pc, #112]	; (8008c20 <LPTIM_Disable+0x230>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d024      	beq.n	8008bfe <LPTIM_Disable+0x20e>
 8008bb4:	4a1a      	ldr	r2, [pc, #104]	; (8008c20 <LPTIM_Disable+0x230>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d83c      	bhi.n	8008c34 <LPTIM_Disable+0x244>
 8008bba:	4a1a      	ldr	r2, [pc, #104]	; (8008c24 <LPTIM_Disable+0x234>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d017      	beq.n	8008bf0 <LPTIM_Disable+0x200>
 8008bc0:	4a18      	ldr	r2, [pc, #96]	; (8008c24 <LPTIM_Disable+0x234>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d836      	bhi.n	8008c34 <LPTIM_Disable+0x244>
 8008bc6:	4a18      	ldr	r2, [pc, #96]	; (8008c28 <LPTIM_Disable+0x238>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d003      	beq.n	8008bd4 <LPTIM_Disable+0x1e4>
 8008bcc:	4a17      	ldr	r2, [pc, #92]	; (8008c2c <LPTIM_Disable+0x23c>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d007      	beq.n	8008be2 <LPTIM_Disable+0x1f2>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
        break;
#endif /* LPTIM5 */
      default:
        break;
 8008bd2:	e02f      	b.n	8008c34 <LPTIM_Disable+0x244>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_D2PCLK1);
 8008bd4:	4b16      	ldr	r3, [pc, #88]	; (8008c30 <LPTIM_Disable+0x240>)
 8008bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bd8:	4a15      	ldr	r2, [pc, #84]	; (8008c30 <LPTIM_Disable+0x240>)
 8008bda:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8008bde:	6553      	str	r3, [r2, #84]	; 0x54
        break;
 8008be0:	e029      	b.n	8008c36 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_D3PCLK1);
 8008be2:	4b13      	ldr	r3, [pc, #76]	; (8008c30 <LPTIM_Disable+0x240>)
 8008be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008be6:	4a12      	ldr	r2, [pc, #72]	; (8008c30 <LPTIM_Disable+0x240>)
 8008be8:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8008bec:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8008bee:	e022      	b.n	8008c36 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_D3PCLK1);
 8008bf0:	4b0f      	ldr	r3, [pc, #60]	; (8008c30 <LPTIM_Disable+0x240>)
 8008bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bf4:	4a0e      	ldr	r2, [pc, #56]	; (8008c30 <LPTIM_Disable+0x240>)
 8008bf6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8008bfa:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8008bfc:	e01b      	b.n	8008c36 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM4_CONFIG(RCC_LPTIM4CLKSOURCE_D3PCLK1);
 8008bfe:	4b0c      	ldr	r3, [pc, #48]	; (8008c30 <LPTIM_Disable+0x240>)
 8008c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c02:	4a0b      	ldr	r2, [pc, #44]	; (8008c30 <LPTIM_Disable+0x240>)
 8008c04:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8008c08:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8008c0a:	e014      	b.n	8008c36 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
 8008c0c:	4b08      	ldr	r3, [pc, #32]	; (8008c30 <LPTIM_Disable+0x240>)
 8008c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c10:	4a07      	ldr	r2, [pc, #28]	; (8008c30 <LPTIM_Disable+0x240>)
 8008c12:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8008c16:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8008c18:	e00d      	b.n	8008c36 <LPTIM_Disable+0x246>
 8008c1a:	bf00      	nop
 8008c1c:	58003000 	.word	0x58003000
 8008c20:	58002c00 	.word	0x58002c00
 8008c24:	58002800 	.word	0x58002800
 8008c28:	40002400 	.word	0x40002400
 8008c2c:	58002400 	.word	0x58002400
 8008c30:	58024400 	.word	0x58024400
        break;
 8008c34:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8008c36:	69fb      	ldr	r3, [r7, #28]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d01a      	beq.n	8008c72 <LPTIM_Disable+0x282>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	691a      	ldr	r2, [r3, #16]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f042 0201 	orr.w	r2, r2, #1
 8008c4a:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	69fa      	ldr	r2, [r7, #28]
 8008c52:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8008c54:	2108      	movs	r1, #8
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f7ff fe9a 	bl	8008990 <LPTIM_WaitForFlag>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	2b03      	cmp	r3, #3
 8008c60:	d103      	bne.n	8008c6a <LPTIM_Disable+0x27a>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2203      	movs	r2, #3
 8008c66:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	2208      	movs	r2, #8
 8008c70:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8008c72:	69bb      	ldr	r3, [r7, #24]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d01a      	beq.n	8008cae <LPTIM_Disable+0x2be>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	691a      	ldr	r2, [r3, #16]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f042 0201 	orr.w	r2, r2, #1
 8008c86:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	69ba      	ldr	r2, [r7, #24]
 8008c8e:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8008c90:	2110      	movs	r1, #16
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f7ff fe7c 	bl	8008990 <LPTIM_WaitForFlag>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	2b03      	cmp	r3, #3
 8008c9c:	d103      	bne.n	8008ca6 <LPTIM_Disable+0x2b6>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2203      	movs	r2, #3
 8008ca2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	2210      	movs	r2, #16
 8008cac:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	4a32      	ldr	r2, [pc, #200]	; (8008d7c <LPTIM_Disable+0x38c>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d039      	beq.n	8008d2c <LPTIM_Disable+0x33c>
 8008cb8:	4a30      	ldr	r2, [pc, #192]	; (8008d7c <LPTIM_Disable+0x38c>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d83f      	bhi.n	8008d3e <LPTIM_Disable+0x34e>
 8008cbe:	4a30      	ldr	r2, [pc, #192]	; (8008d80 <LPTIM_Disable+0x390>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d02a      	beq.n	8008d1a <LPTIM_Disable+0x32a>
 8008cc4:	4a2e      	ldr	r2, [pc, #184]	; (8008d80 <LPTIM_Disable+0x390>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d839      	bhi.n	8008d3e <LPTIM_Disable+0x34e>
 8008cca:	4a2e      	ldr	r2, [pc, #184]	; (8008d84 <LPTIM_Disable+0x394>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d01b      	beq.n	8008d08 <LPTIM_Disable+0x318>
 8008cd0:	4a2c      	ldr	r2, [pc, #176]	; (8008d84 <LPTIM_Disable+0x394>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d833      	bhi.n	8008d3e <LPTIM_Disable+0x34e>
 8008cd6:	4a2c      	ldr	r2, [pc, #176]	; (8008d88 <LPTIM_Disable+0x398>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d003      	beq.n	8008ce4 <LPTIM_Disable+0x2f4>
 8008cdc:	4a2b      	ldr	r2, [pc, #172]	; (8008d8c <LPTIM_Disable+0x39c>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d009      	beq.n	8008cf6 <LPTIM_Disable+0x306>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
        break;
#endif /* LPTIM5 */
      default:
        break;
 8008ce2:	e02c      	b.n	8008d3e <LPTIM_Disable+0x34e>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8008ce4:	4b2a      	ldr	r3, [pc, #168]	; (8008d90 <LPTIM_Disable+0x3a0>)
 8008ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ce8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008cec:	4928      	ldr	r1, [pc, #160]	; (8008d90 <LPTIM_Disable+0x3a0>)
 8008cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cf0:	4313      	orrs	r3, r2
 8008cf2:	654b      	str	r3, [r1, #84]	; 0x54
        break;
 8008cf4:	e024      	b.n	8008d40 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8008cf6:	4b26      	ldr	r3, [pc, #152]	; (8008d90 <LPTIM_Disable+0x3a0>)
 8008cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cfa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008cfe:	4924      	ldr	r1, [pc, #144]	; (8008d90 <LPTIM_Disable+0x3a0>)
 8008d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d02:	4313      	orrs	r3, r2
 8008d04:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8008d06:	e01b      	b.n	8008d40 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
 8008d08:	4b21      	ldr	r3, [pc, #132]	; (8008d90 <LPTIM_Disable+0x3a0>)
 8008d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d0c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008d10:	491f      	ldr	r1, [pc, #124]	; (8008d90 <LPTIM_Disable+0x3a0>)
 8008d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d14:	4313      	orrs	r3, r2
 8008d16:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8008d18:	e012      	b.n	8008d40 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM4_CONFIG(tmpclksource);
 8008d1a:	4b1d      	ldr	r3, [pc, #116]	; (8008d90 <LPTIM_Disable+0x3a0>)
 8008d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008d22:	491b      	ldr	r1, [pc, #108]	; (8008d90 <LPTIM_Disable+0x3a0>)
 8008d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d26:	4313      	orrs	r3, r2
 8008d28:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8008d2a:	e009      	b.n	8008d40 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
 8008d2c:	4b18      	ldr	r3, [pc, #96]	; (8008d90 <LPTIM_Disable+0x3a0>)
 8008d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d30:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008d34:	4916      	ldr	r1, [pc, #88]	; (8008d90 <LPTIM_Disable+0x3a0>)
 8008d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8008d3c:	e000      	b.n	8008d40 <LPTIM_Disable+0x350>
        break;
 8008d3e:	bf00      	nop
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	691a      	ldr	r2, [r3, #16]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f022 0201 	bic.w	r2, r2, #1
 8008d4e:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d56:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	6a3a      	ldr	r2, [r7, #32]
 8008d5e:	60da      	str	r2, [r3, #12]
  hlptim->Instance->CFGR2 = tmpCFGR2;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	697a      	ldr	r2, [r7, #20]
 8008d66:	625a      	str	r2, [r3, #36]	; 0x24
 8008d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d6a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	f383 8810 	msr	PRIMASK, r3
}
 8008d72:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8008d74:	bf00      	nop
 8008d76:	3730      	adds	r7, #48	; 0x30
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}
 8008d7c:	58003000 	.word	0x58003000
 8008d80:	58002c00 	.word	0x58002c00
 8008d84:	58002800 	.word	0x58002800
 8008d88:	40002400 	.word	0x40002400
 8008d8c:	58002400 	.word	0x58002400
 8008d90:	58024400 	.word	0x58024400

08008d94 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8008d94:	b480      	push	{r7}
 8008d96:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8008d98:	4b05      	ldr	r3, [pc, #20]	; (8008db0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a04      	ldr	r2, [pc, #16]	; (8008db0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008d9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008da2:	6013      	str	r3, [r2, #0]
}
 8008da4:	bf00      	nop
 8008da6:	46bd      	mov	sp, r7
 8008da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dac:	4770      	bx	lr
 8008dae:	bf00      	nop
 8008db0:	58024800 	.word	0x58024800

08008db4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b084      	sub	sp, #16
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008dbc:	4b19      	ldr	r3, [pc, #100]	; (8008e24 <HAL_PWREx_ConfigSupply+0x70>)
 8008dbe:	68db      	ldr	r3, [r3, #12]
 8008dc0:	f003 0304 	and.w	r3, r3, #4
 8008dc4:	2b04      	cmp	r3, #4
 8008dc6:	d00a      	beq.n	8008dde <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008dc8:	4b16      	ldr	r3, [pc, #88]	; (8008e24 <HAL_PWREx_ConfigSupply+0x70>)
 8008dca:	68db      	ldr	r3, [r3, #12]
 8008dcc:	f003 0307 	and.w	r3, r3, #7
 8008dd0:	687a      	ldr	r2, [r7, #4]
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d001      	beq.n	8008dda <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	e01f      	b.n	8008e1a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	e01d      	b.n	8008e1a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008dde:	4b11      	ldr	r3, [pc, #68]	; (8008e24 <HAL_PWREx_ConfigSupply+0x70>)
 8008de0:	68db      	ldr	r3, [r3, #12]
 8008de2:	f023 0207 	bic.w	r2, r3, #7
 8008de6:	490f      	ldr	r1, [pc, #60]	; (8008e24 <HAL_PWREx_ConfigSupply+0x70>)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	4313      	orrs	r3, r2
 8008dec:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008dee:	f7fa fafd 	bl	80033ec <HAL_GetTick>
 8008df2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008df4:	e009      	b.n	8008e0a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008df6:	f7fa faf9 	bl	80033ec <HAL_GetTick>
 8008dfa:	4602      	mov	r2, r0
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	1ad3      	subs	r3, r2, r3
 8008e00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e04:	d901      	bls.n	8008e0a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008e06:	2301      	movs	r3, #1
 8008e08:	e007      	b.n	8008e1a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008e0a:	4b06      	ldr	r3, [pc, #24]	; (8008e24 <HAL_PWREx_ConfigSupply+0x70>)
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008e12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e16:	d1ee      	bne.n	8008df6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008e18:	2300      	movs	r3, #0
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3710      	adds	r7, #16
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
 8008e22:	bf00      	nop
 8008e24:	58024800 	.word	0x58024800

08008e28 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b08c      	sub	sp, #48	; 0x30
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d102      	bne.n	8008e3c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008e36:	2301      	movs	r3, #1
 8008e38:	f000 bc48 	b.w	80096cc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f003 0301 	and.w	r3, r3, #1
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	f000 8088 	beq.w	8008f5a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008e4a:	4b99      	ldr	r3, [pc, #612]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 8008e4c:	691b      	ldr	r3, [r3, #16]
 8008e4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e52:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008e54:	4b96      	ldr	r3, [pc, #600]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 8008e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e58:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e5c:	2b10      	cmp	r3, #16
 8008e5e:	d007      	beq.n	8008e70 <HAL_RCC_OscConfig+0x48>
 8008e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e62:	2b18      	cmp	r3, #24
 8008e64:	d111      	bne.n	8008e8a <HAL_RCC_OscConfig+0x62>
 8008e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e68:	f003 0303 	and.w	r3, r3, #3
 8008e6c:	2b02      	cmp	r3, #2
 8008e6e:	d10c      	bne.n	8008e8a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e70:	4b8f      	ldr	r3, [pc, #572]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d06d      	beq.n	8008f58 <HAL_RCC_OscConfig+0x130>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d169      	bne.n	8008f58 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008e84:	2301      	movs	r3, #1
 8008e86:	f000 bc21 	b.w	80096cc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	685b      	ldr	r3, [r3, #4]
 8008e8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e92:	d106      	bne.n	8008ea2 <HAL_RCC_OscConfig+0x7a>
 8008e94:	4b86      	ldr	r3, [pc, #536]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4a85      	ldr	r2, [pc, #532]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 8008e9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e9e:	6013      	str	r3, [r2, #0]
 8008ea0:	e02e      	b.n	8008f00 <HAL_RCC_OscConfig+0xd8>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	685b      	ldr	r3, [r3, #4]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d10c      	bne.n	8008ec4 <HAL_RCC_OscConfig+0x9c>
 8008eaa:	4b81      	ldr	r3, [pc, #516]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4a80      	ldr	r2, [pc, #512]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 8008eb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008eb4:	6013      	str	r3, [r2, #0]
 8008eb6:	4b7e      	ldr	r3, [pc, #504]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4a7d      	ldr	r2, [pc, #500]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 8008ebc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008ec0:	6013      	str	r3, [r2, #0]
 8008ec2:	e01d      	b.n	8008f00 <HAL_RCC_OscConfig+0xd8>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008ecc:	d10c      	bne.n	8008ee8 <HAL_RCC_OscConfig+0xc0>
 8008ece:	4b78      	ldr	r3, [pc, #480]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	4a77      	ldr	r2, [pc, #476]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 8008ed4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008ed8:	6013      	str	r3, [r2, #0]
 8008eda:	4b75      	ldr	r3, [pc, #468]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	4a74      	ldr	r2, [pc, #464]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 8008ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ee4:	6013      	str	r3, [r2, #0]
 8008ee6:	e00b      	b.n	8008f00 <HAL_RCC_OscConfig+0xd8>
 8008ee8:	4b71      	ldr	r3, [pc, #452]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	4a70      	ldr	r2, [pc, #448]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 8008eee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ef2:	6013      	str	r3, [r2, #0]
 8008ef4:	4b6e      	ldr	r3, [pc, #440]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4a6d      	ldr	r2, [pc, #436]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 8008efa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008efe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	685b      	ldr	r3, [r3, #4]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d013      	beq.n	8008f30 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f08:	f7fa fa70 	bl	80033ec <HAL_GetTick>
 8008f0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008f0e:	e008      	b.n	8008f22 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008f10:	f7fa fa6c 	bl	80033ec <HAL_GetTick>
 8008f14:	4602      	mov	r2, r0
 8008f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f18:	1ad3      	subs	r3, r2, r3
 8008f1a:	2b64      	cmp	r3, #100	; 0x64
 8008f1c:	d901      	bls.n	8008f22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008f1e:	2303      	movs	r3, #3
 8008f20:	e3d4      	b.n	80096cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008f22:	4b63      	ldr	r3, [pc, #396]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d0f0      	beq.n	8008f10 <HAL_RCC_OscConfig+0xe8>
 8008f2e:	e014      	b.n	8008f5a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f30:	f7fa fa5c 	bl	80033ec <HAL_GetTick>
 8008f34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008f36:	e008      	b.n	8008f4a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008f38:	f7fa fa58 	bl	80033ec <HAL_GetTick>
 8008f3c:	4602      	mov	r2, r0
 8008f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f40:	1ad3      	subs	r3, r2, r3
 8008f42:	2b64      	cmp	r3, #100	; 0x64
 8008f44:	d901      	bls.n	8008f4a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008f46:	2303      	movs	r3, #3
 8008f48:	e3c0      	b.n	80096cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008f4a:	4b59      	ldr	r3, [pc, #356]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d1f0      	bne.n	8008f38 <HAL_RCC_OscConfig+0x110>
 8008f56:	e000      	b.n	8008f5a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f003 0302 	and.w	r3, r3, #2
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	f000 80ca 	beq.w	80090fc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008f68:	4b51      	ldr	r3, [pc, #324]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 8008f6a:	691b      	ldr	r3, [r3, #16]
 8008f6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f70:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008f72:	4b4f      	ldr	r3, [pc, #316]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 8008f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f76:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008f78:	6a3b      	ldr	r3, [r7, #32]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d007      	beq.n	8008f8e <HAL_RCC_OscConfig+0x166>
 8008f7e:	6a3b      	ldr	r3, [r7, #32]
 8008f80:	2b18      	cmp	r3, #24
 8008f82:	d156      	bne.n	8009032 <HAL_RCC_OscConfig+0x20a>
 8008f84:	69fb      	ldr	r3, [r7, #28]
 8008f86:	f003 0303 	and.w	r3, r3, #3
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d151      	bne.n	8009032 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008f8e:	4b48      	ldr	r3, [pc, #288]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f003 0304 	and.w	r3, r3, #4
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d005      	beq.n	8008fa6 <HAL_RCC_OscConfig+0x17e>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	68db      	ldr	r3, [r3, #12]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d101      	bne.n	8008fa6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	e392      	b.n	80096cc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008fa6:	4b42      	ldr	r3, [pc, #264]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f023 0219 	bic.w	r2, r3, #25
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	68db      	ldr	r3, [r3, #12]
 8008fb2:	493f      	ldr	r1, [pc, #252]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fb8:	f7fa fa18 	bl	80033ec <HAL_GetTick>
 8008fbc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008fbe:	e008      	b.n	8008fd2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008fc0:	f7fa fa14 	bl	80033ec <HAL_GetTick>
 8008fc4:	4602      	mov	r2, r0
 8008fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc8:	1ad3      	subs	r3, r2, r3
 8008fca:	2b02      	cmp	r3, #2
 8008fcc:	d901      	bls.n	8008fd2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008fce:	2303      	movs	r3, #3
 8008fd0:	e37c      	b.n	80096cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008fd2:	4b37      	ldr	r3, [pc, #220]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f003 0304 	and.w	r3, r3, #4
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d0f0      	beq.n	8008fc0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008fde:	f7fa fa35 	bl	800344c <HAL_GetREVID>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	f241 0203 	movw	r2, #4099	; 0x1003
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d817      	bhi.n	800901c <HAL_RCC_OscConfig+0x1f4>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	691b      	ldr	r3, [r3, #16]
 8008ff0:	2b40      	cmp	r3, #64	; 0x40
 8008ff2:	d108      	bne.n	8009006 <HAL_RCC_OscConfig+0x1de>
 8008ff4:	4b2e      	ldr	r3, [pc, #184]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008ffc:	4a2c      	ldr	r2, [pc, #176]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 8008ffe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009002:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009004:	e07a      	b.n	80090fc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009006:	4b2a      	ldr	r3, [pc, #168]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	691b      	ldr	r3, [r3, #16]
 8009012:	031b      	lsls	r3, r3, #12
 8009014:	4926      	ldr	r1, [pc, #152]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 8009016:	4313      	orrs	r3, r2
 8009018:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800901a:	e06f      	b.n	80090fc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800901c:	4b24      	ldr	r3, [pc, #144]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 800901e:	685b      	ldr	r3, [r3, #4]
 8009020:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	691b      	ldr	r3, [r3, #16]
 8009028:	061b      	lsls	r3, r3, #24
 800902a:	4921      	ldr	r1, [pc, #132]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 800902c:	4313      	orrs	r3, r2
 800902e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009030:	e064      	b.n	80090fc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	68db      	ldr	r3, [r3, #12]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d047      	beq.n	80090ca <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800903a:	4b1d      	ldr	r3, [pc, #116]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f023 0219 	bic.w	r2, r3, #25
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	68db      	ldr	r3, [r3, #12]
 8009046:	491a      	ldr	r1, [pc, #104]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 8009048:	4313      	orrs	r3, r2
 800904a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800904c:	f7fa f9ce 	bl	80033ec <HAL_GetTick>
 8009050:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009052:	e008      	b.n	8009066 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009054:	f7fa f9ca 	bl	80033ec <HAL_GetTick>
 8009058:	4602      	mov	r2, r0
 800905a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800905c:	1ad3      	subs	r3, r2, r3
 800905e:	2b02      	cmp	r3, #2
 8009060:	d901      	bls.n	8009066 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8009062:	2303      	movs	r3, #3
 8009064:	e332      	b.n	80096cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009066:	4b12      	ldr	r3, [pc, #72]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f003 0304 	and.w	r3, r3, #4
 800906e:	2b00      	cmp	r3, #0
 8009070:	d0f0      	beq.n	8009054 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009072:	f7fa f9eb 	bl	800344c <HAL_GetREVID>
 8009076:	4603      	mov	r3, r0
 8009078:	f241 0203 	movw	r2, #4099	; 0x1003
 800907c:	4293      	cmp	r3, r2
 800907e:	d819      	bhi.n	80090b4 <HAL_RCC_OscConfig+0x28c>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	691b      	ldr	r3, [r3, #16]
 8009084:	2b40      	cmp	r3, #64	; 0x40
 8009086:	d108      	bne.n	800909a <HAL_RCC_OscConfig+0x272>
 8009088:	4b09      	ldr	r3, [pc, #36]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 800908a:	685b      	ldr	r3, [r3, #4]
 800908c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009090:	4a07      	ldr	r2, [pc, #28]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 8009092:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009096:	6053      	str	r3, [r2, #4]
 8009098:	e030      	b.n	80090fc <HAL_RCC_OscConfig+0x2d4>
 800909a:	4b05      	ldr	r3, [pc, #20]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 800909c:	685b      	ldr	r3, [r3, #4]
 800909e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	691b      	ldr	r3, [r3, #16]
 80090a6:	031b      	lsls	r3, r3, #12
 80090a8:	4901      	ldr	r1, [pc, #4]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 80090aa:	4313      	orrs	r3, r2
 80090ac:	604b      	str	r3, [r1, #4]
 80090ae:	e025      	b.n	80090fc <HAL_RCC_OscConfig+0x2d4>
 80090b0:	58024400 	.word	0x58024400
 80090b4:	4b9a      	ldr	r3, [pc, #616]	; (8009320 <HAL_RCC_OscConfig+0x4f8>)
 80090b6:	685b      	ldr	r3, [r3, #4]
 80090b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	691b      	ldr	r3, [r3, #16]
 80090c0:	061b      	lsls	r3, r3, #24
 80090c2:	4997      	ldr	r1, [pc, #604]	; (8009320 <HAL_RCC_OscConfig+0x4f8>)
 80090c4:	4313      	orrs	r3, r2
 80090c6:	604b      	str	r3, [r1, #4]
 80090c8:	e018      	b.n	80090fc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80090ca:	4b95      	ldr	r3, [pc, #596]	; (8009320 <HAL_RCC_OscConfig+0x4f8>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	4a94      	ldr	r2, [pc, #592]	; (8009320 <HAL_RCC_OscConfig+0x4f8>)
 80090d0:	f023 0301 	bic.w	r3, r3, #1
 80090d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090d6:	f7fa f989 	bl	80033ec <HAL_GetTick>
 80090da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80090dc:	e008      	b.n	80090f0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80090de:	f7fa f985 	bl	80033ec <HAL_GetTick>
 80090e2:	4602      	mov	r2, r0
 80090e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e6:	1ad3      	subs	r3, r2, r3
 80090e8:	2b02      	cmp	r3, #2
 80090ea:	d901      	bls.n	80090f0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80090ec:	2303      	movs	r3, #3
 80090ee:	e2ed      	b.n	80096cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80090f0:	4b8b      	ldr	r3, [pc, #556]	; (8009320 <HAL_RCC_OscConfig+0x4f8>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f003 0304 	and.w	r3, r3, #4
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d1f0      	bne.n	80090de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f003 0310 	and.w	r3, r3, #16
 8009104:	2b00      	cmp	r3, #0
 8009106:	f000 80a9 	beq.w	800925c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800910a:	4b85      	ldr	r3, [pc, #532]	; (8009320 <HAL_RCC_OscConfig+0x4f8>)
 800910c:	691b      	ldr	r3, [r3, #16]
 800910e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009112:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009114:	4b82      	ldr	r3, [pc, #520]	; (8009320 <HAL_RCC_OscConfig+0x4f8>)
 8009116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009118:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800911a:	69bb      	ldr	r3, [r7, #24]
 800911c:	2b08      	cmp	r3, #8
 800911e:	d007      	beq.n	8009130 <HAL_RCC_OscConfig+0x308>
 8009120:	69bb      	ldr	r3, [r7, #24]
 8009122:	2b18      	cmp	r3, #24
 8009124:	d13a      	bne.n	800919c <HAL_RCC_OscConfig+0x374>
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	f003 0303 	and.w	r3, r3, #3
 800912c:	2b01      	cmp	r3, #1
 800912e:	d135      	bne.n	800919c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009130:	4b7b      	ldr	r3, [pc, #492]	; (8009320 <HAL_RCC_OscConfig+0x4f8>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009138:	2b00      	cmp	r3, #0
 800913a:	d005      	beq.n	8009148 <HAL_RCC_OscConfig+0x320>
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	69db      	ldr	r3, [r3, #28]
 8009140:	2b80      	cmp	r3, #128	; 0x80
 8009142:	d001      	beq.n	8009148 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8009144:	2301      	movs	r3, #1
 8009146:	e2c1      	b.n	80096cc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009148:	f7fa f980 	bl	800344c <HAL_GetREVID>
 800914c:	4603      	mov	r3, r0
 800914e:	f241 0203 	movw	r2, #4099	; 0x1003
 8009152:	4293      	cmp	r3, r2
 8009154:	d817      	bhi.n	8009186 <HAL_RCC_OscConfig+0x35e>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6a1b      	ldr	r3, [r3, #32]
 800915a:	2b20      	cmp	r3, #32
 800915c:	d108      	bne.n	8009170 <HAL_RCC_OscConfig+0x348>
 800915e:	4b70      	ldr	r3, [pc, #448]	; (8009320 <HAL_RCC_OscConfig+0x4f8>)
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009166:	4a6e      	ldr	r2, [pc, #440]	; (8009320 <HAL_RCC_OscConfig+0x4f8>)
 8009168:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800916c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800916e:	e075      	b.n	800925c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009170:	4b6b      	ldr	r3, [pc, #428]	; (8009320 <HAL_RCC_OscConfig+0x4f8>)
 8009172:	685b      	ldr	r3, [r3, #4]
 8009174:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6a1b      	ldr	r3, [r3, #32]
 800917c:	069b      	lsls	r3, r3, #26
 800917e:	4968      	ldr	r1, [pc, #416]	; (8009320 <HAL_RCC_OscConfig+0x4f8>)
 8009180:	4313      	orrs	r3, r2
 8009182:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009184:	e06a      	b.n	800925c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009186:	4b66      	ldr	r3, [pc, #408]	; (8009320 <HAL_RCC_OscConfig+0x4f8>)
 8009188:	68db      	ldr	r3, [r3, #12]
 800918a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6a1b      	ldr	r3, [r3, #32]
 8009192:	061b      	lsls	r3, r3, #24
 8009194:	4962      	ldr	r1, [pc, #392]	; (8009320 <HAL_RCC_OscConfig+0x4f8>)
 8009196:	4313      	orrs	r3, r2
 8009198:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800919a:	e05f      	b.n	800925c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	69db      	ldr	r3, [r3, #28]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d042      	beq.n	800922a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80091a4:	4b5e      	ldr	r3, [pc, #376]	; (8009320 <HAL_RCC_OscConfig+0x4f8>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	4a5d      	ldr	r2, [pc, #372]	; (8009320 <HAL_RCC_OscConfig+0x4f8>)
 80091aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091b0:	f7fa f91c 	bl	80033ec <HAL_GetTick>
 80091b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80091b6:	e008      	b.n	80091ca <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80091b8:	f7fa f918 	bl	80033ec <HAL_GetTick>
 80091bc:	4602      	mov	r2, r0
 80091be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c0:	1ad3      	subs	r3, r2, r3
 80091c2:	2b02      	cmp	r3, #2
 80091c4:	d901      	bls.n	80091ca <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80091c6:	2303      	movs	r3, #3
 80091c8:	e280      	b.n	80096cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80091ca:	4b55      	ldr	r3, [pc, #340]	; (8009320 <HAL_RCC_OscConfig+0x4f8>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d0f0      	beq.n	80091b8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80091d6:	f7fa f939 	bl	800344c <HAL_GetREVID>
 80091da:	4603      	mov	r3, r0
 80091dc:	f241 0203 	movw	r2, #4099	; 0x1003
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d817      	bhi.n	8009214 <HAL_RCC_OscConfig+0x3ec>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6a1b      	ldr	r3, [r3, #32]
 80091e8:	2b20      	cmp	r3, #32
 80091ea:	d108      	bne.n	80091fe <HAL_RCC_OscConfig+0x3d6>
 80091ec:	4b4c      	ldr	r3, [pc, #304]	; (8009320 <HAL_RCC_OscConfig+0x4f8>)
 80091ee:	685b      	ldr	r3, [r3, #4]
 80091f0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80091f4:	4a4a      	ldr	r2, [pc, #296]	; (8009320 <HAL_RCC_OscConfig+0x4f8>)
 80091f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80091fa:	6053      	str	r3, [r2, #4]
 80091fc:	e02e      	b.n	800925c <HAL_RCC_OscConfig+0x434>
 80091fe:	4b48      	ldr	r3, [pc, #288]	; (8009320 <HAL_RCC_OscConfig+0x4f8>)
 8009200:	685b      	ldr	r3, [r3, #4]
 8009202:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6a1b      	ldr	r3, [r3, #32]
 800920a:	069b      	lsls	r3, r3, #26
 800920c:	4944      	ldr	r1, [pc, #272]	; (8009320 <HAL_RCC_OscConfig+0x4f8>)
 800920e:	4313      	orrs	r3, r2
 8009210:	604b      	str	r3, [r1, #4]
 8009212:	e023      	b.n	800925c <HAL_RCC_OscConfig+0x434>
 8009214:	4b42      	ldr	r3, [pc, #264]	; (8009320 <HAL_RCC_OscConfig+0x4f8>)
 8009216:	68db      	ldr	r3, [r3, #12]
 8009218:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6a1b      	ldr	r3, [r3, #32]
 8009220:	061b      	lsls	r3, r3, #24
 8009222:	493f      	ldr	r1, [pc, #252]	; (8009320 <HAL_RCC_OscConfig+0x4f8>)
 8009224:	4313      	orrs	r3, r2
 8009226:	60cb      	str	r3, [r1, #12]
 8009228:	e018      	b.n	800925c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800922a:	4b3d      	ldr	r3, [pc, #244]	; (8009320 <HAL_RCC_OscConfig+0x4f8>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	4a3c      	ldr	r2, [pc, #240]	; (8009320 <HAL_RCC_OscConfig+0x4f8>)
 8009230:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009234:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009236:	f7fa f8d9 	bl	80033ec <HAL_GetTick>
 800923a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800923c:	e008      	b.n	8009250 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800923e:	f7fa f8d5 	bl	80033ec <HAL_GetTick>
 8009242:	4602      	mov	r2, r0
 8009244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009246:	1ad3      	subs	r3, r2, r3
 8009248:	2b02      	cmp	r3, #2
 800924a:	d901      	bls.n	8009250 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800924c:	2303      	movs	r3, #3
 800924e:	e23d      	b.n	80096cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009250:	4b33      	ldr	r3, [pc, #204]	; (8009320 <HAL_RCC_OscConfig+0x4f8>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009258:	2b00      	cmp	r3, #0
 800925a:	d1f0      	bne.n	800923e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f003 0308 	and.w	r3, r3, #8
 8009264:	2b00      	cmp	r3, #0
 8009266:	d036      	beq.n	80092d6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	695b      	ldr	r3, [r3, #20]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d019      	beq.n	80092a4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009270:	4b2b      	ldr	r3, [pc, #172]	; (8009320 <HAL_RCC_OscConfig+0x4f8>)
 8009272:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009274:	4a2a      	ldr	r2, [pc, #168]	; (8009320 <HAL_RCC_OscConfig+0x4f8>)
 8009276:	f043 0301 	orr.w	r3, r3, #1
 800927a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800927c:	f7fa f8b6 	bl	80033ec <HAL_GetTick>
 8009280:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009282:	e008      	b.n	8009296 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009284:	f7fa f8b2 	bl	80033ec <HAL_GetTick>
 8009288:	4602      	mov	r2, r0
 800928a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800928c:	1ad3      	subs	r3, r2, r3
 800928e:	2b02      	cmp	r3, #2
 8009290:	d901      	bls.n	8009296 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8009292:	2303      	movs	r3, #3
 8009294:	e21a      	b.n	80096cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009296:	4b22      	ldr	r3, [pc, #136]	; (8009320 <HAL_RCC_OscConfig+0x4f8>)
 8009298:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800929a:	f003 0302 	and.w	r3, r3, #2
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d0f0      	beq.n	8009284 <HAL_RCC_OscConfig+0x45c>
 80092a2:	e018      	b.n	80092d6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80092a4:	4b1e      	ldr	r3, [pc, #120]	; (8009320 <HAL_RCC_OscConfig+0x4f8>)
 80092a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092a8:	4a1d      	ldr	r2, [pc, #116]	; (8009320 <HAL_RCC_OscConfig+0x4f8>)
 80092aa:	f023 0301 	bic.w	r3, r3, #1
 80092ae:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092b0:	f7fa f89c 	bl	80033ec <HAL_GetTick>
 80092b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80092b6:	e008      	b.n	80092ca <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80092b8:	f7fa f898 	bl	80033ec <HAL_GetTick>
 80092bc:	4602      	mov	r2, r0
 80092be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c0:	1ad3      	subs	r3, r2, r3
 80092c2:	2b02      	cmp	r3, #2
 80092c4:	d901      	bls.n	80092ca <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80092c6:	2303      	movs	r3, #3
 80092c8:	e200      	b.n	80096cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80092ca:	4b15      	ldr	r3, [pc, #84]	; (8009320 <HAL_RCC_OscConfig+0x4f8>)
 80092cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092ce:	f003 0302 	and.w	r3, r3, #2
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d1f0      	bne.n	80092b8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f003 0320 	and.w	r3, r3, #32
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d039      	beq.n	8009356 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	699b      	ldr	r3, [r3, #24]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d01c      	beq.n	8009324 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80092ea:	4b0d      	ldr	r3, [pc, #52]	; (8009320 <HAL_RCC_OscConfig+0x4f8>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	4a0c      	ldr	r2, [pc, #48]	; (8009320 <HAL_RCC_OscConfig+0x4f8>)
 80092f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80092f4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80092f6:	f7fa f879 	bl	80033ec <HAL_GetTick>
 80092fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80092fc:	e008      	b.n	8009310 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80092fe:	f7fa f875 	bl	80033ec <HAL_GetTick>
 8009302:	4602      	mov	r2, r0
 8009304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009306:	1ad3      	subs	r3, r2, r3
 8009308:	2b02      	cmp	r3, #2
 800930a:	d901      	bls.n	8009310 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800930c:	2303      	movs	r3, #3
 800930e:	e1dd      	b.n	80096cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009310:	4b03      	ldr	r3, [pc, #12]	; (8009320 <HAL_RCC_OscConfig+0x4f8>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009318:	2b00      	cmp	r3, #0
 800931a:	d0f0      	beq.n	80092fe <HAL_RCC_OscConfig+0x4d6>
 800931c:	e01b      	b.n	8009356 <HAL_RCC_OscConfig+0x52e>
 800931e:	bf00      	nop
 8009320:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009324:	4b9b      	ldr	r3, [pc, #620]	; (8009594 <HAL_RCC_OscConfig+0x76c>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	4a9a      	ldr	r2, [pc, #616]	; (8009594 <HAL_RCC_OscConfig+0x76c>)
 800932a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800932e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009330:	f7fa f85c 	bl	80033ec <HAL_GetTick>
 8009334:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009336:	e008      	b.n	800934a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009338:	f7fa f858 	bl	80033ec <HAL_GetTick>
 800933c:	4602      	mov	r2, r0
 800933e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009340:	1ad3      	subs	r3, r2, r3
 8009342:	2b02      	cmp	r3, #2
 8009344:	d901      	bls.n	800934a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8009346:	2303      	movs	r3, #3
 8009348:	e1c0      	b.n	80096cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800934a:	4b92      	ldr	r3, [pc, #584]	; (8009594 <HAL_RCC_OscConfig+0x76c>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009352:	2b00      	cmp	r3, #0
 8009354:	d1f0      	bne.n	8009338 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f003 0304 	and.w	r3, r3, #4
 800935e:	2b00      	cmp	r3, #0
 8009360:	f000 8081 	beq.w	8009466 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009364:	4b8c      	ldr	r3, [pc, #560]	; (8009598 <HAL_RCC_OscConfig+0x770>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	4a8b      	ldr	r2, [pc, #556]	; (8009598 <HAL_RCC_OscConfig+0x770>)
 800936a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800936e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009370:	f7fa f83c 	bl	80033ec <HAL_GetTick>
 8009374:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009376:	e008      	b.n	800938a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009378:	f7fa f838 	bl	80033ec <HAL_GetTick>
 800937c:	4602      	mov	r2, r0
 800937e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009380:	1ad3      	subs	r3, r2, r3
 8009382:	2b64      	cmp	r3, #100	; 0x64
 8009384:	d901      	bls.n	800938a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8009386:	2303      	movs	r3, #3
 8009388:	e1a0      	b.n	80096cc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800938a:	4b83      	ldr	r3, [pc, #524]	; (8009598 <HAL_RCC_OscConfig+0x770>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009392:	2b00      	cmp	r3, #0
 8009394:	d0f0      	beq.n	8009378 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	689b      	ldr	r3, [r3, #8]
 800939a:	2b01      	cmp	r3, #1
 800939c:	d106      	bne.n	80093ac <HAL_RCC_OscConfig+0x584>
 800939e:	4b7d      	ldr	r3, [pc, #500]	; (8009594 <HAL_RCC_OscConfig+0x76c>)
 80093a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093a2:	4a7c      	ldr	r2, [pc, #496]	; (8009594 <HAL_RCC_OscConfig+0x76c>)
 80093a4:	f043 0301 	orr.w	r3, r3, #1
 80093a8:	6713      	str	r3, [r2, #112]	; 0x70
 80093aa:	e02d      	b.n	8009408 <HAL_RCC_OscConfig+0x5e0>
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	689b      	ldr	r3, [r3, #8]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d10c      	bne.n	80093ce <HAL_RCC_OscConfig+0x5a6>
 80093b4:	4b77      	ldr	r3, [pc, #476]	; (8009594 <HAL_RCC_OscConfig+0x76c>)
 80093b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093b8:	4a76      	ldr	r2, [pc, #472]	; (8009594 <HAL_RCC_OscConfig+0x76c>)
 80093ba:	f023 0301 	bic.w	r3, r3, #1
 80093be:	6713      	str	r3, [r2, #112]	; 0x70
 80093c0:	4b74      	ldr	r3, [pc, #464]	; (8009594 <HAL_RCC_OscConfig+0x76c>)
 80093c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093c4:	4a73      	ldr	r2, [pc, #460]	; (8009594 <HAL_RCC_OscConfig+0x76c>)
 80093c6:	f023 0304 	bic.w	r3, r3, #4
 80093ca:	6713      	str	r3, [r2, #112]	; 0x70
 80093cc:	e01c      	b.n	8009408 <HAL_RCC_OscConfig+0x5e0>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	689b      	ldr	r3, [r3, #8]
 80093d2:	2b05      	cmp	r3, #5
 80093d4:	d10c      	bne.n	80093f0 <HAL_RCC_OscConfig+0x5c8>
 80093d6:	4b6f      	ldr	r3, [pc, #444]	; (8009594 <HAL_RCC_OscConfig+0x76c>)
 80093d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093da:	4a6e      	ldr	r2, [pc, #440]	; (8009594 <HAL_RCC_OscConfig+0x76c>)
 80093dc:	f043 0304 	orr.w	r3, r3, #4
 80093e0:	6713      	str	r3, [r2, #112]	; 0x70
 80093e2:	4b6c      	ldr	r3, [pc, #432]	; (8009594 <HAL_RCC_OscConfig+0x76c>)
 80093e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093e6:	4a6b      	ldr	r2, [pc, #428]	; (8009594 <HAL_RCC_OscConfig+0x76c>)
 80093e8:	f043 0301 	orr.w	r3, r3, #1
 80093ec:	6713      	str	r3, [r2, #112]	; 0x70
 80093ee:	e00b      	b.n	8009408 <HAL_RCC_OscConfig+0x5e0>
 80093f0:	4b68      	ldr	r3, [pc, #416]	; (8009594 <HAL_RCC_OscConfig+0x76c>)
 80093f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093f4:	4a67      	ldr	r2, [pc, #412]	; (8009594 <HAL_RCC_OscConfig+0x76c>)
 80093f6:	f023 0301 	bic.w	r3, r3, #1
 80093fa:	6713      	str	r3, [r2, #112]	; 0x70
 80093fc:	4b65      	ldr	r3, [pc, #404]	; (8009594 <HAL_RCC_OscConfig+0x76c>)
 80093fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009400:	4a64      	ldr	r2, [pc, #400]	; (8009594 <HAL_RCC_OscConfig+0x76c>)
 8009402:	f023 0304 	bic.w	r3, r3, #4
 8009406:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	689b      	ldr	r3, [r3, #8]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d015      	beq.n	800943c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009410:	f7f9 ffec 	bl	80033ec <HAL_GetTick>
 8009414:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009416:	e00a      	b.n	800942e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009418:	f7f9 ffe8 	bl	80033ec <HAL_GetTick>
 800941c:	4602      	mov	r2, r0
 800941e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009420:	1ad3      	subs	r3, r2, r3
 8009422:	f241 3288 	movw	r2, #5000	; 0x1388
 8009426:	4293      	cmp	r3, r2
 8009428:	d901      	bls.n	800942e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800942a:	2303      	movs	r3, #3
 800942c:	e14e      	b.n	80096cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800942e:	4b59      	ldr	r3, [pc, #356]	; (8009594 <HAL_RCC_OscConfig+0x76c>)
 8009430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009432:	f003 0302 	and.w	r3, r3, #2
 8009436:	2b00      	cmp	r3, #0
 8009438:	d0ee      	beq.n	8009418 <HAL_RCC_OscConfig+0x5f0>
 800943a:	e014      	b.n	8009466 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800943c:	f7f9 ffd6 	bl	80033ec <HAL_GetTick>
 8009440:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009442:	e00a      	b.n	800945a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009444:	f7f9 ffd2 	bl	80033ec <HAL_GetTick>
 8009448:	4602      	mov	r2, r0
 800944a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800944c:	1ad3      	subs	r3, r2, r3
 800944e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009452:	4293      	cmp	r3, r2
 8009454:	d901      	bls.n	800945a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8009456:	2303      	movs	r3, #3
 8009458:	e138      	b.n	80096cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800945a:	4b4e      	ldr	r3, [pc, #312]	; (8009594 <HAL_RCC_OscConfig+0x76c>)
 800945c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800945e:	f003 0302 	and.w	r3, r3, #2
 8009462:	2b00      	cmp	r3, #0
 8009464:	d1ee      	bne.n	8009444 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800946a:	2b00      	cmp	r3, #0
 800946c:	f000 812d 	beq.w	80096ca <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009470:	4b48      	ldr	r3, [pc, #288]	; (8009594 <HAL_RCC_OscConfig+0x76c>)
 8009472:	691b      	ldr	r3, [r3, #16]
 8009474:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009478:	2b18      	cmp	r3, #24
 800947a:	f000 80bd 	beq.w	80095f8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009482:	2b02      	cmp	r3, #2
 8009484:	f040 809e 	bne.w	80095c4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009488:	4b42      	ldr	r3, [pc, #264]	; (8009594 <HAL_RCC_OscConfig+0x76c>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	4a41      	ldr	r2, [pc, #260]	; (8009594 <HAL_RCC_OscConfig+0x76c>)
 800948e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009492:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009494:	f7f9 ffaa 	bl	80033ec <HAL_GetTick>
 8009498:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800949a:	e008      	b.n	80094ae <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800949c:	f7f9 ffa6 	bl	80033ec <HAL_GetTick>
 80094a0:	4602      	mov	r2, r0
 80094a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a4:	1ad3      	subs	r3, r2, r3
 80094a6:	2b02      	cmp	r3, #2
 80094a8:	d901      	bls.n	80094ae <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80094aa:	2303      	movs	r3, #3
 80094ac:	e10e      	b.n	80096cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80094ae:	4b39      	ldr	r3, [pc, #228]	; (8009594 <HAL_RCC_OscConfig+0x76c>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d1f0      	bne.n	800949c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80094ba:	4b36      	ldr	r3, [pc, #216]	; (8009594 <HAL_RCC_OscConfig+0x76c>)
 80094bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80094be:	4b37      	ldr	r3, [pc, #220]	; (800959c <HAL_RCC_OscConfig+0x774>)
 80094c0:	4013      	ands	r3, r2
 80094c2:	687a      	ldr	r2, [r7, #4]
 80094c4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80094c6:	687a      	ldr	r2, [r7, #4]
 80094c8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80094ca:	0112      	lsls	r2, r2, #4
 80094cc:	430a      	orrs	r2, r1
 80094ce:	4931      	ldr	r1, [pc, #196]	; (8009594 <HAL_RCC_OscConfig+0x76c>)
 80094d0:	4313      	orrs	r3, r2
 80094d2:	628b      	str	r3, [r1, #40]	; 0x28
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094d8:	3b01      	subs	r3, #1
 80094da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094e2:	3b01      	subs	r3, #1
 80094e4:	025b      	lsls	r3, r3, #9
 80094e6:	b29b      	uxth	r3, r3
 80094e8:	431a      	orrs	r2, r3
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ee:	3b01      	subs	r3, #1
 80094f0:	041b      	lsls	r3, r3, #16
 80094f2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80094f6:	431a      	orrs	r2, r3
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094fc:	3b01      	subs	r3, #1
 80094fe:	061b      	lsls	r3, r3, #24
 8009500:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009504:	4923      	ldr	r1, [pc, #140]	; (8009594 <HAL_RCC_OscConfig+0x76c>)
 8009506:	4313      	orrs	r3, r2
 8009508:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800950a:	4b22      	ldr	r3, [pc, #136]	; (8009594 <HAL_RCC_OscConfig+0x76c>)
 800950c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800950e:	4a21      	ldr	r2, [pc, #132]	; (8009594 <HAL_RCC_OscConfig+0x76c>)
 8009510:	f023 0301 	bic.w	r3, r3, #1
 8009514:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009516:	4b1f      	ldr	r3, [pc, #124]	; (8009594 <HAL_RCC_OscConfig+0x76c>)
 8009518:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800951a:	4b21      	ldr	r3, [pc, #132]	; (80095a0 <HAL_RCC_OscConfig+0x778>)
 800951c:	4013      	ands	r3, r2
 800951e:	687a      	ldr	r2, [r7, #4]
 8009520:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009522:	00d2      	lsls	r2, r2, #3
 8009524:	491b      	ldr	r1, [pc, #108]	; (8009594 <HAL_RCC_OscConfig+0x76c>)
 8009526:	4313      	orrs	r3, r2
 8009528:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800952a:	4b1a      	ldr	r3, [pc, #104]	; (8009594 <HAL_RCC_OscConfig+0x76c>)
 800952c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800952e:	f023 020c 	bic.w	r2, r3, #12
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009536:	4917      	ldr	r1, [pc, #92]	; (8009594 <HAL_RCC_OscConfig+0x76c>)
 8009538:	4313      	orrs	r3, r2
 800953a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800953c:	4b15      	ldr	r3, [pc, #84]	; (8009594 <HAL_RCC_OscConfig+0x76c>)
 800953e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009540:	f023 0202 	bic.w	r2, r3, #2
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009548:	4912      	ldr	r1, [pc, #72]	; (8009594 <HAL_RCC_OscConfig+0x76c>)
 800954a:	4313      	orrs	r3, r2
 800954c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800954e:	4b11      	ldr	r3, [pc, #68]	; (8009594 <HAL_RCC_OscConfig+0x76c>)
 8009550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009552:	4a10      	ldr	r2, [pc, #64]	; (8009594 <HAL_RCC_OscConfig+0x76c>)
 8009554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009558:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800955a:	4b0e      	ldr	r3, [pc, #56]	; (8009594 <HAL_RCC_OscConfig+0x76c>)
 800955c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800955e:	4a0d      	ldr	r2, [pc, #52]	; (8009594 <HAL_RCC_OscConfig+0x76c>)
 8009560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009564:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009566:	4b0b      	ldr	r3, [pc, #44]	; (8009594 <HAL_RCC_OscConfig+0x76c>)
 8009568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800956a:	4a0a      	ldr	r2, [pc, #40]	; (8009594 <HAL_RCC_OscConfig+0x76c>)
 800956c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009570:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009572:	4b08      	ldr	r3, [pc, #32]	; (8009594 <HAL_RCC_OscConfig+0x76c>)
 8009574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009576:	4a07      	ldr	r2, [pc, #28]	; (8009594 <HAL_RCC_OscConfig+0x76c>)
 8009578:	f043 0301 	orr.w	r3, r3, #1
 800957c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800957e:	4b05      	ldr	r3, [pc, #20]	; (8009594 <HAL_RCC_OscConfig+0x76c>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	4a04      	ldr	r2, [pc, #16]	; (8009594 <HAL_RCC_OscConfig+0x76c>)
 8009584:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009588:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800958a:	f7f9 ff2f 	bl	80033ec <HAL_GetTick>
 800958e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009590:	e011      	b.n	80095b6 <HAL_RCC_OscConfig+0x78e>
 8009592:	bf00      	nop
 8009594:	58024400 	.word	0x58024400
 8009598:	58024800 	.word	0x58024800
 800959c:	fffffc0c 	.word	0xfffffc0c
 80095a0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80095a4:	f7f9 ff22 	bl	80033ec <HAL_GetTick>
 80095a8:	4602      	mov	r2, r0
 80095aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ac:	1ad3      	subs	r3, r2, r3
 80095ae:	2b02      	cmp	r3, #2
 80095b0:	d901      	bls.n	80095b6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80095b2:	2303      	movs	r3, #3
 80095b4:	e08a      	b.n	80096cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80095b6:	4b47      	ldr	r3, [pc, #284]	; (80096d4 <HAL_RCC_OscConfig+0x8ac>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d0f0      	beq.n	80095a4 <HAL_RCC_OscConfig+0x77c>
 80095c2:	e082      	b.n	80096ca <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80095c4:	4b43      	ldr	r3, [pc, #268]	; (80096d4 <HAL_RCC_OscConfig+0x8ac>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	4a42      	ldr	r2, [pc, #264]	; (80096d4 <HAL_RCC_OscConfig+0x8ac>)
 80095ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80095ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095d0:	f7f9 ff0c 	bl	80033ec <HAL_GetTick>
 80095d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80095d6:	e008      	b.n	80095ea <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80095d8:	f7f9 ff08 	bl	80033ec <HAL_GetTick>
 80095dc:	4602      	mov	r2, r0
 80095de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e0:	1ad3      	subs	r3, r2, r3
 80095e2:	2b02      	cmp	r3, #2
 80095e4:	d901      	bls.n	80095ea <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80095e6:	2303      	movs	r3, #3
 80095e8:	e070      	b.n	80096cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80095ea:	4b3a      	ldr	r3, [pc, #232]	; (80096d4 <HAL_RCC_OscConfig+0x8ac>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d1f0      	bne.n	80095d8 <HAL_RCC_OscConfig+0x7b0>
 80095f6:	e068      	b.n	80096ca <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80095f8:	4b36      	ldr	r3, [pc, #216]	; (80096d4 <HAL_RCC_OscConfig+0x8ac>)
 80095fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095fc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80095fe:	4b35      	ldr	r3, [pc, #212]	; (80096d4 <HAL_RCC_OscConfig+0x8ac>)
 8009600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009602:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009608:	2b01      	cmp	r3, #1
 800960a:	d031      	beq.n	8009670 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	f003 0203 	and.w	r2, r3, #3
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009616:	429a      	cmp	r2, r3
 8009618:	d12a      	bne.n	8009670 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	091b      	lsrs	r3, r3, #4
 800961e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009626:	429a      	cmp	r2, r3
 8009628:	d122      	bne.n	8009670 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009634:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009636:	429a      	cmp	r2, r3
 8009638:	d11a      	bne.n	8009670 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	0a5b      	lsrs	r3, r3, #9
 800963e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009646:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009648:	429a      	cmp	r2, r3
 800964a:	d111      	bne.n	8009670 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	0c1b      	lsrs	r3, r3, #16
 8009650:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009658:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800965a:	429a      	cmp	r2, r3
 800965c:	d108      	bne.n	8009670 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	0e1b      	lsrs	r3, r3, #24
 8009662:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800966a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800966c:	429a      	cmp	r2, r3
 800966e:	d001      	beq.n	8009674 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8009670:	2301      	movs	r3, #1
 8009672:	e02b      	b.n	80096cc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009674:	4b17      	ldr	r3, [pc, #92]	; (80096d4 <HAL_RCC_OscConfig+0x8ac>)
 8009676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009678:	08db      	lsrs	r3, r3, #3
 800967a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800967e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009684:	693a      	ldr	r2, [r7, #16]
 8009686:	429a      	cmp	r2, r3
 8009688:	d01f      	beq.n	80096ca <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800968a:	4b12      	ldr	r3, [pc, #72]	; (80096d4 <HAL_RCC_OscConfig+0x8ac>)
 800968c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800968e:	4a11      	ldr	r2, [pc, #68]	; (80096d4 <HAL_RCC_OscConfig+0x8ac>)
 8009690:	f023 0301 	bic.w	r3, r3, #1
 8009694:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009696:	f7f9 fea9 	bl	80033ec <HAL_GetTick>
 800969a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800969c:	bf00      	nop
 800969e:	f7f9 fea5 	bl	80033ec <HAL_GetTick>
 80096a2:	4602      	mov	r2, r0
 80096a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d0f9      	beq.n	800969e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80096aa:	4b0a      	ldr	r3, [pc, #40]	; (80096d4 <HAL_RCC_OscConfig+0x8ac>)
 80096ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80096ae:	4b0a      	ldr	r3, [pc, #40]	; (80096d8 <HAL_RCC_OscConfig+0x8b0>)
 80096b0:	4013      	ands	r3, r2
 80096b2:	687a      	ldr	r2, [r7, #4]
 80096b4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80096b6:	00d2      	lsls	r2, r2, #3
 80096b8:	4906      	ldr	r1, [pc, #24]	; (80096d4 <HAL_RCC_OscConfig+0x8ac>)
 80096ba:	4313      	orrs	r3, r2
 80096bc:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80096be:	4b05      	ldr	r3, [pc, #20]	; (80096d4 <HAL_RCC_OscConfig+0x8ac>)
 80096c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096c2:	4a04      	ldr	r2, [pc, #16]	; (80096d4 <HAL_RCC_OscConfig+0x8ac>)
 80096c4:	f043 0301 	orr.w	r3, r3, #1
 80096c8:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80096ca:	2300      	movs	r3, #0
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3730      	adds	r7, #48	; 0x30
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}
 80096d4:	58024400 	.word	0x58024400
 80096d8:	ffff0007 	.word	0xffff0007

080096dc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b086      	sub	sp, #24
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
 80096e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d101      	bne.n	80096f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80096ec:	2301      	movs	r3, #1
 80096ee:	e19c      	b.n	8009a2a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80096f0:	4b8a      	ldr	r3, [pc, #552]	; (800991c <HAL_RCC_ClockConfig+0x240>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f003 030f 	and.w	r3, r3, #15
 80096f8:	683a      	ldr	r2, [r7, #0]
 80096fa:	429a      	cmp	r2, r3
 80096fc:	d910      	bls.n	8009720 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80096fe:	4b87      	ldr	r3, [pc, #540]	; (800991c <HAL_RCC_ClockConfig+0x240>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f023 020f 	bic.w	r2, r3, #15
 8009706:	4985      	ldr	r1, [pc, #532]	; (800991c <HAL_RCC_ClockConfig+0x240>)
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	4313      	orrs	r3, r2
 800970c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800970e:	4b83      	ldr	r3, [pc, #524]	; (800991c <HAL_RCC_ClockConfig+0x240>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f003 030f 	and.w	r3, r3, #15
 8009716:	683a      	ldr	r2, [r7, #0]
 8009718:	429a      	cmp	r2, r3
 800971a:	d001      	beq.n	8009720 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800971c:	2301      	movs	r3, #1
 800971e:	e184      	b.n	8009a2a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f003 0304 	and.w	r3, r3, #4
 8009728:	2b00      	cmp	r3, #0
 800972a:	d010      	beq.n	800974e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	691a      	ldr	r2, [r3, #16]
 8009730:	4b7b      	ldr	r3, [pc, #492]	; (8009920 <HAL_RCC_ClockConfig+0x244>)
 8009732:	699b      	ldr	r3, [r3, #24]
 8009734:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009738:	429a      	cmp	r2, r3
 800973a:	d908      	bls.n	800974e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800973c:	4b78      	ldr	r3, [pc, #480]	; (8009920 <HAL_RCC_ClockConfig+0x244>)
 800973e:	699b      	ldr	r3, [r3, #24]
 8009740:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	691b      	ldr	r3, [r3, #16]
 8009748:	4975      	ldr	r1, [pc, #468]	; (8009920 <HAL_RCC_ClockConfig+0x244>)
 800974a:	4313      	orrs	r3, r2
 800974c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f003 0308 	and.w	r3, r3, #8
 8009756:	2b00      	cmp	r3, #0
 8009758:	d010      	beq.n	800977c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	695a      	ldr	r2, [r3, #20]
 800975e:	4b70      	ldr	r3, [pc, #448]	; (8009920 <HAL_RCC_ClockConfig+0x244>)
 8009760:	69db      	ldr	r3, [r3, #28]
 8009762:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009766:	429a      	cmp	r2, r3
 8009768:	d908      	bls.n	800977c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800976a:	4b6d      	ldr	r3, [pc, #436]	; (8009920 <HAL_RCC_ClockConfig+0x244>)
 800976c:	69db      	ldr	r3, [r3, #28]
 800976e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	695b      	ldr	r3, [r3, #20]
 8009776:	496a      	ldr	r1, [pc, #424]	; (8009920 <HAL_RCC_ClockConfig+0x244>)
 8009778:	4313      	orrs	r3, r2
 800977a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f003 0310 	and.w	r3, r3, #16
 8009784:	2b00      	cmp	r3, #0
 8009786:	d010      	beq.n	80097aa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	699a      	ldr	r2, [r3, #24]
 800978c:	4b64      	ldr	r3, [pc, #400]	; (8009920 <HAL_RCC_ClockConfig+0x244>)
 800978e:	69db      	ldr	r3, [r3, #28]
 8009790:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009794:	429a      	cmp	r2, r3
 8009796:	d908      	bls.n	80097aa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009798:	4b61      	ldr	r3, [pc, #388]	; (8009920 <HAL_RCC_ClockConfig+0x244>)
 800979a:	69db      	ldr	r3, [r3, #28]
 800979c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	699b      	ldr	r3, [r3, #24]
 80097a4:	495e      	ldr	r1, [pc, #376]	; (8009920 <HAL_RCC_ClockConfig+0x244>)
 80097a6:	4313      	orrs	r3, r2
 80097a8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f003 0320 	and.w	r3, r3, #32
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d010      	beq.n	80097d8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	69da      	ldr	r2, [r3, #28]
 80097ba:	4b59      	ldr	r3, [pc, #356]	; (8009920 <HAL_RCC_ClockConfig+0x244>)
 80097bc:	6a1b      	ldr	r3, [r3, #32]
 80097be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80097c2:	429a      	cmp	r2, r3
 80097c4:	d908      	bls.n	80097d8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80097c6:	4b56      	ldr	r3, [pc, #344]	; (8009920 <HAL_RCC_ClockConfig+0x244>)
 80097c8:	6a1b      	ldr	r3, [r3, #32]
 80097ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	69db      	ldr	r3, [r3, #28]
 80097d2:	4953      	ldr	r1, [pc, #332]	; (8009920 <HAL_RCC_ClockConfig+0x244>)
 80097d4:	4313      	orrs	r3, r2
 80097d6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f003 0302 	and.w	r3, r3, #2
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d010      	beq.n	8009806 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	68da      	ldr	r2, [r3, #12]
 80097e8:	4b4d      	ldr	r3, [pc, #308]	; (8009920 <HAL_RCC_ClockConfig+0x244>)
 80097ea:	699b      	ldr	r3, [r3, #24]
 80097ec:	f003 030f 	and.w	r3, r3, #15
 80097f0:	429a      	cmp	r2, r3
 80097f2:	d908      	bls.n	8009806 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80097f4:	4b4a      	ldr	r3, [pc, #296]	; (8009920 <HAL_RCC_ClockConfig+0x244>)
 80097f6:	699b      	ldr	r3, [r3, #24]
 80097f8:	f023 020f 	bic.w	r2, r3, #15
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	68db      	ldr	r3, [r3, #12]
 8009800:	4947      	ldr	r1, [pc, #284]	; (8009920 <HAL_RCC_ClockConfig+0x244>)
 8009802:	4313      	orrs	r3, r2
 8009804:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f003 0301 	and.w	r3, r3, #1
 800980e:	2b00      	cmp	r3, #0
 8009810:	d055      	beq.n	80098be <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009812:	4b43      	ldr	r3, [pc, #268]	; (8009920 <HAL_RCC_ClockConfig+0x244>)
 8009814:	699b      	ldr	r3, [r3, #24]
 8009816:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	689b      	ldr	r3, [r3, #8]
 800981e:	4940      	ldr	r1, [pc, #256]	; (8009920 <HAL_RCC_ClockConfig+0x244>)
 8009820:	4313      	orrs	r3, r2
 8009822:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	685b      	ldr	r3, [r3, #4]
 8009828:	2b02      	cmp	r3, #2
 800982a:	d107      	bne.n	800983c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800982c:	4b3c      	ldr	r3, [pc, #240]	; (8009920 <HAL_RCC_ClockConfig+0x244>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009834:	2b00      	cmp	r3, #0
 8009836:	d121      	bne.n	800987c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009838:	2301      	movs	r3, #1
 800983a:	e0f6      	b.n	8009a2a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	685b      	ldr	r3, [r3, #4]
 8009840:	2b03      	cmp	r3, #3
 8009842:	d107      	bne.n	8009854 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009844:	4b36      	ldr	r3, [pc, #216]	; (8009920 <HAL_RCC_ClockConfig+0x244>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800984c:	2b00      	cmp	r3, #0
 800984e:	d115      	bne.n	800987c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009850:	2301      	movs	r3, #1
 8009852:	e0ea      	b.n	8009a2a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	685b      	ldr	r3, [r3, #4]
 8009858:	2b01      	cmp	r3, #1
 800985a:	d107      	bne.n	800986c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800985c:	4b30      	ldr	r3, [pc, #192]	; (8009920 <HAL_RCC_ClockConfig+0x244>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009864:	2b00      	cmp	r3, #0
 8009866:	d109      	bne.n	800987c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009868:	2301      	movs	r3, #1
 800986a:	e0de      	b.n	8009a2a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800986c:	4b2c      	ldr	r3, [pc, #176]	; (8009920 <HAL_RCC_ClockConfig+0x244>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f003 0304 	and.w	r3, r3, #4
 8009874:	2b00      	cmp	r3, #0
 8009876:	d101      	bne.n	800987c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009878:	2301      	movs	r3, #1
 800987a:	e0d6      	b.n	8009a2a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800987c:	4b28      	ldr	r3, [pc, #160]	; (8009920 <HAL_RCC_ClockConfig+0x244>)
 800987e:	691b      	ldr	r3, [r3, #16]
 8009880:	f023 0207 	bic.w	r2, r3, #7
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	685b      	ldr	r3, [r3, #4]
 8009888:	4925      	ldr	r1, [pc, #148]	; (8009920 <HAL_RCC_ClockConfig+0x244>)
 800988a:	4313      	orrs	r3, r2
 800988c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800988e:	f7f9 fdad 	bl	80033ec <HAL_GetTick>
 8009892:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009894:	e00a      	b.n	80098ac <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009896:	f7f9 fda9 	bl	80033ec <HAL_GetTick>
 800989a:	4602      	mov	r2, r0
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	1ad3      	subs	r3, r2, r3
 80098a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d901      	bls.n	80098ac <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80098a8:	2303      	movs	r3, #3
 80098aa:	e0be      	b.n	8009a2a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80098ac:	4b1c      	ldr	r3, [pc, #112]	; (8009920 <HAL_RCC_ClockConfig+0x244>)
 80098ae:	691b      	ldr	r3, [r3, #16]
 80098b0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	685b      	ldr	r3, [r3, #4]
 80098b8:	00db      	lsls	r3, r3, #3
 80098ba:	429a      	cmp	r2, r3
 80098bc:	d1eb      	bne.n	8009896 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f003 0302 	and.w	r3, r3, #2
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d010      	beq.n	80098ec <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	68da      	ldr	r2, [r3, #12]
 80098ce:	4b14      	ldr	r3, [pc, #80]	; (8009920 <HAL_RCC_ClockConfig+0x244>)
 80098d0:	699b      	ldr	r3, [r3, #24]
 80098d2:	f003 030f 	and.w	r3, r3, #15
 80098d6:	429a      	cmp	r2, r3
 80098d8:	d208      	bcs.n	80098ec <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80098da:	4b11      	ldr	r3, [pc, #68]	; (8009920 <HAL_RCC_ClockConfig+0x244>)
 80098dc:	699b      	ldr	r3, [r3, #24]
 80098de:	f023 020f 	bic.w	r2, r3, #15
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	68db      	ldr	r3, [r3, #12]
 80098e6:	490e      	ldr	r1, [pc, #56]	; (8009920 <HAL_RCC_ClockConfig+0x244>)
 80098e8:	4313      	orrs	r3, r2
 80098ea:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80098ec:	4b0b      	ldr	r3, [pc, #44]	; (800991c <HAL_RCC_ClockConfig+0x240>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f003 030f 	and.w	r3, r3, #15
 80098f4:	683a      	ldr	r2, [r7, #0]
 80098f6:	429a      	cmp	r2, r3
 80098f8:	d214      	bcs.n	8009924 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80098fa:	4b08      	ldr	r3, [pc, #32]	; (800991c <HAL_RCC_ClockConfig+0x240>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f023 020f 	bic.w	r2, r3, #15
 8009902:	4906      	ldr	r1, [pc, #24]	; (800991c <HAL_RCC_ClockConfig+0x240>)
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	4313      	orrs	r3, r2
 8009908:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800990a:	4b04      	ldr	r3, [pc, #16]	; (800991c <HAL_RCC_ClockConfig+0x240>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f003 030f 	and.w	r3, r3, #15
 8009912:	683a      	ldr	r2, [r7, #0]
 8009914:	429a      	cmp	r2, r3
 8009916:	d005      	beq.n	8009924 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009918:	2301      	movs	r3, #1
 800991a:	e086      	b.n	8009a2a <HAL_RCC_ClockConfig+0x34e>
 800991c:	52002000 	.word	0x52002000
 8009920:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f003 0304 	and.w	r3, r3, #4
 800992c:	2b00      	cmp	r3, #0
 800992e:	d010      	beq.n	8009952 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	691a      	ldr	r2, [r3, #16]
 8009934:	4b3f      	ldr	r3, [pc, #252]	; (8009a34 <HAL_RCC_ClockConfig+0x358>)
 8009936:	699b      	ldr	r3, [r3, #24]
 8009938:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800993c:	429a      	cmp	r2, r3
 800993e:	d208      	bcs.n	8009952 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009940:	4b3c      	ldr	r3, [pc, #240]	; (8009a34 <HAL_RCC_ClockConfig+0x358>)
 8009942:	699b      	ldr	r3, [r3, #24]
 8009944:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	691b      	ldr	r3, [r3, #16]
 800994c:	4939      	ldr	r1, [pc, #228]	; (8009a34 <HAL_RCC_ClockConfig+0x358>)
 800994e:	4313      	orrs	r3, r2
 8009950:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f003 0308 	and.w	r3, r3, #8
 800995a:	2b00      	cmp	r3, #0
 800995c:	d010      	beq.n	8009980 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	695a      	ldr	r2, [r3, #20]
 8009962:	4b34      	ldr	r3, [pc, #208]	; (8009a34 <HAL_RCC_ClockConfig+0x358>)
 8009964:	69db      	ldr	r3, [r3, #28]
 8009966:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800996a:	429a      	cmp	r2, r3
 800996c:	d208      	bcs.n	8009980 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800996e:	4b31      	ldr	r3, [pc, #196]	; (8009a34 <HAL_RCC_ClockConfig+0x358>)
 8009970:	69db      	ldr	r3, [r3, #28]
 8009972:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	695b      	ldr	r3, [r3, #20]
 800997a:	492e      	ldr	r1, [pc, #184]	; (8009a34 <HAL_RCC_ClockConfig+0x358>)
 800997c:	4313      	orrs	r3, r2
 800997e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f003 0310 	and.w	r3, r3, #16
 8009988:	2b00      	cmp	r3, #0
 800998a:	d010      	beq.n	80099ae <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	699a      	ldr	r2, [r3, #24]
 8009990:	4b28      	ldr	r3, [pc, #160]	; (8009a34 <HAL_RCC_ClockConfig+0x358>)
 8009992:	69db      	ldr	r3, [r3, #28]
 8009994:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009998:	429a      	cmp	r2, r3
 800999a:	d208      	bcs.n	80099ae <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800999c:	4b25      	ldr	r3, [pc, #148]	; (8009a34 <HAL_RCC_ClockConfig+0x358>)
 800999e:	69db      	ldr	r3, [r3, #28]
 80099a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	699b      	ldr	r3, [r3, #24]
 80099a8:	4922      	ldr	r1, [pc, #136]	; (8009a34 <HAL_RCC_ClockConfig+0x358>)
 80099aa:	4313      	orrs	r3, r2
 80099ac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f003 0320 	and.w	r3, r3, #32
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d010      	beq.n	80099dc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	69da      	ldr	r2, [r3, #28]
 80099be:	4b1d      	ldr	r3, [pc, #116]	; (8009a34 <HAL_RCC_ClockConfig+0x358>)
 80099c0:	6a1b      	ldr	r3, [r3, #32]
 80099c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80099c6:	429a      	cmp	r2, r3
 80099c8:	d208      	bcs.n	80099dc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80099ca:	4b1a      	ldr	r3, [pc, #104]	; (8009a34 <HAL_RCC_ClockConfig+0x358>)
 80099cc:	6a1b      	ldr	r3, [r3, #32]
 80099ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	69db      	ldr	r3, [r3, #28]
 80099d6:	4917      	ldr	r1, [pc, #92]	; (8009a34 <HAL_RCC_ClockConfig+0x358>)
 80099d8:	4313      	orrs	r3, r2
 80099da:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80099dc:	f000 f844 	bl	8009a68 <HAL_RCC_GetSysClockFreq>
 80099e0:	4602      	mov	r2, r0
 80099e2:	4b14      	ldr	r3, [pc, #80]	; (8009a34 <HAL_RCC_ClockConfig+0x358>)
 80099e4:	699b      	ldr	r3, [r3, #24]
 80099e6:	0a1b      	lsrs	r3, r3, #8
 80099e8:	f003 030f 	and.w	r3, r3, #15
 80099ec:	4912      	ldr	r1, [pc, #72]	; (8009a38 <HAL_RCC_ClockConfig+0x35c>)
 80099ee:	5ccb      	ldrb	r3, [r1, r3]
 80099f0:	f003 031f 	and.w	r3, r3, #31
 80099f4:	fa22 f303 	lsr.w	r3, r2, r3
 80099f8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80099fa:	4b0e      	ldr	r3, [pc, #56]	; (8009a34 <HAL_RCC_ClockConfig+0x358>)
 80099fc:	699b      	ldr	r3, [r3, #24]
 80099fe:	f003 030f 	and.w	r3, r3, #15
 8009a02:	4a0d      	ldr	r2, [pc, #52]	; (8009a38 <HAL_RCC_ClockConfig+0x35c>)
 8009a04:	5cd3      	ldrb	r3, [r2, r3]
 8009a06:	f003 031f 	and.w	r3, r3, #31
 8009a0a:	693a      	ldr	r2, [r7, #16]
 8009a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8009a10:	4a0a      	ldr	r2, [pc, #40]	; (8009a3c <HAL_RCC_ClockConfig+0x360>)
 8009a12:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009a14:	4a0a      	ldr	r2, [pc, #40]	; (8009a40 <HAL_RCC_ClockConfig+0x364>)
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8009a1a:	4b0a      	ldr	r3, [pc, #40]	; (8009a44 <HAL_RCC_ClockConfig+0x368>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f7f9 fc9a 	bl	8003358 <HAL_InitTick>
 8009a24:	4603      	mov	r3, r0
 8009a26:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3718      	adds	r7, #24
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}
 8009a32:	bf00      	nop
 8009a34:	58024400 	.word	0x58024400
 8009a38:	0801e0b8 	.word	0x0801e0b8
 8009a3c:	20000014 	.word	0x20000014
 8009a40:	20000010 	.word	0x20000010
 8009a44:	20000020 	.word	0x20000020

08009a48 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 8009a4c:	4b05      	ldr	r3, [pc, #20]	; (8009a64 <HAL_RCC_EnableCSS+0x1c>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	4a04      	ldr	r2, [pc, #16]	; (8009a64 <HAL_RCC_EnableCSS+0x1c>)
 8009a52:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009a56:	6013      	str	r3, [r2, #0]
}
 8009a58:	bf00      	nop
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a60:	4770      	bx	lr
 8009a62:	bf00      	nop
 8009a64:	58024400 	.word	0x58024400

08009a68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b089      	sub	sp, #36	; 0x24
 8009a6c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009a6e:	4bb3      	ldr	r3, [pc, #716]	; (8009d3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a70:	691b      	ldr	r3, [r3, #16]
 8009a72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a76:	2b18      	cmp	r3, #24
 8009a78:	f200 8155 	bhi.w	8009d26 <HAL_RCC_GetSysClockFreq+0x2be>
 8009a7c:	a201      	add	r2, pc, #4	; (adr r2, 8009a84 <HAL_RCC_GetSysClockFreq+0x1c>)
 8009a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a82:	bf00      	nop
 8009a84:	08009ae9 	.word	0x08009ae9
 8009a88:	08009d27 	.word	0x08009d27
 8009a8c:	08009d27 	.word	0x08009d27
 8009a90:	08009d27 	.word	0x08009d27
 8009a94:	08009d27 	.word	0x08009d27
 8009a98:	08009d27 	.word	0x08009d27
 8009a9c:	08009d27 	.word	0x08009d27
 8009aa0:	08009d27 	.word	0x08009d27
 8009aa4:	08009b0f 	.word	0x08009b0f
 8009aa8:	08009d27 	.word	0x08009d27
 8009aac:	08009d27 	.word	0x08009d27
 8009ab0:	08009d27 	.word	0x08009d27
 8009ab4:	08009d27 	.word	0x08009d27
 8009ab8:	08009d27 	.word	0x08009d27
 8009abc:	08009d27 	.word	0x08009d27
 8009ac0:	08009d27 	.word	0x08009d27
 8009ac4:	08009b15 	.word	0x08009b15
 8009ac8:	08009d27 	.word	0x08009d27
 8009acc:	08009d27 	.word	0x08009d27
 8009ad0:	08009d27 	.word	0x08009d27
 8009ad4:	08009d27 	.word	0x08009d27
 8009ad8:	08009d27 	.word	0x08009d27
 8009adc:	08009d27 	.word	0x08009d27
 8009ae0:	08009d27 	.word	0x08009d27
 8009ae4:	08009b1b 	.word	0x08009b1b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ae8:	4b94      	ldr	r3, [pc, #592]	; (8009d3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f003 0320 	and.w	r3, r3, #32
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d009      	beq.n	8009b08 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009af4:	4b91      	ldr	r3, [pc, #580]	; (8009d3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	08db      	lsrs	r3, r3, #3
 8009afa:	f003 0303 	and.w	r3, r3, #3
 8009afe:	4a90      	ldr	r2, [pc, #576]	; (8009d40 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009b00:	fa22 f303 	lsr.w	r3, r2, r3
 8009b04:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8009b06:	e111      	b.n	8009d2c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009b08:	4b8d      	ldr	r3, [pc, #564]	; (8009d40 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009b0a:	61bb      	str	r3, [r7, #24]
      break;
 8009b0c:	e10e      	b.n	8009d2c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8009b0e:	4b8d      	ldr	r3, [pc, #564]	; (8009d44 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009b10:	61bb      	str	r3, [r7, #24]
      break;
 8009b12:	e10b      	b.n	8009d2c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009b14:	4b8c      	ldr	r3, [pc, #560]	; (8009d48 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009b16:	61bb      	str	r3, [r7, #24]
      break;
 8009b18:	e108      	b.n	8009d2c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009b1a:	4b88      	ldr	r3, [pc, #544]	; (8009d3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b1e:	f003 0303 	and.w	r3, r3, #3
 8009b22:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009b24:	4b85      	ldr	r3, [pc, #532]	; (8009d3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b28:	091b      	lsrs	r3, r3, #4
 8009b2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b2e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009b30:	4b82      	ldr	r3, [pc, #520]	; (8009d3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b34:	f003 0301 	and.w	r3, r3, #1
 8009b38:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009b3a:	4b80      	ldr	r3, [pc, #512]	; (8009d3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b3e:	08db      	lsrs	r3, r3, #3
 8009b40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009b44:	68fa      	ldr	r2, [r7, #12]
 8009b46:	fb02 f303 	mul.w	r3, r2, r3
 8009b4a:	ee07 3a90 	vmov	s15, r3
 8009b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b52:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	f000 80e1 	beq.w	8009d20 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	2b02      	cmp	r3, #2
 8009b62:	f000 8083 	beq.w	8009c6c <HAL_RCC_GetSysClockFreq+0x204>
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	2b02      	cmp	r3, #2
 8009b6a:	f200 80a1 	bhi.w	8009cb0 <HAL_RCC_GetSysClockFreq+0x248>
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d003      	beq.n	8009b7c <HAL_RCC_GetSysClockFreq+0x114>
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	2b01      	cmp	r3, #1
 8009b78:	d056      	beq.n	8009c28 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009b7a:	e099      	b.n	8009cb0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b7c:	4b6f      	ldr	r3, [pc, #444]	; (8009d3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f003 0320 	and.w	r3, r3, #32
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d02d      	beq.n	8009be4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b88:	4b6c      	ldr	r3, [pc, #432]	; (8009d3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	08db      	lsrs	r3, r3, #3
 8009b8e:	f003 0303 	and.w	r3, r3, #3
 8009b92:	4a6b      	ldr	r2, [pc, #428]	; (8009d40 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009b94:	fa22 f303 	lsr.w	r3, r2, r3
 8009b98:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	ee07 3a90 	vmov	s15, r3
 8009ba0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	ee07 3a90 	vmov	s15, r3
 8009baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bb2:	4b62      	ldr	r3, [pc, #392]	; (8009d3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bba:	ee07 3a90 	vmov	s15, r3
 8009bbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8009bc6:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009d4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009bca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bde:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009be2:	e087      	b.n	8009cf4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009be4:	693b      	ldr	r3, [r7, #16]
 8009be6:	ee07 3a90 	vmov	s15, r3
 8009bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bee:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009d50 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009bf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bf6:	4b51      	ldr	r3, [pc, #324]	; (8009d3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bfe:	ee07 3a90 	vmov	s15, r3
 8009c02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c06:	ed97 6a02 	vldr	s12, [r7, #8]
 8009c0a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009d4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009c0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c22:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009c26:	e065      	b.n	8009cf4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	ee07 3a90 	vmov	s15, r3
 8009c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c32:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009d54 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009c36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c3a:	4b40      	ldr	r3, [pc, #256]	; (8009d3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c42:	ee07 3a90 	vmov	s15, r3
 8009c46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8009c4e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009d4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009c52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c66:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009c6a:	e043      	b.n	8009cf4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009c6c:	693b      	ldr	r3, [r7, #16]
 8009c6e:	ee07 3a90 	vmov	s15, r3
 8009c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c76:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009d58 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009c7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c7e:	4b2f      	ldr	r3, [pc, #188]	; (8009d3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c86:	ee07 3a90 	vmov	s15, r3
 8009c8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009c92:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009d4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009c96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ca2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009caa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009cae:	e021      	b.n	8009cf4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	ee07 3a90 	vmov	s15, r3
 8009cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cba:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009d54 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009cbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cc2:	4b1e      	ldr	r3, [pc, #120]	; (8009d3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cca:	ee07 3a90 	vmov	s15, r3
 8009cce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cd2:	ed97 6a02 	vldr	s12, [r7, #8]
 8009cd6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009d4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009cda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ce2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ce6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009cf2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009cf4:	4b11      	ldr	r3, [pc, #68]	; (8009d3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cf8:	0a5b      	lsrs	r3, r3, #9
 8009cfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cfe:	3301      	adds	r3, #1
 8009d00:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	ee07 3a90 	vmov	s15, r3
 8009d08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009d0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d18:	ee17 3a90 	vmov	r3, s15
 8009d1c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009d1e:	e005      	b.n	8009d2c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009d20:	2300      	movs	r3, #0
 8009d22:	61bb      	str	r3, [r7, #24]
      break;
 8009d24:	e002      	b.n	8009d2c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009d26:	4b07      	ldr	r3, [pc, #28]	; (8009d44 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009d28:	61bb      	str	r3, [r7, #24]
      break;
 8009d2a:	bf00      	nop
  }

  return sysclockfreq;
 8009d2c:	69bb      	ldr	r3, [r7, #24]
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3724      	adds	r7, #36	; 0x24
 8009d32:	46bd      	mov	sp, r7
 8009d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d38:	4770      	bx	lr
 8009d3a:	bf00      	nop
 8009d3c:	58024400 	.word	0x58024400
 8009d40:	03d09000 	.word	0x03d09000
 8009d44:	003d0900 	.word	0x003d0900
 8009d48:	00989680 	.word	0x00989680
 8009d4c:	46000000 	.word	0x46000000
 8009d50:	4c742400 	.word	0x4c742400
 8009d54:	4a742400 	.word	0x4a742400
 8009d58:	4b189680 	.word	0x4b189680

08009d5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b082      	sub	sp, #8
 8009d60:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009d62:	f7ff fe81 	bl	8009a68 <HAL_RCC_GetSysClockFreq>
 8009d66:	4602      	mov	r2, r0
 8009d68:	4b10      	ldr	r3, [pc, #64]	; (8009dac <HAL_RCC_GetHCLKFreq+0x50>)
 8009d6a:	699b      	ldr	r3, [r3, #24]
 8009d6c:	0a1b      	lsrs	r3, r3, #8
 8009d6e:	f003 030f 	and.w	r3, r3, #15
 8009d72:	490f      	ldr	r1, [pc, #60]	; (8009db0 <HAL_RCC_GetHCLKFreq+0x54>)
 8009d74:	5ccb      	ldrb	r3, [r1, r3]
 8009d76:	f003 031f 	and.w	r3, r3, #31
 8009d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8009d7e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009d80:	4b0a      	ldr	r3, [pc, #40]	; (8009dac <HAL_RCC_GetHCLKFreq+0x50>)
 8009d82:	699b      	ldr	r3, [r3, #24]
 8009d84:	f003 030f 	and.w	r3, r3, #15
 8009d88:	4a09      	ldr	r2, [pc, #36]	; (8009db0 <HAL_RCC_GetHCLKFreq+0x54>)
 8009d8a:	5cd3      	ldrb	r3, [r2, r3]
 8009d8c:	f003 031f 	and.w	r3, r3, #31
 8009d90:	687a      	ldr	r2, [r7, #4]
 8009d92:	fa22 f303 	lsr.w	r3, r2, r3
 8009d96:	4a07      	ldr	r2, [pc, #28]	; (8009db4 <HAL_RCC_GetHCLKFreq+0x58>)
 8009d98:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009d9a:	4a07      	ldr	r2, [pc, #28]	; (8009db8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009da0:	4b04      	ldr	r3, [pc, #16]	; (8009db4 <HAL_RCC_GetHCLKFreq+0x58>)
 8009da2:	681b      	ldr	r3, [r3, #0]
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	3708      	adds	r7, #8
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}
 8009dac:	58024400 	.word	0x58024400
 8009db0:	0801e0b8 	.word	0x0801e0b8
 8009db4:	20000014 	.word	0x20000014
 8009db8:	20000010 	.word	0x20000010

08009dbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009dc0:	f7ff ffcc 	bl	8009d5c <HAL_RCC_GetHCLKFreq>
 8009dc4:	4602      	mov	r2, r0
 8009dc6:	4b06      	ldr	r3, [pc, #24]	; (8009de0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009dc8:	69db      	ldr	r3, [r3, #28]
 8009dca:	091b      	lsrs	r3, r3, #4
 8009dcc:	f003 0307 	and.w	r3, r3, #7
 8009dd0:	4904      	ldr	r1, [pc, #16]	; (8009de4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009dd2:	5ccb      	ldrb	r3, [r1, r3]
 8009dd4:	f003 031f 	and.w	r3, r3, #31
 8009dd8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	bd80      	pop	{r7, pc}
 8009de0:	58024400 	.word	0x58024400
 8009de4:	0801e0b8 	.word	0x0801e0b8

08009de8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009dec:	f7ff ffb6 	bl	8009d5c <HAL_RCC_GetHCLKFreq>
 8009df0:	4602      	mov	r2, r0
 8009df2:	4b06      	ldr	r3, [pc, #24]	; (8009e0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009df4:	69db      	ldr	r3, [r3, #28]
 8009df6:	0a1b      	lsrs	r3, r3, #8
 8009df8:	f003 0307 	and.w	r3, r3, #7
 8009dfc:	4904      	ldr	r1, [pc, #16]	; (8009e10 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009dfe:	5ccb      	ldrb	r3, [r1, r3]
 8009e00:	f003 031f 	and.w	r3, r3, #31
 8009e04:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	bd80      	pop	{r7, pc}
 8009e0c:	58024400 	.word	0x58024400
 8009e10:	0801e0b8 	.word	0x0801e0b8

08009e14 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8009e18:	4b07      	ldr	r3, [pc, #28]	; (8009e38 <HAL_RCC_NMI_IRQHandler+0x24>)
 8009e1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e24:	d105      	bne.n	8009e32 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8009e26:	f000 f809 	bl	8009e3c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8009e2a:	4b03      	ldr	r3, [pc, #12]	; (8009e38 <HAL_RCC_NMI_IRQHandler+0x24>)
 8009e2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009e30:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 8009e32:	bf00      	nop
 8009e34:	bd80      	pop	{r7, pc}
 8009e36:	bf00      	nop
 8009e38:	58024400 	.word	0x58024400

08009e3c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8009e40:	bf00      	nop
 8009e42:	46bd      	mov	sp, r7
 8009e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e48:	4770      	bx	lr
	...

08009e4c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009e4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009e50:	b0ca      	sub	sp, #296	; 0x128
 8009e52:	af00      	add	r7, sp, #0
 8009e54:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009e58:	2300      	movs	r3, #0
 8009e5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009e5e:	2300      	movs	r3, #0
 8009e60:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e6c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8009e70:	2500      	movs	r5, #0
 8009e72:	ea54 0305 	orrs.w	r3, r4, r5
 8009e76:	d049      	beq.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e7e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009e82:	d02f      	beq.n	8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009e84:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009e88:	d828      	bhi.n	8009edc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009e8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009e8e:	d01a      	beq.n	8009ec6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009e90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009e94:	d822      	bhi.n	8009edc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d003      	beq.n	8009ea2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009e9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e9e:	d007      	beq.n	8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009ea0:	e01c      	b.n	8009edc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ea2:	4bb8      	ldr	r3, [pc, #736]	; (800a184 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ea6:	4ab7      	ldr	r2, [pc, #732]	; (800a184 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009eac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009eae:	e01a      	b.n	8009ee6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009eb4:	3308      	adds	r3, #8
 8009eb6:	2102      	movs	r1, #2
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f002 fbb7 	bl	800c62c <RCCEx_PLL2_Config>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009ec4:	e00f      	b.n	8009ee6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009eca:	3328      	adds	r3, #40	; 0x28
 8009ecc:	2102      	movs	r1, #2
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f002 fc5e 	bl	800c790 <RCCEx_PLL3_Config>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009eda:	e004      	b.n	8009ee6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009edc:	2301      	movs	r3, #1
 8009ede:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009ee2:	e000      	b.n	8009ee6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009ee4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ee6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d10a      	bne.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009eee:	4ba5      	ldr	r3, [pc, #660]	; (800a184 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009ef0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ef2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009efa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009efc:	4aa1      	ldr	r2, [pc, #644]	; (800a184 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009efe:	430b      	orrs	r3, r1
 8009f00:	6513      	str	r3, [r2, #80]	; 0x50
 8009f02:	e003      	b.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f08:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009f0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f14:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8009f18:	f04f 0900 	mov.w	r9, #0
 8009f1c:	ea58 0309 	orrs.w	r3, r8, r9
 8009f20:	d047      	beq.n	8009fb2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f28:	2b04      	cmp	r3, #4
 8009f2a:	d82a      	bhi.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009f2c:	a201      	add	r2, pc, #4	; (adr r2, 8009f34 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f32:	bf00      	nop
 8009f34:	08009f49 	.word	0x08009f49
 8009f38:	08009f57 	.word	0x08009f57
 8009f3c:	08009f6d 	.word	0x08009f6d
 8009f40:	08009f8b 	.word	0x08009f8b
 8009f44:	08009f8b 	.word	0x08009f8b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f48:	4b8e      	ldr	r3, [pc, #568]	; (800a184 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f4c:	4a8d      	ldr	r2, [pc, #564]	; (800a184 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009f4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009f54:	e01a      	b.n	8009f8c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f5a:	3308      	adds	r3, #8
 8009f5c:	2100      	movs	r1, #0
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f002 fb64 	bl	800c62c <RCCEx_PLL2_Config>
 8009f64:	4603      	mov	r3, r0
 8009f66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009f6a:	e00f      	b.n	8009f8c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f70:	3328      	adds	r3, #40	; 0x28
 8009f72:	2100      	movs	r1, #0
 8009f74:	4618      	mov	r0, r3
 8009f76:	f002 fc0b 	bl	800c790 <RCCEx_PLL3_Config>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009f80:	e004      	b.n	8009f8c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f82:	2301      	movs	r3, #1
 8009f84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009f88:	e000      	b.n	8009f8c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009f8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d10a      	bne.n	8009faa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009f94:	4b7b      	ldr	r3, [pc, #492]	; (800a184 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009f96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f98:	f023 0107 	bic.w	r1, r3, #7
 8009f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fa2:	4a78      	ldr	r2, [pc, #480]	; (800a184 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009fa4:	430b      	orrs	r3, r1
 8009fa6:	6513      	str	r3, [r2, #80]	; 0x50
 8009fa8:	e003      	b.n	8009fb2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009faa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009fae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fba:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8009fbe:	f04f 0b00 	mov.w	fp, #0
 8009fc2:	ea5a 030b 	orrs.w	r3, sl, fp
 8009fc6:	d04c      	beq.n	800a062 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8009fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fd2:	d030      	beq.n	800a036 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8009fd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fd8:	d829      	bhi.n	800a02e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009fda:	2bc0      	cmp	r3, #192	; 0xc0
 8009fdc:	d02d      	beq.n	800a03a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009fde:	2bc0      	cmp	r3, #192	; 0xc0
 8009fe0:	d825      	bhi.n	800a02e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009fe2:	2b80      	cmp	r3, #128	; 0x80
 8009fe4:	d018      	beq.n	800a018 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8009fe6:	2b80      	cmp	r3, #128	; 0x80
 8009fe8:	d821      	bhi.n	800a02e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d002      	beq.n	8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8009fee:	2b40      	cmp	r3, #64	; 0x40
 8009ff0:	d007      	beq.n	800a002 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8009ff2:	e01c      	b.n	800a02e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ff4:	4b63      	ldr	r3, [pc, #396]	; (800a184 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ff8:	4a62      	ldr	r2, [pc, #392]	; (800a184 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009ffa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ffe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800a000:	e01c      	b.n	800a03c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a002:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a006:	3308      	adds	r3, #8
 800a008:	2100      	movs	r1, #0
 800a00a:	4618      	mov	r0, r3
 800a00c:	f002 fb0e 	bl	800c62c <RCCEx_PLL2_Config>
 800a010:	4603      	mov	r3, r0
 800a012:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800a016:	e011      	b.n	800a03c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a018:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a01c:	3328      	adds	r3, #40	; 0x28
 800a01e:	2100      	movs	r1, #0
 800a020:	4618      	mov	r0, r3
 800a022:	f002 fbb5 	bl	800c790 <RCCEx_PLL3_Config>
 800a026:	4603      	mov	r3, r0
 800a028:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800a02c:	e006      	b.n	800a03c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a02e:	2301      	movs	r3, #1
 800a030:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a034:	e002      	b.n	800a03c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800a036:	bf00      	nop
 800a038:	e000      	b.n	800a03c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800a03a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a03c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a040:	2b00      	cmp	r3, #0
 800a042:	d10a      	bne.n	800a05a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800a044:	4b4f      	ldr	r3, [pc, #316]	; (800a184 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a048:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800a04c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a052:	4a4c      	ldr	r2, [pc, #304]	; (800a184 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a054:	430b      	orrs	r3, r1
 800a056:	6513      	str	r3, [r2, #80]	; 0x50
 800a058:	e003      	b.n	800a062 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a05a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a05e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a062:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a06a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800a06e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a072:	2300      	movs	r3, #0
 800a074:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800a078:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800a07c:	460b      	mov	r3, r1
 800a07e:	4313      	orrs	r3, r2
 800a080:	d053      	beq.n	800a12a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800a082:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a086:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a08a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a08e:	d035      	beq.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800a090:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a094:	d82e      	bhi.n	800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a096:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a09a:	d031      	beq.n	800a100 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800a09c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a0a0:	d828      	bhi.n	800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a0a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a0a6:	d01a      	beq.n	800a0de <HAL_RCCEx_PeriphCLKConfig+0x292>
 800a0a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a0ac:	d822      	bhi.n	800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d003      	beq.n	800a0ba <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800a0b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a0b6:	d007      	beq.n	800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800a0b8:	e01c      	b.n	800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a0ba:	4b32      	ldr	r3, [pc, #200]	; (800a184 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a0bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0be:	4a31      	ldr	r2, [pc, #196]	; (800a184 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a0c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a0c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a0c6:	e01c      	b.n	800a102 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a0c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0cc:	3308      	adds	r3, #8
 800a0ce:	2100      	movs	r1, #0
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f002 faab 	bl	800c62c <RCCEx_PLL2_Config>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a0dc:	e011      	b.n	800a102 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a0de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0e2:	3328      	adds	r3, #40	; 0x28
 800a0e4:	2100      	movs	r1, #0
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f002 fb52 	bl	800c790 <RCCEx_PLL3_Config>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a0f2:	e006      	b.n	800a102 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a0fa:	e002      	b.n	800a102 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800a0fc:	bf00      	nop
 800a0fe:	e000      	b.n	800a102 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800a100:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a102:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a106:	2b00      	cmp	r3, #0
 800a108:	d10b      	bne.n	800a122 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a10a:	4b1e      	ldr	r3, [pc, #120]	; (800a184 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a10c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a10e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800a112:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a116:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a11a:	4a1a      	ldr	r2, [pc, #104]	; (800a184 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a11c:	430b      	orrs	r3, r1
 800a11e:	6593      	str	r3, [r2, #88]	; 0x58
 800a120:	e003      	b.n	800a12a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a122:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a126:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a12a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a12e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a132:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800a136:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a13a:	2300      	movs	r3, #0
 800a13c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a140:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800a144:	460b      	mov	r3, r1
 800a146:	4313      	orrs	r3, r2
 800a148:	d056      	beq.n	800a1f8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800a14a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a14e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a152:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a156:	d038      	beq.n	800a1ca <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800a158:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a15c:	d831      	bhi.n	800a1c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a15e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a162:	d034      	beq.n	800a1ce <HAL_RCCEx_PeriphCLKConfig+0x382>
 800a164:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a168:	d82b      	bhi.n	800a1c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a16a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a16e:	d01d      	beq.n	800a1ac <HAL_RCCEx_PeriphCLKConfig+0x360>
 800a170:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a174:	d825      	bhi.n	800a1c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a176:	2b00      	cmp	r3, #0
 800a178:	d006      	beq.n	800a188 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800a17a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a17e:	d00a      	beq.n	800a196 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800a180:	e01f      	b.n	800a1c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a182:	bf00      	nop
 800a184:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a188:	4ba2      	ldr	r3, [pc, #648]	; (800a414 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a18a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a18c:	4aa1      	ldr	r2, [pc, #644]	; (800a414 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a18e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a192:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a194:	e01c      	b.n	800a1d0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a196:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a19a:	3308      	adds	r3, #8
 800a19c:	2100      	movs	r1, #0
 800a19e:	4618      	mov	r0, r3
 800a1a0:	f002 fa44 	bl	800c62c <RCCEx_PLL2_Config>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a1aa:	e011      	b.n	800a1d0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a1ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1b0:	3328      	adds	r3, #40	; 0x28
 800a1b2:	2100      	movs	r1, #0
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	f002 faeb 	bl	800c790 <RCCEx_PLL3_Config>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a1c0:	e006      	b.n	800a1d0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a1c8:	e002      	b.n	800a1d0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800a1ca:	bf00      	nop
 800a1cc:	e000      	b.n	800a1d0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800a1ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d10b      	bne.n	800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a1d8:	4b8e      	ldr	r3, [pc, #568]	; (800a414 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a1da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1dc:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800a1e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1e4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a1e8:	4a8a      	ldr	r2, [pc, #552]	; (800a414 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a1ea:	430b      	orrs	r3, r1
 800a1ec:	6593      	str	r3, [r2, #88]	; 0x58
 800a1ee:	e003      	b.n	800a1f8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a1f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a1f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a200:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800a204:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a208:	2300      	movs	r3, #0
 800a20a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a20e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800a212:	460b      	mov	r3, r1
 800a214:	4313      	orrs	r3, r2
 800a216:	d03a      	beq.n	800a28e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800a218:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a21c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a21e:	2b30      	cmp	r3, #48	; 0x30
 800a220:	d01f      	beq.n	800a262 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800a222:	2b30      	cmp	r3, #48	; 0x30
 800a224:	d819      	bhi.n	800a25a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800a226:	2b20      	cmp	r3, #32
 800a228:	d00c      	beq.n	800a244 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800a22a:	2b20      	cmp	r3, #32
 800a22c:	d815      	bhi.n	800a25a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d019      	beq.n	800a266 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800a232:	2b10      	cmp	r3, #16
 800a234:	d111      	bne.n	800a25a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a236:	4b77      	ldr	r3, [pc, #476]	; (800a414 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a23a:	4a76      	ldr	r2, [pc, #472]	; (800a414 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a23c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a240:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800a242:	e011      	b.n	800a268 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a244:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a248:	3308      	adds	r3, #8
 800a24a:	2102      	movs	r1, #2
 800a24c:	4618      	mov	r0, r3
 800a24e:	f002 f9ed 	bl	800c62c <RCCEx_PLL2_Config>
 800a252:	4603      	mov	r3, r0
 800a254:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800a258:	e006      	b.n	800a268 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a25a:	2301      	movs	r3, #1
 800a25c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a260:	e002      	b.n	800a268 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800a262:	bf00      	nop
 800a264:	e000      	b.n	800a268 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800a266:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a268:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d10a      	bne.n	800a286 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a270:	4b68      	ldr	r3, [pc, #416]	; (800a414 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a274:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800a278:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a27c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a27e:	4a65      	ldr	r2, [pc, #404]	; (800a414 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a280:	430b      	orrs	r3, r1
 800a282:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a284:	e003      	b.n	800a28e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a286:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a28a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a28e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a292:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a296:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800a29a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a29e:	2300      	movs	r3, #0
 800a2a0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a2a4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800a2a8:	460b      	mov	r3, r1
 800a2aa:	4313      	orrs	r3, r2
 800a2ac:	d051      	beq.n	800a352 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800a2ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a2b8:	d035      	beq.n	800a326 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800a2ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a2be:	d82e      	bhi.n	800a31e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a2c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a2c4:	d031      	beq.n	800a32a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800a2c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a2ca:	d828      	bhi.n	800a31e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a2cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a2d0:	d01a      	beq.n	800a308 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800a2d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a2d6:	d822      	bhi.n	800a31e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d003      	beq.n	800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800a2dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2e0:	d007      	beq.n	800a2f2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800a2e2:	e01c      	b.n	800a31e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2e4:	4b4b      	ldr	r3, [pc, #300]	; (800a414 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a2e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2e8:	4a4a      	ldr	r2, [pc, #296]	; (800a414 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a2ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a2ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a2f0:	e01c      	b.n	800a32c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a2f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2f6:	3308      	adds	r3, #8
 800a2f8:	2100      	movs	r1, #0
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f002 f996 	bl	800c62c <RCCEx_PLL2_Config>
 800a300:	4603      	mov	r3, r0
 800a302:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a306:	e011      	b.n	800a32c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a308:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a30c:	3328      	adds	r3, #40	; 0x28
 800a30e:	2100      	movs	r1, #0
 800a310:	4618      	mov	r0, r3
 800a312:	f002 fa3d 	bl	800c790 <RCCEx_PLL3_Config>
 800a316:	4603      	mov	r3, r0
 800a318:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a31c:	e006      	b.n	800a32c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a31e:	2301      	movs	r3, #1
 800a320:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a324:	e002      	b.n	800a32c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800a326:	bf00      	nop
 800a328:	e000      	b.n	800a32c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800a32a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a32c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a330:	2b00      	cmp	r3, #0
 800a332:	d10a      	bne.n	800a34a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a334:	4b37      	ldr	r3, [pc, #220]	; (800a414 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a336:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a338:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800a33c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a342:	4a34      	ldr	r2, [pc, #208]	; (800a414 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a344:	430b      	orrs	r3, r1
 800a346:	6513      	str	r3, [r2, #80]	; 0x50
 800a348:	e003      	b.n	800a352 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a34a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a34e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a352:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a35a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800a35e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a362:	2300      	movs	r3, #0
 800a364:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a368:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800a36c:	460b      	mov	r3, r1
 800a36e:	4313      	orrs	r3, r2
 800a370:	d056      	beq.n	800a420 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a372:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a376:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a378:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a37c:	d033      	beq.n	800a3e6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800a37e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a382:	d82c      	bhi.n	800a3de <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a384:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a388:	d02f      	beq.n	800a3ea <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800a38a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a38e:	d826      	bhi.n	800a3de <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a390:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a394:	d02b      	beq.n	800a3ee <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800a396:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a39a:	d820      	bhi.n	800a3de <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a39c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a3a0:	d012      	beq.n	800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800a3a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a3a6:	d81a      	bhi.n	800a3de <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d022      	beq.n	800a3f2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800a3ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3b0:	d115      	bne.n	800a3de <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a3b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3b6:	3308      	adds	r3, #8
 800a3b8:	2101      	movs	r1, #1
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f002 f936 	bl	800c62c <RCCEx_PLL2_Config>
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a3c6:	e015      	b.n	800a3f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a3c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3cc:	3328      	adds	r3, #40	; 0x28
 800a3ce:	2101      	movs	r1, #1
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	f002 f9dd 	bl	800c790 <RCCEx_PLL3_Config>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a3dc:	e00a      	b.n	800a3f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a3de:	2301      	movs	r3, #1
 800a3e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a3e4:	e006      	b.n	800a3f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a3e6:	bf00      	nop
 800a3e8:	e004      	b.n	800a3f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a3ea:	bf00      	nop
 800a3ec:	e002      	b.n	800a3f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a3ee:	bf00      	nop
 800a3f0:	e000      	b.n	800a3f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a3f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a3f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d10d      	bne.n	800a418 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a3fc:	4b05      	ldr	r3, [pc, #20]	; (800a414 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a3fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a400:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800a404:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a408:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a40a:	4a02      	ldr	r2, [pc, #8]	; (800a414 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a40c:	430b      	orrs	r3, r1
 800a40e:	6513      	str	r3, [r2, #80]	; 0x50
 800a410:	e006      	b.n	800a420 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800a412:	bf00      	nop
 800a414:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a418:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a41c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a420:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a424:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a428:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800a42c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a430:	2300      	movs	r3, #0
 800a432:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a436:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800a43a:	460b      	mov	r3, r1
 800a43c:	4313      	orrs	r3, r2
 800a43e:	d055      	beq.n	800a4ec <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a440:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a444:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a448:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a44c:	d033      	beq.n	800a4b6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800a44e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a452:	d82c      	bhi.n	800a4ae <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a454:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a458:	d02f      	beq.n	800a4ba <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800a45a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a45e:	d826      	bhi.n	800a4ae <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a460:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a464:	d02b      	beq.n	800a4be <HAL_RCCEx_PeriphCLKConfig+0x672>
 800a466:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a46a:	d820      	bhi.n	800a4ae <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a46c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a470:	d012      	beq.n	800a498 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800a472:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a476:	d81a      	bhi.n	800a4ae <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d022      	beq.n	800a4c2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800a47c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a480:	d115      	bne.n	800a4ae <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a482:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a486:	3308      	adds	r3, #8
 800a488:	2101      	movs	r1, #1
 800a48a:	4618      	mov	r0, r3
 800a48c:	f002 f8ce 	bl	800c62c <RCCEx_PLL2_Config>
 800a490:	4603      	mov	r3, r0
 800a492:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a496:	e015      	b.n	800a4c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a498:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a49c:	3328      	adds	r3, #40	; 0x28
 800a49e:	2101      	movs	r1, #1
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	f002 f975 	bl	800c790 <RCCEx_PLL3_Config>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a4ac:	e00a      	b.n	800a4c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a4b4:	e006      	b.n	800a4c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a4b6:	bf00      	nop
 800a4b8:	e004      	b.n	800a4c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a4ba:	bf00      	nop
 800a4bc:	e002      	b.n	800a4c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a4be:	bf00      	nop
 800a4c0:	e000      	b.n	800a4c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a4c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a4c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d10b      	bne.n	800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a4cc:	4ba3      	ldr	r3, [pc, #652]	; (800a75c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a4ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4d0:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a4d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a4dc:	4a9f      	ldr	r2, [pc, #636]	; (800a75c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a4de:	430b      	orrs	r3, r1
 800a4e0:	6593      	str	r3, [r2, #88]	; 0x58
 800a4e2:	e003      	b.n	800a4ec <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a4e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a4ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4f4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800a4f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a502:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a506:	460b      	mov	r3, r1
 800a508:	4313      	orrs	r3, r2
 800a50a:	d037      	beq.n	800a57c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800a50c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a512:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a516:	d00e      	beq.n	800a536 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800a518:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a51c:	d816      	bhi.n	800a54c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d018      	beq.n	800a554 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800a522:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a526:	d111      	bne.n	800a54c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a528:	4b8c      	ldr	r3, [pc, #560]	; (800a75c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a52a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a52c:	4a8b      	ldr	r2, [pc, #556]	; (800a75c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a52e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a532:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a534:	e00f      	b.n	800a556 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a536:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a53a:	3308      	adds	r3, #8
 800a53c:	2101      	movs	r1, #1
 800a53e:	4618      	mov	r0, r3
 800a540:	f002 f874 	bl	800c62c <RCCEx_PLL2_Config>
 800a544:	4603      	mov	r3, r0
 800a546:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a54a:	e004      	b.n	800a556 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a54c:	2301      	movs	r3, #1
 800a54e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a552:	e000      	b.n	800a556 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800a554:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a556:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d10a      	bne.n	800a574 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a55e:	4b7f      	ldr	r3, [pc, #508]	; (800a75c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a560:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a562:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800a566:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a56a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a56c:	4a7b      	ldr	r2, [pc, #492]	; (800a75c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a56e:	430b      	orrs	r3, r1
 800a570:	6513      	str	r3, [r2, #80]	; 0x50
 800a572:	e003      	b.n	800a57c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a574:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a578:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a57c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a580:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a584:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800a588:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a58c:	2300      	movs	r3, #0
 800a58e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a592:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800a596:	460b      	mov	r3, r1
 800a598:	4313      	orrs	r3, r2
 800a59a:	d039      	beq.n	800a610 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800a59c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a5a2:	2b03      	cmp	r3, #3
 800a5a4:	d81c      	bhi.n	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800a5a6:	a201      	add	r2, pc, #4	; (adr r2, 800a5ac <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800a5a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5ac:	0800a5e9 	.word	0x0800a5e9
 800a5b0:	0800a5bd 	.word	0x0800a5bd
 800a5b4:	0800a5cb 	.word	0x0800a5cb
 800a5b8:	0800a5e9 	.word	0x0800a5e9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a5bc:	4b67      	ldr	r3, [pc, #412]	; (800a75c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a5be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5c0:	4a66      	ldr	r2, [pc, #408]	; (800a75c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a5c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a5c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a5c8:	e00f      	b.n	800a5ea <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a5ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5ce:	3308      	adds	r3, #8
 800a5d0:	2102      	movs	r1, #2
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	f002 f82a 	bl	800c62c <RCCEx_PLL2_Config>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a5de:	e004      	b.n	800a5ea <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a5e0:	2301      	movs	r3, #1
 800a5e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a5e6:	e000      	b.n	800a5ea <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800a5e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a5ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d10a      	bne.n	800a608 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a5f2:	4b5a      	ldr	r3, [pc, #360]	; (800a75c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a5f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5f6:	f023 0103 	bic.w	r1, r3, #3
 800a5fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a600:	4a56      	ldr	r2, [pc, #344]	; (800a75c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a602:	430b      	orrs	r3, r1
 800a604:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a606:	e003      	b.n	800a610 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a608:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a60c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a610:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a614:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a618:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800a61c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a620:	2300      	movs	r3, #0
 800a622:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a626:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800a62a:	460b      	mov	r3, r1
 800a62c:	4313      	orrs	r3, r2
 800a62e:	f000 809f 	beq.w	800a770 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a632:	4b4b      	ldr	r3, [pc, #300]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	4a4a      	ldr	r2, [pc, #296]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a638:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a63c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a63e:	f7f8 fed5 	bl	80033ec <HAL_GetTick>
 800a642:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a646:	e00b      	b.n	800a660 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a648:	f7f8 fed0 	bl	80033ec <HAL_GetTick>
 800a64c:	4602      	mov	r2, r0
 800a64e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a652:	1ad3      	subs	r3, r2, r3
 800a654:	2b64      	cmp	r3, #100	; 0x64
 800a656:	d903      	bls.n	800a660 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800a658:	2303      	movs	r3, #3
 800a65a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a65e:	e005      	b.n	800a66c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a660:	4b3f      	ldr	r3, [pc, #252]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d0ed      	beq.n	800a648 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800a66c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a670:	2b00      	cmp	r3, #0
 800a672:	d179      	bne.n	800a768 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a674:	4b39      	ldr	r3, [pc, #228]	; (800a75c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a676:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a678:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a67c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a680:	4053      	eors	r3, r2
 800a682:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a686:	2b00      	cmp	r3, #0
 800a688:	d015      	beq.n	800a6b6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a68a:	4b34      	ldr	r3, [pc, #208]	; (800a75c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a68c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a68e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a692:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a696:	4b31      	ldr	r3, [pc, #196]	; (800a75c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a69a:	4a30      	ldr	r2, [pc, #192]	; (800a75c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a69c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a6a0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a6a2:	4b2e      	ldr	r3, [pc, #184]	; (800a75c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a6a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6a6:	4a2d      	ldr	r2, [pc, #180]	; (800a75c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a6a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a6ac:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a6ae:	4a2b      	ldr	r2, [pc, #172]	; (800a75c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a6b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a6b4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a6b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a6be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6c2:	d118      	bne.n	800a6f6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6c4:	f7f8 fe92 	bl	80033ec <HAL_GetTick>
 800a6c8:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a6cc:	e00d      	b.n	800a6ea <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a6ce:	f7f8 fe8d 	bl	80033ec <HAL_GetTick>
 800a6d2:	4602      	mov	r2, r0
 800a6d4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a6d8:	1ad2      	subs	r2, r2, r3
 800a6da:	f241 3388 	movw	r3, #5000	; 0x1388
 800a6de:	429a      	cmp	r2, r3
 800a6e0:	d903      	bls.n	800a6ea <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800a6e2:	2303      	movs	r3, #3
 800a6e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800a6e8:	e005      	b.n	800a6f6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a6ea:	4b1c      	ldr	r3, [pc, #112]	; (800a75c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a6ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6ee:	f003 0302 	and.w	r3, r3, #2
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d0eb      	beq.n	800a6ce <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800a6f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d129      	bne.n	800a752 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a6fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a702:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a706:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a70a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a70e:	d10e      	bne.n	800a72e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800a710:	4b12      	ldr	r3, [pc, #72]	; (800a75c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a712:	691b      	ldr	r3, [r3, #16]
 800a714:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800a718:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a71c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a720:	091a      	lsrs	r2, r3, #4
 800a722:	4b10      	ldr	r3, [pc, #64]	; (800a764 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800a724:	4013      	ands	r3, r2
 800a726:	4a0d      	ldr	r2, [pc, #52]	; (800a75c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a728:	430b      	orrs	r3, r1
 800a72a:	6113      	str	r3, [r2, #16]
 800a72c:	e005      	b.n	800a73a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800a72e:	4b0b      	ldr	r3, [pc, #44]	; (800a75c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a730:	691b      	ldr	r3, [r3, #16]
 800a732:	4a0a      	ldr	r2, [pc, #40]	; (800a75c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a734:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a738:	6113      	str	r3, [r2, #16]
 800a73a:	4b08      	ldr	r3, [pc, #32]	; (800a75c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a73c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a73e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a742:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a746:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a74a:	4a04      	ldr	r2, [pc, #16]	; (800a75c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a74c:	430b      	orrs	r3, r1
 800a74e:	6713      	str	r3, [r2, #112]	; 0x70
 800a750:	e00e      	b.n	800a770 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a752:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a756:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800a75a:	e009      	b.n	800a770 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800a75c:	58024400 	.word	0x58024400
 800a760:	58024800 	.word	0x58024800
 800a764:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a768:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a76c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a770:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a774:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a778:	f002 0301 	and.w	r3, r2, #1
 800a77c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a780:	2300      	movs	r3, #0
 800a782:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a786:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a78a:	460b      	mov	r3, r1
 800a78c:	4313      	orrs	r3, r2
 800a78e:	f000 8089 	beq.w	800a8a4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a792:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a796:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a798:	2b28      	cmp	r3, #40	; 0x28
 800a79a:	d86b      	bhi.n	800a874 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800a79c:	a201      	add	r2, pc, #4	; (adr r2, 800a7a4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a79e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7a2:	bf00      	nop
 800a7a4:	0800a87d 	.word	0x0800a87d
 800a7a8:	0800a875 	.word	0x0800a875
 800a7ac:	0800a875 	.word	0x0800a875
 800a7b0:	0800a875 	.word	0x0800a875
 800a7b4:	0800a875 	.word	0x0800a875
 800a7b8:	0800a875 	.word	0x0800a875
 800a7bc:	0800a875 	.word	0x0800a875
 800a7c0:	0800a875 	.word	0x0800a875
 800a7c4:	0800a849 	.word	0x0800a849
 800a7c8:	0800a875 	.word	0x0800a875
 800a7cc:	0800a875 	.word	0x0800a875
 800a7d0:	0800a875 	.word	0x0800a875
 800a7d4:	0800a875 	.word	0x0800a875
 800a7d8:	0800a875 	.word	0x0800a875
 800a7dc:	0800a875 	.word	0x0800a875
 800a7e0:	0800a875 	.word	0x0800a875
 800a7e4:	0800a85f 	.word	0x0800a85f
 800a7e8:	0800a875 	.word	0x0800a875
 800a7ec:	0800a875 	.word	0x0800a875
 800a7f0:	0800a875 	.word	0x0800a875
 800a7f4:	0800a875 	.word	0x0800a875
 800a7f8:	0800a875 	.word	0x0800a875
 800a7fc:	0800a875 	.word	0x0800a875
 800a800:	0800a875 	.word	0x0800a875
 800a804:	0800a87d 	.word	0x0800a87d
 800a808:	0800a875 	.word	0x0800a875
 800a80c:	0800a875 	.word	0x0800a875
 800a810:	0800a875 	.word	0x0800a875
 800a814:	0800a875 	.word	0x0800a875
 800a818:	0800a875 	.word	0x0800a875
 800a81c:	0800a875 	.word	0x0800a875
 800a820:	0800a875 	.word	0x0800a875
 800a824:	0800a87d 	.word	0x0800a87d
 800a828:	0800a875 	.word	0x0800a875
 800a82c:	0800a875 	.word	0x0800a875
 800a830:	0800a875 	.word	0x0800a875
 800a834:	0800a875 	.word	0x0800a875
 800a838:	0800a875 	.word	0x0800a875
 800a83c:	0800a875 	.word	0x0800a875
 800a840:	0800a875 	.word	0x0800a875
 800a844:	0800a87d 	.word	0x0800a87d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a848:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a84c:	3308      	adds	r3, #8
 800a84e:	2101      	movs	r1, #1
 800a850:	4618      	mov	r0, r3
 800a852:	f001 feeb 	bl	800c62c <RCCEx_PLL2_Config>
 800a856:	4603      	mov	r3, r0
 800a858:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a85c:	e00f      	b.n	800a87e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a85e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a862:	3328      	adds	r3, #40	; 0x28
 800a864:	2101      	movs	r1, #1
 800a866:	4618      	mov	r0, r3
 800a868:	f001 ff92 	bl	800c790 <RCCEx_PLL3_Config>
 800a86c:	4603      	mov	r3, r0
 800a86e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a872:	e004      	b.n	800a87e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a874:	2301      	movs	r3, #1
 800a876:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a87a:	e000      	b.n	800a87e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800a87c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a87e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a882:	2b00      	cmp	r3, #0
 800a884:	d10a      	bne.n	800a89c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a886:	4bbf      	ldr	r3, [pc, #764]	; (800ab84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a88a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800a88e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a892:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a894:	4abb      	ldr	r2, [pc, #748]	; (800ab84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a896:	430b      	orrs	r3, r1
 800a898:	6553      	str	r3, [r2, #84]	; 0x54
 800a89a:	e003      	b.n	800a8a4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a89c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a8a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a8a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ac:	f002 0302 	and.w	r3, r2, #2
 800a8b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a8ba:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800a8be:	460b      	mov	r3, r1
 800a8c0:	4313      	orrs	r3, r2
 800a8c2:	d041      	beq.n	800a948 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a8c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a8ca:	2b05      	cmp	r3, #5
 800a8cc:	d824      	bhi.n	800a918 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800a8ce:	a201      	add	r2, pc, #4	; (adr r2, 800a8d4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800a8d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8d4:	0800a921 	.word	0x0800a921
 800a8d8:	0800a8ed 	.word	0x0800a8ed
 800a8dc:	0800a903 	.word	0x0800a903
 800a8e0:	0800a921 	.word	0x0800a921
 800a8e4:	0800a921 	.word	0x0800a921
 800a8e8:	0800a921 	.word	0x0800a921
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a8ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8f0:	3308      	adds	r3, #8
 800a8f2:	2101      	movs	r1, #1
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	f001 fe99 	bl	800c62c <RCCEx_PLL2_Config>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a900:	e00f      	b.n	800a922 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a902:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a906:	3328      	adds	r3, #40	; 0x28
 800a908:	2101      	movs	r1, #1
 800a90a:	4618      	mov	r0, r3
 800a90c:	f001 ff40 	bl	800c790 <RCCEx_PLL3_Config>
 800a910:	4603      	mov	r3, r0
 800a912:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a916:	e004      	b.n	800a922 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a918:	2301      	movs	r3, #1
 800a91a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a91e:	e000      	b.n	800a922 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800a920:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a922:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a926:	2b00      	cmp	r3, #0
 800a928:	d10a      	bne.n	800a940 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a92a:	4b96      	ldr	r3, [pc, #600]	; (800ab84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a92c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a92e:	f023 0107 	bic.w	r1, r3, #7
 800a932:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a936:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a938:	4a92      	ldr	r2, [pc, #584]	; (800ab84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a93a:	430b      	orrs	r3, r1
 800a93c:	6553      	str	r3, [r2, #84]	; 0x54
 800a93e:	e003      	b.n	800a948 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a940:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a944:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a948:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a94c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a950:	f002 0304 	and.w	r3, r2, #4
 800a954:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a958:	2300      	movs	r3, #0
 800a95a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a95e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800a962:	460b      	mov	r3, r1
 800a964:	4313      	orrs	r3, r2
 800a966:	d044      	beq.n	800a9f2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a968:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a96c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a970:	2b05      	cmp	r3, #5
 800a972:	d825      	bhi.n	800a9c0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800a974:	a201      	add	r2, pc, #4	; (adr r2, 800a97c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800a976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a97a:	bf00      	nop
 800a97c:	0800a9c9 	.word	0x0800a9c9
 800a980:	0800a995 	.word	0x0800a995
 800a984:	0800a9ab 	.word	0x0800a9ab
 800a988:	0800a9c9 	.word	0x0800a9c9
 800a98c:	0800a9c9 	.word	0x0800a9c9
 800a990:	0800a9c9 	.word	0x0800a9c9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a994:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a998:	3308      	adds	r3, #8
 800a99a:	2101      	movs	r1, #1
 800a99c:	4618      	mov	r0, r3
 800a99e:	f001 fe45 	bl	800c62c <RCCEx_PLL2_Config>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a9a8:	e00f      	b.n	800a9ca <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a9aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9ae:	3328      	adds	r3, #40	; 0x28
 800a9b0:	2101      	movs	r1, #1
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	f001 feec 	bl	800c790 <RCCEx_PLL3_Config>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a9be:	e004      	b.n	800a9ca <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a9c0:	2301      	movs	r3, #1
 800a9c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a9c6:	e000      	b.n	800a9ca <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800a9c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a9ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d10b      	bne.n	800a9ea <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a9d2:	4b6c      	ldr	r3, [pc, #432]	; (800ab84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a9d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9d6:	f023 0107 	bic.w	r1, r3, #7
 800a9da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a9e2:	4a68      	ldr	r2, [pc, #416]	; (800ab84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a9e4:	430b      	orrs	r3, r1
 800a9e6:	6593      	str	r3, [r2, #88]	; 0x58
 800a9e8:	e003      	b.n	800a9f2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a9ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a9f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9fa:	f002 0320 	and.w	r3, r2, #32
 800a9fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800aa02:	2300      	movs	r3, #0
 800aa04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800aa08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800aa0c:	460b      	mov	r3, r1
 800aa0e:	4313      	orrs	r3, r2
 800aa10:	d055      	beq.n	800aabe <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800aa12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aa1e:	d033      	beq.n	800aa88 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800aa20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aa24:	d82c      	bhi.n	800aa80 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800aa26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa2a:	d02f      	beq.n	800aa8c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800aa2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa30:	d826      	bhi.n	800aa80 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800aa32:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800aa36:	d02b      	beq.n	800aa90 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800aa38:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800aa3c:	d820      	bhi.n	800aa80 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800aa3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa42:	d012      	beq.n	800aa6a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800aa44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa48:	d81a      	bhi.n	800aa80 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d022      	beq.n	800aa94 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800aa4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa52:	d115      	bne.n	800aa80 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aa54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa58:	3308      	adds	r3, #8
 800aa5a:	2100      	movs	r1, #0
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	f001 fde5 	bl	800c62c <RCCEx_PLL2_Config>
 800aa62:	4603      	mov	r3, r0
 800aa64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800aa68:	e015      	b.n	800aa96 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aa6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa6e:	3328      	adds	r3, #40	; 0x28
 800aa70:	2102      	movs	r1, #2
 800aa72:	4618      	mov	r0, r3
 800aa74:	f001 fe8c 	bl	800c790 <RCCEx_PLL3_Config>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800aa7e:	e00a      	b.n	800aa96 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aa80:	2301      	movs	r3, #1
 800aa82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aa86:	e006      	b.n	800aa96 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800aa88:	bf00      	nop
 800aa8a:	e004      	b.n	800aa96 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800aa8c:	bf00      	nop
 800aa8e:	e002      	b.n	800aa96 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800aa90:	bf00      	nop
 800aa92:	e000      	b.n	800aa96 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800aa94:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d10b      	bne.n	800aab6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800aa9e:	4b39      	ldr	r3, [pc, #228]	; (800ab84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800aaa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aaa2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800aaa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aaaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aaae:	4a35      	ldr	r2, [pc, #212]	; (800ab84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800aab0:	430b      	orrs	r3, r1
 800aab2:	6553      	str	r3, [r2, #84]	; 0x54
 800aab4:	e003      	b.n	800aabe <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aab6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aaba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800aabe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800aaca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800aace:	2300      	movs	r3, #0
 800aad0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800aad4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800aad8:	460b      	mov	r3, r1
 800aada:	4313      	orrs	r3, r2
 800aadc:	d058      	beq.n	800ab90 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800aade:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aae2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800aae6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800aaea:	d033      	beq.n	800ab54 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800aaec:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800aaf0:	d82c      	bhi.n	800ab4c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800aaf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aaf6:	d02f      	beq.n	800ab58 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800aaf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aafc:	d826      	bhi.n	800ab4c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800aafe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ab02:	d02b      	beq.n	800ab5c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800ab04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ab08:	d820      	bhi.n	800ab4c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800ab0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab0e:	d012      	beq.n	800ab36 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800ab10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab14:	d81a      	bhi.n	800ab4c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d022      	beq.n	800ab60 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800ab1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab1e:	d115      	bne.n	800ab4c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ab20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab24:	3308      	adds	r3, #8
 800ab26:	2100      	movs	r1, #0
 800ab28:	4618      	mov	r0, r3
 800ab2a:	f001 fd7f 	bl	800c62c <RCCEx_PLL2_Config>
 800ab2e:	4603      	mov	r3, r0
 800ab30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800ab34:	e015      	b.n	800ab62 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ab36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab3a:	3328      	adds	r3, #40	; 0x28
 800ab3c:	2102      	movs	r1, #2
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f001 fe26 	bl	800c790 <RCCEx_PLL3_Config>
 800ab44:	4603      	mov	r3, r0
 800ab46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800ab4a:	e00a      	b.n	800ab62 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ab52:	e006      	b.n	800ab62 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800ab54:	bf00      	nop
 800ab56:	e004      	b.n	800ab62 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800ab58:	bf00      	nop
 800ab5a:	e002      	b.n	800ab62 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800ab5c:	bf00      	nop
 800ab5e:	e000      	b.n	800ab62 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800ab60:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d10e      	bne.n	800ab88 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ab6a:	4b06      	ldr	r3, [pc, #24]	; (800ab84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ab6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab6e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800ab72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab76:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ab7a:	4a02      	ldr	r2, [pc, #8]	; (800ab84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ab7c:	430b      	orrs	r3, r1
 800ab7e:	6593      	str	r3, [r2, #88]	; 0x58
 800ab80:	e006      	b.n	800ab90 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800ab82:	bf00      	nop
 800ab84:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab8c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800ab90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab98:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800ab9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800aba0:	2300      	movs	r3, #0
 800aba2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800aba6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800abaa:	460b      	mov	r3, r1
 800abac:	4313      	orrs	r3, r2
 800abae:	d055      	beq.n	800ac5c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800abb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abb4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800abb8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800abbc:	d033      	beq.n	800ac26 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800abbe:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800abc2:	d82c      	bhi.n	800ac1e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800abc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800abc8:	d02f      	beq.n	800ac2a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800abca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800abce:	d826      	bhi.n	800ac1e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800abd0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800abd4:	d02b      	beq.n	800ac2e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800abd6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800abda:	d820      	bhi.n	800ac1e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800abdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800abe0:	d012      	beq.n	800ac08 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800abe2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800abe6:	d81a      	bhi.n	800ac1e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d022      	beq.n	800ac32 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800abec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800abf0:	d115      	bne.n	800ac1e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800abf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abf6:	3308      	adds	r3, #8
 800abf8:	2100      	movs	r1, #0
 800abfa:	4618      	mov	r0, r3
 800abfc:	f001 fd16 	bl	800c62c <RCCEx_PLL2_Config>
 800ac00:	4603      	mov	r3, r0
 800ac02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800ac06:	e015      	b.n	800ac34 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ac08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac0c:	3328      	adds	r3, #40	; 0x28
 800ac0e:	2102      	movs	r1, #2
 800ac10:	4618      	mov	r0, r3
 800ac12:	f001 fdbd 	bl	800c790 <RCCEx_PLL3_Config>
 800ac16:	4603      	mov	r3, r0
 800ac18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800ac1c:	e00a      	b.n	800ac34 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac1e:	2301      	movs	r3, #1
 800ac20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ac24:	e006      	b.n	800ac34 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800ac26:	bf00      	nop
 800ac28:	e004      	b.n	800ac34 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800ac2a:	bf00      	nop
 800ac2c:	e002      	b.n	800ac34 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800ac2e:	bf00      	nop
 800ac30:	e000      	b.n	800ac34 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800ac32:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d10b      	bne.n	800ac54 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800ac3c:	4ba1      	ldr	r3, [pc, #644]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ac3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac40:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800ac44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac48:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ac4c:	4a9d      	ldr	r2, [pc, #628]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ac4e:	430b      	orrs	r3, r1
 800ac50:	6593      	str	r3, [r2, #88]	; 0x58
 800ac52:	e003      	b.n	800ac5c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac58:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800ac5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac64:	f002 0308 	and.w	r3, r2, #8
 800ac68:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ac72:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800ac76:	460b      	mov	r3, r1
 800ac78:	4313      	orrs	r3, r2
 800ac7a:	d01e      	beq.n	800acba <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800ac7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac88:	d10c      	bne.n	800aca4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ac8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac8e:	3328      	adds	r3, #40	; 0x28
 800ac90:	2102      	movs	r1, #2
 800ac92:	4618      	mov	r0, r3
 800ac94:	f001 fd7c 	bl	800c790 <RCCEx_PLL3_Config>
 800ac98:	4603      	mov	r3, r0
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d002      	beq.n	800aca4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800ac9e:	2301      	movs	r3, #1
 800aca0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800aca4:	4b87      	ldr	r3, [pc, #540]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aca8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800acac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800acb4:	4a83      	ldr	r2, [pc, #524]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800acb6:	430b      	orrs	r3, r1
 800acb8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800acba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acc2:	f002 0310 	and.w	r3, r2, #16
 800acc6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800acca:	2300      	movs	r3, #0
 800accc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800acd0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800acd4:	460b      	mov	r3, r1
 800acd6:	4313      	orrs	r3, r2
 800acd8:	d01e      	beq.n	800ad18 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800acda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acde:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ace2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ace6:	d10c      	bne.n	800ad02 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ace8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acec:	3328      	adds	r3, #40	; 0x28
 800acee:	2102      	movs	r1, #2
 800acf0:	4618      	mov	r0, r3
 800acf2:	f001 fd4d 	bl	800c790 <RCCEx_PLL3_Config>
 800acf6:	4603      	mov	r3, r0
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d002      	beq.n	800ad02 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800acfc:	2301      	movs	r3, #1
 800acfe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ad02:	4b70      	ldr	r3, [pc, #448]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ad04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad06:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ad0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ad12:	4a6c      	ldr	r2, [pc, #432]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ad14:	430b      	orrs	r3, r1
 800ad16:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ad18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad20:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800ad24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ad28:	2300      	movs	r3, #0
 800ad2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ad2e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800ad32:	460b      	mov	r3, r1
 800ad34:	4313      	orrs	r3, r2
 800ad36:	d03e      	beq.n	800adb6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800ad38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad3c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ad40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad44:	d022      	beq.n	800ad8c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800ad46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad4a:	d81b      	bhi.n	800ad84 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d003      	beq.n	800ad58 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800ad50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad54:	d00b      	beq.n	800ad6e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800ad56:	e015      	b.n	800ad84 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ad58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad5c:	3308      	adds	r3, #8
 800ad5e:	2100      	movs	r1, #0
 800ad60:	4618      	mov	r0, r3
 800ad62:	f001 fc63 	bl	800c62c <RCCEx_PLL2_Config>
 800ad66:	4603      	mov	r3, r0
 800ad68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ad6c:	e00f      	b.n	800ad8e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ad6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad72:	3328      	adds	r3, #40	; 0x28
 800ad74:	2102      	movs	r1, #2
 800ad76:	4618      	mov	r0, r3
 800ad78:	f001 fd0a 	bl	800c790 <RCCEx_PLL3_Config>
 800ad7c:	4603      	mov	r3, r0
 800ad7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ad82:	e004      	b.n	800ad8e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad84:	2301      	movs	r3, #1
 800ad86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ad8a:	e000      	b.n	800ad8e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800ad8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d10b      	bne.n	800adae <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ad96:	4b4b      	ldr	r3, [pc, #300]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ad98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad9a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800ad9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ada2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ada6:	4a47      	ldr	r2, [pc, #284]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ada8:	430b      	orrs	r3, r1
 800adaa:	6593      	str	r3, [r2, #88]	; 0x58
 800adac:	e003      	b.n	800adb6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800adb2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800adb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adbe:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800adc2:	67bb      	str	r3, [r7, #120]	; 0x78
 800adc4:	2300      	movs	r3, #0
 800adc6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800adc8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800adcc:	460b      	mov	r3, r1
 800adce:	4313      	orrs	r3, r2
 800add0:	d03b      	beq.n	800ae4a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800add2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800add6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adda:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800adde:	d01f      	beq.n	800ae20 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800ade0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ade4:	d818      	bhi.n	800ae18 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800ade6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800adea:	d003      	beq.n	800adf4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800adec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800adf0:	d007      	beq.n	800ae02 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800adf2:	e011      	b.n	800ae18 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800adf4:	4b33      	ldr	r3, [pc, #204]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800adf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adf8:	4a32      	ldr	r2, [pc, #200]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800adfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800adfe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800ae00:	e00f      	b.n	800ae22 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ae02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae06:	3328      	adds	r3, #40	; 0x28
 800ae08:	2101      	movs	r1, #1
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f001 fcc0 	bl	800c790 <RCCEx_PLL3_Config>
 800ae10:	4603      	mov	r3, r0
 800ae12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800ae16:	e004      	b.n	800ae22 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ae18:	2301      	movs	r3, #1
 800ae1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ae1e:	e000      	b.n	800ae22 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800ae20:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d10b      	bne.n	800ae42 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ae2a:	4b26      	ldr	r3, [pc, #152]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ae2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae2e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800ae32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae3a:	4a22      	ldr	r2, [pc, #136]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ae3c:	430b      	orrs	r3, r1
 800ae3e:	6553      	str	r3, [r2, #84]	; 0x54
 800ae40:	e003      	b.n	800ae4a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ae4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae52:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800ae56:	673b      	str	r3, [r7, #112]	; 0x70
 800ae58:	2300      	movs	r3, #0
 800ae5a:	677b      	str	r3, [r7, #116]	; 0x74
 800ae5c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800ae60:	460b      	mov	r3, r1
 800ae62:	4313      	orrs	r3, r2
 800ae64:	d034      	beq.n	800aed0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800ae66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d003      	beq.n	800ae78 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800ae70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae74:	d007      	beq.n	800ae86 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800ae76:	e011      	b.n	800ae9c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae78:	4b12      	ldr	r3, [pc, #72]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ae7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae7c:	4a11      	ldr	r2, [pc, #68]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ae7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ae84:	e00e      	b.n	800aea4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ae86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae8a:	3308      	adds	r3, #8
 800ae8c:	2102      	movs	r1, #2
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f001 fbcc 	bl	800c62c <RCCEx_PLL2_Config>
 800ae94:	4603      	mov	r3, r0
 800ae96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ae9a:	e003      	b.n	800aea4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aea2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aea4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d10d      	bne.n	800aec8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800aeac:	4b05      	ldr	r3, [pc, #20]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aeae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aeb0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800aeb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aeb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aeba:	4a02      	ldr	r2, [pc, #8]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aebc:	430b      	orrs	r3, r1
 800aebe:	64d3      	str	r3, [r2, #76]	; 0x4c
 800aec0:	e006      	b.n	800aed0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800aec2:	bf00      	nop
 800aec4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aec8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aecc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800aed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aed8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800aedc:	66bb      	str	r3, [r7, #104]	; 0x68
 800aede:	2300      	movs	r3, #0
 800aee0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800aee2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800aee6:	460b      	mov	r3, r1
 800aee8:	4313      	orrs	r3, r2
 800aeea:	d00c      	beq.n	800af06 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800aeec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aef0:	3328      	adds	r3, #40	; 0x28
 800aef2:	2102      	movs	r1, #2
 800aef4:	4618      	mov	r0, r3
 800aef6:	f001 fc4b 	bl	800c790 <RCCEx_PLL3_Config>
 800aefa:	4603      	mov	r3, r0
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d002      	beq.n	800af06 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800af00:	2301      	movs	r3, #1
 800af02:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800af06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af0e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800af12:	663b      	str	r3, [r7, #96]	; 0x60
 800af14:	2300      	movs	r3, #0
 800af16:	667b      	str	r3, [r7, #100]	; 0x64
 800af18:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800af1c:	460b      	mov	r3, r1
 800af1e:	4313      	orrs	r3, r2
 800af20:	d038      	beq.n	800af94 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800af22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800af2e:	d018      	beq.n	800af62 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800af30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800af34:	d811      	bhi.n	800af5a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800af36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af3a:	d014      	beq.n	800af66 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800af3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af40:	d80b      	bhi.n	800af5a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800af42:	2b00      	cmp	r3, #0
 800af44:	d011      	beq.n	800af6a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800af46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af4a:	d106      	bne.n	800af5a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af4c:	4bc3      	ldr	r3, [pc, #780]	; (800b25c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800af4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af50:	4ac2      	ldr	r2, [pc, #776]	; (800b25c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800af52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800af58:	e008      	b.n	800af6c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af5a:	2301      	movs	r3, #1
 800af5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800af60:	e004      	b.n	800af6c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800af62:	bf00      	nop
 800af64:	e002      	b.n	800af6c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800af66:	bf00      	nop
 800af68:	e000      	b.n	800af6c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800af6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af70:	2b00      	cmp	r3, #0
 800af72:	d10b      	bne.n	800af8c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800af74:	4bb9      	ldr	r3, [pc, #740]	; (800b25c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800af76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af78:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800af7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af84:	4ab5      	ldr	r2, [pc, #724]	; (800b25c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800af86:	430b      	orrs	r3, r1
 800af88:	6553      	str	r3, [r2, #84]	; 0x54
 800af8a:	e003      	b.n	800af94 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af90:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800af94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af9c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800afa0:	65bb      	str	r3, [r7, #88]	; 0x58
 800afa2:	2300      	movs	r3, #0
 800afa4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800afa6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800afaa:	460b      	mov	r3, r1
 800afac:	4313      	orrs	r3, r2
 800afae:	d009      	beq.n	800afc4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800afb0:	4baa      	ldr	r3, [pc, #680]	; (800b25c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800afb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afb4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800afb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800afbe:	4aa7      	ldr	r2, [pc, #668]	; (800b25c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800afc0:	430b      	orrs	r3, r1
 800afc2:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800afc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afcc:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800afd0:	653b      	str	r3, [r7, #80]	; 0x50
 800afd2:	2300      	movs	r3, #0
 800afd4:	657b      	str	r3, [r7, #84]	; 0x54
 800afd6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800afda:	460b      	mov	r3, r1
 800afdc:	4313      	orrs	r3, r2
 800afde:	d00a      	beq.n	800aff6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800afe0:	4b9e      	ldr	r3, [pc, #632]	; (800b25c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800afe2:	691b      	ldr	r3, [r3, #16]
 800afe4:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800afe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800aff0:	4a9a      	ldr	r2, [pc, #616]	; (800b25c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aff2:	430b      	orrs	r3, r1
 800aff4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800aff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800affa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800affe:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800b002:	64bb      	str	r3, [r7, #72]	; 0x48
 800b004:	2300      	movs	r3, #0
 800b006:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b008:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800b00c:	460b      	mov	r3, r1
 800b00e:	4313      	orrs	r3, r2
 800b010:	d009      	beq.n	800b026 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b012:	4b92      	ldr	r3, [pc, #584]	; (800b25c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b014:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b016:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800b01a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b01e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b020:	4a8e      	ldr	r2, [pc, #568]	; (800b25c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b022:	430b      	orrs	r3, r1
 800b024:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b026:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b02e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800b032:	643b      	str	r3, [r7, #64]	; 0x40
 800b034:	2300      	movs	r3, #0
 800b036:	647b      	str	r3, [r7, #68]	; 0x44
 800b038:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800b03c:	460b      	mov	r3, r1
 800b03e:	4313      	orrs	r3, r2
 800b040:	d00e      	beq.n	800b060 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b042:	4b86      	ldr	r3, [pc, #536]	; (800b25c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b044:	691b      	ldr	r3, [r3, #16]
 800b046:	4a85      	ldr	r2, [pc, #532]	; (800b25c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b048:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b04c:	6113      	str	r3, [r2, #16]
 800b04e:	4b83      	ldr	r3, [pc, #524]	; (800b25c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b050:	6919      	ldr	r1, [r3, #16]
 800b052:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b056:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800b05a:	4a80      	ldr	r2, [pc, #512]	; (800b25c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b05c:	430b      	orrs	r3, r1
 800b05e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b060:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b064:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b068:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800b06c:	63bb      	str	r3, [r7, #56]	; 0x38
 800b06e:	2300      	movs	r3, #0
 800b070:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b072:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800b076:	460b      	mov	r3, r1
 800b078:	4313      	orrs	r3, r2
 800b07a:	d009      	beq.n	800b090 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b07c:	4b77      	ldr	r3, [pc, #476]	; (800b25c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b07e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b080:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b084:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b08a:	4a74      	ldr	r2, [pc, #464]	; (800b25c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b08c:	430b      	orrs	r3, r1
 800b08e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b090:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b094:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b098:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800b09c:	633b      	str	r3, [r7, #48]	; 0x30
 800b09e:	2300      	movs	r3, #0
 800b0a0:	637b      	str	r3, [r7, #52]	; 0x34
 800b0a2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800b0a6:	460b      	mov	r3, r1
 800b0a8:	4313      	orrs	r3, r2
 800b0aa:	d00a      	beq.n	800b0c2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b0ac:	4b6b      	ldr	r3, [pc, #428]	; (800b25c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b0ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0b0:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800b0b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b0bc:	4a67      	ldr	r2, [pc, #412]	; (800b25c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b0be:	430b      	orrs	r3, r1
 800b0c0:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b0c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ca:	2100      	movs	r1, #0
 800b0cc:	62b9      	str	r1, [r7, #40]	; 0x28
 800b0ce:	f003 0301 	and.w	r3, r3, #1
 800b0d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b0d4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800b0d8:	460b      	mov	r3, r1
 800b0da:	4313      	orrs	r3, r2
 800b0dc:	d011      	beq.n	800b102 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b0de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0e2:	3308      	adds	r3, #8
 800b0e4:	2100      	movs	r1, #0
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f001 faa0 	bl	800c62c <RCCEx_PLL2_Config>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800b0f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d003      	beq.n	800b102 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b0fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b102:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b10a:	2100      	movs	r1, #0
 800b10c:	6239      	str	r1, [r7, #32]
 800b10e:	f003 0302 	and.w	r3, r3, #2
 800b112:	627b      	str	r3, [r7, #36]	; 0x24
 800b114:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b118:	460b      	mov	r3, r1
 800b11a:	4313      	orrs	r3, r2
 800b11c:	d011      	beq.n	800b142 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b11e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b122:	3308      	adds	r3, #8
 800b124:	2101      	movs	r1, #1
 800b126:	4618      	mov	r0, r3
 800b128:	f001 fa80 	bl	800c62c <RCCEx_PLL2_Config>
 800b12c:	4603      	mov	r3, r0
 800b12e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800b132:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b136:	2b00      	cmp	r3, #0
 800b138:	d003      	beq.n	800b142 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b13a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b13e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b142:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b14a:	2100      	movs	r1, #0
 800b14c:	61b9      	str	r1, [r7, #24]
 800b14e:	f003 0304 	and.w	r3, r3, #4
 800b152:	61fb      	str	r3, [r7, #28]
 800b154:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b158:	460b      	mov	r3, r1
 800b15a:	4313      	orrs	r3, r2
 800b15c:	d011      	beq.n	800b182 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b15e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b162:	3308      	adds	r3, #8
 800b164:	2102      	movs	r1, #2
 800b166:	4618      	mov	r0, r3
 800b168:	f001 fa60 	bl	800c62c <RCCEx_PLL2_Config>
 800b16c:	4603      	mov	r3, r0
 800b16e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800b172:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b176:	2b00      	cmp	r3, #0
 800b178:	d003      	beq.n	800b182 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b17a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b17e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b182:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b18a:	2100      	movs	r1, #0
 800b18c:	6139      	str	r1, [r7, #16]
 800b18e:	f003 0308 	and.w	r3, r3, #8
 800b192:	617b      	str	r3, [r7, #20]
 800b194:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b198:	460b      	mov	r3, r1
 800b19a:	4313      	orrs	r3, r2
 800b19c:	d011      	beq.n	800b1c2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b19e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1a2:	3328      	adds	r3, #40	; 0x28
 800b1a4:	2100      	movs	r1, #0
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f001 faf2 	bl	800c790 <RCCEx_PLL3_Config>
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800b1b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d003      	beq.n	800b1c2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b1c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ca:	2100      	movs	r1, #0
 800b1cc:	60b9      	str	r1, [r7, #8]
 800b1ce:	f003 0310 	and.w	r3, r3, #16
 800b1d2:	60fb      	str	r3, [r7, #12]
 800b1d4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b1d8:	460b      	mov	r3, r1
 800b1da:	4313      	orrs	r3, r2
 800b1dc:	d011      	beq.n	800b202 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b1de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1e2:	3328      	adds	r3, #40	; 0x28
 800b1e4:	2101      	movs	r1, #1
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	f001 fad2 	bl	800c790 <RCCEx_PLL3_Config>
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800b1f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d003      	beq.n	800b202 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b202:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b20a:	2100      	movs	r1, #0
 800b20c:	6039      	str	r1, [r7, #0]
 800b20e:	f003 0320 	and.w	r3, r3, #32
 800b212:	607b      	str	r3, [r7, #4]
 800b214:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b218:	460b      	mov	r3, r1
 800b21a:	4313      	orrs	r3, r2
 800b21c:	d011      	beq.n	800b242 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b21e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b222:	3328      	adds	r3, #40	; 0x28
 800b224:	2102      	movs	r1, #2
 800b226:	4618      	mov	r0, r3
 800b228:	f001 fab2 	bl	800c790 <RCCEx_PLL3_Config>
 800b22c:	4603      	mov	r3, r0
 800b22e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800b232:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b236:	2b00      	cmp	r3, #0
 800b238:	d003      	beq.n	800b242 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b23a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b23e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800b242:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800b246:	2b00      	cmp	r3, #0
 800b248:	d101      	bne.n	800b24e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800b24a:	2300      	movs	r3, #0
 800b24c:	e000      	b.n	800b250 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800b24e:	2301      	movs	r3, #1
}
 800b250:	4618      	mov	r0, r3
 800b252:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800b256:	46bd      	mov	sp, r7
 800b258:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b25c:	58024400 	.word	0x58024400

0800b260 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b090      	sub	sp, #64	; 0x40
 800b264:	af00      	add	r7, sp, #0
 800b266:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b26a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b26e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800b272:	430b      	orrs	r3, r1
 800b274:	f040 8094 	bne.w	800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800b278:	4b9e      	ldr	r3, [pc, #632]	; (800b4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b27a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b27c:	f003 0307 	and.w	r3, r3, #7
 800b280:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b284:	2b04      	cmp	r3, #4
 800b286:	f200 8087 	bhi.w	800b398 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800b28a:	a201      	add	r2, pc, #4	; (adr r2, 800b290 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800b28c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b290:	0800b2a5 	.word	0x0800b2a5
 800b294:	0800b2cd 	.word	0x0800b2cd
 800b298:	0800b2f5 	.word	0x0800b2f5
 800b29c:	0800b391 	.word	0x0800b391
 800b2a0:	0800b31d 	.word	0x0800b31d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b2a4:	4b93      	ldr	r3, [pc, #588]	; (800b4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b2ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b2b0:	d108      	bne.n	800b2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b2b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	f001 f810 	bl	800c2dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b2bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2c0:	f000 bd45 	b.w	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2c8:	f000 bd41 	b.w	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b2cc:	4b89      	ldr	r3, [pc, #548]	; (800b4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b2d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b2d8:	d108      	bne.n	800b2ec <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b2da:	f107 0318 	add.w	r3, r7, #24
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f000 fd54 	bl	800bd8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b2e4:	69bb      	ldr	r3, [r7, #24]
 800b2e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2e8:	f000 bd31 	b.w	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2f0:	f000 bd2d 	b.w	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b2f4:	4b7f      	ldr	r3, [pc, #508]	; (800b4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b2fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b300:	d108      	bne.n	800b314 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b302:	f107 030c 	add.w	r3, r7, #12
 800b306:	4618      	mov	r0, r3
 800b308:	f000 fe94 	bl	800c034 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b310:	f000 bd1d 	b.w	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b314:	2300      	movs	r3, #0
 800b316:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b318:	f000 bd19 	b.w	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b31c:	4b75      	ldr	r3, [pc, #468]	; (800b4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b31e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b320:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b324:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b326:	4b73      	ldr	r3, [pc, #460]	; (800b4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	f003 0304 	and.w	r3, r3, #4
 800b32e:	2b04      	cmp	r3, #4
 800b330:	d10c      	bne.n	800b34c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800b332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b334:	2b00      	cmp	r3, #0
 800b336:	d109      	bne.n	800b34c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b338:	4b6e      	ldr	r3, [pc, #440]	; (800b4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	08db      	lsrs	r3, r3, #3
 800b33e:	f003 0303 	and.w	r3, r3, #3
 800b342:	4a6d      	ldr	r2, [pc, #436]	; (800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b344:	fa22 f303 	lsr.w	r3, r2, r3
 800b348:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b34a:	e01f      	b.n	800b38c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b34c:	4b69      	ldr	r3, [pc, #420]	; (800b4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b354:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b358:	d106      	bne.n	800b368 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800b35a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b35c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b360:	d102      	bne.n	800b368 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b362:	4b66      	ldr	r3, [pc, #408]	; (800b4fc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b364:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b366:	e011      	b.n	800b38c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b368:	4b62      	ldr	r3, [pc, #392]	; (800b4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b370:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b374:	d106      	bne.n	800b384 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800b376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b378:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b37c:	d102      	bne.n	800b384 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b37e:	4b60      	ldr	r3, [pc, #384]	; (800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b380:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b382:	e003      	b.n	800b38c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b384:	2300      	movs	r3, #0
 800b386:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b388:	f000 bce1 	b.w	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b38c:	f000 bcdf 	b.w	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b390:	4b5c      	ldr	r3, [pc, #368]	; (800b504 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b392:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b394:	f000 bcdb 	b.w	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b398:	2300      	movs	r3, #0
 800b39a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b39c:	f000 bcd7 	b.w	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800b3a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b3a4:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800b3a8:	430b      	orrs	r3, r1
 800b3aa:	f040 80ad 	bne.w	800b508 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800b3ae:	4b51      	ldr	r3, [pc, #324]	; (800b4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b3b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3b2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800b3b6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b3b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3be:	d056      	beq.n	800b46e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800b3c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3c6:	f200 8090 	bhi.w	800b4ea <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b3ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3cc:	2bc0      	cmp	r3, #192	; 0xc0
 800b3ce:	f000 8088 	beq.w	800b4e2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800b3d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3d4:	2bc0      	cmp	r3, #192	; 0xc0
 800b3d6:	f200 8088 	bhi.w	800b4ea <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b3da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3dc:	2b80      	cmp	r3, #128	; 0x80
 800b3de:	d032      	beq.n	800b446 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800b3e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3e2:	2b80      	cmp	r3, #128	; 0x80
 800b3e4:	f200 8081 	bhi.w	800b4ea <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b3e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d003      	beq.n	800b3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800b3ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3f0:	2b40      	cmp	r3, #64	; 0x40
 800b3f2:	d014      	beq.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800b3f4:	e079      	b.n	800b4ea <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b3f6:	4b3f      	ldr	r3, [pc, #252]	; (800b4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b3fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b402:	d108      	bne.n	800b416 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b404:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b408:	4618      	mov	r0, r3
 800b40a:	f000 ff67 	bl	800c2dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b40e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b410:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b412:	f000 bc9c 	b.w	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b416:	2300      	movs	r3, #0
 800b418:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b41a:	f000 bc98 	b.w	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b41e:	4b35      	ldr	r3, [pc, #212]	; (800b4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b426:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b42a:	d108      	bne.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b42c:	f107 0318 	add.w	r3, r7, #24
 800b430:	4618      	mov	r0, r3
 800b432:	f000 fcab 	bl	800bd8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b436:	69bb      	ldr	r3, [r7, #24]
 800b438:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b43a:	f000 bc88 	b.w	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b43e:	2300      	movs	r3, #0
 800b440:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b442:	f000 bc84 	b.w	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b446:	4b2b      	ldr	r3, [pc, #172]	; (800b4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b44e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b452:	d108      	bne.n	800b466 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b454:	f107 030c 	add.w	r3, r7, #12
 800b458:	4618      	mov	r0, r3
 800b45a:	f000 fdeb 	bl	800c034 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b462:	f000 bc74 	b.w	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b466:	2300      	movs	r3, #0
 800b468:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b46a:	f000 bc70 	b.w	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b46e:	4b21      	ldr	r3, [pc, #132]	; (800b4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b472:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b476:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b478:	4b1e      	ldr	r3, [pc, #120]	; (800b4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	f003 0304 	and.w	r3, r3, #4
 800b480:	2b04      	cmp	r3, #4
 800b482:	d10c      	bne.n	800b49e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800b484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b486:	2b00      	cmp	r3, #0
 800b488:	d109      	bne.n	800b49e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b48a:	4b1a      	ldr	r3, [pc, #104]	; (800b4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	08db      	lsrs	r3, r3, #3
 800b490:	f003 0303 	and.w	r3, r3, #3
 800b494:	4a18      	ldr	r2, [pc, #96]	; (800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b496:	fa22 f303 	lsr.w	r3, r2, r3
 800b49a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b49c:	e01f      	b.n	800b4de <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b49e:	4b15      	ldr	r3, [pc, #84]	; (800b4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4aa:	d106      	bne.n	800b4ba <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800b4ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b4b2:	d102      	bne.n	800b4ba <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b4b4:	4b11      	ldr	r3, [pc, #68]	; (800b4fc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b4b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4b8:	e011      	b.n	800b4de <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b4ba:	4b0e      	ldr	r3, [pc, #56]	; (800b4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b4c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b4c6:	d106      	bne.n	800b4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800b4c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4ce:	d102      	bne.n	800b4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b4d0:	4b0b      	ldr	r3, [pc, #44]	; (800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b4d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4d4:	e003      	b.n	800b4de <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b4da:	f000 bc38 	b.w	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b4de:	f000 bc36 	b.w	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b4e2:	4b08      	ldr	r3, [pc, #32]	; (800b504 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b4e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b4e6:	f000 bc32 	b.w	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b4ee:	f000 bc2e 	b.w	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b4f2:	bf00      	nop
 800b4f4:	58024400 	.word	0x58024400
 800b4f8:	03d09000 	.word	0x03d09000
 800b4fc:	003d0900 	.word	0x003d0900
 800b500:	00989680 	.word	0x00989680
 800b504:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b508:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b50c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800b510:	430b      	orrs	r3, r1
 800b512:	f040 809c 	bne.w	800b64e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800b516:	4b9e      	ldr	r3, [pc, #632]	; (800b790 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b51a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800b51e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b522:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b526:	d054      	beq.n	800b5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800b528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b52a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b52e:	f200 808b 	bhi.w	800b648 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b534:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b538:	f000 8083 	beq.w	800b642 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800b53c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b53e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b542:	f200 8081 	bhi.w	800b648 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b548:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b54c:	d02f      	beq.n	800b5ae <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800b54e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b550:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b554:	d878      	bhi.n	800b648 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d004      	beq.n	800b566 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800b55c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b55e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b562:	d012      	beq.n	800b58a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800b564:	e070      	b.n	800b648 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b566:	4b8a      	ldr	r3, [pc, #552]	; (800b790 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b56e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b572:	d107      	bne.n	800b584 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b574:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b578:	4618      	mov	r0, r3
 800b57a:	f000 feaf 	bl	800c2dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b57e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b580:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b582:	e3e4      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b584:	2300      	movs	r3, #0
 800b586:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b588:	e3e1      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b58a:	4b81      	ldr	r3, [pc, #516]	; (800b790 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b592:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b596:	d107      	bne.n	800b5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b598:	f107 0318 	add.w	r3, r7, #24
 800b59c:	4618      	mov	r0, r3
 800b59e:	f000 fbf5 	bl	800bd8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b5a2:	69bb      	ldr	r3, [r7, #24]
 800b5a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5a6:	e3d2      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5ac:	e3cf      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b5ae:	4b78      	ldr	r3, [pc, #480]	; (800b790 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b5b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b5ba:	d107      	bne.n	800b5cc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b5bc:	f107 030c 	add.w	r3, r7, #12
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	f000 fd37 	bl	800c034 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5ca:	e3c0      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5d0:	e3bd      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b5d2:	4b6f      	ldr	r3, [pc, #444]	; (800b790 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b5d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b5da:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b5dc:	4b6c      	ldr	r3, [pc, #432]	; (800b790 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	f003 0304 	and.w	r3, r3, #4
 800b5e4:	2b04      	cmp	r3, #4
 800b5e6:	d10c      	bne.n	800b602 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800b5e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d109      	bne.n	800b602 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b5ee:	4b68      	ldr	r3, [pc, #416]	; (800b790 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	08db      	lsrs	r3, r3, #3
 800b5f4:	f003 0303 	and.w	r3, r3, #3
 800b5f8:	4a66      	ldr	r2, [pc, #408]	; (800b794 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b5fa:	fa22 f303 	lsr.w	r3, r2, r3
 800b5fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b600:	e01e      	b.n	800b640 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b602:	4b63      	ldr	r3, [pc, #396]	; (800b790 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b60a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b60e:	d106      	bne.n	800b61e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800b610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b612:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b616:	d102      	bne.n	800b61e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b618:	4b5f      	ldr	r3, [pc, #380]	; (800b798 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800b61a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b61c:	e010      	b.n	800b640 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b61e:	4b5c      	ldr	r3, [pc, #368]	; (800b790 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b626:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b62a:	d106      	bne.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800b62c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b62e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b632:	d102      	bne.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b634:	4b59      	ldr	r3, [pc, #356]	; (800b79c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800b636:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b638:	e002      	b.n	800b640 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b63a:	2300      	movs	r3, #0
 800b63c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b63e:	e386      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b640:	e385      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b642:	4b57      	ldr	r3, [pc, #348]	; (800b7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800b644:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b646:	e382      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b648:	2300      	movs	r3, #0
 800b64a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b64c:	e37f      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b64e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b652:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800b656:	430b      	orrs	r3, r1
 800b658:	f040 80a7 	bne.w	800b7aa <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800b65c:	4b4c      	ldr	r3, [pc, #304]	; (800b790 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b65e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b660:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800b664:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b668:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b66c:	d055      	beq.n	800b71a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800b66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b670:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b674:	f200 8096 	bhi.w	800b7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b67a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b67e:	f000 8084 	beq.w	800b78a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800b682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b684:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b688:	f200 808c 	bhi.w	800b7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b68c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b68e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b692:	d030      	beq.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800b694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b696:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b69a:	f200 8083 	bhi.w	800b7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b69e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d004      	beq.n	800b6ae <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800b6a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b6aa:	d012      	beq.n	800b6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800b6ac:	e07a      	b.n	800b7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b6ae:	4b38      	ldr	r3, [pc, #224]	; (800b790 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b6b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b6ba:	d107      	bne.n	800b6cc <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b6bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	f000 fe0b 	bl	800c2dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b6c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6ca:	e340      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b6d0:	e33d      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b6d2:	4b2f      	ldr	r3, [pc, #188]	; (800b790 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b6da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b6de:	d107      	bne.n	800b6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b6e0:	f107 0318 	add.w	r3, r7, #24
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	f000 fb51 	bl	800bd8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b6ea:	69bb      	ldr	r3, [r7, #24]
 800b6ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6ee:	e32e      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b6f4:	e32b      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b6f6:	4b26      	ldr	r3, [pc, #152]	; (800b790 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b6fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b702:	d107      	bne.n	800b714 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b704:	f107 030c 	add.w	r3, r7, #12
 800b708:	4618      	mov	r0, r3
 800b70a:	f000 fc93 	bl	800c034 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b712:	e31c      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b714:	2300      	movs	r3, #0
 800b716:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b718:	e319      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b71a:	4b1d      	ldr	r3, [pc, #116]	; (800b790 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b71c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b71e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b722:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b724:	4b1a      	ldr	r3, [pc, #104]	; (800b790 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	f003 0304 	and.w	r3, r3, #4
 800b72c:	2b04      	cmp	r3, #4
 800b72e:	d10c      	bne.n	800b74a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800b730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b732:	2b00      	cmp	r3, #0
 800b734:	d109      	bne.n	800b74a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b736:	4b16      	ldr	r3, [pc, #88]	; (800b790 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	08db      	lsrs	r3, r3, #3
 800b73c:	f003 0303 	and.w	r3, r3, #3
 800b740:	4a14      	ldr	r2, [pc, #80]	; (800b794 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b742:	fa22 f303 	lsr.w	r3, r2, r3
 800b746:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b748:	e01e      	b.n	800b788 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b74a:	4b11      	ldr	r3, [pc, #68]	; (800b790 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b752:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b756:	d106      	bne.n	800b766 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800b758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b75a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b75e:	d102      	bne.n	800b766 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b760:	4b0d      	ldr	r3, [pc, #52]	; (800b798 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800b762:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b764:	e010      	b.n	800b788 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b766:	4b0a      	ldr	r3, [pc, #40]	; (800b790 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b76e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b772:	d106      	bne.n	800b782 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800b774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b776:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b77a:	d102      	bne.n	800b782 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b77c:	4b07      	ldr	r3, [pc, #28]	; (800b79c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800b77e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b780:	e002      	b.n	800b788 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b782:	2300      	movs	r3, #0
 800b784:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b786:	e2e2      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b788:	e2e1      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b78a:	4b05      	ldr	r3, [pc, #20]	; (800b7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800b78c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b78e:	e2de      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b790:	58024400 	.word	0x58024400
 800b794:	03d09000 	.word	0x03d09000
 800b798:	003d0900 	.word	0x003d0900
 800b79c:	00989680 	.word	0x00989680
 800b7a0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7a8:	e2d1      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b7aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b7ae:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800b7b2:	430b      	orrs	r3, r1
 800b7b4:	f040 809c 	bne.w	800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800b7b8:	4b93      	ldr	r3, [pc, #588]	; (800ba08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b7ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7bc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b7c0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b7c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b7c8:	d054      	beq.n	800b874 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800b7ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b7d0:	f200 808b 	bhi.w	800b8ea <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b7d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7d6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b7da:	f000 8083 	beq.w	800b8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800b7de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b7e4:	f200 8081 	bhi.w	800b8ea <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b7e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b7ee:	d02f      	beq.n	800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800b7f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b7f6:	d878      	bhi.n	800b8ea <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b7f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d004      	beq.n	800b808 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800b7fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b800:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b804:	d012      	beq.n	800b82c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800b806:	e070      	b.n	800b8ea <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b808:	4b7f      	ldr	r3, [pc, #508]	; (800ba08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b810:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b814:	d107      	bne.n	800b826 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b816:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b81a:	4618      	mov	r0, r3
 800b81c:	f000 fd5e 	bl	800c2dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b822:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b824:	e293      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b826:	2300      	movs	r3, #0
 800b828:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b82a:	e290      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b82c:	4b76      	ldr	r3, [pc, #472]	; (800ba08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b834:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b838:	d107      	bne.n	800b84a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b83a:	f107 0318 	add.w	r3, r7, #24
 800b83e:	4618      	mov	r0, r3
 800b840:	f000 faa4 	bl	800bd8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b844:	69bb      	ldr	r3, [r7, #24]
 800b846:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b848:	e281      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b84a:	2300      	movs	r3, #0
 800b84c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b84e:	e27e      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b850:	4b6d      	ldr	r3, [pc, #436]	; (800ba08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b858:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b85c:	d107      	bne.n	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b85e:	f107 030c 	add.w	r3, r7, #12
 800b862:	4618      	mov	r0, r3
 800b864:	f000 fbe6 	bl	800c034 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b86c:	e26f      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b86e:	2300      	movs	r3, #0
 800b870:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b872:	e26c      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b874:	4b64      	ldr	r3, [pc, #400]	; (800ba08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b878:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b87c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b87e:	4b62      	ldr	r3, [pc, #392]	; (800ba08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	f003 0304 	and.w	r3, r3, #4
 800b886:	2b04      	cmp	r3, #4
 800b888:	d10c      	bne.n	800b8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800b88a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d109      	bne.n	800b8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b890:	4b5d      	ldr	r3, [pc, #372]	; (800ba08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	08db      	lsrs	r3, r3, #3
 800b896:	f003 0303 	and.w	r3, r3, #3
 800b89a:	4a5c      	ldr	r2, [pc, #368]	; (800ba0c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b89c:	fa22 f303 	lsr.w	r3, r2, r3
 800b8a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8a2:	e01e      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b8a4:	4b58      	ldr	r3, [pc, #352]	; (800ba08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8b0:	d106      	bne.n	800b8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800b8b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b8b8:	d102      	bne.n	800b8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b8ba:	4b55      	ldr	r3, [pc, #340]	; (800ba10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b8bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8be:	e010      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b8c0:	4b51      	ldr	r3, [pc, #324]	; (800ba08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b8c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b8cc:	d106      	bne.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800b8ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b8d4:	d102      	bne.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b8d6:	4b4f      	ldr	r3, [pc, #316]	; (800ba14 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b8d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8da:	e002      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b8dc:	2300      	movs	r3, #0
 800b8de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b8e0:	e235      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b8e2:	e234      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b8e4:	4b4c      	ldr	r3, [pc, #304]	; (800ba18 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800b8e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8e8:	e231      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8ee:	e22e      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b8f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b8f4:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800b8f8:	430b      	orrs	r3, r1
 800b8fa:	f040 808f 	bne.w	800ba1c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b8fe:	4b42      	ldr	r3, [pc, #264]	; (800ba08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b900:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b902:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800b906:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800b908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b90a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b90e:	d06b      	beq.n	800b9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800b910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b912:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b916:	d874      	bhi.n	800ba02 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b91a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b91e:	d056      	beq.n	800b9ce <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800b920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b922:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b926:	d86c      	bhi.n	800ba02 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b92a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b92e:	d03b      	beq.n	800b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800b930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b932:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b936:	d864      	bhi.n	800ba02 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b93a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b93e:	d021      	beq.n	800b984 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800b940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b942:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b946:	d85c      	bhi.n	800ba02 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d004      	beq.n	800b958 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800b94e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b954:	d004      	beq.n	800b960 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800b956:	e054      	b.n	800ba02 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b958:	f7fe fa30 	bl	8009dbc <HAL_RCC_GetPCLK1Freq>
 800b95c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b95e:	e1f6      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b960:	4b29      	ldr	r3, [pc, #164]	; (800ba08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b968:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b96c:	d107      	bne.n	800b97e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b96e:	f107 0318 	add.w	r3, r7, #24
 800b972:	4618      	mov	r0, r3
 800b974:	f000 fa0a 	bl	800bd8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b978:	69fb      	ldr	r3, [r7, #28]
 800b97a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b97c:	e1e7      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b97e:	2300      	movs	r3, #0
 800b980:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b982:	e1e4      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b984:	4b20      	ldr	r3, [pc, #128]	; (800ba08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b98c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b990:	d107      	bne.n	800b9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b992:	f107 030c 	add.w	r3, r7, #12
 800b996:	4618      	mov	r0, r3
 800b998:	f000 fb4c 	bl	800c034 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b99c:	693b      	ldr	r3, [r7, #16]
 800b99e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9a0:	e1d5      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9a6:	e1d2      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b9a8:	4b17      	ldr	r3, [pc, #92]	; (800ba08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	f003 0304 	and.w	r3, r3, #4
 800b9b0:	2b04      	cmp	r3, #4
 800b9b2:	d109      	bne.n	800b9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b9b4:	4b14      	ldr	r3, [pc, #80]	; (800ba08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	08db      	lsrs	r3, r3, #3
 800b9ba:	f003 0303 	and.w	r3, r3, #3
 800b9be:	4a13      	ldr	r2, [pc, #76]	; (800ba0c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b9c0:	fa22 f303 	lsr.w	r3, r2, r3
 800b9c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9c6:	e1c2      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9cc:	e1bf      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b9ce:	4b0e      	ldr	r3, [pc, #56]	; (800ba08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b9da:	d102      	bne.n	800b9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800b9dc:	4b0c      	ldr	r3, [pc, #48]	; (800ba10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b9de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9e0:	e1b5      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9e6:	e1b2      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b9e8:	4b07      	ldr	r3, [pc, #28]	; (800ba08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b9f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b9f4:	d102      	bne.n	800b9fc <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800b9f6:	4b07      	ldr	r3, [pc, #28]	; (800ba14 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b9f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9fa:	e1a8      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba00:	e1a5      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ba02:	2300      	movs	r3, #0
 800ba04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba06:	e1a2      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ba08:	58024400 	.word	0x58024400
 800ba0c:	03d09000 	.word	0x03d09000
 800ba10:	003d0900 	.word	0x003d0900
 800ba14:	00989680 	.word	0x00989680
 800ba18:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800ba1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba20:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800ba24:	430b      	orrs	r3, r1
 800ba26:	d173      	bne.n	800bb10 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800ba28:	4b9c      	ldr	r3, [pc, #624]	; (800bc9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ba2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ba30:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ba32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ba38:	d02f      	beq.n	800ba9a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800ba3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ba40:	d863      	bhi.n	800bb0a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800ba42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d004      	beq.n	800ba52 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800ba48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba4e:	d012      	beq.n	800ba76 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800ba50:	e05b      	b.n	800bb0a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ba52:	4b92      	ldr	r3, [pc, #584]	; (800bc9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ba5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ba5e:	d107      	bne.n	800ba70 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba60:	f107 0318 	add.w	r3, r7, #24
 800ba64:	4618      	mov	r0, r3
 800ba66:	f000 f991 	bl	800bd8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ba6a:	69bb      	ldr	r3, [r7, #24]
 800ba6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba6e:	e16e      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ba70:	2300      	movs	r3, #0
 800ba72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba74:	e16b      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ba76:	4b89      	ldr	r3, [pc, #548]	; (800bc9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ba7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba82:	d107      	bne.n	800ba94 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba84:	f107 030c 	add.w	r3, r7, #12
 800ba88:	4618      	mov	r0, r3
 800ba8a:	f000 fad3 	bl	800c034 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ba8e:	697b      	ldr	r3, [r7, #20]
 800ba90:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba92:	e15c      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ba94:	2300      	movs	r3, #0
 800ba96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba98:	e159      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ba9a:	4b80      	ldr	r3, [pc, #512]	; (800bc9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ba9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba9e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800baa2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800baa4:	4b7d      	ldr	r3, [pc, #500]	; (800bc9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	f003 0304 	and.w	r3, r3, #4
 800baac:	2b04      	cmp	r3, #4
 800baae:	d10c      	bne.n	800baca <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800bab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d109      	bne.n	800baca <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bab6:	4b79      	ldr	r3, [pc, #484]	; (800bc9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	08db      	lsrs	r3, r3, #3
 800babc:	f003 0303 	and.w	r3, r3, #3
 800bac0:	4a77      	ldr	r2, [pc, #476]	; (800bca0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800bac2:	fa22 f303 	lsr.w	r3, r2, r3
 800bac6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bac8:	e01e      	b.n	800bb08 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800baca:	4b74      	ldr	r3, [pc, #464]	; (800bc9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bad2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bad6:	d106      	bne.n	800bae6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800bad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bada:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bade:	d102      	bne.n	800bae6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bae0:	4b70      	ldr	r3, [pc, #448]	; (800bca4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800bae2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bae4:	e010      	b.n	800bb08 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bae6:	4b6d      	ldr	r3, [pc, #436]	; (800bc9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800baee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800baf2:	d106      	bne.n	800bb02 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800baf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800baf6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bafa:	d102      	bne.n	800bb02 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bafc:	4b6a      	ldr	r3, [pc, #424]	; (800bca8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800bafe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb00:	e002      	b.n	800bb08 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bb02:	2300      	movs	r3, #0
 800bb04:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bb06:	e122      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bb08:	e121      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb0e:	e11e      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800bb10:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb14:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800bb18:	430b      	orrs	r3, r1
 800bb1a:	d133      	bne.n	800bb84 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800bb1c:	4b5f      	ldr	r3, [pc, #380]	; (800bc9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bb1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bb24:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800bb26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d004      	beq.n	800bb36 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800bb2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb32:	d012      	beq.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800bb34:	e023      	b.n	800bb7e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bb36:	4b59      	ldr	r3, [pc, #356]	; (800bc9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bb42:	d107      	bne.n	800bb54 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bb44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bb48:	4618      	mov	r0, r3
 800bb4a:	f000 fbc7 	bl	800c2dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bb4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb50:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb52:	e0fc      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bb54:	2300      	movs	r3, #0
 800bb56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb58:	e0f9      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bb5a:	4b50      	ldr	r3, [pc, #320]	; (800bc9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bb62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bb66:	d107      	bne.n	800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb68:	f107 0318 	add.w	r3, r7, #24
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	f000 f90d 	bl	800bd8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800bb72:	6a3b      	ldr	r3, [r7, #32]
 800bb74:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb76:	e0ea      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bb78:	2300      	movs	r3, #0
 800bb7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb7c:	e0e7      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800bb7e:	2300      	movs	r3, #0
 800bb80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb82:	e0e4      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800bb84:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb88:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800bb8c:	430b      	orrs	r3, r1
 800bb8e:	f040 808d 	bne.w	800bcac <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800bb92:	4b42      	ldr	r3, [pc, #264]	; (800bc9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bb94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb96:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800bb9a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800bb9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bba2:	d06b      	beq.n	800bc7c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800bba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bba6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bbaa:	d874      	bhi.n	800bc96 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800bbac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bbb2:	d056      	beq.n	800bc62 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800bbb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bbba:	d86c      	bhi.n	800bc96 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800bbbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbbe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bbc2:	d03b      	beq.n	800bc3c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800bbc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbc6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bbca:	d864      	bhi.n	800bc96 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800bbcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bbd2:	d021      	beq.n	800bc18 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800bbd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bbda:	d85c      	bhi.n	800bc96 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800bbdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d004      	beq.n	800bbec <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800bbe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbe4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bbe8:	d004      	beq.n	800bbf4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800bbea:	e054      	b.n	800bc96 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800bbec:	f000 f8b8 	bl	800bd60 <HAL_RCCEx_GetD3PCLK1Freq>
 800bbf0:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bbf2:	e0ac      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bbf4:	4b29      	ldr	r3, [pc, #164]	; (800bc9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bbfc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bc00:	d107      	bne.n	800bc12 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc02:	f107 0318 	add.w	r3, r7, #24
 800bc06:	4618      	mov	r0, r3
 800bc08:	f000 f8c0 	bl	800bd8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bc0c:	69fb      	ldr	r3, [r7, #28]
 800bc0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc10:	e09d      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bc12:	2300      	movs	r3, #0
 800bc14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc16:	e09a      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bc18:	4b20      	ldr	r3, [pc, #128]	; (800bc9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bc20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc24:	d107      	bne.n	800bc36 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc26:	f107 030c 	add.w	r3, r7, #12
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	f000 fa02 	bl	800c034 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bc30:	693b      	ldr	r3, [r7, #16]
 800bc32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc34:	e08b      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bc36:	2300      	movs	r3, #0
 800bc38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc3a:	e088      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bc3c:	4b17      	ldr	r3, [pc, #92]	; (800bc9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	f003 0304 	and.w	r3, r3, #4
 800bc44:	2b04      	cmp	r3, #4
 800bc46:	d109      	bne.n	800bc5c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bc48:	4b14      	ldr	r3, [pc, #80]	; (800bc9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	08db      	lsrs	r3, r3, #3
 800bc4e:	f003 0303 	and.w	r3, r3, #3
 800bc52:	4a13      	ldr	r2, [pc, #76]	; (800bca0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800bc54:	fa22 f303 	lsr.w	r3, r2, r3
 800bc58:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc5a:	e078      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc60:	e075      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800bc62:	4b0e      	ldr	r3, [pc, #56]	; (800bc9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc6e:	d102      	bne.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800bc70:	4b0c      	ldr	r3, [pc, #48]	; (800bca4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800bc72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc74:	e06b      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bc76:	2300      	movs	r3, #0
 800bc78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc7a:	e068      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bc7c:	4b07      	ldr	r3, [pc, #28]	; (800bc9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bc88:	d102      	bne.n	800bc90 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800bc8a:	4b07      	ldr	r3, [pc, #28]	; (800bca8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800bc8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc8e:	e05e      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bc90:	2300      	movs	r3, #0
 800bc92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc94:	e05b      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800bc96:	2300      	movs	r3, #0
 800bc98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc9a:	e058      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bc9c:	58024400 	.word	0x58024400
 800bca0:	03d09000 	.word	0x03d09000
 800bca4:	003d0900 	.word	0x003d0900
 800bca8:	00989680 	.word	0x00989680
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800bcac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bcb0:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800bcb4:	430b      	orrs	r3, r1
 800bcb6:	d148      	bne.n	800bd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800bcb8:	4b27      	ldr	r3, [pc, #156]	; (800bd58 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800bcba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcbc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bcc0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800bcc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bcc8:	d02a      	beq.n	800bd20 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800bcca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bccc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bcd0:	d838      	bhi.n	800bd44 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800bcd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d004      	beq.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800bcd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bcde:	d00d      	beq.n	800bcfc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800bce0:	e030      	b.n	800bd44 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bce2:	4b1d      	ldr	r3, [pc, #116]	; (800bd58 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bcea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bcee:	d102      	bne.n	800bcf6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800bcf0:	4b1a      	ldr	r3, [pc, #104]	; (800bd5c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800bcf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bcf4:	e02b      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bcfa:	e028      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bcfc:	4b16      	ldr	r3, [pc, #88]	; (800bd58 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bd08:	d107      	bne.n	800bd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bd0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bd0e:	4618      	mov	r0, r3
 800bd10:	f000 fae4 	bl	800c2dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bd14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd18:	e019      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd1e:	e016      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bd20:	4b0d      	ldr	r3, [pc, #52]	; (800bd58 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bd28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bd2c:	d107      	bne.n	800bd3e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd2e:	f107 0318 	add.w	r3, r7, #24
 800bd32:	4618      	mov	r0, r3
 800bd34:	f000 f82a 	bl	800bd8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bd38:	69fb      	ldr	r3, [r7, #28]
 800bd3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd3c:	e007      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bd3e:	2300      	movs	r3, #0
 800bd40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd42:	e004      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800bd44:	2300      	movs	r3, #0
 800bd46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd48:	e001      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800bd4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800bd50:	4618      	mov	r0, r3
 800bd52:	3740      	adds	r7, #64	; 0x40
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}
 800bd58:	58024400 	.word	0x58024400
 800bd5c:	00989680 	.word	0x00989680

0800bd60 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800bd64:	f7fd fffa 	bl	8009d5c <HAL_RCC_GetHCLKFreq>
 800bd68:	4602      	mov	r2, r0
 800bd6a:	4b06      	ldr	r3, [pc, #24]	; (800bd84 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800bd6c:	6a1b      	ldr	r3, [r3, #32]
 800bd6e:	091b      	lsrs	r3, r3, #4
 800bd70:	f003 0307 	and.w	r3, r3, #7
 800bd74:	4904      	ldr	r1, [pc, #16]	; (800bd88 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800bd76:	5ccb      	ldrb	r3, [r1, r3]
 800bd78:	f003 031f 	and.w	r3, r3, #31
 800bd7c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800bd80:	4618      	mov	r0, r3
 800bd82:	bd80      	pop	{r7, pc}
 800bd84:	58024400 	.word	0x58024400
 800bd88:	0801e0b8 	.word	0x0801e0b8

0800bd8c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800bd8c:	b480      	push	{r7}
 800bd8e:	b089      	sub	sp, #36	; 0x24
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bd94:	4ba1      	ldr	r3, [pc, #644]	; (800c01c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd98:	f003 0303 	and.w	r3, r3, #3
 800bd9c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800bd9e:	4b9f      	ldr	r3, [pc, #636]	; (800c01c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bda0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bda2:	0b1b      	lsrs	r3, r3, #12
 800bda4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bda8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800bdaa:	4b9c      	ldr	r3, [pc, #624]	; (800c01c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bdac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdae:	091b      	lsrs	r3, r3, #4
 800bdb0:	f003 0301 	and.w	r3, r3, #1
 800bdb4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800bdb6:	4b99      	ldr	r3, [pc, #612]	; (800c01c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bdb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdba:	08db      	lsrs	r3, r3, #3
 800bdbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bdc0:	693a      	ldr	r2, [r7, #16]
 800bdc2:	fb02 f303 	mul.w	r3, r2, r3
 800bdc6:	ee07 3a90 	vmov	s15, r3
 800bdca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800bdd2:	697b      	ldr	r3, [r7, #20]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	f000 8111 	beq.w	800bffc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800bdda:	69bb      	ldr	r3, [r7, #24]
 800bddc:	2b02      	cmp	r3, #2
 800bdde:	f000 8083 	beq.w	800bee8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800bde2:	69bb      	ldr	r3, [r7, #24]
 800bde4:	2b02      	cmp	r3, #2
 800bde6:	f200 80a1 	bhi.w	800bf2c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800bdea:	69bb      	ldr	r3, [r7, #24]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d003      	beq.n	800bdf8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800bdf0:	69bb      	ldr	r3, [r7, #24]
 800bdf2:	2b01      	cmp	r3, #1
 800bdf4:	d056      	beq.n	800bea4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800bdf6:	e099      	b.n	800bf2c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bdf8:	4b88      	ldr	r3, [pc, #544]	; (800c01c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	f003 0320 	and.w	r3, r3, #32
 800be00:	2b00      	cmp	r3, #0
 800be02:	d02d      	beq.n	800be60 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800be04:	4b85      	ldr	r3, [pc, #532]	; (800c01c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	08db      	lsrs	r3, r3, #3
 800be0a:	f003 0303 	and.w	r3, r3, #3
 800be0e:	4a84      	ldr	r2, [pc, #528]	; (800c020 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800be10:	fa22 f303 	lsr.w	r3, r2, r3
 800be14:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800be16:	68bb      	ldr	r3, [r7, #8]
 800be18:	ee07 3a90 	vmov	s15, r3
 800be1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be20:	697b      	ldr	r3, [r7, #20]
 800be22:	ee07 3a90 	vmov	s15, r3
 800be26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be2e:	4b7b      	ldr	r3, [pc, #492]	; (800c01c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be36:	ee07 3a90 	vmov	s15, r3
 800be3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be3e:	ed97 6a03 	vldr	s12, [r7, #12]
 800be42:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c024 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800be46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be5a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800be5e:	e087      	b.n	800bf70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800be60:	697b      	ldr	r3, [r7, #20]
 800be62:	ee07 3a90 	vmov	s15, r3
 800be66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be6a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c028 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800be6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be72:	4b6a      	ldr	r3, [pc, #424]	; (800c01c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be7a:	ee07 3a90 	vmov	s15, r3
 800be7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be82:	ed97 6a03 	vldr	s12, [r7, #12]
 800be86:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c024 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800be8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bea2:	e065      	b.n	800bf70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bea4:	697b      	ldr	r3, [r7, #20]
 800bea6:	ee07 3a90 	vmov	s15, r3
 800beaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800beae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c02c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800beb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800beb6:	4b59      	ldr	r3, [pc, #356]	; (800c01c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800beb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800beba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bebe:	ee07 3a90 	vmov	s15, r3
 800bec2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bec6:	ed97 6a03 	vldr	s12, [r7, #12]
 800beca:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c024 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bece:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bed2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bed6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800beda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bede:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bee2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bee6:	e043      	b.n	800bf70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bee8:	697b      	ldr	r3, [r7, #20]
 800beea:	ee07 3a90 	vmov	s15, r3
 800beee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bef2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c030 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800bef6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800befa:	4b48      	ldr	r3, [pc, #288]	; (800c01c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800befc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800befe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf02:	ee07 3a90 	vmov	s15, r3
 800bf06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf0a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf0e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c024 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bf12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bf2a:	e021      	b.n	800bf70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bf2c:	697b      	ldr	r3, [r7, #20]
 800bf2e:	ee07 3a90 	vmov	s15, r3
 800bf32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf36:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c02c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bf3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf3e:	4b37      	ldr	r3, [pc, #220]	; (800c01c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bf40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf46:	ee07 3a90 	vmov	s15, r3
 800bf4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf4e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf52:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c024 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bf56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bf6e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800bf70:	4b2a      	ldr	r3, [pc, #168]	; (800c01c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bf72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf74:	0a5b      	lsrs	r3, r3, #9
 800bf76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf7a:	ee07 3a90 	vmov	s15, r3
 800bf7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bf86:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bf8a:	edd7 6a07 	vldr	s13, [r7, #28]
 800bf8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf96:	ee17 2a90 	vmov	r2, s15
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800bf9e:	4b1f      	ldr	r3, [pc, #124]	; (800c01c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bfa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfa2:	0c1b      	lsrs	r3, r3, #16
 800bfa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bfa8:	ee07 3a90 	vmov	s15, r3
 800bfac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfb0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bfb4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bfb8:	edd7 6a07 	vldr	s13, [r7, #28]
 800bfbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bfc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bfc4:	ee17 2a90 	vmov	r2, s15
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800bfcc:	4b13      	ldr	r3, [pc, #76]	; (800c01c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bfce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfd0:	0e1b      	lsrs	r3, r3, #24
 800bfd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bfd6:	ee07 3a90 	vmov	s15, r3
 800bfda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bfe2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bfe6:	edd7 6a07 	vldr	s13, [r7, #28]
 800bfea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bfee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bff2:	ee17 2a90 	vmov	r2, s15
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bffa:	e008      	b.n	800c00e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2200      	movs	r2, #0
 800c000:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	2200      	movs	r2, #0
 800c006:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2200      	movs	r2, #0
 800c00c:	609a      	str	r2, [r3, #8]
}
 800c00e:	bf00      	nop
 800c010:	3724      	adds	r7, #36	; 0x24
 800c012:	46bd      	mov	sp, r7
 800c014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c018:	4770      	bx	lr
 800c01a:	bf00      	nop
 800c01c:	58024400 	.word	0x58024400
 800c020:	03d09000 	.word	0x03d09000
 800c024:	46000000 	.word	0x46000000
 800c028:	4c742400 	.word	0x4c742400
 800c02c:	4a742400 	.word	0x4a742400
 800c030:	4b189680 	.word	0x4b189680

0800c034 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c034:	b480      	push	{r7}
 800c036:	b089      	sub	sp, #36	; 0x24
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c03c:	4ba1      	ldr	r3, [pc, #644]	; (800c2c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c03e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c040:	f003 0303 	and.w	r3, r3, #3
 800c044:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c046:	4b9f      	ldr	r3, [pc, #636]	; (800c2c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c04a:	0d1b      	lsrs	r3, r3, #20
 800c04c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c050:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c052:	4b9c      	ldr	r3, [pc, #624]	; (800c2c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c056:	0a1b      	lsrs	r3, r3, #8
 800c058:	f003 0301 	and.w	r3, r3, #1
 800c05c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c05e:	4b99      	ldr	r3, [pc, #612]	; (800c2c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c062:	08db      	lsrs	r3, r3, #3
 800c064:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c068:	693a      	ldr	r2, [r7, #16]
 800c06a:	fb02 f303 	mul.w	r3, r2, r3
 800c06e:	ee07 3a90 	vmov	s15, r3
 800c072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c076:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c07a:	697b      	ldr	r3, [r7, #20]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	f000 8111 	beq.w	800c2a4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c082:	69bb      	ldr	r3, [r7, #24]
 800c084:	2b02      	cmp	r3, #2
 800c086:	f000 8083 	beq.w	800c190 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c08a:	69bb      	ldr	r3, [r7, #24]
 800c08c:	2b02      	cmp	r3, #2
 800c08e:	f200 80a1 	bhi.w	800c1d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c092:	69bb      	ldr	r3, [r7, #24]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d003      	beq.n	800c0a0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c098:	69bb      	ldr	r3, [r7, #24]
 800c09a:	2b01      	cmp	r3, #1
 800c09c:	d056      	beq.n	800c14c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c09e:	e099      	b.n	800c1d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c0a0:	4b88      	ldr	r3, [pc, #544]	; (800c2c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	f003 0320 	and.w	r3, r3, #32
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d02d      	beq.n	800c108 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c0ac:	4b85      	ldr	r3, [pc, #532]	; (800c2c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	08db      	lsrs	r3, r3, #3
 800c0b2:	f003 0303 	and.w	r3, r3, #3
 800c0b6:	4a84      	ldr	r2, [pc, #528]	; (800c2c8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c0b8:	fa22 f303 	lsr.w	r3, r2, r3
 800c0bc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c0be:	68bb      	ldr	r3, [r7, #8]
 800c0c0:	ee07 3a90 	vmov	s15, r3
 800c0c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0c8:	697b      	ldr	r3, [r7, #20]
 800c0ca:	ee07 3a90 	vmov	s15, r3
 800c0ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0d6:	4b7b      	ldr	r3, [pc, #492]	; (800c2c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c0d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0de:	ee07 3a90 	vmov	s15, r3
 800c0e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c0ea:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c2cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c0ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c0fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c102:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c106:	e087      	b.n	800c218 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c108:	697b      	ldr	r3, [r7, #20]
 800c10a:	ee07 3a90 	vmov	s15, r3
 800c10e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c112:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c2d0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c116:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c11a:	4b6a      	ldr	r3, [pc, #424]	; (800c2c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c11c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c11e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c122:	ee07 3a90 	vmov	s15, r3
 800c126:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c12a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c12e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c2cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c132:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c136:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c13a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c13e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c142:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c146:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c14a:	e065      	b.n	800c218 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c14c:	697b      	ldr	r3, [r7, #20]
 800c14e:	ee07 3a90 	vmov	s15, r3
 800c152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c156:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c2d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c15a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c15e:	4b59      	ldr	r3, [pc, #356]	; (800c2c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c166:	ee07 3a90 	vmov	s15, r3
 800c16a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c16e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c172:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c2cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c176:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c17a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c17e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c182:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c18a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c18e:	e043      	b.n	800c218 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c190:	697b      	ldr	r3, [r7, #20]
 800c192:	ee07 3a90 	vmov	s15, r3
 800c196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c19a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c2d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c19e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c1a2:	4b48      	ldr	r3, [pc, #288]	; (800c2c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c1a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1aa:	ee07 3a90 	vmov	s15, r3
 800c1ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1b2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c1b6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c2cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c1ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c1c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c1d2:	e021      	b.n	800c218 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c1d4:	697b      	ldr	r3, [r7, #20]
 800c1d6:	ee07 3a90 	vmov	s15, r3
 800c1da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1de:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c2d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c1e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c1e6:	4b37      	ldr	r3, [pc, #220]	; (800c2c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c1e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1ee:	ee07 3a90 	vmov	s15, r3
 800c1f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1f6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c1fa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c2cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c1fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c206:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c20a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c20e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c212:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c216:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c218:	4b2a      	ldr	r3, [pc, #168]	; (800c2c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c21a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c21c:	0a5b      	lsrs	r3, r3, #9
 800c21e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c222:	ee07 3a90 	vmov	s15, r3
 800c226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c22a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c22e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c232:	edd7 6a07 	vldr	s13, [r7, #28]
 800c236:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c23a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c23e:	ee17 2a90 	vmov	r2, s15
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800c246:	4b1f      	ldr	r3, [pc, #124]	; (800c2c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c24a:	0c1b      	lsrs	r3, r3, #16
 800c24c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c250:	ee07 3a90 	vmov	s15, r3
 800c254:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c258:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c25c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c260:	edd7 6a07 	vldr	s13, [r7, #28]
 800c264:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c268:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c26c:	ee17 2a90 	vmov	r2, s15
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800c274:	4b13      	ldr	r3, [pc, #76]	; (800c2c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c278:	0e1b      	lsrs	r3, r3, #24
 800c27a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c27e:	ee07 3a90 	vmov	s15, r3
 800c282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c286:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c28a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c28e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c292:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c296:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c29a:	ee17 2a90 	vmov	r2, s15
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c2a2:	e008      	b.n	800c2b6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	609a      	str	r2, [r3, #8]
}
 800c2b6:	bf00      	nop
 800c2b8:	3724      	adds	r7, #36	; 0x24
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c0:	4770      	bx	lr
 800c2c2:	bf00      	nop
 800c2c4:	58024400 	.word	0x58024400
 800c2c8:	03d09000 	.word	0x03d09000
 800c2cc:	46000000 	.word	0x46000000
 800c2d0:	4c742400 	.word	0x4c742400
 800c2d4:	4a742400 	.word	0x4a742400
 800c2d8:	4b189680 	.word	0x4b189680

0800c2dc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800c2dc:	b480      	push	{r7}
 800c2de:	b089      	sub	sp, #36	; 0x24
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c2e4:	4ba0      	ldr	r3, [pc, #640]	; (800c568 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c2e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2e8:	f003 0303 	and.w	r3, r3, #3
 800c2ec:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800c2ee:	4b9e      	ldr	r3, [pc, #632]	; (800c568 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c2f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2f2:	091b      	lsrs	r3, r3, #4
 800c2f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c2f8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c2fa:	4b9b      	ldr	r3, [pc, #620]	; (800c568 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c2fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2fe:	f003 0301 	and.w	r3, r3, #1
 800c302:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c304:	4b98      	ldr	r3, [pc, #608]	; (800c568 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c308:	08db      	lsrs	r3, r3, #3
 800c30a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c30e:	693a      	ldr	r2, [r7, #16]
 800c310:	fb02 f303 	mul.w	r3, r2, r3
 800c314:	ee07 3a90 	vmov	s15, r3
 800c318:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c31c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800c320:	697b      	ldr	r3, [r7, #20]
 800c322:	2b00      	cmp	r3, #0
 800c324:	f000 8111 	beq.w	800c54a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800c328:	69bb      	ldr	r3, [r7, #24]
 800c32a:	2b02      	cmp	r3, #2
 800c32c:	f000 8083 	beq.w	800c436 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800c330:	69bb      	ldr	r3, [r7, #24]
 800c332:	2b02      	cmp	r3, #2
 800c334:	f200 80a1 	bhi.w	800c47a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800c338:	69bb      	ldr	r3, [r7, #24]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d003      	beq.n	800c346 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800c33e:	69bb      	ldr	r3, [r7, #24]
 800c340:	2b01      	cmp	r3, #1
 800c342:	d056      	beq.n	800c3f2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800c344:	e099      	b.n	800c47a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c346:	4b88      	ldr	r3, [pc, #544]	; (800c568 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	f003 0320 	and.w	r3, r3, #32
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d02d      	beq.n	800c3ae <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c352:	4b85      	ldr	r3, [pc, #532]	; (800c568 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	08db      	lsrs	r3, r3, #3
 800c358:	f003 0303 	and.w	r3, r3, #3
 800c35c:	4a83      	ldr	r2, [pc, #524]	; (800c56c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800c35e:	fa22 f303 	lsr.w	r3, r2, r3
 800c362:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c364:	68bb      	ldr	r3, [r7, #8]
 800c366:	ee07 3a90 	vmov	s15, r3
 800c36a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c36e:	697b      	ldr	r3, [r7, #20]
 800c370:	ee07 3a90 	vmov	s15, r3
 800c374:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c378:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c37c:	4b7a      	ldr	r3, [pc, #488]	; (800c568 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c37e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c380:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c384:	ee07 3a90 	vmov	s15, r3
 800c388:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c38c:	ed97 6a03 	vldr	s12, [r7, #12]
 800c390:	eddf 5a77 	vldr	s11, [pc, #476]	; 800c570 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c394:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c398:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c39c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c3a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c3a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3a8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c3ac:	e087      	b.n	800c4be <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c3ae:	697b      	ldr	r3, [r7, #20]
 800c3b0:	ee07 3a90 	vmov	s15, r3
 800c3b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3b8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800c574 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c3bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c3c0:	4b69      	ldr	r3, [pc, #420]	; (800c568 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c3c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3c8:	ee07 3a90 	vmov	s15, r3
 800c3cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3d0:	ed97 6a03 	vldr	s12, [r7, #12]
 800c3d4:	eddf 5a66 	vldr	s11, [pc, #408]	; 800c570 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c3d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c3dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c3e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c3e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c3e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c3f0:	e065      	b.n	800c4be <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c3f2:	697b      	ldr	r3, [r7, #20]
 800c3f4:	ee07 3a90 	vmov	s15, r3
 800c3f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3fc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800c578 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800c400:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c404:	4b58      	ldr	r3, [pc, #352]	; (800c568 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c408:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c40c:	ee07 3a90 	vmov	s15, r3
 800c410:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c414:	ed97 6a03 	vldr	s12, [r7, #12]
 800c418:	eddf 5a55 	vldr	s11, [pc, #340]	; 800c570 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c41c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c420:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c424:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c428:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c42c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c430:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c434:	e043      	b.n	800c4be <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c436:	697b      	ldr	r3, [r7, #20]
 800c438:	ee07 3a90 	vmov	s15, r3
 800c43c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c440:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800c57c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c444:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c448:	4b47      	ldr	r3, [pc, #284]	; (800c568 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c44a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c44c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c450:	ee07 3a90 	vmov	s15, r3
 800c454:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c458:	ed97 6a03 	vldr	s12, [r7, #12]
 800c45c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800c570 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c460:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c464:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c468:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c46c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c470:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c474:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c478:	e021      	b.n	800c4be <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c47a:	697b      	ldr	r3, [r7, #20]
 800c47c:	ee07 3a90 	vmov	s15, r3
 800c480:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c484:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800c574 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c488:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c48c:	4b36      	ldr	r3, [pc, #216]	; (800c568 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c48e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c490:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c494:	ee07 3a90 	vmov	s15, r3
 800c498:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c49c:	ed97 6a03 	vldr	s12, [r7, #12]
 800c4a0:	eddf 5a33 	vldr	s11, [pc, #204]	; 800c570 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c4a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c4a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c4ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c4b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c4b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c4b8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c4bc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800c4be:	4b2a      	ldr	r3, [pc, #168]	; (800c568 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c4c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4c2:	0a5b      	lsrs	r3, r3, #9
 800c4c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4c8:	ee07 3a90 	vmov	s15, r3
 800c4cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c4d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c4d8:	edd7 6a07 	vldr	s13, [r7, #28]
 800c4dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c4e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c4e4:	ee17 2a90 	vmov	r2, s15
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800c4ec:	4b1e      	ldr	r3, [pc, #120]	; (800c568 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c4ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4f0:	0c1b      	lsrs	r3, r3, #16
 800c4f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4f6:	ee07 3a90 	vmov	s15, r3
 800c4fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c502:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c506:	edd7 6a07 	vldr	s13, [r7, #28]
 800c50a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c50e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c512:	ee17 2a90 	vmov	r2, s15
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800c51a:	4b13      	ldr	r3, [pc, #76]	; (800c568 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c51c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c51e:	0e1b      	lsrs	r3, r3, #24
 800c520:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c524:	ee07 3a90 	vmov	s15, r3
 800c528:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c52c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c530:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c534:	edd7 6a07 	vldr	s13, [r7, #28]
 800c538:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c53c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c540:	ee17 2a90 	vmov	r2, s15
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c548:	e008      	b.n	800c55c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	2200      	movs	r2, #0
 800c54e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	2200      	movs	r2, #0
 800c554:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	2200      	movs	r2, #0
 800c55a:	609a      	str	r2, [r3, #8]
}
 800c55c:	bf00      	nop
 800c55e:	3724      	adds	r7, #36	; 0x24
 800c560:	46bd      	mov	sp, r7
 800c562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c566:	4770      	bx	lr
 800c568:	58024400 	.word	0x58024400
 800c56c:	03d09000 	.word	0x03d09000
 800c570:	46000000 	.word	0x46000000
 800c574:	4c742400 	.word	0x4c742400
 800c578:	4a742400 	.word	0x4a742400
 800c57c:	4b189680 	.word	0x4b189680

0800c580 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b084      	sub	sp, #16
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 800c588:	4b26      	ldr	r3, [pc, #152]	; (800c624 <HAL_RCCEx_CRSConfig+0xa4>)
 800c58a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c58e:	4a25      	ldr	r2, [pc, #148]	; (800c624 <HAL_RCCEx_CRSConfig+0xa4>)
 800c590:	f043 0302 	orr.w	r3, r3, #2
 800c594:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
 800c598:	4b22      	ldr	r3, [pc, #136]	; (800c624 <HAL_RCCEx_CRSConfig+0xa4>)
 800c59a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c59e:	4a21      	ldr	r2, [pc, #132]	; (800c624 <HAL_RCCEx_CRSConfig+0xa4>)
 800c5a0:	f023 0302 	bic.w	r3, r3, #2
 800c5a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
 800c5a8:	f7f6 ff50 	bl	800344c <HAL_GetREVID>
 800c5ac:	4603      	mov	r3, r0
 800c5ae:	f241 0203 	movw	r2, #4099	; 0x1003
 800c5b2:	4293      	cmp	r3, r2
 800c5b4:	d80b      	bhi.n	800c5ce <HAL_RCCEx_CRSConfig+0x4e>
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	685b      	ldr	r3, [r3, #4]
 800c5ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c5be:	d106      	bne.n	800c5ce <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681a      	ldr	r2, [r3, #0]
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	689b      	ldr	r3, [r3, #8]
 800c5c8:	4313      	orrs	r3, r2
 800c5ca:	60fb      	str	r3, [r7, #12]
 800c5cc:	e008      	b.n	800c5e0 <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681a      	ldr	r2, [r3, #0]
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	685b      	ldr	r3, [r3, #4]
 800c5d6:	431a      	orrs	r2, r3
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	689b      	ldr	r3, [r3, #8]
 800c5dc:	4313      	orrs	r3, r2
 800c5de:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	68db      	ldr	r3, [r3, #12]
 800c5e4:	68fa      	ldr	r2, [r7, #12]
 800c5e6:	4313      	orrs	r3, r2
 800c5e8:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	691b      	ldr	r3, [r3, #16]
 800c5ee:	041b      	lsls	r3, r3, #16
 800c5f0:	68fa      	ldr	r2, [r7, #12]
 800c5f2:	4313      	orrs	r3, r2
 800c5f4:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 800c5f6:	4a0c      	ldr	r2, [pc, #48]	; (800c628 <HAL_RCCEx_CRSConfig+0xa8>)
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 800c5fc:	4b0a      	ldr	r3, [pc, #40]	; (800c628 <HAL_RCCEx_CRSConfig+0xa8>)
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	695b      	ldr	r3, [r3, #20]
 800c608:	021b      	lsls	r3, r3, #8
 800c60a:	4907      	ldr	r1, [pc, #28]	; (800c628 <HAL_RCCEx_CRSConfig+0xa8>)
 800c60c:	4313      	orrs	r3, r2
 800c60e:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 800c610:	4b05      	ldr	r3, [pc, #20]	; (800c628 <HAL_RCCEx_CRSConfig+0xa8>)
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	4a04      	ldr	r2, [pc, #16]	; (800c628 <HAL_RCCEx_CRSConfig+0xa8>)
 800c616:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800c61a:	6013      	str	r3, [r2, #0]
}
 800c61c:	bf00      	nop
 800c61e:	3710      	adds	r7, #16
 800c620:	46bd      	mov	sp, r7
 800c622:	bd80      	pop	{r7, pc}
 800c624:	58024400 	.word	0x58024400
 800c628:	40008400 	.word	0x40008400

0800c62c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b084      	sub	sp, #16
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
 800c634:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c636:	2300      	movs	r3, #0
 800c638:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c63a:	4b53      	ldr	r3, [pc, #332]	; (800c788 <RCCEx_PLL2_Config+0x15c>)
 800c63c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c63e:	f003 0303 	and.w	r3, r3, #3
 800c642:	2b03      	cmp	r3, #3
 800c644:	d101      	bne.n	800c64a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c646:	2301      	movs	r3, #1
 800c648:	e099      	b.n	800c77e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c64a:	4b4f      	ldr	r3, [pc, #316]	; (800c788 <RCCEx_PLL2_Config+0x15c>)
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	4a4e      	ldr	r2, [pc, #312]	; (800c788 <RCCEx_PLL2_Config+0x15c>)
 800c650:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c654:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c656:	f7f6 fec9 	bl	80033ec <HAL_GetTick>
 800c65a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c65c:	e008      	b.n	800c670 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c65e:	f7f6 fec5 	bl	80033ec <HAL_GetTick>
 800c662:	4602      	mov	r2, r0
 800c664:	68bb      	ldr	r3, [r7, #8]
 800c666:	1ad3      	subs	r3, r2, r3
 800c668:	2b02      	cmp	r3, #2
 800c66a:	d901      	bls.n	800c670 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c66c:	2303      	movs	r3, #3
 800c66e:	e086      	b.n	800c77e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c670:	4b45      	ldr	r3, [pc, #276]	; (800c788 <RCCEx_PLL2_Config+0x15c>)
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d1f0      	bne.n	800c65e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c67c:	4b42      	ldr	r3, [pc, #264]	; (800c788 <RCCEx_PLL2_Config+0x15c>)
 800c67e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c680:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	031b      	lsls	r3, r3, #12
 800c68a:	493f      	ldr	r1, [pc, #252]	; (800c788 <RCCEx_PLL2_Config+0x15c>)
 800c68c:	4313      	orrs	r3, r2
 800c68e:	628b      	str	r3, [r1, #40]	; 0x28
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	685b      	ldr	r3, [r3, #4]
 800c694:	3b01      	subs	r3, #1
 800c696:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	689b      	ldr	r3, [r3, #8]
 800c69e:	3b01      	subs	r3, #1
 800c6a0:	025b      	lsls	r3, r3, #9
 800c6a2:	b29b      	uxth	r3, r3
 800c6a4:	431a      	orrs	r2, r3
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	68db      	ldr	r3, [r3, #12]
 800c6aa:	3b01      	subs	r3, #1
 800c6ac:	041b      	lsls	r3, r3, #16
 800c6ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c6b2:	431a      	orrs	r2, r3
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	691b      	ldr	r3, [r3, #16]
 800c6b8:	3b01      	subs	r3, #1
 800c6ba:	061b      	lsls	r3, r3, #24
 800c6bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c6c0:	4931      	ldr	r1, [pc, #196]	; (800c788 <RCCEx_PLL2_Config+0x15c>)
 800c6c2:	4313      	orrs	r3, r2
 800c6c4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c6c6:	4b30      	ldr	r3, [pc, #192]	; (800c788 <RCCEx_PLL2_Config+0x15c>)
 800c6c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	695b      	ldr	r3, [r3, #20]
 800c6d2:	492d      	ldr	r1, [pc, #180]	; (800c788 <RCCEx_PLL2_Config+0x15c>)
 800c6d4:	4313      	orrs	r3, r2
 800c6d6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c6d8:	4b2b      	ldr	r3, [pc, #172]	; (800c788 <RCCEx_PLL2_Config+0x15c>)
 800c6da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6dc:	f023 0220 	bic.w	r2, r3, #32
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	699b      	ldr	r3, [r3, #24]
 800c6e4:	4928      	ldr	r1, [pc, #160]	; (800c788 <RCCEx_PLL2_Config+0x15c>)
 800c6e6:	4313      	orrs	r3, r2
 800c6e8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c6ea:	4b27      	ldr	r3, [pc, #156]	; (800c788 <RCCEx_PLL2_Config+0x15c>)
 800c6ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6ee:	4a26      	ldr	r2, [pc, #152]	; (800c788 <RCCEx_PLL2_Config+0x15c>)
 800c6f0:	f023 0310 	bic.w	r3, r3, #16
 800c6f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c6f6:	4b24      	ldr	r3, [pc, #144]	; (800c788 <RCCEx_PLL2_Config+0x15c>)
 800c6f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c6fa:	4b24      	ldr	r3, [pc, #144]	; (800c78c <RCCEx_PLL2_Config+0x160>)
 800c6fc:	4013      	ands	r3, r2
 800c6fe:	687a      	ldr	r2, [r7, #4]
 800c700:	69d2      	ldr	r2, [r2, #28]
 800c702:	00d2      	lsls	r2, r2, #3
 800c704:	4920      	ldr	r1, [pc, #128]	; (800c788 <RCCEx_PLL2_Config+0x15c>)
 800c706:	4313      	orrs	r3, r2
 800c708:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c70a:	4b1f      	ldr	r3, [pc, #124]	; (800c788 <RCCEx_PLL2_Config+0x15c>)
 800c70c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c70e:	4a1e      	ldr	r2, [pc, #120]	; (800c788 <RCCEx_PLL2_Config+0x15c>)
 800c710:	f043 0310 	orr.w	r3, r3, #16
 800c714:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c716:	683b      	ldr	r3, [r7, #0]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d106      	bne.n	800c72a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c71c:	4b1a      	ldr	r3, [pc, #104]	; (800c788 <RCCEx_PLL2_Config+0x15c>)
 800c71e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c720:	4a19      	ldr	r2, [pc, #100]	; (800c788 <RCCEx_PLL2_Config+0x15c>)
 800c722:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c726:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c728:	e00f      	b.n	800c74a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c72a:	683b      	ldr	r3, [r7, #0]
 800c72c:	2b01      	cmp	r3, #1
 800c72e:	d106      	bne.n	800c73e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c730:	4b15      	ldr	r3, [pc, #84]	; (800c788 <RCCEx_PLL2_Config+0x15c>)
 800c732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c734:	4a14      	ldr	r2, [pc, #80]	; (800c788 <RCCEx_PLL2_Config+0x15c>)
 800c736:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c73a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c73c:	e005      	b.n	800c74a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c73e:	4b12      	ldr	r3, [pc, #72]	; (800c788 <RCCEx_PLL2_Config+0x15c>)
 800c740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c742:	4a11      	ldr	r2, [pc, #68]	; (800c788 <RCCEx_PLL2_Config+0x15c>)
 800c744:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c748:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c74a:	4b0f      	ldr	r3, [pc, #60]	; (800c788 <RCCEx_PLL2_Config+0x15c>)
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	4a0e      	ldr	r2, [pc, #56]	; (800c788 <RCCEx_PLL2_Config+0x15c>)
 800c750:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c754:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c756:	f7f6 fe49 	bl	80033ec <HAL_GetTick>
 800c75a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c75c:	e008      	b.n	800c770 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c75e:	f7f6 fe45 	bl	80033ec <HAL_GetTick>
 800c762:	4602      	mov	r2, r0
 800c764:	68bb      	ldr	r3, [r7, #8]
 800c766:	1ad3      	subs	r3, r2, r3
 800c768:	2b02      	cmp	r3, #2
 800c76a:	d901      	bls.n	800c770 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c76c:	2303      	movs	r3, #3
 800c76e:	e006      	b.n	800c77e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c770:	4b05      	ldr	r3, [pc, #20]	; (800c788 <RCCEx_PLL2_Config+0x15c>)
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d0f0      	beq.n	800c75e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c77c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c77e:	4618      	mov	r0, r3
 800c780:	3710      	adds	r7, #16
 800c782:	46bd      	mov	sp, r7
 800c784:	bd80      	pop	{r7, pc}
 800c786:	bf00      	nop
 800c788:	58024400 	.word	0x58024400
 800c78c:	ffff0007 	.word	0xffff0007

0800c790 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c790:	b580      	push	{r7, lr}
 800c792:	b084      	sub	sp, #16
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
 800c798:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c79a:	2300      	movs	r3, #0
 800c79c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c79e:	4b53      	ldr	r3, [pc, #332]	; (800c8ec <RCCEx_PLL3_Config+0x15c>)
 800c7a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7a2:	f003 0303 	and.w	r3, r3, #3
 800c7a6:	2b03      	cmp	r3, #3
 800c7a8:	d101      	bne.n	800c7ae <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c7aa:	2301      	movs	r3, #1
 800c7ac:	e099      	b.n	800c8e2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c7ae:	4b4f      	ldr	r3, [pc, #316]	; (800c8ec <RCCEx_PLL3_Config+0x15c>)
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	4a4e      	ldr	r2, [pc, #312]	; (800c8ec <RCCEx_PLL3_Config+0x15c>)
 800c7b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c7b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c7ba:	f7f6 fe17 	bl	80033ec <HAL_GetTick>
 800c7be:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c7c0:	e008      	b.n	800c7d4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c7c2:	f7f6 fe13 	bl	80033ec <HAL_GetTick>
 800c7c6:	4602      	mov	r2, r0
 800c7c8:	68bb      	ldr	r3, [r7, #8]
 800c7ca:	1ad3      	subs	r3, r2, r3
 800c7cc:	2b02      	cmp	r3, #2
 800c7ce:	d901      	bls.n	800c7d4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c7d0:	2303      	movs	r3, #3
 800c7d2:	e086      	b.n	800c8e2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c7d4:	4b45      	ldr	r3, [pc, #276]	; (800c8ec <RCCEx_PLL3_Config+0x15c>)
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d1f0      	bne.n	800c7c2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c7e0:	4b42      	ldr	r3, [pc, #264]	; (800c8ec <RCCEx_PLL3_Config+0x15c>)
 800c7e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7e4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	051b      	lsls	r3, r3, #20
 800c7ee:	493f      	ldr	r1, [pc, #252]	; (800c8ec <RCCEx_PLL3_Config+0x15c>)
 800c7f0:	4313      	orrs	r3, r2
 800c7f2:	628b      	str	r3, [r1, #40]	; 0x28
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	685b      	ldr	r3, [r3, #4]
 800c7f8:	3b01      	subs	r3, #1
 800c7fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	689b      	ldr	r3, [r3, #8]
 800c802:	3b01      	subs	r3, #1
 800c804:	025b      	lsls	r3, r3, #9
 800c806:	b29b      	uxth	r3, r3
 800c808:	431a      	orrs	r2, r3
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	68db      	ldr	r3, [r3, #12]
 800c80e:	3b01      	subs	r3, #1
 800c810:	041b      	lsls	r3, r3, #16
 800c812:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c816:	431a      	orrs	r2, r3
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	691b      	ldr	r3, [r3, #16]
 800c81c:	3b01      	subs	r3, #1
 800c81e:	061b      	lsls	r3, r3, #24
 800c820:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c824:	4931      	ldr	r1, [pc, #196]	; (800c8ec <RCCEx_PLL3_Config+0x15c>)
 800c826:	4313      	orrs	r3, r2
 800c828:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c82a:	4b30      	ldr	r3, [pc, #192]	; (800c8ec <RCCEx_PLL3_Config+0x15c>)
 800c82c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c82e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	695b      	ldr	r3, [r3, #20]
 800c836:	492d      	ldr	r1, [pc, #180]	; (800c8ec <RCCEx_PLL3_Config+0x15c>)
 800c838:	4313      	orrs	r3, r2
 800c83a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c83c:	4b2b      	ldr	r3, [pc, #172]	; (800c8ec <RCCEx_PLL3_Config+0x15c>)
 800c83e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c840:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	699b      	ldr	r3, [r3, #24]
 800c848:	4928      	ldr	r1, [pc, #160]	; (800c8ec <RCCEx_PLL3_Config+0x15c>)
 800c84a:	4313      	orrs	r3, r2
 800c84c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c84e:	4b27      	ldr	r3, [pc, #156]	; (800c8ec <RCCEx_PLL3_Config+0x15c>)
 800c850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c852:	4a26      	ldr	r2, [pc, #152]	; (800c8ec <RCCEx_PLL3_Config+0x15c>)
 800c854:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c858:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c85a:	4b24      	ldr	r3, [pc, #144]	; (800c8ec <RCCEx_PLL3_Config+0x15c>)
 800c85c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c85e:	4b24      	ldr	r3, [pc, #144]	; (800c8f0 <RCCEx_PLL3_Config+0x160>)
 800c860:	4013      	ands	r3, r2
 800c862:	687a      	ldr	r2, [r7, #4]
 800c864:	69d2      	ldr	r2, [r2, #28]
 800c866:	00d2      	lsls	r2, r2, #3
 800c868:	4920      	ldr	r1, [pc, #128]	; (800c8ec <RCCEx_PLL3_Config+0x15c>)
 800c86a:	4313      	orrs	r3, r2
 800c86c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c86e:	4b1f      	ldr	r3, [pc, #124]	; (800c8ec <RCCEx_PLL3_Config+0x15c>)
 800c870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c872:	4a1e      	ldr	r2, [pc, #120]	; (800c8ec <RCCEx_PLL3_Config+0x15c>)
 800c874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c878:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c87a:	683b      	ldr	r3, [r7, #0]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d106      	bne.n	800c88e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c880:	4b1a      	ldr	r3, [pc, #104]	; (800c8ec <RCCEx_PLL3_Config+0x15c>)
 800c882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c884:	4a19      	ldr	r2, [pc, #100]	; (800c8ec <RCCEx_PLL3_Config+0x15c>)
 800c886:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c88a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c88c:	e00f      	b.n	800c8ae <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c88e:	683b      	ldr	r3, [r7, #0]
 800c890:	2b01      	cmp	r3, #1
 800c892:	d106      	bne.n	800c8a2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c894:	4b15      	ldr	r3, [pc, #84]	; (800c8ec <RCCEx_PLL3_Config+0x15c>)
 800c896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c898:	4a14      	ldr	r2, [pc, #80]	; (800c8ec <RCCEx_PLL3_Config+0x15c>)
 800c89a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c89e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c8a0:	e005      	b.n	800c8ae <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c8a2:	4b12      	ldr	r3, [pc, #72]	; (800c8ec <RCCEx_PLL3_Config+0x15c>)
 800c8a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8a6:	4a11      	ldr	r2, [pc, #68]	; (800c8ec <RCCEx_PLL3_Config+0x15c>)
 800c8a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c8ac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c8ae:	4b0f      	ldr	r3, [pc, #60]	; (800c8ec <RCCEx_PLL3_Config+0x15c>)
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	4a0e      	ldr	r2, [pc, #56]	; (800c8ec <RCCEx_PLL3_Config+0x15c>)
 800c8b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c8b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c8ba:	f7f6 fd97 	bl	80033ec <HAL_GetTick>
 800c8be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c8c0:	e008      	b.n	800c8d4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c8c2:	f7f6 fd93 	bl	80033ec <HAL_GetTick>
 800c8c6:	4602      	mov	r2, r0
 800c8c8:	68bb      	ldr	r3, [r7, #8]
 800c8ca:	1ad3      	subs	r3, r2, r3
 800c8cc:	2b02      	cmp	r3, #2
 800c8ce:	d901      	bls.n	800c8d4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c8d0:	2303      	movs	r3, #3
 800c8d2:	e006      	b.n	800c8e2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c8d4:	4b05      	ldr	r3, [pc, #20]	; (800c8ec <RCCEx_PLL3_Config+0x15c>)
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d0f0      	beq.n	800c8c2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c8e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	3710      	adds	r7, #16
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	bd80      	pop	{r7, pc}
 800c8ea:	bf00      	nop
 800c8ec:	58024400 	.word	0x58024400
 800c8f0:	ffff0007 	.word	0xffff0007

0800c8f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	b082      	sub	sp, #8
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d101      	bne.n	800c906 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c902:	2301      	movs	r3, #1
 800c904:	e049      	b.n	800c99a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c90c:	b2db      	uxtb	r3, r3
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d106      	bne.n	800c920 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	2200      	movs	r2, #0
 800c916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c91a:	6878      	ldr	r0, [r7, #4]
 800c91c:	f7f6 f836 	bl	800298c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	2202      	movs	r2, #2
 800c924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681a      	ldr	r2, [r3, #0]
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	3304      	adds	r3, #4
 800c930:	4619      	mov	r1, r3
 800c932:	4610      	mov	r0, r2
 800c934:	f000 f92e 	bl	800cb94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	2201      	movs	r2, #1
 800c93c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	2201      	movs	r2, #1
 800c944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	2201      	movs	r2, #1
 800c94c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2201      	movs	r2, #1
 800c954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2201      	movs	r2, #1
 800c95c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	2201      	movs	r2, #1
 800c964:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	2201      	movs	r2, #1
 800c96c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2201      	movs	r2, #1
 800c974:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2201      	movs	r2, #1
 800c97c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	2201      	movs	r2, #1
 800c984:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2201      	movs	r2, #1
 800c98c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	2201      	movs	r2, #1
 800c994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c998:	2300      	movs	r3, #0
}
 800c99a:	4618      	mov	r0, r3
 800c99c:	3708      	adds	r7, #8
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	bd80      	pop	{r7, pc}
	...

0800c9a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b084      	sub	sp, #16
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
 800c9ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c9b8:	2b01      	cmp	r3, #1
 800c9ba:	d101      	bne.n	800c9c0 <HAL_TIM_ConfigClockSource+0x1c>
 800c9bc:	2302      	movs	r3, #2
 800c9be:	e0dc      	b.n	800cb7a <HAL_TIM_ConfigClockSource+0x1d6>
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	2201      	movs	r2, #1
 800c9c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	2202      	movs	r2, #2
 800c9cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	689b      	ldr	r3, [r3, #8]
 800c9d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c9d8:	68ba      	ldr	r2, [r7, #8]
 800c9da:	4b6a      	ldr	r3, [pc, #424]	; (800cb84 <HAL_TIM_ConfigClockSource+0x1e0>)
 800c9dc:	4013      	ands	r3, r2
 800c9de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c9e0:	68bb      	ldr	r3, [r7, #8]
 800c9e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c9e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	68ba      	ldr	r2, [r7, #8]
 800c9ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	4a64      	ldr	r2, [pc, #400]	; (800cb88 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c9f6:	4293      	cmp	r3, r2
 800c9f8:	f000 80a9 	beq.w	800cb4e <HAL_TIM_ConfigClockSource+0x1aa>
 800c9fc:	4a62      	ldr	r2, [pc, #392]	; (800cb88 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c9fe:	4293      	cmp	r3, r2
 800ca00:	f200 80ae 	bhi.w	800cb60 <HAL_TIM_ConfigClockSource+0x1bc>
 800ca04:	4a61      	ldr	r2, [pc, #388]	; (800cb8c <HAL_TIM_ConfigClockSource+0x1e8>)
 800ca06:	4293      	cmp	r3, r2
 800ca08:	f000 80a1 	beq.w	800cb4e <HAL_TIM_ConfigClockSource+0x1aa>
 800ca0c:	4a5f      	ldr	r2, [pc, #380]	; (800cb8c <HAL_TIM_ConfigClockSource+0x1e8>)
 800ca0e:	4293      	cmp	r3, r2
 800ca10:	f200 80a6 	bhi.w	800cb60 <HAL_TIM_ConfigClockSource+0x1bc>
 800ca14:	4a5e      	ldr	r2, [pc, #376]	; (800cb90 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ca16:	4293      	cmp	r3, r2
 800ca18:	f000 8099 	beq.w	800cb4e <HAL_TIM_ConfigClockSource+0x1aa>
 800ca1c:	4a5c      	ldr	r2, [pc, #368]	; (800cb90 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ca1e:	4293      	cmp	r3, r2
 800ca20:	f200 809e 	bhi.w	800cb60 <HAL_TIM_ConfigClockSource+0x1bc>
 800ca24:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ca28:	f000 8091 	beq.w	800cb4e <HAL_TIM_ConfigClockSource+0x1aa>
 800ca2c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ca30:	f200 8096 	bhi.w	800cb60 <HAL_TIM_ConfigClockSource+0x1bc>
 800ca34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ca38:	f000 8089 	beq.w	800cb4e <HAL_TIM_ConfigClockSource+0x1aa>
 800ca3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ca40:	f200 808e 	bhi.w	800cb60 <HAL_TIM_ConfigClockSource+0x1bc>
 800ca44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ca48:	d03e      	beq.n	800cac8 <HAL_TIM_ConfigClockSource+0x124>
 800ca4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ca4e:	f200 8087 	bhi.w	800cb60 <HAL_TIM_ConfigClockSource+0x1bc>
 800ca52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca56:	f000 8086 	beq.w	800cb66 <HAL_TIM_ConfigClockSource+0x1c2>
 800ca5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca5e:	d87f      	bhi.n	800cb60 <HAL_TIM_ConfigClockSource+0x1bc>
 800ca60:	2b70      	cmp	r3, #112	; 0x70
 800ca62:	d01a      	beq.n	800ca9a <HAL_TIM_ConfigClockSource+0xf6>
 800ca64:	2b70      	cmp	r3, #112	; 0x70
 800ca66:	d87b      	bhi.n	800cb60 <HAL_TIM_ConfigClockSource+0x1bc>
 800ca68:	2b60      	cmp	r3, #96	; 0x60
 800ca6a:	d050      	beq.n	800cb0e <HAL_TIM_ConfigClockSource+0x16a>
 800ca6c:	2b60      	cmp	r3, #96	; 0x60
 800ca6e:	d877      	bhi.n	800cb60 <HAL_TIM_ConfigClockSource+0x1bc>
 800ca70:	2b50      	cmp	r3, #80	; 0x50
 800ca72:	d03c      	beq.n	800caee <HAL_TIM_ConfigClockSource+0x14a>
 800ca74:	2b50      	cmp	r3, #80	; 0x50
 800ca76:	d873      	bhi.n	800cb60 <HAL_TIM_ConfigClockSource+0x1bc>
 800ca78:	2b40      	cmp	r3, #64	; 0x40
 800ca7a:	d058      	beq.n	800cb2e <HAL_TIM_ConfigClockSource+0x18a>
 800ca7c:	2b40      	cmp	r3, #64	; 0x40
 800ca7e:	d86f      	bhi.n	800cb60 <HAL_TIM_ConfigClockSource+0x1bc>
 800ca80:	2b30      	cmp	r3, #48	; 0x30
 800ca82:	d064      	beq.n	800cb4e <HAL_TIM_ConfigClockSource+0x1aa>
 800ca84:	2b30      	cmp	r3, #48	; 0x30
 800ca86:	d86b      	bhi.n	800cb60 <HAL_TIM_ConfigClockSource+0x1bc>
 800ca88:	2b20      	cmp	r3, #32
 800ca8a:	d060      	beq.n	800cb4e <HAL_TIM_ConfigClockSource+0x1aa>
 800ca8c:	2b20      	cmp	r3, #32
 800ca8e:	d867      	bhi.n	800cb60 <HAL_TIM_ConfigClockSource+0x1bc>
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d05c      	beq.n	800cb4e <HAL_TIM_ConfigClockSource+0x1aa>
 800ca94:	2b10      	cmp	r3, #16
 800ca96:	d05a      	beq.n	800cb4e <HAL_TIM_ConfigClockSource+0x1aa>
 800ca98:	e062      	b.n	800cb60 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ca9e:	683b      	ldr	r3, [r7, #0]
 800caa0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800caaa:	f000 f98b 	bl	800cdc4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	689b      	ldr	r3, [r3, #8]
 800cab4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cab6:	68bb      	ldr	r3, [r7, #8]
 800cab8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800cabc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	68ba      	ldr	r2, [r7, #8]
 800cac4:	609a      	str	r2, [r3, #8]
      break;
 800cac6:	e04f      	b.n	800cb68 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cad4:	683b      	ldr	r3, [r7, #0]
 800cad6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cad8:	f000 f974 	bl	800cdc4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	689a      	ldr	r2, [r3, #8]
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800caea:	609a      	str	r2, [r3, #8]
      break;
 800caec:	e03c      	b.n	800cb68 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800caf2:	683b      	ldr	r3, [r7, #0]
 800caf4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cafa:	461a      	mov	r2, r3
 800cafc:	f000 f8e4 	bl	800ccc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	2150      	movs	r1, #80	; 0x50
 800cb06:	4618      	mov	r0, r3
 800cb08:	f000 f93e 	bl	800cd88 <TIM_ITRx_SetConfig>
      break;
 800cb0c:	e02c      	b.n	800cb68 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cb16:	683b      	ldr	r3, [r7, #0]
 800cb18:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cb1a:	461a      	mov	r2, r3
 800cb1c:	f000 f903 	bl	800cd26 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	2160      	movs	r1, #96	; 0x60
 800cb26:	4618      	mov	r0, r3
 800cb28:	f000 f92e 	bl	800cd88 <TIM_ITRx_SetConfig>
      break;
 800cb2c:	e01c      	b.n	800cb68 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cb32:	683b      	ldr	r3, [r7, #0]
 800cb34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cb36:	683b      	ldr	r3, [r7, #0]
 800cb38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cb3a:	461a      	mov	r2, r3
 800cb3c:	f000 f8c4 	bl	800ccc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	2140      	movs	r1, #64	; 0x40
 800cb46:	4618      	mov	r0, r3
 800cb48:	f000 f91e 	bl	800cd88 <TIM_ITRx_SetConfig>
      break;
 800cb4c:	e00c      	b.n	800cb68 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	681a      	ldr	r2, [r3, #0]
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	4619      	mov	r1, r3
 800cb58:	4610      	mov	r0, r2
 800cb5a:	f000 f915 	bl	800cd88 <TIM_ITRx_SetConfig>
      break;
 800cb5e:	e003      	b.n	800cb68 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800cb60:	2301      	movs	r3, #1
 800cb62:	73fb      	strb	r3, [r7, #15]
      break;
 800cb64:	e000      	b.n	800cb68 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800cb66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	2201      	movs	r2, #1
 800cb6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	2200      	movs	r2, #0
 800cb74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800cb78:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	3710      	adds	r7, #16
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	bd80      	pop	{r7, pc}
 800cb82:	bf00      	nop
 800cb84:	ffceff88 	.word	0xffceff88
 800cb88:	00100040 	.word	0x00100040
 800cb8c:	00100030 	.word	0x00100030
 800cb90:	00100020 	.word	0x00100020

0800cb94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800cb94:	b480      	push	{r7}
 800cb96:	b085      	sub	sp, #20
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
 800cb9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	4a40      	ldr	r2, [pc, #256]	; (800cca8 <TIM_Base_SetConfig+0x114>)
 800cba8:	4293      	cmp	r3, r2
 800cbaa:	d013      	beq.n	800cbd4 <TIM_Base_SetConfig+0x40>
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cbb2:	d00f      	beq.n	800cbd4 <TIM_Base_SetConfig+0x40>
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	4a3d      	ldr	r2, [pc, #244]	; (800ccac <TIM_Base_SetConfig+0x118>)
 800cbb8:	4293      	cmp	r3, r2
 800cbba:	d00b      	beq.n	800cbd4 <TIM_Base_SetConfig+0x40>
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	4a3c      	ldr	r2, [pc, #240]	; (800ccb0 <TIM_Base_SetConfig+0x11c>)
 800cbc0:	4293      	cmp	r3, r2
 800cbc2:	d007      	beq.n	800cbd4 <TIM_Base_SetConfig+0x40>
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	4a3b      	ldr	r2, [pc, #236]	; (800ccb4 <TIM_Base_SetConfig+0x120>)
 800cbc8:	4293      	cmp	r3, r2
 800cbca:	d003      	beq.n	800cbd4 <TIM_Base_SetConfig+0x40>
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	4a3a      	ldr	r2, [pc, #232]	; (800ccb8 <TIM_Base_SetConfig+0x124>)
 800cbd0:	4293      	cmp	r3, r2
 800cbd2:	d108      	bne.n	800cbe6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cbda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	685b      	ldr	r3, [r3, #4]
 800cbe0:	68fa      	ldr	r2, [r7, #12]
 800cbe2:	4313      	orrs	r3, r2
 800cbe4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	4a2f      	ldr	r2, [pc, #188]	; (800cca8 <TIM_Base_SetConfig+0x114>)
 800cbea:	4293      	cmp	r3, r2
 800cbec:	d01f      	beq.n	800cc2e <TIM_Base_SetConfig+0x9a>
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cbf4:	d01b      	beq.n	800cc2e <TIM_Base_SetConfig+0x9a>
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	4a2c      	ldr	r2, [pc, #176]	; (800ccac <TIM_Base_SetConfig+0x118>)
 800cbfa:	4293      	cmp	r3, r2
 800cbfc:	d017      	beq.n	800cc2e <TIM_Base_SetConfig+0x9a>
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	4a2b      	ldr	r2, [pc, #172]	; (800ccb0 <TIM_Base_SetConfig+0x11c>)
 800cc02:	4293      	cmp	r3, r2
 800cc04:	d013      	beq.n	800cc2e <TIM_Base_SetConfig+0x9a>
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	4a2a      	ldr	r2, [pc, #168]	; (800ccb4 <TIM_Base_SetConfig+0x120>)
 800cc0a:	4293      	cmp	r3, r2
 800cc0c:	d00f      	beq.n	800cc2e <TIM_Base_SetConfig+0x9a>
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	4a29      	ldr	r2, [pc, #164]	; (800ccb8 <TIM_Base_SetConfig+0x124>)
 800cc12:	4293      	cmp	r3, r2
 800cc14:	d00b      	beq.n	800cc2e <TIM_Base_SetConfig+0x9a>
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	4a28      	ldr	r2, [pc, #160]	; (800ccbc <TIM_Base_SetConfig+0x128>)
 800cc1a:	4293      	cmp	r3, r2
 800cc1c:	d007      	beq.n	800cc2e <TIM_Base_SetConfig+0x9a>
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	4a27      	ldr	r2, [pc, #156]	; (800ccc0 <TIM_Base_SetConfig+0x12c>)
 800cc22:	4293      	cmp	r3, r2
 800cc24:	d003      	beq.n	800cc2e <TIM_Base_SetConfig+0x9a>
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	4a26      	ldr	r2, [pc, #152]	; (800ccc4 <TIM_Base_SetConfig+0x130>)
 800cc2a:	4293      	cmp	r3, r2
 800cc2c:	d108      	bne.n	800cc40 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cc34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cc36:	683b      	ldr	r3, [r7, #0]
 800cc38:	68db      	ldr	r3, [r3, #12]
 800cc3a:	68fa      	ldr	r2, [r7, #12]
 800cc3c:	4313      	orrs	r3, r2
 800cc3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	695b      	ldr	r3, [r3, #20]
 800cc4a:	4313      	orrs	r3, r2
 800cc4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	68fa      	ldr	r2, [r7, #12]
 800cc52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cc54:	683b      	ldr	r3, [r7, #0]
 800cc56:	689a      	ldr	r2, [r3, #8]
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	681a      	ldr	r2, [r3, #0]
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	4a10      	ldr	r2, [pc, #64]	; (800cca8 <TIM_Base_SetConfig+0x114>)
 800cc68:	4293      	cmp	r3, r2
 800cc6a:	d00f      	beq.n	800cc8c <TIM_Base_SetConfig+0xf8>
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	4a12      	ldr	r2, [pc, #72]	; (800ccb8 <TIM_Base_SetConfig+0x124>)
 800cc70:	4293      	cmp	r3, r2
 800cc72:	d00b      	beq.n	800cc8c <TIM_Base_SetConfig+0xf8>
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	4a11      	ldr	r2, [pc, #68]	; (800ccbc <TIM_Base_SetConfig+0x128>)
 800cc78:	4293      	cmp	r3, r2
 800cc7a:	d007      	beq.n	800cc8c <TIM_Base_SetConfig+0xf8>
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	4a10      	ldr	r2, [pc, #64]	; (800ccc0 <TIM_Base_SetConfig+0x12c>)
 800cc80:	4293      	cmp	r3, r2
 800cc82:	d003      	beq.n	800cc8c <TIM_Base_SetConfig+0xf8>
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	4a0f      	ldr	r2, [pc, #60]	; (800ccc4 <TIM_Base_SetConfig+0x130>)
 800cc88:	4293      	cmp	r3, r2
 800cc8a:	d103      	bne.n	800cc94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cc8c:	683b      	ldr	r3, [r7, #0]
 800cc8e:	691a      	ldr	r2, [r3, #16]
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	2201      	movs	r2, #1
 800cc98:	615a      	str	r2, [r3, #20]
}
 800cc9a:	bf00      	nop
 800cc9c:	3714      	adds	r7, #20
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca4:	4770      	bx	lr
 800cca6:	bf00      	nop
 800cca8:	40010000 	.word	0x40010000
 800ccac:	40000400 	.word	0x40000400
 800ccb0:	40000800 	.word	0x40000800
 800ccb4:	40000c00 	.word	0x40000c00
 800ccb8:	40010400 	.word	0x40010400
 800ccbc:	40014000 	.word	0x40014000
 800ccc0:	40014400 	.word	0x40014400
 800ccc4:	40014800 	.word	0x40014800

0800ccc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ccc8:	b480      	push	{r7}
 800ccca:	b087      	sub	sp, #28
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	60f8      	str	r0, [r7, #12]
 800ccd0:	60b9      	str	r1, [r7, #8]
 800ccd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	6a1b      	ldr	r3, [r3, #32]
 800ccd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	6a1b      	ldr	r3, [r3, #32]
 800ccde:	f023 0201 	bic.w	r2, r3, #1
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	699b      	ldr	r3, [r3, #24]
 800ccea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ccec:	693b      	ldr	r3, [r7, #16]
 800ccee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ccf2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	011b      	lsls	r3, r3, #4
 800ccf8:	693a      	ldr	r2, [r7, #16]
 800ccfa:	4313      	orrs	r3, r2
 800ccfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ccfe:	697b      	ldr	r3, [r7, #20]
 800cd00:	f023 030a 	bic.w	r3, r3, #10
 800cd04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cd06:	697a      	ldr	r2, [r7, #20]
 800cd08:	68bb      	ldr	r3, [r7, #8]
 800cd0a:	4313      	orrs	r3, r2
 800cd0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	693a      	ldr	r2, [r7, #16]
 800cd12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	697a      	ldr	r2, [r7, #20]
 800cd18:	621a      	str	r2, [r3, #32]
}
 800cd1a:	bf00      	nop
 800cd1c:	371c      	adds	r7, #28
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd24:	4770      	bx	lr

0800cd26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cd26:	b480      	push	{r7}
 800cd28:	b087      	sub	sp, #28
 800cd2a:	af00      	add	r7, sp, #0
 800cd2c:	60f8      	str	r0, [r7, #12]
 800cd2e:	60b9      	str	r1, [r7, #8]
 800cd30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	6a1b      	ldr	r3, [r3, #32]
 800cd36:	f023 0210 	bic.w	r2, r3, #16
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	699b      	ldr	r3, [r3, #24]
 800cd42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	6a1b      	ldr	r3, [r3, #32]
 800cd48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cd4a:	697b      	ldr	r3, [r7, #20]
 800cd4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cd50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	031b      	lsls	r3, r3, #12
 800cd56:	697a      	ldr	r2, [r7, #20]
 800cd58:	4313      	orrs	r3, r2
 800cd5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cd5c:	693b      	ldr	r3, [r7, #16]
 800cd5e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cd62:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cd64:	68bb      	ldr	r3, [r7, #8]
 800cd66:	011b      	lsls	r3, r3, #4
 800cd68:	693a      	ldr	r2, [r7, #16]
 800cd6a:	4313      	orrs	r3, r2
 800cd6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	697a      	ldr	r2, [r7, #20]
 800cd72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	693a      	ldr	r2, [r7, #16]
 800cd78:	621a      	str	r2, [r3, #32]
}
 800cd7a:	bf00      	nop
 800cd7c:	371c      	adds	r7, #28
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd84:	4770      	bx	lr
	...

0800cd88 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cd88:	b480      	push	{r7}
 800cd8a:	b085      	sub	sp, #20
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
 800cd90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	689b      	ldr	r3, [r3, #8]
 800cd96:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cd98:	68fa      	ldr	r2, [r7, #12]
 800cd9a:	4b09      	ldr	r3, [pc, #36]	; (800cdc0 <TIM_ITRx_SetConfig+0x38>)
 800cd9c:	4013      	ands	r3, r2
 800cd9e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cda0:	683a      	ldr	r2, [r7, #0]
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	4313      	orrs	r3, r2
 800cda6:	f043 0307 	orr.w	r3, r3, #7
 800cdaa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	68fa      	ldr	r2, [r7, #12]
 800cdb0:	609a      	str	r2, [r3, #8]
}
 800cdb2:	bf00      	nop
 800cdb4:	3714      	adds	r7, #20
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdbc:	4770      	bx	lr
 800cdbe:	bf00      	nop
 800cdc0:	ffcfff8f 	.word	0xffcfff8f

0800cdc4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cdc4:	b480      	push	{r7}
 800cdc6:	b087      	sub	sp, #28
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	60f8      	str	r0, [r7, #12]
 800cdcc:	60b9      	str	r1, [r7, #8]
 800cdce:	607a      	str	r2, [r7, #4]
 800cdd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	689b      	ldr	r3, [r3, #8]
 800cdd6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cdd8:	697b      	ldr	r3, [r7, #20]
 800cdda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cdde:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	021a      	lsls	r2, r3, #8
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	431a      	orrs	r2, r3
 800cde8:	68bb      	ldr	r3, [r7, #8]
 800cdea:	4313      	orrs	r3, r2
 800cdec:	697a      	ldr	r2, [r7, #20]
 800cdee:	4313      	orrs	r3, r2
 800cdf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	697a      	ldr	r2, [r7, #20]
 800cdf6:	609a      	str	r2, [r3, #8]
}
 800cdf8:	bf00      	nop
 800cdfa:	371c      	adds	r7, #28
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce02:	4770      	bx	lr

0800ce04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ce04:	b480      	push	{r7}
 800ce06:	b085      	sub	sp, #20
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]
 800ce0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ce14:	2b01      	cmp	r3, #1
 800ce16:	d101      	bne.n	800ce1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ce18:	2302      	movs	r3, #2
 800ce1a:	e06d      	b.n	800cef8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	2201      	movs	r2, #1
 800ce20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	2202      	movs	r2, #2
 800ce28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	685b      	ldr	r3, [r3, #4]
 800ce32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	689b      	ldr	r3, [r3, #8]
 800ce3a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	4a30      	ldr	r2, [pc, #192]	; (800cf04 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ce42:	4293      	cmp	r3, r2
 800ce44:	d004      	beq.n	800ce50 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	4a2f      	ldr	r2, [pc, #188]	; (800cf08 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ce4c:	4293      	cmp	r3, r2
 800ce4e:	d108      	bne.n	800ce62 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ce56:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ce58:	683b      	ldr	r3, [r7, #0]
 800ce5a:	685b      	ldr	r3, [r3, #4]
 800ce5c:	68fa      	ldr	r2, [r7, #12]
 800ce5e:	4313      	orrs	r3, r2
 800ce60:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ce68:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ce6a:	683b      	ldr	r3, [r7, #0]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	68fa      	ldr	r2, [r7, #12]
 800ce70:	4313      	orrs	r3, r2
 800ce72:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	68fa      	ldr	r2, [r7, #12]
 800ce7a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	4a20      	ldr	r2, [pc, #128]	; (800cf04 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ce82:	4293      	cmp	r3, r2
 800ce84:	d022      	beq.n	800cecc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce8e:	d01d      	beq.n	800cecc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	4a1d      	ldr	r2, [pc, #116]	; (800cf0c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ce96:	4293      	cmp	r3, r2
 800ce98:	d018      	beq.n	800cecc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	4a1c      	ldr	r2, [pc, #112]	; (800cf10 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800cea0:	4293      	cmp	r3, r2
 800cea2:	d013      	beq.n	800cecc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	4a1a      	ldr	r2, [pc, #104]	; (800cf14 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ceaa:	4293      	cmp	r3, r2
 800ceac:	d00e      	beq.n	800cecc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	4a15      	ldr	r2, [pc, #84]	; (800cf08 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ceb4:	4293      	cmp	r3, r2
 800ceb6:	d009      	beq.n	800cecc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	4a16      	ldr	r2, [pc, #88]	; (800cf18 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cebe:	4293      	cmp	r3, r2
 800cec0:	d004      	beq.n	800cecc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	4a15      	ldr	r2, [pc, #84]	; (800cf1c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cec8:	4293      	cmp	r3, r2
 800ceca:	d10c      	bne.n	800cee6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cecc:	68bb      	ldr	r3, [r7, #8]
 800cece:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ced2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ced4:	683b      	ldr	r3, [r7, #0]
 800ced6:	689b      	ldr	r3, [r3, #8]
 800ced8:	68ba      	ldr	r2, [r7, #8]
 800ceda:	4313      	orrs	r3, r2
 800cedc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	68ba      	ldr	r2, [r7, #8]
 800cee4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	2201      	movs	r2, #1
 800ceea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	2200      	movs	r2, #0
 800cef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cef6:	2300      	movs	r3, #0
}
 800cef8:	4618      	mov	r0, r3
 800cefa:	3714      	adds	r7, #20
 800cefc:	46bd      	mov	sp, r7
 800cefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf02:	4770      	bx	lr
 800cf04:	40010000 	.word	0x40010000
 800cf08:	40010400 	.word	0x40010400
 800cf0c:	40000400 	.word	0x40000400
 800cf10:	40000800 	.word	0x40000800
 800cf14:	40000c00 	.word	0x40000c00
 800cf18:	40001800 	.word	0x40001800
 800cf1c:	40014000 	.word	0x40014000

0800cf20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b082      	sub	sp, #8
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d101      	bne.n	800cf32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cf2e:	2301      	movs	r3, #1
 800cf30:	e042      	b.n	800cfb8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d106      	bne.n	800cf4a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	2200      	movs	r2, #0
 800cf40:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cf44:	6878      	ldr	r0, [r7, #4]
 800cf46:	f7f5 fd5b 	bl	8002a00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	2224      	movs	r2, #36	; 0x24
 800cf4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	681a      	ldr	r2, [r3, #0]
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	f022 0201 	bic.w	r2, r2, #1
 800cf60:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cf62:	6878      	ldr	r0, [r7, #4]
 800cf64:	f000 f8ba 	bl	800d0dc <UART_SetConfig>
 800cf68:	4603      	mov	r3, r0
 800cf6a:	2b01      	cmp	r3, #1
 800cf6c:	d101      	bne.n	800cf72 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800cf6e:	2301      	movs	r3, #1
 800cf70:	e022      	b.n	800cfb8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d002      	beq.n	800cf80 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800cf7a:	6878      	ldr	r0, [r7, #4]
 800cf7c:	f000 fe16 	bl	800dbac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	685a      	ldr	r2, [r3, #4]
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cf8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	689a      	ldr	r2, [r3, #8]
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cf9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	681a      	ldr	r2, [r3, #0]
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	f042 0201 	orr.w	r2, r2, #1
 800cfae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cfb0:	6878      	ldr	r0, [r7, #4]
 800cfb2:	f000 fe9d 	bl	800dcf0 <UART_CheckIdleState>
 800cfb6:	4603      	mov	r3, r0
}
 800cfb8:	4618      	mov	r0, r3
 800cfba:	3708      	adds	r7, #8
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	bd80      	pop	{r7, pc}

0800cfc0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b08a      	sub	sp, #40	; 0x28
 800cfc4:	af02      	add	r7, sp, #8
 800cfc6:	60f8      	str	r0, [r7, #12]
 800cfc8:	60b9      	str	r1, [r7, #8]
 800cfca:	603b      	str	r3, [r7, #0]
 800cfcc:	4613      	mov	r3, r2
 800cfce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cfd6:	2b20      	cmp	r3, #32
 800cfd8:	d17b      	bne.n	800d0d2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800cfda:	68bb      	ldr	r3, [r7, #8]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d002      	beq.n	800cfe6 <HAL_UART_Transmit+0x26>
 800cfe0:	88fb      	ldrh	r3, [r7, #6]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d101      	bne.n	800cfea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800cfe6:	2301      	movs	r3, #1
 800cfe8:	e074      	b.n	800d0d4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	2200      	movs	r2, #0
 800cfee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	2221      	movs	r2, #33	; 0x21
 800cff6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cffa:	f7f6 f9f7 	bl	80033ec <HAL_GetTick>
 800cffe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	88fa      	ldrh	r2, [r7, #6]
 800d004:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	88fa      	ldrh	r2, [r7, #6]
 800d00c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	689b      	ldr	r3, [r3, #8]
 800d014:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d018:	d108      	bne.n	800d02c <HAL_UART_Transmit+0x6c>
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	691b      	ldr	r3, [r3, #16]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d104      	bne.n	800d02c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800d022:	2300      	movs	r3, #0
 800d024:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d026:	68bb      	ldr	r3, [r7, #8]
 800d028:	61bb      	str	r3, [r7, #24]
 800d02a:	e003      	b.n	800d034 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800d02c:	68bb      	ldr	r3, [r7, #8]
 800d02e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d030:	2300      	movs	r3, #0
 800d032:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d034:	e030      	b.n	800d098 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d036:	683b      	ldr	r3, [r7, #0]
 800d038:	9300      	str	r3, [sp, #0]
 800d03a:	697b      	ldr	r3, [r7, #20]
 800d03c:	2200      	movs	r2, #0
 800d03e:	2180      	movs	r1, #128	; 0x80
 800d040:	68f8      	ldr	r0, [r7, #12]
 800d042:	f000 feff 	bl	800de44 <UART_WaitOnFlagUntilTimeout>
 800d046:	4603      	mov	r3, r0
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d005      	beq.n	800d058 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	2220      	movs	r2, #32
 800d050:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800d054:	2303      	movs	r3, #3
 800d056:	e03d      	b.n	800d0d4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800d058:	69fb      	ldr	r3, [r7, #28]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d10b      	bne.n	800d076 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d05e:	69bb      	ldr	r3, [r7, #24]
 800d060:	881b      	ldrh	r3, [r3, #0]
 800d062:	461a      	mov	r2, r3
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d06c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d06e:	69bb      	ldr	r3, [r7, #24]
 800d070:	3302      	adds	r3, #2
 800d072:	61bb      	str	r3, [r7, #24]
 800d074:	e007      	b.n	800d086 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d076:	69fb      	ldr	r3, [r7, #28]
 800d078:	781a      	ldrb	r2, [r3, #0]
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d080:	69fb      	ldr	r3, [r7, #28]
 800d082:	3301      	adds	r3, #1
 800d084:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d08c:	b29b      	uxth	r3, r3
 800d08e:	3b01      	subs	r3, #1
 800d090:	b29a      	uxth	r2, r3
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d09e:	b29b      	uxth	r3, r3
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d1c8      	bne.n	800d036 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d0a4:	683b      	ldr	r3, [r7, #0]
 800d0a6:	9300      	str	r3, [sp, #0]
 800d0a8:	697b      	ldr	r3, [r7, #20]
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	2140      	movs	r1, #64	; 0x40
 800d0ae:	68f8      	ldr	r0, [r7, #12]
 800d0b0:	f000 fec8 	bl	800de44 <UART_WaitOnFlagUntilTimeout>
 800d0b4:	4603      	mov	r3, r0
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d005      	beq.n	800d0c6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	2220      	movs	r2, #32
 800d0be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800d0c2:	2303      	movs	r3, #3
 800d0c4:	e006      	b.n	800d0d4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	2220      	movs	r2, #32
 800d0ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	e000      	b.n	800d0d4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800d0d2:	2302      	movs	r3, #2
  }
}
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	3720      	adds	r7, #32
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	bd80      	pop	{r7, pc}

0800d0dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d0dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d0e0:	b092      	sub	sp, #72	; 0x48
 800d0e2:	af00      	add	r7, sp, #0
 800d0e4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d0ec:	697b      	ldr	r3, [r7, #20]
 800d0ee:	689a      	ldr	r2, [r3, #8]
 800d0f0:	697b      	ldr	r3, [r7, #20]
 800d0f2:	691b      	ldr	r3, [r3, #16]
 800d0f4:	431a      	orrs	r2, r3
 800d0f6:	697b      	ldr	r3, [r7, #20]
 800d0f8:	695b      	ldr	r3, [r3, #20]
 800d0fa:	431a      	orrs	r2, r3
 800d0fc:	697b      	ldr	r3, [r7, #20]
 800d0fe:	69db      	ldr	r3, [r3, #28]
 800d100:	4313      	orrs	r3, r2
 800d102:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d104:	697b      	ldr	r3, [r7, #20]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	681a      	ldr	r2, [r3, #0]
 800d10a:	4bbe      	ldr	r3, [pc, #760]	; (800d404 <UART_SetConfig+0x328>)
 800d10c:	4013      	ands	r3, r2
 800d10e:	697a      	ldr	r2, [r7, #20]
 800d110:	6812      	ldr	r2, [r2, #0]
 800d112:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d114:	430b      	orrs	r3, r1
 800d116:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d118:	697b      	ldr	r3, [r7, #20]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	685b      	ldr	r3, [r3, #4]
 800d11e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d122:	697b      	ldr	r3, [r7, #20]
 800d124:	68da      	ldr	r2, [r3, #12]
 800d126:	697b      	ldr	r3, [r7, #20]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	430a      	orrs	r2, r1
 800d12c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d12e:	697b      	ldr	r3, [r7, #20]
 800d130:	699b      	ldr	r3, [r3, #24]
 800d132:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d134:	697b      	ldr	r3, [r7, #20]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	4ab3      	ldr	r2, [pc, #716]	; (800d408 <UART_SetConfig+0x32c>)
 800d13a:	4293      	cmp	r3, r2
 800d13c:	d004      	beq.n	800d148 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d13e:	697b      	ldr	r3, [r7, #20]
 800d140:	6a1b      	ldr	r3, [r3, #32]
 800d142:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d144:	4313      	orrs	r3, r2
 800d146:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d148:	697b      	ldr	r3, [r7, #20]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	689a      	ldr	r2, [r3, #8]
 800d14e:	4baf      	ldr	r3, [pc, #700]	; (800d40c <UART_SetConfig+0x330>)
 800d150:	4013      	ands	r3, r2
 800d152:	697a      	ldr	r2, [r7, #20]
 800d154:	6812      	ldr	r2, [r2, #0]
 800d156:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d158:	430b      	orrs	r3, r1
 800d15a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d15c:	697b      	ldr	r3, [r7, #20]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d162:	f023 010f 	bic.w	r1, r3, #15
 800d166:	697b      	ldr	r3, [r7, #20]
 800d168:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d16a:	697b      	ldr	r3, [r7, #20]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	430a      	orrs	r2, r1
 800d170:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d172:	697b      	ldr	r3, [r7, #20]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	4aa6      	ldr	r2, [pc, #664]	; (800d410 <UART_SetConfig+0x334>)
 800d178:	4293      	cmp	r3, r2
 800d17a:	d177      	bne.n	800d26c <UART_SetConfig+0x190>
 800d17c:	4ba5      	ldr	r3, [pc, #660]	; (800d414 <UART_SetConfig+0x338>)
 800d17e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d180:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d184:	2b28      	cmp	r3, #40	; 0x28
 800d186:	d86d      	bhi.n	800d264 <UART_SetConfig+0x188>
 800d188:	a201      	add	r2, pc, #4	; (adr r2, 800d190 <UART_SetConfig+0xb4>)
 800d18a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d18e:	bf00      	nop
 800d190:	0800d235 	.word	0x0800d235
 800d194:	0800d265 	.word	0x0800d265
 800d198:	0800d265 	.word	0x0800d265
 800d19c:	0800d265 	.word	0x0800d265
 800d1a0:	0800d265 	.word	0x0800d265
 800d1a4:	0800d265 	.word	0x0800d265
 800d1a8:	0800d265 	.word	0x0800d265
 800d1ac:	0800d265 	.word	0x0800d265
 800d1b0:	0800d23d 	.word	0x0800d23d
 800d1b4:	0800d265 	.word	0x0800d265
 800d1b8:	0800d265 	.word	0x0800d265
 800d1bc:	0800d265 	.word	0x0800d265
 800d1c0:	0800d265 	.word	0x0800d265
 800d1c4:	0800d265 	.word	0x0800d265
 800d1c8:	0800d265 	.word	0x0800d265
 800d1cc:	0800d265 	.word	0x0800d265
 800d1d0:	0800d245 	.word	0x0800d245
 800d1d4:	0800d265 	.word	0x0800d265
 800d1d8:	0800d265 	.word	0x0800d265
 800d1dc:	0800d265 	.word	0x0800d265
 800d1e0:	0800d265 	.word	0x0800d265
 800d1e4:	0800d265 	.word	0x0800d265
 800d1e8:	0800d265 	.word	0x0800d265
 800d1ec:	0800d265 	.word	0x0800d265
 800d1f0:	0800d24d 	.word	0x0800d24d
 800d1f4:	0800d265 	.word	0x0800d265
 800d1f8:	0800d265 	.word	0x0800d265
 800d1fc:	0800d265 	.word	0x0800d265
 800d200:	0800d265 	.word	0x0800d265
 800d204:	0800d265 	.word	0x0800d265
 800d208:	0800d265 	.word	0x0800d265
 800d20c:	0800d265 	.word	0x0800d265
 800d210:	0800d255 	.word	0x0800d255
 800d214:	0800d265 	.word	0x0800d265
 800d218:	0800d265 	.word	0x0800d265
 800d21c:	0800d265 	.word	0x0800d265
 800d220:	0800d265 	.word	0x0800d265
 800d224:	0800d265 	.word	0x0800d265
 800d228:	0800d265 	.word	0x0800d265
 800d22c:	0800d265 	.word	0x0800d265
 800d230:	0800d25d 	.word	0x0800d25d
 800d234:	2301      	movs	r3, #1
 800d236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d23a:	e222      	b.n	800d682 <UART_SetConfig+0x5a6>
 800d23c:	2304      	movs	r3, #4
 800d23e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d242:	e21e      	b.n	800d682 <UART_SetConfig+0x5a6>
 800d244:	2308      	movs	r3, #8
 800d246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d24a:	e21a      	b.n	800d682 <UART_SetConfig+0x5a6>
 800d24c:	2310      	movs	r3, #16
 800d24e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d252:	e216      	b.n	800d682 <UART_SetConfig+0x5a6>
 800d254:	2320      	movs	r3, #32
 800d256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d25a:	e212      	b.n	800d682 <UART_SetConfig+0x5a6>
 800d25c:	2340      	movs	r3, #64	; 0x40
 800d25e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d262:	e20e      	b.n	800d682 <UART_SetConfig+0x5a6>
 800d264:	2380      	movs	r3, #128	; 0x80
 800d266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d26a:	e20a      	b.n	800d682 <UART_SetConfig+0x5a6>
 800d26c:	697b      	ldr	r3, [r7, #20]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	4a69      	ldr	r2, [pc, #420]	; (800d418 <UART_SetConfig+0x33c>)
 800d272:	4293      	cmp	r3, r2
 800d274:	d130      	bne.n	800d2d8 <UART_SetConfig+0x1fc>
 800d276:	4b67      	ldr	r3, [pc, #412]	; (800d414 <UART_SetConfig+0x338>)
 800d278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d27a:	f003 0307 	and.w	r3, r3, #7
 800d27e:	2b05      	cmp	r3, #5
 800d280:	d826      	bhi.n	800d2d0 <UART_SetConfig+0x1f4>
 800d282:	a201      	add	r2, pc, #4	; (adr r2, 800d288 <UART_SetConfig+0x1ac>)
 800d284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d288:	0800d2a1 	.word	0x0800d2a1
 800d28c:	0800d2a9 	.word	0x0800d2a9
 800d290:	0800d2b1 	.word	0x0800d2b1
 800d294:	0800d2b9 	.word	0x0800d2b9
 800d298:	0800d2c1 	.word	0x0800d2c1
 800d29c:	0800d2c9 	.word	0x0800d2c9
 800d2a0:	2300      	movs	r3, #0
 800d2a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2a6:	e1ec      	b.n	800d682 <UART_SetConfig+0x5a6>
 800d2a8:	2304      	movs	r3, #4
 800d2aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2ae:	e1e8      	b.n	800d682 <UART_SetConfig+0x5a6>
 800d2b0:	2308      	movs	r3, #8
 800d2b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2b6:	e1e4      	b.n	800d682 <UART_SetConfig+0x5a6>
 800d2b8:	2310      	movs	r3, #16
 800d2ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2be:	e1e0      	b.n	800d682 <UART_SetConfig+0x5a6>
 800d2c0:	2320      	movs	r3, #32
 800d2c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2c6:	e1dc      	b.n	800d682 <UART_SetConfig+0x5a6>
 800d2c8:	2340      	movs	r3, #64	; 0x40
 800d2ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2ce:	e1d8      	b.n	800d682 <UART_SetConfig+0x5a6>
 800d2d0:	2380      	movs	r3, #128	; 0x80
 800d2d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2d6:	e1d4      	b.n	800d682 <UART_SetConfig+0x5a6>
 800d2d8:	697b      	ldr	r3, [r7, #20]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	4a4f      	ldr	r2, [pc, #316]	; (800d41c <UART_SetConfig+0x340>)
 800d2de:	4293      	cmp	r3, r2
 800d2e0:	d130      	bne.n	800d344 <UART_SetConfig+0x268>
 800d2e2:	4b4c      	ldr	r3, [pc, #304]	; (800d414 <UART_SetConfig+0x338>)
 800d2e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d2e6:	f003 0307 	and.w	r3, r3, #7
 800d2ea:	2b05      	cmp	r3, #5
 800d2ec:	d826      	bhi.n	800d33c <UART_SetConfig+0x260>
 800d2ee:	a201      	add	r2, pc, #4	; (adr r2, 800d2f4 <UART_SetConfig+0x218>)
 800d2f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2f4:	0800d30d 	.word	0x0800d30d
 800d2f8:	0800d315 	.word	0x0800d315
 800d2fc:	0800d31d 	.word	0x0800d31d
 800d300:	0800d325 	.word	0x0800d325
 800d304:	0800d32d 	.word	0x0800d32d
 800d308:	0800d335 	.word	0x0800d335
 800d30c:	2300      	movs	r3, #0
 800d30e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d312:	e1b6      	b.n	800d682 <UART_SetConfig+0x5a6>
 800d314:	2304      	movs	r3, #4
 800d316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d31a:	e1b2      	b.n	800d682 <UART_SetConfig+0x5a6>
 800d31c:	2308      	movs	r3, #8
 800d31e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d322:	e1ae      	b.n	800d682 <UART_SetConfig+0x5a6>
 800d324:	2310      	movs	r3, #16
 800d326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d32a:	e1aa      	b.n	800d682 <UART_SetConfig+0x5a6>
 800d32c:	2320      	movs	r3, #32
 800d32e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d332:	e1a6      	b.n	800d682 <UART_SetConfig+0x5a6>
 800d334:	2340      	movs	r3, #64	; 0x40
 800d336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d33a:	e1a2      	b.n	800d682 <UART_SetConfig+0x5a6>
 800d33c:	2380      	movs	r3, #128	; 0x80
 800d33e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d342:	e19e      	b.n	800d682 <UART_SetConfig+0x5a6>
 800d344:	697b      	ldr	r3, [r7, #20]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	4a35      	ldr	r2, [pc, #212]	; (800d420 <UART_SetConfig+0x344>)
 800d34a:	4293      	cmp	r3, r2
 800d34c:	d130      	bne.n	800d3b0 <UART_SetConfig+0x2d4>
 800d34e:	4b31      	ldr	r3, [pc, #196]	; (800d414 <UART_SetConfig+0x338>)
 800d350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d352:	f003 0307 	and.w	r3, r3, #7
 800d356:	2b05      	cmp	r3, #5
 800d358:	d826      	bhi.n	800d3a8 <UART_SetConfig+0x2cc>
 800d35a:	a201      	add	r2, pc, #4	; (adr r2, 800d360 <UART_SetConfig+0x284>)
 800d35c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d360:	0800d379 	.word	0x0800d379
 800d364:	0800d381 	.word	0x0800d381
 800d368:	0800d389 	.word	0x0800d389
 800d36c:	0800d391 	.word	0x0800d391
 800d370:	0800d399 	.word	0x0800d399
 800d374:	0800d3a1 	.word	0x0800d3a1
 800d378:	2300      	movs	r3, #0
 800d37a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d37e:	e180      	b.n	800d682 <UART_SetConfig+0x5a6>
 800d380:	2304      	movs	r3, #4
 800d382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d386:	e17c      	b.n	800d682 <UART_SetConfig+0x5a6>
 800d388:	2308      	movs	r3, #8
 800d38a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d38e:	e178      	b.n	800d682 <UART_SetConfig+0x5a6>
 800d390:	2310      	movs	r3, #16
 800d392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d396:	e174      	b.n	800d682 <UART_SetConfig+0x5a6>
 800d398:	2320      	movs	r3, #32
 800d39a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d39e:	e170      	b.n	800d682 <UART_SetConfig+0x5a6>
 800d3a0:	2340      	movs	r3, #64	; 0x40
 800d3a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3a6:	e16c      	b.n	800d682 <UART_SetConfig+0x5a6>
 800d3a8:	2380      	movs	r3, #128	; 0x80
 800d3aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3ae:	e168      	b.n	800d682 <UART_SetConfig+0x5a6>
 800d3b0:	697b      	ldr	r3, [r7, #20]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	4a1b      	ldr	r2, [pc, #108]	; (800d424 <UART_SetConfig+0x348>)
 800d3b6:	4293      	cmp	r3, r2
 800d3b8:	d142      	bne.n	800d440 <UART_SetConfig+0x364>
 800d3ba:	4b16      	ldr	r3, [pc, #88]	; (800d414 <UART_SetConfig+0x338>)
 800d3bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d3be:	f003 0307 	and.w	r3, r3, #7
 800d3c2:	2b05      	cmp	r3, #5
 800d3c4:	d838      	bhi.n	800d438 <UART_SetConfig+0x35c>
 800d3c6:	a201      	add	r2, pc, #4	; (adr r2, 800d3cc <UART_SetConfig+0x2f0>)
 800d3c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3cc:	0800d3e5 	.word	0x0800d3e5
 800d3d0:	0800d3ed 	.word	0x0800d3ed
 800d3d4:	0800d3f5 	.word	0x0800d3f5
 800d3d8:	0800d3fd 	.word	0x0800d3fd
 800d3dc:	0800d429 	.word	0x0800d429
 800d3e0:	0800d431 	.word	0x0800d431
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3ea:	e14a      	b.n	800d682 <UART_SetConfig+0x5a6>
 800d3ec:	2304      	movs	r3, #4
 800d3ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3f2:	e146      	b.n	800d682 <UART_SetConfig+0x5a6>
 800d3f4:	2308      	movs	r3, #8
 800d3f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3fa:	e142      	b.n	800d682 <UART_SetConfig+0x5a6>
 800d3fc:	2310      	movs	r3, #16
 800d3fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d402:	e13e      	b.n	800d682 <UART_SetConfig+0x5a6>
 800d404:	cfff69f3 	.word	0xcfff69f3
 800d408:	58000c00 	.word	0x58000c00
 800d40c:	11fff4ff 	.word	0x11fff4ff
 800d410:	40011000 	.word	0x40011000
 800d414:	58024400 	.word	0x58024400
 800d418:	40004400 	.word	0x40004400
 800d41c:	40004800 	.word	0x40004800
 800d420:	40004c00 	.word	0x40004c00
 800d424:	40005000 	.word	0x40005000
 800d428:	2320      	movs	r3, #32
 800d42a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d42e:	e128      	b.n	800d682 <UART_SetConfig+0x5a6>
 800d430:	2340      	movs	r3, #64	; 0x40
 800d432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d436:	e124      	b.n	800d682 <UART_SetConfig+0x5a6>
 800d438:	2380      	movs	r3, #128	; 0x80
 800d43a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d43e:	e120      	b.n	800d682 <UART_SetConfig+0x5a6>
 800d440:	697b      	ldr	r3, [r7, #20]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	4acb      	ldr	r2, [pc, #812]	; (800d774 <UART_SetConfig+0x698>)
 800d446:	4293      	cmp	r3, r2
 800d448:	d176      	bne.n	800d538 <UART_SetConfig+0x45c>
 800d44a:	4bcb      	ldr	r3, [pc, #812]	; (800d778 <UART_SetConfig+0x69c>)
 800d44c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d44e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d452:	2b28      	cmp	r3, #40	; 0x28
 800d454:	d86c      	bhi.n	800d530 <UART_SetConfig+0x454>
 800d456:	a201      	add	r2, pc, #4	; (adr r2, 800d45c <UART_SetConfig+0x380>)
 800d458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d45c:	0800d501 	.word	0x0800d501
 800d460:	0800d531 	.word	0x0800d531
 800d464:	0800d531 	.word	0x0800d531
 800d468:	0800d531 	.word	0x0800d531
 800d46c:	0800d531 	.word	0x0800d531
 800d470:	0800d531 	.word	0x0800d531
 800d474:	0800d531 	.word	0x0800d531
 800d478:	0800d531 	.word	0x0800d531
 800d47c:	0800d509 	.word	0x0800d509
 800d480:	0800d531 	.word	0x0800d531
 800d484:	0800d531 	.word	0x0800d531
 800d488:	0800d531 	.word	0x0800d531
 800d48c:	0800d531 	.word	0x0800d531
 800d490:	0800d531 	.word	0x0800d531
 800d494:	0800d531 	.word	0x0800d531
 800d498:	0800d531 	.word	0x0800d531
 800d49c:	0800d511 	.word	0x0800d511
 800d4a0:	0800d531 	.word	0x0800d531
 800d4a4:	0800d531 	.word	0x0800d531
 800d4a8:	0800d531 	.word	0x0800d531
 800d4ac:	0800d531 	.word	0x0800d531
 800d4b0:	0800d531 	.word	0x0800d531
 800d4b4:	0800d531 	.word	0x0800d531
 800d4b8:	0800d531 	.word	0x0800d531
 800d4bc:	0800d519 	.word	0x0800d519
 800d4c0:	0800d531 	.word	0x0800d531
 800d4c4:	0800d531 	.word	0x0800d531
 800d4c8:	0800d531 	.word	0x0800d531
 800d4cc:	0800d531 	.word	0x0800d531
 800d4d0:	0800d531 	.word	0x0800d531
 800d4d4:	0800d531 	.word	0x0800d531
 800d4d8:	0800d531 	.word	0x0800d531
 800d4dc:	0800d521 	.word	0x0800d521
 800d4e0:	0800d531 	.word	0x0800d531
 800d4e4:	0800d531 	.word	0x0800d531
 800d4e8:	0800d531 	.word	0x0800d531
 800d4ec:	0800d531 	.word	0x0800d531
 800d4f0:	0800d531 	.word	0x0800d531
 800d4f4:	0800d531 	.word	0x0800d531
 800d4f8:	0800d531 	.word	0x0800d531
 800d4fc:	0800d529 	.word	0x0800d529
 800d500:	2301      	movs	r3, #1
 800d502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d506:	e0bc      	b.n	800d682 <UART_SetConfig+0x5a6>
 800d508:	2304      	movs	r3, #4
 800d50a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d50e:	e0b8      	b.n	800d682 <UART_SetConfig+0x5a6>
 800d510:	2308      	movs	r3, #8
 800d512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d516:	e0b4      	b.n	800d682 <UART_SetConfig+0x5a6>
 800d518:	2310      	movs	r3, #16
 800d51a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d51e:	e0b0      	b.n	800d682 <UART_SetConfig+0x5a6>
 800d520:	2320      	movs	r3, #32
 800d522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d526:	e0ac      	b.n	800d682 <UART_SetConfig+0x5a6>
 800d528:	2340      	movs	r3, #64	; 0x40
 800d52a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d52e:	e0a8      	b.n	800d682 <UART_SetConfig+0x5a6>
 800d530:	2380      	movs	r3, #128	; 0x80
 800d532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d536:	e0a4      	b.n	800d682 <UART_SetConfig+0x5a6>
 800d538:	697b      	ldr	r3, [r7, #20]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	4a8f      	ldr	r2, [pc, #572]	; (800d77c <UART_SetConfig+0x6a0>)
 800d53e:	4293      	cmp	r3, r2
 800d540:	d130      	bne.n	800d5a4 <UART_SetConfig+0x4c8>
 800d542:	4b8d      	ldr	r3, [pc, #564]	; (800d778 <UART_SetConfig+0x69c>)
 800d544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d546:	f003 0307 	and.w	r3, r3, #7
 800d54a:	2b05      	cmp	r3, #5
 800d54c:	d826      	bhi.n	800d59c <UART_SetConfig+0x4c0>
 800d54e:	a201      	add	r2, pc, #4	; (adr r2, 800d554 <UART_SetConfig+0x478>)
 800d550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d554:	0800d56d 	.word	0x0800d56d
 800d558:	0800d575 	.word	0x0800d575
 800d55c:	0800d57d 	.word	0x0800d57d
 800d560:	0800d585 	.word	0x0800d585
 800d564:	0800d58d 	.word	0x0800d58d
 800d568:	0800d595 	.word	0x0800d595
 800d56c:	2300      	movs	r3, #0
 800d56e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d572:	e086      	b.n	800d682 <UART_SetConfig+0x5a6>
 800d574:	2304      	movs	r3, #4
 800d576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d57a:	e082      	b.n	800d682 <UART_SetConfig+0x5a6>
 800d57c:	2308      	movs	r3, #8
 800d57e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d582:	e07e      	b.n	800d682 <UART_SetConfig+0x5a6>
 800d584:	2310      	movs	r3, #16
 800d586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d58a:	e07a      	b.n	800d682 <UART_SetConfig+0x5a6>
 800d58c:	2320      	movs	r3, #32
 800d58e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d592:	e076      	b.n	800d682 <UART_SetConfig+0x5a6>
 800d594:	2340      	movs	r3, #64	; 0x40
 800d596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d59a:	e072      	b.n	800d682 <UART_SetConfig+0x5a6>
 800d59c:	2380      	movs	r3, #128	; 0x80
 800d59e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5a2:	e06e      	b.n	800d682 <UART_SetConfig+0x5a6>
 800d5a4:	697b      	ldr	r3, [r7, #20]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	4a75      	ldr	r2, [pc, #468]	; (800d780 <UART_SetConfig+0x6a4>)
 800d5aa:	4293      	cmp	r3, r2
 800d5ac:	d130      	bne.n	800d610 <UART_SetConfig+0x534>
 800d5ae:	4b72      	ldr	r3, [pc, #456]	; (800d778 <UART_SetConfig+0x69c>)
 800d5b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d5b2:	f003 0307 	and.w	r3, r3, #7
 800d5b6:	2b05      	cmp	r3, #5
 800d5b8:	d826      	bhi.n	800d608 <UART_SetConfig+0x52c>
 800d5ba:	a201      	add	r2, pc, #4	; (adr r2, 800d5c0 <UART_SetConfig+0x4e4>)
 800d5bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5c0:	0800d5d9 	.word	0x0800d5d9
 800d5c4:	0800d5e1 	.word	0x0800d5e1
 800d5c8:	0800d5e9 	.word	0x0800d5e9
 800d5cc:	0800d5f1 	.word	0x0800d5f1
 800d5d0:	0800d5f9 	.word	0x0800d5f9
 800d5d4:	0800d601 	.word	0x0800d601
 800d5d8:	2300      	movs	r3, #0
 800d5da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5de:	e050      	b.n	800d682 <UART_SetConfig+0x5a6>
 800d5e0:	2304      	movs	r3, #4
 800d5e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5e6:	e04c      	b.n	800d682 <UART_SetConfig+0x5a6>
 800d5e8:	2308      	movs	r3, #8
 800d5ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5ee:	e048      	b.n	800d682 <UART_SetConfig+0x5a6>
 800d5f0:	2310      	movs	r3, #16
 800d5f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5f6:	e044      	b.n	800d682 <UART_SetConfig+0x5a6>
 800d5f8:	2320      	movs	r3, #32
 800d5fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5fe:	e040      	b.n	800d682 <UART_SetConfig+0x5a6>
 800d600:	2340      	movs	r3, #64	; 0x40
 800d602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d606:	e03c      	b.n	800d682 <UART_SetConfig+0x5a6>
 800d608:	2380      	movs	r3, #128	; 0x80
 800d60a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d60e:	e038      	b.n	800d682 <UART_SetConfig+0x5a6>
 800d610:	697b      	ldr	r3, [r7, #20]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	4a5b      	ldr	r2, [pc, #364]	; (800d784 <UART_SetConfig+0x6a8>)
 800d616:	4293      	cmp	r3, r2
 800d618:	d130      	bne.n	800d67c <UART_SetConfig+0x5a0>
 800d61a:	4b57      	ldr	r3, [pc, #348]	; (800d778 <UART_SetConfig+0x69c>)
 800d61c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d61e:	f003 0307 	and.w	r3, r3, #7
 800d622:	2b05      	cmp	r3, #5
 800d624:	d826      	bhi.n	800d674 <UART_SetConfig+0x598>
 800d626:	a201      	add	r2, pc, #4	; (adr r2, 800d62c <UART_SetConfig+0x550>)
 800d628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d62c:	0800d645 	.word	0x0800d645
 800d630:	0800d64d 	.word	0x0800d64d
 800d634:	0800d655 	.word	0x0800d655
 800d638:	0800d65d 	.word	0x0800d65d
 800d63c:	0800d665 	.word	0x0800d665
 800d640:	0800d66d 	.word	0x0800d66d
 800d644:	2302      	movs	r3, #2
 800d646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d64a:	e01a      	b.n	800d682 <UART_SetConfig+0x5a6>
 800d64c:	2304      	movs	r3, #4
 800d64e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d652:	e016      	b.n	800d682 <UART_SetConfig+0x5a6>
 800d654:	2308      	movs	r3, #8
 800d656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d65a:	e012      	b.n	800d682 <UART_SetConfig+0x5a6>
 800d65c:	2310      	movs	r3, #16
 800d65e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d662:	e00e      	b.n	800d682 <UART_SetConfig+0x5a6>
 800d664:	2320      	movs	r3, #32
 800d666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d66a:	e00a      	b.n	800d682 <UART_SetConfig+0x5a6>
 800d66c:	2340      	movs	r3, #64	; 0x40
 800d66e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d672:	e006      	b.n	800d682 <UART_SetConfig+0x5a6>
 800d674:	2380      	movs	r3, #128	; 0x80
 800d676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d67a:	e002      	b.n	800d682 <UART_SetConfig+0x5a6>
 800d67c:	2380      	movs	r3, #128	; 0x80
 800d67e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d682:	697b      	ldr	r3, [r7, #20]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	4a3f      	ldr	r2, [pc, #252]	; (800d784 <UART_SetConfig+0x6a8>)
 800d688:	4293      	cmp	r3, r2
 800d68a:	f040 80f8 	bne.w	800d87e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d68e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d692:	2b20      	cmp	r3, #32
 800d694:	dc46      	bgt.n	800d724 <UART_SetConfig+0x648>
 800d696:	2b02      	cmp	r3, #2
 800d698:	f2c0 8082 	blt.w	800d7a0 <UART_SetConfig+0x6c4>
 800d69c:	3b02      	subs	r3, #2
 800d69e:	2b1e      	cmp	r3, #30
 800d6a0:	d87e      	bhi.n	800d7a0 <UART_SetConfig+0x6c4>
 800d6a2:	a201      	add	r2, pc, #4	; (adr r2, 800d6a8 <UART_SetConfig+0x5cc>)
 800d6a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6a8:	0800d72b 	.word	0x0800d72b
 800d6ac:	0800d7a1 	.word	0x0800d7a1
 800d6b0:	0800d733 	.word	0x0800d733
 800d6b4:	0800d7a1 	.word	0x0800d7a1
 800d6b8:	0800d7a1 	.word	0x0800d7a1
 800d6bc:	0800d7a1 	.word	0x0800d7a1
 800d6c0:	0800d743 	.word	0x0800d743
 800d6c4:	0800d7a1 	.word	0x0800d7a1
 800d6c8:	0800d7a1 	.word	0x0800d7a1
 800d6cc:	0800d7a1 	.word	0x0800d7a1
 800d6d0:	0800d7a1 	.word	0x0800d7a1
 800d6d4:	0800d7a1 	.word	0x0800d7a1
 800d6d8:	0800d7a1 	.word	0x0800d7a1
 800d6dc:	0800d7a1 	.word	0x0800d7a1
 800d6e0:	0800d753 	.word	0x0800d753
 800d6e4:	0800d7a1 	.word	0x0800d7a1
 800d6e8:	0800d7a1 	.word	0x0800d7a1
 800d6ec:	0800d7a1 	.word	0x0800d7a1
 800d6f0:	0800d7a1 	.word	0x0800d7a1
 800d6f4:	0800d7a1 	.word	0x0800d7a1
 800d6f8:	0800d7a1 	.word	0x0800d7a1
 800d6fc:	0800d7a1 	.word	0x0800d7a1
 800d700:	0800d7a1 	.word	0x0800d7a1
 800d704:	0800d7a1 	.word	0x0800d7a1
 800d708:	0800d7a1 	.word	0x0800d7a1
 800d70c:	0800d7a1 	.word	0x0800d7a1
 800d710:	0800d7a1 	.word	0x0800d7a1
 800d714:	0800d7a1 	.word	0x0800d7a1
 800d718:	0800d7a1 	.word	0x0800d7a1
 800d71c:	0800d7a1 	.word	0x0800d7a1
 800d720:	0800d793 	.word	0x0800d793
 800d724:	2b40      	cmp	r3, #64	; 0x40
 800d726:	d037      	beq.n	800d798 <UART_SetConfig+0x6bc>
 800d728:	e03a      	b.n	800d7a0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d72a:	f7fe fb19 	bl	800bd60 <HAL_RCCEx_GetD3PCLK1Freq>
 800d72e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d730:	e03c      	b.n	800d7ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d732:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d736:	4618      	mov	r0, r3
 800d738:	f7fe fb28 	bl	800bd8c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d73c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d73e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d740:	e034      	b.n	800d7ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d742:	f107 0318 	add.w	r3, r7, #24
 800d746:	4618      	mov	r0, r3
 800d748:	f7fe fc74 	bl	800c034 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d74c:	69fb      	ldr	r3, [r7, #28]
 800d74e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d750:	e02c      	b.n	800d7ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d752:	4b09      	ldr	r3, [pc, #36]	; (800d778 <UART_SetConfig+0x69c>)
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	f003 0320 	and.w	r3, r3, #32
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d016      	beq.n	800d78c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d75e:	4b06      	ldr	r3, [pc, #24]	; (800d778 <UART_SetConfig+0x69c>)
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	08db      	lsrs	r3, r3, #3
 800d764:	f003 0303 	and.w	r3, r3, #3
 800d768:	4a07      	ldr	r2, [pc, #28]	; (800d788 <UART_SetConfig+0x6ac>)
 800d76a:	fa22 f303 	lsr.w	r3, r2, r3
 800d76e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d770:	e01c      	b.n	800d7ac <UART_SetConfig+0x6d0>
 800d772:	bf00      	nop
 800d774:	40011400 	.word	0x40011400
 800d778:	58024400 	.word	0x58024400
 800d77c:	40007800 	.word	0x40007800
 800d780:	40007c00 	.word	0x40007c00
 800d784:	58000c00 	.word	0x58000c00
 800d788:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800d78c:	4b9d      	ldr	r3, [pc, #628]	; (800da04 <UART_SetConfig+0x928>)
 800d78e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d790:	e00c      	b.n	800d7ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d792:	4b9d      	ldr	r3, [pc, #628]	; (800da08 <UART_SetConfig+0x92c>)
 800d794:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d796:	e009      	b.n	800d7ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d798:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d79c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d79e:	e005      	b.n	800d7ac <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d7a4:	2301      	movs	r3, #1
 800d7a6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d7aa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d7ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	f000 81de 	beq.w	800db70 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d7b4:	697b      	ldr	r3, [r7, #20]
 800d7b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7b8:	4a94      	ldr	r2, [pc, #592]	; (800da0c <UART_SetConfig+0x930>)
 800d7ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d7be:	461a      	mov	r2, r3
 800d7c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7c2:	fbb3 f3f2 	udiv	r3, r3, r2
 800d7c6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d7c8:	697b      	ldr	r3, [r7, #20]
 800d7ca:	685a      	ldr	r2, [r3, #4]
 800d7cc:	4613      	mov	r3, r2
 800d7ce:	005b      	lsls	r3, r3, #1
 800d7d0:	4413      	add	r3, r2
 800d7d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d7d4:	429a      	cmp	r2, r3
 800d7d6:	d305      	bcc.n	800d7e4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d7d8:	697b      	ldr	r3, [r7, #20]
 800d7da:	685b      	ldr	r3, [r3, #4]
 800d7dc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d7de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d7e0:	429a      	cmp	r2, r3
 800d7e2:	d903      	bls.n	800d7ec <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800d7e4:	2301      	movs	r3, #1
 800d7e6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d7ea:	e1c1      	b.n	800db70 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d7ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	60bb      	str	r3, [r7, #8]
 800d7f2:	60fa      	str	r2, [r7, #12]
 800d7f4:	697b      	ldr	r3, [r7, #20]
 800d7f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7f8:	4a84      	ldr	r2, [pc, #528]	; (800da0c <UART_SetConfig+0x930>)
 800d7fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d7fe:	b29b      	uxth	r3, r3
 800d800:	2200      	movs	r2, #0
 800d802:	603b      	str	r3, [r7, #0]
 800d804:	607a      	str	r2, [r7, #4]
 800d806:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d80a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d80e:	f7f3 fe5f 	bl	80014d0 <__aeabi_uldivmod>
 800d812:	4602      	mov	r2, r0
 800d814:	460b      	mov	r3, r1
 800d816:	4610      	mov	r0, r2
 800d818:	4619      	mov	r1, r3
 800d81a:	f04f 0200 	mov.w	r2, #0
 800d81e:	f04f 0300 	mov.w	r3, #0
 800d822:	020b      	lsls	r3, r1, #8
 800d824:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d828:	0202      	lsls	r2, r0, #8
 800d82a:	6979      	ldr	r1, [r7, #20]
 800d82c:	6849      	ldr	r1, [r1, #4]
 800d82e:	0849      	lsrs	r1, r1, #1
 800d830:	2000      	movs	r0, #0
 800d832:	460c      	mov	r4, r1
 800d834:	4605      	mov	r5, r0
 800d836:	eb12 0804 	adds.w	r8, r2, r4
 800d83a:	eb43 0905 	adc.w	r9, r3, r5
 800d83e:	697b      	ldr	r3, [r7, #20]
 800d840:	685b      	ldr	r3, [r3, #4]
 800d842:	2200      	movs	r2, #0
 800d844:	469a      	mov	sl, r3
 800d846:	4693      	mov	fp, r2
 800d848:	4652      	mov	r2, sl
 800d84a:	465b      	mov	r3, fp
 800d84c:	4640      	mov	r0, r8
 800d84e:	4649      	mov	r1, r9
 800d850:	f7f3 fe3e 	bl	80014d0 <__aeabi_uldivmod>
 800d854:	4602      	mov	r2, r0
 800d856:	460b      	mov	r3, r1
 800d858:	4613      	mov	r3, r2
 800d85a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d85c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d85e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d862:	d308      	bcc.n	800d876 <UART_SetConfig+0x79a>
 800d864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d866:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d86a:	d204      	bcs.n	800d876 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800d86c:	697b      	ldr	r3, [r7, #20]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d872:	60da      	str	r2, [r3, #12]
 800d874:	e17c      	b.n	800db70 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800d876:	2301      	movs	r3, #1
 800d878:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d87c:	e178      	b.n	800db70 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d87e:	697b      	ldr	r3, [r7, #20]
 800d880:	69db      	ldr	r3, [r3, #28]
 800d882:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d886:	f040 80c5 	bne.w	800da14 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800d88a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d88e:	2b20      	cmp	r3, #32
 800d890:	dc48      	bgt.n	800d924 <UART_SetConfig+0x848>
 800d892:	2b00      	cmp	r3, #0
 800d894:	db7b      	blt.n	800d98e <UART_SetConfig+0x8b2>
 800d896:	2b20      	cmp	r3, #32
 800d898:	d879      	bhi.n	800d98e <UART_SetConfig+0x8b2>
 800d89a:	a201      	add	r2, pc, #4	; (adr r2, 800d8a0 <UART_SetConfig+0x7c4>)
 800d89c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8a0:	0800d92b 	.word	0x0800d92b
 800d8a4:	0800d933 	.word	0x0800d933
 800d8a8:	0800d98f 	.word	0x0800d98f
 800d8ac:	0800d98f 	.word	0x0800d98f
 800d8b0:	0800d93b 	.word	0x0800d93b
 800d8b4:	0800d98f 	.word	0x0800d98f
 800d8b8:	0800d98f 	.word	0x0800d98f
 800d8bc:	0800d98f 	.word	0x0800d98f
 800d8c0:	0800d94b 	.word	0x0800d94b
 800d8c4:	0800d98f 	.word	0x0800d98f
 800d8c8:	0800d98f 	.word	0x0800d98f
 800d8cc:	0800d98f 	.word	0x0800d98f
 800d8d0:	0800d98f 	.word	0x0800d98f
 800d8d4:	0800d98f 	.word	0x0800d98f
 800d8d8:	0800d98f 	.word	0x0800d98f
 800d8dc:	0800d98f 	.word	0x0800d98f
 800d8e0:	0800d95b 	.word	0x0800d95b
 800d8e4:	0800d98f 	.word	0x0800d98f
 800d8e8:	0800d98f 	.word	0x0800d98f
 800d8ec:	0800d98f 	.word	0x0800d98f
 800d8f0:	0800d98f 	.word	0x0800d98f
 800d8f4:	0800d98f 	.word	0x0800d98f
 800d8f8:	0800d98f 	.word	0x0800d98f
 800d8fc:	0800d98f 	.word	0x0800d98f
 800d900:	0800d98f 	.word	0x0800d98f
 800d904:	0800d98f 	.word	0x0800d98f
 800d908:	0800d98f 	.word	0x0800d98f
 800d90c:	0800d98f 	.word	0x0800d98f
 800d910:	0800d98f 	.word	0x0800d98f
 800d914:	0800d98f 	.word	0x0800d98f
 800d918:	0800d98f 	.word	0x0800d98f
 800d91c:	0800d98f 	.word	0x0800d98f
 800d920:	0800d981 	.word	0x0800d981
 800d924:	2b40      	cmp	r3, #64	; 0x40
 800d926:	d02e      	beq.n	800d986 <UART_SetConfig+0x8aa>
 800d928:	e031      	b.n	800d98e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d92a:	f7fc fa47 	bl	8009dbc <HAL_RCC_GetPCLK1Freq>
 800d92e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d930:	e033      	b.n	800d99a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d932:	f7fc fa59 	bl	8009de8 <HAL_RCC_GetPCLK2Freq>
 800d936:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d938:	e02f      	b.n	800d99a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d93a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d93e:	4618      	mov	r0, r3
 800d940:	f7fe fa24 	bl	800bd8c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d946:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d948:	e027      	b.n	800d99a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d94a:	f107 0318 	add.w	r3, r7, #24
 800d94e:	4618      	mov	r0, r3
 800d950:	f7fe fb70 	bl	800c034 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d954:	69fb      	ldr	r3, [r7, #28]
 800d956:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d958:	e01f      	b.n	800d99a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d95a:	4b2d      	ldr	r3, [pc, #180]	; (800da10 <UART_SetConfig+0x934>)
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	f003 0320 	and.w	r3, r3, #32
 800d962:	2b00      	cmp	r3, #0
 800d964:	d009      	beq.n	800d97a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d966:	4b2a      	ldr	r3, [pc, #168]	; (800da10 <UART_SetConfig+0x934>)
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	08db      	lsrs	r3, r3, #3
 800d96c:	f003 0303 	and.w	r3, r3, #3
 800d970:	4a24      	ldr	r2, [pc, #144]	; (800da04 <UART_SetConfig+0x928>)
 800d972:	fa22 f303 	lsr.w	r3, r2, r3
 800d976:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d978:	e00f      	b.n	800d99a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d97a:	4b22      	ldr	r3, [pc, #136]	; (800da04 <UART_SetConfig+0x928>)
 800d97c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d97e:	e00c      	b.n	800d99a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d980:	4b21      	ldr	r3, [pc, #132]	; (800da08 <UART_SetConfig+0x92c>)
 800d982:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d984:	e009      	b.n	800d99a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d986:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d98a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d98c:	e005      	b.n	800d99a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d98e:	2300      	movs	r3, #0
 800d990:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d992:	2301      	movs	r3, #1
 800d994:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d998:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d99a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	f000 80e7 	beq.w	800db70 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d9a2:	697b      	ldr	r3, [r7, #20]
 800d9a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9a6:	4a19      	ldr	r2, [pc, #100]	; (800da0c <UART_SetConfig+0x930>)
 800d9a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d9ac:	461a      	mov	r2, r3
 800d9ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9b0:	fbb3 f3f2 	udiv	r3, r3, r2
 800d9b4:	005a      	lsls	r2, r3, #1
 800d9b6:	697b      	ldr	r3, [r7, #20]
 800d9b8:	685b      	ldr	r3, [r3, #4]
 800d9ba:	085b      	lsrs	r3, r3, #1
 800d9bc:	441a      	add	r2, r3
 800d9be:	697b      	ldr	r3, [r7, #20]
 800d9c0:	685b      	ldr	r3, [r3, #4]
 800d9c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d9c6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d9c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9ca:	2b0f      	cmp	r3, #15
 800d9cc:	d916      	bls.n	800d9fc <UART_SetConfig+0x920>
 800d9ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d9d4:	d212      	bcs.n	800d9fc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d9d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9d8:	b29b      	uxth	r3, r3
 800d9da:	f023 030f 	bic.w	r3, r3, #15
 800d9de:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d9e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9e2:	085b      	lsrs	r3, r3, #1
 800d9e4:	b29b      	uxth	r3, r3
 800d9e6:	f003 0307 	and.w	r3, r3, #7
 800d9ea:	b29a      	uxth	r2, r3
 800d9ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d9ee:	4313      	orrs	r3, r2
 800d9f0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800d9f2:	697b      	ldr	r3, [r7, #20]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d9f8:	60da      	str	r2, [r3, #12]
 800d9fa:	e0b9      	b.n	800db70 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d9fc:	2301      	movs	r3, #1
 800d9fe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800da02:	e0b5      	b.n	800db70 <UART_SetConfig+0xa94>
 800da04:	03d09000 	.word	0x03d09000
 800da08:	003d0900 	.word	0x003d0900
 800da0c:	0801e0c8 	.word	0x0801e0c8
 800da10:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800da14:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800da18:	2b20      	cmp	r3, #32
 800da1a:	dc49      	bgt.n	800dab0 <UART_SetConfig+0x9d4>
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	db7c      	blt.n	800db1a <UART_SetConfig+0xa3e>
 800da20:	2b20      	cmp	r3, #32
 800da22:	d87a      	bhi.n	800db1a <UART_SetConfig+0xa3e>
 800da24:	a201      	add	r2, pc, #4	; (adr r2, 800da2c <UART_SetConfig+0x950>)
 800da26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da2a:	bf00      	nop
 800da2c:	0800dab7 	.word	0x0800dab7
 800da30:	0800dabf 	.word	0x0800dabf
 800da34:	0800db1b 	.word	0x0800db1b
 800da38:	0800db1b 	.word	0x0800db1b
 800da3c:	0800dac7 	.word	0x0800dac7
 800da40:	0800db1b 	.word	0x0800db1b
 800da44:	0800db1b 	.word	0x0800db1b
 800da48:	0800db1b 	.word	0x0800db1b
 800da4c:	0800dad7 	.word	0x0800dad7
 800da50:	0800db1b 	.word	0x0800db1b
 800da54:	0800db1b 	.word	0x0800db1b
 800da58:	0800db1b 	.word	0x0800db1b
 800da5c:	0800db1b 	.word	0x0800db1b
 800da60:	0800db1b 	.word	0x0800db1b
 800da64:	0800db1b 	.word	0x0800db1b
 800da68:	0800db1b 	.word	0x0800db1b
 800da6c:	0800dae7 	.word	0x0800dae7
 800da70:	0800db1b 	.word	0x0800db1b
 800da74:	0800db1b 	.word	0x0800db1b
 800da78:	0800db1b 	.word	0x0800db1b
 800da7c:	0800db1b 	.word	0x0800db1b
 800da80:	0800db1b 	.word	0x0800db1b
 800da84:	0800db1b 	.word	0x0800db1b
 800da88:	0800db1b 	.word	0x0800db1b
 800da8c:	0800db1b 	.word	0x0800db1b
 800da90:	0800db1b 	.word	0x0800db1b
 800da94:	0800db1b 	.word	0x0800db1b
 800da98:	0800db1b 	.word	0x0800db1b
 800da9c:	0800db1b 	.word	0x0800db1b
 800daa0:	0800db1b 	.word	0x0800db1b
 800daa4:	0800db1b 	.word	0x0800db1b
 800daa8:	0800db1b 	.word	0x0800db1b
 800daac:	0800db0d 	.word	0x0800db0d
 800dab0:	2b40      	cmp	r3, #64	; 0x40
 800dab2:	d02e      	beq.n	800db12 <UART_SetConfig+0xa36>
 800dab4:	e031      	b.n	800db1a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dab6:	f7fc f981 	bl	8009dbc <HAL_RCC_GetPCLK1Freq>
 800daba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dabc:	e033      	b.n	800db26 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dabe:	f7fc f993 	bl	8009de8 <HAL_RCC_GetPCLK2Freq>
 800dac2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dac4:	e02f      	b.n	800db26 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dac6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800daca:	4618      	mov	r0, r3
 800dacc:	f7fe f95e 	bl	800bd8c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dad2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dad4:	e027      	b.n	800db26 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dad6:	f107 0318 	add.w	r3, r7, #24
 800dada:	4618      	mov	r0, r3
 800dadc:	f7fe faaa 	bl	800c034 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dae0:	69fb      	ldr	r3, [r7, #28]
 800dae2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dae4:	e01f      	b.n	800db26 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dae6:	4b2d      	ldr	r3, [pc, #180]	; (800db9c <UART_SetConfig+0xac0>)
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	f003 0320 	and.w	r3, r3, #32
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d009      	beq.n	800db06 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800daf2:	4b2a      	ldr	r3, [pc, #168]	; (800db9c <UART_SetConfig+0xac0>)
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	08db      	lsrs	r3, r3, #3
 800daf8:	f003 0303 	and.w	r3, r3, #3
 800dafc:	4a28      	ldr	r2, [pc, #160]	; (800dba0 <UART_SetConfig+0xac4>)
 800dafe:	fa22 f303 	lsr.w	r3, r2, r3
 800db02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800db04:	e00f      	b.n	800db26 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800db06:	4b26      	ldr	r3, [pc, #152]	; (800dba0 <UART_SetConfig+0xac4>)
 800db08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db0a:	e00c      	b.n	800db26 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800db0c:	4b25      	ldr	r3, [pc, #148]	; (800dba4 <UART_SetConfig+0xac8>)
 800db0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db10:	e009      	b.n	800db26 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800db12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800db16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db18:	e005      	b.n	800db26 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800db1a:	2300      	movs	r3, #0
 800db1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800db1e:	2301      	movs	r3, #1
 800db20:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800db24:	bf00      	nop
    }

    if (pclk != 0U)
 800db26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d021      	beq.n	800db70 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800db2c:	697b      	ldr	r3, [r7, #20]
 800db2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db30:	4a1d      	ldr	r2, [pc, #116]	; (800dba8 <UART_SetConfig+0xacc>)
 800db32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800db36:	461a      	mov	r2, r3
 800db38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db3a:	fbb3 f2f2 	udiv	r2, r3, r2
 800db3e:	697b      	ldr	r3, [r7, #20]
 800db40:	685b      	ldr	r3, [r3, #4]
 800db42:	085b      	lsrs	r3, r3, #1
 800db44:	441a      	add	r2, r3
 800db46:	697b      	ldr	r3, [r7, #20]
 800db48:	685b      	ldr	r3, [r3, #4]
 800db4a:	fbb2 f3f3 	udiv	r3, r2, r3
 800db4e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800db50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db52:	2b0f      	cmp	r3, #15
 800db54:	d909      	bls.n	800db6a <UART_SetConfig+0xa8e>
 800db56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db5c:	d205      	bcs.n	800db6a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800db5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db60:	b29a      	uxth	r2, r3
 800db62:	697b      	ldr	r3, [r7, #20]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	60da      	str	r2, [r3, #12]
 800db68:	e002      	b.n	800db70 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800db6a:	2301      	movs	r3, #1
 800db6c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800db70:	697b      	ldr	r3, [r7, #20]
 800db72:	2201      	movs	r2, #1
 800db74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800db78:	697b      	ldr	r3, [r7, #20]
 800db7a:	2201      	movs	r2, #1
 800db7c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800db80:	697b      	ldr	r3, [r7, #20]
 800db82:	2200      	movs	r2, #0
 800db84:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800db86:	697b      	ldr	r3, [r7, #20]
 800db88:	2200      	movs	r2, #0
 800db8a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800db8c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800db90:	4618      	mov	r0, r3
 800db92:	3748      	adds	r7, #72	; 0x48
 800db94:	46bd      	mov	sp, r7
 800db96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800db9a:	bf00      	nop
 800db9c:	58024400 	.word	0x58024400
 800dba0:	03d09000 	.word	0x03d09000
 800dba4:	003d0900 	.word	0x003d0900
 800dba8:	0801e0c8 	.word	0x0801e0c8

0800dbac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dbac:	b480      	push	{r7}
 800dbae:	b083      	sub	sp, #12
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbb8:	f003 0301 	and.w	r3, r3, #1
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d00a      	beq.n	800dbd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	685b      	ldr	r3, [r3, #4]
 800dbc6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	430a      	orrs	r2, r1
 800dbd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbda:	f003 0302 	and.w	r3, r3, #2
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d00a      	beq.n	800dbf8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	685b      	ldr	r3, [r3, #4]
 800dbe8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	430a      	orrs	r2, r1
 800dbf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbfc:	f003 0304 	and.w	r3, r3, #4
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d00a      	beq.n	800dc1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	685b      	ldr	r3, [r3, #4]
 800dc0a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	430a      	orrs	r2, r1
 800dc18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc1e:	f003 0308 	and.w	r3, r3, #8
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d00a      	beq.n	800dc3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	685b      	ldr	r3, [r3, #4]
 800dc2c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	430a      	orrs	r2, r1
 800dc3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc40:	f003 0310 	and.w	r3, r3, #16
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d00a      	beq.n	800dc5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	689b      	ldr	r3, [r3, #8]
 800dc4e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	430a      	orrs	r2, r1
 800dc5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc62:	f003 0320 	and.w	r3, r3, #32
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d00a      	beq.n	800dc80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	689b      	ldr	r3, [r3, #8]
 800dc70:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	430a      	orrs	r2, r1
 800dc7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d01a      	beq.n	800dcc2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	685b      	ldr	r3, [r3, #4]
 800dc92:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	430a      	orrs	r2, r1
 800dca0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dca6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dcaa:	d10a      	bne.n	800dcc2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	685b      	ldr	r3, [r3, #4]
 800dcb2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	430a      	orrs	r2, r1
 800dcc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d00a      	beq.n	800dce4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	685b      	ldr	r3, [r3, #4]
 800dcd4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	430a      	orrs	r2, r1
 800dce2:	605a      	str	r2, [r3, #4]
  }
}
 800dce4:	bf00      	nop
 800dce6:	370c      	adds	r7, #12
 800dce8:	46bd      	mov	sp, r7
 800dcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcee:	4770      	bx	lr

0800dcf0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	b098      	sub	sp, #96	; 0x60
 800dcf4:	af02      	add	r7, sp, #8
 800dcf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	2200      	movs	r2, #0
 800dcfc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800dd00:	f7f5 fb74 	bl	80033ec <HAL_GetTick>
 800dd04:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	f003 0308 	and.w	r3, r3, #8
 800dd10:	2b08      	cmp	r3, #8
 800dd12:	d12f      	bne.n	800dd74 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dd14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800dd18:	9300      	str	r3, [sp, #0]
 800dd1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800dd22:	6878      	ldr	r0, [r7, #4]
 800dd24:	f000 f88e 	bl	800de44 <UART_WaitOnFlagUntilTimeout>
 800dd28:	4603      	mov	r3, r0
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d022      	beq.n	800dd74 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd36:	e853 3f00 	ldrex	r3, [r3]
 800dd3a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800dd3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dd42:	653b      	str	r3, [r7, #80]	; 0x50
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	461a      	mov	r2, r3
 800dd4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd4c:	647b      	str	r3, [r7, #68]	; 0x44
 800dd4e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd50:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800dd52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dd54:	e841 2300 	strex	r3, r2, [r1]
 800dd58:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800dd5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d1e6      	bne.n	800dd2e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	2220      	movs	r2, #32
 800dd64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	2200      	movs	r2, #0
 800dd6c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dd70:	2303      	movs	r3, #3
 800dd72:	e063      	b.n	800de3c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	f003 0304 	and.w	r3, r3, #4
 800dd7e:	2b04      	cmp	r3, #4
 800dd80:	d149      	bne.n	800de16 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dd82:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800dd86:	9300      	str	r3, [sp, #0]
 800dd88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd8a:	2200      	movs	r2, #0
 800dd8c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800dd90:	6878      	ldr	r0, [r7, #4]
 800dd92:	f000 f857 	bl	800de44 <UART_WaitOnFlagUntilTimeout>
 800dd96:	4603      	mov	r3, r0
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d03c      	beq.n	800de16 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dda2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dda4:	e853 3f00 	ldrex	r3, [r3]
 800dda8:	623b      	str	r3, [r7, #32]
   return(result);
 800ddaa:	6a3b      	ldr	r3, [r7, #32]
 800ddac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ddb0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	461a      	mov	r2, r3
 800ddb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddba:	633b      	str	r3, [r7, #48]	; 0x30
 800ddbc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ddc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ddc2:	e841 2300 	strex	r3, r2, [r1]
 800ddc6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ddc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d1e6      	bne.n	800dd9c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	3308      	adds	r3, #8
 800ddd4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddd6:	693b      	ldr	r3, [r7, #16]
 800ddd8:	e853 3f00 	ldrex	r3, [r3]
 800dddc:	60fb      	str	r3, [r7, #12]
   return(result);
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	f023 0301 	bic.w	r3, r3, #1
 800dde4:	64bb      	str	r3, [r7, #72]	; 0x48
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	3308      	adds	r3, #8
 800ddec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ddee:	61fa      	str	r2, [r7, #28]
 800ddf0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddf2:	69b9      	ldr	r1, [r7, #24]
 800ddf4:	69fa      	ldr	r2, [r7, #28]
 800ddf6:	e841 2300 	strex	r3, r2, [r1]
 800ddfa:	617b      	str	r3, [r7, #20]
   return(result);
 800ddfc:	697b      	ldr	r3, [r7, #20]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d1e5      	bne.n	800ddce <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	2220      	movs	r2, #32
 800de06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	2200      	movs	r2, #0
 800de0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800de12:	2303      	movs	r3, #3
 800de14:	e012      	b.n	800de3c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	2220      	movs	r2, #32
 800de1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	2220      	movs	r2, #32
 800de22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	2200      	movs	r2, #0
 800de2a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	2200      	movs	r2, #0
 800de30:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	2200      	movs	r2, #0
 800de36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800de3a:	2300      	movs	r3, #0
}
 800de3c:	4618      	mov	r0, r3
 800de3e:	3758      	adds	r7, #88	; 0x58
 800de40:	46bd      	mov	sp, r7
 800de42:	bd80      	pop	{r7, pc}

0800de44 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800de44:	b580      	push	{r7, lr}
 800de46:	b084      	sub	sp, #16
 800de48:	af00      	add	r7, sp, #0
 800de4a:	60f8      	str	r0, [r7, #12]
 800de4c:	60b9      	str	r1, [r7, #8]
 800de4e:	603b      	str	r3, [r7, #0]
 800de50:	4613      	mov	r3, r2
 800de52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800de54:	e049      	b.n	800deea <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800de56:	69bb      	ldr	r3, [r7, #24]
 800de58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de5c:	d045      	beq.n	800deea <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800de5e:	f7f5 fac5 	bl	80033ec <HAL_GetTick>
 800de62:	4602      	mov	r2, r0
 800de64:	683b      	ldr	r3, [r7, #0]
 800de66:	1ad3      	subs	r3, r2, r3
 800de68:	69ba      	ldr	r2, [r7, #24]
 800de6a:	429a      	cmp	r2, r3
 800de6c:	d302      	bcc.n	800de74 <UART_WaitOnFlagUntilTimeout+0x30>
 800de6e:	69bb      	ldr	r3, [r7, #24]
 800de70:	2b00      	cmp	r3, #0
 800de72:	d101      	bne.n	800de78 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800de74:	2303      	movs	r3, #3
 800de76:	e048      	b.n	800df0a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	f003 0304 	and.w	r3, r3, #4
 800de82:	2b00      	cmp	r3, #0
 800de84:	d031      	beq.n	800deea <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	69db      	ldr	r3, [r3, #28]
 800de8c:	f003 0308 	and.w	r3, r3, #8
 800de90:	2b08      	cmp	r3, #8
 800de92:	d110      	bne.n	800deb6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	2208      	movs	r2, #8
 800de9a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800de9c:	68f8      	ldr	r0, [r7, #12]
 800de9e:	f000 f839 	bl	800df14 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	2208      	movs	r2, #8
 800dea6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	2200      	movs	r2, #0
 800deae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800deb2:	2301      	movs	r3, #1
 800deb4:	e029      	b.n	800df0a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	69db      	ldr	r3, [r3, #28]
 800debc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dec0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dec4:	d111      	bne.n	800deea <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dece:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ded0:	68f8      	ldr	r0, [r7, #12]
 800ded2:	f000 f81f 	bl	800df14 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	2220      	movs	r2, #32
 800deda:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	2200      	movs	r2, #0
 800dee2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800dee6:	2303      	movs	r3, #3
 800dee8:	e00f      	b.n	800df0a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	69da      	ldr	r2, [r3, #28]
 800def0:	68bb      	ldr	r3, [r7, #8]
 800def2:	4013      	ands	r3, r2
 800def4:	68ba      	ldr	r2, [r7, #8]
 800def6:	429a      	cmp	r2, r3
 800def8:	bf0c      	ite	eq
 800defa:	2301      	moveq	r3, #1
 800defc:	2300      	movne	r3, #0
 800defe:	b2db      	uxtb	r3, r3
 800df00:	461a      	mov	r2, r3
 800df02:	79fb      	ldrb	r3, [r7, #7]
 800df04:	429a      	cmp	r2, r3
 800df06:	d0a6      	beq.n	800de56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800df08:	2300      	movs	r3, #0
}
 800df0a:	4618      	mov	r0, r3
 800df0c:	3710      	adds	r7, #16
 800df0e:	46bd      	mov	sp, r7
 800df10:	bd80      	pop	{r7, pc}
	...

0800df14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800df14:	b480      	push	{r7}
 800df16:	b095      	sub	sp, #84	; 0x54
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df24:	e853 3f00 	ldrex	r3, [r3]
 800df28:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800df2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800df30:	64fb      	str	r3, [r7, #76]	; 0x4c
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	461a      	mov	r2, r3
 800df38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df3a:	643b      	str	r3, [r7, #64]	; 0x40
 800df3c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df3e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800df40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800df42:	e841 2300 	strex	r3, r2, [r1]
 800df46:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800df48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d1e6      	bne.n	800df1c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	3308      	adds	r3, #8
 800df54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df56:	6a3b      	ldr	r3, [r7, #32]
 800df58:	e853 3f00 	ldrex	r3, [r3]
 800df5c:	61fb      	str	r3, [r7, #28]
   return(result);
 800df5e:	69fa      	ldr	r2, [r7, #28]
 800df60:	4b1e      	ldr	r3, [pc, #120]	; (800dfdc <UART_EndRxTransfer+0xc8>)
 800df62:	4013      	ands	r3, r2
 800df64:	64bb      	str	r3, [r7, #72]	; 0x48
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	3308      	adds	r3, #8
 800df6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800df6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800df70:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800df74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800df76:	e841 2300 	strex	r3, r2, [r1]
 800df7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800df7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d1e5      	bne.n	800df4e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df86:	2b01      	cmp	r3, #1
 800df88:	d118      	bne.n	800dfbc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	e853 3f00 	ldrex	r3, [r3]
 800df96:	60bb      	str	r3, [r7, #8]
   return(result);
 800df98:	68bb      	ldr	r3, [r7, #8]
 800df9a:	f023 0310 	bic.w	r3, r3, #16
 800df9e:	647b      	str	r3, [r7, #68]	; 0x44
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	461a      	mov	r2, r3
 800dfa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dfa8:	61bb      	str	r3, [r7, #24]
 800dfaa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfac:	6979      	ldr	r1, [r7, #20]
 800dfae:	69ba      	ldr	r2, [r7, #24]
 800dfb0:	e841 2300 	strex	r3, r2, [r1]
 800dfb4:	613b      	str	r3, [r7, #16]
   return(result);
 800dfb6:	693b      	ldr	r3, [r7, #16]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d1e6      	bne.n	800df8a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	2220      	movs	r2, #32
 800dfc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	2200      	movs	r2, #0
 800dfce:	675a      	str	r2, [r3, #116]	; 0x74
}
 800dfd0:	bf00      	nop
 800dfd2:	3754      	adds	r7, #84	; 0x54
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfda:	4770      	bx	lr
 800dfdc:	effffffe 	.word	0xeffffffe

0800dfe0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800dfe0:	b480      	push	{r7}
 800dfe2:	b085      	sub	sp, #20
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800dfee:	2b01      	cmp	r3, #1
 800dff0:	d101      	bne.n	800dff6 <HAL_UARTEx_DisableFifoMode+0x16>
 800dff2:	2302      	movs	r3, #2
 800dff4:	e027      	b.n	800e046 <HAL_UARTEx_DisableFifoMode+0x66>
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	2201      	movs	r2, #1
 800dffa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	2224      	movs	r2, #36	; 0x24
 800e002:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	681a      	ldr	r2, [r3, #0]
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	f022 0201 	bic.w	r2, r2, #1
 800e01c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e024:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	2200      	movs	r2, #0
 800e02a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	68fa      	ldr	r2, [r7, #12]
 800e032:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	2220      	movs	r2, #32
 800e038:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	2200      	movs	r2, #0
 800e040:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e044:	2300      	movs	r3, #0
}
 800e046:	4618      	mov	r0, r3
 800e048:	3714      	adds	r7, #20
 800e04a:	46bd      	mov	sp, r7
 800e04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e050:	4770      	bx	lr

0800e052 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e052:	b580      	push	{r7, lr}
 800e054:	b084      	sub	sp, #16
 800e056:	af00      	add	r7, sp, #0
 800e058:	6078      	str	r0, [r7, #4]
 800e05a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e062:	2b01      	cmp	r3, #1
 800e064:	d101      	bne.n	800e06a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e066:	2302      	movs	r3, #2
 800e068:	e02d      	b.n	800e0c6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	2201      	movs	r2, #1
 800e06e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	2224      	movs	r2, #36	; 0x24
 800e076:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	681a      	ldr	r2, [r3, #0]
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	f022 0201 	bic.w	r2, r2, #1
 800e090:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	689b      	ldr	r3, [r3, #8]
 800e098:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	683a      	ldr	r2, [r7, #0]
 800e0a2:	430a      	orrs	r2, r1
 800e0a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e0a6:	6878      	ldr	r0, [r7, #4]
 800e0a8:	f000 f850 	bl	800e14c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	68fa      	ldr	r2, [r7, #12]
 800e0b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	2220      	movs	r2, #32
 800e0b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	2200      	movs	r2, #0
 800e0c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e0c4:	2300      	movs	r3, #0
}
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	3710      	adds	r7, #16
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	bd80      	pop	{r7, pc}

0800e0ce <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e0ce:	b580      	push	{r7, lr}
 800e0d0:	b084      	sub	sp, #16
 800e0d2:	af00      	add	r7, sp, #0
 800e0d4:	6078      	str	r0, [r7, #4]
 800e0d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e0de:	2b01      	cmp	r3, #1
 800e0e0:	d101      	bne.n	800e0e6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e0e2:	2302      	movs	r3, #2
 800e0e4:	e02d      	b.n	800e142 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	2201      	movs	r2, #1
 800e0ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	2224      	movs	r2, #36	; 0x24
 800e0f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	681a      	ldr	r2, [r3, #0]
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	f022 0201 	bic.w	r2, r2, #1
 800e10c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	689b      	ldr	r3, [r3, #8]
 800e114:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	683a      	ldr	r2, [r7, #0]
 800e11e:	430a      	orrs	r2, r1
 800e120:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e122:	6878      	ldr	r0, [r7, #4]
 800e124:	f000 f812 	bl	800e14c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	68fa      	ldr	r2, [r7, #12]
 800e12e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	2220      	movs	r2, #32
 800e134:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	2200      	movs	r2, #0
 800e13c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e140:	2300      	movs	r3, #0
}
 800e142:	4618      	mov	r0, r3
 800e144:	3710      	adds	r7, #16
 800e146:	46bd      	mov	sp, r7
 800e148:	bd80      	pop	{r7, pc}
	...

0800e14c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e14c:	b480      	push	{r7}
 800e14e:	b085      	sub	sp, #20
 800e150:	af00      	add	r7, sp, #0
 800e152:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d108      	bne.n	800e16e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	2201      	movs	r2, #1
 800e160:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	2201      	movs	r2, #1
 800e168:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e16c:	e031      	b.n	800e1d2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e16e:	2310      	movs	r3, #16
 800e170:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e172:	2310      	movs	r3, #16
 800e174:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	689b      	ldr	r3, [r3, #8]
 800e17c:	0e5b      	lsrs	r3, r3, #25
 800e17e:	b2db      	uxtb	r3, r3
 800e180:	f003 0307 	and.w	r3, r3, #7
 800e184:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	689b      	ldr	r3, [r3, #8]
 800e18c:	0f5b      	lsrs	r3, r3, #29
 800e18e:	b2db      	uxtb	r3, r3
 800e190:	f003 0307 	and.w	r3, r3, #7
 800e194:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e196:	7bbb      	ldrb	r3, [r7, #14]
 800e198:	7b3a      	ldrb	r2, [r7, #12]
 800e19a:	4911      	ldr	r1, [pc, #68]	; (800e1e0 <UARTEx_SetNbDataToProcess+0x94>)
 800e19c:	5c8a      	ldrb	r2, [r1, r2]
 800e19e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e1a2:	7b3a      	ldrb	r2, [r7, #12]
 800e1a4:	490f      	ldr	r1, [pc, #60]	; (800e1e4 <UARTEx_SetNbDataToProcess+0x98>)
 800e1a6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e1a8:	fb93 f3f2 	sdiv	r3, r3, r2
 800e1ac:	b29a      	uxth	r2, r3
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e1b4:	7bfb      	ldrb	r3, [r7, #15]
 800e1b6:	7b7a      	ldrb	r2, [r7, #13]
 800e1b8:	4909      	ldr	r1, [pc, #36]	; (800e1e0 <UARTEx_SetNbDataToProcess+0x94>)
 800e1ba:	5c8a      	ldrb	r2, [r1, r2]
 800e1bc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e1c0:	7b7a      	ldrb	r2, [r7, #13]
 800e1c2:	4908      	ldr	r1, [pc, #32]	; (800e1e4 <UARTEx_SetNbDataToProcess+0x98>)
 800e1c4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e1c6:	fb93 f3f2 	sdiv	r3, r3, r2
 800e1ca:	b29a      	uxth	r2, r3
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e1d2:	bf00      	nop
 800e1d4:	3714      	adds	r7, #20
 800e1d6:	46bd      	mov	sp, r7
 800e1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1dc:	4770      	bx	lr
 800e1de:	bf00      	nop
 800e1e0:	0801e0e0 	.word	0x0801e0e0
 800e1e4:	0801e0e8 	.word	0x0801e0e8

0800e1e8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	b084      	sub	sp, #16
 800e1ec:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800e1ee:	4b8d      	ldr	r3, [pc, #564]	; (800e424 <MX_LWIP_Init+0x23c>)
 800e1f0:	22c0      	movs	r2, #192	; 0xc0
 800e1f2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800e1f4:	4b8b      	ldr	r3, [pc, #556]	; (800e424 <MX_LWIP_Init+0x23c>)
 800e1f6:	22a8      	movs	r2, #168	; 0xa8
 800e1f8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 800e1fa:	4b8a      	ldr	r3, [pc, #552]	; (800e424 <MX_LWIP_Init+0x23c>)
 800e1fc:	2200      	movs	r2, #0
 800e1fe:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 800e200:	4b88      	ldr	r3, [pc, #544]	; (800e424 <MX_LWIP_Init+0x23c>)
 800e202:	220a      	movs	r2, #10
 800e204:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800e206:	4b88      	ldr	r3, [pc, #544]	; (800e428 <MX_LWIP_Init+0x240>)
 800e208:	22ff      	movs	r2, #255	; 0xff
 800e20a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800e20c:	4b86      	ldr	r3, [pc, #536]	; (800e428 <MX_LWIP_Init+0x240>)
 800e20e:	22ff      	movs	r2, #255	; 0xff
 800e210:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 0;
 800e212:	4b85      	ldr	r3, [pc, #532]	; (800e428 <MX_LWIP_Init+0x240>)
 800e214:	2200      	movs	r2, #0
 800e216:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800e218:	4b83      	ldr	r3, [pc, #524]	; (800e428 <MX_LWIP_Init+0x240>)
 800e21a:	2200      	movs	r2, #0
 800e21c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800e21e:	4b83      	ldr	r3, [pc, #524]	; (800e42c <MX_LWIP_Init+0x244>)
 800e220:	22c0      	movs	r2, #192	; 0xc0
 800e222:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800e224:	4b81      	ldr	r3, [pc, #516]	; (800e42c <MX_LWIP_Init+0x244>)
 800e226:	22a8      	movs	r2, #168	; 0xa8
 800e228:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800e22a:	4b80      	ldr	r3, [pc, #512]	; (800e42c <MX_LWIP_Init+0x244>)
 800e22c:	2200      	movs	r2, #0
 800e22e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800e230:	4b7e      	ldr	r3, [pc, #504]	; (800e42c <MX_LWIP_Init+0x244>)
 800e232:	2201      	movs	r2, #1
 800e234:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800e236:	f000 fd3d 	bl	800ecb4 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800e23a:	4b7a      	ldr	r3, [pc, #488]	; (800e424 <MX_LWIP_Init+0x23c>)
 800e23c:	781b      	ldrb	r3, [r3, #0]
 800e23e:	061a      	lsls	r2, r3, #24
 800e240:	4b78      	ldr	r3, [pc, #480]	; (800e424 <MX_LWIP_Init+0x23c>)
 800e242:	785b      	ldrb	r3, [r3, #1]
 800e244:	041b      	lsls	r3, r3, #16
 800e246:	431a      	orrs	r2, r3
 800e248:	4b76      	ldr	r3, [pc, #472]	; (800e424 <MX_LWIP_Init+0x23c>)
 800e24a:	789b      	ldrb	r3, [r3, #2]
 800e24c:	021b      	lsls	r3, r3, #8
 800e24e:	4313      	orrs	r3, r2
 800e250:	4a74      	ldr	r2, [pc, #464]	; (800e424 <MX_LWIP_Init+0x23c>)
 800e252:	78d2      	ldrb	r2, [r2, #3]
 800e254:	4313      	orrs	r3, r2
 800e256:	061a      	lsls	r2, r3, #24
 800e258:	4b72      	ldr	r3, [pc, #456]	; (800e424 <MX_LWIP_Init+0x23c>)
 800e25a:	781b      	ldrb	r3, [r3, #0]
 800e25c:	0619      	lsls	r1, r3, #24
 800e25e:	4b71      	ldr	r3, [pc, #452]	; (800e424 <MX_LWIP_Init+0x23c>)
 800e260:	785b      	ldrb	r3, [r3, #1]
 800e262:	041b      	lsls	r3, r3, #16
 800e264:	4319      	orrs	r1, r3
 800e266:	4b6f      	ldr	r3, [pc, #444]	; (800e424 <MX_LWIP_Init+0x23c>)
 800e268:	789b      	ldrb	r3, [r3, #2]
 800e26a:	021b      	lsls	r3, r3, #8
 800e26c:	430b      	orrs	r3, r1
 800e26e:	496d      	ldr	r1, [pc, #436]	; (800e424 <MX_LWIP_Init+0x23c>)
 800e270:	78c9      	ldrb	r1, [r1, #3]
 800e272:	430b      	orrs	r3, r1
 800e274:	021b      	lsls	r3, r3, #8
 800e276:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e27a:	431a      	orrs	r2, r3
 800e27c:	4b69      	ldr	r3, [pc, #420]	; (800e424 <MX_LWIP_Init+0x23c>)
 800e27e:	781b      	ldrb	r3, [r3, #0]
 800e280:	0619      	lsls	r1, r3, #24
 800e282:	4b68      	ldr	r3, [pc, #416]	; (800e424 <MX_LWIP_Init+0x23c>)
 800e284:	785b      	ldrb	r3, [r3, #1]
 800e286:	041b      	lsls	r3, r3, #16
 800e288:	4319      	orrs	r1, r3
 800e28a:	4b66      	ldr	r3, [pc, #408]	; (800e424 <MX_LWIP_Init+0x23c>)
 800e28c:	789b      	ldrb	r3, [r3, #2]
 800e28e:	021b      	lsls	r3, r3, #8
 800e290:	430b      	orrs	r3, r1
 800e292:	4964      	ldr	r1, [pc, #400]	; (800e424 <MX_LWIP_Init+0x23c>)
 800e294:	78c9      	ldrb	r1, [r1, #3]
 800e296:	430b      	orrs	r3, r1
 800e298:	0a1b      	lsrs	r3, r3, #8
 800e29a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e29e:	431a      	orrs	r2, r3
 800e2a0:	4b60      	ldr	r3, [pc, #384]	; (800e424 <MX_LWIP_Init+0x23c>)
 800e2a2:	781b      	ldrb	r3, [r3, #0]
 800e2a4:	0619      	lsls	r1, r3, #24
 800e2a6:	4b5f      	ldr	r3, [pc, #380]	; (800e424 <MX_LWIP_Init+0x23c>)
 800e2a8:	785b      	ldrb	r3, [r3, #1]
 800e2aa:	041b      	lsls	r3, r3, #16
 800e2ac:	4319      	orrs	r1, r3
 800e2ae:	4b5d      	ldr	r3, [pc, #372]	; (800e424 <MX_LWIP_Init+0x23c>)
 800e2b0:	789b      	ldrb	r3, [r3, #2]
 800e2b2:	021b      	lsls	r3, r3, #8
 800e2b4:	430b      	orrs	r3, r1
 800e2b6:	495b      	ldr	r1, [pc, #364]	; (800e424 <MX_LWIP_Init+0x23c>)
 800e2b8:	78c9      	ldrb	r1, [r1, #3]
 800e2ba:	430b      	orrs	r3, r1
 800e2bc:	0e1b      	lsrs	r3, r3, #24
 800e2be:	4313      	orrs	r3, r2
 800e2c0:	4a5b      	ldr	r2, [pc, #364]	; (800e430 <MX_LWIP_Init+0x248>)
 800e2c2:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800e2c4:	4b58      	ldr	r3, [pc, #352]	; (800e428 <MX_LWIP_Init+0x240>)
 800e2c6:	781b      	ldrb	r3, [r3, #0]
 800e2c8:	061a      	lsls	r2, r3, #24
 800e2ca:	4b57      	ldr	r3, [pc, #348]	; (800e428 <MX_LWIP_Init+0x240>)
 800e2cc:	785b      	ldrb	r3, [r3, #1]
 800e2ce:	041b      	lsls	r3, r3, #16
 800e2d0:	431a      	orrs	r2, r3
 800e2d2:	4b55      	ldr	r3, [pc, #340]	; (800e428 <MX_LWIP_Init+0x240>)
 800e2d4:	789b      	ldrb	r3, [r3, #2]
 800e2d6:	021b      	lsls	r3, r3, #8
 800e2d8:	4313      	orrs	r3, r2
 800e2da:	4a53      	ldr	r2, [pc, #332]	; (800e428 <MX_LWIP_Init+0x240>)
 800e2dc:	78d2      	ldrb	r2, [r2, #3]
 800e2de:	4313      	orrs	r3, r2
 800e2e0:	061a      	lsls	r2, r3, #24
 800e2e2:	4b51      	ldr	r3, [pc, #324]	; (800e428 <MX_LWIP_Init+0x240>)
 800e2e4:	781b      	ldrb	r3, [r3, #0]
 800e2e6:	0619      	lsls	r1, r3, #24
 800e2e8:	4b4f      	ldr	r3, [pc, #316]	; (800e428 <MX_LWIP_Init+0x240>)
 800e2ea:	785b      	ldrb	r3, [r3, #1]
 800e2ec:	041b      	lsls	r3, r3, #16
 800e2ee:	4319      	orrs	r1, r3
 800e2f0:	4b4d      	ldr	r3, [pc, #308]	; (800e428 <MX_LWIP_Init+0x240>)
 800e2f2:	789b      	ldrb	r3, [r3, #2]
 800e2f4:	021b      	lsls	r3, r3, #8
 800e2f6:	430b      	orrs	r3, r1
 800e2f8:	494b      	ldr	r1, [pc, #300]	; (800e428 <MX_LWIP_Init+0x240>)
 800e2fa:	78c9      	ldrb	r1, [r1, #3]
 800e2fc:	430b      	orrs	r3, r1
 800e2fe:	021b      	lsls	r3, r3, #8
 800e300:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e304:	431a      	orrs	r2, r3
 800e306:	4b48      	ldr	r3, [pc, #288]	; (800e428 <MX_LWIP_Init+0x240>)
 800e308:	781b      	ldrb	r3, [r3, #0]
 800e30a:	0619      	lsls	r1, r3, #24
 800e30c:	4b46      	ldr	r3, [pc, #280]	; (800e428 <MX_LWIP_Init+0x240>)
 800e30e:	785b      	ldrb	r3, [r3, #1]
 800e310:	041b      	lsls	r3, r3, #16
 800e312:	4319      	orrs	r1, r3
 800e314:	4b44      	ldr	r3, [pc, #272]	; (800e428 <MX_LWIP_Init+0x240>)
 800e316:	789b      	ldrb	r3, [r3, #2]
 800e318:	021b      	lsls	r3, r3, #8
 800e31a:	430b      	orrs	r3, r1
 800e31c:	4942      	ldr	r1, [pc, #264]	; (800e428 <MX_LWIP_Init+0x240>)
 800e31e:	78c9      	ldrb	r1, [r1, #3]
 800e320:	430b      	orrs	r3, r1
 800e322:	0a1b      	lsrs	r3, r3, #8
 800e324:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e328:	431a      	orrs	r2, r3
 800e32a:	4b3f      	ldr	r3, [pc, #252]	; (800e428 <MX_LWIP_Init+0x240>)
 800e32c:	781b      	ldrb	r3, [r3, #0]
 800e32e:	0619      	lsls	r1, r3, #24
 800e330:	4b3d      	ldr	r3, [pc, #244]	; (800e428 <MX_LWIP_Init+0x240>)
 800e332:	785b      	ldrb	r3, [r3, #1]
 800e334:	041b      	lsls	r3, r3, #16
 800e336:	4319      	orrs	r1, r3
 800e338:	4b3b      	ldr	r3, [pc, #236]	; (800e428 <MX_LWIP_Init+0x240>)
 800e33a:	789b      	ldrb	r3, [r3, #2]
 800e33c:	021b      	lsls	r3, r3, #8
 800e33e:	430b      	orrs	r3, r1
 800e340:	4939      	ldr	r1, [pc, #228]	; (800e428 <MX_LWIP_Init+0x240>)
 800e342:	78c9      	ldrb	r1, [r1, #3]
 800e344:	430b      	orrs	r3, r1
 800e346:	0e1b      	lsrs	r3, r3, #24
 800e348:	4313      	orrs	r3, r2
 800e34a:	4a3a      	ldr	r2, [pc, #232]	; (800e434 <MX_LWIP_Init+0x24c>)
 800e34c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800e34e:	4b37      	ldr	r3, [pc, #220]	; (800e42c <MX_LWIP_Init+0x244>)
 800e350:	781b      	ldrb	r3, [r3, #0]
 800e352:	061a      	lsls	r2, r3, #24
 800e354:	4b35      	ldr	r3, [pc, #212]	; (800e42c <MX_LWIP_Init+0x244>)
 800e356:	785b      	ldrb	r3, [r3, #1]
 800e358:	041b      	lsls	r3, r3, #16
 800e35a:	431a      	orrs	r2, r3
 800e35c:	4b33      	ldr	r3, [pc, #204]	; (800e42c <MX_LWIP_Init+0x244>)
 800e35e:	789b      	ldrb	r3, [r3, #2]
 800e360:	021b      	lsls	r3, r3, #8
 800e362:	4313      	orrs	r3, r2
 800e364:	4a31      	ldr	r2, [pc, #196]	; (800e42c <MX_LWIP_Init+0x244>)
 800e366:	78d2      	ldrb	r2, [r2, #3]
 800e368:	4313      	orrs	r3, r2
 800e36a:	061a      	lsls	r2, r3, #24
 800e36c:	4b2f      	ldr	r3, [pc, #188]	; (800e42c <MX_LWIP_Init+0x244>)
 800e36e:	781b      	ldrb	r3, [r3, #0]
 800e370:	0619      	lsls	r1, r3, #24
 800e372:	4b2e      	ldr	r3, [pc, #184]	; (800e42c <MX_LWIP_Init+0x244>)
 800e374:	785b      	ldrb	r3, [r3, #1]
 800e376:	041b      	lsls	r3, r3, #16
 800e378:	4319      	orrs	r1, r3
 800e37a:	4b2c      	ldr	r3, [pc, #176]	; (800e42c <MX_LWIP_Init+0x244>)
 800e37c:	789b      	ldrb	r3, [r3, #2]
 800e37e:	021b      	lsls	r3, r3, #8
 800e380:	430b      	orrs	r3, r1
 800e382:	492a      	ldr	r1, [pc, #168]	; (800e42c <MX_LWIP_Init+0x244>)
 800e384:	78c9      	ldrb	r1, [r1, #3]
 800e386:	430b      	orrs	r3, r1
 800e388:	021b      	lsls	r3, r3, #8
 800e38a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e38e:	431a      	orrs	r2, r3
 800e390:	4b26      	ldr	r3, [pc, #152]	; (800e42c <MX_LWIP_Init+0x244>)
 800e392:	781b      	ldrb	r3, [r3, #0]
 800e394:	0619      	lsls	r1, r3, #24
 800e396:	4b25      	ldr	r3, [pc, #148]	; (800e42c <MX_LWIP_Init+0x244>)
 800e398:	785b      	ldrb	r3, [r3, #1]
 800e39a:	041b      	lsls	r3, r3, #16
 800e39c:	4319      	orrs	r1, r3
 800e39e:	4b23      	ldr	r3, [pc, #140]	; (800e42c <MX_LWIP_Init+0x244>)
 800e3a0:	789b      	ldrb	r3, [r3, #2]
 800e3a2:	021b      	lsls	r3, r3, #8
 800e3a4:	430b      	orrs	r3, r1
 800e3a6:	4921      	ldr	r1, [pc, #132]	; (800e42c <MX_LWIP_Init+0x244>)
 800e3a8:	78c9      	ldrb	r1, [r1, #3]
 800e3aa:	430b      	orrs	r3, r1
 800e3ac:	0a1b      	lsrs	r3, r3, #8
 800e3ae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e3b2:	431a      	orrs	r2, r3
 800e3b4:	4b1d      	ldr	r3, [pc, #116]	; (800e42c <MX_LWIP_Init+0x244>)
 800e3b6:	781b      	ldrb	r3, [r3, #0]
 800e3b8:	0619      	lsls	r1, r3, #24
 800e3ba:	4b1c      	ldr	r3, [pc, #112]	; (800e42c <MX_LWIP_Init+0x244>)
 800e3bc:	785b      	ldrb	r3, [r3, #1]
 800e3be:	041b      	lsls	r3, r3, #16
 800e3c0:	4319      	orrs	r1, r3
 800e3c2:	4b1a      	ldr	r3, [pc, #104]	; (800e42c <MX_LWIP_Init+0x244>)
 800e3c4:	789b      	ldrb	r3, [r3, #2]
 800e3c6:	021b      	lsls	r3, r3, #8
 800e3c8:	430b      	orrs	r3, r1
 800e3ca:	4918      	ldr	r1, [pc, #96]	; (800e42c <MX_LWIP_Init+0x244>)
 800e3cc:	78c9      	ldrb	r1, [r1, #3]
 800e3ce:	430b      	orrs	r3, r1
 800e3d0:	0e1b      	lsrs	r3, r3, #24
 800e3d2:	4313      	orrs	r3, r2
 800e3d4:	4a18      	ldr	r2, [pc, #96]	; (800e438 <MX_LWIP_Init+0x250>)
 800e3d6:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800e3d8:	4b18      	ldr	r3, [pc, #96]	; (800e43c <MX_LWIP_Init+0x254>)
 800e3da:	9302      	str	r3, [sp, #8]
 800e3dc:	4b18      	ldr	r3, [pc, #96]	; (800e440 <MX_LWIP_Init+0x258>)
 800e3de:	9301      	str	r3, [sp, #4]
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	9300      	str	r3, [sp, #0]
 800e3e4:	4b14      	ldr	r3, [pc, #80]	; (800e438 <MX_LWIP_Init+0x250>)
 800e3e6:	4a13      	ldr	r2, [pc, #76]	; (800e434 <MX_LWIP_Init+0x24c>)
 800e3e8:	4911      	ldr	r1, [pc, #68]	; (800e430 <MX_LWIP_Init+0x248>)
 800e3ea:	4816      	ldr	r0, [pc, #88]	; (800e444 <MX_LWIP_Init+0x25c>)
 800e3ec:	f001 f94a 	bl	800f684 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800e3f0:	4814      	ldr	r0, [pc, #80]	; (800e444 <MX_LWIP_Init+0x25c>)
 800e3f2:	f001 faf9 	bl	800f9e8 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800e3f6:	4b13      	ldr	r3, [pc, #76]	; (800e444 <MX_LWIP_Init+0x25c>)
 800e3f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e3fc:	089b      	lsrs	r3, r3, #2
 800e3fe:	f003 0301 	and.w	r3, r3, #1
 800e402:	b2db      	uxtb	r3, r3
 800e404:	2b00      	cmp	r3, #0
 800e406:	d003      	beq.n	800e410 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800e408:	480e      	ldr	r0, [pc, #56]	; (800e444 <MX_LWIP_Init+0x25c>)
 800e40a:	f001 fafd 	bl	800fa08 <netif_set_up>
 800e40e:	e002      	b.n	800e416 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800e410:	480c      	ldr	r0, [pc, #48]	; (800e444 <MX_LWIP_Init+0x25c>)
 800e412:	f001 fb65 	bl	800fae0 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800e416:	490c      	ldr	r1, [pc, #48]	; (800e448 <MX_LWIP_Init+0x260>)
 800e418:	480a      	ldr	r0, [pc, #40]	; (800e444 <MX_LWIP_Init+0x25c>)
 800e41a:	f001 fbf7 	bl	800fc0c <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800e41e:	bf00      	nop
 800e420:	46bd      	mov	sp, r7
 800e422:	bd80      	pop	{r7, pc}
 800e424:	2000063c 	.word	0x2000063c
 800e428:	20000640 	.word	0x20000640
 800e42c:	20000644 	.word	0x20000644
 800e430:	20000630 	.word	0x20000630
 800e434:	20000634 	.word	0x20000634
 800e438:	20000638 	.word	0x20000638
 800e43c:	08018451 	.word	0x08018451
 800e440:	0800e691 	.word	0x0800e691
 800e444:	200005fc 	.word	0x200005fc
 800e448:	0800e44d 	.word	0x0800e44d

0800e44c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800e44c:	b480      	push	{r7}
 800e44e:	b083      	sub	sp, #12
 800e450:	af00      	add	r7, sp, #0
 800e452:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800e454:	bf00      	nop
 800e456:	370c      	adds	r7, #12
 800e458:	46bd      	mov	sp, r7
 800e45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e45e:	4770      	bx	lr

0800e460 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800e460:	b580      	push	{r7, lr}
 800e462:	b084      	sub	sp, #16
 800e464:	af00      	add	r7, sp, #0
 800e466:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800e468:	2300      	movs	r3, #0
 800e46a:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800e46c:	4b3f      	ldr	r3, [pc, #252]	; (800e56c <low_level_init+0x10c>)
 800e46e:	4a40      	ldr	r2, [pc, #256]	; (800e570 <low_level_init+0x110>)
 800e470:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800e472:	2300      	movs	r3, #0
 800e474:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800e476:	2380      	movs	r3, #128	; 0x80
 800e478:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800e47a:	23e1      	movs	r3, #225	; 0xe1
 800e47c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800e47e:	2300      	movs	r3, #0
 800e480:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800e482:	2300      	movs	r3, #0
 800e484:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800e486:	2300      	movs	r3, #0
 800e488:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800e48a:	4a38      	ldr	r2, [pc, #224]	; (800e56c <low_level_init+0x10c>)
 800e48c:	f107 0308 	add.w	r3, r7, #8
 800e490:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800e492:	4b36      	ldr	r3, [pc, #216]	; (800e56c <low_level_init+0x10c>)
 800e494:	2201      	movs	r2, #1
 800e496:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800e498:	4b34      	ldr	r3, [pc, #208]	; (800e56c <low_level_init+0x10c>)
 800e49a:	4a36      	ldr	r2, [pc, #216]	; (800e574 <low_level_init+0x114>)
 800e49c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800e49e:	4b33      	ldr	r3, [pc, #204]	; (800e56c <low_level_init+0x10c>)
 800e4a0:	4a35      	ldr	r2, [pc, #212]	; (800e578 <low_level_init+0x118>)
 800e4a2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800e4a4:	4b31      	ldr	r3, [pc, #196]	; (800e56c <low_level_init+0x10c>)
 800e4a6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800e4aa:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800e4ac:	482f      	ldr	r0, [pc, #188]	; (800e56c <low_level_init+0x10c>)
 800e4ae:	f7f7 f84f 	bl	8005550 <HAL_ETH_Init>
 800e4b2:	4603      	mov	r3, r0
 800e4b4:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800e4b6:	2238      	movs	r2, #56	; 0x38
 800e4b8:	2100      	movs	r1, #0
 800e4ba:	4830      	ldr	r0, [pc, #192]	; (800e57c <low_level_init+0x11c>)
 800e4bc:	f00a ff1c 	bl	80192f8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800e4c0:	4b2e      	ldr	r3, [pc, #184]	; (800e57c <low_level_init+0x11c>)
 800e4c2:	2221      	movs	r2, #33	; 0x21
 800e4c4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800e4c6:	4b2d      	ldr	r3, [pc, #180]	; (800e57c <low_level_init+0x11c>)
 800e4c8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800e4cc:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800e4ce:	4b2b      	ldr	r3, [pc, #172]	; (800e57c <low_level_init+0x11c>)
 800e4d0:	2200      	movs	r2, #0
 800e4d2:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800e4d4:	482a      	ldr	r0, [pc, #168]	; (800e580 <low_level_init+0x120>)
 800e4d6:	f000 ff9d 	bl	800f414 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	2206      	movs	r2, #6
 800e4de:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800e4e2:	4b22      	ldr	r3, [pc, #136]	; (800e56c <low_level_init+0x10c>)
 800e4e4:	685b      	ldr	r3, [r3, #4]
 800e4e6:	781a      	ldrb	r2, [r3, #0]
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800e4ee:	4b1f      	ldr	r3, [pc, #124]	; (800e56c <low_level_init+0x10c>)
 800e4f0:	685b      	ldr	r3, [r3, #4]
 800e4f2:	785a      	ldrb	r2, [r3, #1]
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800e4fa:	4b1c      	ldr	r3, [pc, #112]	; (800e56c <low_level_init+0x10c>)
 800e4fc:	685b      	ldr	r3, [r3, #4]
 800e4fe:	789a      	ldrb	r2, [r3, #2]
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800e506:	4b19      	ldr	r3, [pc, #100]	; (800e56c <low_level_init+0x10c>)
 800e508:	685b      	ldr	r3, [r3, #4]
 800e50a:	78da      	ldrb	r2, [r3, #3]
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800e512:	4b16      	ldr	r3, [pc, #88]	; (800e56c <low_level_init+0x10c>)
 800e514:	685b      	ldr	r3, [r3, #4]
 800e516:	791a      	ldrb	r2, [r3, #4]
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800e51e:	4b13      	ldr	r3, [pc, #76]	; (800e56c <low_level_init+0x10c>)
 800e520:	685b      	ldr	r3, [r3, #4]
 800e522:	795a      	ldrb	r2, [r3, #5]
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800e530:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e538:	f043 030a 	orr.w	r3, r3, #10
 800e53c:	b2da      	uxtb	r2, r3
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800e544:	490f      	ldr	r1, [pc, #60]	; (800e584 <low_level_init+0x124>)
 800e546:	4810      	ldr	r0, [pc, #64]	; (800e588 <low_level_init+0x128>)
 800e548:	f7f4 fd69 	bl	800301e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800e54c:	480e      	ldr	r0, [pc, #56]	; (800e588 <low_level_init+0x128>)
 800e54e:	f7f4 fd98 	bl	8003082 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800e552:	7bfb      	ldrb	r3, [r7, #15]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d103      	bne.n	800e560 <low_level_init+0x100>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800e558:	6878      	ldr	r0, [r7, #4]
 800e55a:	f000 fa05 	bl	800e968 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800e55e:	e001      	b.n	800e564 <low_level_init+0x104>
    Error_Handler();
 800e560:	f7f4 f832 	bl	80025c8 <Error_Handler>
}
 800e564:	bf00      	nop
 800e566:	3710      	adds	r7, #16
 800e568:	46bd      	mov	sp, r7
 800e56a:	bd80      	pop	{r7, pc}
 800e56c:	20004fd4 	.word	0x20004fd4
 800e570:	40028000 	.word	0x40028000
 800e574:	20000288 	.word	0x20000288
 800e578:	20000228 	.word	0x20000228
 800e57c:	20005084 	.word	0x20005084
 800e580:	0801e0f0 	.word	0x0801e0f0
 800e584:	20000040 	.word	0x20000040
 800e588:	200050bc 	.word	0x200050bc

0800e58c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b092      	sub	sp, #72	; 0x48
 800e590:	af00      	add	r7, sp, #0
 800e592:	6078      	str	r0, [r7, #4]
 800e594:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800e596:	2300      	movs	r3, #0
 800e598:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800e59a:	2300      	movs	r3, #0
 800e59c:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800e59e:	2300      	movs	r3, #0
 800e5a0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800e5a4:	f107 030c 	add.w	r3, r7, #12
 800e5a8:	2230      	movs	r2, #48	; 0x30
 800e5aa:	2100      	movs	r1, #0
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	f00a fea3 	bl	80192f8 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800e5b2:	f107 030c 	add.w	r3, r7, #12
 800e5b6:	2230      	movs	r2, #48	; 0x30
 800e5b8:	2100      	movs	r1, #0
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	f00a fe9c 	bl	80192f8 <memset>

  for(q = p; q != NULL; q = q->next)
 800e5c0:	683b      	ldr	r3, [r7, #0]
 800e5c2:	643b      	str	r3, [r7, #64]	; 0x40
 800e5c4:	e045      	b.n	800e652 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800e5c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e5c8:	2b03      	cmp	r3, #3
 800e5ca:	d902      	bls.n	800e5d2 <low_level_output+0x46>
      return ERR_IF;
 800e5cc:	f06f 030b 	mvn.w	r3, #11
 800e5d0:	e055      	b.n	800e67e <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800e5d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5d4:	6859      	ldr	r1, [r3, #4]
 800e5d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e5d8:	4613      	mov	r3, r2
 800e5da:	005b      	lsls	r3, r3, #1
 800e5dc:	4413      	add	r3, r2
 800e5de:	009b      	lsls	r3, r3, #2
 800e5e0:	3348      	adds	r3, #72	; 0x48
 800e5e2:	443b      	add	r3, r7
 800e5e4:	3b3c      	subs	r3, #60	; 0x3c
 800e5e6:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800e5e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5ea:	895b      	ldrh	r3, [r3, #10]
 800e5ec:	4619      	mov	r1, r3
 800e5ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e5f0:	4613      	mov	r3, r2
 800e5f2:	005b      	lsls	r3, r3, #1
 800e5f4:	4413      	add	r3, r2
 800e5f6:	009b      	lsls	r3, r3, #2
 800e5f8:	3348      	adds	r3, #72	; 0x48
 800e5fa:	443b      	add	r3, r7
 800e5fc:	3b38      	subs	r3, #56	; 0x38
 800e5fe:	6019      	str	r1, [r3, #0]

    if(i>0)
 800e600:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e602:	2b00      	cmp	r3, #0
 800e604:	d011      	beq.n	800e62a <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800e606:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e608:	1e5a      	subs	r2, r3, #1
 800e60a:	f107 000c 	add.w	r0, r7, #12
 800e60e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e610:	460b      	mov	r3, r1
 800e612:	005b      	lsls	r3, r3, #1
 800e614:	440b      	add	r3, r1
 800e616:	009b      	lsls	r3, r3, #2
 800e618:	18c1      	adds	r1, r0, r3
 800e61a:	4613      	mov	r3, r2
 800e61c:	005b      	lsls	r3, r3, #1
 800e61e:	4413      	add	r3, r2
 800e620:	009b      	lsls	r3, r3, #2
 800e622:	3348      	adds	r3, #72	; 0x48
 800e624:	443b      	add	r3, r7
 800e626:	3b34      	subs	r3, #52	; 0x34
 800e628:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800e62a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d109      	bne.n	800e646 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800e632:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e634:	4613      	mov	r3, r2
 800e636:	005b      	lsls	r3, r3, #1
 800e638:	4413      	add	r3, r2
 800e63a:	009b      	lsls	r3, r3, #2
 800e63c:	3348      	adds	r3, #72	; 0x48
 800e63e:	443b      	add	r3, r7
 800e640:	3b34      	subs	r3, #52	; 0x34
 800e642:	2200      	movs	r2, #0
 800e644:	601a      	str	r2, [r3, #0]
    }

    i++;
 800e646:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e648:	3301      	adds	r3, #1
 800e64a:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800e64c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	643b      	str	r3, [r7, #64]	; 0x40
 800e652:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e654:	2b00      	cmp	r3, #0
 800e656:	d1b6      	bne.n	800e5c6 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800e658:	683b      	ldr	r3, [r7, #0]
 800e65a:	891b      	ldrh	r3, [r3, #8]
 800e65c:	461a      	mov	r2, r3
 800e65e:	4b0a      	ldr	r3, [pc, #40]	; (800e688 <low_level_output+0xfc>)
 800e660:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800e662:	4a09      	ldr	r2, [pc, #36]	; (800e688 <low_level_output+0xfc>)
 800e664:	f107 030c 	add.w	r3, r7, #12
 800e668:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800e66a:	4a07      	ldr	r2, [pc, #28]	; (800e688 <low_level_output+0xfc>)
 800e66c:	683b      	ldr	r3, [r7, #0]
 800e66e:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800e670:	2214      	movs	r2, #20
 800e672:	4905      	ldr	r1, [pc, #20]	; (800e688 <low_level_output+0xfc>)
 800e674:	4805      	ldr	r0, [pc, #20]	; (800e68c <low_level_output+0x100>)
 800e676:	f7f7 f903 	bl	8005880 <HAL_ETH_Transmit>

  return errval;
 800e67a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800e67e:	4618      	mov	r0, r3
 800e680:	3748      	adds	r7, #72	; 0x48
 800e682:	46bd      	mov	sp, r7
 800e684:	bd80      	pop	{r7, pc}
 800e686:	bf00      	nop
 800e688:	20005084 	.word	0x20005084
 800e68c:	20004fd4 	.word	0x20004fd4

0800e690 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800e690:	b580      	push	{r7, lr}
 800e692:	b082      	sub	sp, #8
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d106      	bne.n	800e6ac <ethernetif_init+0x1c>
 800e69e:	4b0e      	ldr	r3, [pc, #56]	; (800e6d8 <ethernetif_init+0x48>)
 800e6a0:	f240 127b 	movw	r2, #379	; 0x17b
 800e6a4:	490d      	ldr	r1, [pc, #52]	; (800e6dc <ethernetif_init+0x4c>)
 800e6a6:	480e      	ldr	r0, [pc, #56]	; (800e6e0 <ethernetif_init+0x50>)
 800e6a8:	f00a fcd0 	bl	801904c <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	2273      	movs	r2, #115	; 0x73
 800e6b0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	2274      	movs	r2, #116	; 0x74
 800e6b8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	4a09      	ldr	r2, [pc, #36]	; (800e6e4 <ethernetif_init+0x54>)
 800e6c0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	4a08      	ldr	r2, [pc, #32]	; (800e6e8 <ethernetif_init+0x58>)
 800e6c6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800e6c8:	6878      	ldr	r0, [r7, #4]
 800e6ca:	f7ff fec9 	bl	800e460 <low_level_init>

  return ERR_OK;
 800e6ce:	2300      	movs	r3, #0
}
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	3708      	adds	r7, #8
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	bd80      	pop	{r7, pc}
 800e6d8:	0801b6bc 	.word	0x0801b6bc
 800e6dc:	0801b6d8 	.word	0x0801b6d8
 800e6e0:	0801b6e8 	.word	0x0801b6e8
 800e6e4:	080168bd 	.word	0x080168bd
 800e6e8:	0800e58d 	.word	0x0800e58d

0800e6ec <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	b084      	sub	sp, #16
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800e6f8:	68f9      	ldr	r1, [r7, #12]
 800e6fa:	4807      	ldr	r0, [pc, #28]	; (800e718 <pbuf_free_custom+0x2c>)
 800e6fc:	f000 ff6c 	bl	800f5d8 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800e700:	4b06      	ldr	r3, [pc, #24]	; (800e71c <pbuf_free_custom+0x30>)
 800e702:	781b      	ldrb	r3, [r3, #0]
 800e704:	2b01      	cmp	r3, #1
 800e706:	d102      	bne.n	800e70e <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800e708:	4b04      	ldr	r3, [pc, #16]	; (800e71c <pbuf_free_custom+0x30>)
 800e70a:	2200      	movs	r2, #0
 800e70c:	701a      	strb	r2, [r3, #0]
  }
}
 800e70e:	bf00      	nop
 800e710:	3710      	adds	r7, #16
 800e712:	46bd      	mov	sp, r7
 800e714:	bd80      	pop	{r7, pc}
 800e716:	bf00      	nop
 800e718:	0801e0f0 	.word	0x0801e0f0
 800e71c:	20004fd0 	.word	0x20004fd0

0800e720 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800e720:	b580      	push	{r7, lr}
 800e722:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800e724:	f7f4 fe62 	bl	80033ec <HAL_GetTick>
 800e728:	4603      	mov	r3, r0
}
 800e72a:	4618      	mov	r0, r3
 800e72c:	bd80      	pop	{r7, pc}
	...

0800e730 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800e730:	b580      	push	{r7, lr}
 800e732:	b08e      	sub	sp, #56	; 0x38
 800e734:	af00      	add	r7, sp, #0
 800e736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e738:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e73c:	2200      	movs	r2, #0
 800e73e:	601a      	str	r2, [r3, #0]
 800e740:	605a      	str	r2, [r3, #4]
 800e742:	609a      	str	r2, [r3, #8]
 800e744:	60da      	str	r2, [r3, #12]
 800e746:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	4a59      	ldr	r2, [pc, #356]	; (800e8b4 <HAL_ETH_MspInit+0x184>)
 800e74e:	4293      	cmp	r3, r2
 800e750:	f040 80ab 	bne.w	800e8aa <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800e754:	4b58      	ldr	r3, [pc, #352]	; (800e8b8 <HAL_ETH_MspInit+0x188>)
 800e756:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e75a:	4a57      	ldr	r2, [pc, #348]	; (800e8b8 <HAL_ETH_MspInit+0x188>)
 800e75c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e760:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800e764:	4b54      	ldr	r3, [pc, #336]	; (800e8b8 <HAL_ETH_MspInit+0x188>)
 800e766:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e76a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e76e:	623b      	str	r3, [r7, #32]
 800e770:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800e772:	4b51      	ldr	r3, [pc, #324]	; (800e8b8 <HAL_ETH_MspInit+0x188>)
 800e774:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e778:	4a4f      	ldr	r2, [pc, #316]	; (800e8b8 <HAL_ETH_MspInit+0x188>)
 800e77a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e77e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800e782:	4b4d      	ldr	r3, [pc, #308]	; (800e8b8 <HAL_ETH_MspInit+0x188>)
 800e784:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e788:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e78c:	61fb      	str	r3, [r7, #28]
 800e78e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800e790:	4b49      	ldr	r3, [pc, #292]	; (800e8b8 <HAL_ETH_MspInit+0x188>)
 800e792:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e796:	4a48      	ldr	r2, [pc, #288]	; (800e8b8 <HAL_ETH_MspInit+0x188>)
 800e798:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e79c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800e7a0:	4b45      	ldr	r3, [pc, #276]	; (800e8b8 <HAL_ETH_MspInit+0x188>)
 800e7a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e7a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e7aa:	61bb      	str	r3, [r7, #24]
 800e7ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e7ae:	4b42      	ldr	r3, [pc, #264]	; (800e8b8 <HAL_ETH_MspInit+0x188>)
 800e7b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e7b4:	4a40      	ldr	r2, [pc, #256]	; (800e8b8 <HAL_ETH_MspInit+0x188>)
 800e7b6:	f043 0304 	orr.w	r3, r3, #4
 800e7ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e7be:	4b3e      	ldr	r3, [pc, #248]	; (800e8b8 <HAL_ETH_MspInit+0x188>)
 800e7c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e7c4:	f003 0304 	and.w	r3, r3, #4
 800e7c8:	617b      	str	r3, [r7, #20]
 800e7ca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e7cc:	4b3a      	ldr	r3, [pc, #232]	; (800e8b8 <HAL_ETH_MspInit+0x188>)
 800e7ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e7d2:	4a39      	ldr	r2, [pc, #228]	; (800e8b8 <HAL_ETH_MspInit+0x188>)
 800e7d4:	f043 0301 	orr.w	r3, r3, #1
 800e7d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e7dc:	4b36      	ldr	r3, [pc, #216]	; (800e8b8 <HAL_ETH_MspInit+0x188>)
 800e7de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e7e2:	f003 0301 	and.w	r3, r3, #1
 800e7e6:	613b      	str	r3, [r7, #16]
 800e7e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e7ea:	4b33      	ldr	r3, [pc, #204]	; (800e8b8 <HAL_ETH_MspInit+0x188>)
 800e7ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e7f0:	4a31      	ldr	r2, [pc, #196]	; (800e8b8 <HAL_ETH_MspInit+0x188>)
 800e7f2:	f043 0302 	orr.w	r3, r3, #2
 800e7f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e7fa:	4b2f      	ldr	r3, [pc, #188]	; (800e8b8 <HAL_ETH_MspInit+0x188>)
 800e7fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e800:	f003 0302 	and.w	r3, r3, #2
 800e804:	60fb      	str	r3, [r7, #12]
 800e806:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800e808:	4b2b      	ldr	r3, [pc, #172]	; (800e8b8 <HAL_ETH_MspInit+0x188>)
 800e80a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e80e:	4a2a      	ldr	r2, [pc, #168]	; (800e8b8 <HAL_ETH_MspInit+0x188>)
 800e810:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e814:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e818:	4b27      	ldr	r3, [pc, #156]	; (800e8b8 <HAL_ETH_MspInit+0x188>)
 800e81a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e81e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e822:	60bb      	str	r3, [r7, #8]
 800e824:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800e826:	2332      	movs	r3, #50	; 0x32
 800e828:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e82a:	2302      	movs	r3, #2
 800e82c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e82e:	2300      	movs	r3, #0
 800e830:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e832:	2300      	movs	r3, #0
 800e834:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800e836:	230b      	movs	r3, #11
 800e838:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e83a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e83e:	4619      	mov	r1, r3
 800e840:	481e      	ldr	r0, [pc, #120]	; (800e8bc <HAL_ETH_MspInit+0x18c>)
 800e842:	f7f8 f985 	bl	8006b50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800e846:	2386      	movs	r3, #134	; 0x86
 800e848:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e84a:	2302      	movs	r3, #2
 800e84c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e84e:	2300      	movs	r3, #0
 800e850:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e852:	2300      	movs	r3, #0
 800e854:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800e856:	230b      	movs	r3, #11
 800e858:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e85a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e85e:	4619      	mov	r1, r3
 800e860:	4817      	ldr	r0, [pc, #92]	; (800e8c0 <HAL_ETH_MspInit+0x190>)
 800e862:	f7f8 f975 	bl	8006b50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800e866:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e86a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e86c:	2302      	movs	r3, #2
 800e86e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e870:	2300      	movs	r3, #0
 800e872:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e874:	2300      	movs	r3, #0
 800e876:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800e878:	230b      	movs	r3, #11
 800e87a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e87c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e880:	4619      	mov	r1, r3
 800e882:	4810      	ldr	r0, [pc, #64]	; (800e8c4 <HAL_ETH_MspInit+0x194>)
 800e884:	f7f8 f964 	bl	8006b50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800e888:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e88c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e88e:	2302      	movs	r3, #2
 800e890:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e892:	2300      	movs	r3, #0
 800e894:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e896:	2300      	movs	r3, #0
 800e898:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800e89a:	230b      	movs	r3, #11
 800e89c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800e89e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e8a2:	4619      	mov	r1, r3
 800e8a4:	4808      	ldr	r0, [pc, #32]	; (800e8c8 <HAL_ETH_MspInit+0x198>)
 800e8a6:	f7f8 f953 	bl	8006b50 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800e8aa:	bf00      	nop
 800e8ac:	3738      	adds	r7, #56	; 0x38
 800e8ae:	46bd      	mov	sp, r7
 800e8b0:	bd80      	pop	{r7, pc}
 800e8b2:	bf00      	nop
 800e8b4:	40028000 	.word	0x40028000
 800e8b8:	58024400 	.word	0x58024400
 800e8bc:	58020800 	.word	0x58020800
 800e8c0:	58020000 	.word	0x58020000
 800e8c4:	58020400 	.word	0x58020400
 800e8c8:	58021800 	.word	0x58021800

0800e8cc <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800e8d0:	4802      	ldr	r0, [pc, #8]	; (800e8dc <ETH_PHY_IO_Init+0x10>)
 800e8d2:	f7f7 fb71 	bl	8005fb8 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800e8d6:	2300      	movs	r3, #0
}
 800e8d8:	4618      	mov	r0, r3
 800e8da:	bd80      	pop	{r7, pc}
 800e8dc:	20004fd4 	.word	0x20004fd4

0800e8e0 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800e8e0:	b480      	push	{r7}
 800e8e2:	af00      	add	r7, sp, #0
  return 0;
 800e8e4:	2300      	movs	r3, #0
}
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	46bd      	mov	sp, r7
 800e8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ee:	4770      	bx	lr

0800e8f0 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800e8f0:	b580      	push	{r7, lr}
 800e8f2:	b084      	sub	sp, #16
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	60f8      	str	r0, [r7, #12]
 800e8f8:	60b9      	str	r1, [r7, #8]
 800e8fa:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	68ba      	ldr	r2, [r7, #8]
 800e900:	68f9      	ldr	r1, [r7, #12]
 800e902:	4807      	ldr	r0, [pc, #28]	; (800e920 <ETH_PHY_IO_ReadReg+0x30>)
 800e904:	f7f7 f8c1 	bl	8005a8a <HAL_ETH_ReadPHYRegister>
 800e908:	4603      	mov	r3, r0
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d002      	beq.n	800e914 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800e90e:	f04f 33ff 	mov.w	r3, #4294967295
 800e912:	e000      	b.n	800e916 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800e914:	2300      	movs	r3, #0
}
 800e916:	4618      	mov	r0, r3
 800e918:	3710      	adds	r7, #16
 800e91a:	46bd      	mov	sp, r7
 800e91c:	bd80      	pop	{r7, pc}
 800e91e:	bf00      	nop
 800e920:	20004fd4 	.word	0x20004fd4

0800e924 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800e924:	b580      	push	{r7, lr}
 800e926:	b084      	sub	sp, #16
 800e928:	af00      	add	r7, sp, #0
 800e92a:	60f8      	str	r0, [r7, #12]
 800e92c:	60b9      	str	r1, [r7, #8]
 800e92e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	68ba      	ldr	r2, [r7, #8]
 800e934:	68f9      	ldr	r1, [r7, #12]
 800e936:	4807      	ldr	r0, [pc, #28]	; (800e954 <ETH_PHY_IO_WriteReg+0x30>)
 800e938:	f7f7 f8fc 	bl	8005b34 <HAL_ETH_WritePHYRegister>
 800e93c:	4603      	mov	r3, r0
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d002      	beq.n	800e948 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800e942:	f04f 33ff 	mov.w	r3, #4294967295
 800e946:	e000      	b.n	800e94a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800e948:	2300      	movs	r3, #0
}
 800e94a:	4618      	mov	r0, r3
 800e94c:	3710      	adds	r7, #16
 800e94e:	46bd      	mov	sp, r7
 800e950:	bd80      	pop	{r7, pc}
 800e952:	bf00      	nop
 800e954:	20004fd4 	.word	0x20004fd4

0800e958 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800e958:	b580      	push	{r7, lr}
 800e95a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800e95c:	f7f4 fd46 	bl	80033ec <HAL_GetTick>
 800e960:	4603      	mov	r3, r0
}
 800e962:	4618      	mov	r0, r3
 800e964:	bd80      	pop	{r7, pc}
	...

0800e968 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800e968:	b580      	push	{r7, lr}
 800e96a:	b0a0      	sub	sp, #128	; 0x80
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800e970:	f107 030c 	add.w	r3, r7, #12
 800e974:	2264      	movs	r2, #100	; 0x64
 800e976:	2100      	movs	r1, #0
 800e978:	4618      	mov	r0, r3
 800e97a:	f00a fcbd 	bl	80192f8 <memset>
  int32_t PHYLinkState = 0;
 800e97e:	2300      	movs	r3, #0
 800e980:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800e982:	2300      	movs	r3, #0
 800e984:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e986:	2300      	movs	r3, #0
 800e988:	67bb      	str	r3, [r7, #120]	; 0x78
 800e98a:	2300      	movs	r3, #0
 800e98c:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800e98e:	483a      	ldr	r0, [pc, #232]	; (800ea78 <ethernet_link_check_state+0x110>)
 800e990:	f7f4 fc1f 	bl	80031d2 <LAN8742_GetLinkState>
 800e994:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e99c:	089b      	lsrs	r3, r3, #2
 800e99e:	f003 0301 	and.w	r3, r3, #1
 800e9a2:	b2db      	uxtb	r3, r3
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d00c      	beq.n	800e9c2 <ethernet_link_check_state+0x5a>
 800e9a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e9aa:	2b01      	cmp	r3, #1
 800e9ac:	dc09      	bgt.n	800e9c2 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800e9ae:	4833      	ldr	r0, [pc, #204]	; (800ea7c <ethernet_link_check_state+0x114>)
 800e9b0:	f7f6 ff16 	bl	80057e0 <HAL_ETH_Stop>
    netif_set_down(netif);
 800e9b4:	6878      	ldr	r0, [r7, #4]
 800e9b6:	f001 f893 	bl	800fae0 <netif_set_down>
    netif_set_link_down(netif);
 800e9ba:	6878      	ldr	r0, [r7, #4]
 800e9bc:	f001 f8f6 	bl	800fbac <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800e9c0:	e055      	b.n	800ea6e <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e9c8:	f003 0304 	and.w	r3, r3, #4
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d14e      	bne.n	800ea6e <ethernet_link_check_state+0x106>
 800e9d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e9d2:	2b01      	cmp	r3, #1
 800e9d4:	dd4b      	ble.n	800ea6e <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800e9d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e9d8:	3b02      	subs	r3, #2
 800e9da:	2b03      	cmp	r3, #3
 800e9dc:	d82a      	bhi.n	800ea34 <ethernet_link_check_state+0xcc>
 800e9de:	a201      	add	r2, pc, #4	; (adr r2, 800e9e4 <ethernet_link_check_state+0x7c>)
 800e9e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9e4:	0800e9f5 	.word	0x0800e9f5
 800e9e8:	0800ea07 	.word	0x0800ea07
 800e9ec:	0800ea17 	.word	0x0800ea17
 800e9f0:	0800ea27 	.word	0x0800ea27
      duplex = ETH_FULLDUPLEX_MODE;
 800e9f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e9f8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800e9fa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e9fe:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800ea00:	2301      	movs	r3, #1
 800ea02:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800ea04:	e017      	b.n	800ea36 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800ea06:	2300      	movs	r3, #0
 800ea08:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800ea0a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ea0e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800ea10:	2301      	movs	r3, #1
 800ea12:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800ea14:	e00f      	b.n	800ea36 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800ea16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ea1a:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800ea1c:	2300      	movs	r3, #0
 800ea1e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800ea20:	2301      	movs	r3, #1
 800ea22:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800ea24:	e007      	b.n	800ea36 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800ea26:	2300      	movs	r3, #0
 800ea28:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800ea2e:	2301      	movs	r3, #1
 800ea30:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800ea32:	e000      	b.n	800ea36 <ethernet_link_check_state+0xce>
      break;
 800ea34:	bf00      	nop
    if(linkchanged)
 800ea36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d018      	beq.n	800ea6e <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800ea3c:	f107 030c 	add.w	r3, r7, #12
 800ea40:	4619      	mov	r1, r3
 800ea42:	480e      	ldr	r0, [pc, #56]	; (800ea7c <ethernet_link_check_state+0x114>)
 800ea44:	f7f7 f8ca 	bl	8005bdc <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800ea48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ea4a:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 800ea4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ea4e:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800ea50:	f107 030c 	add.w	r3, r7, #12
 800ea54:	4619      	mov	r1, r3
 800ea56:	4809      	ldr	r0, [pc, #36]	; (800ea7c <ethernet_link_check_state+0x114>)
 800ea58:	f7f7 fa94 	bl	8005f84 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800ea5c:	4807      	ldr	r0, [pc, #28]	; (800ea7c <ethernet_link_check_state+0x114>)
 800ea5e:	f7f6 fe5d 	bl	800571c <HAL_ETH_Start>
      netif_set_up(netif);
 800ea62:	6878      	ldr	r0, [r7, #4]
 800ea64:	f000 ffd0 	bl	800fa08 <netif_set_up>
      netif_set_link_up(netif);
 800ea68:	6878      	ldr	r0, [r7, #4]
 800ea6a:	f001 f86b 	bl	800fb44 <netif_set_link_up>
}
 800ea6e:	bf00      	nop
 800ea70:	3780      	adds	r7, #128	; 0x80
 800ea72:	46bd      	mov	sp, r7
 800ea74:	bd80      	pop	{r7, pc}
 800ea76:	bf00      	nop
 800ea78:	200050bc 	.word	0x200050bc
 800ea7c:	20004fd4 	.word	0x20004fd4

0800ea80 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800ea80:	b580      	push	{r7, lr}
 800ea82:	b086      	sub	sp, #24
 800ea84:	af02      	add	r7, sp, #8
 800ea86:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800ea88:	4812      	ldr	r0, [pc, #72]	; (800ead4 <HAL_ETH_RxAllocateCallback+0x54>)
 800ea8a:	f000 fd37 	bl	800f4fc <memp_malloc_pool>
 800ea8e:	60f8      	str	r0, [r7, #12]
  if (p)
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d014      	beq.n	800eac0 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	f103 0220 	add.w	r2, r3, #32
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	4a0d      	ldr	r2, [pc, #52]	; (800ead8 <HAL_ETH_RxAllocateCallback+0x58>)
 800eaa4:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800eaae:	9201      	str	r2, [sp, #4]
 800eab0:	9300      	str	r3, [sp, #0]
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	2241      	movs	r2, #65	; 0x41
 800eab6:	2100      	movs	r1, #0
 800eab8:	2000      	movs	r0, #0
 800eaba:	f001 fa4d 	bl	800ff58 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800eabe:	e005      	b.n	800eacc <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800eac0:	4b06      	ldr	r3, [pc, #24]	; (800eadc <HAL_ETH_RxAllocateCallback+0x5c>)
 800eac2:	2201      	movs	r2, #1
 800eac4:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	2200      	movs	r2, #0
 800eaca:	601a      	str	r2, [r3, #0]
}
 800eacc:	bf00      	nop
 800eace:	3710      	adds	r7, #16
 800ead0:	46bd      	mov	sp, r7
 800ead2:	bd80      	pop	{r7, pc}
 800ead4:	0801e0f0 	.word	0x0801e0f0
 800ead8:	0800e6ed 	.word	0x0800e6ed
 800eadc:	20004fd0 	.word	0x20004fd0

0800eae0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800eae0:	b480      	push	{r7}
 800eae2:	b083      	sub	sp, #12
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	4603      	mov	r3, r0
 800eae8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800eaea:	88fb      	ldrh	r3, [r7, #6]
 800eaec:	021b      	lsls	r3, r3, #8
 800eaee:	b21a      	sxth	r2, r3
 800eaf0:	88fb      	ldrh	r3, [r7, #6]
 800eaf2:	0a1b      	lsrs	r3, r3, #8
 800eaf4:	b29b      	uxth	r3, r3
 800eaf6:	b21b      	sxth	r3, r3
 800eaf8:	4313      	orrs	r3, r2
 800eafa:	b21b      	sxth	r3, r3
 800eafc:	b29b      	uxth	r3, r3
}
 800eafe:	4618      	mov	r0, r3
 800eb00:	370c      	adds	r7, #12
 800eb02:	46bd      	mov	sp, r7
 800eb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb08:	4770      	bx	lr

0800eb0a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800eb0a:	b480      	push	{r7}
 800eb0c:	b083      	sub	sp, #12
 800eb0e:	af00      	add	r7, sp, #0
 800eb10:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	061a      	lsls	r2, r3, #24
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	021b      	lsls	r3, r3, #8
 800eb1a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800eb1e:	431a      	orrs	r2, r3
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	0a1b      	lsrs	r3, r3, #8
 800eb24:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800eb28:	431a      	orrs	r2, r3
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	0e1b      	lsrs	r3, r3, #24
 800eb2e:	4313      	orrs	r3, r2
}
 800eb30:	4618      	mov	r0, r3
 800eb32:	370c      	adds	r7, #12
 800eb34:	46bd      	mov	sp, r7
 800eb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3a:	4770      	bx	lr

0800eb3c <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800eb3c:	b480      	push	{r7}
 800eb3e:	b089      	sub	sp, #36	; 0x24
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
 800eb44:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800eb4a:	2300      	movs	r3, #0
 800eb4c:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800eb4e:	2300      	movs	r3, #0
 800eb50:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800eb52:	69fb      	ldr	r3, [r7, #28]
 800eb54:	f003 0301 	and.w	r3, r3, #1
 800eb58:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800eb5a:	693b      	ldr	r3, [r7, #16]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d00d      	beq.n	800eb7c <lwip_standard_chksum+0x40>
 800eb60:	683b      	ldr	r3, [r7, #0]
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	dd0a      	ble.n	800eb7c <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800eb66:	69fa      	ldr	r2, [r7, #28]
 800eb68:	1c53      	adds	r3, r2, #1
 800eb6a:	61fb      	str	r3, [r7, #28]
 800eb6c:	f107 030e 	add.w	r3, r7, #14
 800eb70:	3301      	adds	r3, #1
 800eb72:	7812      	ldrb	r2, [r2, #0]
 800eb74:	701a      	strb	r2, [r3, #0]
    len--;
 800eb76:	683b      	ldr	r3, [r7, #0]
 800eb78:	3b01      	subs	r3, #1
 800eb7a:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800eb7c:	69fb      	ldr	r3, [r7, #28]
 800eb7e:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800eb80:	e00a      	b.n	800eb98 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800eb82:	69bb      	ldr	r3, [r7, #24]
 800eb84:	1c9a      	adds	r2, r3, #2
 800eb86:	61ba      	str	r2, [r7, #24]
 800eb88:	881b      	ldrh	r3, [r3, #0]
 800eb8a:	461a      	mov	r2, r3
 800eb8c:	697b      	ldr	r3, [r7, #20]
 800eb8e:	4413      	add	r3, r2
 800eb90:	617b      	str	r3, [r7, #20]
    len -= 2;
 800eb92:	683b      	ldr	r3, [r7, #0]
 800eb94:	3b02      	subs	r3, #2
 800eb96:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800eb98:	683b      	ldr	r3, [r7, #0]
 800eb9a:	2b01      	cmp	r3, #1
 800eb9c:	dcf1      	bgt.n	800eb82 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800eb9e:	683b      	ldr	r3, [r7, #0]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	dd04      	ble.n	800ebae <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800eba4:	f107 030e 	add.w	r3, r7, #14
 800eba8:	69ba      	ldr	r2, [r7, #24]
 800ebaa:	7812      	ldrb	r2, [r2, #0]
 800ebac:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800ebae:	89fb      	ldrh	r3, [r7, #14]
 800ebb0:	461a      	mov	r2, r3
 800ebb2:	697b      	ldr	r3, [r7, #20]
 800ebb4:	4413      	add	r3, r2
 800ebb6:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800ebb8:	697b      	ldr	r3, [r7, #20]
 800ebba:	0c1a      	lsrs	r2, r3, #16
 800ebbc:	697b      	ldr	r3, [r7, #20]
 800ebbe:	b29b      	uxth	r3, r3
 800ebc0:	4413      	add	r3, r2
 800ebc2:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800ebc4:	697b      	ldr	r3, [r7, #20]
 800ebc6:	0c1a      	lsrs	r2, r3, #16
 800ebc8:	697b      	ldr	r3, [r7, #20]
 800ebca:	b29b      	uxth	r3, r3
 800ebcc:	4413      	add	r3, r2
 800ebce:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800ebd0:	693b      	ldr	r3, [r7, #16]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d007      	beq.n	800ebe6 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800ebd6:	697b      	ldr	r3, [r7, #20]
 800ebd8:	021b      	lsls	r3, r3, #8
 800ebda:	b29a      	uxth	r2, r3
 800ebdc:	697b      	ldr	r3, [r7, #20]
 800ebde:	0a1b      	lsrs	r3, r3, #8
 800ebe0:	b2db      	uxtb	r3, r3
 800ebe2:	4313      	orrs	r3, r2
 800ebe4:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800ebe6:	697b      	ldr	r3, [r7, #20]
 800ebe8:	b29b      	uxth	r3, r3
}
 800ebea:	4618      	mov	r0, r3
 800ebec:	3724      	adds	r7, #36	; 0x24
 800ebee:	46bd      	mov	sp, r7
 800ebf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf4:	4770      	bx	lr

0800ebf6 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800ebf6:	b580      	push	{r7, lr}
 800ebf8:	b082      	sub	sp, #8
 800ebfa:	af00      	add	r7, sp, #0
 800ebfc:	6078      	str	r0, [r7, #4]
 800ebfe:	460b      	mov	r3, r1
 800ec00:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800ec02:	887b      	ldrh	r3, [r7, #2]
 800ec04:	4619      	mov	r1, r3
 800ec06:	6878      	ldr	r0, [r7, #4]
 800ec08:	f7ff ff98 	bl	800eb3c <lwip_standard_chksum>
 800ec0c:	4603      	mov	r3, r0
 800ec0e:	43db      	mvns	r3, r3
 800ec10:	b29b      	uxth	r3, r3
}
 800ec12:	4618      	mov	r0, r3
 800ec14:	3708      	adds	r7, #8
 800ec16:	46bd      	mov	sp, r7
 800ec18:	bd80      	pop	{r7, pc}

0800ec1a <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800ec1a:	b580      	push	{r7, lr}
 800ec1c:	b086      	sub	sp, #24
 800ec1e:	af00      	add	r7, sp, #0
 800ec20:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800ec22:	2300      	movs	r3, #0
 800ec24:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800ec26:	2300      	movs	r3, #0
 800ec28:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	613b      	str	r3, [r7, #16]
 800ec2e:	e02b      	b.n	800ec88 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800ec30:	693b      	ldr	r3, [r7, #16]
 800ec32:	685a      	ldr	r2, [r3, #4]
 800ec34:	693b      	ldr	r3, [r7, #16]
 800ec36:	895b      	ldrh	r3, [r3, #10]
 800ec38:	4619      	mov	r1, r3
 800ec3a:	4610      	mov	r0, r2
 800ec3c:	f7ff ff7e 	bl	800eb3c <lwip_standard_chksum>
 800ec40:	4603      	mov	r3, r0
 800ec42:	461a      	mov	r2, r3
 800ec44:	697b      	ldr	r3, [r7, #20]
 800ec46:	4413      	add	r3, r2
 800ec48:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800ec4a:	697b      	ldr	r3, [r7, #20]
 800ec4c:	0c1a      	lsrs	r2, r3, #16
 800ec4e:	697b      	ldr	r3, [r7, #20]
 800ec50:	b29b      	uxth	r3, r3
 800ec52:	4413      	add	r3, r2
 800ec54:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800ec56:	693b      	ldr	r3, [r7, #16]
 800ec58:	895b      	ldrh	r3, [r3, #10]
 800ec5a:	f003 0301 	and.w	r3, r3, #1
 800ec5e:	b29b      	uxth	r3, r3
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d00e      	beq.n	800ec82 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	bf0c      	ite	eq
 800ec6a:	2301      	moveq	r3, #1
 800ec6c:	2300      	movne	r3, #0
 800ec6e:	b2db      	uxtb	r3, r3
 800ec70:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800ec72:	697b      	ldr	r3, [r7, #20]
 800ec74:	021b      	lsls	r3, r3, #8
 800ec76:	b29a      	uxth	r2, r3
 800ec78:	697b      	ldr	r3, [r7, #20]
 800ec7a:	0a1b      	lsrs	r3, r3, #8
 800ec7c:	b2db      	uxtb	r3, r3
 800ec7e:	4313      	orrs	r3, r2
 800ec80:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800ec82:	693b      	ldr	r3, [r7, #16]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	613b      	str	r3, [r7, #16]
 800ec88:	693b      	ldr	r3, [r7, #16]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d1d0      	bne.n	800ec30 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d007      	beq.n	800eca4 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800ec94:	697b      	ldr	r3, [r7, #20]
 800ec96:	021b      	lsls	r3, r3, #8
 800ec98:	b29a      	uxth	r2, r3
 800ec9a:	697b      	ldr	r3, [r7, #20]
 800ec9c:	0a1b      	lsrs	r3, r3, #8
 800ec9e:	b2db      	uxtb	r3, r3
 800eca0:	4313      	orrs	r3, r2
 800eca2:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800eca4:	697b      	ldr	r3, [r7, #20]
 800eca6:	b29b      	uxth	r3, r3
 800eca8:	43db      	mvns	r3, r3
 800ecaa:	b29b      	uxth	r3, r3
}
 800ecac:	4618      	mov	r0, r3
 800ecae:	3718      	adds	r7, #24
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	bd80      	pop	{r7, pc}

0800ecb4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800ecb4:	b580      	push	{r7, lr}
 800ecb6:	b082      	sub	sp, #8
 800ecb8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800ecba:	2300      	movs	r3, #0
 800ecbc:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800ecbe:	f000 f8d5 	bl	800ee6c <mem_init>
  memp_init();
 800ecc2:	f000 fbd7 	bl	800f474 <memp_init>
  pbuf_init();
  netif_init();
 800ecc6:	f000 fcd5 	bl	800f674 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800ecca:	f006 fff1 	bl	8015cb0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800ecce:	f001 fd8b 	bl	80107e8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800ecd2:	f006 ffa5 	bl	8015c20 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800ecd6:	bf00      	nop
 800ecd8:	3708      	adds	r7, #8
 800ecda:	46bd      	mov	sp, r7
 800ecdc:	bd80      	pop	{r7, pc}
	...

0800ece0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800ece0:	b480      	push	{r7}
 800ece2:	b083      	sub	sp, #12
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	4603      	mov	r3, r0
 800ece8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800ecea:	4b05      	ldr	r3, [pc, #20]	; (800ed00 <ptr_to_mem+0x20>)
 800ecec:	681a      	ldr	r2, [r3, #0]
 800ecee:	88fb      	ldrh	r3, [r7, #6]
 800ecf0:	4413      	add	r3, r2
}
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	370c      	adds	r7, #12
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfc:	4770      	bx	lr
 800ecfe:	bf00      	nop
 800ed00:	200050f4 	.word	0x200050f4

0800ed04 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800ed04:	b480      	push	{r7}
 800ed06:	b083      	sub	sp, #12
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800ed0c:	4b05      	ldr	r3, [pc, #20]	; (800ed24 <mem_to_ptr+0x20>)
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	687a      	ldr	r2, [r7, #4]
 800ed12:	1ad3      	subs	r3, r2, r3
 800ed14:	b29b      	uxth	r3, r3
}
 800ed16:	4618      	mov	r0, r3
 800ed18:	370c      	adds	r7, #12
 800ed1a:	46bd      	mov	sp, r7
 800ed1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed20:	4770      	bx	lr
 800ed22:	bf00      	nop
 800ed24:	200050f4 	.word	0x200050f4

0800ed28 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800ed28:	b590      	push	{r4, r7, lr}
 800ed2a:	b085      	sub	sp, #20
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800ed30:	4b45      	ldr	r3, [pc, #276]	; (800ee48 <plug_holes+0x120>)
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	687a      	ldr	r2, [r7, #4]
 800ed36:	429a      	cmp	r2, r3
 800ed38:	d206      	bcs.n	800ed48 <plug_holes+0x20>
 800ed3a:	4b44      	ldr	r3, [pc, #272]	; (800ee4c <plug_holes+0x124>)
 800ed3c:	f240 12df 	movw	r2, #479	; 0x1df
 800ed40:	4943      	ldr	r1, [pc, #268]	; (800ee50 <plug_holes+0x128>)
 800ed42:	4844      	ldr	r0, [pc, #272]	; (800ee54 <plug_holes+0x12c>)
 800ed44:	f00a f982 	bl	801904c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800ed48:	4b43      	ldr	r3, [pc, #268]	; (800ee58 <plug_holes+0x130>)
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	687a      	ldr	r2, [r7, #4]
 800ed4e:	429a      	cmp	r2, r3
 800ed50:	d306      	bcc.n	800ed60 <plug_holes+0x38>
 800ed52:	4b3e      	ldr	r3, [pc, #248]	; (800ee4c <plug_holes+0x124>)
 800ed54:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800ed58:	4940      	ldr	r1, [pc, #256]	; (800ee5c <plug_holes+0x134>)
 800ed5a:	483e      	ldr	r0, [pc, #248]	; (800ee54 <plug_holes+0x12c>)
 800ed5c:	f00a f976 	bl	801904c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	791b      	ldrb	r3, [r3, #4]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d006      	beq.n	800ed76 <plug_holes+0x4e>
 800ed68:	4b38      	ldr	r3, [pc, #224]	; (800ee4c <plug_holes+0x124>)
 800ed6a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800ed6e:	493c      	ldr	r1, [pc, #240]	; (800ee60 <plug_holes+0x138>)
 800ed70:	4838      	ldr	r0, [pc, #224]	; (800ee54 <plug_holes+0x12c>)
 800ed72:	f00a f96b 	bl	801904c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	881b      	ldrh	r3, [r3, #0]
 800ed7a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ed7e:	d906      	bls.n	800ed8e <plug_holes+0x66>
 800ed80:	4b32      	ldr	r3, [pc, #200]	; (800ee4c <plug_holes+0x124>)
 800ed82:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800ed86:	4937      	ldr	r1, [pc, #220]	; (800ee64 <plug_holes+0x13c>)
 800ed88:	4832      	ldr	r0, [pc, #200]	; (800ee54 <plug_holes+0x12c>)
 800ed8a:	f00a f95f 	bl	801904c <iprintf>

  nmem = ptr_to_mem(mem->next);
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	881b      	ldrh	r3, [r3, #0]
 800ed92:	4618      	mov	r0, r3
 800ed94:	f7ff ffa4 	bl	800ece0 <ptr_to_mem>
 800ed98:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800ed9a:	687a      	ldr	r2, [r7, #4]
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	429a      	cmp	r2, r3
 800eda0:	d024      	beq.n	800edec <plug_holes+0xc4>
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	791b      	ldrb	r3, [r3, #4]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d120      	bne.n	800edec <plug_holes+0xc4>
 800edaa:	4b2b      	ldr	r3, [pc, #172]	; (800ee58 <plug_holes+0x130>)
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	68fa      	ldr	r2, [r7, #12]
 800edb0:	429a      	cmp	r2, r3
 800edb2:	d01b      	beq.n	800edec <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800edb4:	4b2c      	ldr	r3, [pc, #176]	; (800ee68 <plug_holes+0x140>)
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	68fa      	ldr	r2, [r7, #12]
 800edba:	429a      	cmp	r2, r3
 800edbc:	d102      	bne.n	800edc4 <plug_holes+0x9c>
      lfree = mem;
 800edbe:	4a2a      	ldr	r2, [pc, #168]	; (800ee68 <plug_holes+0x140>)
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	881a      	ldrh	r2, [r3, #0]
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	881b      	ldrh	r3, [r3, #0]
 800edd0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800edd4:	d00a      	beq.n	800edec <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	881b      	ldrh	r3, [r3, #0]
 800edda:	4618      	mov	r0, r3
 800eddc:	f7ff ff80 	bl	800ece0 <ptr_to_mem>
 800ede0:	4604      	mov	r4, r0
 800ede2:	6878      	ldr	r0, [r7, #4]
 800ede4:	f7ff ff8e 	bl	800ed04 <mem_to_ptr>
 800ede8:	4603      	mov	r3, r0
 800edea:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	885b      	ldrh	r3, [r3, #2]
 800edf0:	4618      	mov	r0, r3
 800edf2:	f7ff ff75 	bl	800ece0 <ptr_to_mem>
 800edf6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800edf8:	68ba      	ldr	r2, [r7, #8]
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	429a      	cmp	r2, r3
 800edfe:	d01f      	beq.n	800ee40 <plug_holes+0x118>
 800ee00:	68bb      	ldr	r3, [r7, #8]
 800ee02:	791b      	ldrb	r3, [r3, #4]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d11b      	bne.n	800ee40 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800ee08:	4b17      	ldr	r3, [pc, #92]	; (800ee68 <plug_holes+0x140>)
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	687a      	ldr	r2, [r7, #4]
 800ee0e:	429a      	cmp	r2, r3
 800ee10:	d102      	bne.n	800ee18 <plug_holes+0xf0>
      lfree = pmem;
 800ee12:	4a15      	ldr	r2, [pc, #84]	; (800ee68 <plug_holes+0x140>)
 800ee14:	68bb      	ldr	r3, [r7, #8]
 800ee16:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	881a      	ldrh	r2, [r3, #0]
 800ee1c:	68bb      	ldr	r3, [r7, #8]
 800ee1e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	881b      	ldrh	r3, [r3, #0]
 800ee24:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ee28:	d00a      	beq.n	800ee40 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	881b      	ldrh	r3, [r3, #0]
 800ee2e:	4618      	mov	r0, r3
 800ee30:	f7ff ff56 	bl	800ece0 <ptr_to_mem>
 800ee34:	4604      	mov	r4, r0
 800ee36:	68b8      	ldr	r0, [r7, #8]
 800ee38:	f7ff ff64 	bl	800ed04 <mem_to_ptr>
 800ee3c:	4603      	mov	r3, r0
 800ee3e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800ee40:	bf00      	nop
 800ee42:	3714      	adds	r7, #20
 800ee44:	46bd      	mov	sp, r7
 800ee46:	bd90      	pop	{r4, r7, pc}
 800ee48:	200050f4 	.word	0x200050f4
 800ee4c:	0801b710 	.word	0x0801b710
 800ee50:	0801b740 	.word	0x0801b740
 800ee54:	0801b758 	.word	0x0801b758
 800ee58:	200050f8 	.word	0x200050f8
 800ee5c:	0801b780 	.word	0x0801b780
 800ee60:	0801b79c 	.word	0x0801b79c
 800ee64:	0801b7b8 	.word	0x0801b7b8
 800ee68:	200050fc 	.word	0x200050fc

0800ee6c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800ee6c:	b580      	push	{r7, lr}
 800ee6e:	b082      	sub	sp, #8
 800ee70:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800ee72:	4b16      	ldr	r3, [pc, #88]	; (800eecc <mem_init+0x60>)
 800ee74:	4a16      	ldr	r2, [pc, #88]	; (800eed0 <mem_init+0x64>)
 800ee76:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800ee78:	4b14      	ldr	r3, [pc, #80]	; (800eecc <mem_init+0x60>)
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ee84:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	2200      	movs	r2, #0
 800ee8a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	2200      	movs	r2, #0
 800ee90:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800ee92:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800ee96:	f7ff ff23 	bl	800ece0 <ptr_to_mem>
 800ee9a:	4603      	mov	r3, r0
 800ee9c:	4a0d      	ldr	r2, [pc, #52]	; (800eed4 <mem_init+0x68>)
 800ee9e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800eea0:	4b0c      	ldr	r3, [pc, #48]	; (800eed4 <mem_init+0x68>)
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	2201      	movs	r2, #1
 800eea6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800eea8:	4b0a      	ldr	r3, [pc, #40]	; (800eed4 <mem_init+0x68>)
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800eeb0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800eeb2:	4b08      	ldr	r3, [pc, #32]	; (800eed4 <mem_init+0x68>)
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800eeba:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800eebc:	4b03      	ldr	r3, [pc, #12]	; (800eecc <mem_init+0x60>)
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	4a05      	ldr	r2, [pc, #20]	; (800eed8 <mem_init+0x6c>)
 800eec2:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800eec4:	bf00      	nop
 800eec6:	3708      	adds	r7, #8
 800eec8:	46bd      	mov	sp, r7
 800eeca:	bd80      	pop	{r7, pc}
 800eecc:	200050f4 	.word	0x200050f4
 800eed0:	30044000 	.word	0x30044000
 800eed4:	200050f8 	.word	0x200050f8
 800eed8:	200050fc 	.word	0x200050fc

0800eedc <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800eedc:	b580      	push	{r7, lr}
 800eede:	b086      	sub	sp, #24
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800eee4:	6878      	ldr	r0, [r7, #4]
 800eee6:	f7ff ff0d 	bl	800ed04 <mem_to_ptr>
 800eeea:	4603      	mov	r3, r0
 800eeec:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	881b      	ldrh	r3, [r3, #0]
 800eef2:	4618      	mov	r0, r3
 800eef4:	f7ff fef4 	bl	800ece0 <ptr_to_mem>
 800eef8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	885b      	ldrh	r3, [r3, #2]
 800eefe:	4618      	mov	r0, r3
 800ef00:	f7ff feee 	bl	800ece0 <ptr_to_mem>
 800ef04:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	881b      	ldrh	r3, [r3, #0]
 800ef0a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ef0e:	d818      	bhi.n	800ef42 <mem_link_valid+0x66>
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	885b      	ldrh	r3, [r3, #2]
 800ef14:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ef18:	d813      	bhi.n	800ef42 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ef1e:	8afa      	ldrh	r2, [r7, #22]
 800ef20:	429a      	cmp	r2, r3
 800ef22:	d004      	beq.n	800ef2e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	881b      	ldrh	r3, [r3, #0]
 800ef28:	8afa      	ldrh	r2, [r7, #22]
 800ef2a:	429a      	cmp	r2, r3
 800ef2c:	d109      	bne.n	800ef42 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ef2e:	4b08      	ldr	r3, [pc, #32]	; (800ef50 <mem_link_valid+0x74>)
 800ef30:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ef32:	693a      	ldr	r2, [r7, #16]
 800ef34:	429a      	cmp	r2, r3
 800ef36:	d006      	beq.n	800ef46 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ef38:	693b      	ldr	r3, [r7, #16]
 800ef3a:	885b      	ldrh	r3, [r3, #2]
 800ef3c:	8afa      	ldrh	r2, [r7, #22]
 800ef3e:	429a      	cmp	r2, r3
 800ef40:	d001      	beq.n	800ef46 <mem_link_valid+0x6a>
    return 0;
 800ef42:	2300      	movs	r3, #0
 800ef44:	e000      	b.n	800ef48 <mem_link_valid+0x6c>
  }
  return 1;
 800ef46:	2301      	movs	r3, #1
}
 800ef48:	4618      	mov	r0, r3
 800ef4a:	3718      	adds	r7, #24
 800ef4c:	46bd      	mov	sp, r7
 800ef4e:	bd80      	pop	{r7, pc}
 800ef50:	200050f8 	.word	0x200050f8

0800ef54 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800ef54:	b580      	push	{r7, lr}
 800ef56:	b084      	sub	sp, #16
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d04c      	beq.n	800effc <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	f003 0303 	and.w	r3, r3, #3
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d007      	beq.n	800ef7c <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800ef6c:	4b25      	ldr	r3, [pc, #148]	; (800f004 <mem_free+0xb0>)
 800ef6e:	f240 2273 	movw	r2, #627	; 0x273
 800ef72:	4925      	ldr	r1, [pc, #148]	; (800f008 <mem_free+0xb4>)
 800ef74:	4825      	ldr	r0, [pc, #148]	; (800f00c <mem_free+0xb8>)
 800ef76:	f00a f869 	bl	801904c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800ef7a:	e040      	b.n	800effe <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	3b08      	subs	r3, #8
 800ef80:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800ef82:	4b23      	ldr	r3, [pc, #140]	; (800f010 <mem_free+0xbc>)
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	68fa      	ldr	r2, [r7, #12]
 800ef88:	429a      	cmp	r2, r3
 800ef8a:	d306      	bcc.n	800ef9a <mem_free+0x46>
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	f103 020c 	add.w	r2, r3, #12
 800ef92:	4b20      	ldr	r3, [pc, #128]	; (800f014 <mem_free+0xc0>)
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	429a      	cmp	r2, r3
 800ef98:	d907      	bls.n	800efaa <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800ef9a:	4b1a      	ldr	r3, [pc, #104]	; (800f004 <mem_free+0xb0>)
 800ef9c:	f240 227f 	movw	r2, #639	; 0x27f
 800efa0:	491d      	ldr	r1, [pc, #116]	; (800f018 <mem_free+0xc4>)
 800efa2:	481a      	ldr	r0, [pc, #104]	; (800f00c <mem_free+0xb8>)
 800efa4:	f00a f852 	bl	801904c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800efa8:	e029      	b.n	800effe <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	791b      	ldrb	r3, [r3, #4]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d107      	bne.n	800efc2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800efb2:	4b14      	ldr	r3, [pc, #80]	; (800f004 <mem_free+0xb0>)
 800efb4:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800efb8:	4918      	ldr	r1, [pc, #96]	; (800f01c <mem_free+0xc8>)
 800efba:	4814      	ldr	r0, [pc, #80]	; (800f00c <mem_free+0xb8>)
 800efbc:	f00a f846 	bl	801904c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800efc0:	e01d      	b.n	800effe <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800efc2:	68f8      	ldr	r0, [r7, #12]
 800efc4:	f7ff ff8a 	bl	800eedc <mem_link_valid>
 800efc8:	4603      	mov	r3, r0
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d107      	bne.n	800efde <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800efce:	4b0d      	ldr	r3, [pc, #52]	; (800f004 <mem_free+0xb0>)
 800efd0:	f240 2295 	movw	r2, #661	; 0x295
 800efd4:	4912      	ldr	r1, [pc, #72]	; (800f020 <mem_free+0xcc>)
 800efd6:	480d      	ldr	r0, [pc, #52]	; (800f00c <mem_free+0xb8>)
 800efd8:	f00a f838 	bl	801904c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800efdc:	e00f      	b.n	800effe <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	2200      	movs	r2, #0
 800efe2:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800efe4:	4b0f      	ldr	r3, [pc, #60]	; (800f024 <mem_free+0xd0>)
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	68fa      	ldr	r2, [r7, #12]
 800efea:	429a      	cmp	r2, r3
 800efec:	d202      	bcs.n	800eff4 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800efee:	4a0d      	ldr	r2, [pc, #52]	; (800f024 <mem_free+0xd0>)
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800eff4:	68f8      	ldr	r0, [r7, #12]
 800eff6:	f7ff fe97 	bl	800ed28 <plug_holes>
 800effa:	e000      	b.n	800effe <mem_free+0xaa>
    return;
 800effc:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800effe:	3710      	adds	r7, #16
 800f000:	46bd      	mov	sp, r7
 800f002:	bd80      	pop	{r7, pc}
 800f004:	0801b710 	.word	0x0801b710
 800f008:	0801b7e4 	.word	0x0801b7e4
 800f00c:	0801b758 	.word	0x0801b758
 800f010:	200050f4 	.word	0x200050f4
 800f014:	200050f8 	.word	0x200050f8
 800f018:	0801b808 	.word	0x0801b808
 800f01c:	0801b824 	.word	0x0801b824
 800f020:	0801b84c 	.word	0x0801b84c
 800f024:	200050fc 	.word	0x200050fc

0800f028 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800f028:	b580      	push	{r7, lr}
 800f02a:	b088      	sub	sp, #32
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	6078      	str	r0, [r7, #4]
 800f030:	460b      	mov	r3, r1
 800f032:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800f034:	887b      	ldrh	r3, [r7, #2]
 800f036:	3303      	adds	r3, #3
 800f038:	b29b      	uxth	r3, r3
 800f03a:	f023 0303 	bic.w	r3, r3, #3
 800f03e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800f040:	8bfb      	ldrh	r3, [r7, #30]
 800f042:	2b0b      	cmp	r3, #11
 800f044:	d801      	bhi.n	800f04a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800f046:	230c      	movs	r3, #12
 800f048:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800f04a:	8bfb      	ldrh	r3, [r7, #30]
 800f04c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f050:	d803      	bhi.n	800f05a <mem_trim+0x32>
 800f052:	8bfa      	ldrh	r2, [r7, #30]
 800f054:	887b      	ldrh	r3, [r7, #2]
 800f056:	429a      	cmp	r2, r3
 800f058:	d201      	bcs.n	800f05e <mem_trim+0x36>
    return NULL;
 800f05a:	2300      	movs	r3, #0
 800f05c:	e0cc      	b.n	800f1f8 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800f05e:	4b68      	ldr	r3, [pc, #416]	; (800f200 <mem_trim+0x1d8>)
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	687a      	ldr	r2, [r7, #4]
 800f064:	429a      	cmp	r2, r3
 800f066:	d304      	bcc.n	800f072 <mem_trim+0x4a>
 800f068:	4b66      	ldr	r3, [pc, #408]	; (800f204 <mem_trim+0x1dc>)
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	687a      	ldr	r2, [r7, #4]
 800f06e:	429a      	cmp	r2, r3
 800f070:	d306      	bcc.n	800f080 <mem_trim+0x58>
 800f072:	4b65      	ldr	r3, [pc, #404]	; (800f208 <mem_trim+0x1e0>)
 800f074:	f240 22d1 	movw	r2, #721	; 0x2d1
 800f078:	4964      	ldr	r1, [pc, #400]	; (800f20c <mem_trim+0x1e4>)
 800f07a:	4865      	ldr	r0, [pc, #404]	; (800f210 <mem_trim+0x1e8>)
 800f07c:	f009 ffe6 	bl	801904c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800f080:	4b5f      	ldr	r3, [pc, #380]	; (800f200 <mem_trim+0x1d8>)
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	687a      	ldr	r2, [r7, #4]
 800f086:	429a      	cmp	r2, r3
 800f088:	d304      	bcc.n	800f094 <mem_trim+0x6c>
 800f08a:	4b5e      	ldr	r3, [pc, #376]	; (800f204 <mem_trim+0x1dc>)
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	687a      	ldr	r2, [r7, #4]
 800f090:	429a      	cmp	r2, r3
 800f092:	d301      	bcc.n	800f098 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	e0af      	b.n	800f1f8 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	3b08      	subs	r3, #8
 800f09c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800f09e:	69b8      	ldr	r0, [r7, #24]
 800f0a0:	f7ff fe30 	bl	800ed04 <mem_to_ptr>
 800f0a4:	4603      	mov	r3, r0
 800f0a6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800f0a8:	69bb      	ldr	r3, [r7, #24]
 800f0aa:	881a      	ldrh	r2, [r3, #0]
 800f0ac:	8afb      	ldrh	r3, [r7, #22]
 800f0ae:	1ad3      	subs	r3, r2, r3
 800f0b0:	b29b      	uxth	r3, r3
 800f0b2:	3b08      	subs	r3, #8
 800f0b4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800f0b6:	8bfa      	ldrh	r2, [r7, #30]
 800f0b8:	8abb      	ldrh	r3, [r7, #20]
 800f0ba:	429a      	cmp	r2, r3
 800f0bc:	d906      	bls.n	800f0cc <mem_trim+0xa4>
 800f0be:	4b52      	ldr	r3, [pc, #328]	; (800f208 <mem_trim+0x1e0>)
 800f0c0:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800f0c4:	4953      	ldr	r1, [pc, #332]	; (800f214 <mem_trim+0x1ec>)
 800f0c6:	4852      	ldr	r0, [pc, #328]	; (800f210 <mem_trim+0x1e8>)
 800f0c8:	f009 ffc0 	bl	801904c <iprintf>
  if (newsize > size) {
 800f0cc:	8bfa      	ldrh	r2, [r7, #30]
 800f0ce:	8abb      	ldrh	r3, [r7, #20]
 800f0d0:	429a      	cmp	r2, r3
 800f0d2:	d901      	bls.n	800f0d8 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800f0d4:	2300      	movs	r3, #0
 800f0d6:	e08f      	b.n	800f1f8 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800f0d8:	8bfa      	ldrh	r2, [r7, #30]
 800f0da:	8abb      	ldrh	r3, [r7, #20]
 800f0dc:	429a      	cmp	r2, r3
 800f0de:	d101      	bne.n	800f0e4 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	e089      	b.n	800f1f8 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800f0e4:	69bb      	ldr	r3, [r7, #24]
 800f0e6:	881b      	ldrh	r3, [r3, #0]
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	f7ff fdf9 	bl	800ece0 <ptr_to_mem>
 800f0ee:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800f0f0:	693b      	ldr	r3, [r7, #16]
 800f0f2:	791b      	ldrb	r3, [r3, #4]
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d13f      	bne.n	800f178 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800f0f8:	69bb      	ldr	r3, [r7, #24]
 800f0fa:	881b      	ldrh	r3, [r3, #0]
 800f0fc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f100:	d106      	bne.n	800f110 <mem_trim+0xe8>
 800f102:	4b41      	ldr	r3, [pc, #260]	; (800f208 <mem_trim+0x1e0>)
 800f104:	f240 22f5 	movw	r2, #757	; 0x2f5
 800f108:	4943      	ldr	r1, [pc, #268]	; (800f218 <mem_trim+0x1f0>)
 800f10a:	4841      	ldr	r0, [pc, #260]	; (800f210 <mem_trim+0x1e8>)
 800f10c:	f009 ff9e 	bl	801904c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800f110:	693b      	ldr	r3, [r7, #16]
 800f112:	881b      	ldrh	r3, [r3, #0]
 800f114:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800f116:	8afa      	ldrh	r2, [r7, #22]
 800f118:	8bfb      	ldrh	r3, [r7, #30]
 800f11a:	4413      	add	r3, r2
 800f11c:	b29b      	uxth	r3, r3
 800f11e:	3308      	adds	r3, #8
 800f120:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800f122:	4b3e      	ldr	r3, [pc, #248]	; (800f21c <mem_trim+0x1f4>)
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	693a      	ldr	r2, [r7, #16]
 800f128:	429a      	cmp	r2, r3
 800f12a:	d106      	bne.n	800f13a <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800f12c:	89fb      	ldrh	r3, [r7, #14]
 800f12e:	4618      	mov	r0, r3
 800f130:	f7ff fdd6 	bl	800ece0 <ptr_to_mem>
 800f134:	4603      	mov	r3, r0
 800f136:	4a39      	ldr	r2, [pc, #228]	; (800f21c <mem_trim+0x1f4>)
 800f138:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800f13a:	89fb      	ldrh	r3, [r7, #14]
 800f13c:	4618      	mov	r0, r3
 800f13e:	f7ff fdcf 	bl	800ece0 <ptr_to_mem>
 800f142:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800f144:	693b      	ldr	r3, [r7, #16]
 800f146:	2200      	movs	r2, #0
 800f148:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800f14a:	693b      	ldr	r3, [r7, #16]
 800f14c:	89ba      	ldrh	r2, [r7, #12]
 800f14e:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800f150:	693b      	ldr	r3, [r7, #16]
 800f152:	8afa      	ldrh	r2, [r7, #22]
 800f154:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800f156:	69bb      	ldr	r3, [r7, #24]
 800f158:	89fa      	ldrh	r2, [r7, #14]
 800f15a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f15c:	693b      	ldr	r3, [r7, #16]
 800f15e:	881b      	ldrh	r3, [r3, #0]
 800f160:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f164:	d047      	beq.n	800f1f6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800f166:	693b      	ldr	r3, [r7, #16]
 800f168:	881b      	ldrh	r3, [r3, #0]
 800f16a:	4618      	mov	r0, r3
 800f16c:	f7ff fdb8 	bl	800ece0 <ptr_to_mem>
 800f170:	4602      	mov	r2, r0
 800f172:	89fb      	ldrh	r3, [r7, #14]
 800f174:	8053      	strh	r3, [r2, #2]
 800f176:	e03e      	b.n	800f1f6 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800f178:	8bfb      	ldrh	r3, [r7, #30]
 800f17a:	f103 0214 	add.w	r2, r3, #20
 800f17e:	8abb      	ldrh	r3, [r7, #20]
 800f180:	429a      	cmp	r2, r3
 800f182:	d838      	bhi.n	800f1f6 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800f184:	8afa      	ldrh	r2, [r7, #22]
 800f186:	8bfb      	ldrh	r3, [r7, #30]
 800f188:	4413      	add	r3, r2
 800f18a:	b29b      	uxth	r3, r3
 800f18c:	3308      	adds	r3, #8
 800f18e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800f190:	69bb      	ldr	r3, [r7, #24]
 800f192:	881b      	ldrh	r3, [r3, #0]
 800f194:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f198:	d106      	bne.n	800f1a8 <mem_trim+0x180>
 800f19a:	4b1b      	ldr	r3, [pc, #108]	; (800f208 <mem_trim+0x1e0>)
 800f19c:	f240 3216 	movw	r2, #790	; 0x316
 800f1a0:	491d      	ldr	r1, [pc, #116]	; (800f218 <mem_trim+0x1f0>)
 800f1a2:	481b      	ldr	r0, [pc, #108]	; (800f210 <mem_trim+0x1e8>)
 800f1a4:	f009 ff52 	bl	801904c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800f1a8:	89fb      	ldrh	r3, [r7, #14]
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	f7ff fd98 	bl	800ece0 <ptr_to_mem>
 800f1b0:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800f1b2:	4b1a      	ldr	r3, [pc, #104]	; (800f21c <mem_trim+0x1f4>)
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	693a      	ldr	r2, [r7, #16]
 800f1b8:	429a      	cmp	r2, r3
 800f1ba:	d202      	bcs.n	800f1c2 <mem_trim+0x19a>
      lfree = mem2;
 800f1bc:	4a17      	ldr	r2, [pc, #92]	; (800f21c <mem_trim+0x1f4>)
 800f1be:	693b      	ldr	r3, [r7, #16]
 800f1c0:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800f1c2:	693b      	ldr	r3, [r7, #16]
 800f1c4:	2200      	movs	r2, #0
 800f1c6:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800f1c8:	69bb      	ldr	r3, [r7, #24]
 800f1ca:	881a      	ldrh	r2, [r3, #0]
 800f1cc:	693b      	ldr	r3, [r7, #16]
 800f1ce:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800f1d0:	693b      	ldr	r3, [r7, #16]
 800f1d2:	8afa      	ldrh	r2, [r7, #22]
 800f1d4:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800f1d6:	69bb      	ldr	r3, [r7, #24]
 800f1d8:	89fa      	ldrh	r2, [r7, #14]
 800f1da:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f1dc:	693b      	ldr	r3, [r7, #16]
 800f1de:	881b      	ldrh	r3, [r3, #0]
 800f1e0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f1e4:	d007      	beq.n	800f1f6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800f1e6:	693b      	ldr	r3, [r7, #16]
 800f1e8:	881b      	ldrh	r3, [r3, #0]
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	f7ff fd78 	bl	800ece0 <ptr_to_mem>
 800f1f0:	4602      	mov	r2, r0
 800f1f2:	89fb      	ldrh	r3, [r7, #14]
 800f1f4:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800f1f6:	687b      	ldr	r3, [r7, #4]
}
 800f1f8:	4618      	mov	r0, r3
 800f1fa:	3720      	adds	r7, #32
 800f1fc:	46bd      	mov	sp, r7
 800f1fe:	bd80      	pop	{r7, pc}
 800f200:	200050f4 	.word	0x200050f4
 800f204:	200050f8 	.word	0x200050f8
 800f208:	0801b710 	.word	0x0801b710
 800f20c:	0801b880 	.word	0x0801b880
 800f210:	0801b758 	.word	0x0801b758
 800f214:	0801b898 	.word	0x0801b898
 800f218:	0801b8b8 	.word	0x0801b8b8
 800f21c:	200050fc 	.word	0x200050fc

0800f220 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800f220:	b580      	push	{r7, lr}
 800f222:	b088      	sub	sp, #32
 800f224:	af00      	add	r7, sp, #0
 800f226:	4603      	mov	r3, r0
 800f228:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800f22a:	88fb      	ldrh	r3, [r7, #6]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d101      	bne.n	800f234 <mem_malloc+0x14>
    return NULL;
 800f230:	2300      	movs	r3, #0
 800f232:	e0d9      	b.n	800f3e8 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800f234:	88fb      	ldrh	r3, [r7, #6]
 800f236:	3303      	adds	r3, #3
 800f238:	b29b      	uxth	r3, r3
 800f23a:	f023 0303 	bic.w	r3, r3, #3
 800f23e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800f240:	8bbb      	ldrh	r3, [r7, #28]
 800f242:	2b0b      	cmp	r3, #11
 800f244:	d801      	bhi.n	800f24a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800f246:	230c      	movs	r3, #12
 800f248:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800f24a:	8bbb      	ldrh	r3, [r7, #28]
 800f24c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f250:	d803      	bhi.n	800f25a <mem_malloc+0x3a>
 800f252:	8bba      	ldrh	r2, [r7, #28]
 800f254:	88fb      	ldrh	r3, [r7, #6]
 800f256:	429a      	cmp	r2, r3
 800f258:	d201      	bcs.n	800f25e <mem_malloc+0x3e>
    return NULL;
 800f25a:	2300      	movs	r3, #0
 800f25c:	e0c4      	b.n	800f3e8 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800f25e:	4b64      	ldr	r3, [pc, #400]	; (800f3f0 <mem_malloc+0x1d0>)
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	4618      	mov	r0, r3
 800f264:	f7ff fd4e 	bl	800ed04 <mem_to_ptr>
 800f268:	4603      	mov	r3, r0
 800f26a:	83fb      	strh	r3, [r7, #30]
 800f26c:	e0b4      	b.n	800f3d8 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800f26e:	8bfb      	ldrh	r3, [r7, #30]
 800f270:	4618      	mov	r0, r3
 800f272:	f7ff fd35 	bl	800ece0 <ptr_to_mem>
 800f276:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800f278:	697b      	ldr	r3, [r7, #20]
 800f27a:	791b      	ldrb	r3, [r3, #4]
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	f040 80a4 	bne.w	800f3ca <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800f282:	697b      	ldr	r3, [r7, #20]
 800f284:	881b      	ldrh	r3, [r3, #0]
 800f286:	461a      	mov	r2, r3
 800f288:	8bfb      	ldrh	r3, [r7, #30]
 800f28a:	1ad3      	subs	r3, r2, r3
 800f28c:	f1a3 0208 	sub.w	r2, r3, #8
 800f290:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800f292:	429a      	cmp	r2, r3
 800f294:	f0c0 8099 	bcc.w	800f3ca <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800f298:	697b      	ldr	r3, [r7, #20]
 800f29a:	881b      	ldrh	r3, [r3, #0]
 800f29c:	461a      	mov	r2, r3
 800f29e:	8bfb      	ldrh	r3, [r7, #30]
 800f2a0:	1ad3      	subs	r3, r2, r3
 800f2a2:	f1a3 0208 	sub.w	r2, r3, #8
 800f2a6:	8bbb      	ldrh	r3, [r7, #28]
 800f2a8:	3314      	adds	r3, #20
 800f2aa:	429a      	cmp	r2, r3
 800f2ac:	d333      	bcc.n	800f316 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800f2ae:	8bfa      	ldrh	r2, [r7, #30]
 800f2b0:	8bbb      	ldrh	r3, [r7, #28]
 800f2b2:	4413      	add	r3, r2
 800f2b4:	b29b      	uxth	r3, r3
 800f2b6:	3308      	adds	r3, #8
 800f2b8:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800f2ba:	8a7b      	ldrh	r3, [r7, #18]
 800f2bc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f2c0:	d106      	bne.n	800f2d0 <mem_malloc+0xb0>
 800f2c2:	4b4c      	ldr	r3, [pc, #304]	; (800f3f4 <mem_malloc+0x1d4>)
 800f2c4:	f240 3287 	movw	r2, #903	; 0x387
 800f2c8:	494b      	ldr	r1, [pc, #300]	; (800f3f8 <mem_malloc+0x1d8>)
 800f2ca:	484c      	ldr	r0, [pc, #304]	; (800f3fc <mem_malloc+0x1dc>)
 800f2cc:	f009 febe 	bl	801904c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800f2d0:	8a7b      	ldrh	r3, [r7, #18]
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	f7ff fd04 	bl	800ece0 <ptr_to_mem>
 800f2d8:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	2200      	movs	r2, #0
 800f2de:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800f2e0:	697b      	ldr	r3, [r7, #20]
 800f2e2:	881a      	ldrh	r2, [r3, #0]
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	8bfa      	ldrh	r2, [r7, #30]
 800f2ec:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800f2ee:	697b      	ldr	r3, [r7, #20]
 800f2f0:	8a7a      	ldrh	r2, [r7, #18]
 800f2f2:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800f2f4:	697b      	ldr	r3, [r7, #20]
 800f2f6:	2201      	movs	r2, #1
 800f2f8:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	881b      	ldrh	r3, [r3, #0]
 800f2fe:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f302:	d00b      	beq.n	800f31c <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	881b      	ldrh	r3, [r3, #0]
 800f308:	4618      	mov	r0, r3
 800f30a:	f7ff fce9 	bl	800ece0 <ptr_to_mem>
 800f30e:	4602      	mov	r2, r0
 800f310:	8a7b      	ldrh	r3, [r7, #18]
 800f312:	8053      	strh	r3, [r2, #2]
 800f314:	e002      	b.n	800f31c <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800f316:	697b      	ldr	r3, [r7, #20]
 800f318:	2201      	movs	r2, #1
 800f31a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800f31c:	4b34      	ldr	r3, [pc, #208]	; (800f3f0 <mem_malloc+0x1d0>)
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	697a      	ldr	r2, [r7, #20]
 800f322:	429a      	cmp	r2, r3
 800f324:	d127      	bne.n	800f376 <mem_malloc+0x156>
          struct mem *cur = lfree;
 800f326:	4b32      	ldr	r3, [pc, #200]	; (800f3f0 <mem_malloc+0x1d0>)
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800f32c:	e005      	b.n	800f33a <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800f32e:	69bb      	ldr	r3, [r7, #24]
 800f330:	881b      	ldrh	r3, [r3, #0]
 800f332:	4618      	mov	r0, r3
 800f334:	f7ff fcd4 	bl	800ece0 <ptr_to_mem>
 800f338:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800f33a:	69bb      	ldr	r3, [r7, #24]
 800f33c:	791b      	ldrb	r3, [r3, #4]
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d004      	beq.n	800f34c <mem_malloc+0x12c>
 800f342:	4b2f      	ldr	r3, [pc, #188]	; (800f400 <mem_malloc+0x1e0>)
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	69ba      	ldr	r2, [r7, #24]
 800f348:	429a      	cmp	r2, r3
 800f34a:	d1f0      	bne.n	800f32e <mem_malloc+0x10e>
          }
          lfree = cur;
 800f34c:	4a28      	ldr	r2, [pc, #160]	; (800f3f0 <mem_malloc+0x1d0>)
 800f34e:	69bb      	ldr	r3, [r7, #24]
 800f350:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800f352:	4b27      	ldr	r3, [pc, #156]	; (800f3f0 <mem_malloc+0x1d0>)
 800f354:	681a      	ldr	r2, [r3, #0]
 800f356:	4b2a      	ldr	r3, [pc, #168]	; (800f400 <mem_malloc+0x1e0>)
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	429a      	cmp	r2, r3
 800f35c:	d00b      	beq.n	800f376 <mem_malloc+0x156>
 800f35e:	4b24      	ldr	r3, [pc, #144]	; (800f3f0 <mem_malloc+0x1d0>)
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	791b      	ldrb	r3, [r3, #4]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d006      	beq.n	800f376 <mem_malloc+0x156>
 800f368:	4b22      	ldr	r3, [pc, #136]	; (800f3f4 <mem_malloc+0x1d4>)
 800f36a:	f240 32b5 	movw	r2, #949	; 0x3b5
 800f36e:	4925      	ldr	r1, [pc, #148]	; (800f404 <mem_malloc+0x1e4>)
 800f370:	4822      	ldr	r0, [pc, #136]	; (800f3fc <mem_malloc+0x1dc>)
 800f372:	f009 fe6b 	bl	801904c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800f376:	8bba      	ldrh	r2, [r7, #28]
 800f378:	697b      	ldr	r3, [r7, #20]
 800f37a:	4413      	add	r3, r2
 800f37c:	3308      	adds	r3, #8
 800f37e:	4a20      	ldr	r2, [pc, #128]	; (800f400 <mem_malloc+0x1e0>)
 800f380:	6812      	ldr	r2, [r2, #0]
 800f382:	4293      	cmp	r3, r2
 800f384:	d906      	bls.n	800f394 <mem_malloc+0x174>
 800f386:	4b1b      	ldr	r3, [pc, #108]	; (800f3f4 <mem_malloc+0x1d4>)
 800f388:	f240 32b9 	movw	r2, #953	; 0x3b9
 800f38c:	491e      	ldr	r1, [pc, #120]	; (800f408 <mem_malloc+0x1e8>)
 800f38e:	481b      	ldr	r0, [pc, #108]	; (800f3fc <mem_malloc+0x1dc>)
 800f390:	f009 fe5c 	bl	801904c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800f394:	697b      	ldr	r3, [r7, #20]
 800f396:	f003 0303 	and.w	r3, r3, #3
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d006      	beq.n	800f3ac <mem_malloc+0x18c>
 800f39e:	4b15      	ldr	r3, [pc, #84]	; (800f3f4 <mem_malloc+0x1d4>)
 800f3a0:	f240 32bb 	movw	r2, #955	; 0x3bb
 800f3a4:	4919      	ldr	r1, [pc, #100]	; (800f40c <mem_malloc+0x1ec>)
 800f3a6:	4815      	ldr	r0, [pc, #84]	; (800f3fc <mem_malloc+0x1dc>)
 800f3a8:	f009 fe50 	bl	801904c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800f3ac:	697b      	ldr	r3, [r7, #20]
 800f3ae:	f003 0303 	and.w	r3, r3, #3
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d006      	beq.n	800f3c4 <mem_malloc+0x1a4>
 800f3b6:	4b0f      	ldr	r3, [pc, #60]	; (800f3f4 <mem_malloc+0x1d4>)
 800f3b8:	f240 32bd 	movw	r2, #957	; 0x3bd
 800f3bc:	4914      	ldr	r1, [pc, #80]	; (800f410 <mem_malloc+0x1f0>)
 800f3be:	480f      	ldr	r0, [pc, #60]	; (800f3fc <mem_malloc+0x1dc>)
 800f3c0:	f009 fe44 	bl	801904c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800f3c4:	697b      	ldr	r3, [r7, #20]
 800f3c6:	3308      	adds	r3, #8
 800f3c8:	e00e      	b.n	800f3e8 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800f3ca:	8bfb      	ldrh	r3, [r7, #30]
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	f7ff fc87 	bl	800ece0 <ptr_to_mem>
 800f3d2:	4603      	mov	r3, r0
 800f3d4:	881b      	ldrh	r3, [r3, #0]
 800f3d6:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800f3d8:	8bfa      	ldrh	r2, [r7, #30]
 800f3da:	8bbb      	ldrh	r3, [r7, #28]
 800f3dc:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800f3e0:	429a      	cmp	r2, r3
 800f3e2:	f4ff af44 	bcc.w	800f26e <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800f3e6:	2300      	movs	r3, #0
}
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	3720      	adds	r7, #32
 800f3ec:	46bd      	mov	sp, r7
 800f3ee:	bd80      	pop	{r7, pc}
 800f3f0:	200050fc 	.word	0x200050fc
 800f3f4:	0801b710 	.word	0x0801b710
 800f3f8:	0801b8b8 	.word	0x0801b8b8
 800f3fc:	0801b758 	.word	0x0801b758
 800f400:	200050f8 	.word	0x200050f8
 800f404:	0801b8cc 	.word	0x0801b8cc
 800f408:	0801b8e8 	.word	0x0801b8e8
 800f40c:	0801b918 	.word	0x0801b918
 800f410:	0801b948 	.word	0x0801b948

0800f414 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800f414:	b480      	push	{r7}
 800f416:	b085      	sub	sp, #20
 800f418:	af00      	add	r7, sp, #0
 800f41a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	689b      	ldr	r3, [r3, #8]
 800f420:	2200      	movs	r2, #0
 800f422:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	685b      	ldr	r3, [r3, #4]
 800f428:	3303      	adds	r3, #3
 800f42a:	f023 0303 	bic.w	r3, r3, #3
 800f42e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800f430:	2300      	movs	r3, #0
 800f432:	60fb      	str	r3, [r7, #12]
 800f434:	e011      	b.n	800f45a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	689b      	ldr	r3, [r3, #8]
 800f43a:	681a      	ldr	r2, [r3, #0]
 800f43c:	68bb      	ldr	r3, [r7, #8]
 800f43e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	689b      	ldr	r3, [r3, #8]
 800f444:	68ba      	ldr	r2, [r7, #8]
 800f446:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	881b      	ldrh	r3, [r3, #0]
 800f44c:	461a      	mov	r2, r3
 800f44e:	68bb      	ldr	r3, [r7, #8]
 800f450:	4413      	add	r3, r2
 800f452:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	3301      	adds	r3, #1
 800f458:	60fb      	str	r3, [r7, #12]
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	885b      	ldrh	r3, [r3, #2]
 800f45e:	461a      	mov	r2, r3
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	4293      	cmp	r3, r2
 800f464:	dbe7      	blt.n	800f436 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800f466:	bf00      	nop
 800f468:	bf00      	nop
 800f46a:	3714      	adds	r7, #20
 800f46c:	46bd      	mov	sp, r7
 800f46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f472:	4770      	bx	lr

0800f474 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800f474:	b580      	push	{r7, lr}
 800f476:	b082      	sub	sp, #8
 800f478:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f47a:	2300      	movs	r3, #0
 800f47c:	80fb      	strh	r3, [r7, #6]
 800f47e:	e009      	b.n	800f494 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800f480:	88fb      	ldrh	r3, [r7, #6]
 800f482:	4a08      	ldr	r2, [pc, #32]	; (800f4a4 <memp_init+0x30>)
 800f484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f488:	4618      	mov	r0, r3
 800f48a:	f7ff ffc3 	bl	800f414 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f48e:	88fb      	ldrh	r3, [r7, #6]
 800f490:	3301      	adds	r3, #1
 800f492:	80fb      	strh	r3, [r7, #6]
 800f494:	88fb      	ldrh	r3, [r7, #6]
 800f496:	2b08      	cmp	r3, #8
 800f498:	d9f2      	bls.n	800f480 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800f49a:	bf00      	nop
 800f49c:	bf00      	nop
 800f49e:	3708      	adds	r7, #8
 800f4a0:	46bd      	mov	sp, r7
 800f4a2:	bd80      	pop	{r7, pc}
 800f4a4:	0801e168 	.word	0x0801e168

0800f4a8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800f4a8:	b580      	push	{r7, lr}
 800f4aa:	b084      	sub	sp, #16
 800f4ac:	af00      	add	r7, sp, #0
 800f4ae:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	689b      	ldr	r3, [r3, #8]
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d012      	beq.n	800f4e4 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	689b      	ldr	r3, [r3, #8]
 800f4c2:	68fa      	ldr	r2, [r7, #12]
 800f4c4:	6812      	ldr	r2, [r2, #0]
 800f4c6:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	f003 0303 	and.w	r3, r3, #3
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d006      	beq.n	800f4e0 <do_memp_malloc_pool+0x38>
 800f4d2:	4b07      	ldr	r3, [pc, #28]	; (800f4f0 <do_memp_malloc_pool+0x48>)
 800f4d4:	f44f 728c 	mov.w	r2, #280	; 0x118
 800f4d8:	4906      	ldr	r1, [pc, #24]	; (800f4f4 <do_memp_malloc_pool+0x4c>)
 800f4da:	4807      	ldr	r0, [pc, #28]	; (800f4f8 <do_memp_malloc_pool+0x50>)
 800f4dc:	f009 fdb6 	bl	801904c <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	e000      	b.n	800f4e6 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800f4e4:	2300      	movs	r3, #0
}
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	3710      	adds	r7, #16
 800f4ea:	46bd      	mov	sp, r7
 800f4ec:	bd80      	pop	{r7, pc}
 800f4ee:	bf00      	nop
 800f4f0:	0801b96c 	.word	0x0801b96c
 800f4f4:	0801b99c 	.word	0x0801b99c
 800f4f8:	0801b9c0 	.word	0x0801b9c0

0800f4fc <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800f4fc:	b580      	push	{r7, lr}
 800f4fe:	b082      	sub	sp, #8
 800f500:	af00      	add	r7, sp, #0
 800f502:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d106      	bne.n	800f518 <memp_malloc_pool+0x1c>
 800f50a:	4b0a      	ldr	r3, [pc, #40]	; (800f534 <memp_malloc_pool+0x38>)
 800f50c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800f510:	4909      	ldr	r1, [pc, #36]	; (800f538 <memp_malloc_pool+0x3c>)
 800f512:	480a      	ldr	r0, [pc, #40]	; (800f53c <memp_malloc_pool+0x40>)
 800f514:	f009 fd9a 	bl	801904c <iprintf>
  if (desc == NULL) {
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d101      	bne.n	800f522 <memp_malloc_pool+0x26>
    return NULL;
 800f51e:	2300      	movs	r3, #0
 800f520:	e003      	b.n	800f52a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800f522:	6878      	ldr	r0, [r7, #4]
 800f524:	f7ff ffc0 	bl	800f4a8 <do_memp_malloc_pool>
 800f528:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800f52a:	4618      	mov	r0, r3
 800f52c:	3708      	adds	r7, #8
 800f52e:	46bd      	mov	sp, r7
 800f530:	bd80      	pop	{r7, pc}
 800f532:	bf00      	nop
 800f534:	0801b96c 	.word	0x0801b96c
 800f538:	0801b9e8 	.word	0x0801b9e8
 800f53c:	0801b9c0 	.word	0x0801b9c0

0800f540 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800f540:	b580      	push	{r7, lr}
 800f542:	b084      	sub	sp, #16
 800f544:	af00      	add	r7, sp, #0
 800f546:	4603      	mov	r3, r0
 800f548:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800f54a:	79fb      	ldrb	r3, [r7, #7]
 800f54c:	2b08      	cmp	r3, #8
 800f54e:	d908      	bls.n	800f562 <memp_malloc+0x22>
 800f550:	4b0a      	ldr	r3, [pc, #40]	; (800f57c <memp_malloc+0x3c>)
 800f552:	f240 1257 	movw	r2, #343	; 0x157
 800f556:	490a      	ldr	r1, [pc, #40]	; (800f580 <memp_malloc+0x40>)
 800f558:	480a      	ldr	r0, [pc, #40]	; (800f584 <memp_malloc+0x44>)
 800f55a:	f009 fd77 	bl	801904c <iprintf>
 800f55e:	2300      	movs	r3, #0
 800f560:	e008      	b.n	800f574 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800f562:	79fb      	ldrb	r3, [r7, #7]
 800f564:	4a08      	ldr	r2, [pc, #32]	; (800f588 <memp_malloc+0x48>)
 800f566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f56a:	4618      	mov	r0, r3
 800f56c:	f7ff ff9c 	bl	800f4a8 <do_memp_malloc_pool>
 800f570:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800f572:	68fb      	ldr	r3, [r7, #12]
}
 800f574:	4618      	mov	r0, r3
 800f576:	3710      	adds	r7, #16
 800f578:	46bd      	mov	sp, r7
 800f57a:	bd80      	pop	{r7, pc}
 800f57c:	0801b96c 	.word	0x0801b96c
 800f580:	0801b9fc 	.word	0x0801b9fc
 800f584:	0801b9c0 	.word	0x0801b9c0
 800f588:	0801e168 	.word	0x0801e168

0800f58c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800f58c:	b580      	push	{r7, lr}
 800f58e:	b084      	sub	sp, #16
 800f590:	af00      	add	r7, sp, #0
 800f592:	6078      	str	r0, [r7, #4]
 800f594:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800f596:	683b      	ldr	r3, [r7, #0]
 800f598:	f003 0303 	and.w	r3, r3, #3
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d006      	beq.n	800f5ae <do_memp_free_pool+0x22>
 800f5a0:	4b0a      	ldr	r3, [pc, #40]	; (800f5cc <do_memp_free_pool+0x40>)
 800f5a2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800f5a6:	490a      	ldr	r1, [pc, #40]	; (800f5d0 <do_memp_free_pool+0x44>)
 800f5a8:	480a      	ldr	r0, [pc, #40]	; (800f5d4 <do_memp_free_pool+0x48>)
 800f5aa:	f009 fd4f 	bl	801904c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800f5ae:	683b      	ldr	r3, [r7, #0]
 800f5b0:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	689b      	ldr	r3, [r3, #8]
 800f5b6:	681a      	ldr	r2, [r3, #0]
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	689b      	ldr	r3, [r3, #8]
 800f5c0:	68fa      	ldr	r2, [r7, #12]
 800f5c2:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800f5c4:	bf00      	nop
 800f5c6:	3710      	adds	r7, #16
 800f5c8:	46bd      	mov	sp, r7
 800f5ca:	bd80      	pop	{r7, pc}
 800f5cc:	0801b96c 	.word	0x0801b96c
 800f5d0:	0801ba1c 	.word	0x0801ba1c
 800f5d4:	0801b9c0 	.word	0x0801b9c0

0800f5d8 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800f5d8:	b580      	push	{r7, lr}
 800f5da:	b082      	sub	sp, #8
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	6078      	str	r0, [r7, #4]
 800f5e0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d106      	bne.n	800f5f6 <memp_free_pool+0x1e>
 800f5e8:	4b0a      	ldr	r3, [pc, #40]	; (800f614 <memp_free_pool+0x3c>)
 800f5ea:	f240 1295 	movw	r2, #405	; 0x195
 800f5ee:	490a      	ldr	r1, [pc, #40]	; (800f618 <memp_free_pool+0x40>)
 800f5f0:	480a      	ldr	r0, [pc, #40]	; (800f61c <memp_free_pool+0x44>)
 800f5f2:	f009 fd2b 	bl	801904c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d007      	beq.n	800f60c <memp_free_pool+0x34>
 800f5fc:	683b      	ldr	r3, [r7, #0]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d004      	beq.n	800f60c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800f602:	6839      	ldr	r1, [r7, #0]
 800f604:	6878      	ldr	r0, [r7, #4]
 800f606:	f7ff ffc1 	bl	800f58c <do_memp_free_pool>
 800f60a:	e000      	b.n	800f60e <memp_free_pool+0x36>
    return;
 800f60c:	bf00      	nop
}
 800f60e:	3708      	adds	r7, #8
 800f610:	46bd      	mov	sp, r7
 800f612:	bd80      	pop	{r7, pc}
 800f614:	0801b96c 	.word	0x0801b96c
 800f618:	0801b9e8 	.word	0x0801b9e8
 800f61c:	0801b9c0 	.word	0x0801b9c0

0800f620 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800f620:	b580      	push	{r7, lr}
 800f622:	b082      	sub	sp, #8
 800f624:	af00      	add	r7, sp, #0
 800f626:	4603      	mov	r3, r0
 800f628:	6039      	str	r1, [r7, #0]
 800f62a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800f62c:	79fb      	ldrb	r3, [r7, #7]
 800f62e:	2b08      	cmp	r3, #8
 800f630:	d907      	bls.n	800f642 <memp_free+0x22>
 800f632:	4b0c      	ldr	r3, [pc, #48]	; (800f664 <memp_free+0x44>)
 800f634:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800f638:	490b      	ldr	r1, [pc, #44]	; (800f668 <memp_free+0x48>)
 800f63a:	480c      	ldr	r0, [pc, #48]	; (800f66c <memp_free+0x4c>)
 800f63c:	f009 fd06 	bl	801904c <iprintf>
 800f640:	e00c      	b.n	800f65c <memp_free+0x3c>

  if (mem == NULL) {
 800f642:	683b      	ldr	r3, [r7, #0]
 800f644:	2b00      	cmp	r3, #0
 800f646:	d008      	beq.n	800f65a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800f648:	79fb      	ldrb	r3, [r7, #7]
 800f64a:	4a09      	ldr	r2, [pc, #36]	; (800f670 <memp_free+0x50>)
 800f64c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f650:	6839      	ldr	r1, [r7, #0]
 800f652:	4618      	mov	r0, r3
 800f654:	f7ff ff9a 	bl	800f58c <do_memp_free_pool>
 800f658:	e000      	b.n	800f65c <memp_free+0x3c>
    return;
 800f65a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800f65c:	3708      	adds	r7, #8
 800f65e:	46bd      	mov	sp, r7
 800f660:	bd80      	pop	{r7, pc}
 800f662:	bf00      	nop
 800f664:	0801b96c 	.word	0x0801b96c
 800f668:	0801ba3c 	.word	0x0801ba3c
 800f66c:	0801b9c0 	.word	0x0801b9c0
 800f670:	0801e168 	.word	0x0801e168

0800f674 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800f674:	b480      	push	{r7}
 800f676:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800f678:	bf00      	nop
 800f67a:	46bd      	mov	sp, r7
 800f67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f680:	4770      	bx	lr
	...

0800f684 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800f684:	b580      	push	{r7, lr}
 800f686:	b086      	sub	sp, #24
 800f688:	af00      	add	r7, sp, #0
 800f68a:	60f8      	str	r0, [r7, #12]
 800f68c:	60b9      	str	r1, [r7, #8]
 800f68e:	607a      	str	r2, [r7, #4]
 800f690:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	2b00      	cmp	r3, #0
 800f696:	d108      	bne.n	800f6aa <netif_add+0x26>
 800f698:	4b57      	ldr	r3, [pc, #348]	; (800f7f8 <netif_add+0x174>)
 800f69a:	f240 1227 	movw	r2, #295	; 0x127
 800f69e:	4957      	ldr	r1, [pc, #348]	; (800f7fc <netif_add+0x178>)
 800f6a0:	4857      	ldr	r0, [pc, #348]	; (800f800 <netif_add+0x17c>)
 800f6a2:	f009 fcd3 	bl	801904c <iprintf>
 800f6a6:	2300      	movs	r3, #0
 800f6a8:	e0a2      	b.n	800f7f0 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800f6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d108      	bne.n	800f6c2 <netif_add+0x3e>
 800f6b0:	4b51      	ldr	r3, [pc, #324]	; (800f7f8 <netif_add+0x174>)
 800f6b2:	f44f 7294 	mov.w	r2, #296	; 0x128
 800f6b6:	4953      	ldr	r1, [pc, #332]	; (800f804 <netif_add+0x180>)
 800f6b8:	4851      	ldr	r0, [pc, #324]	; (800f800 <netif_add+0x17c>)
 800f6ba:	f009 fcc7 	bl	801904c <iprintf>
 800f6be:	2300      	movs	r3, #0
 800f6c0:	e096      	b.n	800f7f0 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800f6c2:	68bb      	ldr	r3, [r7, #8]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d101      	bne.n	800f6cc <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800f6c8:	4b4f      	ldr	r3, [pc, #316]	; (800f808 <netif_add+0x184>)
 800f6ca:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d101      	bne.n	800f6d6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800f6d2:	4b4d      	ldr	r3, [pc, #308]	; (800f808 <netif_add+0x184>)
 800f6d4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800f6d6:	683b      	ldr	r3, [r7, #0]
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d101      	bne.n	800f6e0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800f6dc:	4b4a      	ldr	r3, [pc, #296]	; (800f808 <netif_add+0x184>)
 800f6de:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	2200      	movs	r2, #0
 800f6e4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	2200      	movs	r2, #0
 800f6ea:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	2200      	movs	r2, #0
 800f6f0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	4a45      	ldr	r2, [pc, #276]	; (800f80c <netif_add+0x188>)
 800f6f6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	2200      	movs	r2, #0
 800f6fc:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	2200      	movs	r2, #0
 800f702:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	2200      	movs	r2, #0
 800f70a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	6a3a      	ldr	r2, [r7, #32]
 800f710:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800f712:	4b3f      	ldr	r3, [pc, #252]	; (800f810 <netif_add+0x18c>)
 800f714:	781a      	ldrb	r2, [r3, #0]
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f720:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800f722:	683b      	ldr	r3, [r7, #0]
 800f724:	687a      	ldr	r2, [r7, #4]
 800f726:	68b9      	ldr	r1, [r7, #8]
 800f728:	68f8      	ldr	r0, [r7, #12]
 800f72a:	f000 f913 	bl	800f954 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800f72e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f730:	68f8      	ldr	r0, [r7, #12]
 800f732:	4798      	blx	r3
 800f734:	4603      	mov	r3, r0
 800f736:	2b00      	cmp	r3, #0
 800f738:	d001      	beq.n	800f73e <netif_add+0xba>
    return NULL;
 800f73a:	2300      	movs	r3, #0
 800f73c:	e058      	b.n	800f7f0 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f744:	2bff      	cmp	r3, #255	; 0xff
 800f746:	d103      	bne.n	800f750 <netif_add+0xcc>
        netif->num = 0;
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	2200      	movs	r2, #0
 800f74c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800f750:	2300      	movs	r3, #0
 800f752:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800f754:	4b2f      	ldr	r3, [pc, #188]	; (800f814 <netif_add+0x190>)
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	617b      	str	r3, [r7, #20]
 800f75a:	e02b      	b.n	800f7b4 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800f75c:	697a      	ldr	r2, [r7, #20]
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	429a      	cmp	r2, r3
 800f762:	d106      	bne.n	800f772 <netif_add+0xee>
 800f764:	4b24      	ldr	r3, [pc, #144]	; (800f7f8 <netif_add+0x174>)
 800f766:	f240 128b 	movw	r2, #395	; 0x18b
 800f76a:	492b      	ldr	r1, [pc, #172]	; (800f818 <netif_add+0x194>)
 800f76c:	4824      	ldr	r0, [pc, #144]	; (800f800 <netif_add+0x17c>)
 800f76e:	f009 fc6d 	bl	801904c <iprintf>
        num_netifs++;
 800f772:	693b      	ldr	r3, [r7, #16]
 800f774:	3301      	adds	r3, #1
 800f776:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800f778:	693b      	ldr	r3, [r7, #16]
 800f77a:	2bff      	cmp	r3, #255	; 0xff
 800f77c:	dd06      	ble.n	800f78c <netif_add+0x108>
 800f77e:	4b1e      	ldr	r3, [pc, #120]	; (800f7f8 <netif_add+0x174>)
 800f780:	f240 128d 	movw	r2, #397	; 0x18d
 800f784:	4925      	ldr	r1, [pc, #148]	; (800f81c <netif_add+0x198>)
 800f786:	481e      	ldr	r0, [pc, #120]	; (800f800 <netif_add+0x17c>)
 800f788:	f009 fc60 	bl	801904c <iprintf>
        if (netif2->num == netif->num) {
 800f78c:	697b      	ldr	r3, [r7, #20]
 800f78e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f798:	429a      	cmp	r2, r3
 800f79a:	d108      	bne.n	800f7ae <netif_add+0x12a>
          netif->num++;
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f7a2:	3301      	adds	r3, #1
 800f7a4:	b2da      	uxtb	r2, r3
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800f7ac:	e005      	b.n	800f7ba <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800f7ae:	697b      	ldr	r3, [r7, #20]
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	617b      	str	r3, [r7, #20]
 800f7b4:	697b      	ldr	r3, [r7, #20]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d1d0      	bne.n	800f75c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800f7ba:	697b      	ldr	r3, [r7, #20]
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d1be      	bne.n	800f73e <netif_add+0xba>
  }
  if (netif->num == 254) {
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f7c6:	2bfe      	cmp	r3, #254	; 0xfe
 800f7c8:	d103      	bne.n	800f7d2 <netif_add+0x14e>
    netif_num = 0;
 800f7ca:	4b11      	ldr	r3, [pc, #68]	; (800f810 <netif_add+0x18c>)
 800f7cc:	2200      	movs	r2, #0
 800f7ce:	701a      	strb	r2, [r3, #0]
 800f7d0:	e006      	b.n	800f7e0 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f7d8:	3301      	adds	r3, #1
 800f7da:	b2da      	uxtb	r2, r3
 800f7dc:	4b0c      	ldr	r3, [pc, #48]	; (800f810 <netif_add+0x18c>)
 800f7de:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800f7e0:	4b0c      	ldr	r3, [pc, #48]	; (800f814 <netif_add+0x190>)
 800f7e2:	681a      	ldr	r2, [r3, #0]
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800f7e8:	4a0a      	ldr	r2, [pc, #40]	; (800f814 <netif_add+0x190>)
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800f7ee:	68fb      	ldr	r3, [r7, #12]
}
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	3718      	adds	r7, #24
 800f7f4:	46bd      	mov	sp, r7
 800f7f6:	bd80      	pop	{r7, pc}
 800f7f8:	0801ba58 	.word	0x0801ba58
 800f7fc:	0801baec 	.word	0x0801baec
 800f800:	0801baa8 	.word	0x0801baa8
 800f804:	0801bb08 	.word	0x0801bb08
 800f808:	0801e1cc 	.word	0x0801e1cc
 800f80c:	0800fc2f 	.word	0x0800fc2f
 800f810:	20007ff4 	.word	0x20007ff4
 800f814:	20007fec 	.word	0x20007fec
 800f818:	0801bb2c 	.word	0x0801bb2c
 800f81c:	0801bb40 	.word	0x0801bb40

0800f820 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f820:	b580      	push	{r7, lr}
 800f822:	b082      	sub	sp, #8
 800f824:	af00      	add	r7, sp, #0
 800f826:	6078      	str	r0, [r7, #4]
 800f828:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800f82a:	6839      	ldr	r1, [r7, #0]
 800f82c:	6878      	ldr	r0, [r7, #4]
 800f82e:	f002 fb23 	bl	8011e78 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800f832:	6839      	ldr	r1, [r7, #0]
 800f834:	6878      	ldr	r0, [r7, #4]
 800f836:	f006 fbc5 	bl	8015fc4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800f83a:	bf00      	nop
 800f83c:	3708      	adds	r7, #8
 800f83e:	46bd      	mov	sp, r7
 800f840:	bd80      	pop	{r7, pc}
	...

0800f844 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800f844:	b580      	push	{r7, lr}
 800f846:	b086      	sub	sp, #24
 800f848:	af00      	add	r7, sp, #0
 800f84a:	60f8      	str	r0, [r7, #12]
 800f84c:	60b9      	str	r1, [r7, #8]
 800f84e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800f850:	68bb      	ldr	r3, [r7, #8]
 800f852:	2b00      	cmp	r3, #0
 800f854:	d106      	bne.n	800f864 <netif_do_set_ipaddr+0x20>
 800f856:	4b1d      	ldr	r3, [pc, #116]	; (800f8cc <netif_do_set_ipaddr+0x88>)
 800f858:	f240 12cb 	movw	r2, #459	; 0x1cb
 800f85c:	491c      	ldr	r1, [pc, #112]	; (800f8d0 <netif_do_set_ipaddr+0x8c>)
 800f85e:	481d      	ldr	r0, [pc, #116]	; (800f8d4 <netif_do_set_ipaddr+0x90>)
 800f860:	f009 fbf4 	bl	801904c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	2b00      	cmp	r3, #0
 800f868:	d106      	bne.n	800f878 <netif_do_set_ipaddr+0x34>
 800f86a:	4b18      	ldr	r3, [pc, #96]	; (800f8cc <netif_do_set_ipaddr+0x88>)
 800f86c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800f870:	4917      	ldr	r1, [pc, #92]	; (800f8d0 <netif_do_set_ipaddr+0x8c>)
 800f872:	4818      	ldr	r0, [pc, #96]	; (800f8d4 <netif_do_set_ipaddr+0x90>)
 800f874:	f009 fbea 	bl	801904c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800f878:	68bb      	ldr	r3, [r7, #8]
 800f87a:	681a      	ldr	r2, [r3, #0]
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	3304      	adds	r3, #4
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	429a      	cmp	r2, r3
 800f884:	d01c      	beq.n	800f8c0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800f886:	68bb      	ldr	r3, [r7, #8]
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	3304      	adds	r3, #4
 800f890:	681a      	ldr	r2, [r3, #0]
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800f896:	f107 0314 	add.w	r3, r7, #20
 800f89a:	4619      	mov	r1, r3
 800f89c:	6878      	ldr	r0, [r7, #4]
 800f89e:	f7ff ffbf 	bl	800f820 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800f8a2:	68bb      	ldr	r3, [r7, #8]
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d002      	beq.n	800f8ae <netif_do_set_ipaddr+0x6a>
 800f8a8:	68bb      	ldr	r3, [r7, #8]
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	e000      	b.n	800f8b0 <netif_do_set_ipaddr+0x6c>
 800f8ae:	2300      	movs	r3, #0
 800f8b0:	68fa      	ldr	r2, [r7, #12]
 800f8b2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800f8b4:	2101      	movs	r1, #1
 800f8b6:	68f8      	ldr	r0, [r7, #12]
 800f8b8:	f000 f8d2 	bl	800fa60 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800f8bc:	2301      	movs	r3, #1
 800f8be:	e000      	b.n	800f8c2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800f8c0:	2300      	movs	r3, #0
}
 800f8c2:	4618      	mov	r0, r3
 800f8c4:	3718      	adds	r7, #24
 800f8c6:	46bd      	mov	sp, r7
 800f8c8:	bd80      	pop	{r7, pc}
 800f8ca:	bf00      	nop
 800f8cc:	0801ba58 	.word	0x0801ba58
 800f8d0:	0801bb70 	.word	0x0801bb70
 800f8d4:	0801baa8 	.word	0x0801baa8

0800f8d8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800f8d8:	b480      	push	{r7}
 800f8da:	b085      	sub	sp, #20
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	60f8      	str	r0, [r7, #12]
 800f8e0:	60b9      	str	r1, [r7, #8]
 800f8e2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800f8e4:	68bb      	ldr	r3, [r7, #8]
 800f8e6:	681a      	ldr	r2, [r3, #0]
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	3308      	adds	r3, #8
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	429a      	cmp	r2, r3
 800f8f0:	d00a      	beq.n	800f908 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800f8f2:	68bb      	ldr	r3, [r7, #8]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d002      	beq.n	800f8fe <netif_do_set_netmask+0x26>
 800f8f8:	68bb      	ldr	r3, [r7, #8]
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	e000      	b.n	800f900 <netif_do_set_netmask+0x28>
 800f8fe:	2300      	movs	r3, #0
 800f900:	68fa      	ldr	r2, [r7, #12]
 800f902:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800f904:	2301      	movs	r3, #1
 800f906:	e000      	b.n	800f90a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800f908:	2300      	movs	r3, #0
}
 800f90a:	4618      	mov	r0, r3
 800f90c:	3714      	adds	r7, #20
 800f90e:	46bd      	mov	sp, r7
 800f910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f914:	4770      	bx	lr

0800f916 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800f916:	b480      	push	{r7}
 800f918:	b085      	sub	sp, #20
 800f91a:	af00      	add	r7, sp, #0
 800f91c:	60f8      	str	r0, [r7, #12]
 800f91e:	60b9      	str	r1, [r7, #8]
 800f920:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800f922:	68bb      	ldr	r3, [r7, #8]
 800f924:	681a      	ldr	r2, [r3, #0]
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	330c      	adds	r3, #12
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	429a      	cmp	r2, r3
 800f92e:	d00a      	beq.n	800f946 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800f930:	68bb      	ldr	r3, [r7, #8]
 800f932:	2b00      	cmp	r3, #0
 800f934:	d002      	beq.n	800f93c <netif_do_set_gw+0x26>
 800f936:	68bb      	ldr	r3, [r7, #8]
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	e000      	b.n	800f93e <netif_do_set_gw+0x28>
 800f93c:	2300      	movs	r3, #0
 800f93e:	68fa      	ldr	r2, [r7, #12]
 800f940:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800f942:	2301      	movs	r3, #1
 800f944:	e000      	b.n	800f948 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800f946:	2300      	movs	r3, #0
}
 800f948:	4618      	mov	r0, r3
 800f94a:	3714      	adds	r7, #20
 800f94c:	46bd      	mov	sp, r7
 800f94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f952:	4770      	bx	lr

0800f954 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800f954:	b580      	push	{r7, lr}
 800f956:	b088      	sub	sp, #32
 800f958:	af00      	add	r7, sp, #0
 800f95a:	60f8      	str	r0, [r7, #12]
 800f95c:	60b9      	str	r1, [r7, #8]
 800f95e:	607a      	str	r2, [r7, #4]
 800f960:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800f962:	2300      	movs	r3, #0
 800f964:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800f966:	2300      	movs	r3, #0
 800f968:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800f96a:	68bb      	ldr	r3, [r7, #8]
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d101      	bne.n	800f974 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800f970:	4b1c      	ldr	r3, [pc, #112]	; (800f9e4 <netif_set_addr+0x90>)
 800f972:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	2b00      	cmp	r3, #0
 800f978:	d101      	bne.n	800f97e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800f97a:	4b1a      	ldr	r3, [pc, #104]	; (800f9e4 <netif_set_addr+0x90>)
 800f97c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800f97e:	683b      	ldr	r3, [r7, #0]
 800f980:	2b00      	cmp	r3, #0
 800f982:	d101      	bne.n	800f988 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800f984:	4b17      	ldr	r3, [pc, #92]	; (800f9e4 <netif_set_addr+0x90>)
 800f986:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800f988:	68bb      	ldr	r3, [r7, #8]
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d003      	beq.n	800f996 <netif_set_addr+0x42>
 800f98e:	68bb      	ldr	r3, [r7, #8]
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	2b00      	cmp	r3, #0
 800f994:	d101      	bne.n	800f99a <netif_set_addr+0x46>
 800f996:	2301      	movs	r3, #1
 800f998:	e000      	b.n	800f99c <netif_set_addr+0x48>
 800f99a:	2300      	movs	r3, #0
 800f99c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800f99e:	697b      	ldr	r3, [r7, #20]
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d006      	beq.n	800f9b2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800f9a4:	f107 0310 	add.w	r3, r7, #16
 800f9a8:	461a      	mov	r2, r3
 800f9aa:	68b9      	ldr	r1, [r7, #8]
 800f9ac:	68f8      	ldr	r0, [r7, #12]
 800f9ae:	f7ff ff49 	bl	800f844 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800f9b2:	69fa      	ldr	r2, [r7, #28]
 800f9b4:	6879      	ldr	r1, [r7, #4]
 800f9b6:	68f8      	ldr	r0, [r7, #12]
 800f9b8:	f7ff ff8e 	bl	800f8d8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800f9bc:	69ba      	ldr	r2, [r7, #24]
 800f9be:	6839      	ldr	r1, [r7, #0]
 800f9c0:	68f8      	ldr	r0, [r7, #12]
 800f9c2:	f7ff ffa8 	bl	800f916 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800f9c6:	697b      	ldr	r3, [r7, #20]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d106      	bne.n	800f9da <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800f9cc:	f107 0310 	add.w	r3, r7, #16
 800f9d0:	461a      	mov	r2, r3
 800f9d2:	68b9      	ldr	r1, [r7, #8]
 800f9d4:	68f8      	ldr	r0, [r7, #12]
 800f9d6:	f7ff ff35 	bl	800f844 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800f9da:	bf00      	nop
 800f9dc:	3720      	adds	r7, #32
 800f9de:	46bd      	mov	sp, r7
 800f9e0:	bd80      	pop	{r7, pc}
 800f9e2:	bf00      	nop
 800f9e4:	0801e1cc 	.word	0x0801e1cc

0800f9e8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800f9e8:	b480      	push	{r7}
 800f9ea:	b083      	sub	sp, #12
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800f9f0:	4a04      	ldr	r2, [pc, #16]	; (800fa04 <netif_set_default+0x1c>)
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800f9f6:	bf00      	nop
 800f9f8:	370c      	adds	r7, #12
 800f9fa:	46bd      	mov	sp, r7
 800f9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa00:	4770      	bx	lr
 800fa02:	bf00      	nop
 800fa04:	20007ff0 	.word	0x20007ff0

0800fa08 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800fa08:	b580      	push	{r7, lr}
 800fa0a:	b082      	sub	sp, #8
 800fa0c:	af00      	add	r7, sp, #0
 800fa0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d107      	bne.n	800fa26 <netif_set_up+0x1e>
 800fa16:	4b0f      	ldr	r3, [pc, #60]	; (800fa54 <netif_set_up+0x4c>)
 800fa18:	f44f 7254 	mov.w	r2, #848	; 0x350
 800fa1c:	490e      	ldr	r1, [pc, #56]	; (800fa58 <netif_set_up+0x50>)
 800fa1e:	480f      	ldr	r0, [pc, #60]	; (800fa5c <netif_set_up+0x54>)
 800fa20:	f009 fb14 	bl	801904c <iprintf>
 800fa24:	e013      	b.n	800fa4e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fa2c:	f003 0301 	and.w	r3, r3, #1
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d10c      	bne.n	800fa4e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fa3a:	f043 0301 	orr.w	r3, r3, #1
 800fa3e:	b2da      	uxtb	r2, r3
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800fa46:	2103      	movs	r1, #3
 800fa48:	6878      	ldr	r0, [r7, #4]
 800fa4a:	f000 f809 	bl	800fa60 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800fa4e:	3708      	adds	r7, #8
 800fa50:	46bd      	mov	sp, r7
 800fa52:	bd80      	pop	{r7, pc}
 800fa54:	0801ba58 	.word	0x0801ba58
 800fa58:	0801bbe0 	.word	0x0801bbe0
 800fa5c:	0801baa8 	.word	0x0801baa8

0800fa60 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800fa60:	b580      	push	{r7, lr}
 800fa62:	b082      	sub	sp, #8
 800fa64:	af00      	add	r7, sp, #0
 800fa66:	6078      	str	r0, [r7, #4]
 800fa68:	460b      	mov	r3, r1
 800fa6a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d106      	bne.n	800fa80 <netif_issue_reports+0x20>
 800fa72:	4b18      	ldr	r3, [pc, #96]	; (800fad4 <netif_issue_reports+0x74>)
 800fa74:	f240 326d 	movw	r2, #877	; 0x36d
 800fa78:	4917      	ldr	r1, [pc, #92]	; (800fad8 <netif_issue_reports+0x78>)
 800fa7a:	4818      	ldr	r0, [pc, #96]	; (800fadc <netif_issue_reports+0x7c>)
 800fa7c:	f009 fae6 	bl	801904c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fa86:	f003 0304 	and.w	r3, r3, #4
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d01e      	beq.n	800facc <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fa94:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d017      	beq.n	800facc <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800fa9c:	78fb      	ldrb	r3, [r7, #3]
 800fa9e:	f003 0301 	and.w	r3, r3, #1
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d013      	beq.n	800face <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	3304      	adds	r3, #4
 800faaa:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800faac:	2b00      	cmp	r3, #0
 800faae:	d00e      	beq.n	800face <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fab6:	f003 0308 	and.w	r3, r3, #8
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d007      	beq.n	800face <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	3304      	adds	r3, #4
 800fac2:	4619      	mov	r1, r3
 800fac4:	6878      	ldr	r0, [r7, #4]
 800fac6:	f007 f9e7 	bl	8016e98 <etharp_request>
 800faca:	e000      	b.n	800face <netif_issue_reports+0x6e>
    return;
 800facc:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800face:	3708      	adds	r7, #8
 800fad0:	46bd      	mov	sp, r7
 800fad2:	bd80      	pop	{r7, pc}
 800fad4:	0801ba58 	.word	0x0801ba58
 800fad8:	0801bbfc 	.word	0x0801bbfc
 800fadc:	0801baa8 	.word	0x0801baa8

0800fae0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800fae0:	b580      	push	{r7, lr}
 800fae2:	b082      	sub	sp, #8
 800fae4:	af00      	add	r7, sp, #0
 800fae6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	2b00      	cmp	r3, #0
 800faec:	d107      	bne.n	800fafe <netif_set_down+0x1e>
 800faee:	4b12      	ldr	r3, [pc, #72]	; (800fb38 <netif_set_down+0x58>)
 800faf0:	f240 329b 	movw	r2, #923	; 0x39b
 800faf4:	4911      	ldr	r1, [pc, #68]	; (800fb3c <netif_set_down+0x5c>)
 800faf6:	4812      	ldr	r0, [pc, #72]	; (800fb40 <netif_set_down+0x60>)
 800faf8:	f009 faa8 	bl	801904c <iprintf>
 800fafc:	e019      	b.n	800fb32 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fb04:	f003 0301 	and.w	r3, r3, #1
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d012      	beq.n	800fb32 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fb12:	f023 0301 	bic.w	r3, r3, #1
 800fb16:	b2da      	uxtb	r2, r3
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fb24:	f003 0308 	and.w	r3, r3, #8
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d002      	beq.n	800fb32 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800fb2c:	6878      	ldr	r0, [r7, #4]
 800fb2e:	f006 fd71 	bl	8016614 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800fb32:	3708      	adds	r7, #8
 800fb34:	46bd      	mov	sp, r7
 800fb36:	bd80      	pop	{r7, pc}
 800fb38:	0801ba58 	.word	0x0801ba58
 800fb3c:	0801bc20 	.word	0x0801bc20
 800fb40:	0801baa8 	.word	0x0801baa8

0800fb44 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800fb44:	b580      	push	{r7, lr}
 800fb46:	b082      	sub	sp, #8
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d107      	bne.n	800fb62 <netif_set_link_up+0x1e>
 800fb52:	4b13      	ldr	r3, [pc, #76]	; (800fba0 <netif_set_link_up+0x5c>)
 800fb54:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800fb58:	4912      	ldr	r1, [pc, #72]	; (800fba4 <netif_set_link_up+0x60>)
 800fb5a:	4813      	ldr	r0, [pc, #76]	; (800fba8 <netif_set_link_up+0x64>)
 800fb5c:	f009 fa76 	bl	801904c <iprintf>
 800fb60:	e01b      	b.n	800fb9a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fb68:	f003 0304 	and.w	r3, r3, #4
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d114      	bne.n	800fb9a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fb76:	f043 0304 	orr.w	r3, r3, #4
 800fb7a:	b2da      	uxtb	r2, r3
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800fb82:	2103      	movs	r1, #3
 800fb84:	6878      	ldr	r0, [r7, #4]
 800fb86:	f7ff ff6b 	bl	800fa60 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	69db      	ldr	r3, [r3, #28]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d003      	beq.n	800fb9a <netif_set_link_up+0x56>
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	69db      	ldr	r3, [r3, #28]
 800fb96:	6878      	ldr	r0, [r7, #4]
 800fb98:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800fb9a:	3708      	adds	r7, #8
 800fb9c:	46bd      	mov	sp, r7
 800fb9e:	bd80      	pop	{r7, pc}
 800fba0:	0801ba58 	.word	0x0801ba58
 800fba4:	0801bc40 	.word	0x0801bc40
 800fba8:	0801baa8 	.word	0x0801baa8

0800fbac <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800fbac:	b580      	push	{r7, lr}
 800fbae:	b082      	sub	sp, #8
 800fbb0:	af00      	add	r7, sp, #0
 800fbb2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d107      	bne.n	800fbca <netif_set_link_down+0x1e>
 800fbba:	4b11      	ldr	r3, [pc, #68]	; (800fc00 <netif_set_link_down+0x54>)
 800fbbc:	f240 4206 	movw	r2, #1030	; 0x406
 800fbc0:	4910      	ldr	r1, [pc, #64]	; (800fc04 <netif_set_link_down+0x58>)
 800fbc2:	4811      	ldr	r0, [pc, #68]	; (800fc08 <netif_set_link_down+0x5c>)
 800fbc4:	f009 fa42 	bl	801904c <iprintf>
 800fbc8:	e017      	b.n	800fbfa <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fbd0:	f003 0304 	and.w	r3, r3, #4
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d010      	beq.n	800fbfa <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fbde:	f023 0304 	bic.w	r3, r3, #4
 800fbe2:	b2da      	uxtb	r2, r3
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	69db      	ldr	r3, [r3, #28]
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d003      	beq.n	800fbfa <netif_set_link_down+0x4e>
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	69db      	ldr	r3, [r3, #28]
 800fbf6:	6878      	ldr	r0, [r7, #4]
 800fbf8:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800fbfa:	3708      	adds	r7, #8
 800fbfc:	46bd      	mov	sp, r7
 800fbfe:	bd80      	pop	{r7, pc}
 800fc00:	0801ba58 	.word	0x0801ba58
 800fc04:	0801bc64 	.word	0x0801bc64
 800fc08:	0801baa8 	.word	0x0801baa8

0800fc0c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800fc0c:	b480      	push	{r7}
 800fc0e:	b083      	sub	sp, #12
 800fc10:	af00      	add	r7, sp, #0
 800fc12:	6078      	str	r0, [r7, #4]
 800fc14:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d002      	beq.n	800fc22 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	683a      	ldr	r2, [r7, #0]
 800fc20:	61da      	str	r2, [r3, #28]
  }
}
 800fc22:	bf00      	nop
 800fc24:	370c      	adds	r7, #12
 800fc26:	46bd      	mov	sp, r7
 800fc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc2c:	4770      	bx	lr

0800fc2e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800fc2e:	b480      	push	{r7}
 800fc30:	b085      	sub	sp, #20
 800fc32:	af00      	add	r7, sp, #0
 800fc34:	60f8      	str	r0, [r7, #12]
 800fc36:	60b9      	str	r1, [r7, #8]
 800fc38:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800fc3a:	f06f 030b 	mvn.w	r3, #11
}
 800fc3e:	4618      	mov	r0, r3
 800fc40:	3714      	adds	r7, #20
 800fc42:	46bd      	mov	sp, r7
 800fc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc48:	4770      	bx	lr
	...

0800fc4c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800fc4c:	b480      	push	{r7}
 800fc4e:	b085      	sub	sp, #20
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	4603      	mov	r3, r0
 800fc54:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800fc56:	79fb      	ldrb	r3, [r7, #7]
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d013      	beq.n	800fc84 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800fc5c:	4b0d      	ldr	r3, [pc, #52]	; (800fc94 <netif_get_by_index+0x48>)
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	60fb      	str	r3, [r7, #12]
 800fc62:	e00c      	b.n	800fc7e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fc6a:	3301      	adds	r3, #1
 800fc6c:	b2db      	uxtb	r3, r3
 800fc6e:	79fa      	ldrb	r2, [r7, #7]
 800fc70:	429a      	cmp	r2, r3
 800fc72:	d101      	bne.n	800fc78 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	e006      	b.n	800fc86 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	60fb      	str	r3, [r7, #12]
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d1ef      	bne.n	800fc64 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800fc84:	2300      	movs	r3, #0
}
 800fc86:	4618      	mov	r0, r3
 800fc88:	3714      	adds	r7, #20
 800fc8a:	46bd      	mov	sp, r7
 800fc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc90:	4770      	bx	lr
 800fc92:	bf00      	nop
 800fc94:	20007fec 	.word	0x20007fec

0800fc98 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800fc98:	b480      	push	{r7}
 800fc9a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800fc9c:	4b03      	ldr	r3, [pc, #12]	; (800fcac <pbuf_pool_is_empty+0x14>)
 800fc9e:	2201      	movs	r2, #1
 800fca0:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800fca2:	bf00      	nop
 800fca4:	46bd      	mov	sp, r7
 800fca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcaa:	4770      	bx	lr
 800fcac:	20007ff5 	.word	0x20007ff5

0800fcb0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800fcb0:	b480      	push	{r7}
 800fcb2:	b085      	sub	sp, #20
 800fcb4:	af00      	add	r7, sp, #0
 800fcb6:	60f8      	str	r0, [r7, #12]
 800fcb8:	60b9      	str	r1, [r7, #8]
 800fcba:	4611      	mov	r1, r2
 800fcbc:	461a      	mov	r2, r3
 800fcbe:	460b      	mov	r3, r1
 800fcc0:	80fb      	strh	r3, [r7, #6]
 800fcc2:	4613      	mov	r3, r2
 800fcc4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	2200      	movs	r2, #0
 800fcca:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	68ba      	ldr	r2, [r7, #8]
 800fcd0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	88fa      	ldrh	r2, [r7, #6]
 800fcd6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	88ba      	ldrh	r2, [r7, #4]
 800fcdc:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800fcde:	8b3b      	ldrh	r3, [r7, #24]
 800fce0:	b2da      	uxtb	r2, r3
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	7f3a      	ldrb	r2, [r7, #28]
 800fcea:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	2201      	movs	r2, #1
 800fcf0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	2200      	movs	r2, #0
 800fcf6:	73da      	strb	r2, [r3, #15]
}
 800fcf8:	bf00      	nop
 800fcfa:	3714      	adds	r7, #20
 800fcfc:	46bd      	mov	sp, r7
 800fcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd02:	4770      	bx	lr

0800fd04 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800fd04:	b580      	push	{r7, lr}
 800fd06:	b08c      	sub	sp, #48	; 0x30
 800fd08:	af02      	add	r7, sp, #8
 800fd0a:	4603      	mov	r3, r0
 800fd0c:	71fb      	strb	r3, [r7, #7]
 800fd0e:	460b      	mov	r3, r1
 800fd10:	80bb      	strh	r3, [r7, #4]
 800fd12:	4613      	mov	r3, r2
 800fd14:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800fd16:	79fb      	ldrb	r3, [r7, #7]
 800fd18:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800fd1a:	887b      	ldrh	r3, [r7, #2]
 800fd1c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800fd20:	d07f      	beq.n	800fe22 <pbuf_alloc+0x11e>
 800fd22:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800fd26:	f300 80c8 	bgt.w	800feba <pbuf_alloc+0x1b6>
 800fd2a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800fd2e:	d010      	beq.n	800fd52 <pbuf_alloc+0x4e>
 800fd30:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800fd34:	f300 80c1 	bgt.w	800feba <pbuf_alloc+0x1b6>
 800fd38:	2b01      	cmp	r3, #1
 800fd3a:	d002      	beq.n	800fd42 <pbuf_alloc+0x3e>
 800fd3c:	2b41      	cmp	r3, #65	; 0x41
 800fd3e:	f040 80bc 	bne.w	800feba <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800fd42:	887a      	ldrh	r2, [r7, #2]
 800fd44:	88bb      	ldrh	r3, [r7, #4]
 800fd46:	4619      	mov	r1, r3
 800fd48:	2000      	movs	r0, #0
 800fd4a:	f000 f8d1 	bl	800fef0 <pbuf_alloc_reference>
 800fd4e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800fd50:	e0bd      	b.n	800fece <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800fd52:	2300      	movs	r3, #0
 800fd54:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800fd56:	2300      	movs	r3, #0
 800fd58:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800fd5a:	88bb      	ldrh	r3, [r7, #4]
 800fd5c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800fd5e:	2008      	movs	r0, #8
 800fd60:	f7ff fbee 	bl	800f540 <memp_malloc>
 800fd64:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800fd66:	693b      	ldr	r3, [r7, #16]
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d109      	bne.n	800fd80 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800fd6c:	f7ff ff94 	bl	800fc98 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800fd70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d002      	beq.n	800fd7c <pbuf_alloc+0x78>
            pbuf_free(p);
 800fd76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fd78:	f000 faa8 	bl	80102cc <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800fd7c:	2300      	movs	r3, #0
 800fd7e:	e0a7      	b.n	800fed0 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800fd80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fd82:	3303      	adds	r3, #3
 800fd84:	b29b      	uxth	r3, r3
 800fd86:	f023 0303 	bic.w	r3, r3, #3
 800fd8a:	b29b      	uxth	r3, r3
 800fd8c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800fd90:	b29b      	uxth	r3, r3
 800fd92:	8b7a      	ldrh	r2, [r7, #26]
 800fd94:	4293      	cmp	r3, r2
 800fd96:	bf28      	it	cs
 800fd98:	4613      	movcs	r3, r2
 800fd9a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800fd9c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fd9e:	3310      	adds	r3, #16
 800fda0:	693a      	ldr	r2, [r7, #16]
 800fda2:	4413      	add	r3, r2
 800fda4:	3303      	adds	r3, #3
 800fda6:	f023 0303 	bic.w	r3, r3, #3
 800fdaa:	4618      	mov	r0, r3
 800fdac:	89f9      	ldrh	r1, [r7, #14]
 800fdae:	8b7a      	ldrh	r2, [r7, #26]
 800fdb0:	2300      	movs	r3, #0
 800fdb2:	9301      	str	r3, [sp, #4]
 800fdb4:	887b      	ldrh	r3, [r7, #2]
 800fdb6:	9300      	str	r3, [sp, #0]
 800fdb8:	460b      	mov	r3, r1
 800fdba:	4601      	mov	r1, r0
 800fdbc:	6938      	ldr	r0, [r7, #16]
 800fdbe:	f7ff ff77 	bl	800fcb0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800fdc2:	693b      	ldr	r3, [r7, #16]
 800fdc4:	685b      	ldr	r3, [r3, #4]
 800fdc6:	f003 0303 	and.w	r3, r3, #3
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d006      	beq.n	800fddc <pbuf_alloc+0xd8>
 800fdce:	4b42      	ldr	r3, [pc, #264]	; (800fed8 <pbuf_alloc+0x1d4>)
 800fdd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fdd4:	4941      	ldr	r1, [pc, #260]	; (800fedc <pbuf_alloc+0x1d8>)
 800fdd6:	4842      	ldr	r0, [pc, #264]	; (800fee0 <pbuf_alloc+0x1dc>)
 800fdd8:	f009 f938 	bl	801904c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800fddc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fdde:	3303      	adds	r3, #3
 800fde0:	f023 0303 	bic.w	r3, r3, #3
 800fde4:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800fde8:	d106      	bne.n	800fdf8 <pbuf_alloc+0xf4>
 800fdea:	4b3b      	ldr	r3, [pc, #236]	; (800fed8 <pbuf_alloc+0x1d4>)
 800fdec:	f44f 7281 	mov.w	r2, #258	; 0x102
 800fdf0:	493c      	ldr	r1, [pc, #240]	; (800fee4 <pbuf_alloc+0x1e0>)
 800fdf2:	483b      	ldr	r0, [pc, #236]	; (800fee0 <pbuf_alloc+0x1dc>)
 800fdf4:	f009 f92a 	bl	801904c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800fdf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d102      	bne.n	800fe04 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800fdfe:	693b      	ldr	r3, [r7, #16]
 800fe00:	627b      	str	r3, [r7, #36]	; 0x24
 800fe02:	e002      	b.n	800fe0a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800fe04:	69fb      	ldr	r3, [r7, #28]
 800fe06:	693a      	ldr	r2, [r7, #16]
 800fe08:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800fe0a:	693b      	ldr	r3, [r7, #16]
 800fe0c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800fe0e:	8b7a      	ldrh	r2, [r7, #26]
 800fe10:	89fb      	ldrh	r3, [r7, #14]
 800fe12:	1ad3      	subs	r3, r2, r3
 800fe14:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800fe16:	2300      	movs	r3, #0
 800fe18:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800fe1a:	8b7b      	ldrh	r3, [r7, #26]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d19e      	bne.n	800fd5e <pbuf_alloc+0x5a>
      break;
 800fe20:	e055      	b.n	800fece <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800fe22:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fe24:	3303      	adds	r3, #3
 800fe26:	b29b      	uxth	r3, r3
 800fe28:	f023 0303 	bic.w	r3, r3, #3
 800fe2c:	b29a      	uxth	r2, r3
 800fe2e:	88bb      	ldrh	r3, [r7, #4]
 800fe30:	3303      	adds	r3, #3
 800fe32:	b29b      	uxth	r3, r3
 800fe34:	f023 0303 	bic.w	r3, r3, #3
 800fe38:	b29b      	uxth	r3, r3
 800fe3a:	4413      	add	r3, r2
 800fe3c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800fe3e:	8b3b      	ldrh	r3, [r7, #24]
 800fe40:	3310      	adds	r3, #16
 800fe42:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800fe44:	8b3a      	ldrh	r2, [r7, #24]
 800fe46:	88bb      	ldrh	r3, [r7, #4]
 800fe48:	3303      	adds	r3, #3
 800fe4a:	f023 0303 	bic.w	r3, r3, #3
 800fe4e:	429a      	cmp	r2, r3
 800fe50:	d306      	bcc.n	800fe60 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800fe52:	8afa      	ldrh	r2, [r7, #22]
 800fe54:	88bb      	ldrh	r3, [r7, #4]
 800fe56:	3303      	adds	r3, #3
 800fe58:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800fe5c:	429a      	cmp	r2, r3
 800fe5e:	d201      	bcs.n	800fe64 <pbuf_alloc+0x160>
        return NULL;
 800fe60:	2300      	movs	r3, #0
 800fe62:	e035      	b.n	800fed0 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800fe64:	8afb      	ldrh	r3, [r7, #22]
 800fe66:	4618      	mov	r0, r3
 800fe68:	f7ff f9da 	bl	800f220 <mem_malloc>
 800fe6c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800fe6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d101      	bne.n	800fe78 <pbuf_alloc+0x174>
        return NULL;
 800fe74:	2300      	movs	r3, #0
 800fe76:	e02b      	b.n	800fed0 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800fe78:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fe7a:	3310      	adds	r3, #16
 800fe7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe7e:	4413      	add	r3, r2
 800fe80:	3303      	adds	r3, #3
 800fe82:	f023 0303 	bic.w	r3, r3, #3
 800fe86:	4618      	mov	r0, r3
 800fe88:	88b9      	ldrh	r1, [r7, #4]
 800fe8a:	88ba      	ldrh	r2, [r7, #4]
 800fe8c:	2300      	movs	r3, #0
 800fe8e:	9301      	str	r3, [sp, #4]
 800fe90:	887b      	ldrh	r3, [r7, #2]
 800fe92:	9300      	str	r3, [sp, #0]
 800fe94:	460b      	mov	r3, r1
 800fe96:	4601      	mov	r1, r0
 800fe98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fe9a:	f7ff ff09 	bl	800fcb0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800fe9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fea0:	685b      	ldr	r3, [r3, #4]
 800fea2:	f003 0303 	and.w	r3, r3, #3
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d010      	beq.n	800fecc <pbuf_alloc+0x1c8>
 800feaa:	4b0b      	ldr	r3, [pc, #44]	; (800fed8 <pbuf_alloc+0x1d4>)
 800feac:	f44f 7291 	mov.w	r2, #290	; 0x122
 800feb0:	490d      	ldr	r1, [pc, #52]	; (800fee8 <pbuf_alloc+0x1e4>)
 800feb2:	480b      	ldr	r0, [pc, #44]	; (800fee0 <pbuf_alloc+0x1dc>)
 800feb4:	f009 f8ca 	bl	801904c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800feb8:	e008      	b.n	800fecc <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800feba:	4b07      	ldr	r3, [pc, #28]	; (800fed8 <pbuf_alloc+0x1d4>)
 800febc:	f240 1227 	movw	r2, #295	; 0x127
 800fec0:	490a      	ldr	r1, [pc, #40]	; (800feec <pbuf_alloc+0x1e8>)
 800fec2:	4807      	ldr	r0, [pc, #28]	; (800fee0 <pbuf_alloc+0x1dc>)
 800fec4:	f009 f8c2 	bl	801904c <iprintf>
      return NULL;
 800fec8:	2300      	movs	r3, #0
 800feca:	e001      	b.n	800fed0 <pbuf_alloc+0x1cc>
      break;
 800fecc:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800fece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fed0:	4618      	mov	r0, r3
 800fed2:	3728      	adds	r7, #40	; 0x28
 800fed4:	46bd      	mov	sp, r7
 800fed6:	bd80      	pop	{r7, pc}
 800fed8:	0801bc88 	.word	0x0801bc88
 800fedc:	0801bcb8 	.word	0x0801bcb8
 800fee0:	0801bce8 	.word	0x0801bce8
 800fee4:	0801bd10 	.word	0x0801bd10
 800fee8:	0801bd44 	.word	0x0801bd44
 800feec:	0801bd70 	.word	0x0801bd70

0800fef0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800fef0:	b580      	push	{r7, lr}
 800fef2:	b086      	sub	sp, #24
 800fef4:	af02      	add	r7, sp, #8
 800fef6:	6078      	str	r0, [r7, #4]
 800fef8:	460b      	mov	r3, r1
 800fefa:	807b      	strh	r3, [r7, #2]
 800fefc:	4613      	mov	r3, r2
 800fefe:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800ff00:	883b      	ldrh	r3, [r7, #0]
 800ff02:	2b41      	cmp	r3, #65	; 0x41
 800ff04:	d009      	beq.n	800ff1a <pbuf_alloc_reference+0x2a>
 800ff06:	883b      	ldrh	r3, [r7, #0]
 800ff08:	2b01      	cmp	r3, #1
 800ff0a:	d006      	beq.n	800ff1a <pbuf_alloc_reference+0x2a>
 800ff0c:	4b0f      	ldr	r3, [pc, #60]	; (800ff4c <pbuf_alloc_reference+0x5c>)
 800ff0e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800ff12:	490f      	ldr	r1, [pc, #60]	; (800ff50 <pbuf_alloc_reference+0x60>)
 800ff14:	480f      	ldr	r0, [pc, #60]	; (800ff54 <pbuf_alloc_reference+0x64>)
 800ff16:	f009 f899 	bl	801904c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800ff1a:	2007      	movs	r0, #7
 800ff1c:	f7ff fb10 	bl	800f540 <memp_malloc>
 800ff20:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d101      	bne.n	800ff2c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800ff28:	2300      	movs	r3, #0
 800ff2a:	e00b      	b.n	800ff44 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800ff2c:	8879      	ldrh	r1, [r7, #2]
 800ff2e:	887a      	ldrh	r2, [r7, #2]
 800ff30:	2300      	movs	r3, #0
 800ff32:	9301      	str	r3, [sp, #4]
 800ff34:	883b      	ldrh	r3, [r7, #0]
 800ff36:	9300      	str	r3, [sp, #0]
 800ff38:	460b      	mov	r3, r1
 800ff3a:	6879      	ldr	r1, [r7, #4]
 800ff3c:	68f8      	ldr	r0, [r7, #12]
 800ff3e:	f7ff feb7 	bl	800fcb0 <pbuf_init_alloced_pbuf>
  return p;
 800ff42:	68fb      	ldr	r3, [r7, #12]
}
 800ff44:	4618      	mov	r0, r3
 800ff46:	3710      	adds	r7, #16
 800ff48:	46bd      	mov	sp, r7
 800ff4a:	bd80      	pop	{r7, pc}
 800ff4c:	0801bc88 	.word	0x0801bc88
 800ff50:	0801bd8c 	.word	0x0801bd8c
 800ff54:	0801bce8 	.word	0x0801bce8

0800ff58 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800ff58:	b580      	push	{r7, lr}
 800ff5a:	b088      	sub	sp, #32
 800ff5c:	af02      	add	r7, sp, #8
 800ff5e:	607b      	str	r3, [r7, #4]
 800ff60:	4603      	mov	r3, r0
 800ff62:	73fb      	strb	r3, [r7, #15]
 800ff64:	460b      	mov	r3, r1
 800ff66:	81bb      	strh	r3, [r7, #12]
 800ff68:	4613      	mov	r3, r2
 800ff6a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800ff6c:	7bfb      	ldrb	r3, [r7, #15]
 800ff6e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800ff70:	8a7b      	ldrh	r3, [r7, #18]
 800ff72:	3303      	adds	r3, #3
 800ff74:	f023 0203 	bic.w	r2, r3, #3
 800ff78:	89bb      	ldrh	r3, [r7, #12]
 800ff7a:	441a      	add	r2, r3
 800ff7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ff7e:	429a      	cmp	r2, r3
 800ff80:	d901      	bls.n	800ff86 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800ff82:	2300      	movs	r3, #0
 800ff84:	e018      	b.n	800ffb8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800ff86:	6a3b      	ldr	r3, [r7, #32]
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d007      	beq.n	800ff9c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800ff8c:	8a7b      	ldrh	r3, [r7, #18]
 800ff8e:	3303      	adds	r3, #3
 800ff90:	f023 0303 	bic.w	r3, r3, #3
 800ff94:	6a3a      	ldr	r2, [r7, #32]
 800ff96:	4413      	add	r3, r2
 800ff98:	617b      	str	r3, [r7, #20]
 800ff9a:	e001      	b.n	800ffa0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800ff9c:	2300      	movs	r3, #0
 800ff9e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800ffa0:	6878      	ldr	r0, [r7, #4]
 800ffa2:	89b9      	ldrh	r1, [r7, #12]
 800ffa4:	89ba      	ldrh	r2, [r7, #12]
 800ffa6:	2302      	movs	r3, #2
 800ffa8:	9301      	str	r3, [sp, #4]
 800ffaa:	897b      	ldrh	r3, [r7, #10]
 800ffac:	9300      	str	r3, [sp, #0]
 800ffae:	460b      	mov	r3, r1
 800ffb0:	6979      	ldr	r1, [r7, #20]
 800ffb2:	f7ff fe7d 	bl	800fcb0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800ffb6:	687b      	ldr	r3, [r7, #4]
}
 800ffb8:	4618      	mov	r0, r3
 800ffba:	3718      	adds	r7, #24
 800ffbc:	46bd      	mov	sp, r7
 800ffbe:	bd80      	pop	{r7, pc}

0800ffc0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800ffc0:	b580      	push	{r7, lr}
 800ffc2:	b084      	sub	sp, #16
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	6078      	str	r0, [r7, #4]
 800ffc8:	460b      	mov	r3, r1
 800ffca:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d106      	bne.n	800ffe0 <pbuf_realloc+0x20>
 800ffd2:	4b3a      	ldr	r3, [pc, #232]	; (80100bc <pbuf_realloc+0xfc>)
 800ffd4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800ffd8:	4939      	ldr	r1, [pc, #228]	; (80100c0 <pbuf_realloc+0x100>)
 800ffda:	483a      	ldr	r0, [pc, #232]	; (80100c4 <pbuf_realloc+0x104>)
 800ffdc:	f009 f836 	bl	801904c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	891b      	ldrh	r3, [r3, #8]
 800ffe4:	887a      	ldrh	r2, [r7, #2]
 800ffe6:	429a      	cmp	r2, r3
 800ffe8:	d263      	bcs.n	80100b2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	891a      	ldrh	r2, [r3, #8]
 800ffee:	887b      	ldrh	r3, [r7, #2]
 800fff0:	1ad3      	subs	r3, r2, r3
 800fff2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800fff4:	887b      	ldrh	r3, [r7, #2]
 800fff6:	817b      	strh	r3, [r7, #10]
  q = p;
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800fffc:	e018      	b.n	8010030 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	895b      	ldrh	r3, [r3, #10]
 8010002:	897a      	ldrh	r2, [r7, #10]
 8010004:	1ad3      	subs	r3, r2, r3
 8010006:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	891a      	ldrh	r2, [r3, #8]
 801000c:	893b      	ldrh	r3, [r7, #8]
 801000e:	1ad3      	subs	r3, r2, r3
 8010010:	b29a      	uxth	r2, r3
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	2b00      	cmp	r3, #0
 8010020:	d106      	bne.n	8010030 <pbuf_realloc+0x70>
 8010022:	4b26      	ldr	r3, [pc, #152]	; (80100bc <pbuf_realloc+0xfc>)
 8010024:	f240 12af 	movw	r2, #431	; 0x1af
 8010028:	4927      	ldr	r1, [pc, #156]	; (80100c8 <pbuf_realloc+0x108>)
 801002a:	4826      	ldr	r0, [pc, #152]	; (80100c4 <pbuf_realloc+0x104>)
 801002c:	f009 f80e 	bl	801904c <iprintf>
  while (rem_len > q->len) {
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	895b      	ldrh	r3, [r3, #10]
 8010034:	897a      	ldrh	r2, [r7, #10]
 8010036:	429a      	cmp	r2, r3
 8010038:	d8e1      	bhi.n	800fffe <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	7b1b      	ldrb	r3, [r3, #12]
 801003e:	f003 030f 	and.w	r3, r3, #15
 8010042:	2b00      	cmp	r3, #0
 8010044:	d121      	bne.n	801008a <pbuf_realloc+0xca>
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	895b      	ldrh	r3, [r3, #10]
 801004a:	897a      	ldrh	r2, [r7, #10]
 801004c:	429a      	cmp	r2, r3
 801004e:	d01c      	beq.n	801008a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	7b5b      	ldrb	r3, [r3, #13]
 8010054:	f003 0302 	and.w	r3, r3, #2
 8010058:	2b00      	cmp	r3, #0
 801005a:	d116      	bne.n	801008a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	685a      	ldr	r2, [r3, #4]
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	1ad3      	subs	r3, r2, r3
 8010064:	b29a      	uxth	r2, r3
 8010066:	897b      	ldrh	r3, [r7, #10]
 8010068:	4413      	add	r3, r2
 801006a:	b29b      	uxth	r3, r3
 801006c:	4619      	mov	r1, r3
 801006e:	68f8      	ldr	r0, [r7, #12]
 8010070:	f7fe ffda 	bl	800f028 <mem_trim>
 8010074:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	2b00      	cmp	r3, #0
 801007a:	d106      	bne.n	801008a <pbuf_realloc+0xca>
 801007c:	4b0f      	ldr	r3, [pc, #60]	; (80100bc <pbuf_realloc+0xfc>)
 801007e:	f240 12bd 	movw	r2, #445	; 0x1bd
 8010082:	4912      	ldr	r1, [pc, #72]	; (80100cc <pbuf_realloc+0x10c>)
 8010084:	480f      	ldr	r0, [pc, #60]	; (80100c4 <pbuf_realloc+0x104>)
 8010086:	f008 ffe1 	bl	801904c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	897a      	ldrh	r2, [r7, #10]
 801008e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	895a      	ldrh	r2, [r3, #10]
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	2b00      	cmp	r3, #0
 801009e:	d004      	beq.n	80100aa <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	4618      	mov	r0, r3
 80100a6:	f000 f911 	bl	80102cc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	2200      	movs	r2, #0
 80100ae:	601a      	str	r2, [r3, #0]
 80100b0:	e000      	b.n	80100b4 <pbuf_realloc+0xf4>
    return;
 80100b2:	bf00      	nop

}
 80100b4:	3710      	adds	r7, #16
 80100b6:	46bd      	mov	sp, r7
 80100b8:	bd80      	pop	{r7, pc}
 80100ba:	bf00      	nop
 80100bc:	0801bc88 	.word	0x0801bc88
 80100c0:	0801bda0 	.word	0x0801bda0
 80100c4:	0801bce8 	.word	0x0801bce8
 80100c8:	0801bdb8 	.word	0x0801bdb8
 80100cc:	0801bdd0 	.word	0x0801bdd0

080100d0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80100d0:	b580      	push	{r7, lr}
 80100d2:	b086      	sub	sp, #24
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	60f8      	str	r0, [r7, #12]
 80100d8:	60b9      	str	r1, [r7, #8]
 80100da:	4613      	mov	r3, r2
 80100dc:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d106      	bne.n	80100f2 <pbuf_add_header_impl+0x22>
 80100e4:	4b2b      	ldr	r3, [pc, #172]	; (8010194 <pbuf_add_header_impl+0xc4>)
 80100e6:	f240 12df 	movw	r2, #479	; 0x1df
 80100ea:	492b      	ldr	r1, [pc, #172]	; (8010198 <pbuf_add_header_impl+0xc8>)
 80100ec:	482b      	ldr	r0, [pc, #172]	; (801019c <pbuf_add_header_impl+0xcc>)
 80100ee:	f008 ffad 	bl	801904c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d003      	beq.n	8010100 <pbuf_add_header_impl+0x30>
 80100f8:	68bb      	ldr	r3, [r7, #8]
 80100fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80100fe:	d301      	bcc.n	8010104 <pbuf_add_header_impl+0x34>
    return 1;
 8010100:	2301      	movs	r3, #1
 8010102:	e043      	b.n	801018c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8010104:	68bb      	ldr	r3, [r7, #8]
 8010106:	2b00      	cmp	r3, #0
 8010108:	d101      	bne.n	801010e <pbuf_add_header_impl+0x3e>
    return 0;
 801010a:	2300      	movs	r3, #0
 801010c:	e03e      	b.n	801018c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 801010e:	68bb      	ldr	r3, [r7, #8]
 8010110:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	891a      	ldrh	r2, [r3, #8]
 8010116:	8a7b      	ldrh	r3, [r7, #18]
 8010118:	4413      	add	r3, r2
 801011a:	b29b      	uxth	r3, r3
 801011c:	8a7a      	ldrh	r2, [r7, #18]
 801011e:	429a      	cmp	r2, r3
 8010120:	d901      	bls.n	8010126 <pbuf_add_header_impl+0x56>
    return 1;
 8010122:	2301      	movs	r3, #1
 8010124:	e032      	b.n	801018c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	7b1b      	ldrb	r3, [r3, #12]
 801012a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801012c:	8a3b      	ldrh	r3, [r7, #16]
 801012e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010132:	2b00      	cmp	r3, #0
 8010134:	d00c      	beq.n	8010150 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	685a      	ldr	r2, [r3, #4]
 801013a:	68bb      	ldr	r3, [r7, #8]
 801013c:	425b      	negs	r3, r3
 801013e:	4413      	add	r3, r2
 8010140:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	3310      	adds	r3, #16
 8010146:	697a      	ldr	r2, [r7, #20]
 8010148:	429a      	cmp	r2, r3
 801014a:	d20d      	bcs.n	8010168 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 801014c:	2301      	movs	r3, #1
 801014e:	e01d      	b.n	801018c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8010150:	79fb      	ldrb	r3, [r7, #7]
 8010152:	2b00      	cmp	r3, #0
 8010154:	d006      	beq.n	8010164 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	685a      	ldr	r2, [r3, #4]
 801015a:	68bb      	ldr	r3, [r7, #8]
 801015c:	425b      	negs	r3, r3
 801015e:	4413      	add	r3, r2
 8010160:	617b      	str	r3, [r7, #20]
 8010162:	e001      	b.n	8010168 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8010164:	2301      	movs	r3, #1
 8010166:	e011      	b.n	801018c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	697a      	ldr	r2, [r7, #20]
 801016c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	895a      	ldrh	r2, [r3, #10]
 8010172:	8a7b      	ldrh	r3, [r7, #18]
 8010174:	4413      	add	r3, r2
 8010176:	b29a      	uxth	r2, r3
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	891a      	ldrh	r2, [r3, #8]
 8010180:	8a7b      	ldrh	r3, [r7, #18]
 8010182:	4413      	add	r3, r2
 8010184:	b29a      	uxth	r2, r3
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	811a      	strh	r2, [r3, #8]


  return 0;
 801018a:	2300      	movs	r3, #0
}
 801018c:	4618      	mov	r0, r3
 801018e:	3718      	adds	r7, #24
 8010190:	46bd      	mov	sp, r7
 8010192:	bd80      	pop	{r7, pc}
 8010194:	0801bc88 	.word	0x0801bc88
 8010198:	0801bdec 	.word	0x0801bdec
 801019c:	0801bce8 	.word	0x0801bce8

080101a0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80101a0:	b580      	push	{r7, lr}
 80101a2:	b082      	sub	sp, #8
 80101a4:	af00      	add	r7, sp, #0
 80101a6:	6078      	str	r0, [r7, #4]
 80101a8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80101aa:	2200      	movs	r2, #0
 80101ac:	6839      	ldr	r1, [r7, #0]
 80101ae:	6878      	ldr	r0, [r7, #4]
 80101b0:	f7ff ff8e 	bl	80100d0 <pbuf_add_header_impl>
 80101b4:	4603      	mov	r3, r0
}
 80101b6:	4618      	mov	r0, r3
 80101b8:	3708      	adds	r7, #8
 80101ba:	46bd      	mov	sp, r7
 80101bc:	bd80      	pop	{r7, pc}
	...

080101c0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80101c0:	b580      	push	{r7, lr}
 80101c2:	b084      	sub	sp, #16
 80101c4:	af00      	add	r7, sp, #0
 80101c6:	6078      	str	r0, [r7, #4]
 80101c8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d106      	bne.n	80101de <pbuf_remove_header+0x1e>
 80101d0:	4b20      	ldr	r3, [pc, #128]	; (8010254 <pbuf_remove_header+0x94>)
 80101d2:	f240 224b 	movw	r2, #587	; 0x24b
 80101d6:	4920      	ldr	r1, [pc, #128]	; (8010258 <pbuf_remove_header+0x98>)
 80101d8:	4820      	ldr	r0, [pc, #128]	; (801025c <pbuf_remove_header+0x9c>)
 80101da:	f008 ff37 	bl	801904c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d003      	beq.n	80101ec <pbuf_remove_header+0x2c>
 80101e4:	683b      	ldr	r3, [r7, #0]
 80101e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80101ea:	d301      	bcc.n	80101f0 <pbuf_remove_header+0x30>
    return 1;
 80101ec:	2301      	movs	r3, #1
 80101ee:	e02c      	b.n	801024a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80101f0:	683b      	ldr	r3, [r7, #0]
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d101      	bne.n	80101fa <pbuf_remove_header+0x3a>
    return 0;
 80101f6:	2300      	movs	r3, #0
 80101f8:	e027      	b.n	801024a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80101fa:	683b      	ldr	r3, [r7, #0]
 80101fc:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	895b      	ldrh	r3, [r3, #10]
 8010202:	89fa      	ldrh	r2, [r7, #14]
 8010204:	429a      	cmp	r2, r3
 8010206:	d908      	bls.n	801021a <pbuf_remove_header+0x5a>
 8010208:	4b12      	ldr	r3, [pc, #72]	; (8010254 <pbuf_remove_header+0x94>)
 801020a:	f240 2255 	movw	r2, #597	; 0x255
 801020e:	4914      	ldr	r1, [pc, #80]	; (8010260 <pbuf_remove_header+0xa0>)
 8010210:	4812      	ldr	r0, [pc, #72]	; (801025c <pbuf_remove_header+0x9c>)
 8010212:	f008 ff1b 	bl	801904c <iprintf>
 8010216:	2301      	movs	r3, #1
 8010218:	e017      	b.n	801024a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	685b      	ldr	r3, [r3, #4]
 801021e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	685a      	ldr	r2, [r3, #4]
 8010224:	683b      	ldr	r3, [r7, #0]
 8010226:	441a      	add	r2, r3
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	895a      	ldrh	r2, [r3, #10]
 8010230:	89fb      	ldrh	r3, [r7, #14]
 8010232:	1ad3      	subs	r3, r2, r3
 8010234:	b29a      	uxth	r2, r3
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	891a      	ldrh	r2, [r3, #8]
 801023e:	89fb      	ldrh	r3, [r7, #14]
 8010240:	1ad3      	subs	r3, r2, r3
 8010242:	b29a      	uxth	r2, r3
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8010248:	2300      	movs	r3, #0
}
 801024a:	4618      	mov	r0, r3
 801024c:	3710      	adds	r7, #16
 801024e:	46bd      	mov	sp, r7
 8010250:	bd80      	pop	{r7, pc}
 8010252:	bf00      	nop
 8010254:	0801bc88 	.word	0x0801bc88
 8010258:	0801bdec 	.word	0x0801bdec
 801025c:	0801bce8 	.word	0x0801bce8
 8010260:	0801bdf8 	.word	0x0801bdf8

08010264 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8010264:	b580      	push	{r7, lr}
 8010266:	b082      	sub	sp, #8
 8010268:	af00      	add	r7, sp, #0
 801026a:	6078      	str	r0, [r7, #4]
 801026c:	460b      	mov	r3, r1
 801026e:	807b      	strh	r3, [r7, #2]
 8010270:	4613      	mov	r3, r2
 8010272:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8010274:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010278:	2b00      	cmp	r3, #0
 801027a:	da08      	bge.n	801028e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 801027c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010280:	425b      	negs	r3, r3
 8010282:	4619      	mov	r1, r3
 8010284:	6878      	ldr	r0, [r7, #4]
 8010286:	f7ff ff9b 	bl	80101c0 <pbuf_remove_header>
 801028a:	4603      	mov	r3, r0
 801028c:	e007      	b.n	801029e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801028e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010292:	787a      	ldrb	r2, [r7, #1]
 8010294:	4619      	mov	r1, r3
 8010296:	6878      	ldr	r0, [r7, #4]
 8010298:	f7ff ff1a 	bl	80100d0 <pbuf_add_header_impl>
 801029c:	4603      	mov	r3, r0
  }
}
 801029e:	4618      	mov	r0, r3
 80102a0:	3708      	adds	r7, #8
 80102a2:	46bd      	mov	sp, r7
 80102a4:	bd80      	pop	{r7, pc}

080102a6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80102a6:	b580      	push	{r7, lr}
 80102a8:	b082      	sub	sp, #8
 80102aa:	af00      	add	r7, sp, #0
 80102ac:	6078      	str	r0, [r7, #4]
 80102ae:	460b      	mov	r3, r1
 80102b0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80102b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80102b6:	2201      	movs	r2, #1
 80102b8:	4619      	mov	r1, r3
 80102ba:	6878      	ldr	r0, [r7, #4]
 80102bc:	f7ff ffd2 	bl	8010264 <pbuf_header_impl>
 80102c0:	4603      	mov	r3, r0
}
 80102c2:	4618      	mov	r0, r3
 80102c4:	3708      	adds	r7, #8
 80102c6:	46bd      	mov	sp, r7
 80102c8:	bd80      	pop	{r7, pc}
	...

080102cc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80102cc:	b580      	push	{r7, lr}
 80102ce:	b086      	sub	sp, #24
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d10b      	bne.n	80102f2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d106      	bne.n	80102ee <pbuf_free+0x22>
 80102e0:	4b38      	ldr	r3, [pc, #224]	; (80103c4 <pbuf_free+0xf8>)
 80102e2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80102e6:	4938      	ldr	r1, [pc, #224]	; (80103c8 <pbuf_free+0xfc>)
 80102e8:	4838      	ldr	r0, [pc, #224]	; (80103cc <pbuf_free+0x100>)
 80102ea:	f008 feaf 	bl	801904c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80102ee:	2300      	movs	r3, #0
 80102f0:	e063      	b.n	80103ba <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80102f2:	2300      	movs	r3, #0
 80102f4:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80102f6:	e05c      	b.n	80103b2 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	7b9b      	ldrb	r3, [r3, #14]
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d106      	bne.n	801030e <pbuf_free+0x42>
 8010300:	4b30      	ldr	r3, [pc, #192]	; (80103c4 <pbuf_free+0xf8>)
 8010302:	f240 22f1 	movw	r2, #753	; 0x2f1
 8010306:	4932      	ldr	r1, [pc, #200]	; (80103d0 <pbuf_free+0x104>)
 8010308:	4830      	ldr	r0, [pc, #192]	; (80103cc <pbuf_free+0x100>)
 801030a:	f008 fe9f 	bl	801904c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	7b9b      	ldrb	r3, [r3, #14]
 8010312:	3b01      	subs	r3, #1
 8010314:	b2da      	uxtb	r2, r3
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	739a      	strb	r2, [r3, #14]
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	7b9b      	ldrb	r3, [r3, #14]
 801031e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8010320:	7dbb      	ldrb	r3, [r7, #22]
 8010322:	2b00      	cmp	r3, #0
 8010324:	d143      	bne.n	80103ae <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	7b1b      	ldrb	r3, [r3, #12]
 8010330:	f003 030f 	and.w	r3, r3, #15
 8010334:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	7b5b      	ldrb	r3, [r3, #13]
 801033a:	f003 0302 	and.w	r3, r3, #2
 801033e:	2b00      	cmp	r3, #0
 8010340:	d011      	beq.n	8010366 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8010346:	68bb      	ldr	r3, [r7, #8]
 8010348:	691b      	ldr	r3, [r3, #16]
 801034a:	2b00      	cmp	r3, #0
 801034c:	d106      	bne.n	801035c <pbuf_free+0x90>
 801034e:	4b1d      	ldr	r3, [pc, #116]	; (80103c4 <pbuf_free+0xf8>)
 8010350:	f240 22ff 	movw	r2, #767	; 0x2ff
 8010354:	491f      	ldr	r1, [pc, #124]	; (80103d4 <pbuf_free+0x108>)
 8010356:	481d      	ldr	r0, [pc, #116]	; (80103cc <pbuf_free+0x100>)
 8010358:	f008 fe78 	bl	801904c <iprintf>
        pc->custom_free_function(p);
 801035c:	68bb      	ldr	r3, [r7, #8]
 801035e:	691b      	ldr	r3, [r3, #16]
 8010360:	6878      	ldr	r0, [r7, #4]
 8010362:	4798      	blx	r3
 8010364:	e01d      	b.n	80103a2 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8010366:	7bfb      	ldrb	r3, [r7, #15]
 8010368:	2b02      	cmp	r3, #2
 801036a:	d104      	bne.n	8010376 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 801036c:	6879      	ldr	r1, [r7, #4]
 801036e:	2008      	movs	r0, #8
 8010370:	f7ff f956 	bl	800f620 <memp_free>
 8010374:	e015      	b.n	80103a2 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8010376:	7bfb      	ldrb	r3, [r7, #15]
 8010378:	2b01      	cmp	r3, #1
 801037a:	d104      	bne.n	8010386 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 801037c:	6879      	ldr	r1, [r7, #4]
 801037e:	2007      	movs	r0, #7
 8010380:	f7ff f94e 	bl	800f620 <memp_free>
 8010384:	e00d      	b.n	80103a2 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8010386:	7bfb      	ldrb	r3, [r7, #15]
 8010388:	2b00      	cmp	r3, #0
 801038a:	d103      	bne.n	8010394 <pbuf_free+0xc8>
          mem_free(p);
 801038c:	6878      	ldr	r0, [r7, #4]
 801038e:	f7fe fde1 	bl	800ef54 <mem_free>
 8010392:	e006      	b.n	80103a2 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8010394:	4b0b      	ldr	r3, [pc, #44]	; (80103c4 <pbuf_free+0xf8>)
 8010396:	f240 320f 	movw	r2, #783	; 0x30f
 801039a:	490f      	ldr	r1, [pc, #60]	; (80103d8 <pbuf_free+0x10c>)
 801039c:	480b      	ldr	r0, [pc, #44]	; (80103cc <pbuf_free+0x100>)
 801039e:	f008 fe55 	bl	801904c <iprintf>
        }
      }
      count++;
 80103a2:	7dfb      	ldrb	r3, [r7, #23]
 80103a4:	3301      	adds	r3, #1
 80103a6:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80103a8:	693b      	ldr	r3, [r7, #16]
 80103aa:	607b      	str	r3, [r7, #4]
 80103ac:	e001      	b.n	80103b2 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80103ae:	2300      	movs	r3, #0
 80103b0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d19f      	bne.n	80102f8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80103b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80103ba:	4618      	mov	r0, r3
 80103bc:	3718      	adds	r7, #24
 80103be:	46bd      	mov	sp, r7
 80103c0:	bd80      	pop	{r7, pc}
 80103c2:	bf00      	nop
 80103c4:	0801bc88 	.word	0x0801bc88
 80103c8:	0801bdec 	.word	0x0801bdec
 80103cc:	0801bce8 	.word	0x0801bce8
 80103d0:	0801be18 	.word	0x0801be18
 80103d4:	0801be30 	.word	0x0801be30
 80103d8:	0801be54 	.word	0x0801be54

080103dc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80103dc:	b480      	push	{r7}
 80103de:	b085      	sub	sp, #20
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80103e4:	2300      	movs	r3, #0
 80103e6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80103e8:	e005      	b.n	80103f6 <pbuf_clen+0x1a>
    ++len;
 80103ea:	89fb      	ldrh	r3, [r7, #14]
 80103ec:	3301      	adds	r3, #1
 80103ee:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d1f6      	bne.n	80103ea <pbuf_clen+0xe>
  }
  return len;
 80103fc:	89fb      	ldrh	r3, [r7, #14]
}
 80103fe:	4618      	mov	r0, r3
 8010400:	3714      	adds	r7, #20
 8010402:	46bd      	mov	sp, r7
 8010404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010408:	4770      	bx	lr
	...

0801040c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 801040c:	b580      	push	{r7, lr}
 801040e:	b082      	sub	sp, #8
 8010410:	af00      	add	r7, sp, #0
 8010412:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	2b00      	cmp	r3, #0
 8010418:	d010      	beq.n	801043c <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	7b9b      	ldrb	r3, [r3, #14]
 801041e:	3301      	adds	r3, #1
 8010420:	b2da      	uxtb	r2, r3
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	7b9b      	ldrb	r3, [r3, #14]
 801042a:	2b00      	cmp	r3, #0
 801042c:	d106      	bne.n	801043c <pbuf_ref+0x30>
 801042e:	4b05      	ldr	r3, [pc, #20]	; (8010444 <pbuf_ref+0x38>)
 8010430:	f240 3242 	movw	r2, #834	; 0x342
 8010434:	4904      	ldr	r1, [pc, #16]	; (8010448 <pbuf_ref+0x3c>)
 8010436:	4805      	ldr	r0, [pc, #20]	; (801044c <pbuf_ref+0x40>)
 8010438:	f008 fe08 	bl	801904c <iprintf>
  }
}
 801043c:	bf00      	nop
 801043e:	3708      	adds	r7, #8
 8010440:	46bd      	mov	sp, r7
 8010442:	bd80      	pop	{r7, pc}
 8010444:	0801bc88 	.word	0x0801bc88
 8010448:	0801be68 	.word	0x0801be68
 801044c:	0801bce8 	.word	0x0801bce8

08010450 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8010450:	b580      	push	{r7, lr}
 8010452:	b084      	sub	sp, #16
 8010454:	af00      	add	r7, sp, #0
 8010456:	6078      	str	r0, [r7, #4]
 8010458:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	2b00      	cmp	r3, #0
 801045e:	d002      	beq.n	8010466 <pbuf_cat+0x16>
 8010460:	683b      	ldr	r3, [r7, #0]
 8010462:	2b00      	cmp	r3, #0
 8010464:	d107      	bne.n	8010476 <pbuf_cat+0x26>
 8010466:	4b20      	ldr	r3, [pc, #128]	; (80104e8 <pbuf_cat+0x98>)
 8010468:	f240 3259 	movw	r2, #857	; 0x359
 801046c:	491f      	ldr	r1, [pc, #124]	; (80104ec <pbuf_cat+0x9c>)
 801046e:	4820      	ldr	r0, [pc, #128]	; (80104f0 <pbuf_cat+0xa0>)
 8010470:	f008 fdec 	bl	801904c <iprintf>
 8010474:	e034      	b.n	80104e0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	60fb      	str	r3, [r7, #12]
 801047a:	e00a      	b.n	8010492 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	891a      	ldrh	r2, [r3, #8]
 8010480:	683b      	ldr	r3, [r7, #0]
 8010482:	891b      	ldrh	r3, [r3, #8]
 8010484:	4413      	add	r3, r2
 8010486:	b29a      	uxth	r2, r3
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	60fb      	str	r3, [r7, #12]
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	2b00      	cmp	r3, #0
 8010498:	d1f0      	bne.n	801047c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	891a      	ldrh	r2, [r3, #8]
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	895b      	ldrh	r3, [r3, #10]
 80104a2:	429a      	cmp	r2, r3
 80104a4:	d006      	beq.n	80104b4 <pbuf_cat+0x64>
 80104a6:	4b10      	ldr	r3, [pc, #64]	; (80104e8 <pbuf_cat+0x98>)
 80104a8:	f240 3262 	movw	r2, #866	; 0x362
 80104ac:	4911      	ldr	r1, [pc, #68]	; (80104f4 <pbuf_cat+0xa4>)
 80104ae:	4810      	ldr	r0, [pc, #64]	; (80104f0 <pbuf_cat+0xa0>)
 80104b0:	f008 fdcc 	bl	801904c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d006      	beq.n	80104ca <pbuf_cat+0x7a>
 80104bc:	4b0a      	ldr	r3, [pc, #40]	; (80104e8 <pbuf_cat+0x98>)
 80104be:	f240 3263 	movw	r2, #867	; 0x363
 80104c2:	490d      	ldr	r1, [pc, #52]	; (80104f8 <pbuf_cat+0xa8>)
 80104c4:	480a      	ldr	r0, [pc, #40]	; (80104f0 <pbuf_cat+0xa0>)
 80104c6:	f008 fdc1 	bl	801904c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	891a      	ldrh	r2, [r3, #8]
 80104ce:	683b      	ldr	r3, [r7, #0]
 80104d0:	891b      	ldrh	r3, [r3, #8]
 80104d2:	4413      	add	r3, r2
 80104d4:	b29a      	uxth	r2, r3
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	683a      	ldr	r2, [r7, #0]
 80104de:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80104e0:	3710      	adds	r7, #16
 80104e2:	46bd      	mov	sp, r7
 80104e4:	bd80      	pop	{r7, pc}
 80104e6:	bf00      	nop
 80104e8:	0801bc88 	.word	0x0801bc88
 80104ec:	0801be7c 	.word	0x0801be7c
 80104f0:	0801bce8 	.word	0x0801bce8
 80104f4:	0801beb4 	.word	0x0801beb4
 80104f8:	0801bee4 	.word	0x0801bee4

080104fc <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80104fc:	b580      	push	{r7, lr}
 80104fe:	b086      	sub	sp, #24
 8010500:	af00      	add	r7, sp, #0
 8010502:	6078      	str	r0, [r7, #4]
 8010504:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8010506:	2300      	movs	r3, #0
 8010508:	617b      	str	r3, [r7, #20]
 801050a:	2300      	movs	r3, #0
 801050c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	2b00      	cmp	r3, #0
 8010512:	d008      	beq.n	8010526 <pbuf_copy+0x2a>
 8010514:	683b      	ldr	r3, [r7, #0]
 8010516:	2b00      	cmp	r3, #0
 8010518:	d005      	beq.n	8010526 <pbuf_copy+0x2a>
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	891a      	ldrh	r2, [r3, #8]
 801051e:	683b      	ldr	r3, [r7, #0]
 8010520:	891b      	ldrh	r3, [r3, #8]
 8010522:	429a      	cmp	r2, r3
 8010524:	d209      	bcs.n	801053a <pbuf_copy+0x3e>
 8010526:	4b57      	ldr	r3, [pc, #348]	; (8010684 <pbuf_copy+0x188>)
 8010528:	f240 32c9 	movw	r2, #969	; 0x3c9
 801052c:	4956      	ldr	r1, [pc, #344]	; (8010688 <pbuf_copy+0x18c>)
 801052e:	4857      	ldr	r0, [pc, #348]	; (801068c <pbuf_copy+0x190>)
 8010530:	f008 fd8c 	bl	801904c <iprintf>
 8010534:	f06f 030f 	mvn.w	r3, #15
 8010538:	e09f      	b.n	801067a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	895b      	ldrh	r3, [r3, #10]
 801053e:	461a      	mov	r2, r3
 8010540:	697b      	ldr	r3, [r7, #20]
 8010542:	1ad2      	subs	r2, r2, r3
 8010544:	683b      	ldr	r3, [r7, #0]
 8010546:	895b      	ldrh	r3, [r3, #10]
 8010548:	4619      	mov	r1, r3
 801054a:	693b      	ldr	r3, [r7, #16]
 801054c:	1acb      	subs	r3, r1, r3
 801054e:	429a      	cmp	r2, r3
 8010550:	d306      	bcc.n	8010560 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8010552:	683b      	ldr	r3, [r7, #0]
 8010554:	895b      	ldrh	r3, [r3, #10]
 8010556:	461a      	mov	r2, r3
 8010558:	693b      	ldr	r3, [r7, #16]
 801055a:	1ad3      	subs	r3, r2, r3
 801055c:	60fb      	str	r3, [r7, #12]
 801055e:	e005      	b.n	801056c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	895b      	ldrh	r3, [r3, #10]
 8010564:	461a      	mov	r2, r3
 8010566:	697b      	ldr	r3, [r7, #20]
 8010568:	1ad3      	subs	r3, r2, r3
 801056a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	685a      	ldr	r2, [r3, #4]
 8010570:	697b      	ldr	r3, [r7, #20]
 8010572:	18d0      	adds	r0, r2, r3
 8010574:	683b      	ldr	r3, [r7, #0]
 8010576:	685a      	ldr	r2, [r3, #4]
 8010578:	693b      	ldr	r3, [r7, #16]
 801057a:	4413      	add	r3, r2
 801057c:	68fa      	ldr	r2, [r7, #12]
 801057e:	4619      	mov	r1, r3
 8010580:	f008 ff32 	bl	80193e8 <memcpy>
    offset_to += len;
 8010584:	697a      	ldr	r2, [r7, #20]
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	4413      	add	r3, r2
 801058a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 801058c:	693a      	ldr	r2, [r7, #16]
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	4413      	add	r3, r2
 8010592:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	895b      	ldrh	r3, [r3, #10]
 8010598:	461a      	mov	r2, r3
 801059a:	697b      	ldr	r3, [r7, #20]
 801059c:	4293      	cmp	r3, r2
 801059e:	d906      	bls.n	80105ae <pbuf_copy+0xb2>
 80105a0:	4b38      	ldr	r3, [pc, #224]	; (8010684 <pbuf_copy+0x188>)
 80105a2:	f240 32d9 	movw	r2, #985	; 0x3d9
 80105a6:	493a      	ldr	r1, [pc, #232]	; (8010690 <pbuf_copy+0x194>)
 80105a8:	4838      	ldr	r0, [pc, #224]	; (801068c <pbuf_copy+0x190>)
 80105aa:	f008 fd4f 	bl	801904c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80105ae:	683b      	ldr	r3, [r7, #0]
 80105b0:	895b      	ldrh	r3, [r3, #10]
 80105b2:	461a      	mov	r2, r3
 80105b4:	693b      	ldr	r3, [r7, #16]
 80105b6:	4293      	cmp	r3, r2
 80105b8:	d906      	bls.n	80105c8 <pbuf_copy+0xcc>
 80105ba:	4b32      	ldr	r3, [pc, #200]	; (8010684 <pbuf_copy+0x188>)
 80105bc:	f240 32da 	movw	r2, #986	; 0x3da
 80105c0:	4934      	ldr	r1, [pc, #208]	; (8010694 <pbuf_copy+0x198>)
 80105c2:	4832      	ldr	r0, [pc, #200]	; (801068c <pbuf_copy+0x190>)
 80105c4:	f008 fd42 	bl	801904c <iprintf>
    if (offset_from >= p_from->len) {
 80105c8:	683b      	ldr	r3, [r7, #0]
 80105ca:	895b      	ldrh	r3, [r3, #10]
 80105cc:	461a      	mov	r2, r3
 80105ce:	693b      	ldr	r3, [r7, #16]
 80105d0:	4293      	cmp	r3, r2
 80105d2:	d304      	bcc.n	80105de <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80105d4:	2300      	movs	r3, #0
 80105d6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80105d8:	683b      	ldr	r3, [r7, #0]
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	895b      	ldrh	r3, [r3, #10]
 80105e2:	461a      	mov	r2, r3
 80105e4:	697b      	ldr	r3, [r7, #20]
 80105e6:	4293      	cmp	r3, r2
 80105e8:	d114      	bne.n	8010614 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80105ea:	2300      	movs	r3, #0
 80105ec:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d10c      	bne.n	8010614 <pbuf_copy+0x118>
 80105fa:	683b      	ldr	r3, [r7, #0]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d009      	beq.n	8010614 <pbuf_copy+0x118>
 8010600:	4b20      	ldr	r3, [pc, #128]	; (8010684 <pbuf_copy+0x188>)
 8010602:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8010606:	4924      	ldr	r1, [pc, #144]	; (8010698 <pbuf_copy+0x19c>)
 8010608:	4820      	ldr	r0, [pc, #128]	; (801068c <pbuf_copy+0x190>)
 801060a:	f008 fd1f 	bl	801904c <iprintf>
 801060e:	f06f 030f 	mvn.w	r3, #15
 8010612:	e032      	b.n	801067a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8010614:	683b      	ldr	r3, [r7, #0]
 8010616:	2b00      	cmp	r3, #0
 8010618:	d013      	beq.n	8010642 <pbuf_copy+0x146>
 801061a:	683b      	ldr	r3, [r7, #0]
 801061c:	895a      	ldrh	r2, [r3, #10]
 801061e:	683b      	ldr	r3, [r7, #0]
 8010620:	891b      	ldrh	r3, [r3, #8]
 8010622:	429a      	cmp	r2, r3
 8010624:	d10d      	bne.n	8010642 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010626:	683b      	ldr	r3, [r7, #0]
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	2b00      	cmp	r3, #0
 801062c:	d009      	beq.n	8010642 <pbuf_copy+0x146>
 801062e:	4b15      	ldr	r3, [pc, #84]	; (8010684 <pbuf_copy+0x188>)
 8010630:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8010634:	4919      	ldr	r1, [pc, #100]	; (801069c <pbuf_copy+0x1a0>)
 8010636:	4815      	ldr	r0, [pc, #84]	; (801068c <pbuf_copy+0x190>)
 8010638:	f008 fd08 	bl	801904c <iprintf>
 801063c:	f06f 0305 	mvn.w	r3, #5
 8010640:	e01b      	b.n	801067a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	2b00      	cmp	r3, #0
 8010646:	d013      	beq.n	8010670 <pbuf_copy+0x174>
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	895a      	ldrh	r2, [r3, #10]
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	891b      	ldrh	r3, [r3, #8]
 8010650:	429a      	cmp	r2, r3
 8010652:	d10d      	bne.n	8010670 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	2b00      	cmp	r3, #0
 801065a:	d009      	beq.n	8010670 <pbuf_copy+0x174>
 801065c:	4b09      	ldr	r3, [pc, #36]	; (8010684 <pbuf_copy+0x188>)
 801065e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8010662:	490e      	ldr	r1, [pc, #56]	; (801069c <pbuf_copy+0x1a0>)
 8010664:	4809      	ldr	r0, [pc, #36]	; (801068c <pbuf_copy+0x190>)
 8010666:	f008 fcf1 	bl	801904c <iprintf>
 801066a:	f06f 0305 	mvn.w	r3, #5
 801066e:	e004      	b.n	801067a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8010670:	683b      	ldr	r3, [r7, #0]
 8010672:	2b00      	cmp	r3, #0
 8010674:	f47f af61 	bne.w	801053a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8010678:	2300      	movs	r3, #0
}
 801067a:	4618      	mov	r0, r3
 801067c:	3718      	adds	r7, #24
 801067e:	46bd      	mov	sp, r7
 8010680:	bd80      	pop	{r7, pc}
 8010682:	bf00      	nop
 8010684:	0801bc88 	.word	0x0801bc88
 8010688:	0801bf30 	.word	0x0801bf30
 801068c:	0801bce8 	.word	0x0801bce8
 8010690:	0801bf60 	.word	0x0801bf60
 8010694:	0801bf78 	.word	0x0801bf78
 8010698:	0801bf94 	.word	0x0801bf94
 801069c:	0801bfa4 	.word	0x0801bfa4

080106a0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80106a0:	b580      	push	{r7, lr}
 80106a2:	b088      	sub	sp, #32
 80106a4:	af00      	add	r7, sp, #0
 80106a6:	60f8      	str	r0, [r7, #12]
 80106a8:	60b9      	str	r1, [r7, #8]
 80106aa:	4611      	mov	r1, r2
 80106ac:	461a      	mov	r2, r3
 80106ae:	460b      	mov	r3, r1
 80106b0:	80fb      	strh	r3, [r7, #6]
 80106b2:	4613      	mov	r3, r2
 80106b4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80106b6:	2300      	movs	r3, #0
 80106b8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80106ba:	2300      	movs	r3, #0
 80106bc:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d108      	bne.n	80106d6 <pbuf_copy_partial+0x36>
 80106c4:	4b2b      	ldr	r3, [pc, #172]	; (8010774 <pbuf_copy_partial+0xd4>)
 80106c6:	f240 420a 	movw	r2, #1034	; 0x40a
 80106ca:	492b      	ldr	r1, [pc, #172]	; (8010778 <pbuf_copy_partial+0xd8>)
 80106cc:	482b      	ldr	r0, [pc, #172]	; (801077c <pbuf_copy_partial+0xdc>)
 80106ce:	f008 fcbd 	bl	801904c <iprintf>
 80106d2:	2300      	movs	r3, #0
 80106d4:	e04a      	b.n	801076c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80106d6:	68bb      	ldr	r3, [r7, #8]
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d108      	bne.n	80106ee <pbuf_copy_partial+0x4e>
 80106dc:	4b25      	ldr	r3, [pc, #148]	; (8010774 <pbuf_copy_partial+0xd4>)
 80106de:	f240 420b 	movw	r2, #1035	; 0x40b
 80106e2:	4927      	ldr	r1, [pc, #156]	; (8010780 <pbuf_copy_partial+0xe0>)
 80106e4:	4825      	ldr	r0, [pc, #148]	; (801077c <pbuf_copy_partial+0xdc>)
 80106e6:	f008 fcb1 	bl	801904c <iprintf>
 80106ea:	2300      	movs	r3, #0
 80106ec:	e03e      	b.n	801076c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	61fb      	str	r3, [r7, #28]
 80106f2:	e034      	b.n	801075e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80106f4:	88bb      	ldrh	r3, [r7, #4]
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d00a      	beq.n	8010710 <pbuf_copy_partial+0x70>
 80106fa:	69fb      	ldr	r3, [r7, #28]
 80106fc:	895b      	ldrh	r3, [r3, #10]
 80106fe:	88ba      	ldrh	r2, [r7, #4]
 8010700:	429a      	cmp	r2, r3
 8010702:	d305      	bcc.n	8010710 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8010704:	69fb      	ldr	r3, [r7, #28]
 8010706:	895b      	ldrh	r3, [r3, #10]
 8010708:	88ba      	ldrh	r2, [r7, #4]
 801070a:	1ad3      	subs	r3, r2, r3
 801070c:	80bb      	strh	r3, [r7, #4]
 801070e:	e023      	b.n	8010758 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8010710:	69fb      	ldr	r3, [r7, #28]
 8010712:	895a      	ldrh	r2, [r3, #10]
 8010714:	88bb      	ldrh	r3, [r7, #4]
 8010716:	1ad3      	subs	r3, r2, r3
 8010718:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801071a:	8b3a      	ldrh	r2, [r7, #24]
 801071c:	88fb      	ldrh	r3, [r7, #6]
 801071e:	429a      	cmp	r2, r3
 8010720:	d901      	bls.n	8010726 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8010722:	88fb      	ldrh	r3, [r7, #6]
 8010724:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8010726:	8b7b      	ldrh	r3, [r7, #26]
 8010728:	68ba      	ldr	r2, [r7, #8]
 801072a:	18d0      	adds	r0, r2, r3
 801072c:	69fb      	ldr	r3, [r7, #28]
 801072e:	685a      	ldr	r2, [r3, #4]
 8010730:	88bb      	ldrh	r3, [r7, #4]
 8010732:	4413      	add	r3, r2
 8010734:	8b3a      	ldrh	r2, [r7, #24]
 8010736:	4619      	mov	r1, r3
 8010738:	f008 fe56 	bl	80193e8 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 801073c:	8afa      	ldrh	r2, [r7, #22]
 801073e:	8b3b      	ldrh	r3, [r7, #24]
 8010740:	4413      	add	r3, r2
 8010742:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8010744:	8b7a      	ldrh	r2, [r7, #26]
 8010746:	8b3b      	ldrh	r3, [r7, #24]
 8010748:	4413      	add	r3, r2
 801074a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 801074c:	88fa      	ldrh	r2, [r7, #6]
 801074e:	8b3b      	ldrh	r3, [r7, #24]
 8010750:	1ad3      	subs	r3, r2, r3
 8010752:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8010754:	2300      	movs	r3, #0
 8010756:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8010758:	69fb      	ldr	r3, [r7, #28]
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	61fb      	str	r3, [r7, #28]
 801075e:	88fb      	ldrh	r3, [r7, #6]
 8010760:	2b00      	cmp	r3, #0
 8010762:	d002      	beq.n	801076a <pbuf_copy_partial+0xca>
 8010764:	69fb      	ldr	r3, [r7, #28]
 8010766:	2b00      	cmp	r3, #0
 8010768:	d1c4      	bne.n	80106f4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 801076a:	8afb      	ldrh	r3, [r7, #22]
}
 801076c:	4618      	mov	r0, r3
 801076e:	3720      	adds	r7, #32
 8010770:	46bd      	mov	sp, r7
 8010772:	bd80      	pop	{r7, pc}
 8010774:	0801bc88 	.word	0x0801bc88
 8010778:	0801bfd0 	.word	0x0801bfd0
 801077c:	0801bce8 	.word	0x0801bce8
 8010780:	0801bff0 	.word	0x0801bff0

08010784 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8010784:	b580      	push	{r7, lr}
 8010786:	b084      	sub	sp, #16
 8010788:	af00      	add	r7, sp, #0
 801078a:	4603      	mov	r3, r0
 801078c:	603a      	str	r2, [r7, #0]
 801078e:	71fb      	strb	r3, [r7, #7]
 8010790:	460b      	mov	r3, r1
 8010792:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8010794:	683b      	ldr	r3, [r7, #0]
 8010796:	8919      	ldrh	r1, [r3, #8]
 8010798:	88ba      	ldrh	r2, [r7, #4]
 801079a:	79fb      	ldrb	r3, [r7, #7]
 801079c:	4618      	mov	r0, r3
 801079e:	f7ff fab1 	bl	800fd04 <pbuf_alloc>
 80107a2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d101      	bne.n	80107ae <pbuf_clone+0x2a>
    return NULL;
 80107aa:	2300      	movs	r3, #0
 80107ac:	e011      	b.n	80107d2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80107ae:	6839      	ldr	r1, [r7, #0]
 80107b0:	68f8      	ldr	r0, [r7, #12]
 80107b2:	f7ff fea3 	bl	80104fc <pbuf_copy>
 80107b6:	4603      	mov	r3, r0
 80107b8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80107ba:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d006      	beq.n	80107d0 <pbuf_clone+0x4c>
 80107c2:	4b06      	ldr	r3, [pc, #24]	; (80107dc <pbuf_clone+0x58>)
 80107c4:	f240 5224 	movw	r2, #1316	; 0x524
 80107c8:	4905      	ldr	r1, [pc, #20]	; (80107e0 <pbuf_clone+0x5c>)
 80107ca:	4806      	ldr	r0, [pc, #24]	; (80107e4 <pbuf_clone+0x60>)
 80107cc:	f008 fc3e 	bl	801904c <iprintf>
  return q;
 80107d0:	68fb      	ldr	r3, [r7, #12]
}
 80107d2:	4618      	mov	r0, r3
 80107d4:	3710      	adds	r7, #16
 80107d6:	46bd      	mov	sp, r7
 80107d8:	bd80      	pop	{r7, pc}
 80107da:	bf00      	nop
 80107dc:	0801bc88 	.word	0x0801bc88
 80107e0:	0801c0fc 	.word	0x0801c0fc
 80107e4:	0801bce8 	.word	0x0801bce8

080107e8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80107e8:	b580      	push	{r7, lr}
 80107ea:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80107ec:	f007 ff06 	bl	80185fc <rand>
 80107f0:	4603      	mov	r3, r0
 80107f2:	b29b      	uxth	r3, r3
 80107f4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80107f8:	b29b      	uxth	r3, r3
 80107fa:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80107fe:	b29a      	uxth	r2, r3
 8010800:	4b01      	ldr	r3, [pc, #4]	; (8010808 <tcp_init+0x20>)
 8010802:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8010804:	bf00      	nop
 8010806:	bd80      	pop	{r7, pc}
 8010808:	20000054 	.word	0x20000054

0801080c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 801080c:	b580      	push	{r7, lr}
 801080e:	b082      	sub	sp, #8
 8010810:	af00      	add	r7, sp, #0
 8010812:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	7d1b      	ldrb	r3, [r3, #20]
 8010818:	2b01      	cmp	r3, #1
 801081a:	d105      	bne.n	8010828 <tcp_free+0x1c>
 801081c:	4b06      	ldr	r3, [pc, #24]	; (8010838 <tcp_free+0x2c>)
 801081e:	22d4      	movs	r2, #212	; 0xd4
 8010820:	4906      	ldr	r1, [pc, #24]	; (801083c <tcp_free+0x30>)
 8010822:	4807      	ldr	r0, [pc, #28]	; (8010840 <tcp_free+0x34>)
 8010824:	f008 fc12 	bl	801904c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8010828:	6879      	ldr	r1, [r7, #4]
 801082a:	2001      	movs	r0, #1
 801082c:	f7fe fef8 	bl	800f620 <memp_free>
}
 8010830:	bf00      	nop
 8010832:	3708      	adds	r7, #8
 8010834:	46bd      	mov	sp, r7
 8010836:	bd80      	pop	{r7, pc}
 8010838:	0801c188 	.word	0x0801c188
 801083c:	0801c1b8 	.word	0x0801c1b8
 8010840:	0801c1cc 	.word	0x0801c1cc

08010844 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8010844:	b580      	push	{r7, lr}
 8010846:	b082      	sub	sp, #8
 8010848:	af00      	add	r7, sp, #0
 801084a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	7d1b      	ldrb	r3, [r3, #20]
 8010850:	2b01      	cmp	r3, #1
 8010852:	d105      	bne.n	8010860 <tcp_free_listen+0x1c>
 8010854:	4b06      	ldr	r3, [pc, #24]	; (8010870 <tcp_free_listen+0x2c>)
 8010856:	22df      	movs	r2, #223	; 0xdf
 8010858:	4906      	ldr	r1, [pc, #24]	; (8010874 <tcp_free_listen+0x30>)
 801085a:	4807      	ldr	r0, [pc, #28]	; (8010878 <tcp_free_listen+0x34>)
 801085c:	f008 fbf6 	bl	801904c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8010860:	6879      	ldr	r1, [r7, #4]
 8010862:	2002      	movs	r0, #2
 8010864:	f7fe fedc 	bl	800f620 <memp_free>
}
 8010868:	bf00      	nop
 801086a:	3708      	adds	r7, #8
 801086c:	46bd      	mov	sp, r7
 801086e:	bd80      	pop	{r7, pc}
 8010870:	0801c188 	.word	0x0801c188
 8010874:	0801c1f4 	.word	0x0801c1f4
 8010878:	0801c1cc 	.word	0x0801c1cc

0801087c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 801087c:	b580      	push	{r7, lr}
 801087e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8010880:	f000 fea2 	bl	80115c8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8010884:	4b07      	ldr	r3, [pc, #28]	; (80108a4 <tcp_tmr+0x28>)
 8010886:	781b      	ldrb	r3, [r3, #0]
 8010888:	3301      	adds	r3, #1
 801088a:	b2da      	uxtb	r2, r3
 801088c:	4b05      	ldr	r3, [pc, #20]	; (80108a4 <tcp_tmr+0x28>)
 801088e:	701a      	strb	r2, [r3, #0]
 8010890:	4b04      	ldr	r3, [pc, #16]	; (80108a4 <tcp_tmr+0x28>)
 8010892:	781b      	ldrb	r3, [r3, #0]
 8010894:	f003 0301 	and.w	r3, r3, #1
 8010898:	2b00      	cmp	r3, #0
 801089a:	d001      	beq.n	80108a0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 801089c:	f000 fb54 	bl	8010f48 <tcp_slowtmr>
  }
}
 80108a0:	bf00      	nop
 80108a2:	bd80      	pop	{r7, pc}
 80108a4:	2000800d 	.word	0x2000800d

080108a8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80108a8:	b580      	push	{r7, lr}
 80108aa:	b084      	sub	sp, #16
 80108ac:	af00      	add	r7, sp, #0
 80108ae:	6078      	str	r0, [r7, #4]
 80108b0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80108b2:	683b      	ldr	r3, [r7, #0]
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d105      	bne.n	80108c4 <tcp_remove_listener+0x1c>
 80108b8:	4b0d      	ldr	r3, [pc, #52]	; (80108f0 <tcp_remove_listener+0x48>)
 80108ba:	22ff      	movs	r2, #255	; 0xff
 80108bc:	490d      	ldr	r1, [pc, #52]	; (80108f4 <tcp_remove_listener+0x4c>)
 80108be:	480e      	ldr	r0, [pc, #56]	; (80108f8 <tcp_remove_listener+0x50>)
 80108c0:	f008 fbc4 	bl	801904c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	60fb      	str	r3, [r7, #12]
 80108c8:	e00a      	b.n	80108e0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80108ce:	683a      	ldr	r2, [r7, #0]
 80108d0:	429a      	cmp	r2, r3
 80108d2:	d102      	bne.n	80108da <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	2200      	movs	r2, #0
 80108d8:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	68db      	ldr	r3, [r3, #12]
 80108de:	60fb      	str	r3, [r7, #12]
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d1f1      	bne.n	80108ca <tcp_remove_listener+0x22>
    }
  }
}
 80108e6:	bf00      	nop
 80108e8:	bf00      	nop
 80108ea:	3710      	adds	r7, #16
 80108ec:	46bd      	mov	sp, r7
 80108ee:	bd80      	pop	{r7, pc}
 80108f0:	0801c188 	.word	0x0801c188
 80108f4:	0801c210 	.word	0x0801c210
 80108f8:	0801c1cc 	.word	0x0801c1cc

080108fc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80108fc:	b580      	push	{r7, lr}
 80108fe:	b084      	sub	sp, #16
 8010900:	af00      	add	r7, sp, #0
 8010902:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	2b00      	cmp	r3, #0
 8010908:	d106      	bne.n	8010918 <tcp_listen_closed+0x1c>
 801090a:	4b14      	ldr	r3, [pc, #80]	; (801095c <tcp_listen_closed+0x60>)
 801090c:	f240 1211 	movw	r2, #273	; 0x111
 8010910:	4913      	ldr	r1, [pc, #76]	; (8010960 <tcp_listen_closed+0x64>)
 8010912:	4814      	ldr	r0, [pc, #80]	; (8010964 <tcp_listen_closed+0x68>)
 8010914:	f008 fb9a 	bl	801904c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	7d1b      	ldrb	r3, [r3, #20]
 801091c:	2b01      	cmp	r3, #1
 801091e:	d006      	beq.n	801092e <tcp_listen_closed+0x32>
 8010920:	4b0e      	ldr	r3, [pc, #56]	; (801095c <tcp_listen_closed+0x60>)
 8010922:	f44f 7289 	mov.w	r2, #274	; 0x112
 8010926:	4910      	ldr	r1, [pc, #64]	; (8010968 <tcp_listen_closed+0x6c>)
 8010928:	480e      	ldr	r0, [pc, #56]	; (8010964 <tcp_listen_closed+0x68>)
 801092a:	f008 fb8f 	bl	801904c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801092e:	2301      	movs	r3, #1
 8010930:	60fb      	str	r3, [r7, #12]
 8010932:	e00b      	b.n	801094c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8010934:	4a0d      	ldr	r2, [pc, #52]	; (801096c <tcp_listen_closed+0x70>)
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	6879      	ldr	r1, [r7, #4]
 8010940:	4618      	mov	r0, r3
 8010942:	f7ff ffb1 	bl	80108a8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	3301      	adds	r3, #1
 801094a:	60fb      	str	r3, [r7, #12]
 801094c:	68fb      	ldr	r3, [r7, #12]
 801094e:	2b03      	cmp	r3, #3
 8010950:	d9f0      	bls.n	8010934 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8010952:	bf00      	nop
 8010954:	bf00      	nop
 8010956:	3710      	adds	r7, #16
 8010958:	46bd      	mov	sp, r7
 801095a:	bd80      	pop	{r7, pc}
 801095c:	0801c188 	.word	0x0801c188
 8010960:	0801c238 	.word	0x0801c238
 8010964:	0801c1cc 	.word	0x0801c1cc
 8010968:	0801c244 	.word	0x0801c244
 801096c:	0801e1a4 	.word	0x0801e1a4

08010970 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8010970:	b5b0      	push	{r4, r5, r7, lr}
 8010972:	b088      	sub	sp, #32
 8010974:	af04      	add	r7, sp, #16
 8010976:	6078      	str	r0, [r7, #4]
 8010978:	460b      	mov	r3, r1
 801097a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	2b00      	cmp	r3, #0
 8010980:	d106      	bne.n	8010990 <tcp_close_shutdown+0x20>
 8010982:	4b63      	ldr	r3, [pc, #396]	; (8010b10 <tcp_close_shutdown+0x1a0>)
 8010984:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8010988:	4962      	ldr	r1, [pc, #392]	; (8010b14 <tcp_close_shutdown+0x1a4>)
 801098a:	4863      	ldr	r0, [pc, #396]	; (8010b18 <tcp_close_shutdown+0x1a8>)
 801098c:	f008 fb5e 	bl	801904c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8010990:	78fb      	ldrb	r3, [r7, #3]
 8010992:	2b00      	cmp	r3, #0
 8010994:	d066      	beq.n	8010a64 <tcp_close_shutdown+0xf4>
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	7d1b      	ldrb	r3, [r3, #20]
 801099a:	2b04      	cmp	r3, #4
 801099c:	d003      	beq.n	80109a6 <tcp_close_shutdown+0x36>
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	7d1b      	ldrb	r3, [r3, #20]
 80109a2:	2b07      	cmp	r3, #7
 80109a4:	d15e      	bne.n	8010a64 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d104      	bne.n	80109b8 <tcp_close_shutdown+0x48>
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80109b2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80109b6:	d055      	beq.n	8010a64 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	8b5b      	ldrh	r3, [r3, #26]
 80109bc:	f003 0310 	and.w	r3, r3, #16
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d106      	bne.n	80109d2 <tcp_close_shutdown+0x62>
 80109c4:	4b52      	ldr	r3, [pc, #328]	; (8010b10 <tcp_close_shutdown+0x1a0>)
 80109c6:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80109ca:	4954      	ldr	r1, [pc, #336]	; (8010b1c <tcp_close_shutdown+0x1ac>)
 80109cc:	4852      	ldr	r0, [pc, #328]	; (8010b18 <tcp_close_shutdown+0x1a8>)
 80109ce:	f008 fb3d 	bl	801904c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80109da:	687d      	ldr	r5, [r7, #4]
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	3304      	adds	r3, #4
 80109e0:	687a      	ldr	r2, [r7, #4]
 80109e2:	8ad2      	ldrh	r2, [r2, #22]
 80109e4:	6879      	ldr	r1, [r7, #4]
 80109e6:	8b09      	ldrh	r1, [r1, #24]
 80109e8:	9102      	str	r1, [sp, #8]
 80109ea:	9201      	str	r2, [sp, #4]
 80109ec:	9300      	str	r3, [sp, #0]
 80109ee:	462b      	mov	r3, r5
 80109f0:	4622      	mov	r2, r4
 80109f2:	4601      	mov	r1, r0
 80109f4:	6878      	ldr	r0, [r7, #4]
 80109f6:	f004 fe91 	bl	801571c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80109fa:	6878      	ldr	r0, [r7, #4]
 80109fc:	f001 f8c6 	bl	8011b8c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8010a00:	4b47      	ldr	r3, [pc, #284]	; (8010b20 <tcp_close_shutdown+0x1b0>)
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	687a      	ldr	r2, [r7, #4]
 8010a06:	429a      	cmp	r2, r3
 8010a08:	d105      	bne.n	8010a16 <tcp_close_shutdown+0xa6>
 8010a0a:	4b45      	ldr	r3, [pc, #276]	; (8010b20 <tcp_close_shutdown+0x1b0>)
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	68db      	ldr	r3, [r3, #12]
 8010a10:	4a43      	ldr	r2, [pc, #268]	; (8010b20 <tcp_close_shutdown+0x1b0>)
 8010a12:	6013      	str	r3, [r2, #0]
 8010a14:	e013      	b.n	8010a3e <tcp_close_shutdown+0xce>
 8010a16:	4b42      	ldr	r3, [pc, #264]	; (8010b20 <tcp_close_shutdown+0x1b0>)
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	60fb      	str	r3, [r7, #12]
 8010a1c:	e00c      	b.n	8010a38 <tcp_close_shutdown+0xc8>
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	68db      	ldr	r3, [r3, #12]
 8010a22:	687a      	ldr	r2, [r7, #4]
 8010a24:	429a      	cmp	r2, r3
 8010a26:	d104      	bne.n	8010a32 <tcp_close_shutdown+0xc2>
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	68da      	ldr	r2, [r3, #12]
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	60da      	str	r2, [r3, #12]
 8010a30:	e005      	b.n	8010a3e <tcp_close_shutdown+0xce>
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	68db      	ldr	r3, [r3, #12]
 8010a36:	60fb      	str	r3, [r7, #12]
 8010a38:	68fb      	ldr	r3, [r7, #12]
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d1ef      	bne.n	8010a1e <tcp_close_shutdown+0xae>
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	2200      	movs	r2, #0
 8010a42:	60da      	str	r2, [r3, #12]
 8010a44:	4b37      	ldr	r3, [pc, #220]	; (8010b24 <tcp_close_shutdown+0x1b4>)
 8010a46:	2201      	movs	r2, #1
 8010a48:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8010a4a:	4b37      	ldr	r3, [pc, #220]	; (8010b28 <tcp_close_shutdown+0x1b8>)
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	687a      	ldr	r2, [r7, #4]
 8010a50:	429a      	cmp	r2, r3
 8010a52:	d102      	bne.n	8010a5a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8010a54:	f003 fd5e 	bl	8014514 <tcp_trigger_input_pcb_close>
 8010a58:	e002      	b.n	8010a60 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8010a5a:	6878      	ldr	r0, [r7, #4]
 8010a5c:	f7ff fed6 	bl	801080c <tcp_free>
      }
      return ERR_OK;
 8010a60:	2300      	movs	r3, #0
 8010a62:	e050      	b.n	8010b06 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	7d1b      	ldrb	r3, [r3, #20]
 8010a68:	2b02      	cmp	r3, #2
 8010a6a:	d03b      	beq.n	8010ae4 <tcp_close_shutdown+0x174>
 8010a6c:	2b02      	cmp	r3, #2
 8010a6e:	dc44      	bgt.n	8010afa <tcp_close_shutdown+0x18a>
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d002      	beq.n	8010a7a <tcp_close_shutdown+0x10a>
 8010a74:	2b01      	cmp	r3, #1
 8010a76:	d02a      	beq.n	8010ace <tcp_close_shutdown+0x15e>
 8010a78:	e03f      	b.n	8010afa <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	8adb      	ldrh	r3, [r3, #22]
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d021      	beq.n	8010ac6 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8010a82:	4b2a      	ldr	r3, [pc, #168]	; (8010b2c <tcp_close_shutdown+0x1bc>)
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	687a      	ldr	r2, [r7, #4]
 8010a88:	429a      	cmp	r2, r3
 8010a8a:	d105      	bne.n	8010a98 <tcp_close_shutdown+0x128>
 8010a8c:	4b27      	ldr	r3, [pc, #156]	; (8010b2c <tcp_close_shutdown+0x1bc>)
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	68db      	ldr	r3, [r3, #12]
 8010a92:	4a26      	ldr	r2, [pc, #152]	; (8010b2c <tcp_close_shutdown+0x1bc>)
 8010a94:	6013      	str	r3, [r2, #0]
 8010a96:	e013      	b.n	8010ac0 <tcp_close_shutdown+0x150>
 8010a98:	4b24      	ldr	r3, [pc, #144]	; (8010b2c <tcp_close_shutdown+0x1bc>)
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	60bb      	str	r3, [r7, #8]
 8010a9e:	e00c      	b.n	8010aba <tcp_close_shutdown+0x14a>
 8010aa0:	68bb      	ldr	r3, [r7, #8]
 8010aa2:	68db      	ldr	r3, [r3, #12]
 8010aa4:	687a      	ldr	r2, [r7, #4]
 8010aa6:	429a      	cmp	r2, r3
 8010aa8:	d104      	bne.n	8010ab4 <tcp_close_shutdown+0x144>
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	68da      	ldr	r2, [r3, #12]
 8010aae:	68bb      	ldr	r3, [r7, #8]
 8010ab0:	60da      	str	r2, [r3, #12]
 8010ab2:	e005      	b.n	8010ac0 <tcp_close_shutdown+0x150>
 8010ab4:	68bb      	ldr	r3, [r7, #8]
 8010ab6:	68db      	ldr	r3, [r3, #12]
 8010ab8:	60bb      	str	r3, [r7, #8]
 8010aba:	68bb      	ldr	r3, [r7, #8]
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d1ef      	bne.n	8010aa0 <tcp_close_shutdown+0x130>
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	2200      	movs	r2, #0
 8010ac4:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8010ac6:	6878      	ldr	r0, [r7, #4]
 8010ac8:	f7ff fea0 	bl	801080c <tcp_free>
      break;
 8010acc:	e01a      	b.n	8010b04 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8010ace:	6878      	ldr	r0, [r7, #4]
 8010ad0:	f7ff ff14 	bl	80108fc <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8010ad4:	6879      	ldr	r1, [r7, #4]
 8010ad6:	4816      	ldr	r0, [pc, #88]	; (8010b30 <tcp_close_shutdown+0x1c0>)
 8010ad8:	f001 f8a8 	bl	8011c2c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8010adc:	6878      	ldr	r0, [r7, #4]
 8010ade:	f7ff feb1 	bl	8010844 <tcp_free_listen>
      break;
 8010ae2:	e00f      	b.n	8010b04 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8010ae4:	6879      	ldr	r1, [r7, #4]
 8010ae6:	480e      	ldr	r0, [pc, #56]	; (8010b20 <tcp_close_shutdown+0x1b0>)
 8010ae8:	f001 f8a0 	bl	8011c2c <tcp_pcb_remove>
 8010aec:	4b0d      	ldr	r3, [pc, #52]	; (8010b24 <tcp_close_shutdown+0x1b4>)
 8010aee:	2201      	movs	r2, #1
 8010af0:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8010af2:	6878      	ldr	r0, [r7, #4]
 8010af4:	f7ff fe8a 	bl	801080c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8010af8:	e004      	b.n	8010b04 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8010afa:	6878      	ldr	r0, [r7, #4]
 8010afc:	f000 f81a 	bl	8010b34 <tcp_close_shutdown_fin>
 8010b00:	4603      	mov	r3, r0
 8010b02:	e000      	b.n	8010b06 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8010b04:	2300      	movs	r3, #0
}
 8010b06:	4618      	mov	r0, r3
 8010b08:	3710      	adds	r7, #16
 8010b0a:	46bd      	mov	sp, r7
 8010b0c:	bdb0      	pop	{r4, r5, r7, pc}
 8010b0e:	bf00      	nop
 8010b10:	0801c188 	.word	0x0801c188
 8010b14:	0801c25c 	.word	0x0801c25c
 8010b18:	0801c1cc 	.word	0x0801c1cc
 8010b1c:	0801c27c 	.word	0x0801c27c
 8010b20:	20008004 	.word	0x20008004
 8010b24:	2000800c 	.word	0x2000800c
 8010b28:	20008044 	.word	0x20008044
 8010b2c:	20007ffc 	.word	0x20007ffc
 8010b30:	20008000 	.word	0x20008000

08010b34 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8010b34:	b580      	push	{r7, lr}
 8010b36:	b084      	sub	sp, #16
 8010b38:	af00      	add	r7, sp, #0
 8010b3a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d106      	bne.n	8010b50 <tcp_close_shutdown_fin+0x1c>
 8010b42:	4b2e      	ldr	r3, [pc, #184]	; (8010bfc <tcp_close_shutdown_fin+0xc8>)
 8010b44:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8010b48:	492d      	ldr	r1, [pc, #180]	; (8010c00 <tcp_close_shutdown_fin+0xcc>)
 8010b4a:	482e      	ldr	r0, [pc, #184]	; (8010c04 <tcp_close_shutdown_fin+0xd0>)
 8010b4c:	f008 fa7e 	bl	801904c <iprintf>

  switch (pcb->state) {
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	7d1b      	ldrb	r3, [r3, #20]
 8010b54:	2b07      	cmp	r3, #7
 8010b56:	d020      	beq.n	8010b9a <tcp_close_shutdown_fin+0x66>
 8010b58:	2b07      	cmp	r3, #7
 8010b5a:	dc2b      	bgt.n	8010bb4 <tcp_close_shutdown_fin+0x80>
 8010b5c:	2b03      	cmp	r3, #3
 8010b5e:	d002      	beq.n	8010b66 <tcp_close_shutdown_fin+0x32>
 8010b60:	2b04      	cmp	r3, #4
 8010b62:	d00d      	beq.n	8010b80 <tcp_close_shutdown_fin+0x4c>
 8010b64:	e026      	b.n	8010bb4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8010b66:	6878      	ldr	r0, [r7, #4]
 8010b68:	f003 fee6 	bl	8014938 <tcp_send_fin>
 8010b6c:	4603      	mov	r3, r0
 8010b6e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010b70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d11f      	bne.n	8010bb8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	2205      	movs	r2, #5
 8010b7c:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010b7e:	e01b      	b.n	8010bb8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8010b80:	6878      	ldr	r0, [r7, #4]
 8010b82:	f003 fed9 	bl	8014938 <tcp_send_fin>
 8010b86:	4603      	mov	r3, r0
 8010b88:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010b8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d114      	bne.n	8010bbc <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	2205      	movs	r2, #5
 8010b96:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010b98:	e010      	b.n	8010bbc <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8010b9a:	6878      	ldr	r0, [r7, #4]
 8010b9c:	f003 fecc 	bl	8014938 <tcp_send_fin>
 8010ba0:	4603      	mov	r3, r0
 8010ba2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010ba4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d109      	bne.n	8010bc0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	2209      	movs	r2, #9
 8010bb0:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010bb2:	e005      	b.n	8010bc0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8010bb4:	2300      	movs	r3, #0
 8010bb6:	e01c      	b.n	8010bf2 <tcp_close_shutdown_fin+0xbe>
      break;
 8010bb8:	bf00      	nop
 8010bba:	e002      	b.n	8010bc2 <tcp_close_shutdown_fin+0x8e>
      break;
 8010bbc:	bf00      	nop
 8010bbe:	e000      	b.n	8010bc2 <tcp_close_shutdown_fin+0x8e>
      break;
 8010bc0:	bf00      	nop
  }

  if (err == ERR_OK) {
 8010bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d103      	bne.n	8010bd2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8010bca:	6878      	ldr	r0, [r7, #4]
 8010bcc:	f003 fff2 	bl	8014bb4 <tcp_output>
 8010bd0:	e00d      	b.n	8010bee <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8010bd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bda:	d108      	bne.n	8010bee <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	8b5b      	ldrh	r3, [r3, #26]
 8010be0:	f043 0308 	orr.w	r3, r3, #8
 8010be4:	b29a      	uxth	r2, r3
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8010bea:	2300      	movs	r3, #0
 8010bec:	e001      	b.n	8010bf2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8010bee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010bf2:	4618      	mov	r0, r3
 8010bf4:	3710      	adds	r7, #16
 8010bf6:	46bd      	mov	sp, r7
 8010bf8:	bd80      	pop	{r7, pc}
 8010bfa:	bf00      	nop
 8010bfc:	0801c188 	.word	0x0801c188
 8010c00:	0801c238 	.word	0x0801c238
 8010c04:	0801c1cc 	.word	0x0801c1cc

08010c08 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8010c08:	b580      	push	{r7, lr}
 8010c0a:	b082      	sub	sp, #8
 8010c0c:	af00      	add	r7, sp, #0
 8010c0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d109      	bne.n	8010c2a <tcp_close+0x22>
 8010c16:	4b0f      	ldr	r3, [pc, #60]	; (8010c54 <tcp_close+0x4c>)
 8010c18:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8010c1c:	490e      	ldr	r1, [pc, #56]	; (8010c58 <tcp_close+0x50>)
 8010c1e:	480f      	ldr	r0, [pc, #60]	; (8010c5c <tcp_close+0x54>)
 8010c20:	f008 fa14 	bl	801904c <iprintf>
 8010c24:	f06f 030f 	mvn.w	r3, #15
 8010c28:	e00f      	b.n	8010c4a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	7d1b      	ldrb	r3, [r3, #20]
 8010c2e:	2b01      	cmp	r3, #1
 8010c30:	d006      	beq.n	8010c40 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	8b5b      	ldrh	r3, [r3, #26]
 8010c36:	f043 0310 	orr.w	r3, r3, #16
 8010c3a:	b29a      	uxth	r2, r3
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8010c40:	2101      	movs	r1, #1
 8010c42:	6878      	ldr	r0, [r7, #4]
 8010c44:	f7ff fe94 	bl	8010970 <tcp_close_shutdown>
 8010c48:	4603      	mov	r3, r0
}
 8010c4a:	4618      	mov	r0, r3
 8010c4c:	3708      	adds	r7, #8
 8010c4e:	46bd      	mov	sp, r7
 8010c50:	bd80      	pop	{r7, pc}
 8010c52:	bf00      	nop
 8010c54:	0801c188 	.word	0x0801c188
 8010c58:	0801c298 	.word	0x0801c298
 8010c5c:	0801c1cc 	.word	0x0801c1cc

08010c60 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8010c60:	b580      	push	{r7, lr}
 8010c62:	b08e      	sub	sp, #56	; 0x38
 8010c64:	af04      	add	r7, sp, #16
 8010c66:	6078      	str	r0, [r7, #4]
 8010c68:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d107      	bne.n	8010c80 <tcp_abandon+0x20>
 8010c70:	4b52      	ldr	r3, [pc, #328]	; (8010dbc <tcp_abandon+0x15c>)
 8010c72:	f240 223d 	movw	r2, #573	; 0x23d
 8010c76:	4952      	ldr	r1, [pc, #328]	; (8010dc0 <tcp_abandon+0x160>)
 8010c78:	4852      	ldr	r0, [pc, #328]	; (8010dc4 <tcp_abandon+0x164>)
 8010c7a:	f008 f9e7 	bl	801904c <iprintf>
 8010c7e:	e099      	b.n	8010db4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	7d1b      	ldrb	r3, [r3, #20]
 8010c84:	2b01      	cmp	r3, #1
 8010c86:	d106      	bne.n	8010c96 <tcp_abandon+0x36>
 8010c88:	4b4c      	ldr	r3, [pc, #304]	; (8010dbc <tcp_abandon+0x15c>)
 8010c8a:	f44f 7210 	mov.w	r2, #576	; 0x240
 8010c8e:	494e      	ldr	r1, [pc, #312]	; (8010dc8 <tcp_abandon+0x168>)
 8010c90:	484c      	ldr	r0, [pc, #304]	; (8010dc4 <tcp_abandon+0x164>)
 8010c92:	f008 f9db 	bl	801904c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	7d1b      	ldrb	r3, [r3, #20]
 8010c9a:	2b0a      	cmp	r3, #10
 8010c9c:	d107      	bne.n	8010cae <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8010c9e:	6879      	ldr	r1, [r7, #4]
 8010ca0:	484a      	ldr	r0, [pc, #296]	; (8010dcc <tcp_abandon+0x16c>)
 8010ca2:	f000 ffc3 	bl	8011c2c <tcp_pcb_remove>
    tcp_free(pcb);
 8010ca6:	6878      	ldr	r0, [r7, #4]
 8010ca8:	f7ff fdb0 	bl	801080c <tcp_free>
 8010cac:	e082      	b.n	8010db4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8010cae:	2300      	movs	r3, #0
 8010cb0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8010cb2:	2300      	movs	r3, #0
 8010cb4:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010cba:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cc0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010cc8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	691b      	ldr	r3, [r3, #16]
 8010cce:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	7d1b      	ldrb	r3, [r3, #20]
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d126      	bne.n	8010d26 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	8adb      	ldrh	r3, [r3, #22]
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d02e      	beq.n	8010d3e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8010ce0:	4b3b      	ldr	r3, [pc, #236]	; (8010dd0 <tcp_abandon+0x170>)
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	687a      	ldr	r2, [r7, #4]
 8010ce6:	429a      	cmp	r2, r3
 8010ce8:	d105      	bne.n	8010cf6 <tcp_abandon+0x96>
 8010cea:	4b39      	ldr	r3, [pc, #228]	; (8010dd0 <tcp_abandon+0x170>)
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	68db      	ldr	r3, [r3, #12]
 8010cf0:	4a37      	ldr	r2, [pc, #220]	; (8010dd0 <tcp_abandon+0x170>)
 8010cf2:	6013      	str	r3, [r2, #0]
 8010cf4:	e013      	b.n	8010d1e <tcp_abandon+0xbe>
 8010cf6:	4b36      	ldr	r3, [pc, #216]	; (8010dd0 <tcp_abandon+0x170>)
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	61fb      	str	r3, [r7, #28]
 8010cfc:	e00c      	b.n	8010d18 <tcp_abandon+0xb8>
 8010cfe:	69fb      	ldr	r3, [r7, #28]
 8010d00:	68db      	ldr	r3, [r3, #12]
 8010d02:	687a      	ldr	r2, [r7, #4]
 8010d04:	429a      	cmp	r2, r3
 8010d06:	d104      	bne.n	8010d12 <tcp_abandon+0xb2>
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	68da      	ldr	r2, [r3, #12]
 8010d0c:	69fb      	ldr	r3, [r7, #28]
 8010d0e:	60da      	str	r2, [r3, #12]
 8010d10:	e005      	b.n	8010d1e <tcp_abandon+0xbe>
 8010d12:	69fb      	ldr	r3, [r7, #28]
 8010d14:	68db      	ldr	r3, [r3, #12]
 8010d16:	61fb      	str	r3, [r7, #28]
 8010d18:	69fb      	ldr	r3, [r7, #28]
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d1ef      	bne.n	8010cfe <tcp_abandon+0x9e>
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	2200      	movs	r2, #0
 8010d22:	60da      	str	r2, [r3, #12]
 8010d24:	e00b      	b.n	8010d3e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8010d26:	683b      	ldr	r3, [r7, #0]
 8010d28:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	8adb      	ldrh	r3, [r3, #22]
 8010d2e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8010d30:	6879      	ldr	r1, [r7, #4]
 8010d32:	4828      	ldr	r0, [pc, #160]	; (8010dd4 <tcp_abandon+0x174>)
 8010d34:	f000 ff7a 	bl	8011c2c <tcp_pcb_remove>
 8010d38:	4b27      	ldr	r3, [pc, #156]	; (8010dd8 <tcp_abandon+0x178>)
 8010d3a:	2201      	movs	r2, #1
 8010d3c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d004      	beq.n	8010d50 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d4a:	4618      	mov	r0, r3
 8010d4c:	f000 fd1c 	bl	8011788 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d004      	beq.n	8010d62 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d5c:	4618      	mov	r0, r3
 8010d5e:	f000 fd13 	bl	8011788 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d004      	beq.n	8010d74 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010d6e:	4618      	mov	r0, r3
 8010d70:	f000 fd0a 	bl	8011788 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8010d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d00e      	beq.n	8010d98 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8010d7a:	6879      	ldr	r1, [r7, #4]
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	3304      	adds	r3, #4
 8010d80:	687a      	ldr	r2, [r7, #4]
 8010d82:	8b12      	ldrh	r2, [r2, #24]
 8010d84:	9202      	str	r2, [sp, #8]
 8010d86:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010d88:	9201      	str	r2, [sp, #4]
 8010d8a:	9300      	str	r3, [sp, #0]
 8010d8c:	460b      	mov	r3, r1
 8010d8e:	697a      	ldr	r2, [r7, #20]
 8010d90:	69b9      	ldr	r1, [r7, #24]
 8010d92:	6878      	ldr	r0, [r7, #4]
 8010d94:	f004 fcc2 	bl	801571c <tcp_rst>
    }
    last_state = pcb->state;
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	7d1b      	ldrb	r3, [r3, #20]
 8010d9c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8010d9e:	6878      	ldr	r0, [r7, #4]
 8010da0:	f7ff fd34 	bl	801080c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8010da4:	693b      	ldr	r3, [r7, #16]
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d004      	beq.n	8010db4 <tcp_abandon+0x154>
 8010daa:	693b      	ldr	r3, [r7, #16]
 8010dac:	f06f 010c 	mvn.w	r1, #12
 8010db0:	68f8      	ldr	r0, [r7, #12]
 8010db2:	4798      	blx	r3
  }
}
 8010db4:	3728      	adds	r7, #40	; 0x28
 8010db6:	46bd      	mov	sp, r7
 8010db8:	bd80      	pop	{r7, pc}
 8010dba:	bf00      	nop
 8010dbc:	0801c188 	.word	0x0801c188
 8010dc0:	0801c2cc 	.word	0x0801c2cc
 8010dc4:	0801c1cc 	.word	0x0801c1cc
 8010dc8:	0801c2e8 	.word	0x0801c2e8
 8010dcc:	20008008 	.word	0x20008008
 8010dd0:	20007ffc 	.word	0x20007ffc
 8010dd4:	20008004 	.word	0x20008004
 8010dd8:	2000800c 	.word	0x2000800c

08010ddc <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8010ddc:	b580      	push	{r7, lr}
 8010dde:	b082      	sub	sp, #8
 8010de0:	af00      	add	r7, sp, #0
 8010de2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8010de4:	2101      	movs	r1, #1
 8010de6:	6878      	ldr	r0, [r7, #4]
 8010de8:	f7ff ff3a 	bl	8010c60 <tcp_abandon>
}
 8010dec:	bf00      	nop
 8010dee:	3708      	adds	r7, #8
 8010df0:	46bd      	mov	sp, r7
 8010df2:	bd80      	pop	{r7, pc}

08010df4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8010df4:	b580      	push	{r7, lr}
 8010df6:	b084      	sub	sp, #16
 8010df8:	af00      	add	r7, sp, #0
 8010dfa:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d106      	bne.n	8010e10 <tcp_update_rcv_ann_wnd+0x1c>
 8010e02:	4b25      	ldr	r3, [pc, #148]	; (8010e98 <tcp_update_rcv_ann_wnd+0xa4>)
 8010e04:	f240 32a6 	movw	r2, #934	; 0x3a6
 8010e08:	4924      	ldr	r1, [pc, #144]	; (8010e9c <tcp_update_rcv_ann_wnd+0xa8>)
 8010e0a:	4825      	ldr	r0, [pc, #148]	; (8010ea0 <tcp_update_rcv_ann_wnd+0xac>)
 8010e0c:	f008 f91e 	bl	801904c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e14:	687a      	ldr	r2, [r7, #4]
 8010e16:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8010e18:	4413      	add	r3, r2
 8010e1a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e20:	687a      	ldr	r2, [r7, #4]
 8010e22:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8010e24:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8010e28:	bf28      	it	cs
 8010e2a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8010e2e:	b292      	uxth	r2, r2
 8010e30:	4413      	add	r3, r2
 8010e32:	68fa      	ldr	r2, [r7, #12]
 8010e34:	1ad3      	subs	r3, r2, r3
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	db08      	blt.n	8010e4c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e46:	68fa      	ldr	r2, [r7, #12]
 8010e48:	1ad3      	subs	r3, r2, r3
 8010e4a:	e020      	b.n	8010e8e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e54:	1ad3      	subs	r3, r2, r3
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	dd03      	ble.n	8010e62 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	2200      	movs	r2, #0
 8010e5e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8010e60:	e014      	b.n	8010e8c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e6a:	1ad3      	subs	r3, r2, r3
 8010e6c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8010e6e:	68bb      	ldr	r3, [r7, #8]
 8010e70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010e74:	d306      	bcc.n	8010e84 <tcp_update_rcv_ann_wnd+0x90>
 8010e76:	4b08      	ldr	r3, [pc, #32]	; (8010e98 <tcp_update_rcv_ann_wnd+0xa4>)
 8010e78:	f240 32b6 	movw	r2, #950	; 0x3b6
 8010e7c:	4909      	ldr	r1, [pc, #36]	; (8010ea4 <tcp_update_rcv_ann_wnd+0xb0>)
 8010e7e:	4808      	ldr	r0, [pc, #32]	; (8010ea0 <tcp_update_rcv_ann_wnd+0xac>)
 8010e80:	f008 f8e4 	bl	801904c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8010e84:	68bb      	ldr	r3, [r7, #8]
 8010e86:	b29a      	uxth	r2, r3
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8010e8c:	2300      	movs	r3, #0
  }
}
 8010e8e:	4618      	mov	r0, r3
 8010e90:	3710      	adds	r7, #16
 8010e92:	46bd      	mov	sp, r7
 8010e94:	bd80      	pop	{r7, pc}
 8010e96:	bf00      	nop
 8010e98:	0801c188 	.word	0x0801c188
 8010e9c:	0801c3e4 	.word	0x0801c3e4
 8010ea0:	0801c1cc 	.word	0x0801c1cc
 8010ea4:	0801c408 	.word	0x0801c408

08010ea8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8010ea8:	b580      	push	{r7, lr}
 8010eaa:	b084      	sub	sp, #16
 8010eac:	af00      	add	r7, sp, #0
 8010eae:	6078      	str	r0, [r7, #4]
 8010eb0:	460b      	mov	r3, r1
 8010eb2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d107      	bne.n	8010eca <tcp_recved+0x22>
 8010eba:	4b1f      	ldr	r3, [pc, #124]	; (8010f38 <tcp_recved+0x90>)
 8010ebc:	f240 32cf 	movw	r2, #975	; 0x3cf
 8010ec0:	491e      	ldr	r1, [pc, #120]	; (8010f3c <tcp_recved+0x94>)
 8010ec2:	481f      	ldr	r0, [pc, #124]	; (8010f40 <tcp_recved+0x98>)
 8010ec4:	f008 f8c2 	bl	801904c <iprintf>
 8010ec8:	e032      	b.n	8010f30 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	7d1b      	ldrb	r3, [r3, #20]
 8010ece:	2b01      	cmp	r3, #1
 8010ed0:	d106      	bne.n	8010ee0 <tcp_recved+0x38>
 8010ed2:	4b19      	ldr	r3, [pc, #100]	; (8010f38 <tcp_recved+0x90>)
 8010ed4:	f240 32d2 	movw	r2, #978	; 0x3d2
 8010ed8:	491a      	ldr	r1, [pc, #104]	; (8010f44 <tcp_recved+0x9c>)
 8010eda:	4819      	ldr	r0, [pc, #100]	; (8010f40 <tcp_recved+0x98>)
 8010edc:	f008 f8b6 	bl	801904c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010ee4:	887b      	ldrh	r3, [r7, #2]
 8010ee6:	4413      	add	r3, r2
 8010ee8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8010eea:	89fb      	ldrh	r3, [r7, #14]
 8010eec:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010ef0:	d804      	bhi.n	8010efc <tcp_recved+0x54>
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010ef6:	89fa      	ldrh	r2, [r7, #14]
 8010ef8:	429a      	cmp	r2, r3
 8010efa:	d204      	bcs.n	8010f06 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8010f02:	851a      	strh	r2, [r3, #40]	; 0x28
 8010f04:	e002      	b.n	8010f0c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	89fa      	ldrh	r2, [r7, #14]
 8010f0a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8010f0c:	6878      	ldr	r0, [r7, #4]
 8010f0e:	f7ff ff71 	bl	8010df4 <tcp_update_rcv_ann_wnd>
 8010f12:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8010f14:	68bb      	ldr	r3, [r7, #8]
 8010f16:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8010f1a:	d309      	bcc.n	8010f30 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	8b5b      	ldrh	r3, [r3, #26]
 8010f20:	f043 0302 	orr.w	r3, r3, #2
 8010f24:	b29a      	uxth	r2, r3
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010f2a:	6878      	ldr	r0, [r7, #4]
 8010f2c:	f003 fe42 	bl	8014bb4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8010f30:	3710      	adds	r7, #16
 8010f32:	46bd      	mov	sp, r7
 8010f34:	bd80      	pop	{r7, pc}
 8010f36:	bf00      	nop
 8010f38:	0801c188 	.word	0x0801c188
 8010f3c:	0801c424 	.word	0x0801c424
 8010f40:	0801c1cc 	.word	0x0801c1cc
 8010f44:	0801c43c 	.word	0x0801c43c

08010f48 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8010f48:	b5b0      	push	{r4, r5, r7, lr}
 8010f4a:	b090      	sub	sp, #64	; 0x40
 8010f4c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8010f4e:	2300      	movs	r3, #0
 8010f50:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8010f54:	4b94      	ldr	r3, [pc, #592]	; (80111a8 <tcp_slowtmr+0x260>)
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	3301      	adds	r3, #1
 8010f5a:	4a93      	ldr	r2, [pc, #588]	; (80111a8 <tcp_slowtmr+0x260>)
 8010f5c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8010f5e:	4b93      	ldr	r3, [pc, #588]	; (80111ac <tcp_slowtmr+0x264>)
 8010f60:	781b      	ldrb	r3, [r3, #0]
 8010f62:	3301      	adds	r3, #1
 8010f64:	b2da      	uxtb	r2, r3
 8010f66:	4b91      	ldr	r3, [pc, #580]	; (80111ac <tcp_slowtmr+0x264>)
 8010f68:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8010f6a:	2300      	movs	r3, #0
 8010f6c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8010f6e:	4b90      	ldr	r3, [pc, #576]	; (80111b0 <tcp_slowtmr+0x268>)
 8010f70:	681b      	ldr	r3, [r3, #0]
 8010f72:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8010f74:	e29d      	b.n	80114b2 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8010f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f78:	7d1b      	ldrb	r3, [r3, #20]
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d106      	bne.n	8010f8c <tcp_slowtmr+0x44>
 8010f7e:	4b8d      	ldr	r3, [pc, #564]	; (80111b4 <tcp_slowtmr+0x26c>)
 8010f80:	f240 42be 	movw	r2, #1214	; 0x4be
 8010f84:	498c      	ldr	r1, [pc, #560]	; (80111b8 <tcp_slowtmr+0x270>)
 8010f86:	488d      	ldr	r0, [pc, #564]	; (80111bc <tcp_slowtmr+0x274>)
 8010f88:	f008 f860 	bl	801904c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8010f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f8e:	7d1b      	ldrb	r3, [r3, #20]
 8010f90:	2b01      	cmp	r3, #1
 8010f92:	d106      	bne.n	8010fa2 <tcp_slowtmr+0x5a>
 8010f94:	4b87      	ldr	r3, [pc, #540]	; (80111b4 <tcp_slowtmr+0x26c>)
 8010f96:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8010f9a:	4989      	ldr	r1, [pc, #548]	; (80111c0 <tcp_slowtmr+0x278>)
 8010f9c:	4887      	ldr	r0, [pc, #540]	; (80111bc <tcp_slowtmr+0x274>)
 8010f9e:	f008 f855 	bl	801904c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8010fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fa4:	7d1b      	ldrb	r3, [r3, #20]
 8010fa6:	2b0a      	cmp	r3, #10
 8010fa8:	d106      	bne.n	8010fb8 <tcp_slowtmr+0x70>
 8010faa:	4b82      	ldr	r3, [pc, #520]	; (80111b4 <tcp_slowtmr+0x26c>)
 8010fac:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8010fb0:	4984      	ldr	r1, [pc, #528]	; (80111c4 <tcp_slowtmr+0x27c>)
 8010fb2:	4882      	ldr	r0, [pc, #520]	; (80111bc <tcp_slowtmr+0x274>)
 8010fb4:	f008 f84a 	bl	801904c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8010fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fba:	7f9a      	ldrb	r2, [r3, #30]
 8010fbc:	4b7b      	ldr	r3, [pc, #492]	; (80111ac <tcp_slowtmr+0x264>)
 8010fbe:	781b      	ldrb	r3, [r3, #0]
 8010fc0:	429a      	cmp	r2, r3
 8010fc2:	d105      	bne.n	8010fd0 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8010fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fc6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8010fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fca:	68db      	ldr	r3, [r3, #12]
 8010fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8010fce:	e270      	b.n	80114b2 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8010fd0:	4b76      	ldr	r3, [pc, #472]	; (80111ac <tcp_slowtmr+0x264>)
 8010fd2:	781a      	ldrb	r2, [r3, #0]
 8010fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fd6:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8010fd8:	2300      	movs	r3, #0
 8010fda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8010fde:	2300      	movs	r3, #0
 8010fe0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8010fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fe6:	7d1b      	ldrb	r3, [r3, #20]
 8010fe8:	2b02      	cmp	r3, #2
 8010fea:	d10a      	bne.n	8011002 <tcp_slowtmr+0xba>
 8010fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010ff2:	2b05      	cmp	r3, #5
 8010ff4:	d905      	bls.n	8011002 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8010ff6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010ffa:	3301      	adds	r3, #1
 8010ffc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011000:	e11e      	b.n	8011240 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8011002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011004:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011008:	2b0b      	cmp	r3, #11
 801100a:	d905      	bls.n	8011018 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 801100c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011010:	3301      	adds	r3, #1
 8011012:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011016:	e113      	b.n	8011240 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8011018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801101a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801101e:	2b00      	cmp	r3, #0
 8011020:	d075      	beq.n	801110e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8011022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011026:	2b00      	cmp	r3, #0
 8011028:	d006      	beq.n	8011038 <tcp_slowtmr+0xf0>
 801102a:	4b62      	ldr	r3, [pc, #392]	; (80111b4 <tcp_slowtmr+0x26c>)
 801102c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8011030:	4965      	ldr	r1, [pc, #404]	; (80111c8 <tcp_slowtmr+0x280>)
 8011032:	4862      	ldr	r0, [pc, #392]	; (80111bc <tcp_slowtmr+0x274>)
 8011034:	f008 f80a 	bl	801904c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8011038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801103a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801103c:	2b00      	cmp	r3, #0
 801103e:	d106      	bne.n	801104e <tcp_slowtmr+0x106>
 8011040:	4b5c      	ldr	r3, [pc, #368]	; (80111b4 <tcp_slowtmr+0x26c>)
 8011042:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8011046:	4961      	ldr	r1, [pc, #388]	; (80111cc <tcp_slowtmr+0x284>)
 8011048:	485c      	ldr	r0, [pc, #368]	; (80111bc <tcp_slowtmr+0x274>)
 801104a:	f007 ffff 	bl	801904c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801104e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011050:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011054:	2b0b      	cmp	r3, #11
 8011056:	d905      	bls.n	8011064 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8011058:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801105c:	3301      	adds	r3, #1
 801105e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011062:	e0ed      	b.n	8011240 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8011064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011066:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801106a:	3b01      	subs	r3, #1
 801106c:	4a58      	ldr	r2, [pc, #352]	; (80111d0 <tcp_slowtmr+0x288>)
 801106e:	5cd3      	ldrb	r3, [r2, r3]
 8011070:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8011072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011074:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011078:	7c7a      	ldrb	r2, [r7, #17]
 801107a:	429a      	cmp	r2, r3
 801107c:	d907      	bls.n	801108e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 801107e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011080:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011084:	3301      	adds	r3, #1
 8011086:	b2da      	uxtb	r2, r3
 8011088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801108a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 801108e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011090:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011094:	7c7a      	ldrb	r2, [r7, #17]
 8011096:	429a      	cmp	r2, r3
 8011098:	f200 80d2 	bhi.w	8011240 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 801109c:	2301      	movs	r3, #1
 801109e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80110a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d108      	bne.n	80110bc <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80110aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80110ac:	f004 fc2a 	bl	8015904 <tcp_zero_window_probe>
 80110b0:	4603      	mov	r3, r0
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d014      	beq.n	80110e0 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80110b6:	2300      	movs	r3, #0
 80110b8:	623b      	str	r3, [r7, #32]
 80110ba:	e011      	b.n	80110e0 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80110bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80110c2:	4619      	mov	r1, r3
 80110c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80110c6:	f003 faef 	bl	80146a8 <tcp_split_unsent_seg>
 80110ca:	4603      	mov	r3, r0
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d107      	bne.n	80110e0 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80110d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80110d2:	f003 fd6f 	bl	8014bb4 <tcp_output>
 80110d6:	4603      	mov	r3, r0
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d101      	bne.n	80110e0 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80110dc:	2300      	movs	r3, #0
 80110de:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80110e0:	6a3b      	ldr	r3, [r7, #32]
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	f000 80ac 	beq.w	8011240 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80110e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110ea:	2200      	movs	r2, #0
 80110ec:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80110f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110f2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80110f6:	2b06      	cmp	r3, #6
 80110f8:	f200 80a2 	bhi.w	8011240 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80110fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110fe:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011102:	3301      	adds	r3, #1
 8011104:	b2da      	uxtb	r2, r3
 8011106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011108:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 801110c:	e098      	b.n	8011240 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801110e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011110:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011114:	2b00      	cmp	r3, #0
 8011116:	db0f      	blt.n	8011138 <tcp_slowtmr+0x1f0>
 8011118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801111a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801111e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8011122:	4293      	cmp	r3, r2
 8011124:	d008      	beq.n	8011138 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8011126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011128:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801112c:	b29b      	uxth	r3, r3
 801112e:	3301      	adds	r3, #1
 8011130:	b29b      	uxth	r3, r3
 8011132:	b21a      	sxth	r2, r3
 8011134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011136:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8011138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801113a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 801113e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011140:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8011144:	429a      	cmp	r2, r3
 8011146:	db7b      	blt.n	8011240 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8011148:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801114a:	f004 f827 	bl	801519c <tcp_rexmit_rto_prepare>
 801114e:	4603      	mov	r3, r0
 8011150:	2b00      	cmp	r3, #0
 8011152:	d007      	beq.n	8011164 <tcp_slowtmr+0x21c>
 8011154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011158:	2b00      	cmp	r3, #0
 801115a:	d171      	bne.n	8011240 <tcp_slowtmr+0x2f8>
 801115c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801115e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011160:	2b00      	cmp	r3, #0
 8011162:	d06d      	beq.n	8011240 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8011164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011166:	7d1b      	ldrb	r3, [r3, #20]
 8011168:	2b02      	cmp	r3, #2
 801116a:	d03a      	beq.n	80111e2 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 801116c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801116e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011172:	2b0c      	cmp	r3, #12
 8011174:	bf28      	it	cs
 8011176:	230c      	movcs	r3, #12
 8011178:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801117a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801117c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011180:	10db      	asrs	r3, r3, #3
 8011182:	b21b      	sxth	r3, r3
 8011184:	461a      	mov	r2, r3
 8011186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011188:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801118c:	4413      	add	r3, r2
 801118e:	7efa      	ldrb	r2, [r7, #27]
 8011190:	4910      	ldr	r1, [pc, #64]	; (80111d4 <tcp_slowtmr+0x28c>)
 8011192:	5c8a      	ldrb	r2, [r1, r2]
 8011194:	4093      	lsls	r3, r2
 8011196:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8011198:	697b      	ldr	r3, [r7, #20]
 801119a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 801119e:	4293      	cmp	r3, r2
 80111a0:	dc1a      	bgt.n	80111d8 <tcp_slowtmr+0x290>
 80111a2:	697b      	ldr	r3, [r7, #20]
 80111a4:	b21a      	sxth	r2, r3
 80111a6:	e019      	b.n	80111dc <tcp_slowtmr+0x294>
 80111a8:	20007ff8 	.word	0x20007ff8
 80111ac:	2000800e 	.word	0x2000800e
 80111b0:	20008004 	.word	0x20008004
 80111b4:	0801c188 	.word	0x0801c188
 80111b8:	0801c4cc 	.word	0x0801c4cc
 80111bc:	0801c1cc 	.word	0x0801c1cc
 80111c0:	0801c4f8 	.word	0x0801c4f8
 80111c4:	0801c524 	.word	0x0801c524
 80111c8:	0801c554 	.word	0x0801c554
 80111cc:	0801c588 	.word	0x0801c588
 80111d0:	0801e19c 	.word	0x0801e19c
 80111d4:	0801e18c 	.word	0x0801e18c
 80111d8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80111dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80111e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111e4:	2200      	movs	r2, #0
 80111e6:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80111e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111ea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80111ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111f0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80111f4:	4293      	cmp	r3, r2
 80111f6:	bf28      	it	cs
 80111f8:	4613      	movcs	r3, r2
 80111fa:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80111fc:	8a7b      	ldrh	r3, [r7, #18]
 80111fe:	085b      	lsrs	r3, r3, #1
 8011200:	b29a      	uxth	r2, r3
 8011202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011204:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8011208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801120a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801120e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011210:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011212:	005b      	lsls	r3, r3, #1
 8011214:	b29b      	uxth	r3, r3
 8011216:	429a      	cmp	r2, r3
 8011218:	d206      	bcs.n	8011228 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801121a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801121c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801121e:	005b      	lsls	r3, r3, #1
 8011220:	b29a      	uxth	r2, r3
 8011222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011224:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8011228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801122a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 801122c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801122e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8011232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011234:	2200      	movs	r2, #0
 8011236:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 801123a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801123c:	f004 f81e 	bl	801527c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8011240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011242:	7d1b      	ldrb	r3, [r3, #20]
 8011244:	2b06      	cmp	r3, #6
 8011246:	d111      	bne.n	801126c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8011248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801124a:	8b5b      	ldrh	r3, [r3, #26]
 801124c:	f003 0310 	and.w	r3, r3, #16
 8011250:	2b00      	cmp	r3, #0
 8011252:	d00b      	beq.n	801126c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011254:	4b9c      	ldr	r3, [pc, #624]	; (80114c8 <tcp_slowtmr+0x580>)
 8011256:	681a      	ldr	r2, [r3, #0]
 8011258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801125a:	6a1b      	ldr	r3, [r3, #32]
 801125c:	1ad3      	subs	r3, r2, r3
 801125e:	2b28      	cmp	r3, #40	; 0x28
 8011260:	d904      	bls.n	801126c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8011262:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011266:	3301      	adds	r3, #1
 8011268:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801126c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801126e:	7a5b      	ldrb	r3, [r3, #9]
 8011270:	f003 0308 	and.w	r3, r3, #8
 8011274:	2b00      	cmp	r3, #0
 8011276:	d04a      	beq.n	801130e <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8011278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801127a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801127c:	2b04      	cmp	r3, #4
 801127e:	d003      	beq.n	8011288 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8011280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011282:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8011284:	2b07      	cmp	r3, #7
 8011286:	d142      	bne.n	801130e <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011288:	4b8f      	ldr	r3, [pc, #572]	; (80114c8 <tcp_slowtmr+0x580>)
 801128a:	681a      	ldr	r2, [r3, #0]
 801128c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801128e:	6a1b      	ldr	r3, [r3, #32]
 8011290:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8011292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011294:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8011298:	4b8c      	ldr	r3, [pc, #560]	; (80114cc <tcp_slowtmr+0x584>)
 801129a:	440b      	add	r3, r1
 801129c:	498c      	ldr	r1, [pc, #560]	; (80114d0 <tcp_slowtmr+0x588>)
 801129e:	fba1 1303 	umull	r1, r3, r1, r3
 80112a2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80112a4:	429a      	cmp	r2, r3
 80112a6:	d90a      	bls.n	80112be <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80112a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80112ac:	3301      	adds	r3, #1
 80112ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80112b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80112b6:	3301      	adds	r3, #1
 80112b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80112bc:	e027      	b.n	801130e <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80112be:	4b82      	ldr	r3, [pc, #520]	; (80114c8 <tcp_slowtmr+0x580>)
 80112c0:	681a      	ldr	r2, [r3, #0]
 80112c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112c4:	6a1b      	ldr	r3, [r3, #32]
 80112c6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80112c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112ca:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80112ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112d0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80112d4:	4618      	mov	r0, r3
 80112d6:	4b7f      	ldr	r3, [pc, #508]	; (80114d4 <tcp_slowtmr+0x58c>)
 80112d8:	fb00 f303 	mul.w	r3, r0, r3
 80112dc:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80112de:	497c      	ldr	r1, [pc, #496]	; (80114d0 <tcp_slowtmr+0x588>)
 80112e0:	fba1 1303 	umull	r1, r3, r1, r3
 80112e4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80112e6:	429a      	cmp	r2, r3
 80112e8:	d911      	bls.n	801130e <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 80112ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80112ec:	f004 faca 	bl	8015884 <tcp_keepalive>
 80112f0:	4603      	mov	r3, r0
 80112f2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80112f6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d107      	bne.n	801130e <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 80112fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011300:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8011304:	3301      	adds	r3, #1
 8011306:	b2da      	uxtb	r2, r3
 8011308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801130a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 801130e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011310:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011312:	2b00      	cmp	r3, #0
 8011314:	d011      	beq.n	801133a <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8011316:	4b6c      	ldr	r3, [pc, #432]	; (80114c8 <tcp_slowtmr+0x580>)
 8011318:	681a      	ldr	r2, [r3, #0]
 801131a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801131c:	6a1b      	ldr	r3, [r3, #32]
 801131e:	1ad2      	subs	r2, r2, r3
 8011320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011322:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8011326:	4619      	mov	r1, r3
 8011328:	460b      	mov	r3, r1
 801132a:	005b      	lsls	r3, r3, #1
 801132c:	440b      	add	r3, r1
 801132e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8011330:	429a      	cmp	r2, r3
 8011332:	d302      	bcc.n	801133a <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8011334:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011336:	f000 fddd 	bl	8011ef4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 801133a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801133c:	7d1b      	ldrb	r3, [r3, #20]
 801133e:	2b03      	cmp	r3, #3
 8011340:	d10b      	bne.n	801135a <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011342:	4b61      	ldr	r3, [pc, #388]	; (80114c8 <tcp_slowtmr+0x580>)
 8011344:	681a      	ldr	r2, [r3, #0]
 8011346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011348:	6a1b      	ldr	r3, [r3, #32]
 801134a:	1ad3      	subs	r3, r2, r3
 801134c:	2b28      	cmp	r3, #40	; 0x28
 801134e:	d904      	bls.n	801135a <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8011350:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011354:	3301      	adds	r3, #1
 8011356:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 801135a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801135c:	7d1b      	ldrb	r3, [r3, #20]
 801135e:	2b09      	cmp	r3, #9
 8011360:	d10b      	bne.n	801137a <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011362:	4b59      	ldr	r3, [pc, #356]	; (80114c8 <tcp_slowtmr+0x580>)
 8011364:	681a      	ldr	r2, [r3, #0]
 8011366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011368:	6a1b      	ldr	r3, [r3, #32]
 801136a:	1ad3      	subs	r3, r2, r3
 801136c:	2bf0      	cmp	r3, #240	; 0xf0
 801136e:	d904      	bls.n	801137a <tcp_slowtmr+0x432>
        ++pcb_remove;
 8011370:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011374:	3301      	adds	r3, #1
 8011376:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801137a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801137e:	2b00      	cmp	r3, #0
 8011380:	d060      	beq.n	8011444 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8011382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011388:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 801138a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801138c:	f000 fbfe 	bl	8011b8c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8011390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011392:	2b00      	cmp	r3, #0
 8011394:	d010      	beq.n	80113b8 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8011396:	4b50      	ldr	r3, [pc, #320]	; (80114d8 <tcp_slowtmr+0x590>)
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801139c:	429a      	cmp	r2, r3
 801139e:	d106      	bne.n	80113ae <tcp_slowtmr+0x466>
 80113a0:	4b4e      	ldr	r3, [pc, #312]	; (80114dc <tcp_slowtmr+0x594>)
 80113a2:	f240 526d 	movw	r2, #1389	; 0x56d
 80113a6:	494e      	ldr	r1, [pc, #312]	; (80114e0 <tcp_slowtmr+0x598>)
 80113a8:	484e      	ldr	r0, [pc, #312]	; (80114e4 <tcp_slowtmr+0x59c>)
 80113aa:	f007 fe4f 	bl	801904c <iprintf>
        prev->next = pcb->next;
 80113ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113b0:	68da      	ldr	r2, [r3, #12]
 80113b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113b4:	60da      	str	r2, [r3, #12]
 80113b6:	e00f      	b.n	80113d8 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80113b8:	4b47      	ldr	r3, [pc, #284]	; (80114d8 <tcp_slowtmr+0x590>)
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80113be:	429a      	cmp	r2, r3
 80113c0:	d006      	beq.n	80113d0 <tcp_slowtmr+0x488>
 80113c2:	4b46      	ldr	r3, [pc, #280]	; (80114dc <tcp_slowtmr+0x594>)
 80113c4:	f240 5271 	movw	r2, #1393	; 0x571
 80113c8:	4947      	ldr	r1, [pc, #284]	; (80114e8 <tcp_slowtmr+0x5a0>)
 80113ca:	4846      	ldr	r0, [pc, #280]	; (80114e4 <tcp_slowtmr+0x59c>)
 80113cc:	f007 fe3e 	bl	801904c <iprintf>
        tcp_active_pcbs = pcb->next;
 80113d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113d2:	68db      	ldr	r3, [r3, #12]
 80113d4:	4a40      	ldr	r2, [pc, #256]	; (80114d8 <tcp_slowtmr+0x590>)
 80113d6:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80113d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d013      	beq.n	8011408 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80113e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113e2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80113e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113e6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80113e8:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80113ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113ec:	3304      	adds	r3, #4
 80113ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80113f0:	8ad2      	ldrh	r2, [r2, #22]
 80113f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80113f4:	8b09      	ldrh	r1, [r1, #24]
 80113f6:	9102      	str	r1, [sp, #8]
 80113f8:	9201      	str	r2, [sp, #4]
 80113fa:	9300      	str	r3, [sp, #0]
 80113fc:	462b      	mov	r3, r5
 80113fe:	4622      	mov	r2, r4
 8011400:	4601      	mov	r1, r0
 8011402:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011404:	f004 f98a 	bl	801571c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8011408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801140a:	691b      	ldr	r3, [r3, #16]
 801140c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801140e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011410:	7d1b      	ldrb	r3, [r3, #20]
 8011412:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8011414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011416:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8011418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801141a:	68db      	ldr	r3, [r3, #12]
 801141c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801141e:	6838      	ldr	r0, [r7, #0]
 8011420:	f7ff f9f4 	bl	801080c <tcp_free>

      tcp_active_pcbs_changed = 0;
 8011424:	4b31      	ldr	r3, [pc, #196]	; (80114ec <tcp_slowtmr+0x5a4>)
 8011426:	2200      	movs	r2, #0
 8011428:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	2b00      	cmp	r3, #0
 801142e:	d004      	beq.n	801143a <tcp_slowtmr+0x4f2>
 8011430:	68fb      	ldr	r3, [r7, #12]
 8011432:	f06f 010c 	mvn.w	r1, #12
 8011436:	68b8      	ldr	r0, [r7, #8]
 8011438:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801143a:	4b2c      	ldr	r3, [pc, #176]	; (80114ec <tcp_slowtmr+0x5a4>)
 801143c:	781b      	ldrb	r3, [r3, #0]
 801143e:	2b00      	cmp	r3, #0
 8011440:	d037      	beq.n	80114b2 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8011442:	e592      	b.n	8010f6a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8011444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011446:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8011448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801144a:	68db      	ldr	r3, [r3, #12]
 801144c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 801144e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011450:	7f1b      	ldrb	r3, [r3, #28]
 8011452:	3301      	adds	r3, #1
 8011454:	b2da      	uxtb	r2, r3
 8011456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011458:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801145a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801145c:	7f1a      	ldrb	r2, [r3, #28]
 801145e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011460:	7f5b      	ldrb	r3, [r3, #29]
 8011462:	429a      	cmp	r2, r3
 8011464:	d325      	bcc.n	80114b2 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8011466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011468:	2200      	movs	r2, #0
 801146a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 801146c:	4b1f      	ldr	r3, [pc, #124]	; (80114ec <tcp_slowtmr+0x5a4>)
 801146e:	2200      	movs	r2, #0
 8011470:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8011472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011474:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011478:	2b00      	cmp	r3, #0
 801147a:	d00b      	beq.n	8011494 <tcp_slowtmr+0x54c>
 801147c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801147e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011482:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011484:	6912      	ldr	r2, [r2, #16]
 8011486:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011488:	4610      	mov	r0, r2
 801148a:	4798      	blx	r3
 801148c:	4603      	mov	r3, r0
 801148e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8011492:	e002      	b.n	801149a <tcp_slowtmr+0x552>
 8011494:	2300      	movs	r3, #0
 8011496:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 801149a:	4b14      	ldr	r3, [pc, #80]	; (80114ec <tcp_slowtmr+0x5a4>)
 801149c:	781b      	ldrb	r3, [r3, #0]
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d000      	beq.n	80114a4 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 80114a2:	e562      	b.n	8010f6a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80114a4:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d102      	bne.n	80114b2 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 80114ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80114ae:	f003 fb81 	bl	8014bb4 <tcp_output>
  while (pcb != NULL) {
 80114b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	f47f ad5e 	bne.w	8010f76 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80114ba:	2300      	movs	r3, #0
 80114bc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80114be:	4b0c      	ldr	r3, [pc, #48]	; (80114f0 <tcp_slowtmr+0x5a8>)
 80114c0:	681b      	ldr	r3, [r3, #0]
 80114c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80114c4:	e069      	b.n	801159a <tcp_slowtmr+0x652>
 80114c6:	bf00      	nop
 80114c8:	20007ff8 	.word	0x20007ff8
 80114cc:	000a4cb8 	.word	0x000a4cb8
 80114d0:	10624dd3 	.word	0x10624dd3
 80114d4:	000124f8 	.word	0x000124f8
 80114d8:	20008004 	.word	0x20008004
 80114dc:	0801c188 	.word	0x0801c188
 80114e0:	0801c5c0 	.word	0x0801c5c0
 80114e4:	0801c1cc 	.word	0x0801c1cc
 80114e8:	0801c5ec 	.word	0x0801c5ec
 80114ec:	2000800c 	.word	0x2000800c
 80114f0:	20008008 	.word	0x20008008
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80114f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114f6:	7d1b      	ldrb	r3, [r3, #20]
 80114f8:	2b0a      	cmp	r3, #10
 80114fa:	d006      	beq.n	801150a <tcp_slowtmr+0x5c2>
 80114fc:	4b2b      	ldr	r3, [pc, #172]	; (80115ac <tcp_slowtmr+0x664>)
 80114fe:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8011502:	492b      	ldr	r1, [pc, #172]	; (80115b0 <tcp_slowtmr+0x668>)
 8011504:	482b      	ldr	r0, [pc, #172]	; (80115b4 <tcp_slowtmr+0x66c>)
 8011506:	f007 fda1 	bl	801904c <iprintf>
    pcb_remove = 0;
 801150a:	2300      	movs	r3, #0
 801150c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011510:	4b29      	ldr	r3, [pc, #164]	; (80115b8 <tcp_slowtmr+0x670>)
 8011512:	681a      	ldr	r2, [r3, #0]
 8011514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011516:	6a1b      	ldr	r3, [r3, #32]
 8011518:	1ad3      	subs	r3, r2, r3
 801151a:	2bf0      	cmp	r3, #240	; 0xf0
 801151c:	d904      	bls.n	8011528 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 801151e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011522:	3301      	adds	r3, #1
 8011524:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011528:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801152c:	2b00      	cmp	r3, #0
 801152e:	d02f      	beq.n	8011590 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8011530:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011532:	f000 fb2b 	bl	8011b8c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8011536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011538:	2b00      	cmp	r3, #0
 801153a:	d010      	beq.n	801155e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801153c:	4b1f      	ldr	r3, [pc, #124]	; (80115bc <tcp_slowtmr+0x674>)
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011542:	429a      	cmp	r2, r3
 8011544:	d106      	bne.n	8011554 <tcp_slowtmr+0x60c>
 8011546:	4b19      	ldr	r3, [pc, #100]	; (80115ac <tcp_slowtmr+0x664>)
 8011548:	f240 52af 	movw	r2, #1455	; 0x5af
 801154c:	491c      	ldr	r1, [pc, #112]	; (80115c0 <tcp_slowtmr+0x678>)
 801154e:	4819      	ldr	r0, [pc, #100]	; (80115b4 <tcp_slowtmr+0x66c>)
 8011550:	f007 fd7c 	bl	801904c <iprintf>
        prev->next = pcb->next;
 8011554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011556:	68da      	ldr	r2, [r3, #12]
 8011558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801155a:	60da      	str	r2, [r3, #12]
 801155c:	e00f      	b.n	801157e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801155e:	4b17      	ldr	r3, [pc, #92]	; (80115bc <tcp_slowtmr+0x674>)
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011564:	429a      	cmp	r2, r3
 8011566:	d006      	beq.n	8011576 <tcp_slowtmr+0x62e>
 8011568:	4b10      	ldr	r3, [pc, #64]	; (80115ac <tcp_slowtmr+0x664>)
 801156a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 801156e:	4915      	ldr	r1, [pc, #84]	; (80115c4 <tcp_slowtmr+0x67c>)
 8011570:	4810      	ldr	r0, [pc, #64]	; (80115b4 <tcp_slowtmr+0x66c>)
 8011572:	f007 fd6b 	bl	801904c <iprintf>
        tcp_tw_pcbs = pcb->next;
 8011576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011578:	68db      	ldr	r3, [r3, #12]
 801157a:	4a10      	ldr	r2, [pc, #64]	; (80115bc <tcp_slowtmr+0x674>)
 801157c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801157e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011580:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8011582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011584:	68db      	ldr	r3, [r3, #12]
 8011586:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8011588:	69f8      	ldr	r0, [r7, #28]
 801158a:	f7ff f93f 	bl	801080c <tcp_free>
 801158e:	e004      	b.n	801159a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8011590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011592:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8011594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011596:	68db      	ldr	r3, [r3, #12]
 8011598:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801159a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801159c:	2b00      	cmp	r3, #0
 801159e:	d1a9      	bne.n	80114f4 <tcp_slowtmr+0x5ac>
    }
  }
}
 80115a0:	bf00      	nop
 80115a2:	bf00      	nop
 80115a4:	3730      	adds	r7, #48	; 0x30
 80115a6:	46bd      	mov	sp, r7
 80115a8:	bdb0      	pop	{r4, r5, r7, pc}
 80115aa:	bf00      	nop
 80115ac:	0801c188 	.word	0x0801c188
 80115b0:	0801c618 	.word	0x0801c618
 80115b4:	0801c1cc 	.word	0x0801c1cc
 80115b8:	20007ff8 	.word	0x20007ff8
 80115bc:	20008008 	.word	0x20008008
 80115c0:	0801c648 	.word	0x0801c648
 80115c4:	0801c670 	.word	0x0801c670

080115c8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80115c8:	b580      	push	{r7, lr}
 80115ca:	b082      	sub	sp, #8
 80115cc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80115ce:	4b2d      	ldr	r3, [pc, #180]	; (8011684 <tcp_fasttmr+0xbc>)
 80115d0:	781b      	ldrb	r3, [r3, #0]
 80115d2:	3301      	adds	r3, #1
 80115d4:	b2da      	uxtb	r2, r3
 80115d6:	4b2b      	ldr	r3, [pc, #172]	; (8011684 <tcp_fasttmr+0xbc>)
 80115d8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80115da:	4b2b      	ldr	r3, [pc, #172]	; (8011688 <tcp_fasttmr+0xc0>)
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80115e0:	e048      	b.n	8011674 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	7f9a      	ldrb	r2, [r3, #30]
 80115e6:	4b27      	ldr	r3, [pc, #156]	; (8011684 <tcp_fasttmr+0xbc>)
 80115e8:	781b      	ldrb	r3, [r3, #0]
 80115ea:	429a      	cmp	r2, r3
 80115ec:	d03f      	beq.n	801166e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80115ee:	4b25      	ldr	r3, [pc, #148]	; (8011684 <tcp_fasttmr+0xbc>)
 80115f0:	781a      	ldrb	r2, [r3, #0]
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	8b5b      	ldrh	r3, [r3, #26]
 80115fa:	f003 0301 	and.w	r3, r3, #1
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d010      	beq.n	8011624 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	8b5b      	ldrh	r3, [r3, #26]
 8011606:	f043 0302 	orr.w	r3, r3, #2
 801160a:	b29a      	uxth	r2, r3
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8011610:	6878      	ldr	r0, [r7, #4]
 8011612:	f003 facf 	bl	8014bb4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	8b5b      	ldrh	r3, [r3, #26]
 801161a:	f023 0303 	bic.w	r3, r3, #3
 801161e:	b29a      	uxth	r2, r3
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	8b5b      	ldrh	r3, [r3, #26]
 8011628:	f003 0308 	and.w	r3, r3, #8
 801162c:	2b00      	cmp	r3, #0
 801162e:	d009      	beq.n	8011644 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	8b5b      	ldrh	r3, [r3, #26]
 8011634:	f023 0308 	bic.w	r3, r3, #8
 8011638:	b29a      	uxth	r2, r3
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801163e:	6878      	ldr	r0, [r7, #4]
 8011640:	f7ff fa78 	bl	8010b34 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	68db      	ldr	r3, [r3, #12]
 8011648:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801164e:	2b00      	cmp	r3, #0
 8011650:	d00a      	beq.n	8011668 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8011652:	4b0e      	ldr	r3, [pc, #56]	; (801168c <tcp_fasttmr+0xc4>)
 8011654:	2200      	movs	r2, #0
 8011656:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8011658:	6878      	ldr	r0, [r7, #4]
 801165a:	f000 f819 	bl	8011690 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801165e:	4b0b      	ldr	r3, [pc, #44]	; (801168c <tcp_fasttmr+0xc4>)
 8011660:	781b      	ldrb	r3, [r3, #0]
 8011662:	2b00      	cmp	r3, #0
 8011664:	d000      	beq.n	8011668 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8011666:	e7b8      	b.n	80115da <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8011668:	683b      	ldr	r3, [r7, #0]
 801166a:	607b      	str	r3, [r7, #4]
 801166c:	e002      	b.n	8011674 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	68db      	ldr	r3, [r3, #12]
 8011672:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	2b00      	cmp	r3, #0
 8011678:	d1b3      	bne.n	80115e2 <tcp_fasttmr+0x1a>
    }
  }
}
 801167a:	bf00      	nop
 801167c:	bf00      	nop
 801167e:	3708      	adds	r7, #8
 8011680:	46bd      	mov	sp, r7
 8011682:	bd80      	pop	{r7, pc}
 8011684:	2000800e 	.word	0x2000800e
 8011688:	20008004 	.word	0x20008004
 801168c:	2000800c 	.word	0x2000800c

08011690 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8011690:	b590      	push	{r4, r7, lr}
 8011692:	b085      	sub	sp, #20
 8011694:	af00      	add	r7, sp, #0
 8011696:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	2b00      	cmp	r3, #0
 801169c:	d109      	bne.n	80116b2 <tcp_process_refused_data+0x22>
 801169e:	4b37      	ldr	r3, [pc, #220]	; (801177c <tcp_process_refused_data+0xec>)
 80116a0:	f240 6209 	movw	r2, #1545	; 0x609
 80116a4:	4936      	ldr	r1, [pc, #216]	; (8011780 <tcp_process_refused_data+0xf0>)
 80116a6:	4837      	ldr	r0, [pc, #220]	; (8011784 <tcp_process_refused_data+0xf4>)
 80116a8:	f007 fcd0 	bl	801904c <iprintf>
 80116ac:	f06f 030f 	mvn.w	r3, #15
 80116b0:	e060      	b.n	8011774 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80116b6:	7b5b      	ldrb	r3, [r3, #13]
 80116b8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80116be:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	2200      	movs	r2, #0
 80116c4:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d00b      	beq.n	80116e8 <tcp_process_refused_data+0x58>
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	6918      	ldr	r0, [r3, #16]
 80116da:	2300      	movs	r3, #0
 80116dc:	68ba      	ldr	r2, [r7, #8]
 80116de:	6879      	ldr	r1, [r7, #4]
 80116e0:	47a0      	blx	r4
 80116e2:	4603      	mov	r3, r0
 80116e4:	73fb      	strb	r3, [r7, #15]
 80116e6:	e007      	b.n	80116f8 <tcp_process_refused_data+0x68>
 80116e8:	2300      	movs	r3, #0
 80116ea:	68ba      	ldr	r2, [r7, #8]
 80116ec:	6879      	ldr	r1, [r7, #4]
 80116ee:	2000      	movs	r0, #0
 80116f0:	f000 f8a4 	bl	801183c <tcp_recv_null>
 80116f4:	4603      	mov	r3, r0
 80116f6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80116f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d12a      	bne.n	8011756 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8011700:	7bbb      	ldrb	r3, [r7, #14]
 8011702:	f003 0320 	and.w	r3, r3, #32
 8011706:	2b00      	cmp	r3, #0
 8011708:	d033      	beq.n	8011772 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801170e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8011712:	d005      	beq.n	8011720 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011718:	3301      	adds	r3, #1
 801171a:	b29a      	uxth	r2, r3
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011726:	2b00      	cmp	r3, #0
 8011728:	d00b      	beq.n	8011742 <tcp_process_refused_data+0xb2>
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	6918      	ldr	r0, [r3, #16]
 8011734:	2300      	movs	r3, #0
 8011736:	2200      	movs	r2, #0
 8011738:	6879      	ldr	r1, [r7, #4]
 801173a:	47a0      	blx	r4
 801173c:	4603      	mov	r3, r0
 801173e:	73fb      	strb	r3, [r7, #15]
 8011740:	e001      	b.n	8011746 <tcp_process_refused_data+0xb6>
 8011742:	2300      	movs	r3, #0
 8011744:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8011746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801174a:	f113 0f0d 	cmn.w	r3, #13
 801174e:	d110      	bne.n	8011772 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8011750:	f06f 030c 	mvn.w	r3, #12
 8011754:	e00e      	b.n	8011774 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8011756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801175a:	f113 0f0d 	cmn.w	r3, #13
 801175e:	d102      	bne.n	8011766 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8011760:	f06f 030c 	mvn.w	r3, #12
 8011764:	e006      	b.n	8011774 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	68ba      	ldr	r2, [r7, #8]
 801176a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 801176c:	f06f 0304 	mvn.w	r3, #4
 8011770:	e000      	b.n	8011774 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8011772:	2300      	movs	r3, #0
}
 8011774:	4618      	mov	r0, r3
 8011776:	3714      	adds	r7, #20
 8011778:	46bd      	mov	sp, r7
 801177a:	bd90      	pop	{r4, r7, pc}
 801177c:	0801c188 	.word	0x0801c188
 8011780:	0801c698 	.word	0x0801c698
 8011784:	0801c1cc 	.word	0x0801c1cc

08011788 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8011788:	b580      	push	{r7, lr}
 801178a:	b084      	sub	sp, #16
 801178c:	af00      	add	r7, sp, #0
 801178e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8011790:	e007      	b.n	80117a2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	681b      	ldr	r3, [r3, #0]
 8011796:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8011798:	6878      	ldr	r0, [r7, #4]
 801179a:	f000 f80a 	bl	80117b2 <tcp_seg_free>
    seg = next;
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d1f4      	bne.n	8011792 <tcp_segs_free+0xa>
  }
}
 80117a8:	bf00      	nop
 80117aa:	bf00      	nop
 80117ac:	3710      	adds	r7, #16
 80117ae:	46bd      	mov	sp, r7
 80117b0:	bd80      	pop	{r7, pc}

080117b2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80117b2:	b580      	push	{r7, lr}
 80117b4:	b082      	sub	sp, #8
 80117b6:	af00      	add	r7, sp, #0
 80117b8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d00c      	beq.n	80117da <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	685b      	ldr	r3, [r3, #4]
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d004      	beq.n	80117d2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	685b      	ldr	r3, [r3, #4]
 80117cc:	4618      	mov	r0, r3
 80117ce:	f7fe fd7d 	bl	80102cc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80117d2:	6879      	ldr	r1, [r7, #4]
 80117d4:	2003      	movs	r0, #3
 80117d6:	f7fd ff23 	bl	800f620 <memp_free>
  }
}
 80117da:	bf00      	nop
 80117dc:	3708      	adds	r7, #8
 80117de:	46bd      	mov	sp, r7
 80117e0:	bd80      	pop	{r7, pc}
	...

080117e4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80117e4:	b580      	push	{r7, lr}
 80117e6:	b084      	sub	sp, #16
 80117e8:	af00      	add	r7, sp, #0
 80117ea:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d106      	bne.n	8011800 <tcp_seg_copy+0x1c>
 80117f2:	4b0f      	ldr	r3, [pc, #60]	; (8011830 <tcp_seg_copy+0x4c>)
 80117f4:	f240 6282 	movw	r2, #1666	; 0x682
 80117f8:	490e      	ldr	r1, [pc, #56]	; (8011834 <tcp_seg_copy+0x50>)
 80117fa:	480f      	ldr	r0, [pc, #60]	; (8011838 <tcp_seg_copy+0x54>)
 80117fc:	f007 fc26 	bl	801904c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8011800:	2003      	movs	r0, #3
 8011802:	f7fd fe9d 	bl	800f540 <memp_malloc>
 8011806:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8011808:	68fb      	ldr	r3, [r7, #12]
 801180a:	2b00      	cmp	r3, #0
 801180c:	d101      	bne.n	8011812 <tcp_seg_copy+0x2e>
    return NULL;
 801180e:	2300      	movs	r3, #0
 8011810:	e00a      	b.n	8011828 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8011812:	2210      	movs	r2, #16
 8011814:	6879      	ldr	r1, [r7, #4]
 8011816:	68f8      	ldr	r0, [r7, #12]
 8011818:	f007 fde6 	bl	80193e8 <memcpy>
  pbuf_ref(cseg->p);
 801181c:	68fb      	ldr	r3, [r7, #12]
 801181e:	685b      	ldr	r3, [r3, #4]
 8011820:	4618      	mov	r0, r3
 8011822:	f7fe fdf3 	bl	801040c <pbuf_ref>
  return cseg;
 8011826:	68fb      	ldr	r3, [r7, #12]
}
 8011828:	4618      	mov	r0, r3
 801182a:	3710      	adds	r7, #16
 801182c:	46bd      	mov	sp, r7
 801182e:	bd80      	pop	{r7, pc}
 8011830:	0801c188 	.word	0x0801c188
 8011834:	0801c6dc 	.word	0x0801c6dc
 8011838:	0801c1cc 	.word	0x0801c1cc

0801183c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801183c:	b580      	push	{r7, lr}
 801183e:	b084      	sub	sp, #16
 8011840:	af00      	add	r7, sp, #0
 8011842:	60f8      	str	r0, [r7, #12]
 8011844:	60b9      	str	r1, [r7, #8]
 8011846:	607a      	str	r2, [r7, #4]
 8011848:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801184a:	68bb      	ldr	r3, [r7, #8]
 801184c:	2b00      	cmp	r3, #0
 801184e:	d109      	bne.n	8011864 <tcp_recv_null+0x28>
 8011850:	4b12      	ldr	r3, [pc, #72]	; (801189c <tcp_recv_null+0x60>)
 8011852:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8011856:	4912      	ldr	r1, [pc, #72]	; (80118a0 <tcp_recv_null+0x64>)
 8011858:	4812      	ldr	r0, [pc, #72]	; (80118a4 <tcp_recv_null+0x68>)
 801185a:	f007 fbf7 	bl	801904c <iprintf>
 801185e:	f06f 030f 	mvn.w	r3, #15
 8011862:	e016      	b.n	8011892 <tcp_recv_null+0x56>

  if (p != NULL) {
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	2b00      	cmp	r3, #0
 8011868:	d009      	beq.n	801187e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	891b      	ldrh	r3, [r3, #8]
 801186e:	4619      	mov	r1, r3
 8011870:	68b8      	ldr	r0, [r7, #8]
 8011872:	f7ff fb19 	bl	8010ea8 <tcp_recved>
    pbuf_free(p);
 8011876:	6878      	ldr	r0, [r7, #4]
 8011878:	f7fe fd28 	bl	80102cc <pbuf_free>
 801187c:	e008      	b.n	8011890 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801187e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011882:	2b00      	cmp	r3, #0
 8011884:	d104      	bne.n	8011890 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8011886:	68b8      	ldr	r0, [r7, #8]
 8011888:	f7ff f9be 	bl	8010c08 <tcp_close>
 801188c:	4603      	mov	r3, r0
 801188e:	e000      	b.n	8011892 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8011890:	2300      	movs	r3, #0
}
 8011892:	4618      	mov	r0, r3
 8011894:	3710      	adds	r7, #16
 8011896:	46bd      	mov	sp, r7
 8011898:	bd80      	pop	{r7, pc}
 801189a:	bf00      	nop
 801189c:	0801c188 	.word	0x0801c188
 80118a0:	0801c6f8 	.word	0x0801c6f8
 80118a4:	0801c1cc 	.word	0x0801c1cc

080118a8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80118a8:	b580      	push	{r7, lr}
 80118aa:	b086      	sub	sp, #24
 80118ac:	af00      	add	r7, sp, #0
 80118ae:	4603      	mov	r3, r0
 80118b0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80118b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	db01      	blt.n	80118be <tcp_kill_prio+0x16>
 80118ba:	79fb      	ldrb	r3, [r7, #7]
 80118bc:	e000      	b.n	80118c0 <tcp_kill_prio+0x18>
 80118be:	237f      	movs	r3, #127	; 0x7f
 80118c0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80118c2:	7afb      	ldrb	r3, [r7, #11]
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d034      	beq.n	8011932 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80118c8:	7afb      	ldrb	r3, [r7, #11]
 80118ca:	3b01      	subs	r3, #1
 80118cc:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80118ce:	2300      	movs	r3, #0
 80118d0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80118d2:	2300      	movs	r3, #0
 80118d4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80118d6:	4b19      	ldr	r3, [pc, #100]	; (801193c <tcp_kill_prio+0x94>)
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	617b      	str	r3, [r7, #20]
 80118dc:	e01f      	b.n	801191e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80118de:	697b      	ldr	r3, [r7, #20]
 80118e0:	7d5b      	ldrb	r3, [r3, #21]
 80118e2:	7afa      	ldrb	r2, [r7, #11]
 80118e4:	429a      	cmp	r2, r3
 80118e6:	d80c      	bhi.n	8011902 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80118e8:	697b      	ldr	r3, [r7, #20]
 80118ea:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80118ec:	7afa      	ldrb	r2, [r7, #11]
 80118ee:	429a      	cmp	r2, r3
 80118f0:	d112      	bne.n	8011918 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80118f2:	4b13      	ldr	r3, [pc, #76]	; (8011940 <tcp_kill_prio+0x98>)
 80118f4:	681a      	ldr	r2, [r3, #0]
 80118f6:	697b      	ldr	r3, [r7, #20]
 80118f8:	6a1b      	ldr	r3, [r3, #32]
 80118fa:	1ad3      	subs	r3, r2, r3
 80118fc:	68fa      	ldr	r2, [r7, #12]
 80118fe:	429a      	cmp	r2, r3
 8011900:	d80a      	bhi.n	8011918 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8011902:	4b0f      	ldr	r3, [pc, #60]	; (8011940 <tcp_kill_prio+0x98>)
 8011904:	681a      	ldr	r2, [r3, #0]
 8011906:	697b      	ldr	r3, [r7, #20]
 8011908:	6a1b      	ldr	r3, [r3, #32]
 801190a:	1ad3      	subs	r3, r2, r3
 801190c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801190e:	697b      	ldr	r3, [r7, #20]
 8011910:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8011912:	697b      	ldr	r3, [r7, #20]
 8011914:	7d5b      	ldrb	r3, [r3, #21]
 8011916:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011918:	697b      	ldr	r3, [r7, #20]
 801191a:	68db      	ldr	r3, [r3, #12]
 801191c:	617b      	str	r3, [r7, #20]
 801191e:	697b      	ldr	r3, [r7, #20]
 8011920:	2b00      	cmp	r3, #0
 8011922:	d1dc      	bne.n	80118de <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8011924:	693b      	ldr	r3, [r7, #16]
 8011926:	2b00      	cmp	r3, #0
 8011928:	d004      	beq.n	8011934 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801192a:	6938      	ldr	r0, [r7, #16]
 801192c:	f7ff fa56 	bl	8010ddc <tcp_abort>
 8011930:	e000      	b.n	8011934 <tcp_kill_prio+0x8c>
    return;
 8011932:	bf00      	nop
  }
}
 8011934:	3718      	adds	r7, #24
 8011936:	46bd      	mov	sp, r7
 8011938:	bd80      	pop	{r7, pc}
 801193a:	bf00      	nop
 801193c:	20008004 	.word	0x20008004
 8011940:	20007ff8 	.word	0x20007ff8

08011944 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8011944:	b580      	push	{r7, lr}
 8011946:	b086      	sub	sp, #24
 8011948:	af00      	add	r7, sp, #0
 801194a:	4603      	mov	r3, r0
 801194c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801194e:	79fb      	ldrb	r3, [r7, #7]
 8011950:	2b08      	cmp	r3, #8
 8011952:	d009      	beq.n	8011968 <tcp_kill_state+0x24>
 8011954:	79fb      	ldrb	r3, [r7, #7]
 8011956:	2b09      	cmp	r3, #9
 8011958:	d006      	beq.n	8011968 <tcp_kill_state+0x24>
 801195a:	4b1a      	ldr	r3, [pc, #104]	; (80119c4 <tcp_kill_state+0x80>)
 801195c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8011960:	4919      	ldr	r1, [pc, #100]	; (80119c8 <tcp_kill_state+0x84>)
 8011962:	481a      	ldr	r0, [pc, #104]	; (80119cc <tcp_kill_state+0x88>)
 8011964:	f007 fb72 	bl	801904c <iprintf>

  inactivity = 0;
 8011968:	2300      	movs	r3, #0
 801196a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801196c:	2300      	movs	r3, #0
 801196e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011970:	4b17      	ldr	r3, [pc, #92]	; (80119d0 <tcp_kill_state+0x8c>)
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	617b      	str	r3, [r7, #20]
 8011976:	e017      	b.n	80119a8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8011978:	697b      	ldr	r3, [r7, #20]
 801197a:	7d1b      	ldrb	r3, [r3, #20]
 801197c:	79fa      	ldrb	r2, [r7, #7]
 801197e:	429a      	cmp	r2, r3
 8011980:	d10f      	bne.n	80119a2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8011982:	4b14      	ldr	r3, [pc, #80]	; (80119d4 <tcp_kill_state+0x90>)
 8011984:	681a      	ldr	r2, [r3, #0]
 8011986:	697b      	ldr	r3, [r7, #20]
 8011988:	6a1b      	ldr	r3, [r3, #32]
 801198a:	1ad3      	subs	r3, r2, r3
 801198c:	68fa      	ldr	r2, [r7, #12]
 801198e:	429a      	cmp	r2, r3
 8011990:	d807      	bhi.n	80119a2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8011992:	4b10      	ldr	r3, [pc, #64]	; (80119d4 <tcp_kill_state+0x90>)
 8011994:	681a      	ldr	r2, [r3, #0]
 8011996:	697b      	ldr	r3, [r7, #20]
 8011998:	6a1b      	ldr	r3, [r3, #32]
 801199a:	1ad3      	subs	r3, r2, r3
 801199c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801199e:	697b      	ldr	r3, [r7, #20]
 80119a0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80119a2:	697b      	ldr	r3, [r7, #20]
 80119a4:	68db      	ldr	r3, [r3, #12]
 80119a6:	617b      	str	r3, [r7, #20]
 80119a8:	697b      	ldr	r3, [r7, #20]
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d1e4      	bne.n	8011978 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80119ae:	693b      	ldr	r3, [r7, #16]
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d003      	beq.n	80119bc <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80119b4:	2100      	movs	r1, #0
 80119b6:	6938      	ldr	r0, [r7, #16]
 80119b8:	f7ff f952 	bl	8010c60 <tcp_abandon>
  }
}
 80119bc:	bf00      	nop
 80119be:	3718      	adds	r7, #24
 80119c0:	46bd      	mov	sp, r7
 80119c2:	bd80      	pop	{r7, pc}
 80119c4:	0801c188 	.word	0x0801c188
 80119c8:	0801c714 	.word	0x0801c714
 80119cc:	0801c1cc 	.word	0x0801c1cc
 80119d0:	20008004 	.word	0x20008004
 80119d4:	20007ff8 	.word	0x20007ff8

080119d8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80119d8:	b580      	push	{r7, lr}
 80119da:	b084      	sub	sp, #16
 80119dc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80119de:	2300      	movs	r3, #0
 80119e0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80119e2:	2300      	movs	r3, #0
 80119e4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80119e6:	4b12      	ldr	r3, [pc, #72]	; (8011a30 <tcp_kill_timewait+0x58>)
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	60fb      	str	r3, [r7, #12]
 80119ec:	e012      	b.n	8011a14 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80119ee:	4b11      	ldr	r3, [pc, #68]	; (8011a34 <tcp_kill_timewait+0x5c>)
 80119f0:	681a      	ldr	r2, [r3, #0]
 80119f2:	68fb      	ldr	r3, [r7, #12]
 80119f4:	6a1b      	ldr	r3, [r3, #32]
 80119f6:	1ad3      	subs	r3, r2, r3
 80119f8:	687a      	ldr	r2, [r7, #4]
 80119fa:	429a      	cmp	r2, r3
 80119fc:	d807      	bhi.n	8011a0e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80119fe:	4b0d      	ldr	r3, [pc, #52]	; (8011a34 <tcp_kill_timewait+0x5c>)
 8011a00:	681a      	ldr	r2, [r3, #0]
 8011a02:	68fb      	ldr	r3, [r7, #12]
 8011a04:	6a1b      	ldr	r3, [r3, #32]
 8011a06:	1ad3      	subs	r3, r2, r3
 8011a08:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8011a0a:	68fb      	ldr	r3, [r7, #12]
 8011a0c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011a0e:	68fb      	ldr	r3, [r7, #12]
 8011a10:	68db      	ldr	r3, [r3, #12]
 8011a12:	60fb      	str	r3, [r7, #12]
 8011a14:	68fb      	ldr	r3, [r7, #12]
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d1e9      	bne.n	80119ee <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8011a1a:	68bb      	ldr	r3, [r7, #8]
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d002      	beq.n	8011a26 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8011a20:	68b8      	ldr	r0, [r7, #8]
 8011a22:	f7ff f9db 	bl	8010ddc <tcp_abort>
  }
}
 8011a26:	bf00      	nop
 8011a28:	3710      	adds	r7, #16
 8011a2a:	46bd      	mov	sp, r7
 8011a2c:	bd80      	pop	{r7, pc}
 8011a2e:	bf00      	nop
 8011a30:	20008008 	.word	0x20008008
 8011a34:	20007ff8 	.word	0x20007ff8

08011a38 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8011a38:	b580      	push	{r7, lr}
 8011a3a:	b082      	sub	sp, #8
 8011a3c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8011a3e:	4b10      	ldr	r3, [pc, #64]	; (8011a80 <tcp_handle_closepend+0x48>)
 8011a40:	681b      	ldr	r3, [r3, #0]
 8011a42:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8011a44:	e014      	b.n	8011a70 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	68db      	ldr	r3, [r3, #12]
 8011a4a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	8b5b      	ldrh	r3, [r3, #26]
 8011a50:	f003 0308 	and.w	r3, r3, #8
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d009      	beq.n	8011a6c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	8b5b      	ldrh	r3, [r3, #26]
 8011a5c:	f023 0308 	bic.w	r3, r3, #8
 8011a60:	b29a      	uxth	r2, r3
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8011a66:	6878      	ldr	r0, [r7, #4]
 8011a68:	f7ff f864 	bl	8010b34 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8011a6c:	683b      	ldr	r3, [r7, #0]
 8011a6e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d1e7      	bne.n	8011a46 <tcp_handle_closepend+0xe>
  }
}
 8011a76:	bf00      	nop
 8011a78:	bf00      	nop
 8011a7a:	3708      	adds	r7, #8
 8011a7c:	46bd      	mov	sp, r7
 8011a7e:	bd80      	pop	{r7, pc}
 8011a80:	20008004 	.word	0x20008004

08011a84 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8011a84:	b580      	push	{r7, lr}
 8011a86:	b084      	sub	sp, #16
 8011a88:	af00      	add	r7, sp, #0
 8011a8a:	4603      	mov	r3, r0
 8011a8c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011a8e:	2001      	movs	r0, #1
 8011a90:	f7fd fd56 	bl	800f540 <memp_malloc>
 8011a94:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8011a96:	68fb      	ldr	r3, [r7, #12]
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d126      	bne.n	8011aea <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8011a9c:	f7ff ffcc 	bl	8011a38 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8011aa0:	f7ff ff9a 	bl	80119d8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011aa4:	2001      	movs	r0, #1
 8011aa6:	f7fd fd4b 	bl	800f540 <memp_malloc>
 8011aaa:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8011aac:	68fb      	ldr	r3, [r7, #12]
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d11b      	bne.n	8011aea <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8011ab2:	2009      	movs	r0, #9
 8011ab4:	f7ff ff46 	bl	8011944 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011ab8:	2001      	movs	r0, #1
 8011aba:	f7fd fd41 	bl	800f540 <memp_malloc>
 8011abe:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d111      	bne.n	8011aea <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8011ac6:	2008      	movs	r0, #8
 8011ac8:	f7ff ff3c 	bl	8011944 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011acc:	2001      	movs	r0, #1
 8011ace:	f7fd fd37 	bl	800f540 <memp_malloc>
 8011ad2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8011ad4:	68fb      	ldr	r3, [r7, #12]
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d107      	bne.n	8011aea <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8011ada:	79fb      	ldrb	r3, [r7, #7]
 8011adc:	4618      	mov	r0, r3
 8011ade:	f7ff fee3 	bl	80118a8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011ae2:	2001      	movs	r0, #1
 8011ae4:	f7fd fd2c 	bl	800f540 <memp_malloc>
 8011ae8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8011aea:	68fb      	ldr	r3, [r7, #12]
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d03f      	beq.n	8011b70 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8011af0:	229c      	movs	r2, #156	; 0x9c
 8011af2:	2100      	movs	r1, #0
 8011af4:	68f8      	ldr	r0, [r7, #12]
 8011af6:	f007 fbff 	bl	80192f8 <memset>
    pcb->prio = prio;
 8011afa:	68fb      	ldr	r3, [r7, #12]
 8011afc:	79fa      	ldrb	r2, [r7, #7]
 8011afe:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8011b00:	68fb      	ldr	r3, [r7, #12]
 8011b02:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8011b06:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8011b0a:	68fb      	ldr	r3, [r7, #12]
 8011b0c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8011b10:	855a      	strh	r2, [r3, #42]	; 0x2a
 8011b12:	68fb      	ldr	r3, [r7, #12]
 8011b14:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8011b16:	68fb      	ldr	r3, [r7, #12]
 8011b18:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8011b1a:	68fb      	ldr	r3, [r7, #12]
 8011b1c:	22ff      	movs	r2, #255	; 0xff
 8011b1e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8011b20:	68fb      	ldr	r3, [r7, #12]
 8011b22:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011b26:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	2206      	movs	r2, #6
 8011b2c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8011b30:	68fb      	ldr	r3, [r7, #12]
 8011b32:	2206      	movs	r2, #6
 8011b34:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8011b36:	68fb      	ldr	r3, [r7, #12]
 8011b38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011b3c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8011b3e:	68fb      	ldr	r3, [r7, #12]
 8011b40:	2201      	movs	r2, #1
 8011b42:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8011b46:	4b0d      	ldr	r3, [pc, #52]	; (8011b7c <tcp_alloc+0xf8>)
 8011b48:	681a      	ldr	r2, [r3, #0]
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8011b4e:	4b0c      	ldr	r3, [pc, #48]	; (8011b80 <tcp_alloc+0xfc>)
 8011b50:	781a      	ldrb	r2, [r3, #0]
 8011b52:	68fb      	ldr	r3, [r7, #12]
 8011b54:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8011b56:	68fb      	ldr	r3, [r7, #12]
 8011b58:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8011b5c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8011b60:	68fb      	ldr	r3, [r7, #12]
 8011b62:	4a08      	ldr	r2, [pc, #32]	; (8011b84 <tcp_alloc+0x100>)
 8011b64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8011b68:	68fb      	ldr	r3, [r7, #12]
 8011b6a:	4a07      	ldr	r2, [pc, #28]	; (8011b88 <tcp_alloc+0x104>)
 8011b6c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8011b70:	68fb      	ldr	r3, [r7, #12]
}
 8011b72:	4618      	mov	r0, r3
 8011b74:	3710      	adds	r7, #16
 8011b76:	46bd      	mov	sp, r7
 8011b78:	bd80      	pop	{r7, pc}
 8011b7a:	bf00      	nop
 8011b7c:	20007ff8 	.word	0x20007ff8
 8011b80:	2000800e 	.word	0x2000800e
 8011b84:	0801183d 	.word	0x0801183d
 8011b88:	006ddd00 	.word	0x006ddd00

08011b8c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8011b8c:	b580      	push	{r7, lr}
 8011b8e:	b082      	sub	sp, #8
 8011b90:	af00      	add	r7, sp, #0
 8011b92:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d107      	bne.n	8011baa <tcp_pcb_purge+0x1e>
 8011b9a:	4b21      	ldr	r3, [pc, #132]	; (8011c20 <tcp_pcb_purge+0x94>)
 8011b9c:	f640 0251 	movw	r2, #2129	; 0x851
 8011ba0:	4920      	ldr	r1, [pc, #128]	; (8011c24 <tcp_pcb_purge+0x98>)
 8011ba2:	4821      	ldr	r0, [pc, #132]	; (8011c28 <tcp_pcb_purge+0x9c>)
 8011ba4:	f007 fa52 	bl	801904c <iprintf>
 8011ba8:	e037      	b.n	8011c1a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	7d1b      	ldrb	r3, [r3, #20]
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	d033      	beq.n	8011c1a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8011bb6:	2b0a      	cmp	r3, #10
 8011bb8:	d02f      	beq.n	8011c1a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8011bbe:	2b01      	cmp	r3, #1
 8011bc0:	d02b      	beq.n	8011c1a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d007      	beq.n	8011bda <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011bce:	4618      	mov	r0, r3
 8011bd0:	f7fe fb7c 	bl	80102cc <pbuf_free>
      pcb->refused_data = NULL;
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	2200      	movs	r2, #0
 8011bd8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d002      	beq.n	8011be8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8011be2:	6878      	ldr	r0, [r7, #4]
 8011be4:	f000 f986 	bl	8011ef4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011bee:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011bf4:	4618      	mov	r0, r3
 8011bf6:	f7ff fdc7 	bl	8011788 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011bfe:	4618      	mov	r0, r3
 8011c00:	f7ff fdc2 	bl	8011788 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	2200      	movs	r2, #0
 8011c08:	66da      	str	r2, [r3, #108]	; 0x6c
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	2200      	movs	r2, #0
 8011c16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8011c1a:	3708      	adds	r7, #8
 8011c1c:	46bd      	mov	sp, r7
 8011c1e:	bd80      	pop	{r7, pc}
 8011c20:	0801c188 	.word	0x0801c188
 8011c24:	0801c7d4 	.word	0x0801c7d4
 8011c28:	0801c1cc 	.word	0x0801c1cc

08011c2c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8011c2c:	b580      	push	{r7, lr}
 8011c2e:	b084      	sub	sp, #16
 8011c30:	af00      	add	r7, sp, #0
 8011c32:	6078      	str	r0, [r7, #4]
 8011c34:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8011c36:	683b      	ldr	r3, [r7, #0]
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d106      	bne.n	8011c4a <tcp_pcb_remove+0x1e>
 8011c3c:	4b3e      	ldr	r3, [pc, #248]	; (8011d38 <tcp_pcb_remove+0x10c>)
 8011c3e:	f640 0283 	movw	r2, #2179	; 0x883
 8011c42:	493e      	ldr	r1, [pc, #248]	; (8011d3c <tcp_pcb_remove+0x110>)
 8011c44:	483e      	ldr	r0, [pc, #248]	; (8011d40 <tcp_pcb_remove+0x114>)
 8011c46:	f007 fa01 	bl	801904c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d106      	bne.n	8011c5e <tcp_pcb_remove+0x32>
 8011c50:	4b39      	ldr	r3, [pc, #228]	; (8011d38 <tcp_pcb_remove+0x10c>)
 8011c52:	f640 0284 	movw	r2, #2180	; 0x884
 8011c56:	493b      	ldr	r1, [pc, #236]	; (8011d44 <tcp_pcb_remove+0x118>)
 8011c58:	4839      	ldr	r0, [pc, #228]	; (8011d40 <tcp_pcb_remove+0x114>)
 8011c5a:	f007 f9f7 	bl	801904c <iprintf>

  TCP_RMV(pcblist, pcb);
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	681b      	ldr	r3, [r3, #0]
 8011c62:	683a      	ldr	r2, [r7, #0]
 8011c64:	429a      	cmp	r2, r3
 8011c66:	d105      	bne.n	8011c74 <tcp_pcb_remove+0x48>
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	68da      	ldr	r2, [r3, #12]
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	601a      	str	r2, [r3, #0]
 8011c72:	e013      	b.n	8011c9c <tcp_pcb_remove+0x70>
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	681b      	ldr	r3, [r3, #0]
 8011c78:	60fb      	str	r3, [r7, #12]
 8011c7a:	e00c      	b.n	8011c96 <tcp_pcb_remove+0x6a>
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	68db      	ldr	r3, [r3, #12]
 8011c80:	683a      	ldr	r2, [r7, #0]
 8011c82:	429a      	cmp	r2, r3
 8011c84:	d104      	bne.n	8011c90 <tcp_pcb_remove+0x64>
 8011c86:	683b      	ldr	r3, [r7, #0]
 8011c88:	68da      	ldr	r2, [r3, #12]
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	60da      	str	r2, [r3, #12]
 8011c8e:	e005      	b.n	8011c9c <tcp_pcb_remove+0x70>
 8011c90:	68fb      	ldr	r3, [r7, #12]
 8011c92:	68db      	ldr	r3, [r3, #12]
 8011c94:	60fb      	str	r3, [r7, #12]
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d1ef      	bne.n	8011c7c <tcp_pcb_remove+0x50>
 8011c9c:	683b      	ldr	r3, [r7, #0]
 8011c9e:	2200      	movs	r2, #0
 8011ca0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8011ca2:	6838      	ldr	r0, [r7, #0]
 8011ca4:	f7ff ff72 	bl	8011b8c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8011ca8:	683b      	ldr	r3, [r7, #0]
 8011caa:	7d1b      	ldrb	r3, [r3, #20]
 8011cac:	2b0a      	cmp	r3, #10
 8011cae:	d013      	beq.n	8011cd8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8011cb0:	683b      	ldr	r3, [r7, #0]
 8011cb2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8011cb4:	2b01      	cmp	r3, #1
 8011cb6:	d00f      	beq.n	8011cd8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8011cb8:	683b      	ldr	r3, [r7, #0]
 8011cba:	8b5b      	ldrh	r3, [r3, #26]
 8011cbc:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	d009      	beq.n	8011cd8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8011cc4:	683b      	ldr	r3, [r7, #0]
 8011cc6:	8b5b      	ldrh	r3, [r3, #26]
 8011cc8:	f043 0302 	orr.w	r3, r3, #2
 8011ccc:	b29a      	uxth	r2, r3
 8011cce:	683b      	ldr	r3, [r7, #0]
 8011cd0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011cd2:	6838      	ldr	r0, [r7, #0]
 8011cd4:	f002 ff6e 	bl	8014bb4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8011cd8:	683b      	ldr	r3, [r7, #0]
 8011cda:	7d1b      	ldrb	r3, [r3, #20]
 8011cdc:	2b01      	cmp	r3, #1
 8011cde:	d020      	beq.n	8011d22 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8011ce0:	683b      	ldr	r3, [r7, #0]
 8011ce2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d006      	beq.n	8011cf6 <tcp_pcb_remove+0xca>
 8011ce8:	4b13      	ldr	r3, [pc, #76]	; (8011d38 <tcp_pcb_remove+0x10c>)
 8011cea:	f640 0293 	movw	r2, #2195	; 0x893
 8011cee:	4916      	ldr	r1, [pc, #88]	; (8011d48 <tcp_pcb_remove+0x11c>)
 8011cf0:	4813      	ldr	r0, [pc, #76]	; (8011d40 <tcp_pcb_remove+0x114>)
 8011cf2:	f007 f9ab 	bl	801904c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8011cf6:	683b      	ldr	r3, [r7, #0]
 8011cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d006      	beq.n	8011d0c <tcp_pcb_remove+0xe0>
 8011cfe:	4b0e      	ldr	r3, [pc, #56]	; (8011d38 <tcp_pcb_remove+0x10c>)
 8011d00:	f640 0294 	movw	r2, #2196	; 0x894
 8011d04:	4911      	ldr	r1, [pc, #68]	; (8011d4c <tcp_pcb_remove+0x120>)
 8011d06:	480e      	ldr	r0, [pc, #56]	; (8011d40 <tcp_pcb_remove+0x114>)
 8011d08:	f007 f9a0 	bl	801904c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8011d0c:	683b      	ldr	r3, [r7, #0]
 8011d0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d006      	beq.n	8011d22 <tcp_pcb_remove+0xf6>
 8011d14:	4b08      	ldr	r3, [pc, #32]	; (8011d38 <tcp_pcb_remove+0x10c>)
 8011d16:	f640 0296 	movw	r2, #2198	; 0x896
 8011d1a:	490d      	ldr	r1, [pc, #52]	; (8011d50 <tcp_pcb_remove+0x124>)
 8011d1c:	4808      	ldr	r0, [pc, #32]	; (8011d40 <tcp_pcb_remove+0x114>)
 8011d1e:	f007 f995 	bl	801904c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8011d22:	683b      	ldr	r3, [r7, #0]
 8011d24:	2200      	movs	r2, #0
 8011d26:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8011d28:	683b      	ldr	r3, [r7, #0]
 8011d2a:	2200      	movs	r2, #0
 8011d2c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8011d2e:	bf00      	nop
 8011d30:	3710      	adds	r7, #16
 8011d32:	46bd      	mov	sp, r7
 8011d34:	bd80      	pop	{r7, pc}
 8011d36:	bf00      	nop
 8011d38:	0801c188 	.word	0x0801c188
 8011d3c:	0801c7f0 	.word	0x0801c7f0
 8011d40:	0801c1cc 	.word	0x0801c1cc
 8011d44:	0801c80c 	.word	0x0801c80c
 8011d48:	0801c82c 	.word	0x0801c82c
 8011d4c:	0801c844 	.word	0x0801c844
 8011d50:	0801c860 	.word	0x0801c860

08011d54 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8011d54:	b580      	push	{r7, lr}
 8011d56:	b082      	sub	sp, #8
 8011d58:	af00      	add	r7, sp, #0
 8011d5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d106      	bne.n	8011d70 <tcp_next_iss+0x1c>
 8011d62:	4b0a      	ldr	r3, [pc, #40]	; (8011d8c <tcp_next_iss+0x38>)
 8011d64:	f640 02af 	movw	r2, #2223	; 0x8af
 8011d68:	4909      	ldr	r1, [pc, #36]	; (8011d90 <tcp_next_iss+0x3c>)
 8011d6a:	480a      	ldr	r0, [pc, #40]	; (8011d94 <tcp_next_iss+0x40>)
 8011d6c:	f007 f96e 	bl	801904c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8011d70:	4b09      	ldr	r3, [pc, #36]	; (8011d98 <tcp_next_iss+0x44>)
 8011d72:	681a      	ldr	r2, [r3, #0]
 8011d74:	4b09      	ldr	r3, [pc, #36]	; (8011d9c <tcp_next_iss+0x48>)
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	4413      	add	r3, r2
 8011d7a:	4a07      	ldr	r2, [pc, #28]	; (8011d98 <tcp_next_iss+0x44>)
 8011d7c:	6013      	str	r3, [r2, #0]
  return iss;
 8011d7e:	4b06      	ldr	r3, [pc, #24]	; (8011d98 <tcp_next_iss+0x44>)
 8011d80:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8011d82:	4618      	mov	r0, r3
 8011d84:	3708      	adds	r7, #8
 8011d86:	46bd      	mov	sp, r7
 8011d88:	bd80      	pop	{r7, pc}
 8011d8a:	bf00      	nop
 8011d8c:	0801c188 	.word	0x0801c188
 8011d90:	0801c878 	.word	0x0801c878
 8011d94:	0801c1cc 	.word	0x0801c1cc
 8011d98:	20000058 	.word	0x20000058
 8011d9c:	20007ff8 	.word	0x20007ff8

08011da0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8011da0:	b580      	push	{r7, lr}
 8011da2:	b086      	sub	sp, #24
 8011da4:	af00      	add	r7, sp, #0
 8011da6:	4603      	mov	r3, r0
 8011da8:	60b9      	str	r1, [r7, #8]
 8011daa:	607a      	str	r2, [r7, #4]
 8011dac:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d106      	bne.n	8011dc2 <tcp_eff_send_mss_netif+0x22>
 8011db4:	4b14      	ldr	r3, [pc, #80]	; (8011e08 <tcp_eff_send_mss_netif+0x68>)
 8011db6:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8011dba:	4914      	ldr	r1, [pc, #80]	; (8011e0c <tcp_eff_send_mss_netif+0x6c>)
 8011dbc:	4814      	ldr	r0, [pc, #80]	; (8011e10 <tcp_eff_send_mss_netif+0x70>)
 8011dbe:	f007 f945 	bl	801904c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8011dc2:	68bb      	ldr	r3, [r7, #8]
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d101      	bne.n	8011dcc <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8011dc8:	89fb      	ldrh	r3, [r7, #14]
 8011dca:	e019      	b.n	8011e00 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8011dcc:	68bb      	ldr	r3, [r7, #8]
 8011dce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011dd0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8011dd2:	8afb      	ldrh	r3, [r7, #22]
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d012      	beq.n	8011dfe <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8011dd8:	2328      	movs	r3, #40	; 0x28
 8011dda:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8011ddc:	8afa      	ldrh	r2, [r7, #22]
 8011dde:	8abb      	ldrh	r3, [r7, #20]
 8011de0:	429a      	cmp	r2, r3
 8011de2:	d904      	bls.n	8011dee <tcp_eff_send_mss_netif+0x4e>
 8011de4:	8afa      	ldrh	r2, [r7, #22]
 8011de6:	8abb      	ldrh	r3, [r7, #20]
 8011de8:	1ad3      	subs	r3, r2, r3
 8011dea:	b29b      	uxth	r3, r3
 8011dec:	e000      	b.n	8011df0 <tcp_eff_send_mss_netif+0x50>
 8011dee:	2300      	movs	r3, #0
 8011df0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8011df2:	8a7a      	ldrh	r2, [r7, #18]
 8011df4:	89fb      	ldrh	r3, [r7, #14]
 8011df6:	4293      	cmp	r3, r2
 8011df8:	bf28      	it	cs
 8011dfa:	4613      	movcs	r3, r2
 8011dfc:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8011dfe:	89fb      	ldrh	r3, [r7, #14]
}
 8011e00:	4618      	mov	r0, r3
 8011e02:	3718      	adds	r7, #24
 8011e04:	46bd      	mov	sp, r7
 8011e06:	bd80      	pop	{r7, pc}
 8011e08:	0801c188 	.word	0x0801c188
 8011e0c:	0801c894 	.word	0x0801c894
 8011e10:	0801c1cc 	.word	0x0801c1cc

08011e14 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8011e14:	b580      	push	{r7, lr}
 8011e16:	b084      	sub	sp, #16
 8011e18:	af00      	add	r7, sp, #0
 8011e1a:	6078      	str	r0, [r7, #4]
 8011e1c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8011e1e:	683b      	ldr	r3, [r7, #0]
 8011e20:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d119      	bne.n	8011e5c <tcp_netif_ip_addr_changed_pcblist+0x48>
 8011e28:	4b10      	ldr	r3, [pc, #64]	; (8011e6c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8011e2a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8011e2e:	4910      	ldr	r1, [pc, #64]	; (8011e70 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8011e30:	4810      	ldr	r0, [pc, #64]	; (8011e74 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8011e32:	f007 f90b 	bl	801904c <iprintf>

  while (pcb != NULL) {
 8011e36:	e011      	b.n	8011e5c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8011e38:	68fb      	ldr	r3, [r7, #12]
 8011e3a:	681a      	ldr	r2, [r3, #0]
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	429a      	cmp	r2, r3
 8011e42:	d108      	bne.n	8011e56 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8011e44:	68fb      	ldr	r3, [r7, #12]
 8011e46:	68db      	ldr	r3, [r3, #12]
 8011e48:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8011e4a:	68f8      	ldr	r0, [r7, #12]
 8011e4c:	f7fe ffc6 	bl	8010ddc <tcp_abort>
      pcb = next;
 8011e50:	68bb      	ldr	r3, [r7, #8]
 8011e52:	60fb      	str	r3, [r7, #12]
 8011e54:	e002      	b.n	8011e5c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8011e56:	68fb      	ldr	r3, [r7, #12]
 8011e58:	68db      	ldr	r3, [r3, #12]
 8011e5a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8011e5c:	68fb      	ldr	r3, [r7, #12]
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d1ea      	bne.n	8011e38 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8011e62:	bf00      	nop
 8011e64:	bf00      	nop
 8011e66:	3710      	adds	r7, #16
 8011e68:	46bd      	mov	sp, r7
 8011e6a:	bd80      	pop	{r7, pc}
 8011e6c:	0801c188 	.word	0x0801c188
 8011e70:	0801c8bc 	.word	0x0801c8bc
 8011e74:	0801c1cc 	.word	0x0801c1cc

08011e78 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011e78:	b580      	push	{r7, lr}
 8011e7a:	b084      	sub	sp, #16
 8011e7c:	af00      	add	r7, sp, #0
 8011e7e:	6078      	str	r0, [r7, #4]
 8011e80:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d02a      	beq.n	8011ede <tcp_netif_ip_addr_changed+0x66>
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d026      	beq.n	8011ede <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8011e90:	4b15      	ldr	r3, [pc, #84]	; (8011ee8 <tcp_netif_ip_addr_changed+0x70>)
 8011e92:	681b      	ldr	r3, [r3, #0]
 8011e94:	4619      	mov	r1, r3
 8011e96:	6878      	ldr	r0, [r7, #4]
 8011e98:	f7ff ffbc 	bl	8011e14 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8011e9c:	4b13      	ldr	r3, [pc, #76]	; (8011eec <tcp_netif_ip_addr_changed+0x74>)
 8011e9e:	681b      	ldr	r3, [r3, #0]
 8011ea0:	4619      	mov	r1, r3
 8011ea2:	6878      	ldr	r0, [r7, #4]
 8011ea4:	f7ff ffb6 	bl	8011e14 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8011ea8:	683b      	ldr	r3, [r7, #0]
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d017      	beq.n	8011ede <tcp_netif_ip_addr_changed+0x66>
 8011eae:	683b      	ldr	r3, [r7, #0]
 8011eb0:	681b      	ldr	r3, [r3, #0]
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d013      	beq.n	8011ede <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011eb6:	4b0e      	ldr	r3, [pc, #56]	; (8011ef0 <tcp_netif_ip_addr_changed+0x78>)
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	60fb      	str	r3, [r7, #12]
 8011ebc:	e00c      	b.n	8011ed8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8011ebe:	68fb      	ldr	r3, [r7, #12]
 8011ec0:	681a      	ldr	r2, [r3, #0]
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	429a      	cmp	r2, r3
 8011ec8:	d103      	bne.n	8011ed2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8011eca:	683b      	ldr	r3, [r7, #0]
 8011ecc:	681a      	ldr	r2, [r3, #0]
 8011ece:	68fb      	ldr	r3, [r7, #12]
 8011ed0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011ed2:	68fb      	ldr	r3, [r7, #12]
 8011ed4:	68db      	ldr	r3, [r3, #12]
 8011ed6:	60fb      	str	r3, [r7, #12]
 8011ed8:	68fb      	ldr	r3, [r7, #12]
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d1ef      	bne.n	8011ebe <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8011ede:	bf00      	nop
 8011ee0:	3710      	adds	r7, #16
 8011ee2:	46bd      	mov	sp, r7
 8011ee4:	bd80      	pop	{r7, pc}
 8011ee6:	bf00      	nop
 8011ee8:	20008004 	.word	0x20008004
 8011eec:	20007ffc 	.word	0x20007ffc
 8011ef0:	20008000 	.word	0x20008000

08011ef4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8011ef4:	b580      	push	{r7, lr}
 8011ef6:	b082      	sub	sp, #8
 8011ef8:	af00      	add	r7, sp, #0
 8011efa:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d007      	beq.n	8011f14 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011f08:	4618      	mov	r0, r3
 8011f0a:	f7ff fc3d 	bl	8011788 <tcp_segs_free>
    pcb->ooseq = NULL;
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	2200      	movs	r2, #0
 8011f12:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8011f14:	bf00      	nop
 8011f16:	3708      	adds	r7, #8
 8011f18:	46bd      	mov	sp, r7
 8011f1a:	bd80      	pop	{r7, pc}

08011f1c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8011f1c:	b590      	push	{r4, r7, lr}
 8011f1e:	b08d      	sub	sp, #52	; 0x34
 8011f20:	af04      	add	r7, sp, #16
 8011f22:	6078      	str	r0, [r7, #4]
 8011f24:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d105      	bne.n	8011f38 <tcp_input+0x1c>
 8011f2c:	4b9b      	ldr	r3, [pc, #620]	; (801219c <tcp_input+0x280>)
 8011f2e:	2283      	movs	r2, #131	; 0x83
 8011f30:	499b      	ldr	r1, [pc, #620]	; (80121a0 <tcp_input+0x284>)
 8011f32:	489c      	ldr	r0, [pc, #624]	; (80121a4 <tcp_input+0x288>)
 8011f34:	f007 f88a 	bl	801904c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	685b      	ldr	r3, [r3, #4]
 8011f3c:	4a9a      	ldr	r2, [pc, #616]	; (80121a8 <tcp_input+0x28c>)
 8011f3e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	895b      	ldrh	r3, [r3, #10]
 8011f44:	2b13      	cmp	r3, #19
 8011f46:	f240 83d1 	bls.w	80126ec <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8011f4a:	4b98      	ldr	r3, [pc, #608]	; (80121ac <tcp_input+0x290>)
 8011f4c:	695b      	ldr	r3, [r3, #20]
 8011f4e:	4a97      	ldr	r2, [pc, #604]	; (80121ac <tcp_input+0x290>)
 8011f50:	6812      	ldr	r2, [r2, #0]
 8011f52:	4611      	mov	r1, r2
 8011f54:	4618      	mov	r0, r3
 8011f56:	f005 fbfb 	bl	8017750 <ip4_addr_isbroadcast_u32>
 8011f5a:	4603      	mov	r3, r0
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	f040 83c7 	bne.w	80126f0 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8011f62:	4b92      	ldr	r3, [pc, #584]	; (80121ac <tcp_input+0x290>)
 8011f64:	695b      	ldr	r3, [r3, #20]
 8011f66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8011f6a:	2be0      	cmp	r3, #224	; 0xe0
 8011f6c:	f000 83c0 	beq.w	80126f0 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8011f70:	4b8d      	ldr	r3, [pc, #564]	; (80121a8 <tcp_input+0x28c>)
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	899b      	ldrh	r3, [r3, #12]
 8011f76:	b29b      	uxth	r3, r3
 8011f78:	4618      	mov	r0, r3
 8011f7a:	f7fc fdb1 	bl	800eae0 <lwip_htons>
 8011f7e:	4603      	mov	r3, r0
 8011f80:	0b1b      	lsrs	r3, r3, #12
 8011f82:	b29b      	uxth	r3, r3
 8011f84:	b2db      	uxtb	r3, r3
 8011f86:	009b      	lsls	r3, r3, #2
 8011f88:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8011f8a:	7cbb      	ldrb	r3, [r7, #18]
 8011f8c:	2b13      	cmp	r3, #19
 8011f8e:	f240 83b1 	bls.w	80126f4 <tcp_input+0x7d8>
 8011f92:	7cbb      	ldrb	r3, [r7, #18]
 8011f94:	b29a      	uxth	r2, r3
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	891b      	ldrh	r3, [r3, #8]
 8011f9a:	429a      	cmp	r2, r3
 8011f9c:	f200 83aa 	bhi.w	80126f4 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8011fa0:	7cbb      	ldrb	r3, [r7, #18]
 8011fa2:	b29b      	uxth	r3, r3
 8011fa4:	3b14      	subs	r3, #20
 8011fa6:	b29a      	uxth	r2, r3
 8011fa8:	4b81      	ldr	r3, [pc, #516]	; (80121b0 <tcp_input+0x294>)
 8011faa:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8011fac:	4b81      	ldr	r3, [pc, #516]	; (80121b4 <tcp_input+0x298>)
 8011fae:	2200      	movs	r2, #0
 8011fb0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	895a      	ldrh	r2, [r3, #10]
 8011fb6:	7cbb      	ldrb	r3, [r7, #18]
 8011fb8:	b29b      	uxth	r3, r3
 8011fba:	429a      	cmp	r2, r3
 8011fbc:	d309      	bcc.n	8011fd2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8011fbe:	4b7c      	ldr	r3, [pc, #496]	; (80121b0 <tcp_input+0x294>)
 8011fc0:	881a      	ldrh	r2, [r3, #0]
 8011fc2:	4b7d      	ldr	r3, [pc, #500]	; (80121b8 <tcp_input+0x29c>)
 8011fc4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8011fc6:	7cbb      	ldrb	r3, [r7, #18]
 8011fc8:	4619      	mov	r1, r3
 8011fca:	6878      	ldr	r0, [r7, #4]
 8011fcc:	f7fe f8f8 	bl	80101c0 <pbuf_remove_header>
 8011fd0:	e04e      	b.n	8012070 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d105      	bne.n	8011fe6 <tcp_input+0xca>
 8011fda:	4b70      	ldr	r3, [pc, #448]	; (801219c <tcp_input+0x280>)
 8011fdc:	22c2      	movs	r2, #194	; 0xc2
 8011fde:	4977      	ldr	r1, [pc, #476]	; (80121bc <tcp_input+0x2a0>)
 8011fe0:	4870      	ldr	r0, [pc, #448]	; (80121a4 <tcp_input+0x288>)
 8011fe2:	f007 f833 	bl	801904c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8011fe6:	2114      	movs	r1, #20
 8011fe8:	6878      	ldr	r0, [r7, #4]
 8011fea:	f7fe f8e9 	bl	80101c0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	895a      	ldrh	r2, [r3, #10]
 8011ff2:	4b71      	ldr	r3, [pc, #452]	; (80121b8 <tcp_input+0x29c>)
 8011ff4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8011ff6:	4b6e      	ldr	r3, [pc, #440]	; (80121b0 <tcp_input+0x294>)
 8011ff8:	881a      	ldrh	r2, [r3, #0]
 8011ffa:	4b6f      	ldr	r3, [pc, #444]	; (80121b8 <tcp_input+0x29c>)
 8011ffc:	881b      	ldrh	r3, [r3, #0]
 8011ffe:	1ad3      	subs	r3, r2, r3
 8012000:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8012002:	4b6d      	ldr	r3, [pc, #436]	; (80121b8 <tcp_input+0x29c>)
 8012004:	881b      	ldrh	r3, [r3, #0]
 8012006:	4619      	mov	r1, r3
 8012008:	6878      	ldr	r0, [r7, #4]
 801200a:	f7fe f8d9 	bl	80101c0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	681b      	ldr	r3, [r3, #0]
 8012012:	895b      	ldrh	r3, [r3, #10]
 8012014:	8a3a      	ldrh	r2, [r7, #16]
 8012016:	429a      	cmp	r2, r3
 8012018:	f200 836e 	bhi.w	80126f8 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	681b      	ldr	r3, [r3, #0]
 8012020:	685b      	ldr	r3, [r3, #4]
 8012022:	4a64      	ldr	r2, [pc, #400]	; (80121b4 <tcp_input+0x298>)
 8012024:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	8a3a      	ldrh	r2, [r7, #16]
 801202c:	4611      	mov	r1, r2
 801202e:	4618      	mov	r0, r3
 8012030:	f7fe f8c6 	bl	80101c0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	891a      	ldrh	r2, [r3, #8]
 8012038:	8a3b      	ldrh	r3, [r7, #16]
 801203a:	1ad3      	subs	r3, r2, r3
 801203c:	b29a      	uxth	r2, r3
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	895b      	ldrh	r3, [r3, #10]
 8012046:	2b00      	cmp	r3, #0
 8012048:	d005      	beq.n	8012056 <tcp_input+0x13a>
 801204a:	4b54      	ldr	r3, [pc, #336]	; (801219c <tcp_input+0x280>)
 801204c:	22df      	movs	r2, #223	; 0xdf
 801204e:	495c      	ldr	r1, [pc, #368]	; (80121c0 <tcp_input+0x2a4>)
 8012050:	4854      	ldr	r0, [pc, #336]	; (80121a4 <tcp_input+0x288>)
 8012052:	f006 fffb 	bl	801904c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	891a      	ldrh	r2, [r3, #8]
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	681b      	ldr	r3, [r3, #0]
 801205e:	891b      	ldrh	r3, [r3, #8]
 8012060:	429a      	cmp	r2, r3
 8012062:	d005      	beq.n	8012070 <tcp_input+0x154>
 8012064:	4b4d      	ldr	r3, [pc, #308]	; (801219c <tcp_input+0x280>)
 8012066:	22e0      	movs	r2, #224	; 0xe0
 8012068:	4956      	ldr	r1, [pc, #344]	; (80121c4 <tcp_input+0x2a8>)
 801206a:	484e      	ldr	r0, [pc, #312]	; (80121a4 <tcp_input+0x288>)
 801206c:	f006 ffee 	bl	801904c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8012070:	4b4d      	ldr	r3, [pc, #308]	; (80121a8 <tcp_input+0x28c>)
 8012072:	681b      	ldr	r3, [r3, #0]
 8012074:	881b      	ldrh	r3, [r3, #0]
 8012076:	b29b      	uxth	r3, r3
 8012078:	4a4b      	ldr	r2, [pc, #300]	; (80121a8 <tcp_input+0x28c>)
 801207a:	6814      	ldr	r4, [r2, #0]
 801207c:	4618      	mov	r0, r3
 801207e:	f7fc fd2f 	bl	800eae0 <lwip_htons>
 8012082:	4603      	mov	r3, r0
 8012084:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8012086:	4b48      	ldr	r3, [pc, #288]	; (80121a8 <tcp_input+0x28c>)
 8012088:	681b      	ldr	r3, [r3, #0]
 801208a:	885b      	ldrh	r3, [r3, #2]
 801208c:	b29b      	uxth	r3, r3
 801208e:	4a46      	ldr	r2, [pc, #280]	; (80121a8 <tcp_input+0x28c>)
 8012090:	6814      	ldr	r4, [r2, #0]
 8012092:	4618      	mov	r0, r3
 8012094:	f7fc fd24 	bl	800eae0 <lwip_htons>
 8012098:	4603      	mov	r3, r0
 801209a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801209c:	4b42      	ldr	r3, [pc, #264]	; (80121a8 <tcp_input+0x28c>)
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	685b      	ldr	r3, [r3, #4]
 80120a2:	4a41      	ldr	r2, [pc, #260]	; (80121a8 <tcp_input+0x28c>)
 80120a4:	6814      	ldr	r4, [r2, #0]
 80120a6:	4618      	mov	r0, r3
 80120a8:	f7fc fd2f 	bl	800eb0a <lwip_htonl>
 80120ac:	4603      	mov	r3, r0
 80120ae:	6063      	str	r3, [r4, #4]
 80120b0:	6863      	ldr	r3, [r4, #4]
 80120b2:	4a45      	ldr	r2, [pc, #276]	; (80121c8 <tcp_input+0x2ac>)
 80120b4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80120b6:	4b3c      	ldr	r3, [pc, #240]	; (80121a8 <tcp_input+0x28c>)
 80120b8:	681b      	ldr	r3, [r3, #0]
 80120ba:	689b      	ldr	r3, [r3, #8]
 80120bc:	4a3a      	ldr	r2, [pc, #232]	; (80121a8 <tcp_input+0x28c>)
 80120be:	6814      	ldr	r4, [r2, #0]
 80120c0:	4618      	mov	r0, r3
 80120c2:	f7fc fd22 	bl	800eb0a <lwip_htonl>
 80120c6:	4603      	mov	r3, r0
 80120c8:	60a3      	str	r3, [r4, #8]
 80120ca:	68a3      	ldr	r3, [r4, #8]
 80120cc:	4a3f      	ldr	r2, [pc, #252]	; (80121cc <tcp_input+0x2b0>)
 80120ce:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80120d0:	4b35      	ldr	r3, [pc, #212]	; (80121a8 <tcp_input+0x28c>)
 80120d2:	681b      	ldr	r3, [r3, #0]
 80120d4:	89db      	ldrh	r3, [r3, #14]
 80120d6:	b29b      	uxth	r3, r3
 80120d8:	4a33      	ldr	r2, [pc, #204]	; (80121a8 <tcp_input+0x28c>)
 80120da:	6814      	ldr	r4, [r2, #0]
 80120dc:	4618      	mov	r0, r3
 80120de:	f7fc fcff 	bl	800eae0 <lwip_htons>
 80120e2:	4603      	mov	r3, r0
 80120e4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80120e6:	4b30      	ldr	r3, [pc, #192]	; (80121a8 <tcp_input+0x28c>)
 80120e8:	681b      	ldr	r3, [r3, #0]
 80120ea:	899b      	ldrh	r3, [r3, #12]
 80120ec:	b29b      	uxth	r3, r3
 80120ee:	4618      	mov	r0, r3
 80120f0:	f7fc fcf6 	bl	800eae0 <lwip_htons>
 80120f4:	4603      	mov	r3, r0
 80120f6:	b2db      	uxtb	r3, r3
 80120f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80120fc:	b2da      	uxtb	r2, r3
 80120fe:	4b34      	ldr	r3, [pc, #208]	; (80121d0 <tcp_input+0x2b4>)
 8012100:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	891a      	ldrh	r2, [r3, #8]
 8012106:	4b33      	ldr	r3, [pc, #204]	; (80121d4 <tcp_input+0x2b8>)
 8012108:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801210a:	4b31      	ldr	r3, [pc, #196]	; (80121d0 <tcp_input+0x2b4>)
 801210c:	781b      	ldrb	r3, [r3, #0]
 801210e:	f003 0303 	and.w	r3, r3, #3
 8012112:	2b00      	cmp	r3, #0
 8012114:	d00c      	beq.n	8012130 <tcp_input+0x214>
    tcplen++;
 8012116:	4b2f      	ldr	r3, [pc, #188]	; (80121d4 <tcp_input+0x2b8>)
 8012118:	881b      	ldrh	r3, [r3, #0]
 801211a:	3301      	adds	r3, #1
 801211c:	b29a      	uxth	r2, r3
 801211e:	4b2d      	ldr	r3, [pc, #180]	; (80121d4 <tcp_input+0x2b8>)
 8012120:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	891a      	ldrh	r2, [r3, #8]
 8012126:	4b2b      	ldr	r3, [pc, #172]	; (80121d4 <tcp_input+0x2b8>)
 8012128:	881b      	ldrh	r3, [r3, #0]
 801212a:	429a      	cmp	r2, r3
 801212c:	f200 82e6 	bhi.w	80126fc <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8012130:	2300      	movs	r3, #0
 8012132:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012134:	4b28      	ldr	r3, [pc, #160]	; (80121d8 <tcp_input+0x2bc>)
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	61fb      	str	r3, [r7, #28]
 801213a:	e09d      	b.n	8012278 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801213c:	69fb      	ldr	r3, [r7, #28]
 801213e:	7d1b      	ldrb	r3, [r3, #20]
 8012140:	2b00      	cmp	r3, #0
 8012142:	d105      	bne.n	8012150 <tcp_input+0x234>
 8012144:	4b15      	ldr	r3, [pc, #84]	; (801219c <tcp_input+0x280>)
 8012146:	22fb      	movs	r2, #251	; 0xfb
 8012148:	4924      	ldr	r1, [pc, #144]	; (80121dc <tcp_input+0x2c0>)
 801214a:	4816      	ldr	r0, [pc, #88]	; (80121a4 <tcp_input+0x288>)
 801214c:	f006 ff7e 	bl	801904c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8012150:	69fb      	ldr	r3, [r7, #28]
 8012152:	7d1b      	ldrb	r3, [r3, #20]
 8012154:	2b0a      	cmp	r3, #10
 8012156:	d105      	bne.n	8012164 <tcp_input+0x248>
 8012158:	4b10      	ldr	r3, [pc, #64]	; (801219c <tcp_input+0x280>)
 801215a:	22fc      	movs	r2, #252	; 0xfc
 801215c:	4920      	ldr	r1, [pc, #128]	; (80121e0 <tcp_input+0x2c4>)
 801215e:	4811      	ldr	r0, [pc, #68]	; (80121a4 <tcp_input+0x288>)
 8012160:	f006 ff74 	bl	801904c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8012164:	69fb      	ldr	r3, [r7, #28]
 8012166:	7d1b      	ldrb	r3, [r3, #20]
 8012168:	2b01      	cmp	r3, #1
 801216a:	d105      	bne.n	8012178 <tcp_input+0x25c>
 801216c:	4b0b      	ldr	r3, [pc, #44]	; (801219c <tcp_input+0x280>)
 801216e:	22fd      	movs	r2, #253	; 0xfd
 8012170:	491c      	ldr	r1, [pc, #112]	; (80121e4 <tcp_input+0x2c8>)
 8012172:	480c      	ldr	r0, [pc, #48]	; (80121a4 <tcp_input+0x288>)
 8012174:	f006 ff6a 	bl	801904c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012178:	69fb      	ldr	r3, [r7, #28]
 801217a:	7a1b      	ldrb	r3, [r3, #8]
 801217c:	2b00      	cmp	r3, #0
 801217e:	d033      	beq.n	80121e8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012180:	69fb      	ldr	r3, [r7, #28]
 8012182:	7a1a      	ldrb	r2, [r3, #8]
 8012184:	4b09      	ldr	r3, [pc, #36]	; (80121ac <tcp_input+0x290>)
 8012186:	685b      	ldr	r3, [r3, #4]
 8012188:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801218c:	3301      	adds	r3, #1
 801218e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012190:	429a      	cmp	r2, r3
 8012192:	d029      	beq.n	80121e8 <tcp_input+0x2cc>
      prev = pcb;
 8012194:	69fb      	ldr	r3, [r7, #28]
 8012196:	61bb      	str	r3, [r7, #24]
      continue;
 8012198:	e06b      	b.n	8012272 <tcp_input+0x356>
 801219a:	bf00      	nop
 801219c:	0801c8f0 	.word	0x0801c8f0
 80121a0:	0801c924 	.word	0x0801c924
 80121a4:	0801c93c 	.word	0x0801c93c
 80121a8:	20008020 	.word	0x20008020
 80121ac:	200050dc 	.word	0x200050dc
 80121b0:	20008024 	.word	0x20008024
 80121b4:	20008028 	.word	0x20008028
 80121b8:	20008026 	.word	0x20008026
 80121bc:	0801c964 	.word	0x0801c964
 80121c0:	0801c974 	.word	0x0801c974
 80121c4:	0801c980 	.word	0x0801c980
 80121c8:	20008030 	.word	0x20008030
 80121cc:	20008034 	.word	0x20008034
 80121d0:	2000803c 	.word	0x2000803c
 80121d4:	2000803a 	.word	0x2000803a
 80121d8:	20008004 	.word	0x20008004
 80121dc:	0801c9a0 	.word	0x0801c9a0
 80121e0:	0801c9c8 	.word	0x0801c9c8
 80121e4:	0801c9f4 	.word	0x0801c9f4
    }

    if (pcb->remote_port == tcphdr->src &&
 80121e8:	69fb      	ldr	r3, [r7, #28]
 80121ea:	8b1a      	ldrh	r2, [r3, #24]
 80121ec:	4b72      	ldr	r3, [pc, #456]	; (80123b8 <tcp_input+0x49c>)
 80121ee:	681b      	ldr	r3, [r3, #0]
 80121f0:	881b      	ldrh	r3, [r3, #0]
 80121f2:	b29b      	uxth	r3, r3
 80121f4:	429a      	cmp	r2, r3
 80121f6:	d13a      	bne.n	801226e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80121f8:	69fb      	ldr	r3, [r7, #28]
 80121fa:	8ada      	ldrh	r2, [r3, #22]
 80121fc:	4b6e      	ldr	r3, [pc, #440]	; (80123b8 <tcp_input+0x49c>)
 80121fe:	681b      	ldr	r3, [r3, #0]
 8012200:	885b      	ldrh	r3, [r3, #2]
 8012202:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8012204:	429a      	cmp	r2, r3
 8012206:	d132      	bne.n	801226e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012208:	69fb      	ldr	r3, [r7, #28]
 801220a:	685a      	ldr	r2, [r3, #4]
 801220c:	4b6b      	ldr	r3, [pc, #428]	; (80123bc <tcp_input+0x4a0>)
 801220e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8012210:	429a      	cmp	r2, r3
 8012212:	d12c      	bne.n	801226e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012214:	69fb      	ldr	r3, [r7, #28]
 8012216:	681a      	ldr	r2, [r3, #0]
 8012218:	4b68      	ldr	r3, [pc, #416]	; (80123bc <tcp_input+0x4a0>)
 801221a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801221c:	429a      	cmp	r2, r3
 801221e:	d126      	bne.n	801226e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8012220:	69fb      	ldr	r3, [r7, #28]
 8012222:	68db      	ldr	r3, [r3, #12]
 8012224:	69fa      	ldr	r2, [r7, #28]
 8012226:	429a      	cmp	r2, r3
 8012228:	d106      	bne.n	8012238 <tcp_input+0x31c>
 801222a:	4b65      	ldr	r3, [pc, #404]	; (80123c0 <tcp_input+0x4a4>)
 801222c:	f240 120d 	movw	r2, #269	; 0x10d
 8012230:	4964      	ldr	r1, [pc, #400]	; (80123c4 <tcp_input+0x4a8>)
 8012232:	4865      	ldr	r0, [pc, #404]	; (80123c8 <tcp_input+0x4ac>)
 8012234:	f006 ff0a 	bl	801904c <iprintf>
      if (prev != NULL) {
 8012238:	69bb      	ldr	r3, [r7, #24]
 801223a:	2b00      	cmp	r3, #0
 801223c:	d00a      	beq.n	8012254 <tcp_input+0x338>
        prev->next = pcb->next;
 801223e:	69fb      	ldr	r3, [r7, #28]
 8012240:	68da      	ldr	r2, [r3, #12]
 8012242:	69bb      	ldr	r3, [r7, #24]
 8012244:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8012246:	4b61      	ldr	r3, [pc, #388]	; (80123cc <tcp_input+0x4b0>)
 8012248:	681a      	ldr	r2, [r3, #0]
 801224a:	69fb      	ldr	r3, [r7, #28]
 801224c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801224e:	4a5f      	ldr	r2, [pc, #380]	; (80123cc <tcp_input+0x4b0>)
 8012250:	69fb      	ldr	r3, [r7, #28]
 8012252:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8012254:	69fb      	ldr	r3, [r7, #28]
 8012256:	68db      	ldr	r3, [r3, #12]
 8012258:	69fa      	ldr	r2, [r7, #28]
 801225a:	429a      	cmp	r2, r3
 801225c:	d111      	bne.n	8012282 <tcp_input+0x366>
 801225e:	4b58      	ldr	r3, [pc, #352]	; (80123c0 <tcp_input+0x4a4>)
 8012260:	f240 1215 	movw	r2, #277	; 0x115
 8012264:	495a      	ldr	r1, [pc, #360]	; (80123d0 <tcp_input+0x4b4>)
 8012266:	4858      	ldr	r0, [pc, #352]	; (80123c8 <tcp_input+0x4ac>)
 8012268:	f006 fef0 	bl	801904c <iprintf>
      break;
 801226c:	e009      	b.n	8012282 <tcp_input+0x366>
    }
    prev = pcb;
 801226e:	69fb      	ldr	r3, [r7, #28]
 8012270:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012272:	69fb      	ldr	r3, [r7, #28]
 8012274:	68db      	ldr	r3, [r3, #12]
 8012276:	61fb      	str	r3, [r7, #28]
 8012278:	69fb      	ldr	r3, [r7, #28]
 801227a:	2b00      	cmp	r3, #0
 801227c:	f47f af5e 	bne.w	801213c <tcp_input+0x220>
 8012280:	e000      	b.n	8012284 <tcp_input+0x368>
      break;
 8012282:	bf00      	nop
  }

  if (pcb == NULL) {
 8012284:	69fb      	ldr	r3, [r7, #28]
 8012286:	2b00      	cmp	r3, #0
 8012288:	f040 80aa 	bne.w	80123e0 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801228c:	4b51      	ldr	r3, [pc, #324]	; (80123d4 <tcp_input+0x4b8>)
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	61fb      	str	r3, [r7, #28]
 8012292:	e03f      	b.n	8012314 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012294:	69fb      	ldr	r3, [r7, #28]
 8012296:	7d1b      	ldrb	r3, [r3, #20]
 8012298:	2b0a      	cmp	r3, #10
 801229a:	d006      	beq.n	80122aa <tcp_input+0x38e>
 801229c:	4b48      	ldr	r3, [pc, #288]	; (80123c0 <tcp_input+0x4a4>)
 801229e:	f240 121f 	movw	r2, #287	; 0x11f
 80122a2:	494d      	ldr	r1, [pc, #308]	; (80123d8 <tcp_input+0x4bc>)
 80122a4:	4848      	ldr	r0, [pc, #288]	; (80123c8 <tcp_input+0x4ac>)
 80122a6:	f006 fed1 	bl	801904c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80122aa:	69fb      	ldr	r3, [r7, #28]
 80122ac:	7a1b      	ldrb	r3, [r3, #8]
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d009      	beq.n	80122c6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80122b2:	69fb      	ldr	r3, [r7, #28]
 80122b4:	7a1a      	ldrb	r2, [r3, #8]
 80122b6:	4b41      	ldr	r3, [pc, #260]	; (80123bc <tcp_input+0x4a0>)
 80122b8:	685b      	ldr	r3, [r3, #4]
 80122ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80122be:	3301      	adds	r3, #1
 80122c0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80122c2:	429a      	cmp	r2, r3
 80122c4:	d122      	bne.n	801230c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80122c6:	69fb      	ldr	r3, [r7, #28]
 80122c8:	8b1a      	ldrh	r2, [r3, #24]
 80122ca:	4b3b      	ldr	r3, [pc, #236]	; (80123b8 <tcp_input+0x49c>)
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	881b      	ldrh	r3, [r3, #0]
 80122d0:	b29b      	uxth	r3, r3
 80122d2:	429a      	cmp	r2, r3
 80122d4:	d11b      	bne.n	801230e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80122d6:	69fb      	ldr	r3, [r7, #28]
 80122d8:	8ada      	ldrh	r2, [r3, #22]
 80122da:	4b37      	ldr	r3, [pc, #220]	; (80123b8 <tcp_input+0x49c>)
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	885b      	ldrh	r3, [r3, #2]
 80122e0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80122e2:	429a      	cmp	r2, r3
 80122e4:	d113      	bne.n	801230e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80122e6:	69fb      	ldr	r3, [r7, #28]
 80122e8:	685a      	ldr	r2, [r3, #4]
 80122ea:	4b34      	ldr	r3, [pc, #208]	; (80123bc <tcp_input+0x4a0>)
 80122ec:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80122ee:	429a      	cmp	r2, r3
 80122f0:	d10d      	bne.n	801230e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80122f2:	69fb      	ldr	r3, [r7, #28]
 80122f4:	681a      	ldr	r2, [r3, #0]
 80122f6:	4b31      	ldr	r3, [pc, #196]	; (80123bc <tcp_input+0x4a0>)
 80122f8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80122fa:	429a      	cmp	r2, r3
 80122fc:	d107      	bne.n	801230e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80122fe:	69f8      	ldr	r0, [r7, #28]
 8012300:	f000 fb56 	bl	80129b0 <tcp_timewait_input>
        }
        pbuf_free(p);
 8012304:	6878      	ldr	r0, [r7, #4]
 8012306:	f7fd ffe1 	bl	80102cc <pbuf_free>
        return;
 801230a:	e1fd      	b.n	8012708 <tcp_input+0x7ec>
        continue;
 801230c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801230e:	69fb      	ldr	r3, [r7, #28]
 8012310:	68db      	ldr	r3, [r3, #12]
 8012312:	61fb      	str	r3, [r7, #28]
 8012314:	69fb      	ldr	r3, [r7, #28]
 8012316:	2b00      	cmp	r3, #0
 8012318:	d1bc      	bne.n	8012294 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801231a:	2300      	movs	r3, #0
 801231c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801231e:	4b2f      	ldr	r3, [pc, #188]	; (80123dc <tcp_input+0x4c0>)
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	617b      	str	r3, [r7, #20]
 8012324:	e02a      	b.n	801237c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8012326:	697b      	ldr	r3, [r7, #20]
 8012328:	7a1b      	ldrb	r3, [r3, #8]
 801232a:	2b00      	cmp	r3, #0
 801232c:	d00c      	beq.n	8012348 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801232e:	697b      	ldr	r3, [r7, #20]
 8012330:	7a1a      	ldrb	r2, [r3, #8]
 8012332:	4b22      	ldr	r3, [pc, #136]	; (80123bc <tcp_input+0x4a0>)
 8012334:	685b      	ldr	r3, [r3, #4]
 8012336:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801233a:	3301      	adds	r3, #1
 801233c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801233e:	429a      	cmp	r2, r3
 8012340:	d002      	beq.n	8012348 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8012342:	697b      	ldr	r3, [r7, #20]
 8012344:	61bb      	str	r3, [r7, #24]
        continue;
 8012346:	e016      	b.n	8012376 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8012348:	697b      	ldr	r3, [r7, #20]
 801234a:	8ada      	ldrh	r2, [r3, #22]
 801234c:	4b1a      	ldr	r3, [pc, #104]	; (80123b8 <tcp_input+0x49c>)
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	885b      	ldrh	r3, [r3, #2]
 8012352:	b29b      	uxth	r3, r3
 8012354:	429a      	cmp	r2, r3
 8012356:	d10c      	bne.n	8012372 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8012358:	697b      	ldr	r3, [r7, #20]
 801235a:	681a      	ldr	r2, [r3, #0]
 801235c:	4b17      	ldr	r3, [pc, #92]	; (80123bc <tcp_input+0x4a0>)
 801235e:	695b      	ldr	r3, [r3, #20]
 8012360:	429a      	cmp	r2, r3
 8012362:	d00f      	beq.n	8012384 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8012364:	697b      	ldr	r3, [r7, #20]
 8012366:	2b00      	cmp	r3, #0
 8012368:	d00d      	beq.n	8012386 <tcp_input+0x46a>
 801236a:	697b      	ldr	r3, [r7, #20]
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	2b00      	cmp	r3, #0
 8012370:	d009      	beq.n	8012386 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8012372:	697b      	ldr	r3, [r7, #20]
 8012374:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012376:	697b      	ldr	r3, [r7, #20]
 8012378:	68db      	ldr	r3, [r3, #12]
 801237a:	617b      	str	r3, [r7, #20]
 801237c:	697b      	ldr	r3, [r7, #20]
 801237e:	2b00      	cmp	r3, #0
 8012380:	d1d1      	bne.n	8012326 <tcp_input+0x40a>
 8012382:	e000      	b.n	8012386 <tcp_input+0x46a>
            break;
 8012384:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8012386:	697b      	ldr	r3, [r7, #20]
 8012388:	2b00      	cmp	r3, #0
 801238a:	d029      	beq.n	80123e0 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801238c:	69bb      	ldr	r3, [r7, #24]
 801238e:	2b00      	cmp	r3, #0
 8012390:	d00a      	beq.n	80123a8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8012392:	697b      	ldr	r3, [r7, #20]
 8012394:	68da      	ldr	r2, [r3, #12]
 8012396:	69bb      	ldr	r3, [r7, #24]
 8012398:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801239a:	4b10      	ldr	r3, [pc, #64]	; (80123dc <tcp_input+0x4c0>)
 801239c:	681a      	ldr	r2, [r3, #0]
 801239e:	697b      	ldr	r3, [r7, #20]
 80123a0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80123a2:	4a0e      	ldr	r2, [pc, #56]	; (80123dc <tcp_input+0x4c0>)
 80123a4:	697b      	ldr	r3, [r7, #20]
 80123a6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80123a8:	6978      	ldr	r0, [r7, #20]
 80123aa:	f000 fa03 	bl	80127b4 <tcp_listen_input>
      }
      pbuf_free(p);
 80123ae:	6878      	ldr	r0, [r7, #4]
 80123b0:	f7fd ff8c 	bl	80102cc <pbuf_free>
      return;
 80123b4:	e1a8      	b.n	8012708 <tcp_input+0x7ec>
 80123b6:	bf00      	nop
 80123b8:	20008020 	.word	0x20008020
 80123bc:	200050dc 	.word	0x200050dc
 80123c0:	0801c8f0 	.word	0x0801c8f0
 80123c4:	0801ca1c 	.word	0x0801ca1c
 80123c8:	0801c93c 	.word	0x0801c93c
 80123cc:	20008004 	.word	0x20008004
 80123d0:	0801ca48 	.word	0x0801ca48
 80123d4:	20008008 	.word	0x20008008
 80123d8:	0801ca74 	.word	0x0801ca74
 80123dc:	20008000 	.word	0x20008000
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80123e0:	69fb      	ldr	r3, [r7, #28]
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	f000 8158 	beq.w	8012698 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80123e8:	4b95      	ldr	r3, [pc, #596]	; (8012640 <tcp_input+0x724>)
 80123ea:	2200      	movs	r2, #0
 80123ec:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	891a      	ldrh	r2, [r3, #8]
 80123f2:	4b93      	ldr	r3, [pc, #588]	; (8012640 <tcp_input+0x724>)
 80123f4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80123f6:	4a92      	ldr	r2, [pc, #584]	; (8012640 <tcp_input+0x724>)
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80123fc:	4b91      	ldr	r3, [pc, #580]	; (8012644 <tcp_input+0x728>)
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	4a8f      	ldr	r2, [pc, #572]	; (8012640 <tcp_input+0x724>)
 8012402:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8012404:	4b90      	ldr	r3, [pc, #576]	; (8012648 <tcp_input+0x72c>)
 8012406:	2200      	movs	r2, #0
 8012408:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801240a:	4b90      	ldr	r3, [pc, #576]	; (801264c <tcp_input+0x730>)
 801240c:	2200      	movs	r2, #0
 801240e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8012410:	4b8f      	ldr	r3, [pc, #572]	; (8012650 <tcp_input+0x734>)
 8012412:	2200      	movs	r2, #0
 8012414:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8012416:	4b8f      	ldr	r3, [pc, #572]	; (8012654 <tcp_input+0x738>)
 8012418:	781b      	ldrb	r3, [r3, #0]
 801241a:	f003 0308 	and.w	r3, r3, #8
 801241e:	2b00      	cmp	r3, #0
 8012420:	d006      	beq.n	8012430 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	7b5b      	ldrb	r3, [r3, #13]
 8012426:	f043 0301 	orr.w	r3, r3, #1
 801242a:	b2da      	uxtb	r2, r3
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8012430:	69fb      	ldr	r3, [r7, #28]
 8012432:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012434:	2b00      	cmp	r3, #0
 8012436:	d017      	beq.n	8012468 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012438:	69f8      	ldr	r0, [r7, #28]
 801243a:	f7ff f929 	bl	8011690 <tcp_process_refused_data>
 801243e:	4603      	mov	r3, r0
 8012440:	f113 0f0d 	cmn.w	r3, #13
 8012444:	d007      	beq.n	8012456 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012446:	69fb      	ldr	r3, [r7, #28]
 8012448:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801244a:	2b00      	cmp	r3, #0
 801244c:	d00c      	beq.n	8012468 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801244e:	4b82      	ldr	r3, [pc, #520]	; (8012658 <tcp_input+0x73c>)
 8012450:	881b      	ldrh	r3, [r3, #0]
 8012452:	2b00      	cmp	r3, #0
 8012454:	d008      	beq.n	8012468 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8012456:	69fb      	ldr	r3, [r7, #28]
 8012458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801245a:	2b00      	cmp	r3, #0
 801245c:	f040 80e3 	bne.w	8012626 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8012460:	69f8      	ldr	r0, [r7, #28]
 8012462:	f003 f9ad 	bl	80157c0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8012466:	e0de      	b.n	8012626 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8012468:	4a7c      	ldr	r2, [pc, #496]	; (801265c <tcp_input+0x740>)
 801246a:	69fb      	ldr	r3, [r7, #28]
 801246c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801246e:	69f8      	ldr	r0, [r7, #28]
 8012470:	f000 fb18 	bl	8012aa4 <tcp_process>
 8012474:	4603      	mov	r3, r0
 8012476:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8012478:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801247c:	f113 0f0d 	cmn.w	r3, #13
 8012480:	f000 80d3 	beq.w	801262a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8012484:	4b71      	ldr	r3, [pc, #452]	; (801264c <tcp_input+0x730>)
 8012486:	781b      	ldrb	r3, [r3, #0]
 8012488:	f003 0308 	and.w	r3, r3, #8
 801248c:	2b00      	cmp	r3, #0
 801248e:	d015      	beq.n	80124bc <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8012490:	69fb      	ldr	r3, [r7, #28]
 8012492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012496:	2b00      	cmp	r3, #0
 8012498:	d008      	beq.n	80124ac <tcp_input+0x590>
 801249a:	69fb      	ldr	r3, [r7, #28]
 801249c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80124a0:	69fa      	ldr	r2, [r7, #28]
 80124a2:	6912      	ldr	r2, [r2, #16]
 80124a4:	f06f 010d 	mvn.w	r1, #13
 80124a8:	4610      	mov	r0, r2
 80124aa:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80124ac:	69f9      	ldr	r1, [r7, #28]
 80124ae:	486c      	ldr	r0, [pc, #432]	; (8012660 <tcp_input+0x744>)
 80124b0:	f7ff fbbc 	bl	8011c2c <tcp_pcb_remove>
        tcp_free(pcb);
 80124b4:	69f8      	ldr	r0, [r7, #28]
 80124b6:	f7fe f9a9 	bl	801080c <tcp_free>
 80124ba:	e0da      	b.n	8012672 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80124bc:	2300      	movs	r3, #0
 80124be:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80124c0:	4b63      	ldr	r3, [pc, #396]	; (8012650 <tcp_input+0x734>)
 80124c2:	881b      	ldrh	r3, [r3, #0]
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d01d      	beq.n	8012504 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80124c8:	4b61      	ldr	r3, [pc, #388]	; (8012650 <tcp_input+0x734>)
 80124ca:	881b      	ldrh	r3, [r3, #0]
 80124cc:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80124ce:	69fb      	ldr	r3, [r7, #28]
 80124d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d00a      	beq.n	80124ee <tcp_input+0x5d2>
 80124d8:	69fb      	ldr	r3, [r7, #28]
 80124da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80124de:	69fa      	ldr	r2, [r7, #28]
 80124e0:	6910      	ldr	r0, [r2, #16]
 80124e2:	89fa      	ldrh	r2, [r7, #14]
 80124e4:	69f9      	ldr	r1, [r7, #28]
 80124e6:	4798      	blx	r3
 80124e8:	4603      	mov	r3, r0
 80124ea:	74fb      	strb	r3, [r7, #19]
 80124ec:	e001      	b.n	80124f2 <tcp_input+0x5d6>
 80124ee:	2300      	movs	r3, #0
 80124f0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80124f2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80124f6:	f113 0f0d 	cmn.w	r3, #13
 80124fa:	f000 8098 	beq.w	801262e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 80124fe:	4b54      	ldr	r3, [pc, #336]	; (8012650 <tcp_input+0x734>)
 8012500:	2200      	movs	r2, #0
 8012502:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8012504:	69f8      	ldr	r0, [r7, #28]
 8012506:	f000 f915 	bl	8012734 <tcp_input_delayed_close>
 801250a:	4603      	mov	r3, r0
 801250c:	2b00      	cmp	r3, #0
 801250e:	f040 8090 	bne.w	8012632 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8012512:	4b4d      	ldr	r3, [pc, #308]	; (8012648 <tcp_input+0x72c>)
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	2b00      	cmp	r3, #0
 8012518:	d041      	beq.n	801259e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801251a:	69fb      	ldr	r3, [r7, #28]
 801251c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801251e:	2b00      	cmp	r3, #0
 8012520:	d006      	beq.n	8012530 <tcp_input+0x614>
 8012522:	4b50      	ldr	r3, [pc, #320]	; (8012664 <tcp_input+0x748>)
 8012524:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8012528:	494f      	ldr	r1, [pc, #316]	; (8012668 <tcp_input+0x74c>)
 801252a:	4850      	ldr	r0, [pc, #320]	; (801266c <tcp_input+0x750>)
 801252c:	f006 fd8e 	bl	801904c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8012530:	69fb      	ldr	r3, [r7, #28]
 8012532:	8b5b      	ldrh	r3, [r3, #26]
 8012534:	f003 0310 	and.w	r3, r3, #16
 8012538:	2b00      	cmp	r3, #0
 801253a:	d008      	beq.n	801254e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801253c:	4b42      	ldr	r3, [pc, #264]	; (8012648 <tcp_input+0x72c>)
 801253e:	681b      	ldr	r3, [r3, #0]
 8012540:	4618      	mov	r0, r3
 8012542:	f7fd fec3 	bl	80102cc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8012546:	69f8      	ldr	r0, [r7, #28]
 8012548:	f7fe fc48 	bl	8010ddc <tcp_abort>
            goto aborted;
 801254c:	e091      	b.n	8012672 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801254e:	69fb      	ldr	r3, [r7, #28]
 8012550:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012554:	2b00      	cmp	r3, #0
 8012556:	d00c      	beq.n	8012572 <tcp_input+0x656>
 8012558:	69fb      	ldr	r3, [r7, #28]
 801255a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801255e:	69fb      	ldr	r3, [r7, #28]
 8012560:	6918      	ldr	r0, [r3, #16]
 8012562:	4b39      	ldr	r3, [pc, #228]	; (8012648 <tcp_input+0x72c>)
 8012564:	681a      	ldr	r2, [r3, #0]
 8012566:	2300      	movs	r3, #0
 8012568:	69f9      	ldr	r1, [r7, #28]
 801256a:	47a0      	blx	r4
 801256c:	4603      	mov	r3, r0
 801256e:	74fb      	strb	r3, [r7, #19]
 8012570:	e008      	b.n	8012584 <tcp_input+0x668>
 8012572:	4b35      	ldr	r3, [pc, #212]	; (8012648 <tcp_input+0x72c>)
 8012574:	681a      	ldr	r2, [r3, #0]
 8012576:	2300      	movs	r3, #0
 8012578:	69f9      	ldr	r1, [r7, #28]
 801257a:	2000      	movs	r0, #0
 801257c:	f7ff f95e 	bl	801183c <tcp_recv_null>
 8012580:	4603      	mov	r3, r0
 8012582:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8012584:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012588:	f113 0f0d 	cmn.w	r3, #13
 801258c:	d053      	beq.n	8012636 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801258e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012592:	2b00      	cmp	r3, #0
 8012594:	d003      	beq.n	801259e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8012596:	4b2c      	ldr	r3, [pc, #176]	; (8012648 <tcp_input+0x72c>)
 8012598:	681a      	ldr	r2, [r3, #0]
 801259a:	69fb      	ldr	r3, [r7, #28]
 801259c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801259e:	4b2b      	ldr	r3, [pc, #172]	; (801264c <tcp_input+0x730>)
 80125a0:	781b      	ldrb	r3, [r3, #0]
 80125a2:	f003 0320 	and.w	r3, r3, #32
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d030      	beq.n	801260c <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 80125aa:	69fb      	ldr	r3, [r7, #28]
 80125ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d009      	beq.n	80125c6 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80125b2:	69fb      	ldr	r3, [r7, #28]
 80125b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80125b6:	7b5a      	ldrb	r2, [r3, #13]
 80125b8:	69fb      	ldr	r3, [r7, #28]
 80125ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80125bc:	f042 0220 	orr.w	r2, r2, #32
 80125c0:	b2d2      	uxtb	r2, r2
 80125c2:	735a      	strb	r2, [r3, #13]
 80125c4:	e022      	b.n	801260c <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80125c6:	69fb      	ldr	r3, [r7, #28]
 80125c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80125ca:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80125ce:	d005      	beq.n	80125dc <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 80125d0:	69fb      	ldr	r3, [r7, #28]
 80125d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80125d4:	3301      	adds	r3, #1
 80125d6:	b29a      	uxth	r2, r3
 80125d8:	69fb      	ldr	r3, [r7, #28]
 80125da:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80125dc:	69fb      	ldr	r3, [r7, #28]
 80125de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d00b      	beq.n	80125fe <tcp_input+0x6e2>
 80125e6:	69fb      	ldr	r3, [r7, #28]
 80125e8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80125ec:	69fb      	ldr	r3, [r7, #28]
 80125ee:	6918      	ldr	r0, [r3, #16]
 80125f0:	2300      	movs	r3, #0
 80125f2:	2200      	movs	r2, #0
 80125f4:	69f9      	ldr	r1, [r7, #28]
 80125f6:	47a0      	blx	r4
 80125f8:	4603      	mov	r3, r0
 80125fa:	74fb      	strb	r3, [r7, #19]
 80125fc:	e001      	b.n	8012602 <tcp_input+0x6e6>
 80125fe:	2300      	movs	r3, #0
 8012600:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012602:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012606:	f113 0f0d 	cmn.w	r3, #13
 801260a:	d016      	beq.n	801263a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801260c:	4b13      	ldr	r3, [pc, #76]	; (801265c <tcp_input+0x740>)
 801260e:	2200      	movs	r2, #0
 8012610:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8012612:	69f8      	ldr	r0, [r7, #28]
 8012614:	f000 f88e 	bl	8012734 <tcp_input_delayed_close>
 8012618:	4603      	mov	r3, r0
 801261a:	2b00      	cmp	r3, #0
 801261c:	d128      	bne.n	8012670 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801261e:	69f8      	ldr	r0, [r7, #28]
 8012620:	f002 fac8 	bl	8014bb4 <tcp_output>
 8012624:	e025      	b.n	8012672 <tcp_input+0x756>
        goto aborted;
 8012626:	bf00      	nop
 8012628:	e023      	b.n	8012672 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801262a:	bf00      	nop
 801262c:	e021      	b.n	8012672 <tcp_input+0x756>
              goto aborted;
 801262e:	bf00      	nop
 8012630:	e01f      	b.n	8012672 <tcp_input+0x756>
          goto aborted;
 8012632:	bf00      	nop
 8012634:	e01d      	b.n	8012672 <tcp_input+0x756>
            goto aborted;
 8012636:	bf00      	nop
 8012638:	e01b      	b.n	8012672 <tcp_input+0x756>
              goto aborted;
 801263a:	bf00      	nop
 801263c:	e019      	b.n	8012672 <tcp_input+0x756>
 801263e:	bf00      	nop
 8012640:	20008010 	.word	0x20008010
 8012644:	20008020 	.word	0x20008020
 8012648:	20008040 	.word	0x20008040
 801264c:	2000803d 	.word	0x2000803d
 8012650:	20008038 	.word	0x20008038
 8012654:	2000803c 	.word	0x2000803c
 8012658:	2000803a 	.word	0x2000803a
 801265c:	20008044 	.word	0x20008044
 8012660:	20008004 	.word	0x20008004
 8012664:	0801c8f0 	.word	0x0801c8f0
 8012668:	0801caa4 	.word	0x0801caa4
 801266c:	0801c93c 	.word	0x0801c93c
          goto aborted;
 8012670:	bf00      	nop
    tcp_input_pcb = NULL;
 8012672:	4b27      	ldr	r3, [pc, #156]	; (8012710 <tcp_input+0x7f4>)
 8012674:	2200      	movs	r2, #0
 8012676:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8012678:	4b26      	ldr	r3, [pc, #152]	; (8012714 <tcp_input+0x7f8>)
 801267a:	2200      	movs	r2, #0
 801267c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801267e:	4b26      	ldr	r3, [pc, #152]	; (8012718 <tcp_input+0x7fc>)
 8012680:	685b      	ldr	r3, [r3, #4]
 8012682:	2b00      	cmp	r3, #0
 8012684:	d03f      	beq.n	8012706 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8012686:	4b24      	ldr	r3, [pc, #144]	; (8012718 <tcp_input+0x7fc>)
 8012688:	685b      	ldr	r3, [r3, #4]
 801268a:	4618      	mov	r0, r3
 801268c:	f7fd fe1e 	bl	80102cc <pbuf_free>
      inseg.p = NULL;
 8012690:	4b21      	ldr	r3, [pc, #132]	; (8012718 <tcp_input+0x7fc>)
 8012692:	2200      	movs	r2, #0
 8012694:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8012696:	e036      	b.n	8012706 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8012698:	4b20      	ldr	r3, [pc, #128]	; (801271c <tcp_input+0x800>)
 801269a:	681b      	ldr	r3, [r3, #0]
 801269c:	899b      	ldrh	r3, [r3, #12]
 801269e:	b29b      	uxth	r3, r3
 80126a0:	4618      	mov	r0, r3
 80126a2:	f7fc fa1d 	bl	800eae0 <lwip_htons>
 80126a6:	4603      	mov	r3, r0
 80126a8:	b2db      	uxtb	r3, r3
 80126aa:	f003 0304 	and.w	r3, r3, #4
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	d118      	bne.n	80126e4 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80126b2:	4b1b      	ldr	r3, [pc, #108]	; (8012720 <tcp_input+0x804>)
 80126b4:	6819      	ldr	r1, [r3, #0]
 80126b6:	4b1b      	ldr	r3, [pc, #108]	; (8012724 <tcp_input+0x808>)
 80126b8:	881b      	ldrh	r3, [r3, #0]
 80126ba:	461a      	mov	r2, r3
 80126bc:	4b1a      	ldr	r3, [pc, #104]	; (8012728 <tcp_input+0x80c>)
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80126c2:	4b16      	ldr	r3, [pc, #88]	; (801271c <tcp_input+0x800>)
 80126c4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80126c6:	885b      	ldrh	r3, [r3, #2]
 80126c8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80126ca:	4a14      	ldr	r2, [pc, #80]	; (801271c <tcp_input+0x800>)
 80126cc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80126ce:	8812      	ldrh	r2, [r2, #0]
 80126d0:	b292      	uxth	r2, r2
 80126d2:	9202      	str	r2, [sp, #8]
 80126d4:	9301      	str	r3, [sp, #4]
 80126d6:	4b15      	ldr	r3, [pc, #84]	; (801272c <tcp_input+0x810>)
 80126d8:	9300      	str	r3, [sp, #0]
 80126da:	4b15      	ldr	r3, [pc, #84]	; (8012730 <tcp_input+0x814>)
 80126dc:	4602      	mov	r2, r0
 80126de:	2000      	movs	r0, #0
 80126e0:	f003 f81c 	bl	801571c <tcp_rst>
    pbuf_free(p);
 80126e4:	6878      	ldr	r0, [r7, #4]
 80126e6:	f7fd fdf1 	bl	80102cc <pbuf_free>
  return;
 80126ea:	e00c      	b.n	8012706 <tcp_input+0x7ea>
    goto dropped;
 80126ec:	bf00      	nop
 80126ee:	e006      	b.n	80126fe <tcp_input+0x7e2>
    goto dropped;
 80126f0:	bf00      	nop
 80126f2:	e004      	b.n	80126fe <tcp_input+0x7e2>
    goto dropped;
 80126f4:	bf00      	nop
 80126f6:	e002      	b.n	80126fe <tcp_input+0x7e2>
      goto dropped;
 80126f8:	bf00      	nop
 80126fa:	e000      	b.n	80126fe <tcp_input+0x7e2>
      goto dropped;
 80126fc:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80126fe:	6878      	ldr	r0, [r7, #4]
 8012700:	f7fd fde4 	bl	80102cc <pbuf_free>
 8012704:	e000      	b.n	8012708 <tcp_input+0x7ec>
  return;
 8012706:	bf00      	nop
}
 8012708:	3724      	adds	r7, #36	; 0x24
 801270a:	46bd      	mov	sp, r7
 801270c:	bd90      	pop	{r4, r7, pc}
 801270e:	bf00      	nop
 8012710:	20008044 	.word	0x20008044
 8012714:	20008040 	.word	0x20008040
 8012718:	20008010 	.word	0x20008010
 801271c:	20008020 	.word	0x20008020
 8012720:	20008034 	.word	0x20008034
 8012724:	2000803a 	.word	0x2000803a
 8012728:	20008030 	.word	0x20008030
 801272c:	200050ec 	.word	0x200050ec
 8012730:	200050f0 	.word	0x200050f0

08012734 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8012734:	b580      	push	{r7, lr}
 8012736:	b082      	sub	sp, #8
 8012738:	af00      	add	r7, sp, #0
 801273a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	2b00      	cmp	r3, #0
 8012740:	d106      	bne.n	8012750 <tcp_input_delayed_close+0x1c>
 8012742:	4b17      	ldr	r3, [pc, #92]	; (80127a0 <tcp_input_delayed_close+0x6c>)
 8012744:	f240 225a 	movw	r2, #602	; 0x25a
 8012748:	4916      	ldr	r1, [pc, #88]	; (80127a4 <tcp_input_delayed_close+0x70>)
 801274a:	4817      	ldr	r0, [pc, #92]	; (80127a8 <tcp_input_delayed_close+0x74>)
 801274c:	f006 fc7e 	bl	801904c <iprintf>

  if (recv_flags & TF_CLOSED) {
 8012750:	4b16      	ldr	r3, [pc, #88]	; (80127ac <tcp_input_delayed_close+0x78>)
 8012752:	781b      	ldrb	r3, [r3, #0]
 8012754:	f003 0310 	and.w	r3, r3, #16
 8012758:	2b00      	cmp	r3, #0
 801275a:	d01c      	beq.n	8012796 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	8b5b      	ldrh	r3, [r3, #26]
 8012760:	f003 0310 	and.w	r3, r3, #16
 8012764:	2b00      	cmp	r3, #0
 8012766:	d10d      	bne.n	8012784 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801276e:	2b00      	cmp	r3, #0
 8012770:	d008      	beq.n	8012784 <tcp_input_delayed_close+0x50>
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012778:	687a      	ldr	r2, [r7, #4]
 801277a:	6912      	ldr	r2, [r2, #16]
 801277c:	f06f 010e 	mvn.w	r1, #14
 8012780:	4610      	mov	r0, r2
 8012782:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8012784:	6879      	ldr	r1, [r7, #4]
 8012786:	480a      	ldr	r0, [pc, #40]	; (80127b0 <tcp_input_delayed_close+0x7c>)
 8012788:	f7ff fa50 	bl	8011c2c <tcp_pcb_remove>
    tcp_free(pcb);
 801278c:	6878      	ldr	r0, [r7, #4]
 801278e:	f7fe f83d 	bl	801080c <tcp_free>
    return 1;
 8012792:	2301      	movs	r3, #1
 8012794:	e000      	b.n	8012798 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8012796:	2300      	movs	r3, #0
}
 8012798:	4618      	mov	r0, r3
 801279a:	3708      	adds	r7, #8
 801279c:	46bd      	mov	sp, r7
 801279e:	bd80      	pop	{r7, pc}
 80127a0:	0801c8f0 	.word	0x0801c8f0
 80127a4:	0801cac0 	.word	0x0801cac0
 80127a8:	0801c93c 	.word	0x0801c93c
 80127ac:	2000803d 	.word	0x2000803d
 80127b0:	20008004 	.word	0x20008004

080127b4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80127b4:	b590      	push	{r4, r7, lr}
 80127b6:	b08b      	sub	sp, #44	; 0x2c
 80127b8:	af04      	add	r7, sp, #16
 80127ba:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80127bc:	4b6f      	ldr	r3, [pc, #444]	; (801297c <tcp_listen_input+0x1c8>)
 80127be:	781b      	ldrb	r3, [r3, #0]
 80127c0:	f003 0304 	and.w	r3, r3, #4
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	f040 80d2 	bne.w	801296e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d106      	bne.n	80127de <tcp_listen_input+0x2a>
 80127d0:	4b6b      	ldr	r3, [pc, #428]	; (8012980 <tcp_listen_input+0x1cc>)
 80127d2:	f240 2281 	movw	r2, #641	; 0x281
 80127d6:	496b      	ldr	r1, [pc, #428]	; (8012984 <tcp_listen_input+0x1d0>)
 80127d8:	486b      	ldr	r0, [pc, #428]	; (8012988 <tcp_listen_input+0x1d4>)
 80127da:	f006 fc37 	bl	801904c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80127de:	4b67      	ldr	r3, [pc, #412]	; (801297c <tcp_listen_input+0x1c8>)
 80127e0:	781b      	ldrb	r3, [r3, #0]
 80127e2:	f003 0310 	and.w	r3, r3, #16
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d019      	beq.n	801281e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80127ea:	4b68      	ldr	r3, [pc, #416]	; (801298c <tcp_listen_input+0x1d8>)
 80127ec:	6819      	ldr	r1, [r3, #0]
 80127ee:	4b68      	ldr	r3, [pc, #416]	; (8012990 <tcp_listen_input+0x1dc>)
 80127f0:	881b      	ldrh	r3, [r3, #0]
 80127f2:	461a      	mov	r2, r3
 80127f4:	4b67      	ldr	r3, [pc, #412]	; (8012994 <tcp_listen_input+0x1e0>)
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80127fa:	4b67      	ldr	r3, [pc, #412]	; (8012998 <tcp_listen_input+0x1e4>)
 80127fc:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80127fe:	885b      	ldrh	r3, [r3, #2]
 8012800:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012802:	4a65      	ldr	r2, [pc, #404]	; (8012998 <tcp_listen_input+0x1e4>)
 8012804:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012806:	8812      	ldrh	r2, [r2, #0]
 8012808:	b292      	uxth	r2, r2
 801280a:	9202      	str	r2, [sp, #8]
 801280c:	9301      	str	r3, [sp, #4]
 801280e:	4b63      	ldr	r3, [pc, #396]	; (801299c <tcp_listen_input+0x1e8>)
 8012810:	9300      	str	r3, [sp, #0]
 8012812:	4b63      	ldr	r3, [pc, #396]	; (80129a0 <tcp_listen_input+0x1ec>)
 8012814:	4602      	mov	r2, r0
 8012816:	6878      	ldr	r0, [r7, #4]
 8012818:	f002 ff80 	bl	801571c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801281c:	e0a9      	b.n	8012972 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801281e:	4b57      	ldr	r3, [pc, #348]	; (801297c <tcp_listen_input+0x1c8>)
 8012820:	781b      	ldrb	r3, [r3, #0]
 8012822:	f003 0302 	and.w	r3, r3, #2
 8012826:	2b00      	cmp	r3, #0
 8012828:	f000 80a3 	beq.w	8012972 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	7d5b      	ldrb	r3, [r3, #21]
 8012830:	4618      	mov	r0, r3
 8012832:	f7ff f927 	bl	8011a84 <tcp_alloc>
 8012836:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8012838:	697b      	ldr	r3, [r7, #20]
 801283a:	2b00      	cmp	r3, #0
 801283c:	d111      	bne.n	8012862 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	699b      	ldr	r3, [r3, #24]
 8012842:	2b00      	cmp	r3, #0
 8012844:	d00a      	beq.n	801285c <tcp_listen_input+0xa8>
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	699b      	ldr	r3, [r3, #24]
 801284a:	687a      	ldr	r2, [r7, #4]
 801284c:	6910      	ldr	r0, [r2, #16]
 801284e:	f04f 32ff 	mov.w	r2, #4294967295
 8012852:	2100      	movs	r1, #0
 8012854:	4798      	blx	r3
 8012856:	4603      	mov	r3, r0
 8012858:	73bb      	strb	r3, [r7, #14]
      return;
 801285a:	e08b      	b.n	8012974 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801285c:	23f0      	movs	r3, #240	; 0xf0
 801285e:	73bb      	strb	r3, [r7, #14]
      return;
 8012860:	e088      	b.n	8012974 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8012862:	4b50      	ldr	r3, [pc, #320]	; (80129a4 <tcp_listen_input+0x1f0>)
 8012864:	695a      	ldr	r2, [r3, #20]
 8012866:	697b      	ldr	r3, [r7, #20]
 8012868:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801286a:	4b4e      	ldr	r3, [pc, #312]	; (80129a4 <tcp_listen_input+0x1f0>)
 801286c:	691a      	ldr	r2, [r3, #16]
 801286e:	697b      	ldr	r3, [r7, #20]
 8012870:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	8ada      	ldrh	r2, [r3, #22]
 8012876:	697b      	ldr	r3, [r7, #20]
 8012878:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801287a:	4b47      	ldr	r3, [pc, #284]	; (8012998 <tcp_listen_input+0x1e4>)
 801287c:	681b      	ldr	r3, [r3, #0]
 801287e:	881b      	ldrh	r3, [r3, #0]
 8012880:	b29a      	uxth	r2, r3
 8012882:	697b      	ldr	r3, [r7, #20]
 8012884:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8012886:	697b      	ldr	r3, [r7, #20]
 8012888:	2203      	movs	r2, #3
 801288a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801288c:	4b41      	ldr	r3, [pc, #260]	; (8012994 <tcp_listen_input+0x1e0>)
 801288e:	681b      	ldr	r3, [r3, #0]
 8012890:	1c5a      	adds	r2, r3, #1
 8012892:	697b      	ldr	r3, [r7, #20]
 8012894:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8012896:	697b      	ldr	r3, [r7, #20]
 8012898:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801289a:	697b      	ldr	r3, [r7, #20]
 801289c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801289e:	6978      	ldr	r0, [r7, #20]
 80128a0:	f7ff fa58 	bl	8011d54 <tcp_next_iss>
 80128a4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80128a6:	697b      	ldr	r3, [r7, #20]
 80128a8:	693a      	ldr	r2, [r7, #16]
 80128aa:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80128ac:	697b      	ldr	r3, [r7, #20]
 80128ae:	693a      	ldr	r2, [r7, #16]
 80128b0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80128b2:	697b      	ldr	r3, [r7, #20]
 80128b4:	693a      	ldr	r2, [r7, #16]
 80128b6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80128b8:	697b      	ldr	r3, [r7, #20]
 80128ba:	693a      	ldr	r2, [r7, #16]
 80128bc:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80128be:	4b35      	ldr	r3, [pc, #212]	; (8012994 <tcp_listen_input+0x1e0>)
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	1e5a      	subs	r2, r3, #1
 80128c4:	697b      	ldr	r3, [r7, #20]
 80128c6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	691a      	ldr	r2, [r3, #16]
 80128cc:	697b      	ldr	r3, [r7, #20]
 80128ce:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80128d0:	697b      	ldr	r3, [r7, #20]
 80128d2:	687a      	ldr	r2, [r7, #4]
 80128d4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	7a5b      	ldrb	r3, [r3, #9]
 80128da:	f003 030c 	and.w	r3, r3, #12
 80128de:	b2da      	uxtb	r2, r3
 80128e0:	697b      	ldr	r3, [r7, #20]
 80128e2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	7a1a      	ldrb	r2, [r3, #8]
 80128e8:	697b      	ldr	r3, [r7, #20]
 80128ea:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80128ec:	4b2e      	ldr	r3, [pc, #184]	; (80129a8 <tcp_listen_input+0x1f4>)
 80128ee:	681a      	ldr	r2, [r3, #0]
 80128f0:	697b      	ldr	r3, [r7, #20]
 80128f2:	60da      	str	r2, [r3, #12]
 80128f4:	4a2c      	ldr	r2, [pc, #176]	; (80129a8 <tcp_listen_input+0x1f4>)
 80128f6:	697b      	ldr	r3, [r7, #20]
 80128f8:	6013      	str	r3, [r2, #0]
 80128fa:	f003 f8d1 	bl	8015aa0 <tcp_timer_needed>
 80128fe:	4b2b      	ldr	r3, [pc, #172]	; (80129ac <tcp_listen_input+0x1f8>)
 8012900:	2201      	movs	r2, #1
 8012902:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8012904:	6978      	ldr	r0, [r7, #20]
 8012906:	f001 fd8f 	bl	8014428 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801290a:	4b23      	ldr	r3, [pc, #140]	; (8012998 <tcp_listen_input+0x1e4>)
 801290c:	681b      	ldr	r3, [r3, #0]
 801290e:	89db      	ldrh	r3, [r3, #14]
 8012910:	b29a      	uxth	r2, r3
 8012912:	697b      	ldr	r3, [r7, #20]
 8012914:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8012918:	697b      	ldr	r3, [r7, #20]
 801291a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801291e:	697b      	ldr	r3, [r7, #20]
 8012920:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8012924:	697b      	ldr	r3, [r7, #20]
 8012926:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8012928:	697b      	ldr	r3, [r7, #20]
 801292a:	3304      	adds	r3, #4
 801292c:	4618      	mov	r0, r3
 801292e:	f004 fc79 	bl	8017224 <ip4_route>
 8012932:	4601      	mov	r1, r0
 8012934:	697b      	ldr	r3, [r7, #20]
 8012936:	3304      	adds	r3, #4
 8012938:	461a      	mov	r2, r3
 801293a:	4620      	mov	r0, r4
 801293c:	f7ff fa30 	bl	8011da0 <tcp_eff_send_mss_netif>
 8012940:	4603      	mov	r3, r0
 8012942:	461a      	mov	r2, r3
 8012944:	697b      	ldr	r3, [r7, #20]
 8012946:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8012948:	2112      	movs	r1, #18
 801294a:	6978      	ldr	r0, [r7, #20]
 801294c:	f002 f844 	bl	80149d8 <tcp_enqueue_flags>
 8012950:	4603      	mov	r3, r0
 8012952:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8012954:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012958:	2b00      	cmp	r3, #0
 801295a:	d004      	beq.n	8012966 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 801295c:	2100      	movs	r1, #0
 801295e:	6978      	ldr	r0, [r7, #20]
 8012960:	f7fe f97e 	bl	8010c60 <tcp_abandon>
      return;
 8012964:	e006      	b.n	8012974 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8012966:	6978      	ldr	r0, [r7, #20]
 8012968:	f002 f924 	bl	8014bb4 <tcp_output>
  return;
 801296c:	e001      	b.n	8012972 <tcp_listen_input+0x1be>
    return;
 801296e:	bf00      	nop
 8012970:	e000      	b.n	8012974 <tcp_listen_input+0x1c0>
  return;
 8012972:	bf00      	nop
}
 8012974:	371c      	adds	r7, #28
 8012976:	46bd      	mov	sp, r7
 8012978:	bd90      	pop	{r4, r7, pc}
 801297a:	bf00      	nop
 801297c:	2000803c 	.word	0x2000803c
 8012980:	0801c8f0 	.word	0x0801c8f0
 8012984:	0801cae8 	.word	0x0801cae8
 8012988:	0801c93c 	.word	0x0801c93c
 801298c:	20008034 	.word	0x20008034
 8012990:	2000803a 	.word	0x2000803a
 8012994:	20008030 	.word	0x20008030
 8012998:	20008020 	.word	0x20008020
 801299c:	200050ec 	.word	0x200050ec
 80129a0:	200050f0 	.word	0x200050f0
 80129a4:	200050dc 	.word	0x200050dc
 80129a8:	20008004 	.word	0x20008004
 80129ac:	2000800c 	.word	0x2000800c

080129b0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80129b0:	b580      	push	{r7, lr}
 80129b2:	b086      	sub	sp, #24
 80129b4:	af04      	add	r7, sp, #16
 80129b6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80129b8:	4b2f      	ldr	r3, [pc, #188]	; (8012a78 <tcp_timewait_input+0xc8>)
 80129ba:	781b      	ldrb	r3, [r3, #0]
 80129bc:	f003 0304 	and.w	r3, r3, #4
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d153      	bne.n	8012a6c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d106      	bne.n	80129d8 <tcp_timewait_input+0x28>
 80129ca:	4b2c      	ldr	r3, [pc, #176]	; (8012a7c <tcp_timewait_input+0xcc>)
 80129cc:	f240 22ee 	movw	r2, #750	; 0x2ee
 80129d0:	492b      	ldr	r1, [pc, #172]	; (8012a80 <tcp_timewait_input+0xd0>)
 80129d2:	482c      	ldr	r0, [pc, #176]	; (8012a84 <tcp_timewait_input+0xd4>)
 80129d4:	f006 fb3a 	bl	801904c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80129d8:	4b27      	ldr	r3, [pc, #156]	; (8012a78 <tcp_timewait_input+0xc8>)
 80129da:	781b      	ldrb	r3, [r3, #0]
 80129dc:	f003 0302 	and.w	r3, r3, #2
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d02a      	beq.n	8012a3a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80129e4:	4b28      	ldr	r3, [pc, #160]	; (8012a88 <tcp_timewait_input+0xd8>)
 80129e6:	681a      	ldr	r2, [r3, #0]
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129ec:	1ad3      	subs	r3, r2, r3
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	db2d      	blt.n	8012a4e <tcp_timewait_input+0x9e>
 80129f2:	4b25      	ldr	r3, [pc, #148]	; (8012a88 <tcp_timewait_input+0xd8>)
 80129f4:	681a      	ldr	r2, [r3, #0]
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129fa:	6879      	ldr	r1, [r7, #4]
 80129fc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80129fe:	440b      	add	r3, r1
 8012a00:	1ad3      	subs	r3, r2, r3
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	dc23      	bgt.n	8012a4e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012a06:	4b21      	ldr	r3, [pc, #132]	; (8012a8c <tcp_timewait_input+0xdc>)
 8012a08:	6819      	ldr	r1, [r3, #0]
 8012a0a:	4b21      	ldr	r3, [pc, #132]	; (8012a90 <tcp_timewait_input+0xe0>)
 8012a0c:	881b      	ldrh	r3, [r3, #0]
 8012a0e:	461a      	mov	r2, r3
 8012a10:	4b1d      	ldr	r3, [pc, #116]	; (8012a88 <tcp_timewait_input+0xd8>)
 8012a12:	681b      	ldr	r3, [r3, #0]
 8012a14:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012a16:	4b1f      	ldr	r3, [pc, #124]	; (8012a94 <tcp_timewait_input+0xe4>)
 8012a18:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012a1a:	885b      	ldrh	r3, [r3, #2]
 8012a1c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012a1e:	4a1d      	ldr	r2, [pc, #116]	; (8012a94 <tcp_timewait_input+0xe4>)
 8012a20:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012a22:	8812      	ldrh	r2, [r2, #0]
 8012a24:	b292      	uxth	r2, r2
 8012a26:	9202      	str	r2, [sp, #8]
 8012a28:	9301      	str	r3, [sp, #4]
 8012a2a:	4b1b      	ldr	r3, [pc, #108]	; (8012a98 <tcp_timewait_input+0xe8>)
 8012a2c:	9300      	str	r3, [sp, #0]
 8012a2e:	4b1b      	ldr	r3, [pc, #108]	; (8012a9c <tcp_timewait_input+0xec>)
 8012a30:	4602      	mov	r2, r0
 8012a32:	6878      	ldr	r0, [r7, #4]
 8012a34:	f002 fe72 	bl	801571c <tcp_rst>
      return;
 8012a38:	e01b      	b.n	8012a72 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8012a3a:	4b0f      	ldr	r3, [pc, #60]	; (8012a78 <tcp_timewait_input+0xc8>)
 8012a3c:	781b      	ldrb	r3, [r3, #0]
 8012a3e:	f003 0301 	and.w	r3, r3, #1
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d003      	beq.n	8012a4e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8012a46:	4b16      	ldr	r3, [pc, #88]	; (8012aa0 <tcp_timewait_input+0xf0>)
 8012a48:	681a      	ldr	r2, [r3, #0]
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8012a4e:	4b10      	ldr	r3, [pc, #64]	; (8012a90 <tcp_timewait_input+0xe0>)
 8012a50:	881b      	ldrh	r3, [r3, #0]
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d00c      	beq.n	8012a70 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	8b5b      	ldrh	r3, [r3, #26]
 8012a5a:	f043 0302 	orr.w	r3, r3, #2
 8012a5e:	b29a      	uxth	r2, r3
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8012a64:	6878      	ldr	r0, [r7, #4]
 8012a66:	f002 f8a5 	bl	8014bb4 <tcp_output>
  }
  return;
 8012a6a:	e001      	b.n	8012a70 <tcp_timewait_input+0xc0>
    return;
 8012a6c:	bf00      	nop
 8012a6e:	e000      	b.n	8012a72 <tcp_timewait_input+0xc2>
  return;
 8012a70:	bf00      	nop
}
 8012a72:	3708      	adds	r7, #8
 8012a74:	46bd      	mov	sp, r7
 8012a76:	bd80      	pop	{r7, pc}
 8012a78:	2000803c 	.word	0x2000803c
 8012a7c:	0801c8f0 	.word	0x0801c8f0
 8012a80:	0801cb08 	.word	0x0801cb08
 8012a84:	0801c93c 	.word	0x0801c93c
 8012a88:	20008030 	.word	0x20008030
 8012a8c:	20008034 	.word	0x20008034
 8012a90:	2000803a 	.word	0x2000803a
 8012a94:	20008020 	.word	0x20008020
 8012a98:	200050ec 	.word	0x200050ec
 8012a9c:	200050f0 	.word	0x200050f0
 8012aa0:	20007ff8 	.word	0x20007ff8

08012aa4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8012aa4:	b590      	push	{r4, r7, lr}
 8012aa6:	b08d      	sub	sp, #52	; 0x34
 8012aa8:	af04      	add	r7, sp, #16
 8012aaa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8012aac:	2300      	movs	r3, #0
 8012aae:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8012ab0:	2300      	movs	r3, #0
 8012ab2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d106      	bne.n	8012ac8 <tcp_process+0x24>
 8012aba:	4b9d      	ldr	r3, [pc, #628]	; (8012d30 <tcp_process+0x28c>)
 8012abc:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8012ac0:	499c      	ldr	r1, [pc, #624]	; (8012d34 <tcp_process+0x290>)
 8012ac2:	489d      	ldr	r0, [pc, #628]	; (8012d38 <tcp_process+0x294>)
 8012ac4:	f006 fac2 	bl	801904c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8012ac8:	4b9c      	ldr	r3, [pc, #624]	; (8012d3c <tcp_process+0x298>)
 8012aca:	781b      	ldrb	r3, [r3, #0]
 8012acc:	f003 0304 	and.w	r3, r3, #4
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d04e      	beq.n	8012b72 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	7d1b      	ldrb	r3, [r3, #20]
 8012ad8:	2b02      	cmp	r3, #2
 8012ada:	d108      	bne.n	8012aee <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012ae0:	4b97      	ldr	r3, [pc, #604]	; (8012d40 <tcp_process+0x29c>)
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	429a      	cmp	r2, r3
 8012ae6:	d123      	bne.n	8012b30 <tcp_process+0x8c>
        acceptable = 1;
 8012ae8:	2301      	movs	r3, #1
 8012aea:	76fb      	strb	r3, [r7, #27]
 8012aec:	e020      	b.n	8012b30 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012af2:	4b94      	ldr	r3, [pc, #592]	; (8012d44 <tcp_process+0x2a0>)
 8012af4:	681b      	ldr	r3, [r3, #0]
 8012af6:	429a      	cmp	r2, r3
 8012af8:	d102      	bne.n	8012b00 <tcp_process+0x5c>
        acceptable = 1;
 8012afa:	2301      	movs	r3, #1
 8012afc:	76fb      	strb	r3, [r7, #27]
 8012afe:	e017      	b.n	8012b30 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012b00:	4b90      	ldr	r3, [pc, #576]	; (8012d44 <tcp_process+0x2a0>)
 8012b02:	681a      	ldr	r2, [r3, #0]
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b08:	1ad3      	subs	r3, r2, r3
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	db10      	blt.n	8012b30 <tcp_process+0x8c>
 8012b0e:	4b8d      	ldr	r3, [pc, #564]	; (8012d44 <tcp_process+0x2a0>)
 8012b10:	681a      	ldr	r2, [r3, #0]
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b16:	6879      	ldr	r1, [r7, #4]
 8012b18:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012b1a:	440b      	add	r3, r1
 8012b1c:	1ad3      	subs	r3, r2, r3
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	dc06      	bgt.n	8012b30 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	8b5b      	ldrh	r3, [r3, #26]
 8012b26:	f043 0302 	orr.w	r3, r3, #2
 8012b2a:	b29a      	uxth	r2, r3
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8012b30:	7efb      	ldrb	r3, [r7, #27]
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d01b      	beq.n	8012b6e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	7d1b      	ldrb	r3, [r3, #20]
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	d106      	bne.n	8012b4c <tcp_process+0xa8>
 8012b3e:	4b7c      	ldr	r3, [pc, #496]	; (8012d30 <tcp_process+0x28c>)
 8012b40:	f44f 724e 	mov.w	r2, #824	; 0x338
 8012b44:	4980      	ldr	r1, [pc, #512]	; (8012d48 <tcp_process+0x2a4>)
 8012b46:	487c      	ldr	r0, [pc, #496]	; (8012d38 <tcp_process+0x294>)
 8012b48:	f006 fa80 	bl	801904c <iprintf>
      recv_flags |= TF_RESET;
 8012b4c:	4b7f      	ldr	r3, [pc, #508]	; (8012d4c <tcp_process+0x2a8>)
 8012b4e:	781b      	ldrb	r3, [r3, #0]
 8012b50:	f043 0308 	orr.w	r3, r3, #8
 8012b54:	b2da      	uxtb	r2, r3
 8012b56:	4b7d      	ldr	r3, [pc, #500]	; (8012d4c <tcp_process+0x2a8>)
 8012b58:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	8b5b      	ldrh	r3, [r3, #26]
 8012b5e:	f023 0301 	bic.w	r3, r3, #1
 8012b62:	b29a      	uxth	r2, r3
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8012b68:	f06f 030d 	mvn.w	r3, #13
 8012b6c:	e37a      	b.n	8013264 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8012b6e:	2300      	movs	r3, #0
 8012b70:	e378      	b.n	8013264 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8012b72:	4b72      	ldr	r3, [pc, #456]	; (8012d3c <tcp_process+0x298>)
 8012b74:	781b      	ldrb	r3, [r3, #0]
 8012b76:	f003 0302 	and.w	r3, r3, #2
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d010      	beq.n	8012ba0 <tcp_process+0xfc>
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	7d1b      	ldrb	r3, [r3, #20]
 8012b82:	2b02      	cmp	r3, #2
 8012b84:	d00c      	beq.n	8012ba0 <tcp_process+0xfc>
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	7d1b      	ldrb	r3, [r3, #20]
 8012b8a:	2b03      	cmp	r3, #3
 8012b8c:	d008      	beq.n	8012ba0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	8b5b      	ldrh	r3, [r3, #26]
 8012b92:	f043 0302 	orr.w	r3, r3, #2
 8012b96:	b29a      	uxth	r2, r3
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8012b9c:	2300      	movs	r3, #0
 8012b9e:	e361      	b.n	8013264 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	8b5b      	ldrh	r3, [r3, #26]
 8012ba4:	f003 0310 	and.w	r3, r3, #16
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d103      	bne.n	8012bb4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8012bac:	4b68      	ldr	r3, [pc, #416]	; (8012d50 <tcp_process+0x2ac>)
 8012bae:	681a      	ldr	r2, [r3, #0]
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	2200      	movs	r2, #0
 8012bb8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	2200      	movs	r2, #0
 8012bc0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8012bc4:	6878      	ldr	r0, [r7, #4]
 8012bc6:	f001 fc2f 	bl	8014428 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	7d1b      	ldrb	r3, [r3, #20]
 8012bce:	3b02      	subs	r3, #2
 8012bd0:	2b07      	cmp	r3, #7
 8012bd2:	f200 8337 	bhi.w	8013244 <tcp_process+0x7a0>
 8012bd6:	a201      	add	r2, pc, #4	; (adr r2, 8012bdc <tcp_process+0x138>)
 8012bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012bdc:	08012bfd 	.word	0x08012bfd
 8012be0:	08012e2d 	.word	0x08012e2d
 8012be4:	08012fa5 	.word	0x08012fa5
 8012be8:	08012fcf 	.word	0x08012fcf
 8012bec:	080130f3 	.word	0x080130f3
 8012bf0:	08012fa5 	.word	0x08012fa5
 8012bf4:	0801317f 	.word	0x0801317f
 8012bf8:	0801320f 	.word	0x0801320f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8012bfc:	4b4f      	ldr	r3, [pc, #316]	; (8012d3c <tcp_process+0x298>)
 8012bfe:	781b      	ldrb	r3, [r3, #0]
 8012c00:	f003 0310 	and.w	r3, r3, #16
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	f000 80e4 	beq.w	8012dd2 <tcp_process+0x32e>
 8012c0a:	4b4c      	ldr	r3, [pc, #304]	; (8012d3c <tcp_process+0x298>)
 8012c0c:	781b      	ldrb	r3, [r3, #0]
 8012c0e:	f003 0302 	and.w	r3, r3, #2
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	f000 80dd 	beq.w	8012dd2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012c1c:	1c5a      	adds	r2, r3, #1
 8012c1e:	4b48      	ldr	r3, [pc, #288]	; (8012d40 <tcp_process+0x29c>)
 8012c20:	681b      	ldr	r3, [r3, #0]
 8012c22:	429a      	cmp	r2, r3
 8012c24:	f040 80d5 	bne.w	8012dd2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8012c28:	4b46      	ldr	r3, [pc, #280]	; (8012d44 <tcp_process+0x2a0>)
 8012c2a:	681b      	ldr	r3, [r3, #0]
 8012c2c:	1c5a      	adds	r2, r3, #1
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8012c3a:	4b41      	ldr	r3, [pc, #260]	; (8012d40 <tcp_process+0x29c>)
 8012c3c:	681a      	ldr	r2, [r3, #0]
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8012c42:	4b44      	ldr	r3, [pc, #272]	; (8012d54 <tcp_process+0x2b0>)
 8012c44:	681b      	ldr	r3, [r3, #0]
 8012c46:	89db      	ldrh	r3, [r3, #14]
 8012c48:	b29a      	uxth	r2, r3
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8012c5c:	4b39      	ldr	r3, [pc, #228]	; (8012d44 <tcp_process+0x2a0>)
 8012c5e:	681b      	ldr	r3, [r3, #0]
 8012c60:	1e5a      	subs	r2, r3, #1
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	2204      	movs	r2, #4
 8012c6a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	3304      	adds	r3, #4
 8012c74:	4618      	mov	r0, r3
 8012c76:	f004 fad5 	bl	8017224 <ip4_route>
 8012c7a:	4601      	mov	r1, r0
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	3304      	adds	r3, #4
 8012c80:	461a      	mov	r2, r3
 8012c82:	4620      	mov	r0, r4
 8012c84:	f7ff f88c 	bl	8011da0 <tcp_eff_send_mss_netif>
 8012c88:	4603      	mov	r3, r0
 8012c8a:	461a      	mov	r2, r3
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012c94:	009a      	lsls	r2, r3, #2
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012c9a:	005b      	lsls	r3, r3, #1
 8012c9c:	f241 111c 	movw	r1, #4380	; 0x111c
 8012ca0:	428b      	cmp	r3, r1
 8012ca2:	bf38      	it	cc
 8012ca4:	460b      	movcc	r3, r1
 8012ca6:	429a      	cmp	r2, r3
 8012ca8:	d204      	bcs.n	8012cb4 <tcp_process+0x210>
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012cae:	009b      	lsls	r3, r3, #2
 8012cb0:	b29b      	uxth	r3, r3
 8012cb2:	e00d      	b.n	8012cd0 <tcp_process+0x22c>
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012cb8:	005b      	lsls	r3, r3, #1
 8012cba:	f241 121c 	movw	r2, #4380	; 0x111c
 8012cbe:	4293      	cmp	r3, r2
 8012cc0:	d904      	bls.n	8012ccc <tcp_process+0x228>
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012cc6:	005b      	lsls	r3, r3, #1
 8012cc8:	b29b      	uxth	r3, r3
 8012cca:	e001      	b.n	8012cd0 <tcp_process+0x22c>
 8012ccc:	f241 131c 	movw	r3, #4380	; 0x111c
 8012cd0:	687a      	ldr	r2, [r7, #4]
 8012cd2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d106      	bne.n	8012cee <tcp_process+0x24a>
 8012ce0:	4b13      	ldr	r3, [pc, #76]	; (8012d30 <tcp_process+0x28c>)
 8012ce2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8012ce6:	491c      	ldr	r1, [pc, #112]	; (8012d58 <tcp_process+0x2b4>)
 8012ce8:	4813      	ldr	r0, [pc, #76]	; (8012d38 <tcp_process+0x294>)
 8012cea:	f006 f9af 	bl	801904c <iprintf>
        --pcb->snd_queuelen;
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012cf4:	3b01      	subs	r3, #1
 8012cf6:	b29a      	uxth	r2, r3
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012d02:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8012d04:	69fb      	ldr	r3, [r7, #28]
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d12a      	bne.n	8012d60 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012d0e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8012d10:	69fb      	ldr	r3, [r7, #28]
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d106      	bne.n	8012d24 <tcp_process+0x280>
 8012d16:	4b06      	ldr	r3, [pc, #24]	; (8012d30 <tcp_process+0x28c>)
 8012d18:	f44f 725d 	mov.w	r2, #884	; 0x374
 8012d1c:	490f      	ldr	r1, [pc, #60]	; (8012d5c <tcp_process+0x2b8>)
 8012d1e:	4806      	ldr	r0, [pc, #24]	; (8012d38 <tcp_process+0x294>)
 8012d20:	f006 f994 	bl	801904c <iprintf>
          pcb->unsent = rseg->next;
 8012d24:	69fb      	ldr	r3, [r7, #28]
 8012d26:	681a      	ldr	r2, [r3, #0]
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	66da      	str	r2, [r3, #108]	; 0x6c
 8012d2c:	e01c      	b.n	8012d68 <tcp_process+0x2c4>
 8012d2e:	bf00      	nop
 8012d30:	0801c8f0 	.word	0x0801c8f0
 8012d34:	0801cb28 	.word	0x0801cb28
 8012d38:	0801c93c 	.word	0x0801c93c
 8012d3c:	2000803c 	.word	0x2000803c
 8012d40:	20008034 	.word	0x20008034
 8012d44:	20008030 	.word	0x20008030
 8012d48:	0801cb44 	.word	0x0801cb44
 8012d4c:	2000803d 	.word	0x2000803d
 8012d50:	20007ff8 	.word	0x20007ff8
 8012d54:	20008020 	.word	0x20008020
 8012d58:	0801cb64 	.word	0x0801cb64
 8012d5c:	0801cb7c 	.word	0x0801cb7c
        } else {
          pcb->unacked = rseg->next;
 8012d60:	69fb      	ldr	r3, [r7, #28]
 8012d62:	681a      	ldr	r2, [r3, #0]
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8012d68:	69f8      	ldr	r0, [r7, #28]
 8012d6a:	f7fe fd22 	bl	80117b2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	d104      	bne.n	8012d80 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012d7c:	861a      	strh	r2, [r3, #48]	; 0x30
 8012d7e:	e006      	b.n	8012d8e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	2200      	movs	r2, #0
 8012d84:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	2200      	movs	r2, #0
 8012d8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d00a      	beq.n	8012dae <tcp_process+0x30a>
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012d9e:	687a      	ldr	r2, [r7, #4]
 8012da0:	6910      	ldr	r0, [r2, #16]
 8012da2:	2200      	movs	r2, #0
 8012da4:	6879      	ldr	r1, [r7, #4]
 8012da6:	4798      	blx	r3
 8012da8:	4603      	mov	r3, r0
 8012daa:	76bb      	strb	r3, [r7, #26]
 8012dac:	e001      	b.n	8012db2 <tcp_process+0x30e>
 8012dae:	2300      	movs	r3, #0
 8012db0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8012db2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012db6:	f113 0f0d 	cmn.w	r3, #13
 8012dba:	d102      	bne.n	8012dc2 <tcp_process+0x31e>
          return ERR_ABRT;
 8012dbc:	f06f 030c 	mvn.w	r3, #12
 8012dc0:	e250      	b.n	8013264 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	8b5b      	ldrh	r3, [r3, #26]
 8012dc6:	f043 0302 	orr.w	r3, r3, #2
 8012dca:	b29a      	uxth	r2, r3
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8012dd0:	e23a      	b.n	8013248 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8012dd2:	4b98      	ldr	r3, [pc, #608]	; (8013034 <tcp_process+0x590>)
 8012dd4:	781b      	ldrb	r3, [r3, #0]
 8012dd6:	f003 0310 	and.w	r3, r3, #16
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	f000 8234 	beq.w	8013248 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012de0:	4b95      	ldr	r3, [pc, #596]	; (8013038 <tcp_process+0x594>)
 8012de2:	6819      	ldr	r1, [r3, #0]
 8012de4:	4b95      	ldr	r3, [pc, #596]	; (801303c <tcp_process+0x598>)
 8012de6:	881b      	ldrh	r3, [r3, #0]
 8012de8:	461a      	mov	r2, r3
 8012dea:	4b95      	ldr	r3, [pc, #596]	; (8013040 <tcp_process+0x59c>)
 8012dec:	681b      	ldr	r3, [r3, #0]
 8012dee:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012df0:	4b94      	ldr	r3, [pc, #592]	; (8013044 <tcp_process+0x5a0>)
 8012df2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012df4:	885b      	ldrh	r3, [r3, #2]
 8012df6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012df8:	4a92      	ldr	r2, [pc, #584]	; (8013044 <tcp_process+0x5a0>)
 8012dfa:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012dfc:	8812      	ldrh	r2, [r2, #0]
 8012dfe:	b292      	uxth	r2, r2
 8012e00:	9202      	str	r2, [sp, #8]
 8012e02:	9301      	str	r3, [sp, #4]
 8012e04:	4b90      	ldr	r3, [pc, #576]	; (8013048 <tcp_process+0x5a4>)
 8012e06:	9300      	str	r3, [sp, #0]
 8012e08:	4b90      	ldr	r3, [pc, #576]	; (801304c <tcp_process+0x5a8>)
 8012e0a:	4602      	mov	r2, r0
 8012e0c:	6878      	ldr	r0, [r7, #4]
 8012e0e:	f002 fc85 	bl	801571c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012e18:	2b05      	cmp	r3, #5
 8012e1a:	f200 8215 	bhi.w	8013248 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	2200      	movs	r2, #0
 8012e22:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8012e24:	6878      	ldr	r0, [r7, #4]
 8012e26:	f002 fa51 	bl	80152cc <tcp_rexmit_rto>
      break;
 8012e2a:	e20d      	b.n	8013248 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8012e2c:	4b81      	ldr	r3, [pc, #516]	; (8013034 <tcp_process+0x590>)
 8012e2e:	781b      	ldrb	r3, [r3, #0]
 8012e30:	f003 0310 	and.w	r3, r3, #16
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	f000 80a1 	beq.w	8012f7c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012e3a:	4b7f      	ldr	r3, [pc, #508]	; (8013038 <tcp_process+0x594>)
 8012e3c:	681a      	ldr	r2, [r3, #0]
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012e42:	1ad3      	subs	r3, r2, r3
 8012e44:	3b01      	subs	r3, #1
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	db7e      	blt.n	8012f48 <tcp_process+0x4a4>
 8012e4a:	4b7b      	ldr	r3, [pc, #492]	; (8013038 <tcp_process+0x594>)
 8012e4c:	681a      	ldr	r2, [r3, #0]
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012e52:	1ad3      	subs	r3, r2, r3
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	dc77      	bgt.n	8012f48 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	2204      	movs	r2, #4
 8012e5c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d102      	bne.n	8012e6c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8012e66:	23fa      	movs	r3, #250	; 0xfa
 8012e68:	76bb      	strb	r3, [r7, #26]
 8012e6a:	e01d      	b.n	8012ea8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012e70:	699b      	ldr	r3, [r3, #24]
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d106      	bne.n	8012e84 <tcp_process+0x3e0>
 8012e76:	4b76      	ldr	r3, [pc, #472]	; (8013050 <tcp_process+0x5ac>)
 8012e78:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8012e7c:	4975      	ldr	r1, [pc, #468]	; (8013054 <tcp_process+0x5b0>)
 8012e7e:	4876      	ldr	r0, [pc, #472]	; (8013058 <tcp_process+0x5b4>)
 8012e80:	f006 f8e4 	bl	801904c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012e88:	699b      	ldr	r3, [r3, #24]
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	d00a      	beq.n	8012ea4 <tcp_process+0x400>
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012e92:	699b      	ldr	r3, [r3, #24]
 8012e94:	687a      	ldr	r2, [r7, #4]
 8012e96:	6910      	ldr	r0, [r2, #16]
 8012e98:	2200      	movs	r2, #0
 8012e9a:	6879      	ldr	r1, [r7, #4]
 8012e9c:	4798      	blx	r3
 8012e9e:	4603      	mov	r3, r0
 8012ea0:	76bb      	strb	r3, [r7, #26]
 8012ea2:	e001      	b.n	8012ea8 <tcp_process+0x404>
 8012ea4:	23f0      	movs	r3, #240	; 0xf0
 8012ea6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8012ea8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d00a      	beq.n	8012ec6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8012eb0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012eb4:	f113 0f0d 	cmn.w	r3, #13
 8012eb8:	d002      	beq.n	8012ec0 <tcp_process+0x41c>
              tcp_abort(pcb);
 8012eba:	6878      	ldr	r0, [r7, #4]
 8012ebc:	f7fd ff8e 	bl	8010ddc <tcp_abort>
            }
            return ERR_ABRT;
 8012ec0:	f06f 030c 	mvn.w	r3, #12
 8012ec4:	e1ce      	b.n	8013264 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8012ec6:	6878      	ldr	r0, [r7, #4]
 8012ec8:	f000 fae0 	bl	801348c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8012ecc:	4b63      	ldr	r3, [pc, #396]	; (801305c <tcp_process+0x5b8>)
 8012ece:	881b      	ldrh	r3, [r3, #0]
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d005      	beq.n	8012ee0 <tcp_process+0x43c>
            recv_acked--;
 8012ed4:	4b61      	ldr	r3, [pc, #388]	; (801305c <tcp_process+0x5b8>)
 8012ed6:	881b      	ldrh	r3, [r3, #0]
 8012ed8:	3b01      	subs	r3, #1
 8012eda:	b29a      	uxth	r2, r3
 8012edc:	4b5f      	ldr	r3, [pc, #380]	; (801305c <tcp_process+0x5b8>)
 8012ede:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012ee4:	009a      	lsls	r2, r3, #2
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012eea:	005b      	lsls	r3, r3, #1
 8012eec:	f241 111c 	movw	r1, #4380	; 0x111c
 8012ef0:	428b      	cmp	r3, r1
 8012ef2:	bf38      	it	cc
 8012ef4:	460b      	movcc	r3, r1
 8012ef6:	429a      	cmp	r2, r3
 8012ef8:	d204      	bcs.n	8012f04 <tcp_process+0x460>
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012efe:	009b      	lsls	r3, r3, #2
 8012f00:	b29b      	uxth	r3, r3
 8012f02:	e00d      	b.n	8012f20 <tcp_process+0x47c>
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012f08:	005b      	lsls	r3, r3, #1
 8012f0a:	f241 121c 	movw	r2, #4380	; 0x111c
 8012f0e:	4293      	cmp	r3, r2
 8012f10:	d904      	bls.n	8012f1c <tcp_process+0x478>
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012f16:	005b      	lsls	r3, r3, #1
 8012f18:	b29b      	uxth	r3, r3
 8012f1a:	e001      	b.n	8012f20 <tcp_process+0x47c>
 8012f1c:	f241 131c 	movw	r3, #4380	; 0x111c
 8012f20:	687a      	ldr	r2, [r7, #4]
 8012f22:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8012f26:	4b4e      	ldr	r3, [pc, #312]	; (8013060 <tcp_process+0x5bc>)
 8012f28:	781b      	ldrb	r3, [r3, #0]
 8012f2a:	f003 0320 	and.w	r3, r3, #32
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d037      	beq.n	8012fa2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	8b5b      	ldrh	r3, [r3, #26]
 8012f36:	f043 0302 	orr.w	r3, r3, #2
 8012f3a:	b29a      	uxth	r2, r3
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	2207      	movs	r2, #7
 8012f44:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8012f46:	e02c      	b.n	8012fa2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012f48:	4b3b      	ldr	r3, [pc, #236]	; (8013038 <tcp_process+0x594>)
 8012f4a:	6819      	ldr	r1, [r3, #0]
 8012f4c:	4b3b      	ldr	r3, [pc, #236]	; (801303c <tcp_process+0x598>)
 8012f4e:	881b      	ldrh	r3, [r3, #0]
 8012f50:	461a      	mov	r2, r3
 8012f52:	4b3b      	ldr	r3, [pc, #236]	; (8013040 <tcp_process+0x59c>)
 8012f54:	681b      	ldr	r3, [r3, #0]
 8012f56:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012f58:	4b3a      	ldr	r3, [pc, #232]	; (8013044 <tcp_process+0x5a0>)
 8012f5a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012f5c:	885b      	ldrh	r3, [r3, #2]
 8012f5e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012f60:	4a38      	ldr	r2, [pc, #224]	; (8013044 <tcp_process+0x5a0>)
 8012f62:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012f64:	8812      	ldrh	r2, [r2, #0]
 8012f66:	b292      	uxth	r2, r2
 8012f68:	9202      	str	r2, [sp, #8]
 8012f6a:	9301      	str	r3, [sp, #4]
 8012f6c:	4b36      	ldr	r3, [pc, #216]	; (8013048 <tcp_process+0x5a4>)
 8012f6e:	9300      	str	r3, [sp, #0]
 8012f70:	4b36      	ldr	r3, [pc, #216]	; (801304c <tcp_process+0x5a8>)
 8012f72:	4602      	mov	r2, r0
 8012f74:	6878      	ldr	r0, [r7, #4]
 8012f76:	f002 fbd1 	bl	801571c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8012f7a:	e167      	b.n	801324c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8012f7c:	4b2d      	ldr	r3, [pc, #180]	; (8013034 <tcp_process+0x590>)
 8012f7e:	781b      	ldrb	r3, [r3, #0]
 8012f80:	f003 0302 	and.w	r3, r3, #2
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	f000 8161 	beq.w	801324c <tcp_process+0x7a8>
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f8e:	1e5a      	subs	r2, r3, #1
 8012f90:	4b2b      	ldr	r3, [pc, #172]	; (8013040 <tcp_process+0x59c>)
 8012f92:	681b      	ldr	r3, [r3, #0]
 8012f94:	429a      	cmp	r2, r3
 8012f96:	f040 8159 	bne.w	801324c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8012f9a:	6878      	ldr	r0, [r7, #4]
 8012f9c:	f002 f9b8 	bl	8015310 <tcp_rexmit>
      break;
 8012fa0:	e154      	b.n	801324c <tcp_process+0x7a8>
 8012fa2:	e153      	b.n	801324c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8012fa4:	6878      	ldr	r0, [r7, #4]
 8012fa6:	f000 fa71 	bl	801348c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8012faa:	4b2d      	ldr	r3, [pc, #180]	; (8013060 <tcp_process+0x5bc>)
 8012fac:	781b      	ldrb	r3, [r3, #0]
 8012fae:	f003 0320 	and.w	r3, r3, #32
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	f000 814c 	beq.w	8013250 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	8b5b      	ldrh	r3, [r3, #26]
 8012fbc:	f043 0302 	orr.w	r3, r3, #2
 8012fc0:	b29a      	uxth	r2, r3
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	2207      	movs	r2, #7
 8012fca:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012fcc:	e140      	b.n	8013250 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8012fce:	6878      	ldr	r0, [r7, #4]
 8012fd0:	f000 fa5c 	bl	801348c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8012fd4:	4b22      	ldr	r3, [pc, #136]	; (8013060 <tcp_process+0x5bc>)
 8012fd6:	781b      	ldrb	r3, [r3, #0]
 8012fd8:	f003 0320 	and.w	r3, r3, #32
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d071      	beq.n	80130c4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012fe0:	4b14      	ldr	r3, [pc, #80]	; (8013034 <tcp_process+0x590>)
 8012fe2:	781b      	ldrb	r3, [r3, #0]
 8012fe4:	f003 0310 	and.w	r3, r3, #16
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d060      	beq.n	80130ae <tcp_process+0x60a>
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012ff0:	4b11      	ldr	r3, [pc, #68]	; (8013038 <tcp_process+0x594>)
 8012ff2:	681b      	ldr	r3, [r3, #0]
 8012ff4:	429a      	cmp	r2, r3
 8012ff6:	d15a      	bne.n	80130ae <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d156      	bne.n	80130ae <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	8b5b      	ldrh	r3, [r3, #26]
 8013004:	f043 0302 	orr.w	r3, r3, #2
 8013008:	b29a      	uxth	r2, r3
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801300e:	6878      	ldr	r0, [r7, #4]
 8013010:	f7fe fdbc 	bl	8011b8c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8013014:	4b13      	ldr	r3, [pc, #76]	; (8013064 <tcp_process+0x5c0>)
 8013016:	681b      	ldr	r3, [r3, #0]
 8013018:	687a      	ldr	r2, [r7, #4]
 801301a:	429a      	cmp	r2, r3
 801301c:	d105      	bne.n	801302a <tcp_process+0x586>
 801301e:	4b11      	ldr	r3, [pc, #68]	; (8013064 <tcp_process+0x5c0>)
 8013020:	681b      	ldr	r3, [r3, #0]
 8013022:	68db      	ldr	r3, [r3, #12]
 8013024:	4a0f      	ldr	r2, [pc, #60]	; (8013064 <tcp_process+0x5c0>)
 8013026:	6013      	str	r3, [r2, #0]
 8013028:	e02e      	b.n	8013088 <tcp_process+0x5e4>
 801302a:	4b0e      	ldr	r3, [pc, #56]	; (8013064 <tcp_process+0x5c0>)
 801302c:	681b      	ldr	r3, [r3, #0]
 801302e:	617b      	str	r3, [r7, #20]
 8013030:	e027      	b.n	8013082 <tcp_process+0x5de>
 8013032:	bf00      	nop
 8013034:	2000803c 	.word	0x2000803c
 8013038:	20008034 	.word	0x20008034
 801303c:	2000803a 	.word	0x2000803a
 8013040:	20008030 	.word	0x20008030
 8013044:	20008020 	.word	0x20008020
 8013048:	200050ec 	.word	0x200050ec
 801304c:	200050f0 	.word	0x200050f0
 8013050:	0801c8f0 	.word	0x0801c8f0
 8013054:	0801cb90 	.word	0x0801cb90
 8013058:	0801c93c 	.word	0x0801c93c
 801305c:	20008038 	.word	0x20008038
 8013060:	2000803d 	.word	0x2000803d
 8013064:	20008004 	.word	0x20008004
 8013068:	697b      	ldr	r3, [r7, #20]
 801306a:	68db      	ldr	r3, [r3, #12]
 801306c:	687a      	ldr	r2, [r7, #4]
 801306e:	429a      	cmp	r2, r3
 8013070:	d104      	bne.n	801307c <tcp_process+0x5d8>
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	68da      	ldr	r2, [r3, #12]
 8013076:	697b      	ldr	r3, [r7, #20]
 8013078:	60da      	str	r2, [r3, #12]
 801307a:	e005      	b.n	8013088 <tcp_process+0x5e4>
 801307c:	697b      	ldr	r3, [r7, #20]
 801307e:	68db      	ldr	r3, [r3, #12]
 8013080:	617b      	str	r3, [r7, #20]
 8013082:	697b      	ldr	r3, [r7, #20]
 8013084:	2b00      	cmp	r3, #0
 8013086:	d1ef      	bne.n	8013068 <tcp_process+0x5c4>
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	2200      	movs	r2, #0
 801308c:	60da      	str	r2, [r3, #12]
 801308e:	4b77      	ldr	r3, [pc, #476]	; (801326c <tcp_process+0x7c8>)
 8013090:	2201      	movs	r2, #1
 8013092:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	220a      	movs	r2, #10
 8013098:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801309a:	4b75      	ldr	r3, [pc, #468]	; (8013270 <tcp_process+0x7cc>)
 801309c:	681a      	ldr	r2, [r3, #0]
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	60da      	str	r2, [r3, #12]
 80130a2:	4a73      	ldr	r2, [pc, #460]	; (8013270 <tcp_process+0x7cc>)
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	6013      	str	r3, [r2, #0]
 80130a8:	f002 fcfa 	bl	8015aa0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80130ac:	e0d2      	b.n	8013254 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	8b5b      	ldrh	r3, [r3, #26]
 80130b2:	f043 0302 	orr.w	r3, r3, #2
 80130b6:	b29a      	uxth	r2, r3
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	2208      	movs	r2, #8
 80130c0:	751a      	strb	r2, [r3, #20]
      break;
 80130c2:	e0c7      	b.n	8013254 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80130c4:	4b6b      	ldr	r3, [pc, #428]	; (8013274 <tcp_process+0x7d0>)
 80130c6:	781b      	ldrb	r3, [r3, #0]
 80130c8:	f003 0310 	and.w	r3, r3, #16
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	f000 80c1 	beq.w	8013254 <tcp_process+0x7b0>
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80130d6:	4b68      	ldr	r3, [pc, #416]	; (8013278 <tcp_process+0x7d4>)
 80130d8:	681b      	ldr	r3, [r3, #0]
 80130da:	429a      	cmp	r2, r3
 80130dc:	f040 80ba 	bne.w	8013254 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	f040 80b5 	bne.w	8013254 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	2206      	movs	r2, #6
 80130ee:	751a      	strb	r2, [r3, #20]
      break;
 80130f0:	e0b0      	b.n	8013254 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80130f2:	6878      	ldr	r0, [r7, #4]
 80130f4:	f000 f9ca 	bl	801348c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80130f8:	4b60      	ldr	r3, [pc, #384]	; (801327c <tcp_process+0x7d8>)
 80130fa:	781b      	ldrb	r3, [r3, #0]
 80130fc:	f003 0320 	and.w	r3, r3, #32
 8013100:	2b00      	cmp	r3, #0
 8013102:	f000 80a9 	beq.w	8013258 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	8b5b      	ldrh	r3, [r3, #26]
 801310a:	f043 0302 	orr.w	r3, r3, #2
 801310e:	b29a      	uxth	r2, r3
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8013114:	6878      	ldr	r0, [r7, #4]
 8013116:	f7fe fd39 	bl	8011b8c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801311a:	4b59      	ldr	r3, [pc, #356]	; (8013280 <tcp_process+0x7dc>)
 801311c:	681b      	ldr	r3, [r3, #0]
 801311e:	687a      	ldr	r2, [r7, #4]
 8013120:	429a      	cmp	r2, r3
 8013122:	d105      	bne.n	8013130 <tcp_process+0x68c>
 8013124:	4b56      	ldr	r3, [pc, #344]	; (8013280 <tcp_process+0x7dc>)
 8013126:	681b      	ldr	r3, [r3, #0]
 8013128:	68db      	ldr	r3, [r3, #12]
 801312a:	4a55      	ldr	r2, [pc, #340]	; (8013280 <tcp_process+0x7dc>)
 801312c:	6013      	str	r3, [r2, #0]
 801312e:	e013      	b.n	8013158 <tcp_process+0x6b4>
 8013130:	4b53      	ldr	r3, [pc, #332]	; (8013280 <tcp_process+0x7dc>)
 8013132:	681b      	ldr	r3, [r3, #0]
 8013134:	613b      	str	r3, [r7, #16]
 8013136:	e00c      	b.n	8013152 <tcp_process+0x6ae>
 8013138:	693b      	ldr	r3, [r7, #16]
 801313a:	68db      	ldr	r3, [r3, #12]
 801313c:	687a      	ldr	r2, [r7, #4]
 801313e:	429a      	cmp	r2, r3
 8013140:	d104      	bne.n	801314c <tcp_process+0x6a8>
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	68da      	ldr	r2, [r3, #12]
 8013146:	693b      	ldr	r3, [r7, #16]
 8013148:	60da      	str	r2, [r3, #12]
 801314a:	e005      	b.n	8013158 <tcp_process+0x6b4>
 801314c:	693b      	ldr	r3, [r7, #16]
 801314e:	68db      	ldr	r3, [r3, #12]
 8013150:	613b      	str	r3, [r7, #16]
 8013152:	693b      	ldr	r3, [r7, #16]
 8013154:	2b00      	cmp	r3, #0
 8013156:	d1ef      	bne.n	8013138 <tcp_process+0x694>
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	2200      	movs	r2, #0
 801315c:	60da      	str	r2, [r3, #12]
 801315e:	4b43      	ldr	r3, [pc, #268]	; (801326c <tcp_process+0x7c8>)
 8013160:	2201      	movs	r2, #1
 8013162:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	220a      	movs	r2, #10
 8013168:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801316a:	4b41      	ldr	r3, [pc, #260]	; (8013270 <tcp_process+0x7cc>)
 801316c:	681a      	ldr	r2, [r3, #0]
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	60da      	str	r2, [r3, #12]
 8013172:	4a3f      	ldr	r2, [pc, #252]	; (8013270 <tcp_process+0x7cc>)
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	6013      	str	r3, [r2, #0]
 8013178:	f002 fc92 	bl	8015aa0 <tcp_timer_needed>
      }
      break;
 801317c:	e06c      	b.n	8013258 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801317e:	6878      	ldr	r0, [r7, #4]
 8013180:	f000 f984 	bl	801348c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013184:	4b3b      	ldr	r3, [pc, #236]	; (8013274 <tcp_process+0x7d0>)
 8013186:	781b      	ldrb	r3, [r3, #0]
 8013188:	f003 0310 	and.w	r3, r3, #16
 801318c:	2b00      	cmp	r3, #0
 801318e:	d065      	beq.n	801325c <tcp_process+0x7b8>
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013194:	4b38      	ldr	r3, [pc, #224]	; (8013278 <tcp_process+0x7d4>)
 8013196:	681b      	ldr	r3, [r3, #0]
 8013198:	429a      	cmp	r2, r3
 801319a:	d15f      	bne.n	801325c <tcp_process+0x7b8>
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d15b      	bne.n	801325c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80131a4:	6878      	ldr	r0, [r7, #4]
 80131a6:	f7fe fcf1 	bl	8011b8c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80131aa:	4b35      	ldr	r3, [pc, #212]	; (8013280 <tcp_process+0x7dc>)
 80131ac:	681b      	ldr	r3, [r3, #0]
 80131ae:	687a      	ldr	r2, [r7, #4]
 80131b0:	429a      	cmp	r2, r3
 80131b2:	d105      	bne.n	80131c0 <tcp_process+0x71c>
 80131b4:	4b32      	ldr	r3, [pc, #200]	; (8013280 <tcp_process+0x7dc>)
 80131b6:	681b      	ldr	r3, [r3, #0]
 80131b8:	68db      	ldr	r3, [r3, #12]
 80131ba:	4a31      	ldr	r2, [pc, #196]	; (8013280 <tcp_process+0x7dc>)
 80131bc:	6013      	str	r3, [r2, #0]
 80131be:	e013      	b.n	80131e8 <tcp_process+0x744>
 80131c0:	4b2f      	ldr	r3, [pc, #188]	; (8013280 <tcp_process+0x7dc>)
 80131c2:	681b      	ldr	r3, [r3, #0]
 80131c4:	60fb      	str	r3, [r7, #12]
 80131c6:	e00c      	b.n	80131e2 <tcp_process+0x73e>
 80131c8:	68fb      	ldr	r3, [r7, #12]
 80131ca:	68db      	ldr	r3, [r3, #12]
 80131cc:	687a      	ldr	r2, [r7, #4]
 80131ce:	429a      	cmp	r2, r3
 80131d0:	d104      	bne.n	80131dc <tcp_process+0x738>
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	68da      	ldr	r2, [r3, #12]
 80131d6:	68fb      	ldr	r3, [r7, #12]
 80131d8:	60da      	str	r2, [r3, #12]
 80131da:	e005      	b.n	80131e8 <tcp_process+0x744>
 80131dc:	68fb      	ldr	r3, [r7, #12]
 80131de:	68db      	ldr	r3, [r3, #12]
 80131e0:	60fb      	str	r3, [r7, #12]
 80131e2:	68fb      	ldr	r3, [r7, #12]
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d1ef      	bne.n	80131c8 <tcp_process+0x724>
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	2200      	movs	r2, #0
 80131ec:	60da      	str	r2, [r3, #12]
 80131ee:	4b1f      	ldr	r3, [pc, #124]	; (801326c <tcp_process+0x7c8>)
 80131f0:	2201      	movs	r2, #1
 80131f2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	220a      	movs	r2, #10
 80131f8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80131fa:	4b1d      	ldr	r3, [pc, #116]	; (8013270 <tcp_process+0x7cc>)
 80131fc:	681a      	ldr	r2, [r3, #0]
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	60da      	str	r2, [r3, #12]
 8013202:	4a1b      	ldr	r2, [pc, #108]	; (8013270 <tcp_process+0x7cc>)
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	6013      	str	r3, [r2, #0]
 8013208:	f002 fc4a 	bl	8015aa0 <tcp_timer_needed>
      }
      break;
 801320c:	e026      	b.n	801325c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801320e:	6878      	ldr	r0, [r7, #4]
 8013210:	f000 f93c 	bl	801348c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013214:	4b17      	ldr	r3, [pc, #92]	; (8013274 <tcp_process+0x7d0>)
 8013216:	781b      	ldrb	r3, [r3, #0]
 8013218:	f003 0310 	and.w	r3, r3, #16
 801321c:	2b00      	cmp	r3, #0
 801321e:	d01f      	beq.n	8013260 <tcp_process+0x7bc>
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013224:	4b14      	ldr	r3, [pc, #80]	; (8013278 <tcp_process+0x7d4>)
 8013226:	681b      	ldr	r3, [r3, #0]
 8013228:	429a      	cmp	r2, r3
 801322a:	d119      	bne.n	8013260 <tcp_process+0x7bc>
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013230:	2b00      	cmp	r3, #0
 8013232:	d115      	bne.n	8013260 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8013234:	4b11      	ldr	r3, [pc, #68]	; (801327c <tcp_process+0x7d8>)
 8013236:	781b      	ldrb	r3, [r3, #0]
 8013238:	f043 0310 	orr.w	r3, r3, #16
 801323c:	b2da      	uxtb	r2, r3
 801323e:	4b0f      	ldr	r3, [pc, #60]	; (801327c <tcp_process+0x7d8>)
 8013240:	701a      	strb	r2, [r3, #0]
      }
      break;
 8013242:	e00d      	b.n	8013260 <tcp_process+0x7bc>
    default:
      break;
 8013244:	bf00      	nop
 8013246:	e00c      	b.n	8013262 <tcp_process+0x7be>
      break;
 8013248:	bf00      	nop
 801324a:	e00a      	b.n	8013262 <tcp_process+0x7be>
      break;
 801324c:	bf00      	nop
 801324e:	e008      	b.n	8013262 <tcp_process+0x7be>
      break;
 8013250:	bf00      	nop
 8013252:	e006      	b.n	8013262 <tcp_process+0x7be>
      break;
 8013254:	bf00      	nop
 8013256:	e004      	b.n	8013262 <tcp_process+0x7be>
      break;
 8013258:	bf00      	nop
 801325a:	e002      	b.n	8013262 <tcp_process+0x7be>
      break;
 801325c:	bf00      	nop
 801325e:	e000      	b.n	8013262 <tcp_process+0x7be>
      break;
 8013260:	bf00      	nop
  }
  return ERR_OK;
 8013262:	2300      	movs	r3, #0
}
 8013264:	4618      	mov	r0, r3
 8013266:	3724      	adds	r7, #36	; 0x24
 8013268:	46bd      	mov	sp, r7
 801326a:	bd90      	pop	{r4, r7, pc}
 801326c:	2000800c 	.word	0x2000800c
 8013270:	20008008 	.word	0x20008008
 8013274:	2000803c 	.word	0x2000803c
 8013278:	20008034 	.word	0x20008034
 801327c:	2000803d 	.word	0x2000803d
 8013280:	20008004 	.word	0x20008004

08013284 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8013284:	b590      	push	{r4, r7, lr}
 8013286:	b085      	sub	sp, #20
 8013288:	af00      	add	r7, sp, #0
 801328a:	6078      	str	r0, [r7, #4]
 801328c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	2b00      	cmp	r3, #0
 8013292:	d106      	bne.n	80132a2 <tcp_oos_insert_segment+0x1e>
 8013294:	4b3b      	ldr	r3, [pc, #236]	; (8013384 <tcp_oos_insert_segment+0x100>)
 8013296:	f240 421f 	movw	r2, #1055	; 0x41f
 801329a:	493b      	ldr	r1, [pc, #236]	; (8013388 <tcp_oos_insert_segment+0x104>)
 801329c:	483b      	ldr	r0, [pc, #236]	; (801338c <tcp_oos_insert_segment+0x108>)
 801329e:	f005 fed5 	bl	801904c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	68db      	ldr	r3, [r3, #12]
 80132a6:	899b      	ldrh	r3, [r3, #12]
 80132a8:	b29b      	uxth	r3, r3
 80132aa:	4618      	mov	r0, r3
 80132ac:	f7fb fc18 	bl	800eae0 <lwip_htons>
 80132b0:	4603      	mov	r3, r0
 80132b2:	b2db      	uxtb	r3, r3
 80132b4:	f003 0301 	and.w	r3, r3, #1
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	d028      	beq.n	801330e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80132bc:	6838      	ldr	r0, [r7, #0]
 80132be:	f7fe fa63 	bl	8011788 <tcp_segs_free>
    next = NULL;
 80132c2:	2300      	movs	r3, #0
 80132c4:	603b      	str	r3, [r7, #0]
 80132c6:	e056      	b.n	8013376 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80132c8:	683b      	ldr	r3, [r7, #0]
 80132ca:	68db      	ldr	r3, [r3, #12]
 80132cc:	899b      	ldrh	r3, [r3, #12]
 80132ce:	b29b      	uxth	r3, r3
 80132d0:	4618      	mov	r0, r3
 80132d2:	f7fb fc05 	bl	800eae0 <lwip_htons>
 80132d6:	4603      	mov	r3, r0
 80132d8:	b2db      	uxtb	r3, r3
 80132da:	f003 0301 	and.w	r3, r3, #1
 80132de:	2b00      	cmp	r3, #0
 80132e0:	d00d      	beq.n	80132fe <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	68db      	ldr	r3, [r3, #12]
 80132e6:	899b      	ldrh	r3, [r3, #12]
 80132e8:	b29c      	uxth	r4, r3
 80132ea:	2001      	movs	r0, #1
 80132ec:	f7fb fbf8 	bl	800eae0 <lwip_htons>
 80132f0:	4603      	mov	r3, r0
 80132f2:	461a      	mov	r2, r3
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	68db      	ldr	r3, [r3, #12]
 80132f8:	4322      	orrs	r2, r4
 80132fa:	b292      	uxth	r2, r2
 80132fc:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80132fe:	683b      	ldr	r3, [r7, #0]
 8013300:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8013302:	683b      	ldr	r3, [r7, #0]
 8013304:	681b      	ldr	r3, [r3, #0]
 8013306:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8013308:	68f8      	ldr	r0, [r7, #12]
 801330a:	f7fe fa52 	bl	80117b2 <tcp_seg_free>
    while (next &&
 801330e:	683b      	ldr	r3, [r7, #0]
 8013310:	2b00      	cmp	r3, #0
 8013312:	d00e      	beq.n	8013332 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	891b      	ldrh	r3, [r3, #8]
 8013318:	461a      	mov	r2, r3
 801331a:	4b1d      	ldr	r3, [pc, #116]	; (8013390 <tcp_oos_insert_segment+0x10c>)
 801331c:	681b      	ldr	r3, [r3, #0]
 801331e:	441a      	add	r2, r3
 8013320:	683b      	ldr	r3, [r7, #0]
 8013322:	68db      	ldr	r3, [r3, #12]
 8013324:	685b      	ldr	r3, [r3, #4]
 8013326:	6839      	ldr	r1, [r7, #0]
 8013328:	8909      	ldrh	r1, [r1, #8]
 801332a:	440b      	add	r3, r1
 801332c:	1ad3      	subs	r3, r2, r3
    while (next &&
 801332e:	2b00      	cmp	r3, #0
 8013330:	daca      	bge.n	80132c8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8013332:	683b      	ldr	r3, [r7, #0]
 8013334:	2b00      	cmp	r3, #0
 8013336:	d01e      	beq.n	8013376 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	891b      	ldrh	r3, [r3, #8]
 801333c:	461a      	mov	r2, r3
 801333e:	4b14      	ldr	r3, [pc, #80]	; (8013390 <tcp_oos_insert_segment+0x10c>)
 8013340:	681b      	ldr	r3, [r3, #0]
 8013342:	441a      	add	r2, r3
 8013344:	683b      	ldr	r3, [r7, #0]
 8013346:	68db      	ldr	r3, [r3, #12]
 8013348:	685b      	ldr	r3, [r3, #4]
 801334a:	1ad3      	subs	r3, r2, r3
    if (next &&
 801334c:	2b00      	cmp	r3, #0
 801334e:	dd12      	ble.n	8013376 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8013350:	683b      	ldr	r3, [r7, #0]
 8013352:	68db      	ldr	r3, [r3, #12]
 8013354:	685b      	ldr	r3, [r3, #4]
 8013356:	b29a      	uxth	r2, r3
 8013358:	4b0d      	ldr	r3, [pc, #52]	; (8013390 <tcp_oos_insert_segment+0x10c>)
 801335a:	681b      	ldr	r3, [r3, #0]
 801335c:	b29b      	uxth	r3, r3
 801335e:	1ad3      	subs	r3, r2, r3
 8013360:	b29a      	uxth	r2, r3
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	685a      	ldr	r2, [r3, #4]
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	891b      	ldrh	r3, [r3, #8]
 801336e:	4619      	mov	r1, r3
 8013370:	4610      	mov	r0, r2
 8013372:	f7fc fe25 	bl	800ffc0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	683a      	ldr	r2, [r7, #0]
 801337a:	601a      	str	r2, [r3, #0]
}
 801337c:	bf00      	nop
 801337e:	3714      	adds	r7, #20
 8013380:	46bd      	mov	sp, r7
 8013382:	bd90      	pop	{r4, r7, pc}
 8013384:	0801c8f0 	.word	0x0801c8f0
 8013388:	0801cbb0 	.word	0x0801cbb0
 801338c:	0801c93c 	.word	0x0801c93c
 8013390:	20008030 	.word	0x20008030

08013394 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8013394:	b5b0      	push	{r4, r5, r7, lr}
 8013396:	b086      	sub	sp, #24
 8013398:	af00      	add	r7, sp, #0
 801339a:	60f8      	str	r0, [r7, #12]
 801339c:	60b9      	str	r1, [r7, #8]
 801339e:	607a      	str	r2, [r7, #4]
 80133a0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80133a2:	e03e      	b.n	8013422 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80133a4:	68bb      	ldr	r3, [r7, #8]
 80133a6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80133a8:	68bb      	ldr	r3, [r7, #8]
 80133aa:	681b      	ldr	r3, [r3, #0]
 80133ac:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80133ae:	697b      	ldr	r3, [r7, #20]
 80133b0:	685b      	ldr	r3, [r3, #4]
 80133b2:	4618      	mov	r0, r3
 80133b4:	f7fd f812 	bl	80103dc <pbuf_clen>
 80133b8:	4603      	mov	r3, r0
 80133ba:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80133bc:	68fb      	ldr	r3, [r7, #12]
 80133be:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80133c2:	8a7a      	ldrh	r2, [r7, #18]
 80133c4:	429a      	cmp	r2, r3
 80133c6:	d906      	bls.n	80133d6 <tcp_free_acked_segments+0x42>
 80133c8:	4b2a      	ldr	r3, [pc, #168]	; (8013474 <tcp_free_acked_segments+0xe0>)
 80133ca:	f240 4257 	movw	r2, #1111	; 0x457
 80133ce:	492a      	ldr	r1, [pc, #168]	; (8013478 <tcp_free_acked_segments+0xe4>)
 80133d0:	482a      	ldr	r0, [pc, #168]	; (801347c <tcp_free_acked_segments+0xe8>)
 80133d2:	f005 fe3b 	bl	801904c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80133d6:	68fb      	ldr	r3, [r7, #12]
 80133d8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80133dc:	8a7b      	ldrh	r3, [r7, #18]
 80133de:	1ad3      	subs	r3, r2, r3
 80133e0:	b29a      	uxth	r2, r3
 80133e2:	68fb      	ldr	r3, [r7, #12]
 80133e4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80133e8:	697b      	ldr	r3, [r7, #20]
 80133ea:	891a      	ldrh	r2, [r3, #8]
 80133ec:	4b24      	ldr	r3, [pc, #144]	; (8013480 <tcp_free_acked_segments+0xec>)
 80133ee:	881b      	ldrh	r3, [r3, #0]
 80133f0:	4413      	add	r3, r2
 80133f2:	b29a      	uxth	r2, r3
 80133f4:	4b22      	ldr	r3, [pc, #136]	; (8013480 <tcp_free_acked_segments+0xec>)
 80133f6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80133f8:	6978      	ldr	r0, [r7, #20]
 80133fa:	f7fe f9da 	bl	80117b2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80133fe:	68fb      	ldr	r3, [r7, #12]
 8013400:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013404:	2b00      	cmp	r3, #0
 8013406:	d00c      	beq.n	8013422 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8013408:	68bb      	ldr	r3, [r7, #8]
 801340a:	2b00      	cmp	r3, #0
 801340c:	d109      	bne.n	8013422 <tcp_free_acked_segments+0x8e>
 801340e:	683b      	ldr	r3, [r7, #0]
 8013410:	2b00      	cmp	r3, #0
 8013412:	d106      	bne.n	8013422 <tcp_free_acked_segments+0x8e>
 8013414:	4b17      	ldr	r3, [pc, #92]	; (8013474 <tcp_free_acked_segments+0xe0>)
 8013416:	f240 4261 	movw	r2, #1121	; 0x461
 801341a:	491a      	ldr	r1, [pc, #104]	; (8013484 <tcp_free_acked_segments+0xf0>)
 801341c:	4817      	ldr	r0, [pc, #92]	; (801347c <tcp_free_acked_segments+0xe8>)
 801341e:	f005 fe15 	bl	801904c <iprintf>
  while (seg_list != NULL &&
 8013422:	68bb      	ldr	r3, [r7, #8]
 8013424:	2b00      	cmp	r3, #0
 8013426:	d020      	beq.n	801346a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8013428:	68bb      	ldr	r3, [r7, #8]
 801342a:	68db      	ldr	r3, [r3, #12]
 801342c:	685b      	ldr	r3, [r3, #4]
 801342e:	4618      	mov	r0, r3
 8013430:	f7fb fb6b 	bl	800eb0a <lwip_htonl>
 8013434:	4604      	mov	r4, r0
 8013436:	68bb      	ldr	r3, [r7, #8]
 8013438:	891b      	ldrh	r3, [r3, #8]
 801343a:	461d      	mov	r5, r3
 801343c:	68bb      	ldr	r3, [r7, #8]
 801343e:	68db      	ldr	r3, [r3, #12]
 8013440:	899b      	ldrh	r3, [r3, #12]
 8013442:	b29b      	uxth	r3, r3
 8013444:	4618      	mov	r0, r3
 8013446:	f7fb fb4b 	bl	800eae0 <lwip_htons>
 801344a:	4603      	mov	r3, r0
 801344c:	b2db      	uxtb	r3, r3
 801344e:	f003 0303 	and.w	r3, r3, #3
 8013452:	2b00      	cmp	r3, #0
 8013454:	d001      	beq.n	801345a <tcp_free_acked_segments+0xc6>
 8013456:	2301      	movs	r3, #1
 8013458:	e000      	b.n	801345c <tcp_free_acked_segments+0xc8>
 801345a:	2300      	movs	r3, #0
 801345c:	442b      	add	r3, r5
 801345e:	18e2      	adds	r2, r4, r3
 8013460:	4b09      	ldr	r3, [pc, #36]	; (8013488 <tcp_free_acked_segments+0xf4>)
 8013462:	681b      	ldr	r3, [r3, #0]
 8013464:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8013466:	2b00      	cmp	r3, #0
 8013468:	dd9c      	ble.n	80133a4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801346a:	68bb      	ldr	r3, [r7, #8]
}
 801346c:	4618      	mov	r0, r3
 801346e:	3718      	adds	r7, #24
 8013470:	46bd      	mov	sp, r7
 8013472:	bdb0      	pop	{r4, r5, r7, pc}
 8013474:	0801c8f0 	.word	0x0801c8f0
 8013478:	0801cbd8 	.word	0x0801cbd8
 801347c:	0801c93c 	.word	0x0801c93c
 8013480:	20008038 	.word	0x20008038
 8013484:	0801cc00 	.word	0x0801cc00
 8013488:	20008034 	.word	0x20008034

0801348c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801348c:	b5b0      	push	{r4, r5, r7, lr}
 801348e:	b094      	sub	sp, #80	; 0x50
 8013490:	af00      	add	r7, sp, #0
 8013492:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8013494:	2300      	movs	r3, #0
 8013496:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	2b00      	cmp	r3, #0
 801349c:	d106      	bne.n	80134ac <tcp_receive+0x20>
 801349e:	4b91      	ldr	r3, [pc, #580]	; (80136e4 <tcp_receive+0x258>)
 80134a0:	f240 427b 	movw	r2, #1147	; 0x47b
 80134a4:	4990      	ldr	r1, [pc, #576]	; (80136e8 <tcp_receive+0x25c>)
 80134a6:	4891      	ldr	r0, [pc, #580]	; (80136ec <tcp_receive+0x260>)
 80134a8:	f005 fdd0 	bl	801904c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	7d1b      	ldrb	r3, [r3, #20]
 80134b0:	2b03      	cmp	r3, #3
 80134b2:	d806      	bhi.n	80134c2 <tcp_receive+0x36>
 80134b4:	4b8b      	ldr	r3, [pc, #556]	; (80136e4 <tcp_receive+0x258>)
 80134b6:	f240 427c 	movw	r2, #1148	; 0x47c
 80134ba:	498d      	ldr	r1, [pc, #564]	; (80136f0 <tcp_receive+0x264>)
 80134bc:	488b      	ldr	r0, [pc, #556]	; (80136ec <tcp_receive+0x260>)
 80134be:	f005 fdc5 	bl	801904c <iprintf>

  if (flags & TCP_ACK) {
 80134c2:	4b8c      	ldr	r3, [pc, #560]	; (80136f4 <tcp_receive+0x268>)
 80134c4:	781b      	ldrb	r3, [r3, #0]
 80134c6:	f003 0310 	and.w	r3, r3, #16
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	f000 8264 	beq.w	8013998 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80134d6:	461a      	mov	r2, r3
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80134dc:	4413      	add	r3, r2
 80134de:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80134e4:	4b84      	ldr	r3, [pc, #528]	; (80136f8 <tcp_receive+0x26c>)
 80134e6:	681b      	ldr	r3, [r3, #0]
 80134e8:	1ad3      	subs	r3, r2, r3
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	db1b      	blt.n	8013526 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80134f2:	4b81      	ldr	r3, [pc, #516]	; (80136f8 <tcp_receive+0x26c>)
 80134f4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80134f6:	429a      	cmp	r2, r3
 80134f8:	d106      	bne.n	8013508 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80134fe:	4b7f      	ldr	r3, [pc, #508]	; (80136fc <tcp_receive+0x270>)
 8013500:	681b      	ldr	r3, [r3, #0]
 8013502:	1ad3      	subs	r3, r2, r3
 8013504:	2b00      	cmp	r3, #0
 8013506:	db0e      	blt.n	8013526 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801350c:	4b7b      	ldr	r3, [pc, #492]	; (80136fc <tcp_receive+0x270>)
 801350e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013510:	429a      	cmp	r2, r3
 8013512:	d125      	bne.n	8013560 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013514:	4b7a      	ldr	r3, [pc, #488]	; (8013700 <tcp_receive+0x274>)
 8013516:	681b      	ldr	r3, [r3, #0]
 8013518:	89db      	ldrh	r3, [r3, #14]
 801351a:	b29a      	uxth	r2, r3
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013522:	429a      	cmp	r2, r3
 8013524:	d91c      	bls.n	8013560 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8013526:	4b76      	ldr	r3, [pc, #472]	; (8013700 <tcp_receive+0x274>)
 8013528:	681b      	ldr	r3, [r3, #0]
 801352a:	89db      	ldrh	r3, [r3, #14]
 801352c:	b29a      	uxth	r2, r3
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013540:	429a      	cmp	r2, r3
 8013542:	d205      	bcs.n	8013550 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8013550:	4b69      	ldr	r3, [pc, #420]	; (80136f8 <tcp_receive+0x26c>)
 8013552:	681a      	ldr	r2, [r3, #0]
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8013558:	4b68      	ldr	r3, [pc, #416]	; (80136fc <tcp_receive+0x270>)
 801355a:	681a      	ldr	r2, [r3, #0]
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8013560:	4b66      	ldr	r3, [pc, #408]	; (80136fc <tcp_receive+0x270>)
 8013562:	681a      	ldr	r2, [r3, #0]
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013568:	1ad3      	subs	r3, r2, r3
 801356a:	2b00      	cmp	r3, #0
 801356c:	dc58      	bgt.n	8013620 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801356e:	4b65      	ldr	r3, [pc, #404]	; (8013704 <tcp_receive+0x278>)
 8013570:	881b      	ldrh	r3, [r3, #0]
 8013572:	2b00      	cmp	r3, #0
 8013574:	d14b      	bne.n	801360e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801357a:	687a      	ldr	r2, [r7, #4]
 801357c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8013580:	4413      	add	r3, r2
 8013582:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013584:	429a      	cmp	r2, r3
 8013586:	d142      	bne.n	801360e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801358e:	2b00      	cmp	r3, #0
 8013590:	db3d      	blt.n	801360e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013596:	4b59      	ldr	r3, [pc, #356]	; (80136fc <tcp_receive+0x270>)
 8013598:	681b      	ldr	r3, [r3, #0]
 801359a:	429a      	cmp	r2, r3
 801359c:	d137      	bne.n	801360e <tcp_receive+0x182>
              found_dupack = 1;
 801359e:	2301      	movs	r3, #1
 80135a0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80135a8:	2bff      	cmp	r3, #255	; 0xff
 80135aa:	d007      	beq.n	80135bc <tcp_receive+0x130>
                ++pcb->dupacks;
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80135b2:	3301      	adds	r3, #1
 80135b4:	b2da      	uxtb	r2, r3
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80135c2:	2b03      	cmp	r3, #3
 80135c4:	d91b      	bls.n	80135fe <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80135d0:	4413      	add	r3, r2
 80135d2:	b29a      	uxth	r2, r3
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80135da:	429a      	cmp	r2, r3
 80135dc:	d30a      	bcc.n	80135f4 <tcp_receive+0x168>
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80135e8:	4413      	add	r3, r2
 80135ea:	b29a      	uxth	r2, r3
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80135f2:	e004      	b.n	80135fe <tcp_receive+0x172>
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80135fa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013604:	2b02      	cmp	r3, #2
 8013606:	d902      	bls.n	801360e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8013608:	6878      	ldr	r0, [r7, #4]
 801360a:	f001 feed 	bl	80153e8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801360e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013610:	2b00      	cmp	r3, #0
 8013612:	f040 8161 	bne.w	80138d8 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	2200      	movs	r2, #0
 801361a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801361e:	e15b      	b.n	80138d8 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013620:	4b36      	ldr	r3, [pc, #216]	; (80136fc <tcp_receive+0x270>)
 8013622:	681a      	ldr	r2, [r3, #0]
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013628:	1ad3      	subs	r3, r2, r3
 801362a:	3b01      	subs	r3, #1
 801362c:	2b00      	cmp	r3, #0
 801362e:	f2c0 814e 	blt.w	80138ce <tcp_receive+0x442>
 8013632:	4b32      	ldr	r3, [pc, #200]	; (80136fc <tcp_receive+0x270>)
 8013634:	681a      	ldr	r2, [r3, #0]
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801363a:	1ad3      	subs	r3, r2, r3
 801363c:	2b00      	cmp	r3, #0
 801363e:	f300 8146 	bgt.w	80138ce <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	8b5b      	ldrh	r3, [r3, #26]
 8013646:	f003 0304 	and.w	r3, r3, #4
 801364a:	2b00      	cmp	r3, #0
 801364c:	d010      	beq.n	8013670 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	8b5b      	ldrh	r3, [r3, #26]
 8013652:	f023 0304 	bic.w	r3, r3, #4
 8013656:	b29a      	uxth	r2, r3
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	2200      	movs	r2, #0
 801366c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	2200      	movs	r2, #0
 8013674:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801367e:	10db      	asrs	r3, r3, #3
 8013680:	b21b      	sxth	r3, r3
 8013682:	b29a      	uxth	r2, r3
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801368a:	b29b      	uxth	r3, r3
 801368c:	4413      	add	r3, r2
 801368e:	b29b      	uxth	r3, r3
 8013690:	b21a      	sxth	r2, r3
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8013698:	4b18      	ldr	r3, [pc, #96]	; (80136fc <tcp_receive+0x270>)
 801369a:	681b      	ldr	r3, [r3, #0]
 801369c:	b29a      	uxth	r2, r3
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80136a2:	b29b      	uxth	r3, r3
 80136a4:	1ad3      	subs	r3, r2, r3
 80136a6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	2200      	movs	r2, #0
 80136ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80136b0:	4b12      	ldr	r3, [pc, #72]	; (80136fc <tcp_receive+0x270>)
 80136b2:	681a      	ldr	r2, [r3, #0]
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	7d1b      	ldrb	r3, [r3, #20]
 80136bc:	2b03      	cmp	r3, #3
 80136be:	f240 8097 	bls.w	80137f0 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80136ce:	429a      	cmp	r2, r3
 80136d0:	d245      	bcs.n	801375e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	8b5b      	ldrh	r3, [r3, #26]
 80136d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d014      	beq.n	8013708 <tcp_receive+0x27c>
 80136de:	2301      	movs	r3, #1
 80136e0:	e013      	b.n	801370a <tcp_receive+0x27e>
 80136e2:	bf00      	nop
 80136e4:	0801c8f0 	.word	0x0801c8f0
 80136e8:	0801cc20 	.word	0x0801cc20
 80136ec:	0801c93c 	.word	0x0801c93c
 80136f0:	0801cc3c 	.word	0x0801cc3c
 80136f4:	2000803c 	.word	0x2000803c
 80136f8:	20008030 	.word	0x20008030
 80136fc:	20008034 	.word	0x20008034
 8013700:	20008020 	.word	0x20008020
 8013704:	2000803a 	.word	0x2000803a
 8013708:	2302      	movs	r3, #2
 801370a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801370e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8013712:	b29a      	uxth	r2, r3
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013718:	fb12 f303 	smulbb	r3, r2, r3
 801371c:	b29b      	uxth	r3, r3
 801371e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013720:	4293      	cmp	r3, r2
 8013722:	bf28      	it	cs
 8013724:	4613      	movcs	r3, r2
 8013726:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801372e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013730:	4413      	add	r3, r2
 8013732:	b29a      	uxth	r2, r3
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801373a:	429a      	cmp	r2, r3
 801373c:	d309      	bcc.n	8013752 <tcp_receive+0x2c6>
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013744:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013746:	4413      	add	r3, r2
 8013748:	b29a      	uxth	r2, r3
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013750:	e04e      	b.n	80137f0 <tcp_receive+0x364>
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013758:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801375c:	e048      	b.n	80137f0 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8013764:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013766:	4413      	add	r3, r2
 8013768:	b29a      	uxth	r2, r3
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8013770:	429a      	cmp	r2, r3
 8013772:	d309      	bcc.n	8013788 <tcp_receive+0x2fc>
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801377a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801377c:	4413      	add	r3, r2
 801377e:	b29a      	uxth	r2, r3
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8013786:	e004      	b.n	8013792 <tcp_receive+0x306>
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801378e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801379e:	429a      	cmp	r2, r3
 80137a0:	d326      	bcc.n	80137f0 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80137ae:	1ad3      	subs	r3, r2, r3
 80137b0:	b29a      	uxth	r2, r3
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80137c2:	4413      	add	r3, r2
 80137c4:	b29a      	uxth	r2, r3
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80137cc:	429a      	cmp	r2, r3
 80137ce:	d30a      	bcc.n	80137e6 <tcp_receive+0x35a>
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80137da:	4413      	add	r3, r2
 80137dc:	b29a      	uxth	r2, r3
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80137e4:	e004      	b.n	80137f0 <tcp_receive+0x364>
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80137ec:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80137f8:	4a98      	ldr	r2, [pc, #608]	; (8013a5c <tcp_receive+0x5d0>)
 80137fa:	6878      	ldr	r0, [r7, #4]
 80137fc:	f7ff fdca 	bl	8013394 <tcp_free_acked_segments>
 8013800:	4602      	mov	r2, r0
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801380e:	4a94      	ldr	r2, [pc, #592]	; (8013a60 <tcp_receive+0x5d4>)
 8013810:	6878      	ldr	r0, [r7, #4]
 8013812:	f7ff fdbf 	bl	8013394 <tcp_free_acked_segments>
 8013816:	4602      	mov	r2, r0
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013820:	2b00      	cmp	r3, #0
 8013822:	d104      	bne.n	801382e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801382a:	861a      	strh	r2, [r3, #48]	; 0x30
 801382c:	e002      	b.n	8013834 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	2200      	movs	r2, #0
 8013832:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	2200      	movs	r2, #0
 8013838:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801383e:	2b00      	cmp	r3, #0
 8013840:	d103      	bne.n	801384a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	2200      	movs	r2, #0
 8013846:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8013850:	4b84      	ldr	r3, [pc, #528]	; (8013a64 <tcp_receive+0x5d8>)
 8013852:	881b      	ldrh	r3, [r3, #0]
 8013854:	4413      	add	r3, r2
 8013856:	b29a      	uxth	r2, r3
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	8b5b      	ldrh	r3, [r3, #26]
 8013862:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013866:	2b00      	cmp	r3, #0
 8013868:	d035      	beq.n	80138d6 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801386e:	2b00      	cmp	r3, #0
 8013870:	d118      	bne.n	80138a4 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013876:	2b00      	cmp	r3, #0
 8013878:	d00c      	beq.n	8013894 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013882:	68db      	ldr	r3, [r3, #12]
 8013884:	685b      	ldr	r3, [r3, #4]
 8013886:	4618      	mov	r0, r3
 8013888:	f7fb f93f 	bl	800eb0a <lwip_htonl>
 801388c:	4603      	mov	r3, r0
 801388e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8013890:	2b00      	cmp	r3, #0
 8013892:	dc20      	bgt.n	80138d6 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	8b5b      	ldrh	r3, [r3, #26]
 8013898:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801389c:	b29a      	uxth	r2, r3
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80138a2:	e018      	b.n	80138d6 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80138ac:	68db      	ldr	r3, [r3, #12]
 80138ae:	685b      	ldr	r3, [r3, #4]
 80138b0:	4618      	mov	r0, r3
 80138b2:	f7fb f92a 	bl	800eb0a <lwip_htonl>
 80138b6:	4603      	mov	r3, r0
 80138b8:	1ae3      	subs	r3, r4, r3
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	dc0b      	bgt.n	80138d6 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	8b5b      	ldrh	r3, [r3, #26]
 80138c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80138c6:	b29a      	uxth	r2, r3
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80138cc:	e003      	b.n	80138d6 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80138ce:	6878      	ldr	r0, [r7, #4]
 80138d0:	f001 ff76 	bl	80157c0 <tcp_send_empty_ack>
 80138d4:	e000      	b.n	80138d8 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80138d6:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80138dc:	2b00      	cmp	r3, #0
 80138de:	d05b      	beq.n	8013998 <tcp_receive+0x50c>
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80138e4:	4b60      	ldr	r3, [pc, #384]	; (8013a68 <tcp_receive+0x5dc>)
 80138e6:	681b      	ldr	r3, [r3, #0]
 80138e8:	1ad3      	subs	r3, r2, r3
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	da54      	bge.n	8013998 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80138ee:	4b5f      	ldr	r3, [pc, #380]	; (8013a6c <tcp_receive+0x5e0>)
 80138f0:	681b      	ldr	r3, [r3, #0]
 80138f2:	b29a      	uxth	r2, r3
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80138f8:	b29b      	uxth	r3, r3
 80138fa:	1ad3      	subs	r3, r2, r3
 80138fc:	b29b      	uxth	r3, r3
 80138fe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8013902:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801390c:	10db      	asrs	r3, r3, #3
 801390e:	b21b      	sxth	r3, r3
 8013910:	b29b      	uxth	r3, r3
 8013912:	1ad3      	subs	r3, r2, r3
 8013914:	b29b      	uxth	r3, r3
 8013916:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013920:	b29a      	uxth	r2, r3
 8013922:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8013926:	4413      	add	r3, r2
 8013928:	b29b      	uxth	r3, r3
 801392a:	b21a      	sxth	r2, r3
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8013930:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013934:	2b00      	cmp	r3, #0
 8013936:	da05      	bge.n	8013944 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8013938:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801393c:	425b      	negs	r3, r3
 801393e:	b29b      	uxth	r3, r3
 8013940:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8013944:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801394e:	109b      	asrs	r3, r3, #2
 8013950:	b21b      	sxth	r3, r3
 8013952:	b29b      	uxth	r3, r3
 8013954:	1ad3      	subs	r3, r2, r3
 8013956:	b29b      	uxth	r3, r3
 8013958:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013962:	b29a      	uxth	r2, r3
 8013964:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8013968:	4413      	add	r3, r2
 801396a:	b29b      	uxth	r3, r3
 801396c:	b21a      	sxth	r2, r3
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013978:	10db      	asrs	r3, r3, #3
 801397a:	b21b      	sxth	r3, r3
 801397c:	b29a      	uxth	r2, r3
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013984:	b29b      	uxth	r3, r3
 8013986:	4413      	add	r3, r2
 8013988:	b29b      	uxth	r3, r3
 801398a:	b21a      	sxth	r2, r3
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	2200      	movs	r2, #0
 8013996:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8013998:	4b35      	ldr	r3, [pc, #212]	; (8013a70 <tcp_receive+0x5e4>)
 801399a:	881b      	ldrh	r3, [r3, #0]
 801399c:	2b00      	cmp	r3, #0
 801399e:	f000 84e2 	beq.w	8014366 <tcp_receive+0xeda>
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	7d1b      	ldrb	r3, [r3, #20]
 80139a6:	2b06      	cmp	r3, #6
 80139a8:	f200 84dd 	bhi.w	8014366 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80139b0:	4b30      	ldr	r3, [pc, #192]	; (8013a74 <tcp_receive+0x5e8>)
 80139b2:	681b      	ldr	r3, [r3, #0]
 80139b4:	1ad3      	subs	r3, r2, r3
 80139b6:	3b01      	subs	r3, #1
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	f2c0 808f 	blt.w	8013adc <tcp_receive+0x650>
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80139c2:	4b2b      	ldr	r3, [pc, #172]	; (8013a70 <tcp_receive+0x5e4>)
 80139c4:	881b      	ldrh	r3, [r3, #0]
 80139c6:	4619      	mov	r1, r3
 80139c8:	4b2a      	ldr	r3, [pc, #168]	; (8013a74 <tcp_receive+0x5e8>)
 80139ca:	681b      	ldr	r3, [r3, #0]
 80139cc:	440b      	add	r3, r1
 80139ce:	1ad3      	subs	r3, r2, r3
 80139d0:	3301      	adds	r3, #1
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	f300 8082 	bgt.w	8013adc <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80139d8:	4b27      	ldr	r3, [pc, #156]	; (8013a78 <tcp_receive+0x5ec>)
 80139da:	685b      	ldr	r3, [r3, #4]
 80139dc:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80139e2:	4b24      	ldr	r3, [pc, #144]	; (8013a74 <tcp_receive+0x5e8>)
 80139e4:	681b      	ldr	r3, [r3, #0]
 80139e6:	1ad3      	subs	r3, r2, r3
 80139e8:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80139ea:	4b23      	ldr	r3, [pc, #140]	; (8013a78 <tcp_receive+0x5ec>)
 80139ec:	685b      	ldr	r3, [r3, #4]
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	d106      	bne.n	8013a00 <tcp_receive+0x574>
 80139f2:	4b22      	ldr	r3, [pc, #136]	; (8013a7c <tcp_receive+0x5f0>)
 80139f4:	f240 5294 	movw	r2, #1428	; 0x594
 80139f8:	4921      	ldr	r1, [pc, #132]	; (8013a80 <tcp_receive+0x5f4>)
 80139fa:	4822      	ldr	r0, [pc, #136]	; (8013a84 <tcp_receive+0x5f8>)
 80139fc:	f005 fb26 	bl	801904c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8013a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a02:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8013a06:	4293      	cmp	r3, r2
 8013a08:	d906      	bls.n	8013a18 <tcp_receive+0x58c>
 8013a0a:	4b1c      	ldr	r3, [pc, #112]	; (8013a7c <tcp_receive+0x5f0>)
 8013a0c:	f240 5295 	movw	r2, #1429	; 0x595
 8013a10:	491d      	ldr	r1, [pc, #116]	; (8013a88 <tcp_receive+0x5fc>)
 8013a12:	481c      	ldr	r0, [pc, #112]	; (8013a84 <tcp_receive+0x5f8>)
 8013a14:	f005 fb1a 	bl	801904c <iprintf>
      off = (u16_t)off32;
 8013a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a1a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8013a1e:	4b16      	ldr	r3, [pc, #88]	; (8013a78 <tcp_receive+0x5ec>)
 8013a20:	685b      	ldr	r3, [r3, #4]
 8013a22:	891b      	ldrh	r3, [r3, #8]
 8013a24:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013a28:	429a      	cmp	r2, r3
 8013a2a:	d906      	bls.n	8013a3a <tcp_receive+0x5ae>
 8013a2c:	4b13      	ldr	r3, [pc, #76]	; (8013a7c <tcp_receive+0x5f0>)
 8013a2e:	f240 5297 	movw	r2, #1431	; 0x597
 8013a32:	4916      	ldr	r1, [pc, #88]	; (8013a8c <tcp_receive+0x600>)
 8013a34:	4813      	ldr	r0, [pc, #76]	; (8013a84 <tcp_receive+0x5f8>)
 8013a36:	f005 fb09 	bl	801904c <iprintf>
      inseg.len -= off;
 8013a3a:	4b0f      	ldr	r3, [pc, #60]	; (8013a78 <tcp_receive+0x5ec>)
 8013a3c:	891a      	ldrh	r2, [r3, #8]
 8013a3e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013a42:	1ad3      	subs	r3, r2, r3
 8013a44:	b29a      	uxth	r2, r3
 8013a46:	4b0c      	ldr	r3, [pc, #48]	; (8013a78 <tcp_receive+0x5ec>)
 8013a48:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8013a4a:	4b0b      	ldr	r3, [pc, #44]	; (8013a78 <tcp_receive+0x5ec>)
 8013a4c:	685b      	ldr	r3, [r3, #4]
 8013a4e:	891a      	ldrh	r2, [r3, #8]
 8013a50:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013a54:	1ad3      	subs	r3, r2, r3
 8013a56:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8013a58:	e02a      	b.n	8013ab0 <tcp_receive+0x624>
 8013a5a:	bf00      	nop
 8013a5c:	0801cc58 	.word	0x0801cc58
 8013a60:	0801cc60 	.word	0x0801cc60
 8013a64:	20008038 	.word	0x20008038
 8013a68:	20008034 	.word	0x20008034
 8013a6c:	20007ff8 	.word	0x20007ff8
 8013a70:	2000803a 	.word	0x2000803a
 8013a74:	20008030 	.word	0x20008030
 8013a78:	20008010 	.word	0x20008010
 8013a7c:	0801c8f0 	.word	0x0801c8f0
 8013a80:	0801cc68 	.word	0x0801cc68
 8013a84:	0801c93c 	.word	0x0801c93c
 8013a88:	0801cc78 	.word	0x0801cc78
 8013a8c:	0801cc88 	.word	0x0801cc88
        off -= p->len;
 8013a90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013a92:	895b      	ldrh	r3, [r3, #10]
 8013a94:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013a98:	1ad3      	subs	r3, r2, r3
 8013a9a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8013a9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013aa0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013aa2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8013aa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013aa6:	2200      	movs	r2, #0
 8013aa8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8013aaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013aac:	681b      	ldr	r3, [r3, #0]
 8013aae:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8013ab0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013ab2:	895b      	ldrh	r3, [r3, #10]
 8013ab4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013ab8:	429a      	cmp	r2, r3
 8013aba:	d8e9      	bhi.n	8013a90 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8013abc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013ac0:	4619      	mov	r1, r3
 8013ac2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8013ac4:	f7fc fb7c 	bl	80101c0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013acc:	4a91      	ldr	r2, [pc, #580]	; (8013d14 <tcp_receive+0x888>)
 8013ace:	6013      	str	r3, [r2, #0]
 8013ad0:	4b91      	ldr	r3, [pc, #580]	; (8013d18 <tcp_receive+0x88c>)
 8013ad2:	68db      	ldr	r3, [r3, #12]
 8013ad4:	4a8f      	ldr	r2, [pc, #572]	; (8013d14 <tcp_receive+0x888>)
 8013ad6:	6812      	ldr	r2, [r2, #0]
 8013ad8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8013ada:	e00d      	b.n	8013af8 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8013adc:	4b8d      	ldr	r3, [pc, #564]	; (8013d14 <tcp_receive+0x888>)
 8013ade:	681a      	ldr	r2, [r3, #0]
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ae4:	1ad3      	subs	r3, r2, r3
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	da06      	bge.n	8013af8 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	8b5b      	ldrh	r3, [r3, #26]
 8013aee:	f043 0302 	orr.w	r3, r3, #2
 8013af2:	b29a      	uxth	r2, r3
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013af8:	4b86      	ldr	r3, [pc, #536]	; (8013d14 <tcp_receive+0x888>)
 8013afa:	681a      	ldr	r2, [r3, #0]
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b00:	1ad3      	subs	r3, r2, r3
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	f2c0 842a 	blt.w	801435c <tcp_receive+0xed0>
 8013b08:	4b82      	ldr	r3, [pc, #520]	; (8013d14 <tcp_receive+0x888>)
 8013b0a:	681a      	ldr	r2, [r3, #0]
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b10:	6879      	ldr	r1, [r7, #4]
 8013b12:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013b14:	440b      	add	r3, r1
 8013b16:	1ad3      	subs	r3, r2, r3
 8013b18:	3301      	adds	r3, #1
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	f300 841e 	bgt.w	801435c <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013b24:	4b7b      	ldr	r3, [pc, #492]	; (8013d14 <tcp_receive+0x888>)
 8013b26:	681b      	ldr	r3, [r3, #0]
 8013b28:	429a      	cmp	r2, r3
 8013b2a:	f040 829a 	bne.w	8014062 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8013b2e:	4b7a      	ldr	r3, [pc, #488]	; (8013d18 <tcp_receive+0x88c>)
 8013b30:	891c      	ldrh	r4, [r3, #8]
 8013b32:	4b79      	ldr	r3, [pc, #484]	; (8013d18 <tcp_receive+0x88c>)
 8013b34:	68db      	ldr	r3, [r3, #12]
 8013b36:	899b      	ldrh	r3, [r3, #12]
 8013b38:	b29b      	uxth	r3, r3
 8013b3a:	4618      	mov	r0, r3
 8013b3c:	f7fa ffd0 	bl	800eae0 <lwip_htons>
 8013b40:	4603      	mov	r3, r0
 8013b42:	b2db      	uxtb	r3, r3
 8013b44:	f003 0303 	and.w	r3, r3, #3
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d001      	beq.n	8013b50 <tcp_receive+0x6c4>
 8013b4c:	2301      	movs	r3, #1
 8013b4e:	e000      	b.n	8013b52 <tcp_receive+0x6c6>
 8013b50:	2300      	movs	r3, #0
 8013b52:	4423      	add	r3, r4
 8013b54:	b29a      	uxth	r2, r3
 8013b56:	4b71      	ldr	r3, [pc, #452]	; (8013d1c <tcp_receive+0x890>)
 8013b58:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013b5e:	4b6f      	ldr	r3, [pc, #444]	; (8013d1c <tcp_receive+0x890>)
 8013b60:	881b      	ldrh	r3, [r3, #0]
 8013b62:	429a      	cmp	r2, r3
 8013b64:	d275      	bcs.n	8013c52 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013b66:	4b6c      	ldr	r3, [pc, #432]	; (8013d18 <tcp_receive+0x88c>)
 8013b68:	68db      	ldr	r3, [r3, #12]
 8013b6a:	899b      	ldrh	r3, [r3, #12]
 8013b6c:	b29b      	uxth	r3, r3
 8013b6e:	4618      	mov	r0, r3
 8013b70:	f7fa ffb6 	bl	800eae0 <lwip_htons>
 8013b74:	4603      	mov	r3, r0
 8013b76:	b2db      	uxtb	r3, r3
 8013b78:	f003 0301 	and.w	r3, r3, #1
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	d01f      	beq.n	8013bc0 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8013b80:	4b65      	ldr	r3, [pc, #404]	; (8013d18 <tcp_receive+0x88c>)
 8013b82:	68db      	ldr	r3, [r3, #12]
 8013b84:	899b      	ldrh	r3, [r3, #12]
 8013b86:	b29b      	uxth	r3, r3
 8013b88:	b21b      	sxth	r3, r3
 8013b8a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013b8e:	b21c      	sxth	r4, r3
 8013b90:	4b61      	ldr	r3, [pc, #388]	; (8013d18 <tcp_receive+0x88c>)
 8013b92:	68db      	ldr	r3, [r3, #12]
 8013b94:	899b      	ldrh	r3, [r3, #12]
 8013b96:	b29b      	uxth	r3, r3
 8013b98:	4618      	mov	r0, r3
 8013b9a:	f7fa ffa1 	bl	800eae0 <lwip_htons>
 8013b9e:	4603      	mov	r3, r0
 8013ba0:	b2db      	uxtb	r3, r3
 8013ba2:	b29b      	uxth	r3, r3
 8013ba4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8013ba8:	b29b      	uxth	r3, r3
 8013baa:	4618      	mov	r0, r3
 8013bac:	f7fa ff98 	bl	800eae0 <lwip_htons>
 8013bb0:	4603      	mov	r3, r0
 8013bb2:	b21b      	sxth	r3, r3
 8013bb4:	4323      	orrs	r3, r4
 8013bb6:	b21a      	sxth	r2, r3
 8013bb8:	4b57      	ldr	r3, [pc, #348]	; (8013d18 <tcp_receive+0x88c>)
 8013bba:	68db      	ldr	r3, [r3, #12]
 8013bbc:	b292      	uxth	r2, r2
 8013bbe:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013bc4:	4b54      	ldr	r3, [pc, #336]	; (8013d18 <tcp_receive+0x88c>)
 8013bc6:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8013bc8:	4b53      	ldr	r3, [pc, #332]	; (8013d18 <tcp_receive+0x88c>)
 8013bca:	68db      	ldr	r3, [r3, #12]
 8013bcc:	899b      	ldrh	r3, [r3, #12]
 8013bce:	b29b      	uxth	r3, r3
 8013bd0:	4618      	mov	r0, r3
 8013bd2:	f7fa ff85 	bl	800eae0 <lwip_htons>
 8013bd6:	4603      	mov	r3, r0
 8013bd8:	b2db      	uxtb	r3, r3
 8013bda:	f003 0302 	and.w	r3, r3, #2
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d005      	beq.n	8013bee <tcp_receive+0x762>
            inseg.len -= 1;
 8013be2:	4b4d      	ldr	r3, [pc, #308]	; (8013d18 <tcp_receive+0x88c>)
 8013be4:	891b      	ldrh	r3, [r3, #8]
 8013be6:	3b01      	subs	r3, #1
 8013be8:	b29a      	uxth	r2, r3
 8013bea:	4b4b      	ldr	r3, [pc, #300]	; (8013d18 <tcp_receive+0x88c>)
 8013bec:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8013bee:	4b4a      	ldr	r3, [pc, #296]	; (8013d18 <tcp_receive+0x88c>)
 8013bf0:	685b      	ldr	r3, [r3, #4]
 8013bf2:	4a49      	ldr	r2, [pc, #292]	; (8013d18 <tcp_receive+0x88c>)
 8013bf4:	8912      	ldrh	r2, [r2, #8]
 8013bf6:	4611      	mov	r1, r2
 8013bf8:	4618      	mov	r0, r3
 8013bfa:	f7fc f9e1 	bl	800ffc0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8013bfe:	4b46      	ldr	r3, [pc, #280]	; (8013d18 <tcp_receive+0x88c>)
 8013c00:	891c      	ldrh	r4, [r3, #8]
 8013c02:	4b45      	ldr	r3, [pc, #276]	; (8013d18 <tcp_receive+0x88c>)
 8013c04:	68db      	ldr	r3, [r3, #12]
 8013c06:	899b      	ldrh	r3, [r3, #12]
 8013c08:	b29b      	uxth	r3, r3
 8013c0a:	4618      	mov	r0, r3
 8013c0c:	f7fa ff68 	bl	800eae0 <lwip_htons>
 8013c10:	4603      	mov	r3, r0
 8013c12:	b2db      	uxtb	r3, r3
 8013c14:	f003 0303 	and.w	r3, r3, #3
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	d001      	beq.n	8013c20 <tcp_receive+0x794>
 8013c1c:	2301      	movs	r3, #1
 8013c1e:	e000      	b.n	8013c22 <tcp_receive+0x796>
 8013c20:	2300      	movs	r3, #0
 8013c22:	4423      	add	r3, r4
 8013c24:	b29a      	uxth	r2, r3
 8013c26:	4b3d      	ldr	r3, [pc, #244]	; (8013d1c <tcp_receive+0x890>)
 8013c28:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8013c2a:	4b3c      	ldr	r3, [pc, #240]	; (8013d1c <tcp_receive+0x890>)
 8013c2c:	881b      	ldrh	r3, [r3, #0]
 8013c2e:	461a      	mov	r2, r3
 8013c30:	4b38      	ldr	r3, [pc, #224]	; (8013d14 <tcp_receive+0x888>)
 8013c32:	681b      	ldr	r3, [r3, #0]
 8013c34:	441a      	add	r2, r3
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c3a:	6879      	ldr	r1, [r7, #4]
 8013c3c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013c3e:	440b      	add	r3, r1
 8013c40:	429a      	cmp	r2, r3
 8013c42:	d006      	beq.n	8013c52 <tcp_receive+0x7c6>
 8013c44:	4b36      	ldr	r3, [pc, #216]	; (8013d20 <tcp_receive+0x894>)
 8013c46:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8013c4a:	4936      	ldr	r1, [pc, #216]	; (8013d24 <tcp_receive+0x898>)
 8013c4c:	4836      	ldr	r0, [pc, #216]	; (8013d28 <tcp_receive+0x89c>)
 8013c4e:	f005 f9fd 	bl	801904c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	f000 80e7 	beq.w	8013e2a <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013c5c:	4b2e      	ldr	r3, [pc, #184]	; (8013d18 <tcp_receive+0x88c>)
 8013c5e:	68db      	ldr	r3, [r3, #12]
 8013c60:	899b      	ldrh	r3, [r3, #12]
 8013c62:	b29b      	uxth	r3, r3
 8013c64:	4618      	mov	r0, r3
 8013c66:	f7fa ff3b 	bl	800eae0 <lwip_htons>
 8013c6a:	4603      	mov	r3, r0
 8013c6c:	b2db      	uxtb	r3, r3
 8013c6e:	f003 0301 	and.w	r3, r3, #1
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	d010      	beq.n	8013c98 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8013c76:	e00a      	b.n	8013c8e <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013c7c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013c82:	681a      	ldr	r2, [r3, #0]
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8013c88:	68f8      	ldr	r0, [r7, #12]
 8013c8a:	f7fd fd92 	bl	80117b2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	d1f0      	bne.n	8013c78 <tcp_receive+0x7ec>
 8013c96:	e0c8      	b.n	8013e2a <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8013c9e:	e052      	b.n	8013d46 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8013ca0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013ca2:	68db      	ldr	r3, [r3, #12]
 8013ca4:	899b      	ldrh	r3, [r3, #12]
 8013ca6:	b29b      	uxth	r3, r3
 8013ca8:	4618      	mov	r0, r3
 8013caa:	f7fa ff19 	bl	800eae0 <lwip_htons>
 8013cae:	4603      	mov	r3, r0
 8013cb0:	b2db      	uxtb	r3, r3
 8013cb2:	f003 0301 	and.w	r3, r3, #1
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d03d      	beq.n	8013d36 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8013cba:	4b17      	ldr	r3, [pc, #92]	; (8013d18 <tcp_receive+0x88c>)
 8013cbc:	68db      	ldr	r3, [r3, #12]
 8013cbe:	899b      	ldrh	r3, [r3, #12]
 8013cc0:	b29b      	uxth	r3, r3
 8013cc2:	4618      	mov	r0, r3
 8013cc4:	f7fa ff0c 	bl	800eae0 <lwip_htons>
 8013cc8:	4603      	mov	r3, r0
 8013cca:	b2db      	uxtb	r3, r3
 8013ccc:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d130      	bne.n	8013d36 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8013cd4:	4b10      	ldr	r3, [pc, #64]	; (8013d18 <tcp_receive+0x88c>)
 8013cd6:	68db      	ldr	r3, [r3, #12]
 8013cd8:	899b      	ldrh	r3, [r3, #12]
 8013cda:	b29c      	uxth	r4, r3
 8013cdc:	2001      	movs	r0, #1
 8013cde:	f7fa feff 	bl	800eae0 <lwip_htons>
 8013ce2:	4603      	mov	r3, r0
 8013ce4:	461a      	mov	r2, r3
 8013ce6:	4b0c      	ldr	r3, [pc, #48]	; (8013d18 <tcp_receive+0x88c>)
 8013ce8:	68db      	ldr	r3, [r3, #12]
 8013cea:	4322      	orrs	r2, r4
 8013cec:	b292      	uxth	r2, r2
 8013cee:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8013cf0:	4b09      	ldr	r3, [pc, #36]	; (8013d18 <tcp_receive+0x88c>)
 8013cf2:	891c      	ldrh	r4, [r3, #8]
 8013cf4:	4b08      	ldr	r3, [pc, #32]	; (8013d18 <tcp_receive+0x88c>)
 8013cf6:	68db      	ldr	r3, [r3, #12]
 8013cf8:	899b      	ldrh	r3, [r3, #12]
 8013cfa:	b29b      	uxth	r3, r3
 8013cfc:	4618      	mov	r0, r3
 8013cfe:	f7fa feef 	bl	800eae0 <lwip_htons>
 8013d02:	4603      	mov	r3, r0
 8013d04:	b2db      	uxtb	r3, r3
 8013d06:	f003 0303 	and.w	r3, r3, #3
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	d00e      	beq.n	8013d2c <tcp_receive+0x8a0>
 8013d0e:	2301      	movs	r3, #1
 8013d10:	e00d      	b.n	8013d2e <tcp_receive+0x8a2>
 8013d12:	bf00      	nop
 8013d14:	20008030 	.word	0x20008030
 8013d18:	20008010 	.word	0x20008010
 8013d1c:	2000803a 	.word	0x2000803a
 8013d20:	0801c8f0 	.word	0x0801c8f0
 8013d24:	0801cc98 	.word	0x0801cc98
 8013d28:	0801c93c 	.word	0x0801c93c
 8013d2c:	2300      	movs	r3, #0
 8013d2e:	4423      	add	r3, r4
 8013d30:	b29a      	uxth	r2, r3
 8013d32:	4b98      	ldr	r3, [pc, #608]	; (8013f94 <tcp_receive+0xb08>)
 8013d34:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8013d36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013d38:	613b      	str	r3, [r7, #16]
              next = next->next;
 8013d3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013d3c:	681b      	ldr	r3, [r3, #0]
 8013d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8013d40:	6938      	ldr	r0, [r7, #16]
 8013d42:	f7fd fd36 	bl	80117b2 <tcp_seg_free>
            while (next &&
 8013d46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	d00e      	beq.n	8013d6a <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8013d4c:	4b91      	ldr	r3, [pc, #580]	; (8013f94 <tcp_receive+0xb08>)
 8013d4e:	881b      	ldrh	r3, [r3, #0]
 8013d50:	461a      	mov	r2, r3
 8013d52:	4b91      	ldr	r3, [pc, #580]	; (8013f98 <tcp_receive+0xb0c>)
 8013d54:	681b      	ldr	r3, [r3, #0]
 8013d56:	441a      	add	r2, r3
 8013d58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013d5a:	68db      	ldr	r3, [r3, #12]
 8013d5c:	685b      	ldr	r3, [r3, #4]
 8013d5e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013d60:	8909      	ldrh	r1, [r1, #8]
 8013d62:	440b      	add	r3, r1
 8013d64:	1ad3      	subs	r3, r2, r3
            while (next &&
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	da9a      	bge.n	8013ca0 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8013d6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d059      	beq.n	8013e24 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8013d70:	4b88      	ldr	r3, [pc, #544]	; (8013f94 <tcp_receive+0xb08>)
 8013d72:	881b      	ldrh	r3, [r3, #0]
 8013d74:	461a      	mov	r2, r3
 8013d76:	4b88      	ldr	r3, [pc, #544]	; (8013f98 <tcp_receive+0xb0c>)
 8013d78:	681b      	ldr	r3, [r3, #0]
 8013d7a:	441a      	add	r2, r3
 8013d7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013d7e:	68db      	ldr	r3, [r3, #12]
 8013d80:	685b      	ldr	r3, [r3, #4]
 8013d82:	1ad3      	subs	r3, r2, r3
            if (next &&
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	dd4d      	ble.n	8013e24 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8013d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013d8a:	68db      	ldr	r3, [r3, #12]
 8013d8c:	685b      	ldr	r3, [r3, #4]
 8013d8e:	b29a      	uxth	r2, r3
 8013d90:	4b81      	ldr	r3, [pc, #516]	; (8013f98 <tcp_receive+0xb0c>)
 8013d92:	681b      	ldr	r3, [r3, #0]
 8013d94:	b29b      	uxth	r3, r3
 8013d96:	1ad3      	subs	r3, r2, r3
 8013d98:	b29a      	uxth	r2, r3
 8013d9a:	4b80      	ldr	r3, [pc, #512]	; (8013f9c <tcp_receive+0xb10>)
 8013d9c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8013d9e:	4b7f      	ldr	r3, [pc, #508]	; (8013f9c <tcp_receive+0xb10>)
 8013da0:	68db      	ldr	r3, [r3, #12]
 8013da2:	899b      	ldrh	r3, [r3, #12]
 8013da4:	b29b      	uxth	r3, r3
 8013da6:	4618      	mov	r0, r3
 8013da8:	f7fa fe9a 	bl	800eae0 <lwip_htons>
 8013dac:	4603      	mov	r3, r0
 8013dae:	b2db      	uxtb	r3, r3
 8013db0:	f003 0302 	and.w	r3, r3, #2
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d005      	beq.n	8013dc4 <tcp_receive+0x938>
                inseg.len -= 1;
 8013db8:	4b78      	ldr	r3, [pc, #480]	; (8013f9c <tcp_receive+0xb10>)
 8013dba:	891b      	ldrh	r3, [r3, #8]
 8013dbc:	3b01      	subs	r3, #1
 8013dbe:	b29a      	uxth	r2, r3
 8013dc0:	4b76      	ldr	r3, [pc, #472]	; (8013f9c <tcp_receive+0xb10>)
 8013dc2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8013dc4:	4b75      	ldr	r3, [pc, #468]	; (8013f9c <tcp_receive+0xb10>)
 8013dc6:	685b      	ldr	r3, [r3, #4]
 8013dc8:	4a74      	ldr	r2, [pc, #464]	; (8013f9c <tcp_receive+0xb10>)
 8013dca:	8912      	ldrh	r2, [r2, #8]
 8013dcc:	4611      	mov	r1, r2
 8013dce:	4618      	mov	r0, r3
 8013dd0:	f7fc f8f6 	bl	800ffc0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8013dd4:	4b71      	ldr	r3, [pc, #452]	; (8013f9c <tcp_receive+0xb10>)
 8013dd6:	891c      	ldrh	r4, [r3, #8]
 8013dd8:	4b70      	ldr	r3, [pc, #448]	; (8013f9c <tcp_receive+0xb10>)
 8013dda:	68db      	ldr	r3, [r3, #12]
 8013ddc:	899b      	ldrh	r3, [r3, #12]
 8013dde:	b29b      	uxth	r3, r3
 8013de0:	4618      	mov	r0, r3
 8013de2:	f7fa fe7d 	bl	800eae0 <lwip_htons>
 8013de6:	4603      	mov	r3, r0
 8013de8:	b2db      	uxtb	r3, r3
 8013dea:	f003 0303 	and.w	r3, r3, #3
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d001      	beq.n	8013df6 <tcp_receive+0x96a>
 8013df2:	2301      	movs	r3, #1
 8013df4:	e000      	b.n	8013df8 <tcp_receive+0x96c>
 8013df6:	2300      	movs	r3, #0
 8013df8:	4423      	add	r3, r4
 8013dfa:	b29a      	uxth	r2, r3
 8013dfc:	4b65      	ldr	r3, [pc, #404]	; (8013f94 <tcp_receive+0xb08>)
 8013dfe:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8013e00:	4b64      	ldr	r3, [pc, #400]	; (8013f94 <tcp_receive+0xb08>)
 8013e02:	881b      	ldrh	r3, [r3, #0]
 8013e04:	461a      	mov	r2, r3
 8013e06:	4b64      	ldr	r3, [pc, #400]	; (8013f98 <tcp_receive+0xb0c>)
 8013e08:	681b      	ldr	r3, [r3, #0]
 8013e0a:	441a      	add	r2, r3
 8013e0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e0e:	68db      	ldr	r3, [r3, #12]
 8013e10:	685b      	ldr	r3, [r3, #4]
 8013e12:	429a      	cmp	r2, r3
 8013e14:	d006      	beq.n	8013e24 <tcp_receive+0x998>
 8013e16:	4b62      	ldr	r3, [pc, #392]	; (8013fa0 <tcp_receive+0xb14>)
 8013e18:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8013e1c:	4961      	ldr	r1, [pc, #388]	; (8013fa4 <tcp_receive+0xb18>)
 8013e1e:	4862      	ldr	r0, [pc, #392]	; (8013fa8 <tcp_receive+0xb1c>)
 8013e20:	f005 f914 	bl	801904c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013e28:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8013e2a:	4b5a      	ldr	r3, [pc, #360]	; (8013f94 <tcp_receive+0xb08>)
 8013e2c:	881b      	ldrh	r3, [r3, #0]
 8013e2e:	461a      	mov	r2, r3
 8013e30:	4b59      	ldr	r3, [pc, #356]	; (8013f98 <tcp_receive+0xb0c>)
 8013e32:	681b      	ldr	r3, [r3, #0]
 8013e34:	441a      	add	r2, r3
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013e3e:	4b55      	ldr	r3, [pc, #340]	; (8013f94 <tcp_receive+0xb08>)
 8013e40:	881b      	ldrh	r3, [r3, #0]
 8013e42:	429a      	cmp	r2, r3
 8013e44:	d206      	bcs.n	8013e54 <tcp_receive+0x9c8>
 8013e46:	4b56      	ldr	r3, [pc, #344]	; (8013fa0 <tcp_receive+0xb14>)
 8013e48:	f240 6207 	movw	r2, #1543	; 0x607
 8013e4c:	4957      	ldr	r1, [pc, #348]	; (8013fac <tcp_receive+0xb20>)
 8013e4e:	4856      	ldr	r0, [pc, #344]	; (8013fa8 <tcp_receive+0xb1c>)
 8013e50:	f005 f8fc 	bl	801904c <iprintf>
        pcb->rcv_wnd -= tcplen;
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013e58:	4b4e      	ldr	r3, [pc, #312]	; (8013f94 <tcp_receive+0xb08>)
 8013e5a:	881b      	ldrh	r3, [r3, #0]
 8013e5c:	1ad3      	subs	r3, r2, r3
 8013e5e:	b29a      	uxth	r2, r3
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8013e64:	6878      	ldr	r0, [r7, #4]
 8013e66:	f7fc ffc5 	bl	8010df4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8013e6a:	4b4c      	ldr	r3, [pc, #304]	; (8013f9c <tcp_receive+0xb10>)
 8013e6c:	685b      	ldr	r3, [r3, #4]
 8013e6e:	891b      	ldrh	r3, [r3, #8]
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d006      	beq.n	8013e82 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8013e74:	4b49      	ldr	r3, [pc, #292]	; (8013f9c <tcp_receive+0xb10>)
 8013e76:	685b      	ldr	r3, [r3, #4]
 8013e78:	4a4d      	ldr	r2, [pc, #308]	; (8013fb0 <tcp_receive+0xb24>)
 8013e7a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8013e7c:	4b47      	ldr	r3, [pc, #284]	; (8013f9c <tcp_receive+0xb10>)
 8013e7e:	2200      	movs	r2, #0
 8013e80:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013e82:	4b46      	ldr	r3, [pc, #280]	; (8013f9c <tcp_receive+0xb10>)
 8013e84:	68db      	ldr	r3, [r3, #12]
 8013e86:	899b      	ldrh	r3, [r3, #12]
 8013e88:	b29b      	uxth	r3, r3
 8013e8a:	4618      	mov	r0, r3
 8013e8c:	f7fa fe28 	bl	800eae0 <lwip_htons>
 8013e90:	4603      	mov	r3, r0
 8013e92:	b2db      	uxtb	r3, r3
 8013e94:	f003 0301 	and.w	r3, r3, #1
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	f000 80b8 	beq.w	801400e <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8013e9e:	4b45      	ldr	r3, [pc, #276]	; (8013fb4 <tcp_receive+0xb28>)
 8013ea0:	781b      	ldrb	r3, [r3, #0]
 8013ea2:	f043 0320 	orr.w	r3, r3, #32
 8013ea6:	b2da      	uxtb	r2, r3
 8013ea8:	4b42      	ldr	r3, [pc, #264]	; (8013fb4 <tcp_receive+0xb28>)
 8013eaa:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8013eac:	e0af      	b.n	801400e <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013eb2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013eb8:	68db      	ldr	r3, [r3, #12]
 8013eba:	685b      	ldr	r3, [r3, #4]
 8013ebc:	4a36      	ldr	r2, [pc, #216]	; (8013f98 <tcp_receive+0xb0c>)
 8013ebe:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8013ec0:	68bb      	ldr	r3, [r7, #8]
 8013ec2:	891b      	ldrh	r3, [r3, #8]
 8013ec4:	461c      	mov	r4, r3
 8013ec6:	68bb      	ldr	r3, [r7, #8]
 8013ec8:	68db      	ldr	r3, [r3, #12]
 8013eca:	899b      	ldrh	r3, [r3, #12]
 8013ecc:	b29b      	uxth	r3, r3
 8013ece:	4618      	mov	r0, r3
 8013ed0:	f7fa fe06 	bl	800eae0 <lwip_htons>
 8013ed4:	4603      	mov	r3, r0
 8013ed6:	b2db      	uxtb	r3, r3
 8013ed8:	f003 0303 	and.w	r3, r3, #3
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d001      	beq.n	8013ee4 <tcp_receive+0xa58>
 8013ee0:	2301      	movs	r3, #1
 8013ee2:	e000      	b.n	8013ee6 <tcp_receive+0xa5a>
 8013ee4:	2300      	movs	r3, #0
 8013ee6:	191a      	adds	r2, r3, r4
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013eec:	441a      	add	r2, r3
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013ef6:	461c      	mov	r4, r3
 8013ef8:	68bb      	ldr	r3, [r7, #8]
 8013efa:	891b      	ldrh	r3, [r3, #8]
 8013efc:	461d      	mov	r5, r3
 8013efe:	68bb      	ldr	r3, [r7, #8]
 8013f00:	68db      	ldr	r3, [r3, #12]
 8013f02:	899b      	ldrh	r3, [r3, #12]
 8013f04:	b29b      	uxth	r3, r3
 8013f06:	4618      	mov	r0, r3
 8013f08:	f7fa fdea 	bl	800eae0 <lwip_htons>
 8013f0c:	4603      	mov	r3, r0
 8013f0e:	b2db      	uxtb	r3, r3
 8013f10:	f003 0303 	and.w	r3, r3, #3
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d001      	beq.n	8013f1c <tcp_receive+0xa90>
 8013f18:	2301      	movs	r3, #1
 8013f1a:	e000      	b.n	8013f1e <tcp_receive+0xa92>
 8013f1c:	2300      	movs	r3, #0
 8013f1e:	442b      	add	r3, r5
 8013f20:	429c      	cmp	r4, r3
 8013f22:	d206      	bcs.n	8013f32 <tcp_receive+0xaa6>
 8013f24:	4b1e      	ldr	r3, [pc, #120]	; (8013fa0 <tcp_receive+0xb14>)
 8013f26:	f240 622b 	movw	r2, #1579	; 0x62b
 8013f2a:	4923      	ldr	r1, [pc, #140]	; (8013fb8 <tcp_receive+0xb2c>)
 8013f2c:	481e      	ldr	r0, [pc, #120]	; (8013fa8 <tcp_receive+0xb1c>)
 8013f2e:	f005 f88d 	bl	801904c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8013f32:	68bb      	ldr	r3, [r7, #8]
 8013f34:	891b      	ldrh	r3, [r3, #8]
 8013f36:	461c      	mov	r4, r3
 8013f38:	68bb      	ldr	r3, [r7, #8]
 8013f3a:	68db      	ldr	r3, [r3, #12]
 8013f3c:	899b      	ldrh	r3, [r3, #12]
 8013f3e:	b29b      	uxth	r3, r3
 8013f40:	4618      	mov	r0, r3
 8013f42:	f7fa fdcd 	bl	800eae0 <lwip_htons>
 8013f46:	4603      	mov	r3, r0
 8013f48:	b2db      	uxtb	r3, r3
 8013f4a:	f003 0303 	and.w	r3, r3, #3
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d001      	beq.n	8013f56 <tcp_receive+0xaca>
 8013f52:	2301      	movs	r3, #1
 8013f54:	e000      	b.n	8013f58 <tcp_receive+0xacc>
 8013f56:	2300      	movs	r3, #0
 8013f58:	1919      	adds	r1, r3, r4
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013f5e:	b28b      	uxth	r3, r1
 8013f60:	1ad3      	subs	r3, r2, r3
 8013f62:	b29a      	uxth	r2, r3
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8013f68:	6878      	ldr	r0, [r7, #4]
 8013f6a:	f7fc ff43 	bl	8010df4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8013f6e:	68bb      	ldr	r3, [r7, #8]
 8013f70:	685b      	ldr	r3, [r3, #4]
 8013f72:	891b      	ldrh	r3, [r3, #8]
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d028      	beq.n	8013fca <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8013f78:	4b0d      	ldr	r3, [pc, #52]	; (8013fb0 <tcp_receive+0xb24>)
 8013f7a:	681b      	ldr	r3, [r3, #0]
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	d01d      	beq.n	8013fbc <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8013f80:	4b0b      	ldr	r3, [pc, #44]	; (8013fb0 <tcp_receive+0xb24>)
 8013f82:	681a      	ldr	r2, [r3, #0]
 8013f84:	68bb      	ldr	r3, [r7, #8]
 8013f86:	685b      	ldr	r3, [r3, #4]
 8013f88:	4619      	mov	r1, r3
 8013f8a:	4610      	mov	r0, r2
 8013f8c:	f7fc fa60 	bl	8010450 <pbuf_cat>
 8013f90:	e018      	b.n	8013fc4 <tcp_receive+0xb38>
 8013f92:	bf00      	nop
 8013f94:	2000803a 	.word	0x2000803a
 8013f98:	20008030 	.word	0x20008030
 8013f9c:	20008010 	.word	0x20008010
 8013fa0:	0801c8f0 	.word	0x0801c8f0
 8013fa4:	0801ccd0 	.word	0x0801ccd0
 8013fa8:	0801c93c 	.word	0x0801c93c
 8013fac:	0801cd0c 	.word	0x0801cd0c
 8013fb0:	20008040 	.word	0x20008040
 8013fb4:	2000803d 	.word	0x2000803d
 8013fb8:	0801cd2c 	.word	0x0801cd2c
            } else {
              recv_data = cseg->p;
 8013fbc:	68bb      	ldr	r3, [r7, #8]
 8013fbe:	685b      	ldr	r3, [r3, #4]
 8013fc0:	4a70      	ldr	r2, [pc, #448]	; (8014184 <tcp_receive+0xcf8>)
 8013fc2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8013fc4:	68bb      	ldr	r3, [r7, #8]
 8013fc6:	2200      	movs	r2, #0
 8013fc8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8013fca:	68bb      	ldr	r3, [r7, #8]
 8013fcc:	68db      	ldr	r3, [r3, #12]
 8013fce:	899b      	ldrh	r3, [r3, #12]
 8013fd0:	b29b      	uxth	r3, r3
 8013fd2:	4618      	mov	r0, r3
 8013fd4:	f7fa fd84 	bl	800eae0 <lwip_htons>
 8013fd8:	4603      	mov	r3, r0
 8013fda:	b2db      	uxtb	r3, r3
 8013fdc:	f003 0301 	and.w	r3, r3, #1
 8013fe0:	2b00      	cmp	r3, #0
 8013fe2:	d00d      	beq.n	8014000 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8013fe4:	4b68      	ldr	r3, [pc, #416]	; (8014188 <tcp_receive+0xcfc>)
 8013fe6:	781b      	ldrb	r3, [r3, #0]
 8013fe8:	f043 0320 	orr.w	r3, r3, #32
 8013fec:	b2da      	uxtb	r2, r3
 8013fee:	4b66      	ldr	r3, [pc, #408]	; (8014188 <tcp_receive+0xcfc>)
 8013ff0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	7d1b      	ldrb	r3, [r3, #20]
 8013ff6:	2b04      	cmp	r3, #4
 8013ff8:	d102      	bne.n	8014000 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	2207      	movs	r2, #7
 8013ffe:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8014000:	68bb      	ldr	r3, [r7, #8]
 8014002:	681a      	ldr	r2, [r3, #0]
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8014008:	68b8      	ldr	r0, [r7, #8]
 801400a:	f7fd fbd2 	bl	80117b2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014012:	2b00      	cmp	r3, #0
 8014014:	d008      	beq.n	8014028 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801401a:	68db      	ldr	r3, [r3, #12]
 801401c:	685a      	ldr	r2, [r3, #4]
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8014022:	429a      	cmp	r2, r3
 8014024:	f43f af43 	beq.w	8013eae <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	8b5b      	ldrh	r3, [r3, #26]
 801402c:	f003 0301 	and.w	r3, r3, #1
 8014030:	2b00      	cmp	r3, #0
 8014032:	d00e      	beq.n	8014052 <tcp_receive+0xbc6>
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	8b5b      	ldrh	r3, [r3, #26]
 8014038:	f023 0301 	bic.w	r3, r3, #1
 801403c:	b29a      	uxth	r2, r3
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	835a      	strh	r2, [r3, #26]
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	8b5b      	ldrh	r3, [r3, #26]
 8014046:	f043 0302 	orr.w	r3, r3, #2
 801404a:	b29a      	uxth	r2, r3
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014050:	e188      	b.n	8014364 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	8b5b      	ldrh	r3, [r3, #26]
 8014056:	f043 0301 	orr.w	r3, r3, #1
 801405a:	b29a      	uxth	r2, r3
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014060:	e180      	b.n	8014364 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014066:	2b00      	cmp	r3, #0
 8014068:	d106      	bne.n	8014078 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801406a:	4848      	ldr	r0, [pc, #288]	; (801418c <tcp_receive+0xd00>)
 801406c:	f7fd fbba 	bl	80117e4 <tcp_seg_copy>
 8014070:	4602      	mov	r2, r0
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	675a      	str	r2, [r3, #116]	; 0x74
 8014076:	e16d      	b.n	8014354 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8014078:	2300      	movs	r3, #0
 801407a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014080:	63bb      	str	r3, [r7, #56]	; 0x38
 8014082:	e157      	b.n	8014334 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8014084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014086:	68db      	ldr	r3, [r3, #12]
 8014088:	685a      	ldr	r2, [r3, #4]
 801408a:	4b41      	ldr	r3, [pc, #260]	; (8014190 <tcp_receive+0xd04>)
 801408c:	681b      	ldr	r3, [r3, #0]
 801408e:	429a      	cmp	r2, r3
 8014090:	d11d      	bne.n	80140ce <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8014092:	4b3e      	ldr	r3, [pc, #248]	; (801418c <tcp_receive+0xd00>)
 8014094:	891a      	ldrh	r2, [r3, #8]
 8014096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014098:	891b      	ldrh	r3, [r3, #8]
 801409a:	429a      	cmp	r2, r3
 801409c:	f240 814f 	bls.w	801433e <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80140a0:	483a      	ldr	r0, [pc, #232]	; (801418c <tcp_receive+0xd00>)
 80140a2:	f7fd fb9f 	bl	80117e4 <tcp_seg_copy>
 80140a6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80140a8:	697b      	ldr	r3, [r7, #20]
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	f000 8149 	beq.w	8014342 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 80140b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d003      	beq.n	80140be <tcp_receive+0xc32>
                    prev->next = cseg;
 80140b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140b8:	697a      	ldr	r2, [r7, #20]
 80140ba:	601a      	str	r2, [r3, #0]
 80140bc:	e002      	b.n	80140c4 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	697a      	ldr	r2, [r7, #20]
 80140c2:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80140c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80140c6:	6978      	ldr	r0, [r7, #20]
 80140c8:	f7ff f8dc 	bl	8013284 <tcp_oos_insert_segment>
                }
                break;
 80140cc:	e139      	b.n	8014342 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80140ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	d117      	bne.n	8014104 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80140d4:	4b2e      	ldr	r3, [pc, #184]	; (8014190 <tcp_receive+0xd04>)
 80140d6:	681a      	ldr	r2, [r3, #0]
 80140d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140da:	68db      	ldr	r3, [r3, #12]
 80140dc:	685b      	ldr	r3, [r3, #4]
 80140de:	1ad3      	subs	r3, r2, r3
 80140e0:	2b00      	cmp	r3, #0
 80140e2:	da57      	bge.n	8014194 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80140e4:	4829      	ldr	r0, [pc, #164]	; (801418c <tcp_receive+0xd00>)
 80140e6:	f7fd fb7d 	bl	80117e4 <tcp_seg_copy>
 80140ea:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80140ec:	69bb      	ldr	r3, [r7, #24]
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	f000 8129 	beq.w	8014346 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	69ba      	ldr	r2, [r7, #24]
 80140f8:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80140fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80140fc:	69b8      	ldr	r0, [r7, #24]
 80140fe:	f7ff f8c1 	bl	8013284 <tcp_oos_insert_segment>
                  }
                  break;
 8014102:	e120      	b.n	8014346 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8014104:	4b22      	ldr	r3, [pc, #136]	; (8014190 <tcp_receive+0xd04>)
 8014106:	681a      	ldr	r2, [r3, #0]
 8014108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801410a:	68db      	ldr	r3, [r3, #12]
 801410c:	685b      	ldr	r3, [r3, #4]
 801410e:	1ad3      	subs	r3, r2, r3
 8014110:	3b01      	subs	r3, #1
 8014112:	2b00      	cmp	r3, #0
 8014114:	db3e      	blt.n	8014194 <tcp_receive+0xd08>
 8014116:	4b1e      	ldr	r3, [pc, #120]	; (8014190 <tcp_receive+0xd04>)
 8014118:	681a      	ldr	r2, [r3, #0]
 801411a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801411c:	68db      	ldr	r3, [r3, #12]
 801411e:	685b      	ldr	r3, [r3, #4]
 8014120:	1ad3      	subs	r3, r2, r3
 8014122:	3301      	adds	r3, #1
 8014124:	2b00      	cmp	r3, #0
 8014126:	dc35      	bgt.n	8014194 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014128:	4818      	ldr	r0, [pc, #96]	; (801418c <tcp_receive+0xd00>)
 801412a:	f7fd fb5b 	bl	80117e4 <tcp_seg_copy>
 801412e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8014130:	69fb      	ldr	r3, [r7, #28]
 8014132:	2b00      	cmp	r3, #0
 8014134:	f000 8109 	beq.w	801434a <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8014138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801413a:	68db      	ldr	r3, [r3, #12]
 801413c:	685b      	ldr	r3, [r3, #4]
 801413e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014140:	8912      	ldrh	r2, [r2, #8]
 8014142:	441a      	add	r2, r3
 8014144:	4b12      	ldr	r3, [pc, #72]	; (8014190 <tcp_receive+0xd04>)
 8014146:	681b      	ldr	r3, [r3, #0]
 8014148:	1ad3      	subs	r3, r2, r3
 801414a:	2b00      	cmp	r3, #0
 801414c:	dd12      	ble.n	8014174 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801414e:	4b10      	ldr	r3, [pc, #64]	; (8014190 <tcp_receive+0xd04>)
 8014150:	681b      	ldr	r3, [r3, #0]
 8014152:	b29a      	uxth	r2, r3
 8014154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014156:	68db      	ldr	r3, [r3, #12]
 8014158:	685b      	ldr	r3, [r3, #4]
 801415a:	b29b      	uxth	r3, r3
 801415c:	1ad3      	subs	r3, r2, r3
 801415e:	b29a      	uxth	r2, r3
 8014160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014162:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8014164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014166:	685a      	ldr	r2, [r3, #4]
 8014168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801416a:	891b      	ldrh	r3, [r3, #8]
 801416c:	4619      	mov	r1, r3
 801416e:	4610      	mov	r0, r2
 8014170:	f7fb ff26 	bl	800ffc0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8014174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014176:	69fa      	ldr	r2, [r7, #28]
 8014178:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801417a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801417c:	69f8      	ldr	r0, [r7, #28]
 801417e:	f7ff f881 	bl	8013284 <tcp_oos_insert_segment>
                  }
                  break;
 8014182:	e0e2      	b.n	801434a <tcp_receive+0xebe>
 8014184:	20008040 	.word	0x20008040
 8014188:	2000803d 	.word	0x2000803d
 801418c:	20008010 	.word	0x20008010
 8014190:	20008030 	.word	0x20008030
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8014194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014196:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8014198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801419a:	681b      	ldr	r3, [r3, #0]
 801419c:	2b00      	cmp	r3, #0
 801419e:	f040 80c6 	bne.w	801432e <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80141a2:	4b80      	ldr	r3, [pc, #512]	; (80143a4 <tcp_receive+0xf18>)
 80141a4:	681a      	ldr	r2, [r3, #0]
 80141a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141a8:	68db      	ldr	r3, [r3, #12]
 80141aa:	685b      	ldr	r3, [r3, #4]
 80141ac:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80141ae:	2b00      	cmp	r3, #0
 80141b0:	f340 80bd 	ble.w	801432e <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80141b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141b6:	68db      	ldr	r3, [r3, #12]
 80141b8:	899b      	ldrh	r3, [r3, #12]
 80141ba:	b29b      	uxth	r3, r3
 80141bc:	4618      	mov	r0, r3
 80141be:	f7fa fc8f 	bl	800eae0 <lwip_htons>
 80141c2:	4603      	mov	r3, r0
 80141c4:	b2db      	uxtb	r3, r3
 80141c6:	f003 0301 	and.w	r3, r3, #1
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	f040 80bf 	bne.w	801434e <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80141d0:	4875      	ldr	r0, [pc, #468]	; (80143a8 <tcp_receive+0xf1c>)
 80141d2:	f7fd fb07 	bl	80117e4 <tcp_seg_copy>
 80141d6:	4602      	mov	r2, r0
 80141d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141da:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80141dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141de:	681b      	ldr	r3, [r3, #0]
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	f000 80b6 	beq.w	8014352 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80141e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141e8:	68db      	ldr	r3, [r3, #12]
 80141ea:	685b      	ldr	r3, [r3, #4]
 80141ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80141ee:	8912      	ldrh	r2, [r2, #8]
 80141f0:	441a      	add	r2, r3
 80141f2:	4b6c      	ldr	r3, [pc, #432]	; (80143a4 <tcp_receive+0xf18>)
 80141f4:	681b      	ldr	r3, [r3, #0]
 80141f6:	1ad3      	subs	r3, r2, r3
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	dd12      	ble.n	8014222 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80141fc:	4b69      	ldr	r3, [pc, #420]	; (80143a4 <tcp_receive+0xf18>)
 80141fe:	681b      	ldr	r3, [r3, #0]
 8014200:	b29a      	uxth	r2, r3
 8014202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014204:	68db      	ldr	r3, [r3, #12]
 8014206:	685b      	ldr	r3, [r3, #4]
 8014208:	b29b      	uxth	r3, r3
 801420a:	1ad3      	subs	r3, r2, r3
 801420c:	b29a      	uxth	r2, r3
 801420e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014210:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8014212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014214:	685a      	ldr	r2, [r3, #4]
 8014216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014218:	891b      	ldrh	r3, [r3, #8]
 801421a:	4619      	mov	r1, r3
 801421c:	4610      	mov	r0, r2
 801421e:	f7fb fecf 	bl	800ffc0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8014222:	4b62      	ldr	r3, [pc, #392]	; (80143ac <tcp_receive+0xf20>)
 8014224:	881b      	ldrh	r3, [r3, #0]
 8014226:	461a      	mov	r2, r3
 8014228:	4b5e      	ldr	r3, [pc, #376]	; (80143a4 <tcp_receive+0xf18>)
 801422a:	681b      	ldr	r3, [r3, #0]
 801422c:	441a      	add	r2, r3
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014232:	6879      	ldr	r1, [r7, #4]
 8014234:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014236:	440b      	add	r3, r1
 8014238:	1ad3      	subs	r3, r2, r3
 801423a:	2b00      	cmp	r3, #0
 801423c:	f340 8089 	ble.w	8014352 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8014240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014242:	681b      	ldr	r3, [r3, #0]
 8014244:	68db      	ldr	r3, [r3, #12]
 8014246:	899b      	ldrh	r3, [r3, #12]
 8014248:	b29b      	uxth	r3, r3
 801424a:	4618      	mov	r0, r3
 801424c:	f7fa fc48 	bl	800eae0 <lwip_htons>
 8014250:	4603      	mov	r3, r0
 8014252:	b2db      	uxtb	r3, r3
 8014254:	f003 0301 	and.w	r3, r3, #1
 8014258:	2b00      	cmp	r3, #0
 801425a:	d022      	beq.n	80142a2 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801425c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801425e:	681b      	ldr	r3, [r3, #0]
 8014260:	68db      	ldr	r3, [r3, #12]
 8014262:	899b      	ldrh	r3, [r3, #12]
 8014264:	b29b      	uxth	r3, r3
 8014266:	b21b      	sxth	r3, r3
 8014268:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801426c:	b21c      	sxth	r4, r3
 801426e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014270:	681b      	ldr	r3, [r3, #0]
 8014272:	68db      	ldr	r3, [r3, #12]
 8014274:	899b      	ldrh	r3, [r3, #12]
 8014276:	b29b      	uxth	r3, r3
 8014278:	4618      	mov	r0, r3
 801427a:	f7fa fc31 	bl	800eae0 <lwip_htons>
 801427e:	4603      	mov	r3, r0
 8014280:	b2db      	uxtb	r3, r3
 8014282:	b29b      	uxth	r3, r3
 8014284:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8014288:	b29b      	uxth	r3, r3
 801428a:	4618      	mov	r0, r3
 801428c:	f7fa fc28 	bl	800eae0 <lwip_htons>
 8014290:	4603      	mov	r3, r0
 8014292:	b21b      	sxth	r3, r3
 8014294:	4323      	orrs	r3, r4
 8014296:	b21a      	sxth	r2, r3
 8014298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801429a:	681b      	ldr	r3, [r3, #0]
 801429c:	68db      	ldr	r3, [r3, #12]
 801429e:	b292      	uxth	r2, r2
 80142a0:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142a6:	b29a      	uxth	r2, r3
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80142ac:	4413      	add	r3, r2
 80142ae:	b299      	uxth	r1, r3
 80142b0:	4b3c      	ldr	r3, [pc, #240]	; (80143a4 <tcp_receive+0xf18>)
 80142b2:	681b      	ldr	r3, [r3, #0]
 80142b4:	b29a      	uxth	r2, r3
 80142b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142b8:	681b      	ldr	r3, [r3, #0]
 80142ba:	1a8a      	subs	r2, r1, r2
 80142bc:	b292      	uxth	r2, r2
 80142be:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80142c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142c2:	681b      	ldr	r3, [r3, #0]
 80142c4:	685a      	ldr	r2, [r3, #4]
 80142c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142c8:	681b      	ldr	r3, [r3, #0]
 80142ca:	891b      	ldrh	r3, [r3, #8]
 80142cc:	4619      	mov	r1, r3
 80142ce:	4610      	mov	r0, r2
 80142d0:	f7fb fe76 	bl	800ffc0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80142d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142d6:	681b      	ldr	r3, [r3, #0]
 80142d8:	891c      	ldrh	r4, [r3, #8]
 80142da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142dc:	681b      	ldr	r3, [r3, #0]
 80142de:	68db      	ldr	r3, [r3, #12]
 80142e0:	899b      	ldrh	r3, [r3, #12]
 80142e2:	b29b      	uxth	r3, r3
 80142e4:	4618      	mov	r0, r3
 80142e6:	f7fa fbfb 	bl	800eae0 <lwip_htons>
 80142ea:	4603      	mov	r3, r0
 80142ec:	b2db      	uxtb	r3, r3
 80142ee:	f003 0303 	and.w	r3, r3, #3
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	d001      	beq.n	80142fa <tcp_receive+0xe6e>
 80142f6:	2301      	movs	r3, #1
 80142f8:	e000      	b.n	80142fc <tcp_receive+0xe70>
 80142fa:	2300      	movs	r3, #0
 80142fc:	4423      	add	r3, r4
 80142fe:	b29a      	uxth	r2, r3
 8014300:	4b2a      	ldr	r3, [pc, #168]	; (80143ac <tcp_receive+0xf20>)
 8014302:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8014304:	4b29      	ldr	r3, [pc, #164]	; (80143ac <tcp_receive+0xf20>)
 8014306:	881b      	ldrh	r3, [r3, #0]
 8014308:	461a      	mov	r2, r3
 801430a:	4b26      	ldr	r3, [pc, #152]	; (80143a4 <tcp_receive+0xf18>)
 801430c:	681b      	ldr	r3, [r3, #0]
 801430e:	441a      	add	r2, r3
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014314:	6879      	ldr	r1, [r7, #4]
 8014316:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014318:	440b      	add	r3, r1
 801431a:	429a      	cmp	r2, r3
 801431c:	d019      	beq.n	8014352 <tcp_receive+0xec6>
 801431e:	4b24      	ldr	r3, [pc, #144]	; (80143b0 <tcp_receive+0xf24>)
 8014320:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8014324:	4923      	ldr	r1, [pc, #140]	; (80143b4 <tcp_receive+0xf28>)
 8014326:	4824      	ldr	r0, [pc, #144]	; (80143b8 <tcp_receive+0xf2c>)
 8014328:	f004 fe90 	bl	801904c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801432c:	e011      	b.n	8014352 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801432e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014330:	681b      	ldr	r3, [r3, #0]
 8014332:	63bb      	str	r3, [r7, #56]	; 0x38
 8014334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014336:	2b00      	cmp	r3, #0
 8014338:	f47f aea4 	bne.w	8014084 <tcp_receive+0xbf8>
 801433c:	e00a      	b.n	8014354 <tcp_receive+0xec8>
                break;
 801433e:	bf00      	nop
 8014340:	e008      	b.n	8014354 <tcp_receive+0xec8>
                break;
 8014342:	bf00      	nop
 8014344:	e006      	b.n	8014354 <tcp_receive+0xec8>
                  break;
 8014346:	bf00      	nop
 8014348:	e004      	b.n	8014354 <tcp_receive+0xec8>
                  break;
 801434a:	bf00      	nop
 801434c:	e002      	b.n	8014354 <tcp_receive+0xec8>
                  break;
 801434e:	bf00      	nop
 8014350:	e000      	b.n	8014354 <tcp_receive+0xec8>
                break;
 8014352:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8014354:	6878      	ldr	r0, [r7, #4]
 8014356:	f001 fa33 	bl	80157c0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801435a:	e003      	b.n	8014364 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801435c:	6878      	ldr	r0, [r7, #4]
 801435e:	f001 fa2f 	bl	80157c0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014362:	e01a      	b.n	801439a <tcp_receive+0xf0e>
 8014364:	e019      	b.n	801439a <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8014366:	4b0f      	ldr	r3, [pc, #60]	; (80143a4 <tcp_receive+0xf18>)
 8014368:	681a      	ldr	r2, [r3, #0]
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801436e:	1ad3      	subs	r3, r2, r3
 8014370:	2b00      	cmp	r3, #0
 8014372:	db0a      	blt.n	801438a <tcp_receive+0xefe>
 8014374:	4b0b      	ldr	r3, [pc, #44]	; (80143a4 <tcp_receive+0xf18>)
 8014376:	681a      	ldr	r2, [r3, #0]
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801437c:	6879      	ldr	r1, [r7, #4]
 801437e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014380:	440b      	add	r3, r1
 8014382:	1ad3      	subs	r3, r2, r3
 8014384:	3301      	adds	r3, #1
 8014386:	2b00      	cmp	r3, #0
 8014388:	dd07      	ble.n	801439a <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	8b5b      	ldrh	r3, [r3, #26]
 801438e:	f043 0302 	orr.w	r3, r3, #2
 8014392:	b29a      	uxth	r2, r3
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8014398:	e7ff      	b.n	801439a <tcp_receive+0xf0e>
 801439a:	bf00      	nop
 801439c:	3750      	adds	r7, #80	; 0x50
 801439e:	46bd      	mov	sp, r7
 80143a0:	bdb0      	pop	{r4, r5, r7, pc}
 80143a2:	bf00      	nop
 80143a4:	20008030 	.word	0x20008030
 80143a8:	20008010 	.word	0x20008010
 80143ac:	2000803a 	.word	0x2000803a
 80143b0:	0801c8f0 	.word	0x0801c8f0
 80143b4:	0801cc98 	.word	0x0801cc98
 80143b8:	0801c93c 	.word	0x0801c93c

080143bc <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80143bc:	b480      	push	{r7}
 80143be:	b083      	sub	sp, #12
 80143c0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80143c2:	4b15      	ldr	r3, [pc, #84]	; (8014418 <tcp_get_next_optbyte+0x5c>)
 80143c4:	881b      	ldrh	r3, [r3, #0]
 80143c6:	1c5a      	adds	r2, r3, #1
 80143c8:	b291      	uxth	r1, r2
 80143ca:	4a13      	ldr	r2, [pc, #76]	; (8014418 <tcp_get_next_optbyte+0x5c>)
 80143cc:	8011      	strh	r1, [r2, #0]
 80143ce:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80143d0:	4b12      	ldr	r3, [pc, #72]	; (801441c <tcp_get_next_optbyte+0x60>)
 80143d2:	681b      	ldr	r3, [r3, #0]
 80143d4:	2b00      	cmp	r3, #0
 80143d6:	d004      	beq.n	80143e2 <tcp_get_next_optbyte+0x26>
 80143d8:	4b11      	ldr	r3, [pc, #68]	; (8014420 <tcp_get_next_optbyte+0x64>)
 80143da:	881b      	ldrh	r3, [r3, #0]
 80143dc:	88fa      	ldrh	r2, [r7, #6]
 80143de:	429a      	cmp	r2, r3
 80143e0:	d208      	bcs.n	80143f4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80143e2:	4b10      	ldr	r3, [pc, #64]	; (8014424 <tcp_get_next_optbyte+0x68>)
 80143e4:	681b      	ldr	r3, [r3, #0]
 80143e6:	3314      	adds	r3, #20
 80143e8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80143ea:	88fb      	ldrh	r3, [r7, #6]
 80143ec:	683a      	ldr	r2, [r7, #0]
 80143ee:	4413      	add	r3, r2
 80143f0:	781b      	ldrb	r3, [r3, #0]
 80143f2:	e00b      	b.n	801440c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80143f4:	88fb      	ldrh	r3, [r7, #6]
 80143f6:	b2da      	uxtb	r2, r3
 80143f8:	4b09      	ldr	r3, [pc, #36]	; (8014420 <tcp_get_next_optbyte+0x64>)
 80143fa:	881b      	ldrh	r3, [r3, #0]
 80143fc:	b2db      	uxtb	r3, r3
 80143fe:	1ad3      	subs	r3, r2, r3
 8014400:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8014402:	4b06      	ldr	r3, [pc, #24]	; (801441c <tcp_get_next_optbyte+0x60>)
 8014404:	681a      	ldr	r2, [r3, #0]
 8014406:	797b      	ldrb	r3, [r7, #5]
 8014408:	4413      	add	r3, r2
 801440a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801440c:	4618      	mov	r0, r3
 801440e:	370c      	adds	r7, #12
 8014410:	46bd      	mov	sp, r7
 8014412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014416:	4770      	bx	lr
 8014418:	2000802c 	.word	0x2000802c
 801441c:	20008028 	.word	0x20008028
 8014420:	20008026 	.word	0x20008026
 8014424:	20008020 	.word	0x20008020

08014428 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8014428:	b580      	push	{r7, lr}
 801442a:	b084      	sub	sp, #16
 801442c:	af00      	add	r7, sp, #0
 801442e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	2b00      	cmp	r3, #0
 8014434:	d106      	bne.n	8014444 <tcp_parseopt+0x1c>
 8014436:	4b32      	ldr	r3, [pc, #200]	; (8014500 <tcp_parseopt+0xd8>)
 8014438:	f240 727d 	movw	r2, #1917	; 0x77d
 801443c:	4931      	ldr	r1, [pc, #196]	; (8014504 <tcp_parseopt+0xdc>)
 801443e:	4832      	ldr	r0, [pc, #200]	; (8014508 <tcp_parseopt+0xe0>)
 8014440:	f004 fe04 	bl	801904c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8014444:	4b31      	ldr	r3, [pc, #196]	; (801450c <tcp_parseopt+0xe4>)
 8014446:	881b      	ldrh	r3, [r3, #0]
 8014448:	2b00      	cmp	r3, #0
 801444a:	d055      	beq.n	80144f8 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801444c:	4b30      	ldr	r3, [pc, #192]	; (8014510 <tcp_parseopt+0xe8>)
 801444e:	2200      	movs	r2, #0
 8014450:	801a      	strh	r2, [r3, #0]
 8014452:	e045      	b.n	80144e0 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8014454:	f7ff ffb2 	bl	80143bc <tcp_get_next_optbyte>
 8014458:	4603      	mov	r3, r0
 801445a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801445c:	7bfb      	ldrb	r3, [r7, #15]
 801445e:	2b02      	cmp	r3, #2
 8014460:	d006      	beq.n	8014470 <tcp_parseopt+0x48>
 8014462:	2b02      	cmp	r3, #2
 8014464:	dc2b      	bgt.n	80144be <tcp_parseopt+0x96>
 8014466:	2b00      	cmp	r3, #0
 8014468:	d041      	beq.n	80144ee <tcp_parseopt+0xc6>
 801446a:	2b01      	cmp	r3, #1
 801446c:	d127      	bne.n	80144be <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801446e:	e037      	b.n	80144e0 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8014470:	f7ff ffa4 	bl	80143bc <tcp_get_next_optbyte>
 8014474:	4603      	mov	r3, r0
 8014476:	2b04      	cmp	r3, #4
 8014478:	d13b      	bne.n	80144f2 <tcp_parseopt+0xca>
 801447a:	4b25      	ldr	r3, [pc, #148]	; (8014510 <tcp_parseopt+0xe8>)
 801447c:	881b      	ldrh	r3, [r3, #0]
 801447e:	3301      	adds	r3, #1
 8014480:	4a22      	ldr	r2, [pc, #136]	; (801450c <tcp_parseopt+0xe4>)
 8014482:	8812      	ldrh	r2, [r2, #0]
 8014484:	4293      	cmp	r3, r2
 8014486:	da34      	bge.n	80144f2 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8014488:	f7ff ff98 	bl	80143bc <tcp_get_next_optbyte>
 801448c:	4603      	mov	r3, r0
 801448e:	b29b      	uxth	r3, r3
 8014490:	021b      	lsls	r3, r3, #8
 8014492:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8014494:	f7ff ff92 	bl	80143bc <tcp_get_next_optbyte>
 8014498:	4603      	mov	r3, r0
 801449a:	b29a      	uxth	r2, r3
 801449c:	89bb      	ldrh	r3, [r7, #12]
 801449e:	4313      	orrs	r3, r2
 80144a0:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80144a2:	89bb      	ldrh	r3, [r7, #12]
 80144a4:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80144a8:	d804      	bhi.n	80144b4 <tcp_parseopt+0x8c>
 80144aa:	89bb      	ldrh	r3, [r7, #12]
 80144ac:	2b00      	cmp	r3, #0
 80144ae:	d001      	beq.n	80144b4 <tcp_parseopt+0x8c>
 80144b0:	89ba      	ldrh	r2, [r7, #12]
 80144b2:	e001      	b.n	80144b8 <tcp_parseopt+0x90>
 80144b4:	f44f 7206 	mov.w	r2, #536	; 0x218
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80144bc:	e010      	b.n	80144e0 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80144be:	f7ff ff7d 	bl	80143bc <tcp_get_next_optbyte>
 80144c2:	4603      	mov	r3, r0
 80144c4:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80144c6:	7afb      	ldrb	r3, [r7, #11]
 80144c8:	2b01      	cmp	r3, #1
 80144ca:	d914      	bls.n	80144f6 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80144cc:	7afb      	ldrb	r3, [r7, #11]
 80144ce:	b29a      	uxth	r2, r3
 80144d0:	4b0f      	ldr	r3, [pc, #60]	; (8014510 <tcp_parseopt+0xe8>)
 80144d2:	881b      	ldrh	r3, [r3, #0]
 80144d4:	4413      	add	r3, r2
 80144d6:	b29b      	uxth	r3, r3
 80144d8:	3b02      	subs	r3, #2
 80144da:	b29a      	uxth	r2, r3
 80144dc:	4b0c      	ldr	r3, [pc, #48]	; (8014510 <tcp_parseopt+0xe8>)
 80144de:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80144e0:	4b0b      	ldr	r3, [pc, #44]	; (8014510 <tcp_parseopt+0xe8>)
 80144e2:	881a      	ldrh	r2, [r3, #0]
 80144e4:	4b09      	ldr	r3, [pc, #36]	; (801450c <tcp_parseopt+0xe4>)
 80144e6:	881b      	ldrh	r3, [r3, #0]
 80144e8:	429a      	cmp	r2, r3
 80144ea:	d3b3      	bcc.n	8014454 <tcp_parseopt+0x2c>
 80144ec:	e004      	b.n	80144f8 <tcp_parseopt+0xd0>
          return;
 80144ee:	bf00      	nop
 80144f0:	e002      	b.n	80144f8 <tcp_parseopt+0xd0>
            return;
 80144f2:	bf00      	nop
 80144f4:	e000      	b.n	80144f8 <tcp_parseopt+0xd0>
            return;
 80144f6:	bf00      	nop
      }
    }
  }
}
 80144f8:	3710      	adds	r7, #16
 80144fa:	46bd      	mov	sp, r7
 80144fc:	bd80      	pop	{r7, pc}
 80144fe:	bf00      	nop
 8014500:	0801c8f0 	.word	0x0801c8f0
 8014504:	0801cd54 	.word	0x0801cd54
 8014508:	0801c93c 	.word	0x0801c93c
 801450c:	20008024 	.word	0x20008024
 8014510:	2000802c 	.word	0x2000802c

08014514 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8014514:	b480      	push	{r7}
 8014516:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8014518:	4b05      	ldr	r3, [pc, #20]	; (8014530 <tcp_trigger_input_pcb_close+0x1c>)
 801451a:	781b      	ldrb	r3, [r3, #0]
 801451c:	f043 0310 	orr.w	r3, r3, #16
 8014520:	b2da      	uxtb	r2, r3
 8014522:	4b03      	ldr	r3, [pc, #12]	; (8014530 <tcp_trigger_input_pcb_close+0x1c>)
 8014524:	701a      	strb	r2, [r3, #0]
}
 8014526:	bf00      	nop
 8014528:	46bd      	mov	sp, r7
 801452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801452e:	4770      	bx	lr
 8014530:	2000803d 	.word	0x2000803d

08014534 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8014534:	b580      	push	{r7, lr}
 8014536:	b084      	sub	sp, #16
 8014538:	af00      	add	r7, sp, #0
 801453a:	60f8      	str	r0, [r7, #12]
 801453c:	60b9      	str	r1, [r7, #8]
 801453e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8014540:	68fb      	ldr	r3, [r7, #12]
 8014542:	2b00      	cmp	r3, #0
 8014544:	d00a      	beq.n	801455c <tcp_route+0x28>
 8014546:	68fb      	ldr	r3, [r7, #12]
 8014548:	7a1b      	ldrb	r3, [r3, #8]
 801454a:	2b00      	cmp	r3, #0
 801454c:	d006      	beq.n	801455c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801454e:	68fb      	ldr	r3, [r7, #12]
 8014550:	7a1b      	ldrb	r3, [r3, #8]
 8014552:	4618      	mov	r0, r3
 8014554:	f7fb fb7a 	bl	800fc4c <netif_get_by_index>
 8014558:	4603      	mov	r3, r0
 801455a:	e003      	b.n	8014564 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801455c:	6878      	ldr	r0, [r7, #4]
 801455e:	f002 fe61 	bl	8017224 <ip4_route>
 8014562:	4603      	mov	r3, r0
  }
}
 8014564:	4618      	mov	r0, r3
 8014566:	3710      	adds	r7, #16
 8014568:	46bd      	mov	sp, r7
 801456a:	bd80      	pop	{r7, pc}

0801456c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801456c:	b590      	push	{r4, r7, lr}
 801456e:	b087      	sub	sp, #28
 8014570:	af00      	add	r7, sp, #0
 8014572:	60f8      	str	r0, [r7, #12]
 8014574:	60b9      	str	r1, [r7, #8]
 8014576:	603b      	str	r3, [r7, #0]
 8014578:	4613      	mov	r3, r2
 801457a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801457c:	68fb      	ldr	r3, [r7, #12]
 801457e:	2b00      	cmp	r3, #0
 8014580:	d105      	bne.n	801458e <tcp_create_segment+0x22>
 8014582:	4b44      	ldr	r3, [pc, #272]	; (8014694 <tcp_create_segment+0x128>)
 8014584:	22a3      	movs	r2, #163	; 0xa3
 8014586:	4944      	ldr	r1, [pc, #272]	; (8014698 <tcp_create_segment+0x12c>)
 8014588:	4844      	ldr	r0, [pc, #272]	; (801469c <tcp_create_segment+0x130>)
 801458a:	f004 fd5f 	bl	801904c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801458e:	68bb      	ldr	r3, [r7, #8]
 8014590:	2b00      	cmp	r3, #0
 8014592:	d105      	bne.n	80145a0 <tcp_create_segment+0x34>
 8014594:	4b3f      	ldr	r3, [pc, #252]	; (8014694 <tcp_create_segment+0x128>)
 8014596:	22a4      	movs	r2, #164	; 0xa4
 8014598:	4941      	ldr	r1, [pc, #260]	; (80146a0 <tcp_create_segment+0x134>)
 801459a:	4840      	ldr	r0, [pc, #256]	; (801469c <tcp_create_segment+0x130>)
 801459c:	f004 fd56 	bl	801904c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80145a0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80145a4:	009b      	lsls	r3, r3, #2
 80145a6:	b2db      	uxtb	r3, r3
 80145a8:	f003 0304 	and.w	r3, r3, #4
 80145ac:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80145ae:	2003      	movs	r0, #3
 80145b0:	f7fa ffc6 	bl	800f540 <memp_malloc>
 80145b4:	6138      	str	r0, [r7, #16]
 80145b6:	693b      	ldr	r3, [r7, #16]
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	d104      	bne.n	80145c6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80145bc:	68b8      	ldr	r0, [r7, #8]
 80145be:	f7fb fe85 	bl	80102cc <pbuf_free>
    return NULL;
 80145c2:	2300      	movs	r3, #0
 80145c4:	e061      	b.n	801468a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80145c6:	693b      	ldr	r3, [r7, #16]
 80145c8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80145cc:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80145ce:	693b      	ldr	r3, [r7, #16]
 80145d0:	2200      	movs	r2, #0
 80145d2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80145d4:	693b      	ldr	r3, [r7, #16]
 80145d6:	68ba      	ldr	r2, [r7, #8]
 80145d8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80145da:	68bb      	ldr	r3, [r7, #8]
 80145dc:	891a      	ldrh	r2, [r3, #8]
 80145de:	7dfb      	ldrb	r3, [r7, #23]
 80145e0:	b29b      	uxth	r3, r3
 80145e2:	429a      	cmp	r2, r3
 80145e4:	d205      	bcs.n	80145f2 <tcp_create_segment+0x86>
 80145e6:	4b2b      	ldr	r3, [pc, #172]	; (8014694 <tcp_create_segment+0x128>)
 80145e8:	22b0      	movs	r2, #176	; 0xb0
 80145ea:	492e      	ldr	r1, [pc, #184]	; (80146a4 <tcp_create_segment+0x138>)
 80145ec:	482b      	ldr	r0, [pc, #172]	; (801469c <tcp_create_segment+0x130>)
 80145ee:	f004 fd2d 	bl	801904c <iprintf>
  seg->len = p->tot_len - optlen;
 80145f2:	68bb      	ldr	r3, [r7, #8]
 80145f4:	891a      	ldrh	r2, [r3, #8]
 80145f6:	7dfb      	ldrb	r3, [r7, #23]
 80145f8:	b29b      	uxth	r3, r3
 80145fa:	1ad3      	subs	r3, r2, r3
 80145fc:	b29a      	uxth	r2, r3
 80145fe:	693b      	ldr	r3, [r7, #16]
 8014600:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8014602:	2114      	movs	r1, #20
 8014604:	68b8      	ldr	r0, [r7, #8]
 8014606:	f7fb fdcb 	bl	80101a0 <pbuf_add_header>
 801460a:	4603      	mov	r3, r0
 801460c:	2b00      	cmp	r3, #0
 801460e:	d004      	beq.n	801461a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8014610:	6938      	ldr	r0, [r7, #16]
 8014612:	f7fd f8ce 	bl	80117b2 <tcp_seg_free>
    return NULL;
 8014616:	2300      	movs	r3, #0
 8014618:	e037      	b.n	801468a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801461a:	693b      	ldr	r3, [r7, #16]
 801461c:	685b      	ldr	r3, [r3, #4]
 801461e:	685a      	ldr	r2, [r3, #4]
 8014620:	693b      	ldr	r3, [r7, #16]
 8014622:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8014624:	68fb      	ldr	r3, [r7, #12]
 8014626:	8ada      	ldrh	r2, [r3, #22]
 8014628:	693b      	ldr	r3, [r7, #16]
 801462a:	68dc      	ldr	r4, [r3, #12]
 801462c:	4610      	mov	r0, r2
 801462e:	f7fa fa57 	bl	800eae0 <lwip_htons>
 8014632:	4603      	mov	r3, r0
 8014634:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8014636:	68fb      	ldr	r3, [r7, #12]
 8014638:	8b1a      	ldrh	r2, [r3, #24]
 801463a:	693b      	ldr	r3, [r7, #16]
 801463c:	68dc      	ldr	r4, [r3, #12]
 801463e:	4610      	mov	r0, r2
 8014640:	f7fa fa4e 	bl	800eae0 <lwip_htons>
 8014644:	4603      	mov	r3, r0
 8014646:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8014648:	693b      	ldr	r3, [r7, #16]
 801464a:	68dc      	ldr	r4, [r3, #12]
 801464c:	6838      	ldr	r0, [r7, #0]
 801464e:	f7fa fa5c 	bl	800eb0a <lwip_htonl>
 8014652:	4603      	mov	r3, r0
 8014654:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8014656:	7dfb      	ldrb	r3, [r7, #23]
 8014658:	089b      	lsrs	r3, r3, #2
 801465a:	b2db      	uxtb	r3, r3
 801465c:	b29b      	uxth	r3, r3
 801465e:	3305      	adds	r3, #5
 8014660:	b29b      	uxth	r3, r3
 8014662:	031b      	lsls	r3, r3, #12
 8014664:	b29a      	uxth	r2, r3
 8014666:	79fb      	ldrb	r3, [r7, #7]
 8014668:	b29b      	uxth	r3, r3
 801466a:	4313      	orrs	r3, r2
 801466c:	b29a      	uxth	r2, r3
 801466e:	693b      	ldr	r3, [r7, #16]
 8014670:	68dc      	ldr	r4, [r3, #12]
 8014672:	4610      	mov	r0, r2
 8014674:	f7fa fa34 	bl	800eae0 <lwip_htons>
 8014678:	4603      	mov	r3, r0
 801467a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801467c:	693b      	ldr	r3, [r7, #16]
 801467e:	68db      	ldr	r3, [r3, #12]
 8014680:	2200      	movs	r2, #0
 8014682:	749a      	strb	r2, [r3, #18]
 8014684:	2200      	movs	r2, #0
 8014686:	74da      	strb	r2, [r3, #19]
  return seg;
 8014688:	693b      	ldr	r3, [r7, #16]
}
 801468a:	4618      	mov	r0, r3
 801468c:	371c      	adds	r7, #28
 801468e:	46bd      	mov	sp, r7
 8014690:	bd90      	pop	{r4, r7, pc}
 8014692:	bf00      	nop
 8014694:	0801cd70 	.word	0x0801cd70
 8014698:	0801cda4 	.word	0x0801cda4
 801469c:	0801cdc4 	.word	0x0801cdc4
 80146a0:	0801cdec 	.word	0x0801cdec
 80146a4:	0801ce10 	.word	0x0801ce10

080146a8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80146a8:	b590      	push	{r4, r7, lr}
 80146aa:	b08b      	sub	sp, #44	; 0x2c
 80146ac:	af02      	add	r7, sp, #8
 80146ae:	6078      	str	r0, [r7, #4]
 80146b0:	460b      	mov	r3, r1
 80146b2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80146b4:	2300      	movs	r3, #0
 80146b6:	61fb      	str	r3, [r7, #28]
 80146b8:	2300      	movs	r3, #0
 80146ba:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80146bc:	2300      	movs	r3, #0
 80146be:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	2b00      	cmp	r3, #0
 80146c4:	d106      	bne.n	80146d4 <tcp_split_unsent_seg+0x2c>
 80146c6:	4b95      	ldr	r3, [pc, #596]	; (801491c <tcp_split_unsent_seg+0x274>)
 80146c8:	f240 324b 	movw	r2, #843	; 0x34b
 80146cc:	4994      	ldr	r1, [pc, #592]	; (8014920 <tcp_split_unsent_seg+0x278>)
 80146ce:	4895      	ldr	r0, [pc, #596]	; (8014924 <tcp_split_unsent_seg+0x27c>)
 80146d0:	f004 fcbc 	bl	801904c <iprintf>

  useg = pcb->unsent;
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80146d8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80146da:	697b      	ldr	r3, [r7, #20]
 80146dc:	2b00      	cmp	r3, #0
 80146de:	d102      	bne.n	80146e6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80146e0:	f04f 33ff 	mov.w	r3, #4294967295
 80146e4:	e116      	b.n	8014914 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80146e6:	887b      	ldrh	r3, [r7, #2]
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	d109      	bne.n	8014700 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80146ec:	4b8b      	ldr	r3, [pc, #556]	; (801491c <tcp_split_unsent_seg+0x274>)
 80146ee:	f240 3253 	movw	r2, #851	; 0x353
 80146f2:	498d      	ldr	r1, [pc, #564]	; (8014928 <tcp_split_unsent_seg+0x280>)
 80146f4:	488b      	ldr	r0, [pc, #556]	; (8014924 <tcp_split_unsent_seg+0x27c>)
 80146f6:	f004 fca9 	bl	801904c <iprintf>
    return ERR_VAL;
 80146fa:	f06f 0305 	mvn.w	r3, #5
 80146fe:	e109      	b.n	8014914 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8014700:	697b      	ldr	r3, [r7, #20]
 8014702:	891b      	ldrh	r3, [r3, #8]
 8014704:	887a      	ldrh	r2, [r7, #2]
 8014706:	429a      	cmp	r2, r3
 8014708:	d301      	bcc.n	801470e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801470a:	2300      	movs	r3, #0
 801470c:	e102      	b.n	8014914 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014712:	887a      	ldrh	r2, [r7, #2]
 8014714:	429a      	cmp	r2, r3
 8014716:	d906      	bls.n	8014726 <tcp_split_unsent_seg+0x7e>
 8014718:	4b80      	ldr	r3, [pc, #512]	; (801491c <tcp_split_unsent_seg+0x274>)
 801471a:	f240 325b 	movw	r2, #859	; 0x35b
 801471e:	4983      	ldr	r1, [pc, #524]	; (801492c <tcp_split_unsent_seg+0x284>)
 8014720:	4880      	ldr	r0, [pc, #512]	; (8014924 <tcp_split_unsent_seg+0x27c>)
 8014722:	f004 fc93 	bl	801904c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8014726:	697b      	ldr	r3, [r7, #20]
 8014728:	891b      	ldrh	r3, [r3, #8]
 801472a:	2b00      	cmp	r3, #0
 801472c:	d106      	bne.n	801473c <tcp_split_unsent_seg+0x94>
 801472e:	4b7b      	ldr	r3, [pc, #492]	; (801491c <tcp_split_unsent_seg+0x274>)
 8014730:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8014734:	497e      	ldr	r1, [pc, #504]	; (8014930 <tcp_split_unsent_seg+0x288>)
 8014736:	487b      	ldr	r0, [pc, #492]	; (8014924 <tcp_split_unsent_seg+0x27c>)
 8014738:	f004 fc88 	bl	801904c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801473c:	697b      	ldr	r3, [r7, #20]
 801473e:	7a9b      	ldrb	r3, [r3, #10]
 8014740:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8014742:	7bfb      	ldrb	r3, [r7, #15]
 8014744:	009b      	lsls	r3, r3, #2
 8014746:	b2db      	uxtb	r3, r3
 8014748:	f003 0304 	and.w	r3, r3, #4
 801474c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801474e:	697b      	ldr	r3, [r7, #20]
 8014750:	891a      	ldrh	r2, [r3, #8]
 8014752:	887b      	ldrh	r3, [r7, #2]
 8014754:	1ad3      	subs	r3, r2, r3
 8014756:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8014758:	7bbb      	ldrb	r3, [r7, #14]
 801475a:	b29a      	uxth	r2, r3
 801475c:	89bb      	ldrh	r3, [r7, #12]
 801475e:	4413      	add	r3, r2
 8014760:	b29b      	uxth	r3, r3
 8014762:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014766:	4619      	mov	r1, r3
 8014768:	2036      	movs	r0, #54	; 0x36
 801476a:	f7fb facb 	bl	800fd04 <pbuf_alloc>
 801476e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014770:	693b      	ldr	r3, [r7, #16]
 8014772:	2b00      	cmp	r3, #0
 8014774:	f000 80b7 	beq.w	80148e6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8014778:	697b      	ldr	r3, [r7, #20]
 801477a:	685b      	ldr	r3, [r3, #4]
 801477c:	891a      	ldrh	r2, [r3, #8]
 801477e:	697b      	ldr	r3, [r7, #20]
 8014780:	891b      	ldrh	r3, [r3, #8]
 8014782:	1ad3      	subs	r3, r2, r3
 8014784:	b29a      	uxth	r2, r3
 8014786:	887b      	ldrh	r3, [r7, #2]
 8014788:	4413      	add	r3, r2
 801478a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801478c:	697b      	ldr	r3, [r7, #20]
 801478e:	6858      	ldr	r0, [r3, #4]
 8014790:	693b      	ldr	r3, [r7, #16]
 8014792:	685a      	ldr	r2, [r3, #4]
 8014794:	7bbb      	ldrb	r3, [r7, #14]
 8014796:	18d1      	adds	r1, r2, r3
 8014798:	897b      	ldrh	r3, [r7, #10]
 801479a:	89ba      	ldrh	r2, [r7, #12]
 801479c:	f7fb ff80 	bl	80106a0 <pbuf_copy_partial>
 80147a0:	4603      	mov	r3, r0
 80147a2:	461a      	mov	r2, r3
 80147a4:	89bb      	ldrh	r3, [r7, #12]
 80147a6:	4293      	cmp	r3, r2
 80147a8:	f040 809f 	bne.w	80148ea <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80147ac:	697b      	ldr	r3, [r7, #20]
 80147ae:	68db      	ldr	r3, [r3, #12]
 80147b0:	899b      	ldrh	r3, [r3, #12]
 80147b2:	b29b      	uxth	r3, r3
 80147b4:	4618      	mov	r0, r3
 80147b6:	f7fa f993 	bl	800eae0 <lwip_htons>
 80147ba:	4603      	mov	r3, r0
 80147bc:	b2db      	uxtb	r3, r3
 80147be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80147c2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80147c4:	2300      	movs	r3, #0
 80147c6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80147c8:	7efb      	ldrb	r3, [r7, #27]
 80147ca:	f003 0308 	and.w	r3, r3, #8
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d007      	beq.n	80147e2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80147d2:	7efb      	ldrb	r3, [r7, #27]
 80147d4:	f023 0308 	bic.w	r3, r3, #8
 80147d8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80147da:	7ebb      	ldrb	r3, [r7, #26]
 80147dc:	f043 0308 	orr.w	r3, r3, #8
 80147e0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80147e2:	7efb      	ldrb	r3, [r7, #27]
 80147e4:	f003 0301 	and.w	r3, r3, #1
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	d007      	beq.n	80147fc <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80147ec:	7efb      	ldrb	r3, [r7, #27]
 80147ee:	f023 0301 	bic.w	r3, r3, #1
 80147f2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80147f4:	7ebb      	ldrb	r3, [r7, #26]
 80147f6:	f043 0301 	orr.w	r3, r3, #1
 80147fa:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80147fc:	697b      	ldr	r3, [r7, #20]
 80147fe:	68db      	ldr	r3, [r3, #12]
 8014800:	685b      	ldr	r3, [r3, #4]
 8014802:	4618      	mov	r0, r3
 8014804:	f7fa f981 	bl	800eb0a <lwip_htonl>
 8014808:	4602      	mov	r2, r0
 801480a:	887b      	ldrh	r3, [r7, #2]
 801480c:	18d1      	adds	r1, r2, r3
 801480e:	7eba      	ldrb	r2, [r7, #26]
 8014810:	7bfb      	ldrb	r3, [r7, #15]
 8014812:	9300      	str	r3, [sp, #0]
 8014814:	460b      	mov	r3, r1
 8014816:	6939      	ldr	r1, [r7, #16]
 8014818:	6878      	ldr	r0, [r7, #4]
 801481a:	f7ff fea7 	bl	801456c <tcp_create_segment>
 801481e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8014820:	69fb      	ldr	r3, [r7, #28]
 8014822:	2b00      	cmp	r3, #0
 8014824:	d063      	beq.n	80148ee <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8014826:	697b      	ldr	r3, [r7, #20]
 8014828:	685b      	ldr	r3, [r3, #4]
 801482a:	4618      	mov	r0, r3
 801482c:	f7fb fdd6 	bl	80103dc <pbuf_clen>
 8014830:	4603      	mov	r3, r0
 8014832:	461a      	mov	r2, r3
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801483a:	1a9b      	subs	r3, r3, r2
 801483c:	b29a      	uxth	r2, r3
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8014844:	697b      	ldr	r3, [r7, #20]
 8014846:	6858      	ldr	r0, [r3, #4]
 8014848:	697b      	ldr	r3, [r7, #20]
 801484a:	685b      	ldr	r3, [r3, #4]
 801484c:	891a      	ldrh	r2, [r3, #8]
 801484e:	89bb      	ldrh	r3, [r7, #12]
 8014850:	1ad3      	subs	r3, r2, r3
 8014852:	b29b      	uxth	r3, r3
 8014854:	4619      	mov	r1, r3
 8014856:	f7fb fbb3 	bl	800ffc0 <pbuf_realloc>
  useg->len -= remainder;
 801485a:	697b      	ldr	r3, [r7, #20]
 801485c:	891a      	ldrh	r2, [r3, #8]
 801485e:	89bb      	ldrh	r3, [r7, #12]
 8014860:	1ad3      	subs	r3, r2, r3
 8014862:	b29a      	uxth	r2, r3
 8014864:	697b      	ldr	r3, [r7, #20]
 8014866:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8014868:	697b      	ldr	r3, [r7, #20]
 801486a:	68db      	ldr	r3, [r3, #12]
 801486c:	899b      	ldrh	r3, [r3, #12]
 801486e:	b29c      	uxth	r4, r3
 8014870:	7efb      	ldrb	r3, [r7, #27]
 8014872:	b29b      	uxth	r3, r3
 8014874:	4618      	mov	r0, r3
 8014876:	f7fa f933 	bl	800eae0 <lwip_htons>
 801487a:	4603      	mov	r3, r0
 801487c:	461a      	mov	r2, r3
 801487e:	697b      	ldr	r3, [r7, #20]
 8014880:	68db      	ldr	r3, [r3, #12]
 8014882:	4322      	orrs	r2, r4
 8014884:	b292      	uxth	r2, r2
 8014886:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8014888:	697b      	ldr	r3, [r7, #20]
 801488a:	685b      	ldr	r3, [r3, #4]
 801488c:	4618      	mov	r0, r3
 801488e:	f7fb fda5 	bl	80103dc <pbuf_clen>
 8014892:	4603      	mov	r3, r0
 8014894:	461a      	mov	r2, r3
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801489c:	4413      	add	r3, r2
 801489e:	b29a      	uxth	r2, r3
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80148a6:	69fb      	ldr	r3, [r7, #28]
 80148a8:	685b      	ldr	r3, [r3, #4]
 80148aa:	4618      	mov	r0, r3
 80148ac:	f7fb fd96 	bl	80103dc <pbuf_clen>
 80148b0:	4603      	mov	r3, r0
 80148b2:	461a      	mov	r2, r3
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80148ba:	4413      	add	r3, r2
 80148bc:	b29a      	uxth	r2, r3
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80148c4:	697b      	ldr	r3, [r7, #20]
 80148c6:	681a      	ldr	r2, [r3, #0]
 80148c8:	69fb      	ldr	r3, [r7, #28]
 80148ca:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80148cc:	697b      	ldr	r3, [r7, #20]
 80148ce:	69fa      	ldr	r2, [r7, #28]
 80148d0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80148d2:	69fb      	ldr	r3, [r7, #28]
 80148d4:	681b      	ldr	r3, [r3, #0]
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	d103      	bne.n	80148e2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	2200      	movs	r2, #0
 80148de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80148e2:	2300      	movs	r3, #0
 80148e4:	e016      	b.n	8014914 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80148e6:	bf00      	nop
 80148e8:	e002      	b.n	80148f0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80148ea:	bf00      	nop
 80148ec:	e000      	b.n	80148f0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80148ee:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80148f0:	69fb      	ldr	r3, [r7, #28]
 80148f2:	2b00      	cmp	r3, #0
 80148f4:	d006      	beq.n	8014904 <tcp_split_unsent_seg+0x25c>
 80148f6:	4b09      	ldr	r3, [pc, #36]	; (801491c <tcp_split_unsent_seg+0x274>)
 80148f8:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80148fc:	490d      	ldr	r1, [pc, #52]	; (8014934 <tcp_split_unsent_seg+0x28c>)
 80148fe:	4809      	ldr	r0, [pc, #36]	; (8014924 <tcp_split_unsent_seg+0x27c>)
 8014900:	f004 fba4 	bl	801904c <iprintf>
  if (p != NULL) {
 8014904:	693b      	ldr	r3, [r7, #16]
 8014906:	2b00      	cmp	r3, #0
 8014908:	d002      	beq.n	8014910 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801490a:	6938      	ldr	r0, [r7, #16]
 801490c:	f7fb fcde 	bl	80102cc <pbuf_free>
  }

  return ERR_MEM;
 8014910:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014914:	4618      	mov	r0, r3
 8014916:	3724      	adds	r7, #36	; 0x24
 8014918:	46bd      	mov	sp, r7
 801491a:	bd90      	pop	{r4, r7, pc}
 801491c:	0801cd70 	.word	0x0801cd70
 8014920:	0801d104 	.word	0x0801d104
 8014924:	0801cdc4 	.word	0x0801cdc4
 8014928:	0801d128 	.word	0x0801d128
 801492c:	0801d14c 	.word	0x0801d14c
 8014930:	0801d15c 	.word	0x0801d15c
 8014934:	0801d16c 	.word	0x0801d16c

08014938 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8014938:	b590      	push	{r4, r7, lr}
 801493a:	b085      	sub	sp, #20
 801493c:	af00      	add	r7, sp, #0
 801493e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	2b00      	cmp	r3, #0
 8014944:	d106      	bne.n	8014954 <tcp_send_fin+0x1c>
 8014946:	4b21      	ldr	r3, [pc, #132]	; (80149cc <tcp_send_fin+0x94>)
 8014948:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801494c:	4920      	ldr	r1, [pc, #128]	; (80149d0 <tcp_send_fin+0x98>)
 801494e:	4821      	ldr	r0, [pc, #132]	; (80149d4 <tcp_send_fin+0x9c>)
 8014950:	f004 fb7c 	bl	801904c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014958:	2b00      	cmp	r3, #0
 801495a:	d02e      	beq.n	80149ba <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014960:	60fb      	str	r3, [r7, #12]
 8014962:	e002      	b.n	801496a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8014964:	68fb      	ldr	r3, [r7, #12]
 8014966:	681b      	ldr	r3, [r3, #0]
 8014968:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801496a:	68fb      	ldr	r3, [r7, #12]
 801496c:	681b      	ldr	r3, [r3, #0]
 801496e:	2b00      	cmp	r3, #0
 8014970:	d1f8      	bne.n	8014964 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8014972:	68fb      	ldr	r3, [r7, #12]
 8014974:	68db      	ldr	r3, [r3, #12]
 8014976:	899b      	ldrh	r3, [r3, #12]
 8014978:	b29b      	uxth	r3, r3
 801497a:	4618      	mov	r0, r3
 801497c:	f7fa f8b0 	bl	800eae0 <lwip_htons>
 8014980:	4603      	mov	r3, r0
 8014982:	b2db      	uxtb	r3, r3
 8014984:	f003 0307 	and.w	r3, r3, #7
 8014988:	2b00      	cmp	r3, #0
 801498a:	d116      	bne.n	80149ba <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801498c:	68fb      	ldr	r3, [r7, #12]
 801498e:	68db      	ldr	r3, [r3, #12]
 8014990:	899b      	ldrh	r3, [r3, #12]
 8014992:	b29c      	uxth	r4, r3
 8014994:	2001      	movs	r0, #1
 8014996:	f7fa f8a3 	bl	800eae0 <lwip_htons>
 801499a:	4603      	mov	r3, r0
 801499c:	461a      	mov	r2, r3
 801499e:	68fb      	ldr	r3, [r7, #12]
 80149a0:	68db      	ldr	r3, [r3, #12]
 80149a2:	4322      	orrs	r2, r4
 80149a4:	b292      	uxth	r2, r2
 80149a6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	8b5b      	ldrh	r3, [r3, #26]
 80149ac:	f043 0320 	orr.w	r3, r3, #32
 80149b0:	b29a      	uxth	r2, r3
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80149b6:	2300      	movs	r3, #0
 80149b8:	e004      	b.n	80149c4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80149ba:	2101      	movs	r1, #1
 80149bc:	6878      	ldr	r0, [r7, #4]
 80149be:	f000 f80b 	bl	80149d8 <tcp_enqueue_flags>
 80149c2:	4603      	mov	r3, r0
}
 80149c4:	4618      	mov	r0, r3
 80149c6:	3714      	adds	r7, #20
 80149c8:	46bd      	mov	sp, r7
 80149ca:	bd90      	pop	{r4, r7, pc}
 80149cc:	0801cd70 	.word	0x0801cd70
 80149d0:	0801d178 	.word	0x0801d178
 80149d4:	0801cdc4 	.word	0x0801cdc4

080149d8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80149d8:	b580      	push	{r7, lr}
 80149da:	b08a      	sub	sp, #40	; 0x28
 80149dc:	af02      	add	r7, sp, #8
 80149de:	6078      	str	r0, [r7, #4]
 80149e0:	460b      	mov	r3, r1
 80149e2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80149e4:	2300      	movs	r3, #0
 80149e6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80149e8:	2300      	movs	r3, #0
 80149ea:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80149ec:	78fb      	ldrb	r3, [r7, #3]
 80149ee:	f003 0303 	and.w	r3, r3, #3
 80149f2:	2b00      	cmp	r3, #0
 80149f4:	d106      	bne.n	8014a04 <tcp_enqueue_flags+0x2c>
 80149f6:	4b67      	ldr	r3, [pc, #412]	; (8014b94 <tcp_enqueue_flags+0x1bc>)
 80149f8:	f240 4211 	movw	r2, #1041	; 0x411
 80149fc:	4966      	ldr	r1, [pc, #408]	; (8014b98 <tcp_enqueue_flags+0x1c0>)
 80149fe:	4867      	ldr	r0, [pc, #412]	; (8014b9c <tcp_enqueue_flags+0x1c4>)
 8014a00:	f004 fb24 	bl	801904c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	2b00      	cmp	r3, #0
 8014a08:	d106      	bne.n	8014a18 <tcp_enqueue_flags+0x40>
 8014a0a:	4b62      	ldr	r3, [pc, #392]	; (8014b94 <tcp_enqueue_flags+0x1bc>)
 8014a0c:	f240 4213 	movw	r2, #1043	; 0x413
 8014a10:	4963      	ldr	r1, [pc, #396]	; (8014ba0 <tcp_enqueue_flags+0x1c8>)
 8014a12:	4862      	ldr	r0, [pc, #392]	; (8014b9c <tcp_enqueue_flags+0x1c4>)
 8014a14:	f004 fb1a 	bl	801904c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8014a18:	78fb      	ldrb	r3, [r7, #3]
 8014a1a:	f003 0302 	and.w	r3, r3, #2
 8014a1e:	2b00      	cmp	r3, #0
 8014a20:	d001      	beq.n	8014a26 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8014a22:	2301      	movs	r3, #1
 8014a24:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014a26:	7ffb      	ldrb	r3, [r7, #31]
 8014a28:	009b      	lsls	r3, r3, #2
 8014a2a:	b2db      	uxtb	r3, r3
 8014a2c:	f003 0304 	and.w	r3, r3, #4
 8014a30:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8014a32:	7dfb      	ldrb	r3, [r7, #23]
 8014a34:	b29b      	uxth	r3, r3
 8014a36:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014a3a:	4619      	mov	r1, r3
 8014a3c:	2036      	movs	r0, #54	; 0x36
 8014a3e:	f7fb f961 	bl	800fd04 <pbuf_alloc>
 8014a42:	6138      	str	r0, [r7, #16]
 8014a44:	693b      	ldr	r3, [r7, #16]
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	d109      	bne.n	8014a5e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	8b5b      	ldrh	r3, [r3, #26]
 8014a4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014a52:	b29a      	uxth	r2, r3
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8014a58:	f04f 33ff 	mov.w	r3, #4294967295
 8014a5c:	e095      	b.n	8014b8a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8014a5e:	693b      	ldr	r3, [r7, #16]
 8014a60:	895a      	ldrh	r2, [r3, #10]
 8014a62:	7dfb      	ldrb	r3, [r7, #23]
 8014a64:	b29b      	uxth	r3, r3
 8014a66:	429a      	cmp	r2, r3
 8014a68:	d206      	bcs.n	8014a78 <tcp_enqueue_flags+0xa0>
 8014a6a:	4b4a      	ldr	r3, [pc, #296]	; (8014b94 <tcp_enqueue_flags+0x1bc>)
 8014a6c:	f240 4239 	movw	r2, #1081	; 0x439
 8014a70:	494c      	ldr	r1, [pc, #304]	; (8014ba4 <tcp_enqueue_flags+0x1cc>)
 8014a72:	484a      	ldr	r0, [pc, #296]	; (8014b9c <tcp_enqueue_flags+0x1c4>)
 8014a74:	f004 faea 	bl	801904c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8014a7c:	78fa      	ldrb	r2, [r7, #3]
 8014a7e:	7ffb      	ldrb	r3, [r7, #31]
 8014a80:	9300      	str	r3, [sp, #0]
 8014a82:	460b      	mov	r3, r1
 8014a84:	6939      	ldr	r1, [r7, #16]
 8014a86:	6878      	ldr	r0, [r7, #4]
 8014a88:	f7ff fd70 	bl	801456c <tcp_create_segment>
 8014a8c:	60f8      	str	r0, [r7, #12]
 8014a8e:	68fb      	ldr	r3, [r7, #12]
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d109      	bne.n	8014aa8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	8b5b      	ldrh	r3, [r3, #26]
 8014a98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014a9c:	b29a      	uxth	r2, r3
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8014aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8014aa6:	e070      	b.n	8014b8a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8014aa8:	68fb      	ldr	r3, [r7, #12]
 8014aaa:	68db      	ldr	r3, [r3, #12]
 8014aac:	f003 0303 	and.w	r3, r3, #3
 8014ab0:	2b00      	cmp	r3, #0
 8014ab2:	d006      	beq.n	8014ac2 <tcp_enqueue_flags+0xea>
 8014ab4:	4b37      	ldr	r3, [pc, #220]	; (8014b94 <tcp_enqueue_flags+0x1bc>)
 8014ab6:	f240 4242 	movw	r2, #1090	; 0x442
 8014aba:	493b      	ldr	r1, [pc, #236]	; (8014ba8 <tcp_enqueue_flags+0x1d0>)
 8014abc:	4837      	ldr	r0, [pc, #220]	; (8014b9c <tcp_enqueue_flags+0x1c4>)
 8014abe:	f004 fac5 	bl	801904c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8014ac2:	68fb      	ldr	r3, [r7, #12]
 8014ac4:	891b      	ldrh	r3, [r3, #8]
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	d006      	beq.n	8014ad8 <tcp_enqueue_flags+0x100>
 8014aca:	4b32      	ldr	r3, [pc, #200]	; (8014b94 <tcp_enqueue_flags+0x1bc>)
 8014acc:	f240 4243 	movw	r2, #1091	; 0x443
 8014ad0:	4936      	ldr	r1, [pc, #216]	; (8014bac <tcp_enqueue_flags+0x1d4>)
 8014ad2:	4832      	ldr	r0, [pc, #200]	; (8014b9c <tcp_enqueue_flags+0x1c4>)
 8014ad4:	f004 faba 	bl	801904c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	d103      	bne.n	8014ae8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	68fa      	ldr	r2, [r7, #12]
 8014ae4:	66da      	str	r2, [r3, #108]	; 0x6c
 8014ae6:	e00d      	b.n	8014b04 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014aec:	61bb      	str	r3, [r7, #24]
 8014aee:	e002      	b.n	8014af6 <tcp_enqueue_flags+0x11e>
 8014af0:	69bb      	ldr	r3, [r7, #24]
 8014af2:	681b      	ldr	r3, [r3, #0]
 8014af4:	61bb      	str	r3, [r7, #24]
 8014af6:	69bb      	ldr	r3, [r7, #24]
 8014af8:	681b      	ldr	r3, [r3, #0]
 8014afa:	2b00      	cmp	r3, #0
 8014afc:	d1f8      	bne.n	8014af0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8014afe:	69bb      	ldr	r3, [r7, #24]
 8014b00:	68fa      	ldr	r2, [r7, #12]
 8014b02:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	2200      	movs	r2, #0
 8014b08:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8014b0c:	78fb      	ldrb	r3, [r7, #3]
 8014b0e:	f003 0302 	and.w	r3, r3, #2
 8014b12:	2b00      	cmp	r3, #0
 8014b14:	d104      	bne.n	8014b20 <tcp_enqueue_flags+0x148>
 8014b16:	78fb      	ldrb	r3, [r7, #3]
 8014b18:	f003 0301 	and.w	r3, r3, #1
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	d004      	beq.n	8014b2a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014b24:	1c5a      	adds	r2, r3, #1
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8014b2a:	78fb      	ldrb	r3, [r7, #3]
 8014b2c:	f003 0301 	and.w	r3, r3, #1
 8014b30:	2b00      	cmp	r3, #0
 8014b32:	d006      	beq.n	8014b42 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	8b5b      	ldrh	r3, [r3, #26]
 8014b38:	f043 0320 	orr.w	r3, r3, #32
 8014b3c:	b29a      	uxth	r2, r3
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8014b42:	68fb      	ldr	r3, [r7, #12]
 8014b44:	685b      	ldr	r3, [r3, #4]
 8014b46:	4618      	mov	r0, r3
 8014b48:	f7fb fc48 	bl	80103dc <pbuf_clen>
 8014b4c:	4603      	mov	r3, r0
 8014b4e:	461a      	mov	r2, r3
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014b56:	4413      	add	r3, r2
 8014b58:	b29a      	uxth	r2, r3
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014b66:	2b00      	cmp	r3, #0
 8014b68:	d00e      	beq.n	8014b88 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	d10a      	bne.n	8014b88 <tcp_enqueue_flags+0x1b0>
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d106      	bne.n	8014b88 <tcp_enqueue_flags+0x1b0>
 8014b7a:	4b06      	ldr	r3, [pc, #24]	; (8014b94 <tcp_enqueue_flags+0x1bc>)
 8014b7c:	f240 4265 	movw	r2, #1125	; 0x465
 8014b80:	490b      	ldr	r1, [pc, #44]	; (8014bb0 <tcp_enqueue_flags+0x1d8>)
 8014b82:	4806      	ldr	r0, [pc, #24]	; (8014b9c <tcp_enqueue_flags+0x1c4>)
 8014b84:	f004 fa62 	bl	801904c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8014b88:	2300      	movs	r3, #0
}
 8014b8a:	4618      	mov	r0, r3
 8014b8c:	3720      	adds	r7, #32
 8014b8e:	46bd      	mov	sp, r7
 8014b90:	bd80      	pop	{r7, pc}
 8014b92:	bf00      	nop
 8014b94:	0801cd70 	.word	0x0801cd70
 8014b98:	0801d194 	.word	0x0801d194
 8014b9c:	0801cdc4 	.word	0x0801cdc4
 8014ba0:	0801d1ec 	.word	0x0801d1ec
 8014ba4:	0801d20c 	.word	0x0801d20c
 8014ba8:	0801d248 	.word	0x0801d248
 8014bac:	0801d260 	.word	0x0801d260
 8014bb0:	0801d28c 	.word	0x0801d28c

08014bb4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8014bb4:	b5b0      	push	{r4, r5, r7, lr}
 8014bb6:	b08a      	sub	sp, #40	; 0x28
 8014bb8:	af00      	add	r7, sp, #0
 8014bba:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	2b00      	cmp	r3, #0
 8014bc0:	d106      	bne.n	8014bd0 <tcp_output+0x1c>
 8014bc2:	4b8a      	ldr	r3, [pc, #552]	; (8014dec <tcp_output+0x238>)
 8014bc4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8014bc8:	4989      	ldr	r1, [pc, #548]	; (8014df0 <tcp_output+0x23c>)
 8014bca:	488a      	ldr	r0, [pc, #552]	; (8014df4 <tcp_output+0x240>)
 8014bcc:	f004 fa3e 	bl	801904c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	7d1b      	ldrb	r3, [r3, #20]
 8014bd4:	2b01      	cmp	r3, #1
 8014bd6:	d106      	bne.n	8014be6 <tcp_output+0x32>
 8014bd8:	4b84      	ldr	r3, [pc, #528]	; (8014dec <tcp_output+0x238>)
 8014bda:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8014bde:	4986      	ldr	r1, [pc, #536]	; (8014df8 <tcp_output+0x244>)
 8014be0:	4884      	ldr	r0, [pc, #528]	; (8014df4 <tcp_output+0x240>)
 8014be2:	f004 fa33 	bl	801904c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8014be6:	4b85      	ldr	r3, [pc, #532]	; (8014dfc <tcp_output+0x248>)
 8014be8:	681b      	ldr	r3, [r3, #0]
 8014bea:	687a      	ldr	r2, [r7, #4]
 8014bec:	429a      	cmp	r2, r3
 8014bee:	d101      	bne.n	8014bf4 <tcp_output+0x40>
    return ERR_OK;
 8014bf0:	2300      	movs	r3, #0
 8014bf2:	e1ce      	b.n	8014f92 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014c00:	4293      	cmp	r3, r2
 8014c02:	bf28      	it	cs
 8014c04:	4613      	movcs	r3, r2
 8014c06:	b29b      	uxth	r3, r3
 8014c08:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014c0e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8014c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c12:	2b00      	cmp	r3, #0
 8014c14:	d10b      	bne.n	8014c2e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8014c16:	687b      	ldr	r3, [r7, #4]
 8014c18:	8b5b      	ldrh	r3, [r3, #26]
 8014c1a:	f003 0302 	and.w	r3, r3, #2
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	f000 81aa 	beq.w	8014f78 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8014c24:	6878      	ldr	r0, [r7, #4]
 8014c26:	f000 fdcb 	bl	80157c0 <tcp_send_empty_ack>
 8014c2a:	4603      	mov	r3, r0
 8014c2c:	e1b1      	b.n	8014f92 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8014c2e:	6879      	ldr	r1, [r7, #4]
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	3304      	adds	r3, #4
 8014c34:	461a      	mov	r2, r3
 8014c36:	6878      	ldr	r0, [r7, #4]
 8014c38:	f7ff fc7c 	bl	8014534 <tcp_route>
 8014c3c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8014c3e:	697b      	ldr	r3, [r7, #20]
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	d102      	bne.n	8014c4a <tcp_output+0x96>
    return ERR_RTE;
 8014c44:	f06f 0303 	mvn.w	r3, #3
 8014c48:	e1a3      	b.n	8014f92 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	2b00      	cmp	r3, #0
 8014c4e:	d003      	beq.n	8014c58 <tcp_output+0xa4>
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	681b      	ldr	r3, [r3, #0]
 8014c54:	2b00      	cmp	r3, #0
 8014c56:	d111      	bne.n	8014c7c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8014c58:	697b      	ldr	r3, [r7, #20]
 8014c5a:	2b00      	cmp	r3, #0
 8014c5c:	d002      	beq.n	8014c64 <tcp_output+0xb0>
 8014c5e:	697b      	ldr	r3, [r7, #20]
 8014c60:	3304      	adds	r3, #4
 8014c62:	e000      	b.n	8014c66 <tcp_output+0xb2>
 8014c64:	2300      	movs	r3, #0
 8014c66:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8014c68:	693b      	ldr	r3, [r7, #16]
 8014c6a:	2b00      	cmp	r3, #0
 8014c6c:	d102      	bne.n	8014c74 <tcp_output+0xc0>
      return ERR_RTE;
 8014c6e:	f06f 0303 	mvn.w	r3, #3
 8014c72:	e18e      	b.n	8014f92 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8014c74:	693b      	ldr	r3, [r7, #16]
 8014c76:	681a      	ldr	r2, [r3, #0]
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8014c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c7e:	68db      	ldr	r3, [r3, #12]
 8014c80:	685b      	ldr	r3, [r3, #4]
 8014c82:	4618      	mov	r0, r3
 8014c84:	f7f9 ff41 	bl	800eb0a <lwip_htonl>
 8014c88:	4602      	mov	r2, r0
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014c8e:	1ad3      	subs	r3, r2, r3
 8014c90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014c92:	8912      	ldrh	r2, [r2, #8]
 8014c94:	4413      	add	r3, r2
 8014c96:	69ba      	ldr	r2, [r7, #24]
 8014c98:	429a      	cmp	r2, r3
 8014c9a:	d227      	bcs.n	8014cec <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014ca2:	461a      	mov	r2, r3
 8014ca4:	69bb      	ldr	r3, [r7, #24]
 8014ca6:	4293      	cmp	r3, r2
 8014ca8:	d114      	bne.n	8014cd4 <tcp_output+0x120>
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014cae:	2b00      	cmp	r3, #0
 8014cb0:	d110      	bne.n	8014cd4 <tcp_output+0x120>
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	d10b      	bne.n	8014cd4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	2200      	movs	r2, #0
 8014cc0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	2201      	movs	r2, #1
 8014cc8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	2200      	movs	r2, #0
 8014cd0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	8b5b      	ldrh	r3, [r3, #26]
 8014cd8:	f003 0302 	and.w	r3, r3, #2
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	f000 814d 	beq.w	8014f7c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8014ce2:	6878      	ldr	r0, [r7, #4]
 8014ce4:	f000 fd6c 	bl	80157c0 <tcp_send_empty_ack>
 8014ce8:	4603      	mov	r3, r0
 8014cea:	e152      	b.n	8014f92 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	2200      	movs	r2, #0
 8014cf0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014cf8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8014cfa:	6a3b      	ldr	r3, [r7, #32]
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	f000 811c 	beq.w	8014f3a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8014d02:	e002      	b.n	8014d0a <tcp_output+0x156>
 8014d04:	6a3b      	ldr	r3, [r7, #32]
 8014d06:	681b      	ldr	r3, [r3, #0]
 8014d08:	623b      	str	r3, [r7, #32]
 8014d0a:	6a3b      	ldr	r3, [r7, #32]
 8014d0c:	681b      	ldr	r3, [r3, #0]
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	d1f8      	bne.n	8014d04 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8014d12:	e112      	b.n	8014f3a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8014d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d16:	68db      	ldr	r3, [r3, #12]
 8014d18:	899b      	ldrh	r3, [r3, #12]
 8014d1a:	b29b      	uxth	r3, r3
 8014d1c:	4618      	mov	r0, r3
 8014d1e:	f7f9 fedf 	bl	800eae0 <lwip_htons>
 8014d22:	4603      	mov	r3, r0
 8014d24:	b2db      	uxtb	r3, r3
 8014d26:	f003 0304 	and.w	r3, r3, #4
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	d006      	beq.n	8014d3c <tcp_output+0x188>
 8014d2e:	4b2f      	ldr	r3, [pc, #188]	; (8014dec <tcp_output+0x238>)
 8014d30:	f240 5236 	movw	r2, #1334	; 0x536
 8014d34:	4932      	ldr	r1, [pc, #200]	; (8014e00 <tcp_output+0x24c>)
 8014d36:	482f      	ldr	r0, [pc, #188]	; (8014df4 <tcp_output+0x240>)
 8014d38:	f004 f988 	bl	801904c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	d01f      	beq.n	8014d84 <tcp_output+0x1d0>
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	8b5b      	ldrh	r3, [r3, #26]
 8014d48:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8014d4c:	2b00      	cmp	r3, #0
 8014d4e:	d119      	bne.n	8014d84 <tcp_output+0x1d0>
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014d54:	2b00      	cmp	r3, #0
 8014d56:	d00b      	beq.n	8014d70 <tcp_output+0x1bc>
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014d5c:	681b      	ldr	r3, [r3, #0]
 8014d5e:	2b00      	cmp	r3, #0
 8014d60:	d110      	bne.n	8014d84 <tcp_output+0x1d0>
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014d66:	891a      	ldrh	r2, [r3, #8]
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014d6c:	429a      	cmp	r2, r3
 8014d6e:	d209      	bcs.n	8014d84 <tcp_output+0x1d0>
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	d004      	beq.n	8014d84 <tcp_output+0x1d0>
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014d80:	2b08      	cmp	r3, #8
 8014d82:	d901      	bls.n	8014d88 <tcp_output+0x1d4>
 8014d84:	2301      	movs	r3, #1
 8014d86:	e000      	b.n	8014d8a <tcp_output+0x1d6>
 8014d88:	2300      	movs	r3, #0
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d106      	bne.n	8014d9c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	8b5b      	ldrh	r3, [r3, #26]
 8014d92:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	f000 80e4 	beq.w	8014f64 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	7d1b      	ldrb	r3, [r3, #20]
 8014da0:	2b02      	cmp	r3, #2
 8014da2:	d00d      	beq.n	8014dc0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8014da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014da6:	68db      	ldr	r3, [r3, #12]
 8014da8:	899b      	ldrh	r3, [r3, #12]
 8014daa:	b29c      	uxth	r4, r3
 8014dac:	2010      	movs	r0, #16
 8014dae:	f7f9 fe97 	bl	800eae0 <lwip_htons>
 8014db2:	4603      	mov	r3, r0
 8014db4:	461a      	mov	r2, r3
 8014db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014db8:	68db      	ldr	r3, [r3, #12]
 8014dba:	4322      	orrs	r2, r4
 8014dbc:	b292      	uxth	r2, r2
 8014dbe:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8014dc0:	697a      	ldr	r2, [r7, #20]
 8014dc2:	6879      	ldr	r1, [r7, #4]
 8014dc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014dc6:	f000 f909 	bl	8014fdc <tcp_output_segment>
 8014dca:	4603      	mov	r3, r0
 8014dcc:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8014dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014dd2:	2b00      	cmp	r3, #0
 8014dd4:	d016      	beq.n	8014e04 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	8b5b      	ldrh	r3, [r3, #26]
 8014dda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014dde:	b29a      	uxth	r2, r3
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	835a      	strh	r2, [r3, #26]
      return err;
 8014de4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014de8:	e0d3      	b.n	8014f92 <tcp_output+0x3de>
 8014dea:	bf00      	nop
 8014dec:	0801cd70 	.word	0x0801cd70
 8014df0:	0801d2b4 	.word	0x0801d2b4
 8014df4:	0801cdc4 	.word	0x0801cdc4
 8014df8:	0801d2cc 	.word	0x0801d2cc
 8014dfc:	20008044 	.word	0x20008044
 8014e00:	0801d2f4 	.word	0x0801d2f4
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8014e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e06:	681a      	ldr	r2, [r3, #0]
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	7d1b      	ldrb	r3, [r3, #20]
 8014e10:	2b02      	cmp	r3, #2
 8014e12:	d006      	beq.n	8014e22 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	8b5b      	ldrh	r3, [r3, #26]
 8014e18:	f023 0303 	bic.w	r3, r3, #3
 8014e1c:	b29a      	uxth	r2, r3
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8014e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e24:	68db      	ldr	r3, [r3, #12]
 8014e26:	685b      	ldr	r3, [r3, #4]
 8014e28:	4618      	mov	r0, r3
 8014e2a:	f7f9 fe6e 	bl	800eb0a <lwip_htonl>
 8014e2e:	4604      	mov	r4, r0
 8014e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e32:	891b      	ldrh	r3, [r3, #8]
 8014e34:	461d      	mov	r5, r3
 8014e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e38:	68db      	ldr	r3, [r3, #12]
 8014e3a:	899b      	ldrh	r3, [r3, #12]
 8014e3c:	b29b      	uxth	r3, r3
 8014e3e:	4618      	mov	r0, r3
 8014e40:	f7f9 fe4e 	bl	800eae0 <lwip_htons>
 8014e44:	4603      	mov	r3, r0
 8014e46:	b2db      	uxtb	r3, r3
 8014e48:	f003 0303 	and.w	r3, r3, #3
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	d001      	beq.n	8014e54 <tcp_output+0x2a0>
 8014e50:	2301      	movs	r3, #1
 8014e52:	e000      	b.n	8014e56 <tcp_output+0x2a2>
 8014e54:	2300      	movs	r3, #0
 8014e56:	442b      	add	r3, r5
 8014e58:	4423      	add	r3, r4
 8014e5a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014e60:	68bb      	ldr	r3, [r7, #8]
 8014e62:	1ad3      	subs	r3, r2, r3
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	da02      	bge.n	8014e6e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	68ba      	ldr	r2, [r7, #8]
 8014e6c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8014e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e70:	891b      	ldrh	r3, [r3, #8]
 8014e72:	461c      	mov	r4, r3
 8014e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e76:	68db      	ldr	r3, [r3, #12]
 8014e78:	899b      	ldrh	r3, [r3, #12]
 8014e7a:	b29b      	uxth	r3, r3
 8014e7c:	4618      	mov	r0, r3
 8014e7e:	f7f9 fe2f 	bl	800eae0 <lwip_htons>
 8014e82:	4603      	mov	r3, r0
 8014e84:	b2db      	uxtb	r3, r3
 8014e86:	f003 0303 	and.w	r3, r3, #3
 8014e8a:	2b00      	cmp	r3, #0
 8014e8c:	d001      	beq.n	8014e92 <tcp_output+0x2de>
 8014e8e:	2301      	movs	r3, #1
 8014e90:	e000      	b.n	8014e94 <tcp_output+0x2e0>
 8014e92:	2300      	movs	r3, #0
 8014e94:	4423      	add	r3, r4
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	d049      	beq.n	8014f2e <tcp_output+0x37a>
      seg->next = NULL;
 8014e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e9c:	2200      	movs	r2, #0
 8014e9e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014ea4:	2b00      	cmp	r3, #0
 8014ea6:	d105      	bne.n	8014eb4 <tcp_output+0x300>
        pcb->unacked = seg;
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014eac:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8014eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014eb0:	623b      	str	r3, [r7, #32]
 8014eb2:	e03f      	b.n	8014f34 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8014eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014eb6:	68db      	ldr	r3, [r3, #12]
 8014eb8:	685b      	ldr	r3, [r3, #4]
 8014eba:	4618      	mov	r0, r3
 8014ebc:	f7f9 fe25 	bl	800eb0a <lwip_htonl>
 8014ec0:	4604      	mov	r4, r0
 8014ec2:	6a3b      	ldr	r3, [r7, #32]
 8014ec4:	68db      	ldr	r3, [r3, #12]
 8014ec6:	685b      	ldr	r3, [r3, #4]
 8014ec8:	4618      	mov	r0, r3
 8014eca:	f7f9 fe1e 	bl	800eb0a <lwip_htonl>
 8014ece:	4603      	mov	r3, r0
 8014ed0:	1ae3      	subs	r3, r4, r3
 8014ed2:	2b00      	cmp	r3, #0
 8014ed4:	da24      	bge.n	8014f20 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	3370      	adds	r3, #112	; 0x70
 8014eda:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8014edc:	e002      	b.n	8014ee4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8014ede:	69fb      	ldr	r3, [r7, #28]
 8014ee0:	681b      	ldr	r3, [r3, #0]
 8014ee2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8014ee4:	69fb      	ldr	r3, [r7, #28]
 8014ee6:	681b      	ldr	r3, [r3, #0]
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	d011      	beq.n	8014f10 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014eec:	69fb      	ldr	r3, [r7, #28]
 8014eee:	681b      	ldr	r3, [r3, #0]
 8014ef0:	68db      	ldr	r3, [r3, #12]
 8014ef2:	685b      	ldr	r3, [r3, #4]
 8014ef4:	4618      	mov	r0, r3
 8014ef6:	f7f9 fe08 	bl	800eb0a <lwip_htonl>
 8014efa:	4604      	mov	r4, r0
 8014efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014efe:	68db      	ldr	r3, [r3, #12]
 8014f00:	685b      	ldr	r3, [r3, #4]
 8014f02:	4618      	mov	r0, r3
 8014f04:	f7f9 fe01 	bl	800eb0a <lwip_htonl>
 8014f08:	4603      	mov	r3, r0
 8014f0a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	dbe6      	blt.n	8014ede <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8014f10:	69fb      	ldr	r3, [r7, #28]
 8014f12:	681a      	ldr	r2, [r3, #0]
 8014f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f16:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8014f18:	69fb      	ldr	r3, [r7, #28]
 8014f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014f1c:	601a      	str	r2, [r3, #0]
 8014f1e:	e009      	b.n	8014f34 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8014f20:	6a3b      	ldr	r3, [r7, #32]
 8014f22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014f24:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8014f26:	6a3b      	ldr	r3, [r7, #32]
 8014f28:	681b      	ldr	r3, [r3, #0]
 8014f2a:	623b      	str	r3, [r7, #32]
 8014f2c:	e002      	b.n	8014f34 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8014f2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014f30:	f7fc fc3f 	bl	80117b2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014f38:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8014f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f3c:	2b00      	cmp	r3, #0
 8014f3e:	d012      	beq.n	8014f66 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8014f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f42:	68db      	ldr	r3, [r3, #12]
 8014f44:	685b      	ldr	r3, [r3, #4]
 8014f46:	4618      	mov	r0, r3
 8014f48:	f7f9 fddf 	bl	800eb0a <lwip_htonl>
 8014f4c:	4602      	mov	r2, r0
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014f52:	1ad3      	subs	r3, r2, r3
 8014f54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014f56:	8912      	ldrh	r2, [r2, #8]
 8014f58:	4413      	add	r3, r2
  while (seg != NULL &&
 8014f5a:	69ba      	ldr	r2, [r7, #24]
 8014f5c:	429a      	cmp	r2, r3
 8014f5e:	f4bf aed9 	bcs.w	8014d14 <tcp_output+0x160>
 8014f62:	e000      	b.n	8014f66 <tcp_output+0x3b2>
      break;
 8014f64:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014f6a:	2b00      	cmp	r3, #0
 8014f6c:	d108      	bne.n	8014f80 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	2200      	movs	r2, #0
 8014f72:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8014f76:	e004      	b.n	8014f82 <tcp_output+0x3ce>
    goto output_done;
 8014f78:	bf00      	nop
 8014f7a:	e002      	b.n	8014f82 <tcp_output+0x3ce>
    goto output_done;
 8014f7c:	bf00      	nop
 8014f7e:	e000      	b.n	8014f82 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8014f80:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	8b5b      	ldrh	r3, [r3, #26]
 8014f86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014f8a:	b29a      	uxth	r2, r3
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8014f90:	2300      	movs	r3, #0
}
 8014f92:	4618      	mov	r0, r3
 8014f94:	3728      	adds	r7, #40	; 0x28
 8014f96:	46bd      	mov	sp, r7
 8014f98:	bdb0      	pop	{r4, r5, r7, pc}
 8014f9a:	bf00      	nop

08014f9c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8014f9c:	b580      	push	{r7, lr}
 8014f9e:	b082      	sub	sp, #8
 8014fa0:	af00      	add	r7, sp, #0
 8014fa2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	2b00      	cmp	r3, #0
 8014fa8:	d106      	bne.n	8014fb8 <tcp_output_segment_busy+0x1c>
 8014faa:	4b09      	ldr	r3, [pc, #36]	; (8014fd0 <tcp_output_segment_busy+0x34>)
 8014fac:	f240 529a 	movw	r2, #1434	; 0x59a
 8014fb0:	4908      	ldr	r1, [pc, #32]	; (8014fd4 <tcp_output_segment_busy+0x38>)
 8014fb2:	4809      	ldr	r0, [pc, #36]	; (8014fd8 <tcp_output_segment_busy+0x3c>)
 8014fb4:	f004 f84a 	bl	801904c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	685b      	ldr	r3, [r3, #4]
 8014fbc:	7b9b      	ldrb	r3, [r3, #14]
 8014fbe:	2b01      	cmp	r3, #1
 8014fc0:	d001      	beq.n	8014fc6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8014fc2:	2301      	movs	r3, #1
 8014fc4:	e000      	b.n	8014fc8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8014fc6:	2300      	movs	r3, #0
}
 8014fc8:	4618      	mov	r0, r3
 8014fca:	3708      	adds	r7, #8
 8014fcc:	46bd      	mov	sp, r7
 8014fce:	bd80      	pop	{r7, pc}
 8014fd0:	0801cd70 	.word	0x0801cd70
 8014fd4:	0801d30c 	.word	0x0801d30c
 8014fd8:	0801cdc4 	.word	0x0801cdc4

08014fdc <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8014fdc:	b5b0      	push	{r4, r5, r7, lr}
 8014fde:	b08c      	sub	sp, #48	; 0x30
 8014fe0:	af04      	add	r7, sp, #16
 8014fe2:	60f8      	str	r0, [r7, #12]
 8014fe4:	60b9      	str	r1, [r7, #8]
 8014fe6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8014fe8:	68fb      	ldr	r3, [r7, #12]
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	d106      	bne.n	8014ffc <tcp_output_segment+0x20>
 8014fee:	4b64      	ldr	r3, [pc, #400]	; (8015180 <tcp_output_segment+0x1a4>)
 8014ff0:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8014ff4:	4963      	ldr	r1, [pc, #396]	; (8015184 <tcp_output_segment+0x1a8>)
 8014ff6:	4864      	ldr	r0, [pc, #400]	; (8015188 <tcp_output_segment+0x1ac>)
 8014ff8:	f004 f828 	bl	801904c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8014ffc:	68bb      	ldr	r3, [r7, #8]
 8014ffe:	2b00      	cmp	r3, #0
 8015000:	d106      	bne.n	8015010 <tcp_output_segment+0x34>
 8015002:	4b5f      	ldr	r3, [pc, #380]	; (8015180 <tcp_output_segment+0x1a4>)
 8015004:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8015008:	4960      	ldr	r1, [pc, #384]	; (801518c <tcp_output_segment+0x1b0>)
 801500a:	485f      	ldr	r0, [pc, #380]	; (8015188 <tcp_output_segment+0x1ac>)
 801500c:	f004 f81e 	bl	801904c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	2b00      	cmp	r3, #0
 8015014:	d106      	bne.n	8015024 <tcp_output_segment+0x48>
 8015016:	4b5a      	ldr	r3, [pc, #360]	; (8015180 <tcp_output_segment+0x1a4>)
 8015018:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801501c:	495c      	ldr	r1, [pc, #368]	; (8015190 <tcp_output_segment+0x1b4>)
 801501e:	485a      	ldr	r0, [pc, #360]	; (8015188 <tcp_output_segment+0x1ac>)
 8015020:	f004 f814 	bl	801904c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8015024:	68f8      	ldr	r0, [r7, #12]
 8015026:	f7ff ffb9 	bl	8014f9c <tcp_output_segment_busy>
 801502a:	4603      	mov	r3, r0
 801502c:	2b00      	cmp	r3, #0
 801502e:	d001      	beq.n	8015034 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8015030:	2300      	movs	r3, #0
 8015032:	e0a1      	b.n	8015178 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8015034:	68bb      	ldr	r3, [r7, #8]
 8015036:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015038:	68fb      	ldr	r3, [r7, #12]
 801503a:	68dc      	ldr	r4, [r3, #12]
 801503c:	4610      	mov	r0, r2
 801503e:	f7f9 fd64 	bl	800eb0a <lwip_htonl>
 8015042:	4603      	mov	r3, r0
 8015044:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8015046:	68bb      	ldr	r3, [r7, #8]
 8015048:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801504a:	68fb      	ldr	r3, [r7, #12]
 801504c:	68dc      	ldr	r4, [r3, #12]
 801504e:	4610      	mov	r0, r2
 8015050:	f7f9 fd46 	bl	800eae0 <lwip_htons>
 8015054:	4603      	mov	r3, r0
 8015056:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015058:	68bb      	ldr	r3, [r7, #8]
 801505a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801505c:	68ba      	ldr	r2, [r7, #8]
 801505e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8015060:	441a      	add	r2, r3
 8015062:	68bb      	ldr	r3, [r7, #8]
 8015064:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8015066:	68fb      	ldr	r3, [r7, #12]
 8015068:	68db      	ldr	r3, [r3, #12]
 801506a:	3314      	adds	r3, #20
 801506c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801506e:	68fb      	ldr	r3, [r7, #12]
 8015070:	7a9b      	ldrb	r3, [r3, #10]
 8015072:	f003 0301 	and.w	r3, r3, #1
 8015076:	2b00      	cmp	r3, #0
 8015078:	d015      	beq.n	80150a6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801507a:	68bb      	ldr	r3, [r7, #8]
 801507c:	3304      	adds	r3, #4
 801507e:	461a      	mov	r2, r3
 8015080:	6879      	ldr	r1, [r7, #4]
 8015082:	f44f 7006 	mov.w	r0, #536	; 0x218
 8015086:	f7fc fe8b 	bl	8011da0 <tcp_eff_send_mss_netif>
 801508a:	4603      	mov	r3, r0
 801508c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801508e:	8b7b      	ldrh	r3, [r7, #26]
 8015090:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8015094:	4618      	mov	r0, r3
 8015096:	f7f9 fd38 	bl	800eb0a <lwip_htonl>
 801509a:	4602      	mov	r2, r0
 801509c:	69fb      	ldr	r3, [r7, #28]
 801509e:	601a      	str	r2, [r3, #0]
    opts += 1;
 80150a0:	69fb      	ldr	r3, [r7, #28]
 80150a2:	3304      	adds	r3, #4
 80150a4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80150a6:	68bb      	ldr	r3, [r7, #8]
 80150a8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80150ac:	2b00      	cmp	r3, #0
 80150ae:	da02      	bge.n	80150b6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80150b0:	68bb      	ldr	r3, [r7, #8]
 80150b2:	2200      	movs	r2, #0
 80150b4:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80150b6:	68bb      	ldr	r3, [r7, #8]
 80150b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80150ba:	2b00      	cmp	r3, #0
 80150bc:	d10c      	bne.n	80150d8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80150be:	4b35      	ldr	r3, [pc, #212]	; (8015194 <tcp_output_segment+0x1b8>)
 80150c0:	681a      	ldr	r2, [r3, #0]
 80150c2:	68bb      	ldr	r3, [r7, #8]
 80150c4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80150c6:	68fb      	ldr	r3, [r7, #12]
 80150c8:	68db      	ldr	r3, [r3, #12]
 80150ca:	685b      	ldr	r3, [r3, #4]
 80150cc:	4618      	mov	r0, r3
 80150ce:	f7f9 fd1c 	bl	800eb0a <lwip_htonl>
 80150d2:	4602      	mov	r2, r0
 80150d4:	68bb      	ldr	r3, [r7, #8]
 80150d6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80150d8:	68fb      	ldr	r3, [r7, #12]
 80150da:	68da      	ldr	r2, [r3, #12]
 80150dc:	68fb      	ldr	r3, [r7, #12]
 80150de:	685b      	ldr	r3, [r3, #4]
 80150e0:	685b      	ldr	r3, [r3, #4]
 80150e2:	1ad3      	subs	r3, r2, r3
 80150e4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80150e6:	68fb      	ldr	r3, [r7, #12]
 80150e8:	685b      	ldr	r3, [r3, #4]
 80150ea:	8959      	ldrh	r1, [r3, #10]
 80150ec:	68fb      	ldr	r3, [r7, #12]
 80150ee:	685b      	ldr	r3, [r3, #4]
 80150f0:	8b3a      	ldrh	r2, [r7, #24]
 80150f2:	1a8a      	subs	r2, r1, r2
 80150f4:	b292      	uxth	r2, r2
 80150f6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80150f8:	68fb      	ldr	r3, [r7, #12]
 80150fa:	685b      	ldr	r3, [r3, #4]
 80150fc:	8919      	ldrh	r1, [r3, #8]
 80150fe:	68fb      	ldr	r3, [r7, #12]
 8015100:	685b      	ldr	r3, [r3, #4]
 8015102:	8b3a      	ldrh	r2, [r7, #24]
 8015104:	1a8a      	subs	r2, r1, r2
 8015106:	b292      	uxth	r2, r2
 8015108:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801510a:	68fb      	ldr	r3, [r7, #12]
 801510c:	685b      	ldr	r3, [r3, #4]
 801510e:	68fa      	ldr	r2, [r7, #12]
 8015110:	68d2      	ldr	r2, [r2, #12]
 8015112:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8015114:	68fb      	ldr	r3, [r7, #12]
 8015116:	68db      	ldr	r3, [r3, #12]
 8015118:	2200      	movs	r2, #0
 801511a:	741a      	strb	r2, [r3, #16]
 801511c:	2200      	movs	r2, #0
 801511e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8015120:	68fb      	ldr	r3, [r7, #12]
 8015122:	68da      	ldr	r2, [r3, #12]
 8015124:	68fb      	ldr	r3, [r7, #12]
 8015126:	7a9b      	ldrb	r3, [r3, #10]
 8015128:	f003 0301 	and.w	r3, r3, #1
 801512c:	2b00      	cmp	r3, #0
 801512e:	d001      	beq.n	8015134 <tcp_output_segment+0x158>
 8015130:	2318      	movs	r3, #24
 8015132:	e000      	b.n	8015136 <tcp_output_segment+0x15a>
 8015134:	2314      	movs	r3, #20
 8015136:	4413      	add	r3, r2
 8015138:	69fa      	ldr	r2, [r7, #28]
 801513a:	429a      	cmp	r2, r3
 801513c:	d006      	beq.n	801514c <tcp_output_segment+0x170>
 801513e:	4b10      	ldr	r3, [pc, #64]	; (8015180 <tcp_output_segment+0x1a4>)
 8015140:	f240 621c 	movw	r2, #1564	; 0x61c
 8015144:	4914      	ldr	r1, [pc, #80]	; (8015198 <tcp_output_segment+0x1bc>)
 8015146:	4810      	ldr	r0, [pc, #64]	; (8015188 <tcp_output_segment+0x1ac>)
 8015148:	f003 ff80 	bl	801904c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801514c:	68fb      	ldr	r3, [r7, #12]
 801514e:	6858      	ldr	r0, [r3, #4]
 8015150:	68b9      	ldr	r1, [r7, #8]
 8015152:	68bb      	ldr	r3, [r7, #8]
 8015154:	1d1c      	adds	r4, r3, #4
 8015156:	68bb      	ldr	r3, [r7, #8]
 8015158:	7add      	ldrb	r5, [r3, #11]
 801515a:	68bb      	ldr	r3, [r7, #8]
 801515c:	7a9b      	ldrb	r3, [r3, #10]
 801515e:	687a      	ldr	r2, [r7, #4]
 8015160:	9202      	str	r2, [sp, #8]
 8015162:	2206      	movs	r2, #6
 8015164:	9201      	str	r2, [sp, #4]
 8015166:	9300      	str	r3, [sp, #0]
 8015168:	462b      	mov	r3, r5
 801516a:	4622      	mov	r2, r4
 801516c:	f002 fa18 	bl	80175a0 <ip4_output_if>
 8015170:	4603      	mov	r3, r0
 8015172:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8015174:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015178:	4618      	mov	r0, r3
 801517a:	3720      	adds	r7, #32
 801517c:	46bd      	mov	sp, r7
 801517e:	bdb0      	pop	{r4, r5, r7, pc}
 8015180:	0801cd70 	.word	0x0801cd70
 8015184:	0801d334 	.word	0x0801d334
 8015188:	0801cdc4 	.word	0x0801cdc4
 801518c:	0801d354 	.word	0x0801d354
 8015190:	0801d374 	.word	0x0801d374
 8015194:	20007ff8 	.word	0x20007ff8
 8015198:	0801d398 	.word	0x0801d398

0801519c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801519c:	b5b0      	push	{r4, r5, r7, lr}
 801519e:	b084      	sub	sp, #16
 80151a0:	af00      	add	r7, sp, #0
 80151a2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	2b00      	cmp	r3, #0
 80151a8:	d106      	bne.n	80151b8 <tcp_rexmit_rto_prepare+0x1c>
 80151aa:	4b31      	ldr	r3, [pc, #196]	; (8015270 <tcp_rexmit_rto_prepare+0xd4>)
 80151ac:	f240 6263 	movw	r2, #1635	; 0x663
 80151b0:	4930      	ldr	r1, [pc, #192]	; (8015274 <tcp_rexmit_rto_prepare+0xd8>)
 80151b2:	4831      	ldr	r0, [pc, #196]	; (8015278 <tcp_rexmit_rto_prepare+0xdc>)
 80151b4:	f003 ff4a 	bl	801904c <iprintf>

  if (pcb->unacked == NULL) {
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80151bc:	2b00      	cmp	r3, #0
 80151be:	d102      	bne.n	80151c6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80151c0:	f06f 0305 	mvn.w	r3, #5
 80151c4:	e050      	b.n	8015268 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80151ca:	60fb      	str	r3, [r7, #12]
 80151cc:	e00b      	b.n	80151e6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80151ce:	68f8      	ldr	r0, [r7, #12]
 80151d0:	f7ff fee4 	bl	8014f9c <tcp_output_segment_busy>
 80151d4:	4603      	mov	r3, r0
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d002      	beq.n	80151e0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80151da:	f06f 0305 	mvn.w	r3, #5
 80151de:	e043      	b.n	8015268 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80151e0:	68fb      	ldr	r3, [r7, #12]
 80151e2:	681b      	ldr	r3, [r3, #0]
 80151e4:	60fb      	str	r3, [r7, #12]
 80151e6:	68fb      	ldr	r3, [r7, #12]
 80151e8:	681b      	ldr	r3, [r3, #0]
 80151ea:	2b00      	cmp	r3, #0
 80151ec:	d1ef      	bne.n	80151ce <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80151ee:	68f8      	ldr	r0, [r7, #12]
 80151f0:	f7ff fed4 	bl	8014f9c <tcp_output_segment_busy>
 80151f4:	4603      	mov	r3, r0
 80151f6:	2b00      	cmp	r3, #0
 80151f8:	d002      	beq.n	8015200 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80151fa:	f06f 0305 	mvn.w	r3, #5
 80151fe:	e033      	b.n	8015268 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8015204:	68fb      	ldr	r3, [r7, #12]
 8015206:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	2200      	movs	r2, #0
 8015214:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	8b5b      	ldrh	r3, [r3, #26]
 801521a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801521e:	b29a      	uxth	r2, r3
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8015224:	68fb      	ldr	r3, [r7, #12]
 8015226:	68db      	ldr	r3, [r3, #12]
 8015228:	685b      	ldr	r3, [r3, #4]
 801522a:	4618      	mov	r0, r3
 801522c:	f7f9 fc6d 	bl	800eb0a <lwip_htonl>
 8015230:	4604      	mov	r4, r0
 8015232:	68fb      	ldr	r3, [r7, #12]
 8015234:	891b      	ldrh	r3, [r3, #8]
 8015236:	461d      	mov	r5, r3
 8015238:	68fb      	ldr	r3, [r7, #12]
 801523a:	68db      	ldr	r3, [r3, #12]
 801523c:	899b      	ldrh	r3, [r3, #12]
 801523e:	b29b      	uxth	r3, r3
 8015240:	4618      	mov	r0, r3
 8015242:	f7f9 fc4d 	bl	800eae0 <lwip_htons>
 8015246:	4603      	mov	r3, r0
 8015248:	b2db      	uxtb	r3, r3
 801524a:	f003 0303 	and.w	r3, r3, #3
 801524e:	2b00      	cmp	r3, #0
 8015250:	d001      	beq.n	8015256 <tcp_rexmit_rto_prepare+0xba>
 8015252:	2301      	movs	r3, #1
 8015254:	e000      	b.n	8015258 <tcp_rexmit_rto_prepare+0xbc>
 8015256:	2300      	movs	r3, #0
 8015258:	442b      	add	r3, r5
 801525a:	18e2      	adds	r2, r4, r3
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	2200      	movs	r2, #0
 8015264:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8015266:	2300      	movs	r3, #0
}
 8015268:	4618      	mov	r0, r3
 801526a:	3710      	adds	r7, #16
 801526c:	46bd      	mov	sp, r7
 801526e:	bdb0      	pop	{r4, r5, r7, pc}
 8015270:	0801cd70 	.word	0x0801cd70
 8015274:	0801d3ac 	.word	0x0801d3ac
 8015278:	0801cdc4 	.word	0x0801cdc4

0801527c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801527c:	b580      	push	{r7, lr}
 801527e:	b082      	sub	sp, #8
 8015280:	af00      	add	r7, sp, #0
 8015282:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	2b00      	cmp	r3, #0
 8015288:	d106      	bne.n	8015298 <tcp_rexmit_rto_commit+0x1c>
 801528a:	4b0d      	ldr	r3, [pc, #52]	; (80152c0 <tcp_rexmit_rto_commit+0x44>)
 801528c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8015290:	490c      	ldr	r1, [pc, #48]	; (80152c4 <tcp_rexmit_rto_commit+0x48>)
 8015292:	480d      	ldr	r0, [pc, #52]	; (80152c8 <tcp_rexmit_rto_commit+0x4c>)
 8015294:	f003 feda 	bl	801904c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801529e:	2bff      	cmp	r3, #255	; 0xff
 80152a0:	d007      	beq.n	80152b2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80152a8:	3301      	adds	r3, #1
 80152aa:	b2da      	uxtb	r2, r3
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80152b2:	6878      	ldr	r0, [r7, #4]
 80152b4:	f7ff fc7e 	bl	8014bb4 <tcp_output>
}
 80152b8:	bf00      	nop
 80152ba:	3708      	adds	r7, #8
 80152bc:	46bd      	mov	sp, r7
 80152be:	bd80      	pop	{r7, pc}
 80152c0:	0801cd70 	.word	0x0801cd70
 80152c4:	0801d3d0 	.word	0x0801d3d0
 80152c8:	0801cdc4 	.word	0x0801cdc4

080152cc <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80152cc:	b580      	push	{r7, lr}
 80152ce:	b082      	sub	sp, #8
 80152d0:	af00      	add	r7, sp, #0
 80152d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80152d4:	687b      	ldr	r3, [r7, #4]
 80152d6:	2b00      	cmp	r3, #0
 80152d8:	d106      	bne.n	80152e8 <tcp_rexmit_rto+0x1c>
 80152da:	4b0a      	ldr	r3, [pc, #40]	; (8015304 <tcp_rexmit_rto+0x38>)
 80152dc:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80152e0:	4909      	ldr	r1, [pc, #36]	; (8015308 <tcp_rexmit_rto+0x3c>)
 80152e2:	480a      	ldr	r0, [pc, #40]	; (801530c <tcp_rexmit_rto+0x40>)
 80152e4:	f003 feb2 	bl	801904c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80152e8:	6878      	ldr	r0, [r7, #4]
 80152ea:	f7ff ff57 	bl	801519c <tcp_rexmit_rto_prepare>
 80152ee:	4603      	mov	r3, r0
 80152f0:	2b00      	cmp	r3, #0
 80152f2:	d102      	bne.n	80152fa <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80152f4:	6878      	ldr	r0, [r7, #4]
 80152f6:	f7ff ffc1 	bl	801527c <tcp_rexmit_rto_commit>
  }
}
 80152fa:	bf00      	nop
 80152fc:	3708      	adds	r7, #8
 80152fe:	46bd      	mov	sp, r7
 8015300:	bd80      	pop	{r7, pc}
 8015302:	bf00      	nop
 8015304:	0801cd70 	.word	0x0801cd70
 8015308:	0801d3f4 	.word	0x0801d3f4
 801530c:	0801cdc4 	.word	0x0801cdc4

08015310 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8015310:	b590      	push	{r4, r7, lr}
 8015312:	b085      	sub	sp, #20
 8015314:	af00      	add	r7, sp, #0
 8015316:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	2b00      	cmp	r3, #0
 801531c:	d106      	bne.n	801532c <tcp_rexmit+0x1c>
 801531e:	4b2f      	ldr	r3, [pc, #188]	; (80153dc <tcp_rexmit+0xcc>)
 8015320:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8015324:	492e      	ldr	r1, [pc, #184]	; (80153e0 <tcp_rexmit+0xd0>)
 8015326:	482f      	ldr	r0, [pc, #188]	; (80153e4 <tcp_rexmit+0xd4>)
 8015328:	f003 fe90 	bl	801904c <iprintf>

  if (pcb->unacked == NULL) {
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015330:	2b00      	cmp	r3, #0
 8015332:	d102      	bne.n	801533a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8015334:	f06f 0305 	mvn.w	r3, #5
 8015338:	e04c      	b.n	80153d4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801533e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8015340:	68b8      	ldr	r0, [r7, #8]
 8015342:	f7ff fe2b 	bl	8014f9c <tcp_output_segment_busy>
 8015346:	4603      	mov	r3, r0
 8015348:	2b00      	cmp	r3, #0
 801534a:	d002      	beq.n	8015352 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801534c:	f06f 0305 	mvn.w	r3, #5
 8015350:	e040      	b.n	80153d4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8015352:	68bb      	ldr	r3, [r7, #8]
 8015354:	681a      	ldr	r2, [r3, #0]
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	336c      	adds	r3, #108	; 0x6c
 801535e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015360:	e002      	b.n	8015368 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8015362:	68fb      	ldr	r3, [r7, #12]
 8015364:	681b      	ldr	r3, [r3, #0]
 8015366:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015368:	68fb      	ldr	r3, [r7, #12]
 801536a:	681b      	ldr	r3, [r3, #0]
 801536c:	2b00      	cmp	r3, #0
 801536e:	d011      	beq.n	8015394 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015370:	68fb      	ldr	r3, [r7, #12]
 8015372:	681b      	ldr	r3, [r3, #0]
 8015374:	68db      	ldr	r3, [r3, #12]
 8015376:	685b      	ldr	r3, [r3, #4]
 8015378:	4618      	mov	r0, r3
 801537a:	f7f9 fbc6 	bl	800eb0a <lwip_htonl>
 801537e:	4604      	mov	r4, r0
 8015380:	68bb      	ldr	r3, [r7, #8]
 8015382:	68db      	ldr	r3, [r3, #12]
 8015384:	685b      	ldr	r3, [r3, #4]
 8015386:	4618      	mov	r0, r3
 8015388:	f7f9 fbbf 	bl	800eb0a <lwip_htonl>
 801538c:	4603      	mov	r3, r0
 801538e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8015390:	2b00      	cmp	r3, #0
 8015392:	dbe6      	blt.n	8015362 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8015394:	68fb      	ldr	r3, [r7, #12]
 8015396:	681a      	ldr	r2, [r3, #0]
 8015398:	68bb      	ldr	r3, [r7, #8]
 801539a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801539c:	68fb      	ldr	r3, [r7, #12]
 801539e:	68ba      	ldr	r2, [r7, #8]
 80153a0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80153a2:	68bb      	ldr	r3, [r7, #8]
 80153a4:	681b      	ldr	r3, [r3, #0]
 80153a6:	2b00      	cmp	r3, #0
 80153a8:	d103      	bne.n	80153b2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	2200      	movs	r2, #0
 80153ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80153b8:	2bff      	cmp	r3, #255	; 0xff
 80153ba:	d007      	beq.n	80153cc <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80153c2:	3301      	adds	r3, #1
 80153c4:	b2da      	uxtb	r2, r3
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	2200      	movs	r2, #0
 80153d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80153d2:	2300      	movs	r3, #0
}
 80153d4:	4618      	mov	r0, r3
 80153d6:	3714      	adds	r7, #20
 80153d8:	46bd      	mov	sp, r7
 80153da:	bd90      	pop	{r4, r7, pc}
 80153dc:	0801cd70 	.word	0x0801cd70
 80153e0:	0801d410 	.word	0x0801d410
 80153e4:	0801cdc4 	.word	0x0801cdc4

080153e8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80153e8:	b580      	push	{r7, lr}
 80153ea:	b082      	sub	sp, #8
 80153ec:	af00      	add	r7, sp, #0
 80153ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	2b00      	cmp	r3, #0
 80153f4:	d106      	bne.n	8015404 <tcp_rexmit_fast+0x1c>
 80153f6:	4b2a      	ldr	r3, [pc, #168]	; (80154a0 <tcp_rexmit_fast+0xb8>)
 80153f8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80153fc:	4929      	ldr	r1, [pc, #164]	; (80154a4 <tcp_rexmit_fast+0xbc>)
 80153fe:	482a      	ldr	r0, [pc, #168]	; (80154a8 <tcp_rexmit_fast+0xc0>)
 8015400:	f003 fe24 	bl	801904c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015408:	2b00      	cmp	r3, #0
 801540a:	d045      	beq.n	8015498 <tcp_rexmit_fast+0xb0>
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	8b5b      	ldrh	r3, [r3, #26]
 8015410:	f003 0304 	and.w	r3, r3, #4
 8015414:	2b00      	cmp	r3, #0
 8015416:	d13f      	bne.n	8015498 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8015418:	6878      	ldr	r0, [r7, #4]
 801541a:	f7ff ff79 	bl	8015310 <tcp_rexmit>
 801541e:	4603      	mov	r3, r0
 8015420:	2b00      	cmp	r3, #0
 8015422:	d139      	bne.n	8015498 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015430:	4293      	cmp	r3, r2
 8015432:	bf28      	it	cs
 8015434:	4613      	movcs	r3, r2
 8015436:	b29b      	uxth	r3, r3
 8015438:	2b00      	cmp	r3, #0
 801543a:	da00      	bge.n	801543e <tcp_rexmit_fast+0x56>
 801543c:	3301      	adds	r3, #1
 801543e:	105b      	asrs	r3, r3, #1
 8015440:	b29a      	uxth	r2, r3
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801544e:	461a      	mov	r2, r3
 8015450:	687b      	ldr	r3, [r7, #4]
 8015452:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015454:	005b      	lsls	r3, r3, #1
 8015456:	429a      	cmp	r2, r3
 8015458:	d206      	bcs.n	8015468 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801545a:	687b      	ldr	r3, [r7, #4]
 801545c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801545e:	005b      	lsls	r3, r3, #1
 8015460:	b29a      	uxth	r2, r3
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801546e:	687b      	ldr	r3, [r7, #4]
 8015470:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015472:	4619      	mov	r1, r3
 8015474:	0049      	lsls	r1, r1, #1
 8015476:	440b      	add	r3, r1
 8015478:	b29b      	uxth	r3, r3
 801547a:	4413      	add	r3, r2
 801547c:	b29a      	uxth	r2, r3
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	8b5b      	ldrh	r3, [r3, #26]
 8015488:	f043 0304 	orr.w	r3, r3, #4
 801548c:	b29a      	uxth	r2, r3
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	2200      	movs	r2, #0
 8015496:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8015498:	bf00      	nop
 801549a:	3708      	adds	r7, #8
 801549c:	46bd      	mov	sp, r7
 801549e:	bd80      	pop	{r7, pc}
 80154a0:	0801cd70 	.word	0x0801cd70
 80154a4:	0801d428 	.word	0x0801d428
 80154a8:	0801cdc4 	.word	0x0801cdc4

080154ac <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80154ac:	b580      	push	{r7, lr}
 80154ae:	b086      	sub	sp, #24
 80154b0:	af00      	add	r7, sp, #0
 80154b2:	60f8      	str	r0, [r7, #12]
 80154b4:	607b      	str	r3, [r7, #4]
 80154b6:	460b      	mov	r3, r1
 80154b8:	817b      	strh	r3, [r7, #10]
 80154ba:	4613      	mov	r3, r2
 80154bc:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80154be:	897a      	ldrh	r2, [r7, #10]
 80154c0:	893b      	ldrh	r3, [r7, #8]
 80154c2:	4413      	add	r3, r2
 80154c4:	b29b      	uxth	r3, r3
 80154c6:	3314      	adds	r3, #20
 80154c8:	b29b      	uxth	r3, r3
 80154ca:	f44f 7220 	mov.w	r2, #640	; 0x280
 80154ce:	4619      	mov	r1, r3
 80154d0:	2022      	movs	r0, #34	; 0x22
 80154d2:	f7fa fc17 	bl	800fd04 <pbuf_alloc>
 80154d6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80154d8:	697b      	ldr	r3, [r7, #20]
 80154da:	2b00      	cmp	r3, #0
 80154dc:	d04d      	beq.n	801557a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80154de:	897b      	ldrh	r3, [r7, #10]
 80154e0:	3313      	adds	r3, #19
 80154e2:	697a      	ldr	r2, [r7, #20]
 80154e4:	8952      	ldrh	r2, [r2, #10]
 80154e6:	4293      	cmp	r3, r2
 80154e8:	db06      	blt.n	80154f8 <tcp_output_alloc_header_common+0x4c>
 80154ea:	4b26      	ldr	r3, [pc, #152]	; (8015584 <tcp_output_alloc_header_common+0xd8>)
 80154ec:	f240 7223 	movw	r2, #1827	; 0x723
 80154f0:	4925      	ldr	r1, [pc, #148]	; (8015588 <tcp_output_alloc_header_common+0xdc>)
 80154f2:	4826      	ldr	r0, [pc, #152]	; (801558c <tcp_output_alloc_header_common+0xe0>)
 80154f4:	f003 fdaa 	bl	801904c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80154f8:	697b      	ldr	r3, [r7, #20]
 80154fa:	685b      	ldr	r3, [r3, #4]
 80154fc:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80154fe:	8c3b      	ldrh	r3, [r7, #32]
 8015500:	4618      	mov	r0, r3
 8015502:	f7f9 faed 	bl	800eae0 <lwip_htons>
 8015506:	4603      	mov	r3, r0
 8015508:	461a      	mov	r2, r3
 801550a:	693b      	ldr	r3, [r7, #16]
 801550c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801550e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015510:	4618      	mov	r0, r3
 8015512:	f7f9 fae5 	bl	800eae0 <lwip_htons>
 8015516:	4603      	mov	r3, r0
 8015518:	461a      	mov	r2, r3
 801551a:	693b      	ldr	r3, [r7, #16]
 801551c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801551e:	693b      	ldr	r3, [r7, #16]
 8015520:	687a      	ldr	r2, [r7, #4]
 8015522:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8015524:	68f8      	ldr	r0, [r7, #12]
 8015526:	f7f9 faf0 	bl	800eb0a <lwip_htonl>
 801552a:	4602      	mov	r2, r0
 801552c:	693b      	ldr	r3, [r7, #16]
 801552e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8015530:	897b      	ldrh	r3, [r7, #10]
 8015532:	089b      	lsrs	r3, r3, #2
 8015534:	b29b      	uxth	r3, r3
 8015536:	3305      	adds	r3, #5
 8015538:	b29b      	uxth	r3, r3
 801553a:	031b      	lsls	r3, r3, #12
 801553c:	b29a      	uxth	r2, r3
 801553e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015542:	b29b      	uxth	r3, r3
 8015544:	4313      	orrs	r3, r2
 8015546:	b29b      	uxth	r3, r3
 8015548:	4618      	mov	r0, r3
 801554a:	f7f9 fac9 	bl	800eae0 <lwip_htons>
 801554e:	4603      	mov	r3, r0
 8015550:	461a      	mov	r2, r3
 8015552:	693b      	ldr	r3, [r7, #16]
 8015554:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8015556:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8015558:	4618      	mov	r0, r3
 801555a:	f7f9 fac1 	bl	800eae0 <lwip_htons>
 801555e:	4603      	mov	r3, r0
 8015560:	461a      	mov	r2, r3
 8015562:	693b      	ldr	r3, [r7, #16]
 8015564:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8015566:	693b      	ldr	r3, [r7, #16]
 8015568:	2200      	movs	r2, #0
 801556a:	741a      	strb	r2, [r3, #16]
 801556c:	2200      	movs	r2, #0
 801556e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8015570:	693b      	ldr	r3, [r7, #16]
 8015572:	2200      	movs	r2, #0
 8015574:	749a      	strb	r2, [r3, #18]
 8015576:	2200      	movs	r2, #0
 8015578:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801557a:	697b      	ldr	r3, [r7, #20]
}
 801557c:	4618      	mov	r0, r3
 801557e:	3718      	adds	r7, #24
 8015580:	46bd      	mov	sp, r7
 8015582:	bd80      	pop	{r7, pc}
 8015584:	0801cd70 	.word	0x0801cd70
 8015588:	0801d448 	.word	0x0801d448
 801558c:	0801cdc4 	.word	0x0801cdc4

08015590 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8015590:	b5b0      	push	{r4, r5, r7, lr}
 8015592:	b08a      	sub	sp, #40	; 0x28
 8015594:	af04      	add	r7, sp, #16
 8015596:	60f8      	str	r0, [r7, #12]
 8015598:	607b      	str	r3, [r7, #4]
 801559a:	460b      	mov	r3, r1
 801559c:	817b      	strh	r3, [r7, #10]
 801559e:	4613      	mov	r3, r2
 80155a0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80155a2:	68fb      	ldr	r3, [r7, #12]
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	d106      	bne.n	80155b6 <tcp_output_alloc_header+0x26>
 80155a8:	4b15      	ldr	r3, [pc, #84]	; (8015600 <tcp_output_alloc_header+0x70>)
 80155aa:	f240 7242 	movw	r2, #1858	; 0x742
 80155ae:	4915      	ldr	r1, [pc, #84]	; (8015604 <tcp_output_alloc_header+0x74>)
 80155b0:	4815      	ldr	r0, [pc, #84]	; (8015608 <tcp_output_alloc_header+0x78>)
 80155b2:	f003 fd4b 	bl	801904c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80155b6:	68fb      	ldr	r3, [r7, #12]
 80155b8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80155ba:	68fb      	ldr	r3, [r7, #12]
 80155bc:	8adb      	ldrh	r3, [r3, #22]
 80155be:	68fa      	ldr	r2, [r7, #12]
 80155c0:	8b12      	ldrh	r2, [r2, #24]
 80155c2:	68f9      	ldr	r1, [r7, #12]
 80155c4:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80155c6:	893d      	ldrh	r5, [r7, #8]
 80155c8:	897c      	ldrh	r4, [r7, #10]
 80155ca:	9103      	str	r1, [sp, #12]
 80155cc:	2110      	movs	r1, #16
 80155ce:	9102      	str	r1, [sp, #8]
 80155d0:	9201      	str	r2, [sp, #4]
 80155d2:	9300      	str	r3, [sp, #0]
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	462a      	mov	r2, r5
 80155d8:	4621      	mov	r1, r4
 80155da:	f7ff ff67 	bl	80154ac <tcp_output_alloc_header_common>
 80155de:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80155e0:	697b      	ldr	r3, [r7, #20]
 80155e2:	2b00      	cmp	r3, #0
 80155e4:	d006      	beq.n	80155f4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80155e6:	68fb      	ldr	r3, [r7, #12]
 80155e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80155ea:	68fa      	ldr	r2, [r7, #12]
 80155ec:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80155ee:	441a      	add	r2, r3
 80155f0:	68fb      	ldr	r3, [r7, #12]
 80155f2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80155f4:	697b      	ldr	r3, [r7, #20]
}
 80155f6:	4618      	mov	r0, r3
 80155f8:	3718      	adds	r7, #24
 80155fa:	46bd      	mov	sp, r7
 80155fc:	bdb0      	pop	{r4, r5, r7, pc}
 80155fe:	bf00      	nop
 8015600:	0801cd70 	.word	0x0801cd70
 8015604:	0801d478 	.word	0x0801d478
 8015608:	0801cdc4 	.word	0x0801cdc4

0801560c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801560c:	b580      	push	{r7, lr}
 801560e:	b088      	sub	sp, #32
 8015610:	af00      	add	r7, sp, #0
 8015612:	60f8      	str	r0, [r7, #12]
 8015614:	60b9      	str	r1, [r7, #8]
 8015616:	4611      	mov	r1, r2
 8015618:	461a      	mov	r2, r3
 801561a:	460b      	mov	r3, r1
 801561c:	71fb      	strb	r3, [r7, #7]
 801561e:	4613      	mov	r3, r2
 8015620:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8015622:	2300      	movs	r3, #0
 8015624:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8015626:	68bb      	ldr	r3, [r7, #8]
 8015628:	2b00      	cmp	r3, #0
 801562a:	d106      	bne.n	801563a <tcp_output_fill_options+0x2e>
 801562c:	4b12      	ldr	r3, [pc, #72]	; (8015678 <tcp_output_fill_options+0x6c>)
 801562e:	f240 7256 	movw	r2, #1878	; 0x756
 8015632:	4912      	ldr	r1, [pc, #72]	; (801567c <tcp_output_fill_options+0x70>)
 8015634:	4812      	ldr	r0, [pc, #72]	; (8015680 <tcp_output_fill_options+0x74>)
 8015636:	f003 fd09 	bl	801904c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801563a:	68bb      	ldr	r3, [r7, #8]
 801563c:	685b      	ldr	r3, [r3, #4]
 801563e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8015640:	69bb      	ldr	r3, [r7, #24]
 8015642:	3314      	adds	r3, #20
 8015644:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8015646:	8bfb      	ldrh	r3, [r7, #30]
 8015648:	009b      	lsls	r3, r3, #2
 801564a:	461a      	mov	r2, r3
 801564c:	79fb      	ldrb	r3, [r7, #7]
 801564e:	009b      	lsls	r3, r3, #2
 8015650:	f003 0304 	and.w	r3, r3, #4
 8015654:	4413      	add	r3, r2
 8015656:	3314      	adds	r3, #20
 8015658:	69ba      	ldr	r2, [r7, #24]
 801565a:	4413      	add	r3, r2
 801565c:	697a      	ldr	r2, [r7, #20]
 801565e:	429a      	cmp	r2, r3
 8015660:	d006      	beq.n	8015670 <tcp_output_fill_options+0x64>
 8015662:	4b05      	ldr	r3, [pc, #20]	; (8015678 <tcp_output_fill_options+0x6c>)
 8015664:	f240 7275 	movw	r2, #1909	; 0x775
 8015668:	4906      	ldr	r1, [pc, #24]	; (8015684 <tcp_output_fill_options+0x78>)
 801566a:	4805      	ldr	r0, [pc, #20]	; (8015680 <tcp_output_fill_options+0x74>)
 801566c:	f003 fcee 	bl	801904c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8015670:	bf00      	nop
 8015672:	3720      	adds	r7, #32
 8015674:	46bd      	mov	sp, r7
 8015676:	bd80      	pop	{r7, pc}
 8015678:	0801cd70 	.word	0x0801cd70
 801567c:	0801d4a0 	.word	0x0801d4a0
 8015680:	0801cdc4 	.word	0x0801cdc4
 8015684:	0801d398 	.word	0x0801d398

08015688 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8015688:	b580      	push	{r7, lr}
 801568a:	b08a      	sub	sp, #40	; 0x28
 801568c:	af04      	add	r7, sp, #16
 801568e:	60f8      	str	r0, [r7, #12]
 8015690:	60b9      	str	r1, [r7, #8]
 8015692:	607a      	str	r2, [r7, #4]
 8015694:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8015696:	68bb      	ldr	r3, [r7, #8]
 8015698:	2b00      	cmp	r3, #0
 801569a:	d106      	bne.n	80156aa <tcp_output_control_segment+0x22>
 801569c:	4b1c      	ldr	r3, [pc, #112]	; (8015710 <tcp_output_control_segment+0x88>)
 801569e:	f240 7287 	movw	r2, #1927	; 0x787
 80156a2:	491c      	ldr	r1, [pc, #112]	; (8015714 <tcp_output_control_segment+0x8c>)
 80156a4:	481c      	ldr	r0, [pc, #112]	; (8015718 <tcp_output_control_segment+0x90>)
 80156a6:	f003 fcd1 	bl	801904c <iprintf>

  netif = tcp_route(pcb, src, dst);
 80156aa:	683a      	ldr	r2, [r7, #0]
 80156ac:	6879      	ldr	r1, [r7, #4]
 80156ae:	68f8      	ldr	r0, [r7, #12]
 80156b0:	f7fe ff40 	bl	8014534 <tcp_route>
 80156b4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80156b6:	693b      	ldr	r3, [r7, #16]
 80156b8:	2b00      	cmp	r3, #0
 80156ba:	d102      	bne.n	80156c2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80156bc:	23fc      	movs	r3, #252	; 0xfc
 80156be:	75fb      	strb	r3, [r7, #23]
 80156c0:	e01c      	b.n	80156fc <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80156c2:	68fb      	ldr	r3, [r7, #12]
 80156c4:	2b00      	cmp	r3, #0
 80156c6:	d006      	beq.n	80156d6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80156c8:	68fb      	ldr	r3, [r7, #12]
 80156ca:	7adb      	ldrb	r3, [r3, #11]
 80156cc:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80156ce:	68fb      	ldr	r3, [r7, #12]
 80156d0:	7a9b      	ldrb	r3, [r3, #10]
 80156d2:	757b      	strb	r3, [r7, #21]
 80156d4:	e003      	b.n	80156de <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80156d6:	23ff      	movs	r3, #255	; 0xff
 80156d8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80156da:	2300      	movs	r3, #0
 80156dc:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80156de:	7dba      	ldrb	r2, [r7, #22]
 80156e0:	693b      	ldr	r3, [r7, #16]
 80156e2:	9302      	str	r3, [sp, #8]
 80156e4:	2306      	movs	r3, #6
 80156e6:	9301      	str	r3, [sp, #4]
 80156e8:	7d7b      	ldrb	r3, [r7, #21]
 80156ea:	9300      	str	r3, [sp, #0]
 80156ec:	4613      	mov	r3, r2
 80156ee:	683a      	ldr	r2, [r7, #0]
 80156f0:	6879      	ldr	r1, [r7, #4]
 80156f2:	68b8      	ldr	r0, [r7, #8]
 80156f4:	f001 ff54 	bl	80175a0 <ip4_output_if>
 80156f8:	4603      	mov	r3, r0
 80156fa:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80156fc:	68b8      	ldr	r0, [r7, #8]
 80156fe:	f7fa fde5 	bl	80102cc <pbuf_free>
  return err;
 8015702:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015706:	4618      	mov	r0, r3
 8015708:	3718      	adds	r7, #24
 801570a:	46bd      	mov	sp, r7
 801570c:	bd80      	pop	{r7, pc}
 801570e:	bf00      	nop
 8015710:	0801cd70 	.word	0x0801cd70
 8015714:	0801d4c8 	.word	0x0801d4c8
 8015718:	0801cdc4 	.word	0x0801cdc4

0801571c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801571c:	b590      	push	{r4, r7, lr}
 801571e:	b08b      	sub	sp, #44	; 0x2c
 8015720:	af04      	add	r7, sp, #16
 8015722:	60f8      	str	r0, [r7, #12]
 8015724:	60b9      	str	r1, [r7, #8]
 8015726:	607a      	str	r2, [r7, #4]
 8015728:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801572a:	683b      	ldr	r3, [r7, #0]
 801572c:	2b00      	cmp	r3, #0
 801572e:	d106      	bne.n	801573e <tcp_rst+0x22>
 8015730:	4b1f      	ldr	r3, [pc, #124]	; (80157b0 <tcp_rst+0x94>)
 8015732:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8015736:	491f      	ldr	r1, [pc, #124]	; (80157b4 <tcp_rst+0x98>)
 8015738:	481f      	ldr	r0, [pc, #124]	; (80157b8 <tcp_rst+0x9c>)
 801573a:	f003 fc87 	bl	801904c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801573e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015740:	2b00      	cmp	r3, #0
 8015742:	d106      	bne.n	8015752 <tcp_rst+0x36>
 8015744:	4b1a      	ldr	r3, [pc, #104]	; (80157b0 <tcp_rst+0x94>)
 8015746:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801574a:	491c      	ldr	r1, [pc, #112]	; (80157bc <tcp_rst+0xa0>)
 801574c:	481a      	ldr	r0, [pc, #104]	; (80157b8 <tcp_rst+0x9c>)
 801574e:	f003 fc7d 	bl	801904c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015752:	2300      	movs	r3, #0
 8015754:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8015756:	f246 0308 	movw	r3, #24584	; 0x6008
 801575a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801575c:	7dfb      	ldrb	r3, [r7, #23]
 801575e:	b29c      	uxth	r4, r3
 8015760:	68b8      	ldr	r0, [r7, #8]
 8015762:	f7f9 f9d2 	bl	800eb0a <lwip_htonl>
 8015766:	4602      	mov	r2, r0
 8015768:	8abb      	ldrh	r3, [r7, #20]
 801576a:	9303      	str	r3, [sp, #12]
 801576c:	2314      	movs	r3, #20
 801576e:	9302      	str	r3, [sp, #8]
 8015770:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8015772:	9301      	str	r3, [sp, #4]
 8015774:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8015776:	9300      	str	r3, [sp, #0]
 8015778:	4613      	mov	r3, r2
 801577a:	2200      	movs	r2, #0
 801577c:	4621      	mov	r1, r4
 801577e:	6878      	ldr	r0, [r7, #4]
 8015780:	f7ff fe94 	bl	80154ac <tcp_output_alloc_header_common>
 8015784:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8015786:	693b      	ldr	r3, [r7, #16]
 8015788:	2b00      	cmp	r3, #0
 801578a:	d00c      	beq.n	80157a6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801578c:	7dfb      	ldrb	r3, [r7, #23]
 801578e:	2200      	movs	r2, #0
 8015790:	6939      	ldr	r1, [r7, #16]
 8015792:	68f8      	ldr	r0, [r7, #12]
 8015794:	f7ff ff3a 	bl	801560c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8015798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801579a:	683a      	ldr	r2, [r7, #0]
 801579c:	6939      	ldr	r1, [r7, #16]
 801579e:	68f8      	ldr	r0, [r7, #12]
 80157a0:	f7ff ff72 	bl	8015688 <tcp_output_control_segment>
 80157a4:	e000      	b.n	80157a8 <tcp_rst+0x8c>
    return;
 80157a6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80157a8:	371c      	adds	r7, #28
 80157aa:	46bd      	mov	sp, r7
 80157ac:	bd90      	pop	{r4, r7, pc}
 80157ae:	bf00      	nop
 80157b0:	0801cd70 	.word	0x0801cd70
 80157b4:	0801d4f4 	.word	0x0801d4f4
 80157b8:	0801cdc4 	.word	0x0801cdc4
 80157bc:	0801d510 	.word	0x0801d510

080157c0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80157c0:	b590      	push	{r4, r7, lr}
 80157c2:	b087      	sub	sp, #28
 80157c4:	af00      	add	r7, sp, #0
 80157c6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80157c8:	2300      	movs	r3, #0
 80157ca:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80157cc:	2300      	movs	r3, #0
 80157ce:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	2b00      	cmp	r3, #0
 80157d4:	d106      	bne.n	80157e4 <tcp_send_empty_ack+0x24>
 80157d6:	4b28      	ldr	r3, [pc, #160]	; (8015878 <tcp_send_empty_ack+0xb8>)
 80157d8:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80157dc:	4927      	ldr	r1, [pc, #156]	; (801587c <tcp_send_empty_ack+0xbc>)
 80157de:	4828      	ldr	r0, [pc, #160]	; (8015880 <tcp_send_empty_ack+0xc0>)
 80157e0:	f003 fc34 	bl	801904c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80157e4:	7dfb      	ldrb	r3, [r7, #23]
 80157e6:	009b      	lsls	r3, r3, #2
 80157e8:	b2db      	uxtb	r3, r3
 80157ea:	f003 0304 	and.w	r3, r3, #4
 80157ee:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80157f0:	7d7b      	ldrb	r3, [r7, #21]
 80157f2:	b29c      	uxth	r4, r3
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80157f8:	4618      	mov	r0, r3
 80157fa:	f7f9 f986 	bl	800eb0a <lwip_htonl>
 80157fe:	4603      	mov	r3, r0
 8015800:	2200      	movs	r2, #0
 8015802:	4621      	mov	r1, r4
 8015804:	6878      	ldr	r0, [r7, #4]
 8015806:	f7ff fec3 	bl	8015590 <tcp_output_alloc_header>
 801580a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801580c:	693b      	ldr	r3, [r7, #16]
 801580e:	2b00      	cmp	r3, #0
 8015810:	d109      	bne.n	8015826 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	8b5b      	ldrh	r3, [r3, #26]
 8015816:	f043 0303 	orr.w	r3, r3, #3
 801581a:	b29a      	uxth	r2, r3
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8015820:	f06f 0301 	mvn.w	r3, #1
 8015824:	e023      	b.n	801586e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8015826:	7dbb      	ldrb	r3, [r7, #22]
 8015828:	7dfa      	ldrb	r2, [r7, #23]
 801582a:	6939      	ldr	r1, [r7, #16]
 801582c:	6878      	ldr	r0, [r7, #4]
 801582e:	f7ff feed 	bl	801560c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015832:	687a      	ldr	r2, [r7, #4]
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	3304      	adds	r3, #4
 8015838:	6939      	ldr	r1, [r7, #16]
 801583a:	6878      	ldr	r0, [r7, #4]
 801583c:	f7ff ff24 	bl	8015688 <tcp_output_control_segment>
 8015840:	4603      	mov	r3, r0
 8015842:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8015844:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015848:	2b00      	cmp	r3, #0
 801584a:	d007      	beq.n	801585c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	8b5b      	ldrh	r3, [r3, #26]
 8015850:	f043 0303 	orr.w	r3, r3, #3
 8015854:	b29a      	uxth	r2, r3
 8015856:	687b      	ldr	r3, [r7, #4]
 8015858:	835a      	strh	r2, [r3, #26]
 801585a:	e006      	b.n	801586a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	8b5b      	ldrh	r3, [r3, #26]
 8015860:	f023 0303 	bic.w	r3, r3, #3
 8015864:	b29a      	uxth	r2, r3
 8015866:	687b      	ldr	r3, [r7, #4]
 8015868:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801586a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801586e:	4618      	mov	r0, r3
 8015870:	371c      	adds	r7, #28
 8015872:	46bd      	mov	sp, r7
 8015874:	bd90      	pop	{r4, r7, pc}
 8015876:	bf00      	nop
 8015878:	0801cd70 	.word	0x0801cd70
 801587c:	0801d52c 	.word	0x0801d52c
 8015880:	0801cdc4 	.word	0x0801cdc4

08015884 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8015884:	b590      	push	{r4, r7, lr}
 8015886:	b087      	sub	sp, #28
 8015888:	af00      	add	r7, sp, #0
 801588a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801588c:	2300      	movs	r3, #0
 801588e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	2b00      	cmp	r3, #0
 8015894:	d106      	bne.n	80158a4 <tcp_keepalive+0x20>
 8015896:	4b18      	ldr	r3, [pc, #96]	; (80158f8 <tcp_keepalive+0x74>)
 8015898:	f640 0224 	movw	r2, #2084	; 0x824
 801589c:	4917      	ldr	r1, [pc, #92]	; (80158fc <tcp_keepalive+0x78>)
 801589e:	4818      	ldr	r0, [pc, #96]	; (8015900 <tcp_keepalive+0x7c>)
 80158a0:	f003 fbd4 	bl	801904c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80158a4:	7dfb      	ldrb	r3, [r7, #23]
 80158a6:	b29c      	uxth	r4, r3
 80158a8:	687b      	ldr	r3, [r7, #4]
 80158aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80158ac:	3b01      	subs	r3, #1
 80158ae:	4618      	mov	r0, r3
 80158b0:	f7f9 f92b 	bl	800eb0a <lwip_htonl>
 80158b4:	4603      	mov	r3, r0
 80158b6:	2200      	movs	r2, #0
 80158b8:	4621      	mov	r1, r4
 80158ba:	6878      	ldr	r0, [r7, #4]
 80158bc:	f7ff fe68 	bl	8015590 <tcp_output_alloc_header>
 80158c0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80158c2:	693b      	ldr	r3, [r7, #16]
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	d102      	bne.n	80158ce <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80158c8:	f04f 33ff 	mov.w	r3, #4294967295
 80158cc:	e010      	b.n	80158f0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80158ce:	7dfb      	ldrb	r3, [r7, #23]
 80158d0:	2200      	movs	r2, #0
 80158d2:	6939      	ldr	r1, [r7, #16]
 80158d4:	6878      	ldr	r0, [r7, #4]
 80158d6:	f7ff fe99 	bl	801560c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80158da:	687a      	ldr	r2, [r7, #4]
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	3304      	adds	r3, #4
 80158e0:	6939      	ldr	r1, [r7, #16]
 80158e2:	6878      	ldr	r0, [r7, #4]
 80158e4:	f7ff fed0 	bl	8015688 <tcp_output_control_segment>
 80158e8:	4603      	mov	r3, r0
 80158ea:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80158ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80158f0:	4618      	mov	r0, r3
 80158f2:	371c      	adds	r7, #28
 80158f4:	46bd      	mov	sp, r7
 80158f6:	bd90      	pop	{r4, r7, pc}
 80158f8:	0801cd70 	.word	0x0801cd70
 80158fc:	0801d54c 	.word	0x0801d54c
 8015900:	0801cdc4 	.word	0x0801cdc4

08015904 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8015904:	b590      	push	{r4, r7, lr}
 8015906:	b08b      	sub	sp, #44	; 0x2c
 8015908:	af00      	add	r7, sp, #0
 801590a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801590c:	2300      	movs	r3, #0
 801590e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	2b00      	cmp	r3, #0
 8015916:	d106      	bne.n	8015926 <tcp_zero_window_probe+0x22>
 8015918:	4b4c      	ldr	r3, [pc, #304]	; (8015a4c <tcp_zero_window_probe+0x148>)
 801591a:	f640 024f 	movw	r2, #2127	; 0x84f
 801591e:	494c      	ldr	r1, [pc, #304]	; (8015a50 <tcp_zero_window_probe+0x14c>)
 8015920:	484c      	ldr	r0, [pc, #304]	; (8015a54 <tcp_zero_window_probe+0x150>)
 8015922:	f003 fb93 	bl	801904c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8015926:	687b      	ldr	r3, [r7, #4]
 8015928:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801592a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801592c:	6a3b      	ldr	r3, [r7, #32]
 801592e:	2b00      	cmp	r3, #0
 8015930:	d101      	bne.n	8015936 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8015932:	2300      	movs	r3, #0
 8015934:	e086      	b.n	8015a44 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801593c:	2bff      	cmp	r3, #255	; 0xff
 801593e:	d007      	beq.n	8015950 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8015946:	3301      	adds	r3, #1
 8015948:	b2da      	uxtb	r2, r3
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8015950:	6a3b      	ldr	r3, [r7, #32]
 8015952:	68db      	ldr	r3, [r3, #12]
 8015954:	899b      	ldrh	r3, [r3, #12]
 8015956:	b29b      	uxth	r3, r3
 8015958:	4618      	mov	r0, r3
 801595a:	f7f9 f8c1 	bl	800eae0 <lwip_htons>
 801595e:	4603      	mov	r3, r0
 8015960:	b2db      	uxtb	r3, r3
 8015962:	f003 0301 	and.w	r3, r3, #1
 8015966:	2b00      	cmp	r3, #0
 8015968:	d005      	beq.n	8015976 <tcp_zero_window_probe+0x72>
 801596a:	6a3b      	ldr	r3, [r7, #32]
 801596c:	891b      	ldrh	r3, [r3, #8]
 801596e:	2b00      	cmp	r3, #0
 8015970:	d101      	bne.n	8015976 <tcp_zero_window_probe+0x72>
 8015972:	2301      	movs	r3, #1
 8015974:	e000      	b.n	8015978 <tcp_zero_window_probe+0x74>
 8015976:	2300      	movs	r3, #0
 8015978:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801597a:	7ffb      	ldrb	r3, [r7, #31]
 801597c:	2b00      	cmp	r3, #0
 801597e:	bf0c      	ite	eq
 8015980:	2301      	moveq	r3, #1
 8015982:	2300      	movne	r3, #0
 8015984:	b2db      	uxtb	r3, r3
 8015986:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8015988:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801598c:	b299      	uxth	r1, r3
 801598e:	6a3b      	ldr	r3, [r7, #32]
 8015990:	68db      	ldr	r3, [r3, #12]
 8015992:	685b      	ldr	r3, [r3, #4]
 8015994:	8bba      	ldrh	r2, [r7, #28]
 8015996:	6878      	ldr	r0, [r7, #4]
 8015998:	f7ff fdfa 	bl	8015590 <tcp_output_alloc_header>
 801599c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801599e:	69bb      	ldr	r3, [r7, #24]
 80159a0:	2b00      	cmp	r3, #0
 80159a2:	d102      	bne.n	80159aa <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80159a4:	f04f 33ff 	mov.w	r3, #4294967295
 80159a8:	e04c      	b.n	8015a44 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80159aa:	69bb      	ldr	r3, [r7, #24]
 80159ac:	685b      	ldr	r3, [r3, #4]
 80159ae:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80159b0:	7ffb      	ldrb	r3, [r7, #31]
 80159b2:	2b00      	cmp	r3, #0
 80159b4:	d011      	beq.n	80159da <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80159b6:	697b      	ldr	r3, [r7, #20]
 80159b8:	899b      	ldrh	r3, [r3, #12]
 80159ba:	b29b      	uxth	r3, r3
 80159bc:	b21b      	sxth	r3, r3
 80159be:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80159c2:	b21c      	sxth	r4, r3
 80159c4:	2011      	movs	r0, #17
 80159c6:	f7f9 f88b 	bl	800eae0 <lwip_htons>
 80159ca:	4603      	mov	r3, r0
 80159cc:	b21b      	sxth	r3, r3
 80159ce:	4323      	orrs	r3, r4
 80159d0:	b21b      	sxth	r3, r3
 80159d2:	b29a      	uxth	r2, r3
 80159d4:	697b      	ldr	r3, [r7, #20]
 80159d6:	819a      	strh	r2, [r3, #12]
 80159d8:	e010      	b.n	80159fc <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80159da:	69bb      	ldr	r3, [r7, #24]
 80159dc:	685b      	ldr	r3, [r3, #4]
 80159de:	3314      	adds	r3, #20
 80159e0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80159e2:	6a3b      	ldr	r3, [r7, #32]
 80159e4:	6858      	ldr	r0, [r3, #4]
 80159e6:	6a3b      	ldr	r3, [r7, #32]
 80159e8:	685b      	ldr	r3, [r3, #4]
 80159ea:	891a      	ldrh	r2, [r3, #8]
 80159ec:	6a3b      	ldr	r3, [r7, #32]
 80159ee:	891b      	ldrh	r3, [r3, #8]
 80159f0:	1ad3      	subs	r3, r2, r3
 80159f2:	b29b      	uxth	r3, r3
 80159f4:	2201      	movs	r2, #1
 80159f6:	6939      	ldr	r1, [r7, #16]
 80159f8:	f7fa fe52 	bl	80106a0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80159fc:	6a3b      	ldr	r3, [r7, #32]
 80159fe:	68db      	ldr	r3, [r3, #12]
 8015a00:	685b      	ldr	r3, [r3, #4]
 8015a02:	4618      	mov	r0, r3
 8015a04:	f7f9 f881 	bl	800eb0a <lwip_htonl>
 8015a08:	4603      	mov	r3, r0
 8015a0a:	3301      	adds	r3, #1
 8015a0c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015a0e:	687b      	ldr	r3, [r7, #4]
 8015a10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015a12:	68fb      	ldr	r3, [r7, #12]
 8015a14:	1ad3      	subs	r3, r2, r3
 8015a16:	2b00      	cmp	r3, #0
 8015a18:	da02      	bge.n	8015a20 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	68fa      	ldr	r2, [r7, #12]
 8015a1e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015a20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015a24:	2200      	movs	r2, #0
 8015a26:	69b9      	ldr	r1, [r7, #24]
 8015a28:	6878      	ldr	r0, [r7, #4]
 8015a2a:	f7ff fdef 	bl	801560c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015a2e:	687a      	ldr	r2, [r7, #4]
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	3304      	adds	r3, #4
 8015a34:	69b9      	ldr	r1, [r7, #24]
 8015a36:	6878      	ldr	r0, [r7, #4]
 8015a38:	f7ff fe26 	bl	8015688 <tcp_output_control_segment>
 8015a3c:	4603      	mov	r3, r0
 8015a3e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8015a40:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8015a44:	4618      	mov	r0, r3
 8015a46:	372c      	adds	r7, #44	; 0x2c
 8015a48:	46bd      	mov	sp, r7
 8015a4a:	bd90      	pop	{r4, r7, pc}
 8015a4c:	0801cd70 	.word	0x0801cd70
 8015a50:	0801d568 	.word	0x0801d568
 8015a54:	0801cdc4 	.word	0x0801cdc4

08015a58 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8015a58:	b580      	push	{r7, lr}
 8015a5a:	b082      	sub	sp, #8
 8015a5c:	af00      	add	r7, sp, #0
 8015a5e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8015a60:	f7fa ff0c 	bl	801087c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8015a64:	4b0a      	ldr	r3, [pc, #40]	; (8015a90 <tcpip_tcp_timer+0x38>)
 8015a66:	681b      	ldr	r3, [r3, #0]
 8015a68:	2b00      	cmp	r3, #0
 8015a6a:	d103      	bne.n	8015a74 <tcpip_tcp_timer+0x1c>
 8015a6c:	4b09      	ldr	r3, [pc, #36]	; (8015a94 <tcpip_tcp_timer+0x3c>)
 8015a6e:	681b      	ldr	r3, [r3, #0]
 8015a70:	2b00      	cmp	r3, #0
 8015a72:	d005      	beq.n	8015a80 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8015a74:	2200      	movs	r2, #0
 8015a76:	4908      	ldr	r1, [pc, #32]	; (8015a98 <tcpip_tcp_timer+0x40>)
 8015a78:	20fa      	movs	r0, #250	; 0xfa
 8015a7a:	f000 f8f3 	bl	8015c64 <sys_timeout>
 8015a7e:	e003      	b.n	8015a88 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8015a80:	4b06      	ldr	r3, [pc, #24]	; (8015a9c <tcpip_tcp_timer+0x44>)
 8015a82:	2200      	movs	r2, #0
 8015a84:	601a      	str	r2, [r3, #0]
  }
}
 8015a86:	bf00      	nop
 8015a88:	bf00      	nop
 8015a8a:	3708      	adds	r7, #8
 8015a8c:	46bd      	mov	sp, r7
 8015a8e:	bd80      	pop	{r7, pc}
 8015a90:	20008004 	.word	0x20008004
 8015a94:	20008008 	.word	0x20008008
 8015a98:	08015a59 	.word	0x08015a59
 8015a9c:	20008050 	.word	0x20008050

08015aa0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8015aa0:	b580      	push	{r7, lr}
 8015aa2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8015aa4:	4b0a      	ldr	r3, [pc, #40]	; (8015ad0 <tcp_timer_needed+0x30>)
 8015aa6:	681b      	ldr	r3, [r3, #0]
 8015aa8:	2b00      	cmp	r3, #0
 8015aaa:	d10f      	bne.n	8015acc <tcp_timer_needed+0x2c>
 8015aac:	4b09      	ldr	r3, [pc, #36]	; (8015ad4 <tcp_timer_needed+0x34>)
 8015aae:	681b      	ldr	r3, [r3, #0]
 8015ab0:	2b00      	cmp	r3, #0
 8015ab2:	d103      	bne.n	8015abc <tcp_timer_needed+0x1c>
 8015ab4:	4b08      	ldr	r3, [pc, #32]	; (8015ad8 <tcp_timer_needed+0x38>)
 8015ab6:	681b      	ldr	r3, [r3, #0]
 8015ab8:	2b00      	cmp	r3, #0
 8015aba:	d007      	beq.n	8015acc <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8015abc:	4b04      	ldr	r3, [pc, #16]	; (8015ad0 <tcp_timer_needed+0x30>)
 8015abe:	2201      	movs	r2, #1
 8015ac0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8015ac2:	2200      	movs	r2, #0
 8015ac4:	4905      	ldr	r1, [pc, #20]	; (8015adc <tcp_timer_needed+0x3c>)
 8015ac6:	20fa      	movs	r0, #250	; 0xfa
 8015ac8:	f000 f8cc 	bl	8015c64 <sys_timeout>
  }
}
 8015acc:	bf00      	nop
 8015ace:	bd80      	pop	{r7, pc}
 8015ad0:	20008050 	.word	0x20008050
 8015ad4:	20008004 	.word	0x20008004
 8015ad8:	20008008 	.word	0x20008008
 8015adc:	08015a59 	.word	0x08015a59

08015ae0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8015ae0:	b580      	push	{r7, lr}
 8015ae2:	b086      	sub	sp, #24
 8015ae4:	af00      	add	r7, sp, #0
 8015ae6:	60f8      	str	r0, [r7, #12]
 8015ae8:	60b9      	str	r1, [r7, #8]
 8015aea:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8015aec:	2006      	movs	r0, #6
 8015aee:	f7f9 fd27 	bl	800f540 <memp_malloc>
 8015af2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8015af4:	693b      	ldr	r3, [r7, #16]
 8015af6:	2b00      	cmp	r3, #0
 8015af8:	d109      	bne.n	8015b0e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8015afa:	693b      	ldr	r3, [r7, #16]
 8015afc:	2b00      	cmp	r3, #0
 8015afe:	d151      	bne.n	8015ba4 <sys_timeout_abs+0xc4>
 8015b00:	4b2a      	ldr	r3, [pc, #168]	; (8015bac <sys_timeout_abs+0xcc>)
 8015b02:	22be      	movs	r2, #190	; 0xbe
 8015b04:	492a      	ldr	r1, [pc, #168]	; (8015bb0 <sys_timeout_abs+0xd0>)
 8015b06:	482b      	ldr	r0, [pc, #172]	; (8015bb4 <sys_timeout_abs+0xd4>)
 8015b08:	f003 faa0 	bl	801904c <iprintf>
    return;
 8015b0c:	e04a      	b.n	8015ba4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8015b0e:	693b      	ldr	r3, [r7, #16]
 8015b10:	2200      	movs	r2, #0
 8015b12:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8015b14:	693b      	ldr	r3, [r7, #16]
 8015b16:	68ba      	ldr	r2, [r7, #8]
 8015b18:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8015b1a:	693b      	ldr	r3, [r7, #16]
 8015b1c:	687a      	ldr	r2, [r7, #4]
 8015b1e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8015b20:	693b      	ldr	r3, [r7, #16]
 8015b22:	68fa      	ldr	r2, [r7, #12]
 8015b24:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8015b26:	4b24      	ldr	r3, [pc, #144]	; (8015bb8 <sys_timeout_abs+0xd8>)
 8015b28:	681b      	ldr	r3, [r3, #0]
 8015b2a:	2b00      	cmp	r3, #0
 8015b2c:	d103      	bne.n	8015b36 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8015b2e:	4a22      	ldr	r2, [pc, #136]	; (8015bb8 <sys_timeout_abs+0xd8>)
 8015b30:	693b      	ldr	r3, [r7, #16]
 8015b32:	6013      	str	r3, [r2, #0]
    return;
 8015b34:	e037      	b.n	8015ba6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8015b36:	693b      	ldr	r3, [r7, #16]
 8015b38:	685a      	ldr	r2, [r3, #4]
 8015b3a:	4b1f      	ldr	r3, [pc, #124]	; (8015bb8 <sys_timeout_abs+0xd8>)
 8015b3c:	681b      	ldr	r3, [r3, #0]
 8015b3e:	685b      	ldr	r3, [r3, #4]
 8015b40:	1ad3      	subs	r3, r2, r3
 8015b42:	0fdb      	lsrs	r3, r3, #31
 8015b44:	f003 0301 	and.w	r3, r3, #1
 8015b48:	b2db      	uxtb	r3, r3
 8015b4a:	2b00      	cmp	r3, #0
 8015b4c:	d007      	beq.n	8015b5e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8015b4e:	4b1a      	ldr	r3, [pc, #104]	; (8015bb8 <sys_timeout_abs+0xd8>)
 8015b50:	681a      	ldr	r2, [r3, #0]
 8015b52:	693b      	ldr	r3, [r7, #16]
 8015b54:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8015b56:	4a18      	ldr	r2, [pc, #96]	; (8015bb8 <sys_timeout_abs+0xd8>)
 8015b58:	693b      	ldr	r3, [r7, #16]
 8015b5a:	6013      	str	r3, [r2, #0]
 8015b5c:	e023      	b.n	8015ba6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8015b5e:	4b16      	ldr	r3, [pc, #88]	; (8015bb8 <sys_timeout_abs+0xd8>)
 8015b60:	681b      	ldr	r3, [r3, #0]
 8015b62:	617b      	str	r3, [r7, #20]
 8015b64:	e01a      	b.n	8015b9c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8015b66:	697b      	ldr	r3, [r7, #20]
 8015b68:	681b      	ldr	r3, [r3, #0]
 8015b6a:	2b00      	cmp	r3, #0
 8015b6c:	d00b      	beq.n	8015b86 <sys_timeout_abs+0xa6>
 8015b6e:	693b      	ldr	r3, [r7, #16]
 8015b70:	685a      	ldr	r2, [r3, #4]
 8015b72:	697b      	ldr	r3, [r7, #20]
 8015b74:	681b      	ldr	r3, [r3, #0]
 8015b76:	685b      	ldr	r3, [r3, #4]
 8015b78:	1ad3      	subs	r3, r2, r3
 8015b7a:	0fdb      	lsrs	r3, r3, #31
 8015b7c:	f003 0301 	and.w	r3, r3, #1
 8015b80:	b2db      	uxtb	r3, r3
 8015b82:	2b00      	cmp	r3, #0
 8015b84:	d007      	beq.n	8015b96 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8015b86:	697b      	ldr	r3, [r7, #20]
 8015b88:	681a      	ldr	r2, [r3, #0]
 8015b8a:	693b      	ldr	r3, [r7, #16]
 8015b8c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8015b8e:	697b      	ldr	r3, [r7, #20]
 8015b90:	693a      	ldr	r2, [r7, #16]
 8015b92:	601a      	str	r2, [r3, #0]
        break;
 8015b94:	e007      	b.n	8015ba6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8015b96:	697b      	ldr	r3, [r7, #20]
 8015b98:	681b      	ldr	r3, [r3, #0]
 8015b9a:	617b      	str	r3, [r7, #20]
 8015b9c:	697b      	ldr	r3, [r7, #20]
 8015b9e:	2b00      	cmp	r3, #0
 8015ba0:	d1e1      	bne.n	8015b66 <sys_timeout_abs+0x86>
 8015ba2:	e000      	b.n	8015ba6 <sys_timeout_abs+0xc6>
    return;
 8015ba4:	bf00      	nop
      }
    }
  }
}
 8015ba6:	3718      	adds	r7, #24
 8015ba8:	46bd      	mov	sp, r7
 8015baa:	bd80      	pop	{r7, pc}
 8015bac:	0801d58c 	.word	0x0801d58c
 8015bb0:	0801d5c0 	.word	0x0801d5c0
 8015bb4:	0801d600 	.word	0x0801d600
 8015bb8:	20008048 	.word	0x20008048

08015bbc <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8015bbc:	b580      	push	{r7, lr}
 8015bbe:	b086      	sub	sp, #24
 8015bc0:	af00      	add	r7, sp, #0
 8015bc2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8015bc8:	697b      	ldr	r3, [r7, #20]
 8015bca:	685b      	ldr	r3, [r3, #4]
 8015bcc:	4798      	blx	r3

  now = sys_now();
 8015bce:	f7f8 fda7 	bl	800e720 <sys_now>
 8015bd2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8015bd4:	697b      	ldr	r3, [r7, #20]
 8015bd6:	681a      	ldr	r2, [r3, #0]
 8015bd8:	4b0f      	ldr	r3, [pc, #60]	; (8015c18 <lwip_cyclic_timer+0x5c>)
 8015bda:	681b      	ldr	r3, [r3, #0]
 8015bdc:	4413      	add	r3, r2
 8015bde:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8015be0:	68fa      	ldr	r2, [r7, #12]
 8015be2:	693b      	ldr	r3, [r7, #16]
 8015be4:	1ad3      	subs	r3, r2, r3
 8015be6:	0fdb      	lsrs	r3, r3, #31
 8015be8:	f003 0301 	and.w	r3, r3, #1
 8015bec:	b2db      	uxtb	r3, r3
 8015bee:	2b00      	cmp	r3, #0
 8015bf0:	d009      	beq.n	8015c06 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8015bf2:	697b      	ldr	r3, [r7, #20]
 8015bf4:	681a      	ldr	r2, [r3, #0]
 8015bf6:	693b      	ldr	r3, [r7, #16]
 8015bf8:	4413      	add	r3, r2
 8015bfa:	687a      	ldr	r2, [r7, #4]
 8015bfc:	4907      	ldr	r1, [pc, #28]	; (8015c1c <lwip_cyclic_timer+0x60>)
 8015bfe:	4618      	mov	r0, r3
 8015c00:	f7ff ff6e 	bl	8015ae0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8015c04:	e004      	b.n	8015c10 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8015c06:	687a      	ldr	r2, [r7, #4]
 8015c08:	4904      	ldr	r1, [pc, #16]	; (8015c1c <lwip_cyclic_timer+0x60>)
 8015c0a:	68f8      	ldr	r0, [r7, #12]
 8015c0c:	f7ff ff68 	bl	8015ae0 <sys_timeout_abs>
}
 8015c10:	bf00      	nop
 8015c12:	3718      	adds	r7, #24
 8015c14:	46bd      	mov	sp, r7
 8015c16:	bd80      	pop	{r7, pc}
 8015c18:	2000804c 	.word	0x2000804c
 8015c1c:	08015bbd 	.word	0x08015bbd

08015c20 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8015c20:	b580      	push	{r7, lr}
 8015c22:	b082      	sub	sp, #8
 8015c24:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8015c26:	2301      	movs	r3, #1
 8015c28:	607b      	str	r3, [r7, #4]
 8015c2a:	e00e      	b.n	8015c4a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8015c2c:	4a0b      	ldr	r2, [pc, #44]	; (8015c5c <sys_timeouts_init+0x3c>)
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	00db      	lsls	r3, r3, #3
 8015c38:	4a08      	ldr	r2, [pc, #32]	; (8015c5c <sys_timeouts_init+0x3c>)
 8015c3a:	4413      	add	r3, r2
 8015c3c:	461a      	mov	r2, r3
 8015c3e:	4908      	ldr	r1, [pc, #32]	; (8015c60 <sys_timeouts_init+0x40>)
 8015c40:	f000 f810 	bl	8015c64 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	3301      	adds	r3, #1
 8015c48:	607b      	str	r3, [r7, #4]
 8015c4a:	687b      	ldr	r3, [r7, #4]
 8015c4c:	2b02      	cmp	r3, #2
 8015c4e:	d9ed      	bls.n	8015c2c <sys_timeouts_init+0xc>
  }
}
 8015c50:	bf00      	nop
 8015c52:	bf00      	nop
 8015c54:	3708      	adds	r7, #8
 8015c56:	46bd      	mov	sp, r7
 8015c58:	bd80      	pop	{r7, pc}
 8015c5a:	bf00      	nop
 8015c5c:	0801e1b4 	.word	0x0801e1b4
 8015c60:	08015bbd 	.word	0x08015bbd

08015c64 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8015c64:	b580      	push	{r7, lr}
 8015c66:	b086      	sub	sp, #24
 8015c68:	af00      	add	r7, sp, #0
 8015c6a:	60f8      	str	r0, [r7, #12]
 8015c6c:	60b9      	str	r1, [r7, #8]
 8015c6e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8015c70:	68fb      	ldr	r3, [r7, #12]
 8015c72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015c76:	d306      	bcc.n	8015c86 <sys_timeout+0x22>
 8015c78:	4b0a      	ldr	r3, [pc, #40]	; (8015ca4 <sys_timeout+0x40>)
 8015c7a:	f240 1229 	movw	r2, #297	; 0x129
 8015c7e:	490a      	ldr	r1, [pc, #40]	; (8015ca8 <sys_timeout+0x44>)
 8015c80:	480a      	ldr	r0, [pc, #40]	; (8015cac <sys_timeout+0x48>)
 8015c82:	f003 f9e3 	bl	801904c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8015c86:	f7f8 fd4b 	bl	800e720 <sys_now>
 8015c8a:	4602      	mov	r2, r0
 8015c8c:	68fb      	ldr	r3, [r7, #12]
 8015c8e:	4413      	add	r3, r2
 8015c90:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8015c92:	687a      	ldr	r2, [r7, #4]
 8015c94:	68b9      	ldr	r1, [r7, #8]
 8015c96:	6978      	ldr	r0, [r7, #20]
 8015c98:	f7ff ff22 	bl	8015ae0 <sys_timeout_abs>
#endif
}
 8015c9c:	bf00      	nop
 8015c9e:	3718      	adds	r7, #24
 8015ca0:	46bd      	mov	sp, r7
 8015ca2:	bd80      	pop	{r7, pc}
 8015ca4:	0801d58c 	.word	0x0801d58c
 8015ca8:	0801d628 	.word	0x0801d628
 8015cac:	0801d600 	.word	0x0801d600

08015cb0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8015cb0:	b580      	push	{r7, lr}
 8015cb2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8015cb4:	f002 fca2 	bl	80185fc <rand>
 8015cb8:	4603      	mov	r3, r0
 8015cba:	b29b      	uxth	r3, r3
 8015cbc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8015cc0:	b29b      	uxth	r3, r3
 8015cc2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8015cc6:	b29a      	uxth	r2, r3
 8015cc8:	4b01      	ldr	r3, [pc, #4]	; (8015cd0 <udp_init+0x20>)
 8015cca:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8015ccc:	bf00      	nop
 8015cce:	bd80      	pop	{r7, pc}
 8015cd0:	2000005c 	.word	0x2000005c

08015cd4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8015cd4:	b580      	push	{r7, lr}
 8015cd6:	b084      	sub	sp, #16
 8015cd8:	af00      	add	r7, sp, #0
 8015cda:	60f8      	str	r0, [r7, #12]
 8015cdc:	60b9      	str	r1, [r7, #8]
 8015cde:	4613      	mov	r3, r2
 8015ce0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8015ce2:	68fb      	ldr	r3, [r7, #12]
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d105      	bne.n	8015cf4 <udp_input_local_match+0x20>
 8015ce8:	4b27      	ldr	r3, [pc, #156]	; (8015d88 <udp_input_local_match+0xb4>)
 8015cea:	2287      	movs	r2, #135	; 0x87
 8015cec:	4927      	ldr	r1, [pc, #156]	; (8015d8c <udp_input_local_match+0xb8>)
 8015cee:	4828      	ldr	r0, [pc, #160]	; (8015d90 <udp_input_local_match+0xbc>)
 8015cf0:	f003 f9ac 	bl	801904c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8015cf4:	68bb      	ldr	r3, [r7, #8]
 8015cf6:	2b00      	cmp	r3, #0
 8015cf8:	d105      	bne.n	8015d06 <udp_input_local_match+0x32>
 8015cfa:	4b23      	ldr	r3, [pc, #140]	; (8015d88 <udp_input_local_match+0xb4>)
 8015cfc:	2288      	movs	r2, #136	; 0x88
 8015cfe:	4925      	ldr	r1, [pc, #148]	; (8015d94 <udp_input_local_match+0xc0>)
 8015d00:	4823      	ldr	r0, [pc, #140]	; (8015d90 <udp_input_local_match+0xbc>)
 8015d02:	f003 f9a3 	bl	801904c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015d06:	68fb      	ldr	r3, [r7, #12]
 8015d08:	7a1b      	ldrb	r3, [r3, #8]
 8015d0a:	2b00      	cmp	r3, #0
 8015d0c:	d00b      	beq.n	8015d26 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8015d0e:	68fb      	ldr	r3, [r7, #12]
 8015d10:	7a1a      	ldrb	r2, [r3, #8]
 8015d12:	4b21      	ldr	r3, [pc, #132]	; (8015d98 <udp_input_local_match+0xc4>)
 8015d14:	685b      	ldr	r3, [r3, #4]
 8015d16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015d1a:	3301      	adds	r3, #1
 8015d1c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015d1e:	429a      	cmp	r2, r3
 8015d20:	d001      	beq.n	8015d26 <udp_input_local_match+0x52>
    return 0;
 8015d22:	2300      	movs	r3, #0
 8015d24:	e02b      	b.n	8015d7e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8015d26:	79fb      	ldrb	r3, [r7, #7]
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	d018      	beq.n	8015d5e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015d2c:	68fb      	ldr	r3, [r7, #12]
 8015d2e:	2b00      	cmp	r3, #0
 8015d30:	d013      	beq.n	8015d5a <udp_input_local_match+0x86>
 8015d32:	68fb      	ldr	r3, [r7, #12]
 8015d34:	681b      	ldr	r3, [r3, #0]
 8015d36:	2b00      	cmp	r3, #0
 8015d38:	d00f      	beq.n	8015d5a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8015d3a:	4b17      	ldr	r3, [pc, #92]	; (8015d98 <udp_input_local_match+0xc4>)
 8015d3c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015d42:	d00a      	beq.n	8015d5a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8015d44:	68fb      	ldr	r3, [r7, #12]
 8015d46:	681a      	ldr	r2, [r3, #0]
 8015d48:	4b13      	ldr	r3, [pc, #76]	; (8015d98 <udp_input_local_match+0xc4>)
 8015d4a:	695b      	ldr	r3, [r3, #20]
 8015d4c:	405a      	eors	r2, r3
 8015d4e:	68bb      	ldr	r3, [r7, #8]
 8015d50:	3308      	adds	r3, #8
 8015d52:	681b      	ldr	r3, [r3, #0]
 8015d54:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8015d56:	2b00      	cmp	r3, #0
 8015d58:	d110      	bne.n	8015d7c <udp_input_local_match+0xa8>
          return 1;
 8015d5a:	2301      	movs	r3, #1
 8015d5c:	e00f      	b.n	8015d7e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8015d5e:	68fb      	ldr	r3, [r7, #12]
 8015d60:	2b00      	cmp	r3, #0
 8015d62:	d009      	beq.n	8015d78 <udp_input_local_match+0xa4>
 8015d64:	68fb      	ldr	r3, [r7, #12]
 8015d66:	681b      	ldr	r3, [r3, #0]
 8015d68:	2b00      	cmp	r3, #0
 8015d6a:	d005      	beq.n	8015d78 <udp_input_local_match+0xa4>
 8015d6c:	68fb      	ldr	r3, [r7, #12]
 8015d6e:	681a      	ldr	r2, [r3, #0]
 8015d70:	4b09      	ldr	r3, [pc, #36]	; (8015d98 <udp_input_local_match+0xc4>)
 8015d72:	695b      	ldr	r3, [r3, #20]
 8015d74:	429a      	cmp	r2, r3
 8015d76:	d101      	bne.n	8015d7c <udp_input_local_match+0xa8>
        return 1;
 8015d78:	2301      	movs	r3, #1
 8015d7a:	e000      	b.n	8015d7e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8015d7c:	2300      	movs	r3, #0
}
 8015d7e:	4618      	mov	r0, r3
 8015d80:	3710      	adds	r7, #16
 8015d82:	46bd      	mov	sp, r7
 8015d84:	bd80      	pop	{r7, pc}
 8015d86:	bf00      	nop
 8015d88:	0801d674 	.word	0x0801d674
 8015d8c:	0801d6a4 	.word	0x0801d6a4
 8015d90:	0801d6c8 	.word	0x0801d6c8
 8015d94:	0801d6f0 	.word	0x0801d6f0
 8015d98:	200050dc 	.word	0x200050dc

08015d9c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8015d9c:	b590      	push	{r4, r7, lr}
 8015d9e:	b08d      	sub	sp, #52	; 0x34
 8015da0:	af02      	add	r7, sp, #8
 8015da2:	6078      	str	r0, [r7, #4]
 8015da4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8015da6:	2300      	movs	r3, #0
 8015da8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8015daa:	687b      	ldr	r3, [r7, #4]
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	d105      	bne.n	8015dbc <udp_input+0x20>
 8015db0:	4b7c      	ldr	r3, [pc, #496]	; (8015fa4 <udp_input+0x208>)
 8015db2:	22cf      	movs	r2, #207	; 0xcf
 8015db4:	497c      	ldr	r1, [pc, #496]	; (8015fa8 <udp_input+0x20c>)
 8015db6:	487d      	ldr	r0, [pc, #500]	; (8015fac <udp_input+0x210>)
 8015db8:	f003 f948 	bl	801904c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8015dbc:	683b      	ldr	r3, [r7, #0]
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	d105      	bne.n	8015dce <udp_input+0x32>
 8015dc2:	4b78      	ldr	r3, [pc, #480]	; (8015fa4 <udp_input+0x208>)
 8015dc4:	22d0      	movs	r2, #208	; 0xd0
 8015dc6:	497a      	ldr	r1, [pc, #488]	; (8015fb0 <udp_input+0x214>)
 8015dc8:	4878      	ldr	r0, [pc, #480]	; (8015fac <udp_input+0x210>)
 8015dca:	f003 f93f 	bl	801904c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8015dce:	687b      	ldr	r3, [r7, #4]
 8015dd0:	895b      	ldrh	r3, [r3, #10]
 8015dd2:	2b07      	cmp	r3, #7
 8015dd4:	d803      	bhi.n	8015dde <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8015dd6:	6878      	ldr	r0, [r7, #4]
 8015dd8:	f7fa fa78 	bl	80102cc <pbuf_free>
    goto end;
 8015ddc:	e0de      	b.n	8015f9c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8015dde:	687b      	ldr	r3, [r7, #4]
 8015de0:	685b      	ldr	r3, [r3, #4]
 8015de2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8015de4:	4b73      	ldr	r3, [pc, #460]	; (8015fb4 <udp_input+0x218>)
 8015de6:	695b      	ldr	r3, [r3, #20]
 8015de8:	4a72      	ldr	r2, [pc, #456]	; (8015fb4 <udp_input+0x218>)
 8015dea:	6812      	ldr	r2, [r2, #0]
 8015dec:	4611      	mov	r1, r2
 8015dee:	4618      	mov	r0, r3
 8015df0:	f001 fcae 	bl	8017750 <ip4_addr_isbroadcast_u32>
 8015df4:	4603      	mov	r3, r0
 8015df6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8015df8:	697b      	ldr	r3, [r7, #20]
 8015dfa:	881b      	ldrh	r3, [r3, #0]
 8015dfc:	b29b      	uxth	r3, r3
 8015dfe:	4618      	mov	r0, r3
 8015e00:	f7f8 fe6e 	bl	800eae0 <lwip_htons>
 8015e04:	4603      	mov	r3, r0
 8015e06:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8015e08:	697b      	ldr	r3, [r7, #20]
 8015e0a:	885b      	ldrh	r3, [r3, #2]
 8015e0c:	b29b      	uxth	r3, r3
 8015e0e:	4618      	mov	r0, r3
 8015e10:	f7f8 fe66 	bl	800eae0 <lwip_htons>
 8015e14:	4603      	mov	r3, r0
 8015e16:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8015e18:	2300      	movs	r3, #0
 8015e1a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8015e1c:	2300      	movs	r3, #0
 8015e1e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8015e20:	2300      	movs	r3, #0
 8015e22:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015e24:	4b64      	ldr	r3, [pc, #400]	; (8015fb8 <udp_input+0x21c>)
 8015e26:	681b      	ldr	r3, [r3, #0]
 8015e28:	627b      	str	r3, [r7, #36]	; 0x24
 8015e2a:	e054      	b.n	8015ed6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8015e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e2e:	8a5b      	ldrh	r3, [r3, #18]
 8015e30:	89fa      	ldrh	r2, [r7, #14]
 8015e32:	429a      	cmp	r2, r3
 8015e34:	d14a      	bne.n	8015ecc <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8015e36:	7cfb      	ldrb	r3, [r7, #19]
 8015e38:	461a      	mov	r2, r3
 8015e3a:	6839      	ldr	r1, [r7, #0]
 8015e3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015e3e:	f7ff ff49 	bl	8015cd4 <udp_input_local_match>
 8015e42:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8015e44:	2b00      	cmp	r3, #0
 8015e46:	d041      	beq.n	8015ecc <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8015e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e4a:	7c1b      	ldrb	r3, [r3, #16]
 8015e4c:	f003 0304 	and.w	r3, r3, #4
 8015e50:	2b00      	cmp	r3, #0
 8015e52:	d11d      	bne.n	8015e90 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8015e54:	69fb      	ldr	r3, [r7, #28]
 8015e56:	2b00      	cmp	r3, #0
 8015e58:	d102      	bne.n	8015e60 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8015e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e5c:	61fb      	str	r3, [r7, #28]
 8015e5e:	e017      	b.n	8015e90 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8015e60:	7cfb      	ldrb	r3, [r7, #19]
 8015e62:	2b00      	cmp	r3, #0
 8015e64:	d014      	beq.n	8015e90 <udp_input+0xf4>
 8015e66:	4b53      	ldr	r3, [pc, #332]	; (8015fb4 <udp_input+0x218>)
 8015e68:	695b      	ldr	r3, [r3, #20]
 8015e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015e6e:	d10f      	bne.n	8015e90 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8015e70:	69fb      	ldr	r3, [r7, #28]
 8015e72:	681a      	ldr	r2, [r3, #0]
 8015e74:	683b      	ldr	r3, [r7, #0]
 8015e76:	3304      	adds	r3, #4
 8015e78:	681b      	ldr	r3, [r3, #0]
 8015e7a:	429a      	cmp	r2, r3
 8015e7c:	d008      	beq.n	8015e90 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8015e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e80:	681a      	ldr	r2, [r3, #0]
 8015e82:	683b      	ldr	r3, [r7, #0]
 8015e84:	3304      	adds	r3, #4
 8015e86:	681b      	ldr	r3, [r3, #0]
 8015e88:	429a      	cmp	r2, r3
 8015e8a:	d101      	bne.n	8015e90 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8015e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e8e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8015e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e92:	8a9b      	ldrh	r3, [r3, #20]
 8015e94:	8a3a      	ldrh	r2, [r7, #16]
 8015e96:	429a      	cmp	r2, r3
 8015e98:	d118      	bne.n	8015ecc <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e9c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8015e9e:	2b00      	cmp	r3, #0
 8015ea0:	d005      	beq.n	8015eae <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8015ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ea4:	685a      	ldr	r2, [r3, #4]
 8015ea6:	4b43      	ldr	r3, [pc, #268]	; (8015fb4 <udp_input+0x218>)
 8015ea8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015eaa:	429a      	cmp	r2, r3
 8015eac:	d10e      	bne.n	8015ecc <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8015eae:	6a3b      	ldr	r3, [r7, #32]
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	d014      	beq.n	8015ede <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8015eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015eb6:	68da      	ldr	r2, [r3, #12]
 8015eb8:	6a3b      	ldr	r3, [r7, #32]
 8015eba:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8015ebc:	4b3e      	ldr	r3, [pc, #248]	; (8015fb8 <udp_input+0x21c>)
 8015ebe:	681a      	ldr	r2, [r3, #0]
 8015ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ec2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8015ec4:	4a3c      	ldr	r2, [pc, #240]	; (8015fb8 <udp_input+0x21c>)
 8015ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ec8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8015eca:	e008      	b.n	8015ede <udp_input+0x142>
      }
    }

    prev = pcb;
 8015ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ece:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ed2:	68db      	ldr	r3, [r3, #12]
 8015ed4:	627b      	str	r3, [r7, #36]	; 0x24
 8015ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ed8:	2b00      	cmp	r3, #0
 8015eda:	d1a7      	bne.n	8015e2c <udp_input+0x90>
 8015edc:	e000      	b.n	8015ee0 <udp_input+0x144>
        break;
 8015ede:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8015ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ee2:	2b00      	cmp	r3, #0
 8015ee4:	d101      	bne.n	8015eea <udp_input+0x14e>
    pcb = uncon_pcb;
 8015ee6:	69fb      	ldr	r3, [r7, #28]
 8015ee8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8015eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015eec:	2b00      	cmp	r3, #0
 8015eee:	d002      	beq.n	8015ef6 <udp_input+0x15a>
    for_us = 1;
 8015ef0:	2301      	movs	r3, #1
 8015ef2:	76fb      	strb	r3, [r7, #27]
 8015ef4:	e00a      	b.n	8015f0c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8015ef6:	683b      	ldr	r3, [r7, #0]
 8015ef8:	3304      	adds	r3, #4
 8015efa:	681a      	ldr	r2, [r3, #0]
 8015efc:	4b2d      	ldr	r3, [pc, #180]	; (8015fb4 <udp_input+0x218>)
 8015efe:	695b      	ldr	r3, [r3, #20]
 8015f00:	429a      	cmp	r2, r3
 8015f02:	bf0c      	ite	eq
 8015f04:	2301      	moveq	r3, #1
 8015f06:	2300      	movne	r3, #0
 8015f08:	b2db      	uxtb	r3, r3
 8015f0a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8015f0c:	7efb      	ldrb	r3, [r7, #27]
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	d041      	beq.n	8015f96 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8015f12:	2108      	movs	r1, #8
 8015f14:	6878      	ldr	r0, [r7, #4]
 8015f16:	f7fa f953 	bl	80101c0 <pbuf_remove_header>
 8015f1a:	4603      	mov	r3, r0
 8015f1c:	2b00      	cmp	r3, #0
 8015f1e:	d00a      	beq.n	8015f36 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8015f20:	4b20      	ldr	r3, [pc, #128]	; (8015fa4 <udp_input+0x208>)
 8015f22:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8015f26:	4925      	ldr	r1, [pc, #148]	; (8015fbc <udp_input+0x220>)
 8015f28:	4820      	ldr	r0, [pc, #128]	; (8015fac <udp_input+0x210>)
 8015f2a:	f003 f88f 	bl	801904c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8015f2e:	6878      	ldr	r0, [r7, #4]
 8015f30:	f7fa f9cc 	bl	80102cc <pbuf_free>
      goto end;
 8015f34:	e032      	b.n	8015f9c <udp_input+0x200>
    }

    if (pcb != NULL) {
 8015f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f38:	2b00      	cmp	r3, #0
 8015f3a:	d012      	beq.n	8015f62 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8015f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f3e:	699b      	ldr	r3, [r3, #24]
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	d00a      	beq.n	8015f5a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8015f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f46:	699c      	ldr	r4, [r3, #24]
 8015f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f4a:	69d8      	ldr	r0, [r3, #28]
 8015f4c:	8a3b      	ldrh	r3, [r7, #16]
 8015f4e:	9300      	str	r3, [sp, #0]
 8015f50:	4b1b      	ldr	r3, [pc, #108]	; (8015fc0 <udp_input+0x224>)
 8015f52:	687a      	ldr	r2, [r7, #4]
 8015f54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015f56:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8015f58:	e021      	b.n	8015f9e <udp_input+0x202>
        pbuf_free(p);
 8015f5a:	6878      	ldr	r0, [r7, #4]
 8015f5c:	f7fa f9b6 	bl	80102cc <pbuf_free>
        goto end;
 8015f60:	e01c      	b.n	8015f9c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8015f62:	7cfb      	ldrb	r3, [r7, #19]
 8015f64:	2b00      	cmp	r3, #0
 8015f66:	d112      	bne.n	8015f8e <udp_input+0x1f2>
 8015f68:	4b12      	ldr	r3, [pc, #72]	; (8015fb4 <udp_input+0x218>)
 8015f6a:	695b      	ldr	r3, [r3, #20]
 8015f6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015f70:	2be0      	cmp	r3, #224	; 0xe0
 8015f72:	d00c      	beq.n	8015f8e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8015f74:	4b0f      	ldr	r3, [pc, #60]	; (8015fb4 <udp_input+0x218>)
 8015f76:	899b      	ldrh	r3, [r3, #12]
 8015f78:	3308      	adds	r3, #8
 8015f7a:	b29b      	uxth	r3, r3
 8015f7c:	b21b      	sxth	r3, r3
 8015f7e:	4619      	mov	r1, r3
 8015f80:	6878      	ldr	r0, [r7, #4]
 8015f82:	f7fa f990 	bl	80102a6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8015f86:	2103      	movs	r1, #3
 8015f88:	6878      	ldr	r0, [r7, #4]
 8015f8a:	f001 f8b7 	bl	80170fc <icmp_dest_unreach>
      pbuf_free(p);
 8015f8e:	6878      	ldr	r0, [r7, #4]
 8015f90:	f7fa f99c 	bl	80102cc <pbuf_free>
  return;
 8015f94:	e003      	b.n	8015f9e <udp_input+0x202>
    pbuf_free(p);
 8015f96:	6878      	ldr	r0, [r7, #4]
 8015f98:	f7fa f998 	bl	80102cc <pbuf_free>
  return;
 8015f9c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8015f9e:	372c      	adds	r7, #44	; 0x2c
 8015fa0:	46bd      	mov	sp, r7
 8015fa2:	bd90      	pop	{r4, r7, pc}
 8015fa4:	0801d674 	.word	0x0801d674
 8015fa8:	0801d718 	.word	0x0801d718
 8015fac:	0801d6c8 	.word	0x0801d6c8
 8015fb0:	0801d730 	.word	0x0801d730
 8015fb4:	200050dc 	.word	0x200050dc
 8015fb8:	20008054 	.word	0x20008054
 8015fbc:	0801d74c 	.word	0x0801d74c
 8015fc0:	200050ec 	.word	0x200050ec

08015fc4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8015fc4:	b480      	push	{r7}
 8015fc6:	b085      	sub	sp, #20
 8015fc8:	af00      	add	r7, sp, #0
 8015fca:	6078      	str	r0, [r7, #4]
 8015fcc:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	d01e      	beq.n	8016012 <udp_netif_ip_addr_changed+0x4e>
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	681b      	ldr	r3, [r3, #0]
 8015fd8:	2b00      	cmp	r3, #0
 8015fda:	d01a      	beq.n	8016012 <udp_netif_ip_addr_changed+0x4e>
 8015fdc:	683b      	ldr	r3, [r7, #0]
 8015fde:	2b00      	cmp	r3, #0
 8015fe0:	d017      	beq.n	8016012 <udp_netif_ip_addr_changed+0x4e>
 8015fe2:	683b      	ldr	r3, [r7, #0]
 8015fe4:	681b      	ldr	r3, [r3, #0]
 8015fe6:	2b00      	cmp	r3, #0
 8015fe8:	d013      	beq.n	8016012 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8015fea:	4b0d      	ldr	r3, [pc, #52]	; (8016020 <udp_netif_ip_addr_changed+0x5c>)
 8015fec:	681b      	ldr	r3, [r3, #0]
 8015fee:	60fb      	str	r3, [r7, #12]
 8015ff0:	e00c      	b.n	801600c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8015ff2:	68fb      	ldr	r3, [r7, #12]
 8015ff4:	681a      	ldr	r2, [r3, #0]
 8015ff6:	687b      	ldr	r3, [r7, #4]
 8015ff8:	681b      	ldr	r3, [r3, #0]
 8015ffa:	429a      	cmp	r2, r3
 8015ffc:	d103      	bne.n	8016006 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8015ffe:	683b      	ldr	r3, [r7, #0]
 8016000:	681a      	ldr	r2, [r3, #0]
 8016002:	68fb      	ldr	r3, [r7, #12]
 8016004:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8016006:	68fb      	ldr	r3, [r7, #12]
 8016008:	68db      	ldr	r3, [r3, #12]
 801600a:	60fb      	str	r3, [r7, #12]
 801600c:	68fb      	ldr	r3, [r7, #12]
 801600e:	2b00      	cmp	r3, #0
 8016010:	d1ef      	bne.n	8015ff2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8016012:	bf00      	nop
 8016014:	3714      	adds	r7, #20
 8016016:	46bd      	mov	sp, r7
 8016018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801601c:	4770      	bx	lr
 801601e:	bf00      	nop
 8016020:	20008054 	.word	0x20008054

08016024 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8016024:	b580      	push	{r7, lr}
 8016026:	b082      	sub	sp, #8
 8016028:	af00      	add	r7, sp, #0
 801602a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801602c:	4915      	ldr	r1, [pc, #84]	; (8016084 <etharp_free_entry+0x60>)
 801602e:	687a      	ldr	r2, [r7, #4]
 8016030:	4613      	mov	r3, r2
 8016032:	005b      	lsls	r3, r3, #1
 8016034:	4413      	add	r3, r2
 8016036:	00db      	lsls	r3, r3, #3
 8016038:	440b      	add	r3, r1
 801603a:	681b      	ldr	r3, [r3, #0]
 801603c:	2b00      	cmp	r3, #0
 801603e:	d013      	beq.n	8016068 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8016040:	4910      	ldr	r1, [pc, #64]	; (8016084 <etharp_free_entry+0x60>)
 8016042:	687a      	ldr	r2, [r7, #4]
 8016044:	4613      	mov	r3, r2
 8016046:	005b      	lsls	r3, r3, #1
 8016048:	4413      	add	r3, r2
 801604a:	00db      	lsls	r3, r3, #3
 801604c:	440b      	add	r3, r1
 801604e:	681b      	ldr	r3, [r3, #0]
 8016050:	4618      	mov	r0, r3
 8016052:	f7fa f93b 	bl	80102cc <pbuf_free>
    arp_table[i].q = NULL;
 8016056:	490b      	ldr	r1, [pc, #44]	; (8016084 <etharp_free_entry+0x60>)
 8016058:	687a      	ldr	r2, [r7, #4]
 801605a:	4613      	mov	r3, r2
 801605c:	005b      	lsls	r3, r3, #1
 801605e:	4413      	add	r3, r2
 8016060:	00db      	lsls	r3, r3, #3
 8016062:	440b      	add	r3, r1
 8016064:	2200      	movs	r2, #0
 8016066:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8016068:	4906      	ldr	r1, [pc, #24]	; (8016084 <etharp_free_entry+0x60>)
 801606a:	687a      	ldr	r2, [r7, #4]
 801606c:	4613      	mov	r3, r2
 801606e:	005b      	lsls	r3, r3, #1
 8016070:	4413      	add	r3, r2
 8016072:	00db      	lsls	r3, r3, #3
 8016074:	440b      	add	r3, r1
 8016076:	3314      	adds	r3, #20
 8016078:	2200      	movs	r2, #0
 801607a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801607c:	bf00      	nop
 801607e:	3708      	adds	r7, #8
 8016080:	46bd      	mov	sp, r7
 8016082:	bd80      	pop	{r7, pc}
 8016084:	20008058 	.word	0x20008058

08016088 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8016088:	b580      	push	{r7, lr}
 801608a:	b082      	sub	sp, #8
 801608c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801608e:	2300      	movs	r3, #0
 8016090:	607b      	str	r3, [r7, #4]
 8016092:	e096      	b.n	80161c2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8016094:	494f      	ldr	r1, [pc, #316]	; (80161d4 <etharp_tmr+0x14c>)
 8016096:	687a      	ldr	r2, [r7, #4]
 8016098:	4613      	mov	r3, r2
 801609a:	005b      	lsls	r3, r3, #1
 801609c:	4413      	add	r3, r2
 801609e:	00db      	lsls	r3, r3, #3
 80160a0:	440b      	add	r3, r1
 80160a2:	3314      	adds	r3, #20
 80160a4:	781b      	ldrb	r3, [r3, #0]
 80160a6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80160a8:	78fb      	ldrb	r3, [r7, #3]
 80160aa:	2b00      	cmp	r3, #0
 80160ac:	f000 8086 	beq.w	80161bc <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80160b0:	4948      	ldr	r1, [pc, #288]	; (80161d4 <etharp_tmr+0x14c>)
 80160b2:	687a      	ldr	r2, [r7, #4]
 80160b4:	4613      	mov	r3, r2
 80160b6:	005b      	lsls	r3, r3, #1
 80160b8:	4413      	add	r3, r2
 80160ba:	00db      	lsls	r3, r3, #3
 80160bc:	440b      	add	r3, r1
 80160be:	3312      	adds	r3, #18
 80160c0:	881b      	ldrh	r3, [r3, #0]
 80160c2:	3301      	adds	r3, #1
 80160c4:	b298      	uxth	r0, r3
 80160c6:	4943      	ldr	r1, [pc, #268]	; (80161d4 <etharp_tmr+0x14c>)
 80160c8:	687a      	ldr	r2, [r7, #4]
 80160ca:	4613      	mov	r3, r2
 80160cc:	005b      	lsls	r3, r3, #1
 80160ce:	4413      	add	r3, r2
 80160d0:	00db      	lsls	r3, r3, #3
 80160d2:	440b      	add	r3, r1
 80160d4:	3312      	adds	r3, #18
 80160d6:	4602      	mov	r2, r0
 80160d8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80160da:	493e      	ldr	r1, [pc, #248]	; (80161d4 <etharp_tmr+0x14c>)
 80160dc:	687a      	ldr	r2, [r7, #4]
 80160de:	4613      	mov	r3, r2
 80160e0:	005b      	lsls	r3, r3, #1
 80160e2:	4413      	add	r3, r2
 80160e4:	00db      	lsls	r3, r3, #3
 80160e6:	440b      	add	r3, r1
 80160e8:	3312      	adds	r3, #18
 80160ea:	881b      	ldrh	r3, [r3, #0]
 80160ec:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80160f0:	d215      	bcs.n	801611e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80160f2:	4938      	ldr	r1, [pc, #224]	; (80161d4 <etharp_tmr+0x14c>)
 80160f4:	687a      	ldr	r2, [r7, #4]
 80160f6:	4613      	mov	r3, r2
 80160f8:	005b      	lsls	r3, r3, #1
 80160fa:	4413      	add	r3, r2
 80160fc:	00db      	lsls	r3, r3, #3
 80160fe:	440b      	add	r3, r1
 8016100:	3314      	adds	r3, #20
 8016102:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016104:	2b01      	cmp	r3, #1
 8016106:	d10e      	bne.n	8016126 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8016108:	4932      	ldr	r1, [pc, #200]	; (80161d4 <etharp_tmr+0x14c>)
 801610a:	687a      	ldr	r2, [r7, #4]
 801610c:	4613      	mov	r3, r2
 801610e:	005b      	lsls	r3, r3, #1
 8016110:	4413      	add	r3, r2
 8016112:	00db      	lsls	r3, r3, #3
 8016114:	440b      	add	r3, r1
 8016116:	3312      	adds	r3, #18
 8016118:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801611a:	2b04      	cmp	r3, #4
 801611c:	d903      	bls.n	8016126 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801611e:	6878      	ldr	r0, [r7, #4]
 8016120:	f7ff ff80 	bl	8016024 <etharp_free_entry>
 8016124:	e04a      	b.n	80161bc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8016126:	492b      	ldr	r1, [pc, #172]	; (80161d4 <etharp_tmr+0x14c>)
 8016128:	687a      	ldr	r2, [r7, #4]
 801612a:	4613      	mov	r3, r2
 801612c:	005b      	lsls	r3, r3, #1
 801612e:	4413      	add	r3, r2
 8016130:	00db      	lsls	r3, r3, #3
 8016132:	440b      	add	r3, r1
 8016134:	3314      	adds	r3, #20
 8016136:	781b      	ldrb	r3, [r3, #0]
 8016138:	2b03      	cmp	r3, #3
 801613a:	d10a      	bne.n	8016152 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801613c:	4925      	ldr	r1, [pc, #148]	; (80161d4 <etharp_tmr+0x14c>)
 801613e:	687a      	ldr	r2, [r7, #4]
 8016140:	4613      	mov	r3, r2
 8016142:	005b      	lsls	r3, r3, #1
 8016144:	4413      	add	r3, r2
 8016146:	00db      	lsls	r3, r3, #3
 8016148:	440b      	add	r3, r1
 801614a:	3314      	adds	r3, #20
 801614c:	2204      	movs	r2, #4
 801614e:	701a      	strb	r2, [r3, #0]
 8016150:	e034      	b.n	80161bc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8016152:	4920      	ldr	r1, [pc, #128]	; (80161d4 <etharp_tmr+0x14c>)
 8016154:	687a      	ldr	r2, [r7, #4]
 8016156:	4613      	mov	r3, r2
 8016158:	005b      	lsls	r3, r3, #1
 801615a:	4413      	add	r3, r2
 801615c:	00db      	lsls	r3, r3, #3
 801615e:	440b      	add	r3, r1
 8016160:	3314      	adds	r3, #20
 8016162:	781b      	ldrb	r3, [r3, #0]
 8016164:	2b04      	cmp	r3, #4
 8016166:	d10a      	bne.n	801617e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8016168:	491a      	ldr	r1, [pc, #104]	; (80161d4 <etharp_tmr+0x14c>)
 801616a:	687a      	ldr	r2, [r7, #4]
 801616c:	4613      	mov	r3, r2
 801616e:	005b      	lsls	r3, r3, #1
 8016170:	4413      	add	r3, r2
 8016172:	00db      	lsls	r3, r3, #3
 8016174:	440b      	add	r3, r1
 8016176:	3314      	adds	r3, #20
 8016178:	2202      	movs	r2, #2
 801617a:	701a      	strb	r2, [r3, #0]
 801617c:	e01e      	b.n	80161bc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801617e:	4915      	ldr	r1, [pc, #84]	; (80161d4 <etharp_tmr+0x14c>)
 8016180:	687a      	ldr	r2, [r7, #4]
 8016182:	4613      	mov	r3, r2
 8016184:	005b      	lsls	r3, r3, #1
 8016186:	4413      	add	r3, r2
 8016188:	00db      	lsls	r3, r3, #3
 801618a:	440b      	add	r3, r1
 801618c:	3314      	adds	r3, #20
 801618e:	781b      	ldrb	r3, [r3, #0]
 8016190:	2b01      	cmp	r3, #1
 8016192:	d113      	bne.n	80161bc <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8016194:	490f      	ldr	r1, [pc, #60]	; (80161d4 <etharp_tmr+0x14c>)
 8016196:	687a      	ldr	r2, [r7, #4]
 8016198:	4613      	mov	r3, r2
 801619a:	005b      	lsls	r3, r3, #1
 801619c:	4413      	add	r3, r2
 801619e:	00db      	lsls	r3, r3, #3
 80161a0:	440b      	add	r3, r1
 80161a2:	3308      	adds	r3, #8
 80161a4:	6818      	ldr	r0, [r3, #0]
 80161a6:	687a      	ldr	r2, [r7, #4]
 80161a8:	4613      	mov	r3, r2
 80161aa:	005b      	lsls	r3, r3, #1
 80161ac:	4413      	add	r3, r2
 80161ae:	00db      	lsls	r3, r3, #3
 80161b0:	4a08      	ldr	r2, [pc, #32]	; (80161d4 <etharp_tmr+0x14c>)
 80161b2:	4413      	add	r3, r2
 80161b4:	3304      	adds	r3, #4
 80161b6:	4619      	mov	r1, r3
 80161b8:	f000 fe6e 	bl	8016e98 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	3301      	adds	r3, #1
 80161c0:	607b      	str	r3, [r7, #4]
 80161c2:	687b      	ldr	r3, [r7, #4]
 80161c4:	2b09      	cmp	r3, #9
 80161c6:	f77f af65 	ble.w	8016094 <etharp_tmr+0xc>
      }
    }
  }
}
 80161ca:	bf00      	nop
 80161cc:	bf00      	nop
 80161ce:	3708      	adds	r7, #8
 80161d0:	46bd      	mov	sp, r7
 80161d2:	bd80      	pop	{r7, pc}
 80161d4:	20008058 	.word	0x20008058

080161d8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80161d8:	b580      	push	{r7, lr}
 80161da:	b08a      	sub	sp, #40	; 0x28
 80161dc:	af00      	add	r7, sp, #0
 80161de:	60f8      	str	r0, [r7, #12]
 80161e0:	460b      	mov	r3, r1
 80161e2:	607a      	str	r2, [r7, #4]
 80161e4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80161e6:	230a      	movs	r3, #10
 80161e8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80161ea:	230a      	movs	r3, #10
 80161ec:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80161ee:	230a      	movs	r3, #10
 80161f0:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80161f2:	2300      	movs	r3, #0
 80161f4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80161f6:	230a      	movs	r3, #10
 80161f8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80161fa:	2300      	movs	r3, #0
 80161fc:	83bb      	strh	r3, [r7, #28]
 80161fe:	2300      	movs	r3, #0
 8016200:	837b      	strh	r3, [r7, #26]
 8016202:	2300      	movs	r3, #0
 8016204:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016206:	2300      	movs	r3, #0
 8016208:	843b      	strh	r3, [r7, #32]
 801620a:	e0ae      	b.n	801636a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801620c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016210:	49a6      	ldr	r1, [pc, #664]	; (80164ac <etharp_find_entry+0x2d4>)
 8016212:	4613      	mov	r3, r2
 8016214:	005b      	lsls	r3, r3, #1
 8016216:	4413      	add	r3, r2
 8016218:	00db      	lsls	r3, r3, #3
 801621a:	440b      	add	r3, r1
 801621c:	3314      	adds	r3, #20
 801621e:	781b      	ldrb	r3, [r3, #0]
 8016220:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8016222:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016226:	2b0a      	cmp	r3, #10
 8016228:	d105      	bne.n	8016236 <etharp_find_entry+0x5e>
 801622a:	7dfb      	ldrb	r3, [r7, #23]
 801622c:	2b00      	cmp	r3, #0
 801622e:	d102      	bne.n	8016236 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8016230:	8c3b      	ldrh	r3, [r7, #32]
 8016232:	847b      	strh	r3, [r7, #34]	; 0x22
 8016234:	e095      	b.n	8016362 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8016236:	7dfb      	ldrb	r3, [r7, #23]
 8016238:	2b00      	cmp	r3, #0
 801623a:	f000 8092 	beq.w	8016362 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801623e:	7dfb      	ldrb	r3, [r7, #23]
 8016240:	2b01      	cmp	r3, #1
 8016242:	d009      	beq.n	8016258 <etharp_find_entry+0x80>
 8016244:	7dfb      	ldrb	r3, [r7, #23]
 8016246:	2b01      	cmp	r3, #1
 8016248:	d806      	bhi.n	8016258 <etharp_find_entry+0x80>
 801624a:	4b99      	ldr	r3, [pc, #612]	; (80164b0 <etharp_find_entry+0x2d8>)
 801624c:	f240 1223 	movw	r2, #291	; 0x123
 8016250:	4998      	ldr	r1, [pc, #608]	; (80164b4 <etharp_find_entry+0x2dc>)
 8016252:	4899      	ldr	r0, [pc, #612]	; (80164b8 <etharp_find_entry+0x2e0>)
 8016254:	f002 fefa 	bl	801904c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8016258:	68fb      	ldr	r3, [r7, #12]
 801625a:	2b00      	cmp	r3, #0
 801625c:	d020      	beq.n	80162a0 <etharp_find_entry+0xc8>
 801625e:	68fb      	ldr	r3, [r7, #12]
 8016260:	6819      	ldr	r1, [r3, #0]
 8016262:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016266:	4891      	ldr	r0, [pc, #580]	; (80164ac <etharp_find_entry+0x2d4>)
 8016268:	4613      	mov	r3, r2
 801626a:	005b      	lsls	r3, r3, #1
 801626c:	4413      	add	r3, r2
 801626e:	00db      	lsls	r3, r3, #3
 8016270:	4403      	add	r3, r0
 8016272:	3304      	adds	r3, #4
 8016274:	681b      	ldr	r3, [r3, #0]
 8016276:	4299      	cmp	r1, r3
 8016278:	d112      	bne.n	80162a0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	2b00      	cmp	r3, #0
 801627e:	d00c      	beq.n	801629a <etharp_find_entry+0xc2>
 8016280:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016284:	4989      	ldr	r1, [pc, #548]	; (80164ac <etharp_find_entry+0x2d4>)
 8016286:	4613      	mov	r3, r2
 8016288:	005b      	lsls	r3, r3, #1
 801628a:	4413      	add	r3, r2
 801628c:	00db      	lsls	r3, r3, #3
 801628e:	440b      	add	r3, r1
 8016290:	3308      	adds	r3, #8
 8016292:	681b      	ldr	r3, [r3, #0]
 8016294:	687a      	ldr	r2, [r7, #4]
 8016296:	429a      	cmp	r2, r3
 8016298:	d102      	bne.n	80162a0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801629a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801629e:	e100      	b.n	80164a2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80162a0:	7dfb      	ldrb	r3, [r7, #23]
 80162a2:	2b01      	cmp	r3, #1
 80162a4:	d140      	bne.n	8016328 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80162a6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80162aa:	4980      	ldr	r1, [pc, #512]	; (80164ac <etharp_find_entry+0x2d4>)
 80162ac:	4613      	mov	r3, r2
 80162ae:	005b      	lsls	r3, r3, #1
 80162b0:	4413      	add	r3, r2
 80162b2:	00db      	lsls	r3, r3, #3
 80162b4:	440b      	add	r3, r1
 80162b6:	681b      	ldr	r3, [r3, #0]
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	d01a      	beq.n	80162f2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80162bc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80162c0:	497a      	ldr	r1, [pc, #488]	; (80164ac <etharp_find_entry+0x2d4>)
 80162c2:	4613      	mov	r3, r2
 80162c4:	005b      	lsls	r3, r3, #1
 80162c6:	4413      	add	r3, r2
 80162c8:	00db      	lsls	r3, r3, #3
 80162ca:	440b      	add	r3, r1
 80162cc:	3312      	adds	r3, #18
 80162ce:	881b      	ldrh	r3, [r3, #0]
 80162d0:	8bba      	ldrh	r2, [r7, #28]
 80162d2:	429a      	cmp	r2, r3
 80162d4:	d845      	bhi.n	8016362 <etharp_find_entry+0x18a>
            old_queue = i;
 80162d6:	8c3b      	ldrh	r3, [r7, #32]
 80162d8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80162da:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80162de:	4973      	ldr	r1, [pc, #460]	; (80164ac <etharp_find_entry+0x2d4>)
 80162e0:	4613      	mov	r3, r2
 80162e2:	005b      	lsls	r3, r3, #1
 80162e4:	4413      	add	r3, r2
 80162e6:	00db      	lsls	r3, r3, #3
 80162e8:	440b      	add	r3, r1
 80162ea:	3312      	adds	r3, #18
 80162ec:	881b      	ldrh	r3, [r3, #0]
 80162ee:	83bb      	strh	r3, [r7, #28]
 80162f0:	e037      	b.n	8016362 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80162f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80162f6:	496d      	ldr	r1, [pc, #436]	; (80164ac <etharp_find_entry+0x2d4>)
 80162f8:	4613      	mov	r3, r2
 80162fa:	005b      	lsls	r3, r3, #1
 80162fc:	4413      	add	r3, r2
 80162fe:	00db      	lsls	r3, r3, #3
 8016300:	440b      	add	r3, r1
 8016302:	3312      	adds	r3, #18
 8016304:	881b      	ldrh	r3, [r3, #0]
 8016306:	8b7a      	ldrh	r2, [r7, #26]
 8016308:	429a      	cmp	r2, r3
 801630a:	d82a      	bhi.n	8016362 <etharp_find_entry+0x18a>
            old_pending = i;
 801630c:	8c3b      	ldrh	r3, [r7, #32]
 801630e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8016310:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016314:	4965      	ldr	r1, [pc, #404]	; (80164ac <etharp_find_entry+0x2d4>)
 8016316:	4613      	mov	r3, r2
 8016318:	005b      	lsls	r3, r3, #1
 801631a:	4413      	add	r3, r2
 801631c:	00db      	lsls	r3, r3, #3
 801631e:	440b      	add	r3, r1
 8016320:	3312      	adds	r3, #18
 8016322:	881b      	ldrh	r3, [r3, #0]
 8016324:	837b      	strh	r3, [r7, #26]
 8016326:	e01c      	b.n	8016362 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8016328:	7dfb      	ldrb	r3, [r7, #23]
 801632a:	2b01      	cmp	r3, #1
 801632c:	d919      	bls.n	8016362 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801632e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016332:	495e      	ldr	r1, [pc, #376]	; (80164ac <etharp_find_entry+0x2d4>)
 8016334:	4613      	mov	r3, r2
 8016336:	005b      	lsls	r3, r3, #1
 8016338:	4413      	add	r3, r2
 801633a:	00db      	lsls	r3, r3, #3
 801633c:	440b      	add	r3, r1
 801633e:	3312      	adds	r3, #18
 8016340:	881b      	ldrh	r3, [r3, #0]
 8016342:	8b3a      	ldrh	r2, [r7, #24]
 8016344:	429a      	cmp	r2, r3
 8016346:	d80c      	bhi.n	8016362 <etharp_find_entry+0x18a>
            old_stable = i;
 8016348:	8c3b      	ldrh	r3, [r7, #32]
 801634a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801634c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016350:	4956      	ldr	r1, [pc, #344]	; (80164ac <etharp_find_entry+0x2d4>)
 8016352:	4613      	mov	r3, r2
 8016354:	005b      	lsls	r3, r3, #1
 8016356:	4413      	add	r3, r2
 8016358:	00db      	lsls	r3, r3, #3
 801635a:	440b      	add	r3, r1
 801635c:	3312      	adds	r3, #18
 801635e:	881b      	ldrh	r3, [r3, #0]
 8016360:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016362:	8c3b      	ldrh	r3, [r7, #32]
 8016364:	3301      	adds	r3, #1
 8016366:	b29b      	uxth	r3, r3
 8016368:	843b      	strh	r3, [r7, #32]
 801636a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801636e:	2b09      	cmp	r3, #9
 8016370:	f77f af4c 	ble.w	801620c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8016374:	7afb      	ldrb	r3, [r7, #11]
 8016376:	f003 0302 	and.w	r3, r3, #2
 801637a:	2b00      	cmp	r3, #0
 801637c:	d108      	bne.n	8016390 <etharp_find_entry+0x1b8>
 801637e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016382:	2b0a      	cmp	r3, #10
 8016384:	d107      	bne.n	8016396 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8016386:	7afb      	ldrb	r3, [r7, #11]
 8016388:	f003 0301 	and.w	r3, r3, #1
 801638c:	2b00      	cmp	r3, #0
 801638e:	d102      	bne.n	8016396 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8016390:	f04f 33ff 	mov.w	r3, #4294967295
 8016394:	e085      	b.n	80164a2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8016396:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801639a:	2b09      	cmp	r3, #9
 801639c:	dc02      	bgt.n	80163a4 <etharp_find_entry+0x1cc>
    i = empty;
 801639e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80163a0:	843b      	strh	r3, [r7, #32]
 80163a2:	e039      	b.n	8016418 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80163a4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80163a8:	2b09      	cmp	r3, #9
 80163aa:	dc14      	bgt.n	80163d6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80163ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80163ae:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80163b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80163b4:	493d      	ldr	r1, [pc, #244]	; (80164ac <etharp_find_entry+0x2d4>)
 80163b6:	4613      	mov	r3, r2
 80163b8:	005b      	lsls	r3, r3, #1
 80163ba:	4413      	add	r3, r2
 80163bc:	00db      	lsls	r3, r3, #3
 80163be:	440b      	add	r3, r1
 80163c0:	681b      	ldr	r3, [r3, #0]
 80163c2:	2b00      	cmp	r3, #0
 80163c4:	d018      	beq.n	80163f8 <etharp_find_entry+0x220>
 80163c6:	4b3a      	ldr	r3, [pc, #232]	; (80164b0 <etharp_find_entry+0x2d8>)
 80163c8:	f240 126d 	movw	r2, #365	; 0x16d
 80163cc:	493b      	ldr	r1, [pc, #236]	; (80164bc <etharp_find_entry+0x2e4>)
 80163ce:	483a      	ldr	r0, [pc, #232]	; (80164b8 <etharp_find_entry+0x2e0>)
 80163d0:	f002 fe3c 	bl	801904c <iprintf>
 80163d4:	e010      	b.n	80163f8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80163d6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80163da:	2b09      	cmp	r3, #9
 80163dc:	dc02      	bgt.n	80163e4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80163de:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80163e0:	843b      	strh	r3, [r7, #32]
 80163e2:	e009      	b.n	80163f8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80163e4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80163e8:	2b09      	cmp	r3, #9
 80163ea:	dc02      	bgt.n	80163f2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80163ec:	8bfb      	ldrh	r3, [r7, #30]
 80163ee:	843b      	strh	r3, [r7, #32]
 80163f0:	e002      	b.n	80163f8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80163f2:	f04f 33ff 	mov.w	r3, #4294967295
 80163f6:	e054      	b.n	80164a2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80163f8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80163fc:	2b09      	cmp	r3, #9
 80163fe:	dd06      	ble.n	801640e <etharp_find_entry+0x236>
 8016400:	4b2b      	ldr	r3, [pc, #172]	; (80164b0 <etharp_find_entry+0x2d8>)
 8016402:	f240 127f 	movw	r2, #383	; 0x17f
 8016406:	492e      	ldr	r1, [pc, #184]	; (80164c0 <etharp_find_entry+0x2e8>)
 8016408:	482b      	ldr	r0, [pc, #172]	; (80164b8 <etharp_find_entry+0x2e0>)
 801640a:	f002 fe1f 	bl	801904c <iprintf>
    etharp_free_entry(i);
 801640e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016412:	4618      	mov	r0, r3
 8016414:	f7ff fe06 	bl	8016024 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016418:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801641c:	2b09      	cmp	r3, #9
 801641e:	dd06      	ble.n	801642e <etharp_find_entry+0x256>
 8016420:	4b23      	ldr	r3, [pc, #140]	; (80164b0 <etharp_find_entry+0x2d8>)
 8016422:	f240 1283 	movw	r2, #387	; 0x183
 8016426:	4926      	ldr	r1, [pc, #152]	; (80164c0 <etharp_find_entry+0x2e8>)
 8016428:	4823      	ldr	r0, [pc, #140]	; (80164b8 <etharp_find_entry+0x2e0>)
 801642a:	f002 fe0f 	bl	801904c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801642e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016432:	491e      	ldr	r1, [pc, #120]	; (80164ac <etharp_find_entry+0x2d4>)
 8016434:	4613      	mov	r3, r2
 8016436:	005b      	lsls	r3, r3, #1
 8016438:	4413      	add	r3, r2
 801643a:	00db      	lsls	r3, r3, #3
 801643c:	440b      	add	r3, r1
 801643e:	3314      	adds	r3, #20
 8016440:	781b      	ldrb	r3, [r3, #0]
 8016442:	2b00      	cmp	r3, #0
 8016444:	d006      	beq.n	8016454 <etharp_find_entry+0x27c>
 8016446:	4b1a      	ldr	r3, [pc, #104]	; (80164b0 <etharp_find_entry+0x2d8>)
 8016448:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801644c:	491d      	ldr	r1, [pc, #116]	; (80164c4 <etharp_find_entry+0x2ec>)
 801644e:	481a      	ldr	r0, [pc, #104]	; (80164b8 <etharp_find_entry+0x2e0>)
 8016450:	f002 fdfc 	bl	801904c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8016454:	68fb      	ldr	r3, [r7, #12]
 8016456:	2b00      	cmp	r3, #0
 8016458:	d00b      	beq.n	8016472 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801645a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801645e:	68fb      	ldr	r3, [r7, #12]
 8016460:	6819      	ldr	r1, [r3, #0]
 8016462:	4812      	ldr	r0, [pc, #72]	; (80164ac <etharp_find_entry+0x2d4>)
 8016464:	4613      	mov	r3, r2
 8016466:	005b      	lsls	r3, r3, #1
 8016468:	4413      	add	r3, r2
 801646a:	00db      	lsls	r3, r3, #3
 801646c:	4403      	add	r3, r0
 801646e:	3304      	adds	r3, #4
 8016470:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8016472:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016476:	490d      	ldr	r1, [pc, #52]	; (80164ac <etharp_find_entry+0x2d4>)
 8016478:	4613      	mov	r3, r2
 801647a:	005b      	lsls	r3, r3, #1
 801647c:	4413      	add	r3, r2
 801647e:	00db      	lsls	r3, r3, #3
 8016480:	440b      	add	r3, r1
 8016482:	3312      	adds	r3, #18
 8016484:	2200      	movs	r2, #0
 8016486:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8016488:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801648c:	4907      	ldr	r1, [pc, #28]	; (80164ac <etharp_find_entry+0x2d4>)
 801648e:	4613      	mov	r3, r2
 8016490:	005b      	lsls	r3, r3, #1
 8016492:	4413      	add	r3, r2
 8016494:	00db      	lsls	r3, r3, #3
 8016496:	440b      	add	r3, r1
 8016498:	3308      	adds	r3, #8
 801649a:	687a      	ldr	r2, [r7, #4]
 801649c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801649e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80164a2:	4618      	mov	r0, r3
 80164a4:	3728      	adds	r7, #40	; 0x28
 80164a6:	46bd      	mov	sp, r7
 80164a8:	bd80      	pop	{r7, pc}
 80164aa:	bf00      	nop
 80164ac:	20008058 	.word	0x20008058
 80164b0:	0801d9d8 	.word	0x0801d9d8
 80164b4:	0801da10 	.word	0x0801da10
 80164b8:	0801da50 	.word	0x0801da50
 80164bc:	0801da78 	.word	0x0801da78
 80164c0:	0801da90 	.word	0x0801da90
 80164c4:	0801daa4 	.word	0x0801daa4

080164c8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80164c8:	b580      	push	{r7, lr}
 80164ca:	b088      	sub	sp, #32
 80164cc:	af02      	add	r7, sp, #8
 80164ce:	60f8      	str	r0, [r7, #12]
 80164d0:	60b9      	str	r1, [r7, #8]
 80164d2:	607a      	str	r2, [r7, #4]
 80164d4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80164d6:	68fb      	ldr	r3, [r7, #12]
 80164d8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80164dc:	2b06      	cmp	r3, #6
 80164de:	d006      	beq.n	80164ee <etharp_update_arp_entry+0x26>
 80164e0:	4b48      	ldr	r3, [pc, #288]	; (8016604 <etharp_update_arp_entry+0x13c>)
 80164e2:	f240 12a9 	movw	r2, #425	; 0x1a9
 80164e6:	4948      	ldr	r1, [pc, #288]	; (8016608 <etharp_update_arp_entry+0x140>)
 80164e8:	4848      	ldr	r0, [pc, #288]	; (801660c <etharp_update_arp_entry+0x144>)
 80164ea:	f002 fdaf 	bl	801904c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80164ee:	68bb      	ldr	r3, [r7, #8]
 80164f0:	2b00      	cmp	r3, #0
 80164f2:	d012      	beq.n	801651a <etharp_update_arp_entry+0x52>
 80164f4:	68bb      	ldr	r3, [r7, #8]
 80164f6:	681b      	ldr	r3, [r3, #0]
 80164f8:	2b00      	cmp	r3, #0
 80164fa:	d00e      	beq.n	801651a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80164fc:	68bb      	ldr	r3, [r7, #8]
 80164fe:	681b      	ldr	r3, [r3, #0]
 8016500:	68f9      	ldr	r1, [r7, #12]
 8016502:	4618      	mov	r0, r3
 8016504:	f001 f924 	bl	8017750 <ip4_addr_isbroadcast_u32>
 8016508:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801650a:	2b00      	cmp	r3, #0
 801650c:	d105      	bne.n	801651a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801650e:	68bb      	ldr	r3, [r7, #8]
 8016510:	681b      	ldr	r3, [r3, #0]
 8016512:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016516:	2be0      	cmp	r3, #224	; 0xe0
 8016518:	d102      	bne.n	8016520 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801651a:	f06f 030f 	mvn.w	r3, #15
 801651e:	e06c      	b.n	80165fa <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8016520:	78fb      	ldrb	r3, [r7, #3]
 8016522:	68fa      	ldr	r2, [r7, #12]
 8016524:	4619      	mov	r1, r3
 8016526:	68b8      	ldr	r0, [r7, #8]
 8016528:	f7ff fe56 	bl	80161d8 <etharp_find_entry>
 801652c:	4603      	mov	r3, r0
 801652e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8016530:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8016534:	2b00      	cmp	r3, #0
 8016536:	da02      	bge.n	801653e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8016538:	8afb      	ldrh	r3, [r7, #22]
 801653a:	b25b      	sxtb	r3, r3
 801653c:	e05d      	b.n	80165fa <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801653e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016542:	4933      	ldr	r1, [pc, #204]	; (8016610 <etharp_update_arp_entry+0x148>)
 8016544:	4613      	mov	r3, r2
 8016546:	005b      	lsls	r3, r3, #1
 8016548:	4413      	add	r3, r2
 801654a:	00db      	lsls	r3, r3, #3
 801654c:	440b      	add	r3, r1
 801654e:	3314      	adds	r3, #20
 8016550:	2202      	movs	r2, #2
 8016552:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8016554:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016558:	492d      	ldr	r1, [pc, #180]	; (8016610 <etharp_update_arp_entry+0x148>)
 801655a:	4613      	mov	r3, r2
 801655c:	005b      	lsls	r3, r3, #1
 801655e:	4413      	add	r3, r2
 8016560:	00db      	lsls	r3, r3, #3
 8016562:	440b      	add	r3, r1
 8016564:	3308      	adds	r3, #8
 8016566:	68fa      	ldr	r2, [r7, #12]
 8016568:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801656a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801656e:	4613      	mov	r3, r2
 8016570:	005b      	lsls	r3, r3, #1
 8016572:	4413      	add	r3, r2
 8016574:	00db      	lsls	r3, r3, #3
 8016576:	3308      	adds	r3, #8
 8016578:	4a25      	ldr	r2, [pc, #148]	; (8016610 <etharp_update_arp_entry+0x148>)
 801657a:	4413      	add	r3, r2
 801657c:	3304      	adds	r3, #4
 801657e:	2206      	movs	r2, #6
 8016580:	6879      	ldr	r1, [r7, #4]
 8016582:	4618      	mov	r0, r3
 8016584:	f002 ff30 	bl	80193e8 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8016588:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801658c:	4920      	ldr	r1, [pc, #128]	; (8016610 <etharp_update_arp_entry+0x148>)
 801658e:	4613      	mov	r3, r2
 8016590:	005b      	lsls	r3, r3, #1
 8016592:	4413      	add	r3, r2
 8016594:	00db      	lsls	r3, r3, #3
 8016596:	440b      	add	r3, r1
 8016598:	3312      	adds	r3, #18
 801659a:	2200      	movs	r2, #0
 801659c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801659e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80165a2:	491b      	ldr	r1, [pc, #108]	; (8016610 <etharp_update_arp_entry+0x148>)
 80165a4:	4613      	mov	r3, r2
 80165a6:	005b      	lsls	r3, r3, #1
 80165a8:	4413      	add	r3, r2
 80165aa:	00db      	lsls	r3, r3, #3
 80165ac:	440b      	add	r3, r1
 80165ae:	681b      	ldr	r3, [r3, #0]
 80165b0:	2b00      	cmp	r3, #0
 80165b2:	d021      	beq.n	80165f8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80165b4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80165b8:	4915      	ldr	r1, [pc, #84]	; (8016610 <etharp_update_arp_entry+0x148>)
 80165ba:	4613      	mov	r3, r2
 80165bc:	005b      	lsls	r3, r3, #1
 80165be:	4413      	add	r3, r2
 80165c0:	00db      	lsls	r3, r3, #3
 80165c2:	440b      	add	r3, r1
 80165c4:	681b      	ldr	r3, [r3, #0]
 80165c6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80165c8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80165cc:	4910      	ldr	r1, [pc, #64]	; (8016610 <etharp_update_arp_entry+0x148>)
 80165ce:	4613      	mov	r3, r2
 80165d0:	005b      	lsls	r3, r3, #1
 80165d2:	4413      	add	r3, r2
 80165d4:	00db      	lsls	r3, r3, #3
 80165d6:	440b      	add	r3, r1
 80165d8:	2200      	movs	r2, #0
 80165da:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80165dc:	68fb      	ldr	r3, [r7, #12]
 80165de:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80165e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80165e6:	9300      	str	r3, [sp, #0]
 80165e8:	687b      	ldr	r3, [r7, #4]
 80165ea:	6939      	ldr	r1, [r7, #16]
 80165ec:	68f8      	ldr	r0, [r7, #12]
 80165ee:	f001 ffbd 	bl	801856c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80165f2:	6938      	ldr	r0, [r7, #16]
 80165f4:	f7f9 fe6a 	bl	80102cc <pbuf_free>
  }
  return ERR_OK;
 80165f8:	2300      	movs	r3, #0
}
 80165fa:	4618      	mov	r0, r3
 80165fc:	3718      	adds	r7, #24
 80165fe:	46bd      	mov	sp, r7
 8016600:	bd80      	pop	{r7, pc}
 8016602:	bf00      	nop
 8016604:	0801d9d8 	.word	0x0801d9d8
 8016608:	0801dad0 	.word	0x0801dad0
 801660c:	0801da50 	.word	0x0801da50
 8016610:	20008058 	.word	0x20008058

08016614 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8016614:	b580      	push	{r7, lr}
 8016616:	b084      	sub	sp, #16
 8016618:	af00      	add	r7, sp, #0
 801661a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801661c:	2300      	movs	r3, #0
 801661e:	60fb      	str	r3, [r7, #12]
 8016620:	e01e      	b.n	8016660 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8016622:	4913      	ldr	r1, [pc, #76]	; (8016670 <etharp_cleanup_netif+0x5c>)
 8016624:	68fa      	ldr	r2, [r7, #12]
 8016626:	4613      	mov	r3, r2
 8016628:	005b      	lsls	r3, r3, #1
 801662a:	4413      	add	r3, r2
 801662c:	00db      	lsls	r3, r3, #3
 801662e:	440b      	add	r3, r1
 8016630:	3314      	adds	r3, #20
 8016632:	781b      	ldrb	r3, [r3, #0]
 8016634:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8016636:	7afb      	ldrb	r3, [r7, #11]
 8016638:	2b00      	cmp	r3, #0
 801663a:	d00e      	beq.n	801665a <etharp_cleanup_netif+0x46>
 801663c:	490c      	ldr	r1, [pc, #48]	; (8016670 <etharp_cleanup_netif+0x5c>)
 801663e:	68fa      	ldr	r2, [r7, #12]
 8016640:	4613      	mov	r3, r2
 8016642:	005b      	lsls	r3, r3, #1
 8016644:	4413      	add	r3, r2
 8016646:	00db      	lsls	r3, r3, #3
 8016648:	440b      	add	r3, r1
 801664a:	3308      	adds	r3, #8
 801664c:	681b      	ldr	r3, [r3, #0]
 801664e:	687a      	ldr	r2, [r7, #4]
 8016650:	429a      	cmp	r2, r3
 8016652:	d102      	bne.n	801665a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8016654:	68f8      	ldr	r0, [r7, #12]
 8016656:	f7ff fce5 	bl	8016024 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801665a:	68fb      	ldr	r3, [r7, #12]
 801665c:	3301      	adds	r3, #1
 801665e:	60fb      	str	r3, [r7, #12]
 8016660:	68fb      	ldr	r3, [r7, #12]
 8016662:	2b09      	cmp	r3, #9
 8016664:	dddd      	ble.n	8016622 <etharp_cleanup_netif+0xe>
    }
  }
}
 8016666:	bf00      	nop
 8016668:	bf00      	nop
 801666a:	3710      	adds	r7, #16
 801666c:	46bd      	mov	sp, r7
 801666e:	bd80      	pop	{r7, pc}
 8016670:	20008058 	.word	0x20008058

08016674 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8016674:	b5b0      	push	{r4, r5, r7, lr}
 8016676:	b08a      	sub	sp, #40	; 0x28
 8016678:	af04      	add	r7, sp, #16
 801667a:	6078      	str	r0, [r7, #4]
 801667c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801667e:	683b      	ldr	r3, [r7, #0]
 8016680:	2b00      	cmp	r3, #0
 8016682:	d107      	bne.n	8016694 <etharp_input+0x20>
 8016684:	4b3d      	ldr	r3, [pc, #244]	; (801677c <etharp_input+0x108>)
 8016686:	f240 228a 	movw	r2, #650	; 0x28a
 801668a:	493d      	ldr	r1, [pc, #244]	; (8016780 <etharp_input+0x10c>)
 801668c:	483d      	ldr	r0, [pc, #244]	; (8016784 <etharp_input+0x110>)
 801668e:	f002 fcdd 	bl	801904c <iprintf>
 8016692:	e06f      	b.n	8016774 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8016694:	687b      	ldr	r3, [r7, #4]
 8016696:	685b      	ldr	r3, [r3, #4]
 8016698:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801669a:	693b      	ldr	r3, [r7, #16]
 801669c:	881b      	ldrh	r3, [r3, #0]
 801669e:	b29b      	uxth	r3, r3
 80166a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80166a4:	d10c      	bne.n	80166c0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80166a6:	693b      	ldr	r3, [r7, #16]
 80166a8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80166aa:	2b06      	cmp	r3, #6
 80166ac:	d108      	bne.n	80166c0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80166ae:	693b      	ldr	r3, [r7, #16]
 80166b0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80166b2:	2b04      	cmp	r3, #4
 80166b4:	d104      	bne.n	80166c0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80166b6:	693b      	ldr	r3, [r7, #16]
 80166b8:	885b      	ldrh	r3, [r3, #2]
 80166ba:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80166bc:	2b08      	cmp	r3, #8
 80166be:	d003      	beq.n	80166c8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80166c0:	6878      	ldr	r0, [r7, #4]
 80166c2:	f7f9 fe03 	bl	80102cc <pbuf_free>
    return;
 80166c6:	e055      	b.n	8016774 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80166c8:	693b      	ldr	r3, [r7, #16]
 80166ca:	330e      	adds	r3, #14
 80166cc:	681b      	ldr	r3, [r3, #0]
 80166ce:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80166d0:	693b      	ldr	r3, [r7, #16]
 80166d2:	3318      	adds	r3, #24
 80166d4:	681b      	ldr	r3, [r3, #0]
 80166d6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80166d8:	683b      	ldr	r3, [r7, #0]
 80166da:	3304      	adds	r3, #4
 80166dc:	681b      	ldr	r3, [r3, #0]
 80166de:	2b00      	cmp	r3, #0
 80166e0:	d102      	bne.n	80166e8 <etharp_input+0x74>
    for_us = 0;
 80166e2:	2300      	movs	r3, #0
 80166e4:	75fb      	strb	r3, [r7, #23]
 80166e6:	e009      	b.n	80166fc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80166e8:	68ba      	ldr	r2, [r7, #8]
 80166ea:	683b      	ldr	r3, [r7, #0]
 80166ec:	3304      	adds	r3, #4
 80166ee:	681b      	ldr	r3, [r3, #0]
 80166f0:	429a      	cmp	r2, r3
 80166f2:	bf0c      	ite	eq
 80166f4:	2301      	moveq	r3, #1
 80166f6:	2300      	movne	r3, #0
 80166f8:	b2db      	uxtb	r3, r3
 80166fa:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80166fc:	693b      	ldr	r3, [r7, #16]
 80166fe:	f103 0208 	add.w	r2, r3, #8
 8016702:	7dfb      	ldrb	r3, [r7, #23]
 8016704:	2b00      	cmp	r3, #0
 8016706:	d001      	beq.n	801670c <etharp_input+0x98>
 8016708:	2301      	movs	r3, #1
 801670a:	e000      	b.n	801670e <etharp_input+0x9a>
 801670c:	2302      	movs	r3, #2
 801670e:	f107 010c 	add.w	r1, r7, #12
 8016712:	6838      	ldr	r0, [r7, #0]
 8016714:	f7ff fed8 	bl	80164c8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8016718:	693b      	ldr	r3, [r7, #16]
 801671a:	88db      	ldrh	r3, [r3, #6]
 801671c:	b29b      	uxth	r3, r3
 801671e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016722:	d003      	beq.n	801672c <etharp_input+0xb8>
 8016724:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016728:	d01e      	beq.n	8016768 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801672a:	e020      	b.n	801676e <etharp_input+0xfa>
      if (for_us) {
 801672c:	7dfb      	ldrb	r3, [r7, #23]
 801672e:	2b00      	cmp	r3, #0
 8016730:	d01c      	beq.n	801676c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8016732:	683b      	ldr	r3, [r7, #0]
 8016734:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8016738:	693b      	ldr	r3, [r7, #16]
 801673a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801673e:	683b      	ldr	r3, [r7, #0]
 8016740:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8016744:	683b      	ldr	r3, [r7, #0]
 8016746:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8016748:	693a      	ldr	r2, [r7, #16]
 801674a:	3208      	adds	r2, #8
        etharp_raw(netif,
 801674c:	2102      	movs	r1, #2
 801674e:	9103      	str	r1, [sp, #12]
 8016750:	f107 010c 	add.w	r1, r7, #12
 8016754:	9102      	str	r1, [sp, #8]
 8016756:	9201      	str	r2, [sp, #4]
 8016758:	9300      	str	r3, [sp, #0]
 801675a:	462b      	mov	r3, r5
 801675c:	4622      	mov	r2, r4
 801675e:	4601      	mov	r1, r0
 8016760:	6838      	ldr	r0, [r7, #0]
 8016762:	f000 faeb 	bl	8016d3c <etharp_raw>
      break;
 8016766:	e001      	b.n	801676c <etharp_input+0xf8>
      break;
 8016768:	bf00      	nop
 801676a:	e000      	b.n	801676e <etharp_input+0xfa>
      break;
 801676c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801676e:	6878      	ldr	r0, [r7, #4]
 8016770:	f7f9 fdac 	bl	80102cc <pbuf_free>
}
 8016774:	3718      	adds	r7, #24
 8016776:	46bd      	mov	sp, r7
 8016778:	bdb0      	pop	{r4, r5, r7, pc}
 801677a:	bf00      	nop
 801677c:	0801d9d8 	.word	0x0801d9d8
 8016780:	0801db28 	.word	0x0801db28
 8016784:	0801da50 	.word	0x0801da50

08016788 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8016788:	b580      	push	{r7, lr}
 801678a:	b086      	sub	sp, #24
 801678c:	af02      	add	r7, sp, #8
 801678e:	60f8      	str	r0, [r7, #12]
 8016790:	60b9      	str	r1, [r7, #8]
 8016792:	4613      	mov	r3, r2
 8016794:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8016796:	79fa      	ldrb	r2, [r7, #7]
 8016798:	4944      	ldr	r1, [pc, #272]	; (80168ac <etharp_output_to_arp_index+0x124>)
 801679a:	4613      	mov	r3, r2
 801679c:	005b      	lsls	r3, r3, #1
 801679e:	4413      	add	r3, r2
 80167a0:	00db      	lsls	r3, r3, #3
 80167a2:	440b      	add	r3, r1
 80167a4:	3314      	adds	r3, #20
 80167a6:	781b      	ldrb	r3, [r3, #0]
 80167a8:	2b01      	cmp	r3, #1
 80167aa:	d806      	bhi.n	80167ba <etharp_output_to_arp_index+0x32>
 80167ac:	4b40      	ldr	r3, [pc, #256]	; (80168b0 <etharp_output_to_arp_index+0x128>)
 80167ae:	f240 22ee 	movw	r2, #750	; 0x2ee
 80167b2:	4940      	ldr	r1, [pc, #256]	; (80168b4 <etharp_output_to_arp_index+0x12c>)
 80167b4:	4840      	ldr	r0, [pc, #256]	; (80168b8 <etharp_output_to_arp_index+0x130>)
 80167b6:	f002 fc49 	bl	801904c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80167ba:	79fa      	ldrb	r2, [r7, #7]
 80167bc:	493b      	ldr	r1, [pc, #236]	; (80168ac <etharp_output_to_arp_index+0x124>)
 80167be:	4613      	mov	r3, r2
 80167c0:	005b      	lsls	r3, r3, #1
 80167c2:	4413      	add	r3, r2
 80167c4:	00db      	lsls	r3, r3, #3
 80167c6:	440b      	add	r3, r1
 80167c8:	3314      	adds	r3, #20
 80167ca:	781b      	ldrb	r3, [r3, #0]
 80167cc:	2b02      	cmp	r3, #2
 80167ce:	d153      	bne.n	8016878 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80167d0:	79fa      	ldrb	r2, [r7, #7]
 80167d2:	4936      	ldr	r1, [pc, #216]	; (80168ac <etharp_output_to_arp_index+0x124>)
 80167d4:	4613      	mov	r3, r2
 80167d6:	005b      	lsls	r3, r3, #1
 80167d8:	4413      	add	r3, r2
 80167da:	00db      	lsls	r3, r3, #3
 80167dc:	440b      	add	r3, r1
 80167de:	3312      	adds	r3, #18
 80167e0:	881b      	ldrh	r3, [r3, #0]
 80167e2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80167e6:	d919      	bls.n	801681c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80167e8:	79fa      	ldrb	r2, [r7, #7]
 80167ea:	4613      	mov	r3, r2
 80167ec:	005b      	lsls	r3, r3, #1
 80167ee:	4413      	add	r3, r2
 80167f0:	00db      	lsls	r3, r3, #3
 80167f2:	4a2e      	ldr	r2, [pc, #184]	; (80168ac <etharp_output_to_arp_index+0x124>)
 80167f4:	4413      	add	r3, r2
 80167f6:	3304      	adds	r3, #4
 80167f8:	4619      	mov	r1, r3
 80167fa:	68f8      	ldr	r0, [r7, #12]
 80167fc:	f000 fb4c 	bl	8016e98 <etharp_request>
 8016800:	4603      	mov	r3, r0
 8016802:	2b00      	cmp	r3, #0
 8016804:	d138      	bne.n	8016878 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016806:	79fa      	ldrb	r2, [r7, #7]
 8016808:	4928      	ldr	r1, [pc, #160]	; (80168ac <etharp_output_to_arp_index+0x124>)
 801680a:	4613      	mov	r3, r2
 801680c:	005b      	lsls	r3, r3, #1
 801680e:	4413      	add	r3, r2
 8016810:	00db      	lsls	r3, r3, #3
 8016812:	440b      	add	r3, r1
 8016814:	3314      	adds	r3, #20
 8016816:	2203      	movs	r2, #3
 8016818:	701a      	strb	r2, [r3, #0]
 801681a:	e02d      	b.n	8016878 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801681c:	79fa      	ldrb	r2, [r7, #7]
 801681e:	4923      	ldr	r1, [pc, #140]	; (80168ac <etharp_output_to_arp_index+0x124>)
 8016820:	4613      	mov	r3, r2
 8016822:	005b      	lsls	r3, r3, #1
 8016824:	4413      	add	r3, r2
 8016826:	00db      	lsls	r3, r3, #3
 8016828:	440b      	add	r3, r1
 801682a:	3312      	adds	r3, #18
 801682c:	881b      	ldrh	r3, [r3, #0]
 801682e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8016832:	d321      	bcc.n	8016878 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8016834:	79fa      	ldrb	r2, [r7, #7]
 8016836:	4613      	mov	r3, r2
 8016838:	005b      	lsls	r3, r3, #1
 801683a:	4413      	add	r3, r2
 801683c:	00db      	lsls	r3, r3, #3
 801683e:	4a1b      	ldr	r2, [pc, #108]	; (80168ac <etharp_output_to_arp_index+0x124>)
 8016840:	4413      	add	r3, r2
 8016842:	1d19      	adds	r1, r3, #4
 8016844:	79fa      	ldrb	r2, [r7, #7]
 8016846:	4613      	mov	r3, r2
 8016848:	005b      	lsls	r3, r3, #1
 801684a:	4413      	add	r3, r2
 801684c:	00db      	lsls	r3, r3, #3
 801684e:	3308      	adds	r3, #8
 8016850:	4a16      	ldr	r2, [pc, #88]	; (80168ac <etharp_output_to_arp_index+0x124>)
 8016852:	4413      	add	r3, r2
 8016854:	3304      	adds	r3, #4
 8016856:	461a      	mov	r2, r3
 8016858:	68f8      	ldr	r0, [r7, #12]
 801685a:	f000 fafb 	bl	8016e54 <etharp_request_dst>
 801685e:	4603      	mov	r3, r0
 8016860:	2b00      	cmp	r3, #0
 8016862:	d109      	bne.n	8016878 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016864:	79fa      	ldrb	r2, [r7, #7]
 8016866:	4911      	ldr	r1, [pc, #68]	; (80168ac <etharp_output_to_arp_index+0x124>)
 8016868:	4613      	mov	r3, r2
 801686a:	005b      	lsls	r3, r3, #1
 801686c:	4413      	add	r3, r2
 801686e:	00db      	lsls	r3, r3, #3
 8016870:	440b      	add	r3, r1
 8016872:	3314      	adds	r3, #20
 8016874:	2203      	movs	r2, #3
 8016876:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8016878:	68fb      	ldr	r3, [r7, #12]
 801687a:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801687e:	79fa      	ldrb	r2, [r7, #7]
 8016880:	4613      	mov	r3, r2
 8016882:	005b      	lsls	r3, r3, #1
 8016884:	4413      	add	r3, r2
 8016886:	00db      	lsls	r3, r3, #3
 8016888:	3308      	adds	r3, #8
 801688a:	4a08      	ldr	r2, [pc, #32]	; (80168ac <etharp_output_to_arp_index+0x124>)
 801688c:	4413      	add	r3, r2
 801688e:	3304      	adds	r3, #4
 8016890:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016894:	9200      	str	r2, [sp, #0]
 8016896:	460a      	mov	r2, r1
 8016898:	68b9      	ldr	r1, [r7, #8]
 801689a:	68f8      	ldr	r0, [r7, #12]
 801689c:	f001 fe66 	bl	801856c <ethernet_output>
 80168a0:	4603      	mov	r3, r0
}
 80168a2:	4618      	mov	r0, r3
 80168a4:	3710      	adds	r7, #16
 80168a6:	46bd      	mov	sp, r7
 80168a8:	bd80      	pop	{r7, pc}
 80168aa:	bf00      	nop
 80168ac:	20008058 	.word	0x20008058
 80168b0:	0801d9d8 	.word	0x0801d9d8
 80168b4:	0801db48 	.word	0x0801db48
 80168b8:	0801da50 	.word	0x0801da50

080168bc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80168bc:	b580      	push	{r7, lr}
 80168be:	b08a      	sub	sp, #40	; 0x28
 80168c0:	af02      	add	r7, sp, #8
 80168c2:	60f8      	str	r0, [r7, #12]
 80168c4:	60b9      	str	r1, [r7, #8]
 80168c6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80168c8:	687b      	ldr	r3, [r7, #4]
 80168ca:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80168cc:	68fb      	ldr	r3, [r7, #12]
 80168ce:	2b00      	cmp	r3, #0
 80168d0:	d106      	bne.n	80168e0 <etharp_output+0x24>
 80168d2:	4b73      	ldr	r3, [pc, #460]	; (8016aa0 <etharp_output+0x1e4>)
 80168d4:	f240 321e 	movw	r2, #798	; 0x31e
 80168d8:	4972      	ldr	r1, [pc, #456]	; (8016aa4 <etharp_output+0x1e8>)
 80168da:	4873      	ldr	r0, [pc, #460]	; (8016aa8 <etharp_output+0x1ec>)
 80168dc:	f002 fbb6 	bl	801904c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80168e0:	68bb      	ldr	r3, [r7, #8]
 80168e2:	2b00      	cmp	r3, #0
 80168e4:	d106      	bne.n	80168f4 <etharp_output+0x38>
 80168e6:	4b6e      	ldr	r3, [pc, #440]	; (8016aa0 <etharp_output+0x1e4>)
 80168e8:	f240 321f 	movw	r2, #799	; 0x31f
 80168ec:	496f      	ldr	r1, [pc, #444]	; (8016aac <etharp_output+0x1f0>)
 80168ee:	486e      	ldr	r0, [pc, #440]	; (8016aa8 <etharp_output+0x1ec>)
 80168f0:	f002 fbac 	bl	801904c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	2b00      	cmp	r3, #0
 80168f8:	d106      	bne.n	8016908 <etharp_output+0x4c>
 80168fa:	4b69      	ldr	r3, [pc, #420]	; (8016aa0 <etharp_output+0x1e4>)
 80168fc:	f44f 7248 	mov.w	r2, #800	; 0x320
 8016900:	496b      	ldr	r1, [pc, #428]	; (8016ab0 <etharp_output+0x1f4>)
 8016902:	4869      	ldr	r0, [pc, #420]	; (8016aa8 <etharp_output+0x1ec>)
 8016904:	f002 fba2 	bl	801904c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	681b      	ldr	r3, [r3, #0]
 801690c:	68f9      	ldr	r1, [r7, #12]
 801690e:	4618      	mov	r0, r3
 8016910:	f000 ff1e 	bl	8017750 <ip4_addr_isbroadcast_u32>
 8016914:	4603      	mov	r3, r0
 8016916:	2b00      	cmp	r3, #0
 8016918:	d002      	beq.n	8016920 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801691a:	4b66      	ldr	r3, [pc, #408]	; (8016ab4 <etharp_output+0x1f8>)
 801691c:	61fb      	str	r3, [r7, #28]
 801691e:	e0af      	b.n	8016a80 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8016920:	687b      	ldr	r3, [r7, #4]
 8016922:	681b      	ldr	r3, [r3, #0]
 8016924:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016928:	2be0      	cmp	r3, #224	; 0xe0
 801692a:	d118      	bne.n	801695e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801692c:	2301      	movs	r3, #1
 801692e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8016930:	2300      	movs	r3, #0
 8016932:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8016934:	235e      	movs	r3, #94	; 0x5e
 8016936:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	3301      	adds	r3, #1
 801693c:	781b      	ldrb	r3, [r3, #0]
 801693e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016942:	b2db      	uxtb	r3, r3
 8016944:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8016946:	687b      	ldr	r3, [r7, #4]
 8016948:	3302      	adds	r3, #2
 801694a:	781b      	ldrb	r3, [r3, #0]
 801694c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801694e:	687b      	ldr	r3, [r7, #4]
 8016950:	3303      	adds	r3, #3
 8016952:	781b      	ldrb	r3, [r3, #0]
 8016954:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8016956:	f107 0310 	add.w	r3, r7, #16
 801695a:	61fb      	str	r3, [r7, #28]
 801695c:	e090      	b.n	8016a80 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801695e:	687b      	ldr	r3, [r7, #4]
 8016960:	681a      	ldr	r2, [r3, #0]
 8016962:	68fb      	ldr	r3, [r7, #12]
 8016964:	3304      	adds	r3, #4
 8016966:	681b      	ldr	r3, [r3, #0]
 8016968:	405a      	eors	r2, r3
 801696a:	68fb      	ldr	r3, [r7, #12]
 801696c:	3308      	adds	r3, #8
 801696e:	681b      	ldr	r3, [r3, #0]
 8016970:	4013      	ands	r3, r2
 8016972:	2b00      	cmp	r3, #0
 8016974:	d012      	beq.n	801699c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8016976:	687b      	ldr	r3, [r7, #4]
 8016978:	681b      	ldr	r3, [r3, #0]
 801697a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801697c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8016980:	4293      	cmp	r3, r2
 8016982:	d00b      	beq.n	801699c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8016984:	68fb      	ldr	r3, [r7, #12]
 8016986:	330c      	adds	r3, #12
 8016988:	681b      	ldr	r3, [r3, #0]
 801698a:	2b00      	cmp	r3, #0
 801698c:	d003      	beq.n	8016996 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801698e:	68fb      	ldr	r3, [r7, #12]
 8016990:	330c      	adds	r3, #12
 8016992:	61bb      	str	r3, [r7, #24]
 8016994:	e002      	b.n	801699c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8016996:	f06f 0303 	mvn.w	r3, #3
 801699a:	e07d      	b.n	8016a98 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801699c:	4b46      	ldr	r3, [pc, #280]	; (8016ab8 <etharp_output+0x1fc>)
 801699e:	781b      	ldrb	r3, [r3, #0]
 80169a0:	4619      	mov	r1, r3
 80169a2:	4a46      	ldr	r2, [pc, #280]	; (8016abc <etharp_output+0x200>)
 80169a4:	460b      	mov	r3, r1
 80169a6:	005b      	lsls	r3, r3, #1
 80169a8:	440b      	add	r3, r1
 80169aa:	00db      	lsls	r3, r3, #3
 80169ac:	4413      	add	r3, r2
 80169ae:	3314      	adds	r3, #20
 80169b0:	781b      	ldrb	r3, [r3, #0]
 80169b2:	2b01      	cmp	r3, #1
 80169b4:	d925      	bls.n	8016a02 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80169b6:	4b40      	ldr	r3, [pc, #256]	; (8016ab8 <etharp_output+0x1fc>)
 80169b8:	781b      	ldrb	r3, [r3, #0]
 80169ba:	4619      	mov	r1, r3
 80169bc:	4a3f      	ldr	r2, [pc, #252]	; (8016abc <etharp_output+0x200>)
 80169be:	460b      	mov	r3, r1
 80169c0:	005b      	lsls	r3, r3, #1
 80169c2:	440b      	add	r3, r1
 80169c4:	00db      	lsls	r3, r3, #3
 80169c6:	4413      	add	r3, r2
 80169c8:	3308      	adds	r3, #8
 80169ca:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80169cc:	68fa      	ldr	r2, [r7, #12]
 80169ce:	429a      	cmp	r2, r3
 80169d0:	d117      	bne.n	8016a02 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80169d2:	69bb      	ldr	r3, [r7, #24]
 80169d4:	681a      	ldr	r2, [r3, #0]
 80169d6:	4b38      	ldr	r3, [pc, #224]	; (8016ab8 <etharp_output+0x1fc>)
 80169d8:	781b      	ldrb	r3, [r3, #0]
 80169da:	4618      	mov	r0, r3
 80169dc:	4937      	ldr	r1, [pc, #220]	; (8016abc <etharp_output+0x200>)
 80169de:	4603      	mov	r3, r0
 80169e0:	005b      	lsls	r3, r3, #1
 80169e2:	4403      	add	r3, r0
 80169e4:	00db      	lsls	r3, r3, #3
 80169e6:	440b      	add	r3, r1
 80169e8:	3304      	adds	r3, #4
 80169ea:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80169ec:	429a      	cmp	r2, r3
 80169ee:	d108      	bne.n	8016a02 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80169f0:	4b31      	ldr	r3, [pc, #196]	; (8016ab8 <etharp_output+0x1fc>)
 80169f2:	781b      	ldrb	r3, [r3, #0]
 80169f4:	461a      	mov	r2, r3
 80169f6:	68b9      	ldr	r1, [r7, #8]
 80169f8:	68f8      	ldr	r0, [r7, #12]
 80169fa:	f7ff fec5 	bl	8016788 <etharp_output_to_arp_index>
 80169fe:	4603      	mov	r3, r0
 8016a00:	e04a      	b.n	8016a98 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016a02:	2300      	movs	r3, #0
 8016a04:	75fb      	strb	r3, [r7, #23]
 8016a06:	e031      	b.n	8016a6c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016a08:	7dfa      	ldrb	r2, [r7, #23]
 8016a0a:	492c      	ldr	r1, [pc, #176]	; (8016abc <etharp_output+0x200>)
 8016a0c:	4613      	mov	r3, r2
 8016a0e:	005b      	lsls	r3, r3, #1
 8016a10:	4413      	add	r3, r2
 8016a12:	00db      	lsls	r3, r3, #3
 8016a14:	440b      	add	r3, r1
 8016a16:	3314      	adds	r3, #20
 8016a18:	781b      	ldrb	r3, [r3, #0]
 8016a1a:	2b01      	cmp	r3, #1
 8016a1c:	d923      	bls.n	8016a66 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8016a1e:	7dfa      	ldrb	r2, [r7, #23]
 8016a20:	4926      	ldr	r1, [pc, #152]	; (8016abc <etharp_output+0x200>)
 8016a22:	4613      	mov	r3, r2
 8016a24:	005b      	lsls	r3, r3, #1
 8016a26:	4413      	add	r3, r2
 8016a28:	00db      	lsls	r3, r3, #3
 8016a2a:	440b      	add	r3, r1
 8016a2c:	3308      	adds	r3, #8
 8016a2e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016a30:	68fa      	ldr	r2, [r7, #12]
 8016a32:	429a      	cmp	r2, r3
 8016a34:	d117      	bne.n	8016a66 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8016a36:	69bb      	ldr	r3, [r7, #24]
 8016a38:	6819      	ldr	r1, [r3, #0]
 8016a3a:	7dfa      	ldrb	r2, [r7, #23]
 8016a3c:	481f      	ldr	r0, [pc, #124]	; (8016abc <etharp_output+0x200>)
 8016a3e:	4613      	mov	r3, r2
 8016a40:	005b      	lsls	r3, r3, #1
 8016a42:	4413      	add	r3, r2
 8016a44:	00db      	lsls	r3, r3, #3
 8016a46:	4403      	add	r3, r0
 8016a48:	3304      	adds	r3, #4
 8016a4a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8016a4c:	4299      	cmp	r1, r3
 8016a4e:	d10a      	bne.n	8016a66 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8016a50:	4a19      	ldr	r2, [pc, #100]	; (8016ab8 <etharp_output+0x1fc>)
 8016a52:	7dfb      	ldrb	r3, [r7, #23]
 8016a54:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8016a56:	7dfb      	ldrb	r3, [r7, #23]
 8016a58:	461a      	mov	r2, r3
 8016a5a:	68b9      	ldr	r1, [r7, #8]
 8016a5c:	68f8      	ldr	r0, [r7, #12]
 8016a5e:	f7ff fe93 	bl	8016788 <etharp_output_to_arp_index>
 8016a62:	4603      	mov	r3, r0
 8016a64:	e018      	b.n	8016a98 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016a66:	7dfb      	ldrb	r3, [r7, #23]
 8016a68:	3301      	adds	r3, #1
 8016a6a:	75fb      	strb	r3, [r7, #23]
 8016a6c:	7dfb      	ldrb	r3, [r7, #23]
 8016a6e:	2b09      	cmp	r3, #9
 8016a70:	d9ca      	bls.n	8016a08 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8016a72:	68ba      	ldr	r2, [r7, #8]
 8016a74:	69b9      	ldr	r1, [r7, #24]
 8016a76:	68f8      	ldr	r0, [r7, #12]
 8016a78:	f000 f822 	bl	8016ac0 <etharp_query>
 8016a7c:	4603      	mov	r3, r0
 8016a7e:	e00b      	b.n	8016a98 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8016a80:	68fb      	ldr	r3, [r7, #12]
 8016a82:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8016a86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016a8a:	9300      	str	r3, [sp, #0]
 8016a8c:	69fb      	ldr	r3, [r7, #28]
 8016a8e:	68b9      	ldr	r1, [r7, #8]
 8016a90:	68f8      	ldr	r0, [r7, #12]
 8016a92:	f001 fd6b 	bl	801856c <ethernet_output>
 8016a96:	4603      	mov	r3, r0
}
 8016a98:	4618      	mov	r0, r3
 8016a9a:	3720      	adds	r7, #32
 8016a9c:	46bd      	mov	sp, r7
 8016a9e:	bd80      	pop	{r7, pc}
 8016aa0:	0801d9d8 	.word	0x0801d9d8
 8016aa4:	0801db28 	.word	0x0801db28
 8016aa8:	0801da50 	.word	0x0801da50
 8016aac:	0801db78 	.word	0x0801db78
 8016ab0:	0801db18 	.word	0x0801db18
 8016ab4:	0801e1d0 	.word	0x0801e1d0
 8016ab8:	20008148 	.word	0x20008148
 8016abc:	20008058 	.word	0x20008058

08016ac0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8016ac0:	b580      	push	{r7, lr}
 8016ac2:	b08c      	sub	sp, #48	; 0x30
 8016ac4:	af02      	add	r7, sp, #8
 8016ac6:	60f8      	str	r0, [r7, #12]
 8016ac8:	60b9      	str	r1, [r7, #8]
 8016aca:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8016acc:	68fb      	ldr	r3, [r7, #12]
 8016ace:	3326      	adds	r3, #38	; 0x26
 8016ad0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8016ad2:	23ff      	movs	r3, #255	; 0xff
 8016ad4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8016ad8:	2300      	movs	r3, #0
 8016ada:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016adc:	68bb      	ldr	r3, [r7, #8]
 8016ade:	681b      	ldr	r3, [r3, #0]
 8016ae0:	68f9      	ldr	r1, [r7, #12]
 8016ae2:	4618      	mov	r0, r3
 8016ae4:	f000 fe34 	bl	8017750 <ip4_addr_isbroadcast_u32>
 8016ae8:	4603      	mov	r3, r0
 8016aea:	2b00      	cmp	r3, #0
 8016aec:	d10c      	bne.n	8016b08 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016aee:	68bb      	ldr	r3, [r7, #8]
 8016af0:	681b      	ldr	r3, [r3, #0]
 8016af2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016af6:	2be0      	cmp	r3, #224	; 0xe0
 8016af8:	d006      	beq.n	8016b08 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016afa:	68bb      	ldr	r3, [r7, #8]
 8016afc:	2b00      	cmp	r3, #0
 8016afe:	d003      	beq.n	8016b08 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8016b00:	68bb      	ldr	r3, [r7, #8]
 8016b02:	681b      	ldr	r3, [r3, #0]
 8016b04:	2b00      	cmp	r3, #0
 8016b06:	d102      	bne.n	8016b0e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016b08:	f06f 030f 	mvn.w	r3, #15
 8016b0c:	e101      	b.n	8016d12 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8016b0e:	68fa      	ldr	r2, [r7, #12]
 8016b10:	2101      	movs	r1, #1
 8016b12:	68b8      	ldr	r0, [r7, #8]
 8016b14:	f7ff fb60 	bl	80161d8 <etharp_find_entry>
 8016b18:	4603      	mov	r3, r0
 8016b1a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8016b1c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016b20:	2b00      	cmp	r3, #0
 8016b22:	da02      	bge.n	8016b2a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8016b24:	8a7b      	ldrh	r3, [r7, #18]
 8016b26:	b25b      	sxtb	r3, r3
 8016b28:	e0f3      	b.n	8016d12 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8016b2a:	8a7b      	ldrh	r3, [r7, #18]
 8016b2c:	2b7e      	cmp	r3, #126	; 0x7e
 8016b2e:	d906      	bls.n	8016b3e <etharp_query+0x7e>
 8016b30:	4b7a      	ldr	r3, [pc, #488]	; (8016d1c <etharp_query+0x25c>)
 8016b32:	f240 32c1 	movw	r2, #961	; 0x3c1
 8016b36:	497a      	ldr	r1, [pc, #488]	; (8016d20 <etharp_query+0x260>)
 8016b38:	487a      	ldr	r0, [pc, #488]	; (8016d24 <etharp_query+0x264>)
 8016b3a:	f002 fa87 	bl	801904c <iprintf>
  i = (netif_addr_idx_t)i_err;
 8016b3e:	8a7b      	ldrh	r3, [r7, #18]
 8016b40:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8016b42:	7c7a      	ldrb	r2, [r7, #17]
 8016b44:	4978      	ldr	r1, [pc, #480]	; (8016d28 <etharp_query+0x268>)
 8016b46:	4613      	mov	r3, r2
 8016b48:	005b      	lsls	r3, r3, #1
 8016b4a:	4413      	add	r3, r2
 8016b4c:	00db      	lsls	r3, r3, #3
 8016b4e:	440b      	add	r3, r1
 8016b50:	3314      	adds	r3, #20
 8016b52:	781b      	ldrb	r3, [r3, #0]
 8016b54:	2b00      	cmp	r3, #0
 8016b56:	d115      	bne.n	8016b84 <etharp_query+0xc4>
    is_new_entry = 1;
 8016b58:	2301      	movs	r3, #1
 8016b5a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8016b5c:	7c7a      	ldrb	r2, [r7, #17]
 8016b5e:	4972      	ldr	r1, [pc, #456]	; (8016d28 <etharp_query+0x268>)
 8016b60:	4613      	mov	r3, r2
 8016b62:	005b      	lsls	r3, r3, #1
 8016b64:	4413      	add	r3, r2
 8016b66:	00db      	lsls	r3, r3, #3
 8016b68:	440b      	add	r3, r1
 8016b6a:	3314      	adds	r3, #20
 8016b6c:	2201      	movs	r2, #1
 8016b6e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8016b70:	7c7a      	ldrb	r2, [r7, #17]
 8016b72:	496d      	ldr	r1, [pc, #436]	; (8016d28 <etharp_query+0x268>)
 8016b74:	4613      	mov	r3, r2
 8016b76:	005b      	lsls	r3, r3, #1
 8016b78:	4413      	add	r3, r2
 8016b7a:	00db      	lsls	r3, r3, #3
 8016b7c:	440b      	add	r3, r1
 8016b7e:	3308      	adds	r3, #8
 8016b80:	68fa      	ldr	r2, [r7, #12]
 8016b82:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8016b84:	7c7a      	ldrb	r2, [r7, #17]
 8016b86:	4968      	ldr	r1, [pc, #416]	; (8016d28 <etharp_query+0x268>)
 8016b88:	4613      	mov	r3, r2
 8016b8a:	005b      	lsls	r3, r3, #1
 8016b8c:	4413      	add	r3, r2
 8016b8e:	00db      	lsls	r3, r3, #3
 8016b90:	440b      	add	r3, r1
 8016b92:	3314      	adds	r3, #20
 8016b94:	781b      	ldrb	r3, [r3, #0]
 8016b96:	2b01      	cmp	r3, #1
 8016b98:	d011      	beq.n	8016bbe <etharp_query+0xfe>
 8016b9a:	7c7a      	ldrb	r2, [r7, #17]
 8016b9c:	4962      	ldr	r1, [pc, #392]	; (8016d28 <etharp_query+0x268>)
 8016b9e:	4613      	mov	r3, r2
 8016ba0:	005b      	lsls	r3, r3, #1
 8016ba2:	4413      	add	r3, r2
 8016ba4:	00db      	lsls	r3, r3, #3
 8016ba6:	440b      	add	r3, r1
 8016ba8:	3314      	adds	r3, #20
 8016baa:	781b      	ldrb	r3, [r3, #0]
 8016bac:	2b01      	cmp	r3, #1
 8016bae:	d806      	bhi.n	8016bbe <etharp_query+0xfe>
 8016bb0:	4b5a      	ldr	r3, [pc, #360]	; (8016d1c <etharp_query+0x25c>)
 8016bb2:	f240 32cd 	movw	r2, #973	; 0x3cd
 8016bb6:	495d      	ldr	r1, [pc, #372]	; (8016d2c <etharp_query+0x26c>)
 8016bb8:	485a      	ldr	r0, [pc, #360]	; (8016d24 <etharp_query+0x264>)
 8016bba:	f002 fa47 	bl	801904c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8016bbe:	6a3b      	ldr	r3, [r7, #32]
 8016bc0:	2b00      	cmp	r3, #0
 8016bc2:	d102      	bne.n	8016bca <etharp_query+0x10a>
 8016bc4:	687b      	ldr	r3, [r7, #4]
 8016bc6:	2b00      	cmp	r3, #0
 8016bc8:	d10c      	bne.n	8016be4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8016bca:	68b9      	ldr	r1, [r7, #8]
 8016bcc:	68f8      	ldr	r0, [r7, #12]
 8016bce:	f000 f963 	bl	8016e98 <etharp_request>
 8016bd2:	4603      	mov	r3, r0
 8016bd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8016bd8:	687b      	ldr	r3, [r7, #4]
 8016bda:	2b00      	cmp	r3, #0
 8016bdc:	d102      	bne.n	8016be4 <etharp_query+0x124>
      return result;
 8016bde:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016be2:	e096      	b.n	8016d12 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8016be4:	687b      	ldr	r3, [r7, #4]
 8016be6:	2b00      	cmp	r3, #0
 8016be8:	d106      	bne.n	8016bf8 <etharp_query+0x138>
 8016bea:	4b4c      	ldr	r3, [pc, #304]	; (8016d1c <etharp_query+0x25c>)
 8016bec:	f240 32e1 	movw	r2, #993	; 0x3e1
 8016bf0:	494f      	ldr	r1, [pc, #316]	; (8016d30 <etharp_query+0x270>)
 8016bf2:	484c      	ldr	r0, [pc, #304]	; (8016d24 <etharp_query+0x264>)
 8016bf4:	f002 fa2a 	bl	801904c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8016bf8:	7c7a      	ldrb	r2, [r7, #17]
 8016bfa:	494b      	ldr	r1, [pc, #300]	; (8016d28 <etharp_query+0x268>)
 8016bfc:	4613      	mov	r3, r2
 8016bfe:	005b      	lsls	r3, r3, #1
 8016c00:	4413      	add	r3, r2
 8016c02:	00db      	lsls	r3, r3, #3
 8016c04:	440b      	add	r3, r1
 8016c06:	3314      	adds	r3, #20
 8016c08:	781b      	ldrb	r3, [r3, #0]
 8016c0a:	2b01      	cmp	r3, #1
 8016c0c:	d917      	bls.n	8016c3e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8016c0e:	4a49      	ldr	r2, [pc, #292]	; (8016d34 <etharp_query+0x274>)
 8016c10:	7c7b      	ldrb	r3, [r7, #17]
 8016c12:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8016c14:	7c7a      	ldrb	r2, [r7, #17]
 8016c16:	4613      	mov	r3, r2
 8016c18:	005b      	lsls	r3, r3, #1
 8016c1a:	4413      	add	r3, r2
 8016c1c:	00db      	lsls	r3, r3, #3
 8016c1e:	3308      	adds	r3, #8
 8016c20:	4a41      	ldr	r2, [pc, #260]	; (8016d28 <etharp_query+0x268>)
 8016c22:	4413      	add	r3, r2
 8016c24:	3304      	adds	r3, #4
 8016c26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016c2a:	9200      	str	r2, [sp, #0]
 8016c2c:	697a      	ldr	r2, [r7, #20]
 8016c2e:	6879      	ldr	r1, [r7, #4]
 8016c30:	68f8      	ldr	r0, [r7, #12]
 8016c32:	f001 fc9b 	bl	801856c <ethernet_output>
 8016c36:	4603      	mov	r3, r0
 8016c38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016c3c:	e067      	b.n	8016d0e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016c3e:	7c7a      	ldrb	r2, [r7, #17]
 8016c40:	4939      	ldr	r1, [pc, #228]	; (8016d28 <etharp_query+0x268>)
 8016c42:	4613      	mov	r3, r2
 8016c44:	005b      	lsls	r3, r3, #1
 8016c46:	4413      	add	r3, r2
 8016c48:	00db      	lsls	r3, r3, #3
 8016c4a:	440b      	add	r3, r1
 8016c4c:	3314      	adds	r3, #20
 8016c4e:	781b      	ldrb	r3, [r3, #0]
 8016c50:	2b01      	cmp	r3, #1
 8016c52:	d15c      	bne.n	8016d0e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8016c54:	2300      	movs	r3, #0
 8016c56:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8016c58:	687b      	ldr	r3, [r7, #4]
 8016c5a:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016c5c:	e01c      	b.n	8016c98 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8016c5e:	69fb      	ldr	r3, [r7, #28]
 8016c60:	895a      	ldrh	r2, [r3, #10]
 8016c62:	69fb      	ldr	r3, [r7, #28]
 8016c64:	891b      	ldrh	r3, [r3, #8]
 8016c66:	429a      	cmp	r2, r3
 8016c68:	d10a      	bne.n	8016c80 <etharp_query+0x1c0>
 8016c6a:	69fb      	ldr	r3, [r7, #28]
 8016c6c:	681b      	ldr	r3, [r3, #0]
 8016c6e:	2b00      	cmp	r3, #0
 8016c70:	d006      	beq.n	8016c80 <etharp_query+0x1c0>
 8016c72:	4b2a      	ldr	r3, [pc, #168]	; (8016d1c <etharp_query+0x25c>)
 8016c74:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8016c78:	492f      	ldr	r1, [pc, #188]	; (8016d38 <etharp_query+0x278>)
 8016c7a:	482a      	ldr	r0, [pc, #168]	; (8016d24 <etharp_query+0x264>)
 8016c7c:	f002 f9e6 	bl	801904c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8016c80:	69fb      	ldr	r3, [r7, #28]
 8016c82:	7b1b      	ldrb	r3, [r3, #12]
 8016c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016c88:	2b00      	cmp	r3, #0
 8016c8a:	d002      	beq.n	8016c92 <etharp_query+0x1d2>
        copy_needed = 1;
 8016c8c:	2301      	movs	r3, #1
 8016c8e:	61bb      	str	r3, [r7, #24]
        break;
 8016c90:	e005      	b.n	8016c9e <etharp_query+0x1de>
      }
      p = p->next;
 8016c92:	69fb      	ldr	r3, [r7, #28]
 8016c94:	681b      	ldr	r3, [r3, #0]
 8016c96:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016c98:	69fb      	ldr	r3, [r7, #28]
 8016c9a:	2b00      	cmp	r3, #0
 8016c9c:	d1df      	bne.n	8016c5e <etharp_query+0x19e>
    }
    if (copy_needed) {
 8016c9e:	69bb      	ldr	r3, [r7, #24]
 8016ca0:	2b00      	cmp	r3, #0
 8016ca2:	d007      	beq.n	8016cb4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8016ca4:	687a      	ldr	r2, [r7, #4]
 8016ca6:	f44f 7120 	mov.w	r1, #640	; 0x280
 8016caa:	200e      	movs	r0, #14
 8016cac:	f7f9 fd6a 	bl	8010784 <pbuf_clone>
 8016cb0:	61f8      	str	r0, [r7, #28]
 8016cb2:	e004      	b.n	8016cbe <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8016cb4:	687b      	ldr	r3, [r7, #4]
 8016cb6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8016cb8:	69f8      	ldr	r0, [r7, #28]
 8016cba:	f7f9 fba7 	bl	801040c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8016cbe:	69fb      	ldr	r3, [r7, #28]
 8016cc0:	2b00      	cmp	r3, #0
 8016cc2:	d021      	beq.n	8016d08 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8016cc4:	7c7a      	ldrb	r2, [r7, #17]
 8016cc6:	4918      	ldr	r1, [pc, #96]	; (8016d28 <etharp_query+0x268>)
 8016cc8:	4613      	mov	r3, r2
 8016cca:	005b      	lsls	r3, r3, #1
 8016ccc:	4413      	add	r3, r2
 8016cce:	00db      	lsls	r3, r3, #3
 8016cd0:	440b      	add	r3, r1
 8016cd2:	681b      	ldr	r3, [r3, #0]
 8016cd4:	2b00      	cmp	r3, #0
 8016cd6:	d00a      	beq.n	8016cee <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8016cd8:	7c7a      	ldrb	r2, [r7, #17]
 8016cda:	4913      	ldr	r1, [pc, #76]	; (8016d28 <etharp_query+0x268>)
 8016cdc:	4613      	mov	r3, r2
 8016cde:	005b      	lsls	r3, r3, #1
 8016ce0:	4413      	add	r3, r2
 8016ce2:	00db      	lsls	r3, r3, #3
 8016ce4:	440b      	add	r3, r1
 8016ce6:	681b      	ldr	r3, [r3, #0]
 8016ce8:	4618      	mov	r0, r3
 8016cea:	f7f9 faef 	bl	80102cc <pbuf_free>
      }
      arp_table[i].q = p;
 8016cee:	7c7a      	ldrb	r2, [r7, #17]
 8016cf0:	490d      	ldr	r1, [pc, #52]	; (8016d28 <etharp_query+0x268>)
 8016cf2:	4613      	mov	r3, r2
 8016cf4:	005b      	lsls	r3, r3, #1
 8016cf6:	4413      	add	r3, r2
 8016cf8:	00db      	lsls	r3, r3, #3
 8016cfa:	440b      	add	r3, r1
 8016cfc:	69fa      	ldr	r2, [r7, #28]
 8016cfe:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8016d00:	2300      	movs	r3, #0
 8016d02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016d06:	e002      	b.n	8016d0e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8016d08:	23ff      	movs	r3, #255	; 0xff
 8016d0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8016d0e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8016d12:	4618      	mov	r0, r3
 8016d14:	3728      	adds	r7, #40	; 0x28
 8016d16:	46bd      	mov	sp, r7
 8016d18:	bd80      	pop	{r7, pc}
 8016d1a:	bf00      	nop
 8016d1c:	0801d9d8 	.word	0x0801d9d8
 8016d20:	0801db84 	.word	0x0801db84
 8016d24:	0801da50 	.word	0x0801da50
 8016d28:	20008058 	.word	0x20008058
 8016d2c:	0801db94 	.word	0x0801db94
 8016d30:	0801db78 	.word	0x0801db78
 8016d34:	20008148 	.word	0x20008148
 8016d38:	0801dbbc 	.word	0x0801dbbc

08016d3c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8016d3c:	b580      	push	{r7, lr}
 8016d3e:	b08a      	sub	sp, #40	; 0x28
 8016d40:	af02      	add	r7, sp, #8
 8016d42:	60f8      	str	r0, [r7, #12]
 8016d44:	60b9      	str	r1, [r7, #8]
 8016d46:	607a      	str	r2, [r7, #4]
 8016d48:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8016d4a:	2300      	movs	r3, #0
 8016d4c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016d4e:	68fb      	ldr	r3, [r7, #12]
 8016d50:	2b00      	cmp	r3, #0
 8016d52:	d106      	bne.n	8016d62 <etharp_raw+0x26>
 8016d54:	4b3a      	ldr	r3, [pc, #232]	; (8016e40 <etharp_raw+0x104>)
 8016d56:	f240 4257 	movw	r2, #1111	; 0x457
 8016d5a:	493a      	ldr	r1, [pc, #232]	; (8016e44 <etharp_raw+0x108>)
 8016d5c:	483a      	ldr	r0, [pc, #232]	; (8016e48 <etharp_raw+0x10c>)
 8016d5e:	f002 f975 	bl	801904c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8016d62:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016d66:	211c      	movs	r1, #28
 8016d68:	200e      	movs	r0, #14
 8016d6a:	f7f8 ffcb 	bl	800fd04 <pbuf_alloc>
 8016d6e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8016d70:	69bb      	ldr	r3, [r7, #24]
 8016d72:	2b00      	cmp	r3, #0
 8016d74:	d102      	bne.n	8016d7c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8016d76:	f04f 33ff 	mov.w	r3, #4294967295
 8016d7a:	e05d      	b.n	8016e38 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8016d7c:	69bb      	ldr	r3, [r7, #24]
 8016d7e:	895b      	ldrh	r3, [r3, #10]
 8016d80:	2b1b      	cmp	r3, #27
 8016d82:	d806      	bhi.n	8016d92 <etharp_raw+0x56>
 8016d84:	4b2e      	ldr	r3, [pc, #184]	; (8016e40 <etharp_raw+0x104>)
 8016d86:	f240 4262 	movw	r2, #1122	; 0x462
 8016d8a:	4930      	ldr	r1, [pc, #192]	; (8016e4c <etharp_raw+0x110>)
 8016d8c:	482e      	ldr	r0, [pc, #184]	; (8016e48 <etharp_raw+0x10c>)
 8016d8e:	f002 f95d 	bl	801904c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8016d92:	69bb      	ldr	r3, [r7, #24]
 8016d94:	685b      	ldr	r3, [r3, #4]
 8016d96:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8016d98:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016d9a:	4618      	mov	r0, r3
 8016d9c:	f7f7 fea0 	bl	800eae0 <lwip_htons>
 8016da0:	4603      	mov	r3, r0
 8016da2:	461a      	mov	r2, r3
 8016da4:	697b      	ldr	r3, [r7, #20]
 8016da6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8016da8:	68fb      	ldr	r3, [r7, #12]
 8016daa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016dae:	2b06      	cmp	r3, #6
 8016db0:	d006      	beq.n	8016dc0 <etharp_raw+0x84>
 8016db2:	4b23      	ldr	r3, [pc, #140]	; (8016e40 <etharp_raw+0x104>)
 8016db4:	f240 4269 	movw	r2, #1129	; 0x469
 8016db8:	4925      	ldr	r1, [pc, #148]	; (8016e50 <etharp_raw+0x114>)
 8016dba:	4823      	ldr	r0, [pc, #140]	; (8016e48 <etharp_raw+0x10c>)
 8016dbc:	f002 f946 	bl	801904c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8016dc0:	697b      	ldr	r3, [r7, #20]
 8016dc2:	3308      	adds	r3, #8
 8016dc4:	2206      	movs	r2, #6
 8016dc6:	6839      	ldr	r1, [r7, #0]
 8016dc8:	4618      	mov	r0, r3
 8016dca:	f002 fb0d 	bl	80193e8 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8016dce:	697b      	ldr	r3, [r7, #20]
 8016dd0:	3312      	adds	r3, #18
 8016dd2:	2206      	movs	r2, #6
 8016dd4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016dd6:	4618      	mov	r0, r3
 8016dd8:	f002 fb06 	bl	80193e8 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8016ddc:	697b      	ldr	r3, [r7, #20]
 8016dde:	330e      	adds	r3, #14
 8016de0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016de2:	6812      	ldr	r2, [r2, #0]
 8016de4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8016de6:	697b      	ldr	r3, [r7, #20]
 8016de8:	3318      	adds	r3, #24
 8016dea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016dec:	6812      	ldr	r2, [r2, #0]
 8016dee:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8016df0:	697b      	ldr	r3, [r7, #20]
 8016df2:	2200      	movs	r2, #0
 8016df4:	701a      	strb	r2, [r3, #0]
 8016df6:	2200      	movs	r2, #0
 8016df8:	f042 0201 	orr.w	r2, r2, #1
 8016dfc:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8016dfe:	697b      	ldr	r3, [r7, #20]
 8016e00:	2200      	movs	r2, #0
 8016e02:	f042 0208 	orr.w	r2, r2, #8
 8016e06:	709a      	strb	r2, [r3, #2]
 8016e08:	2200      	movs	r2, #0
 8016e0a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8016e0c:	697b      	ldr	r3, [r7, #20]
 8016e0e:	2206      	movs	r2, #6
 8016e10:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8016e12:	697b      	ldr	r3, [r7, #20]
 8016e14:	2204      	movs	r2, #4
 8016e16:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8016e18:	f640 0306 	movw	r3, #2054	; 0x806
 8016e1c:	9300      	str	r3, [sp, #0]
 8016e1e:	687b      	ldr	r3, [r7, #4]
 8016e20:	68ba      	ldr	r2, [r7, #8]
 8016e22:	69b9      	ldr	r1, [r7, #24]
 8016e24:	68f8      	ldr	r0, [r7, #12]
 8016e26:	f001 fba1 	bl	801856c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8016e2a:	69b8      	ldr	r0, [r7, #24]
 8016e2c:	f7f9 fa4e 	bl	80102cc <pbuf_free>
  p = NULL;
 8016e30:	2300      	movs	r3, #0
 8016e32:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8016e34:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016e38:	4618      	mov	r0, r3
 8016e3a:	3720      	adds	r7, #32
 8016e3c:	46bd      	mov	sp, r7
 8016e3e:	bd80      	pop	{r7, pc}
 8016e40:	0801d9d8 	.word	0x0801d9d8
 8016e44:	0801db28 	.word	0x0801db28
 8016e48:	0801da50 	.word	0x0801da50
 8016e4c:	0801dbd8 	.word	0x0801dbd8
 8016e50:	0801dc0c 	.word	0x0801dc0c

08016e54 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8016e54:	b580      	push	{r7, lr}
 8016e56:	b088      	sub	sp, #32
 8016e58:	af04      	add	r7, sp, #16
 8016e5a:	60f8      	str	r0, [r7, #12]
 8016e5c:	60b9      	str	r1, [r7, #8]
 8016e5e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016e60:	68fb      	ldr	r3, [r7, #12]
 8016e62:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8016e66:	68fb      	ldr	r3, [r7, #12]
 8016e68:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8016e6c:	68fb      	ldr	r3, [r7, #12]
 8016e6e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016e70:	2201      	movs	r2, #1
 8016e72:	9203      	str	r2, [sp, #12]
 8016e74:	68ba      	ldr	r2, [r7, #8]
 8016e76:	9202      	str	r2, [sp, #8]
 8016e78:	4a06      	ldr	r2, [pc, #24]	; (8016e94 <etharp_request_dst+0x40>)
 8016e7a:	9201      	str	r2, [sp, #4]
 8016e7c:	9300      	str	r3, [sp, #0]
 8016e7e:	4603      	mov	r3, r0
 8016e80:	687a      	ldr	r2, [r7, #4]
 8016e82:	68f8      	ldr	r0, [r7, #12]
 8016e84:	f7ff ff5a 	bl	8016d3c <etharp_raw>
 8016e88:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8016e8a:	4618      	mov	r0, r3
 8016e8c:	3710      	adds	r7, #16
 8016e8e:	46bd      	mov	sp, r7
 8016e90:	bd80      	pop	{r7, pc}
 8016e92:	bf00      	nop
 8016e94:	0801e1d8 	.word	0x0801e1d8

08016e98 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8016e98:	b580      	push	{r7, lr}
 8016e9a:	b082      	sub	sp, #8
 8016e9c:	af00      	add	r7, sp, #0
 8016e9e:	6078      	str	r0, [r7, #4]
 8016ea0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8016ea2:	4a05      	ldr	r2, [pc, #20]	; (8016eb8 <etharp_request+0x20>)
 8016ea4:	6839      	ldr	r1, [r7, #0]
 8016ea6:	6878      	ldr	r0, [r7, #4]
 8016ea8:	f7ff ffd4 	bl	8016e54 <etharp_request_dst>
 8016eac:	4603      	mov	r3, r0
}
 8016eae:	4618      	mov	r0, r3
 8016eb0:	3708      	adds	r7, #8
 8016eb2:	46bd      	mov	sp, r7
 8016eb4:	bd80      	pop	{r7, pc}
 8016eb6:	bf00      	nop
 8016eb8:	0801e1d0 	.word	0x0801e1d0

08016ebc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8016ebc:	b580      	push	{r7, lr}
 8016ebe:	b08e      	sub	sp, #56	; 0x38
 8016ec0:	af04      	add	r7, sp, #16
 8016ec2:	6078      	str	r0, [r7, #4]
 8016ec4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8016ec6:	4b87      	ldr	r3, [pc, #540]	; (80170e4 <icmp_input+0x228>)
 8016ec8:	689b      	ldr	r3, [r3, #8]
 8016eca:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8016ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ece:	781b      	ldrb	r3, [r3, #0]
 8016ed0:	f003 030f 	and.w	r3, r3, #15
 8016ed4:	b2db      	uxtb	r3, r3
 8016ed6:	009b      	lsls	r3, r3, #2
 8016ed8:	b2db      	uxtb	r3, r3
 8016eda:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8016edc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016ede:	2b13      	cmp	r3, #19
 8016ee0:	f240 80e8 	bls.w	80170b4 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8016ee4:	687b      	ldr	r3, [r7, #4]
 8016ee6:	895b      	ldrh	r3, [r3, #10]
 8016ee8:	2b03      	cmp	r3, #3
 8016eea:	f240 80e5 	bls.w	80170b8 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8016eee:	687b      	ldr	r3, [r7, #4]
 8016ef0:	685b      	ldr	r3, [r3, #4]
 8016ef2:	781b      	ldrb	r3, [r3, #0]
 8016ef4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8016ef8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8016efc:	2b00      	cmp	r3, #0
 8016efe:	f000 80d2 	beq.w	80170a6 <icmp_input+0x1ea>
 8016f02:	2b08      	cmp	r3, #8
 8016f04:	f040 80d2 	bne.w	80170ac <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8016f08:	4b77      	ldr	r3, [pc, #476]	; (80170e8 <icmp_input+0x22c>)
 8016f0a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016f0c:	4b75      	ldr	r3, [pc, #468]	; (80170e4 <icmp_input+0x228>)
 8016f0e:	695b      	ldr	r3, [r3, #20]
 8016f10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016f14:	2be0      	cmp	r3, #224	; 0xe0
 8016f16:	f000 80d6 	beq.w	80170c6 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8016f1a:	4b72      	ldr	r3, [pc, #456]	; (80170e4 <icmp_input+0x228>)
 8016f1c:	695b      	ldr	r3, [r3, #20]
 8016f1e:	4a71      	ldr	r2, [pc, #452]	; (80170e4 <icmp_input+0x228>)
 8016f20:	6812      	ldr	r2, [r2, #0]
 8016f22:	4611      	mov	r1, r2
 8016f24:	4618      	mov	r0, r3
 8016f26:	f000 fc13 	bl	8017750 <ip4_addr_isbroadcast_u32>
 8016f2a:	4603      	mov	r3, r0
 8016f2c:	2b00      	cmp	r3, #0
 8016f2e:	f040 80cc 	bne.w	80170ca <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8016f32:	687b      	ldr	r3, [r7, #4]
 8016f34:	891b      	ldrh	r3, [r3, #8]
 8016f36:	2b07      	cmp	r3, #7
 8016f38:	f240 80c0 	bls.w	80170bc <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8016f3c:	6878      	ldr	r0, [r7, #4]
 8016f3e:	f7f7 fe6c 	bl	800ec1a <inet_chksum_pbuf>
 8016f42:	4603      	mov	r3, r0
 8016f44:	2b00      	cmp	r3, #0
 8016f46:	d003      	beq.n	8016f50 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8016f48:	6878      	ldr	r0, [r7, #4]
 8016f4a:	f7f9 f9bf 	bl	80102cc <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8016f4e:	e0c5      	b.n	80170dc <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016f50:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016f52:	330e      	adds	r3, #14
 8016f54:	4619      	mov	r1, r3
 8016f56:	6878      	ldr	r0, [r7, #4]
 8016f58:	f7f9 f922 	bl	80101a0 <pbuf_add_header>
 8016f5c:	4603      	mov	r3, r0
 8016f5e:	2b00      	cmp	r3, #0
 8016f60:	d04b      	beq.n	8016ffa <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8016f62:	687b      	ldr	r3, [r7, #4]
 8016f64:	891a      	ldrh	r2, [r3, #8]
 8016f66:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016f68:	4413      	add	r3, r2
 8016f6a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8016f6c:	687b      	ldr	r3, [r7, #4]
 8016f6e:	891b      	ldrh	r3, [r3, #8]
 8016f70:	8b7a      	ldrh	r2, [r7, #26]
 8016f72:	429a      	cmp	r2, r3
 8016f74:	f0c0 80ab 	bcc.w	80170ce <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8016f78:	8b7b      	ldrh	r3, [r7, #26]
 8016f7a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016f7e:	4619      	mov	r1, r3
 8016f80:	200e      	movs	r0, #14
 8016f82:	f7f8 febf 	bl	800fd04 <pbuf_alloc>
 8016f86:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8016f88:	697b      	ldr	r3, [r7, #20]
 8016f8a:	2b00      	cmp	r3, #0
 8016f8c:	f000 80a1 	beq.w	80170d2 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8016f90:	697b      	ldr	r3, [r7, #20]
 8016f92:	895b      	ldrh	r3, [r3, #10]
 8016f94:	461a      	mov	r2, r3
 8016f96:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016f98:	3308      	adds	r3, #8
 8016f9a:	429a      	cmp	r2, r3
 8016f9c:	d203      	bcs.n	8016fa6 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8016f9e:	6978      	ldr	r0, [r7, #20]
 8016fa0:	f7f9 f994 	bl	80102cc <pbuf_free>
          goto icmperr;
 8016fa4:	e096      	b.n	80170d4 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8016fa6:	697b      	ldr	r3, [r7, #20]
 8016fa8:	685b      	ldr	r3, [r3, #4]
 8016faa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8016fac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016fae:	4618      	mov	r0, r3
 8016fb0:	f002 fa1a 	bl	80193e8 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8016fb4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016fb6:	4619      	mov	r1, r3
 8016fb8:	6978      	ldr	r0, [r7, #20]
 8016fba:	f7f9 f901 	bl	80101c0 <pbuf_remove_header>
 8016fbe:	4603      	mov	r3, r0
 8016fc0:	2b00      	cmp	r3, #0
 8016fc2:	d009      	beq.n	8016fd8 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8016fc4:	4b49      	ldr	r3, [pc, #292]	; (80170ec <icmp_input+0x230>)
 8016fc6:	22b6      	movs	r2, #182	; 0xb6
 8016fc8:	4949      	ldr	r1, [pc, #292]	; (80170f0 <icmp_input+0x234>)
 8016fca:	484a      	ldr	r0, [pc, #296]	; (80170f4 <icmp_input+0x238>)
 8016fcc:	f002 f83e 	bl	801904c <iprintf>
          pbuf_free(r);
 8016fd0:	6978      	ldr	r0, [r7, #20]
 8016fd2:	f7f9 f97b 	bl	80102cc <pbuf_free>
          goto icmperr;
 8016fd6:	e07d      	b.n	80170d4 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8016fd8:	6879      	ldr	r1, [r7, #4]
 8016fda:	6978      	ldr	r0, [r7, #20]
 8016fdc:	f7f9 fa8e 	bl	80104fc <pbuf_copy>
 8016fe0:	4603      	mov	r3, r0
 8016fe2:	2b00      	cmp	r3, #0
 8016fe4:	d003      	beq.n	8016fee <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8016fe6:	6978      	ldr	r0, [r7, #20]
 8016fe8:	f7f9 f970 	bl	80102cc <pbuf_free>
          goto icmperr;
 8016fec:	e072      	b.n	80170d4 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8016fee:	6878      	ldr	r0, [r7, #4]
 8016ff0:	f7f9 f96c 	bl	80102cc <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8016ff4:	697b      	ldr	r3, [r7, #20]
 8016ff6:	607b      	str	r3, [r7, #4]
 8016ff8:	e00f      	b.n	801701a <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016ffa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016ffc:	330e      	adds	r3, #14
 8016ffe:	4619      	mov	r1, r3
 8017000:	6878      	ldr	r0, [r7, #4]
 8017002:	f7f9 f8dd 	bl	80101c0 <pbuf_remove_header>
 8017006:	4603      	mov	r3, r0
 8017008:	2b00      	cmp	r3, #0
 801700a:	d006      	beq.n	801701a <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801700c:	4b37      	ldr	r3, [pc, #220]	; (80170ec <icmp_input+0x230>)
 801700e:	22c7      	movs	r2, #199	; 0xc7
 8017010:	4939      	ldr	r1, [pc, #228]	; (80170f8 <icmp_input+0x23c>)
 8017012:	4838      	ldr	r0, [pc, #224]	; (80170f4 <icmp_input+0x238>)
 8017014:	f002 f81a 	bl	801904c <iprintf>
          goto icmperr;
 8017018:	e05c      	b.n	80170d4 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801701a:	687b      	ldr	r3, [r7, #4]
 801701c:	685b      	ldr	r3, [r3, #4]
 801701e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8017020:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017022:	4619      	mov	r1, r3
 8017024:	6878      	ldr	r0, [r7, #4]
 8017026:	f7f9 f8bb 	bl	80101a0 <pbuf_add_header>
 801702a:	4603      	mov	r3, r0
 801702c:	2b00      	cmp	r3, #0
 801702e:	d13c      	bne.n	80170aa <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8017030:	687b      	ldr	r3, [r7, #4]
 8017032:	685b      	ldr	r3, [r3, #4]
 8017034:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8017036:	69fb      	ldr	r3, [r7, #28]
 8017038:	681a      	ldr	r2, [r3, #0]
 801703a:	68fb      	ldr	r3, [r7, #12]
 801703c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801703e:	4b29      	ldr	r3, [pc, #164]	; (80170e4 <icmp_input+0x228>)
 8017040:	691a      	ldr	r2, [r3, #16]
 8017042:	68fb      	ldr	r3, [r7, #12]
 8017044:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8017046:	693b      	ldr	r3, [r7, #16]
 8017048:	2200      	movs	r2, #0
 801704a:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 801704c:	693b      	ldr	r3, [r7, #16]
 801704e:	885b      	ldrh	r3, [r3, #2]
 8017050:	b29b      	uxth	r3, r3
 8017052:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8017056:	4293      	cmp	r3, r2
 8017058:	d907      	bls.n	801706a <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 801705a:	693b      	ldr	r3, [r7, #16]
 801705c:	885b      	ldrh	r3, [r3, #2]
 801705e:	b29b      	uxth	r3, r3
 8017060:	3309      	adds	r3, #9
 8017062:	b29a      	uxth	r2, r3
 8017064:	693b      	ldr	r3, [r7, #16]
 8017066:	805a      	strh	r2, [r3, #2]
 8017068:	e006      	b.n	8017078 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 801706a:	693b      	ldr	r3, [r7, #16]
 801706c:	885b      	ldrh	r3, [r3, #2]
 801706e:	b29b      	uxth	r3, r3
 8017070:	3308      	adds	r3, #8
 8017072:	b29a      	uxth	r2, r3
 8017074:	693b      	ldr	r3, [r7, #16]
 8017076:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8017078:	68fb      	ldr	r3, [r7, #12]
 801707a:	22ff      	movs	r2, #255	; 0xff
 801707c:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801707e:	68fb      	ldr	r3, [r7, #12]
 8017080:	2200      	movs	r2, #0
 8017082:	729a      	strb	r2, [r3, #10]
 8017084:	2200      	movs	r2, #0
 8017086:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8017088:	683b      	ldr	r3, [r7, #0]
 801708a:	9302      	str	r3, [sp, #8]
 801708c:	2301      	movs	r3, #1
 801708e:	9301      	str	r3, [sp, #4]
 8017090:	2300      	movs	r3, #0
 8017092:	9300      	str	r3, [sp, #0]
 8017094:	23ff      	movs	r3, #255	; 0xff
 8017096:	2200      	movs	r2, #0
 8017098:	69f9      	ldr	r1, [r7, #28]
 801709a:	6878      	ldr	r0, [r7, #4]
 801709c:	f000 fa80 	bl	80175a0 <ip4_output_if>
 80170a0:	4603      	mov	r3, r0
 80170a2:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80170a4:	e001      	b.n	80170aa <icmp_input+0x1ee>
      break;
 80170a6:	bf00      	nop
 80170a8:	e000      	b.n	80170ac <icmp_input+0x1f0>
      break;
 80170aa:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80170ac:	6878      	ldr	r0, [r7, #4]
 80170ae:	f7f9 f90d 	bl	80102cc <pbuf_free>
  return;
 80170b2:	e013      	b.n	80170dc <icmp_input+0x220>
    goto lenerr;
 80170b4:	bf00      	nop
 80170b6:	e002      	b.n	80170be <icmp_input+0x202>
    goto lenerr;
 80170b8:	bf00      	nop
 80170ba:	e000      	b.n	80170be <icmp_input+0x202>
        goto lenerr;
 80170bc:	bf00      	nop
lenerr:
  pbuf_free(p);
 80170be:	6878      	ldr	r0, [r7, #4]
 80170c0:	f7f9 f904 	bl	80102cc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80170c4:	e00a      	b.n	80170dc <icmp_input+0x220>
        goto icmperr;
 80170c6:	bf00      	nop
 80170c8:	e004      	b.n	80170d4 <icmp_input+0x218>
        goto icmperr;
 80170ca:	bf00      	nop
 80170cc:	e002      	b.n	80170d4 <icmp_input+0x218>
          goto icmperr;
 80170ce:	bf00      	nop
 80170d0:	e000      	b.n	80170d4 <icmp_input+0x218>
          goto icmperr;
 80170d2:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80170d4:	6878      	ldr	r0, [r7, #4]
 80170d6:	f7f9 f8f9 	bl	80102cc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80170da:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80170dc:	3728      	adds	r7, #40	; 0x28
 80170de:	46bd      	mov	sp, r7
 80170e0:	bd80      	pop	{r7, pc}
 80170e2:	bf00      	nop
 80170e4:	200050dc 	.word	0x200050dc
 80170e8:	200050f0 	.word	0x200050f0
 80170ec:	0801dc50 	.word	0x0801dc50
 80170f0:	0801dc88 	.word	0x0801dc88
 80170f4:	0801dcc0 	.word	0x0801dcc0
 80170f8:	0801dce8 	.word	0x0801dce8

080170fc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80170fc:	b580      	push	{r7, lr}
 80170fe:	b082      	sub	sp, #8
 8017100:	af00      	add	r7, sp, #0
 8017102:	6078      	str	r0, [r7, #4]
 8017104:	460b      	mov	r3, r1
 8017106:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8017108:	78fb      	ldrb	r3, [r7, #3]
 801710a:	461a      	mov	r2, r3
 801710c:	2103      	movs	r1, #3
 801710e:	6878      	ldr	r0, [r7, #4]
 8017110:	f000 f814 	bl	801713c <icmp_send_response>
}
 8017114:	bf00      	nop
 8017116:	3708      	adds	r7, #8
 8017118:	46bd      	mov	sp, r7
 801711a:	bd80      	pop	{r7, pc}

0801711c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801711c:	b580      	push	{r7, lr}
 801711e:	b082      	sub	sp, #8
 8017120:	af00      	add	r7, sp, #0
 8017122:	6078      	str	r0, [r7, #4]
 8017124:	460b      	mov	r3, r1
 8017126:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8017128:	78fb      	ldrb	r3, [r7, #3]
 801712a:	461a      	mov	r2, r3
 801712c:	210b      	movs	r1, #11
 801712e:	6878      	ldr	r0, [r7, #4]
 8017130:	f000 f804 	bl	801713c <icmp_send_response>
}
 8017134:	bf00      	nop
 8017136:	3708      	adds	r7, #8
 8017138:	46bd      	mov	sp, r7
 801713a:	bd80      	pop	{r7, pc}

0801713c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801713c:	b580      	push	{r7, lr}
 801713e:	b08c      	sub	sp, #48	; 0x30
 8017140:	af04      	add	r7, sp, #16
 8017142:	6078      	str	r0, [r7, #4]
 8017144:	460b      	mov	r3, r1
 8017146:	70fb      	strb	r3, [r7, #3]
 8017148:	4613      	mov	r3, r2
 801714a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801714c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017150:	2124      	movs	r1, #36	; 0x24
 8017152:	2022      	movs	r0, #34	; 0x22
 8017154:	f7f8 fdd6 	bl	800fd04 <pbuf_alloc>
 8017158:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801715a:	69fb      	ldr	r3, [r7, #28]
 801715c:	2b00      	cmp	r3, #0
 801715e:	d056      	beq.n	801720e <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8017160:	69fb      	ldr	r3, [r7, #28]
 8017162:	895b      	ldrh	r3, [r3, #10]
 8017164:	2b23      	cmp	r3, #35	; 0x23
 8017166:	d806      	bhi.n	8017176 <icmp_send_response+0x3a>
 8017168:	4b2b      	ldr	r3, [pc, #172]	; (8017218 <icmp_send_response+0xdc>)
 801716a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801716e:	492b      	ldr	r1, [pc, #172]	; (801721c <icmp_send_response+0xe0>)
 8017170:	482b      	ldr	r0, [pc, #172]	; (8017220 <icmp_send_response+0xe4>)
 8017172:	f001 ff6b 	bl	801904c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8017176:	687b      	ldr	r3, [r7, #4]
 8017178:	685b      	ldr	r3, [r3, #4]
 801717a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801717c:	69fb      	ldr	r3, [r7, #28]
 801717e:	685b      	ldr	r3, [r3, #4]
 8017180:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8017182:	697b      	ldr	r3, [r7, #20]
 8017184:	78fa      	ldrb	r2, [r7, #3]
 8017186:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8017188:	697b      	ldr	r3, [r7, #20]
 801718a:	78ba      	ldrb	r2, [r7, #2]
 801718c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801718e:	697b      	ldr	r3, [r7, #20]
 8017190:	2200      	movs	r2, #0
 8017192:	711a      	strb	r2, [r3, #4]
 8017194:	2200      	movs	r2, #0
 8017196:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8017198:	697b      	ldr	r3, [r7, #20]
 801719a:	2200      	movs	r2, #0
 801719c:	719a      	strb	r2, [r3, #6]
 801719e:	2200      	movs	r2, #0
 80171a0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80171a2:	69fb      	ldr	r3, [r7, #28]
 80171a4:	685b      	ldr	r3, [r3, #4]
 80171a6:	f103 0008 	add.w	r0, r3, #8
 80171aa:	687b      	ldr	r3, [r7, #4]
 80171ac:	685b      	ldr	r3, [r3, #4]
 80171ae:	221c      	movs	r2, #28
 80171b0:	4619      	mov	r1, r3
 80171b2:	f002 f919 	bl	80193e8 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80171b6:	69bb      	ldr	r3, [r7, #24]
 80171b8:	68db      	ldr	r3, [r3, #12]
 80171ba:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80171bc:	f107 030c 	add.w	r3, r7, #12
 80171c0:	4618      	mov	r0, r3
 80171c2:	f000 f82f 	bl	8017224 <ip4_route>
 80171c6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80171c8:	693b      	ldr	r3, [r7, #16]
 80171ca:	2b00      	cmp	r3, #0
 80171cc:	d01b      	beq.n	8017206 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80171ce:	697b      	ldr	r3, [r7, #20]
 80171d0:	2200      	movs	r2, #0
 80171d2:	709a      	strb	r2, [r3, #2]
 80171d4:	2200      	movs	r2, #0
 80171d6:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 80171d8:	69fb      	ldr	r3, [r7, #28]
 80171da:	895b      	ldrh	r3, [r3, #10]
 80171dc:	4619      	mov	r1, r3
 80171de:	6978      	ldr	r0, [r7, #20]
 80171e0:	f7f7 fd09 	bl	800ebf6 <inet_chksum>
 80171e4:	4603      	mov	r3, r0
 80171e6:	461a      	mov	r2, r3
 80171e8:	697b      	ldr	r3, [r7, #20]
 80171ea:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80171ec:	f107 020c 	add.w	r2, r7, #12
 80171f0:	693b      	ldr	r3, [r7, #16]
 80171f2:	9302      	str	r3, [sp, #8]
 80171f4:	2301      	movs	r3, #1
 80171f6:	9301      	str	r3, [sp, #4]
 80171f8:	2300      	movs	r3, #0
 80171fa:	9300      	str	r3, [sp, #0]
 80171fc:	23ff      	movs	r3, #255	; 0xff
 80171fe:	2100      	movs	r1, #0
 8017200:	69f8      	ldr	r0, [r7, #28]
 8017202:	f000 f9cd 	bl	80175a0 <ip4_output_if>
  }
  pbuf_free(q);
 8017206:	69f8      	ldr	r0, [r7, #28]
 8017208:	f7f9 f860 	bl	80102cc <pbuf_free>
 801720c:	e000      	b.n	8017210 <icmp_send_response+0xd4>
    return;
 801720e:	bf00      	nop
}
 8017210:	3720      	adds	r7, #32
 8017212:	46bd      	mov	sp, r7
 8017214:	bd80      	pop	{r7, pc}
 8017216:	bf00      	nop
 8017218:	0801dc50 	.word	0x0801dc50
 801721c:	0801dd1c 	.word	0x0801dd1c
 8017220:	0801dcc0 	.word	0x0801dcc0

08017224 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8017224:	b480      	push	{r7}
 8017226:	b085      	sub	sp, #20
 8017228:	af00      	add	r7, sp, #0
 801722a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801722c:	4b33      	ldr	r3, [pc, #204]	; (80172fc <ip4_route+0xd8>)
 801722e:	681b      	ldr	r3, [r3, #0]
 8017230:	60fb      	str	r3, [r7, #12]
 8017232:	e036      	b.n	80172a2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017234:	68fb      	ldr	r3, [r7, #12]
 8017236:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801723a:	f003 0301 	and.w	r3, r3, #1
 801723e:	b2db      	uxtb	r3, r3
 8017240:	2b00      	cmp	r3, #0
 8017242:	d02b      	beq.n	801729c <ip4_route+0x78>
 8017244:	68fb      	ldr	r3, [r7, #12]
 8017246:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801724a:	089b      	lsrs	r3, r3, #2
 801724c:	f003 0301 	and.w	r3, r3, #1
 8017250:	b2db      	uxtb	r3, r3
 8017252:	2b00      	cmp	r3, #0
 8017254:	d022      	beq.n	801729c <ip4_route+0x78>
 8017256:	68fb      	ldr	r3, [r7, #12]
 8017258:	3304      	adds	r3, #4
 801725a:	681b      	ldr	r3, [r3, #0]
 801725c:	2b00      	cmp	r3, #0
 801725e:	d01d      	beq.n	801729c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8017260:	687b      	ldr	r3, [r7, #4]
 8017262:	681a      	ldr	r2, [r3, #0]
 8017264:	68fb      	ldr	r3, [r7, #12]
 8017266:	3304      	adds	r3, #4
 8017268:	681b      	ldr	r3, [r3, #0]
 801726a:	405a      	eors	r2, r3
 801726c:	68fb      	ldr	r3, [r7, #12]
 801726e:	3308      	adds	r3, #8
 8017270:	681b      	ldr	r3, [r3, #0]
 8017272:	4013      	ands	r3, r2
 8017274:	2b00      	cmp	r3, #0
 8017276:	d101      	bne.n	801727c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8017278:	68fb      	ldr	r3, [r7, #12]
 801727a:	e038      	b.n	80172ee <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801727c:	68fb      	ldr	r3, [r7, #12]
 801727e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017282:	f003 0302 	and.w	r3, r3, #2
 8017286:	2b00      	cmp	r3, #0
 8017288:	d108      	bne.n	801729c <ip4_route+0x78>
 801728a:	687b      	ldr	r3, [r7, #4]
 801728c:	681a      	ldr	r2, [r3, #0]
 801728e:	68fb      	ldr	r3, [r7, #12]
 8017290:	330c      	adds	r3, #12
 8017292:	681b      	ldr	r3, [r3, #0]
 8017294:	429a      	cmp	r2, r3
 8017296:	d101      	bne.n	801729c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8017298:	68fb      	ldr	r3, [r7, #12]
 801729a:	e028      	b.n	80172ee <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801729c:	68fb      	ldr	r3, [r7, #12]
 801729e:	681b      	ldr	r3, [r3, #0]
 80172a0:	60fb      	str	r3, [r7, #12]
 80172a2:	68fb      	ldr	r3, [r7, #12]
 80172a4:	2b00      	cmp	r3, #0
 80172a6:	d1c5      	bne.n	8017234 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80172a8:	4b15      	ldr	r3, [pc, #84]	; (8017300 <ip4_route+0xdc>)
 80172aa:	681b      	ldr	r3, [r3, #0]
 80172ac:	2b00      	cmp	r3, #0
 80172ae:	d01a      	beq.n	80172e6 <ip4_route+0xc2>
 80172b0:	4b13      	ldr	r3, [pc, #76]	; (8017300 <ip4_route+0xdc>)
 80172b2:	681b      	ldr	r3, [r3, #0]
 80172b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80172b8:	f003 0301 	and.w	r3, r3, #1
 80172bc:	2b00      	cmp	r3, #0
 80172be:	d012      	beq.n	80172e6 <ip4_route+0xc2>
 80172c0:	4b0f      	ldr	r3, [pc, #60]	; (8017300 <ip4_route+0xdc>)
 80172c2:	681b      	ldr	r3, [r3, #0]
 80172c4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80172c8:	f003 0304 	and.w	r3, r3, #4
 80172cc:	2b00      	cmp	r3, #0
 80172ce:	d00a      	beq.n	80172e6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80172d0:	4b0b      	ldr	r3, [pc, #44]	; (8017300 <ip4_route+0xdc>)
 80172d2:	681b      	ldr	r3, [r3, #0]
 80172d4:	3304      	adds	r3, #4
 80172d6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80172d8:	2b00      	cmp	r3, #0
 80172da:	d004      	beq.n	80172e6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80172dc:	687b      	ldr	r3, [r7, #4]
 80172de:	681b      	ldr	r3, [r3, #0]
 80172e0:	b2db      	uxtb	r3, r3
 80172e2:	2b7f      	cmp	r3, #127	; 0x7f
 80172e4:	d101      	bne.n	80172ea <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80172e6:	2300      	movs	r3, #0
 80172e8:	e001      	b.n	80172ee <ip4_route+0xca>
  }

  return netif_default;
 80172ea:	4b05      	ldr	r3, [pc, #20]	; (8017300 <ip4_route+0xdc>)
 80172ec:	681b      	ldr	r3, [r3, #0]
}
 80172ee:	4618      	mov	r0, r3
 80172f0:	3714      	adds	r7, #20
 80172f2:	46bd      	mov	sp, r7
 80172f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172f8:	4770      	bx	lr
 80172fa:	bf00      	nop
 80172fc:	20007fec 	.word	0x20007fec
 8017300:	20007ff0 	.word	0x20007ff0

08017304 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8017304:	b580      	push	{r7, lr}
 8017306:	b082      	sub	sp, #8
 8017308:	af00      	add	r7, sp, #0
 801730a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801730c:	687b      	ldr	r3, [r7, #4]
 801730e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017312:	f003 0301 	and.w	r3, r3, #1
 8017316:	b2db      	uxtb	r3, r3
 8017318:	2b00      	cmp	r3, #0
 801731a:	d016      	beq.n	801734a <ip4_input_accept+0x46>
 801731c:	687b      	ldr	r3, [r7, #4]
 801731e:	3304      	adds	r3, #4
 8017320:	681b      	ldr	r3, [r3, #0]
 8017322:	2b00      	cmp	r3, #0
 8017324:	d011      	beq.n	801734a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017326:	4b0b      	ldr	r3, [pc, #44]	; (8017354 <ip4_input_accept+0x50>)
 8017328:	695a      	ldr	r2, [r3, #20]
 801732a:	687b      	ldr	r3, [r7, #4]
 801732c:	3304      	adds	r3, #4
 801732e:	681b      	ldr	r3, [r3, #0]
 8017330:	429a      	cmp	r2, r3
 8017332:	d008      	beq.n	8017346 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8017334:	4b07      	ldr	r3, [pc, #28]	; (8017354 <ip4_input_accept+0x50>)
 8017336:	695b      	ldr	r3, [r3, #20]
 8017338:	6879      	ldr	r1, [r7, #4]
 801733a:	4618      	mov	r0, r3
 801733c:	f000 fa08 	bl	8017750 <ip4_addr_isbroadcast_u32>
 8017340:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017342:	2b00      	cmp	r3, #0
 8017344:	d001      	beq.n	801734a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8017346:	2301      	movs	r3, #1
 8017348:	e000      	b.n	801734c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801734a:	2300      	movs	r3, #0
}
 801734c:	4618      	mov	r0, r3
 801734e:	3708      	adds	r7, #8
 8017350:	46bd      	mov	sp, r7
 8017352:	bd80      	pop	{r7, pc}
 8017354:	200050dc 	.word	0x200050dc

08017358 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8017358:	b580      	push	{r7, lr}
 801735a:	b086      	sub	sp, #24
 801735c:	af00      	add	r7, sp, #0
 801735e:	6078      	str	r0, [r7, #4]
 8017360:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8017362:	687b      	ldr	r3, [r7, #4]
 8017364:	685b      	ldr	r3, [r3, #4]
 8017366:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8017368:	697b      	ldr	r3, [r7, #20]
 801736a:	781b      	ldrb	r3, [r3, #0]
 801736c:	091b      	lsrs	r3, r3, #4
 801736e:	b2db      	uxtb	r3, r3
 8017370:	2b04      	cmp	r3, #4
 8017372:	d004      	beq.n	801737e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8017374:	6878      	ldr	r0, [r7, #4]
 8017376:	f7f8 ffa9 	bl	80102cc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801737a:	2300      	movs	r3, #0
 801737c:	e107      	b.n	801758e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801737e:	697b      	ldr	r3, [r7, #20]
 8017380:	781b      	ldrb	r3, [r3, #0]
 8017382:	f003 030f 	and.w	r3, r3, #15
 8017386:	b2db      	uxtb	r3, r3
 8017388:	009b      	lsls	r3, r3, #2
 801738a:	b2db      	uxtb	r3, r3
 801738c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801738e:	697b      	ldr	r3, [r7, #20]
 8017390:	885b      	ldrh	r3, [r3, #2]
 8017392:	b29b      	uxth	r3, r3
 8017394:	4618      	mov	r0, r3
 8017396:	f7f7 fba3 	bl	800eae0 <lwip_htons>
 801739a:	4603      	mov	r3, r0
 801739c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801739e:	687b      	ldr	r3, [r7, #4]
 80173a0:	891b      	ldrh	r3, [r3, #8]
 80173a2:	89ba      	ldrh	r2, [r7, #12]
 80173a4:	429a      	cmp	r2, r3
 80173a6:	d204      	bcs.n	80173b2 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80173a8:	89bb      	ldrh	r3, [r7, #12]
 80173aa:	4619      	mov	r1, r3
 80173ac:	6878      	ldr	r0, [r7, #4]
 80173ae:	f7f8 fe07 	bl	800ffc0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80173b2:	687b      	ldr	r3, [r7, #4]
 80173b4:	895b      	ldrh	r3, [r3, #10]
 80173b6:	89fa      	ldrh	r2, [r7, #14]
 80173b8:	429a      	cmp	r2, r3
 80173ba:	d807      	bhi.n	80173cc <ip4_input+0x74>
 80173bc:	687b      	ldr	r3, [r7, #4]
 80173be:	891b      	ldrh	r3, [r3, #8]
 80173c0:	89ba      	ldrh	r2, [r7, #12]
 80173c2:	429a      	cmp	r2, r3
 80173c4:	d802      	bhi.n	80173cc <ip4_input+0x74>
 80173c6:	89fb      	ldrh	r3, [r7, #14]
 80173c8:	2b13      	cmp	r3, #19
 80173ca:	d804      	bhi.n	80173d6 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80173cc:	6878      	ldr	r0, [r7, #4]
 80173ce:	f7f8 ff7d 	bl	80102cc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80173d2:	2300      	movs	r3, #0
 80173d4:	e0db      	b.n	801758e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80173d6:	697b      	ldr	r3, [r7, #20]
 80173d8:	691b      	ldr	r3, [r3, #16]
 80173da:	4a6f      	ldr	r2, [pc, #444]	; (8017598 <ip4_input+0x240>)
 80173dc:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80173de:	697b      	ldr	r3, [r7, #20]
 80173e0:	68db      	ldr	r3, [r3, #12]
 80173e2:	4a6d      	ldr	r2, [pc, #436]	; (8017598 <ip4_input+0x240>)
 80173e4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80173e6:	4b6c      	ldr	r3, [pc, #432]	; (8017598 <ip4_input+0x240>)
 80173e8:	695b      	ldr	r3, [r3, #20]
 80173ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80173ee:	2be0      	cmp	r3, #224	; 0xe0
 80173f0:	d112      	bne.n	8017418 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80173f2:	683b      	ldr	r3, [r7, #0]
 80173f4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80173f8:	f003 0301 	and.w	r3, r3, #1
 80173fc:	b2db      	uxtb	r3, r3
 80173fe:	2b00      	cmp	r3, #0
 8017400:	d007      	beq.n	8017412 <ip4_input+0xba>
 8017402:	683b      	ldr	r3, [r7, #0]
 8017404:	3304      	adds	r3, #4
 8017406:	681b      	ldr	r3, [r3, #0]
 8017408:	2b00      	cmp	r3, #0
 801740a:	d002      	beq.n	8017412 <ip4_input+0xba>
      netif = inp;
 801740c:	683b      	ldr	r3, [r7, #0]
 801740e:	613b      	str	r3, [r7, #16]
 8017410:	e02a      	b.n	8017468 <ip4_input+0x110>
    } else {
      netif = NULL;
 8017412:	2300      	movs	r3, #0
 8017414:	613b      	str	r3, [r7, #16]
 8017416:	e027      	b.n	8017468 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8017418:	6838      	ldr	r0, [r7, #0]
 801741a:	f7ff ff73 	bl	8017304 <ip4_input_accept>
 801741e:	4603      	mov	r3, r0
 8017420:	2b00      	cmp	r3, #0
 8017422:	d002      	beq.n	801742a <ip4_input+0xd2>
      netif = inp;
 8017424:	683b      	ldr	r3, [r7, #0]
 8017426:	613b      	str	r3, [r7, #16]
 8017428:	e01e      	b.n	8017468 <ip4_input+0x110>
    } else {
      netif = NULL;
 801742a:	2300      	movs	r3, #0
 801742c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801742e:	4b5a      	ldr	r3, [pc, #360]	; (8017598 <ip4_input+0x240>)
 8017430:	695b      	ldr	r3, [r3, #20]
 8017432:	b2db      	uxtb	r3, r3
 8017434:	2b7f      	cmp	r3, #127	; 0x7f
 8017436:	d017      	beq.n	8017468 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8017438:	4b58      	ldr	r3, [pc, #352]	; (801759c <ip4_input+0x244>)
 801743a:	681b      	ldr	r3, [r3, #0]
 801743c:	613b      	str	r3, [r7, #16]
 801743e:	e00e      	b.n	801745e <ip4_input+0x106>
          if (netif == inp) {
 8017440:	693a      	ldr	r2, [r7, #16]
 8017442:	683b      	ldr	r3, [r7, #0]
 8017444:	429a      	cmp	r2, r3
 8017446:	d006      	beq.n	8017456 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8017448:	6938      	ldr	r0, [r7, #16]
 801744a:	f7ff ff5b 	bl	8017304 <ip4_input_accept>
 801744e:	4603      	mov	r3, r0
 8017450:	2b00      	cmp	r3, #0
 8017452:	d108      	bne.n	8017466 <ip4_input+0x10e>
 8017454:	e000      	b.n	8017458 <ip4_input+0x100>
            continue;
 8017456:	bf00      	nop
        NETIF_FOREACH(netif) {
 8017458:	693b      	ldr	r3, [r7, #16]
 801745a:	681b      	ldr	r3, [r3, #0]
 801745c:	613b      	str	r3, [r7, #16]
 801745e:	693b      	ldr	r3, [r7, #16]
 8017460:	2b00      	cmp	r3, #0
 8017462:	d1ed      	bne.n	8017440 <ip4_input+0xe8>
 8017464:	e000      	b.n	8017468 <ip4_input+0x110>
            break;
 8017466:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017468:	4b4b      	ldr	r3, [pc, #300]	; (8017598 <ip4_input+0x240>)
 801746a:	691b      	ldr	r3, [r3, #16]
 801746c:	6839      	ldr	r1, [r7, #0]
 801746e:	4618      	mov	r0, r3
 8017470:	f000 f96e 	bl	8017750 <ip4_addr_isbroadcast_u32>
 8017474:	4603      	mov	r3, r0
 8017476:	2b00      	cmp	r3, #0
 8017478:	d105      	bne.n	8017486 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801747a:	4b47      	ldr	r3, [pc, #284]	; (8017598 <ip4_input+0x240>)
 801747c:	691b      	ldr	r3, [r3, #16]
 801747e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017482:	2be0      	cmp	r3, #224	; 0xe0
 8017484:	d104      	bne.n	8017490 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8017486:	6878      	ldr	r0, [r7, #4]
 8017488:	f7f8 ff20 	bl	80102cc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801748c:	2300      	movs	r3, #0
 801748e:	e07e      	b.n	801758e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8017490:	693b      	ldr	r3, [r7, #16]
 8017492:	2b00      	cmp	r3, #0
 8017494:	d104      	bne.n	80174a0 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8017496:	6878      	ldr	r0, [r7, #4]
 8017498:	f7f8 ff18 	bl	80102cc <pbuf_free>
    return ERR_OK;
 801749c:	2300      	movs	r3, #0
 801749e:	e076      	b.n	801758e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80174a0:	697b      	ldr	r3, [r7, #20]
 80174a2:	88db      	ldrh	r3, [r3, #6]
 80174a4:	b29b      	uxth	r3, r3
 80174a6:	461a      	mov	r2, r3
 80174a8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80174ac:	4013      	ands	r3, r2
 80174ae:	2b00      	cmp	r3, #0
 80174b0:	d00b      	beq.n	80174ca <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80174b2:	6878      	ldr	r0, [r7, #4]
 80174b4:	f000 fc92 	bl	8017ddc <ip4_reass>
 80174b8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80174ba:	687b      	ldr	r3, [r7, #4]
 80174bc:	2b00      	cmp	r3, #0
 80174be:	d101      	bne.n	80174c4 <ip4_input+0x16c>
      return ERR_OK;
 80174c0:	2300      	movs	r3, #0
 80174c2:	e064      	b.n	801758e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80174c4:	687b      	ldr	r3, [r7, #4]
 80174c6:	685b      	ldr	r3, [r3, #4]
 80174c8:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80174ca:	4a33      	ldr	r2, [pc, #204]	; (8017598 <ip4_input+0x240>)
 80174cc:	693b      	ldr	r3, [r7, #16]
 80174ce:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80174d0:	4a31      	ldr	r2, [pc, #196]	; (8017598 <ip4_input+0x240>)
 80174d2:	683b      	ldr	r3, [r7, #0]
 80174d4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80174d6:	4a30      	ldr	r2, [pc, #192]	; (8017598 <ip4_input+0x240>)
 80174d8:	697b      	ldr	r3, [r7, #20]
 80174da:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80174dc:	697b      	ldr	r3, [r7, #20]
 80174de:	781b      	ldrb	r3, [r3, #0]
 80174e0:	f003 030f 	and.w	r3, r3, #15
 80174e4:	b2db      	uxtb	r3, r3
 80174e6:	009b      	lsls	r3, r3, #2
 80174e8:	b2db      	uxtb	r3, r3
 80174ea:	b29a      	uxth	r2, r3
 80174ec:	4b2a      	ldr	r3, [pc, #168]	; (8017598 <ip4_input+0x240>)
 80174ee:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80174f0:	89fb      	ldrh	r3, [r7, #14]
 80174f2:	4619      	mov	r1, r3
 80174f4:	6878      	ldr	r0, [r7, #4]
 80174f6:	f7f8 fe63 	bl	80101c0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80174fa:	697b      	ldr	r3, [r7, #20]
 80174fc:	7a5b      	ldrb	r3, [r3, #9]
 80174fe:	2b11      	cmp	r3, #17
 8017500:	d006      	beq.n	8017510 <ip4_input+0x1b8>
 8017502:	2b11      	cmp	r3, #17
 8017504:	dc13      	bgt.n	801752e <ip4_input+0x1d6>
 8017506:	2b01      	cmp	r3, #1
 8017508:	d00c      	beq.n	8017524 <ip4_input+0x1cc>
 801750a:	2b06      	cmp	r3, #6
 801750c:	d005      	beq.n	801751a <ip4_input+0x1c2>
 801750e:	e00e      	b.n	801752e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8017510:	6839      	ldr	r1, [r7, #0]
 8017512:	6878      	ldr	r0, [r7, #4]
 8017514:	f7fe fc42 	bl	8015d9c <udp_input>
        break;
 8017518:	e026      	b.n	8017568 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801751a:	6839      	ldr	r1, [r7, #0]
 801751c:	6878      	ldr	r0, [r7, #4]
 801751e:	f7fa fcfd 	bl	8011f1c <tcp_input>
        break;
 8017522:	e021      	b.n	8017568 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8017524:	6839      	ldr	r1, [r7, #0]
 8017526:	6878      	ldr	r0, [r7, #4]
 8017528:	f7ff fcc8 	bl	8016ebc <icmp_input>
        break;
 801752c:	e01c      	b.n	8017568 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801752e:	4b1a      	ldr	r3, [pc, #104]	; (8017598 <ip4_input+0x240>)
 8017530:	695b      	ldr	r3, [r3, #20]
 8017532:	6939      	ldr	r1, [r7, #16]
 8017534:	4618      	mov	r0, r3
 8017536:	f000 f90b 	bl	8017750 <ip4_addr_isbroadcast_u32>
 801753a:	4603      	mov	r3, r0
 801753c:	2b00      	cmp	r3, #0
 801753e:	d10f      	bne.n	8017560 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017540:	4b15      	ldr	r3, [pc, #84]	; (8017598 <ip4_input+0x240>)
 8017542:	695b      	ldr	r3, [r3, #20]
 8017544:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017548:	2be0      	cmp	r3, #224	; 0xe0
 801754a:	d009      	beq.n	8017560 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801754c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8017550:	4619      	mov	r1, r3
 8017552:	6878      	ldr	r0, [r7, #4]
 8017554:	f7f8 fea7 	bl	80102a6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8017558:	2102      	movs	r1, #2
 801755a:	6878      	ldr	r0, [r7, #4]
 801755c:	f7ff fdce 	bl	80170fc <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8017560:	6878      	ldr	r0, [r7, #4]
 8017562:	f7f8 feb3 	bl	80102cc <pbuf_free>
        break;
 8017566:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8017568:	4b0b      	ldr	r3, [pc, #44]	; (8017598 <ip4_input+0x240>)
 801756a:	2200      	movs	r2, #0
 801756c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801756e:	4b0a      	ldr	r3, [pc, #40]	; (8017598 <ip4_input+0x240>)
 8017570:	2200      	movs	r2, #0
 8017572:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8017574:	4b08      	ldr	r3, [pc, #32]	; (8017598 <ip4_input+0x240>)
 8017576:	2200      	movs	r2, #0
 8017578:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801757a:	4b07      	ldr	r3, [pc, #28]	; (8017598 <ip4_input+0x240>)
 801757c:	2200      	movs	r2, #0
 801757e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8017580:	4b05      	ldr	r3, [pc, #20]	; (8017598 <ip4_input+0x240>)
 8017582:	2200      	movs	r2, #0
 8017584:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8017586:	4b04      	ldr	r3, [pc, #16]	; (8017598 <ip4_input+0x240>)
 8017588:	2200      	movs	r2, #0
 801758a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801758c:	2300      	movs	r3, #0
}
 801758e:	4618      	mov	r0, r3
 8017590:	3718      	adds	r7, #24
 8017592:	46bd      	mov	sp, r7
 8017594:	bd80      	pop	{r7, pc}
 8017596:	bf00      	nop
 8017598:	200050dc 	.word	0x200050dc
 801759c:	20007fec 	.word	0x20007fec

080175a0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80175a0:	b580      	push	{r7, lr}
 80175a2:	b08a      	sub	sp, #40	; 0x28
 80175a4:	af04      	add	r7, sp, #16
 80175a6:	60f8      	str	r0, [r7, #12]
 80175a8:	60b9      	str	r1, [r7, #8]
 80175aa:	607a      	str	r2, [r7, #4]
 80175ac:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80175ae:	68bb      	ldr	r3, [r7, #8]
 80175b0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80175b2:	687b      	ldr	r3, [r7, #4]
 80175b4:	2b00      	cmp	r3, #0
 80175b6:	d009      	beq.n	80175cc <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80175b8:	68bb      	ldr	r3, [r7, #8]
 80175ba:	2b00      	cmp	r3, #0
 80175bc:	d003      	beq.n	80175c6 <ip4_output_if+0x26>
 80175be:	68bb      	ldr	r3, [r7, #8]
 80175c0:	681b      	ldr	r3, [r3, #0]
 80175c2:	2b00      	cmp	r3, #0
 80175c4:	d102      	bne.n	80175cc <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80175c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175c8:	3304      	adds	r3, #4
 80175ca:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80175cc:	78fa      	ldrb	r2, [r7, #3]
 80175ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175d0:	9302      	str	r3, [sp, #8]
 80175d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80175d6:	9301      	str	r3, [sp, #4]
 80175d8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80175dc:	9300      	str	r3, [sp, #0]
 80175de:	4613      	mov	r3, r2
 80175e0:	687a      	ldr	r2, [r7, #4]
 80175e2:	6979      	ldr	r1, [r7, #20]
 80175e4:	68f8      	ldr	r0, [r7, #12]
 80175e6:	f000 f805 	bl	80175f4 <ip4_output_if_src>
 80175ea:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80175ec:	4618      	mov	r0, r3
 80175ee:	3718      	adds	r7, #24
 80175f0:	46bd      	mov	sp, r7
 80175f2:	bd80      	pop	{r7, pc}

080175f4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80175f4:	b580      	push	{r7, lr}
 80175f6:	b088      	sub	sp, #32
 80175f8:	af00      	add	r7, sp, #0
 80175fa:	60f8      	str	r0, [r7, #12]
 80175fc:	60b9      	str	r1, [r7, #8]
 80175fe:	607a      	str	r2, [r7, #4]
 8017600:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8017602:	68fb      	ldr	r3, [r7, #12]
 8017604:	7b9b      	ldrb	r3, [r3, #14]
 8017606:	2b01      	cmp	r3, #1
 8017608:	d006      	beq.n	8017618 <ip4_output_if_src+0x24>
 801760a:	4b4b      	ldr	r3, [pc, #300]	; (8017738 <ip4_output_if_src+0x144>)
 801760c:	f44f 7255 	mov.w	r2, #852	; 0x354
 8017610:	494a      	ldr	r1, [pc, #296]	; (801773c <ip4_output_if_src+0x148>)
 8017612:	484b      	ldr	r0, [pc, #300]	; (8017740 <ip4_output_if_src+0x14c>)
 8017614:	f001 fd1a 	bl	801904c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8017618:	687b      	ldr	r3, [r7, #4]
 801761a:	2b00      	cmp	r3, #0
 801761c:	d060      	beq.n	80176e0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801761e:	2314      	movs	r3, #20
 8017620:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8017622:	2114      	movs	r1, #20
 8017624:	68f8      	ldr	r0, [r7, #12]
 8017626:	f7f8 fdbb 	bl	80101a0 <pbuf_add_header>
 801762a:	4603      	mov	r3, r0
 801762c:	2b00      	cmp	r3, #0
 801762e:	d002      	beq.n	8017636 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017630:	f06f 0301 	mvn.w	r3, #1
 8017634:	e07c      	b.n	8017730 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8017636:	68fb      	ldr	r3, [r7, #12]
 8017638:	685b      	ldr	r3, [r3, #4]
 801763a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801763c:	68fb      	ldr	r3, [r7, #12]
 801763e:	895b      	ldrh	r3, [r3, #10]
 8017640:	2b13      	cmp	r3, #19
 8017642:	d806      	bhi.n	8017652 <ip4_output_if_src+0x5e>
 8017644:	4b3c      	ldr	r3, [pc, #240]	; (8017738 <ip4_output_if_src+0x144>)
 8017646:	f44f 7262 	mov.w	r2, #904	; 0x388
 801764a:	493e      	ldr	r1, [pc, #248]	; (8017744 <ip4_output_if_src+0x150>)
 801764c:	483c      	ldr	r0, [pc, #240]	; (8017740 <ip4_output_if_src+0x14c>)
 801764e:	f001 fcfd 	bl	801904c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8017652:	69fb      	ldr	r3, [r7, #28]
 8017654:	78fa      	ldrb	r2, [r7, #3]
 8017656:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8017658:	69fb      	ldr	r3, [r7, #28]
 801765a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801765e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8017660:	687b      	ldr	r3, [r7, #4]
 8017662:	681a      	ldr	r2, [r3, #0]
 8017664:	69fb      	ldr	r3, [r7, #28]
 8017666:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8017668:	8b7b      	ldrh	r3, [r7, #26]
 801766a:	089b      	lsrs	r3, r3, #2
 801766c:	b29b      	uxth	r3, r3
 801766e:	b2db      	uxtb	r3, r3
 8017670:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017674:	b2da      	uxtb	r2, r3
 8017676:	69fb      	ldr	r3, [r7, #28]
 8017678:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801767a:	69fb      	ldr	r3, [r7, #28]
 801767c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8017680:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8017682:	68fb      	ldr	r3, [r7, #12]
 8017684:	891b      	ldrh	r3, [r3, #8]
 8017686:	4618      	mov	r0, r3
 8017688:	f7f7 fa2a 	bl	800eae0 <lwip_htons>
 801768c:	4603      	mov	r3, r0
 801768e:	461a      	mov	r2, r3
 8017690:	69fb      	ldr	r3, [r7, #28]
 8017692:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8017694:	69fb      	ldr	r3, [r7, #28]
 8017696:	2200      	movs	r2, #0
 8017698:	719a      	strb	r2, [r3, #6]
 801769a:	2200      	movs	r2, #0
 801769c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801769e:	4b2a      	ldr	r3, [pc, #168]	; (8017748 <ip4_output_if_src+0x154>)
 80176a0:	881b      	ldrh	r3, [r3, #0]
 80176a2:	4618      	mov	r0, r3
 80176a4:	f7f7 fa1c 	bl	800eae0 <lwip_htons>
 80176a8:	4603      	mov	r3, r0
 80176aa:	461a      	mov	r2, r3
 80176ac:	69fb      	ldr	r3, [r7, #28]
 80176ae:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80176b0:	4b25      	ldr	r3, [pc, #148]	; (8017748 <ip4_output_if_src+0x154>)
 80176b2:	881b      	ldrh	r3, [r3, #0]
 80176b4:	3301      	adds	r3, #1
 80176b6:	b29a      	uxth	r2, r3
 80176b8:	4b23      	ldr	r3, [pc, #140]	; (8017748 <ip4_output_if_src+0x154>)
 80176ba:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80176bc:	68bb      	ldr	r3, [r7, #8]
 80176be:	2b00      	cmp	r3, #0
 80176c0:	d104      	bne.n	80176cc <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80176c2:	4b22      	ldr	r3, [pc, #136]	; (801774c <ip4_output_if_src+0x158>)
 80176c4:	681a      	ldr	r2, [r3, #0]
 80176c6:	69fb      	ldr	r3, [r7, #28]
 80176c8:	60da      	str	r2, [r3, #12]
 80176ca:	e003      	b.n	80176d4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80176cc:	68bb      	ldr	r3, [r7, #8]
 80176ce:	681a      	ldr	r2, [r3, #0]
 80176d0:	69fb      	ldr	r3, [r7, #28]
 80176d2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80176d4:	69fb      	ldr	r3, [r7, #28]
 80176d6:	2200      	movs	r2, #0
 80176d8:	729a      	strb	r2, [r3, #10]
 80176da:	2200      	movs	r2, #0
 80176dc:	72da      	strb	r2, [r3, #11]
 80176de:	e00f      	b.n	8017700 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80176e0:	68fb      	ldr	r3, [r7, #12]
 80176e2:	895b      	ldrh	r3, [r3, #10]
 80176e4:	2b13      	cmp	r3, #19
 80176e6:	d802      	bhi.n	80176ee <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80176e8:	f06f 0301 	mvn.w	r3, #1
 80176ec:	e020      	b.n	8017730 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80176ee:	68fb      	ldr	r3, [r7, #12]
 80176f0:	685b      	ldr	r3, [r3, #4]
 80176f2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80176f4:	69fb      	ldr	r3, [r7, #28]
 80176f6:	691b      	ldr	r3, [r3, #16]
 80176f8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80176fa:	f107 0314 	add.w	r3, r7, #20
 80176fe:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8017700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017702:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017704:	2b00      	cmp	r3, #0
 8017706:	d00c      	beq.n	8017722 <ip4_output_if_src+0x12e>
 8017708:	68fb      	ldr	r3, [r7, #12]
 801770a:	891a      	ldrh	r2, [r3, #8]
 801770c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801770e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017710:	429a      	cmp	r2, r3
 8017712:	d906      	bls.n	8017722 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8017714:	687a      	ldr	r2, [r7, #4]
 8017716:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017718:	68f8      	ldr	r0, [r7, #12]
 801771a:	f000 fd53 	bl	80181c4 <ip4_frag>
 801771e:	4603      	mov	r3, r0
 8017720:	e006      	b.n	8017730 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8017722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017724:	695b      	ldr	r3, [r3, #20]
 8017726:	687a      	ldr	r2, [r7, #4]
 8017728:	68f9      	ldr	r1, [r7, #12]
 801772a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801772c:	4798      	blx	r3
 801772e:	4603      	mov	r3, r0
}
 8017730:	4618      	mov	r0, r3
 8017732:	3720      	adds	r7, #32
 8017734:	46bd      	mov	sp, r7
 8017736:	bd80      	pop	{r7, pc}
 8017738:	0801dd48 	.word	0x0801dd48
 801773c:	0801dd7c 	.word	0x0801dd7c
 8017740:	0801dd88 	.word	0x0801dd88
 8017744:	0801ddb0 	.word	0x0801ddb0
 8017748:	2000814a 	.word	0x2000814a
 801774c:	0801e1cc 	.word	0x0801e1cc

08017750 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8017750:	b480      	push	{r7}
 8017752:	b085      	sub	sp, #20
 8017754:	af00      	add	r7, sp, #0
 8017756:	6078      	str	r0, [r7, #4]
 8017758:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801775a:	687b      	ldr	r3, [r7, #4]
 801775c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801775e:	687b      	ldr	r3, [r7, #4]
 8017760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017764:	d002      	beq.n	801776c <ip4_addr_isbroadcast_u32+0x1c>
 8017766:	687b      	ldr	r3, [r7, #4]
 8017768:	2b00      	cmp	r3, #0
 801776a:	d101      	bne.n	8017770 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801776c:	2301      	movs	r3, #1
 801776e:	e02a      	b.n	80177c6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8017770:	683b      	ldr	r3, [r7, #0]
 8017772:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017776:	f003 0302 	and.w	r3, r3, #2
 801777a:	2b00      	cmp	r3, #0
 801777c:	d101      	bne.n	8017782 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801777e:	2300      	movs	r3, #0
 8017780:	e021      	b.n	80177c6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8017782:	683b      	ldr	r3, [r7, #0]
 8017784:	3304      	adds	r3, #4
 8017786:	681b      	ldr	r3, [r3, #0]
 8017788:	687a      	ldr	r2, [r7, #4]
 801778a:	429a      	cmp	r2, r3
 801778c:	d101      	bne.n	8017792 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801778e:	2300      	movs	r3, #0
 8017790:	e019      	b.n	80177c6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8017792:	68fa      	ldr	r2, [r7, #12]
 8017794:	683b      	ldr	r3, [r7, #0]
 8017796:	3304      	adds	r3, #4
 8017798:	681b      	ldr	r3, [r3, #0]
 801779a:	405a      	eors	r2, r3
 801779c:	683b      	ldr	r3, [r7, #0]
 801779e:	3308      	adds	r3, #8
 80177a0:	681b      	ldr	r3, [r3, #0]
 80177a2:	4013      	ands	r3, r2
 80177a4:	2b00      	cmp	r3, #0
 80177a6:	d10d      	bne.n	80177c4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80177a8:	683b      	ldr	r3, [r7, #0]
 80177aa:	3308      	adds	r3, #8
 80177ac:	681b      	ldr	r3, [r3, #0]
 80177ae:	43da      	mvns	r2, r3
 80177b0:	687b      	ldr	r3, [r7, #4]
 80177b2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80177b4:	683b      	ldr	r3, [r7, #0]
 80177b6:	3308      	adds	r3, #8
 80177b8:	681b      	ldr	r3, [r3, #0]
 80177ba:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80177bc:	429a      	cmp	r2, r3
 80177be:	d101      	bne.n	80177c4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80177c0:	2301      	movs	r3, #1
 80177c2:	e000      	b.n	80177c6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80177c4:	2300      	movs	r3, #0
  }
}
 80177c6:	4618      	mov	r0, r3
 80177c8:	3714      	adds	r7, #20
 80177ca:	46bd      	mov	sp, r7
 80177cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177d0:	4770      	bx	lr
	...

080177d4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80177d4:	b580      	push	{r7, lr}
 80177d6:	b084      	sub	sp, #16
 80177d8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80177da:	2300      	movs	r3, #0
 80177dc:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80177de:	4b12      	ldr	r3, [pc, #72]	; (8017828 <ip_reass_tmr+0x54>)
 80177e0:	681b      	ldr	r3, [r3, #0]
 80177e2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80177e4:	e018      	b.n	8017818 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80177e6:	68fb      	ldr	r3, [r7, #12]
 80177e8:	7fdb      	ldrb	r3, [r3, #31]
 80177ea:	2b00      	cmp	r3, #0
 80177ec:	d00b      	beq.n	8017806 <ip_reass_tmr+0x32>
      r->timer--;
 80177ee:	68fb      	ldr	r3, [r7, #12]
 80177f0:	7fdb      	ldrb	r3, [r3, #31]
 80177f2:	3b01      	subs	r3, #1
 80177f4:	b2da      	uxtb	r2, r3
 80177f6:	68fb      	ldr	r3, [r7, #12]
 80177f8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80177fa:	68fb      	ldr	r3, [r7, #12]
 80177fc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80177fe:	68fb      	ldr	r3, [r7, #12]
 8017800:	681b      	ldr	r3, [r3, #0]
 8017802:	60fb      	str	r3, [r7, #12]
 8017804:	e008      	b.n	8017818 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8017806:	68fb      	ldr	r3, [r7, #12]
 8017808:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801780a:	68fb      	ldr	r3, [r7, #12]
 801780c:	681b      	ldr	r3, [r3, #0]
 801780e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8017810:	68b9      	ldr	r1, [r7, #8]
 8017812:	6878      	ldr	r0, [r7, #4]
 8017814:	f000 f80a 	bl	801782c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8017818:	68fb      	ldr	r3, [r7, #12]
 801781a:	2b00      	cmp	r3, #0
 801781c:	d1e3      	bne.n	80177e6 <ip_reass_tmr+0x12>
    }
  }
}
 801781e:	bf00      	nop
 8017820:	bf00      	nop
 8017822:	3710      	adds	r7, #16
 8017824:	46bd      	mov	sp, r7
 8017826:	bd80      	pop	{r7, pc}
 8017828:	2000814c 	.word	0x2000814c

0801782c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801782c:	b580      	push	{r7, lr}
 801782e:	b088      	sub	sp, #32
 8017830:	af00      	add	r7, sp, #0
 8017832:	6078      	str	r0, [r7, #4]
 8017834:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8017836:	2300      	movs	r3, #0
 8017838:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801783a:	683a      	ldr	r2, [r7, #0]
 801783c:	687b      	ldr	r3, [r7, #4]
 801783e:	429a      	cmp	r2, r3
 8017840:	d105      	bne.n	801784e <ip_reass_free_complete_datagram+0x22>
 8017842:	4b45      	ldr	r3, [pc, #276]	; (8017958 <ip_reass_free_complete_datagram+0x12c>)
 8017844:	22ab      	movs	r2, #171	; 0xab
 8017846:	4945      	ldr	r1, [pc, #276]	; (801795c <ip_reass_free_complete_datagram+0x130>)
 8017848:	4845      	ldr	r0, [pc, #276]	; (8017960 <ip_reass_free_complete_datagram+0x134>)
 801784a:	f001 fbff 	bl	801904c <iprintf>
  if (prev != NULL) {
 801784e:	683b      	ldr	r3, [r7, #0]
 8017850:	2b00      	cmp	r3, #0
 8017852:	d00a      	beq.n	801786a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8017854:	683b      	ldr	r3, [r7, #0]
 8017856:	681b      	ldr	r3, [r3, #0]
 8017858:	687a      	ldr	r2, [r7, #4]
 801785a:	429a      	cmp	r2, r3
 801785c:	d005      	beq.n	801786a <ip_reass_free_complete_datagram+0x3e>
 801785e:	4b3e      	ldr	r3, [pc, #248]	; (8017958 <ip_reass_free_complete_datagram+0x12c>)
 8017860:	22ad      	movs	r2, #173	; 0xad
 8017862:	4940      	ldr	r1, [pc, #256]	; (8017964 <ip_reass_free_complete_datagram+0x138>)
 8017864:	483e      	ldr	r0, [pc, #248]	; (8017960 <ip_reass_free_complete_datagram+0x134>)
 8017866:	f001 fbf1 	bl	801904c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801786a:	687b      	ldr	r3, [r7, #4]
 801786c:	685b      	ldr	r3, [r3, #4]
 801786e:	685b      	ldr	r3, [r3, #4]
 8017870:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8017872:	697b      	ldr	r3, [r7, #20]
 8017874:	889b      	ldrh	r3, [r3, #4]
 8017876:	b29b      	uxth	r3, r3
 8017878:	2b00      	cmp	r3, #0
 801787a:	d12a      	bne.n	80178d2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801787c:	687b      	ldr	r3, [r7, #4]
 801787e:	685b      	ldr	r3, [r3, #4]
 8017880:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8017882:	697b      	ldr	r3, [r7, #20]
 8017884:	681a      	ldr	r2, [r3, #0]
 8017886:	687b      	ldr	r3, [r7, #4]
 8017888:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801788a:	69bb      	ldr	r3, [r7, #24]
 801788c:	6858      	ldr	r0, [r3, #4]
 801788e:	687b      	ldr	r3, [r7, #4]
 8017890:	3308      	adds	r3, #8
 8017892:	2214      	movs	r2, #20
 8017894:	4619      	mov	r1, r3
 8017896:	f001 fda7 	bl	80193e8 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801789a:	2101      	movs	r1, #1
 801789c:	69b8      	ldr	r0, [r7, #24]
 801789e:	f7ff fc3d 	bl	801711c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80178a2:	69b8      	ldr	r0, [r7, #24]
 80178a4:	f7f8 fd9a 	bl	80103dc <pbuf_clen>
 80178a8:	4603      	mov	r3, r0
 80178aa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80178ac:	8bfa      	ldrh	r2, [r7, #30]
 80178ae:	8a7b      	ldrh	r3, [r7, #18]
 80178b0:	4413      	add	r3, r2
 80178b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80178b6:	db05      	blt.n	80178c4 <ip_reass_free_complete_datagram+0x98>
 80178b8:	4b27      	ldr	r3, [pc, #156]	; (8017958 <ip_reass_free_complete_datagram+0x12c>)
 80178ba:	22bc      	movs	r2, #188	; 0xbc
 80178bc:	492a      	ldr	r1, [pc, #168]	; (8017968 <ip_reass_free_complete_datagram+0x13c>)
 80178be:	4828      	ldr	r0, [pc, #160]	; (8017960 <ip_reass_free_complete_datagram+0x134>)
 80178c0:	f001 fbc4 	bl	801904c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80178c4:	8bfa      	ldrh	r2, [r7, #30]
 80178c6:	8a7b      	ldrh	r3, [r7, #18]
 80178c8:	4413      	add	r3, r2
 80178ca:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80178cc:	69b8      	ldr	r0, [r7, #24]
 80178ce:	f7f8 fcfd 	bl	80102cc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80178d2:	687b      	ldr	r3, [r7, #4]
 80178d4:	685b      	ldr	r3, [r3, #4]
 80178d6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80178d8:	e01f      	b.n	801791a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80178da:	69bb      	ldr	r3, [r7, #24]
 80178dc:	685b      	ldr	r3, [r3, #4]
 80178de:	617b      	str	r3, [r7, #20]
    pcur = p;
 80178e0:	69bb      	ldr	r3, [r7, #24]
 80178e2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80178e4:	697b      	ldr	r3, [r7, #20]
 80178e6:	681b      	ldr	r3, [r3, #0]
 80178e8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80178ea:	68f8      	ldr	r0, [r7, #12]
 80178ec:	f7f8 fd76 	bl	80103dc <pbuf_clen>
 80178f0:	4603      	mov	r3, r0
 80178f2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80178f4:	8bfa      	ldrh	r2, [r7, #30]
 80178f6:	8a7b      	ldrh	r3, [r7, #18]
 80178f8:	4413      	add	r3, r2
 80178fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80178fe:	db05      	blt.n	801790c <ip_reass_free_complete_datagram+0xe0>
 8017900:	4b15      	ldr	r3, [pc, #84]	; (8017958 <ip_reass_free_complete_datagram+0x12c>)
 8017902:	22cc      	movs	r2, #204	; 0xcc
 8017904:	4918      	ldr	r1, [pc, #96]	; (8017968 <ip_reass_free_complete_datagram+0x13c>)
 8017906:	4816      	ldr	r0, [pc, #88]	; (8017960 <ip_reass_free_complete_datagram+0x134>)
 8017908:	f001 fba0 	bl	801904c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801790c:	8bfa      	ldrh	r2, [r7, #30]
 801790e:	8a7b      	ldrh	r3, [r7, #18]
 8017910:	4413      	add	r3, r2
 8017912:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8017914:	68f8      	ldr	r0, [r7, #12]
 8017916:	f7f8 fcd9 	bl	80102cc <pbuf_free>
  while (p != NULL) {
 801791a:	69bb      	ldr	r3, [r7, #24]
 801791c:	2b00      	cmp	r3, #0
 801791e:	d1dc      	bne.n	80178da <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8017920:	6839      	ldr	r1, [r7, #0]
 8017922:	6878      	ldr	r0, [r7, #4]
 8017924:	f000 f8c2 	bl	8017aac <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8017928:	4b10      	ldr	r3, [pc, #64]	; (801796c <ip_reass_free_complete_datagram+0x140>)
 801792a:	881b      	ldrh	r3, [r3, #0]
 801792c:	8bfa      	ldrh	r2, [r7, #30]
 801792e:	429a      	cmp	r2, r3
 8017930:	d905      	bls.n	801793e <ip_reass_free_complete_datagram+0x112>
 8017932:	4b09      	ldr	r3, [pc, #36]	; (8017958 <ip_reass_free_complete_datagram+0x12c>)
 8017934:	22d2      	movs	r2, #210	; 0xd2
 8017936:	490e      	ldr	r1, [pc, #56]	; (8017970 <ip_reass_free_complete_datagram+0x144>)
 8017938:	4809      	ldr	r0, [pc, #36]	; (8017960 <ip_reass_free_complete_datagram+0x134>)
 801793a:	f001 fb87 	bl	801904c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801793e:	4b0b      	ldr	r3, [pc, #44]	; (801796c <ip_reass_free_complete_datagram+0x140>)
 8017940:	881a      	ldrh	r2, [r3, #0]
 8017942:	8bfb      	ldrh	r3, [r7, #30]
 8017944:	1ad3      	subs	r3, r2, r3
 8017946:	b29a      	uxth	r2, r3
 8017948:	4b08      	ldr	r3, [pc, #32]	; (801796c <ip_reass_free_complete_datagram+0x140>)
 801794a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801794c:	8bfb      	ldrh	r3, [r7, #30]
}
 801794e:	4618      	mov	r0, r3
 8017950:	3720      	adds	r7, #32
 8017952:	46bd      	mov	sp, r7
 8017954:	bd80      	pop	{r7, pc}
 8017956:	bf00      	nop
 8017958:	0801dde0 	.word	0x0801dde0
 801795c:	0801de1c 	.word	0x0801de1c
 8017960:	0801de28 	.word	0x0801de28
 8017964:	0801de50 	.word	0x0801de50
 8017968:	0801de64 	.word	0x0801de64
 801796c:	20008150 	.word	0x20008150
 8017970:	0801de84 	.word	0x0801de84

08017974 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8017974:	b580      	push	{r7, lr}
 8017976:	b08a      	sub	sp, #40	; 0x28
 8017978:	af00      	add	r7, sp, #0
 801797a:	6078      	str	r0, [r7, #4]
 801797c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801797e:	2300      	movs	r3, #0
 8017980:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8017982:	2300      	movs	r3, #0
 8017984:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8017986:	2300      	movs	r3, #0
 8017988:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801798a:	2300      	movs	r3, #0
 801798c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801798e:	2300      	movs	r3, #0
 8017990:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8017992:	4b28      	ldr	r3, [pc, #160]	; (8017a34 <ip_reass_remove_oldest_datagram+0xc0>)
 8017994:	681b      	ldr	r3, [r3, #0]
 8017996:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017998:	e030      	b.n	80179fc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801799a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801799c:	695a      	ldr	r2, [r3, #20]
 801799e:	687b      	ldr	r3, [r7, #4]
 80179a0:	68db      	ldr	r3, [r3, #12]
 80179a2:	429a      	cmp	r2, r3
 80179a4:	d10c      	bne.n	80179c0 <ip_reass_remove_oldest_datagram+0x4c>
 80179a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179a8:	699a      	ldr	r2, [r3, #24]
 80179aa:	687b      	ldr	r3, [r7, #4]
 80179ac:	691b      	ldr	r3, [r3, #16]
 80179ae:	429a      	cmp	r2, r3
 80179b0:	d106      	bne.n	80179c0 <ip_reass_remove_oldest_datagram+0x4c>
 80179b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179b4:	899a      	ldrh	r2, [r3, #12]
 80179b6:	687b      	ldr	r3, [r7, #4]
 80179b8:	889b      	ldrh	r3, [r3, #4]
 80179ba:	b29b      	uxth	r3, r3
 80179bc:	429a      	cmp	r2, r3
 80179be:	d014      	beq.n	80179ea <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80179c0:	693b      	ldr	r3, [r7, #16]
 80179c2:	3301      	adds	r3, #1
 80179c4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80179c6:	6a3b      	ldr	r3, [r7, #32]
 80179c8:	2b00      	cmp	r3, #0
 80179ca:	d104      	bne.n	80179d6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80179cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179ce:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80179d0:	69fb      	ldr	r3, [r7, #28]
 80179d2:	61bb      	str	r3, [r7, #24]
 80179d4:	e009      	b.n	80179ea <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80179d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179d8:	7fda      	ldrb	r2, [r3, #31]
 80179da:	6a3b      	ldr	r3, [r7, #32]
 80179dc:	7fdb      	ldrb	r3, [r3, #31]
 80179de:	429a      	cmp	r2, r3
 80179e0:	d803      	bhi.n	80179ea <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80179e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179e4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80179e6:	69fb      	ldr	r3, [r7, #28]
 80179e8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80179ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179ec:	681b      	ldr	r3, [r3, #0]
 80179ee:	2b00      	cmp	r3, #0
 80179f0:	d001      	beq.n	80179f6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80179f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179f4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80179f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179f8:	681b      	ldr	r3, [r3, #0]
 80179fa:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80179fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179fe:	2b00      	cmp	r3, #0
 8017a00:	d1cb      	bne.n	801799a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8017a02:	6a3b      	ldr	r3, [r7, #32]
 8017a04:	2b00      	cmp	r3, #0
 8017a06:	d008      	beq.n	8017a1a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8017a08:	69b9      	ldr	r1, [r7, #24]
 8017a0a:	6a38      	ldr	r0, [r7, #32]
 8017a0c:	f7ff ff0e 	bl	801782c <ip_reass_free_complete_datagram>
 8017a10:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8017a12:	697a      	ldr	r2, [r7, #20]
 8017a14:	68fb      	ldr	r3, [r7, #12]
 8017a16:	4413      	add	r3, r2
 8017a18:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8017a1a:	697a      	ldr	r2, [r7, #20]
 8017a1c:	683b      	ldr	r3, [r7, #0]
 8017a1e:	429a      	cmp	r2, r3
 8017a20:	da02      	bge.n	8017a28 <ip_reass_remove_oldest_datagram+0xb4>
 8017a22:	693b      	ldr	r3, [r7, #16]
 8017a24:	2b01      	cmp	r3, #1
 8017a26:	dcac      	bgt.n	8017982 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8017a28:	697b      	ldr	r3, [r7, #20]
}
 8017a2a:	4618      	mov	r0, r3
 8017a2c:	3728      	adds	r7, #40	; 0x28
 8017a2e:	46bd      	mov	sp, r7
 8017a30:	bd80      	pop	{r7, pc}
 8017a32:	bf00      	nop
 8017a34:	2000814c 	.word	0x2000814c

08017a38 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8017a38:	b580      	push	{r7, lr}
 8017a3a:	b084      	sub	sp, #16
 8017a3c:	af00      	add	r7, sp, #0
 8017a3e:	6078      	str	r0, [r7, #4]
 8017a40:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017a42:	2004      	movs	r0, #4
 8017a44:	f7f7 fd7c 	bl	800f540 <memp_malloc>
 8017a48:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8017a4a:	68fb      	ldr	r3, [r7, #12]
 8017a4c:	2b00      	cmp	r3, #0
 8017a4e:	d110      	bne.n	8017a72 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8017a50:	6839      	ldr	r1, [r7, #0]
 8017a52:	6878      	ldr	r0, [r7, #4]
 8017a54:	f7ff ff8e 	bl	8017974 <ip_reass_remove_oldest_datagram>
 8017a58:	4602      	mov	r2, r0
 8017a5a:	683b      	ldr	r3, [r7, #0]
 8017a5c:	4293      	cmp	r3, r2
 8017a5e:	dc03      	bgt.n	8017a68 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017a60:	2004      	movs	r0, #4
 8017a62:	f7f7 fd6d 	bl	800f540 <memp_malloc>
 8017a66:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8017a68:	68fb      	ldr	r3, [r7, #12]
 8017a6a:	2b00      	cmp	r3, #0
 8017a6c:	d101      	bne.n	8017a72 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8017a6e:	2300      	movs	r3, #0
 8017a70:	e016      	b.n	8017aa0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8017a72:	2220      	movs	r2, #32
 8017a74:	2100      	movs	r1, #0
 8017a76:	68f8      	ldr	r0, [r7, #12]
 8017a78:	f001 fc3e 	bl	80192f8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8017a7c:	68fb      	ldr	r3, [r7, #12]
 8017a7e:	220f      	movs	r2, #15
 8017a80:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8017a82:	4b09      	ldr	r3, [pc, #36]	; (8017aa8 <ip_reass_enqueue_new_datagram+0x70>)
 8017a84:	681a      	ldr	r2, [r3, #0]
 8017a86:	68fb      	ldr	r3, [r7, #12]
 8017a88:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8017a8a:	4a07      	ldr	r2, [pc, #28]	; (8017aa8 <ip_reass_enqueue_new_datagram+0x70>)
 8017a8c:	68fb      	ldr	r3, [r7, #12]
 8017a8e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8017a90:	68fb      	ldr	r3, [r7, #12]
 8017a92:	3308      	adds	r3, #8
 8017a94:	2214      	movs	r2, #20
 8017a96:	6879      	ldr	r1, [r7, #4]
 8017a98:	4618      	mov	r0, r3
 8017a9a:	f001 fca5 	bl	80193e8 <memcpy>
  return ipr;
 8017a9e:	68fb      	ldr	r3, [r7, #12]
}
 8017aa0:	4618      	mov	r0, r3
 8017aa2:	3710      	adds	r7, #16
 8017aa4:	46bd      	mov	sp, r7
 8017aa6:	bd80      	pop	{r7, pc}
 8017aa8:	2000814c 	.word	0x2000814c

08017aac <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017aac:	b580      	push	{r7, lr}
 8017aae:	b082      	sub	sp, #8
 8017ab0:	af00      	add	r7, sp, #0
 8017ab2:	6078      	str	r0, [r7, #4]
 8017ab4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8017ab6:	4b10      	ldr	r3, [pc, #64]	; (8017af8 <ip_reass_dequeue_datagram+0x4c>)
 8017ab8:	681b      	ldr	r3, [r3, #0]
 8017aba:	687a      	ldr	r2, [r7, #4]
 8017abc:	429a      	cmp	r2, r3
 8017abe:	d104      	bne.n	8017aca <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8017ac0:	687b      	ldr	r3, [r7, #4]
 8017ac2:	681b      	ldr	r3, [r3, #0]
 8017ac4:	4a0c      	ldr	r2, [pc, #48]	; (8017af8 <ip_reass_dequeue_datagram+0x4c>)
 8017ac6:	6013      	str	r3, [r2, #0]
 8017ac8:	e00d      	b.n	8017ae6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8017aca:	683b      	ldr	r3, [r7, #0]
 8017acc:	2b00      	cmp	r3, #0
 8017ace:	d106      	bne.n	8017ade <ip_reass_dequeue_datagram+0x32>
 8017ad0:	4b0a      	ldr	r3, [pc, #40]	; (8017afc <ip_reass_dequeue_datagram+0x50>)
 8017ad2:	f240 1245 	movw	r2, #325	; 0x145
 8017ad6:	490a      	ldr	r1, [pc, #40]	; (8017b00 <ip_reass_dequeue_datagram+0x54>)
 8017ad8:	480a      	ldr	r0, [pc, #40]	; (8017b04 <ip_reass_dequeue_datagram+0x58>)
 8017ada:	f001 fab7 	bl	801904c <iprintf>
    prev->next = ipr->next;
 8017ade:	687b      	ldr	r3, [r7, #4]
 8017ae0:	681a      	ldr	r2, [r3, #0]
 8017ae2:	683b      	ldr	r3, [r7, #0]
 8017ae4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8017ae6:	6879      	ldr	r1, [r7, #4]
 8017ae8:	2004      	movs	r0, #4
 8017aea:	f7f7 fd99 	bl	800f620 <memp_free>
}
 8017aee:	bf00      	nop
 8017af0:	3708      	adds	r7, #8
 8017af2:	46bd      	mov	sp, r7
 8017af4:	bd80      	pop	{r7, pc}
 8017af6:	bf00      	nop
 8017af8:	2000814c 	.word	0x2000814c
 8017afc:	0801dde0 	.word	0x0801dde0
 8017b00:	0801dea8 	.word	0x0801dea8
 8017b04:	0801de28 	.word	0x0801de28

08017b08 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8017b08:	b580      	push	{r7, lr}
 8017b0a:	b08c      	sub	sp, #48	; 0x30
 8017b0c:	af00      	add	r7, sp, #0
 8017b0e:	60f8      	str	r0, [r7, #12]
 8017b10:	60b9      	str	r1, [r7, #8]
 8017b12:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8017b14:	2300      	movs	r3, #0
 8017b16:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8017b18:	2301      	movs	r3, #1
 8017b1a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8017b1c:	68bb      	ldr	r3, [r7, #8]
 8017b1e:	685b      	ldr	r3, [r3, #4]
 8017b20:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017b22:	69fb      	ldr	r3, [r7, #28]
 8017b24:	885b      	ldrh	r3, [r3, #2]
 8017b26:	b29b      	uxth	r3, r3
 8017b28:	4618      	mov	r0, r3
 8017b2a:	f7f6 ffd9 	bl	800eae0 <lwip_htons>
 8017b2e:	4603      	mov	r3, r0
 8017b30:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8017b32:	69fb      	ldr	r3, [r7, #28]
 8017b34:	781b      	ldrb	r3, [r3, #0]
 8017b36:	f003 030f 	and.w	r3, r3, #15
 8017b3a:	b2db      	uxtb	r3, r3
 8017b3c:	009b      	lsls	r3, r3, #2
 8017b3e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8017b40:	7e7b      	ldrb	r3, [r7, #25]
 8017b42:	b29b      	uxth	r3, r3
 8017b44:	8b7a      	ldrh	r2, [r7, #26]
 8017b46:	429a      	cmp	r2, r3
 8017b48:	d202      	bcs.n	8017b50 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8017b4e:	e135      	b.n	8017dbc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8017b50:	7e7b      	ldrb	r3, [r7, #25]
 8017b52:	b29b      	uxth	r3, r3
 8017b54:	8b7a      	ldrh	r2, [r7, #26]
 8017b56:	1ad3      	subs	r3, r2, r3
 8017b58:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8017b5a:	69fb      	ldr	r3, [r7, #28]
 8017b5c:	88db      	ldrh	r3, [r3, #6]
 8017b5e:	b29b      	uxth	r3, r3
 8017b60:	4618      	mov	r0, r3
 8017b62:	f7f6 ffbd 	bl	800eae0 <lwip_htons>
 8017b66:	4603      	mov	r3, r0
 8017b68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017b6c:	b29b      	uxth	r3, r3
 8017b6e:	00db      	lsls	r3, r3, #3
 8017b70:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8017b72:	68bb      	ldr	r3, [r7, #8]
 8017b74:	685b      	ldr	r3, [r3, #4]
 8017b76:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8017b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b7a:	2200      	movs	r2, #0
 8017b7c:	701a      	strb	r2, [r3, #0]
 8017b7e:	2200      	movs	r2, #0
 8017b80:	705a      	strb	r2, [r3, #1]
 8017b82:	2200      	movs	r2, #0
 8017b84:	709a      	strb	r2, [r3, #2]
 8017b86:	2200      	movs	r2, #0
 8017b88:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8017b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b8c:	8afa      	ldrh	r2, [r7, #22]
 8017b8e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8017b90:	8afa      	ldrh	r2, [r7, #22]
 8017b92:	8b7b      	ldrh	r3, [r7, #26]
 8017b94:	4413      	add	r3, r2
 8017b96:	b29a      	uxth	r2, r3
 8017b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b9a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8017b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b9e:	88db      	ldrh	r3, [r3, #6]
 8017ba0:	b29b      	uxth	r3, r3
 8017ba2:	8afa      	ldrh	r2, [r7, #22]
 8017ba4:	429a      	cmp	r2, r3
 8017ba6:	d902      	bls.n	8017bae <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8017bac:	e106      	b.n	8017dbc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8017bae:	68fb      	ldr	r3, [r7, #12]
 8017bb0:	685b      	ldr	r3, [r3, #4]
 8017bb2:	627b      	str	r3, [r7, #36]	; 0x24
 8017bb4:	e068      	b.n	8017c88 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8017bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bb8:	685b      	ldr	r3, [r3, #4]
 8017bba:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8017bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bbe:	889b      	ldrh	r3, [r3, #4]
 8017bc0:	b29a      	uxth	r2, r3
 8017bc2:	693b      	ldr	r3, [r7, #16]
 8017bc4:	889b      	ldrh	r3, [r3, #4]
 8017bc6:	b29b      	uxth	r3, r3
 8017bc8:	429a      	cmp	r2, r3
 8017bca:	d235      	bcs.n	8017c38 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8017bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017bd0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8017bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017bd4:	2b00      	cmp	r3, #0
 8017bd6:	d020      	beq.n	8017c1a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8017bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bda:	889b      	ldrh	r3, [r3, #4]
 8017bdc:	b29a      	uxth	r2, r3
 8017bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017be0:	88db      	ldrh	r3, [r3, #6]
 8017be2:	b29b      	uxth	r3, r3
 8017be4:	429a      	cmp	r2, r3
 8017be6:	d307      	bcc.n	8017bf8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8017be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bea:	88db      	ldrh	r3, [r3, #6]
 8017bec:	b29a      	uxth	r2, r3
 8017bee:	693b      	ldr	r3, [r7, #16]
 8017bf0:	889b      	ldrh	r3, [r3, #4]
 8017bf2:	b29b      	uxth	r3, r3
 8017bf4:	429a      	cmp	r2, r3
 8017bf6:	d902      	bls.n	8017bfe <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8017bfc:	e0de      	b.n	8017dbc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8017bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c00:	68ba      	ldr	r2, [r7, #8]
 8017c02:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8017c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c06:	88db      	ldrh	r3, [r3, #6]
 8017c08:	b29a      	uxth	r2, r3
 8017c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c0c:	889b      	ldrh	r3, [r3, #4]
 8017c0e:	b29b      	uxth	r3, r3
 8017c10:	429a      	cmp	r2, r3
 8017c12:	d03d      	beq.n	8017c90 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017c14:	2300      	movs	r3, #0
 8017c16:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8017c18:	e03a      	b.n	8017c90 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8017c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c1c:	88db      	ldrh	r3, [r3, #6]
 8017c1e:	b29a      	uxth	r2, r3
 8017c20:	693b      	ldr	r3, [r7, #16]
 8017c22:	889b      	ldrh	r3, [r3, #4]
 8017c24:	b29b      	uxth	r3, r3
 8017c26:	429a      	cmp	r2, r3
 8017c28:	d902      	bls.n	8017c30 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8017c2e:	e0c5      	b.n	8017dbc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8017c30:	68fb      	ldr	r3, [r7, #12]
 8017c32:	68ba      	ldr	r2, [r7, #8]
 8017c34:	605a      	str	r2, [r3, #4]
      break;
 8017c36:	e02b      	b.n	8017c90 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8017c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c3a:	889b      	ldrh	r3, [r3, #4]
 8017c3c:	b29a      	uxth	r2, r3
 8017c3e:	693b      	ldr	r3, [r7, #16]
 8017c40:	889b      	ldrh	r3, [r3, #4]
 8017c42:	b29b      	uxth	r3, r3
 8017c44:	429a      	cmp	r2, r3
 8017c46:	d102      	bne.n	8017c4e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017c48:	f04f 33ff 	mov.w	r3, #4294967295
 8017c4c:	e0b6      	b.n	8017dbc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8017c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c50:	889b      	ldrh	r3, [r3, #4]
 8017c52:	b29a      	uxth	r2, r3
 8017c54:	693b      	ldr	r3, [r7, #16]
 8017c56:	88db      	ldrh	r3, [r3, #6]
 8017c58:	b29b      	uxth	r3, r3
 8017c5a:	429a      	cmp	r2, r3
 8017c5c:	d202      	bcs.n	8017c64 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8017c62:	e0ab      	b.n	8017dbc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8017c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c66:	2b00      	cmp	r3, #0
 8017c68:	d009      	beq.n	8017c7e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8017c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c6c:	88db      	ldrh	r3, [r3, #6]
 8017c6e:	b29a      	uxth	r2, r3
 8017c70:	693b      	ldr	r3, [r7, #16]
 8017c72:	889b      	ldrh	r3, [r3, #4]
 8017c74:	b29b      	uxth	r3, r3
 8017c76:	429a      	cmp	r2, r3
 8017c78:	d001      	beq.n	8017c7e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017c7a:	2300      	movs	r3, #0
 8017c7c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8017c7e:	693b      	ldr	r3, [r7, #16]
 8017c80:	681b      	ldr	r3, [r3, #0]
 8017c82:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8017c84:	693b      	ldr	r3, [r7, #16]
 8017c86:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8017c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c8a:	2b00      	cmp	r3, #0
 8017c8c:	d193      	bne.n	8017bb6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8017c8e:	e000      	b.n	8017c92 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8017c90:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8017c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c94:	2b00      	cmp	r3, #0
 8017c96:	d12d      	bne.n	8017cf4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8017c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c9a:	2b00      	cmp	r3, #0
 8017c9c:	d01c      	beq.n	8017cd8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8017c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ca0:	88db      	ldrh	r3, [r3, #6]
 8017ca2:	b29a      	uxth	r2, r3
 8017ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ca6:	889b      	ldrh	r3, [r3, #4]
 8017ca8:	b29b      	uxth	r3, r3
 8017caa:	429a      	cmp	r2, r3
 8017cac:	d906      	bls.n	8017cbc <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8017cae:	4b45      	ldr	r3, [pc, #276]	; (8017dc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017cb0:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8017cb4:	4944      	ldr	r1, [pc, #272]	; (8017dc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8017cb6:	4845      	ldr	r0, [pc, #276]	; (8017dcc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017cb8:	f001 f9c8 	bl	801904c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8017cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cbe:	68ba      	ldr	r2, [r7, #8]
 8017cc0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8017cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cc4:	88db      	ldrh	r3, [r3, #6]
 8017cc6:	b29a      	uxth	r2, r3
 8017cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cca:	889b      	ldrh	r3, [r3, #4]
 8017ccc:	b29b      	uxth	r3, r3
 8017cce:	429a      	cmp	r2, r3
 8017cd0:	d010      	beq.n	8017cf4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8017cd2:	2300      	movs	r3, #0
 8017cd4:	623b      	str	r3, [r7, #32]
 8017cd6:	e00d      	b.n	8017cf4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8017cd8:	68fb      	ldr	r3, [r7, #12]
 8017cda:	685b      	ldr	r3, [r3, #4]
 8017cdc:	2b00      	cmp	r3, #0
 8017cde:	d006      	beq.n	8017cee <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8017ce0:	4b38      	ldr	r3, [pc, #224]	; (8017dc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017ce2:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8017ce6:	493a      	ldr	r1, [pc, #232]	; (8017dd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8017ce8:	4838      	ldr	r0, [pc, #224]	; (8017dcc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017cea:	f001 f9af 	bl	801904c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8017cee:	68fb      	ldr	r3, [r7, #12]
 8017cf0:	68ba      	ldr	r2, [r7, #8]
 8017cf2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8017cf4:	687b      	ldr	r3, [r7, #4]
 8017cf6:	2b00      	cmp	r3, #0
 8017cf8:	d105      	bne.n	8017d06 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8017cfa:	68fb      	ldr	r3, [r7, #12]
 8017cfc:	7f9b      	ldrb	r3, [r3, #30]
 8017cfe:	f003 0301 	and.w	r3, r3, #1
 8017d02:	2b00      	cmp	r3, #0
 8017d04:	d059      	beq.n	8017dba <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8017d06:	6a3b      	ldr	r3, [r7, #32]
 8017d08:	2b00      	cmp	r3, #0
 8017d0a:	d04f      	beq.n	8017dac <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8017d0c:	68fb      	ldr	r3, [r7, #12]
 8017d0e:	685b      	ldr	r3, [r3, #4]
 8017d10:	2b00      	cmp	r3, #0
 8017d12:	d006      	beq.n	8017d22 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8017d14:	68fb      	ldr	r3, [r7, #12]
 8017d16:	685b      	ldr	r3, [r3, #4]
 8017d18:	685b      	ldr	r3, [r3, #4]
 8017d1a:	889b      	ldrh	r3, [r3, #4]
 8017d1c:	b29b      	uxth	r3, r3
 8017d1e:	2b00      	cmp	r3, #0
 8017d20:	d002      	beq.n	8017d28 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8017d22:	2300      	movs	r3, #0
 8017d24:	623b      	str	r3, [r7, #32]
 8017d26:	e041      	b.n	8017dac <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8017d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d2a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8017d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d2e:	681b      	ldr	r3, [r3, #0]
 8017d30:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8017d32:	e012      	b.n	8017d5a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8017d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d36:	685b      	ldr	r3, [r3, #4]
 8017d38:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8017d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d3c:	88db      	ldrh	r3, [r3, #6]
 8017d3e:	b29a      	uxth	r2, r3
 8017d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d42:	889b      	ldrh	r3, [r3, #4]
 8017d44:	b29b      	uxth	r3, r3
 8017d46:	429a      	cmp	r2, r3
 8017d48:	d002      	beq.n	8017d50 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8017d4a:	2300      	movs	r3, #0
 8017d4c:	623b      	str	r3, [r7, #32]
            break;
 8017d4e:	e007      	b.n	8017d60 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8017d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d52:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8017d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d56:	681b      	ldr	r3, [r3, #0]
 8017d58:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8017d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d5c:	2b00      	cmp	r3, #0
 8017d5e:	d1e9      	bne.n	8017d34 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8017d60:	6a3b      	ldr	r3, [r7, #32]
 8017d62:	2b00      	cmp	r3, #0
 8017d64:	d022      	beq.n	8017dac <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8017d66:	68fb      	ldr	r3, [r7, #12]
 8017d68:	685b      	ldr	r3, [r3, #4]
 8017d6a:	2b00      	cmp	r3, #0
 8017d6c:	d106      	bne.n	8017d7c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8017d6e:	4b15      	ldr	r3, [pc, #84]	; (8017dc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017d70:	f240 12df 	movw	r2, #479	; 0x1df
 8017d74:	4917      	ldr	r1, [pc, #92]	; (8017dd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017d76:	4815      	ldr	r0, [pc, #84]	; (8017dcc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017d78:	f001 f968 	bl	801904c <iprintf>
          LWIP_ASSERT("sanity check",
 8017d7c:	68fb      	ldr	r3, [r7, #12]
 8017d7e:	685b      	ldr	r3, [r3, #4]
 8017d80:	685b      	ldr	r3, [r3, #4]
 8017d82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017d84:	429a      	cmp	r2, r3
 8017d86:	d106      	bne.n	8017d96 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8017d88:	4b0e      	ldr	r3, [pc, #56]	; (8017dc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017d8a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8017d8e:	4911      	ldr	r1, [pc, #68]	; (8017dd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017d90:	480e      	ldr	r0, [pc, #56]	; (8017dcc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017d92:	f001 f95b 	bl	801904c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8017d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d98:	681b      	ldr	r3, [r3, #0]
 8017d9a:	2b00      	cmp	r3, #0
 8017d9c:	d006      	beq.n	8017dac <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8017d9e:	4b09      	ldr	r3, [pc, #36]	; (8017dc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017da0:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8017da4:	490c      	ldr	r1, [pc, #48]	; (8017dd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8017da6:	4809      	ldr	r0, [pc, #36]	; (8017dcc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017da8:	f001 f950 	bl	801904c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8017dac:	6a3b      	ldr	r3, [r7, #32]
 8017dae:	2b00      	cmp	r3, #0
 8017db0:	bf14      	ite	ne
 8017db2:	2301      	movne	r3, #1
 8017db4:	2300      	moveq	r3, #0
 8017db6:	b2db      	uxtb	r3, r3
 8017db8:	e000      	b.n	8017dbc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8017dba:	2300      	movs	r3, #0
}
 8017dbc:	4618      	mov	r0, r3
 8017dbe:	3730      	adds	r7, #48	; 0x30
 8017dc0:	46bd      	mov	sp, r7
 8017dc2:	bd80      	pop	{r7, pc}
 8017dc4:	0801dde0 	.word	0x0801dde0
 8017dc8:	0801dec4 	.word	0x0801dec4
 8017dcc:	0801de28 	.word	0x0801de28
 8017dd0:	0801dee4 	.word	0x0801dee4
 8017dd4:	0801df1c 	.word	0x0801df1c
 8017dd8:	0801df2c 	.word	0x0801df2c

08017ddc <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8017ddc:	b580      	push	{r7, lr}
 8017dde:	b08e      	sub	sp, #56	; 0x38
 8017de0:	af00      	add	r7, sp, #0
 8017de2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8017de4:	687b      	ldr	r3, [r7, #4]
 8017de6:	685b      	ldr	r3, [r3, #4]
 8017de8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8017dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017dec:	781b      	ldrb	r3, [r3, #0]
 8017dee:	f003 030f 	and.w	r3, r3, #15
 8017df2:	b2db      	uxtb	r3, r3
 8017df4:	009b      	lsls	r3, r3, #2
 8017df6:	b2db      	uxtb	r3, r3
 8017df8:	2b14      	cmp	r3, #20
 8017dfa:	f040 8171 	bne.w	80180e0 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8017dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e00:	88db      	ldrh	r3, [r3, #6]
 8017e02:	b29b      	uxth	r3, r3
 8017e04:	4618      	mov	r0, r3
 8017e06:	f7f6 fe6b 	bl	800eae0 <lwip_htons>
 8017e0a:	4603      	mov	r3, r0
 8017e0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017e10:	b29b      	uxth	r3, r3
 8017e12:	00db      	lsls	r3, r3, #3
 8017e14:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e18:	885b      	ldrh	r3, [r3, #2]
 8017e1a:	b29b      	uxth	r3, r3
 8017e1c:	4618      	mov	r0, r3
 8017e1e:	f7f6 fe5f 	bl	800eae0 <lwip_htons>
 8017e22:	4603      	mov	r3, r0
 8017e24:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8017e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e28:	781b      	ldrb	r3, [r3, #0]
 8017e2a:	f003 030f 	and.w	r3, r3, #15
 8017e2e:	b2db      	uxtb	r3, r3
 8017e30:	009b      	lsls	r3, r3, #2
 8017e32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8017e36:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017e3a:	b29b      	uxth	r3, r3
 8017e3c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017e3e:	429a      	cmp	r2, r3
 8017e40:	f0c0 8150 	bcc.w	80180e4 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8017e44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017e48:	b29b      	uxth	r3, r3
 8017e4a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017e4c:	1ad3      	subs	r3, r2, r3
 8017e4e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8017e50:	6878      	ldr	r0, [r7, #4]
 8017e52:	f7f8 fac3 	bl	80103dc <pbuf_clen>
 8017e56:	4603      	mov	r3, r0
 8017e58:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8017e5a:	4b8c      	ldr	r3, [pc, #560]	; (801808c <ip4_reass+0x2b0>)
 8017e5c:	881b      	ldrh	r3, [r3, #0]
 8017e5e:	461a      	mov	r2, r3
 8017e60:	8c3b      	ldrh	r3, [r7, #32]
 8017e62:	4413      	add	r3, r2
 8017e64:	2b0a      	cmp	r3, #10
 8017e66:	dd10      	ble.n	8017e8a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017e68:	8c3b      	ldrh	r3, [r7, #32]
 8017e6a:	4619      	mov	r1, r3
 8017e6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017e6e:	f7ff fd81 	bl	8017974 <ip_reass_remove_oldest_datagram>
 8017e72:	4603      	mov	r3, r0
 8017e74:	2b00      	cmp	r3, #0
 8017e76:	f000 8137 	beq.w	80180e8 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8017e7a:	4b84      	ldr	r3, [pc, #528]	; (801808c <ip4_reass+0x2b0>)
 8017e7c:	881b      	ldrh	r3, [r3, #0]
 8017e7e:	461a      	mov	r2, r3
 8017e80:	8c3b      	ldrh	r3, [r7, #32]
 8017e82:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017e84:	2b0a      	cmp	r3, #10
 8017e86:	f300 812f 	bgt.w	80180e8 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017e8a:	4b81      	ldr	r3, [pc, #516]	; (8018090 <ip4_reass+0x2b4>)
 8017e8c:	681b      	ldr	r3, [r3, #0]
 8017e8e:	633b      	str	r3, [r7, #48]	; 0x30
 8017e90:	e015      	b.n	8017ebe <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8017e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e94:	695a      	ldr	r2, [r3, #20]
 8017e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e98:	68db      	ldr	r3, [r3, #12]
 8017e9a:	429a      	cmp	r2, r3
 8017e9c:	d10c      	bne.n	8017eb8 <ip4_reass+0xdc>
 8017e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ea0:	699a      	ldr	r2, [r3, #24]
 8017ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ea4:	691b      	ldr	r3, [r3, #16]
 8017ea6:	429a      	cmp	r2, r3
 8017ea8:	d106      	bne.n	8017eb8 <ip4_reass+0xdc>
 8017eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017eac:	899a      	ldrh	r2, [r3, #12]
 8017eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017eb0:	889b      	ldrh	r3, [r3, #4]
 8017eb2:	b29b      	uxth	r3, r3
 8017eb4:	429a      	cmp	r2, r3
 8017eb6:	d006      	beq.n	8017ec6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017eba:	681b      	ldr	r3, [r3, #0]
 8017ebc:	633b      	str	r3, [r7, #48]	; 0x30
 8017ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ec0:	2b00      	cmp	r3, #0
 8017ec2:	d1e6      	bne.n	8017e92 <ip4_reass+0xb6>
 8017ec4:	e000      	b.n	8017ec8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8017ec6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8017ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017eca:	2b00      	cmp	r3, #0
 8017ecc:	d109      	bne.n	8017ee2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8017ece:	8c3b      	ldrh	r3, [r7, #32]
 8017ed0:	4619      	mov	r1, r3
 8017ed2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017ed4:	f7ff fdb0 	bl	8017a38 <ip_reass_enqueue_new_datagram>
 8017ed8:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8017eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017edc:	2b00      	cmp	r3, #0
 8017ede:	d11c      	bne.n	8017f1a <ip4_reass+0x13e>
      goto nullreturn;
 8017ee0:	e105      	b.n	80180ee <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ee4:	88db      	ldrh	r3, [r3, #6]
 8017ee6:	b29b      	uxth	r3, r3
 8017ee8:	4618      	mov	r0, r3
 8017eea:	f7f6 fdf9 	bl	800eae0 <lwip_htons>
 8017eee:	4603      	mov	r3, r0
 8017ef0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017ef4:	2b00      	cmp	r3, #0
 8017ef6:	d110      	bne.n	8017f1a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8017ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017efa:	89db      	ldrh	r3, [r3, #14]
 8017efc:	4618      	mov	r0, r3
 8017efe:	f7f6 fdef 	bl	800eae0 <lwip_htons>
 8017f02:	4603      	mov	r3, r0
 8017f04:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017f08:	2b00      	cmp	r3, #0
 8017f0a:	d006      	beq.n	8017f1a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8017f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f0e:	3308      	adds	r3, #8
 8017f10:	2214      	movs	r2, #20
 8017f12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017f14:	4618      	mov	r0, r3
 8017f16:	f001 fa67 	bl	80193e8 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8017f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f1c:	88db      	ldrh	r3, [r3, #6]
 8017f1e:	b29b      	uxth	r3, r3
 8017f20:	f003 0320 	and.w	r3, r3, #32
 8017f24:	2b00      	cmp	r3, #0
 8017f26:	bf0c      	ite	eq
 8017f28:	2301      	moveq	r3, #1
 8017f2a:	2300      	movne	r3, #0
 8017f2c:	b2db      	uxtb	r3, r3
 8017f2e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8017f30:	69fb      	ldr	r3, [r7, #28]
 8017f32:	2b00      	cmp	r3, #0
 8017f34:	d00e      	beq.n	8017f54 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8017f36:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017f38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017f3a:	4413      	add	r3, r2
 8017f3c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8017f3e:	8b7a      	ldrh	r2, [r7, #26]
 8017f40:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017f42:	429a      	cmp	r2, r3
 8017f44:	f0c0 80a0 	bcc.w	8018088 <ip4_reass+0x2ac>
 8017f48:	8b7b      	ldrh	r3, [r7, #26]
 8017f4a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8017f4e:	4293      	cmp	r3, r2
 8017f50:	f200 809a 	bhi.w	8018088 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8017f54:	69fa      	ldr	r2, [r7, #28]
 8017f56:	6879      	ldr	r1, [r7, #4]
 8017f58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017f5a:	f7ff fdd5 	bl	8017b08 <ip_reass_chain_frag_into_datagram_and_validate>
 8017f5e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8017f60:	697b      	ldr	r3, [r7, #20]
 8017f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017f66:	f000 809b 	beq.w	80180a0 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8017f6a:	4b48      	ldr	r3, [pc, #288]	; (801808c <ip4_reass+0x2b0>)
 8017f6c:	881a      	ldrh	r2, [r3, #0]
 8017f6e:	8c3b      	ldrh	r3, [r7, #32]
 8017f70:	4413      	add	r3, r2
 8017f72:	b29a      	uxth	r2, r3
 8017f74:	4b45      	ldr	r3, [pc, #276]	; (801808c <ip4_reass+0x2b0>)
 8017f76:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8017f78:	69fb      	ldr	r3, [r7, #28]
 8017f7a:	2b00      	cmp	r3, #0
 8017f7c:	d00d      	beq.n	8017f9a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8017f7e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017f80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017f82:	4413      	add	r3, r2
 8017f84:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8017f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f88:	8a7a      	ldrh	r2, [r7, #18]
 8017f8a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8017f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f8e:	7f9b      	ldrb	r3, [r3, #30]
 8017f90:	f043 0301 	orr.w	r3, r3, #1
 8017f94:	b2da      	uxtb	r2, r3
 8017f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f98:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8017f9a:	697b      	ldr	r3, [r7, #20]
 8017f9c:	2b01      	cmp	r3, #1
 8017f9e:	d171      	bne.n	8018084 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8017fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fa2:	8b9b      	ldrh	r3, [r3, #28]
 8017fa4:	3314      	adds	r3, #20
 8017fa6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8017fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017faa:	685b      	ldr	r3, [r3, #4]
 8017fac:	685b      	ldr	r3, [r3, #4]
 8017fae:	681b      	ldr	r3, [r3, #0]
 8017fb0:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8017fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fb4:	685b      	ldr	r3, [r3, #4]
 8017fb6:	685b      	ldr	r3, [r3, #4]
 8017fb8:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8017fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fbc:	3308      	adds	r3, #8
 8017fbe:	2214      	movs	r2, #20
 8017fc0:	4619      	mov	r1, r3
 8017fc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017fc4:	f001 fa10 	bl	80193e8 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8017fc8:	8a3b      	ldrh	r3, [r7, #16]
 8017fca:	4618      	mov	r0, r3
 8017fcc:	f7f6 fd88 	bl	800eae0 <lwip_htons>
 8017fd0:	4603      	mov	r3, r0
 8017fd2:	461a      	mov	r2, r3
 8017fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fd6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8017fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fda:	2200      	movs	r2, #0
 8017fdc:	719a      	strb	r2, [r3, #6]
 8017fde:	2200      	movs	r2, #0
 8017fe0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8017fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fe4:	2200      	movs	r2, #0
 8017fe6:	729a      	strb	r2, [r3, #10]
 8017fe8:	2200      	movs	r2, #0
 8017fea:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8017fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fee:	685b      	ldr	r3, [r3, #4]
 8017ff0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8017ff2:	e00d      	b.n	8018010 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8017ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017ff6:	685b      	ldr	r3, [r3, #4]
 8017ff8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8017ffa:	2114      	movs	r1, #20
 8017ffc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8017ffe:	f7f8 f8df 	bl	80101c0 <pbuf_remove_header>
      pbuf_cat(p, r);
 8018002:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018004:	6878      	ldr	r0, [r7, #4]
 8018006:	f7f8 fa23 	bl	8010450 <pbuf_cat>
      r = iprh->next_pbuf;
 801800a:	68fb      	ldr	r3, [r7, #12]
 801800c:	681b      	ldr	r3, [r3, #0]
 801800e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8018010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018012:	2b00      	cmp	r3, #0
 8018014:	d1ee      	bne.n	8017ff4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8018016:	4b1e      	ldr	r3, [pc, #120]	; (8018090 <ip4_reass+0x2b4>)
 8018018:	681b      	ldr	r3, [r3, #0]
 801801a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801801c:	429a      	cmp	r2, r3
 801801e:	d102      	bne.n	8018026 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8018020:	2300      	movs	r3, #0
 8018022:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018024:	e010      	b.n	8018048 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018026:	4b1a      	ldr	r3, [pc, #104]	; (8018090 <ip4_reass+0x2b4>)
 8018028:	681b      	ldr	r3, [r3, #0]
 801802a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801802c:	e007      	b.n	801803e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801802e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018030:	681b      	ldr	r3, [r3, #0]
 8018032:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018034:	429a      	cmp	r2, r3
 8018036:	d006      	beq.n	8018046 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801803a:	681b      	ldr	r3, [r3, #0]
 801803c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801803e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018040:	2b00      	cmp	r3, #0
 8018042:	d1f4      	bne.n	801802e <ip4_reass+0x252>
 8018044:	e000      	b.n	8018048 <ip4_reass+0x26c>
          break;
 8018046:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8018048:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801804a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801804c:	f7ff fd2e 	bl	8017aac <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8018050:	6878      	ldr	r0, [r7, #4]
 8018052:	f7f8 f9c3 	bl	80103dc <pbuf_clen>
 8018056:	4603      	mov	r3, r0
 8018058:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801805a:	4b0c      	ldr	r3, [pc, #48]	; (801808c <ip4_reass+0x2b0>)
 801805c:	881b      	ldrh	r3, [r3, #0]
 801805e:	8c3a      	ldrh	r2, [r7, #32]
 8018060:	429a      	cmp	r2, r3
 8018062:	d906      	bls.n	8018072 <ip4_reass+0x296>
 8018064:	4b0b      	ldr	r3, [pc, #44]	; (8018094 <ip4_reass+0x2b8>)
 8018066:	f240 229b 	movw	r2, #667	; 0x29b
 801806a:	490b      	ldr	r1, [pc, #44]	; (8018098 <ip4_reass+0x2bc>)
 801806c:	480b      	ldr	r0, [pc, #44]	; (801809c <ip4_reass+0x2c0>)
 801806e:	f000 ffed 	bl	801904c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8018072:	4b06      	ldr	r3, [pc, #24]	; (801808c <ip4_reass+0x2b0>)
 8018074:	881a      	ldrh	r2, [r3, #0]
 8018076:	8c3b      	ldrh	r3, [r7, #32]
 8018078:	1ad3      	subs	r3, r2, r3
 801807a:	b29a      	uxth	r2, r3
 801807c:	4b03      	ldr	r3, [pc, #12]	; (801808c <ip4_reass+0x2b0>)
 801807e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8018080:	687b      	ldr	r3, [r7, #4]
 8018082:	e038      	b.n	80180f6 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8018084:	2300      	movs	r3, #0
 8018086:	e036      	b.n	80180f6 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8018088:	bf00      	nop
 801808a:	e00a      	b.n	80180a2 <ip4_reass+0x2c6>
 801808c:	20008150 	.word	0x20008150
 8018090:	2000814c 	.word	0x2000814c
 8018094:	0801dde0 	.word	0x0801dde0
 8018098:	0801df50 	.word	0x0801df50
 801809c:	0801de28 	.word	0x0801de28
    goto nullreturn_ipr;
 80180a0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80180a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80180a4:	2b00      	cmp	r3, #0
 80180a6:	d106      	bne.n	80180b6 <ip4_reass+0x2da>
 80180a8:	4b15      	ldr	r3, [pc, #84]	; (8018100 <ip4_reass+0x324>)
 80180aa:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80180ae:	4915      	ldr	r1, [pc, #84]	; (8018104 <ip4_reass+0x328>)
 80180b0:	4815      	ldr	r0, [pc, #84]	; (8018108 <ip4_reass+0x32c>)
 80180b2:	f000 ffcb 	bl	801904c <iprintf>
  if (ipr->p == NULL) {
 80180b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80180b8:	685b      	ldr	r3, [r3, #4]
 80180ba:	2b00      	cmp	r3, #0
 80180bc:	d116      	bne.n	80180ec <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80180be:	4b13      	ldr	r3, [pc, #76]	; (801810c <ip4_reass+0x330>)
 80180c0:	681b      	ldr	r3, [r3, #0]
 80180c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80180c4:	429a      	cmp	r2, r3
 80180c6:	d006      	beq.n	80180d6 <ip4_reass+0x2fa>
 80180c8:	4b0d      	ldr	r3, [pc, #52]	; (8018100 <ip4_reass+0x324>)
 80180ca:	f240 22ab 	movw	r2, #683	; 0x2ab
 80180ce:	4910      	ldr	r1, [pc, #64]	; (8018110 <ip4_reass+0x334>)
 80180d0:	480d      	ldr	r0, [pc, #52]	; (8018108 <ip4_reass+0x32c>)
 80180d2:	f000 ffbb 	bl	801904c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80180d6:	2100      	movs	r1, #0
 80180d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80180da:	f7ff fce7 	bl	8017aac <ip_reass_dequeue_datagram>
 80180de:	e006      	b.n	80180ee <ip4_reass+0x312>
    goto nullreturn;
 80180e0:	bf00      	nop
 80180e2:	e004      	b.n	80180ee <ip4_reass+0x312>
    goto nullreturn;
 80180e4:	bf00      	nop
 80180e6:	e002      	b.n	80180ee <ip4_reass+0x312>
      goto nullreturn;
 80180e8:	bf00      	nop
 80180ea:	e000      	b.n	80180ee <ip4_reass+0x312>
  }

nullreturn:
 80180ec:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80180ee:	6878      	ldr	r0, [r7, #4]
 80180f0:	f7f8 f8ec 	bl	80102cc <pbuf_free>
  return NULL;
 80180f4:	2300      	movs	r3, #0
}
 80180f6:	4618      	mov	r0, r3
 80180f8:	3738      	adds	r7, #56	; 0x38
 80180fa:	46bd      	mov	sp, r7
 80180fc:	bd80      	pop	{r7, pc}
 80180fe:	bf00      	nop
 8018100:	0801dde0 	.word	0x0801dde0
 8018104:	0801df6c 	.word	0x0801df6c
 8018108:	0801de28 	.word	0x0801de28
 801810c:	2000814c 	.word	0x2000814c
 8018110:	0801df78 	.word	0x0801df78

08018114 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8018114:	b580      	push	{r7, lr}
 8018116:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8018118:	2005      	movs	r0, #5
 801811a:	f7f7 fa11 	bl	800f540 <memp_malloc>
 801811e:	4603      	mov	r3, r0
}
 8018120:	4618      	mov	r0, r3
 8018122:	bd80      	pop	{r7, pc}

08018124 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8018124:	b580      	push	{r7, lr}
 8018126:	b082      	sub	sp, #8
 8018128:	af00      	add	r7, sp, #0
 801812a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801812c:	687b      	ldr	r3, [r7, #4]
 801812e:	2b00      	cmp	r3, #0
 8018130:	d106      	bne.n	8018140 <ip_frag_free_pbuf_custom_ref+0x1c>
 8018132:	4b07      	ldr	r3, [pc, #28]	; (8018150 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8018134:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8018138:	4906      	ldr	r1, [pc, #24]	; (8018154 <ip_frag_free_pbuf_custom_ref+0x30>)
 801813a:	4807      	ldr	r0, [pc, #28]	; (8018158 <ip_frag_free_pbuf_custom_ref+0x34>)
 801813c:	f000 ff86 	bl	801904c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8018140:	6879      	ldr	r1, [r7, #4]
 8018142:	2005      	movs	r0, #5
 8018144:	f7f7 fa6c 	bl	800f620 <memp_free>
}
 8018148:	bf00      	nop
 801814a:	3708      	adds	r7, #8
 801814c:	46bd      	mov	sp, r7
 801814e:	bd80      	pop	{r7, pc}
 8018150:	0801dde0 	.word	0x0801dde0
 8018154:	0801df98 	.word	0x0801df98
 8018158:	0801de28 	.word	0x0801de28

0801815c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801815c:	b580      	push	{r7, lr}
 801815e:	b084      	sub	sp, #16
 8018160:	af00      	add	r7, sp, #0
 8018162:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8018164:	687b      	ldr	r3, [r7, #4]
 8018166:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8018168:	68fb      	ldr	r3, [r7, #12]
 801816a:	2b00      	cmp	r3, #0
 801816c:	d106      	bne.n	801817c <ipfrag_free_pbuf_custom+0x20>
 801816e:	4b11      	ldr	r3, [pc, #68]	; (80181b4 <ipfrag_free_pbuf_custom+0x58>)
 8018170:	f240 22ce 	movw	r2, #718	; 0x2ce
 8018174:	4910      	ldr	r1, [pc, #64]	; (80181b8 <ipfrag_free_pbuf_custom+0x5c>)
 8018176:	4811      	ldr	r0, [pc, #68]	; (80181bc <ipfrag_free_pbuf_custom+0x60>)
 8018178:	f000 ff68 	bl	801904c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801817c:	68fa      	ldr	r2, [r7, #12]
 801817e:	687b      	ldr	r3, [r7, #4]
 8018180:	429a      	cmp	r2, r3
 8018182:	d006      	beq.n	8018192 <ipfrag_free_pbuf_custom+0x36>
 8018184:	4b0b      	ldr	r3, [pc, #44]	; (80181b4 <ipfrag_free_pbuf_custom+0x58>)
 8018186:	f240 22cf 	movw	r2, #719	; 0x2cf
 801818a:	490d      	ldr	r1, [pc, #52]	; (80181c0 <ipfrag_free_pbuf_custom+0x64>)
 801818c:	480b      	ldr	r0, [pc, #44]	; (80181bc <ipfrag_free_pbuf_custom+0x60>)
 801818e:	f000 ff5d 	bl	801904c <iprintf>
  if (pcr->original != NULL) {
 8018192:	68fb      	ldr	r3, [r7, #12]
 8018194:	695b      	ldr	r3, [r3, #20]
 8018196:	2b00      	cmp	r3, #0
 8018198:	d004      	beq.n	80181a4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801819a:	68fb      	ldr	r3, [r7, #12]
 801819c:	695b      	ldr	r3, [r3, #20]
 801819e:	4618      	mov	r0, r3
 80181a0:	f7f8 f894 	bl	80102cc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80181a4:	68f8      	ldr	r0, [r7, #12]
 80181a6:	f7ff ffbd 	bl	8018124 <ip_frag_free_pbuf_custom_ref>
}
 80181aa:	bf00      	nop
 80181ac:	3710      	adds	r7, #16
 80181ae:	46bd      	mov	sp, r7
 80181b0:	bd80      	pop	{r7, pc}
 80181b2:	bf00      	nop
 80181b4:	0801dde0 	.word	0x0801dde0
 80181b8:	0801dfa4 	.word	0x0801dfa4
 80181bc:	0801de28 	.word	0x0801de28
 80181c0:	0801dfb0 	.word	0x0801dfb0

080181c4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80181c4:	b580      	push	{r7, lr}
 80181c6:	b094      	sub	sp, #80	; 0x50
 80181c8:	af02      	add	r7, sp, #8
 80181ca:	60f8      	str	r0, [r7, #12]
 80181cc:	60b9      	str	r1, [r7, #8]
 80181ce:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80181d0:	2300      	movs	r3, #0
 80181d2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80181d6:	68bb      	ldr	r3, [r7, #8]
 80181d8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80181da:	3b14      	subs	r3, #20
 80181dc:	2b00      	cmp	r3, #0
 80181de:	da00      	bge.n	80181e2 <ip4_frag+0x1e>
 80181e0:	3307      	adds	r3, #7
 80181e2:	10db      	asrs	r3, r3, #3
 80181e4:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80181e6:	2314      	movs	r3, #20
 80181e8:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80181ea:	68fb      	ldr	r3, [r7, #12]
 80181ec:	685b      	ldr	r3, [r3, #4]
 80181ee:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80181f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80181f2:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80181f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181f6:	781b      	ldrb	r3, [r3, #0]
 80181f8:	f003 030f 	and.w	r3, r3, #15
 80181fc:	b2db      	uxtb	r3, r3
 80181fe:	009b      	lsls	r3, r3, #2
 8018200:	b2db      	uxtb	r3, r3
 8018202:	2b14      	cmp	r3, #20
 8018204:	d002      	beq.n	801820c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8018206:	f06f 0305 	mvn.w	r3, #5
 801820a:	e110      	b.n	801842e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801820c:	68fb      	ldr	r3, [r7, #12]
 801820e:	895b      	ldrh	r3, [r3, #10]
 8018210:	2b13      	cmp	r3, #19
 8018212:	d809      	bhi.n	8018228 <ip4_frag+0x64>
 8018214:	4b88      	ldr	r3, [pc, #544]	; (8018438 <ip4_frag+0x274>)
 8018216:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801821a:	4988      	ldr	r1, [pc, #544]	; (801843c <ip4_frag+0x278>)
 801821c:	4888      	ldr	r0, [pc, #544]	; (8018440 <ip4_frag+0x27c>)
 801821e:	f000 ff15 	bl	801904c <iprintf>
 8018222:	f06f 0305 	mvn.w	r3, #5
 8018226:	e102      	b.n	801842e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8018228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801822a:	88db      	ldrh	r3, [r3, #6]
 801822c:	b29b      	uxth	r3, r3
 801822e:	4618      	mov	r0, r3
 8018230:	f7f6 fc56 	bl	800eae0 <lwip_htons>
 8018234:	4603      	mov	r3, r0
 8018236:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8018238:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801823a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801823e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8018242:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018244:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8018248:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801824a:	68fb      	ldr	r3, [r7, #12]
 801824c:	891b      	ldrh	r3, [r3, #8]
 801824e:	3b14      	subs	r3, #20
 8018250:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8018254:	e0e1      	b.n	801841a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8018256:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018258:	00db      	lsls	r3, r3, #3
 801825a:	b29b      	uxth	r3, r3
 801825c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018260:	4293      	cmp	r3, r2
 8018262:	bf28      	it	cs
 8018264:	4613      	movcs	r3, r2
 8018266:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8018268:	f44f 7220 	mov.w	r2, #640	; 0x280
 801826c:	2114      	movs	r1, #20
 801826e:	200e      	movs	r0, #14
 8018270:	f7f7 fd48 	bl	800fd04 <pbuf_alloc>
 8018274:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8018276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018278:	2b00      	cmp	r3, #0
 801827a:	f000 80d5 	beq.w	8018428 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801827e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018280:	895b      	ldrh	r3, [r3, #10]
 8018282:	2b13      	cmp	r3, #19
 8018284:	d806      	bhi.n	8018294 <ip4_frag+0xd0>
 8018286:	4b6c      	ldr	r3, [pc, #432]	; (8018438 <ip4_frag+0x274>)
 8018288:	f44f 7249 	mov.w	r2, #804	; 0x324
 801828c:	496d      	ldr	r1, [pc, #436]	; (8018444 <ip4_frag+0x280>)
 801828e:	486c      	ldr	r0, [pc, #432]	; (8018440 <ip4_frag+0x27c>)
 8018290:	f000 fedc 	bl	801904c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8018294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018296:	685b      	ldr	r3, [r3, #4]
 8018298:	2214      	movs	r2, #20
 801829a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801829c:	4618      	mov	r0, r3
 801829e:	f001 f8a3 	bl	80193e8 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80182a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182a4:	685b      	ldr	r3, [r3, #4]
 80182a6:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80182a8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80182aa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80182ae:	e064      	b.n	801837a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80182b0:	68fb      	ldr	r3, [r7, #12]
 80182b2:	895a      	ldrh	r2, [r3, #10]
 80182b4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80182b6:	1ad3      	subs	r3, r2, r3
 80182b8:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80182ba:	68fb      	ldr	r3, [r7, #12]
 80182bc:	895b      	ldrh	r3, [r3, #10]
 80182be:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80182c0:	429a      	cmp	r2, r3
 80182c2:	d906      	bls.n	80182d2 <ip4_frag+0x10e>
 80182c4:	4b5c      	ldr	r3, [pc, #368]	; (8018438 <ip4_frag+0x274>)
 80182c6:	f240 322d 	movw	r2, #813	; 0x32d
 80182ca:	495f      	ldr	r1, [pc, #380]	; (8018448 <ip4_frag+0x284>)
 80182cc:	485c      	ldr	r0, [pc, #368]	; (8018440 <ip4_frag+0x27c>)
 80182ce:	f000 febd 	bl	801904c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80182d2:	8bfa      	ldrh	r2, [r7, #30]
 80182d4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80182d8:	4293      	cmp	r3, r2
 80182da:	bf28      	it	cs
 80182dc:	4613      	movcs	r3, r2
 80182de:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80182e2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80182e6:	2b00      	cmp	r3, #0
 80182e8:	d105      	bne.n	80182f6 <ip4_frag+0x132>
        poff = 0;
 80182ea:	2300      	movs	r3, #0
 80182ec:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80182ee:	68fb      	ldr	r3, [r7, #12]
 80182f0:	681b      	ldr	r3, [r3, #0]
 80182f2:	60fb      	str	r3, [r7, #12]
        continue;
 80182f4:	e041      	b.n	801837a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80182f6:	f7ff ff0d 	bl	8018114 <ip_frag_alloc_pbuf_custom_ref>
 80182fa:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80182fc:	69bb      	ldr	r3, [r7, #24]
 80182fe:	2b00      	cmp	r3, #0
 8018300:	d103      	bne.n	801830a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8018302:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018304:	f7f7 ffe2 	bl	80102cc <pbuf_free>
        goto memerr;
 8018308:	e08f      	b.n	801842a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801830a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801830c:	68fb      	ldr	r3, [r7, #12]
 801830e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018310:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018312:	4413      	add	r3, r2
 8018314:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8018318:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801831c:	9201      	str	r2, [sp, #4]
 801831e:	9300      	str	r3, [sp, #0]
 8018320:	4603      	mov	r3, r0
 8018322:	2241      	movs	r2, #65	; 0x41
 8018324:	2000      	movs	r0, #0
 8018326:	f7f7 fe17 	bl	800ff58 <pbuf_alloced_custom>
 801832a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801832c:	697b      	ldr	r3, [r7, #20]
 801832e:	2b00      	cmp	r3, #0
 8018330:	d106      	bne.n	8018340 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8018332:	69b8      	ldr	r0, [r7, #24]
 8018334:	f7ff fef6 	bl	8018124 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8018338:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801833a:	f7f7 ffc7 	bl	80102cc <pbuf_free>
        goto memerr;
 801833e:	e074      	b.n	801842a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8018340:	68f8      	ldr	r0, [r7, #12]
 8018342:	f7f8 f863 	bl	801040c <pbuf_ref>
      pcr->original = p;
 8018346:	69bb      	ldr	r3, [r7, #24]
 8018348:	68fa      	ldr	r2, [r7, #12]
 801834a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801834c:	69bb      	ldr	r3, [r7, #24]
 801834e:	4a3f      	ldr	r2, [pc, #252]	; (801844c <ip4_frag+0x288>)
 8018350:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8018352:	6979      	ldr	r1, [r7, #20]
 8018354:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018356:	f7f8 f87b 	bl	8010450 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801835a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801835e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018362:	1ad3      	subs	r3, r2, r3
 8018364:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8018368:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801836c:	2b00      	cmp	r3, #0
 801836e:	d004      	beq.n	801837a <ip4_frag+0x1b6>
        poff = 0;
 8018370:	2300      	movs	r3, #0
 8018372:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8018374:	68fb      	ldr	r3, [r7, #12]
 8018376:	681b      	ldr	r3, [r3, #0]
 8018378:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801837a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801837e:	2b00      	cmp	r3, #0
 8018380:	d196      	bne.n	80182b0 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8018382:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018384:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018388:	4413      	add	r3, r2
 801838a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801838c:	68bb      	ldr	r3, [r7, #8]
 801838e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8018390:	f1a3 0213 	sub.w	r2, r3, #19
 8018394:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018398:	429a      	cmp	r2, r3
 801839a:	bfcc      	ite	gt
 801839c:	2301      	movgt	r3, #1
 801839e:	2300      	movle	r3, #0
 80183a0:	b2db      	uxtb	r3, r3
 80183a2:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80183a4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80183a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80183ac:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80183ae:	6a3b      	ldr	r3, [r7, #32]
 80183b0:	2b00      	cmp	r3, #0
 80183b2:	d002      	beq.n	80183ba <ip4_frag+0x1f6>
 80183b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183b6:	2b00      	cmp	r3, #0
 80183b8:	d003      	beq.n	80183c2 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80183ba:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80183bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80183c0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80183c2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80183c4:	4618      	mov	r0, r3
 80183c6:	f7f6 fb8b 	bl	800eae0 <lwip_htons>
 80183ca:	4603      	mov	r3, r0
 80183cc:	461a      	mov	r2, r3
 80183ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183d0:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80183d2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80183d4:	3314      	adds	r3, #20
 80183d6:	b29b      	uxth	r3, r3
 80183d8:	4618      	mov	r0, r3
 80183da:	f7f6 fb81 	bl	800eae0 <lwip_htons>
 80183de:	4603      	mov	r3, r0
 80183e0:	461a      	mov	r2, r3
 80183e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183e4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80183e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183e8:	2200      	movs	r2, #0
 80183ea:	729a      	strb	r2, [r3, #10]
 80183ec:	2200      	movs	r2, #0
 80183ee:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80183f0:	68bb      	ldr	r3, [r7, #8]
 80183f2:	695b      	ldr	r3, [r3, #20]
 80183f4:	687a      	ldr	r2, [r7, #4]
 80183f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80183f8:	68b8      	ldr	r0, [r7, #8]
 80183fa:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80183fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80183fe:	f7f7 ff65 	bl	80102cc <pbuf_free>
    left = (u16_t)(left - fragsize);
 8018402:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018406:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018408:	1ad3      	subs	r3, r2, r3
 801840a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801840e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8018412:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018414:	4413      	add	r3, r2
 8018416:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801841a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801841e:	2b00      	cmp	r3, #0
 8018420:	f47f af19 	bne.w	8018256 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8018424:	2300      	movs	r3, #0
 8018426:	e002      	b.n	801842e <ip4_frag+0x26a>
      goto memerr;
 8018428:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801842a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801842e:	4618      	mov	r0, r3
 8018430:	3748      	adds	r7, #72	; 0x48
 8018432:	46bd      	mov	sp, r7
 8018434:	bd80      	pop	{r7, pc}
 8018436:	bf00      	nop
 8018438:	0801dde0 	.word	0x0801dde0
 801843c:	0801dfbc 	.word	0x0801dfbc
 8018440:	0801de28 	.word	0x0801de28
 8018444:	0801dfd8 	.word	0x0801dfd8
 8018448:	0801dff8 	.word	0x0801dff8
 801844c:	0801815d 	.word	0x0801815d

08018450 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8018450:	b580      	push	{r7, lr}
 8018452:	b086      	sub	sp, #24
 8018454:	af00      	add	r7, sp, #0
 8018456:	6078      	str	r0, [r7, #4]
 8018458:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801845a:	230e      	movs	r3, #14
 801845c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801845e:	687b      	ldr	r3, [r7, #4]
 8018460:	895b      	ldrh	r3, [r3, #10]
 8018462:	2b0e      	cmp	r3, #14
 8018464:	d96e      	bls.n	8018544 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8018466:	687b      	ldr	r3, [r7, #4]
 8018468:	7bdb      	ldrb	r3, [r3, #15]
 801846a:	2b00      	cmp	r3, #0
 801846c:	d106      	bne.n	801847c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801846e:	683b      	ldr	r3, [r7, #0]
 8018470:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018474:	3301      	adds	r3, #1
 8018476:	b2da      	uxtb	r2, r3
 8018478:	687b      	ldr	r3, [r7, #4]
 801847a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801847c:	687b      	ldr	r3, [r7, #4]
 801847e:	685b      	ldr	r3, [r3, #4]
 8018480:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8018482:	693b      	ldr	r3, [r7, #16]
 8018484:	7b1a      	ldrb	r2, [r3, #12]
 8018486:	7b5b      	ldrb	r3, [r3, #13]
 8018488:	021b      	lsls	r3, r3, #8
 801848a:	4313      	orrs	r3, r2
 801848c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801848e:	693b      	ldr	r3, [r7, #16]
 8018490:	781b      	ldrb	r3, [r3, #0]
 8018492:	f003 0301 	and.w	r3, r3, #1
 8018496:	2b00      	cmp	r3, #0
 8018498:	d023      	beq.n	80184e2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801849a:	693b      	ldr	r3, [r7, #16]
 801849c:	781b      	ldrb	r3, [r3, #0]
 801849e:	2b01      	cmp	r3, #1
 80184a0:	d10f      	bne.n	80184c2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80184a2:	693b      	ldr	r3, [r7, #16]
 80184a4:	785b      	ldrb	r3, [r3, #1]
 80184a6:	2b00      	cmp	r3, #0
 80184a8:	d11b      	bne.n	80184e2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80184aa:	693b      	ldr	r3, [r7, #16]
 80184ac:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80184ae:	2b5e      	cmp	r3, #94	; 0x5e
 80184b0:	d117      	bne.n	80184e2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80184b2:	687b      	ldr	r3, [r7, #4]
 80184b4:	7b5b      	ldrb	r3, [r3, #13]
 80184b6:	f043 0310 	orr.w	r3, r3, #16
 80184ba:	b2da      	uxtb	r2, r3
 80184bc:	687b      	ldr	r3, [r7, #4]
 80184be:	735a      	strb	r2, [r3, #13]
 80184c0:	e00f      	b.n	80184e2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80184c2:	693b      	ldr	r3, [r7, #16]
 80184c4:	2206      	movs	r2, #6
 80184c6:	4928      	ldr	r1, [pc, #160]	; (8018568 <ethernet_input+0x118>)
 80184c8:	4618      	mov	r0, r3
 80184ca:	f000 ff05 	bl	80192d8 <memcmp>
 80184ce:	4603      	mov	r3, r0
 80184d0:	2b00      	cmp	r3, #0
 80184d2:	d106      	bne.n	80184e2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80184d4:	687b      	ldr	r3, [r7, #4]
 80184d6:	7b5b      	ldrb	r3, [r3, #13]
 80184d8:	f043 0308 	orr.w	r3, r3, #8
 80184dc:	b2da      	uxtb	r2, r3
 80184de:	687b      	ldr	r3, [r7, #4]
 80184e0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80184e2:	89fb      	ldrh	r3, [r7, #14]
 80184e4:	2b08      	cmp	r3, #8
 80184e6:	d003      	beq.n	80184f0 <ethernet_input+0xa0>
 80184e8:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80184ec:	d014      	beq.n	8018518 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80184ee:	e032      	b.n	8018556 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80184f0:	683b      	ldr	r3, [r7, #0]
 80184f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80184f6:	f003 0308 	and.w	r3, r3, #8
 80184fa:	2b00      	cmp	r3, #0
 80184fc:	d024      	beq.n	8018548 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80184fe:	8afb      	ldrh	r3, [r7, #22]
 8018500:	4619      	mov	r1, r3
 8018502:	6878      	ldr	r0, [r7, #4]
 8018504:	f7f7 fe5c 	bl	80101c0 <pbuf_remove_header>
 8018508:	4603      	mov	r3, r0
 801850a:	2b00      	cmp	r3, #0
 801850c:	d11e      	bne.n	801854c <ethernet_input+0xfc>
        ip4_input(p, netif);
 801850e:	6839      	ldr	r1, [r7, #0]
 8018510:	6878      	ldr	r0, [r7, #4]
 8018512:	f7fe ff21 	bl	8017358 <ip4_input>
      break;
 8018516:	e013      	b.n	8018540 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018518:	683b      	ldr	r3, [r7, #0]
 801851a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801851e:	f003 0308 	and.w	r3, r3, #8
 8018522:	2b00      	cmp	r3, #0
 8018524:	d014      	beq.n	8018550 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018526:	8afb      	ldrh	r3, [r7, #22]
 8018528:	4619      	mov	r1, r3
 801852a:	6878      	ldr	r0, [r7, #4]
 801852c:	f7f7 fe48 	bl	80101c0 <pbuf_remove_header>
 8018530:	4603      	mov	r3, r0
 8018532:	2b00      	cmp	r3, #0
 8018534:	d10e      	bne.n	8018554 <ethernet_input+0x104>
        etharp_input(p, netif);
 8018536:	6839      	ldr	r1, [r7, #0]
 8018538:	6878      	ldr	r0, [r7, #4]
 801853a:	f7fe f89b 	bl	8016674 <etharp_input>
      break;
 801853e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8018540:	2300      	movs	r3, #0
 8018542:	e00c      	b.n	801855e <ethernet_input+0x10e>
    goto free_and_return;
 8018544:	bf00      	nop
 8018546:	e006      	b.n	8018556 <ethernet_input+0x106>
        goto free_and_return;
 8018548:	bf00      	nop
 801854a:	e004      	b.n	8018556 <ethernet_input+0x106>
        goto free_and_return;
 801854c:	bf00      	nop
 801854e:	e002      	b.n	8018556 <ethernet_input+0x106>
        goto free_and_return;
 8018550:	bf00      	nop
 8018552:	e000      	b.n	8018556 <ethernet_input+0x106>
        goto free_and_return;
 8018554:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8018556:	6878      	ldr	r0, [r7, #4]
 8018558:	f7f7 feb8 	bl	80102cc <pbuf_free>
  return ERR_OK;
 801855c:	2300      	movs	r3, #0
}
 801855e:	4618      	mov	r0, r3
 8018560:	3718      	adds	r7, #24
 8018562:	46bd      	mov	sp, r7
 8018564:	bd80      	pop	{r7, pc}
 8018566:	bf00      	nop
 8018568:	0801e1d0 	.word	0x0801e1d0

0801856c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801856c:	b580      	push	{r7, lr}
 801856e:	b086      	sub	sp, #24
 8018570:	af00      	add	r7, sp, #0
 8018572:	60f8      	str	r0, [r7, #12]
 8018574:	60b9      	str	r1, [r7, #8]
 8018576:	607a      	str	r2, [r7, #4]
 8018578:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801857a:	8c3b      	ldrh	r3, [r7, #32]
 801857c:	4618      	mov	r0, r3
 801857e:	f7f6 faaf 	bl	800eae0 <lwip_htons>
 8018582:	4603      	mov	r3, r0
 8018584:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8018586:	210e      	movs	r1, #14
 8018588:	68b8      	ldr	r0, [r7, #8]
 801858a:	f7f7 fe09 	bl	80101a0 <pbuf_add_header>
 801858e:	4603      	mov	r3, r0
 8018590:	2b00      	cmp	r3, #0
 8018592:	d125      	bne.n	80185e0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8018594:	68bb      	ldr	r3, [r7, #8]
 8018596:	685b      	ldr	r3, [r3, #4]
 8018598:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801859a:	693b      	ldr	r3, [r7, #16]
 801859c:	8afa      	ldrh	r2, [r7, #22]
 801859e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80185a0:	693b      	ldr	r3, [r7, #16]
 80185a2:	2206      	movs	r2, #6
 80185a4:	6839      	ldr	r1, [r7, #0]
 80185a6:	4618      	mov	r0, r3
 80185a8:	f000 ff1e 	bl	80193e8 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80185ac:	693b      	ldr	r3, [r7, #16]
 80185ae:	3306      	adds	r3, #6
 80185b0:	2206      	movs	r2, #6
 80185b2:	6879      	ldr	r1, [r7, #4]
 80185b4:	4618      	mov	r0, r3
 80185b6:	f000 ff17 	bl	80193e8 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80185ba:	68fb      	ldr	r3, [r7, #12]
 80185bc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80185c0:	2b06      	cmp	r3, #6
 80185c2:	d006      	beq.n	80185d2 <ethernet_output+0x66>
 80185c4:	4b0a      	ldr	r3, [pc, #40]	; (80185f0 <ethernet_output+0x84>)
 80185c6:	f44f 7299 	mov.w	r2, #306	; 0x132
 80185ca:	490a      	ldr	r1, [pc, #40]	; (80185f4 <ethernet_output+0x88>)
 80185cc:	480a      	ldr	r0, [pc, #40]	; (80185f8 <ethernet_output+0x8c>)
 80185ce:	f000 fd3d 	bl	801904c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80185d2:	68fb      	ldr	r3, [r7, #12]
 80185d4:	699b      	ldr	r3, [r3, #24]
 80185d6:	68b9      	ldr	r1, [r7, #8]
 80185d8:	68f8      	ldr	r0, [r7, #12]
 80185da:	4798      	blx	r3
 80185dc:	4603      	mov	r3, r0
 80185de:	e002      	b.n	80185e6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80185e0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80185e2:	f06f 0301 	mvn.w	r3, #1
}
 80185e6:	4618      	mov	r0, r3
 80185e8:	3718      	adds	r7, #24
 80185ea:	46bd      	mov	sp, r7
 80185ec:	bd80      	pop	{r7, pc}
 80185ee:	bf00      	nop
 80185f0:	0801e008 	.word	0x0801e008
 80185f4:	0801e040 	.word	0x0801e040
 80185f8:	0801e074 	.word	0x0801e074

080185fc <rand>:
 80185fc:	4b16      	ldr	r3, [pc, #88]	; (8018658 <rand+0x5c>)
 80185fe:	b510      	push	{r4, lr}
 8018600:	681c      	ldr	r4, [r3, #0]
 8018602:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8018604:	b9b3      	cbnz	r3, 8018634 <rand+0x38>
 8018606:	2018      	movs	r0, #24
 8018608:	f001 fd5a 	bl	801a0c0 <malloc>
 801860c:	4602      	mov	r2, r0
 801860e:	6320      	str	r0, [r4, #48]	; 0x30
 8018610:	b920      	cbnz	r0, 801861c <rand+0x20>
 8018612:	4b12      	ldr	r3, [pc, #72]	; (801865c <rand+0x60>)
 8018614:	4812      	ldr	r0, [pc, #72]	; (8018660 <rand+0x64>)
 8018616:	2152      	movs	r1, #82	; 0x52
 8018618:	f000 fef4 	bl	8019404 <__assert_func>
 801861c:	4911      	ldr	r1, [pc, #68]	; (8018664 <rand+0x68>)
 801861e:	4b12      	ldr	r3, [pc, #72]	; (8018668 <rand+0x6c>)
 8018620:	e9c0 1300 	strd	r1, r3, [r0]
 8018624:	4b11      	ldr	r3, [pc, #68]	; (801866c <rand+0x70>)
 8018626:	6083      	str	r3, [r0, #8]
 8018628:	230b      	movs	r3, #11
 801862a:	8183      	strh	r3, [r0, #12]
 801862c:	2100      	movs	r1, #0
 801862e:	2001      	movs	r0, #1
 8018630:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8018634:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8018636:	480e      	ldr	r0, [pc, #56]	; (8018670 <rand+0x74>)
 8018638:	690b      	ldr	r3, [r1, #16]
 801863a:	694c      	ldr	r4, [r1, #20]
 801863c:	4a0d      	ldr	r2, [pc, #52]	; (8018674 <rand+0x78>)
 801863e:	4358      	muls	r0, r3
 8018640:	fb02 0004 	mla	r0, r2, r4, r0
 8018644:	fba3 3202 	umull	r3, r2, r3, r2
 8018648:	3301      	adds	r3, #1
 801864a:	eb40 0002 	adc.w	r0, r0, r2
 801864e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8018652:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8018656:	bd10      	pop	{r4, pc}
 8018658:	200000b8 	.word	0x200000b8
 801865c:	0801e1de 	.word	0x0801e1de
 8018660:	0801e1f5 	.word	0x0801e1f5
 8018664:	abcd330e 	.word	0xabcd330e
 8018668:	e66d1234 	.word	0xe66d1234
 801866c:	0005deec 	.word	0x0005deec
 8018670:	5851f42d 	.word	0x5851f42d
 8018674:	4c957f2d 	.word	0x4c957f2d

08018678 <__cvt>:
 8018678:	b5f0      	push	{r4, r5, r6, r7, lr}
 801867a:	ed2d 8b02 	vpush	{d8}
 801867e:	eeb0 8b40 	vmov.f64	d8, d0
 8018682:	b085      	sub	sp, #20
 8018684:	4617      	mov	r7, r2
 8018686:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8018688:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801868a:	ee18 2a90 	vmov	r2, s17
 801868e:	f025 0520 	bic.w	r5, r5, #32
 8018692:	2a00      	cmp	r2, #0
 8018694:	bfb6      	itet	lt
 8018696:	222d      	movlt	r2, #45	; 0x2d
 8018698:	2200      	movge	r2, #0
 801869a:	eeb1 8b40 	vneglt.f64	d8, d0
 801869e:	2d46      	cmp	r5, #70	; 0x46
 80186a0:	460c      	mov	r4, r1
 80186a2:	701a      	strb	r2, [r3, #0]
 80186a4:	d004      	beq.n	80186b0 <__cvt+0x38>
 80186a6:	2d45      	cmp	r5, #69	; 0x45
 80186a8:	d100      	bne.n	80186ac <__cvt+0x34>
 80186aa:	3401      	adds	r4, #1
 80186ac:	2102      	movs	r1, #2
 80186ae:	e000      	b.n	80186b2 <__cvt+0x3a>
 80186b0:	2103      	movs	r1, #3
 80186b2:	ab03      	add	r3, sp, #12
 80186b4:	9301      	str	r3, [sp, #4]
 80186b6:	ab02      	add	r3, sp, #8
 80186b8:	9300      	str	r3, [sp, #0]
 80186ba:	4622      	mov	r2, r4
 80186bc:	4633      	mov	r3, r6
 80186be:	eeb0 0b48 	vmov.f64	d0, d8
 80186c2:	f000 ff45 	bl	8019550 <_dtoa_r>
 80186c6:	2d47      	cmp	r5, #71	; 0x47
 80186c8:	d101      	bne.n	80186ce <__cvt+0x56>
 80186ca:	07fb      	lsls	r3, r7, #31
 80186cc:	d51a      	bpl.n	8018704 <__cvt+0x8c>
 80186ce:	2d46      	cmp	r5, #70	; 0x46
 80186d0:	eb00 0204 	add.w	r2, r0, r4
 80186d4:	d10c      	bne.n	80186f0 <__cvt+0x78>
 80186d6:	7803      	ldrb	r3, [r0, #0]
 80186d8:	2b30      	cmp	r3, #48	; 0x30
 80186da:	d107      	bne.n	80186ec <__cvt+0x74>
 80186dc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80186e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80186e4:	bf1c      	itt	ne
 80186e6:	f1c4 0401 	rsbne	r4, r4, #1
 80186ea:	6034      	strne	r4, [r6, #0]
 80186ec:	6833      	ldr	r3, [r6, #0]
 80186ee:	441a      	add	r2, r3
 80186f0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80186f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80186f8:	bf08      	it	eq
 80186fa:	9203      	streq	r2, [sp, #12]
 80186fc:	2130      	movs	r1, #48	; 0x30
 80186fe:	9b03      	ldr	r3, [sp, #12]
 8018700:	4293      	cmp	r3, r2
 8018702:	d307      	bcc.n	8018714 <__cvt+0x9c>
 8018704:	9b03      	ldr	r3, [sp, #12]
 8018706:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018708:	1a1b      	subs	r3, r3, r0
 801870a:	6013      	str	r3, [r2, #0]
 801870c:	b005      	add	sp, #20
 801870e:	ecbd 8b02 	vpop	{d8}
 8018712:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018714:	1c5c      	adds	r4, r3, #1
 8018716:	9403      	str	r4, [sp, #12]
 8018718:	7019      	strb	r1, [r3, #0]
 801871a:	e7f0      	b.n	80186fe <__cvt+0x86>

0801871c <__exponent>:
 801871c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801871e:	4603      	mov	r3, r0
 8018720:	2900      	cmp	r1, #0
 8018722:	bfb8      	it	lt
 8018724:	4249      	neglt	r1, r1
 8018726:	f803 2b02 	strb.w	r2, [r3], #2
 801872a:	bfb4      	ite	lt
 801872c:	222d      	movlt	r2, #45	; 0x2d
 801872e:	222b      	movge	r2, #43	; 0x2b
 8018730:	2909      	cmp	r1, #9
 8018732:	7042      	strb	r2, [r0, #1]
 8018734:	dd2a      	ble.n	801878c <__exponent+0x70>
 8018736:	f10d 0207 	add.w	r2, sp, #7
 801873a:	4617      	mov	r7, r2
 801873c:	260a      	movs	r6, #10
 801873e:	4694      	mov	ip, r2
 8018740:	fb91 f5f6 	sdiv	r5, r1, r6
 8018744:	fb06 1415 	mls	r4, r6, r5, r1
 8018748:	3430      	adds	r4, #48	; 0x30
 801874a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801874e:	460c      	mov	r4, r1
 8018750:	2c63      	cmp	r4, #99	; 0x63
 8018752:	f102 32ff 	add.w	r2, r2, #4294967295
 8018756:	4629      	mov	r1, r5
 8018758:	dcf1      	bgt.n	801873e <__exponent+0x22>
 801875a:	3130      	adds	r1, #48	; 0x30
 801875c:	f1ac 0402 	sub.w	r4, ip, #2
 8018760:	f802 1c01 	strb.w	r1, [r2, #-1]
 8018764:	1c41      	adds	r1, r0, #1
 8018766:	4622      	mov	r2, r4
 8018768:	42ba      	cmp	r2, r7
 801876a:	d30a      	bcc.n	8018782 <__exponent+0x66>
 801876c:	f10d 0209 	add.w	r2, sp, #9
 8018770:	eba2 020c 	sub.w	r2, r2, ip
 8018774:	42bc      	cmp	r4, r7
 8018776:	bf88      	it	hi
 8018778:	2200      	movhi	r2, #0
 801877a:	4413      	add	r3, r2
 801877c:	1a18      	subs	r0, r3, r0
 801877e:	b003      	add	sp, #12
 8018780:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018782:	f812 5b01 	ldrb.w	r5, [r2], #1
 8018786:	f801 5f01 	strb.w	r5, [r1, #1]!
 801878a:	e7ed      	b.n	8018768 <__exponent+0x4c>
 801878c:	2330      	movs	r3, #48	; 0x30
 801878e:	3130      	adds	r1, #48	; 0x30
 8018790:	7083      	strb	r3, [r0, #2]
 8018792:	70c1      	strb	r1, [r0, #3]
 8018794:	1d03      	adds	r3, r0, #4
 8018796:	e7f1      	b.n	801877c <__exponent+0x60>

08018798 <_printf_float>:
 8018798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801879c:	b08b      	sub	sp, #44	; 0x2c
 801879e:	460c      	mov	r4, r1
 80187a0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80187a4:	4616      	mov	r6, r2
 80187a6:	461f      	mov	r7, r3
 80187a8:	4605      	mov	r5, r0
 80187aa:	f000 fdad 	bl	8019308 <_localeconv_r>
 80187ae:	f8d0 b000 	ldr.w	fp, [r0]
 80187b2:	4658      	mov	r0, fp
 80187b4:	f7e8 fe84 	bl	80014c0 <strlen>
 80187b8:	2300      	movs	r3, #0
 80187ba:	9308      	str	r3, [sp, #32]
 80187bc:	f8d8 3000 	ldr.w	r3, [r8]
 80187c0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80187c4:	6822      	ldr	r2, [r4, #0]
 80187c6:	3307      	adds	r3, #7
 80187c8:	f023 0307 	bic.w	r3, r3, #7
 80187cc:	f103 0108 	add.w	r1, r3, #8
 80187d0:	f8c8 1000 	str.w	r1, [r8]
 80187d4:	ed93 0b00 	vldr	d0, [r3]
 80187d8:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8018a38 <_printf_float+0x2a0>
 80187dc:	eeb0 7bc0 	vabs.f64	d7, d0
 80187e0:	eeb4 7b46 	vcmp.f64	d7, d6
 80187e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187e8:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 80187ec:	4682      	mov	sl, r0
 80187ee:	dd24      	ble.n	801883a <_printf_float+0xa2>
 80187f0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80187f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187f8:	d502      	bpl.n	8018800 <_printf_float+0x68>
 80187fa:	232d      	movs	r3, #45	; 0x2d
 80187fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018800:	498f      	ldr	r1, [pc, #572]	; (8018a40 <_printf_float+0x2a8>)
 8018802:	4b90      	ldr	r3, [pc, #576]	; (8018a44 <_printf_float+0x2ac>)
 8018804:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8018808:	bf94      	ite	ls
 801880a:	4688      	movls	r8, r1
 801880c:	4698      	movhi	r8, r3
 801880e:	2303      	movs	r3, #3
 8018810:	6123      	str	r3, [r4, #16]
 8018812:	f022 0204 	bic.w	r2, r2, #4
 8018816:	2300      	movs	r3, #0
 8018818:	6022      	str	r2, [r4, #0]
 801881a:	9304      	str	r3, [sp, #16]
 801881c:	9700      	str	r7, [sp, #0]
 801881e:	4633      	mov	r3, r6
 8018820:	aa09      	add	r2, sp, #36	; 0x24
 8018822:	4621      	mov	r1, r4
 8018824:	4628      	mov	r0, r5
 8018826:	f000 f9d1 	bl	8018bcc <_printf_common>
 801882a:	3001      	adds	r0, #1
 801882c:	f040 808a 	bne.w	8018944 <_printf_float+0x1ac>
 8018830:	f04f 30ff 	mov.w	r0, #4294967295
 8018834:	b00b      	add	sp, #44	; 0x2c
 8018836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801883a:	eeb4 0b40 	vcmp.f64	d0, d0
 801883e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018842:	d709      	bvc.n	8018858 <_printf_float+0xc0>
 8018844:	ee10 3a90 	vmov	r3, s1
 8018848:	2b00      	cmp	r3, #0
 801884a:	bfbc      	itt	lt
 801884c:	232d      	movlt	r3, #45	; 0x2d
 801884e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8018852:	497d      	ldr	r1, [pc, #500]	; (8018a48 <_printf_float+0x2b0>)
 8018854:	4b7d      	ldr	r3, [pc, #500]	; (8018a4c <_printf_float+0x2b4>)
 8018856:	e7d5      	b.n	8018804 <_printf_float+0x6c>
 8018858:	6863      	ldr	r3, [r4, #4]
 801885a:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801885e:	9104      	str	r1, [sp, #16]
 8018860:	1c59      	adds	r1, r3, #1
 8018862:	d13c      	bne.n	80188de <_printf_float+0x146>
 8018864:	2306      	movs	r3, #6
 8018866:	6063      	str	r3, [r4, #4]
 8018868:	2300      	movs	r3, #0
 801886a:	9303      	str	r3, [sp, #12]
 801886c:	ab08      	add	r3, sp, #32
 801886e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8018872:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8018876:	ab07      	add	r3, sp, #28
 8018878:	6861      	ldr	r1, [r4, #4]
 801887a:	9300      	str	r3, [sp, #0]
 801887c:	6022      	str	r2, [r4, #0]
 801887e:	f10d 031b 	add.w	r3, sp, #27
 8018882:	4628      	mov	r0, r5
 8018884:	f7ff fef8 	bl	8018678 <__cvt>
 8018888:	9b04      	ldr	r3, [sp, #16]
 801888a:	9907      	ldr	r1, [sp, #28]
 801888c:	2b47      	cmp	r3, #71	; 0x47
 801888e:	4680      	mov	r8, r0
 8018890:	d108      	bne.n	80188a4 <_printf_float+0x10c>
 8018892:	1cc8      	adds	r0, r1, #3
 8018894:	db02      	blt.n	801889c <_printf_float+0x104>
 8018896:	6863      	ldr	r3, [r4, #4]
 8018898:	4299      	cmp	r1, r3
 801889a:	dd41      	ble.n	8018920 <_printf_float+0x188>
 801889c:	f1a9 0902 	sub.w	r9, r9, #2
 80188a0:	fa5f f989 	uxtb.w	r9, r9
 80188a4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80188a8:	d820      	bhi.n	80188ec <_printf_float+0x154>
 80188aa:	3901      	subs	r1, #1
 80188ac:	464a      	mov	r2, r9
 80188ae:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80188b2:	9107      	str	r1, [sp, #28]
 80188b4:	f7ff ff32 	bl	801871c <__exponent>
 80188b8:	9a08      	ldr	r2, [sp, #32]
 80188ba:	9004      	str	r0, [sp, #16]
 80188bc:	1813      	adds	r3, r2, r0
 80188be:	2a01      	cmp	r2, #1
 80188c0:	6123      	str	r3, [r4, #16]
 80188c2:	dc02      	bgt.n	80188ca <_printf_float+0x132>
 80188c4:	6822      	ldr	r2, [r4, #0]
 80188c6:	07d2      	lsls	r2, r2, #31
 80188c8:	d501      	bpl.n	80188ce <_printf_float+0x136>
 80188ca:	3301      	adds	r3, #1
 80188cc:	6123      	str	r3, [r4, #16]
 80188ce:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80188d2:	2b00      	cmp	r3, #0
 80188d4:	d0a2      	beq.n	801881c <_printf_float+0x84>
 80188d6:	232d      	movs	r3, #45	; 0x2d
 80188d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80188dc:	e79e      	b.n	801881c <_printf_float+0x84>
 80188de:	9904      	ldr	r1, [sp, #16]
 80188e0:	2947      	cmp	r1, #71	; 0x47
 80188e2:	d1c1      	bne.n	8018868 <_printf_float+0xd0>
 80188e4:	2b00      	cmp	r3, #0
 80188e6:	d1bf      	bne.n	8018868 <_printf_float+0xd0>
 80188e8:	2301      	movs	r3, #1
 80188ea:	e7bc      	b.n	8018866 <_printf_float+0xce>
 80188ec:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80188f0:	d118      	bne.n	8018924 <_printf_float+0x18c>
 80188f2:	2900      	cmp	r1, #0
 80188f4:	6863      	ldr	r3, [r4, #4]
 80188f6:	dd0b      	ble.n	8018910 <_printf_float+0x178>
 80188f8:	6121      	str	r1, [r4, #16]
 80188fa:	b913      	cbnz	r3, 8018902 <_printf_float+0x16a>
 80188fc:	6822      	ldr	r2, [r4, #0]
 80188fe:	07d0      	lsls	r0, r2, #31
 8018900:	d502      	bpl.n	8018908 <_printf_float+0x170>
 8018902:	3301      	adds	r3, #1
 8018904:	440b      	add	r3, r1
 8018906:	6123      	str	r3, [r4, #16]
 8018908:	2300      	movs	r3, #0
 801890a:	65a1      	str	r1, [r4, #88]	; 0x58
 801890c:	9304      	str	r3, [sp, #16]
 801890e:	e7de      	b.n	80188ce <_printf_float+0x136>
 8018910:	b913      	cbnz	r3, 8018918 <_printf_float+0x180>
 8018912:	6822      	ldr	r2, [r4, #0]
 8018914:	07d2      	lsls	r2, r2, #31
 8018916:	d501      	bpl.n	801891c <_printf_float+0x184>
 8018918:	3302      	adds	r3, #2
 801891a:	e7f4      	b.n	8018906 <_printf_float+0x16e>
 801891c:	2301      	movs	r3, #1
 801891e:	e7f2      	b.n	8018906 <_printf_float+0x16e>
 8018920:	f04f 0967 	mov.w	r9, #103	; 0x67
 8018924:	9b08      	ldr	r3, [sp, #32]
 8018926:	4299      	cmp	r1, r3
 8018928:	db05      	blt.n	8018936 <_printf_float+0x19e>
 801892a:	6823      	ldr	r3, [r4, #0]
 801892c:	6121      	str	r1, [r4, #16]
 801892e:	07d8      	lsls	r0, r3, #31
 8018930:	d5ea      	bpl.n	8018908 <_printf_float+0x170>
 8018932:	1c4b      	adds	r3, r1, #1
 8018934:	e7e7      	b.n	8018906 <_printf_float+0x16e>
 8018936:	2900      	cmp	r1, #0
 8018938:	bfd4      	ite	le
 801893a:	f1c1 0202 	rsble	r2, r1, #2
 801893e:	2201      	movgt	r2, #1
 8018940:	4413      	add	r3, r2
 8018942:	e7e0      	b.n	8018906 <_printf_float+0x16e>
 8018944:	6823      	ldr	r3, [r4, #0]
 8018946:	055a      	lsls	r2, r3, #21
 8018948:	d407      	bmi.n	801895a <_printf_float+0x1c2>
 801894a:	6923      	ldr	r3, [r4, #16]
 801894c:	4642      	mov	r2, r8
 801894e:	4631      	mov	r1, r6
 8018950:	4628      	mov	r0, r5
 8018952:	47b8      	blx	r7
 8018954:	3001      	adds	r0, #1
 8018956:	d12a      	bne.n	80189ae <_printf_float+0x216>
 8018958:	e76a      	b.n	8018830 <_printf_float+0x98>
 801895a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801895e:	f240 80e0 	bls.w	8018b22 <_printf_float+0x38a>
 8018962:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8018966:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801896a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801896e:	d133      	bne.n	80189d8 <_printf_float+0x240>
 8018970:	4a37      	ldr	r2, [pc, #220]	; (8018a50 <_printf_float+0x2b8>)
 8018972:	2301      	movs	r3, #1
 8018974:	4631      	mov	r1, r6
 8018976:	4628      	mov	r0, r5
 8018978:	47b8      	blx	r7
 801897a:	3001      	adds	r0, #1
 801897c:	f43f af58 	beq.w	8018830 <_printf_float+0x98>
 8018980:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8018984:	429a      	cmp	r2, r3
 8018986:	db02      	blt.n	801898e <_printf_float+0x1f6>
 8018988:	6823      	ldr	r3, [r4, #0]
 801898a:	07d8      	lsls	r0, r3, #31
 801898c:	d50f      	bpl.n	80189ae <_printf_float+0x216>
 801898e:	4653      	mov	r3, sl
 8018990:	465a      	mov	r2, fp
 8018992:	4631      	mov	r1, r6
 8018994:	4628      	mov	r0, r5
 8018996:	47b8      	blx	r7
 8018998:	3001      	adds	r0, #1
 801899a:	f43f af49 	beq.w	8018830 <_printf_float+0x98>
 801899e:	f04f 0800 	mov.w	r8, #0
 80189a2:	f104 091a 	add.w	r9, r4, #26
 80189a6:	9b08      	ldr	r3, [sp, #32]
 80189a8:	3b01      	subs	r3, #1
 80189aa:	4543      	cmp	r3, r8
 80189ac:	dc09      	bgt.n	80189c2 <_printf_float+0x22a>
 80189ae:	6823      	ldr	r3, [r4, #0]
 80189b0:	079b      	lsls	r3, r3, #30
 80189b2:	f100 8106 	bmi.w	8018bc2 <_printf_float+0x42a>
 80189b6:	68e0      	ldr	r0, [r4, #12]
 80189b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80189ba:	4298      	cmp	r0, r3
 80189bc:	bfb8      	it	lt
 80189be:	4618      	movlt	r0, r3
 80189c0:	e738      	b.n	8018834 <_printf_float+0x9c>
 80189c2:	2301      	movs	r3, #1
 80189c4:	464a      	mov	r2, r9
 80189c6:	4631      	mov	r1, r6
 80189c8:	4628      	mov	r0, r5
 80189ca:	47b8      	blx	r7
 80189cc:	3001      	adds	r0, #1
 80189ce:	f43f af2f 	beq.w	8018830 <_printf_float+0x98>
 80189d2:	f108 0801 	add.w	r8, r8, #1
 80189d6:	e7e6      	b.n	80189a6 <_printf_float+0x20e>
 80189d8:	9b07      	ldr	r3, [sp, #28]
 80189da:	2b00      	cmp	r3, #0
 80189dc:	dc3a      	bgt.n	8018a54 <_printf_float+0x2bc>
 80189de:	4a1c      	ldr	r2, [pc, #112]	; (8018a50 <_printf_float+0x2b8>)
 80189e0:	2301      	movs	r3, #1
 80189e2:	4631      	mov	r1, r6
 80189e4:	4628      	mov	r0, r5
 80189e6:	47b8      	blx	r7
 80189e8:	3001      	adds	r0, #1
 80189ea:	f43f af21 	beq.w	8018830 <_printf_float+0x98>
 80189ee:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80189f2:	4313      	orrs	r3, r2
 80189f4:	d102      	bne.n	80189fc <_printf_float+0x264>
 80189f6:	6823      	ldr	r3, [r4, #0]
 80189f8:	07d9      	lsls	r1, r3, #31
 80189fa:	d5d8      	bpl.n	80189ae <_printf_float+0x216>
 80189fc:	4653      	mov	r3, sl
 80189fe:	465a      	mov	r2, fp
 8018a00:	4631      	mov	r1, r6
 8018a02:	4628      	mov	r0, r5
 8018a04:	47b8      	blx	r7
 8018a06:	3001      	adds	r0, #1
 8018a08:	f43f af12 	beq.w	8018830 <_printf_float+0x98>
 8018a0c:	f04f 0900 	mov.w	r9, #0
 8018a10:	f104 0a1a 	add.w	sl, r4, #26
 8018a14:	9b07      	ldr	r3, [sp, #28]
 8018a16:	425b      	negs	r3, r3
 8018a18:	454b      	cmp	r3, r9
 8018a1a:	dc01      	bgt.n	8018a20 <_printf_float+0x288>
 8018a1c:	9b08      	ldr	r3, [sp, #32]
 8018a1e:	e795      	b.n	801894c <_printf_float+0x1b4>
 8018a20:	2301      	movs	r3, #1
 8018a22:	4652      	mov	r2, sl
 8018a24:	4631      	mov	r1, r6
 8018a26:	4628      	mov	r0, r5
 8018a28:	47b8      	blx	r7
 8018a2a:	3001      	adds	r0, #1
 8018a2c:	f43f af00 	beq.w	8018830 <_printf_float+0x98>
 8018a30:	f109 0901 	add.w	r9, r9, #1
 8018a34:	e7ee      	b.n	8018a14 <_printf_float+0x27c>
 8018a36:	bf00      	nop
 8018a38:	ffffffff 	.word	0xffffffff
 8018a3c:	7fefffff 	.word	0x7fefffff
 8018a40:	0801e34e 	.word	0x0801e34e
 8018a44:	0801e352 	.word	0x0801e352
 8018a48:	0801e356 	.word	0x0801e356
 8018a4c:	0801e35a 	.word	0x0801e35a
 8018a50:	0801e35e 	.word	0x0801e35e
 8018a54:	9a08      	ldr	r2, [sp, #32]
 8018a56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8018a58:	429a      	cmp	r2, r3
 8018a5a:	bfa8      	it	ge
 8018a5c:	461a      	movge	r2, r3
 8018a5e:	2a00      	cmp	r2, #0
 8018a60:	4691      	mov	r9, r2
 8018a62:	dc38      	bgt.n	8018ad6 <_printf_float+0x33e>
 8018a64:	2300      	movs	r3, #0
 8018a66:	9305      	str	r3, [sp, #20]
 8018a68:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8018a6c:	f104 021a 	add.w	r2, r4, #26
 8018a70:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8018a72:	9905      	ldr	r1, [sp, #20]
 8018a74:	9304      	str	r3, [sp, #16]
 8018a76:	eba3 0309 	sub.w	r3, r3, r9
 8018a7a:	428b      	cmp	r3, r1
 8018a7c:	dc33      	bgt.n	8018ae6 <_printf_float+0x34e>
 8018a7e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8018a82:	429a      	cmp	r2, r3
 8018a84:	db3c      	blt.n	8018b00 <_printf_float+0x368>
 8018a86:	6823      	ldr	r3, [r4, #0]
 8018a88:	07da      	lsls	r2, r3, #31
 8018a8a:	d439      	bmi.n	8018b00 <_printf_float+0x368>
 8018a8c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8018a90:	eba2 0903 	sub.w	r9, r2, r3
 8018a94:	9b04      	ldr	r3, [sp, #16]
 8018a96:	1ad2      	subs	r2, r2, r3
 8018a98:	4591      	cmp	r9, r2
 8018a9a:	bfa8      	it	ge
 8018a9c:	4691      	movge	r9, r2
 8018a9e:	f1b9 0f00 	cmp.w	r9, #0
 8018aa2:	dc35      	bgt.n	8018b10 <_printf_float+0x378>
 8018aa4:	f04f 0800 	mov.w	r8, #0
 8018aa8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8018aac:	f104 0a1a 	add.w	sl, r4, #26
 8018ab0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8018ab4:	1a9b      	subs	r3, r3, r2
 8018ab6:	eba3 0309 	sub.w	r3, r3, r9
 8018aba:	4543      	cmp	r3, r8
 8018abc:	f77f af77 	ble.w	80189ae <_printf_float+0x216>
 8018ac0:	2301      	movs	r3, #1
 8018ac2:	4652      	mov	r2, sl
 8018ac4:	4631      	mov	r1, r6
 8018ac6:	4628      	mov	r0, r5
 8018ac8:	47b8      	blx	r7
 8018aca:	3001      	adds	r0, #1
 8018acc:	f43f aeb0 	beq.w	8018830 <_printf_float+0x98>
 8018ad0:	f108 0801 	add.w	r8, r8, #1
 8018ad4:	e7ec      	b.n	8018ab0 <_printf_float+0x318>
 8018ad6:	4613      	mov	r3, r2
 8018ad8:	4631      	mov	r1, r6
 8018ada:	4642      	mov	r2, r8
 8018adc:	4628      	mov	r0, r5
 8018ade:	47b8      	blx	r7
 8018ae0:	3001      	adds	r0, #1
 8018ae2:	d1bf      	bne.n	8018a64 <_printf_float+0x2cc>
 8018ae4:	e6a4      	b.n	8018830 <_printf_float+0x98>
 8018ae6:	2301      	movs	r3, #1
 8018ae8:	4631      	mov	r1, r6
 8018aea:	4628      	mov	r0, r5
 8018aec:	9204      	str	r2, [sp, #16]
 8018aee:	47b8      	blx	r7
 8018af0:	3001      	adds	r0, #1
 8018af2:	f43f ae9d 	beq.w	8018830 <_printf_float+0x98>
 8018af6:	9b05      	ldr	r3, [sp, #20]
 8018af8:	9a04      	ldr	r2, [sp, #16]
 8018afa:	3301      	adds	r3, #1
 8018afc:	9305      	str	r3, [sp, #20]
 8018afe:	e7b7      	b.n	8018a70 <_printf_float+0x2d8>
 8018b00:	4653      	mov	r3, sl
 8018b02:	465a      	mov	r2, fp
 8018b04:	4631      	mov	r1, r6
 8018b06:	4628      	mov	r0, r5
 8018b08:	47b8      	blx	r7
 8018b0a:	3001      	adds	r0, #1
 8018b0c:	d1be      	bne.n	8018a8c <_printf_float+0x2f4>
 8018b0e:	e68f      	b.n	8018830 <_printf_float+0x98>
 8018b10:	9a04      	ldr	r2, [sp, #16]
 8018b12:	464b      	mov	r3, r9
 8018b14:	4442      	add	r2, r8
 8018b16:	4631      	mov	r1, r6
 8018b18:	4628      	mov	r0, r5
 8018b1a:	47b8      	blx	r7
 8018b1c:	3001      	adds	r0, #1
 8018b1e:	d1c1      	bne.n	8018aa4 <_printf_float+0x30c>
 8018b20:	e686      	b.n	8018830 <_printf_float+0x98>
 8018b22:	9a08      	ldr	r2, [sp, #32]
 8018b24:	2a01      	cmp	r2, #1
 8018b26:	dc01      	bgt.n	8018b2c <_printf_float+0x394>
 8018b28:	07db      	lsls	r3, r3, #31
 8018b2a:	d537      	bpl.n	8018b9c <_printf_float+0x404>
 8018b2c:	2301      	movs	r3, #1
 8018b2e:	4642      	mov	r2, r8
 8018b30:	4631      	mov	r1, r6
 8018b32:	4628      	mov	r0, r5
 8018b34:	47b8      	blx	r7
 8018b36:	3001      	adds	r0, #1
 8018b38:	f43f ae7a 	beq.w	8018830 <_printf_float+0x98>
 8018b3c:	4653      	mov	r3, sl
 8018b3e:	465a      	mov	r2, fp
 8018b40:	4631      	mov	r1, r6
 8018b42:	4628      	mov	r0, r5
 8018b44:	47b8      	blx	r7
 8018b46:	3001      	adds	r0, #1
 8018b48:	f43f ae72 	beq.w	8018830 <_printf_float+0x98>
 8018b4c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8018b50:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8018b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b58:	9b08      	ldr	r3, [sp, #32]
 8018b5a:	d01a      	beq.n	8018b92 <_printf_float+0x3fa>
 8018b5c:	3b01      	subs	r3, #1
 8018b5e:	f108 0201 	add.w	r2, r8, #1
 8018b62:	4631      	mov	r1, r6
 8018b64:	4628      	mov	r0, r5
 8018b66:	47b8      	blx	r7
 8018b68:	3001      	adds	r0, #1
 8018b6a:	d10e      	bne.n	8018b8a <_printf_float+0x3f2>
 8018b6c:	e660      	b.n	8018830 <_printf_float+0x98>
 8018b6e:	2301      	movs	r3, #1
 8018b70:	464a      	mov	r2, r9
 8018b72:	4631      	mov	r1, r6
 8018b74:	4628      	mov	r0, r5
 8018b76:	47b8      	blx	r7
 8018b78:	3001      	adds	r0, #1
 8018b7a:	f43f ae59 	beq.w	8018830 <_printf_float+0x98>
 8018b7e:	f108 0801 	add.w	r8, r8, #1
 8018b82:	9b08      	ldr	r3, [sp, #32]
 8018b84:	3b01      	subs	r3, #1
 8018b86:	4543      	cmp	r3, r8
 8018b88:	dcf1      	bgt.n	8018b6e <_printf_float+0x3d6>
 8018b8a:	9b04      	ldr	r3, [sp, #16]
 8018b8c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8018b90:	e6dd      	b.n	801894e <_printf_float+0x1b6>
 8018b92:	f04f 0800 	mov.w	r8, #0
 8018b96:	f104 091a 	add.w	r9, r4, #26
 8018b9a:	e7f2      	b.n	8018b82 <_printf_float+0x3ea>
 8018b9c:	2301      	movs	r3, #1
 8018b9e:	4642      	mov	r2, r8
 8018ba0:	e7df      	b.n	8018b62 <_printf_float+0x3ca>
 8018ba2:	2301      	movs	r3, #1
 8018ba4:	464a      	mov	r2, r9
 8018ba6:	4631      	mov	r1, r6
 8018ba8:	4628      	mov	r0, r5
 8018baa:	47b8      	blx	r7
 8018bac:	3001      	adds	r0, #1
 8018bae:	f43f ae3f 	beq.w	8018830 <_printf_float+0x98>
 8018bb2:	f108 0801 	add.w	r8, r8, #1
 8018bb6:	68e3      	ldr	r3, [r4, #12]
 8018bb8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018bba:	1a5b      	subs	r3, r3, r1
 8018bbc:	4543      	cmp	r3, r8
 8018bbe:	dcf0      	bgt.n	8018ba2 <_printf_float+0x40a>
 8018bc0:	e6f9      	b.n	80189b6 <_printf_float+0x21e>
 8018bc2:	f04f 0800 	mov.w	r8, #0
 8018bc6:	f104 0919 	add.w	r9, r4, #25
 8018bca:	e7f4      	b.n	8018bb6 <_printf_float+0x41e>

08018bcc <_printf_common>:
 8018bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018bd0:	4616      	mov	r6, r2
 8018bd2:	4699      	mov	r9, r3
 8018bd4:	688a      	ldr	r2, [r1, #8]
 8018bd6:	690b      	ldr	r3, [r1, #16]
 8018bd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018bdc:	4293      	cmp	r3, r2
 8018bde:	bfb8      	it	lt
 8018be0:	4613      	movlt	r3, r2
 8018be2:	6033      	str	r3, [r6, #0]
 8018be4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018be8:	4607      	mov	r7, r0
 8018bea:	460c      	mov	r4, r1
 8018bec:	b10a      	cbz	r2, 8018bf2 <_printf_common+0x26>
 8018bee:	3301      	adds	r3, #1
 8018bf0:	6033      	str	r3, [r6, #0]
 8018bf2:	6823      	ldr	r3, [r4, #0]
 8018bf4:	0699      	lsls	r1, r3, #26
 8018bf6:	bf42      	ittt	mi
 8018bf8:	6833      	ldrmi	r3, [r6, #0]
 8018bfa:	3302      	addmi	r3, #2
 8018bfc:	6033      	strmi	r3, [r6, #0]
 8018bfe:	6825      	ldr	r5, [r4, #0]
 8018c00:	f015 0506 	ands.w	r5, r5, #6
 8018c04:	d106      	bne.n	8018c14 <_printf_common+0x48>
 8018c06:	f104 0a19 	add.w	sl, r4, #25
 8018c0a:	68e3      	ldr	r3, [r4, #12]
 8018c0c:	6832      	ldr	r2, [r6, #0]
 8018c0e:	1a9b      	subs	r3, r3, r2
 8018c10:	42ab      	cmp	r3, r5
 8018c12:	dc26      	bgt.n	8018c62 <_printf_common+0x96>
 8018c14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8018c18:	1e13      	subs	r3, r2, #0
 8018c1a:	6822      	ldr	r2, [r4, #0]
 8018c1c:	bf18      	it	ne
 8018c1e:	2301      	movne	r3, #1
 8018c20:	0692      	lsls	r2, r2, #26
 8018c22:	d42b      	bmi.n	8018c7c <_printf_common+0xb0>
 8018c24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018c28:	4649      	mov	r1, r9
 8018c2a:	4638      	mov	r0, r7
 8018c2c:	47c0      	blx	r8
 8018c2e:	3001      	adds	r0, #1
 8018c30:	d01e      	beq.n	8018c70 <_printf_common+0xa4>
 8018c32:	6823      	ldr	r3, [r4, #0]
 8018c34:	6922      	ldr	r2, [r4, #16]
 8018c36:	f003 0306 	and.w	r3, r3, #6
 8018c3a:	2b04      	cmp	r3, #4
 8018c3c:	bf02      	ittt	eq
 8018c3e:	68e5      	ldreq	r5, [r4, #12]
 8018c40:	6833      	ldreq	r3, [r6, #0]
 8018c42:	1aed      	subeq	r5, r5, r3
 8018c44:	68a3      	ldr	r3, [r4, #8]
 8018c46:	bf0c      	ite	eq
 8018c48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018c4c:	2500      	movne	r5, #0
 8018c4e:	4293      	cmp	r3, r2
 8018c50:	bfc4      	itt	gt
 8018c52:	1a9b      	subgt	r3, r3, r2
 8018c54:	18ed      	addgt	r5, r5, r3
 8018c56:	2600      	movs	r6, #0
 8018c58:	341a      	adds	r4, #26
 8018c5a:	42b5      	cmp	r5, r6
 8018c5c:	d11a      	bne.n	8018c94 <_printf_common+0xc8>
 8018c5e:	2000      	movs	r0, #0
 8018c60:	e008      	b.n	8018c74 <_printf_common+0xa8>
 8018c62:	2301      	movs	r3, #1
 8018c64:	4652      	mov	r2, sl
 8018c66:	4649      	mov	r1, r9
 8018c68:	4638      	mov	r0, r7
 8018c6a:	47c0      	blx	r8
 8018c6c:	3001      	adds	r0, #1
 8018c6e:	d103      	bne.n	8018c78 <_printf_common+0xac>
 8018c70:	f04f 30ff 	mov.w	r0, #4294967295
 8018c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018c78:	3501      	adds	r5, #1
 8018c7a:	e7c6      	b.n	8018c0a <_printf_common+0x3e>
 8018c7c:	18e1      	adds	r1, r4, r3
 8018c7e:	1c5a      	adds	r2, r3, #1
 8018c80:	2030      	movs	r0, #48	; 0x30
 8018c82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8018c86:	4422      	add	r2, r4
 8018c88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018c8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018c90:	3302      	adds	r3, #2
 8018c92:	e7c7      	b.n	8018c24 <_printf_common+0x58>
 8018c94:	2301      	movs	r3, #1
 8018c96:	4622      	mov	r2, r4
 8018c98:	4649      	mov	r1, r9
 8018c9a:	4638      	mov	r0, r7
 8018c9c:	47c0      	blx	r8
 8018c9e:	3001      	adds	r0, #1
 8018ca0:	d0e6      	beq.n	8018c70 <_printf_common+0xa4>
 8018ca2:	3601      	adds	r6, #1
 8018ca4:	e7d9      	b.n	8018c5a <_printf_common+0x8e>
	...

08018ca8 <_printf_i>:
 8018ca8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018cac:	7e0f      	ldrb	r7, [r1, #24]
 8018cae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018cb0:	2f78      	cmp	r7, #120	; 0x78
 8018cb2:	4691      	mov	r9, r2
 8018cb4:	4680      	mov	r8, r0
 8018cb6:	460c      	mov	r4, r1
 8018cb8:	469a      	mov	sl, r3
 8018cba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8018cbe:	d807      	bhi.n	8018cd0 <_printf_i+0x28>
 8018cc0:	2f62      	cmp	r7, #98	; 0x62
 8018cc2:	d80a      	bhi.n	8018cda <_printf_i+0x32>
 8018cc4:	2f00      	cmp	r7, #0
 8018cc6:	f000 80d4 	beq.w	8018e72 <_printf_i+0x1ca>
 8018cca:	2f58      	cmp	r7, #88	; 0x58
 8018ccc:	f000 80c0 	beq.w	8018e50 <_printf_i+0x1a8>
 8018cd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018cd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8018cd8:	e03a      	b.n	8018d50 <_printf_i+0xa8>
 8018cda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8018cde:	2b15      	cmp	r3, #21
 8018ce0:	d8f6      	bhi.n	8018cd0 <_printf_i+0x28>
 8018ce2:	a101      	add	r1, pc, #4	; (adr r1, 8018ce8 <_printf_i+0x40>)
 8018ce4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018ce8:	08018d41 	.word	0x08018d41
 8018cec:	08018d55 	.word	0x08018d55
 8018cf0:	08018cd1 	.word	0x08018cd1
 8018cf4:	08018cd1 	.word	0x08018cd1
 8018cf8:	08018cd1 	.word	0x08018cd1
 8018cfc:	08018cd1 	.word	0x08018cd1
 8018d00:	08018d55 	.word	0x08018d55
 8018d04:	08018cd1 	.word	0x08018cd1
 8018d08:	08018cd1 	.word	0x08018cd1
 8018d0c:	08018cd1 	.word	0x08018cd1
 8018d10:	08018cd1 	.word	0x08018cd1
 8018d14:	08018e59 	.word	0x08018e59
 8018d18:	08018d81 	.word	0x08018d81
 8018d1c:	08018e13 	.word	0x08018e13
 8018d20:	08018cd1 	.word	0x08018cd1
 8018d24:	08018cd1 	.word	0x08018cd1
 8018d28:	08018e7b 	.word	0x08018e7b
 8018d2c:	08018cd1 	.word	0x08018cd1
 8018d30:	08018d81 	.word	0x08018d81
 8018d34:	08018cd1 	.word	0x08018cd1
 8018d38:	08018cd1 	.word	0x08018cd1
 8018d3c:	08018e1b 	.word	0x08018e1b
 8018d40:	682b      	ldr	r3, [r5, #0]
 8018d42:	1d1a      	adds	r2, r3, #4
 8018d44:	681b      	ldr	r3, [r3, #0]
 8018d46:	602a      	str	r2, [r5, #0]
 8018d48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018d4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018d50:	2301      	movs	r3, #1
 8018d52:	e09f      	b.n	8018e94 <_printf_i+0x1ec>
 8018d54:	6820      	ldr	r0, [r4, #0]
 8018d56:	682b      	ldr	r3, [r5, #0]
 8018d58:	0607      	lsls	r7, r0, #24
 8018d5a:	f103 0104 	add.w	r1, r3, #4
 8018d5e:	6029      	str	r1, [r5, #0]
 8018d60:	d501      	bpl.n	8018d66 <_printf_i+0xbe>
 8018d62:	681e      	ldr	r6, [r3, #0]
 8018d64:	e003      	b.n	8018d6e <_printf_i+0xc6>
 8018d66:	0646      	lsls	r6, r0, #25
 8018d68:	d5fb      	bpl.n	8018d62 <_printf_i+0xba>
 8018d6a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8018d6e:	2e00      	cmp	r6, #0
 8018d70:	da03      	bge.n	8018d7a <_printf_i+0xd2>
 8018d72:	232d      	movs	r3, #45	; 0x2d
 8018d74:	4276      	negs	r6, r6
 8018d76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018d7a:	485a      	ldr	r0, [pc, #360]	; (8018ee4 <_printf_i+0x23c>)
 8018d7c:	230a      	movs	r3, #10
 8018d7e:	e012      	b.n	8018da6 <_printf_i+0xfe>
 8018d80:	682b      	ldr	r3, [r5, #0]
 8018d82:	6820      	ldr	r0, [r4, #0]
 8018d84:	1d19      	adds	r1, r3, #4
 8018d86:	6029      	str	r1, [r5, #0]
 8018d88:	0605      	lsls	r5, r0, #24
 8018d8a:	d501      	bpl.n	8018d90 <_printf_i+0xe8>
 8018d8c:	681e      	ldr	r6, [r3, #0]
 8018d8e:	e002      	b.n	8018d96 <_printf_i+0xee>
 8018d90:	0641      	lsls	r1, r0, #25
 8018d92:	d5fb      	bpl.n	8018d8c <_printf_i+0xe4>
 8018d94:	881e      	ldrh	r6, [r3, #0]
 8018d96:	4853      	ldr	r0, [pc, #332]	; (8018ee4 <_printf_i+0x23c>)
 8018d98:	2f6f      	cmp	r7, #111	; 0x6f
 8018d9a:	bf0c      	ite	eq
 8018d9c:	2308      	moveq	r3, #8
 8018d9e:	230a      	movne	r3, #10
 8018da0:	2100      	movs	r1, #0
 8018da2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018da6:	6865      	ldr	r5, [r4, #4]
 8018da8:	60a5      	str	r5, [r4, #8]
 8018daa:	2d00      	cmp	r5, #0
 8018dac:	bfa2      	ittt	ge
 8018dae:	6821      	ldrge	r1, [r4, #0]
 8018db0:	f021 0104 	bicge.w	r1, r1, #4
 8018db4:	6021      	strge	r1, [r4, #0]
 8018db6:	b90e      	cbnz	r6, 8018dbc <_printf_i+0x114>
 8018db8:	2d00      	cmp	r5, #0
 8018dba:	d04b      	beq.n	8018e54 <_printf_i+0x1ac>
 8018dbc:	4615      	mov	r5, r2
 8018dbe:	fbb6 f1f3 	udiv	r1, r6, r3
 8018dc2:	fb03 6711 	mls	r7, r3, r1, r6
 8018dc6:	5dc7      	ldrb	r7, [r0, r7]
 8018dc8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8018dcc:	4637      	mov	r7, r6
 8018dce:	42bb      	cmp	r3, r7
 8018dd0:	460e      	mov	r6, r1
 8018dd2:	d9f4      	bls.n	8018dbe <_printf_i+0x116>
 8018dd4:	2b08      	cmp	r3, #8
 8018dd6:	d10b      	bne.n	8018df0 <_printf_i+0x148>
 8018dd8:	6823      	ldr	r3, [r4, #0]
 8018dda:	07de      	lsls	r6, r3, #31
 8018ddc:	d508      	bpl.n	8018df0 <_printf_i+0x148>
 8018dde:	6923      	ldr	r3, [r4, #16]
 8018de0:	6861      	ldr	r1, [r4, #4]
 8018de2:	4299      	cmp	r1, r3
 8018de4:	bfde      	ittt	le
 8018de6:	2330      	movle	r3, #48	; 0x30
 8018de8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018dec:	f105 35ff 	addle.w	r5, r5, #4294967295
 8018df0:	1b52      	subs	r2, r2, r5
 8018df2:	6122      	str	r2, [r4, #16]
 8018df4:	f8cd a000 	str.w	sl, [sp]
 8018df8:	464b      	mov	r3, r9
 8018dfa:	aa03      	add	r2, sp, #12
 8018dfc:	4621      	mov	r1, r4
 8018dfe:	4640      	mov	r0, r8
 8018e00:	f7ff fee4 	bl	8018bcc <_printf_common>
 8018e04:	3001      	adds	r0, #1
 8018e06:	d14a      	bne.n	8018e9e <_printf_i+0x1f6>
 8018e08:	f04f 30ff 	mov.w	r0, #4294967295
 8018e0c:	b004      	add	sp, #16
 8018e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018e12:	6823      	ldr	r3, [r4, #0]
 8018e14:	f043 0320 	orr.w	r3, r3, #32
 8018e18:	6023      	str	r3, [r4, #0]
 8018e1a:	4833      	ldr	r0, [pc, #204]	; (8018ee8 <_printf_i+0x240>)
 8018e1c:	2778      	movs	r7, #120	; 0x78
 8018e1e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8018e22:	6823      	ldr	r3, [r4, #0]
 8018e24:	6829      	ldr	r1, [r5, #0]
 8018e26:	061f      	lsls	r7, r3, #24
 8018e28:	f851 6b04 	ldr.w	r6, [r1], #4
 8018e2c:	d402      	bmi.n	8018e34 <_printf_i+0x18c>
 8018e2e:	065f      	lsls	r7, r3, #25
 8018e30:	bf48      	it	mi
 8018e32:	b2b6      	uxthmi	r6, r6
 8018e34:	07df      	lsls	r7, r3, #31
 8018e36:	bf48      	it	mi
 8018e38:	f043 0320 	orrmi.w	r3, r3, #32
 8018e3c:	6029      	str	r1, [r5, #0]
 8018e3e:	bf48      	it	mi
 8018e40:	6023      	strmi	r3, [r4, #0]
 8018e42:	b91e      	cbnz	r6, 8018e4c <_printf_i+0x1a4>
 8018e44:	6823      	ldr	r3, [r4, #0]
 8018e46:	f023 0320 	bic.w	r3, r3, #32
 8018e4a:	6023      	str	r3, [r4, #0]
 8018e4c:	2310      	movs	r3, #16
 8018e4e:	e7a7      	b.n	8018da0 <_printf_i+0xf8>
 8018e50:	4824      	ldr	r0, [pc, #144]	; (8018ee4 <_printf_i+0x23c>)
 8018e52:	e7e4      	b.n	8018e1e <_printf_i+0x176>
 8018e54:	4615      	mov	r5, r2
 8018e56:	e7bd      	b.n	8018dd4 <_printf_i+0x12c>
 8018e58:	682b      	ldr	r3, [r5, #0]
 8018e5a:	6826      	ldr	r6, [r4, #0]
 8018e5c:	6961      	ldr	r1, [r4, #20]
 8018e5e:	1d18      	adds	r0, r3, #4
 8018e60:	6028      	str	r0, [r5, #0]
 8018e62:	0635      	lsls	r5, r6, #24
 8018e64:	681b      	ldr	r3, [r3, #0]
 8018e66:	d501      	bpl.n	8018e6c <_printf_i+0x1c4>
 8018e68:	6019      	str	r1, [r3, #0]
 8018e6a:	e002      	b.n	8018e72 <_printf_i+0x1ca>
 8018e6c:	0670      	lsls	r0, r6, #25
 8018e6e:	d5fb      	bpl.n	8018e68 <_printf_i+0x1c0>
 8018e70:	8019      	strh	r1, [r3, #0]
 8018e72:	2300      	movs	r3, #0
 8018e74:	6123      	str	r3, [r4, #16]
 8018e76:	4615      	mov	r5, r2
 8018e78:	e7bc      	b.n	8018df4 <_printf_i+0x14c>
 8018e7a:	682b      	ldr	r3, [r5, #0]
 8018e7c:	1d1a      	adds	r2, r3, #4
 8018e7e:	602a      	str	r2, [r5, #0]
 8018e80:	681d      	ldr	r5, [r3, #0]
 8018e82:	6862      	ldr	r2, [r4, #4]
 8018e84:	2100      	movs	r1, #0
 8018e86:	4628      	mov	r0, r5
 8018e88:	f7e8 faca 	bl	8001420 <memchr>
 8018e8c:	b108      	cbz	r0, 8018e92 <_printf_i+0x1ea>
 8018e8e:	1b40      	subs	r0, r0, r5
 8018e90:	6060      	str	r0, [r4, #4]
 8018e92:	6863      	ldr	r3, [r4, #4]
 8018e94:	6123      	str	r3, [r4, #16]
 8018e96:	2300      	movs	r3, #0
 8018e98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018e9c:	e7aa      	b.n	8018df4 <_printf_i+0x14c>
 8018e9e:	6923      	ldr	r3, [r4, #16]
 8018ea0:	462a      	mov	r2, r5
 8018ea2:	4649      	mov	r1, r9
 8018ea4:	4640      	mov	r0, r8
 8018ea6:	47d0      	blx	sl
 8018ea8:	3001      	adds	r0, #1
 8018eaa:	d0ad      	beq.n	8018e08 <_printf_i+0x160>
 8018eac:	6823      	ldr	r3, [r4, #0]
 8018eae:	079b      	lsls	r3, r3, #30
 8018eb0:	d413      	bmi.n	8018eda <_printf_i+0x232>
 8018eb2:	68e0      	ldr	r0, [r4, #12]
 8018eb4:	9b03      	ldr	r3, [sp, #12]
 8018eb6:	4298      	cmp	r0, r3
 8018eb8:	bfb8      	it	lt
 8018eba:	4618      	movlt	r0, r3
 8018ebc:	e7a6      	b.n	8018e0c <_printf_i+0x164>
 8018ebe:	2301      	movs	r3, #1
 8018ec0:	4632      	mov	r2, r6
 8018ec2:	4649      	mov	r1, r9
 8018ec4:	4640      	mov	r0, r8
 8018ec6:	47d0      	blx	sl
 8018ec8:	3001      	adds	r0, #1
 8018eca:	d09d      	beq.n	8018e08 <_printf_i+0x160>
 8018ecc:	3501      	adds	r5, #1
 8018ece:	68e3      	ldr	r3, [r4, #12]
 8018ed0:	9903      	ldr	r1, [sp, #12]
 8018ed2:	1a5b      	subs	r3, r3, r1
 8018ed4:	42ab      	cmp	r3, r5
 8018ed6:	dcf2      	bgt.n	8018ebe <_printf_i+0x216>
 8018ed8:	e7eb      	b.n	8018eb2 <_printf_i+0x20a>
 8018eda:	2500      	movs	r5, #0
 8018edc:	f104 0619 	add.w	r6, r4, #25
 8018ee0:	e7f5      	b.n	8018ece <_printf_i+0x226>
 8018ee2:	bf00      	nop
 8018ee4:	0801e360 	.word	0x0801e360
 8018ee8:	0801e371 	.word	0x0801e371

08018eec <std>:
 8018eec:	2300      	movs	r3, #0
 8018eee:	b510      	push	{r4, lr}
 8018ef0:	4604      	mov	r4, r0
 8018ef2:	e9c0 3300 	strd	r3, r3, [r0]
 8018ef6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018efa:	6083      	str	r3, [r0, #8]
 8018efc:	8181      	strh	r1, [r0, #12]
 8018efe:	6643      	str	r3, [r0, #100]	; 0x64
 8018f00:	81c2      	strh	r2, [r0, #14]
 8018f02:	6183      	str	r3, [r0, #24]
 8018f04:	4619      	mov	r1, r3
 8018f06:	2208      	movs	r2, #8
 8018f08:	305c      	adds	r0, #92	; 0x5c
 8018f0a:	f000 f9f5 	bl	80192f8 <memset>
 8018f0e:	4b05      	ldr	r3, [pc, #20]	; (8018f24 <std+0x38>)
 8018f10:	6263      	str	r3, [r4, #36]	; 0x24
 8018f12:	4b05      	ldr	r3, [pc, #20]	; (8018f28 <std+0x3c>)
 8018f14:	62a3      	str	r3, [r4, #40]	; 0x28
 8018f16:	4b05      	ldr	r3, [pc, #20]	; (8018f2c <std+0x40>)
 8018f18:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018f1a:	4b05      	ldr	r3, [pc, #20]	; (8018f30 <std+0x44>)
 8018f1c:	6224      	str	r4, [r4, #32]
 8018f1e:	6323      	str	r3, [r4, #48]	; 0x30
 8018f20:	bd10      	pop	{r4, pc}
 8018f22:	bf00      	nop
 8018f24:	08019129 	.word	0x08019129
 8018f28:	0801914b 	.word	0x0801914b
 8018f2c:	08019183 	.word	0x08019183
 8018f30:	080191a7 	.word	0x080191a7

08018f34 <stdio_exit_handler>:
 8018f34:	4a02      	ldr	r2, [pc, #8]	; (8018f40 <stdio_exit_handler+0xc>)
 8018f36:	4903      	ldr	r1, [pc, #12]	; (8018f44 <stdio_exit_handler+0x10>)
 8018f38:	4803      	ldr	r0, [pc, #12]	; (8018f48 <stdio_exit_handler+0x14>)
 8018f3a:	f000 b869 	b.w	8019010 <_fwalk_sglue>
 8018f3e:	bf00      	nop
 8018f40:	20000060 	.word	0x20000060
 8018f44:	0801acb5 	.word	0x0801acb5
 8018f48:	2000006c 	.word	0x2000006c

08018f4c <cleanup_stdio>:
 8018f4c:	6841      	ldr	r1, [r0, #4]
 8018f4e:	4b0c      	ldr	r3, [pc, #48]	; (8018f80 <cleanup_stdio+0x34>)
 8018f50:	4299      	cmp	r1, r3
 8018f52:	b510      	push	{r4, lr}
 8018f54:	4604      	mov	r4, r0
 8018f56:	d001      	beq.n	8018f5c <cleanup_stdio+0x10>
 8018f58:	f001 feac 	bl	801acb4 <_fflush_r>
 8018f5c:	68a1      	ldr	r1, [r4, #8]
 8018f5e:	4b09      	ldr	r3, [pc, #36]	; (8018f84 <cleanup_stdio+0x38>)
 8018f60:	4299      	cmp	r1, r3
 8018f62:	d002      	beq.n	8018f6a <cleanup_stdio+0x1e>
 8018f64:	4620      	mov	r0, r4
 8018f66:	f001 fea5 	bl	801acb4 <_fflush_r>
 8018f6a:	68e1      	ldr	r1, [r4, #12]
 8018f6c:	4b06      	ldr	r3, [pc, #24]	; (8018f88 <cleanup_stdio+0x3c>)
 8018f6e:	4299      	cmp	r1, r3
 8018f70:	d004      	beq.n	8018f7c <cleanup_stdio+0x30>
 8018f72:	4620      	mov	r0, r4
 8018f74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018f78:	f001 be9c 	b.w	801acb4 <_fflush_r>
 8018f7c:	bd10      	pop	{r4, pc}
 8018f7e:	bf00      	nop
 8018f80:	20008154 	.word	0x20008154
 8018f84:	200081bc 	.word	0x200081bc
 8018f88:	20008224 	.word	0x20008224

08018f8c <global_stdio_init.part.0>:
 8018f8c:	b510      	push	{r4, lr}
 8018f8e:	4b0b      	ldr	r3, [pc, #44]	; (8018fbc <global_stdio_init.part.0+0x30>)
 8018f90:	4c0b      	ldr	r4, [pc, #44]	; (8018fc0 <global_stdio_init.part.0+0x34>)
 8018f92:	4a0c      	ldr	r2, [pc, #48]	; (8018fc4 <global_stdio_init.part.0+0x38>)
 8018f94:	601a      	str	r2, [r3, #0]
 8018f96:	4620      	mov	r0, r4
 8018f98:	2200      	movs	r2, #0
 8018f9a:	2104      	movs	r1, #4
 8018f9c:	f7ff ffa6 	bl	8018eec <std>
 8018fa0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8018fa4:	2201      	movs	r2, #1
 8018fa6:	2109      	movs	r1, #9
 8018fa8:	f7ff ffa0 	bl	8018eec <std>
 8018fac:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8018fb0:	2202      	movs	r2, #2
 8018fb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018fb6:	2112      	movs	r1, #18
 8018fb8:	f7ff bf98 	b.w	8018eec <std>
 8018fbc:	2000828c 	.word	0x2000828c
 8018fc0:	20008154 	.word	0x20008154
 8018fc4:	08018f35 	.word	0x08018f35

08018fc8 <__sfp_lock_acquire>:
 8018fc8:	4801      	ldr	r0, [pc, #4]	; (8018fd0 <__sfp_lock_acquire+0x8>)
 8018fca:	f000 ba0b 	b.w	80193e4 <__retarget_lock_acquire_recursive>
 8018fce:	bf00      	nop
 8018fd0:	20008295 	.word	0x20008295

08018fd4 <__sfp_lock_release>:
 8018fd4:	4801      	ldr	r0, [pc, #4]	; (8018fdc <__sfp_lock_release+0x8>)
 8018fd6:	f000 ba06 	b.w	80193e6 <__retarget_lock_release_recursive>
 8018fda:	bf00      	nop
 8018fdc:	20008295 	.word	0x20008295

08018fe0 <__sinit>:
 8018fe0:	b510      	push	{r4, lr}
 8018fe2:	4604      	mov	r4, r0
 8018fe4:	f7ff fff0 	bl	8018fc8 <__sfp_lock_acquire>
 8018fe8:	6a23      	ldr	r3, [r4, #32]
 8018fea:	b11b      	cbz	r3, 8018ff4 <__sinit+0x14>
 8018fec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018ff0:	f7ff bff0 	b.w	8018fd4 <__sfp_lock_release>
 8018ff4:	4b04      	ldr	r3, [pc, #16]	; (8019008 <__sinit+0x28>)
 8018ff6:	6223      	str	r3, [r4, #32]
 8018ff8:	4b04      	ldr	r3, [pc, #16]	; (801900c <__sinit+0x2c>)
 8018ffa:	681b      	ldr	r3, [r3, #0]
 8018ffc:	2b00      	cmp	r3, #0
 8018ffe:	d1f5      	bne.n	8018fec <__sinit+0xc>
 8019000:	f7ff ffc4 	bl	8018f8c <global_stdio_init.part.0>
 8019004:	e7f2      	b.n	8018fec <__sinit+0xc>
 8019006:	bf00      	nop
 8019008:	08018f4d 	.word	0x08018f4d
 801900c:	2000828c 	.word	0x2000828c

08019010 <_fwalk_sglue>:
 8019010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019014:	4607      	mov	r7, r0
 8019016:	4688      	mov	r8, r1
 8019018:	4614      	mov	r4, r2
 801901a:	2600      	movs	r6, #0
 801901c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019020:	f1b9 0901 	subs.w	r9, r9, #1
 8019024:	d505      	bpl.n	8019032 <_fwalk_sglue+0x22>
 8019026:	6824      	ldr	r4, [r4, #0]
 8019028:	2c00      	cmp	r4, #0
 801902a:	d1f7      	bne.n	801901c <_fwalk_sglue+0xc>
 801902c:	4630      	mov	r0, r6
 801902e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019032:	89ab      	ldrh	r3, [r5, #12]
 8019034:	2b01      	cmp	r3, #1
 8019036:	d907      	bls.n	8019048 <_fwalk_sglue+0x38>
 8019038:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801903c:	3301      	adds	r3, #1
 801903e:	d003      	beq.n	8019048 <_fwalk_sglue+0x38>
 8019040:	4629      	mov	r1, r5
 8019042:	4638      	mov	r0, r7
 8019044:	47c0      	blx	r8
 8019046:	4306      	orrs	r6, r0
 8019048:	3568      	adds	r5, #104	; 0x68
 801904a:	e7e9      	b.n	8019020 <_fwalk_sglue+0x10>

0801904c <iprintf>:
 801904c:	b40f      	push	{r0, r1, r2, r3}
 801904e:	b507      	push	{r0, r1, r2, lr}
 8019050:	4906      	ldr	r1, [pc, #24]	; (801906c <iprintf+0x20>)
 8019052:	ab04      	add	r3, sp, #16
 8019054:	6808      	ldr	r0, [r1, #0]
 8019056:	f853 2b04 	ldr.w	r2, [r3], #4
 801905a:	6881      	ldr	r1, [r0, #8]
 801905c:	9301      	str	r3, [sp, #4]
 801905e:	f001 fc89 	bl	801a974 <_vfiprintf_r>
 8019062:	b003      	add	sp, #12
 8019064:	f85d eb04 	ldr.w	lr, [sp], #4
 8019068:	b004      	add	sp, #16
 801906a:	4770      	bx	lr
 801906c:	200000b8 	.word	0x200000b8

08019070 <_puts_r>:
 8019070:	6a03      	ldr	r3, [r0, #32]
 8019072:	b570      	push	{r4, r5, r6, lr}
 8019074:	6884      	ldr	r4, [r0, #8]
 8019076:	4605      	mov	r5, r0
 8019078:	460e      	mov	r6, r1
 801907a:	b90b      	cbnz	r3, 8019080 <_puts_r+0x10>
 801907c:	f7ff ffb0 	bl	8018fe0 <__sinit>
 8019080:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019082:	07db      	lsls	r3, r3, #31
 8019084:	d405      	bmi.n	8019092 <_puts_r+0x22>
 8019086:	89a3      	ldrh	r3, [r4, #12]
 8019088:	0598      	lsls	r0, r3, #22
 801908a:	d402      	bmi.n	8019092 <_puts_r+0x22>
 801908c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801908e:	f000 f9a9 	bl	80193e4 <__retarget_lock_acquire_recursive>
 8019092:	89a3      	ldrh	r3, [r4, #12]
 8019094:	0719      	lsls	r1, r3, #28
 8019096:	d513      	bpl.n	80190c0 <_puts_r+0x50>
 8019098:	6923      	ldr	r3, [r4, #16]
 801909a:	b18b      	cbz	r3, 80190c0 <_puts_r+0x50>
 801909c:	3e01      	subs	r6, #1
 801909e:	68a3      	ldr	r3, [r4, #8]
 80190a0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80190a4:	3b01      	subs	r3, #1
 80190a6:	60a3      	str	r3, [r4, #8]
 80190a8:	b9e9      	cbnz	r1, 80190e6 <_puts_r+0x76>
 80190aa:	2b00      	cmp	r3, #0
 80190ac:	da2e      	bge.n	801910c <_puts_r+0x9c>
 80190ae:	4622      	mov	r2, r4
 80190b0:	210a      	movs	r1, #10
 80190b2:	4628      	mov	r0, r5
 80190b4:	f000 f87b 	bl	80191ae <__swbuf_r>
 80190b8:	3001      	adds	r0, #1
 80190ba:	d007      	beq.n	80190cc <_puts_r+0x5c>
 80190bc:	250a      	movs	r5, #10
 80190be:	e007      	b.n	80190d0 <_puts_r+0x60>
 80190c0:	4621      	mov	r1, r4
 80190c2:	4628      	mov	r0, r5
 80190c4:	f000 f8b0 	bl	8019228 <__swsetup_r>
 80190c8:	2800      	cmp	r0, #0
 80190ca:	d0e7      	beq.n	801909c <_puts_r+0x2c>
 80190cc:	f04f 35ff 	mov.w	r5, #4294967295
 80190d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80190d2:	07da      	lsls	r2, r3, #31
 80190d4:	d405      	bmi.n	80190e2 <_puts_r+0x72>
 80190d6:	89a3      	ldrh	r3, [r4, #12]
 80190d8:	059b      	lsls	r3, r3, #22
 80190da:	d402      	bmi.n	80190e2 <_puts_r+0x72>
 80190dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80190de:	f000 f982 	bl	80193e6 <__retarget_lock_release_recursive>
 80190e2:	4628      	mov	r0, r5
 80190e4:	bd70      	pop	{r4, r5, r6, pc}
 80190e6:	2b00      	cmp	r3, #0
 80190e8:	da04      	bge.n	80190f4 <_puts_r+0x84>
 80190ea:	69a2      	ldr	r2, [r4, #24]
 80190ec:	429a      	cmp	r2, r3
 80190ee:	dc06      	bgt.n	80190fe <_puts_r+0x8e>
 80190f0:	290a      	cmp	r1, #10
 80190f2:	d004      	beq.n	80190fe <_puts_r+0x8e>
 80190f4:	6823      	ldr	r3, [r4, #0]
 80190f6:	1c5a      	adds	r2, r3, #1
 80190f8:	6022      	str	r2, [r4, #0]
 80190fa:	7019      	strb	r1, [r3, #0]
 80190fc:	e7cf      	b.n	801909e <_puts_r+0x2e>
 80190fe:	4622      	mov	r2, r4
 8019100:	4628      	mov	r0, r5
 8019102:	f000 f854 	bl	80191ae <__swbuf_r>
 8019106:	3001      	adds	r0, #1
 8019108:	d1c9      	bne.n	801909e <_puts_r+0x2e>
 801910a:	e7df      	b.n	80190cc <_puts_r+0x5c>
 801910c:	6823      	ldr	r3, [r4, #0]
 801910e:	250a      	movs	r5, #10
 8019110:	1c5a      	adds	r2, r3, #1
 8019112:	6022      	str	r2, [r4, #0]
 8019114:	701d      	strb	r5, [r3, #0]
 8019116:	e7db      	b.n	80190d0 <_puts_r+0x60>

08019118 <puts>:
 8019118:	4b02      	ldr	r3, [pc, #8]	; (8019124 <puts+0xc>)
 801911a:	4601      	mov	r1, r0
 801911c:	6818      	ldr	r0, [r3, #0]
 801911e:	f7ff bfa7 	b.w	8019070 <_puts_r>
 8019122:	bf00      	nop
 8019124:	200000b8 	.word	0x200000b8

08019128 <__sread>:
 8019128:	b510      	push	{r4, lr}
 801912a:	460c      	mov	r4, r1
 801912c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019130:	f000 f910 	bl	8019354 <_read_r>
 8019134:	2800      	cmp	r0, #0
 8019136:	bfab      	itete	ge
 8019138:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801913a:	89a3      	ldrhlt	r3, [r4, #12]
 801913c:	181b      	addge	r3, r3, r0
 801913e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8019142:	bfac      	ite	ge
 8019144:	6563      	strge	r3, [r4, #84]	; 0x54
 8019146:	81a3      	strhlt	r3, [r4, #12]
 8019148:	bd10      	pop	{r4, pc}

0801914a <__swrite>:
 801914a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801914e:	461f      	mov	r7, r3
 8019150:	898b      	ldrh	r3, [r1, #12]
 8019152:	05db      	lsls	r3, r3, #23
 8019154:	4605      	mov	r5, r0
 8019156:	460c      	mov	r4, r1
 8019158:	4616      	mov	r6, r2
 801915a:	d505      	bpl.n	8019168 <__swrite+0x1e>
 801915c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019160:	2302      	movs	r3, #2
 8019162:	2200      	movs	r2, #0
 8019164:	f000 f8e4 	bl	8019330 <_lseek_r>
 8019168:	89a3      	ldrh	r3, [r4, #12]
 801916a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801916e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019172:	81a3      	strh	r3, [r4, #12]
 8019174:	4632      	mov	r2, r6
 8019176:	463b      	mov	r3, r7
 8019178:	4628      	mov	r0, r5
 801917a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801917e:	f000 b8fb 	b.w	8019378 <_write_r>

08019182 <__sseek>:
 8019182:	b510      	push	{r4, lr}
 8019184:	460c      	mov	r4, r1
 8019186:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801918a:	f000 f8d1 	bl	8019330 <_lseek_r>
 801918e:	1c43      	adds	r3, r0, #1
 8019190:	89a3      	ldrh	r3, [r4, #12]
 8019192:	bf15      	itete	ne
 8019194:	6560      	strne	r0, [r4, #84]	; 0x54
 8019196:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801919a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801919e:	81a3      	strheq	r3, [r4, #12]
 80191a0:	bf18      	it	ne
 80191a2:	81a3      	strhne	r3, [r4, #12]
 80191a4:	bd10      	pop	{r4, pc}

080191a6 <__sclose>:
 80191a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80191aa:	f000 b8b1 	b.w	8019310 <_close_r>

080191ae <__swbuf_r>:
 80191ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80191b0:	460e      	mov	r6, r1
 80191b2:	4614      	mov	r4, r2
 80191b4:	4605      	mov	r5, r0
 80191b6:	b118      	cbz	r0, 80191c0 <__swbuf_r+0x12>
 80191b8:	6a03      	ldr	r3, [r0, #32]
 80191ba:	b90b      	cbnz	r3, 80191c0 <__swbuf_r+0x12>
 80191bc:	f7ff ff10 	bl	8018fe0 <__sinit>
 80191c0:	69a3      	ldr	r3, [r4, #24]
 80191c2:	60a3      	str	r3, [r4, #8]
 80191c4:	89a3      	ldrh	r3, [r4, #12]
 80191c6:	071a      	lsls	r2, r3, #28
 80191c8:	d525      	bpl.n	8019216 <__swbuf_r+0x68>
 80191ca:	6923      	ldr	r3, [r4, #16]
 80191cc:	b31b      	cbz	r3, 8019216 <__swbuf_r+0x68>
 80191ce:	6823      	ldr	r3, [r4, #0]
 80191d0:	6922      	ldr	r2, [r4, #16]
 80191d2:	1a98      	subs	r0, r3, r2
 80191d4:	6963      	ldr	r3, [r4, #20]
 80191d6:	b2f6      	uxtb	r6, r6
 80191d8:	4283      	cmp	r3, r0
 80191da:	4637      	mov	r7, r6
 80191dc:	dc04      	bgt.n	80191e8 <__swbuf_r+0x3a>
 80191de:	4621      	mov	r1, r4
 80191e0:	4628      	mov	r0, r5
 80191e2:	f001 fd67 	bl	801acb4 <_fflush_r>
 80191e6:	b9e0      	cbnz	r0, 8019222 <__swbuf_r+0x74>
 80191e8:	68a3      	ldr	r3, [r4, #8]
 80191ea:	3b01      	subs	r3, #1
 80191ec:	60a3      	str	r3, [r4, #8]
 80191ee:	6823      	ldr	r3, [r4, #0]
 80191f0:	1c5a      	adds	r2, r3, #1
 80191f2:	6022      	str	r2, [r4, #0]
 80191f4:	701e      	strb	r6, [r3, #0]
 80191f6:	6962      	ldr	r2, [r4, #20]
 80191f8:	1c43      	adds	r3, r0, #1
 80191fa:	429a      	cmp	r2, r3
 80191fc:	d004      	beq.n	8019208 <__swbuf_r+0x5a>
 80191fe:	89a3      	ldrh	r3, [r4, #12]
 8019200:	07db      	lsls	r3, r3, #31
 8019202:	d506      	bpl.n	8019212 <__swbuf_r+0x64>
 8019204:	2e0a      	cmp	r6, #10
 8019206:	d104      	bne.n	8019212 <__swbuf_r+0x64>
 8019208:	4621      	mov	r1, r4
 801920a:	4628      	mov	r0, r5
 801920c:	f001 fd52 	bl	801acb4 <_fflush_r>
 8019210:	b938      	cbnz	r0, 8019222 <__swbuf_r+0x74>
 8019212:	4638      	mov	r0, r7
 8019214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019216:	4621      	mov	r1, r4
 8019218:	4628      	mov	r0, r5
 801921a:	f000 f805 	bl	8019228 <__swsetup_r>
 801921e:	2800      	cmp	r0, #0
 8019220:	d0d5      	beq.n	80191ce <__swbuf_r+0x20>
 8019222:	f04f 37ff 	mov.w	r7, #4294967295
 8019226:	e7f4      	b.n	8019212 <__swbuf_r+0x64>

08019228 <__swsetup_r>:
 8019228:	b538      	push	{r3, r4, r5, lr}
 801922a:	4b2a      	ldr	r3, [pc, #168]	; (80192d4 <__swsetup_r+0xac>)
 801922c:	4605      	mov	r5, r0
 801922e:	6818      	ldr	r0, [r3, #0]
 8019230:	460c      	mov	r4, r1
 8019232:	b118      	cbz	r0, 801923c <__swsetup_r+0x14>
 8019234:	6a03      	ldr	r3, [r0, #32]
 8019236:	b90b      	cbnz	r3, 801923c <__swsetup_r+0x14>
 8019238:	f7ff fed2 	bl	8018fe0 <__sinit>
 801923c:	89a3      	ldrh	r3, [r4, #12]
 801923e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019242:	0718      	lsls	r0, r3, #28
 8019244:	d422      	bmi.n	801928c <__swsetup_r+0x64>
 8019246:	06d9      	lsls	r1, r3, #27
 8019248:	d407      	bmi.n	801925a <__swsetup_r+0x32>
 801924a:	2309      	movs	r3, #9
 801924c:	602b      	str	r3, [r5, #0]
 801924e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019252:	81a3      	strh	r3, [r4, #12]
 8019254:	f04f 30ff 	mov.w	r0, #4294967295
 8019258:	e034      	b.n	80192c4 <__swsetup_r+0x9c>
 801925a:	0758      	lsls	r0, r3, #29
 801925c:	d512      	bpl.n	8019284 <__swsetup_r+0x5c>
 801925e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019260:	b141      	cbz	r1, 8019274 <__swsetup_r+0x4c>
 8019262:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019266:	4299      	cmp	r1, r3
 8019268:	d002      	beq.n	8019270 <__swsetup_r+0x48>
 801926a:	4628      	mov	r0, r5
 801926c:	f000 fedc 	bl	801a028 <_free_r>
 8019270:	2300      	movs	r3, #0
 8019272:	6363      	str	r3, [r4, #52]	; 0x34
 8019274:	89a3      	ldrh	r3, [r4, #12]
 8019276:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801927a:	81a3      	strh	r3, [r4, #12]
 801927c:	2300      	movs	r3, #0
 801927e:	6063      	str	r3, [r4, #4]
 8019280:	6923      	ldr	r3, [r4, #16]
 8019282:	6023      	str	r3, [r4, #0]
 8019284:	89a3      	ldrh	r3, [r4, #12]
 8019286:	f043 0308 	orr.w	r3, r3, #8
 801928a:	81a3      	strh	r3, [r4, #12]
 801928c:	6923      	ldr	r3, [r4, #16]
 801928e:	b94b      	cbnz	r3, 80192a4 <__swsetup_r+0x7c>
 8019290:	89a3      	ldrh	r3, [r4, #12]
 8019292:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019296:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801929a:	d003      	beq.n	80192a4 <__swsetup_r+0x7c>
 801929c:	4621      	mov	r1, r4
 801929e:	4628      	mov	r0, r5
 80192a0:	f001 fd68 	bl	801ad74 <__smakebuf_r>
 80192a4:	89a0      	ldrh	r0, [r4, #12]
 80192a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80192aa:	f010 0301 	ands.w	r3, r0, #1
 80192ae:	d00a      	beq.n	80192c6 <__swsetup_r+0x9e>
 80192b0:	2300      	movs	r3, #0
 80192b2:	60a3      	str	r3, [r4, #8]
 80192b4:	6963      	ldr	r3, [r4, #20]
 80192b6:	425b      	negs	r3, r3
 80192b8:	61a3      	str	r3, [r4, #24]
 80192ba:	6923      	ldr	r3, [r4, #16]
 80192bc:	b943      	cbnz	r3, 80192d0 <__swsetup_r+0xa8>
 80192be:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80192c2:	d1c4      	bne.n	801924e <__swsetup_r+0x26>
 80192c4:	bd38      	pop	{r3, r4, r5, pc}
 80192c6:	0781      	lsls	r1, r0, #30
 80192c8:	bf58      	it	pl
 80192ca:	6963      	ldrpl	r3, [r4, #20]
 80192cc:	60a3      	str	r3, [r4, #8]
 80192ce:	e7f4      	b.n	80192ba <__swsetup_r+0x92>
 80192d0:	2000      	movs	r0, #0
 80192d2:	e7f7      	b.n	80192c4 <__swsetup_r+0x9c>
 80192d4:	200000b8 	.word	0x200000b8

080192d8 <memcmp>:
 80192d8:	b510      	push	{r4, lr}
 80192da:	3901      	subs	r1, #1
 80192dc:	4402      	add	r2, r0
 80192de:	4290      	cmp	r0, r2
 80192e0:	d101      	bne.n	80192e6 <memcmp+0xe>
 80192e2:	2000      	movs	r0, #0
 80192e4:	e005      	b.n	80192f2 <memcmp+0x1a>
 80192e6:	7803      	ldrb	r3, [r0, #0]
 80192e8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80192ec:	42a3      	cmp	r3, r4
 80192ee:	d001      	beq.n	80192f4 <memcmp+0x1c>
 80192f0:	1b18      	subs	r0, r3, r4
 80192f2:	bd10      	pop	{r4, pc}
 80192f4:	3001      	adds	r0, #1
 80192f6:	e7f2      	b.n	80192de <memcmp+0x6>

080192f8 <memset>:
 80192f8:	4402      	add	r2, r0
 80192fa:	4603      	mov	r3, r0
 80192fc:	4293      	cmp	r3, r2
 80192fe:	d100      	bne.n	8019302 <memset+0xa>
 8019300:	4770      	bx	lr
 8019302:	f803 1b01 	strb.w	r1, [r3], #1
 8019306:	e7f9      	b.n	80192fc <memset+0x4>

08019308 <_localeconv_r>:
 8019308:	4800      	ldr	r0, [pc, #0]	; (801930c <_localeconv_r+0x4>)
 801930a:	4770      	bx	lr
 801930c:	200001ac 	.word	0x200001ac

08019310 <_close_r>:
 8019310:	b538      	push	{r3, r4, r5, lr}
 8019312:	4d06      	ldr	r5, [pc, #24]	; (801932c <_close_r+0x1c>)
 8019314:	2300      	movs	r3, #0
 8019316:	4604      	mov	r4, r0
 8019318:	4608      	mov	r0, r1
 801931a:	602b      	str	r3, [r5, #0]
 801931c:	f7e9 fca1 	bl	8002c62 <_close>
 8019320:	1c43      	adds	r3, r0, #1
 8019322:	d102      	bne.n	801932a <_close_r+0x1a>
 8019324:	682b      	ldr	r3, [r5, #0]
 8019326:	b103      	cbz	r3, 801932a <_close_r+0x1a>
 8019328:	6023      	str	r3, [r4, #0]
 801932a:	bd38      	pop	{r3, r4, r5, pc}
 801932c:	20008290 	.word	0x20008290

08019330 <_lseek_r>:
 8019330:	b538      	push	{r3, r4, r5, lr}
 8019332:	4d07      	ldr	r5, [pc, #28]	; (8019350 <_lseek_r+0x20>)
 8019334:	4604      	mov	r4, r0
 8019336:	4608      	mov	r0, r1
 8019338:	4611      	mov	r1, r2
 801933a:	2200      	movs	r2, #0
 801933c:	602a      	str	r2, [r5, #0]
 801933e:	461a      	mov	r2, r3
 8019340:	f7e9 fcb6 	bl	8002cb0 <_lseek>
 8019344:	1c43      	adds	r3, r0, #1
 8019346:	d102      	bne.n	801934e <_lseek_r+0x1e>
 8019348:	682b      	ldr	r3, [r5, #0]
 801934a:	b103      	cbz	r3, 801934e <_lseek_r+0x1e>
 801934c:	6023      	str	r3, [r4, #0]
 801934e:	bd38      	pop	{r3, r4, r5, pc}
 8019350:	20008290 	.word	0x20008290

08019354 <_read_r>:
 8019354:	b538      	push	{r3, r4, r5, lr}
 8019356:	4d07      	ldr	r5, [pc, #28]	; (8019374 <_read_r+0x20>)
 8019358:	4604      	mov	r4, r0
 801935a:	4608      	mov	r0, r1
 801935c:	4611      	mov	r1, r2
 801935e:	2200      	movs	r2, #0
 8019360:	602a      	str	r2, [r5, #0]
 8019362:	461a      	mov	r2, r3
 8019364:	f7e9 fc44 	bl	8002bf0 <_read>
 8019368:	1c43      	adds	r3, r0, #1
 801936a:	d102      	bne.n	8019372 <_read_r+0x1e>
 801936c:	682b      	ldr	r3, [r5, #0]
 801936e:	b103      	cbz	r3, 8019372 <_read_r+0x1e>
 8019370:	6023      	str	r3, [r4, #0]
 8019372:	bd38      	pop	{r3, r4, r5, pc}
 8019374:	20008290 	.word	0x20008290

08019378 <_write_r>:
 8019378:	b538      	push	{r3, r4, r5, lr}
 801937a:	4d07      	ldr	r5, [pc, #28]	; (8019398 <_write_r+0x20>)
 801937c:	4604      	mov	r4, r0
 801937e:	4608      	mov	r0, r1
 8019380:	4611      	mov	r1, r2
 8019382:	2200      	movs	r2, #0
 8019384:	602a      	str	r2, [r5, #0]
 8019386:	461a      	mov	r2, r3
 8019388:	f7e9 fc4f 	bl	8002c2a <_write>
 801938c:	1c43      	adds	r3, r0, #1
 801938e:	d102      	bne.n	8019396 <_write_r+0x1e>
 8019390:	682b      	ldr	r3, [r5, #0]
 8019392:	b103      	cbz	r3, 8019396 <_write_r+0x1e>
 8019394:	6023      	str	r3, [r4, #0]
 8019396:	bd38      	pop	{r3, r4, r5, pc}
 8019398:	20008290 	.word	0x20008290

0801939c <__libc_init_array>:
 801939c:	b570      	push	{r4, r5, r6, lr}
 801939e:	4d0d      	ldr	r5, [pc, #52]	; (80193d4 <__libc_init_array+0x38>)
 80193a0:	4c0d      	ldr	r4, [pc, #52]	; (80193d8 <__libc_init_array+0x3c>)
 80193a2:	1b64      	subs	r4, r4, r5
 80193a4:	10a4      	asrs	r4, r4, #2
 80193a6:	2600      	movs	r6, #0
 80193a8:	42a6      	cmp	r6, r4
 80193aa:	d109      	bne.n	80193c0 <__libc_init_array+0x24>
 80193ac:	4d0b      	ldr	r5, [pc, #44]	; (80193dc <__libc_init_array+0x40>)
 80193ae:	4c0c      	ldr	r4, [pc, #48]	; (80193e0 <__libc_init_array+0x44>)
 80193b0:	f001 fdce 	bl	801af50 <_init>
 80193b4:	1b64      	subs	r4, r4, r5
 80193b6:	10a4      	asrs	r4, r4, #2
 80193b8:	2600      	movs	r6, #0
 80193ba:	42a6      	cmp	r6, r4
 80193bc:	d105      	bne.n	80193ca <__libc_init_array+0x2e>
 80193be:	bd70      	pop	{r4, r5, r6, pc}
 80193c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80193c4:	4798      	blx	r3
 80193c6:	3601      	adds	r6, #1
 80193c8:	e7ee      	b.n	80193a8 <__libc_init_array+0xc>
 80193ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80193ce:	4798      	blx	r3
 80193d0:	3601      	adds	r6, #1
 80193d2:	e7f2      	b.n	80193ba <__libc_init_array+0x1e>
 80193d4:	0801e5b0 	.word	0x0801e5b0
 80193d8:	0801e5b0 	.word	0x0801e5b0
 80193dc:	0801e5b0 	.word	0x0801e5b0
 80193e0:	0801e5b4 	.word	0x0801e5b4

080193e4 <__retarget_lock_acquire_recursive>:
 80193e4:	4770      	bx	lr

080193e6 <__retarget_lock_release_recursive>:
 80193e6:	4770      	bx	lr

080193e8 <memcpy>:
 80193e8:	440a      	add	r2, r1
 80193ea:	4291      	cmp	r1, r2
 80193ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80193f0:	d100      	bne.n	80193f4 <memcpy+0xc>
 80193f2:	4770      	bx	lr
 80193f4:	b510      	push	{r4, lr}
 80193f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80193fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80193fe:	4291      	cmp	r1, r2
 8019400:	d1f9      	bne.n	80193f6 <memcpy+0xe>
 8019402:	bd10      	pop	{r4, pc}

08019404 <__assert_func>:
 8019404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019406:	4614      	mov	r4, r2
 8019408:	461a      	mov	r2, r3
 801940a:	4b09      	ldr	r3, [pc, #36]	; (8019430 <__assert_func+0x2c>)
 801940c:	681b      	ldr	r3, [r3, #0]
 801940e:	4605      	mov	r5, r0
 8019410:	68d8      	ldr	r0, [r3, #12]
 8019412:	b14c      	cbz	r4, 8019428 <__assert_func+0x24>
 8019414:	4b07      	ldr	r3, [pc, #28]	; (8019434 <__assert_func+0x30>)
 8019416:	9100      	str	r1, [sp, #0]
 8019418:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801941c:	4906      	ldr	r1, [pc, #24]	; (8019438 <__assert_func+0x34>)
 801941e:	462b      	mov	r3, r5
 8019420:	f001 fc70 	bl	801ad04 <fiprintf>
 8019424:	f001 fd14 	bl	801ae50 <abort>
 8019428:	4b04      	ldr	r3, [pc, #16]	; (801943c <__assert_func+0x38>)
 801942a:	461c      	mov	r4, r3
 801942c:	e7f3      	b.n	8019416 <__assert_func+0x12>
 801942e:	bf00      	nop
 8019430:	200000b8 	.word	0x200000b8
 8019434:	0801e382 	.word	0x0801e382
 8019438:	0801e38f 	.word	0x0801e38f
 801943c:	0801e3bd 	.word	0x0801e3bd

08019440 <quorem>:
 8019440:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019444:	6903      	ldr	r3, [r0, #16]
 8019446:	690c      	ldr	r4, [r1, #16]
 8019448:	42a3      	cmp	r3, r4
 801944a:	4607      	mov	r7, r0
 801944c:	db7e      	blt.n	801954c <quorem+0x10c>
 801944e:	3c01      	subs	r4, #1
 8019450:	f101 0814 	add.w	r8, r1, #20
 8019454:	f100 0514 	add.w	r5, r0, #20
 8019458:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801945c:	9301      	str	r3, [sp, #4]
 801945e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8019462:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8019466:	3301      	adds	r3, #1
 8019468:	429a      	cmp	r2, r3
 801946a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801946e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8019472:	fbb2 f6f3 	udiv	r6, r2, r3
 8019476:	d331      	bcc.n	80194dc <quorem+0x9c>
 8019478:	f04f 0e00 	mov.w	lr, #0
 801947c:	4640      	mov	r0, r8
 801947e:	46ac      	mov	ip, r5
 8019480:	46f2      	mov	sl, lr
 8019482:	f850 2b04 	ldr.w	r2, [r0], #4
 8019486:	b293      	uxth	r3, r2
 8019488:	fb06 e303 	mla	r3, r6, r3, lr
 801948c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8019490:	0c1a      	lsrs	r2, r3, #16
 8019492:	b29b      	uxth	r3, r3
 8019494:	ebaa 0303 	sub.w	r3, sl, r3
 8019498:	f8dc a000 	ldr.w	sl, [ip]
 801949c:	fa13 f38a 	uxtah	r3, r3, sl
 80194a0:	fb06 220e 	mla	r2, r6, lr, r2
 80194a4:	9300      	str	r3, [sp, #0]
 80194a6:	9b00      	ldr	r3, [sp, #0]
 80194a8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80194ac:	b292      	uxth	r2, r2
 80194ae:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80194b2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80194b6:	f8bd 3000 	ldrh.w	r3, [sp]
 80194ba:	4581      	cmp	r9, r0
 80194bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80194c0:	f84c 3b04 	str.w	r3, [ip], #4
 80194c4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80194c8:	d2db      	bcs.n	8019482 <quorem+0x42>
 80194ca:	f855 300b 	ldr.w	r3, [r5, fp]
 80194ce:	b92b      	cbnz	r3, 80194dc <quorem+0x9c>
 80194d0:	9b01      	ldr	r3, [sp, #4]
 80194d2:	3b04      	subs	r3, #4
 80194d4:	429d      	cmp	r5, r3
 80194d6:	461a      	mov	r2, r3
 80194d8:	d32c      	bcc.n	8019534 <quorem+0xf4>
 80194da:	613c      	str	r4, [r7, #16]
 80194dc:	4638      	mov	r0, r7
 80194de:	f001 f91f 	bl	801a720 <__mcmp>
 80194e2:	2800      	cmp	r0, #0
 80194e4:	db22      	blt.n	801952c <quorem+0xec>
 80194e6:	3601      	adds	r6, #1
 80194e8:	4629      	mov	r1, r5
 80194ea:	2000      	movs	r0, #0
 80194ec:	f858 2b04 	ldr.w	r2, [r8], #4
 80194f0:	f8d1 c000 	ldr.w	ip, [r1]
 80194f4:	b293      	uxth	r3, r2
 80194f6:	1ac3      	subs	r3, r0, r3
 80194f8:	0c12      	lsrs	r2, r2, #16
 80194fa:	fa13 f38c 	uxtah	r3, r3, ip
 80194fe:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8019502:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8019506:	b29b      	uxth	r3, r3
 8019508:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801950c:	45c1      	cmp	r9, r8
 801950e:	f841 3b04 	str.w	r3, [r1], #4
 8019512:	ea4f 4022 	mov.w	r0, r2, asr #16
 8019516:	d2e9      	bcs.n	80194ec <quorem+0xac>
 8019518:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801951c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8019520:	b922      	cbnz	r2, 801952c <quorem+0xec>
 8019522:	3b04      	subs	r3, #4
 8019524:	429d      	cmp	r5, r3
 8019526:	461a      	mov	r2, r3
 8019528:	d30a      	bcc.n	8019540 <quorem+0x100>
 801952a:	613c      	str	r4, [r7, #16]
 801952c:	4630      	mov	r0, r6
 801952e:	b003      	add	sp, #12
 8019530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019534:	6812      	ldr	r2, [r2, #0]
 8019536:	3b04      	subs	r3, #4
 8019538:	2a00      	cmp	r2, #0
 801953a:	d1ce      	bne.n	80194da <quorem+0x9a>
 801953c:	3c01      	subs	r4, #1
 801953e:	e7c9      	b.n	80194d4 <quorem+0x94>
 8019540:	6812      	ldr	r2, [r2, #0]
 8019542:	3b04      	subs	r3, #4
 8019544:	2a00      	cmp	r2, #0
 8019546:	d1f0      	bne.n	801952a <quorem+0xea>
 8019548:	3c01      	subs	r4, #1
 801954a:	e7eb      	b.n	8019524 <quorem+0xe4>
 801954c:	2000      	movs	r0, #0
 801954e:	e7ee      	b.n	801952e <quorem+0xee>

08019550 <_dtoa_r>:
 8019550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019554:	ed2d 8b02 	vpush	{d8}
 8019558:	69c5      	ldr	r5, [r0, #28]
 801955a:	b091      	sub	sp, #68	; 0x44
 801955c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8019560:	ec59 8b10 	vmov	r8, r9, d0
 8019564:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8019566:	9106      	str	r1, [sp, #24]
 8019568:	4606      	mov	r6, r0
 801956a:	9208      	str	r2, [sp, #32]
 801956c:	930c      	str	r3, [sp, #48]	; 0x30
 801956e:	b975      	cbnz	r5, 801958e <_dtoa_r+0x3e>
 8019570:	2010      	movs	r0, #16
 8019572:	f000 fda5 	bl	801a0c0 <malloc>
 8019576:	4602      	mov	r2, r0
 8019578:	61f0      	str	r0, [r6, #28]
 801957a:	b920      	cbnz	r0, 8019586 <_dtoa_r+0x36>
 801957c:	4ba6      	ldr	r3, [pc, #664]	; (8019818 <_dtoa_r+0x2c8>)
 801957e:	21ef      	movs	r1, #239	; 0xef
 8019580:	48a6      	ldr	r0, [pc, #664]	; (801981c <_dtoa_r+0x2cc>)
 8019582:	f7ff ff3f 	bl	8019404 <__assert_func>
 8019586:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801958a:	6005      	str	r5, [r0, #0]
 801958c:	60c5      	str	r5, [r0, #12]
 801958e:	69f3      	ldr	r3, [r6, #28]
 8019590:	6819      	ldr	r1, [r3, #0]
 8019592:	b151      	cbz	r1, 80195aa <_dtoa_r+0x5a>
 8019594:	685a      	ldr	r2, [r3, #4]
 8019596:	604a      	str	r2, [r1, #4]
 8019598:	2301      	movs	r3, #1
 801959a:	4093      	lsls	r3, r2
 801959c:	608b      	str	r3, [r1, #8]
 801959e:	4630      	mov	r0, r6
 80195a0:	f000 fe82 	bl	801a2a8 <_Bfree>
 80195a4:	69f3      	ldr	r3, [r6, #28]
 80195a6:	2200      	movs	r2, #0
 80195a8:	601a      	str	r2, [r3, #0]
 80195aa:	f1b9 0300 	subs.w	r3, r9, #0
 80195ae:	bfbb      	ittet	lt
 80195b0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80195b4:	9303      	strlt	r3, [sp, #12]
 80195b6:	2300      	movge	r3, #0
 80195b8:	2201      	movlt	r2, #1
 80195ba:	bfac      	ite	ge
 80195bc:	6023      	strge	r3, [r4, #0]
 80195be:	6022      	strlt	r2, [r4, #0]
 80195c0:	4b97      	ldr	r3, [pc, #604]	; (8019820 <_dtoa_r+0x2d0>)
 80195c2:	9c03      	ldr	r4, [sp, #12]
 80195c4:	43a3      	bics	r3, r4
 80195c6:	d11c      	bne.n	8019602 <_dtoa_r+0xb2>
 80195c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80195ca:	f242 730f 	movw	r3, #9999	; 0x270f
 80195ce:	6013      	str	r3, [r2, #0]
 80195d0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80195d4:	ea53 0308 	orrs.w	r3, r3, r8
 80195d8:	f000 84fb 	beq.w	8019fd2 <_dtoa_r+0xa82>
 80195dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80195de:	b963      	cbnz	r3, 80195fa <_dtoa_r+0xaa>
 80195e0:	4b90      	ldr	r3, [pc, #576]	; (8019824 <_dtoa_r+0x2d4>)
 80195e2:	e020      	b.n	8019626 <_dtoa_r+0xd6>
 80195e4:	4b90      	ldr	r3, [pc, #576]	; (8019828 <_dtoa_r+0x2d8>)
 80195e6:	9301      	str	r3, [sp, #4]
 80195e8:	3308      	adds	r3, #8
 80195ea:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80195ec:	6013      	str	r3, [r2, #0]
 80195ee:	9801      	ldr	r0, [sp, #4]
 80195f0:	b011      	add	sp, #68	; 0x44
 80195f2:	ecbd 8b02 	vpop	{d8}
 80195f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80195fa:	4b8a      	ldr	r3, [pc, #552]	; (8019824 <_dtoa_r+0x2d4>)
 80195fc:	9301      	str	r3, [sp, #4]
 80195fe:	3303      	adds	r3, #3
 8019600:	e7f3      	b.n	80195ea <_dtoa_r+0x9a>
 8019602:	ed9d 8b02 	vldr	d8, [sp, #8]
 8019606:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801960a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801960e:	d10c      	bne.n	801962a <_dtoa_r+0xda>
 8019610:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019612:	2301      	movs	r3, #1
 8019614:	6013      	str	r3, [r2, #0]
 8019616:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019618:	2b00      	cmp	r3, #0
 801961a:	f000 84d7 	beq.w	8019fcc <_dtoa_r+0xa7c>
 801961e:	4b83      	ldr	r3, [pc, #524]	; (801982c <_dtoa_r+0x2dc>)
 8019620:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8019622:	6013      	str	r3, [r2, #0]
 8019624:	3b01      	subs	r3, #1
 8019626:	9301      	str	r3, [sp, #4]
 8019628:	e7e1      	b.n	80195ee <_dtoa_r+0x9e>
 801962a:	aa0e      	add	r2, sp, #56	; 0x38
 801962c:	a90f      	add	r1, sp, #60	; 0x3c
 801962e:	4630      	mov	r0, r6
 8019630:	eeb0 0b48 	vmov.f64	d0, d8
 8019634:	f001 f91a 	bl	801a86c <__d2b>
 8019638:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801963c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801963e:	4605      	mov	r5, r0
 8019640:	2b00      	cmp	r3, #0
 8019642:	d046      	beq.n	80196d2 <_dtoa_r+0x182>
 8019644:	eeb0 7b48 	vmov.f64	d7, d8
 8019648:	ee18 1a90 	vmov	r1, s17
 801964c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8019650:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8019654:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8019658:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801965c:	2000      	movs	r0, #0
 801965e:	ee07 1a90 	vmov	s15, r1
 8019662:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8019666:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8019800 <_dtoa_r+0x2b0>
 801966a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801966e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8019808 <_dtoa_r+0x2b8>
 8019672:	eea7 6b05 	vfma.f64	d6, d7, d5
 8019676:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8019810 <_dtoa_r+0x2c0>
 801967a:	ee07 3a90 	vmov	s15, r3
 801967e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8019682:	eeb0 7b46 	vmov.f64	d7, d6
 8019686:	eea4 7b05 	vfma.f64	d7, d4, d5
 801968a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801968e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8019692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019696:	ee16 ba90 	vmov	fp, s13
 801969a:	9009      	str	r0, [sp, #36]	; 0x24
 801969c:	d508      	bpl.n	80196b0 <_dtoa_r+0x160>
 801969e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80196a2:	eeb4 6b47 	vcmp.f64	d6, d7
 80196a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80196aa:	bf18      	it	ne
 80196ac:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80196b0:	f1bb 0f16 	cmp.w	fp, #22
 80196b4:	d82b      	bhi.n	801970e <_dtoa_r+0x1be>
 80196b6:	495e      	ldr	r1, [pc, #376]	; (8019830 <_dtoa_r+0x2e0>)
 80196b8:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80196bc:	ed91 7b00 	vldr	d7, [r1]
 80196c0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80196c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80196c8:	d501      	bpl.n	80196ce <_dtoa_r+0x17e>
 80196ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 80196ce:	2100      	movs	r1, #0
 80196d0:	e01e      	b.n	8019710 <_dtoa_r+0x1c0>
 80196d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80196d4:	4413      	add	r3, r2
 80196d6:	f203 4132 	addw	r1, r3, #1074	; 0x432
 80196da:	2920      	cmp	r1, #32
 80196dc:	bfc1      	itttt	gt
 80196de:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 80196e2:	408c      	lslgt	r4, r1
 80196e4:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 80196e8:	fa28 f101 	lsrgt.w	r1, r8, r1
 80196ec:	bfd6      	itet	le
 80196ee:	f1c1 0120 	rsble	r1, r1, #32
 80196f2:	4321      	orrgt	r1, r4
 80196f4:	fa08 f101 	lslle.w	r1, r8, r1
 80196f8:	ee07 1a90 	vmov	s15, r1
 80196fc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8019700:	3b01      	subs	r3, #1
 8019702:	ee17 1a90 	vmov	r1, s15
 8019706:	2001      	movs	r0, #1
 8019708:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 801970c:	e7a7      	b.n	801965e <_dtoa_r+0x10e>
 801970e:	2101      	movs	r1, #1
 8019710:	1ad2      	subs	r2, r2, r3
 8019712:	1e53      	subs	r3, r2, #1
 8019714:	9305      	str	r3, [sp, #20]
 8019716:	bf45      	ittet	mi
 8019718:	f1c2 0301 	rsbmi	r3, r2, #1
 801971c:	9304      	strmi	r3, [sp, #16]
 801971e:	2300      	movpl	r3, #0
 8019720:	2300      	movmi	r3, #0
 8019722:	bf4c      	ite	mi
 8019724:	9305      	strmi	r3, [sp, #20]
 8019726:	9304      	strpl	r3, [sp, #16]
 8019728:	f1bb 0f00 	cmp.w	fp, #0
 801972c:	910b      	str	r1, [sp, #44]	; 0x2c
 801972e:	db18      	blt.n	8019762 <_dtoa_r+0x212>
 8019730:	9b05      	ldr	r3, [sp, #20]
 8019732:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8019736:	445b      	add	r3, fp
 8019738:	9305      	str	r3, [sp, #20]
 801973a:	2300      	movs	r3, #0
 801973c:	9a06      	ldr	r2, [sp, #24]
 801973e:	2a09      	cmp	r2, #9
 8019740:	d848      	bhi.n	80197d4 <_dtoa_r+0x284>
 8019742:	2a05      	cmp	r2, #5
 8019744:	bfc4      	itt	gt
 8019746:	3a04      	subgt	r2, #4
 8019748:	9206      	strgt	r2, [sp, #24]
 801974a:	9a06      	ldr	r2, [sp, #24]
 801974c:	f1a2 0202 	sub.w	r2, r2, #2
 8019750:	bfcc      	ite	gt
 8019752:	2400      	movgt	r4, #0
 8019754:	2401      	movle	r4, #1
 8019756:	2a03      	cmp	r2, #3
 8019758:	d847      	bhi.n	80197ea <_dtoa_r+0x29a>
 801975a:	e8df f002 	tbb	[pc, r2]
 801975e:	2d0b      	.short	0x2d0b
 8019760:	392b      	.short	0x392b
 8019762:	9b04      	ldr	r3, [sp, #16]
 8019764:	2200      	movs	r2, #0
 8019766:	eba3 030b 	sub.w	r3, r3, fp
 801976a:	9304      	str	r3, [sp, #16]
 801976c:	920a      	str	r2, [sp, #40]	; 0x28
 801976e:	f1cb 0300 	rsb	r3, fp, #0
 8019772:	e7e3      	b.n	801973c <_dtoa_r+0x1ec>
 8019774:	2200      	movs	r2, #0
 8019776:	9207      	str	r2, [sp, #28]
 8019778:	9a08      	ldr	r2, [sp, #32]
 801977a:	2a00      	cmp	r2, #0
 801977c:	dc38      	bgt.n	80197f0 <_dtoa_r+0x2a0>
 801977e:	f04f 0a01 	mov.w	sl, #1
 8019782:	46d1      	mov	r9, sl
 8019784:	4652      	mov	r2, sl
 8019786:	f8cd a020 	str.w	sl, [sp, #32]
 801978a:	69f7      	ldr	r7, [r6, #28]
 801978c:	2100      	movs	r1, #0
 801978e:	2004      	movs	r0, #4
 8019790:	f100 0c14 	add.w	ip, r0, #20
 8019794:	4594      	cmp	ip, r2
 8019796:	d930      	bls.n	80197fa <_dtoa_r+0x2aa>
 8019798:	6079      	str	r1, [r7, #4]
 801979a:	4630      	mov	r0, r6
 801979c:	930d      	str	r3, [sp, #52]	; 0x34
 801979e:	f000 fd43 	bl	801a228 <_Balloc>
 80197a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80197a4:	9001      	str	r0, [sp, #4]
 80197a6:	4602      	mov	r2, r0
 80197a8:	2800      	cmp	r0, #0
 80197aa:	d145      	bne.n	8019838 <_dtoa_r+0x2e8>
 80197ac:	4b21      	ldr	r3, [pc, #132]	; (8019834 <_dtoa_r+0x2e4>)
 80197ae:	f240 11af 	movw	r1, #431	; 0x1af
 80197b2:	e6e5      	b.n	8019580 <_dtoa_r+0x30>
 80197b4:	2201      	movs	r2, #1
 80197b6:	e7de      	b.n	8019776 <_dtoa_r+0x226>
 80197b8:	2200      	movs	r2, #0
 80197ba:	9207      	str	r2, [sp, #28]
 80197bc:	9a08      	ldr	r2, [sp, #32]
 80197be:	eb0b 0a02 	add.w	sl, fp, r2
 80197c2:	f10a 0901 	add.w	r9, sl, #1
 80197c6:	464a      	mov	r2, r9
 80197c8:	2a01      	cmp	r2, #1
 80197ca:	bfb8      	it	lt
 80197cc:	2201      	movlt	r2, #1
 80197ce:	e7dc      	b.n	801978a <_dtoa_r+0x23a>
 80197d0:	2201      	movs	r2, #1
 80197d2:	e7f2      	b.n	80197ba <_dtoa_r+0x26a>
 80197d4:	2401      	movs	r4, #1
 80197d6:	2200      	movs	r2, #0
 80197d8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 80197dc:	f04f 3aff 	mov.w	sl, #4294967295
 80197e0:	2100      	movs	r1, #0
 80197e2:	46d1      	mov	r9, sl
 80197e4:	2212      	movs	r2, #18
 80197e6:	9108      	str	r1, [sp, #32]
 80197e8:	e7cf      	b.n	801978a <_dtoa_r+0x23a>
 80197ea:	2201      	movs	r2, #1
 80197ec:	9207      	str	r2, [sp, #28]
 80197ee:	e7f5      	b.n	80197dc <_dtoa_r+0x28c>
 80197f0:	f8dd a020 	ldr.w	sl, [sp, #32]
 80197f4:	46d1      	mov	r9, sl
 80197f6:	4652      	mov	r2, sl
 80197f8:	e7c7      	b.n	801978a <_dtoa_r+0x23a>
 80197fa:	3101      	adds	r1, #1
 80197fc:	0040      	lsls	r0, r0, #1
 80197fe:	e7c7      	b.n	8019790 <_dtoa_r+0x240>
 8019800:	636f4361 	.word	0x636f4361
 8019804:	3fd287a7 	.word	0x3fd287a7
 8019808:	8b60c8b3 	.word	0x8b60c8b3
 801980c:	3fc68a28 	.word	0x3fc68a28
 8019810:	509f79fb 	.word	0x509f79fb
 8019814:	3fd34413 	.word	0x3fd34413
 8019818:	0801e1de 	.word	0x0801e1de
 801981c:	0801e3cb 	.word	0x0801e3cb
 8019820:	7ff00000 	.word	0x7ff00000
 8019824:	0801e3c7 	.word	0x0801e3c7
 8019828:	0801e3be 	.word	0x0801e3be
 801982c:	0801e35f 	.word	0x0801e35f
 8019830:	0801e4b8 	.word	0x0801e4b8
 8019834:	0801e423 	.word	0x0801e423
 8019838:	69f2      	ldr	r2, [r6, #28]
 801983a:	9901      	ldr	r1, [sp, #4]
 801983c:	6011      	str	r1, [r2, #0]
 801983e:	f1b9 0f0e 	cmp.w	r9, #14
 8019842:	d86c      	bhi.n	801991e <_dtoa_r+0x3ce>
 8019844:	2c00      	cmp	r4, #0
 8019846:	d06a      	beq.n	801991e <_dtoa_r+0x3ce>
 8019848:	f1bb 0f00 	cmp.w	fp, #0
 801984c:	f340 80a0 	ble.w	8019990 <_dtoa_r+0x440>
 8019850:	4ac1      	ldr	r2, [pc, #772]	; (8019b58 <_dtoa_r+0x608>)
 8019852:	f00b 010f 	and.w	r1, fp, #15
 8019856:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801985a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801985e:	ed92 7b00 	vldr	d7, [r2]
 8019862:	ea4f 122b 	mov.w	r2, fp, asr #4
 8019866:	f000 8087 	beq.w	8019978 <_dtoa_r+0x428>
 801986a:	49bc      	ldr	r1, [pc, #752]	; (8019b5c <_dtoa_r+0x60c>)
 801986c:	ed91 6b08 	vldr	d6, [r1, #32]
 8019870:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8019874:	ed8d 6b02 	vstr	d6, [sp, #8]
 8019878:	f002 020f 	and.w	r2, r2, #15
 801987c:	2103      	movs	r1, #3
 801987e:	48b7      	ldr	r0, [pc, #732]	; (8019b5c <_dtoa_r+0x60c>)
 8019880:	2a00      	cmp	r2, #0
 8019882:	d17b      	bne.n	801997c <_dtoa_r+0x42c>
 8019884:	ed9d 6b02 	vldr	d6, [sp, #8]
 8019888:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801988c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8019890:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019892:	ed9d 7b02 	vldr	d7, [sp, #8]
 8019896:	2a00      	cmp	r2, #0
 8019898:	f000 80a0 	beq.w	80199dc <_dtoa_r+0x48c>
 801989c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80198a0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80198a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198a8:	f140 8098 	bpl.w	80199dc <_dtoa_r+0x48c>
 80198ac:	f1b9 0f00 	cmp.w	r9, #0
 80198b0:	f000 8094 	beq.w	80199dc <_dtoa_r+0x48c>
 80198b4:	f1ba 0f00 	cmp.w	sl, #0
 80198b8:	dd2f      	ble.n	801991a <_dtoa_r+0x3ca>
 80198ba:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80198be:	ee27 7b06 	vmul.f64	d7, d7, d6
 80198c2:	ed8d 7b02 	vstr	d7, [sp, #8]
 80198c6:	f10b 32ff 	add.w	r2, fp, #4294967295
 80198ca:	3101      	adds	r1, #1
 80198cc:	4654      	mov	r4, sl
 80198ce:	ed9d 6b02 	vldr	d6, [sp, #8]
 80198d2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80198d6:	ee07 1a90 	vmov	s15, r1
 80198da:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80198de:	eea7 5b06 	vfma.f64	d5, d7, d6
 80198e2:	ee15 7a90 	vmov	r7, s11
 80198e6:	ec51 0b15 	vmov	r0, r1, d5
 80198ea:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 80198ee:	2c00      	cmp	r4, #0
 80198f0:	d177      	bne.n	80199e2 <_dtoa_r+0x492>
 80198f2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80198f6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80198fa:	ec41 0b17 	vmov	d7, r0, r1
 80198fe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8019902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019906:	f300 826a 	bgt.w	8019dde <_dtoa_r+0x88e>
 801990a:	eeb1 7b47 	vneg.f64	d7, d7
 801990e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8019912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019916:	f100 8260 	bmi.w	8019dda <_dtoa_r+0x88a>
 801991a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801991e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019920:	2a00      	cmp	r2, #0
 8019922:	f2c0 811d 	blt.w	8019b60 <_dtoa_r+0x610>
 8019926:	f1bb 0f0e 	cmp.w	fp, #14
 801992a:	f300 8119 	bgt.w	8019b60 <_dtoa_r+0x610>
 801992e:	4b8a      	ldr	r3, [pc, #552]	; (8019b58 <_dtoa_r+0x608>)
 8019930:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8019934:	ed93 6b00 	vldr	d6, [r3]
 8019938:	9b08      	ldr	r3, [sp, #32]
 801993a:	2b00      	cmp	r3, #0
 801993c:	f280 80b7 	bge.w	8019aae <_dtoa_r+0x55e>
 8019940:	f1b9 0f00 	cmp.w	r9, #0
 8019944:	f300 80b3 	bgt.w	8019aae <_dtoa_r+0x55e>
 8019948:	f040 8246 	bne.w	8019dd8 <_dtoa_r+0x888>
 801994c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8019950:	ee26 6b07 	vmul.f64	d6, d6, d7
 8019954:	ed9d 7b02 	vldr	d7, [sp, #8]
 8019958:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801995c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019960:	464c      	mov	r4, r9
 8019962:	464f      	mov	r7, r9
 8019964:	f280 821c 	bge.w	8019da0 <_dtoa_r+0x850>
 8019968:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801996c:	2331      	movs	r3, #49	; 0x31
 801996e:	f808 3b01 	strb.w	r3, [r8], #1
 8019972:	f10b 0b01 	add.w	fp, fp, #1
 8019976:	e218      	b.n	8019daa <_dtoa_r+0x85a>
 8019978:	2102      	movs	r1, #2
 801997a:	e780      	b.n	801987e <_dtoa_r+0x32e>
 801997c:	07d4      	lsls	r4, r2, #31
 801997e:	d504      	bpl.n	801998a <_dtoa_r+0x43a>
 8019980:	ed90 6b00 	vldr	d6, [r0]
 8019984:	3101      	adds	r1, #1
 8019986:	ee27 7b06 	vmul.f64	d7, d7, d6
 801998a:	1052      	asrs	r2, r2, #1
 801998c:	3008      	adds	r0, #8
 801998e:	e777      	b.n	8019880 <_dtoa_r+0x330>
 8019990:	d022      	beq.n	80199d8 <_dtoa_r+0x488>
 8019992:	f1cb 0200 	rsb	r2, fp, #0
 8019996:	4970      	ldr	r1, [pc, #448]	; (8019b58 <_dtoa_r+0x608>)
 8019998:	f002 000f 	and.w	r0, r2, #15
 801999c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80199a0:	ed91 7b00 	vldr	d7, [r1]
 80199a4:	ee28 7b07 	vmul.f64	d7, d8, d7
 80199a8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80199ac:	486b      	ldr	r0, [pc, #428]	; (8019b5c <_dtoa_r+0x60c>)
 80199ae:	1112      	asrs	r2, r2, #4
 80199b0:	2400      	movs	r4, #0
 80199b2:	2102      	movs	r1, #2
 80199b4:	b92a      	cbnz	r2, 80199c2 <_dtoa_r+0x472>
 80199b6:	2c00      	cmp	r4, #0
 80199b8:	f43f af6a 	beq.w	8019890 <_dtoa_r+0x340>
 80199bc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80199c0:	e766      	b.n	8019890 <_dtoa_r+0x340>
 80199c2:	07d7      	lsls	r7, r2, #31
 80199c4:	d505      	bpl.n	80199d2 <_dtoa_r+0x482>
 80199c6:	ed90 6b00 	vldr	d6, [r0]
 80199ca:	3101      	adds	r1, #1
 80199cc:	2401      	movs	r4, #1
 80199ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 80199d2:	1052      	asrs	r2, r2, #1
 80199d4:	3008      	adds	r0, #8
 80199d6:	e7ed      	b.n	80199b4 <_dtoa_r+0x464>
 80199d8:	2102      	movs	r1, #2
 80199da:	e759      	b.n	8019890 <_dtoa_r+0x340>
 80199dc:	465a      	mov	r2, fp
 80199de:	464c      	mov	r4, r9
 80199e0:	e775      	b.n	80198ce <_dtoa_r+0x37e>
 80199e2:	ec41 0b17 	vmov	d7, r0, r1
 80199e6:	495c      	ldr	r1, [pc, #368]	; (8019b58 <_dtoa_r+0x608>)
 80199e8:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80199ec:	ed11 4b02 	vldr	d4, [r1, #-8]
 80199f0:	9901      	ldr	r1, [sp, #4]
 80199f2:	440c      	add	r4, r1
 80199f4:	9907      	ldr	r1, [sp, #28]
 80199f6:	b351      	cbz	r1, 8019a4e <_dtoa_r+0x4fe>
 80199f8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80199fc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8019a00:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8019a04:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8019a08:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8019a0c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8019a10:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8019a14:	ee14 1a90 	vmov	r1, s9
 8019a18:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8019a1c:	3130      	adds	r1, #48	; 0x30
 8019a1e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8019a22:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8019a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a2a:	f808 1b01 	strb.w	r1, [r8], #1
 8019a2e:	d439      	bmi.n	8019aa4 <_dtoa_r+0x554>
 8019a30:	ee32 5b46 	vsub.f64	d5, d2, d6
 8019a34:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8019a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a3c:	d472      	bmi.n	8019b24 <_dtoa_r+0x5d4>
 8019a3e:	45a0      	cmp	r8, r4
 8019a40:	f43f af6b 	beq.w	801991a <_dtoa_r+0x3ca>
 8019a44:	ee27 7b03 	vmul.f64	d7, d7, d3
 8019a48:	ee26 6b03 	vmul.f64	d6, d6, d3
 8019a4c:	e7e0      	b.n	8019a10 <_dtoa_r+0x4c0>
 8019a4e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8019a52:	ee27 7b04 	vmul.f64	d7, d7, d4
 8019a56:	4620      	mov	r0, r4
 8019a58:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8019a5c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8019a60:	ee14 1a90 	vmov	r1, s9
 8019a64:	3130      	adds	r1, #48	; 0x30
 8019a66:	f808 1b01 	strb.w	r1, [r8], #1
 8019a6a:	45a0      	cmp	r8, r4
 8019a6c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8019a70:	ee36 6b45 	vsub.f64	d6, d6, d5
 8019a74:	d118      	bne.n	8019aa8 <_dtoa_r+0x558>
 8019a76:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8019a7a:	ee37 4b05 	vadd.f64	d4, d7, d5
 8019a7e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8019a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a86:	dc4d      	bgt.n	8019b24 <_dtoa_r+0x5d4>
 8019a88:	ee35 5b47 	vsub.f64	d5, d5, d7
 8019a8c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8019a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a94:	f57f af41 	bpl.w	801991a <_dtoa_r+0x3ca>
 8019a98:	4680      	mov	r8, r0
 8019a9a:	3801      	subs	r0, #1
 8019a9c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8019aa0:	2b30      	cmp	r3, #48	; 0x30
 8019aa2:	d0f9      	beq.n	8019a98 <_dtoa_r+0x548>
 8019aa4:	4693      	mov	fp, r2
 8019aa6:	e02a      	b.n	8019afe <_dtoa_r+0x5ae>
 8019aa8:	ee26 6b03 	vmul.f64	d6, d6, d3
 8019aac:	e7d6      	b.n	8019a5c <_dtoa_r+0x50c>
 8019aae:	ed9d 7b02 	vldr	d7, [sp, #8]
 8019ab2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8019ab6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8019aba:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8019abe:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8019ac2:	ee15 3a10 	vmov	r3, s10
 8019ac6:	3330      	adds	r3, #48	; 0x30
 8019ac8:	f808 3b01 	strb.w	r3, [r8], #1
 8019acc:	9b01      	ldr	r3, [sp, #4]
 8019ace:	eba8 0303 	sub.w	r3, r8, r3
 8019ad2:	4599      	cmp	r9, r3
 8019ad4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8019ad8:	eea3 7b46 	vfms.f64	d7, d3, d6
 8019adc:	d133      	bne.n	8019b46 <_dtoa_r+0x5f6>
 8019ade:	ee37 7b07 	vadd.f64	d7, d7, d7
 8019ae2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8019ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019aea:	dc1a      	bgt.n	8019b22 <_dtoa_r+0x5d2>
 8019aec:	eeb4 7b46 	vcmp.f64	d7, d6
 8019af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019af4:	d103      	bne.n	8019afe <_dtoa_r+0x5ae>
 8019af6:	ee15 3a10 	vmov	r3, s10
 8019afa:	07d9      	lsls	r1, r3, #31
 8019afc:	d411      	bmi.n	8019b22 <_dtoa_r+0x5d2>
 8019afe:	4629      	mov	r1, r5
 8019b00:	4630      	mov	r0, r6
 8019b02:	f000 fbd1 	bl	801a2a8 <_Bfree>
 8019b06:	2300      	movs	r3, #0
 8019b08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019b0a:	f888 3000 	strb.w	r3, [r8]
 8019b0e:	f10b 0301 	add.w	r3, fp, #1
 8019b12:	6013      	str	r3, [r2, #0]
 8019b14:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019b16:	2b00      	cmp	r3, #0
 8019b18:	f43f ad69 	beq.w	80195ee <_dtoa_r+0x9e>
 8019b1c:	f8c3 8000 	str.w	r8, [r3]
 8019b20:	e565      	b.n	80195ee <_dtoa_r+0x9e>
 8019b22:	465a      	mov	r2, fp
 8019b24:	4643      	mov	r3, r8
 8019b26:	4698      	mov	r8, r3
 8019b28:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8019b2c:	2939      	cmp	r1, #57	; 0x39
 8019b2e:	d106      	bne.n	8019b3e <_dtoa_r+0x5ee>
 8019b30:	9901      	ldr	r1, [sp, #4]
 8019b32:	4299      	cmp	r1, r3
 8019b34:	d1f7      	bne.n	8019b26 <_dtoa_r+0x5d6>
 8019b36:	9801      	ldr	r0, [sp, #4]
 8019b38:	2130      	movs	r1, #48	; 0x30
 8019b3a:	3201      	adds	r2, #1
 8019b3c:	7001      	strb	r1, [r0, #0]
 8019b3e:	7819      	ldrb	r1, [r3, #0]
 8019b40:	3101      	adds	r1, #1
 8019b42:	7019      	strb	r1, [r3, #0]
 8019b44:	e7ae      	b.n	8019aa4 <_dtoa_r+0x554>
 8019b46:	ee27 7b04 	vmul.f64	d7, d7, d4
 8019b4a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8019b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019b52:	d1b2      	bne.n	8019aba <_dtoa_r+0x56a>
 8019b54:	e7d3      	b.n	8019afe <_dtoa_r+0x5ae>
 8019b56:	bf00      	nop
 8019b58:	0801e4b8 	.word	0x0801e4b8
 8019b5c:	0801e490 	.word	0x0801e490
 8019b60:	9907      	ldr	r1, [sp, #28]
 8019b62:	2900      	cmp	r1, #0
 8019b64:	f000 80d0 	beq.w	8019d08 <_dtoa_r+0x7b8>
 8019b68:	9906      	ldr	r1, [sp, #24]
 8019b6a:	2901      	cmp	r1, #1
 8019b6c:	f300 80b4 	bgt.w	8019cd8 <_dtoa_r+0x788>
 8019b70:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019b72:	2900      	cmp	r1, #0
 8019b74:	f000 80ac 	beq.w	8019cd0 <_dtoa_r+0x780>
 8019b78:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8019b7c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8019b80:	461c      	mov	r4, r3
 8019b82:	9309      	str	r3, [sp, #36]	; 0x24
 8019b84:	9b04      	ldr	r3, [sp, #16]
 8019b86:	4413      	add	r3, r2
 8019b88:	9304      	str	r3, [sp, #16]
 8019b8a:	9b05      	ldr	r3, [sp, #20]
 8019b8c:	2101      	movs	r1, #1
 8019b8e:	4413      	add	r3, r2
 8019b90:	4630      	mov	r0, r6
 8019b92:	9305      	str	r3, [sp, #20]
 8019b94:	f000 fc3e 	bl	801a414 <__i2b>
 8019b98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019b9a:	4607      	mov	r7, r0
 8019b9c:	f1b8 0f00 	cmp.w	r8, #0
 8019ba0:	d00d      	beq.n	8019bbe <_dtoa_r+0x66e>
 8019ba2:	9a05      	ldr	r2, [sp, #20]
 8019ba4:	2a00      	cmp	r2, #0
 8019ba6:	dd0a      	ble.n	8019bbe <_dtoa_r+0x66e>
 8019ba8:	4542      	cmp	r2, r8
 8019baa:	9904      	ldr	r1, [sp, #16]
 8019bac:	bfa8      	it	ge
 8019bae:	4642      	movge	r2, r8
 8019bb0:	1a89      	subs	r1, r1, r2
 8019bb2:	9104      	str	r1, [sp, #16]
 8019bb4:	9905      	ldr	r1, [sp, #20]
 8019bb6:	eba8 0802 	sub.w	r8, r8, r2
 8019bba:	1a8a      	subs	r2, r1, r2
 8019bbc:	9205      	str	r2, [sp, #20]
 8019bbe:	b303      	cbz	r3, 8019c02 <_dtoa_r+0x6b2>
 8019bc0:	9a07      	ldr	r2, [sp, #28]
 8019bc2:	2a00      	cmp	r2, #0
 8019bc4:	f000 80a5 	beq.w	8019d12 <_dtoa_r+0x7c2>
 8019bc8:	2c00      	cmp	r4, #0
 8019bca:	dd13      	ble.n	8019bf4 <_dtoa_r+0x6a4>
 8019bcc:	4639      	mov	r1, r7
 8019bce:	4622      	mov	r2, r4
 8019bd0:	4630      	mov	r0, r6
 8019bd2:	930d      	str	r3, [sp, #52]	; 0x34
 8019bd4:	f000 fcde 	bl	801a594 <__pow5mult>
 8019bd8:	462a      	mov	r2, r5
 8019bda:	4601      	mov	r1, r0
 8019bdc:	4607      	mov	r7, r0
 8019bde:	4630      	mov	r0, r6
 8019be0:	f000 fc2e 	bl	801a440 <__multiply>
 8019be4:	4629      	mov	r1, r5
 8019be6:	9009      	str	r0, [sp, #36]	; 0x24
 8019be8:	4630      	mov	r0, r6
 8019bea:	f000 fb5d 	bl	801a2a8 <_Bfree>
 8019bee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019bf0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019bf2:	4615      	mov	r5, r2
 8019bf4:	1b1a      	subs	r2, r3, r4
 8019bf6:	d004      	beq.n	8019c02 <_dtoa_r+0x6b2>
 8019bf8:	4629      	mov	r1, r5
 8019bfa:	4630      	mov	r0, r6
 8019bfc:	f000 fcca 	bl	801a594 <__pow5mult>
 8019c00:	4605      	mov	r5, r0
 8019c02:	2101      	movs	r1, #1
 8019c04:	4630      	mov	r0, r6
 8019c06:	f000 fc05 	bl	801a414 <__i2b>
 8019c0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019c0c:	2b00      	cmp	r3, #0
 8019c0e:	4604      	mov	r4, r0
 8019c10:	f340 8081 	ble.w	8019d16 <_dtoa_r+0x7c6>
 8019c14:	461a      	mov	r2, r3
 8019c16:	4601      	mov	r1, r0
 8019c18:	4630      	mov	r0, r6
 8019c1a:	f000 fcbb 	bl	801a594 <__pow5mult>
 8019c1e:	9b06      	ldr	r3, [sp, #24]
 8019c20:	2b01      	cmp	r3, #1
 8019c22:	4604      	mov	r4, r0
 8019c24:	dd7a      	ble.n	8019d1c <_dtoa_r+0x7cc>
 8019c26:	2300      	movs	r3, #0
 8019c28:	9309      	str	r3, [sp, #36]	; 0x24
 8019c2a:	6922      	ldr	r2, [r4, #16]
 8019c2c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8019c30:	6910      	ldr	r0, [r2, #16]
 8019c32:	f000 fba1 	bl	801a378 <__hi0bits>
 8019c36:	f1c0 0020 	rsb	r0, r0, #32
 8019c3a:	9b05      	ldr	r3, [sp, #20]
 8019c3c:	4418      	add	r0, r3
 8019c3e:	f010 001f 	ands.w	r0, r0, #31
 8019c42:	f000 8093 	beq.w	8019d6c <_dtoa_r+0x81c>
 8019c46:	f1c0 0220 	rsb	r2, r0, #32
 8019c4a:	2a04      	cmp	r2, #4
 8019c4c:	f340 8085 	ble.w	8019d5a <_dtoa_r+0x80a>
 8019c50:	9b04      	ldr	r3, [sp, #16]
 8019c52:	f1c0 001c 	rsb	r0, r0, #28
 8019c56:	4403      	add	r3, r0
 8019c58:	9304      	str	r3, [sp, #16]
 8019c5a:	9b05      	ldr	r3, [sp, #20]
 8019c5c:	4480      	add	r8, r0
 8019c5e:	4403      	add	r3, r0
 8019c60:	9305      	str	r3, [sp, #20]
 8019c62:	9b04      	ldr	r3, [sp, #16]
 8019c64:	2b00      	cmp	r3, #0
 8019c66:	dd05      	ble.n	8019c74 <_dtoa_r+0x724>
 8019c68:	4629      	mov	r1, r5
 8019c6a:	461a      	mov	r2, r3
 8019c6c:	4630      	mov	r0, r6
 8019c6e:	f000 fceb 	bl	801a648 <__lshift>
 8019c72:	4605      	mov	r5, r0
 8019c74:	9b05      	ldr	r3, [sp, #20]
 8019c76:	2b00      	cmp	r3, #0
 8019c78:	dd05      	ble.n	8019c86 <_dtoa_r+0x736>
 8019c7a:	4621      	mov	r1, r4
 8019c7c:	461a      	mov	r2, r3
 8019c7e:	4630      	mov	r0, r6
 8019c80:	f000 fce2 	bl	801a648 <__lshift>
 8019c84:	4604      	mov	r4, r0
 8019c86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019c88:	2b00      	cmp	r3, #0
 8019c8a:	d071      	beq.n	8019d70 <_dtoa_r+0x820>
 8019c8c:	4621      	mov	r1, r4
 8019c8e:	4628      	mov	r0, r5
 8019c90:	f000 fd46 	bl	801a720 <__mcmp>
 8019c94:	2800      	cmp	r0, #0
 8019c96:	da6b      	bge.n	8019d70 <_dtoa_r+0x820>
 8019c98:	2300      	movs	r3, #0
 8019c9a:	4629      	mov	r1, r5
 8019c9c:	220a      	movs	r2, #10
 8019c9e:	4630      	mov	r0, r6
 8019ca0:	f000 fb24 	bl	801a2ec <__multadd>
 8019ca4:	9b07      	ldr	r3, [sp, #28]
 8019ca6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8019caa:	4605      	mov	r5, r0
 8019cac:	2b00      	cmp	r3, #0
 8019cae:	f000 8197 	beq.w	8019fe0 <_dtoa_r+0xa90>
 8019cb2:	4639      	mov	r1, r7
 8019cb4:	2300      	movs	r3, #0
 8019cb6:	220a      	movs	r2, #10
 8019cb8:	4630      	mov	r0, r6
 8019cba:	f000 fb17 	bl	801a2ec <__multadd>
 8019cbe:	f1ba 0f00 	cmp.w	sl, #0
 8019cc2:	4607      	mov	r7, r0
 8019cc4:	f300 8093 	bgt.w	8019dee <_dtoa_r+0x89e>
 8019cc8:	9b06      	ldr	r3, [sp, #24]
 8019cca:	2b02      	cmp	r3, #2
 8019ccc:	dc57      	bgt.n	8019d7e <_dtoa_r+0x82e>
 8019cce:	e08e      	b.n	8019dee <_dtoa_r+0x89e>
 8019cd0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019cd2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8019cd6:	e751      	b.n	8019b7c <_dtoa_r+0x62c>
 8019cd8:	f109 34ff 	add.w	r4, r9, #4294967295
 8019cdc:	42a3      	cmp	r3, r4
 8019cde:	bfbf      	itttt	lt
 8019ce0:	1ae2      	sublt	r2, r4, r3
 8019ce2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8019ce4:	189b      	addlt	r3, r3, r2
 8019ce6:	930a      	strlt	r3, [sp, #40]	; 0x28
 8019ce8:	bfae      	itee	ge
 8019cea:	1b1c      	subge	r4, r3, r4
 8019cec:	4623      	movlt	r3, r4
 8019cee:	2400      	movlt	r4, #0
 8019cf0:	f1b9 0f00 	cmp.w	r9, #0
 8019cf4:	bfb5      	itete	lt
 8019cf6:	9a04      	ldrlt	r2, [sp, #16]
 8019cf8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8019cfc:	eba2 0809 	sublt.w	r8, r2, r9
 8019d00:	464a      	movge	r2, r9
 8019d02:	bfb8      	it	lt
 8019d04:	2200      	movlt	r2, #0
 8019d06:	e73c      	b.n	8019b82 <_dtoa_r+0x632>
 8019d08:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8019d0c:	9f07      	ldr	r7, [sp, #28]
 8019d0e:	461c      	mov	r4, r3
 8019d10:	e744      	b.n	8019b9c <_dtoa_r+0x64c>
 8019d12:	461a      	mov	r2, r3
 8019d14:	e770      	b.n	8019bf8 <_dtoa_r+0x6a8>
 8019d16:	9b06      	ldr	r3, [sp, #24]
 8019d18:	2b01      	cmp	r3, #1
 8019d1a:	dc18      	bgt.n	8019d4e <_dtoa_r+0x7fe>
 8019d1c:	9b02      	ldr	r3, [sp, #8]
 8019d1e:	b9b3      	cbnz	r3, 8019d4e <_dtoa_r+0x7fe>
 8019d20:	9b03      	ldr	r3, [sp, #12]
 8019d22:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8019d26:	b9a2      	cbnz	r2, 8019d52 <_dtoa_r+0x802>
 8019d28:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8019d2c:	0d12      	lsrs	r2, r2, #20
 8019d2e:	0512      	lsls	r2, r2, #20
 8019d30:	b18a      	cbz	r2, 8019d56 <_dtoa_r+0x806>
 8019d32:	9b04      	ldr	r3, [sp, #16]
 8019d34:	3301      	adds	r3, #1
 8019d36:	9304      	str	r3, [sp, #16]
 8019d38:	9b05      	ldr	r3, [sp, #20]
 8019d3a:	3301      	adds	r3, #1
 8019d3c:	9305      	str	r3, [sp, #20]
 8019d3e:	2301      	movs	r3, #1
 8019d40:	9309      	str	r3, [sp, #36]	; 0x24
 8019d42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019d44:	2b00      	cmp	r3, #0
 8019d46:	f47f af70 	bne.w	8019c2a <_dtoa_r+0x6da>
 8019d4a:	2001      	movs	r0, #1
 8019d4c:	e775      	b.n	8019c3a <_dtoa_r+0x6ea>
 8019d4e:	2300      	movs	r3, #0
 8019d50:	e7f6      	b.n	8019d40 <_dtoa_r+0x7f0>
 8019d52:	9b02      	ldr	r3, [sp, #8]
 8019d54:	e7f4      	b.n	8019d40 <_dtoa_r+0x7f0>
 8019d56:	9209      	str	r2, [sp, #36]	; 0x24
 8019d58:	e7f3      	b.n	8019d42 <_dtoa_r+0x7f2>
 8019d5a:	d082      	beq.n	8019c62 <_dtoa_r+0x712>
 8019d5c:	9b04      	ldr	r3, [sp, #16]
 8019d5e:	321c      	adds	r2, #28
 8019d60:	4413      	add	r3, r2
 8019d62:	9304      	str	r3, [sp, #16]
 8019d64:	9b05      	ldr	r3, [sp, #20]
 8019d66:	4490      	add	r8, r2
 8019d68:	4413      	add	r3, r2
 8019d6a:	e779      	b.n	8019c60 <_dtoa_r+0x710>
 8019d6c:	4602      	mov	r2, r0
 8019d6e:	e7f5      	b.n	8019d5c <_dtoa_r+0x80c>
 8019d70:	f1b9 0f00 	cmp.w	r9, #0
 8019d74:	dc36      	bgt.n	8019de4 <_dtoa_r+0x894>
 8019d76:	9b06      	ldr	r3, [sp, #24]
 8019d78:	2b02      	cmp	r3, #2
 8019d7a:	dd33      	ble.n	8019de4 <_dtoa_r+0x894>
 8019d7c:	46ca      	mov	sl, r9
 8019d7e:	f1ba 0f00 	cmp.w	sl, #0
 8019d82:	d10d      	bne.n	8019da0 <_dtoa_r+0x850>
 8019d84:	4621      	mov	r1, r4
 8019d86:	4653      	mov	r3, sl
 8019d88:	2205      	movs	r2, #5
 8019d8a:	4630      	mov	r0, r6
 8019d8c:	f000 faae 	bl	801a2ec <__multadd>
 8019d90:	4601      	mov	r1, r0
 8019d92:	4604      	mov	r4, r0
 8019d94:	4628      	mov	r0, r5
 8019d96:	f000 fcc3 	bl	801a720 <__mcmp>
 8019d9a:	2800      	cmp	r0, #0
 8019d9c:	f73f ade4 	bgt.w	8019968 <_dtoa_r+0x418>
 8019da0:	9b08      	ldr	r3, [sp, #32]
 8019da2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8019da6:	ea6f 0b03 	mvn.w	fp, r3
 8019daa:	f04f 0900 	mov.w	r9, #0
 8019dae:	4621      	mov	r1, r4
 8019db0:	4630      	mov	r0, r6
 8019db2:	f000 fa79 	bl	801a2a8 <_Bfree>
 8019db6:	2f00      	cmp	r7, #0
 8019db8:	f43f aea1 	beq.w	8019afe <_dtoa_r+0x5ae>
 8019dbc:	f1b9 0f00 	cmp.w	r9, #0
 8019dc0:	d005      	beq.n	8019dce <_dtoa_r+0x87e>
 8019dc2:	45b9      	cmp	r9, r7
 8019dc4:	d003      	beq.n	8019dce <_dtoa_r+0x87e>
 8019dc6:	4649      	mov	r1, r9
 8019dc8:	4630      	mov	r0, r6
 8019dca:	f000 fa6d 	bl	801a2a8 <_Bfree>
 8019dce:	4639      	mov	r1, r7
 8019dd0:	4630      	mov	r0, r6
 8019dd2:	f000 fa69 	bl	801a2a8 <_Bfree>
 8019dd6:	e692      	b.n	8019afe <_dtoa_r+0x5ae>
 8019dd8:	2400      	movs	r4, #0
 8019dda:	4627      	mov	r7, r4
 8019ddc:	e7e0      	b.n	8019da0 <_dtoa_r+0x850>
 8019dde:	4693      	mov	fp, r2
 8019de0:	4627      	mov	r7, r4
 8019de2:	e5c1      	b.n	8019968 <_dtoa_r+0x418>
 8019de4:	9b07      	ldr	r3, [sp, #28]
 8019de6:	46ca      	mov	sl, r9
 8019de8:	2b00      	cmp	r3, #0
 8019dea:	f000 8100 	beq.w	8019fee <_dtoa_r+0xa9e>
 8019dee:	f1b8 0f00 	cmp.w	r8, #0
 8019df2:	dd05      	ble.n	8019e00 <_dtoa_r+0x8b0>
 8019df4:	4639      	mov	r1, r7
 8019df6:	4642      	mov	r2, r8
 8019df8:	4630      	mov	r0, r6
 8019dfa:	f000 fc25 	bl	801a648 <__lshift>
 8019dfe:	4607      	mov	r7, r0
 8019e00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019e02:	2b00      	cmp	r3, #0
 8019e04:	d05d      	beq.n	8019ec2 <_dtoa_r+0x972>
 8019e06:	6879      	ldr	r1, [r7, #4]
 8019e08:	4630      	mov	r0, r6
 8019e0a:	f000 fa0d 	bl	801a228 <_Balloc>
 8019e0e:	4680      	mov	r8, r0
 8019e10:	b928      	cbnz	r0, 8019e1e <_dtoa_r+0x8ce>
 8019e12:	4b82      	ldr	r3, [pc, #520]	; (801a01c <_dtoa_r+0xacc>)
 8019e14:	4602      	mov	r2, r0
 8019e16:	f240 21ef 	movw	r1, #751	; 0x2ef
 8019e1a:	f7ff bbb1 	b.w	8019580 <_dtoa_r+0x30>
 8019e1e:	693a      	ldr	r2, [r7, #16]
 8019e20:	3202      	adds	r2, #2
 8019e22:	0092      	lsls	r2, r2, #2
 8019e24:	f107 010c 	add.w	r1, r7, #12
 8019e28:	300c      	adds	r0, #12
 8019e2a:	f7ff fadd 	bl	80193e8 <memcpy>
 8019e2e:	2201      	movs	r2, #1
 8019e30:	4641      	mov	r1, r8
 8019e32:	4630      	mov	r0, r6
 8019e34:	f000 fc08 	bl	801a648 <__lshift>
 8019e38:	9b01      	ldr	r3, [sp, #4]
 8019e3a:	3301      	adds	r3, #1
 8019e3c:	9304      	str	r3, [sp, #16]
 8019e3e:	9b01      	ldr	r3, [sp, #4]
 8019e40:	4453      	add	r3, sl
 8019e42:	9308      	str	r3, [sp, #32]
 8019e44:	9b02      	ldr	r3, [sp, #8]
 8019e46:	f003 0301 	and.w	r3, r3, #1
 8019e4a:	46b9      	mov	r9, r7
 8019e4c:	9307      	str	r3, [sp, #28]
 8019e4e:	4607      	mov	r7, r0
 8019e50:	9b04      	ldr	r3, [sp, #16]
 8019e52:	4621      	mov	r1, r4
 8019e54:	3b01      	subs	r3, #1
 8019e56:	4628      	mov	r0, r5
 8019e58:	9302      	str	r3, [sp, #8]
 8019e5a:	f7ff faf1 	bl	8019440 <quorem>
 8019e5e:	4603      	mov	r3, r0
 8019e60:	3330      	adds	r3, #48	; 0x30
 8019e62:	9005      	str	r0, [sp, #20]
 8019e64:	4649      	mov	r1, r9
 8019e66:	4628      	mov	r0, r5
 8019e68:	9309      	str	r3, [sp, #36]	; 0x24
 8019e6a:	f000 fc59 	bl	801a720 <__mcmp>
 8019e6e:	463a      	mov	r2, r7
 8019e70:	4682      	mov	sl, r0
 8019e72:	4621      	mov	r1, r4
 8019e74:	4630      	mov	r0, r6
 8019e76:	f000 fc6f 	bl	801a758 <__mdiff>
 8019e7a:	68c2      	ldr	r2, [r0, #12]
 8019e7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019e7e:	4680      	mov	r8, r0
 8019e80:	bb0a      	cbnz	r2, 8019ec6 <_dtoa_r+0x976>
 8019e82:	4601      	mov	r1, r0
 8019e84:	4628      	mov	r0, r5
 8019e86:	f000 fc4b 	bl	801a720 <__mcmp>
 8019e8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019e8c:	4602      	mov	r2, r0
 8019e8e:	4641      	mov	r1, r8
 8019e90:	4630      	mov	r0, r6
 8019e92:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8019e96:	f000 fa07 	bl	801a2a8 <_Bfree>
 8019e9a:	9b06      	ldr	r3, [sp, #24]
 8019e9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019e9e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8019ea2:	ea43 0102 	orr.w	r1, r3, r2
 8019ea6:	9b07      	ldr	r3, [sp, #28]
 8019ea8:	4319      	orrs	r1, r3
 8019eaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019eac:	d10d      	bne.n	8019eca <_dtoa_r+0x97a>
 8019eae:	2b39      	cmp	r3, #57	; 0x39
 8019eb0:	d029      	beq.n	8019f06 <_dtoa_r+0x9b6>
 8019eb2:	f1ba 0f00 	cmp.w	sl, #0
 8019eb6:	dd01      	ble.n	8019ebc <_dtoa_r+0x96c>
 8019eb8:	9b05      	ldr	r3, [sp, #20]
 8019eba:	3331      	adds	r3, #49	; 0x31
 8019ebc:	9a02      	ldr	r2, [sp, #8]
 8019ebe:	7013      	strb	r3, [r2, #0]
 8019ec0:	e775      	b.n	8019dae <_dtoa_r+0x85e>
 8019ec2:	4638      	mov	r0, r7
 8019ec4:	e7b8      	b.n	8019e38 <_dtoa_r+0x8e8>
 8019ec6:	2201      	movs	r2, #1
 8019ec8:	e7e1      	b.n	8019e8e <_dtoa_r+0x93e>
 8019eca:	f1ba 0f00 	cmp.w	sl, #0
 8019ece:	db06      	blt.n	8019ede <_dtoa_r+0x98e>
 8019ed0:	9906      	ldr	r1, [sp, #24]
 8019ed2:	ea41 0a0a 	orr.w	sl, r1, sl
 8019ed6:	9907      	ldr	r1, [sp, #28]
 8019ed8:	ea5a 0a01 	orrs.w	sl, sl, r1
 8019edc:	d120      	bne.n	8019f20 <_dtoa_r+0x9d0>
 8019ede:	2a00      	cmp	r2, #0
 8019ee0:	ddec      	ble.n	8019ebc <_dtoa_r+0x96c>
 8019ee2:	4629      	mov	r1, r5
 8019ee4:	2201      	movs	r2, #1
 8019ee6:	4630      	mov	r0, r6
 8019ee8:	9304      	str	r3, [sp, #16]
 8019eea:	f000 fbad 	bl	801a648 <__lshift>
 8019eee:	4621      	mov	r1, r4
 8019ef0:	4605      	mov	r5, r0
 8019ef2:	f000 fc15 	bl	801a720 <__mcmp>
 8019ef6:	2800      	cmp	r0, #0
 8019ef8:	9b04      	ldr	r3, [sp, #16]
 8019efa:	dc02      	bgt.n	8019f02 <_dtoa_r+0x9b2>
 8019efc:	d1de      	bne.n	8019ebc <_dtoa_r+0x96c>
 8019efe:	07da      	lsls	r2, r3, #31
 8019f00:	d5dc      	bpl.n	8019ebc <_dtoa_r+0x96c>
 8019f02:	2b39      	cmp	r3, #57	; 0x39
 8019f04:	d1d8      	bne.n	8019eb8 <_dtoa_r+0x968>
 8019f06:	9a02      	ldr	r2, [sp, #8]
 8019f08:	2339      	movs	r3, #57	; 0x39
 8019f0a:	7013      	strb	r3, [r2, #0]
 8019f0c:	4643      	mov	r3, r8
 8019f0e:	4698      	mov	r8, r3
 8019f10:	3b01      	subs	r3, #1
 8019f12:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8019f16:	2a39      	cmp	r2, #57	; 0x39
 8019f18:	d051      	beq.n	8019fbe <_dtoa_r+0xa6e>
 8019f1a:	3201      	adds	r2, #1
 8019f1c:	701a      	strb	r2, [r3, #0]
 8019f1e:	e746      	b.n	8019dae <_dtoa_r+0x85e>
 8019f20:	2a00      	cmp	r2, #0
 8019f22:	dd03      	ble.n	8019f2c <_dtoa_r+0x9dc>
 8019f24:	2b39      	cmp	r3, #57	; 0x39
 8019f26:	d0ee      	beq.n	8019f06 <_dtoa_r+0x9b6>
 8019f28:	3301      	adds	r3, #1
 8019f2a:	e7c7      	b.n	8019ebc <_dtoa_r+0x96c>
 8019f2c:	9a04      	ldr	r2, [sp, #16]
 8019f2e:	9908      	ldr	r1, [sp, #32]
 8019f30:	f802 3c01 	strb.w	r3, [r2, #-1]
 8019f34:	428a      	cmp	r2, r1
 8019f36:	d02b      	beq.n	8019f90 <_dtoa_r+0xa40>
 8019f38:	4629      	mov	r1, r5
 8019f3a:	2300      	movs	r3, #0
 8019f3c:	220a      	movs	r2, #10
 8019f3e:	4630      	mov	r0, r6
 8019f40:	f000 f9d4 	bl	801a2ec <__multadd>
 8019f44:	45b9      	cmp	r9, r7
 8019f46:	4605      	mov	r5, r0
 8019f48:	f04f 0300 	mov.w	r3, #0
 8019f4c:	f04f 020a 	mov.w	r2, #10
 8019f50:	4649      	mov	r1, r9
 8019f52:	4630      	mov	r0, r6
 8019f54:	d107      	bne.n	8019f66 <_dtoa_r+0xa16>
 8019f56:	f000 f9c9 	bl	801a2ec <__multadd>
 8019f5a:	4681      	mov	r9, r0
 8019f5c:	4607      	mov	r7, r0
 8019f5e:	9b04      	ldr	r3, [sp, #16]
 8019f60:	3301      	adds	r3, #1
 8019f62:	9304      	str	r3, [sp, #16]
 8019f64:	e774      	b.n	8019e50 <_dtoa_r+0x900>
 8019f66:	f000 f9c1 	bl	801a2ec <__multadd>
 8019f6a:	4639      	mov	r1, r7
 8019f6c:	4681      	mov	r9, r0
 8019f6e:	2300      	movs	r3, #0
 8019f70:	220a      	movs	r2, #10
 8019f72:	4630      	mov	r0, r6
 8019f74:	f000 f9ba 	bl	801a2ec <__multadd>
 8019f78:	4607      	mov	r7, r0
 8019f7a:	e7f0      	b.n	8019f5e <_dtoa_r+0xa0e>
 8019f7c:	f1ba 0f00 	cmp.w	sl, #0
 8019f80:	9a01      	ldr	r2, [sp, #4]
 8019f82:	bfcc      	ite	gt
 8019f84:	46d0      	movgt	r8, sl
 8019f86:	f04f 0801 	movle.w	r8, #1
 8019f8a:	4490      	add	r8, r2
 8019f8c:	f04f 0900 	mov.w	r9, #0
 8019f90:	4629      	mov	r1, r5
 8019f92:	2201      	movs	r2, #1
 8019f94:	4630      	mov	r0, r6
 8019f96:	9302      	str	r3, [sp, #8]
 8019f98:	f000 fb56 	bl	801a648 <__lshift>
 8019f9c:	4621      	mov	r1, r4
 8019f9e:	4605      	mov	r5, r0
 8019fa0:	f000 fbbe 	bl	801a720 <__mcmp>
 8019fa4:	2800      	cmp	r0, #0
 8019fa6:	dcb1      	bgt.n	8019f0c <_dtoa_r+0x9bc>
 8019fa8:	d102      	bne.n	8019fb0 <_dtoa_r+0xa60>
 8019faa:	9b02      	ldr	r3, [sp, #8]
 8019fac:	07db      	lsls	r3, r3, #31
 8019fae:	d4ad      	bmi.n	8019f0c <_dtoa_r+0x9bc>
 8019fb0:	4643      	mov	r3, r8
 8019fb2:	4698      	mov	r8, r3
 8019fb4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8019fb8:	2a30      	cmp	r2, #48	; 0x30
 8019fba:	d0fa      	beq.n	8019fb2 <_dtoa_r+0xa62>
 8019fbc:	e6f7      	b.n	8019dae <_dtoa_r+0x85e>
 8019fbe:	9a01      	ldr	r2, [sp, #4]
 8019fc0:	429a      	cmp	r2, r3
 8019fc2:	d1a4      	bne.n	8019f0e <_dtoa_r+0x9be>
 8019fc4:	f10b 0b01 	add.w	fp, fp, #1
 8019fc8:	2331      	movs	r3, #49	; 0x31
 8019fca:	e778      	b.n	8019ebe <_dtoa_r+0x96e>
 8019fcc:	4b14      	ldr	r3, [pc, #80]	; (801a020 <_dtoa_r+0xad0>)
 8019fce:	f7ff bb2a 	b.w	8019626 <_dtoa_r+0xd6>
 8019fd2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019fd4:	2b00      	cmp	r3, #0
 8019fd6:	f47f ab05 	bne.w	80195e4 <_dtoa_r+0x94>
 8019fda:	4b12      	ldr	r3, [pc, #72]	; (801a024 <_dtoa_r+0xad4>)
 8019fdc:	f7ff bb23 	b.w	8019626 <_dtoa_r+0xd6>
 8019fe0:	f1ba 0f00 	cmp.w	sl, #0
 8019fe4:	dc03      	bgt.n	8019fee <_dtoa_r+0xa9e>
 8019fe6:	9b06      	ldr	r3, [sp, #24]
 8019fe8:	2b02      	cmp	r3, #2
 8019fea:	f73f aec8 	bgt.w	8019d7e <_dtoa_r+0x82e>
 8019fee:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8019ff2:	4621      	mov	r1, r4
 8019ff4:	4628      	mov	r0, r5
 8019ff6:	f7ff fa23 	bl	8019440 <quorem>
 8019ffa:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8019ffe:	f808 3b01 	strb.w	r3, [r8], #1
 801a002:	9a01      	ldr	r2, [sp, #4]
 801a004:	eba8 0202 	sub.w	r2, r8, r2
 801a008:	4592      	cmp	sl, r2
 801a00a:	ddb7      	ble.n	8019f7c <_dtoa_r+0xa2c>
 801a00c:	4629      	mov	r1, r5
 801a00e:	2300      	movs	r3, #0
 801a010:	220a      	movs	r2, #10
 801a012:	4630      	mov	r0, r6
 801a014:	f000 f96a 	bl	801a2ec <__multadd>
 801a018:	4605      	mov	r5, r0
 801a01a:	e7ea      	b.n	8019ff2 <_dtoa_r+0xaa2>
 801a01c:	0801e423 	.word	0x0801e423
 801a020:	0801e35e 	.word	0x0801e35e
 801a024:	0801e3be 	.word	0x0801e3be

0801a028 <_free_r>:
 801a028:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a02a:	2900      	cmp	r1, #0
 801a02c:	d044      	beq.n	801a0b8 <_free_r+0x90>
 801a02e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a032:	9001      	str	r0, [sp, #4]
 801a034:	2b00      	cmp	r3, #0
 801a036:	f1a1 0404 	sub.w	r4, r1, #4
 801a03a:	bfb8      	it	lt
 801a03c:	18e4      	addlt	r4, r4, r3
 801a03e:	f000 f8e7 	bl	801a210 <__malloc_lock>
 801a042:	4a1e      	ldr	r2, [pc, #120]	; (801a0bc <_free_r+0x94>)
 801a044:	9801      	ldr	r0, [sp, #4]
 801a046:	6813      	ldr	r3, [r2, #0]
 801a048:	b933      	cbnz	r3, 801a058 <_free_r+0x30>
 801a04a:	6063      	str	r3, [r4, #4]
 801a04c:	6014      	str	r4, [r2, #0]
 801a04e:	b003      	add	sp, #12
 801a050:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a054:	f000 b8e2 	b.w	801a21c <__malloc_unlock>
 801a058:	42a3      	cmp	r3, r4
 801a05a:	d908      	bls.n	801a06e <_free_r+0x46>
 801a05c:	6825      	ldr	r5, [r4, #0]
 801a05e:	1961      	adds	r1, r4, r5
 801a060:	428b      	cmp	r3, r1
 801a062:	bf01      	itttt	eq
 801a064:	6819      	ldreq	r1, [r3, #0]
 801a066:	685b      	ldreq	r3, [r3, #4]
 801a068:	1949      	addeq	r1, r1, r5
 801a06a:	6021      	streq	r1, [r4, #0]
 801a06c:	e7ed      	b.n	801a04a <_free_r+0x22>
 801a06e:	461a      	mov	r2, r3
 801a070:	685b      	ldr	r3, [r3, #4]
 801a072:	b10b      	cbz	r3, 801a078 <_free_r+0x50>
 801a074:	42a3      	cmp	r3, r4
 801a076:	d9fa      	bls.n	801a06e <_free_r+0x46>
 801a078:	6811      	ldr	r1, [r2, #0]
 801a07a:	1855      	adds	r5, r2, r1
 801a07c:	42a5      	cmp	r5, r4
 801a07e:	d10b      	bne.n	801a098 <_free_r+0x70>
 801a080:	6824      	ldr	r4, [r4, #0]
 801a082:	4421      	add	r1, r4
 801a084:	1854      	adds	r4, r2, r1
 801a086:	42a3      	cmp	r3, r4
 801a088:	6011      	str	r1, [r2, #0]
 801a08a:	d1e0      	bne.n	801a04e <_free_r+0x26>
 801a08c:	681c      	ldr	r4, [r3, #0]
 801a08e:	685b      	ldr	r3, [r3, #4]
 801a090:	6053      	str	r3, [r2, #4]
 801a092:	440c      	add	r4, r1
 801a094:	6014      	str	r4, [r2, #0]
 801a096:	e7da      	b.n	801a04e <_free_r+0x26>
 801a098:	d902      	bls.n	801a0a0 <_free_r+0x78>
 801a09a:	230c      	movs	r3, #12
 801a09c:	6003      	str	r3, [r0, #0]
 801a09e:	e7d6      	b.n	801a04e <_free_r+0x26>
 801a0a0:	6825      	ldr	r5, [r4, #0]
 801a0a2:	1961      	adds	r1, r4, r5
 801a0a4:	428b      	cmp	r3, r1
 801a0a6:	bf04      	itt	eq
 801a0a8:	6819      	ldreq	r1, [r3, #0]
 801a0aa:	685b      	ldreq	r3, [r3, #4]
 801a0ac:	6063      	str	r3, [r4, #4]
 801a0ae:	bf04      	itt	eq
 801a0b0:	1949      	addeq	r1, r1, r5
 801a0b2:	6021      	streq	r1, [r4, #0]
 801a0b4:	6054      	str	r4, [r2, #4]
 801a0b6:	e7ca      	b.n	801a04e <_free_r+0x26>
 801a0b8:	b003      	add	sp, #12
 801a0ba:	bd30      	pop	{r4, r5, pc}
 801a0bc:	20008298 	.word	0x20008298

0801a0c0 <malloc>:
 801a0c0:	4b02      	ldr	r3, [pc, #8]	; (801a0cc <malloc+0xc>)
 801a0c2:	4601      	mov	r1, r0
 801a0c4:	6818      	ldr	r0, [r3, #0]
 801a0c6:	f000 b823 	b.w	801a110 <_malloc_r>
 801a0ca:	bf00      	nop
 801a0cc:	200000b8 	.word	0x200000b8

0801a0d0 <sbrk_aligned>:
 801a0d0:	b570      	push	{r4, r5, r6, lr}
 801a0d2:	4e0e      	ldr	r6, [pc, #56]	; (801a10c <sbrk_aligned+0x3c>)
 801a0d4:	460c      	mov	r4, r1
 801a0d6:	6831      	ldr	r1, [r6, #0]
 801a0d8:	4605      	mov	r5, r0
 801a0da:	b911      	cbnz	r1, 801a0e2 <sbrk_aligned+0x12>
 801a0dc:	f000 fea8 	bl	801ae30 <_sbrk_r>
 801a0e0:	6030      	str	r0, [r6, #0]
 801a0e2:	4621      	mov	r1, r4
 801a0e4:	4628      	mov	r0, r5
 801a0e6:	f000 fea3 	bl	801ae30 <_sbrk_r>
 801a0ea:	1c43      	adds	r3, r0, #1
 801a0ec:	d00a      	beq.n	801a104 <sbrk_aligned+0x34>
 801a0ee:	1cc4      	adds	r4, r0, #3
 801a0f0:	f024 0403 	bic.w	r4, r4, #3
 801a0f4:	42a0      	cmp	r0, r4
 801a0f6:	d007      	beq.n	801a108 <sbrk_aligned+0x38>
 801a0f8:	1a21      	subs	r1, r4, r0
 801a0fa:	4628      	mov	r0, r5
 801a0fc:	f000 fe98 	bl	801ae30 <_sbrk_r>
 801a100:	3001      	adds	r0, #1
 801a102:	d101      	bne.n	801a108 <sbrk_aligned+0x38>
 801a104:	f04f 34ff 	mov.w	r4, #4294967295
 801a108:	4620      	mov	r0, r4
 801a10a:	bd70      	pop	{r4, r5, r6, pc}
 801a10c:	2000829c 	.word	0x2000829c

0801a110 <_malloc_r>:
 801a110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a114:	1ccd      	adds	r5, r1, #3
 801a116:	f025 0503 	bic.w	r5, r5, #3
 801a11a:	3508      	adds	r5, #8
 801a11c:	2d0c      	cmp	r5, #12
 801a11e:	bf38      	it	cc
 801a120:	250c      	movcc	r5, #12
 801a122:	2d00      	cmp	r5, #0
 801a124:	4607      	mov	r7, r0
 801a126:	db01      	blt.n	801a12c <_malloc_r+0x1c>
 801a128:	42a9      	cmp	r1, r5
 801a12a:	d905      	bls.n	801a138 <_malloc_r+0x28>
 801a12c:	230c      	movs	r3, #12
 801a12e:	603b      	str	r3, [r7, #0]
 801a130:	2600      	movs	r6, #0
 801a132:	4630      	mov	r0, r6
 801a134:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a138:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801a20c <_malloc_r+0xfc>
 801a13c:	f000 f868 	bl	801a210 <__malloc_lock>
 801a140:	f8d8 3000 	ldr.w	r3, [r8]
 801a144:	461c      	mov	r4, r3
 801a146:	bb5c      	cbnz	r4, 801a1a0 <_malloc_r+0x90>
 801a148:	4629      	mov	r1, r5
 801a14a:	4638      	mov	r0, r7
 801a14c:	f7ff ffc0 	bl	801a0d0 <sbrk_aligned>
 801a150:	1c43      	adds	r3, r0, #1
 801a152:	4604      	mov	r4, r0
 801a154:	d155      	bne.n	801a202 <_malloc_r+0xf2>
 801a156:	f8d8 4000 	ldr.w	r4, [r8]
 801a15a:	4626      	mov	r6, r4
 801a15c:	2e00      	cmp	r6, #0
 801a15e:	d145      	bne.n	801a1ec <_malloc_r+0xdc>
 801a160:	2c00      	cmp	r4, #0
 801a162:	d048      	beq.n	801a1f6 <_malloc_r+0xe6>
 801a164:	6823      	ldr	r3, [r4, #0]
 801a166:	4631      	mov	r1, r6
 801a168:	4638      	mov	r0, r7
 801a16a:	eb04 0903 	add.w	r9, r4, r3
 801a16e:	f000 fe5f 	bl	801ae30 <_sbrk_r>
 801a172:	4581      	cmp	r9, r0
 801a174:	d13f      	bne.n	801a1f6 <_malloc_r+0xe6>
 801a176:	6821      	ldr	r1, [r4, #0]
 801a178:	1a6d      	subs	r5, r5, r1
 801a17a:	4629      	mov	r1, r5
 801a17c:	4638      	mov	r0, r7
 801a17e:	f7ff ffa7 	bl	801a0d0 <sbrk_aligned>
 801a182:	3001      	adds	r0, #1
 801a184:	d037      	beq.n	801a1f6 <_malloc_r+0xe6>
 801a186:	6823      	ldr	r3, [r4, #0]
 801a188:	442b      	add	r3, r5
 801a18a:	6023      	str	r3, [r4, #0]
 801a18c:	f8d8 3000 	ldr.w	r3, [r8]
 801a190:	2b00      	cmp	r3, #0
 801a192:	d038      	beq.n	801a206 <_malloc_r+0xf6>
 801a194:	685a      	ldr	r2, [r3, #4]
 801a196:	42a2      	cmp	r2, r4
 801a198:	d12b      	bne.n	801a1f2 <_malloc_r+0xe2>
 801a19a:	2200      	movs	r2, #0
 801a19c:	605a      	str	r2, [r3, #4]
 801a19e:	e00f      	b.n	801a1c0 <_malloc_r+0xb0>
 801a1a0:	6822      	ldr	r2, [r4, #0]
 801a1a2:	1b52      	subs	r2, r2, r5
 801a1a4:	d41f      	bmi.n	801a1e6 <_malloc_r+0xd6>
 801a1a6:	2a0b      	cmp	r2, #11
 801a1a8:	d917      	bls.n	801a1da <_malloc_r+0xca>
 801a1aa:	1961      	adds	r1, r4, r5
 801a1ac:	42a3      	cmp	r3, r4
 801a1ae:	6025      	str	r5, [r4, #0]
 801a1b0:	bf18      	it	ne
 801a1b2:	6059      	strne	r1, [r3, #4]
 801a1b4:	6863      	ldr	r3, [r4, #4]
 801a1b6:	bf08      	it	eq
 801a1b8:	f8c8 1000 	streq.w	r1, [r8]
 801a1bc:	5162      	str	r2, [r4, r5]
 801a1be:	604b      	str	r3, [r1, #4]
 801a1c0:	4638      	mov	r0, r7
 801a1c2:	f104 060b 	add.w	r6, r4, #11
 801a1c6:	f000 f829 	bl	801a21c <__malloc_unlock>
 801a1ca:	f026 0607 	bic.w	r6, r6, #7
 801a1ce:	1d23      	adds	r3, r4, #4
 801a1d0:	1af2      	subs	r2, r6, r3
 801a1d2:	d0ae      	beq.n	801a132 <_malloc_r+0x22>
 801a1d4:	1b9b      	subs	r3, r3, r6
 801a1d6:	50a3      	str	r3, [r4, r2]
 801a1d8:	e7ab      	b.n	801a132 <_malloc_r+0x22>
 801a1da:	42a3      	cmp	r3, r4
 801a1dc:	6862      	ldr	r2, [r4, #4]
 801a1de:	d1dd      	bne.n	801a19c <_malloc_r+0x8c>
 801a1e0:	f8c8 2000 	str.w	r2, [r8]
 801a1e4:	e7ec      	b.n	801a1c0 <_malloc_r+0xb0>
 801a1e6:	4623      	mov	r3, r4
 801a1e8:	6864      	ldr	r4, [r4, #4]
 801a1ea:	e7ac      	b.n	801a146 <_malloc_r+0x36>
 801a1ec:	4634      	mov	r4, r6
 801a1ee:	6876      	ldr	r6, [r6, #4]
 801a1f0:	e7b4      	b.n	801a15c <_malloc_r+0x4c>
 801a1f2:	4613      	mov	r3, r2
 801a1f4:	e7cc      	b.n	801a190 <_malloc_r+0x80>
 801a1f6:	230c      	movs	r3, #12
 801a1f8:	603b      	str	r3, [r7, #0]
 801a1fa:	4638      	mov	r0, r7
 801a1fc:	f000 f80e 	bl	801a21c <__malloc_unlock>
 801a200:	e797      	b.n	801a132 <_malloc_r+0x22>
 801a202:	6025      	str	r5, [r4, #0]
 801a204:	e7dc      	b.n	801a1c0 <_malloc_r+0xb0>
 801a206:	605b      	str	r3, [r3, #4]
 801a208:	deff      	udf	#255	; 0xff
 801a20a:	bf00      	nop
 801a20c:	20008298 	.word	0x20008298

0801a210 <__malloc_lock>:
 801a210:	4801      	ldr	r0, [pc, #4]	; (801a218 <__malloc_lock+0x8>)
 801a212:	f7ff b8e7 	b.w	80193e4 <__retarget_lock_acquire_recursive>
 801a216:	bf00      	nop
 801a218:	20008294 	.word	0x20008294

0801a21c <__malloc_unlock>:
 801a21c:	4801      	ldr	r0, [pc, #4]	; (801a224 <__malloc_unlock+0x8>)
 801a21e:	f7ff b8e2 	b.w	80193e6 <__retarget_lock_release_recursive>
 801a222:	bf00      	nop
 801a224:	20008294 	.word	0x20008294

0801a228 <_Balloc>:
 801a228:	b570      	push	{r4, r5, r6, lr}
 801a22a:	69c6      	ldr	r6, [r0, #28]
 801a22c:	4604      	mov	r4, r0
 801a22e:	460d      	mov	r5, r1
 801a230:	b976      	cbnz	r6, 801a250 <_Balloc+0x28>
 801a232:	2010      	movs	r0, #16
 801a234:	f7ff ff44 	bl	801a0c0 <malloc>
 801a238:	4602      	mov	r2, r0
 801a23a:	61e0      	str	r0, [r4, #28]
 801a23c:	b920      	cbnz	r0, 801a248 <_Balloc+0x20>
 801a23e:	4b18      	ldr	r3, [pc, #96]	; (801a2a0 <_Balloc+0x78>)
 801a240:	4818      	ldr	r0, [pc, #96]	; (801a2a4 <_Balloc+0x7c>)
 801a242:	216b      	movs	r1, #107	; 0x6b
 801a244:	f7ff f8de 	bl	8019404 <__assert_func>
 801a248:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801a24c:	6006      	str	r6, [r0, #0]
 801a24e:	60c6      	str	r6, [r0, #12]
 801a250:	69e6      	ldr	r6, [r4, #28]
 801a252:	68f3      	ldr	r3, [r6, #12]
 801a254:	b183      	cbz	r3, 801a278 <_Balloc+0x50>
 801a256:	69e3      	ldr	r3, [r4, #28]
 801a258:	68db      	ldr	r3, [r3, #12]
 801a25a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801a25e:	b9b8      	cbnz	r0, 801a290 <_Balloc+0x68>
 801a260:	2101      	movs	r1, #1
 801a262:	fa01 f605 	lsl.w	r6, r1, r5
 801a266:	1d72      	adds	r2, r6, #5
 801a268:	0092      	lsls	r2, r2, #2
 801a26a:	4620      	mov	r0, r4
 801a26c:	f000 fdf7 	bl	801ae5e <_calloc_r>
 801a270:	b160      	cbz	r0, 801a28c <_Balloc+0x64>
 801a272:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801a276:	e00e      	b.n	801a296 <_Balloc+0x6e>
 801a278:	2221      	movs	r2, #33	; 0x21
 801a27a:	2104      	movs	r1, #4
 801a27c:	4620      	mov	r0, r4
 801a27e:	f000 fdee 	bl	801ae5e <_calloc_r>
 801a282:	69e3      	ldr	r3, [r4, #28]
 801a284:	60f0      	str	r0, [r6, #12]
 801a286:	68db      	ldr	r3, [r3, #12]
 801a288:	2b00      	cmp	r3, #0
 801a28a:	d1e4      	bne.n	801a256 <_Balloc+0x2e>
 801a28c:	2000      	movs	r0, #0
 801a28e:	bd70      	pop	{r4, r5, r6, pc}
 801a290:	6802      	ldr	r2, [r0, #0]
 801a292:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801a296:	2300      	movs	r3, #0
 801a298:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801a29c:	e7f7      	b.n	801a28e <_Balloc+0x66>
 801a29e:	bf00      	nop
 801a2a0:	0801e1de 	.word	0x0801e1de
 801a2a4:	0801e434 	.word	0x0801e434

0801a2a8 <_Bfree>:
 801a2a8:	b570      	push	{r4, r5, r6, lr}
 801a2aa:	69c6      	ldr	r6, [r0, #28]
 801a2ac:	4605      	mov	r5, r0
 801a2ae:	460c      	mov	r4, r1
 801a2b0:	b976      	cbnz	r6, 801a2d0 <_Bfree+0x28>
 801a2b2:	2010      	movs	r0, #16
 801a2b4:	f7ff ff04 	bl	801a0c0 <malloc>
 801a2b8:	4602      	mov	r2, r0
 801a2ba:	61e8      	str	r0, [r5, #28]
 801a2bc:	b920      	cbnz	r0, 801a2c8 <_Bfree+0x20>
 801a2be:	4b09      	ldr	r3, [pc, #36]	; (801a2e4 <_Bfree+0x3c>)
 801a2c0:	4809      	ldr	r0, [pc, #36]	; (801a2e8 <_Bfree+0x40>)
 801a2c2:	218f      	movs	r1, #143	; 0x8f
 801a2c4:	f7ff f89e 	bl	8019404 <__assert_func>
 801a2c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801a2cc:	6006      	str	r6, [r0, #0]
 801a2ce:	60c6      	str	r6, [r0, #12]
 801a2d0:	b13c      	cbz	r4, 801a2e2 <_Bfree+0x3a>
 801a2d2:	69eb      	ldr	r3, [r5, #28]
 801a2d4:	6862      	ldr	r2, [r4, #4]
 801a2d6:	68db      	ldr	r3, [r3, #12]
 801a2d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801a2dc:	6021      	str	r1, [r4, #0]
 801a2de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801a2e2:	bd70      	pop	{r4, r5, r6, pc}
 801a2e4:	0801e1de 	.word	0x0801e1de
 801a2e8:	0801e434 	.word	0x0801e434

0801a2ec <__multadd>:
 801a2ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a2f0:	690d      	ldr	r5, [r1, #16]
 801a2f2:	4607      	mov	r7, r0
 801a2f4:	460c      	mov	r4, r1
 801a2f6:	461e      	mov	r6, r3
 801a2f8:	f101 0c14 	add.w	ip, r1, #20
 801a2fc:	2000      	movs	r0, #0
 801a2fe:	f8dc 3000 	ldr.w	r3, [ip]
 801a302:	b299      	uxth	r1, r3
 801a304:	fb02 6101 	mla	r1, r2, r1, r6
 801a308:	0c1e      	lsrs	r6, r3, #16
 801a30a:	0c0b      	lsrs	r3, r1, #16
 801a30c:	fb02 3306 	mla	r3, r2, r6, r3
 801a310:	b289      	uxth	r1, r1
 801a312:	3001      	adds	r0, #1
 801a314:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801a318:	4285      	cmp	r5, r0
 801a31a:	f84c 1b04 	str.w	r1, [ip], #4
 801a31e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801a322:	dcec      	bgt.n	801a2fe <__multadd+0x12>
 801a324:	b30e      	cbz	r6, 801a36a <__multadd+0x7e>
 801a326:	68a3      	ldr	r3, [r4, #8]
 801a328:	42ab      	cmp	r3, r5
 801a32a:	dc19      	bgt.n	801a360 <__multadd+0x74>
 801a32c:	6861      	ldr	r1, [r4, #4]
 801a32e:	4638      	mov	r0, r7
 801a330:	3101      	adds	r1, #1
 801a332:	f7ff ff79 	bl	801a228 <_Balloc>
 801a336:	4680      	mov	r8, r0
 801a338:	b928      	cbnz	r0, 801a346 <__multadd+0x5a>
 801a33a:	4602      	mov	r2, r0
 801a33c:	4b0c      	ldr	r3, [pc, #48]	; (801a370 <__multadd+0x84>)
 801a33e:	480d      	ldr	r0, [pc, #52]	; (801a374 <__multadd+0x88>)
 801a340:	21ba      	movs	r1, #186	; 0xba
 801a342:	f7ff f85f 	bl	8019404 <__assert_func>
 801a346:	6922      	ldr	r2, [r4, #16]
 801a348:	3202      	adds	r2, #2
 801a34a:	f104 010c 	add.w	r1, r4, #12
 801a34e:	0092      	lsls	r2, r2, #2
 801a350:	300c      	adds	r0, #12
 801a352:	f7ff f849 	bl	80193e8 <memcpy>
 801a356:	4621      	mov	r1, r4
 801a358:	4638      	mov	r0, r7
 801a35a:	f7ff ffa5 	bl	801a2a8 <_Bfree>
 801a35e:	4644      	mov	r4, r8
 801a360:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801a364:	3501      	adds	r5, #1
 801a366:	615e      	str	r6, [r3, #20]
 801a368:	6125      	str	r5, [r4, #16]
 801a36a:	4620      	mov	r0, r4
 801a36c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a370:	0801e423 	.word	0x0801e423
 801a374:	0801e434 	.word	0x0801e434

0801a378 <__hi0bits>:
 801a378:	0c03      	lsrs	r3, r0, #16
 801a37a:	041b      	lsls	r3, r3, #16
 801a37c:	b9d3      	cbnz	r3, 801a3b4 <__hi0bits+0x3c>
 801a37e:	0400      	lsls	r0, r0, #16
 801a380:	2310      	movs	r3, #16
 801a382:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801a386:	bf04      	itt	eq
 801a388:	0200      	lsleq	r0, r0, #8
 801a38a:	3308      	addeq	r3, #8
 801a38c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801a390:	bf04      	itt	eq
 801a392:	0100      	lsleq	r0, r0, #4
 801a394:	3304      	addeq	r3, #4
 801a396:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801a39a:	bf04      	itt	eq
 801a39c:	0080      	lsleq	r0, r0, #2
 801a39e:	3302      	addeq	r3, #2
 801a3a0:	2800      	cmp	r0, #0
 801a3a2:	db05      	blt.n	801a3b0 <__hi0bits+0x38>
 801a3a4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801a3a8:	f103 0301 	add.w	r3, r3, #1
 801a3ac:	bf08      	it	eq
 801a3ae:	2320      	moveq	r3, #32
 801a3b0:	4618      	mov	r0, r3
 801a3b2:	4770      	bx	lr
 801a3b4:	2300      	movs	r3, #0
 801a3b6:	e7e4      	b.n	801a382 <__hi0bits+0xa>

0801a3b8 <__lo0bits>:
 801a3b8:	6803      	ldr	r3, [r0, #0]
 801a3ba:	f013 0207 	ands.w	r2, r3, #7
 801a3be:	d00c      	beq.n	801a3da <__lo0bits+0x22>
 801a3c0:	07d9      	lsls	r1, r3, #31
 801a3c2:	d422      	bmi.n	801a40a <__lo0bits+0x52>
 801a3c4:	079a      	lsls	r2, r3, #30
 801a3c6:	bf49      	itett	mi
 801a3c8:	085b      	lsrmi	r3, r3, #1
 801a3ca:	089b      	lsrpl	r3, r3, #2
 801a3cc:	6003      	strmi	r3, [r0, #0]
 801a3ce:	2201      	movmi	r2, #1
 801a3d0:	bf5c      	itt	pl
 801a3d2:	6003      	strpl	r3, [r0, #0]
 801a3d4:	2202      	movpl	r2, #2
 801a3d6:	4610      	mov	r0, r2
 801a3d8:	4770      	bx	lr
 801a3da:	b299      	uxth	r1, r3
 801a3dc:	b909      	cbnz	r1, 801a3e2 <__lo0bits+0x2a>
 801a3de:	0c1b      	lsrs	r3, r3, #16
 801a3e0:	2210      	movs	r2, #16
 801a3e2:	b2d9      	uxtb	r1, r3
 801a3e4:	b909      	cbnz	r1, 801a3ea <__lo0bits+0x32>
 801a3e6:	3208      	adds	r2, #8
 801a3e8:	0a1b      	lsrs	r3, r3, #8
 801a3ea:	0719      	lsls	r1, r3, #28
 801a3ec:	bf04      	itt	eq
 801a3ee:	091b      	lsreq	r3, r3, #4
 801a3f0:	3204      	addeq	r2, #4
 801a3f2:	0799      	lsls	r1, r3, #30
 801a3f4:	bf04      	itt	eq
 801a3f6:	089b      	lsreq	r3, r3, #2
 801a3f8:	3202      	addeq	r2, #2
 801a3fa:	07d9      	lsls	r1, r3, #31
 801a3fc:	d403      	bmi.n	801a406 <__lo0bits+0x4e>
 801a3fe:	085b      	lsrs	r3, r3, #1
 801a400:	f102 0201 	add.w	r2, r2, #1
 801a404:	d003      	beq.n	801a40e <__lo0bits+0x56>
 801a406:	6003      	str	r3, [r0, #0]
 801a408:	e7e5      	b.n	801a3d6 <__lo0bits+0x1e>
 801a40a:	2200      	movs	r2, #0
 801a40c:	e7e3      	b.n	801a3d6 <__lo0bits+0x1e>
 801a40e:	2220      	movs	r2, #32
 801a410:	e7e1      	b.n	801a3d6 <__lo0bits+0x1e>
	...

0801a414 <__i2b>:
 801a414:	b510      	push	{r4, lr}
 801a416:	460c      	mov	r4, r1
 801a418:	2101      	movs	r1, #1
 801a41a:	f7ff ff05 	bl	801a228 <_Balloc>
 801a41e:	4602      	mov	r2, r0
 801a420:	b928      	cbnz	r0, 801a42e <__i2b+0x1a>
 801a422:	4b05      	ldr	r3, [pc, #20]	; (801a438 <__i2b+0x24>)
 801a424:	4805      	ldr	r0, [pc, #20]	; (801a43c <__i2b+0x28>)
 801a426:	f240 1145 	movw	r1, #325	; 0x145
 801a42a:	f7fe ffeb 	bl	8019404 <__assert_func>
 801a42e:	2301      	movs	r3, #1
 801a430:	6144      	str	r4, [r0, #20]
 801a432:	6103      	str	r3, [r0, #16]
 801a434:	bd10      	pop	{r4, pc}
 801a436:	bf00      	nop
 801a438:	0801e423 	.word	0x0801e423
 801a43c:	0801e434 	.word	0x0801e434

0801a440 <__multiply>:
 801a440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a444:	4691      	mov	r9, r2
 801a446:	690a      	ldr	r2, [r1, #16]
 801a448:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801a44c:	429a      	cmp	r2, r3
 801a44e:	bfb8      	it	lt
 801a450:	460b      	movlt	r3, r1
 801a452:	460c      	mov	r4, r1
 801a454:	bfbc      	itt	lt
 801a456:	464c      	movlt	r4, r9
 801a458:	4699      	movlt	r9, r3
 801a45a:	6927      	ldr	r7, [r4, #16]
 801a45c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801a460:	68a3      	ldr	r3, [r4, #8]
 801a462:	6861      	ldr	r1, [r4, #4]
 801a464:	eb07 060a 	add.w	r6, r7, sl
 801a468:	42b3      	cmp	r3, r6
 801a46a:	b085      	sub	sp, #20
 801a46c:	bfb8      	it	lt
 801a46e:	3101      	addlt	r1, #1
 801a470:	f7ff feda 	bl	801a228 <_Balloc>
 801a474:	b930      	cbnz	r0, 801a484 <__multiply+0x44>
 801a476:	4602      	mov	r2, r0
 801a478:	4b44      	ldr	r3, [pc, #272]	; (801a58c <__multiply+0x14c>)
 801a47a:	4845      	ldr	r0, [pc, #276]	; (801a590 <__multiply+0x150>)
 801a47c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801a480:	f7fe ffc0 	bl	8019404 <__assert_func>
 801a484:	f100 0514 	add.w	r5, r0, #20
 801a488:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801a48c:	462b      	mov	r3, r5
 801a48e:	2200      	movs	r2, #0
 801a490:	4543      	cmp	r3, r8
 801a492:	d321      	bcc.n	801a4d8 <__multiply+0x98>
 801a494:	f104 0314 	add.w	r3, r4, #20
 801a498:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801a49c:	f109 0314 	add.w	r3, r9, #20
 801a4a0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801a4a4:	9202      	str	r2, [sp, #8]
 801a4a6:	1b3a      	subs	r2, r7, r4
 801a4a8:	3a15      	subs	r2, #21
 801a4aa:	f022 0203 	bic.w	r2, r2, #3
 801a4ae:	3204      	adds	r2, #4
 801a4b0:	f104 0115 	add.w	r1, r4, #21
 801a4b4:	428f      	cmp	r7, r1
 801a4b6:	bf38      	it	cc
 801a4b8:	2204      	movcc	r2, #4
 801a4ba:	9201      	str	r2, [sp, #4]
 801a4bc:	9a02      	ldr	r2, [sp, #8]
 801a4be:	9303      	str	r3, [sp, #12]
 801a4c0:	429a      	cmp	r2, r3
 801a4c2:	d80c      	bhi.n	801a4de <__multiply+0x9e>
 801a4c4:	2e00      	cmp	r6, #0
 801a4c6:	dd03      	ble.n	801a4d0 <__multiply+0x90>
 801a4c8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801a4cc:	2b00      	cmp	r3, #0
 801a4ce:	d05b      	beq.n	801a588 <__multiply+0x148>
 801a4d0:	6106      	str	r6, [r0, #16]
 801a4d2:	b005      	add	sp, #20
 801a4d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a4d8:	f843 2b04 	str.w	r2, [r3], #4
 801a4dc:	e7d8      	b.n	801a490 <__multiply+0x50>
 801a4de:	f8b3 a000 	ldrh.w	sl, [r3]
 801a4e2:	f1ba 0f00 	cmp.w	sl, #0
 801a4e6:	d024      	beq.n	801a532 <__multiply+0xf2>
 801a4e8:	f104 0e14 	add.w	lr, r4, #20
 801a4ec:	46a9      	mov	r9, r5
 801a4ee:	f04f 0c00 	mov.w	ip, #0
 801a4f2:	f85e 2b04 	ldr.w	r2, [lr], #4
 801a4f6:	f8d9 1000 	ldr.w	r1, [r9]
 801a4fa:	fa1f fb82 	uxth.w	fp, r2
 801a4fe:	b289      	uxth	r1, r1
 801a500:	fb0a 110b 	mla	r1, sl, fp, r1
 801a504:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801a508:	f8d9 2000 	ldr.w	r2, [r9]
 801a50c:	4461      	add	r1, ip
 801a50e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801a512:	fb0a c20b 	mla	r2, sl, fp, ip
 801a516:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801a51a:	b289      	uxth	r1, r1
 801a51c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801a520:	4577      	cmp	r7, lr
 801a522:	f849 1b04 	str.w	r1, [r9], #4
 801a526:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801a52a:	d8e2      	bhi.n	801a4f2 <__multiply+0xb2>
 801a52c:	9a01      	ldr	r2, [sp, #4]
 801a52e:	f845 c002 	str.w	ip, [r5, r2]
 801a532:	9a03      	ldr	r2, [sp, #12]
 801a534:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801a538:	3304      	adds	r3, #4
 801a53a:	f1b9 0f00 	cmp.w	r9, #0
 801a53e:	d021      	beq.n	801a584 <__multiply+0x144>
 801a540:	6829      	ldr	r1, [r5, #0]
 801a542:	f104 0c14 	add.w	ip, r4, #20
 801a546:	46ae      	mov	lr, r5
 801a548:	f04f 0a00 	mov.w	sl, #0
 801a54c:	f8bc b000 	ldrh.w	fp, [ip]
 801a550:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801a554:	fb09 220b 	mla	r2, r9, fp, r2
 801a558:	4452      	add	r2, sl
 801a55a:	b289      	uxth	r1, r1
 801a55c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801a560:	f84e 1b04 	str.w	r1, [lr], #4
 801a564:	f85c 1b04 	ldr.w	r1, [ip], #4
 801a568:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801a56c:	f8be 1000 	ldrh.w	r1, [lr]
 801a570:	fb09 110a 	mla	r1, r9, sl, r1
 801a574:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801a578:	4567      	cmp	r7, ip
 801a57a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801a57e:	d8e5      	bhi.n	801a54c <__multiply+0x10c>
 801a580:	9a01      	ldr	r2, [sp, #4]
 801a582:	50a9      	str	r1, [r5, r2]
 801a584:	3504      	adds	r5, #4
 801a586:	e799      	b.n	801a4bc <__multiply+0x7c>
 801a588:	3e01      	subs	r6, #1
 801a58a:	e79b      	b.n	801a4c4 <__multiply+0x84>
 801a58c:	0801e423 	.word	0x0801e423
 801a590:	0801e434 	.word	0x0801e434

0801a594 <__pow5mult>:
 801a594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a598:	4615      	mov	r5, r2
 801a59a:	f012 0203 	ands.w	r2, r2, #3
 801a59e:	4606      	mov	r6, r0
 801a5a0:	460f      	mov	r7, r1
 801a5a2:	d007      	beq.n	801a5b4 <__pow5mult+0x20>
 801a5a4:	4c25      	ldr	r4, [pc, #148]	; (801a63c <__pow5mult+0xa8>)
 801a5a6:	3a01      	subs	r2, #1
 801a5a8:	2300      	movs	r3, #0
 801a5aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801a5ae:	f7ff fe9d 	bl	801a2ec <__multadd>
 801a5b2:	4607      	mov	r7, r0
 801a5b4:	10ad      	asrs	r5, r5, #2
 801a5b6:	d03d      	beq.n	801a634 <__pow5mult+0xa0>
 801a5b8:	69f4      	ldr	r4, [r6, #28]
 801a5ba:	b97c      	cbnz	r4, 801a5dc <__pow5mult+0x48>
 801a5bc:	2010      	movs	r0, #16
 801a5be:	f7ff fd7f 	bl	801a0c0 <malloc>
 801a5c2:	4602      	mov	r2, r0
 801a5c4:	61f0      	str	r0, [r6, #28]
 801a5c6:	b928      	cbnz	r0, 801a5d4 <__pow5mult+0x40>
 801a5c8:	4b1d      	ldr	r3, [pc, #116]	; (801a640 <__pow5mult+0xac>)
 801a5ca:	481e      	ldr	r0, [pc, #120]	; (801a644 <__pow5mult+0xb0>)
 801a5cc:	f240 11b3 	movw	r1, #435	; 0x1b3
 801a5d0:	f7fe ff18 	bl	8019404 <__assert_func>
 801a5d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801a5d8:	6004      	str	r4, [r0, #0]
 801a5da:	60c4      	str	r4, [r0, #12]
 801a5dc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801a5e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801a5e4:	b94c      	cbnz	r4, 801a5fa <__pow5mult+0x66>
 801a5e6:	f240 2171 	movw	r1, #625	; 0x271
 801a5ea:	4630      	mov	r0, r6
 801a5ec:	f7ff ff12 	bl	801a414 <__i2b>
 801a5f0:	2300      	movs	r3, #0
 801a5f2:	f8c8 0008 	str.w	r0, [r8, #8]
 801a5f6:	4604      	mov	r4, r0
 801a5f8:	6003      	str	r3, [r0, #0]
 801a5fa:	f04f 0900 	mov.w	r9, #0
 801a5fe:	07eb      	lsls	r3, r5, #31
 801a600:	d50a      	bpl.n	801a618 <__pow5mult+0x84>
 801a602:	4639      	mov	r1, r7
 801a604:	4622      	mov	r2, r4
 801a606:	4630      	mov	r0, r6
 801a608:	f7ff ff1a 	bl	801a440 <__multiply>
 801a60c:	4639      	mov	r1, r7
 801a60e:	4680      	mov	r8, r0
 801a610:	4630      	mov	r0, r6
 801a612:	f7ff fe49 	bl	801a2a8 <_Bfree>
 801a616:	4647      	mov	r7, r8
 801a618:	106d      	asrs	r5, r5, #1
 801a61a:	d00b      	beq.n	801a634 <__pow5mult+0xa0>
 801a61c:	6820      	ldr	r0, [r4, #0]
 801a61e:	b938      	cbnz	r0, 801a630 <__pow5mult+0x9c>
 801a620:	4622      	mov	r2, r4
 801a622:	4621      	mov	r1, r4
 801a624:	4630      	mov	r0, r6
 801a626:	f7ff ff0b 	bl	801a440 <__multiply>
 801a62a:	6020      	str	r0, [r4, #0]
 801a62c:	f8c0 9000 	str.w	r9, [r0]
 801a630:	4604      	mov	r4, r0
 801a632:	e7e4      	b.n	801a5fe <__pow5mult+0x6a>
 801a634:	4638      	mov	r0, r7
 801a636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a63a:	bf00      	nop
 801a63c:	0801e580 	.word	0x0801e580
 801a640:	0801e1de 	.word	0x0801e1de
 801a644:	0801e434 	.word	0x0801e434

0801a648 <__lshift>:
 801a648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a64c:	460c      	mov	r4, r1
 801a64e:	6849      	ldr	r1, [r1, #4]
 801a650:	6923      	ldr	r3, [r4, #16]
 801a652:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801a656:	68a3      	ldr	r3, [r4, #8]
 801a658:	4607      	mov	r7, r0
 801a65a:	4691      	mov	r9, r2
 801a65c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801a660:	f108 0601 	add.w	r6, r8, #1
 801a664:	42b3      	cmp	r3, r6
 801a666:	db0b      	blt.n	801a680 <__lshift+0x38>
 801a668:	4638      	mov	r0, r7
 801a66a:	f7ff fddd 	bl	801a228 <_Balloc>
 801a66e:	4605      	mov	r5, r0
 801a670:	b948      	cbnz	r0, 801a686 <__lshift+0x3e>
 801a672:	4602      	mov	r2, r0
 801a674:	4b28      	ldr	r3, [pc, #160]	; (801a718 <__lshift+0xd0>)
 801a676:	4829      	ldr	r0, [pc, #164]	; (801a71c <__lshift+0xd4>)
 801a678:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801a67c:	f7fe fec2 	bl	8019404 <__assert_func>
 801a680:	3101      	adds	r1, #1
 801a682:	005b      	lsls	r3, r3, #1
 801a684:	e7ee      	b.n	801a664 <__lshift+0x1c>
 801a686:	2300      	movs	r3, #0
 801a688:	f100 0114 	add.w	r1, r0, #20
 801a68c:	f100 0210 	add.w	r2, r0, #16
 801a690:	4618      	mov	r0, r3
 801a692:	4553      	cmp	r3, sl
 801a694:	db33      	blt.n	801a6fe <__lshift+0xb6>
 801a696:	6920      	ldr	r0, [r4, #16]
 801a698:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801a69c:	f104 0314 	add.w	r3, r4, #20
 801a6a0:	f019 091f 	ands.w	r9, r9, #31
 801a6a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801a6a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801a6ac:	d02b      	beq.n	801a706 <__lshift+0xbe>
 801a6ae:	f1c9 0e20 	rsb	lr, r9, #32
 801a6b2:	468a      	mov	sl, r1
 801a6b4:	2200      	movs	r2, #0
 801a6b6:	6818      	ldr	r0, [r3, #0]
 801a6b8:	fa00 f009 	lsl.w	r0, r0, r9
 801a6bc:	4310      	orrs	r0, r2
 801a6be:	f84a 0b04 	str.w	r0, [sl], #4
 801a6c2:	f853 2b04 	ldr.w	r2, [r3], #4
 801a6c6:	459c      	cmp	ip, r3
 801a6c8:	fa22 f20e 	lsr.w	r2, r2, lr
 801a6cc:	d8f3      	bhi.n	801a6b6 <__lshift+0x6e>
 801a6ce:	ebac 0304 	sub.w	r3, ip, r4
 801a6d2:	3b15      	subs	r3, #21
 801a6d4:	f023 0303 	bic.w	r3, r3, #3
 801a6d8:	3304      	adds	r3, #4
 801a6da:	f104 0015 	add.w	r0, r4, #21
 801a6de:	4584      	cmp	ip, r0
 801a6e0:	bf38      	it	cc
 801a6e2:	2304      	movcc	r3, #4
 801a6e4:	50ca      	str	r2, [r1, r3]
 801a6e6:	b10a      	cbz	r2, 801a6ec <__lshift+0xa4>
 801a6e8:	f108 0602 	add.w	r6, r8, #2
 801a6ec:	3e01      	subs	r6, #1
 801a6ee:	4638      	mov	r0, r7
 801a6f0:	612e      	str	r6, [r5, #16]
 801a6f2:	4621      	mov	r1, r4
 801a6f4:	f7ff fdd8 	bl	801a2a8 <_Bfree>
 801a6f8:	4628      	mov	r0, r5
 801a6fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a6fe:	f842 0f04 	str.w	r0, [r2, #4]!
 801a702:	3301      	adds	r3, #1
 801a704:	e7c5      	b.n	801a692 <__lshift+0x4a>
 801a706:	3904      	subs	r1, #4
 801a708:	f853 2b04 	ldr.w	r2, [r3], #4
 801a70c:	f841 2f04 	str.w	r2, [r1, #4]!
 801a710:	459c      	cmp	ip, r3
 801a712:	d8f9      	bhi.n	801a708 <__lshift+0xc0>
 801a714:	e7ea      	b.n	801a6ec <__lshift+0xa4>
 801a716:	bf00      	nop
 801a718:	0801e423 	.word	0x0801e423
 801a71c:	0801e434 	.word	0x0801e434

0801a720 <__mcmp>:
 801a720:	b530      	push	{r4, r5, lr}
 801a722:	6902      	ldr	r2, [r0, #16]
 801a724:	690c      	ldr	r4, [r1, #16]
 801a726:	1b12      	subs	r2, r2, r4
 801a728:	d10e      	bne.n	801a748 <__mcmp+0x28>
 801a72a:	f100 0314 	add.w	r3, r0, #20
 801a72e:	3114      	adds	r1, #20
 801a730:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801a734:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801a738:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801a73c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801a740:	42a5      	cmp	r5, r4
 801a742:	d003      	beq.n	801a74c <__mcmp+0x2c>
 801a744:	d305      	bcc.n	801a752 <__mcmp+0x32>
 801a746:	2201      	movs	r2, #1
 801a748:	4610      	mov	r0, r2
 801a74a:	bd30      	pop	{r4, r5, pc}
 801a74c:	4283      	cmp	r3, r0
 801a74e:	d3f3      	bcc.n	801a738 <__mcmp+0x18>
 801a750:	e7fa      	b.n	801a748 <__mcmp+0x28>
 801a752:	f04f 32ff 	mov.w	r2, #4294967295
 801a756:	e7f7      	b.n	801a748 <__mcmp+0x28>

0801a758 <__mdiff>:
 801a758:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a75c:	460c      	mov	r4, r1
 801a75e:	4606      	mov	r6, r0
 801a760:	4611      	mov	r1, r2
 801a762:	4620      	mov	r0, r4
 801a764:	4690      	mov	r8, r2
 801a766:	f7ff ffdb 	bl	801a720 <__mcmp>
 801a76a:	1e05      	subs	r5, r0, #0
 801a76c:	d110      	bne.n	801a790 <__mdiff+0x38>
 801a76e:	4629      	mov	r1, r5
 801a770:	4630      	mov	r0, r6
 801a772:	f7ff fd59 	bl	801a228 <_Balloc>
 801a776:	b930      	cbnz	r0, 801a786 <__mdiff+0x2e>
 801a778:	4b3a      	ldr	r3, [pc, #232]	; (801a864 <__mdiff+0x10c>)
 801a77a:	4602      	mov	r2, r0
 801a77c:	f240 2137 	movw	r1, #567	; 0x237
 801a780:	4839      	ldr	r0, [pc, #228]	; (801a868 <__mdiff+0x110>)
 801a782:	f7fe fe3f 	bl	8019404 <__assert_func>
 801a786:	2301      	movs	r3, #1
 801a788:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801a78c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a790:	bfa4      	itt	ge
 801a792:	4643      	movge	r3, r8
 801a794:	46a0      	movge	r8, r4
 801a796:	4630      	mov	r0, r6
 801a798:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801a79c:	bfa6      	itte	ge
 801a79e:	461c      	movge	r4, r3
 801a7a0:	2500      	movge	r5, #0
 801a7a2:	2501      	movlt	r5, #1
 801a7a4:	f7ff fd40 	bl	801a228 <_Balloc>
 801a7a8:	b920      	cbnz	r0, 801a7b4 <__mdiff+0x5c>
 801a7aa:	4b2e      	ldr	r3, [pc, #184]	; (801a864 <__mdiff+0x10c>)
 801a7ac:	4602      	mov	r2, r0
 801a7ae:	f240 2145 	movw	r1, #581	; 0x245
 801a7b2:	e7e5      	b.n	801a780 <__mdiff+0x28>
 801a7b4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801a7b8:	6926      	ldr	r6, [r4, #16]
 801a7ba:	60c5      	str	r5, [r0, #12]
 801a7bc:	f104 0914 	add.w	r9, r4, #20
 801a7c0:	f108 0514 	add.w	r5, r8, #20
 801a7c4:	f100 0e14 	add.w	lr, r0, #20
 801a7c8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801a7cc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801a7d0:	f108 0210 	add.w	r2, r8, #16
 801a7d4:	46f2      	mov	sl, lr
 801a7d6:	2100      	movs	r1, #0
 801a7d8:	f859 3b04 	ldr.w	r3, [r9], #4
 801a7dc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801a7e0:	fa11 f88b 	uxtah	r8, r1, fp
 801a7e4:	b299      	uxth	r1, r3
 801a7e6:	0c1b      	lsrs	r3, r3, #16
 801a7e8:	eba8 0801 	sub.w	r8, r8, r1
 801a7ec:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801a7f0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801a7f4:	fa1f f888 	uxth.w	r8, r8
 801a7f8:	1419      	asrs	r1, r3, #16
 801a7fa:	454e      	cmp	r6, r9
 801a7fc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801a800:	f84a 3b04 	str.w	r3, [sl], #4
 801a804:	d8e8      	bhi.n	801a7d8 <__mdiff+0x80>
 801a806:	1b33      	subs	r3, r6, r4
 801a808:	3b15      	subs	r3, #21
 801a80a:	f023 0303 	bic.w	r3, r3, #3
 801a80e:	3304      	adds	r3, #4
 801a810:	3415      	adds	r4, #21
 801a812:	42a6      	cmp	r6, r4
 801a814:	bf38      	it	cc
 801a816:	2304      	movcc	r3, #4
 801a818:	441d      	add	r5, r3
 801a81a:	4473      	add	r3, lr
 801a81c:	469e      	mov	lr, r3
 801a81e:	462e      	mov	r6, r5
 801a820:	4566      	cmp	r6, ip
 801a822:	d30e      	bcc.n	801a842 <__mdiff+0xea>
 801a824:	f10c 0203 	add.w	r2, ip, #3
 801a828:	1b52      	subs	r2, r2, r5
 801a82a:	f022 0203 	bic.w	r2, r2, #3
 801a82e:	3d03      	subs	r5, #3
 801a830:	45ac      	cmp	ip, r5
 801a832:	bf38      	it	cc
 801a834:	2200      	movcc	r2, #0
 801a836:	4413      	add	r3, r2
 801a838:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801a83c:	b17a      	cbz	r2, 801a85e <__mdiff+0x106>
 801a83e:	6107      	str	r7, [r0, #16]
 801a840:	e7a4      	b.n	801a78c <__mdiff+0x34>
 801a842:	f856 8b04 	ldr.w	r8, [r6], #4
 801a846:	fa11 f288 	uxtah	r2, r1, r8
 801a84a:	1414      	asrs	r4, r2, #16
 801a84c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801a850:	b292      	uxth	r2, r2
 801a852:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801a856:	f84e 2b04 	str.w	r2, [lr], #4
 801a85a:	1421      	asrs	r1, r4, #16
 801a85c:	e7e0      	b.n	801a820 <__mdiff+0xc8>
 801a85e:	3f01      	subs	r7, #1
 801a860:	e7ea      	b.n	801a838 <__mdiff+0xe0>
 801a862:	bf00      	nop
 801a864:	0801e423 	.word	0x0801e423
 801a868:	0801e434 	.word	0x0801e434

0801a86c <__d2b>:
 801a86c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801a870:	460f      	mov	r7, r1
 801a872:	2101      	movs	r1, #1
 801a874:	ec59 8b10 	vmov	r8, r9, d0
 801a878:	4616      	mov	r6, r2
 801a87a:	f7ff fcd5 	bl	801a228 <_Balloc>
 801a87e:	4604      	mov	r4, r0
 801a880:	b930      	cbnz	r0, 801a890 <__d2b+0x24>
 801a882:	4602      	mov	r2, r0
 801a884:	4b24      	ldr	r3, [pc, #144]	; (801a918 <__d2b+0xac>)
 801a886:	4825      	ldr	r0, [pc, #148]	; (801a91c <__d2b+0xb0>)
 801a888:	f240 310f 	movw	r1, #783	; 0x30f
 801a88c:	f7fe fdba 	bl	8019404 <__assert_func>
 801a890:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801a894:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801a898:	bb2d      	cbnz	r5, 801a8e6 <__d2b+0x7a>
 801a89a:	9301      	str	r3, [sp, #4]
 801a89c:	f1b8 0300 	subs.w	r3, r8, #0
 801a8a0:	d026      	beq.n	801a8f0 <__d2b+0x84>
 801a8a2:	4668      	mov	r0, sp
 801a8a4:	9300      	str	r3, [sp, #0]
 801a8a6:	f7ff fd87 	bl	801a3b8 <__lo0bits>
 801a8aa:	e9dd 1200 	ldrd	r1, r2, [sp]
 801a8ae:	b1e8      	cbz	r0, 801a8ec <__d2b+0x80>
 801a8b0:	f1c0 0320 	rsb	r3, r0, #32
 801a8b4:	fa02 f303 	lsl.w	r3, r2, r3
 801a8b8:	430b      	orrs	r3, r1
 801a8ba:	40c2      	lsrs	r2, r0
 801a8bc:	6163      	str	r3, [r4, #20]
 801a8be:	9201      	str	r2, [sp, #4]
 801a8c0:	9b01      	ldr	r3, [sp, #4]
 801a8c2:	61a3      	str	r3, [r4, #24]
 801a8c4:	2b00      	cmp	r3, #0
 801a8c6:	bf14      	ite	ne
 801a8c8:	2202      	movne	r2, #2
 801a8ca:	2201      	moveq	r2, #1
 801a8cc:	6122      	str	r2, [r4, #16]
 801a8ce:	b1bd      	cbz	r5, 801a900 <__d2b+0x94>
 801a8d0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801a8d4:	4405      	add	r5, r0
 801a8d6:	603d      	str	r5, [r7, #0]
 801a8d8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801a8dc:	6030      	str	r0, [r6, #0]
 801a8de:	4620      	mov	r0, r4
 801a8e0:	b003      	add	sp, #12
 801a8e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a8e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801a8ea:	e7d6      	b.n	801a89a <__d2b+0x2e>
 801a8ec:	6161      	str	r1, [r4, #20]
 801a8ee:	e7e7      	b.n	801a8c0 <__d2b+0x54>
 801a8f0:	a801      	add	r0, sp, #4
 801a8f2:	f7ff fd61 	bl	801a3b8 <__lo0bits>
 801a8f6:	9b01      	ldr	r3, [sp, #4]
 801a8f8:	6163      	str	r3, [r4, #20]
 801a8fa:	3020      	adds	r0, #32
 801a8fc:	2201      	movs	r2, #1
 801a8fe:	e7e5      	b.n	801a8cc <__d2b+0x60>
 801a900:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801a904:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801a908:	6038      	str	r0, [r7, #0]
 801a90a:	6918      	ldr	r0, [r3, #16]
 801a90c:	f7ff fd34 	bl	801a378 <__hi0bits>
 801a910:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801a914:	e7e2      	b.n	801a8dc <__d2b+0x70>
 801a916:	bf00      	nop
 801a918:	0801e423 	.word	0x0801e423
 801a91c:	0801e434 	.word	0x0801e434

0801a920 <__sfputc_r>:
 801a920:	6893      	ldr	r3, [r2, #8]
 801a922:	3b01      	subs	r3, #1
 801a924:	2b00      	cmp	r3, #0
 801a926:	b410      	push	{r4}
 801a928:	6093      	str	r3, [r2, #8]
 801a92a:	da08      	bge.n	801a93e <__sfputc_r+0x1e>
 801a92c:	6994      	ldr	r4, [r2, #24]
 801a92e:	42a3      	cmp	r3, r4
 801a930:	db01      	blt.n	801a936 <__sfputc_r+0x16>
 801a932:	290a      	cmp	r1, #10
 801a934:	d103      	bne.n	801a93e <__sfputc_r+0x1e>
 801a936:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a93a:	f7fe bc38 	b.w	80191ae <__swbuf_r>
 801a93e:	6813      	ldr	r3, [r2, #0]
 801a940:	1c58      	adds	r0, r3, #1
 801a942:	6010      	str	r0, [r2, #0]
 801a944:	7019      	strb	r1, [r3, #0]
 801a946:	4608      	mov	r0, r1
 801a948:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a94c:	4770      	bx	lr

0801a94e <__sfputs_r>:
 801a94e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a950:	4606      	mov	r6, r0
 801a952:	460f      	mov	r7, r1
 801a954:	4614      	mov	r4, r2
 801a956:	18d5      	adds	r5, r2, r3
 801a958:	42ac      	cmp	r4, r5
 801a95a:	d101      	bne.n	801a960 <__sfputs_r+0x12>
 801a95c:	2000      	movs	r0, #0
 801a95e:	e007      	b.n	801a970 <__sfputs_r+0x22>
 801a960:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a964:	463a      	mov	r2, r7
 801a966:	4630      	mov	r0, r6
 801a968:	f7ff ffda 	bl	801a920 <__sfputc_r>
 801a96c:	1c43      	adds	r3, r0, #1
 801a96e:	d1f3      	bne.n	801a958 <__sfputs_r+0xa>
 801a970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a974 <_vfiprintf_r>:
 801a974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a978:	460d      	mov	r5, r1
 801a97a:	b09d      	sub	sp, #116	; 0x74
 801a97c:	4614      	mov	r4, r2
 801a97e:	4698      	mov	r8, r3
 801a980:	4606      	mov	r6, r0
 801a982:	b118      	cbz	r0, 801a98c <_vfiprintf_r+0x18>
 801a984:	6a03      	ldr	r3, [r0, #32]
 801a986:	b90b      	cbnz	r3, 801a98c <_vfiprintf_r+0x18>
 801a988:	f7fe fb2a 	bl	8018fe0 <__sinit>
 801a98c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a98e:	07d9      	lsls	r1, r3, #31
 801a990:	d405      	bmi.n	801a99e <_vfiprintf_r+0x2a>
 801a992:	89ab      	ldrh	r3, [r5, #12]
 801a994:	059a      	lsls	r2, r3, #22
 801a996:	d402      	bmi.n	801a99e <_vfiprintf_r+0x2a>
 801a998:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a99a:	f7fe fd23 	bl	80193e4 <__retarget_lock_acquire_recursive>
 801a99e:	89ab      	ldrh	r3, [r5, #12]
 801a9a0:	071b      	lsls	r3, r3, #28
 801a9a2:	d501      	bpl.n	801a9a8 <_vfiprintf_r+0x34>
 801a9a4:	692b      	ldr	r3, [r5, #16]
 801a9a6:	b99b      	cbnz	r3, 801a9d0 <_vfiprintf_r+0x5c>
 801a9a8:	4629      	mov	r1, r5
 801a9aa:	4630      	mov	r0, r6
 801a9ac:	f7fe fc3c 	bl	8019228 <__swsetup_r>
 801a9b0:	b170      	cbz	r0, 801a9d0 <_vfiprintf_r+0x5c>
 801a9b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a9b4:	07dc      	lsls	r4, r3, #31
 801a9b6:	d504      	bpl.n	801a9c2 <_vfiprintf_r+0x4e>
 801a9b8:	f04f 30ff 	mov.w	r0, #4294967295
 801a9bc:	b01d      	add	sp, #116	; 0x74
 801a9be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a9c2:	89ab      	ldrh	r3, [r5, #12]
 801a9c4:	0598      	lsls	r0, r3, #22
 801a9c6:	d4f7      	bmi.n	801a9b8 <_vfiprintf_r+0x44>
 801a9c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a9ca:	f7fe fd0c 	bl	80193e6 <__retarget_lock_release_recursive>
 801a9ce:	e7f3      	b.n	801a9b8 <_vfiprintf_r+0x44>
 801a9d0:	2300      	movs	r3, #0
 801a9d2:	9309      	str	r3, [sp, #36]	; 0x24
 801a9d4:	2320      	movs	r3, #32
 801a9d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a9da:	f8cd 800c 	str.w	r8, [sp, #12]
 801a9de:	2330      	movs	r3, #48	; 0x30
 801a9e0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801ab94 <_vfiprintf_r+0x220>
 801a9e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a9e8:	f04f 0901 	mov.w	r9, #1
 801a9ec:	4623      	mov	r3, r4
 801a9ee:	469a      	mov	sl, r3
 801a9f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a9f4:	b10a      	cbz	r2, 801a9fa <_vfiprintf_r+0x86>
 801a9f6:	2a25      	cmp	r2, #37	; 0x25
 801a9f8:	d1f9      	bne.n	801a9ee <_vfiprintf_r+0x7a>
 801a9fa:	ebba 0b04 	subs.w	fp, sl, r4
 801a9fe:	d00b      	beq.n	801aa18 <_vfiprintf_r+0xa4>
 801aa00:	465b      	mov	r3, fp
 801aa02:	4622      	mov	r2, r4
 801aa04:	4629      	mov	r1, r5
 801aa06:	4630      	mov	r0, r6
 801aa08:	f7ff ffa1 	bl	801a94e <__sfputs_r>
 801aa0c:	3001      	adds	r0, #1
 801aa0e:	f000 80a9 	beq.w	801ab64 <_vfiprintf_r+0x1f0>
 801aa12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801aa14:	445a      	add	r2, fp
 801aa16:	9209      	str	r2, [sp, #36]	; 0x24
 801aa18:	f89a 3000 	ldrb.w	r3, [sl]
 801aa1c:	2b00      	cmp	r3, #0
 801aa1e:	f000 80a1 	beq.w	801ab64 <_vfiprintf_r+0x1f0>
 801aa22:	2300      	movs	r3, #0
 801aa24:	f04f 32ff 	mov.w	r2, #4294967295
 801aa28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801aa2c:	f10a 0a01 	add.w	sl, sl, #1
 801aa30:	9304      	str	r3, [sp, #16]
 801aa32:	9307      	str	r3, [sp, #28]
 801aa34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801aa38:	931a      	str	r3, [sp, #104]	; 0x68
 801aa3a:	4654      	mov	r4, sl
 801aa3c:	2205      	movs	r2, #5
 801aa3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801aa42:	4854      	ldr	r0, [pc, #336]	; (801ab94 <_vfiprintf_r+0x220>)
 801aa44:	f7e6 fcec 	bl	8001420 <memchr>
 801aa48:	9a04      	ldr	r2, [sp, #16]
 801aa4a:	b9d8      	cbnz	r0, 801aa84 <_vfiprintf_r+0x110>
 801aa4c:	06d1      	lsls	r1, r2, #27
 801aa4e:	bf44      	itt	mi
 801aa50:	2320      	movmi	r3, #32
 801aa52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801aa56:	0713      	lsls	r3, r2, #28
 801aa58:	bf44      	itt	mi
 801aa5a:	232b      	movmi	r3, #43	; 0x2b
 801aa5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801aa60:	f89a 3000 	ldrb.w	r3, [sl]
 801aa64:	2b2a      	cmp	r3, #42	; 0x2a
 801aa66:	d015      	beq.n	801aa94 <_vfiprintf_r+0x120>
 801aa68:	9a07      	ldr	r2, [sp, #28]
 801aa6a:	4654      	mov	r4, sl
 801aa6c:	2000      	movs	r0, #0
 801aa6e:	f04f 0c0a 	mov.w	ip, #10
 801aa72:	4621      	mov	r1, r4
 801aa74:	f811 3b01 	ldrb.w	r3, [r1], #1
 801aa78:	3b30      	subs	r3, #48	; 0x30
 801aa7a:	2b09      	cmp	r3, #9
 801aa7c:	d94d      	bls.n	801ab1a <_vfiprintf_r+0x1a6>
 801aa7e:	b1b0      	cbz	r0, 801aaae <_vfiprintf_r+0x13a>
 801aa80:	9207      	str	r2, [sp, #28]
 801aa82:	e014      	b.n	801aaae <_vfiprintf_r+0x13a>
 801aa84:	eba0 0308 	sub.w	r3, r0, r8
 801aa88:	fa09 f303 	lsl.w	r3, r9, r3
 801aa8c:	4313      	orrs	r3, r2
 801aa8e:	9304      	str	r3, [sp, #16]
 801aa90:	46a2      	mov	sl, r4
 801aa92:	e7d2      	b.n	801aa3a <_vfiprintf_r+0xc6>
 801aa94:	9b03      	ldr	r3, [sp, #12]
 801aa96:	1d19      	adds	r1, r3, #4
 801aa98:	681b      	ldr	r3, [r3, #0]
 801aa9a:	9103      	str	r1, [sp, #12]
 801aa9c:	2b00      	cmp	r3, #0
 801aa9e:	bfbb      	ittet	lt
 801aaa0:	425b      	neglt	r3, r3
 801aaa2:	f042 0202 	orrlt.w	r2, r2, #2
 801aaa6:	9307      	strge	r3, [sp, #28]
 801aaa8:	9307      	strlt	r3, [sp, #28]
 801aaaa:	bfb8      	it	lt
 801aaac:	9204      	strlt	r2, [sp, #16]
 801aaae:	7823      	ldrb	r3, [r4, #0]
 801aab0:	2b2e      	cmp	r3, #46	; 0x2e
 801aab2:	d10c      	bne.n	801aace <_vfiprintf_r+0x15a>
 801aab4:	7863      	ldrb	r3, [r4, #1]
 801aab6:	2b2a      	cmp	r3, #42	; 0x2a
 801aab8:	d134      	bne.n	801ab24 <_vfiprintf_r+0x1b0>
 801aaba:	9b03      	ldr	r3, [sp, #12]
 801aabc:	1d1a      	adds	r2, r3, #4
 801aabe:	681b      	ldr	r3, [r3, #0]
 801aac0:	9203      	str	r2, [sp, #12]
 801aac2:	2b00      	cmp	r3, #0
 801aac4:	bfb8      	it	lt
 801aac6:	f04f 33ff 	movlt.w	r3, #4294967295
 801aaca:	3402      	adds	r4, #2
 801aacc:	9305      	str	r3, [sp, #20]
 801aace:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801aba4 <_vfiprintf_r+0x230>
 801aad2:	7821      	ldrb	r1, [r4, #0]
 801aad4:	2203      	movs	r2, #3
 801aad6:	4650      	mov	r0, sl
 801aad8:	f7e6 fca2 	bl	8001420 <memchr>
 801aadc:	b138      	cbz	r0, 801aaee <_vfiprintf_r+0x17a>
 801aade:	9b04      	ldr	r3, [sp, #16]
 801aae0:	eba0 000a 	sub.w	r0, r0, sl
 801aae4:	2240      	movs	r2, #64	; 0x40
 801aae6:	4082      	lsls	r2, r0
 801aae8:	4313      	orrs	r3, r2
 801aaea:	3401      	adds	r4, #1
 801aaec:	9304      	str	r3, [sp, #16]
 801aaee:	f814 1b01 	ldrb.w	r1, [r4], #1
 801aaf2:	4829      	ldr	r0, [pc, #164]	; (801ab98 <_vfiprintf_r+0x224>)
 801aaf4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801aaf8:	2206      	movs	r2, #6
 801aafa:	f7e6 fc91 	bl	8001420 <memchr>
 801aafe:	2800      	cmp	r0, #0
 801ab00:	d03f      	beq.n	801ab82 <_vfiprintf_r+0x20e>
 801ab02:	4b26      	ldr	r3, [pc, #152]	; (801ab9c <_vfiprintf_r+0x228>)
 801ab04:	bb1b      	cbnz	r3, 801ab4e <_vfiprintf_r+0x1da>
 801ab06:	9b03      	ldr	r3, [sp, #12]
 801ab08:	3307      	adds	r3, #7
 801ab0a:	f023 0307 	bic.w	r3, r3, #7
 801ab0e:	3308      	adds	r3, #8
 801ab10:	9303      	str	r3, [sp, #12]
 801ab12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ab14:	443b      	add	r3, r7
 801ab16:	9309      	str	r3, [sp, #36]	; 0x24
 801ab18:	e768      	b.n	801a9ec <_vfiprintf_r+0x78>
 801ab1a:	fb0c 3202 	mla	r2, ip, r2, r3
 801ab1e:	460c      	mov	r4, r1
 801ab20:	2001      	movs	r0, #1
 801ab22:	e7a6      	b.n	801aa72 <_vfiprintf_r+0xfe>
 801ab24:	2300      	movs	r3, #0
 801ab26:	3401      	adds	r4, #1
 801ab28:	9305      	str	r3, [sp, #20]
 801ab2a:	4619      	mov	r1, r3
 801ab2c:	f04f 0c0a 	mov.w	ip, #10
 801ab30:	4620      	mov	r0, r4
 801ab32:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ab36:	3a30      	subs	r2, #48	; 0x30
 801ab38:	2a09      	cmp	r2, #9
 801ab3a:	d903      	bls.n	801ab44 <_vfiprintf_r+0x1d0>
 801ab3c:	2b00      	cmp	r3, #0
 801ab3e:	d0c6      	beq.n	801aace <_vfiprintf_r+0x15a>
 801ab40:	9105      	str	r1, [sp, #20]
 801ab42:	e7c4      	b.n	801aace <_vfiprintf_r+0x15a>
 801ab44:	fb0c 2101 	mla	r1, ip, r1, r2
 801ab48:	4604      	mov	r4, r0
 801ab4a:	2301      	movs	r3, #1
 801ab4c:	e7f0      	b.n	801ab30 <_vfiprintf_r+0x1bc>
 801ab4e:	ab03      	add	r3, sp, #12
 801ab50:	9300      	str	r3, [sp, #0]
 801ab52:	462a      	mov	r2, r5
 801ab54:	4b12      	ldr	r3, [pc, #72]	; (801aba0 <_vfiprintf_r+0x22c>)
 801ab56:	a904      	add	r1, sp, #16
 801ab58:	4630      	mov	r0, r6
 801ab5a:	f7fd fe1d 	bl	8018798 <_printf_float>
 801ab5e:	4607      	mov	r7, r0
 801ab60:	1c78      	adds	r0, r7, #1
 801ab62:	d1d6      	bne.n	801ab12 <_vfiprintf_r+0x19e>
 801ab64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ab66:	07d9      	lsls	r1, r3, #31
 801ab68:	d405      	bmi.n	801ab76 <_vfiprintf_r+0x202>
 801ab6a:	89ab      	ldrh	r3, [r5, #12]
 801ab6c:	059a      	lsls	r2, r3, #22
 801ab6e:	d402      	bmi.n	801ab76 <_vfiprintf_r+0x202>
 801ab70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ab72:	f7fe fc38 	bl	80193e6 <__retarget_lock_release_recursive>
 801ab76:	89ab      	ldrh	r3, [r5, #12]
 801ab78:	065b      	lsls	r3, r3, #25
 801ab7a:	f53f af1d 	bmi.w	801a9b8 <_vfiprintf_r+0x44>
 801ab7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ab80:	e71c      	b.n	801a9bc <_vfiprintf_r+0x48>
 801ab82:	ab03      	add	r3, sp, #12
 801ab84:	9300      	str	r3, [sp, #0]
 801ab86:	462a      	mov	r2, r5
 801ab88:	4b05      	ldr	r3, [pc, #20]	; (801aba0 <_vfiprintf_r+0x22c>)
 801ab8a:	a904      	add	r1, sp, #16
 801ab8c:	4630      	mov	r0, r6
 801ab8e:	f7fe f88b 	bl	8018ca8 <_printf_i>
 801ab92:	e7e4      	b.n	801ab5e <_vfiprintf_r+0x1ea>
 801ab94:	0801e58c 	.word	0x0801e58c
 801ab98:	0801e596 	.word	0x0801e596
 801ab9c:	08018799 	.word	0x08018799
 801aba0:	0801a94f 	.word	0x0801a94f
 801aba4:	0801e592 	.word	0x0801e592

0801aba8 <__sflush_r>:
 801aba8:	898a      	ldrh	r2, [r1, #12]
 801abaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801abae:	4605      	mov	r5, r0
 801abb0:	0710      	lsls	r0, r2, #28
 801abb2:	460c      	mov	r4, r1
 801abb4:	d458      	bmi.n	801ac68 <__sflush_r+0xc0>
 801abb6:	684b      	ldr	r3, [r1, #4]
 801abb8:	2b00      	cmp	r3, #0
 801abba:	dc05      	bgt.n	801abc8 <__sflush_r+0x20>
 801abbc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801abbe:	2b00      	cmp	r3, #0
 801abc0:	dc02      	bgt.n	801abc8 <__sflush_r+0x20>
 801abc2:	2000      	movs	r0, #0
 801abc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801abc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801abca:	2e00      	cmp	r6, #0
 801abcc:	d0f9      	beq.n	801abc2 <__sflush_r+0x1a>
 801abce:	2300      	movs	r3, #0
 801abd0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801abd4:	682f      	ldr	r7, [r5, #0]
 801abd6:	6a21      	ldr	r1, [r4, #32]
 801abd8:	602b      	str	r3, [r5, #0]
 801abda:	d032      	beq.n	801ac42 <__sflush_r+0x9a>
 801abdc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801abde:	89a3      	ldrh	r3, [r4, #12]
 801abe0:	075a      	lsls	r2, r3, #29
 801abe2:	d505      	bpl.n	801abf0 <__sflush_r+0x48>
 801abe4:	6863      	ldr	r3, [r4, #4]
 801abe6:	1ac0      	subs	r0, r0, r3
 801abe8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801abea:	b10b      	cbz	r3, 801abf0 <__sflush_r+0x48>
 801abec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801abee:	1ac0      	subs	r0, r0, r3
 801abf0:	2300      	movs	r3, #0
 801abf2:	4602      	mov	r2, r0
 801abf4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801abf6:	6a21      	ldr	r1, [r4, #32]
 801abf8:	4628      	mov	r0, r5
 801abfa:	47b0      	blx	r6
 801abfc:	1c43      	adds	r3, r0, #1
 801abfe:	89a3      	ldrh	r3, [r4, #12]
 801ac00:	d106      	bne.n	801ac10 <__sflush_r+0x68>
 801ac02:	6829      	ldr	r1, [r5, #0]
 801ac04:	291d      	cmp	r1, #29
 801ac06:	d82b      	bhi.n	801ac60 <__sflush_r+0xb8>
 801ac08:	4a29      	ldr	r2, [pc, #164]	; (801acb0 <__sflush_r+0x108>)
 801ac0a:	410a      	asrs	r2, r1
 801ac0c:	07d6      	lsls	r6, r2, #31
 801ac0e:	d427      	bmi.n	801ac60 <__sflush_r+0xb8>
 801ac10:	2200      	movs	r2, #0
 801ac12:	6062      	str	r2, [r4, #4]
 801ac14:	04d9      	lsls	r1, r3, #19
 801ac16:	6922      	ldr	r2, [r4, #16]
 801ac18:	6022      	str	r2, [r4, #0]
 801ac1a:	d504      	bpl.n	801ac26 <__sflush_r+0x7e>
 801ac1c:	1c42      	adds	r2, r0, #1
 801ac1e:	d101      	bne.n	801ac24 <__sflush_r+0x7c>
 801ac20:	682b      	ldr	r3, [r5, #0]
 801ac22:	b903      	cbnz	r3, 801ac26 <__sflush_r+0x7e>
 801ac24:	6560      	str	r0, [r4, #84]	; 0x54
 801ac26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ac28:	602f      	str	r7, [r5, #0]
 801ac2a:	2900      	cmp	r1, #0
 801ac2c:	d0c9      	beq.n	801abc2 <__sflush_r+0x1a>
 801ac2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ac32:	4299      	cmp	r1, r3
 801ac34:	d002      	beq.n	801ac3c <__sflush_r+0x94>
 801ac36:	4628      	mov	r0, r5
 801ac38:	f7ff f9f6 	bl	801a028 <_free_r>
 801ac3c:	2000      	movs	r0, #0
 801ac3e:	6360      	str	r0, [r4, #52]	; 0x34
 801ac40:	e7c0      	b.n	801abc4 <__sflush_r+0x1c>
 801ac42:	2301      	movs	r3, #1
 801ac44:	4628      	mov	r0, r5
 801ac46:	47b0      	blx	r6
 801ac48:	1c41      	adds	r1, r0, #1
 801ac4a:	d1c8      	bne.n	801abde <__sflush_r+0x36>
 801ac4c:	682b      	ldr	r3, [r5, #0]
 801ac4e:	2b00      	cmp	r3, #0
 801ac50:	d0c5      	beq.n	801abde <__sflush_r+0x36>
 801ac52:	2b1d      	cmp	r3, #29
 801ac54:	d001      	beq.n	801ac5a <__sflush_r+0xb2>
 801ac56:	2b16      	cmp	r3, #22
 801ac58:	d101      	bne.n	801ac5e <__sflush_r+0xb6>
 801ac5a:	602f      	str	r7, [r5, #0]
 801ac5c:	e7b1      	b.n	801abc2 <__sflush_r+0x1a>
 801ac5e:	89a3      	ldrh	r3, [r4, #12]
 801ac60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ac64:	81a3      	strh	r3, [r4, #12]
 801ac66:	e7ad      	b.n	801abc4 <__sflush_r+0x1c>
 801ac68:	690f      	ldr	r7, [r1, #16]
 801ac6a:	2f00      	cmp	r7, #0
 801ac6c:	d0a9      	beq.n	801abc2 <__sflush_r+0x1a>
 801ac6e:	0793      	lsls	r3, r2, #30
 801ac70:	680e      	ldr	r6, [r1, #0]
 801ac72:	bf08      	it	eq
 801ac74:	694b      	ldreq	r3, [r1, #20]
 801ac76:	600f      	str	r7, [r1, #0]
 801ac78:	bf18      	it	ne
 801ac7a:	2300      	movne	r3, #0
 801ac7c:	eba6 0807 	sub.w	r8, r6, r7
 801ac80:	608b      	str	r3, [r1, #8]
 801ac82:	f1b8 0f00 	cmp.w	r8, #0
 801ac86:	dd9c      	ble.n	801abc2 <__sflush_r+0x1a>
 801ac88:	6a21      	ldr	r1, [r4, #32]
 801ac8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801ac8c:	4643      	mov	r3, r8
 801ac8e:	463a      	mov	r2, r7
 801ac90:	4628      	mov	r0, r5
 801ac92:	47b0      	blx	r6
 801ac94:	2800      	cmp	r0, #0
 801ac96:	dc06      	bgt.n	801aca6 <__sflush_r+0xfe>
 801ac98:	89a3      	ldrh	r3, [r4, #12]
 801ac9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ac9e:	81a3      	strh	r3, [r4, #12]
 801aca0:	f04f 30ff 	mov.w	r0, #4294967295
 801aca4:	e78e      	b.n	801abc4 <__sflush_r+0x1c>
 801aca6:	4407      	add	r7, r0
 801aca8:	eba8 0800 	sub.w	r8, r8, r0
 801acac:	e7e9      	b.n	801ac82 <__sflush_r+0xda>
 801acae:	bf00      	nop
 801acb0:	dfbffffe 	.word	0xdfbffffe

0801acb4 <_fflush_r>:
 801acb4:	b538      	push	{r3, r4, r5, lr}
 801acb6:	690b      	ldr	r3, [r1, #16]
 801acb8:	4605      	mov	r5, r0
 801acba:	460c      	mov	r4, r1
 801acbc:	b913      	cbnz	r3, 801acc4 <_fflush_r+0x10>
 801acbe:	2500      	movs	r5, #0
 801acc0:	4628      	mov	r0, r5
 801acc2:	bd38      	pop	{r3, r4, r5, pc}
 801acc4:	b118      	cbz	r0, 801acce <_fflush_r+0x1a>
 801acc6:	6a03      	ldr	r3, [r0, #32]
 801acc8:	b90b      	cbnz	r3, 801acce <_fflush_r+0x1a>
 801acca:	f7fe f989 	bl	8018fe0 <__sinit>
 801acce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801acd2:	2b00      	cmp	r3, #0
 801acd4:	d0f3      	beq.n	801acbe <_fflush_r+0xa>
 801acd6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801acd8:	07d0      	lsls	r0, r2, #31
 801acda:	d404      	bmi.n	801ace6 <_fflush_r+0x32>
 801acdc:	0599      	lsls	r1, r3, #22
 801acde:	d402      	bmi.n	801ace6 <_fflush_r+0x32>
 801ace0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ace2:	f7fe fb7f 	bl	80193e4 <__retarget_lock_acquire_recursive>
 801ace6:	4628      	mov	r0, r5
 801ace8:	4621      	mov	r1, r4
 801acea:	f7ff ff5d 	bl	801aba8 <__sflush_r>
 801acee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801acf0:	07da      	lsls	r2, r3, #31
 801acf2:	4605      	mov	r5, r0
 801acf4:	d4e4      	bmi.n	801acc0 <_fflush_r+0xc>
 801acf6:	89a3      	ldrh	r3, [r4, #12]
 801acf8:	059b      	lsls	r3, r3, #22
 801acfa:	d4e1      	bmi.n	801acc0 <_fflush_r+0xc>
 801acfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801acfe:	f7fe fb72 	bl	80193e6 <__retarget_lock_release_recursive>
 801ad02:	e7dd      	b.n	801acc0 <_fflush_r+0xc>

0801ad04 <fiprintf>:
 801ad04:	b40e      	push	{r1, r2, r3}
 801ad06:	b503      	push	{r0, r1, lr}
 801ad08:	4601      	mov	r1, r0
 801ad0a:	ab03      	add	r3, sp, #12
 801ad0c:	4805      	ldr	r0, [pc, #20]	; (801ad24 <fiprintf+0x20>)
 801ad0e:	f853 2b04 	ldr.w	r2, [r3], #4
 801ad12:	6800      	ldr	r0, [r0, #0]
 801ad14:	9301      	str	r3, [sp, #4]
 801ad16:	f7ff fe2d 	bl	801a974 <_vfiprintf_r>
 801ad1a:	b002      	add	sp, #8
 801ad1c:	f85d eb04 	ldr.w	lr, [sp], #4
 801ad20:	b003      	add	sp, #12
 801ad22:	4770      	bx	lr
 801ad24:	200000b8 	.word	0x200000b8

0801ad28 <__swhatbuf_r>:
 801ad28:	b570      	push	{r4, r5, r6, lr}
 801ad2a:	460c      	mov	r4, r1
 801ad2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ad30:	2900      	cmp	r1, #0
 801ad32:	b096      	sub	sp, #88	; 0x58
 801ad34:	4615      	mov	r5, r2
 801ad36:	461e      	mov	r6, r3
 801ad38:	da0d      	bge.n	801ad56 <__swhatbuf_r+0x2e>
 801ad3a:	89a3      	ldrh	r3, [r4, #12]
 801ad3c:	f013 0f80 	tst.w	r3, #128	; 0x80
 801ad40:	f04f 0100 	mov.w	r1, #0
 801ad44:	bf0c      	ite	eq
 801ad46:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801ad4a:	2340      	movne	r3, #64	; 0x40
 801ad4c:	2000      	movs	r0, #0
 801ad4e:	6031      	str	r1, [r6, #0]
 801ad50:	602b      	str	r3, [r5, #0]
 801ad52:	b016      	add	sp, #88	; 0x58
 801ad54:	bd70      	pop	{r4, r5, r6, pc}
 801ad56:	466a      	mov	r2, sp
 801ad58:	f000 f848 	bl	801adec <_fstat_r>
 801ad5c:	2800      	cmp	r0, #0
 801ad5e:	dbec      	blt.n	801ad3a <__swhatbuf_r+0x12>
 801ad60:	9901      	ldr	r1, [sp, #4]
 801ad62:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801ad66:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801ad6a:	4259      	negs	r1, r3
 801ad6c:	4159      	adcs	r1, r3
 801ad6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ad72:	e7eb      	b.n	801ad4c <__swhatbuf_r+0x24>

0801ad74 <__smakebuf_r>:
 801ad74:	898b      	ldrh	r3, [r1, #12]
 801ad76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ad78:	079d      	lsls	r5, r3, #30
 801ad7a:	4606      	mov	r6, r0
 801ad7c:	460c      	mov	r4, r1
 801ad7e:	d507      	bpl.n	801ad90 <__smakebuf_r+0x1c>
 801ad80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801ad84:	6023      	str	r3, [r4, #0]
 801ad86:	6123      	str	r3, [r4, #16]
 801ad88:	2301      	movs	r3, #1
 801ad8a:	6163      	str	r3, [r4, #20]
 801ad8c:	b002      	add	sp, #8
 801ad8e:	bd70      	pop	{r4, r5, r6, pc}
 801ad90:	ab01      	add	r3, sp, #4
 801ad92:	466a      	mov	r2, sp
 801ad94:	f7ff ffc8 	bl	801ad28 <__swhatbuf_r>
 801ad98:	9900      	ldr	r1, [sp, #0]
 801ad9a:	4605      	mov	r5, r0
 801ad9c:	4630      	mov	r0, r6
 801ad9e:	f7ff f9b7 	bl	801a110 <_malloc_r>
 801ada2:	b948      	cbnz	r0, 801adb8 <__smakebuf_r+0x44>
 801ada4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ada8:	059a      	lsls	r2, r3, #22
 801adaa:	d4ef      	bmi.n	801ad8c <__smakebuf_r+0x18>
 801adac:	f023 0303 	bic.w	r3, r3, #3
 801adb0:	f043 0302 	orr.w	r3, r3, #2
 801adb4:	81a3      	strh	r3, [r4, #12]
 801adb6:	e7e3      	b.n	801ad80 <__smakebuf_r+0xc>
 801adb8:	89a3      	ldrh	r3, [r4, #12]
 801adba:	6020      	str	r0, [r4, #0]
 801adbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801adc0:	81a3      	strh	r3, [r4, #12]
 801adc2:	9b00      	ldr	r3, [sp, #0]
 801adc4:	6163      	str	r3, [r4, #20]
 801adc6:	9b01      	ldr	r3, [sp, #4]
 801adc8:	6120      	str	r0, [r4, #16]
 801adca:	b15b      	cbz	r3, 801ade4 <__smakebuf_r+0x70>
 801adcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801add0:	4630      	mov	r0, r6
 801add2:	f000 f81d 	bl	801ae10 <_isatty_r>
 801add6:	b128      	cbz	r0, 801ade4 <__smakebuf_r+0x70>
 801add8:	89a3      	ldrh	r3, [r4, #12]
 801adda:	f023 0303 	bic.w	r3, r3, #3
 801adde:	f043 0301 	orr.w	r3, r3, #1
 801ade2:	81a3      	strh	r3, [r4, #12]
 801ade4:	89a3      	ldrh	r3, [r4, #12]
 801ade6:	431d      	orrs	r5, r3
 801ade8:	81a5      	strh	r5, [r4, #12]
 801adea:	e7cf      	b.n	801ad8c <__smakebuf_r+0x18>

0801adec <_fstat_r>:
 801adec:	b538      	push	{r3, r4, r5, lr}
 801adee:	4d07      	ldr	r5, [pc, #28]	; (801ae0c <_fstat_r+0x20>)
 801adf0:	2300      	movs	r3, #0
 801adf2:	4604      	mov	r4, r0
 801adf4:	4608      	mov	r0, r1
 801adf6:	4611      	mov	r1, r2
 801adf8:	602b      	str	r3, [r5, #0]
 801adfa:	f7e7 ff3e 	bl	8002c7a <_fstat>
 801adfe:	1c43      	adds	r3, r0, #1
 801ae00:	d102      	bne.n	801ae08 <_fstat_r+0x1c>
 801ae02:	682b      	ldr	r3, [r5, #0]
 801ae04:	b103      	cbz	r3, 801ae08 <_fstat_r+0x1c>
 801ae06:	6023      	str	r3, [r4, #0]
 801ae08:	bd38      	pop	{r3, r4, r5, pc}
 801ae0a:	bf00      	nop
 801ae0c:	20008290 	.word	0x20008290

0801ae10 <_isatty_r>:
 801ae10:	b538      	push	{r3, r4, r5, lr}
 801ae12:	4d06      	ldr	r5, [pc, #24]	; (801ae2c <_isatty_r+0x1c>)
 801ae14:	2300      	movs	r3, #0
 801ae16:	4604      	mov	r4, r0
 801ae18:	4608      	mov	r0, r1
 801ae1a:	602b      	str	r3, [r5, #0]
 801ae1c:	f7e7 ff3d 	bl	8002c9a <_isatty>
 801ae20:	1c43      	adds	r3, r0, #1
 801ae22:	d102      	bne.n	801ae2a <_isatty_r+0x1a>
 801ae24:	682b      	ldr	r3, [r5, #0]
 801ae26:	b103      	cbz	r3, 801ae2a <_isatty_r+0x1a>
 801ae28:	6023      	str	r3, [r4, #0]
 801ae2a:	bd38      	pop	{r3, r4, r5, pc}
 801ae2c:	20008290 	.word	0x20008290

0801ae30 <_sbrk_r>:
 801ae30:	b538      	push	{r3, r4, r5, lr}
 801ae32:	4d06      	ldr	r5, [pc, #24]	; (801ae4c <_sbrk_r+0x1c>)
 801ae34:	2300      	movs	r3, #0
 801ae36:	4604      	mov	r4, r0
 801ae38:	4608      	mov	r0, r1
 801ae3a:	602b      	str	r3, [r5, #0]
 801ae3c:	f7e7 ff46 	bl	8002ccc <_sbrk>
 801ae40:	1c43      	adds	r3, r0, #1
 801ae42:	d102      	bne.n	801ae4a <_sbrk_r+0x1a>
 801ae44:	682b      	ldr	r3, [r5, #0]
 801ae46:	b103      	cbz	r3, 801ae4a <_sbrk_r+0x1a>
 801ae48:	6023      	str	r3, [r4, #0]
 801ae4a:	bd38      	pop	{r3, r4, r5, pc}
 801ae4c:	20008290 	.word	0x20008290

0801ae50 <abort>:
 801ae50:	b508      	push	{r3, lr}
 801ae52:	2006      	movs	r0, #6
 801ae54:	f000 f860 	bl	801af18 <raise>
 801ae58:	2001      	movs	r0, #1
 801ae5a:	f7e7 febf 	bl	8002bdc <_exit>

0801ae5e <_calloc_r>:
 801ae5e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ae60:	fba1 2402 	umull	r2, r4, r1, r2
 801ae64:	b94c      	cbnz	r4, 801ae7a <_calloc_r+0x1c>
 801ae66:	4611      	mov	r1, r2
 801ae68:	9201      	str	r2, [sp, #4]
 801ae6a:	f7ff f951 	bl	801a110 <_malloc_r>
 801ae6e:	9a01      	ldr	r2, [sp, #4]
 801ae70:	4605      	mov	r5, r0
 801ae72:	b930      	cbnz	r0, 801ae82 <_calloc_r+0x24>
 801ae74:	4628      	mov	r0, r5
 801ae76:	b003      	add	sp, #12
 801ae78:	bd30      	pop	{r4, r5, pc}
 801ae7a:	220c      	movs	r2, #12
 801ae7c:	6002      	str	r2, [r0, #0]
 801ae7e:	2500      	movs	r5, #0
 801ae80:	e7f8      	b.n	801ae74 <_calloc_r+0x16>
 801ae82:	4621      	mov	r1, r4
 801ae84:	f7fe fa38 	bl	80192f8 <memset>
 801ae88:	e7f4      	b.n	801ae74 <_calloc_r+0x16>

0801ae8a <__ascii_mbtowc>:
 801ae8a:	b082      	sub	sp, #8
 801ae8c:	b901      	cbnz	r1, 801ae90 <__ascii_mbtowc+0x6>
 801ae8e:	a901      	add	r1, sp, #4
 801ae90:	b142      	cbz	r2, 801aea4 <__ascii_mbtowc+0x1a>
 801ae92:	b14b      	cbz	r3, 801aea8 <__ascii_mbtowc+0x1e>
 801ae94:	7813      	ldrb	r3, [r2, #0]
 801ae96:	600b      	str	r3, [r1, #0]
 801ae98:	7812      	ldrb	r2, [r2, #0]
 801ae9a:	1e10      	subs	r0, r2, #0
 801ae9c:	bf18      	it	ne
 801ae9e:	2001      	movne	r0, #1
 801aea0:	b002      	add	sp, #8
 801aea2:	4770      	bx	lr
 801aea4:	4610      	mov	r0, r2
 801aea6:	e7fb      	b.n	801aea0 <__ascii_mbtowc+0x16>
 801aea8:	f06f 0001 	mvn.w	r0, #1
 801aeac:	e7f8      	b.n	801aea0 <__ascii_mbtowc+0x16>

0801aeae <__ascii_wctomb>:
 801aeae:	b149      	cbz	r1, 801aec4 <__ascii_wctomb+0x16>
 801aeb0:	2aff      	cmp	r2, #255	; 0xff
 801aeb2:	bf85      	ittet	hi
 801aeb4:	238a      	movhi	r3, #138	; 0x8a
 801aeb6:	6003      	strhi	r3, [r0, #0]
 801aeb8:	700a      	strbls	r2, [r1, #0]
 801aeba:	f04f 30ff 	movhi.w	r0, #4294967295
 801aebe:	bf98      	it	ls
 801aec0:	2001      	movls	r0, #1
 801aec2:	4770      	bx	lr
 801aec4:	4608      	mov	r0, r1
 801aec6:	4770      	bx	lr

0801aec8 <_raise_r>:
 801aec8:	291f      	cmp	r1, #31
 801aeca:	b538      	push	{r3, r4, r5, lr}
 801aecc:	4604      	mov	r4, r0
 801aece:	460d      	mov	r5, r1
 801aed0:	d904      	bls.n	801aedc <_raise_r+0x14>
 801aed2:	2316      	movs	r3, #22
 801aed4:	6003      	str	r3, [r0, #0]
 801aed6:	f04f 30ff 	mov.w	r0, #4294967295
 801aeda:	bd38      	pop	{r3, r4, r5, pc}
 801aedc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801aede:	b112      	cbz	r2, 801aee6 <_raise_r+0x1e>
 801aee0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801aee4:	b94b      	cbnz	r3, 801aefa <_raise_r+0x32>
 801aee6:	4620      	mov	r0, r4
 801aee8:	f000 f830 	bl	801af4c <_getpid_r>
 801aeec:	462a      	mov	r2, r5
 801aeee:	4601      	mov	r1, r0
 801aef0:	4620      	mov	r0, r4
 801aef2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801aef6:	f000 b817 	b.w	801af28 <_kill_r>
 801aefa:	2b01      	cmp	r3, #1
 801aefc:	d00a      	beq.n	801af14 <_raise_r+0x4c>
 801aefe:	1c59      	adds	r1, r3, #1
 801af00:	d103      	bne.n	801af0a <_raise_r+0x42>
 801af02:	2316      	movs	r3, #22
 801af04:	6003      	str	r3, [r0, #0]
 801af06:	2001      	movs	r0, #1
 801af08:	e7e7      	b.n	801aeda <_raise_r+0x12>
 801af0a:	2400      	movs	r4, #0
 801af0c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801af10:	4628      	mov	r0, r5
 801af12:	4798      	blx	r3
 801af14:	2000      	movs	r0, #0
 801af16:	e7e0      	b.n	801aeda <_raise_r+0x12>

0801af18 <raise>:
 801af18:	4b02      	ldr	r3, [pc, #8]	; (801af24 <raise+0xc>)
 801af1a:	4601      	mov	r1, r0
 801af1c:	6818      	ldr	r0, [r3, #0]
 801af1e:	f7ff bfd3 	b.w	801aec8 <_raise_r>
 801af22:	bf00      	nop
 801af24:	200000b8 	.word	0x200000b8

0801af28 <_kill_r>:
 801af28:	b538      	push	{r3, r4, r5, lr}
 801af2a:	4d07      	ldr	r5, [pc, #28]	; (801af48 <_kill_r+0x20>)
 801af2c:	2300      	movs	r3, #0
 801af2e:	4604      	mov	r4, r0
 801af30:	4608      	mov	r0, r1
 801af32:	4611      	mov	r1, r2
 801af34:	602b      	str	r3, [r5, #0]
 801af36:	f7e7 fe3f 	bl	8002bb8 <_kill>
 801af3a:	1c43      	adds	r3, r0, #1
 801af3c:	d102      	bne.n	801af44 <_kill_r+0x1c>
 801af3e:	682b      	ldr	r3, [r5, #0]
 801af40:	b103      	cbz	r3, 801af44 <_kill_r+0x1c>
 801af42:	6023      	str	r3, [r4, #0]
 801af44:	bd38      	pop	{r3, r4, r5, pc}
 801af46:	bf00      	nop
 801af48:	20008290 	.word	0x20008290

0801af4c <_getpid_r>:
 801af4c:	f7e7 be2c 	b.w	8002ba8 <_getpid>

0801af50 <_init>:
 801af50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801af52:	bf00      	nop
 801af54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801af56:	bc08      	pop	{r3}
 801af58:	469e      	mov	lr, r3
 801af5a:	4770      	bx	lr

0801af5c <_fini>:
 801af5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801af5e:	bf00      	nop
 801af60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801af62:	bc08      	pop	{r3}
 801af64:	469e      	mov	lr, r3
 801af66:	4770      	bx	lr

0801af68 <__calc_fixed_time_MW_sweep_veneer>:
 801af68:	f85f f000 	ldr.w	pc, [pc]	; 801af6c <__calc_fixed_time_MW_sweep_veneer+0x4>
 801af6c:	0000080d 	.word	0x0000080d

0801af70 <__set_aom_atten_veneer>:
 801af70:	f85f f000 	ldr.w	pc, [pc]	; 801af74 <__set_aom_atten_veneer+0x4>
 801af74:	00001049 	.word	0x00001049

0801af78 <__start_pop_veneer>:
 801af78:	f85f f000 	ldr.w	pc, [pc]	; 801af7c <__start_pop_veneer+0x4>
 801af7c:	00000f79 	.word	0x00000f79

0801af80 <__MW_update_veneer>:
 801af80:	f85f f000 	ldr.w	pc, [pc]	; 801af84 <__MW_update_veneer+0x4>
 801af84:	00000b75 	.word	0x00000b75

0801af88 <__timer_delay_veneer>:
 801af88:	f85f f000 	ldr.w	pc, [pc]	; 801af8c <__timer_delay_veneer+0x4>
 801af8c:	00000f4d 	.word	0x00000f4d

0801af90 <__init_synthesiser_veneer>:
 801af90:	f85f f000 	ldr.w	pc, [pc]	; 801af94 <__init_synthesiser_veneer+0x4>
 801af94:	00000181 	.word	0x00000181

0801af98 <__set_MW_power_veneer>:
 801af98:	f85f f000 	ldr.w	pc, [pc]	; 801af9c <__set_MW_power_veneer+0x4>
 801af9c:	00000123 	.word	0x00000123

0801afa0 <__stop_pop_veneer>:
 801afa0:	f85f f000 	ldr.w	pc, [pc]	; 801afa4 <__stop_pop_veneer+0x4>
 801afa4:	00000fd5 	.word	0x00000fd5

0801afa8 <__start_MW_sweep_veneer>:
 801afa8:	f85f f000 	ldr.w	pc, [pc]	; 801afac <__start_MW_sweep_veneer+0x4>
 801afac:	00000b11 	.word	0x00000b11
