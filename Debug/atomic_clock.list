
atomic_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .itcm         000014e0  00000000  08000298  00020000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00019d20  08001780  08001780  00021780  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .user_flash   00000000  08100000  08100000  000402ec  2**0
                  CONTENTS
  4 .rodata       00003720  0801b4a0  0801b4a0  0003b4a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  0801ebc0  0801ebc0  0003ebc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .init_array   00000004  0801ebc8  0801ebc8  0003ebc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ebcc  0801ebcc  0003ebcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000022c  20000000  0801ebd0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  2000022c  0801edfc  0004022c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  2000028c  0801ee5c  0004028c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00008080  200002f0  0801eebc  000402f0  2**3
                  ALLOC
 12 ._user_heap_stack 00000600  20008370  0801eebc  00048370  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000402ec  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  0004031a  2**0
                  CONTENTS, READONLY
 15 .debug_info   00039207  00000000  00000000  0004035d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00007449  00000000  00000000  00079564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000029a0  00000000  00000000  000809b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00002139  00000000  00000000  00083350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00011b85  00000000  00000000  00085489  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000407ea  00000000  00000000  0009700e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001a93f4  00000000  00000000  000d77f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000bfbc  00000000  00000000  00280bec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000052  00000000  00000000  0028cba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .itcm:

00000000 <synth_writereg>:
  * @param  Address
  * @param  Chip address
  * @param  Verify
  * @retval Contents read back from register
  */
static uint32_t synth_writereg(const uint32_t data, const uint32_t reg_address, const uint32_t chip_address, const bool verify) {
       0:	b580      	push	{r7, lr}
       2:	b08a      	sub	sp, #40	; 0x28
       4:	af00      	add	r7, sp, #0
       6:	60f8      	str	r0, [r7, #12]
       8:	60b9      	str	r1, [r7, #8]
       a:	607a      	str	r2, [r7, #4]
       c:	70fb      	strb	r3, [r7, #3]

	uint32_t read_data = 0;
       e:	2300      	movs	r3, #0
      10:	627b      	str	r3, [r7, #36]	; 0x24
	const uint32_t write_data = (data << 8) | (reg_address << 3) | chip_address; // This is what we will write, 32 bits in total.
      12:	68fb      	ldr	r3, [r7, #12]
      14:	021a      	lsls	r2, r3, #8
      16:	68bb      	ldr	r3, [r7, #8]
      18:	00db      	lsls	r3, r3, #3
      1a:	4313      	orrs	r3, r2
      1c:	687a      	ldr	r2, [r7, #4]
      1e:	4313      	orrs	r3, r2
      20:	61fb      	str	r3, [r7, #28]
	#ifdef SPI_DEBUG
		printf("SPI BYTES WRITTEN: 0x%X \r\n", write_data);
	#endif //SPI_DEBUG
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
      22:	2200      	movs	r2, #0
      24:	f44f 7180 	mov.w	r1, #256	; 0x100
      28:	4830      	ldr	r0, [pc, #192]	; (ec <synth_writereg+0xec>)
      2a:	f001 fa3d 	bl	14a8 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 0); // Take SEN low to indicate we are sending data
      2e:	2200      	movs	r2, #0
      30:	f44f 6100 	mov.w	r1, #2048	; 0x800
      34:	482d      	ldr	r0, [pc, #180]	; (ec <synth_writereg+0xec>)
      36:	f001 fa37 	bl	14a8 <__HAL_GPIO_WritePin_veneer>

	/* Clock in the data */
	for (uint32_t i = 0; i < SYNTH_SPI_BITS; i++) {
      3a:	2300      	movs	r3, #0
      3c:	623b      	str	r3, [r7, #32]
      3e:	e036      	b.n	ae <synth_writereg+0xae>

		/* Data written on the rising edge */
		uint32_t bit = (SYNTH_SPI_BITS - 1 - i);
      40:	2220      	movs	r2, #32
      42:	6a3b      	ldr	r3, [r7, #32]
      44:	1ad3      	subs	r3, r2, r3
      46:	3b01      	subs	r3, #1
      48:	617b      	str	r3, [r7, #20]
		HAL_GPIO_WritePin(MOSI_GPIO_Port, MOSI_Pin, !!(write_data & (1 << bit)));
      4a:	2201      	movs	r2, #1
      4c:	697b      	ldr	r3, [r7, #20]
      4e:	fa02 f303 	lsl.w	r3, r2, r3
      52:	461a      	mov	r2, r3
      54:	69fb      	ldr	r3, [r7, #28]
      56:	4013      	ands	r3, r2
      58:	2b00      	cmp	r3, #0
      5a:	bf14      	ite	ne
      5c:	2301      	movne	r3, #1
      5e:	2300      	moveq	r3, #0
      60:	b2db      	uxtb	r3, r3
      62:	461a      	mov	r2, r3
      64:	f44f 7100 	mov.w	r1, #512	; 0x200
      68:	4820      	ldr	r0, [pc, #128]	; (ec <synth_writereg+0xec>)
      6a:	f001 fa1d 	bl	14a8 <__HAL_GPIO_WritePin_veneer>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 1);
      6e:	2201      	movs	r2, #1
      70:	f44f 7180 	mov.w	r1, #256	; 0x100
      74:	481d      	ldr	r0, [pc, #116]	; (ec <synth_writereg+0xec>)
      76:	f001 fa17 	bl	14a8 <__HAL_GPIO_WritePin_veneer>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
      7a:	2200      	movs	r2, #0
      7c:	f44f 7180 	mov.w	r1, #256	; 0x100
      80:	481a      	ldr	r0, [pc, #104]	; (ec <synth_writereg+0xec>)
      82:	f001 fa11 	bl	14a8 <__HAL_GPIO_WritePin_veneer>

		/* Data read on the falling edge */
		read_data = read_data
				| (HAL_GPIO_ReadPin(MISO_GPIO_Port, MISO_Pin)
      86:	f44f 6180 	mov.w	r1, #1024	; 0x400
      8a:	4818      	ldr	r0, [pc, #96]	; (ec <synth_writereg+0xec>)
      8c:	f001 fa1c 	bl	14c8 <__HAL_GPIO_ReadPin_veneer>
      90:	4603      	mov	r3, r0
      92:	4619      	mov	r1, r3
						<< (SYNTH_SPI_BITS - 1 - i));
      94:	2220      	movs	r2, #32
      96:	6a3b      	ldr	r3, [r7, #32]
      98:	1ad3      	subs	r3, r2, r3
      9a:	3b01      	subs	r3, #1
      9c:	fa01 f303 	lsl.w	r3, r1, r3
      a0:	461a      	mov	r2, r3
		read_data = read_data
      a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
      a4:	4313      	orrs	r3, r2
      a6:	627b      	str	r3, [r7, #36]	; 0x24
	for (uint32_t i = 0; i < SYNTH_SPI_BITS; i++) {
      a8:	6a3b      	ldr	r3, [r7, #32]
      aa:	3301      	adds	r3, #1
      ac:	623b      	str	r3, [r7, #32]
      ae:	2220      	movs	r2, #32
      b0:	6a3b      	ldr	r3, [r7, #32]
      b2:	4293      	cmp	r3, r2
      b4:	d3c4      	bcc.n	40 <synth_writereg+0x40>
	}

	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 1); // Assert the SEN line to register the transmitted data
      b6:	2201      	movs	r2, #1
      b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
      bc:	480b      	ldr	r0, [pc, #44]	; (ec <synth_writereg+0xec>)
      be:	f001 f9f3 	bl	14a8 <__HAL_GPIO_WritePin_veneer>

	if (verify) {
      c2:	78fb      	ldrb	r3, [r7, #3]
      c4:	2b00      	cmp	r3, #0
      c6:	d00c      	beq.n	e2 <synth_writereg+0xe2>
		const uint32_t verify_data = synth_readreg(reg_address); // Data returned on the second cycle
      c8:	68b8      	ldr	r0, [r7, #8]
      ca:	f000 f813 	bl	f4 <synth_readreg>
      ce:	61b8      	str	r0, [r7, #24]
		if (verify_data != data) {
      d0:	69ba      	ldr	r2, [r7, #24]
      d2:	68fb      	ldr	r3, [r7, #12]
      d4:	429a      	cmp	r2, r3
      d6:	d004      	beq.n	e2 <synth_writereg+0xe2>
			printf("SPI transmission error!\n");
      d8:	4805      	ldr	r0, [pc, #20]	; (f0 <synth_writereg+0xf0>)
      da:	f001 f9e9 	bl	14b0 <__puts_veneer>
			Error_Handler(); // We enter an infinite loop here
      de:	f001 f9df 	bl	14a0 <__Error_Handler_veneer>
		}
	}

	return read_data;
      e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
      e4:	4618      	mov	r0, r3
      e6:	3728      	adds	r7, #40	; 0x28
      e8:	46bd      	mov	sp, r7
      ea:	bd80      	pop	{r7, pc}
      ec:	58020800 	.word	0x58020800
      f0:	0801b6a0 	.word	0x0801b6a0

000000f4 <synth_readreg>:
/**
  * @brief  Reads a register.
  * @param  Address
  * @retval Register contents
  */
static uint32_t synth_readreg(const uint32_t reg_address){
      f4:	b580      	push	{r7, lr}
      f6:	b084      	sub	sp, #16
      f8:	af00      	add	r7, sp, #0
      fa:	6078      	str	r0, [r7, #4]

    synth_writereg(reg_address, 0x0, 0x0, DONT_VERIFY); // First cycle to send the read address
      fc:	2300      	movs	r3, #0
      fe:	2200      	movs	r2, #0
     100:	2100      	movs	r1, #0
     102:	6878      	ldr	r0, [r7, #4]
     104:	f7ff ff7c 	bl	0 <synth_writereg>
    const uint32_t read_data = synth_writereg(reg_address, 0x0, 0x0, DONT_VERIFY);  // Data returned on the second cycle
     108:	2300      	movs	r3, #0
     10a:	2200      	movs	r2, #0
     10c:	2100      	movs	r1, #0
     10e:	6878      	ldr	r0, [r7, #4]
     110:	f7ff ff76 	bl	0 <synth_writereg>
     114:	60f8      	str	r0, [r7, #12]

    return (read_data >> 8); // We only care about the first 24 bits returned.
     116:	68fb      	ldr	r3, [r7, #12]
     118:	0a1b      	lsrs	r3, r3, #8

}
     11a:	4618      	mov	r0, r3
     11c:	3710      	adds	r7, #16
     11e:	46bd      	mov	sp, r7
     120:	bd80      	pop	{r7, pc}

00000122 <set_MW_power>:
/**
  * @brief  Program LO2 output gain.
  * @param  MW power setting
  * @retval Success/fail
  */
uint32_t set_MW_power (const uint8_t mw_power) {
     122:	b580      	push	{r7, lr}
     124:	b084      	sub	sp, #16
     126:	af00      	add	r7, sp, #0
     128:	4603      	mov	r3, r0
     12a:	71fb      	strb	r3, [r7, #7]
	if (mw_power > 3) {//check that LO2GAIN is an integer from 0 to 3 inclusive
     12c:	79fb      	ldrb	r3, [r7, #7]
     12e:	2b03      	cmp	r3, #3
     130:	d904      	bls.n	13c <set_MW_power+0x1a>
		printf("illegal mw_power - must be an integer from 0 to 3!\n");
     132:	4811      	ldr	r0, [pc, #68]	; (178 <set_MW_power+0x56>)
     134:	f001 f9bc 	bl	14b0 <__puts_veneer>
		Error_Handler(); // We enter an infinite loop here
     138:	f001 f9b2 	bl	14a0 <__Error_Handler_veneer>
	}
	uint32_t read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
     13c:	2016      	movs	r0, #22
     13e:	f7ff ffd9 	bl	f4 <synth_readreg>
     142:	60f8      	str	r0, [r7, #12]
	read_data &= 0xFFFFFCFF; 		// Zero bits 8:9.
     144:	68fb      	ldr	r3, [r7, #12]
     146:	f423 7340 	bic.w	r3, r3, #768	; 0x300
     14a:	60fb      	str	r3, [r7, #12]
	read_data |= (mw_power << 8);	// Set LO2GAIN value.
     14c:	79fb      	ldrb	r3, [r7, #7]
     14e:	021b      	lsls	r3, r3, #8
     150:	461a      	mov	r2, r3
     152:	68fb      	ldr	r3, [r7, #12]
     154:	4313      	orrs	r3, r2
     156:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
     158:	2301      	movs	r3, #1
     15a:	2200      	movs	r2, #0
     15c:	2116      	movs	r1, #22
     15e:	68f8      	ldr	r0, [r7, #12]
     160:	f7ff ff4e 	bl	0 <synth_writereg>
	#ifdef MW_VERBOSE
		printf("PROGRAMMED GAIN DIVIDER REGISTER: 0x%lX \r\n", read_data);
	#endif
	printf("LO2 gain setting: %u \r\n", mw_power);
     164:	79fb      	ldrb	r3, [r7, #7]
     166:	4619      	mov	r1, r3
     168:	4804      	ldr	r0, [pc, #16]	; (17c <set_MW_power+0x5a>)
     16a:	f001 f9b1 	bl	14d0 <__printf_veneer>
	return SUCCESS;
     16e:	2300      	movs	r3, #0
}
     170:	4618      	mov	r0, r3
     172:	3710      	adds	r7, #16
     174:	46bd      	mov	sp, r7
     176:	bd80      	pop	{r7, pc}
     178:	0801b6b8 	.word	0x0801b6b8
     17c:	0801b6ec 	.word	0x0801b6ec

00000180 <init_synthesiser>:
/**
  * @brief  Initialises HMC835 synthesiser.
  * @param  MW power setting
  * @retval Success/fail
  */
uint32_t init_synthesiser(const uint8_t mw_power) {
     180:	b580      	push	{r7, lr}
     182:	b084      	sub	sp, #16
     184:	af00      	add	r7, sp, #0
     186:	4603      	mov	r3, r0
     188:	71fb      	strb	r3, [r7, #7]

	//Set pins to required initial conditions
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET); // Turn off the amber lock LED
     18a:	2200      	movs	r2, #0
     18c:	2102      	movs	r1, #2
     18e:	4858      	ldr	r0, [pc, #352]	; (2f0 <_Min_Heap_Size+0xf0>)
     190:	f001 f98a 	bl	14a8 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
     194:	2201      	movs	r2, #1
     196:	2101      	movs	r1, #1
     198:	4856      	ldr	r0, [pc, #344]	; (2f4 <_Min_Heap_Size+0xf4>)
     19a:	f001 f985 	bl	14a8 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
     19e:	2200      	movs	r2, #0
     1a0:	f44f 7180 	mov.w	r1, #256	; 0x100
     1a4:	4854      	ldr	r0, [pc, #336]	; (2f8 <_Min_Heap_Size+0xf8>)
     1a6:	f001 f97f 	bl	14a8 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 1);
     1aa:	2201      	movs	r2, #1
     1ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
     1b0:	4851      	ldr	r0, [pc, #324]	; (2f8 <_Min_Heap_Size+0xf8>)
     1b2:	f001 f979 	bl	14a8 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 1); // Enable the main regulator.
     1b6:	2201      	movs	r2, #1
     1b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
     1bc:	484e      	ldr	r0, [pc, #312]	; (2f8 <_Min_Heap_Size+0xf8>)
     1be:	f001 f973 	bl	14a8 <__HAL_GPIO_WritePin_veneer>

	HAL_Delay(100); // Wait 100 ms for the supply to stabilise.
     1c2:	2064      	movs	r0, #100	; 0x64
     1c4:	f001 f968 	bl	1498 <__HAL_Delay_veneer>

	synth_writereg(0x1UL << 5, OPEN_MODE_READ_ADDRESS, 0x0, DONT_VERIFY); // Soft reset.
     1c8:	2300      	movs	r3, #0
     1ca:	2200      	movs	r2, #0
     1cc:	2100      	movs	r1, #0
     1ce:	2020      	movs	r0, #32
     1d0:	f7ff ff16 	bl	0 <synth_writereg>
	synth_writereg(0x41BFFF, ANALOG_EN_REGISTER, 0x0, VERIFY); // Set the SDO output level to 3.3 Volts
     1d4:	2301      	movs	r3, #1
     1d6:	2200      	movs	r2, #0
     1d8:	2108      	movs	r1, #8
     1da:	4848      	ldr	r0, [pc, #288]	; (2fc <_Min_Heap_Size+0xfc>)
     1dc:	f7ff ff10 	bl	0 <synth_writereg>

	uint32_t read_data = synth_readreg(ID_REGISTER); // Read the ID register to check the chip is communicating
     1e0:	2000      	movs	r0, #0
     1e2:	f7ff ff87 	bl	f4 <synth_readreg>
     1e6:	60f8      	str	r0, [r7, #12]
	/* Check we have the correct ID */
	if (read_data != SYNTH_ID) {
     1e8:	4a45      	ldr	r2, [pc, #276]	; (300 <_Min_Heap_Size+0x100>)
     1ea:	68fb      	ldr	r3, [r7, #12]
     1ec:	4293      	cmp	r3, r2
     1ee:	d00a      	beq.n	206 <_Min_Heap_Size+0x6>
		HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 0); // Disable the main regulator.
     1f0:	2200      	movs	r2, #0
     1f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
     1f6:	4840      	ldr	r0, [pc, #256]	; (2f8 <_Min_Heap_Size+0xf8>)
     1f8:	f001 f956 	bl	14a8 <__HAL_GPIO_WritePin_veneer>
		printf("Incorrect synthesiser ID!\r\n");
     1fc:	4841      	ldr	r0, [pc, #260]	; (304 <_Min_Heap_Size+0x104>)
     1fe:	f001 f957 	bl	14b0 <__puts_veneer>
		return ERROR;
     202:	2301      	movs	r3, #1
     204:	e06a      	b.n	2dc <_Min_Heap_Size+0xdc>
	}

	/* Everything looks good, we can communicate with the chip :-) */
	printf("HMC835 Detected.\r\n");
     206:	4840      	ldr	r0, [pc, #256]	; (308 <_Min_Heap_Size+0x108>)
     208:	f001 f952 	bl	14b0 <__puts_veneer>

	/* Enables Single-Ended output mode for LO2 output */
	read_data = synth_readreg(MODES_REGISTER); // Get the current value of the modes register
     20c:	2017      	movs	r0, #23
     20e:	f7ff ff71 	bl	f4 <synth_readreg>
     212:	60f8      	str	r0, [r7, #12]
#ifdef MW_VERBOSE
	printf("READ MODES REGISTER: 0x%lX \r\n", read_data);
#endif
	read_data |= (0x1UL << 9);     // Enable single ended output for LO2 (LO2_P)
     214:	68fb      	ldr	r3, [r7, #12]
     216:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     21a:	60fb      	str	r3, [r7, #12]
	read_data  &= ~(!AUTO_MUTE << 7); //can disable auto_mute - see variable declarations
     21c:	2301      	movs	r3, #1
     21e:	f083 0301 	eor.w	r3, r3, #1
     222:	b2db      	uxtb	r3, r3
     224:	01db      	lsls	r3, r3, #7
     226:	43db      	mvns	r3, r3
     228:	461a      	mov	r2, r3
     22a:	68fb      	ldr	r3, [r7, #12]
     22c:	4013      	ands	r3, r2
     22e:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, MODES_REGISTER, 0x0, VERIFY); // Send
     230:	2301      	movs	r3, #1
     232:	2200      	movs	r2, #0
     234:	2117      	movs	r1, #23
     236:	68f8      	ldr	r0, [r7, #12]
     238:	f7ff fee2 	bl	0 <synth_writereg>
	//read_data = synth_readreg(LOCK_DETECT_REGISTER); // Get the current value.
	//read_data &= 0xFFFFFFF8; // Zero the first 3 LSBs.
	//read_data |= 0x07;
	//synth_writereg(read_data, LOCK_DETECT_REGISTER, 0x0, VERIFY); // Update the VCO divide register.

	synth_writereg(1, REFDIV_REGISTER, 0x0, VERIFY); // Reference divider setting.
     23c:	2301      	movs	r3, #1
     23e:	2200      	movs	r2, #0
     240:	2102      	movs	r1, #2
     242:	2001      	movs	r0, #1
     244:	f7ff fedc 	bl	0 <synth_writereg>
	printf("PROGRAMMED DIVIDER REGISTER: 0x01 \r\n");
#endif

	/* Lock detect training: This must be done after any change to the PD
	 * reference frequency or after power cycle. */
	read_data = synth_readreg(LOCK_DETECT_REGISTER); // Get contents of lock detect register
     248:	2007      	movs	r0, #7
     24a:	f7ff ff53 	bl	f4 <synth_readreg>
     24e:	60f8      	str	r0, [r7, #12]
#ifdef MW_VERBOSE
	printf("READ LOCK_DETECT_REGISTER: 0x%lX \r\n", read_data);
#endif
	read_data |= (0x1UL << 11);      // Enable lock-detect counters.
     250:	68fb      	ldr	r3, [r7, #12]
     252:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
     256:	60fb      	str	r3, [r7, #12]
	read_data |= (0x1UL << 14);      // Enable the lock-detect timer.
     258:	68fb      	ldr	r3, [r7, #12]
     25a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     25e:	60fb      	str	r3, [r7, #12]
	read_data |= (0x1UL << 20);      // Train the lock-detect timer.
     260:	68fb      	ldr	r3, [r7, #12]
     262:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     266:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, LOCK_DETECT_REGISTER, 0x0, VERIFY); // Send
     268:	2301      	movs	r3, #1
     26a:	2200      	movs	r2, #0
     26c:	2107      	movs	r1, #7
     26e:	68f8      	ldr	r0, [r7, #12]
     270:	f7ff fec6 	bl	0 <synth_writereg>
#ifdef MW_VERBOSE
	printf("PROGRAMMED LOCK DETECT REGISTER: 0x%lX \r\n", read_data);
#endif
	HAL_Delay(10); // Wait 10 ms for training to complete, not sure if we really need to do this.
     274:	200a      	movs	r0, #10
     276:	f001 f90f 	bl	1498 <__HAL_Delay_veneer>

	/* Program LO2 output gain */
	if (mw_power > 3) {//check that LO2GAIN is an integer from 0 to 3 inclusive
     27a:	79fb      	ldrb	r3, [r7, #7]
     27c:	2b03      	cmp	r3, #3
     27e:	d904      	bls.n	28a <_Min_Heap_Size+0x8a>
		printf("illegal mw_power - must be an integer from 0 to 3!\n");
     280:	4822      	ldr	r0, [pc, #136]	; (30c <_Min_Heap_Size+0x10c>)
     282:	f001 f915 	bl	14b0 <__puts_veneer>
		Error_Handler();
     286:	f001 f90b 	bl	14a0 <__Error_Handler_veneer>
	}
	read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
     28a:	2016      	movs	r0, #22
     28c:	f7ff ff32 	bl	f4 <synth_readreg>
     290:	60f8      	str	r0, [r7, #12]
	read_data &= 0xFFFFFCFF; 		// Zero bits 8:9.
     292:	68fb      	ldr	r3, [r7, #12]
     294:	f423 7340 	bic.w	r3, r3, #768	; 0x300
     298:	60fb      	str	r3, [r7, #12]
	read_data |= (mw_power << 8);	// Set LO2GAIN value.
     29a:	79fb      	ldrb	r3, [r7, #7]
     29c:	021b      	lsls	r3, r3, #8
     29e:	461a      	mov	r2, r3
     2a0:	68fb      	ldr	r3, [r7, #12]
     2a2:	4313      	orrs	r3, r2
     2a4:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
     2a6:	2301      	movs	r3, #1
     2a8:	2200      	movs	r2, #0
     2aa:	2116      	movs	r1, #22
     2ac:	68f8      	ldr	r0, [r7, #12]
     2ae:	f7ff fea7 	bl	0 <synth_writereg>
	printf("PROGRAMMED GAIN DIVIDER REGISTER: 0x%lX \r\n", read_data);
	printf("LO2 gain setting: %u \r\n", mw_power);
#endif

	/* Sets output frequency to the hyperfine value */
	set_frequency_hz(HYPERFINE);
     2b2:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 2e8 <_Min_Heap_Size+0xe8>
     2b6:	eeb0 0b47 	vmov.f64	d0, d7
     2ba:	f000 f842 	bl	342 <set_frequency_hz>
	//printf("Single frequency output: %f Hz \r\n", HYPERFINE);
	printf("Single frequency output: %.10g Hz \r\n", HYPERFINE);
     2be:	a30a      	add	r3, pc, #40	; (adr r3, 2e8 <_Min_Heap_Size+0xe8>)
     2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
     2c4:	4812      	ldr	r0, [pc, #72]	; (310 <_Min_Heap_Size+0x110>)
     2c6:	f001 f903 	bl	14d0 <__printf_veneer>
//	struct MW_struct *mw_sweep_settings = 0;  //create a structure to store the sweep settings
	mw_sweep_settings.state = MW_FIXED_FREQ;
     2ca:	4b12      	ldr	r3, [pc, #72]	; (314 <_Min_Heap_Size+0x114>)
     2cc:	2201      	movs	r2, #1
     2ce:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); // MW_invalid output low
     2d0:	2200      	movs	r2, #0
     2d2:	2102      	movs	r1, #2
     2d4:	4810      	ldr	r0, [pc, #64]	; (318 <_Min_Heap_Size+0x118>)
     2d6:	f001 f8e7 	bl	14a8 <__HAL_GPIO_WritePin_veneer>
	return SUCCESS;
     2da:	2300      	movs	r3, #0
}
     2dc:	4618      	mov	r0, r3
     2de:	3710      	adds	r7, #16
     2e0:	46bd      	mov	sp, r7
     2e2:	bd80      	pop	{r7, pc}
     2e4:	f3af 8000 	nop.w
     2e8:	6d600000 	.word	0x6d600000
     2ec:	41e69e35 	.word	0x41e69e35
     2f0:	58021000 	.word	0x58021000
     2f4:	58021800 	.word	0x58021800
     2f8:	58020800 	.word	0x58020800
     2fc:	0041bfff 	.word	0x0041bfff
     300:	00c7701a 	.word	0x00c7701a
     304:	0801b704 	.word	0x0801b704
     308:	0801b720 	.word	0x0801b720
     30c:	0801b6b8 	.word	0x0801b6b8
     310:	0801b734 	.word	0x0801b734
     314:	20000670 	.word	0x20000670
     318:	58020400 	.word	0x58020400

0000031c <lock_status>:
/**
  * @brief  Checks for MW frequency lock
  * @param  None
  * @retval Lock status
  */
static const bool lock_status(void) {
     31c:	b580      	push	{r7, lr}
     31e:	b082      	sub	sp, #8
     320:	af00      	add	r7, sp, #0

	bool locked = synth_readreg(GPOLD_REGISTER) & (1UL << 1);
     322:	2012      	movs	r0, #18
     324:	f7ff fee6 	bl	f4 <synth_readreg>
     328:	4603      	mov	r3, r0
     32a:	f003 0302 	and.w	r3, r3, #2
     32e:	2b00      	cmp	r3, #0
     330:	bf14      	ite	ne
     332:	2301      	movne	r3, #1
     334:	2300      	moveq	r3, #0
     336:	71fb      	strb	r3, [r7, #7]
	return locked;
     338:	79fb      	ldrb	r3, [r7, #7]

}
     33a:	4618      	mov	r0, r3
     33c:	3708      	adds	r7, #8
     33e:	46bd      	mov	sp, r7
     340:	bd80      	pop	{r7, pc}

00000342 <set_frequency_hz>:
/**
  * @brief  Translate a frequency into register values for programming to HMC835
  * @param  Frequency
  * @retval None
  */
void set_frequency_hz(const double fo) {
     342:	b580      	push	{r7, lr}
     344:	b088      	sub	sp, #32
     346:	af00      	add	r7, sp, #0
     348:	ed87 0b00 	vstr	d0, [r7]

#ifdef OPTIMISED_FOR_3_035GHZ_GENERATION
	/* Code optimisation for Generation of frequencies close to 3.035GHz
	 * k always equals 1
	 */
	uint32_t k = 1;
     34c:	2301      	movs	r3, #1
     34e:	61fb      	str	r3, [r7, #28]
		}
	}
#endif //OPTIMISED_FOR_3_035GHZ_GENERATION

	/* Calculate the N division ratio */
	const double N = ((fo * k) / REF_FREQ);
     350:	69fb      	ldr	r3, [r7, #28]
     352:	ee07 3a90 	vmov	s15, r3
     356:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     35a:	ed97 7b00 	vldr	d7, [r7]
     35e:	ee26 6b07 	vmul.f64	d6, d6, d7
     362:	ed9f 5b29 	vldr	d5, [pc, #164]	; 408 <_Min_Stack_Size+0x8>
     366:	ee86 7b05 	vdiv.f64	d7, d6, d5
     36a:	ed87 7b04 	vstr	d7, [r7, #16]

	/* Extract the fractional and integer parts */
	const uint32_t NINT = N;
     36e:	ed97 7b04 	vldr	d7, [r7, #16]
     372:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     376:	ee17 3a90 	vmov	r3, s15
     37a:	60fb      	str	r3, [r7, #12]
	const uint32_t NFRAC = ((N - NINT) * (1 << 24)) + 0.5;
     37c:	68fb      	ldr	r3, [r7, #12]
     37e:	ee07 3a90 	vmov	s15, r3
     382:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     386:	ed97 6b04 	vldr	d6, [r7, #16]
     38a:	ee36 7b47 	vsub.f64	d7, d6, d7
     38e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 410 <_Min_Stack_Size+0x10>
     392:	ee27 7b06 	vmul.f64	d7, d7, d6
     396:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     39a:	ee37 7b06 	vadd.f64	d7, d7, d6
     39e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     3a2:	ee17 3a90 	vmov	r3, s15
     3a6:	60bb      	str	r3, [r7, #8]
		printf("Failed to establish synthesiser frequency accurately\r\n");
		Error_Handler();
	}
#endif

	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); //Sets MW_invalid pin high
     3a8:	2201      	movs	r2, #1
     3aa:	2102      	movs	r1, #2
     3ac:	481a      	ldr	r0, [pc, #104]	; (418 <_Min_Stack_Size+0x18>)
     3ae:	f001 f87b 	bl	14a8 <__HAL_GPIO_WritePin_veneer>
	//set_frequency(NINT, NFRAC, k, MANUAL_MUTE); //Sets only the necessary Hittite registers
	set_freq_regs(NINT, NFRAC, k); //Sets only the necessary Hittite registers
     3b2:	69fa      	ldr	r2, [r7, #28]
     3b4:	68b9      	ldr	r1, [r7, #8]
     3b6:	68f8      	ldr	r0, [r7, #12]
     3b8:	f000 f836 	bl	428 <set_freq_regs>

	//MW stabilisation delay and check for lock
	timer_delay(MW_TIMER, MW_STABILISE_TIME_US);
     3bc:	4b17      	ldr	r3, [pc, #92]	; (41c <_Min_Stack_Size+0x1c>)
     3be:	681b      	ldr	r3, [r3, #0]
     3c0:	f241 3288 	movw	r2, #5000	; 0x1388
     3c4:	4611      	mov	r1, r2
     3c6:	4618      	mov	r0, r3
     3c8:	f000 ff78 	bl	12bc <timer_delay>
	//if (!poll_until_locked(LOCK_WAIT_US)) {
	if (!lock_status()) {
     3cc:	f7ff ffa6 	bl	31c <lock_status>
     3d0:	4603      	mov	r3, r0
     3d2:	f083 0301 	eor.w	r3, r3, #1
     3d6:	b2db      	uxtb	r3, r3
     3d8:	2b00      	cmp	r3, #0
     3da:	d011      	beq.n	400 <_Min_Stack_Size>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET); //turn off amber LED
     3dc:	2200      	movs	r2, #0
     3de:	2102      	movs	r1, #2
     3e0:	480f      	ldr	r0, [pc, #60]	; (420 <_Min_Stack_Size+0x20>)
     3e2:	f001 f861 	bl	14a8 <__HAL_GPIO_WritePin_veneer>
		printf("Failed to establish MW Lock within %ld us of setting frequency!\r\n", MW_STABILISE_TIME_US);
     3e6:	f241 3388 	movw	r3, #5000	; 0x1388
     3ea:	4619      	mov	r1, r3
     3ec:	480d      	ldr	r0, [pc, #52]	; (424 <_Min_Stack_Size+0x24>)
     3ee:	f001 f86f 	bl	14d0 <__printf_veneer>
#ifdef HALT_ON_LOSS_OF_LOCK
		Error_Handler();
     3f2:	f001 f855 	bl	14a0 <__Error_Handler_veneer>
#endif //HALT_ON_LOSS_OF_LOCK
		HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); //Sets MW_invalid pin low
     3f6:	2200      	movs	r2, #0
     3f8:	2102      	movs	r1, #2
     3fa:	4807      	ldr	r0, [pc, #28]	; (418 <_Min_Stack_Size+0x18>)
     3fc:	f001 f854 	bl	14a8 <__HAL_GPIO_WritePin_veneer>
	}

}
     400:	bf00      	nop
     402:	3720      	adds	r7, #32
     404:	46bd      	mov	sp, r7
     406:	bd80      	pop	{r7, pc}
     408:	00000000 	.word	0x00000000
     40c:	4187d784 	.word	0x4187d784
     410:	00000000 	.word	0x00000000
     414:	41700000 	.word	0x41700000
     418:	58020400 	.word	0x58020400
     41c:	2000001c 	.word	0x2000001c
     420:	58021000 	.word	0x58021000
     424:	0801b75c 	.word	0x0801b75c

00000428 <set_freq_regs>:
static void set_freq_regs(const uint32_t integer, const uint32_t fraction, const uint32_t vco_divider) {
     428:	b580      	push	{r7, lr}
     42a:	b086      	sub	sp, #24
     42c:	af00      	add	r7, sp, #0
     42e:	60f8      	str	r0, [r7, #12]
     430:	60b9      	str	r1, [r7, #8]
     432:	607a      	str	r2, [r7, #4]
	uint32_t read_data = 0x0;
     434:	2300      	movs	r3, #0
     436:	617b      	str	r3, [r7, #20]
	if (last_vcodiv == -1 || (last_vcodiv != vco_divider)) {
     438:	4b24      	ldr	r3, [pc, #144]	; (4cc <set_freq_regs+0xa4>)
     43a:	681b      	ldr	r3, [r3, #0]
     43c:	f1b3 3fff 	cmp.w	r3, #4294967295
     440:	d004      	beq.n	44c <set_freq_regs+0x24>
     442:	4b22      	ldr	r3, [pc, #136]	; (4cc <set_freq_regs+0xa4>)
     444:	681b      	ldr	r3, [r3, #0]
     446:	687a      	ldr	r2, [r7, #4]
     448:	429a      	cmp	r2, r3
     44a:	d014      	beq.n	476 <set_freq_regs+0x4e>
		read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
     44c:	2016      	movs	r0, #22
     44e:	f7ff fe51 	bl	f4 <synth_readreg>
     452:	6178      	str	r0, [r7, #20]
		read_data &= 0xFFFFFFC0; // Zero the first 6 LSBs (VCO division value - mute).
     454:	697b      	ldr	r3, [r7, #20]
     456:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
     45a:	617b      	str	r3, [r7, #20]
		read_data |= vco_divider; // This will set k which will un-mute the outputs */
     45c:	697a      	ldr	r2, [r7, #20]
     45e:	687b      	ldr	r3, [r7, #4]
     460:	4313      	orrs	r3, r2
     462:	617b      	str	r3, [r7, #20]
		synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
     464:	2301      	movs	r3, #1
     466:	2200      	movs	r2, #0
     468:	2116      	movs	r1, #22
     46a:	6978      	ldr	r0, [r7, #20]
     46c:	f7ff fdc8 	bl	0 <synth_writereg>
		last_vcodiv = vco_divider;
     470:	4a16      	ldr	r2, [pc, #88]	; (4cc <set_freq_regs+0xa4>)
     472:	687b      	ldr	r3, [r7, #4]
     474:	6013      	str	r3, [r2, #0]
	if (last_integer == -1 || (last_integer != integer)) {
     476:	4b16      	ldr	r3, [pc, #88]	; (4d0 <set_freq_regs+0xa8>)
     478:	681b      	ldr	r3, [r3, #0]
     47a:	f1b3 3fff 	cmp.w	r3, #4294967295
     47e:	d004      	beq.n	48a <set_freq_regs+0x62>
     480:	4b13      	ldr	r3, [pc, #76]	; (4d0 <set_freq_regs+0xa8>)
     482:	681b      	ldr	r3, [r3, #0]
     484:	68fa      	ldr	r2, [r7, #12]
     486:	429a      	cmp	r2, r3
     488:	d008      	beq.n	49c <set_freq_regs+0x74>
		synth_writereg(integer, INTEGER_FREQUENCY_REGISTER, 0x0, VERIFY);   // Integer register.
     48a:	2301      	movs	r3, #1
     48c:	2200      	movs	r2, #0
     48e:	2103      	movs	r1, #3
     490:	68f8      	ldr	r0, [r7, #12]
     492:	f7ff fdb5 	bl	0 <synth_writereg>
		last_integer = integer;
     496:	4a0e      	ldr	r2, [pc, #56]	; (4d0 <set_freq_regs+0xa8>)
     498:	68fb      	ldr	r3, [r7, #12]
     49a:	6013      	str	r3, [r2, #0]
	if (last_fraction == -1 || (last_fraction != fraction)) {
     49c:	4b0d      	ldr	r3, [pc, #52]	; (4d4 <set_freq_regs+0xac>)
     49e:	681b      	ldr	r3, [r3, #0]
     4a0:	f1b3 3fff 	cmp.w	r3, #4294967295
     4a4:	d004      	beq.n	4b0 <set_freq_regs+0x88>
     4a6:	4b0b      	ldr	r3, [pc, #44]	; (4d4 <set_freq_regs+0xac>)
     4a8:	681b      	ldr	r3, [r3, #0]
     4aa:	68ba      	ldr	r2, [r7, #8]
     4ac:	429a      	cmp	r2, r3
     4ae:	d008      	beq.n	4c2 <set_freq_regs+0x9a>
		synth_writereg(fraction, FRACTIONAL_FREQUENCY_REGISTER, 0x0, VERIFY);  // Fractional register.
     4b0:	2301      	movs	r3, #1
     4b2:	2200      	movs	r2, #0
     4b4:	2104      	movs	r1, #4
     4b6:	68b8      	ldr	r0, [r7, #8]
     4b8:	f7ff fda2 	bl	0 <synth_writereg>
		last_fraction = fraction;
     4bc:	4a05      	ldr	r2, [pc, #20]	; (4d4 <set_freq_regs+0xac>)
     4be:	68bb      	ldr	r3, [r7, #8]
     4c0:	6013      	str	r3, [r2, #0]
}
     4c2:	bf00      	nop
     4c4:	3718      	adds	r7, #24
     4c6:	46bd      	mov	sp, r7
     4c8:	bd80      	pop	{r7, pc}
     4ca:	bf00      	nop
     4cc:	20000004 	.word	0x20000004
     4d0:	20000008 	.word	0x20000008
     4d4:	2000000c 	.word	0x2000000c

000004d8 <print_mw_sweep_settings>:
/**
  * @brief  Print out the contents of the mw_sweep_settings structure
  * @param  None
  * @retval None
  */
  static void print_mw_sweep_settings (void) {
     4d8:	b580      	push	{r7, lr}
     4da:	af00      	add	r7, sp, #0
  	// Check that I've populated everything
  	printf("state: %u \r\n", mw_sweep_settings.state);
     4dc:	4b1b      	ldr	r3, [pc, #108]	; (54c <print_mw_sweep_settings+0x74>)
     4de:	781b      	ldrb	r3, [r3, #0]
     4e0:	4619      	mov	r1, r3
     4e2:	481b      	ldr	r0, [pc, #108]	; (550 <print_mw_sweep_settings+0x78>)
     4e4:	f000 fff4 	bl	14d0 <__printf_veneer>
  	printf("k: %u \r\n", mw_sweep_settings.k);
     4e8:	4b18      	ldr	r3, [pc, #96]	; (54c <print_mw_sweep_settings+0x74>)
     4ea:	785b      	ldrb	r3, [r3, #1]
     4ec:	4619      	mov	r1, r3
     4ee:	4819      	ldr	r0, [pc, #100]	; (554 <print_mw_sweep_settings+0x7c>)
     4f0:	f000 ffee 	bl	14d0 <__printf_veneer>
  	printf("NINT: %lu \r\n", mw_sweep_settings.NINT);
     4f4:	4b15      	ldr	r3, [pc, #84]	; (54c <print_mw_sweep_settings+0x74>)
     4f6:	685b      	ldr	r3, [r3, #4]
     4f8:	4619      	mov	r1, r3
     4fa:	4817      	ldr	r0, [pc, #92]	; (558 <print_mw_sweep_settings+0x80>)
     4fc:	f000 ffe8 	bl	14d0 <__printf_veneer>
  	printf("NFRAC_start: %lu \r\n", mw_sweep_settings.NFRAC_start);
     500:	4b12      	ldr	r3, [pc, #72]	; (54c <print_mw_sweep_settings+0x74>)
     502:	689b      	ldr	r3, [r3, #8]
     504:	4619      	mov	r1, r3
     506:	4815      	ldr	r0, [pc, #84]	; (55c <print_mw_sweep_settings+0x84>)
     508:	f000 ffe2 	bl	14d0 <__printf_veneer>
  	printf("num_steps: %lu \r\n", mw_sweep_settings.num_steps);
     50c:	4b0f      	ldr	r3, [pc, #60]	; (54c <print_mw_sweep_settings+0x74>)
     50e:	68db      	ldr	r3, [r3, #12]
     510:	4619      	mov	r1, r3
     512:	4813      	ldr	r0, [pc, #76]	; (560 <print_mw_sweep_settings+0x88>)
     514:	f000 ffdc 	bl	14d0 <__printf_veneer>
  	printf("step_size: %lu \r\n", mw_sweep_settings.step_size);
     518:	4b0c      	ldr	r3, [pc, #48]	; (54c <print_mw_sweep_settings+0x74>)
     51a:	691b      	ldr	r3, [r3, #16]
     51c:	4619      	mov	r1, r3
     51e:	4811      	ldr	r0, [pc, #68]	; (564 <print_mw_sweep_settings+0x8c>)
     520:	f000 ffd6 	bl	14d0 <__printf_veneer>
  	printf("stabilise_time: %lu us\r\n", mw_sweep_settings.stabilise_time);
     524:	4b09      	ldr	r3, [pc, #36]	; (54c <print_mw_sweep_settings+0x74>)
     526:	699b      	ldr	r3, [r3, #24]
     528:	4619      	mov	r1, r3
     52a:	480f      	ldr	r0, [pc, #60]	; (568 <print_mw_sweep_settings+0x90>)
     52c:	f000 ffd0 	bl	14d0 <__printf_veneer>
  	printf("dwell_time: %lu us\r\n", mw_sweep_settings.dwell_time);
     530:	4b06      	ldr	r3, [pc, #24]	; (54c <print_mw_sweep_settings+0x74>)
     532:	69db      	ldr	r3, [r3, #28]
     534:	4619      	mov	r1, r3
     536:	480d      	ldr	r0, [pc, #52]	; (56c <print_mw_sweep_settings+0x94>)
     538:	f000 ffca 	bl	14d0 <__printf_veneer>
  	printf("current_point: %lu\r\n", mw_sweep_settings.current_point);
     53c:	4b03      	ldr	r3, [pc, #12]	; (54c <print_mw_sweep_settings+0x74>)
     53e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     540:	4619      	mov	r1, r3
     542:	480b      	ldr	r0, [pc, #44]	; (570 <print_mw_sweep_settings+0x98>)
     544:	f000 ffc4 	bl	14d0 <__printf_veneer>
}
     548:	bf00      	nop
     54a:	bd80      	pop	{r7, pc}
     54c:	20000670 	.word	0x20000670
     550:	0801b7a0 	.word	0x0801b7a0
     554:	0801b7b0 	.word	0x0801b7b0
     558:	0801b7bc 	.word	0x0801b7bc
     55c:	0801b7cc 	.word	0x0801b7cc
     560:	0801b7e0 	.word	0x0801b7e0
     564:	0801b7f4 	.word	0x0801b7f4
     568:	0801b808 	.word	0x0801b808
     56c:	0801b824 	.word	0x0801b824
     570:	0801b83c 	.word	0x0801b83c

00000574 <calc_defined_step_MW_sweep>:
  * @param  POP cycles per point
  * @param  Number of points
  * @param	POP_period in us
  * @retval Success/failure or early termination
  */
bool calc_defined_step_MW_sweep(const double centre_freq, const double span, const uint32_t pop_cycles_per_point, const uint32_t num_points_req) {
     574:	b580      	push	{r7, lr}
     576:	b094      	sub	sp, #80	; 0x50
     578:	af02      	add	r7, sp, #8
     57a:	ed87 0b04 	vstr	d0, [r7, #16]
     57e:	ed87 1b02 	vstr	d1, [r7, #8]
     582:	6078      	str	r0, [r7, #4]
     584:	6039      	str	r1, [r7, #0]
	printf("MW sweep will have %.10g GHz centre frequency with %.5g Hz span\r\n", centre_freq/1000000000, span);
     586:	ed97 7b04 	vldr	d7, [r7, #16]
     58a:	ed9f 6b8d 	vldr	d6, [pc, #564]	; 7c0 <calc_defined_step_MW_sweep+0x24c>
     58e:	ee87 5b06 	vdiv.f64	d5, d7, d6
     592:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     596:	e9cd 2300 	strd	r2, r3, [sp]
     59a:	ec53 2b15 	vmov	r2, r3, d5
     59e:	4892      	ldr	r0, [pc, #584]	; (7e8 <calc_defined_step_MW_sweep+0x274>)
     5a0:	f000 ff96 	bl	14d0 <__printf_veneer>
	printf("and %ld POP cycles per point\r\n", pop_cycles_per_point);
     5a4:	6879      	ldr	r1, [r7, #4]
     5a6:	4891      	ldr	r0, [pc, #580]	; (7ec <calc_defined_step_MW_sweep+0x278>)
     5a8:	f000 ff92 	bl	14d0 <__printf_veneer>
	mw_sweep_settings.sweep_type = FIXED_STEPS;
     5ac:	4b90      	ldr	r3, [pc, #576]	; (7f0 <calc_defined_step_MW_sweep+0x27c>)
     5ae:	2200      	movs	r2, #0
     5b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	mw_sweep_settings.pop_cycles_per_point = pop_cycles_per_point;
     5b4:	4a8e      	ldr	r2, [pc, #568]	; (7f0 <calc_defined_step_MW_sweep+0x27c>)
     5b6:	687b      	ldr	r3, [r7, #4]
     5b8:	6153      	str	r3, [r2, #20]
	mw_sweep_settings.centre_freq = centre_freq;
     5ba:	498d      	ldr	r1, [pc, #564]	; (7f0 <calc_defined_step_MW_sweep+0x27c>)
     5bc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
     5c0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	mw_sweep_settings.span = span;
     5c4:	498a      	ldr	r1, [pc, #552]	; (7f0 <calc_defined_step_MW_sweep+0x27c>)
     5c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     5ca:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	/* Calculate start frequency */
	double start_freq = centre_freq - 0.5* span;
     5ce:	ed97 7b02 	vldr	d7, [r7, #8]
     5d2:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     5d6:	ee27 7b06 	vmul.f64	d7, d7, d6
     5da:	ed97 6b04 	vldr	d6, [r7, #16]
     5de:	ee36 7b47 	vsub.f64	d7, d6, d7
     5e2:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
	mw_sweep_settings.k = calculate_k(start_freq);
     5e6:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
     5ea:	f000 fb03 	bl	bf4 <calculate_k>
     5ee:	4603      	mov	r3, r0
     5f0:	b2da      	uxtb	r2, r3
     5f2:	4b7f      	ldr	r3, [pc, #508]	; (7f0 <calc_defined_step_MW_sweep+0x27c>)
     5f4:	705a      	strb	r2, [r3, #1]

	/* Extrapolate step size requested versus achievable  */
	const double step_size_Hz = span / (num_points_req - 1);
     5f6:	683b      	ldr	r3, [r7, #0]
     5f8:	3b01      	subs	r3, #1
     5fa:	ee07 3a90 	vmov	s15, r3
     5fe:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     602:	ed97 5b02 	vldr	d5, [r7, #8]
     606:	ee85 7b06 	vdiv.f64	d7, d5, d6
     60a:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
	printf("Requested %ld steps, therefore step size of %.3g Hz\r\n", num_points_req, step_size_Hz);
     60e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
     612:	6839      	ldr	r1, [r7, #0]
     614:	4877      	ldr	r0, [pc, #476]	; (7f4 <calc_defined_step_MW_sweep+0x280>)
     616:	f000 ff5b 	bl	14d0 <__printf_veneer>
	const double unit_step_size_Hz = REF_FREQ / (double) (mw_sweep_settings.k * (1 << 24)); //minimum step size possible
     61a:	ed9f 5b6b 	vldr	d5, [pc, #428]	; 7c8 <calc_defined_step_MW_sweep+0x254>
     61e:	4b74      	ldr	r3, [pc, #464]	; (7f0 <calc_defined_step_MW_sweep+0x27c>)
     620:	785b      	ldrb	r3, [r3, #1]
     622:	061b      	lsls	r3, r3, #24
     624:	ee07 3a90 	vmov	s15, r3
     628:	eeb8 6be7 	vcvt.f64.s32	d6, s15
     62c:	ee85 7b06 	vdiv.f64	d7, d5, d6
     630:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
	//printf("Unit step size: %.3g Hz\r\n", unit_step_size_Hz);
	mw_sweep_settings.step_size = (step_size_Hz / unit_step_size_Hz + 0.5);
     634:	ed97 5b0e 	vldr	d5, [r7, #56]	; 0x38
     638:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     63c:	ee85 7b06 	vdiv.f64	d7, d5, d6
     640:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     644:	ee37 7b06 	vadd.f64	d7, d7, d6
     648:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     64c:	ee17 2a90 	vmov	r2, s15
     650:	4b67      	ldr	r3, [pc, #412]	; (7f0 <calc_defined_step_MW_sweep+0x27c>)
     652:	611a      	str	r2, [r3, #16]
	if (!mw_sweep_settings.step_size) { //step_size must be a positive non-zero integer
     654:	4b66      	ldr	r3, [pc, #408]	; (7f0 <calc_defined_step_MW_sweep+0x27c>)
     656:	691b      	ldr	r3, [r3, #16]
     658:	2b00      	cmp	r3, #0
     65a:	d104      	bne.n	666 <calc_defined_step_MW_sweep+0xf2>
		mw_sweep_settings.step_size++;
     65c:	4b64      	ldr	r3, [pc, #400]	; (7f0 <calc_defined_step_MW_sweep+0x27c>)
     65e:	691b      	ldr	r3, [r3, #16]
     660:	3301      	adds	r3, #1
     662:	4a63      	ldr	r2, [pc, #396]	; (7f0 <calc_defined_step_MW_sweep+0x27c>)
     664:	6113      	str	r3, [r2, #16]
	}
	const double achieved_step_size = (double) (mw_sweep_settings.step_size * unit_step_size_Hz);
     666:	4b62      	ldr	r3, [pc, #392]	; (7f0 <calc_defined_step_MW_sweep+0x27c>)
     668:	691b      	ldr	r3, [r3, #16]
     66a:	ee07 3a90 	vmov	s15, r3
     66e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     672:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     676:	ee26 7b07 	vmul.f64	d7, d6, d7
     67a:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	printf("Step size achieved: %.3g Hz\r\n", achieved_step_size);
     67e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
     682:	485d      	ldr	r0, [pc, #372]	; (7f8 <calc_defined_step_MW_sweep+0x284>)
     684:	f000 ff24 	bl	14d0 <__printf_veneer>
	mw_sweep_settings.num_steps = span / achieved_step_size;
     688:	ed97 5b02 	vldr	d5, [r7, #8]
     68c:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
     690:	ee85 7b06 	vdiv.f64	d7, d5, d6
     694:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     698:	ee17 2a90 	vmov	r2, s15
     69c:	4b54      	ldr	r3, [pc, #336]	; (7f0 <calc_defined_step_MW_sweep+0x27c>)
     69e:	60da      	str	r2, [r3, #12]

	/* Can avoid spurs if frequency requested can be encoded exactly  */
	start_freq = ((long)(start_freq/unit_step_size_Hz)) * unit_step_size_Hz;
     6a0:	ed97 5b10 	vldr	d5, [r7, #64]	; 0x40
     6a4:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     6a8:	ee85 7b06 	vdiv.f64	d7, d5, d6
     6ac:	eefd 7bc7 	vcvt.s32.f64	s15, d7
     6b0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
     6b4:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     6b8:	ee26 7b07 	vmul.f64	d7, d6, d7
     6bc:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40

	/* Calculate the N division ratio, extracting the fractional and integer parts */
	const double N = ((start_freq * mw_sweep_settings.k) / REF_FREQ);
     6c0:	4b4b      	ldr	r3, [pc, #300]	; (7f0 <calc_defined_step_MW_sweep+0x27c>)
     6c2:	785b      	ldrb	r3, [r3, #1]
     6c4:	ee07 3a90 	vmov	s15, r3
     6c8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
     6cc:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
     6d0:	ee26 6b07 	vmul.f64	d6, d6, d7
     6d4:	ed9f 5b3c 	vldr	d5, [pc, #240]	; 7c8 <calc_defined_step_MW_sweep+0x254>
     6d8:	ee86 7b05 	vdiv.f64	d7, d6, d5
     6dc:	ed87 7b08 	vstr	d7, [r7, #32]
	mw_sweep_settings.NINT = N;
     6e0:	ed97 7b08 	vldr	d7, [r7, #32]
     6e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     6e8:	ee17 2a90 	vmov	r2, s15
     6ec:	4b40      	ldr	r3, [pc, #256]	; (7f0 <calc_defined_step_MW_sweep+0x27c>)
     6ee:	605a      	str	r2, [r3, #4]
	mw_sweep_settings.NFRAC_start = ((N - mw_sweep_settings.NINT) * (1 << 24)) + 0.5;
     6f0:	4b3f      	ldr	r3, [pc, #252]	; (7f0 <calc_defined_step_MW_sweep+0x27c>)
     6f2:	685b      	ldr	r3, [r3, #4]
     6f4:	ee07 3a90 	vmov	s15, r3
     6f8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     6fc:	ed97 6b08 	vldr	d6, [r7, #32]
     700:	ee36 7b47 	vsub.f64	d7, d6, d7
     704:	ed9f 6b32 	vldr	d6, [pc, #200]	; 7d0 <calc_defined_step_MW_sweep+0x25c>
     708:	ee27 7b06 	vmul.f64	d7, d7, d6
     70c:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     710:	ee37 7b06 	vadd.f64	d7, d7, d6
     714:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     718:	ee17 2a90 	vmov	r2, s15
     71c:	4b34      	ldr	r3, [pc, #208]	; (7f0 <calc_defined_step_MW_sweep+0x27c>)
     71e:	609a      	str	r2, [r3, #8]

	/* Calculate dwell time at each MW frequency */
	mw_sweep_settings.stabilise_time = MW_STABILISE_TIME_US; //Global MW stabilisation time
     720:	f241 3288 	movw	r2, #5000	; 0x1388
     724:	4b32      	ldr	r3, [pc, #200]	; (7f0 <calc_defined_step_MW_sweep+0x27c>)
     726:	619a      	str	r2, [r3, #24]
	mw_sweep_settings.dwell_time = pop_cycles_per_point * POP_period_us + TIMING_MARGIN_US;
     728:	4b34      	ldr	r3, [pc, #208]	; (7fc <calc_defined_step_MW_sweep+0x288>)
     72a:	681b      	ldr	r3, [r3, #0]
     72c:	687a      	ldr	r2, [r7, #4]
     72e:	fb02 f303 	mul.w	r3, r2, r3
     732:	2264      	movs	r2, #100	; 0x64
     734:	4413      	add	r3, r2
     736:	4a2e      	ldr	r2, [pc, #184]	; (7f0 <calc_defined_step_MW_sweep+0x27c>)
     738:	61d3      	str	r3, [r2, #28]

	/* Calculate the period of a sweep */
	const double calc_sweep_time = (double)(MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US + mw_sweep_settings.dwell_time) * (double)(mw_sweep_settings.num_steps+1)/1000000;
     73a:	f241 3288 	movw	r2, #5000	; 0x1388
     73e:	f641 73cc 	movw	r3, #8140	; 0x1fcc
     742:	441a      	add	r2, r3
     744:	4b2a      	ldr	r3, [pc, #168]	; (7f0 <calc_defined_step_MW_sweep+0x27c>)
     746:	69db      	ldr	r3, [r3, #28]
     748:	4413      	add	r3, r2
     74a:	ee07 3a90 	vmov	s15, r3
     74e:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     752:	4b27      	ldr	r3, [pc, #156]	; (7f0 <calc_defined_step_MW_sweep+0x27c>)
     754:	68db      	ldr	r3, [r3, #12]
     756:	3301      	adds	r3, #1
     758:	ee07 3a90 	vmov	s15, r3
     75c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     760:	ee26 6b07 	vmul.f64	d6, d6, d7
     764:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 7d8 <calc_defined_step_MW_sweep+0x264>
     768:	ee86 7b05 	vdiv.f64	d7, d6, d5
     76c:	ed87 7b06 	vstr	d7, [r7, #24]
	printf("Sweep period: %.3g s\r\n", calc_sweep_time);
     770:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
     774:	4822      	ldr	r0, [pc, #136]	; (800 <calc_defined_step_MW_sweep+0x28c>)
     776:	f000 feab 	bl	14d0 <__printf_veneer>
	printf("%ld points, %.3g ms each\r\n", mw_sweep_settings.num_steps, 1000 * calc_sweep_time / (mw_sweep_settings.num_steps + 1));
     77a:	4b1d      	ldr	r3, [pc, #116]	; (7f0 <calc_defined_step_MW_sweep+0x27c>)
     77c:	68d9      	ldr	r1, [r3, #12]
     77e:	ed97 7b06 	vldr	d7, [r7, #24]
     782:	ed9f 6b17 	vldr	d6, [pc, #92]	; 7e0 <calc_defined_step_MW_sweep+0x26c>
     786:	ee27 6b06 	vmul.f64	d6, d7, d6
     78a:	4b19      	ldr	r3, [pc, #100]	; (7f0 <calc_defined_step_MW_sweep+0x27c>)
     78c:	68db      	ldr	r3, [r3, #12]
     78e:	3301      	adds	r3, #1
     790:	ee07 3a90 	vmov	s15, r3
     794:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     798:	ee86 5b07 	vdiv.f64	d5, d6, d7
     79c:	ec53 2b15 	vmov	r2, r3, d5
     7a0:	4818      	ldr	r0, [pc, #96]	; (804 <calc_defined_step_MW_sweep+0x290>)
     7a2:	f000 fe95 	bl	14d0 <__printf_veneer>

	mw_sweep_settings.current_point = 0;
     7a6:	4b12      	ldr	r3, [pc, #72]	; (7f0 <calc_defined_step_MW_sweep+0x27c>)
     7a8:	2200      	movs	r2, #0
     7aa:	625a      	str	r2, [r3, #36]	; 0x24
	mw_sweep_settings.sweep_period = calc_sweep_time;
     7ac:	4910      	ldr	r1, [pc, #64]	; (7f0 <calc_defined_step_MW_sweep+0x27c>)
     7ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
     7b2:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	//print_mw_sweep_settings();
	return(true);
     7b6:	2301      	movs	r3, #1
}
     7b8:	4618      	mov	r0, r3
     7ba:	3748      	adds	r7, #72	; 0x48
     7bc:	46bd      	mov	sp, r7
     7be:	bd80      	pop	{r7, pc}
     7c0:	00000000 	.word	0x00000000
     7c4:	41cdcd65 	.word	0x41cdcd65
     7c8:	00000000 	.word	0x00000000
     7cc:	4187d784 	.word	0x4187d784
     7d0:	00000000 	.word	0x00000000
     7d4:	41700000 	.word	0x41700000
     7d8:	00000000 	.word	0x00000000
     7dc:	412e8480 	.word	0x412e8480
     7e0:	00000000 	.word	0x00000000
     7e4:	408f4000 	.word	0x408f4000
     7e8:	0801b854 	.word	0x0801b854
     7ec:	0801b898 	.word	0x0801b898
     7f0:	20000670 	.word	0x20000670
     7f4:	0801b8b8 	.word	0x0801b8b8
     7f8:	0801b8f0 	.word	0x0801b8f0
     7fc:	20000660 	.word	0x20000660
     800:	0801b910 	.word	0x0801b910
     804:	0801b928 	.word	0x0801b928

00000808 <calc_fixed_time_MW_sweep>:
  * @param  Span in Hz
  * @param  Sweep period in s
  * @param  Additional time for scope sync
  * @retval Success/failure or early termination
  */
bool calc_fixed_time_MW_sweep(const double centre_freq, const double span, const double requested_sweep_period, const bool scope_sync_time) {
     808:	b580      	push	{r7, lr}
     80a:	b09c      	sub	sp, #112	; 0x70
     80c:	af04      	add	r7, sp, #16
     80e:	ed87 0b06 	vstr	d0, [r7, #24]
     812:	ed87 1b04 	vstr	d1, [r7, #16]
     816:	ed87 2b02 	vstr	d2, [r7, #8]
     81a:	4603      	mov	r3, r0
     81c:	71fb      	strb	r3, [r7, #7]
	//Dwell time must be a minimum of one POP cycle
	//Dwell time should be at least 50% of sweep time
	//Number of points shall be maximised within the available time

	printf("MW sweep will have %.10g GHz centre frequency with %.5g Hz span, over %.3g s\r\n", centre_freq/1000000000, span, requested_sweep_period);
     81e:	ed97 7b06 	vldr	d7, [r7, #24]
     822:	ed9f 6b9f 	vldr	d6, [pc, #636]	; aa0 <calc_fixed_time_MW_sweep+0x298>
     826:	ee87 5b06 	vdiv.f64	d5, d7, d6
     82a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     82e:	e9cd 2302 	strd	r2, r3, [sp, #8]
     832:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
     836:	e9cd 2300 	strd	r2, r3, [sp]
     83a:	ec53 2b15 	vmov	r2, r3, d5
     83e:	48a0      	ldr	r0, [pc, #640]	; (ac0 <calc_fixed_time_MW_sweep+0x2b8>)
     840:	f000 fe46 	bl	14d0 <__printf_veneer>
	mw_sweep_settings.sweep_type = FIXED_TIME;
     844:	4b9f      	ldr	r3, [pc, #636]	; (ac4 <calc_fixed_time_MW_sweep+0x2bc>)
     846:	2201      	movs	r2, #1
     848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	mw_sweep_settings.centre_freq = centre_freq;
     84c:	499d      	ldr	r1, [pc, #628]	; (ac4 <calc_fixed_time_MW_sweep+0x2bc>)
     84e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
     852:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	mw_sweep_settings.span = span;
     856:	499b      	ldr	r1, [pc, #620]	; (ac4 <calc_fixed_time_MW_sweep+0x2bc>)
     858:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
     85c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	mw_sweep_settings.dwell_time = POP_period_us + TIMING_MARGIN_US; //minimum possible value of dwell_time in us
     860:	4b99      	ldr	r3, [pc, #612]	; (ac8 <calc_fixed_time_MW_sweep+0x2c0>)
     862:	681b      	ldr	r3, [r3, #0]
     864:	2264      	movs	r2, #100	; 0x64
     866:	4413      	add	r3, r2
     868:	4a96      	ldr	r2, [pc, #600]	; (ac4 <calc_fixed_time_MW_sweep+0x2bc>)
     86a:	61d3      	str	r3, [r2, #28]
	uint32_t point_time = MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US + mw_sweep_settings.dwell_time; //minimum possible value in us
     86c:	f241 3288 	movw	r2, #5000	; 0x1388
     870:	f641 73cc 	movw	r3, #8140	; 0x1fcc
     874:	441a      	add	r2, r3
     876:	4b93      	ldr	r3, [pc, #588]	; (ac4 <calc_fixed_time_MW_sweep+0x2bc>)
     878:	69db      	ldr	r3, [r3, #28]
     87a:	4413      	add	r3, r2
     87c:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t points_in_sweep = requested_sweep_period * (double)(1000000 / point_time); //maximum possible number of steps in sweep, rounded down to an integer
     87e:	4a93      	ldr	r2, [pc, #588]	; (acc <calc_fixed_time_MW_sweep+0x2c4>)
     880:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     882:	fbb2 f3f3 	udiv	r3, r2, r3
     886:	ee07 3a90 	vmov	s15, r3
     88a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     88e:	ed97 7b02 	vldr	d7, [r7, #8]
     892:	ee26 7b07 	vmul.f64	d7, d6, d7
     896:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     89a:	ee17 3a90 	vmov	r3, s15
     89e:	64bb      	str	r3, [r7, #72]	; 0x48
	//printf("%lu points in sweep, maximum\r\n", points_in_sweep);

	/* now figure out the unit_step_size and how many steps will be taken in the span */

	/* Calculate start frequency */
	double start_freq = centre_freq - 0.5* span;
     8a0:	ed97 7b04 	vldr	d7, [r7, #16]
     8a4:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     8a8:	ee27 7b06 	vmul.f64	d7, d7, d6
     8ac:	ed97 6b06 	vldr	d6, [r7, #24]
     8b0:	ee36 7b47 	vsub.f64	d7, d6, d7
     8b4:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
	mw_sweep_settings.k = calculate_k(start_freq);
     8b8:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
     8bc:	f000 f99a 	bl	bf4 <calculate_k>
     8c0:	4603      	mov	r3, r0
     8c2:	b2da      	uxtb	r2, r3
     8c4:	4b7f      	ldr	r3, [pc, #508]	; (ac4 <calc_fixed_time_MW_sweep+0x2bc>)
     8c6:	705a      	strb	r2, [r3, #1]

	//steps should be evenly sized
	//selected step size should be an integer multiple of the unit step size
	//increase the step_size value until the sweep fits into the available period
	const double unit_step_size_Hz = REF_FREQ / (double) (mw_sweep_settings.k * (1 << 24)); //minimum step size possible
     8c8:	ed9f 5b77 	vldr	d5, [pc, #476]	; aa8 <calc_fixed_time_MW_sweep+0x2a0>
     8cc:	4b7d      	ldr	r3, [pc, #500]	; (ac4 <calc_fixed_time_MW_sweep+0x2bc>)
     8ce:	785b      	ldrb	r3, [r3, #1]
     8d0:	061b      	lsls	r3, r3, #24
     8d2:	ee07 3a90 	vmov	s15, r3
     8d6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
     8da:	ee85 7b06 	vdiv.f64	d7, d5, d6
     8de:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
	//printf("Unit step size: %.3g Hz\r\n", unit_step_size_Hz);
	mw_sweep_settings.step_size = 1;
     8e2:	4b78      	ldr	r3, [pc, #480]	; (ac4 <calc_fixed_time_MW_sweep+0x2bc>)
     8e4:	2201      	movs	r2, #1
     8e6:	611a      	str	r2, [r3, #16]
	while ((mw_sweep_settings.step_size * points_in_sweep) < (span / unit_step_size_Hz)) {
     8e8:	e004      	b.n	8f4 <calc_fixed_time_MW_sweep+0xec>
		mw_sweep_settings.step_size++;
     8ea:	4b76      	ldr	r3, [pc, #472]	; (ac4 <calc_fixed_time_MW_sweep+0x2bc>)
     8ec:	691b      	ldr	r3, [r3, #16]
     8ee:	3301      	adds	r3, #1
     8f0:	4a74      	ldr	r2, [pc, #464]	; (ac4 <calc_fixed_time_MW_sweep+0x2bc>)
     8f2:	6113      	str	r3, [r2, #16]
	while ((mw_sweep_settings.step_size * points_in_sweep) < (span / unit_step_size_Hz)) {
     8f4:	4b73      	ldr	r3, [pc, #460]	; (ac4 <calc_fixed_time_MW_sweep+0x2bc>)
     8f6:	691b      	ldr	r3, [r3, #16]
     8f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
     8fa:	fb02 f303 	mul.w	r3, r2, r3
     8fe:	ee07 3a90 	vmov	s15, r3
     902:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     906:	ed97 4b04 	vldr	d4, [r7, #16]
     90a:	ed97 5b0e 	vldr	d5, [r7, #56]	; 0x38
     90e:	ee84 7b05 	vdiv.f64	d7, d4, d5
     912:	eeb4 6bc7 	vcmpe.f64	d6, d7
     916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     91a:	d4e6      	bmi.n	8ea <calc_fixed_time_MW_sweep+0xe2>
	}
	const double achieved_step_size = (double) (mw_sweep_settings.step_size * unit_step_size_Hz);
     91c:	4b69      	ldr	r3, [pc, #420]	; (ac4 <calc_fixed_time_MW_sweep+0x2bc>)
     91e:	691b      	ldr	r3, [r3, #16]
     920:	ee07 3a90 	vmov	s15, r3
     924:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     928:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
     92c:	ee26 7b07 	vmul.f64	d7, d6, d7
     930:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
	printf("Step size: %lu x unit step i.e. %.3g Hz\r\n", mw_sweep_settings.step_size, achieved_step_size);
     934:	4b63      	ldr	r3, [pc, #396]	; (ac4 <calc_fixed_time_MW_sweep+0x2bc>)
     936:	6919      	ldr	r1, [r3, #16]
     938:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
     93c:	4864      	ldr	r0, [pc, #400]	; (ad0 <calc_fixed_time_MW_sweep+0x2c8>)
     93e:	f000 fdc7 	bl	14d0 <__printf_veneer>

	//calculate number of steps in sweep and round off to integer
	mw_sweep_settings.num_steps = (span / achieved_step_size) + 0.5;
     942:	ed97 5b04 	vldr	d5, [r7, #16]
     946:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     94a:	ee85 7b06 	vdiv.f64	d7, d5, d6
     94e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     952:	ee37 7b06 	vadd.f64	d7, d7, d6
     956:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     95a:	ee17 2a90 	vmov	r2, s15
     95e:	4b59      	ldr	r3, [pc, #356]	; (ac4 <calc_fixed_time_MW_sweep+0x2bc>)
     960:	60da      	str	r2, [r3, #12]
	const uint32_t point_time_us = 1000000 * requested_sweep_period / (mw_sweep_settings.num_steps + 1);
     962:	ed97 7b02 	vldr	d7, [r7, #8]
     966:	ed9f 6b52 	vldr	d6, [pc, #328]	; ab0 <calc_fixed_time_MW_sweep+0x2a8>
     96a:	ee27 5b06 	vmul.f64	d5, d7, d6
     96e:	4b55      	ldr	r3, [pc, #340]	; (ac4 <calc_fixed_time_MW_sweep+0x2bc>)
     970:	68db      	ldr	r3, [r3, #12]
     972:	3301      	adds	r3, #1
     974:	ee07 3a90 	vmov	s15, r3
     978:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     97c:	ee85 7b06 	vdiv.f64	d7, d5, d6
     980:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     984:	ee17 3a90 	vmov	r3, s15
     988:	62fb      	str	r3, [r7, #44]	; 0x2c
//	printf("%lu points in sweep, %.3g ms each\r\n", mw_sweep_settings.num_steps, (1000 * requested_sweep_period / mw_sweep_settings.num_steps));
//	printf("%lu points in sweep, %lu ms and %lu POP cycles each\r\n", mw_sweep_settings.num_steps, point_time_us / 1000, (uint32_t)(point_time_us/POP_period_us));
	mw_sweep_settings.pop_cycles_per_point = (point_time_us - MW_STABILISE_TIME_US - TIMING_MARGIN_US)/POP_period_us;
     98a:	f241 3288 	movw	r2, #5000	; 0x1388
     98e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     990:	1a9b      	subs	r3, r3, r2
     992:	2264      	movs	r2, #100	; 0x64
     994:	1a9a      	subs	r2, r3, r2
     996:	4b4c      	ldr	r3, [pc, #304]	; (ac8 <calc_fixed_time_MW_sweep+0x2c0>)
     998:	681b      	ldr	r3, [r3, #0]
     99a:	fbb2 f3f3 	udiv	r3, r2, r3
     99e:	4a49      	ldr	r2, [pc, #292]	; (ac4 <calc_fixed_time_MW_sweep+0x2bc>)
     9a0:	6153      	str	r3, [r2, #20]
	printf("%lu points in sweep, %lu ms and %lu POP cycles each\r\n", mw_sweep_settings.num_steps + 1, point_time_us / 1000, mw_sweep_settings.pop_cycles_per_point);
     9a2:	4b48      	ldr	r3, [pc, #288]	; (ac4 <calc_fixed_time_MW_sweep+0x2bc>)
     9a4:	68db      	ldr	r3, [r3, #12]
     9a6:	1c59      	adds	r1, r3, #1
     9a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     9aa:	4a4a      	ldr	r2, [pc, #296]	; (ad4 <calc_fixed_time_MW_sweep+0x2cc>)
     9ac:	fba2 2303 	umull	r2, r3, r2, r3
     9b0:	099a      	lsrs	r2, r3, #6
     9b2:	4b44      	ldr	r3, [pc, #272]	; (ac4 <calc_fixed_time_MW_sweep+0x2bc>)
     9b4:	695b      	ldr	r3, [r3, #20]
     9b6:	4848      	ldr	r0, [pc, #288]	; (ad8 <calc_fixed_time_MW_sweep+0x2d0>)
     9b8:	f000 fd8a 	bl	14d0 <__printf_veneer>
	mw_sweep_settings.dwell_time = mw_sweep_settings.pop_cycles_per_point * POP_period_us + TIMING_MARGIN_US; //selected value of dwell_time in us
     9bc:	4b41      	ldr	r3, [pc, #260]	; (ac4 <calc_fixed_time_MW_sweep+0x2bc>)
     9be:	695b      	ldr	r3, [r3, #20]
     9c0:	4a41      	ldr	r2, [pc, #260]	; (ac8 <calc_fixed_time_MW_sweep+0x2c0>)
     9c2:	6812      	ldr	r2, [r2, #0]
     9c4:	fb02 f303 	mul.w	r3, r2, r3
     9c8:	2264      	movs	r2, #100	; 0x64
     9ca:	4413      	add	r3, r2
     9cc:	4a3d      	ldr	r2, [pc, #244]	; (ac4 <calc_fixed_time_MW_sweep+0x2bc>)
     9ce:	61d3      	str	r3, [r2, #28]

	/* Can avoid spurs if frequency requested can be encoded exactly  */
	start_freq = ((long)(start_freq/unit_step_size_Hz)) * unit_step_size_Hz;
     9d0:	ed97 5b10 	vldr	d5, [r7, #64]	; 0x40
     9d4:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
     9d8:	ee85 7b06 	vdiv.f64	d7, d5, d6
     9dc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
     9e0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
     9e4:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
     9e8:	ee26 7b07 	vmul.f64	d7, d6, d7
     9ec:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40

	/* Calculate the N division ratio, extracting the fractional and integer parts */
	const double N = ((start_freq * mw_sweep_settings.k) / REF_FREQ);
     9f0:	4b34      	ldr	r3, [pc, #208]	; (ac4 <calc_fixed_time_MW_sweep+0x2bc>)
     9f2:	785b      	ldrb	r3, [r3, #1]
     9f4:	ee07 3a90 	vmov	s15, r3
     9f8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
     9fc:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
     a00:	ee26 6b07 	vmul.f64	d6, d6, d7
     a04:	ed9f 5b28 	vldr	d5, [pc, #160]	; aa8 <calc_fixed_time_MW_sweep+0x2a0>
     a08:	ee86 7b05 	vdiv.f64	d7, d6, d5
     a0c:	ed87 7b08 	vstr	d7, [r7, #32]
	mw_sweep_settings.NINT = N;
     a10:	ed97 7b08 	vldr	d7, [r7, #32]
     a14:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     a18:	ee17 2a90 	vmov	r2, s15
     a1c:	4b29      	ldr	r3, [pc, #164]	; (ac4 <calc_fixed_time_MW_sweep+0x2bc>)
     a1e:	605a      	str	r2, [r3, #4]
	mw_sweep_settings.NFRAC_start = ((N - mw_sweep_settings.NINT) * (1 << 24)) + 0.5;
     a20:	4b28      	ldr	r3, [pc, #160]	; (ac4 <calc_fixed_time_MW_sweep+0x2bc>)
     a22:	685b      	ldr	r3, [r3, #4]
     a24:	ee07 3a90 	vmov	s15, r3
     a28:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     a2c:	ed97 6b08 	vldr	d6, [r7, #32]
     a30:	ee36 7b47 	vsub.f64	d7, d6, d7
     a34:	ed9f 6b20 	vldr	d6, [pc, #128]	; ab8 <calc_fixed_time_MW_sweep+0x2b0>
     a38:	ee27 7b06 	vmul.f64	d7, d7, d6
     a3c:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     a40:	ee37 7b06 	vadd.f64	d7, d7, d6
     a44:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     a48:	ee17 2a90 	vmov	r2, s15
     a4c:	4b1d      	ldr	r3, [pc, #116]	; (ac4 <calc_fixed_time_MW_sweep+0x2bc>)
     a4e:	609a      	str	r2, [r3, #8]

	/* Calculate the period of a sweep */
	double point_period = (double)(MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US + mw_sweep_settings.dwell_time)/1000000;
     a50:	f241 3288 	movw	r2, #5000	; 0x1388
     a54:	f641 73cc 	movw	r3, #8140	; 0x1fcc
     a58:	441a      	add	r2, r3
     a5a:	4b1a      	ldr	r3, [pc, #104]	; (ac4 <calc_fixed_time_MW_sweep+0x2bc>)
     a5c:	69db      	ldr	r3, [r3, #28]
     a5e:	4413      	add	r3, r2
     a60:	ee07 3a90 	vmov	s15, r3
     a64:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     a68:	ed9f 5b11 	vldr	d5, [pc, #68]	; ab0 <calc_fixed_time_MW_sweep+0x2a8>
     a6c:	ee86 7b05 	vdiv.f64	d7, d6, d5
     a70:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
//	printf("Point period %f\r\n", point_period);
	double calc_sweep_time = point_period * (double)(mw_sweep_settings.num_steps+1);
     a74:	4b13      	ldr	r3, [pc, #76]	; (ac4 <calc_fixed_time_MW_sweep+0x2bc>)
     a76:	68db      	ldr	r3, [r3, #12]
     a78:	3301      	adds	r3, #1
     a7a:	ee07 3a90 	vmov	s15, r3
     a7e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     a82:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
     a86:	ee26 7b07 	vmul.f64	d7, d6, d7
     a8a:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
//	printf("calc_sweep_time %f\r\n", calc_sweep_time);
//	double calc_sweep_time = (double)(MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US + mw_sweep_settings.dwell_time) * (double)(mw_sweep_settings.num_steps)/1000000;
	printf("Sweep period could be reduced to %.3g s with same number of POP samples\r\n", calc_sweep_time);
     a8e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
     a92:	4812      	ldr	r0, [pc, #72]	; (adc <calc_fixed_time_MW_sweep+0x2d4>)
     a94:	f000 fd1c 	bl	14d0 <__printf_veneer>
	/* Increase dwell time until the sweep is just slightly longer than the sweep period requested */
	while ((double)((mw_sweep_settings.num_steps + 1) * point_period) < requested_sweep_period) {
     a98:	e039      	b.n	b0e <calc_fixed_time_MW_sweep+0x306>
     a9a:	bf00      	nop
     a9c:	f3af 8000 	nop.w
     aa0:	00000000 	.word	0x00000000
     aa4:	41cdcd65 	.word	0x41cdcd65
     aa8:	00000000 	.word	0x00000000
     aac:	4187d784 	.word	0x4187d784
     ab0:	00000000 	.word	0x00000000
     ab4:	412e8480 	.word	0x412e8480
     ab8:	00000000 	.word	0x00000000
     abc:	41700000 	.word	0x41700000
     ac0:	0801b944 	.word	0x0801b944
     ac4:	20000670 	.word	0x20000670
     ac8:	20000660 	.word	0x20000660
     acc:	000f4240 	.word	0x000f4240
     ad0:	0801b994 	.word	0x0801b994
     ad4:	10624dd3 	.word	0x10624dd3
     ad8:	0801b9c0 	.word	0x0801b9c0
     adc:	0801b9f8 	.word	0x0801b9f8
		mw_sweep_settings.dwell_time++;
     ae0:	4b41      	ldr	r3, [pc, #260]	; (be8 <calc_fixed_time_MW_sweep+0x3e0>)
     ae2:	69db      	ldr	r3, [r3, #28]
     ae4:	3301      	adds	r3, #1
     ae6:	4a40      	ldr	r2, [pc, #256]	; (be8 <calc_fixed_time_MW_sweep+0x3e0>)
     ae8:	61d3      	str	r3, [r2, #28]
		point_period = (MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US + mw_sweep_settings.dwell_time)/1000000; //recalculate for new dwell time
     aea:	f241 3288 	movw	r2, #5000	; 0x1388
     aee:	f641 73cc 	movw	r3, #8140	; 0x1fcc
     af2:	441a      	add	r2, r3
     af4:	4b3c      	ldr	r3, [pc, #240]	; (be8 <calc_fixed_time_MW_sweep+0x3e0>)
     af6:	69db      	ldr	r3, [r3, #28]
     af8:	4413      	add	r3, r2
     afa:	4a3c      	ldr	r2, [pc, #240]	; (bec <calc_fixed_time_MW_sweep+0x3e4>)
     afc:	fba2 2303 	umull	r2, r3, r2, r3
     b00:	0c9b      	lsrs	r3, r3, #18
     b02:	ee07 3a90 	vmov	s15, r3
     b06:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     b0a:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
	while ((double)((mw_sweep_settings.num_steps + 1) * point_period) < requested_sweep_period) {
     b0e:	4b36      	ldr	r3, [pc, #216]	; (be8 <calc_fixed_time_MW_sweep+0x3e0>)
     b10:	68db      	ldr	r3, [r3, #12]
     b12:	3301      	adds	r3, #1
     b14:	ee07 3a90 	vmov	s15, r3
     b18:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     b1c:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
     b20:	ee26 7b07 	vmul.f64	d7, d6, d7
     b24:	ed97 6b02 	vldr	d6, [r7, #8]
     b28:	eeb4 6bc7 	vcmpe.f64	d6, d7
     b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     b30:	dcd6      	bgt.n	ae0 <calc_fixed_time_MW_sweep+0x2d8>
	}

	//Period of MW sweep isn't precise as it's based on measured averages processing time
	//Additional 10% (max of 1s) added to sweep period to guarantee horizontal scope sync
	if (scope_sync_time) {
     b32:	79fb      	ldrb	r3, [r7, #7]
     b34:	2b00      	cmp	r3, #0
     b36:	d045      	beq.n	bc4 <calc_fixed_time_MW_sweep+0x3bc>
		mw_sweep_settings.num_steps = mw_sweep_settings.num_steps * 1.1 + 0.5;
     b38:	4b2b      	ldr	r3, [pc, #172]	; (be8 <calc_fixed_time_MW_sweep+0x3e0>)
     b3a:	68db      	ldr	r3, [r3, #12]
     b3c:	ee07 3a90 	vmov	s15, r3
     b40:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     b44:	ed9f 6b26 	vldr	d6, [pc, #152]	; be0 <calc_fixed_time_MW_sweep+0x3d8>
     b48:	ee27 7b06 	vmul.f64	d7, d7, d6
     b4c:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     b50:	ee37 7b06 	vadd.f64	d7, d7, d6
     b54:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     b58:	ee17 2a90 	vmov	r2, s15
     b5c:	4b22      	ldr	r3, [pc, #136]	; (be8 <calc_fixed_time_MW_sweep+0x3e0>)
     b5e:	60da      	str	r2, [r3, #12]
		calc_sweep_time = point_period * (double)(mw_sweep_settings.num_steps + 1);
     b60:	4b21      	ldr	r3, [pc, #132]	; (be8 <calc_fixed_time_MW_sweep+0x3e0>)
     b62:	68db      	ldr	r3, [r3, #12]
     b64:	3301      	adds	r3, #1
     b66:	ee07 3a90 	vmov	s15, r3
     b6a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     b6e:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
     b72:	ee26 7b07 	vmul.f64	d7, d6, d7
     b76:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50

		/* Decrease number of steps if additional 10% is >1s */
		while (calc_sweep_time - requested_sweep_period > 1) {
     b7a:	e011      	b.n	ba0 <calc_fixed_time_MW_sweep+0x398>
			mw_sweep_settings.num_steps--;
     b7c:	4b1a      	ldr	r3, [pc, #104]	; (be8 <calc_fixed_time_MW_sweep+0x3e0>)
     b7e:	68db      	ldr	r3, [r3, #12]
     b80:	3b01      	subs	r3, #1
     b82:	4a19      	ldr	r2, [pc, #100]	; (be8 <calc_fixed_time_MW_sweep+0x3e0>)
     b84:	60d3      	str	r3, [r2, #12]
			calc_sweep_time = point_period * (double)(mw_sweep_settings.num_steps + 1);
     b86:	4b18      	ldr	r3, [pc, #96]	; (be8 <calc_fixed_time_MW_sweep+0x3e0>)
     b88:	68db      	ldr	r3, [r3, #12]
     b8a:	3301      	adds	r3, #1
     b8c:	ee07 3a90 	vmov	s15, r3
     b90:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     b94:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
     b98:	ee26 7b07 	vmul.f64	d7, d6, d7
     b9c:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
		while (calc_sweep_time - requested_sweep_period > 1) {
     ba0:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
     ba4:	ed97 7b02 	vldr	d7, [r7, #8]
     ba8:	ee36 7b47 	vsub.f64	d7, d6, d7
     bac:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
     bb0:	eeb4 7bc6 	vcmpe.f64	d7, d6
     bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     bb8:	dce0      	bgt.n	b7c <calc_fixed_time_MW_sweep+0x374>
		}

		//Double check of the sweep period selected
		printf("Final calculated sweep period, including scope sync: %.3g s\r\n", calc_sweep_time);
     bba:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
     bbe:	480c      	ldr	r0, [pc, #48]	; (bf0 <calc_fixed_time_MW_sweep+0x3e8>)
     bc0:	f000 fc86 	bl	14d0 <__printf_veneer>
	}

	mw_sweep_settings.current_point = 0;
     bc4:	4b08      	ldr	r3, [pc, #32]	; (be8 <calc_fixed_time_MW_sweep+0x3e0>)
     bc6:	2200      	movs	r2, #0
     bc8:	625a      	str	r2, [r3, #36]	; 0x24
	mw_sweep_settings.sweep_period = calc_sweep_time;
     bca:	4907      	ldr	r1, [pc, #28]	; (be8 <calc_fixed_time_MW_sweep+0x3e0>)
     bcc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
     bd0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	//print_mw_sweep_settings();
	return(true);
     bd4:	2301      	movs	r3, #1
}
     bd6:	4618      	mov	r0, r3
     bd8:	3760      	adds	r7, #96	; 0x60
     bda:	46bd      	mov	sp, r7
     bdc:	bd80      	pop	{r7, pc}
     bde:	bf00      	nop
     be0:	9999999a 	.word	0x9999999a
     be4:	3ff19999 	.word	0x3ff19999
     be8:	20000670 	.word	0x20000670
     bec:	431bde83 	.word	0x431bde83
     bf0:	0801ba44 	.word	0x0801ba44

00000bf4 <calculate_k>:

/**
  * @brief  Calculates k value
  * @retval k
  */
static const uint32_t calculate_k(const double frequency) {
     bf4:	b480      	push	{r7}
     bf6:	b085      	sub	sp, #20
     bf8:	af00      	add	r7, sp, #0
     bfa:	ed87 0b00 	vstr	d0, [r7]
	uint32_t k = VCO_MAX_FREQ / frequency;
     bfe:	ed9f 5b10 	vldr	d5, [pc, #64]	; c40 <calculate_k+0x4c>
     c02:	ed97 6b00 	vldr	d6, [r7]
     c06:	ee85 7b06 	vdiv.f64	d7, d5, d6
     c0a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     c0e:	ee17 3a90 	vmov	r3, s15
     c12:	60fb      	str	r3, [r7, #12]

	if (k != 1) {
     c14:	68fb      	ldr	r3, [r7, #12]
     c16:	2b01      	cmp	r3, #1
     c18:	d00b      	beq.n	c32 <calculate_k+0x3e>
		while (k > 62 || k % 2) {
     c1a:	e002      	b.n	c22 <calculate_k+0x2e>
			k --;
     c1c:	68fb      	ldr	r3, [r7, #12]
     c1e:	3b01      	subs	r3, #1
     c20:	60fb      	str	r3, [r7, #12]
		while (k > 62 || k % 2) {
     c22:	68fb      	ldr	r3, [r7, #12]
     c24:	2b3e      	cmp	r3, #62	; 0x3e
     c26:	d8f9      	bhi.n	c1c <calculate_k+0x28>
     c28:	68fb      	ldr	r3, [r7, #12]
     c2a:	f003 0301 	and.w	r3, r3, #1
     c2e:	2b00      	cmp	r3, #0
     c30:	d1f4      	bne.n	c1c <calculate_k+0x28>
		}
	}
	return (k);
     c32:	68fb      	ldr	r3, [r7, #12]
}
     c34:	4618      	mov	r0, r3
     c36:	3714      	adds	r7, #20
     c38:	46bd      	mov	sp, r7
     c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
     c3e:	4770      	bx	lr
     c40:	20000000 	.word	0x20000000
     c44:	41ee8c21 	.word	0x41ee8c21

00000c48 <start_POP_calibration>:

/**
  * @brief  Starts the process of measuring the POP period
  * @retval None
  */
void start_POP_calibration(const bool cal_only) {
     c48:	b580      	push	{r7, lr}
     c4a:	b082      	sub	sp, #8
     c4c:	af00      	add	r7, sp, #0
     c4e:	4603      	mov	r3, r0
     c50:	71fb      	strb	r3, [r7, #7]
	/* Requires ADC to be initialised and for HAL_ADC_ConvCpltCallback to be active */
	if (cal_only == true) {
     c52:	79fb      	ldrb	r3, [r7, #7]
     c54:	2b00      	cmp	r3, #0
     c56:	d003      	beq.n	c60 <start_POP_calibration+0x18>
		mw_sweep_settings.sweep_mode = POP_CAL_ONLY;
     c58:	4b0f      	ldr	r3, [pc, #60]	; (c98 <start_POP_calibration+0x50>)
     c5a:	2201      	movs	r2, #1
     c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	}
	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); 	//Sets MW_invalid pin high to reset POP cycle
     c60:	2201      	movs	r2, #1
     c62:	2102      	movs	r1, #2
     c64:	480d      	ldr	r0, [pc, #52]	; (c9c <start_POP_calibration+0x54>)
     c66:	f000 fc1f 	bl	14a8 <__HAL_GPIO_WritePin_veneer>
	start_timer(MW_TIMER); //reset MW_timer and start counting
     c6a:	4b0d      	ldr	r3, [pc, #52]	; (ca0 <start_POP_calibration+0x58>)
     c6c:	681b      	ldr	r3, [r3, #0]
     c6e:	4618      	mov	r0, r3
     c70:	f000 fae8 	bl	1244 <start_timer>
	HAL_Delay(10); // 10ms in case ADC was part-way through a conversion
     c74:	200a      	movs	r0, #10
     c76:	f000 fc0f 	bl	1498 <__HAL_Delay_veneer>
	sample_count = 0; //reset sample count
     c7a:	4b0a      	ldr	r3, [pc, #40]	; (ca4 <start_POP_calibration+0x5c>)
     c7c:	2200      	movs	r2, #0
     c7e:	801a      	strh	r2, [r3, #0]
	mw_sweep_settings.state = MW_CALIBRATE;
     c80:	4b05      	ldr	r3, [pc, #20]	; (c98 <start_POP_calibration+0x50>)
     c82:	2204      	movs	r2, #4
     c84:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); //Restart POP cycle
     c86:	2200      	movs	r2, #0
     c88:	2102      	movs	r1, #2
     c8a:	4804      	ldr	r0, [pc, #16]	; (c9c <start_POP_calibration+0x54>)
     c8c:	f000 fc0c 	bl	14a8 <__HAL_GPIO_WritePin_veneer>
	#ifdef MW_VERBOSE
		printf("POP calibration started\r\n");
	#endif //MW_VERBOSE
}
     c90:	bf00      	nop
     c92:	3708      	adds	r7, #8
     c94:	46bd      	mov	sp, r7
     c96:	bd80      	pop	{r7, pc}
     c98:	20000670 	.word	0x20000670
     c9c:	58020400 	.word	0x58020400
     ca0:	2000001c 	.word	0x2000001c
     ca4:	2000065e 	.word	0x2000065e

00000ca8 <start_MW_sweep>:

/**
  * @brief  Starts a MW sweep
  * @retval Success/failure
  */
static const bool start_MW_sweep(const bool single_sweep) {
     ca8:	b580      	push	{r7, lr}
     caa:	b082      	sub	sp, #8
     cac:	af00      	add	r7, sp, #0
     cae:	4603      	mov	r3, r0
     cb0:	71fb      	strb	r3, [r7, #7]
	//uses settings from the mw_sweep_settings structure
	if (single_sweep == true) {
     cb2:	79fb      	ldrb	r3, [r7, #7]
     cb4:	2b00      	cmp	r3, #0
     cb6:	d003      	beq.n	cc0 <start_MW_sweep+0x18>
		mw_sweep_settings.sweep_mode = SWEEP_ONCE;
     cb8:	4b19      	ldr	r3, [pc, #100]	; (d20 <start_MW_sweep+0x78>)
     cba:	2202      	movs	r2, #2
     cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	}
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET); // Assume MW lock, the LED will be disabled if lock fails.
     cc0:	2201      	movs	r2, #1
     cc2:	2102      	movs	r1, #2
     cc4:	4817      	ldr	r0, [pc, #92]	; (d24 <start_MW_sweep+0x7c>)
     cc6:	f000 fbef 	bl	14a8 <__HAL_GPIO_WritePin_veneer>

	#ifdef MW_VERBOSE
		printf("Setting trigger output low \r\n");
	#endif //MW_VERBOSE

	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); //Sets MW_invalid pin high
     cca:	2201      	movs	r2, #1
     ccc:	2102      	movs	r1, #2
     cce:	4816      	ldr	r0, [pc, #88]	; (d28 <start_MW_sweep+0x80>)
     cd0:	f000 fbea 	bl	14a8 <__HAL_GPIO_WritePin_veneer>
//	set_frequency(mw_sweep_settings.NINT, mw_sweep_settings.NFRAC_start, mw_sweep_settings.k, MANUAL_MUTE); //program initial MW frequency
	set_freq_regs(mw_sweep_settings.NINT, mw_sweep_settings.NFRAC_start, mw_sweep_settings.k); //program initial MW frequency
     cd4:	4b12      	ldr	r3, [pc, #72]	; (d20 <start_MW_sweep+0x78>)
     cd6:	685b      	ldr	r3, [r3, #4]
     cd8:	4a11      	ldr	r2, [pc, #68]	; (d20 <start_MW_sweep+0x78>)
     cda:	6891      	ldr	r1, [r2, #8]
     cdc:	4a10      	ldr	r2, [pc, #64]	; (d20 <start_MW_sweep+0x78>)
     cde:	7852      	ldrb	r2, [r2, #1]
     ce0:	4618      	mov	r0, r3
     ce2:	f7ff fba1 	bl	428 <set_freq_regs>
	mw_sweep_settings.state = MW_STABILISING; //waiting for MW output to stabilise
     ce6:	4b0e      	ldr	r3, [pc, #56]	; (d20 <start_MW_sweep+0x78>)
     ce8:	2202      	movs	r2, #2
     cea:	701a      	strb	r2, [r3, #0]
	mw_sweep_settings.current_point = 0; //currently on at start of ramp i.e. point 0
     cec:	4b0c      	ldr	r3, [pc, #48]	; (d20 <start_MW_sweep+0x78>)
     cee:	2200      	movs	r2, #0
     cf0:	625a      	str	r2, [r3, #36]	; 0x24
	/* Output used for triggering external scope */
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET); // Sets trigger output low
     cf2:	2200      	movs	r2, #0
     cf4:	2101      	movs	r1, #1
     cf6:	480d      	ldr	r0, [pc, #52]	; (d2c <start_MW_sweep+0x84>)
     cf8:	f000 fbd6 	bl	14a8 <__HAL_GPIO_WritePin_veneer>
	start_timer(MW_TIMER); //reset MW_timer (MW step timer) and start counting
     cfc:	4b0c      	ldr	r3, [pc, #48]	; (d30 <start_MW_sweep+0x88>)
     cfe:	681b      	ldr	r3, [r3, #0]
     d00:	4618      	mov	r0, r3
     d02:	f000 fa9f 	bl	1244 <start_timer>
	start_timer(SWEEP_TIMER); //reset general (sweep) timer and start counting
     d06:	4b0b      	ldr	r3, [pc, #44]	; (d34 <start_MW_sweep+0x8c>)
     d08:	681b      	ldr	r3, [r3, #0]
     d0a:	4618      	mov	r0, r3
     d0c:	f000 fa9a 	bl	1244 <start_timer>
	sample_count = 0; //reset sample count
     d10:	4b09      	ldr	r3, [pc, #36]	; (d38 <start_MW_sweep+0x90>)
     d12:	2200      	movs	r2, #0
     d14:	801a      	strh	r2, [r3, #0]
	//known limitation - if the ADC has been recently triggered and HAL_ADC_ConvCpltCallback will increment sample_count by 1
	return(true);
     d16:	2301      	movs	r3, #1
}
     d18:	4618      	mov	r0, r3
     d1a:	3708      	adds	r7, #8
     d1c:	46bd      	mov	sp, r7
     d1e:	bd80      	pop	{r7, pc}
     d20:	20000670 	.word	0x20000670
     d24:	58021000 	.word	0x58021000
     d28:	58020400 	.word	0x58020400
     d2c:	58021800 	.word	0x58021800
     d30:	2000001c 	.word	0x2000001c
     d34:	20000020 	.word	0x20000020
     d38:	2000065e 	.word	0x2000065e

00000d3c <start_continuous_MW_sweep>:

/**
  * @brief  Starts a continuous MW calibrate/sweep cycle
  * @retval Success/failure
  */
void start_continuous_MW_sweep(void) {
     d3c:	b580      	push	{r7, lr}
     d3e:	af00      	add	r7, sp, #0
	mw_sweep_settings.sweep_mode = CONTINUOUS_SWEEP;
     d40:	4b04      	ldr	r3, [pc, #16]	; (d54 <start_continuous_MW_sweep+0x18>)
     d42:	2200      	movs	r2, #0
     d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	start_POP_calibration(false);
     d48:	2000      	movs	r0, #0
     d4a:	f7ff ff7d 	bl	c48 <start_POP_calibration>
}
     d4e:	bf00      	nop
     d50:	bd80      	pop	{r7, pc}
     d52:	bf00      	nop
     d54:	20000670 	.word	0x20000670

00000d58 <MW_update>:

/**
  * @brief  Checks MW status to see if a timer has elapsed and if frequency needs changing.
  * @retval True if an action was taken
  */
const bool MW_update(void) {
     d58:	b580      	push	{r7, lr}
     d5a:	b08a      	sub	sp, #40	; 0x28
     d5c:	af02      	add	r7, sp, #8
	uint8_t local_copy_of_MW_state = mw_sweep_settings.state; //hack to make switch statement behave
     d5e:	4ba4      	ldr	r3, [pc, #656]	; (ff0 <MW_update+0x298>)
     d60:	781b      	ldrb	r3, [r3, #0]
     d62:	77bb      	strb	r3, [r7, #30]
	//switch (mw_sweep_settings.state)
	bool action_taken = false;
     d64:	2300      	movs	r3, #0
     d66:	77fb      	strb	r3, [r7, #31]
	uint32_t sweep_period_us;
	switch (local_copy_of_MW_state)
     d68:	7fbb      	ldrb	r3, [r7, #30]
     d6a:	2b04      	cmp	r3, #4
     d6c:	f200 8128 	bhi.w	fc0 <MW_update+0x268>
     d70:	a201      	add	r2, pc, #4	; (adr r2, d78 <MW_update+0x20>)
     d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     d76:	bf00      	nop
     d78:	00000fd9 	.word	0x00000fd9
     d7c:	00000fd9 	.word	0x00000fd9
     d80:	00000d8d 	.word	0x00000d8d
     d84:	00000dcf 	.word	0x00000dcf
     d88:	00000f4d 	.word	0x00000f4d
		case MW_STOPPED:
		case MW_FIXED_FREQ:
			break; //no action to take

		case MW_STABILISING: //waiting for MW output to stabilise
			if (check_timer(MW_TIMER) < MW_STABILISE_TIME_US) return(false); //Still waiting, no action taken
     d8c:	4b99      	ldr	r3, [pc, #612]	; (ff4 <MW_update+0x29c>)
     d8e:	681b      	ldr	r3, [r3, #0]
     d90:	4618      	mov	r0, r3
     d92:	f000 fa87 	bl	12a4 <check_timer>
     d96:	4603      	mov	r3, r0
     d98:	f241 3288 	movw	r2, #5000	; 0x1388
     d9c:	4293      	cmp	r3, r2
     d9e:	d201      	bcs.n	da4 <MW_update+0x4c>
     da0:	2300      	movs	r3, #0
     da2:	e11d      	b.n	fe0 <MW_update+0x288>
			//Otherwise MW stabilisation timer has elapsed
			stop_timer(MW_TIMER);
     da4:	4b93      	ldr	r3, [pc, #588]	; (ff4 <MW_update+0x29c>)
     da6:	681b      	ldr	r3, [r3, #0]
     da8:	4618      	mov	r0, r3
     daa:	f000 fa69 	bl	1280 <stop_timer>
			HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); //Sets MW_invalid pin low as MW now stable
     dae:	2200      	movs	r2, #0
     db0:	2102      	movs	r1, #2
     db2:	4891      	ldr	r0, [pc, #580]	; (ff8 <MW_update+0x2a0>)
     db4:	f000 fb78 	bl	14a8 <__HAL_GPIO_WritePin_veneer>
			mw_sweep_settings.state = MW_DWELL;
     db8:	4b8d      	ldr	r3, [pc, #564]	; (ff0 <MW_update+0x298>)
     dba:	2203      	movs	r2, #3
     dbc:	701a      	strb	r2, [r3, #0]
			start_timer(MW_TIMER); //Restart timer for DWELL time
     dbe:	4b8d      	ldr	r3, [pc, #564]	; (ff4 <MW_update+0x29c>)
     dc0:	681b      	ldr	r3, [r3, #0]
     dc2:	4618      	mov	r0, r3
     dc4:	f000 fa3e 	bl	1244 <start_timer>
			action_taken = true;
     dc8:	2301      	movs	r3, #1
     dca:	77fb      	strb	r3, [r7, #31]
			break;
     dcc:	e107      	b.n	fde <MW_update+0x286>

		case MW_DWELL: //valid MW output waiting for end of dwell time
			if (check_timer(MW_TIMER) < mw_sweep_settings.dwell_time) return(false); //Still waiting
     dce:	4b89      	ldr	r3, [pc, #548]	; (ff4 <MW_update+0x29c>)
     dd0:	681b      	ldr	r3, [r3, #0]
     dd2:	4618      	mov	r0, r3
     dd4:	f000 fa66 	bl	12a4 <check_timer>
     dd8:	4602      	mov	r2, r0
     dda:	4b85      	ldr	r3, [pc, #532]	; (ff0 <MW_update+0x298>)
     ddc:	69db      	ldr	r3, [r3, #28]
     dde:	429a      	cmp	r2, r3
     de0:	d201      	bcs.n	de6 <MW_update+0x8e>
     de2:	2300      	movs	r3, #0
     de4:	e0fc      	b.n	fe0 <MW_update+0x288>
			//Otherwise dwell timer has elapsed
			action_taken = true;
     de6:	2301      	movs	r3, #1
     de8:	77fb      	strb	r3, [r7, #31]
			stop_timer(MW_TIMER);
     dea:	4b82      	ldr	r3, [pc, #520]	; (ff4 <MW_update+0x29c>)
     dec:	681b      	ldr	r3, [r3, #0]
     dee:	4618      	mov	r0, r3
     df0:	f000 fa46 	bl	1280 <stop_timer>
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //toggles red LED
     df4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
     df8:	487f      	ldr	r0, [pc, #508]	; (ff8 <MW_update+0x2a0>)
     dfa:	f000 fb49 	bl	1490 <__HAL_GPIO_TogglePin_veneer>
			HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); //Sets MW_invalid pin high as about to change frequency
     dfe:	2201      	movs	r2, #1
     e00:	2102      	movs	r1, #2
     e02:	487d      	ldr	r0, [pc, #500]	; (ff8 <MW_update+0x2a0>)
     e04:	f000 fb50 	bl	14a8 <__HAL_GPIO_WritePin_veneer>
			mw_sweep_settings.state = MW_STABILISING;
     e08:	4b79      	ldr	r3, [pc, #484]	; (ff0 <MW_update+0x298>)
     e0a:	2202      	movs	r2, #2
     e0c:	701a      	strb	r2, [r3, #0]
			if (mw_sweep_settings.current_point == mw_sweep_settings.num_steps) { // All steps completed, tidy up and restart next sweep
     e0e:	4b78      	ldr	r3, [pc, #480]	; (ff0 <MW_update+0x298>)
     e10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
     e12:	4b77      	ldr	r3, [pc, #476]	; (ff0 <MW_update+0x298>)
     e14:	68db      	ldr	r3, [r3, #12]
     e16:	429a      	cmp	r2, r3
     e18:	d17b      	bne.n	f12 <MW_update+0x1ba>
				HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
     e1a:	2201      	movs	r2, #1
     e1c:	2101      	movs	r1, #1
     e1e:	4877      	ldr	r0, [pc, #476]	; (ffc <MW_update+0x2a4>)
     e20:	f000 fb42 	bl	14a8 <__HAL_GPIO_WritePin_veneer>
				sweep_period_us=check_timer(SWEEP_TIMER);
     e24:	4b76      	ldr	r3, [pc, #472]	; (1000 <MW_update+0x2a8>)
     e26:	681b      	ldr	r3, [r3, #0]
     e28:	4618      	mov	r0, r3
     e2a:	f000 fa3b 	bl	12a4 <check_timer>
     e2e:	6138      	str	r0, [r7, #16]
				stop_timer(SWEEP_TIMER);
     e30:	4b73      	ldr	r3, [pc, #460]	; (1000 <MW_update+0x2a8>)
     e32:	681b      	ldr	r3, [r3, #0]
     e34:	4618      	mov	r0, r3
     e36:	f000 fa23 	bl	1280 <stop_timer>
				printf("Sweep complete in %.4g s. Expected %.4g s\r\n", (double)(sweep_period_us)/1000000, mw_sweep_settings.sweep_period);
     e3a:	693b      	ldr	r3, [r7, #16]
     e3c:	ee07 3a90 	vmov	s15, r3
     e40:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     e44:	ed9f 6b68 	vldr	d6, [pc, #416]	; fe8 <MW_update+0x290>
     e48:	ee87 5b06 	vdiv.f64	d5, d7, d6
     e4c:	4b68      	ldr	r3, [pc, #416]	; (ff0 <MW_update+0x298>)
     e4e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
     e52:	e9cd 2300 	strd	r2, r3, [sp]
     e56:	ec53 2b15 	vmov	r2, r3, d5
     e5a:	486a      	ldr	r0, [pc, #424]	; (1004 <MW_update+0x2ac>)
     e5c:	f000 fb38 	bl	14d0 <__printf_veneer>

				/* Check if the ADC registered the correct number of samples */
				uint16_t expected_samples = mw_sweep_settings.pop_cycles_per_point * (mw_sweep_settings.num_steps + 1);
     e60:	4b63      	ldr	r3, [pc, #396]	; (ff0 <MW_update+0x298>)
     e62:	695b      	ldr	r3, [r3, #20]
     e64:	b29a      	uxth	r2, r3
     e66:	4b62      	ldr	r3, [pc, #392]	; (ff0 <MW_update+0x298>)
     e68:	68db      	ldr	r3, [r3, #12]
     e6a:	3301      	adds	r3, #1
     e6c:	b29b      	uxth	r3, r3
     e6e:	fb12 f303 	smulbb	r3, r2, r3
     e72:	81fb      	strh	r3, [r7, #14]
				if (sample_count < expected_samples) {
     e74:	4b64      	ldr	r3, [pc, #400]	; (1008 <MW_update+0x2b0>)
     e76:	881b      	ldrh	r3, [r3, #0]
     e78:	b29b      	uxth	r3, r3
     e7a:	89fa      	ldrh	r2, [r7, #14]
     e7c:	429a      	cmp	r2, r3
     e7e:	d907      	bls.n	e90 <MW_update+0x138>
					printf("Sweep generated %u samples but only %u registered\r\n", expected_samples, sample_count);
     e80:	89fb      	ldrh	r3, [r7, #14]
     e82:	4a61      	ldr	r2, [pc, #388]	; (1008 <MW_update+0x2b0>)
     e84:	8812      	ldrh	r2, [r2, #0]
     e86:	b292      	uxth	r2, r2
     e88:	4619      	mov	r1, r3
     e8a:	4860      	ldr	r0, [pc, #384]	; (100c <MW_update+0x2b4>)
     e8c:	f000 fb20 	bl	14d0 <__printf_veneer>
				}
				/* calculate measured time per point */
				double measured_time_per_point = (double)(sweep_period_us)/(mw_sweep_settings.num_steps+1);
     e90:	693b      	ldr	r3, [r7, #16]
     e92:	ee07 3a90 	vmov	s15, r3
     e96:	eeb8 5b67 	vcvt.f64.u32	d5, s15
     e9a:	4b55      	ldr	r3, [pc, #340]	; (ff0 <MW_update+0x298>)
     e9c:	68db      	ldr	r3, [r3, #12]
     e9e:	3301      	adds	r3, #1
     ea0:	ee07 3a90 	vmov	s15, r3
     ea4:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     ea8:	ee85 7b06 	vdiv.f64	d7, d5, d6
     eac:	ed87 7b00 	vstr	d7, [r7]
				printf("measured_time_per_point, %.7g us\r\n", measured_time_per_point);
     eb0:	e9d7 2300 	ldrd	r2, r3, [r7]
     eb4:	4856      	ldr	r0, [pc, #344]	; (1010 <MW_update+0x2b8>)
     eb6:	f000 fb0b 	bl	14d0 <__printf_veneer>
				printf("MW_PROCESSING_TIME static:measured %lu:%lu\r\n",MW_PROCESSING_TIME_US, (uint32_t)(measured_time_per_point - TIMING_MARGIN_US - MW_STABILISE_TIME_US - mw_sweep_settings.dwell_time));
     eba:	f641 71cc 	movw	r1, #8140	; 0x1fcc
     ebe:	eddf 7a55 	vldr	s15, [pc, #340]	; 1014 <MW_update+0x2bc>
     ec2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     ec6:	ed97 6b00 	vldr	d6, [r7]
     eca:	ee36 6b47 	vsub.f64	d6, d6, d7
     ece:	eddf 7a52 	vldr	s15, [pc, #328]	; 1018 <MW_update+0x2c0>
     ed2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     ed6:	ee36 6b47 	vsub.f64	d6, d6, d7
     eda:	4b45      	ldr	r3, [pc, #276]	; (ff0 <MW_update+0x298>)
     edc:	69db      	ldr	r3, [r3, #28]
     ede:	ee07 3a90 	vmov	s15, r3
     ee2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     ee6:	ee36 7b47 	vsub.f64	d7, d6, d7
     eea:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     eee:	ee17 2a90 	vmov	r2, s15
     ef2:	484a      	ldr	r0, [pc, #296]	; (101c <MW_update+0x2c4>)
     ef4:	f000 faec 	bl	14d0 <__printf_veneer>
				if (mw_sweep_settings.sweep_mode == SWEEP_ONCE) {//have reached the end of a single sweep and should stop
     ef8:	4b3d      	ldr	r3, [pc, #244]	; (ff0 <MW_update+0x298>)
     efa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
     efe:	2b02      	cmp	r3, #2
     f00:	d103      	bne.n	f0a <MW_update+0x1b2>
					mw_sweep_settings.state = MW_STOPPED;
     f02:	4b3b      	ldr	r3, [pc, #236]	; (ff0 <MW_update+0x298>)
     f04:	2200      	movs	r2, #0
     f06:	701a      	strb	r2, [r3, #0]
						printf("Failure to program value to DAC \r\n");
						Error_Handler();
					}
				#endif //RAMP_DAC
			}
			break;
     f08:	e069      	b.n	fde <MW_update+0x286>
					start_POP_calibration(false); //check the POP period and restart the next MW sweep without updating mw_sweep_settings.sweep_mode
     f0a:	2000      	movs	r0, #0
     f0c:	f7ff fe9c 	bl	c48 <start_POP_calibration>
			break;
     f10:	e065      	b.n	fde <MW_update+0x286>
				mw_sweep_settings.current_point++; //increment point counter
     f12:	4b37      	ldr	r3, [pc, #220]	; (ff0 <MW_update+0x298>)
     f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     f16:	3301      	adds	r3, #1
     f18:	4a35      	ldr	r2, [pc, #212]	; (ff0 <MW_update+0x298>)
     f1a:	6253      	str	r3, [r2, #36]	; 0x24
				uint32_t local_NFRAC = mw_sweep_settings.NFRAC_start + mw_sweep_settings.step_size * mw_sweep_settings.current_point;
     f1c:	4b34      	ldr	r3, [pc, #208]	; (ff0 <MW_update+0x298>)
     f1e:	689a      	ldr	r2, [r3, #8]
     f20:	4b33      	ldr	r3, [pc, #204]	; (ff0 <MW_update+0x298>)
     f22:	691b      	ldr	r3, [r3, #16]
     f24:	4932      	ldr	r1, [pc, #200]	; (ff0 <MW_update+0x298>)
     f26:	6a49      	ldr	r1, [r1, #36]	; 0x24
     f28:	fb01 f303 	mul.w	r3, r1, r3
     f2c:	4413      	add	r3, r2
     f2e:	617b      	str	r3, [r7, #20]
				set_freq_regs(mw_sweep_settings.NINT, local_NFRAC, mw_sweep_settings.k); //program new MW frequency
     f30:	4b2f      	ldr	r3, [pc, #188]	; (ff0 <MW_update+0x298>)
     f32:	685b      	ldr	r3, [r3, #4]
     f34:	4a2e      	ldr	r2, [pc, #184]	; (ff0 <MW_update+0x298>)
     f36:	7852      	ldrb	r2, [r2, #1]
     f38:	6979      	ldr	r1, [r7, #20]
     f3a:	4618      	mov	r0, r3
     f3c:	f7ff fa74 	bl	428 <set_freq_regs>
				start_timer(MW_TIMER); //Restart timer for MW stabilisation time
     f40:	4b2c      	ldr	r3, [pc, #176]	; (ff4 <MW_update+0x29c>)
     f42:	681b      	ldr	r3, [r3, #0]
     f44:	4618      	mov	r0, r3
     f46:	f000 f97d 	bl	1244 <start_timer>
			break;
     f4a:	e048      	b.n	fde <MW_update+0x286>

		case MW_CALIBRATE: //Measures the elapsed time taken for 20 POP cycles
			if (sample_count >= 20) {//20 or more POP cycles have elapsed
     f4c:	4b2e      	ldr	r3, [pc, #184]	; (1008 <MW_update+0x2b0>)
     f4e:	881b      	ldrh	r3, [r3, #0]
     f50:	b29b      	uxth	r3, r3
     f52:	2b13      	cmp	r3, #19
     f54:	d942      	bls.n	fdc <MW_update+0x284>
				uint32_t total_POP_cal_period = check_timer(MW_TIMER);
     f56:	4b27      	ldr	r3, [pc, #156]	; (ff4 <MW_update+0x29c>)
     f58:	681b      	ldr	r3, [r3, #0]
     f5a:	4618      	mov	r0, r3
     f5c:	f000 f9a2 	bl	12a4 <check_timer>
     f60:	61b8      	str	r0, [r7, #24]
				POP_period_us = (float)(total_POP_cal_period) / 20 + 0.5;
     f62:	69bb      	ldr	r3, [r7, #24]
     f64:	ee07 3a90 	vmov	s15, r3
     f68:	eeb8 7a67 	vcvt.f32.u32	s14, s15
     f6c:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
     f70:	eec7 7a26 	vdiv.f32	s15, s14, s13
     f74:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
     f78:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     f7c:	ee37 7b06 	vadd.f64	d7, d7, d6
     f80:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     f84:	ee17 2a90 	vmov	r2, s15
     f88:	4b25      	ldr	r3, [pc, #148]	; (1020 <MW_update+0x2c8>)
     f8a:	601a      	str	r2, [r3, #0]
				stop_timer(MW_TIMER);
     f8c:	4b19      	ldr	r3, [pc, #100]	; (ff4 <MW_update+0x29c>)
     f8e:	681b      	ldr	r3, [r3, #0]
     f90:	4618      	mov	r0, r3
     f92:	f000 f975 	bl	1280 <stop_timer>
				printf("POP period, averaged over 20 cycles: %lu us\r\n", POP_period_us);
     f96:	4b22      	ldr	r3, [pc, #136]	; (1020 <MW_update+0x2c8>)
     f98:	681b      	ldr	r3, [r3, #0]
     f9a:	4619      	mov	r1, r3
     f9c:	4821      	ldr	r0, [pc, #132]	; (1024 <MW_update+0x2cc>)
     f9e:	f000 fa97 	bl	14d0 <__printf_veneer>
				action_taken = true;
     fa2:	2301      	movs	r3, #1
     fa4:	77fb      	strb	r3, [r7, #31]
				if (mw_sweep_settings.sweep_mode == POP_CAL_ONLY) {//have reached the end of calibration and should stop
     fa6:	4b12      	ldr	r3, [pc, #72]	; (ff0 <MW_update+0x298>)
     fa8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
     fac:	2b01      	cmp	r3, #1
     fae:	d103      	bne.n	fb8 <MW_update+0x260>
					mw_sweep_settings.state = MW_STOPPED;
     fb0:	4b0f      	ldr	r3, [pc, #60]	; (ff0 <MW_update+0x298>)
     fb2:	2200      	movs	r2, #0
     fb4:	701a      	strb	r2, [r3, #0]
				} else {
						start_MW_sweep(false); //start MW_sweep without updating mw_sweep_settings.sweep_mode
				}
			}
			break;
     fb6:	e011      	b.n	fdc <MW_update+0x284>
						start_MW_sweep(false); //start MW_sweep without updating mw_sweep_settings.sweep_mode
     fb8:	2000      	movs	r0, #0
     fba:	f7ff fe75 	bl	ca8 <start_MW_sweep>
			break;
     fbe:	e00d      	b.n	fdc <MW_update+0x284>

		default: // Other state
	       printf("MW_update has detected illegal state: %u \r\n", mw_sweep_settings.state);
     fc0:	4b0b      	ldr	r3, [pc, #44]	; (ff0 <MW_update+0x298>)
     fc2:	781b      	ldrb	r3, [r3, #0]
     fc4:	4619      	mov	r1, r3
     fc6:	4818      	ldr	r0, [pc, #96]	; (1028 <MW_update+0x2d0>)
     fc8:	f000 fa82 	bl	14d0 <__printf_veneer>
	       printf("local version: %u \r\n", local_copy_of_MW_state);
     fcc:	7fbb      	ldrb	r3, [r7, #30]
     fce:	4619      	mov	r1, r3
     fd0:	4816      	ldr	r0, [pc, #88]	; (102c <MW_update+0x2d4>)
     fd2:	f000 fa7d 	bl	14d0 <__printf_veneer>
     fd6:	e002      	b.n	fde <MW_update+0x286>
			break; //no action to take
     fd8:	bf00      	nop
     fda:	e000      	b.n	fde <MW_update+0x286>
			break;
     fdc:	bf00      	nop
	}
    return(action_taken);
     fde:	7ffb      	ldrb	r3, [r7, #31]
}
     fe0:	4618      	mov	r0, r3
     fe2:	3720      	adds	r7, #32
     fe4:	46bd      	mov	sp, r7
     fe6:	bd80      	pop	{r7, pc}
     fe8:	00000000 	.word	0x00000000
     fec:	412e8480 	.word	0x412e8480
     ff0:	20000670 	.word	0x20000670
     ff4:	2000001c 	.word	0x2000001c
     ff8:	58020400 	.word	0x58020400
     ffc:	58021800 	.word	0x58021800
    1000:	20000020 	.word	0x20000020
    1004:	0801ba84 	.word	0x0801ba84
    1008:	2000065e 	.word	0x2000065e
    100c:	0801bab0 	.word	0x0801bab0
    1010:	0801bae4 	.word	0x0801bae4
    1014:	00000064 	.word	0x00000064
    1018:	00001388 	.word	0x00001388
    101c:	0801bb08 	.word	0x0801bb08
    1020:	20000660 	.word	0x20000660
    1024:	0801bb38 	.word	0x0801bb38
    1028:	0801bb68 	.word	0x0801bb68
    102c:	0801bb94 	.word	0x0801bb94

00001030 <MW_frequency_toggle>:
//}

/* Function to check MW settling time
 * Toggles between two MW frequencies
 */
void MW_frequency_toggle (const double f_one, const double f_two) {
    1030:	b580      	push	{r7, lr}
    1032:	b090      	sub	sp, #64	; 0x40
    1034:	af02      	add	r7, sp, #8
    1036:	ed87 0b02 	vstr	d0, [r7, #8]
    103a:	ed87 1b00 	vstr	d1, [r7]
	printf("MW frequency toggling experiment\r\n");
    103e:	486a      	ldr	r0, [pc, #424]	; (11e8 <MW_frequency_toggle+0x1b8>)
    1040:	f000 fa36 	bl	14b0 <__puts_veneer>
	printf("Toggling between %.9g and %.9g GHz\r\n", f_one/1000000000, f_two/1000000000);
    1044:	ed97 7b02 	vldr	d7, [r7, #8]
    1048:	ed9f 6b5f 	vldr	d6, [pc, #380]	; 11c8 <MW_frequency_toggle+0x198>
    104c:	ee87 4b06 	vdiv.f64	d4, d7, d6
    1050:	ed97 6b00 	vldr	d6, [r7]
    1054:	ed9f 5b5c 	vldr	d5, [pc, #368]	; 11c8 <MW_frequency_toggle+0x198>
    1058:	ee86 7b05 	vdiv.f64	d7, d6, d5
    105c:	ed8d 7b00 	vstr	d7, [sp]
    1060:	ec53 2b14 	vmov	r2, r3, d4
    1064:	4861      	ldr	r0, [pc, #388]	; (11ec <MW_frequency_toggle+0x1bc>)
    1066:	f000 fa33 	bl	14d0 <__printf_veneer>

	/* For the k divider we need to find the smallest even integer or use a max of 62*/
	uint32_t k_one = VCO_MAX_FREQ / f_one;
    106a:	ed9f 5b59 	vldr	d5, [pc, #356]	; 11d0 <MW_frequency_toggle+0x1a0>
    106e:	ed97 6b02 	vldr	d6, [r7, #8]
    1072:	ee85 7b06 	vdiv.f64	d7, d5, d6
    1076:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    107a:	ee17 3a90 	vmov	r3, s15
    107e:	637b      	str	r3, [r7, #52]	; 0x34
	if (k_one != 1) {
    1080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1082:	2b01      	cmp	r3, #1
    1084:	d00b      	beq.n	109e <MW_frequency_toggle+0x6e>
		while (k_one > 62 || k_one % 2) {
    1086:	e002      	b.n	108e <MW_frequency_toggle+0x5e>
			k_one--;
    1088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    108a:	3b01      	subs	r3, #1
    108c:	637b      	str	r3, [r7, #52]	; 0x34
		while (k_one > 62 || k_one % 2) {
    108e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1090:	2b3e      	cmp	r3, #62	; 0x3e
    1092:	d8f9      	bhi.n	1088 <MW_frequency_toggle+0x58>
    1094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1096:	f003 0301 	and.w	r3, r3, #1
    109a:	2b00      	cmp	r3, #0
    109c:	d1f4      	bne.n	1088 <MW_frequency_toggle+0x58>
		}
	}
	uint32_t k_two = VCO_MAX_FREQ / f_two;
    109e:	ed9f 5b4c 	vldr	d5, [pc, #304]	; 11d0 <MW_frequency_toggle+0x1a0>
    10a2:	ed97 6b00 	vldr	d6, [r7]
    10a6:	ee85 7b06 	vdiv.f64	d7, d5, d6
    10aa:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    10ae:	ee17 3a90 	vmov	r3, s15
    10b2:	633b      	str	r3, [r7, #48]	; 0x30
	if (k_two != 1) {
    10b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    10b6:	2b01      	cmp	r3, #1
    10b8:	d00b      	beq.n	10d2 <MW_frequency_toggle+0xa2>
		while (k_two > 62 || k_two % 2) {
    10ba:	e002      	b.n	10c2 <MW_frequency_toggle+0x92>
			k_two--;
    10bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    10be:	3b01      	subs	r3, #1
    10c0:	633b      	str	r3, [r7, #48]	; 0x30
		while (k_two > 62 || k_two % 2) {
    10c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    10c4:	2b3e      	cmp	r3, #62	; 0x3e
    10c6:	d8f9      	bhi.n	10bc <MW_frequency_toggle+0x8c>
    10c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    10ca:	f003 0301 	and.w	r3, r3, #1
    10ce:	2b00      	cmp	r3, #0
    10d0:	d1f4      	bne.n	10bc <MW_frequency_toggle+0x8c>
		}
	}

	const double N_one = ((f_one * k_one) / REF_FREQ);
    10d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    10d4:	ee07 3a90 	vmov	s15, r3
    10d8:	eeb8 6b67 	vcvt.f64.u32	d6, s15
    10dc:	ed97 7b02 	vldr	d7, [r7, #8]
    10e0:	ee26 6b07 	vmul.f64	d6, d6, d7
    10e4:	ed9f 5b3c 	vldr	d5, [pc, #240]	; 11d8 <MW_frequency_toggle+0x1a8>
    10e8:	ee86 7b05 	vdiv.f64	d7, d6, d5
    10ec:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	const double N_two = ((f_two * k_two) / REF_FREQ);
    10f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    10f2:	ee07 3a90 	vmov	s15, r3
    10f6:	eeb8 6b67 	vcvt.f64.u32	d6, s15
    10fa:	ed97 7b00 	vldr	d7, [r7]
    10fe:	ee26 6b07 	vmul.f64	d6, d6, d7
    1102:	ed9f 5b35 	vldr	d5, [pc, #212]	; 11d8 <MW_frequency_toggle+0x1a8>
    1106:	ee86 7b05 	vdiv.f64	d7, d6, d5
    110a:	ed87 7b08 	vstr	d7, [r7, #32]

	/* Extract the fractional and integer parts */
	const uint32_t N_one_INT = N_one;
    110e:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
    1112:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1116:	ee17 3a90 	vmov	r3, s15
    111a:	61fb      	str	r3, [r7, #28]
	const uint32_t N_one_FRAC = ((N_one - N_one_INT) * (1 << 24)) + 0.5;
    111c:	69fb      	ldr	r3, [r7, #28]
    111e:	ee07 3a90 	vmov	s15, r3
    1122:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    1126:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
    112a:	ee36 7b47 	vsub.f64	d7, d6, d7
    112e:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 11e0 <MW_frequency_toggle+0x1b0>
    1132:	ee27 7b06 	vmul.f64	d7, d7, d6
    1136:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    113a:	ee37 7b06 	vadd.f64	d7, d7, d6
    113e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1142:	ee17 3a90 	vmov	r3, s15
    1146:	61bb      	str	r3, [r7, #24]
	const uint32_t N_two_INT = N_two;
    1148:	ed97 7b08 	vldr	d7, [r7, #32]
    114c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1150:	ee17 3a90 	vmov	r3, s15
    1154:	617b      	str	r3, [r7, #20]
	const uint32_t N_two_FRAC = ((N_two - N_two_INT) * (1 << 24)) + 0.5;
    1156:	697b      	ldr	r3, [r7, #20]
    1158:	ee07 3a90 	vmov	s15, r3
    115c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    1160:	ed97 6b08 	vldr	d6, [r7, #32]
    1164:	ee36 7b47 	vsub.f64	d7, d6, d7
    1168:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 11e0 <MW_frequency_toggle+0x1b0>
    116c:	ee27 7b06 	vmul.f64	d7, d7, d6
    1170:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    1174:	ee37 7b06 	vadd.f64	d7, d7, d6
    1178:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    117c:	ee17 3a90 	vmov	r3, s15
    1180:	613b      	str	r3, [r7, #16]

	while (1) {
//	set_frequency(N_one_INT, N_one_FRAC, k_one, MANUAL_MUTE); //Program necessary values for f_one
	set_freq_regs(N_one_INT, N_one_FRAC, k_one); //Program necessary values for f_one
    1182:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    1184:	69b9      	ldr	r1, [r7, #24]
    1186:	69f8      	ldr	r0, [r7, #28]
    1188:	f7ff f94e 	bl	428 <set_freq_regs>
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET); // Sets trigger output low
    118c:	2200      	movs	r2, #0
    118e:	2101      	movs	r1, #1
    1190:	4817      	ldr	r0, [pc, #92]	; (11f0 <MW_frequency_toggle+0x1c0>)
    1192:	f000 f989 	bl	14a8 <__HAL_GPIO_WritePin_veneer>
	timer_delay(SLOW_TIMER, 1000); //100ms delay
    1196:	4b17      	ldr	r3, [pc, #92]	; (11f4 <MW_frequency_toggle+0x1c4>)
    1198:	681b      	ldr	r3, [r3, #0]
    119a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    119e:	4618      	mov	r0, r3
    11a0:	f000 f88c 	bl	12bc <timer_delay>
//	set_frequency(N_two_INT, N_two_FRAC, k_two, MANUAL_MUTE); //Program necessary values for f_two
	set_freq_regs(N_two_INT, N_two_FRAC, k_two); //Program necessary values for f_two
    11a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    11a6:	6939      	ldr	r1, [r7, #16]
    11a8:	6978      	ldr	r0, [r7, #20]
    11aa:	f7ff f93d 	bl	428 <set_freq_regs>
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
    11ae:	2201      	movs	r2, #1
    11b0:	2101      	movs	r1, #1
    11b2:	480f      	ldr	r0, [pc, #60]	; (11f0 <MW_frequency_toggle+0x1c0>)
    11b4:	f000 f978 	bl	14a8 <__HAL_GPIO_WritePin_veneer>
	timer_delay(SLOW_TIMER, 1000); //100ms delay
    11b8:	4b0e      	ldr	r3, [pc, #56]	; (11f4 <MW_frequency_toggle+0x1c4>)
    11ba:	681b      	ldr	r3, [r3, #0]
    11bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    11c0:	4618      	mov	r0, r3
    11c2:	f000 f87b 	bl	12bc <timer_delay>
	set_freq_regs(N_one_INT, N_one_FRAC, k_one); //Program necessary values for f_one
    11c6:	e7dc      	b.n	1182 <MW_frequency_toggle+0x152>
    11c8:	00000000 	.word	0x00000000
    11cc:	41cdcd65 	.word	0x41cdcd65
    11d0:	20000000 	.word	0x20000000
    11d4:	41ee8c21 	.word	0x41ee8c21
    11d8:	00000000 	.word	0x00000000
    11dc:	4187d784 	.word	0x4187d784
    11e0:	00000000 	.word	0x00000000
    11e4:	41700000 	.word	0x41700000
    11e8:	0801bbac 	.word	0x0801bbac
    11ec:	0801bbd0 	.word	0x0801bbd0
    11f0:	58021800 	.word	0x58021800
    11f4:	20000018 	.word	0x20000018

000011f8 <set_SDO_output>:
/* Selects SDO pin connectivity/functionality
 * By default, the SDO pin will output 'Lock detect' but can be connected
 * to other internal signals. See table 2.15 of HMC835 datasheet (v04.1113)
 * for more details all options
 */
 void set_SDO_output(const uint32_t GPO_setting) {
    11f8:	b580      	push	{r7, lr}
    11fa:	b084      	sub	sp, #16
    11fc:	af00      	add	r7, sp, #0
    11fe:	6078      	str	r0, [r7, #4]
	//Default output on SDO pin is 'Lock detect output', value 0x01
	//VCO divider is 0x0A
	//See table 2.15 of HMC835 datasheet for more details (v04.1113)
	uint32_t read_data = 0x0;
    1200:	2300      	movs	r3, #0
    1202:	60fb      	str	r3, [r7, #12]

	if (GPO_setting > 31) {
    1204:	687b      	ldr	r3, [r7, #4]
    1206:	2b1f      	cmp	r3, #31
    1208:	d904      	bls.n	1214 <set_SDO_output+0x1c>
		printf("SDO pin value must be less that 32\r\n");
    120a:	480d      	ldr	r0, [pc, #52]	; (1240 <set_SDO_output+0x48>)
    120c:	f000 f950 	bl	14b0 <__puts_veneer>
		Error_Handler();
    1210:	f000 f946 	bl	14a0 <__Error_Handler_veneer>
	}
	read_data = synth_readreg(GPO_REGISTER); // Get the current value.
    1214:	200f      	movs	r0, #15
    1216:	f7fe ff6d 	bl	f4 <synth_readreg>
    121a:	60f8      	str	r0, [r7, #12]
	read_data &= 0xFFFFFFE0; // Zero the first 5 LSBs.
    121c:	68fb      	ldr	r3, [r7, #12]
    121e:	f023 031f 	bic.w	r3, r3, #31
    1222:	60fb      	str	r3, [r7, #12]
	//read_data |= 0x0A; //Select VCO divider output
	read_data |= GPO_setting; //Select GPO output dependent on function input value
    1224:	68fa      	ldr	r2, [r7, #12]
    1226:	687b      	ldr	r3, [r7, #4]
    1228:	4313      	orrs	r3, r2
    122a:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, GPO_REGISTER, 0x0, VERIFY); // Update the GPO register.
    122c:	2301      	movs	r3, #1
    122e:	2200      	movs	r2, #0
    1230:	210f      	movs	r1, #15
    1232:	68f8      	ldr	r0, [r7, #12]
    1234:	f7fe fee4 	bl	0 <synth_writereg>
}
    1238:	bf00      	nop
    123a:	3710      	adds	r7, #16
    123c:	46bd      	mov	sp, r7
    123e:	bd80      	pop	{r7, pc}
    1240:	0801bbf8 	.word	0x0801bbf8

00001244 <start_timer>:

/**
  * @brief  Starts a timer.
  * @retval uint32_t
  */
uint32_t start_timer(TIM_TypeDef * timer) {
    1244:	b480      	push	{r7}
    1246:	b083      	sub	sp, #12
    1248:	af00      	add	r7, sp, #0
    124a:	6078      	str	r0, [r7, #4]

	timer->CR1 &= ~(TIM_CR1_CEN);
    124c:	687b      	ldr	r3, [r7, #4]
    124e:	681b      	ldr	r3, [r3, #0]
    1250:	f023 0201 	bic.w	r2, r3, #1
    1254:	687b      	ldr	r3, [r7, #4]
    1256:	601a      	str	r2, [r3, #0]
	timer->EGR |= TIM_EGR_UG;  // Reset CNT and PSC
    1258:	687b      	ldr	r3, [r7, #4]
    125a:	695b      	ldr	r3, [r3, #20]
    125c:	f043 0201 	orr.w	r2, r3, #1
    1260:	687b      	ldr	r3, [r7, #4]
    1262:	615a      	str	r2, [r3, #20]
	timer->CR1 |= TIM_CR1_CEN;
    1264:	687b      	ldr	r3, [r7, #4]
    1266:	681b      	ldr	r3, [r3, #0]
    1268:	f043 0201 	orr.w	r2, r3, #1
    126c:	687b      	ldr	r3, [r7, #4]
    126e:	601a      	str	r2, [r3, #0]
	//printf("Started timer with returned CNT value: %ld \r\n", timer->CNT);
	return timer->CNT;
    1270:	687b      	ldr	r3, [r7, #4]
    1272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    1274:	4618      	mov	r0, r3
    1276:	370c      	adds	r7, #12
    1278:	46bd      	mov	sp, r7
    127a:	f85d 7b04 	ldr.w	r7, [sp], #4
    127e:	4770      	bx	lr

00001280 <stop_timer>:

/**
  * @brief  Stops a timer.
  * @retval uint32_t
  */
uint32_t stop_timer(TIM_TypeDef *timer) {
    1280:	b480      	push	{r7}
    1282:	b083      	sub	sp, #12
    1284:	af00      	add	r7, sp, #0
    1286:	6078      	str	r0, [r7, #4]

	timer->CR1 &= ~(TIM_CR1_CEN);
    1288:	687b      	ldr	r3, [r7, #4]
    128a:	681b      	ldr	r3, [r3, #0]
    128c:	f023 0201 	bic.w	r2, r3, #1
    1290:	687b      	ldr	r3, [r7, #4]
    1292:	601a      	str	r2, [r3, #0]
	return timer->CNT;
    1294:	687b      	ldr	r3, [r7, #4]
    1296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    1298:	4618      	mov	r0, r3
    129a:	370c      	adds	r7, #12
    129c:	46bd      	mov	sp, r7
    129e:	f85d 7b04 	ldr.w	r7, [sp], #4
    12a2:	4770      	bx	lr

000012a4 <check_timer>:
/**
  * @brief  Returns timer counter value
  * @param  Timer
  * @retval Counter value
  */
uint32_t check_timer(TIM_TypeDef *timer) {
    12a4:	b480      	push	{r7}
    12a6:	b083      	sub	sp, #12
    12a8:	af00      	add	r7, sp, #0
    12aa:	6078      	str	r0, [r7, #4]

	return timer->CNT;
    12ac:	687b      	ldr	r3, [r7, #4]
    12ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    12b0:	4618      	mov	r0, r3
    12b2:	370c      	adds	r7, #12
    12b4:	46bd      	mov	sp, r7
    12b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    12ba:	4770      	bx	lr

000012bc <timer_delay>:

/**
  * @brief  Uses a H/W timer to loop for the cycle count requested.
  */
void timer_delay(TIM_TypeDef *timer, const uint32_t delay_count){
    12bc:	b580      	push	{r7, lr}
    12be:	b084      	sub	sp, #16
    12c0:	af00      	add	r7, sp, #0
    12c2:	6078      	str	r0, [r7, #4]
    12c4:	6039      	str	r1, [r7, #0]
	/* Note that we don't consider overflow.
	 * FAST_TIMER will take approximately 65 ms to overflow.
	 * SLOW_TIMER will take 650ms
	 * MW_TIMER and SWEEP_TIMER will take 71 minutes */

	uint32_t start = start_timer(timer);
    12c6:	6878      	ldr	r0, [r7, #4]
    12c8:	f7ff ffbc 	bl	1244 <start_timer>
    12cc:	60f8      	str	r0, [r7, #12]
//	timer->EGR |= TIM_EGR_UG;  // Reset CNT and PSC
//	timer->CR1 |= TIM_CR1_CEN; // Enable the timer
//	uint32_t start = timer->CNT; // Get the start value of the timer

//	while((timer->CNT - start) < delay_count){} // Loop until delay_us has expired
	while(timer->CNT < delay_count){} // Loop until delay_us has expired
    12ce:	bf00      	nop
    12d0:	687b      	ldr	r3, [r7, #4]
    12d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    12d4:	683a      	ldr	r2, [r7, #0]
    12d6:	429a      	cmp	r2, r3
    12d8:	d8fa      	bhi.n	12d0 <timer_delay+0x14>

	stop_timer(timer);
    12da:	6878      	ldr	r0, [r7, #4]
    12dc:	f7ff ffd0 	bl	1280 <stop_timer>
//	timer->CR1 &= ~(TIM_CR1_CEN); // Disable the timer

}
    12e0:	bf00      	nop
    12e2:	3710      	adds	r7, #16
    12e4:	46bd      	mov	sp, r7
    12e6:	bd80      	pop	{r7, pc}

000012e8 <measure_POP_cycle>:
/**
  * @brief  Returns the measured period of a POP cycle as averaged over 20 cycles
  * @param  None
  * @retval Period expressed as an integer number of microseconds
  */
uint32_t measure_POP_cycle(void){
    12e8:	b580      	push	{r7, lr}
    12ea:	b086      	sub	sp, #24
    12ec:	af00      	add	r7, sp, #0

	/* Measures the elapsed time taken for 20 POP cycles
	 * Relies on the ADC value changing every time a sample is taken
	 * ADC must be initialised before running
	 */
	uint32_t adc_value = 0;
    12ee:	2300      	movs	r3, #0
    12f0:	617b      	str	r3, [r7, #20]
	uint32_t last_adc_value = 9999;
    12f2:	f242 730f 	movw	r3, #9999	; 0x270f
    12f6:	613b      	str	r3, [r7, #16]
	uint8_t cycle_count = 0;
    12f8:	2300      	movs	r3, #0
    12fa:	73fb      	strb	r3, [r7, #15]
	uint32_t period;
	const uint8_t iterations = 20;
    12fc:	2314      	movs	r3, #20
    12fe:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); 	//Sets MW_invalid pin high to reset POP cycle
    1300:	2201      	movs	r2, #1
    1302:	2102      	movs	r1, #2
    1304:	4826      	ldr	r0, [pc, #152]	; (13a0 <measure_POP_cycle+0xb8>)
    1306:	f000 f8cf 	bl	14a8 <__HAL_GPIO_WritePin_veneer>
	start_timer(MW_TIMER); //reset MW_timer and start counting
    130a:	4b26      	ldr	r3, [pc, #152]	; (13a4 <measure_POP_cycle+0xbc>)
    130c:	681b      	ldr	r3, [r3, #0]
    130e:	4618      	mov	r0, r3
    1310:	f7ff ff98 	bl	1244 <start_timer>
	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); //Start POP cycle
    1314:	2200      	movs	r2, #0
    1316:	2102      	movs	r1, #2
    1318:	4821      	ldr	r0, [pc, #132]	; (13a0 <measure_POP_cycle+0xb8>)
    131a:	f000 f8c5 	bl	14a8 <__HAL_GPIO_WritePin_veneer>

	// get the ADC conversion value
	adc_value = HAL_ADC_GetValue(&hadc3);
    131e:	4822      	ldr	r0, [pc, #136]	; (13a8 <measure_POP_cycle+0xc0>)
    1320:	f000 f8ae 	bl	1480 <__HAL_ADC_GetValue_veneer>
    1324:	6178      	str	r0, [r7, #20]
	while (cycle_count < iterations) {
    1326:	e00c      	b.n	1342 <measure_POP_cycle+0x5a>
		while (adc_value == last_adc_value) {
			adc_value = HAL_ADC_GetValue(&hadc3); //keep reading ADC until value changes
    1328:	481f      	ldr	r0, [pc, #124]	; (13a8 <measure_POP_cycle+0xc0>)
    132a:	f000 f8a9 	bl	1480 <__HAL_ADC_GetValue_veneer>
    132e:	6178      	str	r0, [r7, #20]
		while (adc_value == last_adc_value) {
    1330:	697a      	ldr	r2, [r7, #20]
    1332:	693b      	ldr	r3, [r7, #16]
    1334:	429a      	cmp	r2, r3
    1336:	d0f7      	beq.n	1328 <measure_POP_cycle+0x40>
		}
		last_adc_value = adc_value;
    1338:	697b      	ldr	r3, [r7, #20]
    133a:	613b      	str	r3, [r7, #16]
		cycle_count++;
    133c:	7bfb      	ldrb	r3, [r7, #15]
    133e:	3301      	adds	r3, #1
    1340:	73fb      	strb	r3, [r7, #15]
	while (cycle_count < iterations) {
    1342:	7bfa      	ldrb	r2, [r7, #15]
    1344:	7bbb      	ldrb	r3, [r7, #14]
    1346:	429a      	cmp	r2, r3
    1348:	d3f2      	bcc.n	1330 <measure_POP_cycle+0x48>
	}

	uint32_t total_period = check_timer(MW_TIMER);
    134a:	4b16      	ldr	r3, [pc, #88]	; (13a4 <measure_POP_cycle+0xbc>)
    134c:	681b      	ldr	r3, [r3, #0]
    134e:	4618      	mov	r0, r3
    1350:	f7ff ffa8 	bl	12a4 <check_timer>
    1354:	60b8      	str	r0, [r7, #8]
	period = (float)(check_timer(MW_TIMER)) / iterations + 0.5;
    1356:	4b13      	ldr	r3, [pc, #76]	; (13a4 <measure_POP_cycle+0xbc>)
    1358:	681b      	ldr	r3, [r3, #0]
    135a:	4618      	mov	r0, r3
    135c:	f7ff ffa2 	bl	12a4 <check_timer>
    1360:	ee07 0a90 	vmov	s15, r0
    1364:	eef8 6a67 	vcvt.f32.u32	s13, s15
    1368:	7bbb      	ldrb	r3, [r7, #14]
    136a:	ee07 3a90 	vmov	s15, r3
    136e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    1372:	eec6 7a87 	vdiv.f32	s15, s13, s14
    1376:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
    137a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    137e:	ee37 7b06 	vadd.f64	d7, d7, d6
    1382:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1386:	ee17 3a90 	vmov	r3, s15
    138a:	607b      	str	r3, [r7, #4]
	stop_timer(MW_TIMER);
    138c:	4b05      	ldr	r3, [pc, #20]	; (13a4 <measure_POP_cycle+0xbc>)
    138e:	681b      	ldr	r3, [r3, #0]
    1390:	4618      	mov	r0, r3
    1392:	f7ff ff75 	bl	1280 <stop_timer>
	#ifdef TIMER_VERBOSE
		printf("Time for %u POP cycles: %lu us\r\n", iterations, total_period);
		printf("POP period: %lu us\r\n", period);
	#endif //TIMER_VERBOSE
	return (period);
    1396:	687b      	ldr	r3, [r7, #4]

}
    1398:	4618      	mov	r0, r3
    139a:	3718      	adds	r7, #24
    139c:	46bd      	mov	sp, r7
    139e:	bd80      	pop	{r7, pc}
    13a0:	58020400 	.word	0x58020400
    13a4:	2000001c 	.word	0x2000001c
    13a8:	2000030c 	.word	0x2000030c

000013ac <start_pop>:

	printf("POP cycle stopped!\r\n");

}

void start_pop() {
    13ac:	b580      	push	{r7, lr}
    13ae:	af00      	add	r7, sp, #0

	/* Timer A is the LASER enable, Timer E is the microwave pulse */
	if (HAL_HRTIM_WaveformOutputStart(&hhrtim,
    13b0:	f240 1103 	movw	r1, #259	; 0x103
    13b4:	480f      	ldr	r0, [pc, #60]	; (13f4 <start_pop+0x48>)
    13b6:	f000 f883 	bl	14c0 <__HAL_HRTIM_WaveformOutputStart_veneer>
    13ba:	4603      	mov	r3, r0
    13bc:	2b00      	cmp	r3, #0
    13be:	d004      	beq.n	13ca <start_pop+0x1e>
	HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TE1) != HAL_OK) {
		printf("Failed to start POP!\r\n");
    13c0:	480d      	ldr	r0, [pc, #52]	; (13f8 <start_pop+0x4c>)
    13c2:	f000 f875 	bl	14b0 <__puts_veneer>
		Error_Handler();
    13c6:	f000 f86b 	bl	14a0 <__Error_Handler_veneer>
		Error_Handler();
	}

#endif

	if (HAL_HRTIM_WaveformCounterStart_IT(&hhrtim,
    13ca:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
    13ce:	4809      	ldr	r0, [pc, #36]	; (13f4 <start_pop+0x48>)
    13d0:	f000 f882 	bl	14d8 <__HAL_HRTIM_WaveformCountStart_IT_veneer>
    13d4:	4603      	mov	r3, r0
    13d6:	2b00      	cmp	r3, #0
    13d8:	d004      	beq.n	13e4 <start_pop+0x38>
	HRTIM_TIMERID_TIMER_A | HRTIM_TIMERID_TIMER_E) != HAL_OK) {
		printf("POP failure point E!\r\n");
    13da:	4808      	ldr	r0, [pc, #32]	; (13fc <start_pop+0x50>)
    13dc:	f000 f868 	bl	14b0 <__puts_veneer>
		Error_Handler();
    13e0:	f000 f85e 	bl	14a0 <__Error_Handler_veneer>
	}

	pop_running = true;
    13e4:	4b06      	ldr	r3, [pc, #24]	; (1400 <start_pop+0x54>)
    13e6:	2201      	movs	r2, #1
    13e8:	701a      	strb	r2, [r3, #0]

	printf("POP cycle running!\r\n");
    13ea:	4806      	ldr	r0, [pc, #24]	; (1404 <start_pop+0x58>)
    13ec:	f000 f860 	bl	14b0 <__puts_veneer>

}
    13f0:	bf00      	nop
    13f2:	bd80      	pop	{r7, pc}
    13f4:	20000384 	.word	0x20000384
    13f8:	0801bc38 	.word	0x0801bc38
    13fc:	0801bc50 	.word	0x0801bc50
    1400:	200006c0 	.word	0x200006c0
    1404:	0801bc68 	.word	0x0801bc68

00001408 <stop_pop>:
void stop_pop() {
    1408:	b580      	push	{r7, lr}
    140a:	af00      	add	r7, sp, #0
	if (HAL_HRTIM_WaveformOutputStop(&hhrtim,
    140c:	f240 1103 	movw	r1, #259	; 0x103
    1410:	4813      	ldr	r0, [pc, #76]	; (1460 <stop_pop+0x58>)
    1412:	f000 f839 	bl	1488 <__HAL_HRTIM_WaveformOutputStop_veneer>
    1416:	4603      	mov	r3, r0
    1418:	2b00      	cmp	r3, #0
    141a:	d004      	beq.n	1426 <stop_pop+0x1e>
		printf("POP failure point A!\r\n");
    141c:	4811      	ldr	r0, [pc, #68]	; (1464 <stop_pop+0x5c>)
    141e:	f000 f847 	bl	14b0 <__puts_veneer>
		Error_Handler();
    1422:	f000 f83d 	bl	14a0 <__Error_Handler_veneer>
	if (HAL_HRTIM_WaveformCounterStop_IT(&hhrtim,
    1426:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
    142a:	480d      	ldr	r0, [pc, #52]	; (1460 <stop_pop+0x58>)
    142c:	f000 f844 	bl	14b8 <__HAL_HRTIM_WaveformCountStop_IT_veneer>
    1430:	4603      	mov	r3, r0
    1432:	2b00      	cmp	r3, #0
    1434:	d004      	beq.n	1440 <stop_pop+0x38>
		printf("POP failure point B!\r\n");
    1436:	480c      	ldr	r0, [pc, #48]	; (1468 <stop_pop+0x60>)
    1438:	f000 f83a 	bl	14b0 <__puts_veneer>
		Error_Handler();
    143c:	f000 f830 	bl	14a0 <__Error_Handler_veneer>
	pop_cycle_count = 0;
    1440:	4b0a      	ldr	r3, [pc, #40]	; (146c <stop_pop+0x64>)
    1442:	2200      	movs	r2, #0
    1444:	601a      	str	r2, [r3, #0]
	pop_running = false;
    1446:	4b0a      	ldr	r3, [pc, #40]	; (1470 <stop_pop+0x68>)
    1448:	2200      	movs	r2, #0
    144a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0); //turn off amber LED
    144c:	2200      	movs	r2, #0
    144e:	2102      	movs	r1, #2
    1450:	4808      	ldr	r0, [pc, #32]	; (1474 <stop_pop+0x6c>)
    1452:	f000 f829 	bl	14a8 <__HAL_GPIO_WritePin_veneer>
	printf("POP cycle stopped!\r\n");
    1456:	4808      	ldr	r0, [pc, #32]	; (1478 <stop_pop+0x70>)
    1458:	f000 f82a 	bl	14b0 <__puts_veneer>
}
    145c:	bf00      	nop
    145e:	bd80      	pop	{r7, pc}
    1460:	20000384 	.word	0x20000384
    1464:	0801bc7c 	.word	0x0801bc7c
    1468:	0801bc94 	.word	0x0801bc94
    146c:	200006bc 	.word	0x200006bc
    1470:	200006c0 	.word	0x200006c0
    1474:	58021000 	.word	0x58021000
    1478:	0801bcac 	.word	0x0801bcac
    147c:	00000000 	.word	0x00000000

00001480 <__HAL_ADC_GetValue_veneer>:
    1480:	f85f f000 	ldr.w	pc, [pc]	; 1484 <__HAL_ADC_GetValue_veneer+0x4>
    1484:	0800439d 	.word	0x0800439d

00001488 <__HAL_HRTIM_WaveformOutputStop_veneer>:
    1488:	f85f f000 	ldr.w	pc, [pc]	; 148c <__HAL_HRTIM_WaveformOutputStop_veneer+0x4>
    148c:	08007ae9 	.word	0x08007ae9

00001490 <__HAL_GPIO_TogglePin_veneer>:
    1490:	f85f f000 	ldr.w	pc, [pc]	; 1494 <__HAL_GPIO_TogglePin_veneer+0x4>
    1494:	080073ff 	.word	0x080073ff

00001498 <__HAL_Delay_veneer>:
    1498:	f85f f000 	ldr.w	pc, [pc]	; 149c <__HAL_Delay_veneer+0x4>
    149c:	080038f1 	.word	0x080038f1

000014a0 <__Error_Handler_veneer>:
    14a0:	f85f f000 	ldr.w	pc, [pc]	; 14a4 <__Error_Handler_veneer+0x4>
    14a4:	08002aa9 	.word	0x08002aa9

000014a8 <__HAL_GPIO_WritePin_veneer>:
    14a8:	f85f f000 	ldr.w	pc, [pc]	; 14ac <__HAL_GPIO_WritePin_veneer+0x4>
    14ac:	080073cd 	.word	0x080073cd

000014b0 <__puts_veneer>:
    14b0:	f85f f000 	ldr.w	pc, [pc]	; 14b4 <__puts_veneer+0x4>
    14b4:	08019609 	.word	0x08019609

000014b8 <__HAL_HRTIM_WaveformCountStop_IT_veneer>:
    14b8:	f85f f000 	ldr.w	pc, [pc]	; 14bc <__HAL_HRTIM_WaveformCountStop_IT_veneer+0x4>
    14bc:	08007c25 	.word	0x08007c25

000014c0 <__HAL_HRTIM_WaveformOutputStart_veneer>:
    14c0:	f85f f000 	ldr.w	pc, [pc]	; 14c4 <__HAL_HRTIM_WaveformOutputStart_veneer+0x4>
    14c4:	08007a8f 	.word	0x08007a8f

000014c8 <__HAL_GPIO_ReadPin_veneer>:
    14c8:	f85f f000 	ldr.w	pc, [pc]	; 14cc <__HAL_GPIO_ReadPin_veneer+0x4>
    14cc:	0800739d 	.word	0x0800739d

000014d0 <__printf_veneer>:
    14d0:	f85f f000 	ldr.w	pc, [pc]	; 14d4 <__printf_veneer+0x4>
    14d4:	0801953d 	.word	0x0801953d

000014d8 <__HAL_HRTIM_WaveformCountStart_IT_veneer>:
    14d8:	f85f f000 	ldr.w	pc, [pc]	; 14dc <__HAL_HRTIM_WaveformCountStart_IT_veneer+0x4>
    14dc:	08007b45 	.word	0x08007b45

Disassembly of section .text:

08001780 <__do_global_dtors_aux>:
 8001780:	b510      	push	{r4, lr}
 8001782:	4c05      	ldr	r4, [pc, #20]	; (8001798 <__do_global_dtors_aux+0x18>)
 8001784:	7823      	ldrb	r3, [r4, #0]
 8001786:	b933      	cbnz	r3, 8001796 <__do_global_dtors_aux+0x16>
 8001788:	4b04      	ldr	r3, [pc, #16]	; (800179c <__do_global_dtors_aux+0x1c>)
 800178a:	b113      	cbz	r3, 8001792 <__do_global_dtors_aux+0x12>
 800178c:	4804      	ldr	r0, [pc, #16]	; (80017a0 <__do_global_dtors_aux+0x20>)
 800178e:	f3af 8000 	nop.w
 8001792:	2301      	movs	r3, #1
 8001794:	7023      	strb	r3, [r4, #0]
 8001796:	bd10      	pop	{r4, pc}
 8001798:	200002f0 	.word	0x200002f0
 800179c:	00000000 	.word	0x00000000
 80017a0:	0801b440 	.word	0x0801b440

080017a4 <frame_dummy>:
 80017a4:	b508      	push	{r3, lr}
 80017a6:	4b03      	ldr	r3, [pc, #12]	; (80017b4 <frame_dummy+0x10>)
 80017a8:	b11b      	cbz	r3, 80017b2 <frame_dummy+0xe>
 80017aa:	4903      	ldr	r1, [pc, #12]	; (80017b8 <frame_dummy+0x14>)
 80017ac:	4803      	ldr	r0, [pc, #12]	; (80017bc <frame_dummy+0x18>)
 80017ae:	f3af 8000 	nop.w
 80017b2:	bd08      	pop	{r3, pc}
 80017b4:	00000000 	.word	0x00000000
 80017b8:	200002f4 	.word	0x200002f4
 80017bc:	0801b440 	.word	0x0801b440

080017c0 <memchr>:
 80017c0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80017c4:	2a10      	cmp	r2, #16
 80017c6:	db2b      	blt.n	8001820 <memchr+0x60>
 80017c8:	f010 0f07 	tst.w	r0, #7
 80017cc:	d008      	beq.n	80017e0 <memchr+0x20>
 80017ce:	f810 3b01 	ldrb.w	r3, [r0], #1
 80017d2:	3a01      	subs	r2, #1
 80017d4:	428b      	cmp	r3, r1
 80017d6:	d02d      	beq.n	8001834 <memchr+0x74>
 80017d8:	f010 0f07 	tst.w	r0, #7
 80017dc:	b342      	cbz	r2, 8001830 <memchr+0x70>
 80017de:	d1f6      	bne.n	80017ce <memchr+0xe>
 80017e0:	b4f0      	push	{r4, r5, r6, r7}
 80017e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80017e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80017ea:	f022 0407 	bic.w	r4, r2, #7
 80017ee:	f07f 0700 	mvns.w	r7, #0
 80017f2:	2300      	movs	r3, #0
 80017f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80017f8:	3c08      	subs	r4, #8
 80017fa:	ea85 0501 	eor.w	r5, r5, r1
 80017fe:	ea86 0601 	eor.w	r6, r6, r1
 8001802:	fa85 f547 	uadd8	r5, r5, r7
 8001806:	faa3 f587 	sel	r5, r3, r7
 800180a:	fa86 f647 	uadd8	r6, r6, r7
 800180e:	faa5 f687 	sel	r6, r5, r7
 8001812:	b98e      	cbnz	r6, 8001838 <memchr+0x78>
 8001814:	d1ee      	bne.n	80017f4 <memchr+0x34>
 8001816:	bcf0      	pop	{r4, r5, r6, r7}
 8001818:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800181c:	f002 0207 	and.w	r2, r2, #7
 8001820:	b132      	cbz	r2, 8001830 <memchr+0x70>
 8001822:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001826:	3a01      	subs	r2, #1
 8001828:	ea83 0301 	eor.w	r3, r3, r1
 800182c:	b113      	cbz	r3, 8001834 <memchr+0x74>
 800182e:	d1f8      	bne.n	8001822 <memchr+0x62>
 8001830:	2000      	movs	r0, #0
 8001832:	4770      	bx	lr
 8001834:	3801      	subs	r0, #1
 8001836:	4770      	bx	lr
 8001838:	2d00      	cmp	r5, #0
 800183a:	bf06      	itte	eq
 800183c:	4635      	moveq	r5, r6
 800183e:	3803      	subeq	r0, #3
 8001840:	3807      	subne	r0, #7
 8001842:	f015 0f01 	tst.w	r5, #1
 8001846:	d107      	bne.n	8001858 <memchr+0x98>
 8001848:	3001      	adds	r0, #1
 800184a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800184e:	bf02      	ittt	eq
 8001850:	3001      	addeq	r0, #1
 8001852:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8001856:	3001      	addeq	r0, #1
 8001858:	bcf0      	pop	{r4, r5, r6, r7}
 800185a:	3801      	subs	r0, #1
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop

08001860 <strlen>:
 8001860:	4603      	mov	r3, r0
 8001862:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001866:	2a00      	cmp	r2, #0
 8001868:	d1fb      	bne.n	8001862 <strlen+0x2>
 800186a:	1a18      	subs	r0, r3, r0
 800186c:	3801      	subs	r0, #1
 800186e:	4770      	bx	lr

08001870 <__aeabi_uldivmod>:
 8001870:	b953      	cbnz	r3, 8001888 <__aeabi_uldivmod+0x18>
 8001872:	b94a      	cbnz	r2, 8001888 <__aeabi_uldivmod+0x18>
 8001874:	2900      	cmp	r1, #0
 8001876:	bf08      	it	eq
 8001878:	2800      	cmpeq	r0, #0
 800187a:	bf1c      	itt	ne
 800187c:	f04f 31ff 	movne.w	r1, #4294967295
 8001880:	f04f 30ff 	movne.w	r0, #4294967295
 8001884:	f000 b970 	b.w	8001b68 <__aeabi_idiv0>
 8001888:	f1ad 0c08 	sub.w	ip, sp, #8
 800188c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001890:	f000 f806 	bl	80018a0 <__udivmoddi4>
 8001894:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001898:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800189c:	b004      	add	sp, #16
 800189e:	4770      	bx	lr

080018a0 <__udivmoddi4>:
 80018a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80018a4:	9e08      	ldr	r6, [sp, #32]
 80018a6:	460d      	mov	r5, r1
 80018a8:	4604      	mov	r4, r0
 80018aa:	460f      	mov	r7, r1
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d14a      	bne.n	8001946 <__udivmoddi4+0xa6>
 80018b0:	428a      	cmp	r2, r1
 80018b2:	4694      	mov	ip, r2
 80018b4:	d965      	bls.n	8001982 <__udivmoddi4+0xe2>
 80018b6:	fab2 f382 	clz	r3, r2
 80018ba:	b143      	cbz	r3, 80018ce <__udivmoddi4+0x2e>
 80018bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80018c0:	f1c3 0220 	rsb	r2, r3, #32
 80018c4:	409f      	lsls	r7, r3
 80018c6:	fa20 f202 	lsr.w	r2, r0, r2
 80018ca:	4317      	orrs	r7, r2
 80018cc:	409c      	lsls	r4, r3
 80018ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80018d2:	fa1f f58c 	uxth.w	r5, ip
 80018d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80018da:	0c22      	lsrs	r2, r4, #16
 80018dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80018e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80018e4:	fb01 f005 	mul.w	r0, r1, r5
 80018e8:	4290      	cmp	r0, r2
 80018ea:	d90a      	bls.n	8001902 <__udivmoddi4+0x62>
 80018ec:	eb1c 0202 	adds.w	r2, ip, r2
 80018f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80018f4:	f080 811c 	bcs.w	8001b30 <__udivmoddi4+0x290>
 80018f8:	4290      	cmp	r0, r2
 80018fa:	f240 8119 	bls.w	8001b30 <__udivmoddi4+0x290>
 80018fe:	3902      	subs	r1, #2
 8001900:	4462      	add	r2, ip
 8001902:	1a12      	subs	r2, r2, r0
 8001904:	b2a4      	uxth	r4, r4
 8001906:	fbb2 f0fe 	udiv	r0, r2, lr
 800190a:	fb0e 2210 	mls	r2, lr, r0, r2
 800190e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001912:	fb00 f505 	mul.w	r5, r0, r5
 8001916:	42a5      	cmp	r5, r4
 8001918:	d90a      	bls.n	8001930 <__udivmoddi4+0x90>
 800191a:	eb1c 0404 	adds.w	r4, ip, r4
 800191e:	f100 32ff 	add.w	r2, r0, #4294967295
 8001922:	f080 8107 	bcs.w	8001b34 <__udivmoddi4+0x294>
 8001926:	42a5      	cmp	r5, r4
 8001928:	f240 8104 	bls.w	8001b34 <__udivmoddi4+0x294>
 800192c:	4464      	add	r4, ip
 800192e:	3802      	subs	r0, #2
 8001930:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001934:	1b64      	subs	r4, r4, r5
 8001936:	2100      	movs	r1, #0
 8001938:	b11e      	cbz	r6, 8001942 <__udivmoddi4+0xa2>
 800193a:	40dc      	lsrs	r4, r3
 800193c:	2300      	movs	r3, #0
 800193e:	e9c6 4300 	strd	r4, r3, [r6]
 8001942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001946:	428b      	cmp	r3, r1
 8001948:	d908      	bls.n	800195c <__udivmoddi4+0xbc>
 800194a:	2e00      	cmp	r6, #0
 800194c:	f000 80ed 	beq.w	8001b2a <__udivmoddi4+0x28a>
 8001950:	2100      	movs	r1, #0
 8001952:	e9c6 0500 	strd	r0, r5, [r6]
 8001956:	4608      	mov	r0, r1
 8001958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800195c:	fab3 f183 	clz	r1, r3
 8001960:	2900      	cmp	r1, #0
 8001962:	d149      	bne.n	80019f8 <__udivmoddi4+0x158>
 8001964:	42ab      	cmp	r3, r5
 8001966:	d302      	bcc.n	800196e <__udivmoddi4+0xce>
 8001968:	4282      	cmp	r2, r0
 800196a:	f200 80f8 	bhi.w	8001b5e <__udivmoddi4+0x2be>
 800196e:	1a84      	subs	r4, r0, r2
 8001970:	eb65 0203 	sbc.w	r2, r5, r3
 8001974:	2001      	movs	r0, #1
 8001976:	4617      	mov	r7, r2
 8001978:	2e00      	cmp	r6, #0
 800197a:	d0e2      	beq.n	8001942 <__udivmoddi4+0xa2>
 800197c:	e9c6 4700 	strd	r4, r7, [r6]
 8001980:	e7df      	b.n	8001942 <__udivmoddi4+0xa2>
 8001982:	b902      	cbnz	r2, 8001986 <__udivmoddi4+0xe6>
 8001984:	deff      	udf	#255	; 0xff
 8001986:	fab2 f382 	clz	r3, r2
 800198a:	2b00      	cmp	r3, #0
 800198c:	f040 8090 	bne.w	8001ab0 <__udivmoddi4+0x210>
 8001990:	1a8a      	subs	r2, r1, r2
 8001992:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001996:	fa1f fe8c 	uxth.w	lr, ip
 800199a:	2101      	movs	r1, #1
 800199c:	fbb2 f5f7 	udiv	r5, r2, r7
 80019a0:	fb07 2015 	mls	r0, r7, r5, r2
 80019a4:	0c22      	lsrs	r2, r4, #16
 80019a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80019aa:	fb0e f005 	mul.w	r0, lr, r5
 80019ae:	4290      	cmp	r0, r2
 80019b0:	d908      	bls.n	80019c4 <__udivmoddi4+0x124>
 80019b2:	eb1c 0202 	adds.w	r2, ip, r2
 80019b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80019ba:	d202      	bcs.n	80019c2 <__udivmoddi4+0x122>
 80019bc:	4290      	cmp	r0, r2
 80019be:	f200 80cb 	bhi.w	8001b58 <__udivmoddi4+0x2b8>
 80019c2:	4645      	mov	r5, r8
 80019c4:	1a12      	subs	r2, r2, r0
 80019c6:	b2a4      	uxth	r4, r4
 80019c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80019cc:	fb07 2210 	mls	r2, r7, r0, r2
 80019d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80019d4:	fb0e fe00 	mul.w	lr, lr, r0
 80019d8:	45a6      	cmp	lr, r4
 80019da:	d908      	bls.n	80019ee <__udivmoddi4+0x14e>
 80019dc:	eb1c 0404 	adds.w	r4, ip, r4
 80019e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80019e4:	d202      	bcs.n	80019ec <__udivmoddi4+0x14c>
 80019e6:	45a6      	cmp	lr, r4
 80019e8:	f200 80bb 	bhi.w	8001b62 <__udivmoddi4+0x2c2>
 80019ec:	4610      	mov	r0, r2
 80019ee:	eba4 040e 	sub.w	r4, r4, lr
 80019f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80019f6:	e79f      	b.n	8001938 <__udivmoddi4+0x98>
 80019f8:	f1c1 0720 	rsb	r7, r1, #32
 80019fc:	408b      	lsls	r3, r1
 80019fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8001a02:	ea4c 0c03 	orr.w	ip, ip, r3
 8001a06:	fa05 f401 	lsl.w	r4, r5, r1
 8001a0a:	fa20 f307 	lsr.w	r3, r0, r7
 8001a0e:	40fd      	lsrs	r5, r7
 8001a10:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001a14:	4323      	orrs	r3, r4
 8001a16:	fbb5 f8f9 	udiv	r8, r5, r9
 8001a1a:	fa1f fe8c 	uxth.w	lr, ip
 8001a1e:	fb09 5518 	mls	r5, r9, r8, r5
 8001a22:	0c1c      	lsrs	r4, r3, #16
 8001a24:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001a28:	fb08 f50e 	mul.w	r5, r8, lr
 8001a2c:	42a5      	cmp	r5, r4
 8001a2e:	fa02 f201 	lsl.w	r2, r2, r1
 8001a32:	fa00 f001 	lsl.w	r0, r0, r1
 8001a36:	d90b      	bls.n	8001a50 <__udivmoddi4+0x1b0>
 8001a38:	eb1c 0404 	adds.w	r4, ip, r4
 8001a3c:	f108 3aff 	add.w	sl, r8, #4294967295
 8001a40:	f080 8088 	bcs.w	8001b54 <__udivmoddi4+0x2b4>
 8001a44:	42a5      	cmp	r5, r4
 8001a46:	f240 8085 	bls.w	8001b54 <__udivmoddi4+0x2b4>
 8001a4a:	f1a8 0802 	sub.w	r8, r8, #2
 8001a4e:	4464      	add	r4, ip
 8001a50:	1b64      	subs	r4, r4, r5
 8001a52:	b29d      	uxth	r5, r3
 8001a54:	fbb4 f3f9 	udiv	r3, r4, r9
 8001a58:	fb09 4413 	mls	r4, r9, r3, r4
 8001a5c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001a60:	fb03 fe0e 	mul.w	lr, r3, lr
 8001a64:	45a6      	cmp	lr, r4
 8001a66:	d908      	bls.n	8001a7a <__udivmoddi4+0x1da>
 8001a68:	eb1c 0404 	adds.w	r4, ip, r4
 8001a6c:	f103 35ff 	add.w	r5, r3, #4294967295
 8001a70:	d26c      	bcs.n	8001b4c <__udivmoddi4+0x2ac>
 8001a72:	45a6      	cmp	lr, r4
 8001a74:	d96a      	bls.n	8001b4c <__udivmoddi4+0x2ac>
 8001a76:	3b02      	subs	r3, #2
 8001a78:	4464      	add	r4, ip
 8001a7a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001a7e:	fba3 9502 	umull	r9, r5, r3, r2
 8001a82:	eba4 040e 	sub.w	r4, r4, lr
 8001a86:	42ac      	cmp	r4, r5
 8001a88:	46c8      	mov	r8, r9
 8001a8a:	46ae      	mov	lr, r5
 8001a8c:	d356      	bcc.n	8001b3c <__udivmoddi4+0x29c>
 8001a8e:	d053      	beq.n	8001b38 <__udivmoddi4+0x298>
 8001a90:	b156      	cbz	r6, 8001aa8 <__udivmoddi4+0x208>
 8001a92:	ebb0 0208 	subs.w	r2, r0, r8
 8001a96:	eb64 040e 	sbc.w	r4, r4, lr
 8001a9a:	fa04 f707 	lsl.w	r7, r4, r7
 8001a9e:	40ca      	lsrs	r2, r1
 8001aa0:	40cc      	lsrs	r4, r1
 8001aa2:	4317      	orrs	r7, r2
 8001aa4:	e9c6 7400 	strd	r7, r4, [r6]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	2100      	movs	r1, #0
 8001aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ab0:	f1c3 0120 	rsb	r1, r3, #32
 8001ab4:	fa02 fc03 	lsl.w	ip, r2, r3
 8001ab8:	fa20 f201 	lsr.w	r2, r0, r1
 8001abc:	fa25 f101 	lsr.w	r1, r5, r1
 8001ac0:	409d      	lsls	r5, r3
 8001ac2:	432a      	orrs	r2, r5
 8001ac4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001ac8:	fa1f fe8c 	uxth.w	lr, ip
 8001acc:	fbb1 f0f7 	udiv	r0, r1, r7
 8001ad0:	fb07 1510 	mls	r5, r7, r0, r1
 8001ad4:	0c11      	lsrs	r1, r2, #16
 8001ad6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8001ada:	fb00 f50e 	mul.w	r5, r0, lr
 8001ade:	428d      	cmp	r5, r1
 8001ae0:	fa04 f403 	lsl.w	r4, r4, r3
 8001ae4:	d908      	bls.n	8001af8 <__udivmoddi4+0x258>
 8001ae6:	eb1c 0101 	adds.w	r1, ip, r1
 8001aea:	f100 38ff 	add.w	r8, r0, #4294967295
 8001aee:	d22f      	bcs.n	8001b50 <__udivmoddi4+0x2b0>
 8001af0:	428d      	cmp	r5, r1
 8001af2:	d92d      	bls.n	8001b50 <__udivmoddi4+0x2b0>
 8001af4:	3802      	subs	r0, #2
 8001af6:	4461      	add	r1, ip
 8001af8:	1b49      	subs	r1, r1, r5
 8001afa:	b292      	uxth	r2, r2
 8001afc:	fbb1 f5f7 	udiv	r5, r1, r7
 8001b00:	fb07 1115 	mls	r1, r7, r5, r1
 8001b04:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001b08:	fb05 f10e 	mul.w	r1, r5, lr
 8001b0c:	4291      	cmp	r1, r2
 8001b0e:	d908      	bls.n	8001b22 <__udivmoddi4+0x282>
 8001b10:	eb1c 0202 	adds.w	r2, ip, r2
 8001b14:	f105 38ff 	add.w	r8, r5, #4294967295
 8001b18:	d216      	bcs.n	8001b48 <__udivmoddi4+0x2a8>
 8001b1a:	4291      	cmp	r1, r2
 8001b1c:	d914      	bls.n	8001b48 <__udivmoddi4+0x2a8>
 8001b1e:	3d02      	subs	r5, #2
 8001b20:	4462      	add	r2, ip
 8001b22:	1a52      	subs	r2, r2, r1
 8001b24:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001b28:	e738      	b.n	800199c <__udivmoddi4+0xfc>
 8001b2a:	4631      	mov	r1, r6
 8001b2c:	4630      	mov	r0, r6
 8001b2e:	e708      	b.n	8001942 <__udivmoddi4+0xa2>
 8001b30:	4639      	mov	r1, r7
 8001b32:	e6e6      	b.n	8001902 <__udivmoddi4+0x62>
 8001b34:	4610      	mov	r0, r2
 8001b36:	e6fb      	b.n	8001930 <__udivmoddi4+0x90>
 8001b38:	4548      	cmp	r0, r9
 8001b3a:	d2a9      	bcs.n	8001a90 <__udivmoddi4+0x1f0>
 8001b3c:	ebb9 0802 	subs.w	r8, r9, r2
 8001b40:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001b44:	3b01      	subs	r3, #1
 8001b46:	e7a3      	b.n	8001a90 <__udivmoddi4+0x1f0>
 8001b48:	4645      	mov	r5, r8
 8001b4a:	e7ea      	b.n	8001b22 <__udivmoddi4+0x282>
 8001b4c:	462b      	mov	r3, r5
 8001b4e:	e794      	b.n	8001a7a <__udivmoddi4+0x1da>
 8001b50:	4640      	mov	r0, r8
 8001b52:	e7d1      	b.n	8001af8 <__udivmoddi4+0x258>
 8001b54:	46d0      	mov	r8, sl
 8001b56:	e77b      	b.n	8001a50 <__udivmoddi4+0x1b0>
 8001b58:	3d02      	subs	r5, #2
 8001b5a:	4462      	add	r2, ip
 8001b5c:	e732      	b.n	80019c4 <__udivmoddi4+0x124>
 8001b5e:	4608      	mov	r0, r1
 8001b60:	e70a      	b.n	8001978 <__udivmoddi4+0xd8>
 8001b62:	4464      	add	r4, ip
 8001b64:	3802      	subs	r0, #2
 8001b66:	e742      	b.n	80019ee <__udivmoddi4+0x14e>

08001b68 <__aeabi_idiv0>:
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop

08001b6c <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 8001b74:	1d39      	adds	r1, r7, #4
 8001b76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	4803      	ldr	r0, [pc, #12]	; (8001b8c <__io_putchar+0x20>)
 8001b7e:	f00b fc95 	bl	800d4ac <HAL_UART_Transmit>
	return ch;
 8001b82:	687b      	ldr	r3, [r7, #4]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	200005c8 	.word	0x200005c8

08001b90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* Copy from FLASH to itcm */
  memcpy(&_sitcm, &_siitcm, ((void*) &_eitcm - (void*) &_sitcm));
 8001b96:	4ab4      	ldr	r2, [pc, #720]	; (8001e68 <main+0x2d8>)
 8001b98:	4bb4      	ldr	r3, [pc, #720]	; (8001e6c <main+0x2dc>)
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	49b4      	ldr	r1, [pc, #720]	; (8001e70 <main+0x2e0>)
 8001ba0:	48b2      	ldr	r0, [pc, #712]	; (8001e6c <main+0x2dc>)
 8001ba2:	f017 fe99 	bl	80198d8 <memcpy>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001ba6:	4bb3      	ldr	r3, [pc, #716]	; (8001e74 <main+0x2e4>)
 8001ba8:	695b      	ldr	r3, [r3, #20]
 8001baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d11b      	bne.n	8001bea <main+0x5a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001bb2:	f3bf 8f4f 	dsb	sy
}
 8001bb6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bb8:	f3bf 8f6f 	isb	sy
}
 8001bbc:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001bbe:	4bad      	ldr	r3, [pc, #692]	; (8001e74 <main+0x2e4>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001bc6:	f3bf 8f4f 	dsb	sy
}
 8001bca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bcc:	f3bf 8f6f 	isb	sy
}
 8001bd0:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001bd2:	4ba8      	ldr	r3, [pc, #672]	; (8001e74 <main+0x2e4>)
 8001bd4:	695b      	ldr	r3, [r3, #20]
 8001bd6:	4aa7      	ldr	r2, [pc, #668]	; (8001e74 <main+0x2e4>)
 8001bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bdc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001bde:	f3bf 8f4f 	dsb	sy
}
 8001be2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001be4:	f3bf 8f6f 	isb	sy
}
 8001be8:	e000      	b.n	8001bec <main+0x5c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001bea:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001bec:	4ba1      	ldr	r3, [pc, #644]	; (8001e74 <main+0x2e4>)
 8001bee:	695b      	ldr	r3, [r3, #20]
 8001bf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d138      	bne.n	8001c6a <main+0xda>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001bf8:	4b9e      	ldr	r3, [pc, #632]	; (8001e74 <main+0x2e4>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001c00:	f3bf 8f4f 	dsb	sy
}
 8001c04:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001c06:	4b9b      	ldr	r3, [pc, #620]	; (8001e74 <main+0x2e4>)
 8001c08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c0c:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	0b5b      	lsrs	r3, r3, #13
 8001c12:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001c16:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	08db      	lsrs	r3, r3, #3
 8001c1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c20:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	015a      	lsls	r2, r3, #5
 8001c26:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001c2a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001c30:	4990      	ldr	r1, [pc, #576]	; (8001e74 <main+0x2e4>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	1e5a      	subs	r2, r3, #1
 8001c3c:	607a      	str	r2, [r7, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1ef      	bne.n	8001c22 <main+0x92>
    } while(sets-- != 0U);
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	1e5a      	subs	r2, r3, #1
 8001c46:	60ba      	str	r2, [r7, #8]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d1e5      	bne.n	8001c18 <main+0x88>
  __ASM volatile ("dsb 0xF":::"memory");
 8001c4c:	f3bf 8f4f 	dsb	sy
}
 8001c50:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001c52:	4b88      	ldr	r3, [pc, #544]	; (8001e74 <main+0x2e4>)
 8001c54:	695b      	ldr	r3, [r3, #20]
 8001c56:	4a87      	ldr	r2, [pc, #540]	; (8001e74 <main+0x2e4>)
 8001c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c5c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001c5e:	f3bf 8f4f 	dsb	sy
}
 8001c62:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c64:	f3bf 8f6f 	isb	sy
}
 8001c68:	e000      	b.n	8001c6c <main+0xdc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001c6a:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c6c:	f001 fdae 	bl	80037cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c70:	f000 f934 	bl	8001edc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c74:	f000 fd90 	bl	8002798 <MX_GPIO_Init>
  MX_LPTIM1_Init();
 8001c78:	f000 fbd4 	bl	8002424 <MX_LPTIM1_Init>
  MX_DAC1_Init();
 8001c7c:	f000 fa4e 	bl	800211c <MX_DAC1_Init>
  MX_USART3_UART_Init();
 8001c80:	f000 fd3c 	bl	80026fc <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8001c84:	f000 fc9e 	bl	80025c4 <MX_TIM3_Init>
  MX_TIM1_Init();
 8001c88:	f000 fbfa 	bl	8002480 <MX_TIM1_Init>
  MX_HRTIM_Init();
 8001c8c:	f000 fa78 	bl	8002180 <MX_HRTIM_Init>
  MX_ADC3_Init();
 8001c90:	f000 f9e2 	bl	8002058 <MX_ADC3_Init>
  MX_LWIP_Init();
 8001c94:	f00c fd1e 	bl	800e6d4 <MX_LWIP_Init>
  MX_TIM2_Init();
 8001c98:	f000 fc46 	bl	8002528 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001c9c:	f000 fce0 	bl	8002660 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  printf("\033c"); //clears screen
 8001ca0:	4875      	ldr	r0, [pc, #468]	; (8001e78 <main+0x2e8>)
 8001ca2:	f017 fc4b 	bl	801953c <iprintf>
  printf("Atomic Clock - Source __TIMESTAMP__: %s\r\n", __TIMESTAMP__);
 8001ca6:	4975      	ldr	r1, [pc, #468]	; (8001e7c <main+0x2ec>)
 8001ca8:	4875      	ldr	r0, [pc, #468]	; (8001e80 <main+0x2f0>)
 8001caa:	f017 fc47 	bl	801953c <iprintf>

	#ifdef SYNTH_ENABLE
		if (init_synthesiser(MW_power) != SUCCESS) {
 8001cae:	4b75      	ldr	r3, [pc, #468]	; (8001e84 <main+0x2f4>)
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f019 fbd8 	bl	801b468 <__init_synthesiser_veneer>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d004      	beq.n	8001cc8 <main+0x138>
			printf("Synthesiser initialisation failed!\r\n");
 8001cbe:	4872      	ldr	r0, [pc, #456]	; (8001e88 <main+0x2f8>)
 8001cc0:	f017 fca2 	bl	8019608 <puts>
			Error_Handler();
 8001cc4:	f000 fef0 	bl	8002aa8 <Error_Handler>
		}
		#ifdef MW_VERBOSE
			printf("MW power setting (LO2GAIN): 0x%x \r\n", MW_power);
 8001cc8:	4b6e      	ldr	r3, [pc, #440]	; (8001e84 <main+0x2f4>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	4619      	mov	r1, r3
 8001cce:	486f      	ldr	r0, [pc, #444]	; (8001e8c <main+0x2fc>)
 8001cd0:	f017 fc34 	bl	801953c <iprintf>
		#endif	//MW_VERBOSE
	#endif //SYNTH_ENABLE

	/* Start a low power timer to flash an LED approximately every second */
	if (HAL_LPTIM_Counter_Start_IT(&hlptim1, 1024) != HAL_OK) {
 8001cd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cd8:	486d      	ldr	r0, [pc, #436]	; (8001e90 <main+0x300>)
 8001cda:	f006 ff83 	bl	8008be4 <HAL_LPTIM_Counter_Start_IT>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d004      	beq.n	8001cee <main+0x15e>
		printf("Failed to start slow flashing LED!\r\n");
 8001ce4:	486b      	ldr	r0, [pc, #428]	; (8001e94 <main+0x304>)
 8001ce6:	f017 fc8f 	bl	8019608 <puts>
		Error_Handler();
 8001cea:	f000 fedd 	bl	8002aa8 <Error_Handler>
	}

	/* Start the DAC and zero its output */
	if (HAL_DAC_Start(&hdac1, DAC_CHANNEL_1) != HAL_OK) {
 8001cee:	2100      	movs	r1, #0
 8001cf0:	4869      	ldr	r0, [pc, #420]	; (8001e98 <main+0x308>)
 8001cf2:	f003 fcee 	bl	80056d2 <HAL_DAC_Start>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d004      	beq.n	8001d06 <main+0x176>
		printf("Failure to initialise DAC \r\n");
 8001cfc:	4867      	ldr	r0, [pc, #412]	; (8001e9c <main+0x30c>)
 8001cfe:	f017 fc83 	bl	8019608 <puts>
		Error_Handler();
 8001d02:	f000 fed1 	bl	8002aa8 <Error_Handler>
	}
	printf("Setting DAC output to 1.00V \r\n");
 8001d06:	4866      	ldr	r0, [pc, #408]	; (8001ea0 <main+0x310>)
 8001d08:	f017 fc7e 	bl	8019608 <puts>
	if(HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 1241) != HAL_OK){
 8001d0c:	f240 43d9 	movw	r3, #1241	; 0x4d9
 8001d10:	2200      	movs	r2, #0
 8001d12:	2100      	movs	r1, #0
 8001d14:	4860      	ldr	r0, [pc, #384]	; (8001e98 <main+0x308>)
 8001d16:	f003 fd2e 	bl	8005776 <HAL_DAC_SetValue>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d004      	beq.n	8001d2a <main+0x19a>
			printf("DAC setup failed!\r\n");
 8001d20:	4860      	ldr	r0, [pc, #384]	; (8001ea4 <main+0x314>)
 8001d22:	f017 fc71 	bl	8019608 <puts>
		Error_Handler();
 8001d26:	f000 febf 	bl	8002aa8 <Error_Handler>
	}

	HAL_GPIO_WritePin(LASER_TUNING_GPIO_Port, LASER_TUNING_Pin, GPIO_PIN_SET); // Laser_tuning output high
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d30:	485d      	ldr	r0, [pc, #372]	; (8001ea8 <main+0x318>)
 8001d32:	f005 fb4b 	bl	80073cc <HAL_GPIO_WritePin>

	/* Fire up the ADC
	 * external trigger, single conversion selected in ioc file
	 * calibrate ADC for better accuracy and start it w/ interrupt
	 */
	if(HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK){
 8001d36:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	485b      	ldr	r0, [pc, #364]	; (8001eac <main+0x31c>)
 8001d3e:	f003 fb01 	bl	8005344 <HAL_ADCEx_Calibration_Start>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d004      	beq.n	8001d52 <main+0x1c2>
		printf("ADC calibration failure \r\n");
 8001d48:	4859      	ldr	r0, [pc, #356]	; (8001eb0 <main+0x320>)
 8001d4a:	f017 fc5d 	bl	8019608 <puts>
		Error_Handler();
 8001d4e:	f000 feab 	bl	8002aa8 <Error_Handler>
	}
	//Start the ADC with interrupts enabled
	if(HAL_ADC_Start_IT(&hadc3) != HAL_OK){
 8001d52:	4856      	ldr	r0, [pc, #344]	; (8001eac <main+0x31c>)
 8001d54:	f002 f9e4 	bl	8004120 <HAL_ADC_Start_IT>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d004      	beq.n	8001d68 <main+0x1d8>
		printf("Failed to start ADC with interrupt capability \r\n");
 8001d5e:	4855      	ldr	r0, [pc, #340]	; (8001eb4 <main+0x324>)
 8001d60:	f017 fc52 	bl	8019608 <puts>
	                Error_Handler();
 8001d64:	f000 fea0 	bl	8002aa8 <Error_Handler>
	}
	printf("ADC calibrated successfully and interrupt callback enabled \r\n");
 8001d68:	4853      	ldr	r0, [pc, #332]	; (8001eb8 <main+0x328>)
 8001d6a:	f017 fc4d 	bl	8019608 <puts>
	/* Calculate the MW sweep settings
	 * Notes:
	 * Measure the period of a POP cycle *AFTER* the ADC has been initialised
	 * Calculate sweep settings after first POP calibration routine
	 */
	start_POP_calibration(true);
 8001d6e:	2001      	movs	r0, #1
 8001d70:	f019 fb72 	bl	801b458 <__start_POP_calibration_veneer>
	while (!POP_period_us) {//loop here until period of POP cycle has been measured
 8001d74:	e001      	b.n	8001d7a <main+0x1ea>
		MW_update();
 8001d76:	f019 fb83 	bl	801b480 <__MW_update_veneer>
	while (!POP_period_us) {//loop here until period of POP cycle has been measured
 8001d7a:	4b50      	ldr	r3, [pc, #320]	; (8001ebc <main+0x32c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d0f9      	beq.n	8001d76 <main+0x1e6>
//	calc_fixed_time_MW_sweep(3035735122, 1900, 5.7); //1.8kHz sweep, 22s re-centred
//	calc_fixed_time_MW_sweep(3035735122, 1500, 20, ADD_SCOPE_SYNC_TIME); //1.5kHz sweep, 20s re-centred - TIMER OVERFLOW
//	calc_fixed_time_MW_sweep(3035735122, 1500, 10, ADD_SCOPE_SYNC_TIME); //1.5kHz sweep, 10s re-centred - TIMER OVERFLOW
//	calc_defined_step_MW_sweep(3035735122, 1500, 1, 1001); //1.5kHz sweep, 1 POP cycle per step, 1001 points, 17.4s
//	calc_defined_step_MW_sweep(3035735122, 1000, 1, 1001); //1kHz sweep, 1 POP cycle per step, 1001 points, 11.5s
	calc_fixed_time_MW_sweep(3035735122, 1000, 20, ADD_SCOPE_SYNC_TIME); //1.5kHz sweep, 20s re-centred
 8001d82:	2001      	movs	r0, #1
 8001d84:	eeb3 2b04 	vmov.f64	d2, #52	; 0x41a00000  20.0
 8001d88:	ed9f 1b33 	vldr	d1, [pc, #204]	; 8001e58 <main+0x2c8>
 8001d8c:	ed9f 0b34 	vldr	d0, [pc, #208]	; 8001e60 <main+0x2d0>
 8001d90:	f019 fb66 	bl	801b460 <__calc_fixed_time_MW_sweep_veneer>
//		if (pin_status != last_pin_status) {
//			printf("Blue button status: %u \r\n", pin_status);
//			last_pin_status = pin_status;
//		}

		blue_button_status = HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin);
 8001d94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d98:	4849      	ldr	r0, [pc, #292]	; (8001ec0 <main+0x330>)
 8001d9a:	f005 faff 	bl	800739c <HAL_GPIO_ReadPin>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	bf14      	ite	ne
 8001da4:	2301      	movne	r3, #1
 8001da6:	2300      	moveq	r3, #0
 8001da8:	b2da      	uxtb	r2, r3
 8001daa:	4b46      	ldr	r3, [pc, #280]	; (8001ec4 <main+0x334>)
 8001dac:	701a      	strb	r2, [r3, #0]
		if (blue_button_status) {// If blue button is pressed
 8001dae:	4b45      	ldr	r3, [pc, #276]	; (8001ec4 <main+0x334>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d047      	beq.n	8001e48 <main+0x2b8>
			printf("Blue button pressed....\r\n");
 8001db8:	4843      	ldr	r0, [pc, #268]	; (8001ec8 <main+0x338>)
 8001dba:	f017 fc25 	bl	8019608 <puts>
			HAL_GPIO_WritePin(LASER_TUNING_GPIO_Port, LASER_TUNING_Pin, GPIO_PIN_RESET); // Laser_tuning SMA output low
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dc4:	4838      	ldr	r0, [pc, #224]	; (8001ea8 <main+0x318>)
 8001dc6:	f005 fb01 	bl	80073cc <HAL_GPIO_WritePin>
			//set_MW_power(0x03); //set maximum MW power to improve contrast
			//MW_frequency_toggle (3035733689, 3035733789); //infinite loop toggling 100Hz on left of DR dip
			//MW_frequency_toggle (3035733689, 3035733699); //infinite loop toggling 10Hz on left of DR dip

			//change the MW power each time the button is pressed, unless it's the first time round this loop
			if (mw_sweep_started) {
 8001dca:	4b40      	ldr	r3, [pc, #256]	; (8001ecc <main+0x33c>)
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d018      	beq.n	8001e06 <main+0x276>
				++MW_power; //increase MW_power value by 1
 8001dd4:	4b2b      	ldr	r3, [pc, #172]	; (8001e84 <main+0x2f4>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	b2da      	uxtb	r2, r3
 8001ddc:	4b29      	ldr	r3, [pc, #164]	; (8001e84 <main+0x2f4>)
 8001dde:	701a      	strb	r2, [r3, #0]
				if (MW_power>3) { //Loop MW_power back round to 0 if above maximum permissible value i.e. 3
 8001de0:	4b28      	ldr	r3, [pc, #160]	; (8001e84 <main+0x2f4>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	2b03      	cmp	r3, #3
 8001de6:	d902      	bls.n	8001dee <main+0x25e>
					MW_power = 0;
 8001de8:	4b26      	ldr	r3, [pc, #152]	; (8001e84 <main+0x2f4>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	701a      	strb	r2, [r3, #0]
				}
				set_MW_power(MW_power);
 8001dee:	4b25      	ldr	r3, [pc, #148]	; (8001e84 <main+0x2f4>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f019 fb40 	bl	801b478 <__set_MW_power_veneer>
			#ifdef MW_VERBOSE
				printf("LO2GAIN changed to: 0x%x \r\n", MW_power);
 8001df8:	4b22      	ldr	r3, [pc, #136]	; (8001e84 <main+0x2f4>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4834      	ldr	r0, [pc, #208]	; (8001ed0 <main+0x340>)
 8001e00:	f017 fb9c 	bl	801953c <iprintf>
 8001e04:	e01b      	b.n	8001e3e <main+0x2ae>
			#endif //MW_VERBOSE
			} else {
				printf("Initiating sweep.\r\n");
 8001e06:	4833      	ldr	r0, [pc, #204]	; (8001ed4 <main+0x344>)
 8001e08:	f017 fbfe 	bl	8019608 <puts>
				mw_sweep_started = true;
 8001e0c:	4b2f      	ldr	r3, [pc, #188]	; (8001ecc <main+0x33c>)
 8001e0e:	2201      	movs	r2, #1
 8001e10:	701a      	strb	r2, [r3, #0]
				start_continuous_MW_sweep();
 8001e12:	f019 fb41 	bl	801b498 <__start_continuous_MW_sweep_veneer>
			}
			while(blue_button_status) {//remain here polling button until it is released
 8001e16:	e012      	b.n	8001e3e <main+0x2ae>
				timer_delay(SLOW_TIMER, 100); //10ms delay
 8001e18:	4b2f      	ldr	r3, [pc, #188]	; (8001ed8 <main+0x348>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2164      	movs	r1, #100	; 0x64
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f019 fb32 	bl	801b488 <__timer_delay_veneer>
				blue_button_status = HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin);
 8001e24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e28:	4825      	ldr	r0, [pc, #148]	; (8001ec0 <main+0x330>)
 8001e2a:	f005 fab7 	bl	800739c <HAL_GPIO_ReadPin>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	bf14      	ite	ne
 8001e34:	2301      	movne	r3, #1
 8001e36:	2300      	moveq	r3, #0
 8001e38:	b2da      	uxtb	r2, r3
 8001e3a:	4b22      	ldr	r3, [pc, #136]	; (8001ec4 <main+0x334>)
 8001e3c:	701a      	strb	r2, [r3, #0]
			while(blue_button_status) {//remain here polling button until it is released
 8001e3e:	4b21      	ldr	r3, [pc, #132]	; (8001ec4 <main+0x334>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d1e7      	bne.n	8001e18 <main+0x288>
			}
		}

		if (mw_sweep_started) {//won't execute until the first time the blue button is pressed
 8001e48:	4b20      	ldr	r3, [pc, #128]	; (8001ecc <main+0x33c>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
//			run_sweep();
//			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET); //turn off red LED
			//printf("Sweep complete.\r\n");
			//printf("LO2GAIN: 0x%x \r\n", MW_power);
		}
		MW_update();
 8001e4c:	f019 fb18 	bl	801b480 <__MW_update_veneer>
		blue_button_status = HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin);
 8001e50:	e7a0      	b.n	8001d94 <main+0x204>
 8001e52:	bf00      	nop
 8001e54:	f3af 8000 	nop.w
 8001e58:	00000000 	.word	0x00000000
 8001e5c:	408f4000 	.word	0x408f4000
 8001e60:	8a400000 	.word	0x8a400000
 8001e64:	41e69e34 	.word	0x41e69e34
 8001e68:	000014e0 	.word	0x000014e0
 8001e6c:	00000000 	.word	0x00000000
 8001e70:	08000298 	.word	0x08000298
 8001e74:	e000ed00 	.word	0xe000ed00
 8001e78:	0801b4a0 	.word	0x0801b4a0
 8001e7c:	0801b4a4 	.word	0x0801b4a4
 8001e80:	0801b4c0 	.word	0x0801b4c0
 8001e84:	20000000 	.word	0x20000000
 8001e88:	0801b4ec 	.word	0x0801b4ec
 8001e8c:	0801b510 	.word	0x0801b510
 8001e90:	20000460 	.word	0x20000460
 8001e94:	0801b534 	.word	0x0801b534
 8001e98:	20000370 	.word	0x20000370
 8001e9c:	0801b558 	.word	0x0801b558
 8001ea0:	0801b574 	.word	0x0801b574
 8001ea4:	0801b594 	.word	0x0801b594
 8001ea8:	58020400 	.word	0x58020400
 8001eac:	2000030c 	.word	0x2000030c
 8001eb0:	0801b5a8 	.word	0x0801b5a8
 8001eb4:	0801b5c4 	.word	0x0801b5c4
 8001eb8:	0801b5f4 	.word	0x0801b5f4
 8001ebc:	20000660 	.word	0x20000660
 8001ec0:	58020800 	.word	0x58020800
 8001ec4:	2000065d 	.word	0x2000065d
 8001ec8:	0801b634 	.word	0x0801b634
 8001ecc:	2000065c 	.word	0x2000065c
 8001ed0:	0801b650 	.word	0x0801b650
 8001ed4:	0801b66c 	.word	0x0801b66c
 8001ed8:	20000018 	.word	0x20000018

08001edc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b0a4      	sub	sp, #144	; 0x90
 8001ee0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ee2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ee6:	224c      	movs	r2, #76	; 0x4c
 8001ee8:	2100      	movs	r1, #0
 8001eea:	4618      	mov	r0, r3
 8001eec:	f017 fc7c 	bl	80197e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ef0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ef4:	2220      	movs	r2, #32
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f017 fc75 	bl	80197e8 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 8001efe:	f107 030c 	add.w	r3, r7, #12
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	605a      	str	r2, [r3, #4]
 8001f08:	609a      	str	r2, [r3, #8]
 8001f0a:	60da      	str	r2, [r3, #12]
 8001f0c:	611a      	str	r2, [r3, #16]
 8001f0e:	615a      	str	r2, [r3, #20]

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001f10:	2002      	movs	r0, #2
 8001f12:	f007 f9c5 	bl	80092a0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f16:	2300      	movs	r3, #0
 8001f18:	60bb      	str	r3, [r7, #8]
 8001f1a:	4b4c      	ldr	r3, [pc, #304]	; (800204c <SystemClock_Config+0x170>)
 8001f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1e:	4a4b      	ldr	r2, [pc, #300]	; (800204c <SystemClock_Config+0x170>)
 8001f20:	f023 0301 	bic.w	r3, r3, #1
 8001f24:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001f26:	4b49      	ldr	r3, [pc, #292]	; (800204c <SystemClock_Config+0x170>)
 8001f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	60bb      	str	r3, [r7, #8]
 8001f30:	4b47      	ldr	r3, [pc, #284]	; (8002050 <SystemClock_Config+0x174>)
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	4a46      	ldr	r2, [pc, #280]	; (8002050 <SystemClock_Config+0x174>)
 8001f36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f3a:	6193      	str	r3, [r2, #24]
 8001f3c:	4b44      	ldr	r3, [pc, #272]	; (8002050 <SystemClock_Config+0x174>)
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f44:	60bb      	str	r3, [r7, #8]
 8001f46:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001f48:	bf00      	nop
 8001f4a:	4b41      	ldr	r3, [pc, #260]	; (8002050 <SystemClock_Config+0x174>)
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f56:	d1f8      	bne.n	8001f4a <SystemClock_Config+0x6e>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001f58:	f007 f992 	bl	8009280 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001f5c:	f001 fcec 	bl	8003938 <HAL_GetREVID>
 8001f60:	4b3c      	ldr	r3, [pc, #240]	; (8002054 <SystemClock_Config+0x178>)
 8001f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f64:	4a3b      	ldr	r2, [pc, #236]	; (8002054 <SystemClock_Config+0x178>)
 8001f66:	f023 0318 	bic.w	r3, r3, #24
 8001f6a:	6713      	str	r3, [r2, #112]	; 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 8001f6c:	2325      	movs	r3, #37	; 0x25
 8001f6e:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001f70:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001f74:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001f76:	2301      	movs	r3, #1
 8001f78:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f7e:	2302      	movs	r3, #2
 8001f80:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f82:	2302      	movs	r3, #2
 8001f84:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001f86:	2301      	movs	r3, #1
 8001f88:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001f8a:	2350      	movs	r3, #80	; 0x50
 8001f8c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001f8e:	2302      	movs	r3, #2
 8001f90:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f92:	2304      	movs	r3, #4
 8001f94:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001f96:	2302      	movs	r3, #2
 8001f98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001f9c:	230c      	movs	r3, #12
 8001f9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fae:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f007 f9ae 	bl	8009314 <HAL_RCC_OscConfig>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001fbe:	f000 fd73 	bl	8002aa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fc2:	233f      	movs	r3, #63	; 0x3f
 8001fc4:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV4;
 8001fce:	2309      	movs	r3, #9
 8001fd0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV16;
 8001fda:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001fde:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	643b      	str	r3, [r7, #64]	; 0x40

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001fe4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fe8:	2101      	movs	r1, #1
 8001fea:	4618      	mov	r0, r3
 8001fec:	f007 fdec 	bl	8009bc8 <HAL_RCC_ClockConfig>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <SystemClock_Config+0x11e>
  {
    Error_Handler();
 8001ff6:	f000 fd57 	bl	8002aa8 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001ffa:	f007 ff9b 	bl	8009f34 <HAL_RCC_EnableCSS>

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 8001ffe:	4b15      	ldr	r3, [pc, #84]	; (8002054 <SystemClock_Config+0x178>)
 8002000:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002004:	4a13      	ldr	r2, [pc, #76]	; (8002054 <SystemClock_Config+0x178>)
 8002006:	f043 0302 	orr.w	r3, r3, #2
 800200a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800200e:	4b11      	ldr	r3, [pc, #68]	; (8002054 <SystemClock_Config+0x178>)
 8002010:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	607b      	str	r3, [r7, #4]
 800201a:	687b      	ldr	r3, [r7, #4]

  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 800201c:	2300      	movs	r3, #0
 800201e:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_LSE;
 8002020:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002024:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 8002026:	2300      	movs	r3, #0
 8002028:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,32768);
 800202a:	f240 53b7 	movw	r3, #1463	; 0x5b7
 800202e:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 8002030:	2322      	movs	r3, #34	; 0x22
 8002032:	61fb      	str	r3, [r7, #28]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 8002034:	2320      	movs	r3, #32
 8002036:	623b      	str	r3, [r7, #32]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 8002038:	f107 030c 	add.w	r3, r7, #12
 800203c:	4618      	mov	r0, r3
 800203e:	f00a fd15 	bl	800ca6c <HAL_RCCEx_CRSConfig>
}
 8002042:	bf00      	nop
 8002044:	3790      	adds	r7, #144	; 0x90
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	58000400 	.word	0x58000400
 8002050:	58024800 	.word	0x58024800
 8002054:	58024400 	.word	0x58024400

08002058 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b088      	sub	sp, #32
 800205c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800205e:	1d3b      	adds	r3, r7, #4
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	605a      	str	r2, [r3, #4]
 8002066:	609a      	str	r2, [r3, #8]
 8002068:	60da      	str	r2, [r3, #12]
 800206a:	611a      	str	r2, [r3, #16]
 800206c:	615a      	str	r2, [r3, #20]
 800206e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8002070:	4b28      	ldr	r3, [pc, #160]	; (8002114 <MX_ADC3_Init+0xbc>)
 8002072:	4a29      	ldr	r2, [pc, #164]	; (8002118 <MX_ADC3_Init+0xc0>)
 8002074:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8002076:	4b27      	ldr	r3, [pc, #156]	; (8002114 <MX_ADC3_Init+0xbc>)
 8002078:	2200      	movs	r2, #0
 800207a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800207c:	4b25      	ldr	r3, [pc, #148]	; (8002114 <MX_ADC3_Init+0xbc>)
 800207e:	2200      	movs	r2, #0
 8002080:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002082:	4b24      	ldr	r3, [pc, #144]	; (8002114 <MX_ADC3_Init+0xbc>)
 8002084:	2204      	movs	r2, #4
 8002086:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8002088:	4b22      	ldr	r3, [pc, #136]	; (8002114 <MX_ADC3_Init+0xbc>)
 800208a:	2200      	movs	r2, #0
 800208c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800208e:	4b21      	ldr	r3, [pc, #132]	; (8002114 <MX_ADC3_Init+0xbc>)
 8002090:	2200      	movs	r2, #0
 8002092:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8002094:	4b1f      	ldr	r3, [pc, #124]	; (8002114 <MX_ADC3_Init+0xbc>)
 8002096:	2201      	movs	r2, #1
 8002098:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800209a:	4b1e      	ldr	r3, [pc, #120]	; (8002114 <MX_ADC3_Init+0xbc>)
 800209c:	2200      	movs	r2, #0
 800209e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_EXT_IT11;
 80020a0:	4b1c      	ldr	r3, [pc, #112]	; (8002114 <MX_ADC3_Init+0xbc>)
 80020a2:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80020a6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80020a8:	4b1a      	ldr	r3, [pc, #104]	; (8002114 <MX_ADC3_Init+0xbc>)
 80020aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020ae:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80020b0:	4b18      	ldr	r3, [pc, #96]	; (8002114 <MX_ADC3_Init+0xbc>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80020b6:	4b17      	ldr	r3, [pc, #92]	; (8002114 <MX_ADC3_Init+0xbc>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80020bc:	4b15      	ldr	r3, [pc, #84]	; (8002114 <MX_ADC3_Init+0xbc>)
 80020be:	2200      	movs	r2, #0
 80020c0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80020c2:	4b14      	ldr	r3, [pc, #80]	; (8002114 <MX_ADC3_Init+0xbc>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80020ca:	4812      	ldr	r0, [pc, #72]	; (8002114 <MX_ADC3_Init+0xbc>)
 80020cc:	f001 fe86 	bl	8003ddc <HAL_ADC_Init>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <MX_ADC3_Init+0x82>
  {
    Error_Handler();
 80020d6:	f000 fce7 	bl	8002aa8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80020da:	2301      	movs	r3, #1
 80020dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80020de:	2306      	movs	r3, #6
 80020e0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80020e2:	2300      	movs	r3, #0
 80020e4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80020e6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80020ea:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80020ec:	2304      	movs	r3, #4
 80020ee:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80020f0:	2300      	movs	r3, #0
 80020f2:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80020f4:	2300      	movs	r3, #0
 80020f6:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80020f8:	1d3b      	adds	r3, r7, #4
 80020fa:	4619      	mov	r1, r3
 80020fc:	4805      	ldr	r0, [pc, #20]	; (8002114 <MX_ADC3_Init+0xbc>)
 80020fe:	f002 fba9 	bl	8004854 <HAL_ADC_ConfigChannel>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 8002108:	f000 fcce 	bl	8002aa8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800210c:	bf00      	nop
 800210e:	3720      	adds	r7, #32
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	2000030c 	.word	0x2000030c
 8002118:	58026000 	.word	0x58026000

0800211c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b08a      	sub	sp, #40	; 0x28
 8002120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002122:	1d3b      	adds	r3, r7, #4
 8002124:	2224      	movs	r2, #36	; 0x24
 8002126:	2100      	movs	r1, #0
 8002128:	4618      	mov	r0, r3
 800212a:	f017 fb5d 	bl	80197e8 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800212e:	4b12      	ldr	r3, [pc, #72]	; (8002178 <MX_DAC1_Init+0x5c>)
 8002130:	4a12      	ldr	r2, [pc, #72]	; (800217c <MX_DAC1_Init+0x60>)
 8002132:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8002134:	4810      	ldr	r0, [pc, #64]	; (8002178 <MX_DAC1_Init+0x5c>)
 8002136:	f003 faaa 	bl	800568e <HAL_DAC_Init>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8002140:	f000 fcb2 	bl	8002aa8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8002144:	2300      	movs	r3, #0
 8002146:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002148:	2300      	movs	r3, #0
 800214a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800214c:	2300      	movs	r3, #0
 800214e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8002150:	2301      	movs	r3, #1
 8002152:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8002154:	2300      	movs	r3, #0
 8002156:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002158:	1d3b      	adds	r3, r7, #4
 800215a:	2200      	movs	r2, #0
 800215c:	4619      	mov	r1, r3
 800215e:	4806      	ldr	r0, [pc, #24]	; (8002178 <MX_DAC1_Init+0x5c>)
 8002160:	f003 fb2e 	bl	80057c0 <HAL_DAC_ConfigChannel>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800216a:	f000 fc9d 	bl	8002aa8 <Error_Handler>
//    Error_Handler();
//  }

  /* USER CODE END DAC1_Init 2 */

}
 800216e:	bf00      	nop
 8002170:	3728      	adds	r7, #40	; 0x28
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20000370 	.word	0x20000370
 800217c:	40007400 	.word	0x40007400

08002180 <MX_HRTIM_Init>:
  * @brief HRTIM Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM_Init(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b0a4      	sub	sp, #144	; 0x90
 8002184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM_Init 0 */

  /* USER CODE END HRTIM_Init 0 */

  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8002186:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800218a:	2200      	movs	r2, #0
 800218c:	601a      	str	r2, [r3, #0]
 800218e:	605a      	str	r2, [r3, #4]
 8002190:	609a      	str	r2, [r3, #8]
 8002192:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8002194:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002198:	2254      	movs	r2, #84	; 0x54
 800219a:	2100      	movs	r1, #0
 800219c:	4618      	mov	r0, r3
 800219e:	f017 fb23 	bl	80197e8 <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 80021a2:	f107 0320 	add.w	r3, r7, #32
 80021a6:	2200      	movs	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]
 80021aa:	605a      	str	r2, [r3, #4]
 80021ac:	609a      	str	r2, [r3, #8]
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 80021ae:	463b      	mov	r3, r7
 80021b0:	2220      	movs	r2, #32
 80021b2:	2100      	movs	r1, #0
 80021b4:	4618      	mov	r0, r3
 80021b6:	f017 fb17 	bl	80197e8 <memset>

  /* USER CODE BEGIN HRTIM_Init 1 */

  /* USER CODE END HRTIM_Init 1 */
  hhrtim.Instance = HRTIM1;
 80021ba:	4b98      	ldr	r3, [pc, #608]	; (800241c <MX_HRTIM_Init+0x29c>)
 80021bc:	4a98      	ldr	r2, [pc, #608]	; (8002420 <MX_HRTIM_Init+0x2a0>)
 80021be:	601a      	str	r2, [r3, #0]
  hhrtim.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 80021c0:	4b96      	ldr	r3, [pc, #600]	; (800241c <MX_HRTIM_Init+0x29c>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	605a      	str	r2, [r3, #4]
  hhrtim.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 80021c6:	4b95      	ldr	r3, [pc, #596]	; (800241c <MX_HRTIM_Init+0x29c>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim) != HAL_OK)
 80021cc:	4893      	ldr	r0, [pc, #588]	; (800241c <MX_HRTIM_Init+0x29c>)
 80021ce:	f005 f955 	bl	800747c <HAL_HRTIM_Init>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <MX_HRTIM_Init+0x5c>
  {
    Error_Handler();
 80021d8:	f000 fc66 	bl	8002aa8 <Error_Handler>
  }
  pTimeBaseCfg.Period = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME+PROBE_WIDTH+POP_CYCLE_DELAY;
 80021dc:	f24c 2318 	movw	r3, #49688	; 0xc218
 80021e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pTimeBaseCfg.RepetitionCounter = 0x00;
 80021e4:	2300      	movs	r3, #0
 80021e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV4;
 80021ea:	2307      	movs	r3, #7
 80021ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 80021f0:	2308      	movs	r3, #8
 80021f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 80021f6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80021fa:	461a      	mov	r2, r3
 80021fc:	2100      	movs	r1, #0
 80021fe:	4887      	ldr	r0, [pc, #540]	; (800241c <MX_HRTIM_Init+0x29c>)
 8002200:	f005 fa0c 	bl	800761c <HAL_HRTIM_TimeBaseConfig>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <MX_HRTIM_Init+0x8e>
  {
    Error_Handler();
 800220a:	f000 fc4d 	bl	8002aa8 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_CMP3|HRTIM_TIM_IT_REP;
 800220e:	2314      	movs	r3, #20
 8002210:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 8002212:	2300      	movs	r3, #0
 8002214:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.DMASrcAddress = 0x0000;
 8002216:	2300      	movs	r3, #0
 8002218:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.DMADstAddress = 0x0000;
 800221a:	2300      	movs	r3, #0
 800221c:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.DMASize = 0x1;
 800221e:	2301      	movs	r3, #1
 8002220:	63fb      	str	r3, [r7, #60]	; 0x3c
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 8002222:	2300      	movs	r3, #0
 8002224:	643b      	str	r3, [r7, #64]	; 0x40
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8002226:	2300      	movs	r3, #0
 8002228:	647b      	str	r3, [r7, #68]	; 0x44
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 800222a:	2300      	movs	r3, #0
 800222c:	64bb      	str	r3, [r7, #72]	; 0x48
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 800222e:	2300      	movs	r3, #0
 8002230:	64fb      	str	r3, [r7, #76]	; 0x4c
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 8002232:	2300      	movs	r3, #0
 8002234:	653b      	str	r3, [r7, #80]	; 0x50
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8002236:	2300      	movs	r3, #0
 8002238:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 800223a:	2300      	movs	r3, #0
 800223c:	65bb      	str	r3, [r7, #88]	; 0x58
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 800223e:	2300      	movs	r3, #0
 8002240:	65fb      	str	r3, [r7, #92]	; 0x5c
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 8002242:	2300      	movs	r3, #0
 8002244:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8002246:	2300      	movs	r3, #0
 8002248:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 800224a:	2300      	movs	r3, #0
 800224c:	66bb      	str	r3, [r7, #104]	; 0x68
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 800224e:	2300      	movs	r3, #0
 8002250:	66fb      	str	r3, [r7, #108]	; 0x6c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 8002252:	2300      	movs	r3, #0
 8002254:	673b      	str	r3, [r7, #112]	; 0x70
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 8002256:	2300      	movs	r3, #0
 8002258:	677b      	str	r3, [r7, #116]	; 0x74
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 800225a:	2300      	movs	r3, #0
 800225c:	67bb      	str	r3, [r7, #120]	; 0x78
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 800225e:	2300      	movs	r3, #0
 8002260:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 8002262:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002266:	461a      	mov	r2, r3
 8002268:	2100      	movs	r1, #0
 800226a:	486c      	ldr	r0, [pc, #432]	; (800241c <MX_HRTIM_Init+0x29c>)
 800226c:	f005 f9fe 	bl	800766c <HAL_HRTIM_WaveformTimerConfig>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <MX_HRTIM_Init+0xfa>
  {
    Error_Handler();
 8002276:	f000 fc17 	bl	8002aa8 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_CMP2|HRTIM_TIM_IT_CMP3;
 800227a:	2306      	movs	r3, #6
 800227c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 800227e:	2300      	movs	r3, #0
 8002280:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimerCfg) != HAL_OK)
 8002282:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002286:	461a      	mov	r2, r3
 8002288:	2104      	movs	r1, #4
 800228a:	4864      	ldr	r0, [pc, #400]	; (800241c <MX_HRTIM_Init+0x29c>)
 800228c:	f005 f9ee 	bl	800766c <HAL_HRTIM_WaveformTimerConfig>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <MX_HRTIM_Init+0x11a>
  {
    Error_Handler();
 8002296:	f000 fc07 	bl	8002aa8 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH;
 800229a:	f240 631b 	movw	r3, #1563	; 0x61b
 800229e:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 80022a0:	f107 0320 	add.w	r3, r7, #32
 80022a4:	2201      	movs	r2, #1
 80022a6:	2100      	movs	r1, #0
 80022a8:	485c      	ldr	r0, [pc, #368]	; (800241c <MX_HRTIM_Init+0x29c>)
 80022aa:	f005 fa51 	bl	8007750 <HAL_HRTIM_WaveformCompareConfig>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <MX_HRTIM_Init+0x138>
  {
    Error_Handler();
 80022b4:	f000 fbf8 	bl	8002aa8 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME;
 80022b8:	f244 5395 	movw	r3, #17813	; 0x4595
 80022bc:	623b      	str	r3, [r7, #32]
  pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 80022be:	2300      	movs	r3, #0
 80022c0:	627b      	str	r3, [r7, #36]	; 0x24
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 80022c2:	2300      	movs	r3, #0
 80022c4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 80022c6:	f107 0320 	add.w	r3, r7, #32
 80022ca:	2202      	movs	r2, #2
 80022cc:	2100      	movs	r1, #0
 80022ce:	4853      	ldr	r0, [pc, #332]	; (800241c <MX_HRTIM_Init+0x29c>)
 80022d0:	f005 fa3e 	bl	8007750 <HAL_HRTIM_WaveformCompareConfig>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <MX_HRTIM_Init+0x15e>
  {
    Error_Handler();
 80022da:	f000 fbe5 	bl	8002aa8 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH;
 80022de:	f640 536e 	movw	r3, #3438	; 0xd6e
 80022e2:	623b      	str	r3, [r7, #32]

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 80022e4:	f107 0320 	add.w	r3, r7, #32
 80022e8:	2202      	movs	r2, #2
 80022ea:	2104      	movs	r1, #4
 80022ec:	484b      	ldr	r0, [pc, #300]	; (800241c <MX_HRTIM_Init+0x29c>)
 80022ee:	f005 fa2f 	bl	8007750 <HAL_HRTIM_WaveformCompareConfig>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <MX_HRTIM_Init+0x17c>
  {
    Error_Handler();
 80022f8:	f000 fbd6 	bl	8002aa8 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME+PROBE_WIDTH;
 80022fc:	f644 0306 	movw	r3, #18438	; 0x4806
 8002300:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 8002302:	f107 0320 	add.w	r3, r7, #32
 8002306:	2204      	movs	r2, #4
 8002308:	2100      	movs	r1, #0
 800230a:	4844      	ldr	r0, [pc, #272]	; (800241c <MX_HRTIM_Init+0x29c>)
 800230c:	f005 fa20 	bl	8007750 <HAL_HRTIM_WaveformCompareConfig>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <MX_HRTIM_Init+0x19a>
  {
    Error_Handler();
 8002316:	f000 fbc7 	bl	8002aa8 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH+RAMSEY_TIME+MICROWAVE_WIDTH;
 800231a:	f244 435d 	movw	r3, #17501	; 0x445d
 800231e:	623b      	str	r3, [r7, #32]

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_4, &pCompareCfg) != HAL_OK)
 8002320:	f107 0320 	add.w	r3, r7, #32
 8002324:	2208      	movs	r2, #8
 8002326:	2104      	movs	r1, #4
 8002328:	483c      	ldr	r0, [pc, #240]	; (800241c <MX_HRTIM_Init+0x29c>)
 800232a:	f005 fa11 	bl	8007750 <HAL_HRTIM_WaveformCompareConfig>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <MX_HRTIM_Init+0x1b8>
  {
    Error_Handler();
 8002334:	f000 fbb8 	bl	8002aa8 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_LOW;
 8002338:	2302      	movs	r3, #2
 800233a:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP1|HRTIM_OUTPUTSET_TIMCMP3;
 800233c:	2328      	movs	r3, #40	; 0x28
 800233e:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2|HRTIM_OUTPUTRESET_TIMPER;
 8002340:	2314      	movs	r3, #20
 8002342:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8002344:	2300      	movs	r3, #0
 8002346:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_ACTIVE;
 8002348:	2308      	movs	r3, #8
 800234a:	613b      	str	r3, [r7, #16]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 800234c:	2300      	movs	r3, #0
 800234e:	617b      	str	r3, [r7, #20]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8002350:	2300      	movs	r3, #0
 8002352:	61bb      	str	r3, [r7, #24]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8002354:	2300      	movs	r3, #0
 8002356:	61fb      	str	r3, [r7, #28]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 8002358:	463b      	mov	r3, r7
 800235a:	2201      	movs	r2, #1
 800235c:	2100      	movs	r1, #0
 800235e:	482f      	ldr	r0, [pc, #188]	; (800241c <MX_HRTIM_Init+0x29c>)
 8002360:	f005 fb64 	bl	8007a2c <HAL_HRTIM_WaveformOutputConfig>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <MX_HRTIM_Init+0x1ee>
  {
    Error_Handler();
 800236a:	f000 fb9d 	bl	8002aa8 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 800236e:	2300      	movs	r3, #0
 8002370:	603b      	str	r3, [r7, #0]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2|HRTIM_OUTPUTRESET_TIMCMP4;
 8002372:	2350      	movs	r3, #80	; 0x50
 8002374:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8002376:	2300      	movs	r3, #0
 8002378:	613b      	str	r3, [r7, #16]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE1, &pOutputCfg) != HAL_OK)
 800237a:	463b      	mov	r3, r7
 800237c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002380:	2104      	movs	r1, #4
 8002382:	4826      	ldr	r0, [pc, #152]	; (800241c <MX_HRTIM_Init+0x29c>)
 8002384:	f005 fb52 	bl	8007a2c <HAL_HRTIM_WaveformOutputConfig>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <MX_HRTIM_Init+0x212>
  {
    Error_Handler();
 800238e:	f000 fb8b 	bl	8002aa8 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_LOW;
 8002392:	2302      	movs	r3, #2
 8002394:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP3;
 8002396:	2320      	movs	r3, #32
 8002398:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2;
 800239a:	2310      	movs	r3, #16
 800239c:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_ACTIVE;
 800239e:	2308      	movs	r3, #8
 80023a0:	613b      	str	r3, [r7, #16]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 80023a2:	463b      	mov	r3, r7
 80023a4:	2202      	movs	r2, #2
 80023a6:	2100      	movs	r1, #0
 80023a8:	481c      	ldr	r0, [pc, #112]	; (800241c <MX_HRTIM_Init+0x29c>)
 80023aa:	f005 fb3f 	bl	8007a2c <HAL_HRTIM_WaveformOutputConfig>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <MX_HRTIM_Init+0x238>
  {
    Error_Handler();
 80023b4:	f000 fb78 	bl	8002aa8 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimeBaseCfg) != HAL_OK)
 80023b8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80023bc:	461a      	mov	r2, r3
 80023be:	2104      	movs	r1, #4
 80023c0:	4816      	ldr	r0, [pc, #88]	; (800241c <MX_HRTIM_Init+0x29c>)
 80023c2:	f005 f92b 	bl	800761c <HAL_HRTIM_TimeBaseConfig>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <MX_HRTIM_Init+0x250>
  {
    Error_Handler();
 80023cc:	f000 fb6c 	bl	8002aa8 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY;
 80023d0:	f240 7353 	movw	r3, #1875	; 0x753
 80023d4:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 80023d6:	f107 0320 	add.w	r3, r7, #32
 80023da:	2201      	movs	r2, #1
 80023dc:	2104      	movs	r1, #4
 80023de:	480f      	ldr	r0, [pc, #60]	; (800241c <MX_HRTIM_Init+0x29c>)
 80023e0:	f005 f9b6 	bl	8007750 <HAL_HRTIM_WaveformCompareConfig>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <MX_HRTIM_Init+0x26e>
  {
    Error_Handler();
 80023ea:	f000 fb5d 	bl	8002aa8 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH+RAMSEY_TIME;
 80023ee:	f643 6342 	movw	r3, #15938	; 0x3e42
 80023f2:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 80023f4:	f107 0320 	add.w	r3, r7, #32
 80023f8:	2204      	movs	r2, #4
 80023fa:	2104      	movs	r1, #4
 80023fc:	4807      	ldr	r0, [pc, #28]	; (800241c <MX_HRTIM_Init+0x29c>)
 80023fe:	f005 f9a7 	bl	8007750 <HAL_HRTIM_WaveformCompareConfig>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <MX_HRTIM_Init+0x28c>
  {
    Error_Handler();
 8002408:	f000 fb4e 	bl	8002aa8 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM_Init 2 */

  /* USER CODE END HRTIM_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim);
 800240c:	4803      	ldr	r0, [pc, #12]	; (800241c <MX_HRTIM_Init+0x29c>)
 800240e:	f000 fc8d 	bl	8002d2c <HAL_HRTIM_MspPostInit>

}
 8002412:	bf00      	nop
 8002414:	3790      	adds	r7, #144	; 0x90
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	20000384 	.word	0x20000384
 8002420:	40017400 	.word	0x40017400

08002424 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8002428:	4b13      	ldr	r3, [pc, #76]	; (8002478 <MX_LPTIM1_Init+0x54>)
 800242a:	4a14      	ldr	r2, [pc, #80]	; (800247c <MX_LPTIM1_Init+0x58>)
 800242c:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800242e:	4b12      	ldr	r3, [pc, #72]	; (8002478 <MX_LPTIM1_Init+0x54>)
 8002430:	2200      	movs	r2, #0
 8002432:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV32;
 8002434:	4b10      	ldr	r3, [pc, #64]	; (8002478 <MX_LPTIM1_Init+0x54>)
 8002436:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800243a:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800243c:	4b0e      	ldr	r3, [pc, #56]	; (8002478 <MX_LPTIM1_Init+0x54>)
 800243e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002442:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8002444:	4b0c      	ldr	r3, [pc, #48]	; (8002478 <MX_LPTIM1_Init+0x54>)
 8002446:	2200      	movs	r2, #0
 8002448:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 800244a:	4b0b      	ldr	r3, [pc, #44]	; (8002478 <MX_LPTIM1_Init+0x54>)
 800244c:	2200      	movs	r2, #0
 800244e:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8002450:	4b09      	ldr	r3, [pc, #36]	; (8002478 <MX_LPTIM1_Init+0x54>)
 8002452:	2200      	movs	r2, #0
 8002454:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8002456:	4b08      	ldr	r3, [pc, #32]	; (8002478 <MX_LPTIM1_Init+0x54>)
 8002458:	2200      	movs	r2, #0
 800245a:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 800245c:	4b06      	ldr	r3, [pc, #24]	; (8002478 <MX_LPTIM1_Init+0x54>)
 800245e:	2200      	movs	r2, #0
 8002460:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8002462:	4805      	ldr	r0, [pc, #20]	; (8002478 <MX_LPTIM1_Init+0x54>)
 8002464:	f006 fb0e 	bl	8008a84 <HAL_LPTIM_Init>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 800246e:	f000 fb1b 	bl	8002aa8 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	20000460 	.word	0x20000460
 800247c:	40002400 	.word	0x40002400

08002480 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b088      	sub	sp, #32
 8002484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002486:	f107 0310 	add.w	r3, r7, #16
 800248a:	2200      	movs	r2, #0
 800248c:	601a      	str	r2, [r3, #0]
 800248e:	605a      	str	r2, [r3, #4]
 8002490:	609a      	str	r2, [r3, #8]
 8002492:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002494:	1d3b      	adds	r3, r7, #4
 8002496:	2200      	movs	r2, #0
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	605a      	str	r2, [r3, #4]
 800249c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800249e:	4b20      	ldr	r3, [pc, #128]	; (8002520 <MX_TIM1_Init+0xa0>)
 80024a0:	4a20      	ldr	r2, [pc, #128]	; (8002524 <MX_TIM1_Init+0xa4>)
 80024a2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1249;
 80024a4:	4b1e      	ldr	r3, [pc, #120]	; (8002520 <MX_TIM1_Init+0xa0>)
 80024a6:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80024aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024ac:	4b1c      	ldr	r3, [pc, #112]	; (8002520 <MX_TIM1_Init+0xa0>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80024b2:	4b1b      	ldr	r3, [pc, #108]	; (8002520 <MX_TIM1_Init+0xa0>)
 80024b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024b8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024ba:	4b19      	ldr	r3, [pc, #100]	; (8002520 <MX_TIM1_Init+0xa0>)
 80024bc:	2200      	movs	r2, #0
 80024be:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80024c0:	4b17      	ldr	r3, [pc, #92]	; (8002520 <MX_TIM1_Init+0xa0>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024c6:	4b16      	ldr	r3, [pc, #88]	; (8002520 <MX_TIM1_Init+0xa0>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80024cc:	4814      	ldr	r0, [pc, #80]	; (8002520 <MX_TIM1_Init+0xa0>)
 80024ce:	f00a fc87 	bl	800cde0 <HAL_TIM_Base_Init>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 80024d8:	f000 fae6 	bl	8002aa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80024e2:	f107 0310 	add.w	r3, r7, #16
 80024e6:	4619      	mov	r1, r3
 80024e8:	480d      	ldr	r0, [pc, #52]	; (8002520 <MX_TIM1_Init+0xa0>)
 80024ea:	f00a fcd1 	bl	800ce90 <HAL_TIM_ConfigClockSource>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80024f4:	f000 fad8 	bl	8002aa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024f8:	2300      	movs	r3, #0
 80024fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80024fc:	2300      	movs	r3, #0
 80024fe:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002500:	2300      	movs	r3, #0
 8002502:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002504:	1d3b      	adds	r3, r7, #4
 8002506:	4619      	mov	r1, r3
 8002508:	4805      	ldr	r0, [pc, #20]	; (8002520 <MX_TIM1_Init+0xa0>)
 800250a:	f00a fef1 	bl	800d2f0 <HAL_TIMEx_MasterConfigSynchronization>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002514:	f000 fac8 	bl	8002aa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002518:	bf00      	nop
 800251a:	3720      	adds	r7, #32
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	20000498 	.word	0x20000498
 8002524:	40010000 	.word	0x40010000

08002528 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b088      	sub	sp, #32
 800252c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800252e:	f107 0310 	add.w	r3, r7, #16
 8002532:	2200      	movs	r2, #0
 8002534:	601a      	str	r2, [r3, #0]
 8002536:	605a      	str	r2, [r3, #4]
 8002538:	609a      	str	r2, [r3, #8]
 800253a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800253c:	1d3b      	adds	r3, r7, #4
 800253e:	2200      	movs	r2, #0
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	605a      	str	r2, [r3, #4]
 8002544:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002546:	4b1e      	ldr	r3, [pc, #120]	; (80025c0 <MX_TIM2_Init+0x98>)
 8002548:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800254c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 124;
 800254e:	4b1c      	ldr	r3, [pc, #112]	; (80025c0 <MX_TIM2_Init+0x98>)
 8002550:	227c      	movs	r2, #124	; 0x7c
 8002552:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002554:	4b1a      	ldr	r3, [pc, #104]	; (80025c0 <MX_TIM2_Init+0x98>)
 8002556:	2200      	movs	r2, #0
 8002558:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800255a:	4b19      	ldr	r3, [pc, #100]	; (80025c0 <MX_TIM2_Init+0x98>)
 800255c:	f04f 32ff 	mov.w	r2, #4294967295
 8002560:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002562:	4b17      	ldr	r3, [pc, #92]	; (80025c0 <MX_TIM2_Init+0x98>)
 8002564:	2200      	movs	r2, #0
 8002566:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002568:	4b15      	ldr	r3, [pc, #84]	; (80025c0 <MX_TIM2_Init+0x98>)
 800256a:	2200      	movs	r2, #0
 800256c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800256e:	4814      	ldr	r0, [pc, #80]	; (80025c0 <MX_TIM2_Init+0x98>)
 8002570:	f00a fc36 	bl	800cde0 <HAL_TIM_Base_Init>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800257a:	f000 fa95 	bl	8002aa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800257e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002582:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002584:	f107 0310 	add.w	r3, r7, #16
 8002588:	4619      	mov	r1, r3
 800258a:	480d      	ldr	r0, [pc, #52]	; (80025c0 <MX_TIM2_Init+0x98>)
 800258c:	f00a fc80 	bl	800ce90 <HAL_TIM_ConfigClockSource>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002596:	f000 fa87 	bl	8002aa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800259a:	2300      	movs	r3, #0
 800259c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800259e:	2300      	movs	r3, #0
 80025a0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025a2:	1d3b      	adds	r3, r7, #4
 80025a4:	4619      	mov	r1, r3
 80025a6:	4806      	ldr	r0, [pc, #24]	; (80025c0 <MX_TIM2_Init+0x98>)
 80025a8:	f00a fea2 	bl	800d2f0 <HAL_TIMEx_MasterConfigSynchronization>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80025b2:	f000 fa79 	bl	8002aa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80025b6:	bf00      	nop
 80025b8:	3720      	adds	r7, #32
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	200004e4 	.word	0x200004e4

080025c4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b088      	sub	sp, #32
 80025c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025ca:	f107 0310 	add.w	r3, r7, #16
 80025ce:	2200      	movs	r2, #0
 80025d0:	601a      	str	r2, [r3, #0]
 80025d2:	605a      	str	r2, [r3, #4]
 80025d4:	609a      	str	r2, [r3, #8]
 80025d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025d8:	1d3b      	adds	r3, r7, #4
 80025da:	2200      	movs	r2, #0
 80025dc:	601a      	str	r2, [r3, #0]
 80025de:	605a      	str	r2, [r3, #4]
 80025e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80025e2:	4b1d      	ldr	r3, [pc, #116]	; (8002658 <MX_TIM3_Init+0x94>)
 80025e4:	4a1d      	ldr	r2, [pc, #116]	; (800265c <MX_TIM3_Init+0x98>)
 80025e6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 124;
 80025e8:	4b1b      	ldr	r3, [pc, #108]	; (8002658 <MX_TIM3_Init+0x94>)
 80025ea:	227c      	movs	r2, #124	; 0x7c
 80025ec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ee:	4b1a      	ldr	r3, [pc, #104]	; (8002658 <MX_TIM3_Init+0x94>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80025f4:	4b18      	ldr	r3, [pc, #96]	; (8002658 <MX_TIM3_Init+0x94>)
 80025f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025fa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025fc:	4b16      	ldr	r3, [pc, #88]	; (8002658 <MX_TIM3_Init+0x94>)
 80025fe:	2200      	movs	r2, #0
 8002600:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002602:	4b15      	ldr	r3, [pc, #84]	; (8002658 <MX_TIM3_Init+0x94>)
 8002604:	2200      	movs	r2, #0
 8002606:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002608:	4813      	ldr	r0, [pc, #76]	; (8002658 <MX_TIM3_Init+0x94>)
 800260a:	f00a fbe9 	bl	800cde0 <HAL_TIM_Base_Init>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002614:	f000 fa48 	bl	8002aa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002618:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800261c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800261e:	f107 0310 	add.w	r3, r7, #16
 8002622:	4619      	mov	r1, r3
 8002624:	480c      	ldr	r0, [pc, #48]	; (8002658 <MX_TIM3_Init+0x94>)
 8002626:	f00a fc33 	bl	800ce90 <HAL_TIM_ConfigClockSource>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002630:	f000 fa3a 	bl	8002aa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002634:	2300      	movs	r3, #0
 8002636:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002638:	2300      	movs	r3, #0
 800263a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800263c:	1d3b      	adds	r3, r7, #4
 800263e:	4619      	mov	r1, r3
 8002640:	4805      	ldr	r0, [pc, #20]	; (8002658 <MX_TIM3_Init+0x94>)
 8002642:	f00a fe55 	bl	800d2f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800264c:	f000 fa2c 	bl	8002aa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002650:	bf00      	nop
 8002652:	3720      	adds	r7, #32
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	20000530 	.word	0x20000530
 800265c:	40000400 	.word	0x40000400

08002660 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b088      	sub	sp, #32
 8002664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002666:	f107 0310 	add.w	r3, r7, #16
 800266a:	2200      	movs	r2, #0
 800266c:	601a      	str	r2, [r3, #0]
 800266e:	605a      	str	r2, [r3, #4]
 8002670:	609a      	str	r2, [r3, #8]
 8002672:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002674:	1d3b      	adds	r3, r7, #4
 8002676:	2200      	movs	r2, #0
 8002678:	601a      	str	r2, [r3, #0]
 800267a:	605a      	str	r2, [r3, #4]
 800267c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800267e:	4b1d      	ldr	r3, [pc, #116]	; (80026f4 <MX_TIM5_Init+0x94>)
 8002680:	4a1d      	ldr	r2, [pc, #116]	; (80026f8 <MX_TIM5_Init+0x98>)
 8002682:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 124;
 8002684:	4b1b      	ldr	r3, [pc, #108]	; (80026f4 <MX_TIM5_Init+0x94>)
 8002686:	227c      	movs	r2, #124	; 0x7c
 8002688:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800268a:	4b1a      	ldr	r3, [pc, #104]	; (80026f4 <MX_TIM5_Init+0x94>)
 800268c:	2200      	movs	r2, #0
 800268e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002690:	4b18      	ldr	r3, [pc, #96]	; (80026f4 <MX_TIM5_Init+0x94>)
 8002692:	f04f 32ff 	mov.w	r2, #4294967295
 8002696:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002698:	4b16      	ldr	r3, [pc, #88]	; (80026f4 <MX_TIM5_Init+0x94>)
 800269a:	2200      	movs	r2, #0
 800269c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800269e:	4b15      	ldr	r3, [pc, #84]	; (80026f4 <MX_TIM5_Init+0x94>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80026a4:	4813      	ldr	r0, [pc, #76]	; (80026f4 <MX_TIM5_Init+0x94>)
 80026a6:	f00a fb9b 	bl	800cde0 <HAL_TIM_Base_Init>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80026b0:	f000 f9fa 	bl	8002aa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026b8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80026ba:	f107 0310 	add.w	r3, r7, #16
 80026be:	4619      	mov	r1, r3
 80026c0:	480c      	ldr	r0, [pc, #48]	; (80026f4 <MX_TIM5_Init+0x94>)
 80026c2:	f00a fbe5 	bl	800ce90 <HAL_TIM_ConfigClockSource>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80026cc:	f000 f9ec 	bl	8002aa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026d0:	2300      	movs	r3, #0
 80026d2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026d4:	2300      	movs	r3, #0
 80026d6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80026d8:	1d3b      	adds	r3, r7, #4
 80026da:	4619      	mov	r1, r3
 80026dc:	4805      	ldr	r0, [pc, #20]	; (80026f4 <MX_TIM5_Init+0x94>)
 80026de:	f00a fe07 	bl	800d2f0 <HAL_TIMEx_MasterConfigSynchronization>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80026e8:	f000 f9de 	bl	8002aa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80026ec:	bf00      	nop
 80026ee:	3720      	adds	r7, #32
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	2000057c 	.word	0x2000057c
 80026f8:	40000c00 	.word	0x40000c00

080026fc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002700:	4b22      	ldr	r3, [pc, #136]	; (800278c <MX_USART3_UART_Init+0x90>)
 8002702:	4a23      	ldr	r2, [pc, #140]	; (8002790 <MX_USART3_UART_Init+0x94>)
 8002704:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1000000;
 8002706:	4b21      	ldr	r3, [pc, #132]	; (800278c <MX_USART3_UART_Init+0x90>)
 8002708:	4a22      	ldr	r2, [pc, #136]	; (8002794 <MX_USART3_UART_Init+0x98>)
 800270a:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800270c:	4b1f      	ldr	r3, [pc, #124]	; (800278c <MX_USART3_UART_Init+0x90>)
 800270e:	2200      	movs	r2, #0
 8002710:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002712:	4b1e      	ldr	r3, [pc, #120]	; (800278c <MX_USART3_UART_Init+0x90>)
 8002714:	2200      	movs	r2, #0
 8002716:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002718:	4b1c      	ldr	r3, [pc, #112]	; (800278c <MX_USART3_UART_Init+0x90>)
 800271a:	2200      	movs	r2, #0
 800271c:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800271e:	4b1b      	ldr	r3, [pc, #108]	; (800278c <MX_USART3_UART_Init+0x90>)
 8002720:	220c      	movs	r2, #12
 8002722:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002724:	4b19      	ldr	r3, [pc, #100]	; (800278c <MX_USART3_UART_Init+0x90>)
 8002726:	2200      	movs	r2, #0
 8002728:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800272a:	4b18      	ldr	r3, [pc, #96]	; (800278c <MX_USART3_UART_Init+0x90>)
 800272c:	2200      	movs	r2, #0
 800272e:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002730:	4b16      	ldr	r3, [pc, #88]	; (800278c <MX_USART3_UART_Init+0x90>)
 8002732:	2200      	movs	r2, #0
 8002734:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002736:	4b15      	ldr	r3, [pc, #84]	; (800278c <MX_USART3_UART_Init+0x90>)
 8002738:	2200      	movs	r2, #0
 800273a:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800273c:	4b13      	ldr	r3, [pc, #76]	; (800278c <MX_USART3_UART_Init+0x90>)
 800273e:	2200      	movs	r2, #0
 8002740:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002742:	4812      	ldr	r0, [pc, #72]	; (800278c <MX_USART3_UART_Init+0x90>)
 8002744:	f00a fe62 	bl	800d40c <HAL_UART_Init>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 800274e:	f000 f9ab 	bl	8002aa8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002752:	2100      	movs	r1, #0
 8002754:	480d      	ldr	r0, [pc, #52]	; (800278c <MX_USART3_UART_Init+0x90>)
 8002756:	f00b fef2 	bl	800e53e <HAL_UARTEx_SetTxFifoThreshold>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8002760:	f000 f9a2 	bl	8002aa8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002764:	2100      	movs	r1, #0
 8002766:	4809      	ldr	r0, [pc, #36]	; (800278c <MX_USART3_UART_Init+0x90>)
 8002768:	f00b ff27 	bl	800e5ba <HAL_UARTEx_SetRxFifoThreshold>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8002772:	f000 f999 	bl	8002aa8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002776:	4805      	ldr	r0, [pc, #20]	; (800278c <MX_USART3_UART_Init+0x90>)
 8002778:	f00b fea8 	bl	800e4cc <HAL_UARTEx_DisableFifoMode>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8002782:	f000 f991 	bl	8002aa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002786:	bf00      	nop
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	200005c8 	.word	0x200005c8
 8002790:	40004800 	.word	0x40004800
 8002794:	000f4240 	.word	0x000f4240

08002798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b08e      	sub	sp, #56	; 0x38
 800279c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800279e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027a2:	2200      	movs	r2, #0
 80027a4:	601a      	str	r2, [r3, #0]
 80027a6:	605a      	str	r2, [r3, #4]
 80027a8:	609a      	str	r2, [r3, #8]
 80027aa:	60da      	str	r2, [r3, #12]
 80027ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80027ae:	4ba0      	ldr	r3, [pc, #640]	; (8002a30 <MX_GPIO_Init+0x298>)
 80027b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027b4:	4a9e      	ldr	r2, [pc, #632]	; (8002a30 <MX_GPIO_Init+0x298>)
 80027b6:	f043 0310 	orr.w	r3, r3, #16
 80027ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027be:	4b9c      	ldr	r3, [pc, #624]	; (8002a30 <MX_GPIO_Init+0x298>)
 80027c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027c4:	f003 0310 	and.w	r3, r3, #16
 80027c8:	623b      	str	r3, [r7, #32]
 80027ca:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027cc:	4b98      	ldr	r3, [pc, #608]	; (8002a30 <MX_GPIO_Init+0x298>)
 80027ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027d2:	4a97      	ldr	r2, [pc, #604]	; (8002a30 <MX_GPIO_Init+0x298>)
 80027d4:	f043 0304 	orr.w	r3, r3, #4
 80027d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027dc:	4b94      	ldr	r3, [pc, #592]	; (8002a30 <MX_GPIO_Init+0x298>)
 80027de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027e2:	f003 0304 	and.w	r3, r3, #4
 80027e6:	61fb      	str	r3, [r7, #28]
 80027e8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80027ea:	4b91      	ldr	r3, [pc, #580]	; (8002a30 <MX_GPIO_Init+0x298>)
 80027ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027f0:	4a8f      	ldr	r2, [pc, #572]	; (8002a30 <MX_GPIO_Init+0x298>)
 80027f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027fa:	4b8d      	ldr	r3, [pc, #564]	; (8002a30 <MX_GPIO_Init+0x298>)
 80027fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002804:	61bb      	str	r3, [r7, #24]
 8002806:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002808:	4b89      	ldr	r3, [pc, #548]	; (8002a30 <MX_GPIO_Init+0x298>)
 800280a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800280e:	4a88      	ldr	r2, [pc, #544]	; (8002a30 <MX_GPIO_Init+0x298>)
 8002810:	f043 0301 	orr.w	r3, r3, #1
 8002814:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002818:	4b85      	ldr	r3, [pc, #532]	; (8002a30 <MX_GPIO_Init+0x298>)
 800281a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	617b      	str	r3, [r7, #20]
 8002824:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002826:	4b82      	ldr	r3, [pc, #520]	; (8002a30 <MX_GPIO_Init+0x298>)
 8002828:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800282c:	4a80      	ldr	r2, [pc, #512]	; (8002a30 <MX_GPIO_Init+0x298>)
 800282e:	f043 0302 	orr.w	r3, r3, #2
 8002832:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002836:	4b7e      	ldr	r3, [pc, #504]	; (8002a30 <MX_GPIO_Init+0x298>)
 8002838:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	613b      	str	r3, [r7, #16]
 8002842:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002844:	4b7a      	ldr	r3, [pc, #488]	; (8002a30 <MX_GPIO_Init+0x298>)
 8002846:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800284a:	4a79      	ldr	r2, [pc, #484]	; (8002a30 <MX_GPIO_Init+0x298>)
 800284c:	f043 0320 	orr.w	r3, r3, #32
 8002850:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002854:	4b76      	ldr	r3, [pc, #472]	; (8002a30 <MX_GPIO_Init+0x298>)
 8002856:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800285a:	f003 0320 	and.w	r3, r3, #32
 800285e:	60fb      	str	r3, [r7, #12]
 8002860:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002862:	4b73      	ldr	r3, [pc, #460]	; (8002a30 <MX_GPIO_Init+0x298>)
 8002864:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002868:	4a71      	ldr	r2, [pc, #452]	; (8002a30 <MX_GPIO_Init+0x298>)
 800286a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800286e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002872:	4b6f      	ldr	r3, [pc, #444]	; (8002a30 <MX_GPIO_Init+0x298>)
 8002874:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800287c:	60bb      	str	r3, [r7, #8]
 800287e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002880:	4b6b      	ldr	r3, [pc, #428]	; (8002a30 <MX_GPIO_Init+0x298>)
 8002882:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002886:	4a6a      	ldr	r2, [pc, #424]	; (8002a30 <MX_GPIO_Init+0x298>)
 8002888:	f043 0308 	orr.w	r3, r3, #8
 800288c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002890:	4b67      	ldr	r3, [pc, #412]	; (8002a30 <MX_GPIO_Init+0x298>)
 8002892:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002896:	f003 0308 	and.w	r3, r3, #8
 800289a:	607b      	str	r3, [r7, #4]
 800289c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ATT_4_Pin|ATT_8_Pin|ATT_16_Pin, GPIO_PIN_SET);
 800289e:	2201      	movs	r2, #1
 80028a0:	2134      	movs	r1, #52	; 0x34
 80028a2:	4864      	ldr	r0, [pc, #400]	; (8002a34 <MX_GPIO_Init+0x29c>)
 80028a4:	f004 fd92 	bl	80073cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|MW_INVALID_Pin|LASER_TUNING_Pin|LD3_Pin
 80028a8:	2200      	movs	r2, #0
 80028aa:	f245 1103 	movw	r1, #20739	; 0x5103
 80028ae:	4862      	ldr	r0, [pc, #392]	; (8002a38 <MX_GPIO_Init+0x2a0>)
 80028b0:	f004 fd8c 	bl	80073cc <HAL_GPIO_WritePin>
                          |SPARE_OUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET);
 80028b4:	2200      	movs	r2, #0
 80028b6:	2101      	movs	r1, #1
 80028b8:	4860      	ldr	r0, [pc, #384]	; (8002a3c <MX_GPIO_Init+0x2a4>)
 80028ba:	f004 fd87 	bl	80073cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80028be:	2200      	movs	r2, #0
 80028c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80028c4:	485e      	ldr	r0, [pc, #376]	; (8002a40 <MX_GPIO_Init+0x2a8>)
 80028c6:	f004 fd81 	bl	80073cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SCLK_Pin|MOSI_Pin|REG_EN_Pin, GPIO_PIN_RESET);
 80028ca:	2200      	movs	r2, #0
 80028cc:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 80028d0:	485c      	ldr	r0, [pc, #368]	; (8002a44 <MX_GPIO_Init+0x2ac>)
 80028d2:	f004 fd7b 	bl	80073cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 80028d6:	2201      	movs	r2, #1
 80028d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80028dc:	4859      	ldr	r0, [pc, #356]	; (8002a44 <MX_GPIO_Init+0x2ac>)
 80028de:	f004 fd75 	bl	80073cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ATT_2_Pin|ATT_1_Pin|ATT_05_Pin|ATT_025_Pin
 80028e2:	2201      	movs	r2, #1
 80028e4:	21f8      	movs	r1, #248	; 0xf8
 80028e6:	4856      	ldr	r0, [pc, #344]	; (8002a40 <MX_GPIO_Init+0x2a8>)
 80028e8:	f004 fd70 	bl	80073cc <HAL_GPIO_WritePin>
                          |ATT_LE_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80028ec:	2200      	movs	r2, #0
 80028ee:	2102      	movs	r1, #2
 80028f0:	4850      	ldr	r0, [pc, #320]	; (8002a34 <MX_GPIO_Init+0x29c>)
 80028f2:	f004 fd6b 	bl	80073cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ATT_4_Pin ATT_8_Pin ATT_16_Pin LD2_Pin */
  GPIO_InitStruct.Pin = ATT_4_Pin|ATT_8_Pin|ATT_16_Pin|LD2_Pin;
 80028f6:	2336      	movs	r3, #54	; 0x36
 80028f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028fa:	2301      	movs	r3, #1
 80028fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fe:	2300      	movs	r3, #0
 8002900:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002902:	2300      	movs	r3, #0
 8002904:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002906:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800290a:	4619      	mov	r1, r3
 800290c:	4849      	ldr	r0, [pc, #292]	; (8002a34 <MX_GPIO_Init+0x29c>)
 800290e:	f004 fb95 	bl	800703c <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 8002912:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002916:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002918:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800291c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291e:	2300      	movs	r3, #0
 8002920:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002922:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002926:	4619      	mov	r1, r3
 8002928:	4846      	ldr	r0, [pc, #280]	; (8002a44 <MX_GPIO_Init+0x2ac>)
 800292a:	f004 fb87 	bl	800703c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin MW_INVALID_Pin LASER_TUNING_Pin LD3_Pin
                           SPARE_OUT_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|MW_INVALID_Pin|LASER_TUNING_Pin|LD3_Pin
 800292e:	f245 1303 	movw	r3, #20739	; 0x5103
 8002932:	627b      	str	r3, [r7, #36]	; 0x24
                          |SPARE_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002934:	2301      	movs	r3, #1
 8002936:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002938:	2300      	movs	r3, #0
 800293a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800293c:	2300      	movs	r3, #0
 800293e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002940:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002944:	4619      	mov	r1, r3
 8002946:	483c      	ldr	r0, [pc, #240]	; (8002a38 <MX_GPIO_Init+0x2a0>)
 8002948:	f004 fb78 	bl	800703c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800294c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002950:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002952:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002956:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002958:	2300      	movs	r3, #0
 800295a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800295c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002960:	4619      	mov	r1, r3
 8002962:	4839      	ldr	r0, [pc, #228]	; (8002a48 <MX_GPIO_Init+0x2b0>)
 8002964:	f004 fb6a 	bl	800703c <HAL_GPIO_Init>

  /*Configure GPIO pin : SCOPE_TRIG_OUT_Pin */
  GPIO_InitStruct.Pin = SCOPE_TRIG_OUT_Pin;
 8002968:	2301      	movs	r3, #1
 800296a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800296c:	2301      	movs	r3, #1
 800296e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002970:	2300      	movs	r3, #0
 8002972:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002974:	2300      	movs	r3, #0
 8002976:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SCOPE_TRIG_OUT_GPIO_Port, &GPIO_InitStruct);
 8002978:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800297c:	4619      	mov	r1, r3
 800297e:	482f      	ldr	r0, [pc, #188]	; (8002a3c <MX_GPIO_Init+0x2a4>)
 8002980:	f004 fb5c 	bl	800703c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin ATT_2_Pin ATT_1_Pin ATT_05_Pin
                           ATT_025_Pin ATT_LE_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|ATT_2_Pin|ATT_1_Pin|ATT_05_Pin
 8002984:	f44f 639f 	mov.w	r3, #1272	; 0x4f8
 8002988:	627b      	str	r3, [r7, #36]	; 0x24
                          |ATT_025_Pin|ATT_LE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800298a:	2301      	movs	r3, #1
 800298c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298e:	2300      	movs	r3, #0
 8002990:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002992:	2300      	movs	r3, #0
 8002994:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002996:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800299a:	4619      	mov	r1, r3
 800299c:	4828      	ldr	r0, [pc, #160]	; (8002a40 <MX_GPIO_Init+0x2a8>)
 800299e:	f004 fb4d 	bl	800703c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 80029a2:	2380      	movs	r3, #128	; 0x80
 80029a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029a6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80029aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ac:	2300      	movs	r3, #0
 80029ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80029b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029b4:	4619      	mov	r1, r3
 80029b6:	4821      	ldr	r0, [pc, #132]	; (8002a3c <MX_GPIO_Init+0x2a4>)
 80029b8:	f004 fb40 	bl	800703c <HAL_GPIO_Init>

  /*Configure GPIO pins : SCLK_Pin MOSI_Pin SEN_Pin REG_EN_Pin */
  GPIO_InitStruct.Pin = SCLK_Pin|MOSI_Pin|SEN_Pin|REG_EN_Pin;
 80029bc:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 80029c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029c2:	2301      	movs	r3, #1
 80029c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80029c6:	2302      	movs	r3, #2
 80029c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ca:	2300      	movs	r3, #0
 80029cc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029d2:	4619      	mov	r1, r3
 80029d4:	481b      	ldr	r0, [pc, #108]	; (8002a44 <MX_GPIO_Init+0x2ac>)
 80029d6:	f004 fb31 	bl	800703c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80029da:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80029de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e0:	2302      	movs	r3, #2
 80029e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e4:	2300      	movs	r3, #0
 80029e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e8:	2300      	movs	r3, #0
 80029ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80029ec:	230a      	movs	r3, #10
 80029ee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029f4:	4619      	mov	r1, r3
 80029f6:	4815      	ldr	r0, [pc, #84]	; (8002a4c <MX_GPIO_Init+0x2b4>)
 80029f8:	f004 fb20 	bl	800703c <HAL_GPIO_Init>

  /*Configure GPIO pin : MISO_Pin */
  GPIO_InitStruct.Pin = MISO_Pin;
 80029fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a02:	2300      	movs	r3, #0
 8002a04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a06:	2300      	movs	r3, #0
 8002a08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MISO_GPIO_Port, &GPIO_InitStruct);
 8002a0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a0e:	4619      	mov	r1, r3
 8002a10:	480c      	ldr	r0, [pc, #48]	; (8002a44 <MX_GPIO_Init+0x2ac>)
 8002a12:	f004 fb13 	bl	800703c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002a16:	2200      	movs	r2, #0
 8002a18:	2100      	movs	r1, #0
 8002a1a:	2028      	movs	r0, #40	; 0x28
 8002a1c:	f002 fe03 	bl	8005626 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002a20:	2028      	movs	r0, #40	; 0x28
 8002a22:	f002 fe1a 	bl	800565a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002a26:	bf00      	nop
 8002a28:	3738      	adds	r7, #56	; 0x38
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	58024400 	.word	0x58024400
 8002a34:	58021000 	.word	0x58021000
 8002a38:	58020400 	.word	0x58020400
 8002a3c:	58021800 	.word	0x58021800
 8002a40:	58020c00 	.word	0x58020c00
 8002a44:	58020800 	.word	0x58020800
 8002a48:	58021400 	.word	0x58021400
 8002a4c:	58020000 	.word	0x58020000

08002a50 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  adc_val = HAL_ADC_GetValue(&hadc3);
 8002a58:	480e      	ldr	r0, [pc, #56]	; (8002a94 <HAL_ADC_ConvCpltCallback+0x44>)
 8002a5a:	f001 fc9f 	bl	800439c <HAL_ADC_GetValue>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	4a0d      	ldr	r2, [pc, #52]	; (8002a98 <HAL_ADC_ConvCpltCallback+0x48>)
 8002a62:	6013      	str	r3, [r2, #0]
  //printf("ADC value: %lu \r\n", adc_val);
  dac_val = adc_val >> 4;
 8002a64:	4b0c      	ldr	r3, [pc, #48]	; (8002a98 <HAL_ADC_ConvCpltCallback+0x48>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	091b      	lsrs	r3, r3, #4
 8002a6a:	4a0c      	ldr	r2, [pc, #48]	; (8002a9c <HAL_ADC_ConvCpltCallback+0x4c>)
 8002a6c:	6013      	str	r3, [r2, #0]
  sample_count++;
 8002a6e:	4b0c      	ldr	r3, [pc, #48]	; (8002aa0 <HAL_ADC_ConvCpltCallback+0x50>)
 8002a70:	881b      	ldrh	r3, [r3, #0]
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	3301      	adds	r3, #1
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	4b09      	ldr	r3, [pc, #36]	; (8002aa0 <HAL_ADC_ConvCpltCallback+0x50>)
 8002a7a:	801a      	strh	r2, [r3, #0]
	  printf("ADC reading: %lu, max: %lu, min: %lu \r\n", adc_val, adc_max, adc_min);
  }
  //printf("ADC reading: %lu, max: %lu, min: %lu \r\n", adc_val, adc_max, adc_min);
#endif //QUANTIFY_ADC_NOISE
  //printf("ADC value: %lu, DAC value: %lu \r\n", adc_val, dac_val);
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_val);
 8002a7c:	4b07      	ldr	r3, [pc, #28]	; (8002a9c <HAL_ADC_ConvCpltCallback+0x4c>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2200      	movs	r2, #0
 8002a82:	2100      	movs	r1, #0
 8002a84:	4807      	ldr	r0, [pc, #28]	; (8002aa4 <HAL_ADC_ConvCpltCallback+0x54>)
 8002a86:	f002 fe76 	bl	8005776 <HAL_DAC_SetValue>
  //HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);
}
 8002a8a:	bf00      	nop
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	2000030c 	.word	0x2000030c
 8002a98:	20000664 	.word	0x20000664
 8002a9c:	20000668 	.word	0x20000668
 8002aa0:	2000065e 	.word	0x2000065e
 8002aa4:	20000370 	.word	0x20000370

08002aa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002aac:	b672      	cpsid	i
}
 8002aae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	__disable_irq();

	printf("Error handler routine called\r\n");
 8002ab0:	4810      	ldr	r0, [pc, #64]	; (8002af4 <Error_Handler+0x4c>)
 8002ab2:	f016 fda9 	bl	8019608 <puts>

	/* Disable the AOM */
	HAL_HRTIM_WaveformOutputStop(&hhrtim, HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TE1);
 8002ab6:	f240 1103 	movw	r1, #259	; 0x103
 8002aba:	480f      	ldr	r0, [pc, #60]	; (8002af8 <Error_Handler+0x50>)
 8002abc:	f005 f814 	bl	8007ae8 <HAL_HRTIM_WaveformOutputStop>
	HAL_HRTIM_WaveformCounterStop_IT(&hhrtim, HRTIM_TIMERID_TIMER_A | HRTIM_TIMERID_TIMER_E);
 8002ac0:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
 8002ac4:	480c      	ldr	r0, [pc, #48]	; (8002af8 <Error_Handler+0x50>)
 8002ac6:	f005 f8ad 	bl	8007c24 <HAL_HRTIM_WaveformCountStop_IT>

	/* Power down the synthesiser */
	HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 0);
 8002aca:	2200      	movs	r2, #0
 8002acc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ad0:	480a      	ldr	r0, [pc, #40]	; (8002afc <Error_Handler+0x54>)
 8002ad2:	f004 fc7b 	bl	80073cc <HAL_GPIO_WritePin>

	while (1) {
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //toggle red LED
 8002ad6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002ada:	4809      	ldr	r0, [pc, #36]	; (8002b00 <Error_Handler+0x58>)
 8002adc:	f004 fc8f 	bl	80073fe <HAL_GPIO_TogglePin>
		timer_delay(SLOW_TIMER, ERROR_LED_DELAY);
 8002ae0:	4b08      	ldr	r3, [pc, #32]	; (8002b04 <Error_Handler+0x5c>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ae8:	4611      	mov	r1, r2
 8002aea:	4618      	mov	r0, r3
 8002aec:	f018 fccc 	bl	801b488 <__timer_delay_veneer>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //toggle red LED
 8002af0:	e7f1      	b.n	8002ad6 <Error_Handler+0x2e>
 8002af2:	bf00      	nop
 8002af4:	0801b680 	.word	0x0801b680
 8002af8:	20000384 	.word	0x20000384
 8002afc:	58020800 	.word	0x58020800
 8002b00:	58020400 	.word	0x58020400
 8002b04:	20000018 	.word	0x20000018

08002b08 <HAL_MspInit>:
void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef *hhrtim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b0e:	4b0a      	ldr	r3, [pc, #40]	; (8002b38 <HAL_MspInit+0x30>)
 8002b10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002b14:	4a08      	ldr	r2, [pc, #32]	; (8002b38 <HAL_MspInit+0x30>)
 8002b16:	f043 0302 	orr.w	r3, r3, #2
 8002b1a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002b1e:	4b06      	ldr	r3, [pc, #24]	; (8002b38 <HAL_MspInit+0x30>)
 8002b20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002b24:	f003 0302 	and.w	r3, r3, #2
 8002b28:	607b      	str	r3, [r7, #4]
 8002b2a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr
 8002b38:	58024400 	.word	0x58024400

08002b3c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b0b4      	sub	sp, #208	; 0xd0
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b44:	f107 0310 	add.w	r3, r7, #16
 8002b48:	22c0      	movs	r2, #192	; 0xc0
 8002b4a:	2100      	movs	r1, #0
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f016 fe4b 	bl	80197e8 <memset>
  if(hadc->Instance==ADC3)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a2b      	ldr	r2, [pc, #172]	; (8002c04 <HAL_ADC_MspInit+0xc8>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d14e      	bne.n	8002bfa <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002b5c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002b60:	f04f 0300 	mov.w	r3, #0
 8002b64:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 19;
 8002b6c:	2313      	movs	r3, #19
 8002b6e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 79;
 8002b70:	234f      	movs	r3, #79	; 0x4f
 8002b72:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8002b74:	2302      	movs	r3, #2
 8002b76:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8002b78:	2302      	movs	r3, #2
 8002b7a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8002b7c:	23c0      	movs	r3, #192	; 0xc0
 8002b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8002b80:	2320      	movs	r3, #32
 8002b82:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8002b84:	2300      	movs	r3, #0
 8002b86:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b8e:	f107 0310 	add.w	r3, r7, #16
 8002b92:	4618      	mov	r0, r3
 8002b94:	f007 fbd0 	bl	800a338 <HAL_RCCEx_PeriphCLKConfig>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <HAL_ADC_MspInit+0x66>
    {
      Error_Handler();
 8002b9e:	f7ff ff83 	bl	8002aa8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002ba2:	4b19      	ldr	r3, [pc, #100]	; (8002c08 <HAL_ADC_MspInit+0xcc>)
 8002ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ba8:	4a17      	ldr	r2, [pc, #92]	; (8002c08 <HAL_ADC_MspInit+0xcc>)
 8002baa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002bb2:	4b15      	ldr	r3, [pc, #84]	; (8002c08 <HAL_ADC_MspInit+0xcc>)
 8002bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bbc:	60fb      	str	r3, [r7, #12]
 8002bbe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bc0:	4b11      	ldr	r3, [pc, #68]	; (8002c08 <HAL_ADC_MspInit+0xcc>)
 8002bc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bc6:	4a10      	ldr	r2, [pc, #64]	; (8002c08 <HAL_ADC_MspInit+0xcc>)
 8002bc8:	f043 0304 	orr.w	r3, r3, #4
 8002bcc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002bd0:	4b0d      	ldr	r3, [pc, #52]	; (8002c08 <HAL_ADC_MspInit+0xcc>)
 8002bd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bd6:	f003 0304 	and.w	r3, r3, #4
 8002bda:	60bb      	str	r3, [r7, #8]
 8002bdc:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PC2_C     ------> ADC3_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8002bde:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8002be2:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002be6:	f000 fec7 	bl	8003978 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8002bea:	2200      	movs	r2, #0
 8002bec:	2100      	movs	r1, #0
 8002bee:	207f      	movs	r0, #127	; 0x7f
 8002bf0:	f002 fd19 	bl	8005626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8002bf4:	207f      	movs	r0, #127	; 0x7f
 8002bf6:	f002 fd30 	bl	800565a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002bfa:	bf00      	nop
 8002bfc:	37d0      	adds	r7, #208	; 0xd0
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	58026000 	.word	0x58026000
 8002c08:	58024400 	.word	0x58024400

08002c0c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b08a      	sub	sp, #40	; 0x28
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c14:	f107 0314 	add.w	r3, r7, #20
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	605a      	str	r2, [r3, #4]
 8002c1e:	609a      	str	r2, [r3, #8]
 8002c20:	60da      	str	r2, [r3, #12]
 8002c22:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a18      	ldr	r2, [pc, #96]	; (8002c8c <HAL_DAC_MspInit+0x80>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d129      	bne.n	8002c82 <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8002c2e:	4b18      	ldr	r3, [pc, #96]	; (8002c90 <HAL_DAC_MspInit+0x84>)
 8002c30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c34:	4a16      	ldr	r2, [pc, #88]	; (8002c90 <HAL_DAC_MspInit+0x84>)
 8002c36:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002c3a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002c3e:	4b14      	ldr	r3, [pc, #80]	; (8002c90 <HAL_DAC_MspInit+0x84>)
 8002c40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c48:	613b      	str	r3, [r7, #16]
 8002c4a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c4c:	4b10      	ldr	r3, [pc, #64]	; (8002c90 <HAL_DAC_MspInit+0x84>)
 8002c4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c52:	4a0f      	ldr	r2, [pc, #60]	; (8002c90 <HAL_DAC_MspInit+0x84>)
 8002c54:	f043 0301 	orr.w	r3, r3, #1
 8002c58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c5c:	4b0c      	ldr	r3, [pc, #48]	; (8002c90 <HAL_DAC_MspInit+0x84>)
 8002c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	60fb      	str	r3, [r7, #12]
 8002c68:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002c6a:	2310      	movs	r3, #16
 8002c6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c72:	2300      	movs	r3, #0
 8002c74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c76:	f107 0314 	add.w	r3, r7, #20
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	4805      	ldr	r0, [pc, #20]	; (8002c94 <HAL_DAC_MspInit+0x88>)
 8002c7e:	f004 f9dd 	bl	800703c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002c82:	bf00      	nop
 8002c84:	3728      	adds	r7, #40	; 0x28
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	40007400 	.word	0x40007400
 8002c90:	58024400 	.word	0x58024400
 8002c94:	58020000 	.word	0x58020000

08002c98 <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b0b4      	sub	sp, #208	; 0xd0
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ca0:	f107 0310 	add.w	r3, r7, #16
 8002ca4:	22c0      	movs	r2, #192	; 0xc0
 8002ca6:	2100      	movs	r1, #0
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f016 fd9d 	bl	80197e8 <memset>
  if(hhrtim->Instance==HRTIM1)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a1c      	ldr	r2, [pc, #112]	; (8002d24 <HAL_HRTIM_MspInit+0x8c>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d131      	bne.n	8002d1c <HAL_HRTIM_MspInit+0x84>

  /* USER CODE END HRTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1;
 8002cb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cbc:	f04f 0300 	mov.w	r3, #0
 8002cc0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Hrtim1ClockSelection = RCC_HRTIM1CLK_TIMCLK;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cca:	f107 0310 	add.w	r3, r7, #16
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f007 fb32 	bl	800a338 <HAL_RCCEx_PeriphCLKConfig>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <HAL_HRTIM_MspInit+0x46>
    {
      Error_Handler();
 8002cda:	f7ff fee5 	bl	8002aa8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8002cde:	4b12      	ldr	r3, [pc, #72]	; (8002d28 <HAL_HRTIM_MspInit+0x90>)
 8002ce0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ce4:	4a10      	ldr	r2, [pc, #64]	; (8002d28 <HAL_HRTIM_MspInit+0x90>)
 8002ce6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002cea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002cee:	4b0e      	ldr	r3, [pc, #56]	; (8002d28 <HAL_HRTIM_MspInit+0x90>)
 8002cf0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002cf4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cf8:	60fb      	str	r3, [r7, #12]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
    /* HRTIM1 interrupt Init */
    HAL_NVIC_SetPriority(HRTIM1_TIMA_IRQn, 0, 0);
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	2100      	movs	r1, #0
 8002d00:	2068      	movs	r0, #104	; 0x68
 8002d02:	f002 fc90 	bl	8005626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIMA_IRQn);
 8002d06:	2068      	movs	r0, #104	; 0x68
 8002d08:	f002 fca7 	bl	800565a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(HRTIM1_TIME_IRQn, 0, 0);
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	2100      	movs	r1, #0
 8002d10:	206c      	movs	r0, #108	; 0x6c
 8002d12:	f002 fc88 	bl	8005626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIME_IRQn);
 8002d16:	206c      	movs	r0, #108	; 0x6c
 8002d18:	f002 fc9f 	bl	800565a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }

}
 8002d1c:	bf00      	nop
 8002d1e:	37d0      	adds	r7, #208	; 0xd0
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	40017400 	.word	0x40017400
 8002d28:	58024400 	.word	0x58024400

08002d2c <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b08a      	sub	sp, #40	; 0x28
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d34:	f107 0314 	add.w	r3, r7, #20
 8002d38:	2200      	movs	r2, #0
 8002d3a:	601a      	str	r2, [r3, #0]
 8002d3c:	605a      	str	r2, [r3, #4]
 8002d3e:	609a      	str	r2, [r3, #8]
 8002d40:	60da      	str	r2, [r3, #12]
 8002d42:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a22      	ldr	r2, [pc, #136]	; (8002dd4 <HAL_HRTIM_MspPostInit+0xa8>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d13d      	bne.n	8002dca <HAL_HRTIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002d4e:	4b22      	ldr	r3, [pc, #136]	; (8002dd8 <HAL_HRTIM_MspPostInit+0xac>)
 8002d50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d54:	4a20      	ldr	r2, [pc, #128]	; (8002dd8 <HAL_HRTIM_MspPostInit+0xac>)
 8002d56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d5e:	4b1e      	ldr	r3, [pc, #120]	; (8002dd8 <HAL_HRTIM_MspPostInit+0xac>)
 8002d60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d68:	613b      	str	r3, [r7, #16]
 8002d6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d6c:	4b1a      	ldr	r3, [pc, #104]	; (8002dd8 <HAL_HRTIM_MspPostInit+0xac>)
 8002d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d72:	4a19      	ldr	r2, [pc, #100]	; (8002dd8 <HAL_HRTIM_MspPostInit+0xac>)
 8002d74:	f043 0304 	orr.w	r3, r3, #4
 8002d78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d7c:	4b16      	ldr	r3, [pc, #88]	; (8002dd8 <HAL_HRTIM_MspPostInit+0xac>)
 8002d7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d82:	f003 0304 	and.w	r3, r3, #4
 8002d86:	60fb      	str	r3, [r7, #12]
 8002d88:	68fb      	ldr	r3, [r7, #12]
    /**HRTIM GPIO Configuration
    PG6     ------> HRTIM_CHE1
    PC6     ------> HRTIM_CHA1
    PC7     ------> HRTIM_CHA2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002d8a:	2340      	movs	r3, #64	; 0x40
 8002d8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d8e:	2302      	movs	r3, #2
 8002d90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d92:	2300      	movs	r3, #0
 8002d94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d96:	2303      	movs	r3, #3
 8002d98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_HRTIM1;
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002d9e:	f107 0314 	add.w	r3, r7, #20
 8002da2:	4619      	mov	r1, r3
 8002da4:	480d      	ldr	r0, [pc, #52]	; (8002ddc <HAL_HRTIM_MspPostInit+0xb0>)
 8002da6:	f004 f949 	bl	800703c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002daa:	23c0      	movs	r3, #192	; 0xc0
 8002dac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dae:	2302      	movs	r3, #2
 8002db0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db2:	2300      	movs	r3, #0
 8002db4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002db6:	2303      	movs	r3, #3
 8002db8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_HRTIM1;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dbe:	f107 0314 	add.w	r3, r7, #20
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	4806      	ldr	r0, [pc, #24]	; (8002de0 <HAL_HRTIM_MspPostInit+0xb4>)
 8002dc6:	f004 f939 	bl	800703c <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8002dca:	bf00      	nop
 8002dcc:	3728      	adds	r7, #40	; 0x28
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	40017400 	.word	0x40017400
 8002dd8:	58024400 	.word	0x58024400
 8002ddc:	58021800 	.word	0x58021800
 8002de0:	58020800 	.word	0x58020800

08002de4 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b0b4      	sub	sp, #208	; 0xd0
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002dec:	f107 0310 	add.w	r3, r7, #16
 8002df0:	22c0      	movs	r2, #192	; 0xc0
 8002df2:	2100      	movs	r1, #0
 8002df4:	4618      	mov	r0, r3
 8002df6:	f016 fcf7 	bl	80197e8 <memset>
  if(hlptim->Instance==LPTIM1)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a19      	ldr	r2, [pc, #100]	; (8002e64 <HAL_LPTIM_MspInit+0x80>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d12a      	bne.n	8002e5a <HAL_LPTIM_MspInit+0x76>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8002e04:	f04f 0220 	mov.w	r2, #32
 8002e08:	f04f 0300 	mov.w	r3, #0
 8002e0c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8002e10:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002e14:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e18:	f107 0310 	add.w	r3, r7, #16
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f007 fa8b 	bl	800a338 <HAL_RCCEx_PeriphCLKConfig>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <HAL_LPTIM_MspInit+0x48>
    {
      Error_Handler();
 8002e28:	f7ff fe3e 	bl	8002aa8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8002e2c:	4b0e      	ldr	r3, [pc, #56]	; (8002e68 <HAL_LPTIM_MspInit+0x84>)
 8002e2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e32:	4a0d      	ldr	r2, [pc, #52]	; (8002e68 <HAL_LPTIM_MspInit+0x84>)
 8002e34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e38:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e3c:	4b0a      	ldr	r3, [pc, #40]	; (8002e68 <HAL_LPTIM_MspInit+0x84>)
 8002e3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e46:	60fb      	str	r3, [r7, #12]
 8002e48:	68fb      	ldr	r3, [r7, #12]
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	205d      	movs	r0, #93	; 0x5d
 8002e50:	f002 fbe9 	bl	8005626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8002e54:	205d      	movs	r0, #93	; 0x5d
 8002e56:	f002 fc00 	bl	800565a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8002e5a:	bf00      	nop
 8002e5c:	37d0      	adds	r7, #208	; 0xd0
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	40002400 	.word	0x40002400
 8002e68:	58024400 	.word	0x58024400

08002e6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b087      	sub	sp, #28
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a2b      	ldr	r2, [pc, #172]	; (8002f28 <HAL_TIM_Base_MspInit+0xbc>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d10f      	bne.n	8002e9e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e7e:	4b2b      	ldr	r3, [pc, #172]	; (8002f2c <HAL_TIM_Base_MspInit+0xc0>)
 8002e80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e84:	4a29      	ldr	r2, [pc, #164]	; (8002f2c <HAL_TIM_Base_MspInit+0xc0>)
 8002e86:	f043 0301 	orr.w	r3, r3, #1
 8002e8a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002e8e:	4b27      	ldr	r3, [pc, #156]	; (8002f2c <HAL_TIM_Base_MspInit+0xc0>)
 8002e90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e94:	f003 0301 	and.w	r3, r3, #1
 8002e98:	617b      	str	r3, [r7, #20]
 8002e9a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002e9c:	e03d      	b.n	8002f1a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM2)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ea6:	d10f      	bne.n	8002ec8 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ea8:	4b20      	ldr	r3, [pc, #128]	; (8002f2c <HAL_TIM_Base_MspInit+0xc0>)
 8002eaa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002eae:	4a1f      	ldr	r2, [pc, #124]	; (8002f2c <HAL_TIM_Base_MspInit+0xc0>)
 8002eb0:	f043 0301 	orr.w	r3, r3, #1
 8002eb4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002eb8:	4b1c      	ldr	r3, [pc, #112]	; (8002f2c <HAL_TIM_Base_MspInit+0xc0>)
 8002eba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	613b      	str	r3, [r7, #16]
 8002ec4:	693b      	ldr	r3, [r7, #16]
}
 8002ec6:	e028      	b.n	8002f1a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a18      	ldr	r2, [pc, #96]	; (8002f30 <HAL_TIM_Base_MspInit+0xc4>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d10f      	bne.n	8002ef2 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ed2:	4b16      	ldr	r3, [pc, #88]	; (8002f2c <HAL_TIM_Base_MspInit+0xc0>)
 8002ed4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ed8:	4a14      	ldr	r2, [pc, #80]	; (8002f2c <HAL_TIM_Base_MspInit+0xc0>)
 8002eda:	f043 0302 	orr.w	r3, r3, #2
 8002ede:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002ee2:	4b12      	ldr	r3, [pc, #72]	; (8002f2c <HAL_TIM_Base_MspInit+0xc0>)
 8002ee4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ee8:	f003 0302 	and.w	r3, r3, #2
 8002eec:	60fb      	str	r3, [r7, #12]
 8002eee:	68fb      	ldr	r3, [r7, #12]
}
 8002ef0:	e013      	b.n	8002f1a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM5)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a0f      	ldr	r2, [pc, #60]	; (8002f34 <HAL_TIM_Base_MspInit+0xc8>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d10e      	bne.n	8002f1a <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002efc:	4b0b      	ldr	r3, [pc, #44]	; (8002f2c <HAL_TIM_Base_MspInit+0xc0>)
 8002efe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f02:	4a0a      	ldr	r2, [pc, #40]	; (8002f2c <HAL_TIM_Base_MspInit+0xc0>)
 8002f04:	f043 0308 	orr.w	r3, r3, #8
 8002f08:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002f0c:	4b07      	ldr	r3, [pc, #28]	; (8002f2c <HAL_TIM_Base_MspInit+0xc0>)
 8002f0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f12:	f003 0308 	and.w	r3, r3, #8
 8002f16:	60bb      	str	r3, [r7, #8]
 8002f18:	68bb      	ldr	r3, [r7, #8]
}
 8002f1a:	bf00      	nop
 8002f1c:	371c      	adds	r7, #28
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	40010000 	.word	0x40010000
 8002f2c:	58024400 	.word	0x58024400
 8002f30:	40000400 	.word	0x40000400
 8002f34:	40000c00 	.word	0x40000c00

08002f38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b0ba      	sub	sp, #232	; 0xe8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f40:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002f44:	2200      	movs	r2, #0
 8002f46:	601a      	str	r2, [r3, #0]
 8002f48:	605a      	str	r2, [r3, #4]
 8002f4a:	609a      	str	r2, [r3, #8]
 8002f4c:	60da      	str	r2, [r3, #12]
 8002f4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f50:	f107 0310 	add.w	r3, r7, #16
 8002f54:	22c0      	movs	r2, #192	; 0xc0
 8002f56:	2100      	movs	r1, #0
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f016 fc45 	bl	80197e8 <memset>
  if(huart->Instance==USART3)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a27      	ldr	r2, [pc, #156]	; (8003000 <HAL_UART_MspInit+0xc8>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d146      	bne.n	8002ff6 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002f68:	f04f 0202 	mov.w	r2, #2
 8002f6c:	f04f 0300 	mov.w	r3, #0
 8002f70:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002f74:	2300      	movs	r3, #0
 8002f76:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f7a:	f107 0310 	add.w	r3, r7, #16
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f007 f9da 	bl	800a338 <HAL_RCCEx_PeriphCLKConfig>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002f8a:	f7ff fd8d 	bl	8002aa8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f8e:	4b1d      	ldr	r3, [pc, #116]	; (8003004 <HAL_UART_MspInit+0xcc>)
 8002f90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f94:	4a1b      	ldr	r2, [pc, #108]	; (8003004 <HAL_UART_MspInit+0xcc>)
 8002f96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f9a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002f9e:	4b19      	ldr	r3, [pc, #100]	; (8003004 <HAL_UART_MspInit+0xcc>)
 8002fa0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fa4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fa8:	60fb      	str	r3, [r7, #12]
 8002faa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fac:	4b15      	ldr	r3, [pc, #84]	; (8003004 <HAL_UART_MspInit+0xcc>)
 8002fae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fb2:	4a14      	ldr	r2, [pc, #80]	; (8003004 <HAL_UART_MspInit+0xcc>)
 8002fb4:	f043 0308 	orr.w	r3, r3, #8
 8002fb8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002fbc:	4b11      	ldr	r3, [pc, #68]	; (8003004 <HAL_UART_MspInit+0xcc>)
 8002fbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fc2:	f003 0308 	and.w	r3, r3, #8
 8002fc6:	60bb      	str	r3, [r7, #8]
 8002fc8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002fca:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002fce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002fe4:	2307      	movs	r3, #7
 8002fe6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fea:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002fee:	4619      	mov	r1, r3
 8002ff0:	4805      	ldr	r0, [pc, #20]	; (8003008 <HAL_UART_MspInit+0xd0>)
 8002ff2:	f004 f823 	bl	800703c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002ff6:	bf00      	nop
 8002ff8:	37e8      	adds	r7, #232	; 0xe8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	40004800 	.word	0x40004800
 8003004:	58024400 	.word	0x58024400
 8003008:	58020c00 	.word	0x58020c00

0800300c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8003010:	f007 f976 	bl	800a300 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
		Error_Handler();
 8003014:	f7ff fd48 	bl	8002aa8 <Error_Handler>
 8003018:	e7fc      	b.n	8003014 <NMI_Handler+0x8>

0800301a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  Error_Handler();
 800301e:	f7ff fd43 	bl	8002aa8 <Error_Handler>
 8003022:	e7fc      	b.n	800301e <HardFault_Handler+0x4>

08003024 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  Error_Handler();
 8003028:	f7ff fd3e 	bl	8002aa8 <Error_Handler>
 800302c:	e7fc      	b.n	8003028 <MemManage_Handler+0x4>

0800302e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800302e:	b580      	push	{r7, lr}
 8003030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  Error_Handler();
 8003032:	f7ff fd39 	bl	8002aa8 <Error_Handler>
 8003036:	e7fc      	b.n	8003032 <BusFault_Handler+0x4>

08003038 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  Error_Handler();
 800303c:	f7ff fd34 	bl	8002aa8 <Error_Handler>
 8003040:	e7fc      	b.n	800303c <UsageFault_Handler+0x4>

08003042 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003042:	b480      	push	{r7}
 8003044:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003046:	bf00      	nop
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003054:	bf00      	nop
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr

0800305e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800305e:	b480      	push	{r7}
 8003060:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003062:	bf00      	nop
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003070:	f000 fc1e 	bl	80038b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003074:	bf00      	nop
 8003076:	bd80      	pop	{r7, pc}

08003078 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800307c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003080:	f004 f9d7 	bl	8007432 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 8003084:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003088:	f004 f9d3 	bl	8007432 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800308c:	bf00      	nop
 800308e:	bd80      	pop	{r7, pc}

08003090 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */
  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8003094:	4802      	ldr	r0, [pc, #8]	; (80030a0 <LPTIM1_IRQHandler+0x10>)
 8003096:	f005 fe0c 	bl	8008cb2 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */
  /* USER CODE END LPTIM1_IRQn 1 */
}
 800309a:	bf00      	nop
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	20000460 	.word	0x20000460

080030a4 <HRTIM1_TIMA_IRQHandler>:

/**
  * @brief This function handles HRTIM timer A global interrupt.
  */
void HRTIM1_TIMA_IRQHandler(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIMA_IRQn 0 */

  /* USER CODE END HRTIM1_TIMA_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim,HRTIM_TIMERINDEX_TIMER_A);
 80030a8:	2100      	movs	r1, #0
 80030aa:	4802      	ldr	r0, [pc, #8]	; (80030b4 <HRTIM1_TIMA_IRQHandler+0x10>)
 80030ac:	f004 fe38 	bl	8007d20 <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIMA_IRQn 1 */

  /* USER CODE END HRTIM1_TIMA_IRQn 1 */
}
 80030b0:	bf00      	nop
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	20000384 	.word	0x20000384

080030b8 <HRTIM1_TIME_IRQHandler>:

/**
  * @brief This function handles HRTIM timer E global interrupt.
  */
void HRTIM1_TIME_IRQHandler(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIME_IRQn 0 */

  /* USER CODE END HRTIM1_TIME_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim,HRTIM_TIMERINDEX_TIMER_E);
 80030bc:	2104      	movs	r1, #4
 80030be:	4802      	ldr	r0, [pc, #8]	; (80030c8 <HRTIM1_TIME_IRQHandler+0x10>)
 80030c0:	f004 fe2e 	bl	8007d20 <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIME_IRQn 1 */

  /* USER CODE END HRTIM1_TIME_IRQn 1 */
}
 80030c4:	bf00      	nop
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	20000384 	.word	0x20000384

080030cc <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 80030d0:	4802      	ldr	r0, [pc, #8]	; (80030dc <ADC3_IRQHandler+0x10>)
 80030d2:	f001 f971 	bl	80043b8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 80030d6:	bf00      	nop
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	2000030c 	.word	0x2000030c

080030e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	af00      	add	r7, sp, #0
	return 1;
 80030e4:	2301      	movs	r3, #1
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <_kill>:

int _kill(int pid, int sig)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80030fa:	4b05      	ldr	r3, [pc, #20]	; (8003110 <_kill+0x20>)
 80030fc:	2216      	movs	r2, #22
 80030fe:	601a      	str	r2, [r3, #0]
	return -1;
 8003100:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003104:	4618      	mov	r0, r3
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr
 8003110:	20008360 	.word	0x20008360

08003114 <_exit>:

void _exit (int status)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800311c:	f04f 31ff 	mov.w	r1, #4294967295
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f7ff ffe5 	bl	80030f0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003126:	e7fe      	b.n	8003126 <_exit+0x12>

08003128 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003134:	2300      	movs	r3, #0
 8003136:	617b      	str	r3, [r7, #20]
 8003138:	e00a      	b.n	8003150 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800313a:	f3af 8000 	nop.w
 800313e:	4601      	mov	r1, r0
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	1c5a      	adds	r2, r3, #1
 8003144:	60ba      	str	r2, [r7, #8]
 8003146:	b2ca      	uxtb	r2, r1
 8003148:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	3301      	adds	r3, #1
 800314e:	617b      	str	r3, [r7, #20]
 8003150:	697a      	ldr	r2, [r7, #20]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	429a      	cmp	r2, r3
 8003156:	dbf0      	blt.n	800313a <_read+0x12>
	}

return len;
 8003158:	687b      	ldr	r3, [r7, #4]
}
 800315a:	4618      	mov	r0, r3
 800315c:	3718      	adds	r7, #24
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b086      	sub	sp, #24
 8003166:	af00      	add	r7, sp, #0
 8003168:	60f8      	str	r0, [r7, #12]
 800316a:	60b9      	str	r1, [r7, #8]
 800316c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800316e:	2300      	movs	r3, #0
 8003170:	617b      	str	r3, [r7, #20]
 8003172:	e009      	b.n	8003188 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	1c5a      	adds	r2, r3, #1
 8003178:	60ba      	str	r2, [r7, #8]
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	4618      	mov	r0, r3
 800317e:	f7fe fcf5 	bl	8001b6c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	3301      	adds	r3, #1
 8003186:	617b      	str	r3, [r7, #20]
 8003188:	697a      	ldr	r2, [r7, #20]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	429a      	cmp	r2, r3
 800318e:	dbf1      	blt.n	8003174 <_write+0x12>
	}
	return len;
 8003190:	687b      	ldr	r3, [r7, #4]
}
 8003192:	4618      	mov	r0, r3
 8003194:	3718      	adds	r7, #24
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}

0800319a <_close>:

int _close(int file)
{
 800319a:	b480      	push	{r7}
 800319c:	b083      	sub	sp, #12
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
	return -1;
 80031a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr

080031b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80031b2:	b480      	push	{r7}
 80031b4:	b083      	sub	sp, #12
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
 80031ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80031c2:	605a      	str	r2, [r3, #4]
	return 0;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	370c      	adds	r7, #12
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr

080031d2 <_isatty>:

int _isatty(int file)
{
 80031d2:	b480      	push	{r7}
 80031d4:	b083      	sub	sp, #12
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
	return 1;
 80031da:	2301      	movs	r3, #1
}
 80031dc:	4618      	mov	r0, r3
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
	return 0;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3714      	adds	r7, #20
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
	...

08003204 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003204:	b480      	push	{r7}
 8003206:	b087      	sub	sp, #28
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800320c:	4a14      	ldr	r2, [pc, #80]	; (8003260 <_sbrk+0x5c>)
 800320e:	4b15      	ldr	r3, [pc, #84]	; (8003264 <_sbrk+0x60>)
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003218:	4b13      	ldr	r3, [pc, #76]	; (8003268 <_sbrk+0x64>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d102      	bne.n	8003226 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003220:	4b11      	ldr	r3, [pc, #68]	; (8003268 <_sbrk+0x64>)
 8003222:	4a12      	ldr	r2, [pc, #72]	; (800326c <_sbrk+0x68>)
 8003224:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003226:	4b10      	ldr	r3, [pc, #64]	; (8003268 <_sbrk+0x64>)
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4413      	add	r3, r2
 800322e:	693a      	ldr	r2, [r7, #16]
 8003230:	429a      	cmp	r2, r3
 8003232:	d205      	bcs.n	8003240 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8003234:	4b0e      	ldr	r3, [pc, #56]	; (8003270 <_sbrk+0x6c>)
 8003236:	220c      	movs	r2, #12
 8003238:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800323a:	f04f 33ff 	mov.w	r3, #4294967295
 800323e:	e009      	b.n	8003254 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8003240:	4b09      	ldr	r3, [pc, #36]	; (8003268 <_sbrk+0x64>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003246:	4b08      	ldr	r3, [pc, #32]	; (8003268 <_sbrk+0x64>)
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4413      	add	r3, r2
 800324e:	4a06      	ldr	r2, [pc, #24]	; (8003268 <_sbrk+0x64>)
 8003250:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003252:	68fb      	ldr	r3, [r7, #12]
}
 8003254:	4618      	mov	r0, r3
 8003256:	371c      	adds	r7, #28
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr
 8003260:	20020000 	.word	0x20020000
 8003264:	00000400 	.word	0x00000400
 8003268:	200006b8 	.word	0x200006b8
 800326c:	20008370 	.word	0x20008370
 8003270:	20008360 	.word	0x20008360

08003274 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003278:	4b37      	ldr	r3, [pc, #220]	; (8003358 <SystemInit+0xe4>)
 800327a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800327e:	4a36      	ldr	r2, [pc, #216]	; (8003358 <SystemInit+0xe4>)
 8003280:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003284:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003288:	4b34      	ldr	r3, [pc, #208]	; (800335c <SystemInit+0xe8>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 030f 	and.w	r3, r3, #15
 8003290:	2b06      	cmp	r3, #6
 8003292:	d807      	bhi.n	80032a4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */

	  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003294:	4b31      	ldr	r3, [pc, #196]	; (800335c <SystemInit+0xe8>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f023 030f 	bic.w	r3, r3, #15
 800329c:	4a2f      	ldr	r2, [pc, #188]	; (800335c <SystemInit+0xe8>)
 800329e:	f043 0307 	orr.w	r3, r3, #7
 80032a2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80032a4:	4b2e      	ldr	r3, [pc, #184]	; (8003360 <SystemInit+0xec>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a2d      	ldr	r2, [pc, #180]	; (8003360 <SystemInit+0xec>)
 80032aa:	f043 0301 	orr.w	r3, r3, #1
 80032ae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80032b0:	4b2b      	ldr	r3, [pc, #172]	; (8003360 <SystemInit+0xec>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80032b6:	4b2a      	ldr	r3, [pc, #168]	; (8003360 <SystemInit+0xec>)
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	4929      	ldr	r1, [pc, #164]	; (8003360 <SystemInit+0xec>)
 80032bc:	4b29      	ldr	r3, [pc, #164]	; (8003364 <SystemInit+0xf0>)
 80032be:	4013      	ands	r3, r2
 80032c0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80032c2:	4b26      	ldr	r3, [pc, #152]	; (800335c <SystemInit+0xe8>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0308 	and.w	r3, r3, #8
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d007      	beq.n	80032de <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80032ce:	4b23      	ldr	r3, [pc, #140]	; (800335c <SystemInit+0xe8>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f023 030f 	bic.w	r3, r3, #15
 80032d6:	4a21      	ldr	r2, [pc, #132]	; (800335c <SystemInit+0xe8>)
 80032d8:	f043 0307 	orr.w	r3, r3, #7
 80032dc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80032de:	4b20      	ldr	r3, [pc, #128]	; (8003360 <SystemInit+0xec>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80032e4:	4b1e      	ldr	r3, [pc, #120]	; (8003360 <SystemInit+0xec>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80032ea:	4b1d      	ldr	r3, [pc, #116]	; (8003360 <SystemInit+0xec>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80032f0:	4b1b      	ldr	r3, [pc, #108]	; (8003360 <SystemInit+0xec>)
 80032f2:	4a1d      	ldr	r2, [pc, #116]	; (8003368 <SystemInit+0xf4>)
 80032f4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80032f6:	4b1a      	ldr	r3, [pc, #104]	; (8003360 <SystemInit+0xec>)
 80032f8:	4a1c      	ldr	r2, [pc, #112]	; (800336c <SystemInit+0xf8>)
 80032fa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80032fc:	4b18      	ldr	r3, [pc, #96]	; (8003360 <SystemInit+0xec>)
 80032fe:	4a1c      	ldr	r2, [pc, #112]	; (8003370 <SystemInit+0xfc>)
 8003300:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003302:	4b17      	ldr	r3, [pc, #92]	; (8003360 <SystemInit+0xec>)
 8003304:	2200      	movs	r2, #0
 8003306:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003308:	4b15      	ldr	r3, [pc, #84]	; (8003360 <SystemInit+0xec>)
 800330a:	4a19      	ldr	r2, [pc, #100]	; (8003370 <SystemInit+0xfc>)
 800330c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800330e:	4b14      	ldr	r3, [pc, #80]	; (8003360 <SystemInit+0xec>)
 8003310:	2200      	movs	r2, #0
 8003312:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003314:	4b12      	ldr	r3, [pc, #72]	; (8003360 <SystemInit+0xec>)
 8003316:	4a16      	ldr	r2, [pc, #88]	; (8003370 <SystemInit+0xfc>)
 8003318:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800331a:	4b11      	ldr	r3, [pc, #68]	; (8003360 <SystemInit+0xec>)
 800331c:	2200      	movs	r2, #0
 800331e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003320:	4b0f      	ldr	r3, [pc, #60]	; (8003360 <SystemInit+0xec>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a0e      	ldr	r2, [pc, #56]	; (8003360 <SystemInit+0xec>)
 8003326:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800332a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800332c:	4b0c      	ldr	r3, [pc, #48]	; (8003360 <SystemInit+0xec>)
 800332e:	2200      	movs	r2, #0
 8003330:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003332:	4b10      	ldr	r3, [pc, #64]	; (8003374 <SystemInit+0x100>)
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	4b10      	ldr	r3, [pc, #64]	; (8003378 <SystemInit+0x104>)
 8003338:	4013      	ands	r3, r2
 800333a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800333e:	d202      	bcs.n	8003346 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003340:	4b0e      	ldr	r3, [pc, #56]	; (800337c <SystemInit+0x108>)
 8003342:	2201      	movs	r2, #1
 8003344:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003346:	4b0e      	ldr	r3, [pc, #56]	; (8003380 <SystemInit+0x10c>)
 8003348:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800334c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800334e:	bf00      	nop
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr
 8003358:	e000ed00 	.word	0xe000ed00
 800335c:	52002000 	.word	0x52002000
 8003360:	58024400 	.word	0x58024400
 8003364:	eaf6ed7f 	.word	0xeaf6ed7f
 8003368:	02020200 	.word	0x02020200
 800336c:	01ff0000 	.word	0x01ff0000
 8003370:	01010280 	.word	0x01010280
 8003374:	5c001000 	.word	0x5c001000
 8003378:	ffff0000 	.word	0xffff0000
 800337c:	51008108 	.word	0x51008108
 8003380:	52004000 	.word	0x52004000

08003384 <HAL_LPTIM_AutoReloadMatchCallback>:
//		}
//
//	}
//}

void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim){
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin); //toggle green LED
 800338c:	2101      	movs	r1, #1
 800338e:	4803      	ldr	r0, [pc, #12]	; (800339c <HAL_LPTIM_AutoReloadMatchCallback+0x18>)
 8003390:	f004 f835 	bl	80073fe <HAL_GPIO_TogglePin>
}
 8003394:	bf00      	nop
 8003396:	3708      	adds	r7, #8
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	58020400 	.word	0x58020400

080033a0 <HAL_HRTIM_Compare2EventCallback>:

void HAL_HRTIM_Compare2EventCallback(HRTIM_HandleTypeDef *hhrtim, uint32_t TimerIdx) {
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
		const struct AttenuatorSettings a = {0,0,0,0,0,1,0}; // 8 dB
		set_aom_atten(a);
#endif //ATTENUATOR_CODE
	}

}
 80033aa:	bf00      	nop
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
	...

080033b8 <HAL_HRTIM_Compare3EventCallback>:

void HAL_HRTIM_Compare3EventCallback(HRTIM_HandleTypeDef *hhrtim, uint32_t TimerIdx) {
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b088      	sub	sp, #32
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]

	/* Called at the end of a POP cycle */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_A) {
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d15d      	bne.n	8003484 <HAL_HRTIM_Compare3EventCallback+0xcc>
		/* Reset the attenuator to 0 dB */
		const struct AttenuatorSettings a = { 0, 0, 0, 0, 0, 0, 0 }; // 0 dB
		set_aom_atten(a);
#endif //ATTENUATOR_CODE

		const double start_freq = ((long)(sweep_settings.req_start_freq/sweep_settings.step_size)) * sweep_settings.step_size;
 80033c8:	4b30      	ldr	r3, [pc, #192]	; (800348c <HAL_HRTIM_Compare3EventCallback+0xd4>)
 80033ca:	ed93 5b00 	vldr	d5, [r3]
 80033ce:	4b2f      	ldr	r3, [pc, #188]	; (800348c <HAL_HRTIM_Compare3EventCallback+0xd4>)
 80033d0:	ed93 6b04 	vldr	d6, [r3, #16]
 80033d4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80033d8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80033dc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80033e0:	4b2a      	ldr	r3, [pc, #168]	; (800348c <HAL_HRTIM_Compare3EventCallback+0xd4>)
 80033e2:	ed93 7b04 	vldr	d7, [r3, #16]
 80033e6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80033ea:	ed87 7b06 	vstr	d7, [r7, #24]
		const double stop_freq = ((long)((sweep_settings.req_stop_freq/sweep_settings.step_size) + 0.5)) * sweep_settings.step_size;
 80033ee:	4b27      	ldr	r3, [pc, #156]	; (800348c <HAL_HRTIM_Compare3EventCallback+0xd4>)
 80033f0:	ed93 5b02 	vldr	d5, [r3, #8]
 80033f4:	4b25      	ldr	r3, [pc, #148]	; (800348c <HAL_HRTIM_Compare3EventCallback+0xd4>)
 80033f6:	ed93 6b04 	vldr	d6, [r3, #16]
 80033fa:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80033fe:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8003402:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003406:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800340a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800340e:	4b1f      	ldr	r3, [pc, #124]	; (800348c <HAL_HRTIM_Compare3EventCallback+0xd4>)
 8003410:	ed93 7b04 	vldr	d7, [r3, #16]
 8003414:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003418:	ed87 7b04 	vstr	d7, [r7, #16]
		const uint32_t num_points = ((stop_freq - start_freq)/sweep_settings.step_size) + 1;
 800341c:	ed97 6b04 	vldr	d6, [r7, #16]
 8003420:	ed97 7b06 	vldr	d7, [r7, #24]
 8003424:	ee36 5b47 	vsub.f64	d5, d6, d7
 8003428:	4b18      	ldr	r3, [pc, #96]	; (800348c <HAL_HRTIM_Compare3EventCallback+0xd4>)
 800342a:	ed93 6b04 	vldr	d6, [r3, #16]
 800342e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003432:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003436:	ee37 7b06 	vadd.f64	d7, d7, d6
 800343a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800343e:	ee17 3a90 	vmov	r3, s15
 8003442:	60fb      	str	r3, [r7, #12]
		static uint32_t i = 0;

		/* Configure the Microwave frequency */
		if (i == num_points) {
 8003444:	4b12      	ldr	r3, [pc, #72]	; (8003490 <HAL_HRTIM_Compare3EventCallback+0xd8>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	429a      	cmp	r2, r3
 800344c:	d106      	bne.n	800345c <HAL_HRTIM_Compare3EventCallback+0xa4>
			stop_pop();
 800344e:	f018 f81f 	bl	801b490 <__stop_pop_veneer>
			i = 0;
 8003452:	4b0f      	ldr	r3, [pc, #60]	; (8003490 <HAL_HRTIM_Compare3EventCallback+0xd8>)
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]
			start_pop();
 8003458:	f018 f80a 	bl	801b470 <__start_pop_veneer>

#ifdef SYNTH_ENABLE
		set_frequency_hz(start_freq + (i * sweep_settings.step_size));
#endif

		i = i + 1;
 800345c:	4b0c      	ldr	r3, [pc, #48]	; (8003490 <HAL_HRTIM_Compare3EventCallback+0xd8>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	3301      	adds	r3, #1
 8003462:	4a0b      	ldr	r2, [pc, #44]	; (8003490 <HAL_HRTIM_Compare3EventCallback+0xd8>)
 8003464:	6013      	str	r3, [r2, #0]

		pop_cycle_count = pop_cycle_count + 1;
 8003466:	4b0b      	ldr	r3, [pc, #44]	; (8003494 <HAL_HRTIM_Compare3EventCallback+0xdc>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	3301      	adds	r3, #1
 800346c:	4a09      	ldr	r2, [pc, #36]	; (8003494 <HAL_HRTIM_Compare3EventCallback+0xdc>)
 800346e:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); //toggle amber LED
 8003470:	2102      	movs	r1, #2
 8003472:	4809      	ldr	r0, [pc, #36]	; (8003498 <HAL_HRTIM_Compare3EventCallback+0xe0>)
 8003474:	f003 ffc3 	bl	80073fe <HAL_GPIO_TogglePin>
		printf("POP Cycle %lu done.\r\n", pop_cycle_count);
 8003478:	4b06      	ldr	r3, [pc, #24]	; (8003494 <HAL_HRTIM_Compare3EventCallback+0xdc>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4619      	mov	r1, r3
 800347e:	4807      	ldr	r0, [pc, #28]	; (800349c <HAL_HRTIM_Compare3EventCallback+0xe4>)
 8003480:	f016 f85c 	bl	801953c <iprintf>

	/* Called when the second microwave pulse goes high */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_E) {
	}

}
 8003484:	bf00      	nop
 8003486:	3720      	adds	r7, #32
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	0801e6b8 	.word	0x0801e6b8
 8003490:	200006c4 	.word	0x200006c4
 8003494:	200006bc 	.word	0x200006bc
 8003498:	58021000 	.word	0x58021000
 800349c:	0801bcc0 	.word	0x0801bcc0

080034a0 <HAL_HRTIM_RepetitionEventCallback>:

void HAL_HRTIM_RepetitionEventCallback(HRTIM_HandleTypeDef *hhrtim,
		uint32_t TimerIdx) {
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]

	/* Called at the start of the next POP cycle */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_A) {
	}
}
 80034aa:	bf00      	nop
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
	...

080034b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80034b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80034f0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80034bc:	f7ff feda 	bl	8003274 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80034c0:	480c      	ldr	r0, [pc, #48]	; (80034f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80034c2:	490d      	ldr	r1, [pc, #52]	; (80034f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80034c4:	4a0d      	ldr	r2, [pc, #52]	; (80034fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80034c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034c8:	e002      	b.n	80034d0 <LoopCopyDataInit>

080034ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034ce:	3304      	adds	r3, #4

080034d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034d4:	d3f9      	bcc.n	80034ca <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034d6:	4a0a      	ldr	r2, [pc, #40]	; (8003500 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80034d8:	4c0a      	ldr	r4, [pc, #40]	; (8003504 <LoopFillZerobss+0x22>)
  movs r3, #0
 80034da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034dc:	e001      	b.n	80034e2 <LoopFillZerobss>

080034de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034e0:	3204      	adds	r2, #4

080034e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034e4:	d3fb      	bcc.n	80034de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80034e6:	f016 f9d1 	bl	801988c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80034ea:	f7fe fb51 	bl	8001b90 <main>
  bx  lr
 80034ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80034f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80034f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034f8:	2000022c 	.word	0x2000022c
  ldr r2, =_sidata
 80034fc:	0801ebd0 	.word	0x0801ebd0
  ldr r2, =_sbss
 8003500:	200002f0 	.word	0x200002f0
  ldr r4, =_ebss
 8003504:	20008370 	.word	0x20008370

08003508 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003508:	e7fe      	b.n	8003508 <ADC_IRQHandler>

0800350a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800350a:	b480      	push	{r7}
 800350c:	b083      	sub	sp, #12
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
 8003512:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00b      	beq.n	8003532 <LAN8742_RegisterBusIO+0x28>
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d007      	beq.n	8003532 <LAN8742_RegisterBusIO+0x28>
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d003      	beq.n	8003532 <LAN8742_RegisterBusIO+0x28>
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d102      	bne.n	8003538 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8003532:	f04f 33ff 	mov.w	r3, #4294967295
 8003536:	e014      	b.n	8003562 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685a      	ldr	r2, [r3, #4]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	68da      	ldr	r2, [r3, #12]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	689a      	ldr	r2, [r3, #8]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	691a      	ldr	r2, [r3, #16]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	370c      	adds	r7, #12
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr

0800356e <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800356e:	b580      	push	{r7, lr}
 8003570:	b086      	sub	sp, #24
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8003576:	2300      	movs	r3, #0
 8003578:	60fb      	str	r3, [r7, #12]
 800357a:	2300      	movs	r3, #0
 800357c:	60bb      	str	r3, [r7, #8]
 800357e:	2300      	movs	r3, #0
 8003580:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8003582:	2300      	movs	r3, #0
 8003584:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d17c      	bne.n	8003688 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d002      	beq.n	800359c <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2220      	movs	r2, #32
 80035a0:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80035a2:	2300      	movs	r3, #0
 80035a4:	617b      	str	r3, [r7, #20]
 80035a6:	e01c      	b.n	80035e2 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	f107 0208 	add.w	r2, r7, #8
 80035b0:	2112      	movs	r1, #18
 80035b2:	6978      	ldr	r0, [r7, #20]
 80035b4:	4798      	blx	r3
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	da03      	bge.n	80035c4 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 80035bc:	f06f 0304 	mvn.w	r3, #4
 80035c0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 80035c2:	e00b      	b.n	80035dc <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	f003 031f 	and.w	r3, r3, #31
 80035ca:	697a      	ldr	r2, [r7, #20]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d105      	bne.n	80035dc <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80035d6:	2300      	movs	r3, #0
 80035d8:	613b      	str	r3, [r7, #16]
         break;
 80035da:	e005      	b.n	80035e8 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	3301      	adds	r3, #1
 80035e0:	617b      	str	r3, [r7, #20]
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	2b1f      	cmp	r3, #31
 80035e6:	d9df      	bls.n	80035a8 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2b1f      	cmp	r3, #31
 80035ee:	d902      	bls.n	80035f6 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80035f0:	f06f 0302 	mvn.w	r3, #2
 80035f4:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d145      	bne.n	8003688 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	6810      	ldr	r0, [r2, #0]
 8003604:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003608:	2100      	movs	r1, #0
 800360a:	4798      	blx	r3
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	db37      	blt.n	8003682 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	6810      	ldr	r0, [r2, #0]
 800361a:	f107 0208 	add.w	r2, r7, #8
 800361e:	2100      	movs	r1, #0
 8003620:	4798      	blx	r3
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	db28      	blt.n	800367a <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	699b      	ldr	r3, [r3, #24]
 800362c:	4798      	blx	r3
 800362e:	4603      	mov	r3, r0
 8003630:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8003632:	e01c      	b.n	800366e <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	4798      	blx	r3
 800363a:	4603      	mov	r3, r0
 800363c:	461a      	mov	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003646:	d80e      	bhi.n	8003666 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	695b      	ldr	r3, [r3, #20]
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	6810      	ldr	r0, [r2, #0]
 8003650:	f107 0208 	add.w	r2, r7, #8
 8003654:	2100      	movs	r1, #0
 8003656:	4798      	blx	r3
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	da07      	bge.n	800366e <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 800365e:	f06f 0304 	mvn.w	r3, #4
 8003662:	613b      	str	r3, [r7, #16]
                 break;
 8003664:	e010      	b.n	8003688 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8003666:	f06f 0301 	mvn.w	r3, #1
 800366a:	613b      	str	r3, [r7, #16]
               break;
 800366c:	e00c      	b.n	8003688 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d1dd      	bne.n	8003634 <LAN8742_Init+0xc6>
 8003678:	e006      	b.n	8003688 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800367a:	f06f 0304 	mvn.w	r3, #4
 800367e:	613b      	str	r3, [r7, #16]
 8003680:	e002      	b.n	8003688 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8003682:	f06f 0303 	mvn.w	r3, #3
 8003686:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d112      	bne.n	80036b4 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	4798      	blx	r3
 8003694:	4603      	mov	r3, r0
 8003696:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8003698:	bf00      	nop
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	4798      	blx	r3
 80036a0:	4603      	mov	r3, r0
 80036a2:	461a      	mov	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80036ac:	d9f5      	bls.n	800369a <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2201      	movs	r2, #1
 80036b2:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 80036b4:	693b      	ldr	r3, [r7, #16]
 }
 80036b6:	4618      	mov	r0, r3
 80036b8:	3718      	adds	r7, #24
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	b084      	sub	sp, #16
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80036c6:	2300      	movs	r3, #0
 80036c8:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	6810      	ldr	r0, [r2, #0]
 80036d2:	f107 020c 	add.w	r2, r7, #12
 80036d6:	2101      	movs	r1, #1
 80036d8:	4798      	blx	r3
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	da02      	bge.n	80036e6 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80036e0:	f06f 0304 	mvn.w	r3, #4
 80036e4:	e06e      	b.n	80037c4 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	6810      	ldr	r0, [r2, #0]
 80036ee:	f107 020c 	add.w	r2, r7, #12
 80036f2:	2101      	movs	r1, #1
 80036f4:	4798      	blx	r3
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	da02      	bge.n	8003702 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80036fc:	f06f 0304 	mvn.w	r3, #4
 8003700:	e060      	b.n	80037c4 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f003 0304 	and.w	r3, r3, #4
 8003708:	2b00      	cmp	r3, #0
 800370a:	d101      	bne.n	8003710 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 800370c:	2301      	movs	r3, #1
 800370e:	e059      	b.n	80037c4 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	695b      	ldr	r3, [r3, #20]
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	6810      	ldr	r0, [r2, #0]
 8003718:	f107 020c 	add.w	r2, r7, #12
 800371c:	2100      	movs	r1, #0
 800371e:	4798      	blx	r3
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	da02      	bge.n	800372c <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8003726:	f06f 0304 	mvn.w	r3, #4
 800372a:	e04b      	b.n	80037c4 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d11b      	bne.n	800376e <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d006      	beq.n	800374e <LAN8742_GetLinkState+0x90>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003746:	2b00      	cmp	r3, #0
 8003748:	d001      	beq.n	800374e <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800374a:	2302      	movs	r3, #2
 800374c:	e03a      	b.n	80037c4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d001      	beq.n	800375c <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8003758:	2303      	movs	r3, #3
 800375a:	e033      	b.n	80037c4 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003762:	2b00      	cmp	r3, #0
 8003764:	d001      	beq.n	800376a <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8003766:	2304      	movs	r3, #4
 8003768:	e02c      	b.n	80037c4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800376a:	2305      	movs	r3, #5
 800376c:	e02a      	b.n	80037c4 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	6810      	ldr	r0, [r2, #0]
 8003776:	f107 020c 	add.w	r2, r7, #12
 800377a:	211f      	movs	r1, #31
 800377c:	4798      	blx	r3
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	da02      	bge.n	800378a <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8003784:	f06f 0304 	mvn.w	r3, #4
 8003788:	e01c      	b.n	80037c4 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d101      	bne.n	8003798 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8003794:	2306      	movs	r3, #6
 8003796:	e015      	b.n	80037c4 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f003 031c 	and.w	r3, r3, #28
 800379e:	2b18      	cmp	r3, #24
 80037a0:	d101      	bne.n	80037a6 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80037a2:	2302      	movs	r3, #2
 80037a4:	e00e      	b.n	80037c4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f003 031c 	and.w	r3, r3, #28
 80037ac:	2b08      	cmp	r3, #8
 80037ae:	d101      	bne.n	80037b4 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e007      	b.n	80037c4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f003 031c 	and.w	r3, r3, #28
 80037ba:	2b14      	cmp	r3, #20
 80037bc:	d101      	bne.n	80037c2 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80037be:	2304      	movs	r3, #4
 80037c0:	e000      	b.n	80037c4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80037c2:	2305      	movs	r3, #5
    }				
  }
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037d2:	2003      	movs	r0, #3
 80037d4:	f001 ff1c 	bl	8005610 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80037d8:	f006 fbbc 	bl	8009f54 <HAL_RCC_GetSysClockFreq>
 80037dc:	4602      	mov	r2, r0
 80037de:	4b15      	ldr	r3, [pc, #84]	; (8003834 <HAL_Init+0x68>)
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	0a1b      	lsrs	r3, r3, #8
 80037e4:	f003 030f 	and.w	r3, r3, #15
 80037e8:	4913      	ldr	r1, [pc, #76]	; (8003838 <HAL_Init+0x6c>)
 80037ea:	5ccb      	ldrb	r3, [r1, r3]
 80037ec:	f003 031f 	and.w	r3, r3, #31
 80037f0:	fa22 f303 	lsr.w	r3, r2, r3
 80037f4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80037f6:	4b0f      	ldr	r3, [pc, #60]	; (8003834 <HAL_Init+0x68>)
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	f003 030f 	and.w	r3, r3, #15
 80037fe:	4a0e      	ldr	r2, [pc, #56]	; (8003838 <HAL_Init+0x6c>)
 8003800:	5cd3      	ldrb	r3, [r2, r3]
 8003802:	f003 031f 	and.w	r3, r3, #31
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	fa22 f303 	lsr.w	r3, r2, r3
 800380c:	4a0b      	ldr	r2, [pc, #44]	; (800383c <HAL_Init+0x70>)
 800380e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003810:	4a0b      	ldr	r2, [pc, #44]	; (8003840 <HAL_Init+0x74>)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003816:	2000      	movs	r0, #0
 8003818:	f000 f814 	bl	8003844 <HAL_InitTick>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e002      	b.n	800382c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003826:	f7ff f96f 	bl	8002b08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	3708      	adds	r7, #8
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	58024400 	.word	0x58024400
 8003838:	0801e6d0 	.word	0x0801e6d0
 800383c:	20000014 	.word	0x20000014
 8003840:	20000010 	.word	0x20000010

08003844 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800384c:	4b15      	ldr	r3, [pc, #84]	; (80038a4 <HAL_InitTick+0x60>)
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d101      	bne.n	8003858 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e021      	b.n	800389c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003858:	4b13      	ldr	r3, [pc, #76]	; (80038a8 <HAL_InitTick+0x64>)
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	4b11      	ldr	r3, [pc, #68]	; (80038a4 <HAL_InitTick+0x60>)
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	4619      	mov	r1, r3
 8003862:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003866:	fbb3 f3f1 	udiv	r3, r3, r1
 800386a:	fbb2 f3f3 	udiv	r3, r2, r3
 800386e:	4618      	mov	r0, r3
 8003870:	f001 ff01 	bl	8005676 <HAL_SYSTICK_Config>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e00e      	b.n	800389c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2b0f      	cmp	r3, #15
 8003882:	d80a      	bhi.n	800389a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003884:	2200      	movs	r2, #0
 8003886:	6879      	ldr	r1, [r7, #4]
 8003888:	f04f 30ff 	mov.w	r0, #4294967295
 800388c:	f001 fecb 	bl	8005626 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003890:	4a06      	ldr	r2, [pc, #24]	; (80038ac <HAL_InitTick+0x68>)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003896:	2300      	movs	r3, #0
 8003898:	e000      	b.n	800389c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
}
 800389c:	4618      	mov	r0, r3
 800389e:	3708      	adds	r7, #8
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	20000028 	.word	0x20000028
 80038a8:	20000010 	.word	0x20000010
 80038ac:	20000024 	.word	0x20000024

080038b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038b0:	b480      	push	{r7}
 80038b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80038b4:	4b06      	ldr	r3, [pc, #24]	; (80038d0 <HAL_IncTick+0x20>)
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	461a      	mov	r2, r3
 80038ba:	4b06      	ldr	r3, [pc, #24]	; (80038d4 <HAL_IncTick+0x24>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4413      	add	r3, r2
 80038c0:	4a04      	ldr	r2, [pc, #16]	; (80038d4 <HAL_IncTick+0x24>)
 80038c2:	6013      	str	r3, [r2, #0]
}
 80038c4:	bf00      	nop
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	20000028 	.word	0x20000028
 80038d4:	200006c8 	.word	0x200006c8

080038d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038d8:	b480      	push	{r7}
 80038da:	af00      	add	r7, sp, #0
  return uwTick;
 80038dc:	4b03      	ldr	r3, [pc, #12]	; (80038ec <HAL_GetTick+0x14>)
 80038de:	681b      	ldr	r3, [r3, #0]
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	200006c8 	.word	0x200006c8

080038f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038f8:	f7ff ffee 	bl	80038d8 <HAL_GetTick>
 80038fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003908:	d005      	beq.n	8003916 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800390a:	4b0a      	ldr	r3, [pc, #40]	; (8003934 <HAL_Delay+0x44>)
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	461a      	mov	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	4413      	add	r3, r2
 8003914:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003916:	bf00      	nop
 8003918:	f7ff ffde 	bl	80038d8 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	429a      	cmp	r2, r3
 8003926:	d8f7      	bhi.n	8003918 <HAL_Delay+0x28>
  {
  }
}
 8003928:	bf00      	nop
 800392a:	bf00      	nop
 800392c:	3710      	adds	r7, #16
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	20000028 	.word	0x20000028

08003938 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003938:	b480      	push	{r7}
 800393a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800393c:	4b03      	ldr	r3, [pc, #12]	; (800394c <HAL_GetREVID+0x14>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	0c1b      	lsrs	r3, r3, #16
}
 8003942:	4618      	mov	r0, r3
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr
 800394c:	5c001000 	.word	0x5c001000

08003950 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8003958:	4b06      	ldr	r3, [pc, #24]	; (8003974 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003960:	4904      	ldr	r1, [pc, #16]	; (8003974 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4313      	orrs	r3, r2
 8003966:	604b      	str	r3, [r1, #4]
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr
 8003974:	58000400 	.word	0x58000400

08003978 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003982:	4b07      	ldr	r3, [pc, #28]	; (80039a0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003984:	685a      	ldr	r2, [r3, #4]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	43db      	mvns	r3, r3
 800398a:	401a      	ands	r2, r3
 800398c:	4904      	ldr	r1, [pc, #16]	; (80039a0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	4313      	orrs	r3, r2
 8003992:	604b      	str	r3, [r1, #4]
}
 8003994:	bf00      	nop
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr
 80039a0:	58000400 	.word	0x58000400

080039a4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	431a      	orrs	r2, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	609a      	str	r2, [r3, #8]
}
 80039be:	bf00      	nop
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr

080039ca <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80039ca:	b480      	push	{r7}
 80039cc:	b083      	sub	sp, #12
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
 80039d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	431a      	orrs	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	609a      	str	r2, [r3, #8]
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b087      	sub	sp, #28
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	607a      	str	r2, [r7, #4]
 8003a18:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	3360      	adds	r3, #96	; 0x60
 8003a1e:	461a      	mov	r2, r3
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	4413      	add	r3, r2
 8003a26:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	430b      	orrs	r3, r1
 8003a3a:	431a      	orrs	r2, r3
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003a40:	bf00      	nop
 8003a42:	371c      	adds	r7, #28
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b085      	sub	sp, #20
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	f003 031f 	and.w	r3, r3, #31
 8003a66:	6879      	ldr	r1, [r7, #4]
 8003a68:	fa01 f303 	lsl.w	r3, r1, r3
 8003a6c:	431a      	orrs	r2, r3
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	611a      	str	r2, [r3, #16]
}
 8003a72:	bf00      	nop
 8003a74:	3714      	adds	r7, #20
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr

08003a7e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003a7e:	b480      	push	{r7}
 8003a80:	b087      	sub	sp, #28
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	60f8      	str	r0, [r7, #12]
 8003a86:	60b9      	str	r1, [r7, #8]
 8003a88:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	3360      	adds	r3, #96	; 0x60
 8003a8e:	461a      	mov	r2, r3
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	4413      	add	r3, r2
 8003a96:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	431a      	orrs	r2, r3
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	601a      	str	r2, [r3, #0]
  }
}
 8003aa8:	bf00      	nop
 8003aaa:	371c      	adds	r7, #28
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d101      	bne.n	8003acc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e000      	b.n	8003ace <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003acc:	2300      	movs	r3, #0
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	370c      	adds	r7, #12
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr

08003ada <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003ada:	b480      	push	{r7}
 8003adc:	b087      	sub	sp, #28
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	60f8      	str	r0, [r7, #12]
 8003ae2:	60b9      	str	r1, [r7, #8]
 8003ae4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	3330      	adds	r3, #48	; 0x30
 8003aea:	461a      	mov	r2, r3
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	0a1b      	lsrs	r3, r3, #8
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	f003 030c 	and.w	r3, r3, #12
 8003af6:	4413      	add	r3, r2
 8003af8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	f003 031f 	and.w	r3, r3, #31
 8003b04:	211f      	movs	r1, #31
 8003b06:	fa01 f303 	lsl.w	r3, r1, r3
 8003b0a:	43db      	mvns	r3, r3
 8003b0c:	401a      	ands	r2, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	0e9b      	lsrs	r3, r3, #26
 8003b12:	f003 011f 	and.w	r1, r3, #31
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	f003 031f 	and.w	r3, r3, #31
 8003b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b20:	431a      	orrs	r2, r3
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003b26:	bf00      	nop
 8003b28:	371c      	adds	r7, #28
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr

08003b32 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003b32:	b480      	push	{r7}
 8003b34:	b083      	sub	sp, #12
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b3e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d101      	bne.n	8003b4a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003b46:	2301      	movs	r3, #1
 8003b48:	e000      	b.n	8003b4c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b087      	sub	sp, #28
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	3314      	adds	r3, #20
 8003b68:	461a      	mov	r2, r3
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	0e5b      	lsrs	r3, r3, #25
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	f003 0304 	and.w	r3, r3, #4
 8003b74:	4413      	add	r3, r2
 8003b76:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	0d1b      	lsrs	r3, r3, #20
 8003b80:	f003 031f 	and.w	r3, r3, #31
 8003b84:	2107      	movs	r1, #7
 8003b86:	fa01 f303 	lsl.w	r3, r1, r3
 8003b8a:	43db      	mvns	r3, r3
 8003b8c:	401a      	ands	r2, r3
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	0d1b      	lsrs	r3, r3, #20
 8003b92:	f003 031f 	and.w	r3, r3, #31
 8003b96:	6879      	ldr	r1, [r7, #4]
 8003b98:	fa01 f303 	lsl.w	r3, r1, r3
 8003b9c:	431a      	orrs	r2, r3
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003ba2:	bf00      	nop
 8003ba4:	371c      	adds	r7, #28
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
	...

08003bb0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003bc8:	43db      	mvns	r3, r3
 8003bca:	401a      	ands	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f003 0318 	and.w	r3, r3, #24
 8003bd2:	4908      	ldr	r1, [pc, #32]	; (8003bf4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003bd4:	40d9      	lsrs	r1, r3
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	400b      	ands	r3, r1
 8003bda:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003bde:	431a      	orrs	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003be6:	bf00      	nop
 8003be8:	3714      	adds	r7, #20
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	000fffff 	.word	0x000fffff

08003bf8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f003 031f 	and.w	r3, r3, #31
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	689a      	ldr	r2, [r3, #8]
 8003c3c:	4b04      	ldr	r3, [pc, #16]	; (8003c50 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003c3e:	4013      	ands	r3, r2
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	6093      	str	r3, [r2, #8]
}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr
 8003c50:	5fffffc0 	.word	0x5fffffc0

08003c54 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c68:	d101      	bne.n	8003c6e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e000      	b.n	8003c70 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003c6e:	2300      	movs	r3, #0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689a      	ldr	r2, [r3, #8]
 8003c88:	4b05      	ldr	r3, [pc, #20]	; (8003ca0 <LL_ADC_EnableInternalRegulator+0x24>)
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003c94:	bf00      	nop
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr
 8003ca0:	6fffffc0 	.word	0x6fffffc0

08003ca4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cb4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cb8:	d101      	bne.n	8003cbe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e000      	b.n	8003cc0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	689a      	ldr	r2, [r3, #8]
 8003cd8:	4b05      	ldr	r3, [pc, #20]	; (8003cf0 <LL_ADC_Enable+0x24>)
 8003cda:	4013      	ands	r3, r2
 8003cdc:	f043 0201 	orr.w	r2, r3, #1
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr
 8003cf0:	7fffffc0 	.word	0x7fffffc0

08003cf4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689a      	ldr	r2, [r3, #8]
 8003d00:	4b05      	ldr	r3, [pc, #20]	; (8003d18 <LL_ADC_Disable+0x24>)
 8003d02:	4013      	ands	r3, r2
 8003d04:	f043 0202 	orr.w	r2, r3, #2
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003d0c:	bf00      	nop
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr
 8003d18:	7fffffc0 	.word	0x7fffffc0

08003d1c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	f003 0301 	and.w	r3, r3, #1
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d101      	bne.n	8003d34 <LL_ADC_IsEnabled+0x18>
 8003d30:	2301      	movs	r3, #1
 8003d32:	e000      	b.n	8003d36 <LL_ADC_IsEnabled+0x1a>
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	370c      	adds	r7, #12
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr

08003d42 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003d42:	b480      	push	{r7}
 8003d44:	b083      	sub	sp, #12
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d101      	bne.n	8003d5a <LL_ADC_IsDisableOngoing+0x18>
 8003d56:	2301      	movs	r3, #1
 8003d58:	e000      	b.n	8003d5c <LL_ADC_IsDisableOngoing+0x1a>
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689a      	ldr	r2, [r3, #8]
 8003d74:	4b05      	ldr	r3, [pc, #20]	; (8003d8c <LL_ADC_REG_StartConversion+0x24>)
 8003d76:	4013      	ands	r3, r2
 8003d78:	f043 0204 	orr.w	r2, r3, #4
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr
 8003d8c:	7fffffc0 	.word	0x7fffffc0

08003d90 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f003 0304 	and.w	r3, r3, #4
 8003da0:	2b04      	cmp	r3, #4
 8003da2:	d101      	bne.n	8003da8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003da4:	2301      	movs	r3, #1
 8003da6:	e000      	b.n	8003daa <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr

08003db6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003db6:	b480      	push	{r7}
 8003db8:	b083      	sub	sp, #12
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f003 0308 	and.w	r3, r3, #8
 8003dc6:	2b08      	cmp	r3, #8
 8003dc8:	d101      	bne.n	8003dce <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e000      	b.n	8003dd0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003ddc:	b590      	push	{r4, r7, lr}
 8003dde:	b089      	sub	sp, #36	; 0x24
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003de4:	2300      	movs	r3, #0
 8003de6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003de8:	2300      	movs	r3, #0
 8003dea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d101      	bne.n	8003df6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e18f      	b.n	8004116 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d109      	bne.n	8003e18 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f7fe fe99 	bl	8002b3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f7ff ff19 	bl	8003c54 <LL_ADC_IsDeepPowerDownEnabled>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d004      	beq.n	8003e32 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7ff feff 	bl	8003c30 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7ff ff34 	bl	8003ca4 <LL_ADC_IsInternalRegulatorEnabled>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d114      	bne.n	8003e6c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4618      	mov	r0, r3
 8003e48:	f7ff ff18 	bl	8003c7c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e4c:	4b87      	ldr	r3, [pc, #540]	; (800406c <HAL_ADC_Init+0x290>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	099b      	lsrs	r3, r3, #6
 8003e52:	4a87      	ldr	r2, [pc, #540]	; (8004070 <HAL_ADC_Init+0x294>)
 8003e54:	fba2 2303 	umull	r2, r3, r2, r3
 8003e58:	099b      	lsrs	r3, r3, #6
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003e5e:	e002      	b.n	8003e66 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	3b01      	subs	r3, #1
 8003e64:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1f9      	bne.n	8003e60 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7ff ff17 	bl	8003ca4 <LL_ADC_IsInternalRegulatorEnabled>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d10d      	bne.n	8003e98 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e80:	f043 0210 	orr.w	r2, r3, #16
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e8c:	f043 0201 	orr.w	r2, r3, #1
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7ff ff77 	bl	8003d90 <LL_ADC_REG_IsConversionOngoing>
 8003ea2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea8:	f003 0310 	and.w	r3, r3, #16
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f040 8129 	bne.w	8004104 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	f040 8125 	bne.w	8004104 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ebe:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003ec2:	f043 0202 	orr.w	r2, r3, #2
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7ff ff24 	bl	8003d1c <LL_ADC_IsEnabled>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d136      	bne.n	8003f48 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a65      	ldr	r2, [pc, #404]	; (8004074 <HAL_ADC_Init+0x298>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d004      	beq.n	8003eee <HAL_ADC_Init+0x112>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a63      	ldr	r2, [pc, #396]	; (8004078 <HAL_ADC_Init+0x29c>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d10e      	bne.n	8003f0c <HAL_ADC_Init+0x130>
 8003eee:	4861      	ldr	r0, [pc, #388]	; (8004074 <HAL_ADC_Init+0x298>)
 8003ef0:	f7ff ff14 	bl	8003d1c <LL_ADC_IsEnabled>
 8003ef4:	4604      	mov	r4, r0
 8003ef6:	4860      	ldr	r0, [pc, #384]	; (8004078 <HAL_ADC_Init+0x29c>)
 8003ef8:	f7ff ff10 	bl	8003d1c <LL_ADC_IsEnabled>
 8003efc:	4603      	mov	r3, r0
 8003efe:	4323      	orrs	r3, r4
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	bf0c      	ite	eq
 8003f04:	2301      	moveq	r3, #1
 8003f06:	2300      	movne	r3, #0
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	e008      	b.n	8003f1e <HAL_ADC_Init+0x142>
 8003f0c:	485b      	ldr	r0, [pc, #364]	; (800407c <HAL_ADC_Init+0x2a0>)
 8003f0e:	f7ff ff05 	bl	8003d1c <LL_ADC_IsEnabled>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	bf0c      	ite	eq
 8003f18:	2301      	moveq	r3, #1
 8003f1a:	2300      	movne	r3, #0
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d012      	beq.n	8003f48 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a53      	ldr	r2, [pc, #332]	; (8004074 <HAL_ADC_Init+0x298>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d004      	beq.n	8003f36 <HAL_ADC_Init+0x15a>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a51      	ldr	r2, [pc, #324]	; (8004078 <HAL_ADC_Init+0x29c>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d101      	bne.n	8003f3a <HAL_ADC_Init+0x15e>
 8003f36:	4a52      	ldr	r2, [pc, #328]	; (8004080 <HAL_ADC_Init+0x2a4>)
 8003f38:	e000      	b.n	8003f3c <HAL_ADC_Init+0x160>
 8003f3a:	4a52      	ldr	r2, [pc, #328]	; (8004084 <HAL_ADC_Init+0x2a8>)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	4619      	mov	r1, r3
 8003f42:	4610      	mov	r0, r2
 8003f44:	f7ff fd2e 	bl	80039a4 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003f48:	f7ff fcf6 	bl	8003938 <HAL_GetREVID>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	f241 0203 	movw	r2, #4099	; 0x1003
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d914      	bls.n	8003f80 <HAL_ADC_Init+0x1a4>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	2b10      	cmp	r3, #16
 8003f5c:	d110      	bne.n	8003f80 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	7d5b      	ldrb	r3, [r3, #21]
 8003f62:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003f68:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003f6e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	7f1b      	ldrb	r3, [r3, #28]
 8003f74:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003f76:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003f78:	f043 030c 	orr.w	r3, r3, #12
 8003f7c:	61bb      	str	r3, [r7, #24]
 8003f7e:	e00d      	b.n	8003f9c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	7d5b      	ldrb	r3, [r3, #21]
 8003f84:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003f8a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003f90:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	7f1b      	ldrb	r3, [r3, #28]
 8003f96:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	7f1b      	ldrb	r3, [r3, #28]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d106      	bne.n	8003fb2 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a1b      	ldr	r3, [r3, #32]
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	045b      	lsls	r3, r3, #17
 8003fac:	69ba      	ldr	r2, [r7, #24]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d009      	beq.n	8003fce <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbe:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68da      	ldr	r2, [r3, #12]
 8003fd4:	4b2c      	ldr	r3, [pc, #176]	; (8004088 <HAL_ADC_Init+0x2ac>)
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	6812      	ldr	r2, [r2, #0]
 8003fdc:	69b9      	ldr	r1, [r7, #24]
 8003fde:	430b      	orrs	r3, r1
 8003fe0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7ff fed2 	bl	8003d90 <LL_ADC_REG_IsConversionOngoing>
 8003fec:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7ff fedf 	bl	8003db6 <LL_ADC_INJ_IsConversionOngoing>
 8003ff8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d15f      	bne.n	80040c0 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d15c      	bne.n	80040c0 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	7d1b      	ldrb	r3, [r3, #20]
 800400a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8004010:	4313      	orrs	r3, r2
 8004012:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68da      	ldr	r2, [r3, #12]
 800401a:	4b1c      	ldr	r3, [pc, #112]	; (800408c <HAL_ADC_Init+0x2b0>)
 800401c:	4013      	ands	r3, r2
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	6812      	ldr	r2, [r2, #0]
 8004022:	69b9      	ldr	r1, [r7, #24]
 8004024:	430b      	orrs	r3, r1
 8004026:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800402e:	2b01      	cmp	r3, #1
 8004030:	d130      	bne.n	8004094 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004036:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	691a      	ldr	r2, [r3, #16]
 800403e:	4b14      	ldr	r3, [pc, #80]	; (8004090 <HAL_ADC_Init+0x2b4>)
 8004040:	4013      	ands	r3, r2
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004046:	3a01      	subs	r2, #1
 8004048:	0411      	lsls	r1, r2, #16
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800404e:	4311      	orrs	r1, r2
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004054:	4311      	orrs	r1, r2
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800405a:	430a      	orrs	r2, r1
 800405c:	431a      	orrs	r2, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f042 0201 	orr.w	r2, r2, #1
 8004066:	611a      	str	r2, [r3, #16]
 8004068:	e01c      	b.n	80040a4 <HAL_ADC_Init+0x2c8>
 800406a:	bf00      	nop
 800406c:	20000010 	.word	0x20000010
 8004070:	053e2d63 	.word	0x053e2d63
 8004074:	40022000 	.word	0x40022000
 8004078:	40022100 	.word	0x40022100
 800407c:	58026000 	.word	0x58026000
 8004080:	40022300 	.word	0x40022300
 8004084:	58026300 	.word	0x58026300
 8004088:	fff0c003 	.word	0xfff0c003
 800408c:	ffffbffc 	.word	0xffffbffc
 8004090:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	691a      	ldr	r2, [r3, #16]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f022 0201 	bic.w	r2, r2, #1
 80040a2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	430a      	orrs	r2, r1
 80040b8:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f001 f804 	bl	80050c8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d10c      	bne.n	80040e2 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ce:	f023 010f 	bic.w	r1, r3, #15
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	1e5a      	subs	r2, r3, #1
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	430a      	orrs	r2, r1
 80040de:	631a      	str	r2, [r3, #48]	; 0x30
 80040e0:	e007      	b.n	80040f2 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f022 020f 	bic.w	r2, r2, #15
 80040f0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f6:	f023 0303 	bic.w	r3, r3, #3
 80040fa:	f043 0201 	orr.w	r2, r3, #1
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	655a      	str	r2, [r3, #84]	; 0x54
 8004102:	e007      	b.n	8004114 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004108:	f043 0210 	orr.w	r2, r3, #16
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004114:	7ffb      	ldrb	r3, [r7, #31]
}
 8004116:	4618      	mov	r0, r3
 8004118:	3724      	adds	r7, #36	; 0x24
 800411a:	46bd      	mov	sp, r7
 800411c:	bd90      	pop	{r4, r7, pc}
 800411e:	bf00      	nop

08004120 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b086      	sub	sp, #24
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a92      	ldr	r2, [pc, #584]	; (8004378 <HAL_ADC_Start_IT+0x258>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d004      	beq.n	800413c <HAL_ADC_Start_IT+0x1c>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a91      	ldr	r2, [pc, #580]	; (800437c <HAL_ADC_Start_IT+0x25c>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d101      	bne.n	8004140 <HAL_ADC_Start_IT+0x20>
 800413c:	4b90      	ldr	r3, [pc, #576]	; (8004380 <HAL_ADC_Start_IT+0x260>)
 800413e:	e000      	b.n	8004142 <HAL_ADC_Start_IT+0x22>
 8004140:	4b90      	ldr	r3, [pc, #576]	; (8004384 <HAL_ADC_Start_IT+0x264>)
 8004142:	4618      	mov	r0, r3
 8004144:	f7ff fd58 	bl	8003bf8 <LL_ADC_GetMultimode>
 8004148:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4618      	mov	r0, r3
 8004150:	f7ff fe1e 	bl	8003d90 <LL_ADC_REG_IsConversionOngoing>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	f040 8118 	bne.w	800438c <HAL_ADC_Start_IT+0x26c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004162:	2b01      	cmp	r3, #1
 8004164:	d101      	bne.n	800416a <HAL_ADC_Start_IT+0x4a>
 8004166:	2302      	movs	r3, #2
 8004168:	e113      	b.n	8004392 <HAL_ADC_Start_IT+0x272>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 febe 	bl	8004ef4 <ADC_Enable>
 8004178:	4603      	mov	r3, r0
 800417a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800417c:	7dfb      	ldrb	r3, [r7, #23]
 800417e:	2b00      	cmp	r3, #0
 8004180:	f040 80f5 	bne.w	800436e <HAL_ADC_Start_IT+0x24e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004188:	4b7f      	ldr	r3, [pc, #508]	; (8004388 <HAL_ADC_Start_IT+0x268>)
 800418a:	4013      	ands	r3, r2
 800418c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a78      	ldr	r2, [pc, #480]	; (800437c <HAL_ADC_Start_IT+0x25c>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d002      	beq.n	80041a4 <HAL_ADC_Start_IT+0x84>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	e000      	b.n	80041a6 <HAL_ADC_Start_IT+0x86>
 80041a4:	4b74      	ldr	r3, [pc, #464]	; (8004378 <HAL_ADC_Start_IT+0x258>)
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	6812      	ldr	r2, [r2, #0]
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d002      	beq.n	80041b4 <HAL_ADC_Start_IT+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d105      	bne.n	80041c0 <HAL_ADC_Start_IT+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d006      	beq.n	80041da <HAL_ADC_Start_IT+0xba>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d0:	f023 0206 	bic.w	r2, r3, #6
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	659a      	str	r2, [r3, #88]	; 0x58
 80041d8:	e002      	b.n	80041e0 <HAL_ADC_Start_IT+0xc0>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	221c      	movs	r2, #28
 80041e6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	685a      	ldr	r2, [r3, #4]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f022 021c 	bic.w	r2, r2, #28
 80041fe:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	2b08      	cmp	r3, #8
 8004206:	d108      	bne.n	800421a <HAL_ADC_Start_IT+0xfa>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f042 0208 	orr.w	r2, r2, #8
 8004216:	605a      	str	r2, [r3, #4]
          break;
 8004218:	e008      	b.n	800422c <HAL_ADC_Start_IT+0x10c>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	685a      	ldr	r2, [r3, #4]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f042 0204 	orr.w	r2, r2, #4
 8004228:	605a      	str	r2, [r3, #4]
          break;
 800422a:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004230:	2b00      	cmp	r3, #0
 8004232:	d107      	bne.n	8004244 <HAL_ADC_Start_IT+0x124>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	685a      	ldr	r2, [r3, #4]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f042 0210 	orr.w	r2, r2, #16
 8004242:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a4c      	ldr	r2, [pc, #304]	; (800437c <HAL_ADC_Start_IT+0x25c>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d002      	beq.n	8004254 <HAL_ADC_Start_IT+0x134>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	e000      	b.n	8004256 <HAL_ADC_Start_IT+0x136>
 8004254:	4b48      	ldr	r3, [pc, #288]	; (8004378 <HAL_ADC_Start_IT+0x258>)
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	6812      	ldr	r2, [r2, #0]
 800425a:	4293      	cmp	r3, r2
 800425c:	d008      	beq.n	8004270 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d005      	beq.n	8004270 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	2b05      	cmp	r3, #5
 8004268:	d002      	beq.n	8004270 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	2b09      	cmp	r3, #9
 800426e:	d13a      	bne.n	80042e6 <HAL_ADC_Start_IT+0x1c6>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d02d      	beq.n	80042da <HAL_ADC_Start_IT+0x1ba>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004282:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004286:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	2b08      	cmp	r3, #8
 8004294:	d110      	bne.n	80042b8 <HAL_ADC_Start_IT+0x198>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	685a      	ldr	r2, [r3, #4]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f022 0220 	bic.w	r2, r2, #32
 80042a4:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	685a      	ldr	r2, [r3, #4]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042b4:	605a      	str	r2, [r3, #4]
              break;
 80042b6:	e010      	b.n	80042da <HAL_ADC_Start_IT+0x1ba>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	685a      	ldr	r2, [r3, #4]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042c6:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	685a      	ldr	r2, [r3, #4]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f042 0220 	orr.w	r2, r2, #32
 80042d6:	605a      	str	r2, [r3, #4]
              break;
 80042d8:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4618      	mov	r0, r3
 80042e0:	f7ff fd42 	bl	8003d68 <LL_ADC_REG_StartConversion>
 80042e4:	e054      	b.n	8004390 <HAL_ADC_Start_IT+0x270>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a21      	ldr	r2, [pc, #132]	; (800437c <HAL_ADC_Start_IT+0x25c>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d002      	beq.n	8004302 <HAL_ADC_Start_IT+0x1e2>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	e000      	b.n	8004304 <HAL_ADC_Start_IT+0x1e4>
 8004302:	4b1d      	ldr	r3, [pc, #116]	; (8004378 <HAL_ADC_Start_IT+0x258>)
 8004304:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d03e      	beq.n	8004390 <HAL_ADC_Start_IT+0x270>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004316:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800431a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	2b08      	cmp	r3, #8
 8004328:	d110      	bne.n	800434c <HAL_ADC_Start_IT+0x22c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	685a      	ldr	r2, [r3, #4]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f022 0220 	bic.w	r2, r2, #32
 8004338:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	685a      	ldr	r2, [r3, #4]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004348:	605a      	str	r2, [r3, #4]
              break;
 800434a:	e021      	b.n	8004390 <HAL_ADC_Start_IT+0x270>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	685a      	ldr	r2, [r3, #4]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800435a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	685a      	ldr	r2, [r3, #4]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f042 0220 	orr.w	r2, r2, #32
 800436a:	605a      	str	r2, [r3, #4]
              break;
 800436c:	e010      	b.n	8004390 <HAL_ADC_Start_IT+0x270>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004376:	e00b      	b.n	8004390 <HAL_ADC_Start_IT+0x270>
 8004378:	40022000 	.word	0x40022000
 800437c:	40022100 	.word	0x40022100
 8004380:	40022300 	.word	0x40022300
 8004384:	58026300 	.word	0x58026300
 8004388:	fffff0fe 	.word	0xfffff0fe
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800438c:	2302      	movs	r3, #2
 800438e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004390:	7dfb      	ldrb	r3, [r7, #23]
}
 8004392:	4618      	mov	r0, r3
 8004394:	3718      	adds	r7, #24
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop

0800439c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	370c      	adds	r7, #12
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
	...

080043b8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b08a      	sub	sp, #40	; 0x28
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80043c0:	2300      	movs	r3, #0
 80043c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a87      	ldr	r2, [pc, #540]	; (80045f8 <HAL_ADC_IRQHandler+0x240>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d004      	beq.n	80043e8 <HAL_ADC_IRQHandler+0x30>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a86      	ldr	r2, [pc, #536]	; (80045fc <HAL_ADC_IRQHandler+0x244>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d101      	bne.n	80043ec <HAL_ADC_IRQHandler+0x34>
 80043e8:	4b85      	ldr	r3, [pc, #532]	; (8004600 <HAL_ADC_IRQHandler+0x248>)
 80043ea:	e000      	b.n	80043ee <HAL_ADC_IRQHandler+0x36>
 80043ec:	4b85      	ldr	r3, [pc, #532]	; (8004604 <HAL_ADC_IRQHandler+0x24c>)
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7ff fc02 	bl	8003bf8 <LL_ADC_GetMultimode>
 80043f4:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	f003 0302 	and.w	r3, r3, #2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d017      	beq.n	8004430 <HAL_ADC_IRQHandler+0x78>
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b00      	cmp	r3, #0
 8004408:	d012      	beq.n	8004430 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800440e:	f003 0310 	and.w	r3, r3, #16
 8004412:	2b00      	cmp	r3, #0
 8004414:	d105      	bne.n	8004422 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800441a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f001 f81a 	bl	800545c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2202      	movs	r2, #2
 800442e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	f003 0304 	and.w	r3, r3, #4
 8004436:	2b00      	cmp	r3, #0
 8004438:	d004      	beq.n	8004444 <HAL_ADC_IRQHandler+0x8c>
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	f003 0304 	and.w	r3, r3, #4
 8004440:	2b00      	cmp	r3, #0
 8004442:	d10a      	bne.n	800445a <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800444a:	2b00      	cmp	r3, #0
 800444c:	f000 8083 	beq.w	8004556 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	f003 0308 	and.w	r3, r3, #8
 8004456:	2b00      	cmp	r3, #0
 8004458:	d07d      	beq.n	8004556 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800445e:	f003 0310 	and.w	r3, r3, #16
 8004462:	2b00      	cmp	r3, #0
 8004464:	d105      	bne.n	8004472 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800446a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4618      	mov	r0, r3
 8004478:	f7ff fb1c 	bl	8003ab4 <LL_ADC_REG_IsTriggerSourceSWStart>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d062      	beq.n	8004548 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a5d      	ldr	r2, [pc, #372]	; (80045fc <HAL_ADC_IRQHandler+0x244>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d002      	beq.n	8004492 <HAL_ADC_IRQHandler+0xda>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	e000      	b.n	8004494 <HAL_ADC_IRQHandler+0xdc>
 8004492:	4b59      	ldr	r3, [pc, #356]	; (80045f8 <HAL_ADC_IRQHandler+0x240>)
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	6812      	ldr	r2, [r2, #0]
 8004498:	4293      	cmp	r3, r2
 800449a:	d008      	beq.n	80044ae <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d005      	beq.n	80044ae <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	2b05      	cmp	r3, #5
 80044a6:	d002      	beq.n	80044ae <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	2b09      	cmp	r3, #9
 80044ac:	d104      	bne.n	80044b8 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	623b      	str	r3, [r7, #32]
 80044b6:	e00c      	b.n	80044d2 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a4f      	ldr	r2, [pc, #316]	; (80045fc <HAL_ADC_IRQHandler+0x244>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d002      	beq.n	80044c8 <HAL_ADC_IRQHandler+0x110>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	e000      	b.n	80044ca <HAL_ADC_IRQHandler+0x112>
 80044c8:	4b4b      	ldr	r3, [pc, #300]	; (80045f8 <HAL_ADC_IRQHandler+0x240>)
 80044ca:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80044d2:	6a3b      	ldr	r3, [r7, #32]
 80044d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d135      	bne.n	8004548 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0308 	and.w	r3, r3, #8
 80044e6:	2b08      	cmp	r3, #8
 80044e8:	d12e      	bne.n	8004548 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7ff fc4e 	bl	8003d90 <LL_ADC_REG_IsConversionOngoing>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d11a      	bne.n	8004530 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	685a      	ldr	r2, [r3, #4]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f022 020c 	bic.w	r2, r2, #12
 8004508:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800450e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800451a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d112      	bne.n	8004548 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004526:	f043 0201 	orr.w	r2, r3, #1
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	655a      	str	r2, [r3, #84]	; 0x54
 800452e:	e00b      	b.n	8004548 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004534:	f043 0210 	orr.w	r2, r3, #16
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004540:	f043 0201 	orr.w	r2, r3, #1
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f7fe fa81 	bl	8002a50 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	220c      	movs	r2, #12
 8004554:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	f003 0320 	and.w	r3, r3, #32
 800455c:	2b00      	cmp	r3, #0
 800455e:	d004      	beq.n	800456a <HAL_ADC_IRQHandler+0x1b2>
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	f003 0320 	and.w	r3, r3, #32
 8004566:	2b00      	cmp	r3, #0
 8004568:	d10b      	bne.n	8004582 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004570:	2b00      	cmp	r3, #0
 8004572:	f000 80a0 	beq.w	80046b6 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800457c:	2b00      	cmp	r3, #0
 800457e:	f000 809a 	beq.w	80046b6 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004586:	f003 0310 	and.w	r3, r3, #16
 800458a:	2b00      	cmp	r3, #0
 800458c:	d105      	bne.n	800459a <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004592:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4618      	mov	r0, r3
 80045a0:	f7ff fac7 	bl	8003b32 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80045a4:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7ff fa82 	bl	8003ab4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80045b0:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a11      	ldr	r2, [pc, #68]	; (80045fc <HAL_ADC_IRQHandler+0x244>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d002      	beq.n	80045c2 <HAL_ADC_IRQHandler+0x20a>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	e000      	b.n	80045c4 <HAL_ADC_IRQHandler+0x20c>
 80045c2:	4b0d      	ldr	r3, [pc, #52]	; (80045f8 <HAL_ADC_IRQHandler+0x240>)
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	6812      	ldr	r2, [r2, #0]
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d008      	beq.n	80045de <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d005      	beq.n	80045de <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	2b06      	cmp	r3, #6
 80045d6:	d002      	beq.n	80045de <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	2b07      	cmp	r3, #7
 80045dc:	d104      	bne.n	80045e8 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	623b      	str	r3, [r7, #32]
 80045e6:	e014      	b.n	8004612 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a03      	ldr	r2, [pc, #12]	; (80045fc <HAL_ADC_IRQHandler+0x244>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d00a      	beq.n	8004608 <HAL_ADC_IRQHandler+0x250>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	e008      	b.n	800460a <HAL_ADC_IRQHandler+0x252>
 80045f8:	40022000 	.word	0x40022000
 80045fc:	40022100 	.word	0x40022100
 8004600:	40022300 	.word	0x40022300
 8004604:	58026300 	.word	0x58026300
 8004608:	4b84      	ldr	r3, [pc, #528]	; (800481c <HAL_ADC_IRQHandler+0x464>)
 800460a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d047      	beq.n	80046a8 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004618:	6a3b      	ldr	r3, [r7, #32]
 800461a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d007      	beq.n	8004632 <HAL_ADC_IRQHandler+0x27a>
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d03f      	beq.n	80046a8 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8004628:	6a3b      	ldr	r3, [r7, #32]
 800462a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800462e:	2b00      	cmp	r3, #0
 8004630:	d13a      	bne.n	80046a8 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800463c:	2b40      	cmp	r3, #64	; 0x40
 800463e:	d133      	bne.n	80046a8 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004640:	6a3b      	ldr	r3, [r7, #32]
 8004642:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d12e      	bne.n	80046a8 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4618      	mov	r0, r3
 8004650:	f7ff fbb1 	bl	8003db6 <LL_ADC_INJ_IsConversionOngoing>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d11a      	bne.n	8004690 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	685a      	ldr	r2, [r3, #4]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004668:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800466e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800467a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800467e:	2b00      	cmp	r3, #0
 8004680:	d112      	bne.n	80046a8 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004686:	f043 0201 	orr.w	r2, r3, #1
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	655a      	str	r2, [r3, #84]	; 0x54
 800468e:	e00b      	b.n	80046a8 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004694:	f043 0210 	orr.w	r2, r3, #16
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046a0:	f043 0201 	orr.w	r2, r3, #1
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f000 feaf 	bl	800540c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2260      	movs	r2, #96	; 0x60
 80046b4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d011      	beq.n	80046e4 <HAL_ADC_IRQHandler+0x32c>
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00c      	beq.n	80046e4 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 f8a8 	bl	800482c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2280      	movs	r2, #128	; 0x80
 80046e2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d012      	beq.n	8004714 <HAL_ADC_IRQHandler+0x35c>
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d00d      	beq.n	8004714 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046fc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f000 fe95 	bl	8005434 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004712:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800471a:	2b00      	cmp	r3, #0
 800471c:	d012      	beq.n	8004744 <HAL_ADC_IRQHandler+0x38c>
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00d      	beq.n	8004744 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800472c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f000 fe87 	bl	8005448 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004742:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	f003 0310 	and.w	r3, r3, #16
 800474a:	2b00      	cmp	r3, #0
 800474c:	d043      	beq.n	80047d6 <HAL_ADC_IRQHandler+0x41e>
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	f003 0310 	and.w	r3, r3, #16
 8004754:	2b00      	cmp	r3, #0
 8004756:	d03e      	beq.n	80047d6 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800475c:	2b00      	cmp	r3, #0
 800475e:	d102      	bne.n	8004766 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8004760:	2301      	movs	r3, #1
 8004762:	627b      	str	r3, [r7, #36]	; 0x24
 8004764:	e021      	b.n	80047aa <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d015      	beq.n	8004798 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a2a      	ldr	r2, [pc, #168]	; (800481c <HAL_ADC_IRQHandler+0x464>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d004      	beq.n	8004780 <HAL_ADC_IRQHandler+0x3c8>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a29      	ldr	r2, [pc, #164]	; (8004820 <HAL_ADC_IRQHandler+0x468>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d101      	bne.n	8004784 <HAL_ADC_IRQHandler+0x3cc>
 8004780:	4b28      	ldr	r3, [pc, #160]	; (8004824 <HAL_ADC_IRQHandler+0x46c>)
 8004782:	e000      	b.n	8004786 <HAL_ADC_IRQHandler+0x3ce>
 8004784:	4b28      	ldr	r3, [pc, #160]	; (8004828 <HAL_ADC_IRQHandler+0x470>)
 8004786:	4618      	mov	r0, r3
 8004788:	f7ff fa44 	bl	8003c14 <LL_ADC_GetMultiDMATransfer>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d00b      	beq.n	80047aa <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8004792:	2301      	movs	r3, #1
 8004794:	627b      	str	r3, [r7, #36]	; 0x24
 8004796:	e008      	b.n	80047aa <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	f003 0303 	and.w	r3, r3, #3
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d001      	beq.n	80047aa <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80047a6:	2301      	movs	r3, #1
 80047a8:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80047aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d10e      	bne.n	80047ce <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c0:	f043 0202 	orr.w	r2, r3, #2
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f000 f839 	bl	8004840 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2210      	movs	r2, #16
 80047d4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d018      	beq.n	8004812 <HAL_ADC_IRQHandler+0x45a>
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d013      	beq.n	8004812 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ee:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047fa:	f043 0208 	orr.w	r2, r3, #8
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800480a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f000 fe07 	bl	8005420 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004812:	bf00      	nop
 8004814:	3728      	adds	r7, #40	; 0x28
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	40022000 	.word	0x40022000
 8004820:	40022100 	.word	0x40022100
 8004824:	40022300 	.word	0x40022300
 8004828:	58026300 	.word	0x58026300

0800482c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004834:	bf00      	nop
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004848:	bf00      	nop
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004854:	b590      	push	{r4, r7, lr}
 8004856:	b0a1      	sub	sp, #132	; 0x84
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800485e:	2300      	movs	r3, #0
 8004860:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004864:	2300      	movs	r3, #0
 8004866:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	4a9d      	ldr	r2, [pc, #628]	; (8004ae4 <HAL_ADC_ConfigChannel+0x290>)
 800486e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004876:	2b01      	cmp	r3, #1
 8004878:	d101      	bne.n	800487e <HAL_ADC_ConfigChannel+0x2a>
 800487a:	2302      	movs	r3, #2
 800487c:	e321      	b.n	8004ec2 <HAL_ADC_ConfigChannel+0x66e>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2201      	movs	r2, #1
 8004882:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4618      	mov	r0, r3
 800488c:	f7ff fa80 	bl	8003d90 <LL_ADC_REG_IsConversionOngoing>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	f040 8306 	bne.w	8004ea4 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d108      	bne.n	80048b6 <HAL_ADC_ConfigChannel+0x62>
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	0e9b      	lsrs	r3, r3, #26
 80048aa:	f003 031f 	and.w	r3, r3, #31
 80048ae:	2201      	movs	r2, #1
 80048b0:	fa02 f303 	lsl.w	r3, r2, r3
 80048b4:	e016      	b.n	80048e4 <HAL_ADC_ConfigChannel+0x90>
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048be:	fa93 f3a3 	rbit	r3, r3
 80048c2:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80048c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048c6:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80048c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d101      	bne.n	80048d2 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80048ce:	2320      	movs	r3, #32
 80048d0:	e003      	b.n	80048da <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80048d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048d4:	fab3 f383 	clz	r3, r3
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	f003 031f 	and.w	r3, r3, #31
 80048de:	2201      	movs	r2, #1
 80048e0:	fa02 f303 	lsl.w	r3, r2, r3
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	6812      	ldr	r2, [r2, #0]
 80048e8:	69d1      	ldr	r1, [r2, #28]
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	6812      	ldr	r2, [r2, #0]
 80048ee:	430b      	orrs	r3, r1
 80048f0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6818      	ldr	r0, [r3, #0]
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	6859      	ldr	r1, [r3, #4]
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	461a      	mov	r2, r3
 8004900:	f7ff f8eb 	bl	8003ada <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4618      	mov	r0, r3
 800490a:	f7ff fa41 	bl	8003d90 <LL_ADC_REG_IsConversionOngoing>
 800490e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4618      	mov	r0, r3
 8004916:	f7ff fa4e 	bl	8003db6 <LL_ADC_INJ_IsConversionOngoing>
 800491a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800491c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800491e:	2b00      	cmp	r3, #0
 8004920:	f040 80b3 	bne.w	8004a8a <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004924:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004926:	2b00      	cmp	r3, #0
 8004928:	f040 80af 	bne.w	8004a8a <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6818      	ldr	r0, [r3, #0]
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	6819      	ldr	r1, [r3, #0]
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	461a      	mov	r2, r3
 800493a:	f7ff f90d 	bl	8003b58 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800493e:	4b6a      	ldr	r3, [pc, #424]	; (8004ae8 <HAL_ADC_ConfigChannel+0x294>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004946:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800494a:	d10b      	bne.n	8004964 <HAL_ADC_ConfigChannel+0x110>
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	695a      	ldr	r2, [r3, #20]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	089b      	lsrs	r3, r3, #2
 8004958:	f003 0307 	and.w	r3, r3, #7
 800495c:	005b      	lsls	r3, r3, #1
 800495e:	fa02 f303 	lsl.w	r3, r2, r3
 8004962:	e01d      	b.n	80049a0 <HAL_ADC_ConfigChannel+0x14c>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	f003 0310 	and.w	r3, r3, #16
 800496e:	2b00      	cmp	r3, #0
 8004970:	d10b      	bne.n	800498a <HAL_ADC_ConfigChannel+0x136>
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	695a      	ldr	r2, [r3, #20]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	089b      	lsrs	r3, r3, #2
 800497e:	f003 0307 	and.w	r3, r3, #7
 8004982:	005b      	lsls	r3, r3, #1
 8004984:	fa02 f303 	lsl.w	r3, r2, r3
 8004988:	e00a      	b.n	80049a0 <HAL_ADC_ConfigChannel+0x14c>
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	695a      	ldr	r2, [r3, #20]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	089b      	lsrs	r3, r3, #2
 8004996:	f003 0304 	and.w	r3, r3, #4
 800499a:	005b      	lsls	r3, r3, #1
 800499c:	fa02 f303 	lsl.w	r3, r2, r3
 80049a0:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	2b04      	cmp	r3, #4
 80049a8:	d027      	beq.n	80049fa <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6818      	ldr	r0, [r3, #0]
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	6919      	ldr	r1, [r3, #16]
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049b8:	f7ff f828 	bl	8003a0c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6818      	ldr	r0, [r3, #0]
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	6919      	ldr	r1, [r3, #16]
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	7e5b      	ldrb	r3, [r3, #25]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d102      	bne.n	80049d2 <HAL_ADC_ConfigChannel+0x17e>
 80049cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80049d0:	e000      	b.n	80049d4 <HAL_ADC_ConfigChannel+0x180>
 80049d2:	2300      	movs	r3, #0
 80049d4:	461a      	mov	r2, r3
 80049d6:	f7ff f852 	bl	8003a7e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6818      	ldr	r0, [r3, #0]
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	6919      	ldr	r1, [r3, #16]
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	7e1b      	ldrb	r3, [r3, #24]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d102      	bne.n	80049f0 <HAL_ADC_ConfigChannel+0x19c>
 80049ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80049ee:	e000      	b.n	80049f2 <HAL_ADC_ConfigChannel+0x19e>
 80049f0:	2300      	movs	r3, #0
 80049f2:	461a      	mov	r2, r3
 80049f4:	f7ff f82a 	bl	8003a4c <LL_ADC_SetDataRightShift>
 80049f8:	e047      	b.n	8004a8a <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a00:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	069b      	lsls	r3, r3, #26
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d107      	bne.n	8004a1e <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004a1c:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a24:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	069b      	lsls	r3, r3, #26
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d107      	bne.n	8004a42 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004a40:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a48:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	069b      	lsls	r3, r3, #26
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d107      	bne.n	8004a66 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004a64:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a6c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	069b      	lsls	r3, r3, #26
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d107      	bne.n	8004a8a <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004a88:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f7ff f944 	bl	8003d1c <LL_ADC_IsEnabled>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	f040 820d 	bne.w	8004eb6 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6818      	ldr	r0, [r3, #0]
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	6819      	ldr	r1, [r3, #0]
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	f7ff f881 	bl	8003bb0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	4a0c      	ldr	r2, [pc, #48]	; (8004ae4 <HAL_ADC_ConfigChannel+0x290>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	f040 8133 	bne.w	8004d20 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d110      	bne.n	8004aec <HAL_ADC_ConfigChannel+0x298>
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	0e9b      	lsrs	r3, r3, #26
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	f003 031f 	and.w	r3, r3, #31
 8004ad6:	2b09      	cmp	r3, #9
 8004ad8:	bf94      	ite	ls
 8004ada:	2301      	movls	r3, #1
 8004adc:	2300      	movhi	r3, #0
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	e01e      	b.n	8004b20 <HAL_ADC_ConfigChannel+0x2cc>
 8004ae2:	bf00      	nop
 8004ae4:	47ff0000 	.word	0x47ff0000
 8004ae8:	5c001000 	.word	0x5c001000
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004af2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004af4:	fa93 f3a3 	rbit	r3, r3
 8004af8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004afa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004afc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004afe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d101      	bne.n	8004b08 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8004b04:	2320      	movs	r3, #32
 8004b06:	e003      	b.n	8004b10 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8004b08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b0a:	fab3 f383 	clz	r3, r3
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	3301      	adds	r3, #1
 8004b12:	f003 031f 	and.w	r3, r3, #31
 8004b16:	2b09      	cmp	r3, #9
 8004b18:	bf94      	ite	ls
 8004b1a:	2301      	movls	r3, #1
 8004b1c:	2300      	movhi	r3, #0
 8004b1e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d079      	beq.n	8004c18 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d107      	bne.n	8004b40 <HAL_ADC_ConfigChannel+0x2ec>
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	0e9b      	lsrs	r3, r3, #26
 8004b36:	3301      	adds	r3, #1
 8004b38:	069b      	lsls	r3, r3, #26
 8004b3a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b3e:	e015      	b.n	8004b6c <HAL_ADC_ConfigChannel+0x318>
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b48:	fa93 f3a3 	rbit	r3, r3
 8004b4c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004b4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b50:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004b52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d101      	bne.n	8004b5c <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8004b58:	2320      	movs	r3, #32
 8004b5a:	e003      	b.n	8004b64 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8004b5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b5e:	fab3 f383 	clz	r3, r3
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	3301      	adds	r3, #1
 8004b66:	069b      	lsls	r3, r3, #26
 8004b68:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d109      	bne.n	8004b8c <HAL_ADC_ConfigChannel+0x338>
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	0e9b      	lsrs	r3, r3, #26
 8004b7e:	3301      	adds	r3, #1
 8004b80:	f003 031f 	and.w	r3, r3, #31
 8004b84:	2101      	movs	r1, #1
 8004b86:	fa01 f303 	lsl.w	r3, r1, r3
 8004b8a:	e017      	b.n	8004bbc <HAL_ADC_ConfigChannel+0x368>
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b94:	fa93 f3a3 	rbit	r3, r3
 8004b98:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004b9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b9c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004b9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d101      	bne.n	8004ba8 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8004ba4:	2320      	movs	r3, #32
 8004ba6:	e003      	b.n	8004bb0 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8004ba8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004baa:	fab3 f383 	clz	r3, r3
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	f003 031f 	and.w	r3, r3, #31
 8004bb6:	2101      	movs	r1, #1
 8004bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bbc:	ea42 0103 	orr.w	r1, r2, r3
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d10a      	bne.n	8004be2 <HAL_ADC_ConfigChannel+0x38e>
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	0e9b      	lsrs	r3, r3, #26
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	f003 021f 	and.w	r2, r3, #31
 8004bd8:	4613      	mov	r3, r2
 8004bda:	005b      	lsls	r3, r3, #1
 8004bdc:	4413      	add	r3, r2
 8004bde:	051b      	lsls	r3, r3, #20
 8004be0:	e018      	b.n	8004c14 <HAL_ADC_ConfigChannel+0x3c0>
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bea:	fa93 f3a3 	rbit	r3, r3
 8004bee:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d101      	bne.n	8004bfe <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8004bfa:	2320      	movs	r3, #32
 8004bfc:	e003      	b.n	8004c06 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8004bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c00:	fab3 f383 	clz	r3, r3
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	3301      	adds	r3, #1
 8004c08:	f003 021f 	and.w	r2, r3, #31
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	005b      	lsls	r3, r3, #1
 8004c10:	4413      	add	r3, r2
 8004c12:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c14:	430b      	orrs	r3, r1
 8004c16:	e07e      	b.n	8004d16 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d107      	bne.n	8004c34 <HAL_ADC_ConfigChannel+0x3e0>
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	0e9b      	lsrs	r3, r3, #26
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	069b      	lsls	r3, r3, #26
 8004c2e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c32:	e015      	b.n	8004c60 <HAL_ADC_ConfigChannel+0x40c>
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c3c:	fa93 f3a3 	rbit	r3, r3
 8004c40:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c44:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d101      	bne.n	8004c50 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8004c4c:	2320      	movs	r3, #32
 8004c4e:	e003      	b.n	8004c58 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8004c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c52:	fab3 f383 	clz	r3, r3
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	3301      	adds	r3, #1
 8004c5a:	069b      	lsls	r3, r3, #26
 8004c5c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d109      	bne.n	8004c80 <HAL_ADC_ConfigChannel+0x42c>
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	0e9b      	lsrs	r3, r3, #26
 8004c72:	3301      	adds	r3, #1
 8004c74:	f003 031f 	and.w	r3, r3, #31
 8004c78:	2101      	movs	r1, #1
 8004c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c7e:	e017      	b.n	8004cb0 <HAL_ADC_ConfigChannel+0x45c>
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	fa93 f3a3 	rbit	r3, r3
 8004c8c:	61bb      	str	r3, [r7, #24]
  return result;
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004c92:	6a3b      	ldr	r3, [r7, #32]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d101      	bne.n	8004c9c <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8004c98:	2320      	movs	r3, #32
 8004c9a:	e003      	b.n	8004ca4 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8004c9c:	6a3b      	ldr	r3, [r7, #32]
 8004c9e:	fab3 f383 	clz	r3, r3
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	f003 031f 	and.w	r3, r3, #31
 8004caa:	2101      	movs	r1, #1
 8004cac:	fa01 f303 	lsl.w	r3, r1, r3
 8004cb0:	ea42 0103 	orr.w	r1, r2, r3
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d10d      	bne.n	8004cdc <HAL_ADC_ConfigChannel+0x488>
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	0e9b      	lsrs	r3, r3, #26
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	f003 021f 	and.w	r2, r3, #31
 8004ccc:	4613      	mov	r3, r2
 8004cce:	005b      	lsls	r3, r3, #1
 8004cd0:	4413      	add	r3, r2
 8004cd2:	3b1e      	subs	r3, #30
 8004cd4:	051b      	lsls	r3, r3, #20
 8004cd6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004cda:	e01b      	b.n	8004d14 <HAL_ADC_ConfigChannel+0x4c0>
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	fa93 f3a3 	rbit	r3, r3
 8004ce8:	60fb      	str	r3, [r7, #12]
  return result;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d101      	bne.n	8004cf8 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8004cf4:	2320      	movs	r3, #32
 8004cf6:	e003      	b.n	8004d00 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	fab3 f383 	clz	r3, r3
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	3301      	adds	r3, #1
 8004d02:	f003 021f 	and.w	r2, r3, #31
 8004d06:	4613      	mov	r3, r2
 8004d08:	005b      	lsls	r3, r3, #1
 8004d0a:	4413      	add	r3, r2
 8004d0c:	3b1e      	subs	r3, #30
 8004d0e:	051b      	lsls	r3, r3, #20
 8004d10:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d14:	430b      	orrs	r3, r1
 8004d16:	683a      	ldr	r2, [r7, #0]
 8004d18:	6892      	ldr	r2, [r2, #8]
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	f7fe ff1c 	bl	8003b58 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	f280 80c6 	bge.w	8004eb6 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a67      	ldr	r2, [pc, #412]	; (8004ecc <HAL_ADC_ConfigChannel+0x678>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d004      	beq.n	8004d3e <HAL_ADC_ConfigChannel+0x4ea>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a65      	ldr	r2, [pc, #404]	; (8004ed0 <HAL_ADC_ConfigChannel+0x67c>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d101      	bne.n	8004d42 <HAL_ADC_ConfigChannel+0x4ee>
 8004d3e:	4b65      	ldr	r3, [pc, #404]	; (8004ed4 <HAL_ADC_ConfigChannel+0x680>)
 8004d40:	e000      	b.n	8004d44 <HAL_ADC_ConfigChannel+0x4f0>
 8004d42:	4b65      	ldr	r3, [pc, #404]	; (8004ed8 <HAL_ADC_ConfigChannel+0x684>)
 8004d44:	4618      	mov	r0, r3
 8004d46:	f7fe fe53 	bl	80039f0 <LL_ADC_GetCommonPathInternalCh>
 8004d4a:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a5e      	ldr	r2, [pc, #376]	; (8004ecc <HAL_ADC_ConfigChannel+0x678>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d004      	beq.n	8004d60 <HAL_ADC_ConfigChannel+0x50c>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a5d      	ldr	r2, [pc, #372]	; (8004ed0 <HAL_ADC_ConfigChannel+0x67c>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d10e      	bne.n	8004d7e <HAL_ADC_ConfigChannel+0x52a>
 8004d60:	485a      	ldr	r0, [pc, #360]	; (8004ecc <HAL_ADC_ConfigChannel+0x678>)
 8004d62:	f7fe ffdb 	bl	8003d1c <LL_ADC_IsEnabled>
 8004d66:	4604      	mov	r4, r0
 8004d68:	4859      	ldr	r0, [pc, #356]	; (8004ed0 <HAL_ADC_ConfigChannel+0x67c>)
 8004d6a:	f7fe ffd7 	bl	8003d1c <LL_ADC_IsEnabled>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	4323      	orrs	r3, r4
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	bf0c      	ite	eq
 8004d76:	2301      	moveq	r3, #1
 8004d78:	2300      	movne	r3, #0
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	e008      	b.n	8004d90 <HAL_ADC_ConfigChannel+0x53c>
 8004d7e:	4857      	ldr	r0, [pc, #348]	; (8004edc <HAL_ADC_ConfigChannel+0x688>)
 8004d80:	f7fe ffcc 	bl	8003d1c <LL_ADC_IsEnabled>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	bf0c      	ite	eq
 8004d8a:	2301      	moveq	r3, #1
 8004d8c:	2300      	movne	r3, #0
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d07d      	beq.n	8004e90 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a51      	ldr	r2, [pc, #324]	; (8004ee0 <HAL_ADC_ConfigChannel+0x68c>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d130      	bne.n	8004e00 <HAL_ADC_ConfigChannel+0x5ac>
 8004d9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004da0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d12b      	bne.n	8004e00 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a4b      	ldr	r2, [pc, #300]	; (8004edc <HAL_ADC_ConfigChannel+0x688>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	f040 8081 	bne.w	8004eb6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a44      	ldr	r2, [pc, #272]	; (8004ecc <HAL_ADC_ConfigChannel+0x678>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d004      	beq.n	8004dc8 <HAL_ADC_ConfigChannel+0x574>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a43      	ldr	r2, [pc, #268]	; (8004ed0 <HAL_ADC_ConfigChannel+0x67c>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d101      	bne.n	8004dcc <HAL_ADC_ConfigChannel+0x578>
 8004dc8:	4a42      	ldr	r2, [pc, #264]	; (8004ed4 <HAL_ADC_ConfigChannel+0x680>)
 8004dca:	e000      	b.n	8004dce <HAL_ADC_ConfigChannel+0x57a>
 8004dcc:	4a42      	ldr	r2, [pc, #264]	; (8004ed8 <HAL_ADC_ConfigChannel+0x684>)
 8004dce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dd0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	4610      	mov	r0, r2
 8004dd8:	f7fe fdf7 	bl	80039ca <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004ddc:	4b41      	ldr	r3, [pc, #260]	; (8004ee4 <HAL_ADC_ConfigChannel+0x690>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	099b      	lsrs	r3, r3, #6
 8004de2:	4a41      	ldr	r2, [pc, #260]	; (8004ee8 <HAL_ADC_ConfigChannel+0x694>)
 8004de4:	fba2 2303 	umull	r2, r3, r2, r3
 8004de8:	099b      	lsrs	r3, r3, #6
 8004dea:	3301      	adds	r3, #1
 8004dec:	005b      	lsls	r3, r3, #1
 8004dee:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004df0:	e002      	b.n	8004df8 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	3b01      	subs	r3, #1
 8004df6:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1f9      	bne.n	8004df2 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004dfe:	e05a      	b.n	8004eb6 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a39      	ldr	r2, [pc, #228]	; (8004eec <HAL_ADC_ConfigChannel+0x698>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d11e      	bne.n	8004e48 <HAL_ADC_ConfigChannel+0x5f4>
 8004e0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d119      	bne.n	8004e48 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a30      	ldr	r2, [pc, #192]	; (8004edc <HAL_ADC_ConfigChannel+0x688>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d14b      	bne.n	8004eb6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a2a      	ldr	r2, [pc, #168]	; (8004ecc <HAL_ADC_ConfigChannel+0x678>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d004      	beq.n	8004e32 <HAL_ADC_ConfigChannel+0x5de>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a28      	ldr	r2, [pc, #160]	; (8004ed0 <HAL_ADC_ConfigChannel+0x67c>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d101      	bne.n	8004e36 <HAL_ADC_ConfigChannel+0x5e2>
 8004e32:	4a28      	ldr	r2, [pc, #160]	; (8004ed4 <HAL_ADC_ConfigChannel+0x680>)
 8004e34:	e000      	b.n	8004e38 <HAL_ADC_ConfigChannel+0x5e4>
 8004e36:	4a28      	ldr	r2, [pc, #160]	; (8004ed8 <HAL_ADC_ConfigChannel+0x684>)
 8004e38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e3e:	4619      	mov	r1, r3
 8004e40:	4610      	mov	r0, r2
 8004e42:	f7fe fdc2 	bl	80039ca <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004e46:	e036      	b.n	8004eb6 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a28      	ldr	r2, [pc, #160]	; (8004ef0 <HAL_ADC_ConfigChannel+0x69c>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d131      	bne.n	8004eb6 <HAL_ADC_ConfigChannel+0x662>
 8004e52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d12c      	bne.n	8004eb6 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a1e      	ldr	r2, [pc, #120]	; (8004edc <HAL_ADC_ConfigChannel+0x688>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d127      	bne.n	8004eb6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a18      	ldr	r2, [pc, #96]	; (8004ecc <HAL_ADC_ConfigChannel+0x678>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d004      	beq.n	8004e7a <HAL_ADC_ConfigChannel+0x626>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a16      	ldr	r2, [pc, #88]	; (8004ed0 <HAL_ADC_ConfigChannel+0x67c>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d101      	bne.n	8004e7e <HAL_ADC_ConfigChannel+0x62a>
 8004e7a:	4a16      	ldr	r2, [pc, #88]	; (8004ed4 <HAL_ADC_ConfigChannel+0x680>)
 8004e7c:	e000      	b.n	8004e80 <HAL_ADC_ConfigChannel+0x62c>
 8004e7e:	4a16      	ldr	r2, [pc, #88]	; (8004ed8 <HAL_ADC_ConfigChannel+0x684>)
 8004e80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e82:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004e86:	4619      	mov	r1, r3
 8004e88:	4610      	mov	r0, r2
 8004e8a:	f7fe fd9e 	bl	80039ca <LL_ADC_SetCommonPathInternalCh>
 8004e8e:	e012      	b.n	8004eb6 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e94:	f043 0220 	orr.w	r2, r3, #32
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004ea2:	e008      	b.n	8004eb6 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ea8:	f043 0220 	orr.w	r2, r3, #32
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004ebe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3784      	adds	r7, #132	; 0x84
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd90      	pop	{r4, r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	40022000 	.word	0x40022000
 8004ed0:	40022100 	.word	0x40022100
 8004ed4:	40022300 	.word	0x40022300
 8004ed8:	58026300 	.word	0x58026300
 8004edc:	58026000 	.word	0x58026000
 8004ee0:	cb840000 	.word	0xcb840000
 8004ee4:	20000010 	.word	0x20000010
 8004ee8:	053e2d63 	.word	0x053e2d63
 8004eec:	c7520000 	.word	0xc7520000
 8004ef0:	cfb80000 	.word	0xcfb80000

08004ef4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4618      	mov	r0, r3
 8004f02:	f7fe ff0b 	bl	8003d1c <LL_ADC_IsEnabled>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d16e      	bne.n	8004fea <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	689a      	ldr	r2, [r3, #8]
 8004f12:	4b38      	ldr	r3, [pc, #224]	; (8004ff4 <ADC_Enable+0x100>)
 8004f14:	4013      	ands	r3, r2
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d00d      	beq.n	8004f36 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f1e:	f043 0210 	orr.w	r2, r3, #16
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f2a:	f043 0201 	orr.w	r2, r3, #1
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e05a      	b.n	8004fec <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f7fe fec6 	bl	8003ccc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004f40:	f7fe fcca 	bl	80038d8 <HAL_GetTick>
 8004f44:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a2b      	ldr	r2, [pc, #172]	; (8004ff8 <ADC_Enable+0x104>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d004      	beq.n	8004f5a <ADC_Enable+0x66>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a29      	ldr	r2, [pc, #164]	; (8004ffc <ADC_Enable+0x108>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d101      	bne.n	8004f5e <ADC_Enable+0x6a>
 8004f5a:	4b29      	ldr	r3, [pc, #164]	; (8005000 <ADC_Enable+0x10c>)
 8004f5c:	e000      	b.n	8004f60 <ADC_Enable+0x6c>
 8004f5e:	4b29      	ldr	r3, [pc, #164]	; (8005004 <ADC_Enable+0x110>)
 8004f60:	4618      	mov	r0, r3
 8004f62:	f7fe fe49 	bl	8003bf8 <LL_ADC_GetMultimode>
 8004f66:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a23      	ldr	r2, [pc, #140]	; (8004ffc <ADC_Enable+0x108>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d002      	beq.n	8004f78 <ADC_Enable+0x84>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	e000      	b.n	8004f7a <ADC_Enable+0x86>
 8004f78:	4b1f      	ldr	r3, [pc, #124]	; (8004ff8 <ADC_Enable+0x104>)
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	6812      	ldr	r2, [r2, #0]
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d02c      	beq.n	8004fdc <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d130      	bne.n	8004fea <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f88:	e028      	b.n	8004fdc <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f7fe fec4 	bl	8003d1c <LL_ADC_IsEnabled>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d104      	bne.n	8004fa4 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f7fe fe94 	bl	8003ccc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004fa4:	f7fe fc98 	bl	80038d8 <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d914      	bls.n	8004fdc <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0301 	and.w	r3, r3, #1
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d00d      	beq.n	8004fdc <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fc4:	f043 0210 	orr.w	r2, r3, #16
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fd0:	f043 0201 	orr.w	r2, r3, #1
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e007      	b.n	8004fec <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0301 	and.w	r3, r3, #1
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d1cf      	bne.n	8004f8a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004fea:	2300      	movs	r3, #0
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3710      	adds	r7, #16
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	8000003f 	.word	0x8000003f
 8004ff8:	40022000 	.word	0x40022000
 8004ffc:	40022100 	.word	0x40022100
 8005000:	40022300 	.word	0x40022300
 8005004:	58026300 	.word	0x58026300

08005008 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4618      	mov	r0, r3
 8005016:	f7fe fe94 	bl	8003d42 <LL_ADC_IsDisableOngoing>
 800501a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4618      	mov	r0, r3
 8005022:	f7fe fe7b 	bl	8003d1c <LL_ADC_IsEnabled>
 8005026:	4603      	mov	r3, r0
 8005028:	2b00      	cmp	r3, #0
 800502a:	d047      	beq.n	80050bc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d144      	bne.n	80050bc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	f003 030d 	and.w	r3, r3, #13
 800503c:	2b01      	cmp	r3, #1
 800503e:	d10c      	bne.n	800505a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4618      	mov	r0, r3
 8005046:	f7fe fe55 	bl	8003cf4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2203      	movs	r2, #3
 8005050:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005052:	f7fe fc41 	bl	80038d8 <HAL_GetTick>
 8005056:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005058:	e029      	b.n	80050ae <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800505e:	f043 0210 	orr.w	r2, r3, #16
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800506a:	f043 0201 	orr.w	r2, r3, #1
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e023      	b.n	80050be <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005076:	f7fe fc2f 	bl	80038d8 <HAL_GetTick>
 800507a:	4602      	mov	r2, r0
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	2b02      	cmp	r3, #2
 8005082:	d914      	bls.n	80050ae <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	f003 0301 	and.w	r3, r3, #1
 800508e:	2b00      	cmp	r3, #0
 8005090:	d00d      	beq.n	80050ae <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005096:	f043 0210 	orr.w	r2, r3, #16
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050a2:	f043 0201 	orr.w	r2, r3, #1
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e007      	b.n	80050be <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	f003 0301 	and.w	r3, r3, #1
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d1dc      	bne.n	8005076 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3710      	adds	r7, #16
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
	...

080050c8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a7a      	ldr	r2, [pc, #488]	; (80052c0 <ADC_ConfigureBoostMode+0x1f8>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d004      	beq.n	80050e4 <ADC_ConfigureBoostMode+0x1c>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a79      	ldr	r2, [pc, #484]	; (80052c4 <ADC_ConfigureBoostMode+0x1fc>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d109      	bne.n	80050f8 <ADC_ConfigureBoostMode+0x30>
 80050e4:	4b78      	ldr	r3, [pc, #480]	; (80052c8 <ADC_ConfigureBoostMode+0x200>)
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	bf14      	ite	ne
 80050f0:	2301      	movne	r3, #1
 80050f2:	2300      	moveq	r3, #0
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	e008      	b.n	800510a <ADC_ConfigureBoostMode+0x42>
 80050f8:	4b74      	ldr	r3, [pc, #464]	; (80052cc <ADC_ConfigureBoostMode+0x204>)
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005100:	2b00      	cmp	r3, #0
 8005102:	bf14      	ite	ne
 8005104:	2301      	movne	r3, #1
 8005106:	2300      	moveq	r3, #0
 8005108:	b2db      	uxtb	r3, r3
 800510a:	2b00      	cmp	r3, #0
 800510c:	d01c      	beq.n	8005148 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800510e:	f005 f89b 	bl	800a248 <HAL_RCC_GetHCLKFreq>
 8005112:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800511c:	d010      	beq.n	8005140 <ADC_ConfigureBoostMode+0x78>
 800511e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005122:	d873      	bhi.n	800520c <ADC_ConfigureBoostMode+0x144>
 8005124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005128:	d002      	beq.n	8005130 <ADC_ConfigureBoostMode+0x68>
 800512a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800512e:	d16d      	bne.n	800520c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	0c1b      	lsrs	r3, r3, #16
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	fbb2 f3f3 	udiv	r3, r2, r3
 800513c:	60fb      	str	r3, [r7, #12]
        break;
 800513e:	e068      	b.n	8005212 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	089b      	lsrs	r3, r3, #2
 8005144:	60fb      	str	r3, [r7, #12]
        break;
 8005146:	e064      	b.n	8005212 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005148:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800514c:	f04f 0100 	mov.w	r1, #0
 8005150:	f006 fafc 	bl	800b74c <HAL_RCCEx_GetPeriphCLKFreq>
 8005154:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800515e:	d051      	beq.n	8005204 <ADC_ConfigureBoostMode+0x13c>
 8005160:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005164:	d854      	bhi.n	8005210 <ADC_ConfigureBoostMode+0x148>
 8005166:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800516a:	d047      	beq.n	80051fc <ADC_ConfigureBoostMode+0x134>
 800516c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005170:	d84e      	bhi.n	8005210 <ADC_ConfigureBoostMode+0x148>
 8005172:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005176:	d03d      	beq.n	80051f4 <ADC_ConfigureBoostMode+0x12c>
 8005178:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800517c:	d848      	bhi.n	8005210 <ADC_ConfigureBoostMode+0x148>
 800517e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005182:	d033      	beq.n	80051ec <ADC_ConfigureBoostMode+0x124>
 8005184:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005188:	d842      	bhi.n	8005210 <ADC_ConfigureBoostMode+0x148>
 800518a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800518e:	d029      	beq.n	80051e4 <ADC_ConfigureBoostMode+0x11c>
 8005190:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005194:	d83c      	bhi.n	8005210 <ADC_ConfigureBoostMode+0x148>
 8005196:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800519a:	d01a      	beq.n	80051d2 <ADC_ConfigureBoostMode+0x10a>
 800519c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80051a0:	d836      	bhi.n	8005210 <ADC_ConfigureBoostMode+0x148>
 80051a2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80051a6:	d014      	beq.n	80051d2 <ADC_ConfigureBoostMode+0x10a>
 80051a8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80051ac:	d830      	bhi.n	8005210 <ADC_ConfigureBoostMode+0x148>
 80051ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051b2:	d00e      	beq.n	80051d2 <ADC_ConfigureBoostMode+0x10a>
 80051b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051b8:	d82a      	bhi.n	8005210 <ADC_ConfigureBoostMode+0x148>
 80051ba:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80051be:	d008      	beq.n	80051d2 <ADC_ConfigureBoostMode+0x10a>
 80051c0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80051c4:	d824      	bhi.n	8005210 <ADC_ConfigureBoostMode+0x148>
 80051c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80051ca:	d002      	beq.n	80051d2 <ADC_ConfigureBoostMode+0x10a>
 80051cc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80051d0:	d11e      	bne.n	8005210 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	0c9b      	lsrs	r3, r3, #18
 80051d8:	005b      	lsls	r3, r3, #1
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80051e0:	60fb      	str	r3, [r7, #12]
        break;
 80051e2:	e016      	b.n	8005212 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	091b      	lsrs	r3, r3, #4
 80051e8:	60fb      	str	r3, [r7, #12]
        break;
 80051ea:	e012      	b.n	8005212 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	095b      	lsrs	r3, r3, #5
 80051f0:	60fb      	str	r3, [r7, #12]
        break;
 80051f2:	e00e      	b.n	8005212 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	099b      	lsrs	r3, r3, #6
 80051f8:	60fb      	str	r3, [r7, #12]
        break;
 80051fa:	e00a      	b.n	8005212 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	09db      	lsrs	r3, r3, #7
 8005200:	60fb      	str	r3, [r7, #12]
        break;
 8005202:	e006      	b.n	8005212 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	0a1b      	lsrs	r3, r3, #8
 8005208:	60fb      	str	r3, [r7, #12]
        break;
 800520a:	e002      	b.n	8005212 <ADC_ConfigureBoostMode+0x14a>
        break;
 800520c:	bf00      	nop
 800520e:	e000      	b.n	8005212 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8005210:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8005212:	f7fe fb91 	bl	8003938 <HAL_GetREVID>
 8005216:	4603      	mov	r3, r0
 8005218:	f241 0203 	movw	r2, #4099	; 0x1003
 800521c:	4293      	cmp	r3, r2
 800521e:	d815      	bhi.n	800524c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	4a2b      	ldr	r2, [pc, #172]	; (80052d0 <ADC_ConfigureBoostMode+0x208>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d908      	bls.n	800523a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	689a      	ldr	r2, [r3, #8]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005236:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005238:	e03e      	b.n	80052b8 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	689a      	ldr	r2, [r3, #8]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005248:	609a      	str	r2, [r3, #8]
}
 800524a:	e035      	b.n	80052b8 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	085b      	lsrs	r3, r3, #1
 8005250:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	4a1f      	ldr	r2, [pc, #124]	; (80052d4 <ADC_ConfigureBoostMode+0x20c>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d808      	bhi.n	800526c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	689a      	ldr	r2, [r3, #8]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005268:	609a      	str	r2, [r3, #8]
}
 800526a:	e025      	b.n	80052b8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	4a1a      	ldr	r2, [pc, #104]	; (80052d8 <ADC_ConfigureBoostMode+0x210>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d80a      	bhi.n	800528a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005286:	609a      	str	r2, [r3, #8]
}
 8005288:	e016      	b.n	80052b8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	4a13      	ldr	r2, [pc, #76]	; (80052dc <ADC_ConfigureBoostMode+0x214>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d80a      	bhi.n	80052a8 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052a4:	609a      	str	r2, [r3, #8]
}
 80052a6:	e007      	b.n	80052b8 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	689a      	ldr	r2, [r3, #8]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80052b6:	609a      	str	r2, [r3, #8]
}
 80052b8:	bf00      	nop
 80052ba:	3710      	adds	r7, #16
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	40022000 	.word	0x40022000
 80052c4:	40022100 	.word	0x40022100
 80052c8:	40022300 	.word	0x40022300
 80052cc:	58026300 	.word	0x58026300
 80052d0:	01312d00 	.word	0x01312d00
 80052d4:	005f5e10 	.word	0x005f5e10
 80052d8:	00bebc20 	.word	0x00bebc20
 80052dc:	017d7840 	.word	0x017d7840

080052e0 <LL_ADC_StartCalibration>:
{
 80052e0:	b480      	push	{r7}
 80052e2:	b085      	sub	sp, #20
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	689a      	ldr	r2, [r3, #8]
 80052f0:	4b09      	ldr	r3, [pc, #36]	; (8005318 <LL_ADC_StartCalibration+0x38>)
 80052f2:	4013      	ands	r3, r2
 80052f4:	68ba      	ldr	r2, [r7, #8]
 80052f6:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005300:	430a      	orrs	r2, r1
 8005302:	4313      	orrs	r3, r2
 8005304:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	609a      	str	r2, [r3, #8]
}
 800530c:	bf00      	nop
 800530e:	3714      	adds	r7, #20
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr
 8005318:	3ffeffc0 	.word	0x3ffeffc0

0800531c <LL_ADC_IsCalibrationOnGoing>:
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800532c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005330:	d101      	bne.n	8005336 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005332:	2301      	movs	r3, #1
 8005334:	e000      	b.n	8005338 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b086      	sub	sp, #24
 8005348:	af00      	add	r7, sp, #0
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005350:	2300      	movs	r3, #0
 8005352:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800535a:	2b01      	cmp	r3, #1
 800535c:	d101      	bne.n	8005362 <HAL_ADCEx_Calibration_Start+0x1e>
 800535e:	2302      	movs	r3, #2
 8005360:	e04c      	b.n	80053fc <HAL_ADCEx_Calibration_Start+0xb8>
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2201      	movs	r2, #1
 8005366:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800536a:	68f8      	ldr	r0, [r7, #12]
 800536c:	f7ff fe4c 	bl	8005008 <ADC_Disable>
 8005370:	4603      	mov	r3, r0
 8005372:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005374:	7dfb      	ldrb	r3, [r7, #23]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d135      	bne.n	80053e6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800537e:	4b21      	ldr	r3, [pc, #132]	; (8005404 <HAL_ADCEx_Calibration_Start+0xc0>)
 8005380:	4013      	ands	r3, r2
 8005382:	f043 0202 	orr.w	r2, r3, #2
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	68b9      	ldr	r1, [r7, #8]
 8005392:	4618      	mov	r0, r3
 8005394:	f7ff ffa4 	bl	80052e0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005398:	e014      	b.n	80053c4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	3301      	adds	r3, #1
 800539e:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	4a19      	ldr	r2, [pc, #100]	; (8005408 <HAL_ADCEx_Calibration_Start+0xc4>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d30d      	bcc.n	80053c4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ac:	f023 0312 	bic.w	r3, r3, #18
 80053b0:	f043 0210 	orr.w	r2, r3, #16
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e01b      	b.n	80053fc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4618      	mov	r0, r3
 80053ca:	f7ff ffa7 	bl	800531c <LL_ADC_IsCalibrationOnGoing>
 80053ce:	4603      	mov	r3, r0
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d1e2      	bne.n	800539a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053d8:	f023 0303 	bic.w	r3, r3, #3
 80053dc:	f043 0201 	orr.w	r2, r3, #1
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	655a      	str	r2, [r3, #84]	; 0x54
 80053e4:	e005      	b.n	80053f2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ea:	f043 0210 	orr.w	r2, r3, #16
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80053fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3718      	adds	r7, #24
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	ffffeefd 	.word	0xffffeefd
 8005408:	25c3f800 	.word	0x25c3f800

0800540c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005414:	bf00      	nop
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8005428:	bf00      	nop
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800543c:	bf00      	nop
 800543e:	370c      	adds	r7, #12
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005450:	bf00      	nop
 8005452:	370c      	adds	r7, #12
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005464:	bf00      	nop
 8005466:	370c      	adds	r7, #12
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <__NVIC_SetPriorityGrouping>:
{
 8005470:	b480      	push	{r7}
 8005472:	b085      	sub	sp, #20
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f003 0307 	and.w	r3, r3, #7
 800547e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005480:	4b0b      	ldr	r3, [pc, #44]	; (80054b0 <__NVIC_SetPriorityGrouping+0x40>)
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005486:	68ba      	ldr	r2, [r7, #8]
 8005488:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800548c:	4013      	ands	r3, r2
 800548e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005498:	4b06      	ldr	r3, [pc, #24]	; (80054b4 <__NVIC_SetPriorityGrouping+0x44>)
 800549a:	4313      	orrs	r3, r2
 800549c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800549e:	4a04      	ldr	r2, [pc, #16]	; (80054b0 <__NVIC_SetPriorityGrouping+0x40>)
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	60d3      	str	r3, [r2, #12]
}
 80054a4:	bf00      	nop
 80054a6:	3714      	adds	r7, #20
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr
 80054b0:	e000ed00 	.word	0xe000ed00
 80054b4:	05fa0000 	.word	0x05fa0000

080054b8 <__NVIC_GetPriorityGrouping>:
{
 80054b8:	b480      	push	{r7}
 80054ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80054bc:	4b04      	ldr	r3, [pc, #16]	; (80054d0 <__NVIC_GetPriorityGrouping+0x18>)
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	0a1b      	lsrs	r3, r3, #8
 80054c2:	f003 0307 	and.w	r3, r3, #7
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr
 80054d0:	e000ed00 	.word	0xe000ed00

080054d4 <__NVIC_EnableIRQ>:
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	4603      	mov	r3, r0
 80054dc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80054de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	db0b      	blt.n	80054fe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80054e6:	88fb      	ldrh	r3, [r7, #6]
 80054e8:	f003 021f 	and.w	r2, r3, #31
 80054ec:	4907      	ldr	r1, [pc, #28]	; (800550c <__NVIC_EnableIRQ+0x38>)
 80054ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054f2:	095b      	lsrs	r3, r3, #5
 80054f4:	2001      	movs	r0, #1
 80054f6:	fa00 f202 	lsl.w	r2, r0, r2
 80054fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80054fe:	bf00      	nop
 8005500:	370c      	adds	r7, #12
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop
 800550c:	e000e100 	.word	0xe000e100

08005510 <__NVIC_SetPriority>:
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	4603      	mov	r3, r0
 8005518:	6039      	str	r1, [r7, #0]
 800551a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800551c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005520:	2b00      	cmp	r3, #0
 8005522:	db0a      	blt.n	800553a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	b2da      	uxtb	r2, r3
 8005528:	490c      	ldr	r1, [pc, #48]	; (800555c <__NVIC_SetPriority+0x4c>)
 800552a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800552e:	0112      	lsls	r2, r2, #4
 8005530:	b2d2      	uxtb	r2, r2
 8005532:	440b      	add	r3, r1
 8005534:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005538:	e00a      	b.n	8005550 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	b2da      	uxtb	r2, r3
 800553e:	4908      	ldr	r1, [pc, #32]	; (8005560 <__NVIC_SetPriority+0x50>)
 8005540:	88fb      	ldrh	r3, [r7, #6]
 8005542:	f003 030f 	and.w	r3, r3, #15
 8005546:	3b04      	subs	r3, #4
 8005548:	0112      	lsls	r2, r2, #4
 800554a:	b2d2      	uxtb	r2, r2
 800554c:	440b      	add	r3, r1
 800554e:	761a      	strb	r2, [r3, #24]
}
 8005550:	bf00      	nop
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr
 800555c:	e000e100 	.word	0xe000e100
 8005560:	e000ed00 	.word	0xe000ed00

08005564 <NVIC_EncodePriority>:
{
 8005564:	b480      	push	{r7}
 8005566:	b089      	sub	sp, #36	; 0x24
 8005568:	af00      	add	r7, sp, #0
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f003 0307 	and.w	r3, r3, #7
 8005576:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	f1c3 0307 	rsb	r3, r3, #7
 800557e:	2b04      	cmp	r3, #4
 8005580:	bf28      	it	cs
 8005582:	2304      	movcs	r3, #4
 8005584:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	3304      	adds	r3, #4
 800558a:	2b06      	cmp	r3, #6
 800558c:	d902      	bls.n	8005594 <NVIC_EncodePriority+0x30>
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	3b03      	subs	r3, #3
 8005592:	e000      	b.n	8005596 <NVIC_EncodePriority+0x32>
 8005594:	2300      	movs	r3, #0
 8005596:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005598:	f04f 32ff 	mov.w	r2, #4294967295
 800559c:	69bb      	ldr	r3, [r7, #24]
 800559e:	fa02 f303 	lsl.w	r3, r2, r3
 80055a2:	43da      	mvns	r2, r3
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	401a      	ands	r2, r3
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80055ac:	f04f 31ff 	mov.w	r1, #4294967295
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	fa01 f303 	lsl.w	r3, r1, r3
 80055b6:	43d9      	mvns	r1, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055bc:	4313      	orrs	r3, r2
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3724      	adds	r7, #36	; 0x24
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr
	...

080055cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	3b01      	subs	r3, #1
 80055d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80055dc:	d301      	bcc.n	80055e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80055de:	2301      	movs	r3, #1
 80055e0:	e00f      	b.n	8005602 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80055e2:	4a0a      	ldr	r2, [pc, #40]	; (800560c <SysTick_Config+0x40>)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	3b01      	subs	r3, #1
 80055e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80055ea:	210f      	movs	r1, #15
 80055ec:	f04f 30ff 	mov.w	r0, #4294967295
 80055f0:	f7ff ff8e 	bl	8005510 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80055f4:	4b05      	ldr	r3, [pc, #20]	; (800560c <SysTick_Config+0x40>)
 80055f6:	2200      	movs	r2, #0
 80055f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80055fa:	4b04      	ldr	r3, [pc, #16]	; (800560c <SysTick_Config+0x40>)
 80055fc:	2207      	movs	r2, #7
 80055fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	3708      	adds	r7, #8
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	e000e010 	.word	0xe000e010

08005610 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b082      	sub	sp, #8
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f7ff ff29 	bl	8005470 <__NVIC_SetPriorityGrouping>
}
 800561e:	bf00      	nop
 8005620:	3708      	adds	r7, #8
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}

08005626 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005626:	b580      	push	{r7, lr}
 8005628:	b086      	sub	sp, #24
 800562a:	af00      	add	r7, sp, #0
 800562c:	4603      	mov	r3, r0
 800562e:	60b9      	str	r1, [r7, #8]
 8005630:	607a      	str	r2, [r7, #4]
 8005632:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005634:	f7ff ff40 	bl	80054b8 <__NVIC_GetPriorityGrouping>
 8005638:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	68b9      	ldr	r1, [r7, #8]
 800563e:	6978      	ldr	r0, [r7, #20]
 8005640:	f7ff ff90 	bl	8005564 <NVIC_EncodePriority>
 8005644:	4602      	mov	r2, r0
 8005646:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800564a:	4611      	mov	r1, r2
 800564c:	4618      	mov	r0, r3
 800564e:	f7ff ff5f 	bl	8005510 <__NVIC_SetPriority>
}
 8005652:	bf00      	nop
 8005654:	3718      	adds	r7, #24
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}

0800565a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800565a:	b580      	push	{r7, lr}
 800565c:	b082      	sub	sp, #8
 800565e:	af00      	add	r7, sp, #0
 8005660:	4603      	mov	r3, r0
 8005662:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005664:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005668:	4618      	mov	r0, r3
 800566a:	f7ff ff33 	bl	80054d4 <__NVIC_EnableIRQ>
}
 800566e:	bf00      	nop
 8005670:	3708      	adds	r7, #8
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}

08005676 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005676:	b580      	push	{r7, lr}
 8005678:	b082      	sub	sp, #8
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f7ff ffa4 	bl	80055cc <SysTick_Config>
 8005684:	4603      	mov	r3, r0
}
 8005686:	4618      	mov	r0, r3
 8005688:	3708      	adds	r7, #8
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}

0800568e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800568e:	b580      	push	{r7, lr}
 8005690:	b082      	sub	sp, #8
 8005692:	af00      	add	r7, sp, #0
 8005694:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d101      	bne.n	80056a0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	e014      	b.n	80056ca <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	791b      	ldrb	r3, [r3, #4]
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d105      	bne.n	80056b6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f7fd faab 	bl	8002c0c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2202      	movs	r2, #2
 80056ba:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2201      	movs	r2, #1
 80056c6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3708      	adds	r7, #8
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}

080056d2 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80056d2:	b480      	push	{r7}
 80056d4:	b083      	sub	sp, #12
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
 80056da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	795b      	ldrb	r3, [r3, #5]
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d101      	bne.n	80056e8 <HAL_DAC_Start+0x16>
 80056e4:	2302      	movs	r3, #2
 80056e6:	e040      	b.n	800576a <HAL_DAC_Start+0x98>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2202      	movs	r2, #2
 80056f2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	6819      	ldr	r1, [r3, #0]
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	f003 0310 	and.w	r3, r3, #16
 8005700:	2201      	movs	r2, #1
 8005702:	409a      	lsls	r2, r3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	430a      	orrs	r2, r1
 800570a:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d10f      	bne.n	8005732 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800571c:	2b02      	cmp	r3, #2
 800571e:	d11d      	bne.n	800575c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	685a      	ldr	r2, [r3, #4]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f042 0201 	orr.w	r2, r2, #1
 800572e:	605a      	str	r2, [r3, #4]
 8005730:	e014      	b.n	800575c <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	f003 0310 	and.w	r3, r3, #16
 8005742:	2102      	movs	r1, #2
 8005744:	fa01 f303 	lsl.w	r3, r1, r3
 8005748:	429a      	cmp	r2, r3
 800574a:	d107      	bne.n	800575c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	685a      	ldr	r2, [r3, #4]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f042 0202 	orr.w	r2, r2, #2
 800575a:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	370c      	adds	r7, #12
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr

08005776 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005776:	b480      	push	{r7}
 8005778:	b087      	sub	sp, #28
 800577a:	af00      	add	r7, sp, #0
 800577c:	60f8      	str	r0, [r7, #12]
 800577e:	60b9      	str	r1, [r7, #8]
 8005780:	607a      	str	r2, [r7, #4]
 8005782:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005784:	2300      	movs	r3, #0
 8005786:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d105      	bne.n	80057a0 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4413      	add	r3, r2
 800579a:	3308      	adds	r3, #8
 800579c:	617b      	str	r3, [r7, #20]
 800579e:	e004      	b.n	80057aa <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80057a0:	697a      	ldr	r2, [r7, #20]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4413      	add	r3, r2
 80057a6:	3314      	adds	r3, #20
 80057a8:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	461a      	mov	r2, r3
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	371c      	adds	r7, #28
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b088      	sub	sp, #32
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	795b      	ldrb	r3, [r3, #5]
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d101      	bne.n	80057d8 <HAL_DAC_ConfigChannel+0x18>
 80057d4:	2302      	movs	r3, #2
 80057d6:	e12a      	b.n	8005a2e <HAL_DAC_ConfigChannel+0x26e>
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2201      	movs	r2, #1
 80057dc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2202      	movs	r2, #2
 80057e2:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2b04      	cmp	r3, #4
 80057ea:	f040 8081 	bne.w	80058f0 <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80057ee:	f7fe f873 	bl	80038d8 <HAL_GetTick>
 80057f2:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d140      	bne.n	800587c <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80057fa:	e018      	b.n	800582e <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80057fc:	f7fe f86c 	bl	80038d8 <HAL_GetTick>
 8005800:	4602      	mov	r2, r0
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	2b01      	cmp	r3, #1
 8005808:	d911      	bls.n	800582e <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005810:	4b89      	ldr	r3, [pc, #548]	; (8005a38 <HAL_DAC_ConfigChannel+0x278>)
 8005812:	4013      	ands	r3, r2
 8005814:	2b00      	cmp	r3, #0
 8005816:	d00a      	beq.n	800582e <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	691b      	ldr	r3, [r3, #16]
 800581c:	f043 0208 	orr.w	r2, r3, #8
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2203      	movs	r2, #3
 8005828:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	e0ff      	b.n	8005a2e <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005834:	4b80      	ldr	r3, [pc, #512]	; (8005a38 <HAL_DAC_ConfigChannel+0x278>)
 8005836:	4013      	ands	r3, r2
 8005838:	2b00      	cmp	r3, #0
 800583a:	d1df      	bne.n	80057fc <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 800583c:	2001      	movs	r0, #1
 800583e:	f7fe f857 	bl	80038f0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	68ba      	ldr	r2, [r7, #8]
 8005848:	6992      	ldr	r2, [r2, #24]
 800584a:	641a      	str	r2, [r3, #64]	; 0x40
 800584c:	e023      	b.n	8005896 <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800584e:	f7fe f843 	bl	80038d8 <HAL_GetTick>
 8005852:	4602      	mov	r2, r0
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	2b01      	cmp	r3, #1
 800585a:	d90f      	bls.n	800587c <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005862:	2b00      	cmp	r3, #0
 8005864:	da0a      	bge.n	800587c <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	f043 0208 	orr.w	r2, r3, #8
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2203      	movs	r2, #3
 8005876:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005878:	2303      	movs	r3, #3
 800587a:	e0d8      	b.n	8005a2e <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005882:	2b00      	cmp	r3, #0
 8005884:	dbe3      	blt.n	800584e <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 8005886:	2001      	movs	r0, #1
 8005888:	f7fe f832 	bl	80038f0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68ba      	ldr	r2, [r7, #8]
 8005892:	6992      	ldr	r2, [r2, #24]
 8005894:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f003 0310 	and.w	r3, r3, #16
 80058a2:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80058a6:	fa01 f303 	lsl.w	r3, r1, r3
 80058aa:	43db      	mvns	r3, r3
 80058ac:	ea02 0103 	and.w	r1, r2, r3
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	69da      	ldr	r2, [r3, #28]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f003 0310 	and.w	r3, r3, #16
 80058ba:	409a      	lsls	r2, r3
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	430a      	orrs	r2, r1
 80058c2:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f003 0310 	and.w	r3, r3, #16
 80058d0:	21ff      	movs	r1, #255	; 0xff
 80058d2:	fa01 f303 	lsl.w	r3, r1, r3
 80058d6:	43db      	mvns	r3, r3
 80058d8:	ea02 0103 	and.w	r1, r2, r3
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	6a1a      	ldr	r2, [r3, #32]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f003 0310 	and.w	r3, r3, #16
 80058e6:	409a      	lsls	r2, r3
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	430a      	orrs	r2, r1
 80058ee:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d11d      	bne.n	8005934 <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fe:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f003 0310 	and.w	r3, r3, #16
 8005906:	221f      	movs	r2, #31
 8005908:	fa02 f303 	lsl.w	r3, r2, r3
 800590c:	43db      	mvns	r3, r3
 800590e:	697a      	ldr	r2, [r7, #20]
 8005910:	4013      	ands	r3, r2
 8005912:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	695b      	ldr	r3, [r3, #20]
 8005918:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f003 0310 	and.w	r3, r3, #16
 8005920:	693a      	ldr	r2, [r7, #16]
 8005922:	fa02 f303 	lsl.w	r3, r2, r3
 8005926:	697a      	ldr	r2, [r7, #20]
 8005928:	4313      	orrs	r3, r2
 800592a:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	697a      	ldr	r2, [r7, #20]
 8005932:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800593a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f003 0310 	and.w	r3, r3, #16
 8005942:	2207      	movs	r2, #7
 8005944:	fa02 f303 	lsl.w	r3, r2, r3
 8005948:	43db      	mvns	r3, r3
 800594a:	697a      	ldr	r2, [r7, #20]
 800594c:	4013      	ands	r3, r2
 800594e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	2b01      	cmp	r3, #1
 8005956:	d102      	bne.n	800595e <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
 8005958:	2300      	movs	r3, #0
 800595a:	61fb      	str	r3, [r7, #28]
 800595c:	e00f      	b.n	800597e <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	2b02      	cmp	r3, #2
 8005964:	d102      	bne.n	800596c <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005966:	2301      	movs	r3, #1
 8005968:	61fb      	str	r3, [r7, #28]
 800596a:	e008      	b.n	800597e <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d102      	bne.n	800597a <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005974:	2301      	movs	r3, #1
 8005976:	61fb      	str	r3, [r7, #28]
 8005978:	e001      	b.n	800597e <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800597a:	2300      	movs	r3, #0
 800597c:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	4313      	orrs	r3, r2
 8005988:	69fa      	ldr	r2, [r7, #28]
 800598a:	4313      	orrs	r3, r2
 800598c:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f003 0310 	and.w	r3, r3, #16
 8005994:	693a      	ldr	r2, [r7, #16]
 8005996:	fa02 f303 	lsl.w	r3, r2, r3
 800599a:	697a      	ldr	r2, [r7, #20]
 800599c:	4313      	orrs	r3, r2
 800599e:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	697a      	ldr	r2, [r7, #20]
 80059a6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	6819      	ldr	r1, [r3, #0]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f003 0310 	and.w	r3, r3, #16
 80059b4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80059b8:	fa02 f303 	lsl.w	r3, r2, r3
 80059bc:	43da      	mvns	r2, r3
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	400a      	ands	r2, r1
 80059c4:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f003 0310 	and.w	r3, r3, #16
 80059d4:	f640 72fe 	movw	r2, #4094	; 0xffe
 80059d8:	fa02 f303 	lsl.w	r3, r2, r3
 80059dc:	43db      	mvns	r3, r3
 80059de:	697a      	ldr	r2, [r7, #20]
 80059e0:	4013      	ands	r3, r2
 80059e2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f003 0310 	and.w	r3, r3, #16
 80059f0:	693a      	ldr	r2, [r7, #16]
 80059f2:	fa02 f303 	lsl.w	r3, r2, r3
 80059f6:	697a      	ldr	r2, [r7, #20]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	697a      	ldr	r2, [r7, #20]
 8005a02:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	6819      	ldr	r1, [r3, #0]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f003 0310 	and.w	r3, r3, #16
 8005a10:	22c0      	movs	r2, #192	; 0xc0
 8005a12:	fa02 f303 	lsl.w	r3, r2, r3
 8005a16:	43da      	mvns	r2, r3
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	400a      	ands	r2, r1
 8005a1e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2201      	movs	r2, #1
 8005a24:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3720      	adds	r7, #32
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop
 8005a38:	20008000 	.word	0x20008000

08005a3c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d101      	bne.n	8005a4e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e0cf      	b.n	8005bee <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d106      	bne.n	8005a66 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2223      	movs	r2, #35	; 0x23
 8005a5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f009 f8db 	bl	800ec1c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a66:	4b64      	ldr	r3, [pc, #400]	; (8005bf8 <HAL_ETH_Init+0x1bc>)
 8005a68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005a6c:	4a62      	ldr	r2, [pc, #392]	; (8005bf8 <HAL_ETH_Init+0x1bc>)
 8005a6e:	f043 0302 	orr.w	r3, r3, #2
 8005a72:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005a76:	4b60      	ldr	r3, [pc, #384]	; (8005bf8 <HAL_ETH_Init+0x1bc>)
 8005a78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005a7c:	f003 0302 	and.w	r3, r3, #2
 8005a80:	60bb      	str	r3, [r7, #8]
 8005a82:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	7a1b      	ldrb	r3, [r3, #8]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d103      	bne.n	8005a94 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8005a8c:	2000      	movs	r0, #0
 8005a8e:	f7fd ff5f 	bl	8003950 <HAL_SYSCFG_ETHInterfaceSelect>
 8005a92:	e003      	b.n	8005a9c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8005a94:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8005a98:	f7fd ff5a 	bl	8003950 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8005a9c:	4b57      	ldr	r3, [pc, #348]	; (8005bfc <HAL_ETH_Init+0x1c0>)
 8005a9e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	6812      	ldr	r2, [r2, #0]
 8005aae:	f043 0301 	orr.w	r3, r3, #1
 8005ab2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005ab6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005ab8:	f7fd ff0e 	bl	80038d8 <HAL_GetTick>
 8005abc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005abe:	e011      	b.n	8005ae4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8005ac0:	f7fd ff0a 	bl	80038d8 <HAL_GetTick>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	1ad3      	subs	r3, r2, r3
 8005aca:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005ace:	d909      	bls.n	8005ae4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2204      	movs	r2, #4
 8005ad4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	22e0      	movs	r2, #224	; 0xe0
 8005adc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e084      	b.n	8005bee <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 0301 	and.w	r3, r3, #1
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d1e4      	bne.n	8005ac0 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 fcd4 	bl	80064a4 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8005afc:	f004 fba4 	bl	800a248 <HAL_RCC_GetHCLKFreq>
 8005b00:	4603      	mov	r3, r0
 8005b02:	4a3f      	ldr	r2, [pc, #252]	; (8005c00 <HAL_ETH_Init+0x1c4>)
 8005b04:	fba2 2303 	umull	r2, r3, r2, r3
 8005b08:	0c9a      	lsrs	r2, r3, #18
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	3a01      	subs	r2, #1
 8005b10:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f000 febf 	bl	8006898 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b22:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005b26:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	6812      	ldr	r2, [r2, #0]
 8005b2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b32:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005b36:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	695b      	ldr	r3, [r3, #20]
 8005b3e:	f003 0303 	and.w	r3, r3, #3
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d009      	beq.n	8005b5a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	22e0      	movs	r2, #224	; 0xe0
 8005b52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e049      	b.n	8005bee <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b62:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8005b66:	4b27      	ldr	r3, [pc, #156]	; (8005c04 <HAL_ETH_Init+0x1c8>)
 8005b68:	4013      	ands	r3, r2
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	6952      	ldr	r2, [r2, #20]
 8005b6e:	0051      	lsls	r1, r2, #1
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	6812      	ldr	r2, [r2, #0]
 8005b74:	430b      	orrs	r3, r1
 8005b76:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005b7a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 ff27 	bl	80069d2 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f000 ff6d 	bl	8006a64 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	3305      	adds	r3, #5
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	021a      	lsls	r2, r3, #8
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	3304      	adds	r3, #4
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	4619      	mov	r1, r3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	430a      	orrs	r2, r1
 8005ba4:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	3303      	adds	r3, #3
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	061a      	lsls	r2, r3, #24
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	3302      	adds	r3, #2
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	041b      	lsls	r3, r3, #16
 8005bbc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005bc8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005bd6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005bd8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2210      	movs	r2, #16
 8005be8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3710      	adds	r7, #16
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	58024400 	.word	0x58024400
 8005bfc:	58000400 	.word	0x58000400
 8005c00:	431bde83 	.word	0x431bde83
 8005c04:	ffff8001 	.word	0xffff8001

08005c08 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c16:	2b10      	cmp	r3, #16
 8005c18:	d153      	bne.n	8005cc2 <HAL_ETH_Start+0xba>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2223      	movs	r2, #35	; 0x23
 8005c1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2204      	movs	r2, #4
 8005c26:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f000 f936 	bl	8005e9a <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f042 0202 	orr.w	r2, r2, #2
 8005c3c:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f042 0201 	orr.w	r2, r2, #1
 8005c4c:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f042 0201 	orr.w	r2, r2, #1
 8005c5e:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c6a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	6812      	ldr	r2, [r2, #0]
 8005c72:	f043 0301 	orr.w	r3, r3, #1
 8005c76:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005c7a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c86:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	6812      	ldr	r2, [r2, #0]
 8005c8e:	f043 0301 	orr.w	r3, r3, #1
 8005c92:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005c96:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ca2:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	6812      	ldr	r2, [r2, #0]
 8005caa:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 8005cae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005cb2:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160

    heth->gState = HAL_ETH_STATE_STARTED;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2223      	movs	r2, #35	; 0x23
 8005cba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	e000      	b.n	8005cc4 <HAL_ETH_Start+0xbc>
  }
  else
  {
    return HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
  }
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3708      	adds	r7, #8
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cda:	2b23      	cmp	r3, #35	; 0x23
 8005cdc:	d13f      	bne.n	8005d5e <HAL_ETH_Stop+0x92>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2223      	movs	r2, #35	; 0x23
 8005ce2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cee:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	6812      	ldr	r2, [r2, #0]
 8005cf6:	f023 0301 	bic.w	r3, r3, #1
 8005cfa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005cfe:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d0a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	6812      	ldr	r2, [r2, #0]
 8005d12:	f023 0301 	bic.w	r3, r3, #1
 8005d16:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005d1a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f022 0201 	bic.w	r2, r2, #1
 8005d2c:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f042 0201 	orr.w	r2, r2, #1
 8005d3e:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f022 0202 	bic.w	r2, r2, #2
 8005d50:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2210      	movs	r2, #16
 8005d56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	e000      	b.n	8005d60 <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
  }
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	370c      	adds	r7, #12
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b086      	sub	sp, #24
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d109      	bne.n	8005d92 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d84:	f043 0201 	orr.w	r2, r3, #1
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e07f      	b.n	8005e92 <HAL_ETH_Transmit+0x126>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d98:	2b23      	cmp	r3, #35	; 0x23
 8005d9a:	d179      	bne.n	8005e90 <HAL_ETH_Transmit+0x124>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	68b9      	ldr	r1, [r7, #8]
 8005da0:	68f8      	ldr	r0, [r7, #12]
 8005da2:	f000 febd 	bl	8006b20 <ETH_Prepare_Tx_Descriptors>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d009      	beq.n	8005dc0 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005db2:	f043 0202 	orr.w	r2, r3, #2
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e068      	b.n	8005e92 <HAL_ETH_Transmit+0x126>
  __ASM volatile ("dsb 0xF":::"memory");
 8005dc0:	f3bf 8f4f 	dsb	sy
}
 8005dc4:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	3206      	adds	r2, #6
 8005dce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dd2:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd8:	1c5a      	adds	r2, r3, #1
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	629a      	str	r2, [r3, #40]	; 0x28
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de2:	2b03      	cmp	r3, #3
 8005de4:	d904      	bls.n	8005df0 <HAL_ETH_Transmit+0x84>
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dea:	1f1a      	subs	r2, r3, #4
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	3106      	adds	r1, #6
 8005dfc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005e00:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005e04:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    tickstart = HAL_GetTick();
 8005e08:	f7fd fd66 	bl	80038d8 <HAL_GetTick>
 8005e0c:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8005e0e:	e039      	b.n	8005e84 <HAL_ETH_Transmit+0x118>
    {
      if ((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e18:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8005e1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d012      	beq.n	8005e4a <HAL_ETH_Transmit+0xde>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e2a:	f043 0208 	orr.w	r2, r3, #8
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e3c:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e023      	b.n	8005e92 <HAL_ETH_Transmit+0x126>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e50:	d018      	beq.n	8005e84 <HAL_ETH_Transmit+0x118>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005e52:	f7fd fd41 	bl	80038d8 <HAL_GetTick>
 8005e56:	4602      	mov	r2, r0
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	1ad3      	subs	r3, r2, r3
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d302      	bcc.n	8005e68 <HAL_ETH_Transmit+0xfc>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d10d      	bne.n	8005e84 <HAL_ETH_Transmit+0x118>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e6e:	f043 0204 	orr.w	r2, r3, #4
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC3 = (ETH_DMATXNDESCWBF_FD | ETH_DMATXNDESCWBF_LD);
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8005e7e:	60da      	str	r2, [r3, #12]
          return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e006      	b.n	8005e92 <HAL_ETH_Transmit+0x126>
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	dbc1      	blt.n	8005e10 <HAL_ETH_Transmit+0xa4>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	e000      	b.n	8005e92 <HAL_ETH_Transmit+0x126>
  }
  else
  {
    return HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
  }
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3718      	adds	r7, #24
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}

08005e9a <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8005e9a:	b580      	push	{r7, lr}
 8005e9c:	b088      	sub	sp, #32
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005eae:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	69fa      	ldr	r2, [r7, #28]
 8005eb4:	3212      	adds	r2, #18
 8005eb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eba:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ec0:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8005ec2:	e03b      	b.n	8005f3c <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	691b      	ldr	r3, [r3, #16]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d112      	bne.n	8005ef2 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8005ecc:	f107 030c 	add.w	r3, r7, #12
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f009 f84b 	bl	800ef6c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d102      	bne.n	8005ee2 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8005edc:	2300      	movs	r3, #0
 8005ede:	74fb      	strb	r3, [r7, #19]
 8005ee0:	e007      	b.n	8005ef2 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	461a      	mov	r2, r3
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8005ef2:	7cfb      	ldrb	r3, [r7, #19]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d021      	beq.n	8005f3c <ETH_UpdateDescriptor+0xa2>
  __ASM volatile ("dmb 0xF":::"memory");
 8005ef8:	f3bf 8f5f 	dmb	sy
}
 8005efc:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d004      	beq.n	8005f10 <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 8005f0c:	60da      	str	r2, [r3, #12]
 8005f0e:	e003      	b.n	8005f18 <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 8005f16:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	3301      	adds	r3, #1
 8005f1c:	61fb      	str	r3, [r7, #28]
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	2b03      	cmp	r3, #3
 8005f22:	d902      	bls.n	8005f2a <ETH_UpdateDescriptor+0x90>
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	3b04      	subs	r3, #4
 8005f28:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	69fa      	ldr	r2, [r7, #28]
 8005f2e:	3212      	adds	r2, #18
 8005f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f34:	617b      	str	r3, [r7, #20]
      desccount--;
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	3b01      	subs	r3, #1
 8005f3a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d002      	beq.n	8005f48 <ETH_UpdateDescriptor+0xae>
 8005f42:	7cfb      	ldrb	r3, [r7, #19]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d1bd      	bne.n	8005ec4 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f4c:	69ba      	ldr	r2, [r7, #24]
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d00d      	beq.n	8005f6e <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	69fa      	ldr	r2, [r7, #28]
 8005f66:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	69ba      	ldr	r2, [r7, #24]
 8005f6c:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8005f6e:	bf00      	nop
 8005f70:	3720      	adds	r7, #32
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}

08005f76 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8005f76:	b580      	push	{r7, lr}
 8005f78:	b086      	sub	sp, #24
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	60f8      	str	r0, [r7, #12]
 8005f7e:	60b9      	str	r1, [r7, #8]
 8005f80:	607a      	str	r2, [r7, #4]
 8005f82:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005f8c:	f003 0301 	and.w	r3, r3, #1
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d001      	beq.n	8005f98 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	e03e      	b.n	8006016 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005fa0:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	055b      	lsls	r3, r3, #21
 8005fac:	4313      	orrs	r3, r2
 8005fae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	041b      	lsls	r3, r3, #16
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	f043 030c 	orr.w	r3, r3, #12
 8005fc4:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	f043 0301 	orr.w	r3, r3, #1
 8005fcc:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	697a      	ldr	r2, [r7, #20]
 8005fd4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8005fd8:	f7fd fc7e 	bl	80038d8 <HAL_GetTick>
 8005fdc:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8005fde:	e009      	b.n	8005ff4 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8005fe0:	f7fd fc7a 	bl	80038d8 <HAL_GetTick>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fee:	d901      	bls.n	8005ff4 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	e010      	b.n	8006016 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005ffc:	f003 0301 	and.w	r3, r3, #1
 8006000:	2b00      	cmp	r3, #0
 8006002:	d1ed      	bne.n	8005fe0 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800600c:	b29b      	uxth	r3, r3
 800600e:	461a      	mov	r2, r3
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006014:	2300      	movs	r3, #0
}
 8006016:	4618      	mov	r0, r3
 8006018:	3718      	adds	r7, #24
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
	...

08006020 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b086      	sub	sp, #24
 8006024:	af00      	add	r7, sp, #0
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	607a      	str	r2, [r7, #4]
 800602c:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006036:	f003 0301 	and.w	r3, r3, #1
 800603a:	2b00      	cmp	r3, #0
 800603c:	d001      	beq.n	8006042 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e03c      	b.n	80060bc <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800604a:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	055b      	lsls	r3, r3, #21
 8006056:	4313      	orrs	r3, r2
 8006058:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	041b      	lsls	r3, r3, #16
 8006064:	4313      	orrs	r3, r2
 8006066:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	f023 030c 	bic.w	r3, r3, #12
 800606e:	f043 0304 	orr.w	r3, r3, #4
 8006072:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	f043 0301 	orr.w	r3, r3, #1
 800607a:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	b29a      	uxth	r2, r3
 8006080:	4b10      	ldr	r3, [pc, #64]	; (80060c4 <HAL_ETH_WritePHYRegister+0xa4>)
 8006082:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8006086:	4a0f      	ldr	r2, [pc, #60]	; (80060c4 <HAL_ETH_WritePHYRegister+0xa4>)
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 800608e:	f7fd fc23 	bl	80038d8 <HAL_GetTick>
 8006092:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8006094:	e009      	b.n	80060aa <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8006096:	f7fd fc1f 	bl	80038d8 <HAL_GetTick>
 800609a:	4602      	mov	r2, r0
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	1ad3      	subs	r3, r2, r3
 80060a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060a4:	d901      	bls.n	80060aa <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	e008      	b.n	80060bc <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80060b2:	f003 0301 	and.w	r3, r3, #1
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d1ed      	bne.n	8006096 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 80060ba:	2300      	movs	r3, #0
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3718      	adds	r7, #24
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}
 80060c4:	40028000 	.word	0x40028000

080060c8 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b083      	sub	sp, #12
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d101      	bne.n	80060dc <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	e1c3      	b.n	8006464 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 020c 	and.w	r2, r3, #12
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f003 0310 	and.w	r3, r3, #16
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	bf14      	ite	ne
 80060f8:	2301      	movne	r3, #1
 80060fa:	2300      	moveq	r3, #0
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	461a      	mov	r2, r3
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800611e:	2b00      	cmp	r3, #0
 8006120:	bf0c      	ite	eq
 8006122:	2301      	moveq	r3, #1
 8006124:	2300      	movne	r3, #0
 8006126:	b2db      	uxtb	r3, r3
 8006128:	461a      	mov	r2, r3
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
 800613a:	2b00      	cmp	r3, #0
 800613c:	bf14      	ite	ne
 800613e:	2301      	movne	r3, #1
 8006140:	2300      	moveq	r3, #0
 8006142:	b2db      	uxtb	r3, r3
 8006144:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006154:	2b00      	cmp	r3, #0
 8006156:	bf0c      	ite	eq
 8006158:	2301      	moveq	r3, #1
 800615a:	2300      	movne	r3, #0
 800615c:	b2db      	uxtb	r3, r3
 800615e:	461a      	mov	r2, r3
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 800616a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800616e:	2b00      	cmp	r3, #0
 8006170:	bf14      	ite	ne
 8006172:	2301      	movne	r3, #1
 8006174:	2300      	moveq	r3, #0
 8006176:	b2db      	uxtb	r3, r3
 8006178:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006188:	2b00      	cmp	r3, #0
 800618a:	bf14      	ite	ne
 800618c:	2301      	movne	r3, #1
 800618e:	2300      	moveq	r3, #0
 8006190:	b2db      	uxtb	r3, r3
 8006192:	461a      	mov	r2, r3
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061be:	2b00      	cmp	r3, #0
 80061c0:	bf14      	ite	ne
 80061c2:	2301      	movne	r3, #1
 80061c4:	2300      	moveq	r3, #0
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	461a      	mov	r2, r3
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061d8:	2b00      	cmp	r3, #0
 80061da:	bf0c      	ite	eq
 80061dc:	2301      	moveq	r3, #1
 80061de:	2300      	movne	r3, #0
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	461a      	mov	r2, r3
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	bf0c      	ite	eq
 80061f6:	2301      	moveq	r3, #1
 80061f8:	2300      	movne	r3, #0
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	461a      	mov	r2, r3
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800620c:	2b00      	cmp	r3, #0
 800620e:	bf14      	ite	ne
 8006210:	2301      	movne	r3, #1
 8006212:	2300      	moveq	r3, #0
 8006214:	b2db      	uxtb	r3, r3
 8006216:	461a      	mov	r2, r3
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006226:	2b00      	cmp	r3, #0
 8006228:	bf14      	ite	ne
 800622a:	2301      	movne	r3, #1
 800622c:	2300      	moveq	r3, #0
 800622e:	b2db      	uxtb	r3, r3
 8006230:	461a      	mov	r2, r3
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006240:	2b00      	cmp	r3, #0
 8006242:	bf14      	ite	ne
 8006244:	2301      	movne	r3, #1
 8006246:	2300      	moveq	r3, #0
 8006248:	b2db      	uxtb	r3, r3
 800624a:	461a      	mov	r2, r3
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8006256:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800625a:	2b00      	cmp	r3, #0
 800625c:	bf14      	ite	ne
 800625e:	2301      	movne	r3, #1
 8006260:	2300      	moveq	r3, #0
 8006262:	b2db      	uxtb	r3, r3
 8006264:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006282:	2b00      	cmp	r3, #0
 8006284:	bf14      	ite	ne
 8006286:	2301      	movne	r3, #1
 8006288:	2300      	moveq	r3, #0
 800628a:	b2db      	uxtb	r3, r3
 800628c:	461a      	mov	r2, r3
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	bf0c      	ite	eq
 80062bc:	2301      	moveq	r3, #1
 80062be:	2300      	movne	r3, #0
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	461a      	mov	r2, r3
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	bf14      	ite	ne
 80062d8:	2301      	movne	r3, #1
 80062da:	2300      	moveq	r3, #0
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	461a      	mov	r2, r3
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 80062ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	bf14      	ite	ne
 80062f4:	2301      	movne	r3, #1
 80062f6:	2300      	moveq	r3, #0
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
 800630c:	2b00      	cmp	r3, #0
 800630e:	bf14      	ite	ne
 8006310:	2301      	movne	r3, #1
 8006312:	2300      	moveq	r3, #0
 8006314:	b2db      	uxtb	r3, r3
 8006316:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	0e5b      	lsrs	r3, r3, #25
 8006326:	f003 021f 	and.w	r2, r3, #31
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006338:	2b00      	cmp	r3, #0
 800633a:	bf14      	ite	ne
 800633c:	2301      	movne	r3, #1
 800633e:	2300      	moveq	r3, #0
 8006340:	b2db      	uxtb	r3, r3
 8006342:	461a      	mov	r2, r3
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	f003 020f 	and.w	r2, r3, #15
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800635e:	f003 0302 	and.w	r3, r3, #2
 8006362:	2b00      	cmp	r3, #0
 8006364:	bf14      	ite	ne
 8006366:	2301      	movne	r3, #1
 8006368:	2300      	moveq	r3, #0
 800636a:	b2db      	uxtb	r3, r3
 800636c:	461a      	mov	r2, r3
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800637a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800637e:	2b00      	cmp	r3, #0
 8006380:	bf0c      	ite	eq
 8006382:	2301      	moveq	r3, #1
 8006384:	2300      	movne	r3, #0
 8006386:	b2db      	uxtb	r3, r3
 8006388:	461a      	mov	r2, r3
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006396:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063a4:	0c1b      	lsrs	r3, r3, #16
 80063a6:	b29a      	uxth	r2, r3
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063b4:	f003 0301 	and.w	r3, r3, #1
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	bf14      	ite	ne
 80063bc:	2301      	movne	r3, #1
 80063be:	2300      	moveq	r3, #0
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	461a      	mov	r2, r3
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063d2:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	bf14      	ite	ne
 80063da:	2301      	movne	r3, #1
 80063dc:	2300      	moveq	r3, #0
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80063f0:	f003 0272 	and.w	r2, r3, #114	; 0x72
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8006400:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8006410:	f003 0308 	and.w	r3, r3, #8
 8006414:	2b00      	cmp	r3, #0
 8006416:	bf14      	ite	ne
 8006418:	2301      	movne	r3, #1
 800641a:	2300      	moveq	r3, #0
 800641c:	b2db      	uxtb	r3, r3
 800641e:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800642e:	f003 0310 	and.w	r3, r3, #16
 8006432:	2b00      	cmp	r3, #0
 8006434:	bf14      	ite	ne
 8006436:	2301      	movne	r3, #1
 8006438:	2300      	moveq	r3, #0
 800643a:	b2db      	uxtb	r3, r3
 800643c:	461a      	mov	r2, r3
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 800644c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006450:	2b00      	cmp	r3, #0
 8006452:	bf0c      	ite	eq
 8006454:	2301      	moveq	r3, #1
 8006456:	2300      	movne	r3, #0
 8006458:	b2db      	uxtb	r3, r3
 800645a:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8006462:	2300      	movs	r3, #0
}
 8006464:	4618      	mov	r0, r3
 8006466:	370c      	adds	r7, #12
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr

08006470 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b082      	sub	sp, #8
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d101      	bne.n	8006484 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	e00b      	b.n	800649c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800648a:	2b10      	cmp	r3, #16
 800648c:	d105      	bne.n	800649a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800648e:	6839      	ldr	r1, [r7, #0]
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 f85f 	bl	8006554 <ETH_SetMACConfig>

    return HAL_OK;
 8006496:	2300      	movs	r3, #0
 8006498:	e000      	b.n	800649c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
  }
}
 800649c:	4618      	mov	r0, r3
 800649e:	3708      	adds	r7, #8
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b084      	sub	sp, #16
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80064b4:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80064bc:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80064be:	f003 fec3 	bl	800a248 <HAL_RCC_GetHCLKFreq>
 80064c2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	4a1e      	ldr	r2, [pc, #120]	; (8006540 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d908      	bls.n	80064de <HAL_ETH_SetMDIOClockRange+0x3a>
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	4a1d      	ldr	r2, [pc, #116]	; (8006544 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d804      	bhi.n	80064de <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80064da:	60fb      	str	r3, [r7, #12]
 80064dc:	e027      	b.n	800652e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	4a18      	ldr	r2, [pc, #96]	; (8006544 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d908      	bls.n	80064f8 <HAL_ETH_SetMDIOClockRange+0x54>
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	4a17      	ldr	r2, [pc, #92]	; (8006548 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d204      	bcs.n	80064f8 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80064f4:	60fb      	str	r3, [r7, #12]
 80064f6:	e01a      	b.n	800652e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	4a13      	ldr	r2, [pc, #76]	; (8006548 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d303      	bcc.n	8006508 <HAL_ETH_SetMDIOClockRange+0x64>
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	4a12      	ldr	r2, [pc, #72]	; (800654c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d911      	bls.n	800652c <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	4a10      	ldr	r2, [pc, #64]	; (800654c <HAL_ETH_SetMDIOClockRange+0xa8>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d908      	bls.n	8006522 <HAL_ETH_SetMDIOClockRange+0x7e>
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	4a0f      	ldr	r2, [pc, #60]	; (8006550 <HAL_ETH_SetMDIOClockRange+0xac>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d804      	bhi.n	8006522 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800651e:	60fb      	str	r3, [r7, #12]
 8006520:	e005      	b.n	800652e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006528:	60fb      	str	r3, [r7, #12]
 800652a:	e000      	b.n	800652e <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800652c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	68fa      	ldr	r2, [r7, #12]
 8006534:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8006538:	bf00      	nop
 800653a:	3710      	adds	r7, #16
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}
 8006540:	01312cff 	.word	0x01312cff
 8006544:	02160ebf 	.word	0x02160ebf
 8006548:	03938700 	.word	0x03938700
 800654c:	05f5e0ff 	.word	0x05f5e0ff
 8006550:	08f0d17f 	.word	0x08f0d17f

08006554 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8006554:	b480      	push	{r7}
 8006556:	b085      	sub	sp, #20
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8006566:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	791b      	ldrb	r3, [r3, #4]
 800656c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800656e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	7b1b      	ldrb	r3, [r3, #12]
 8006574:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8006576:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	7b5b      	ldrb	r3, [r3, #13]
 800657c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800657e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	7b9b      	ldrb	r3, [r3, #14]
 8006584:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8006586:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	7bdb      	ldrb	r3, [r3, #15]
 800658c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800658e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8006590:	683a      	ldr	r2, [r7, #0]
 8006592:	7c12      	ldrb	r2, [r2, #16]
 8006594:	2a00      	cmp	r2, #0
 8006596:	d102      	bne.n	800659e <ETH_SetMACConfig+0x4a>
 8006598:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800659c:	e000      	b.n	80065a0 <ETH_SetMACConfig+0x4c>
 800659e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80065a0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80065a2:	683a      	ldr	r2, [r7, #0]
 80065a4:	7c52      	ldrb	r2, [r2, #17]
 80065a6:	2a00      	cmp	r2, #0
 80065a8:	d102      	bne.n	80065b0 <ETH_SetMACConfig+0x5c>
 80065aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80065ae:	e000      	b.n	80065b2 <ETH_SetMACConfig+0x5e>
 80065b0:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80065b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	7c9b      	ldrb	r3, [r3, #18]
 80065b8:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80065ba:	431a      	orrs	r2, r3
               macconf->Speed |
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80065c0:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80065c6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	7f1b      	ldrb	r3, [r3, #28]
 80065cc:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80065ce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	7f5b      	ldrb	r3, [r3, #29]
 80065d4:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80065d6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80065d8:	683a      	ldr	r2, [r7, #0]
 80065da:	7f92      	ldrb	r2, [r2, #30]
 80065dc:	2a00      	cmp	r2, #0
 80065de:	d102      	bne.n	80065e6 <ETH_SetMACConfig+0x92>
 80065e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80065e4:	e000      	b.n	80065e8 <ETH_SetMACConfig+0x94>
 80065e6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80065e8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	7fdb      	ldrb	r3, [r3, #31]
 80065ee:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80065f0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80065f2:	683a      	ldr	r2, [r7, #0]
 80065f4:	f892 2020 	ldrb.w	r2, [r2, #32]
 80065f8:	2a00      	cmp	r2, #0
 80065fa:	d102      	bne.n	8006602 <ETH_SetMACConfig+0xae>
 80065fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006600:	e000      	b.n	8006604 <ETH_SetMACConfig+0xb0>
 8006602:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8006604:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800660a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006612:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8006614:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800661a:	4313      	orrs	r3, r2
 800661c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	4b56      	ldr	r3, [pc, #344]	; (8006780 <ETH_SetMACConfig+0x22c>)
 8006626:	4013      	ands	r3, r2
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	6812      	ldr	r2, [r2, #0]
 800662c:	68f9      	ldr	r1, [r7, #12]
 800662e:	430b      	orrs	r3, r1
 8006630:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006636:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800663e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8006640:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006648:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800664a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006652:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8006654:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8006656:	683a      	ldr	r2, [r7, #0]
 8006658:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 800665c:	2a00      	cmp	r2, #0
 800665e:	d102      	bne.n	8006666 <ETH_SetMACConfig+0x112>
 8006660:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006664:	e000      	b.n	8006668 <ETH_SetMACConfig+0x114>
 8006666:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8006668:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800666e:	4313      	orrs	r3, r2
 8006670:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	685a      	ldr	r2, [r3, #4]
 8006678:	4b42      	ldr	r3, [pc, #264]	; (8006784 <ETH_SetMACConfig+0x230>)
 800667a:	4013      	ands	r3, r2
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	6812      	ldr	r2, [r2, #0]
 8006680:	68f9      	ldr	r1, [r7, #12]
 8006682:	430b      	orrs	r3, r1
 8006684:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800668c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8006692:	4313      	orrs	r3, r2
 8006694:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	68da      	ldr	r2, [r3, #12]
 800669c:	4b3a      	ldr	r3, [pc, #232]	; (8006788 <ETH_SetMACConfig+0x234>)
 800669e:	4013      	ands	r3, r2
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	6812      	ldr	r2, [r2, #0]
 80066a4:	68f9      	ldr	r1, [r7, #12]
 80066a6:	430b      	orrs	r3, r1
 80066a8:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80066b0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80066b6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80066b8:	683a      	ldr	r2, [r7, #0]
 80066ba:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80066be:	2a00      	cmp	r2, #0
 80066c0:	d101      	bne.n	80066c6 <ETH_SetMACConfig+0x172>
 80066c2:	2280      	movs	r2, #128	; 0x80
 80066c4:	e000      	b.n	80066c8 <ETH_SetMACConfig+0x174>
 80066c6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80066c8:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066ce:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80066d0:	4313      	orrs	r3, r2
 80066d2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80066da:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80066de:	4013      	ands	r3, r2
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	6812      	ldr	r2, [r2, #0]
 80066e4:	68f9      	ldr	r1, [r7, #12]
 80066e6:	430b      	orrs	r3, r1
 80066e8:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80066f0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80066f8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80066fa:	4313      	orrs	r3, r2
 80066fc:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006706:	f023 0103 	bic.w	r1, r3, #3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	68fa      	ldr	r2, [r7, #12]
 8006710:	430a      	orrs	r2, r1
 8006712:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800671e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	430a      	orrs	r2, r1
 800672c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8006734:	683a      	ldr	r2, [r7, #0]
 8006736:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800673a:	2a00      	cmp	r2, #0
 800673c:	d101      	bne.n	8006742 <ETH_SetMACConfig+0x1ee>
 800673e:	2240      	movs	r2, #64	; 0x40
 8006740:	e000      	b.n	8006744 <ETH_SetMACConfig+0x1f0>
 8006742:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8006744:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800674c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800674e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8006756:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8006758:	4313      	orrs	r3, r2
 800675a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8006764:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	68fa      	ldr	r2, [r7, #12]
 800676e:	430a      	orrs	r2, r1
 8006770:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8006774:	bf00      	nop
 8006776:	3714      	adds	r7, #20
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr
 8006780:	00048083 	.word	0x00048083
 8006784:	c0f88000 	.word	0xc0f88000
 8006788:	fffffef0 	.word	0xfffffef0

0800678c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800678c:	b480      	push	{r7}
 800678e:	b085      	sub	sp, #20
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	4b38      	ldr	r3, [pc, #224]	; (8006884 <ETH_SetDMAConfig+0xf8>)
 80067a2:	4013      	ands	r3, r2
 80067a4:	683a      	ldr	r2, [r7, #0]
 80067a6:	6811      	ldr	r1, [r2, #0]
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	6812      	ldr	r2, [r2, #0]
 80067ac:	430b      	orrs	r3, r1
 80067ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80067b2:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	791b      	ldrb	r3, [r3, #4]
 80067b8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80067be:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	7b1b      	ldrb	r3, [r3, #12]
 80067c4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80067c6:	4313      	orrs	r3, r2
 80067c8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067d2:	685a      	ldr	r2, [r3, #4]
 80067d4:	4b2c      	ldr	r3, [pc, #176]	; (8006888 <ETH_SetDMAConfig+0xfc>)
 80067d6:	4013      	ands	r3, r2
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	6812      	ldr	r2, [r2, #0]
 80067dc:	68f9      	ldr	r1, [r7, #12]
 80067de:	430b      	orrs	r3, r1
 80067e0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80067e4:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	7b5b      	ldrb	r3, [r3, #13]
 80067ea:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80067f0:	4313      	orrs	r3, r2
 80067f2:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067fc:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8006800:	4b22      	ldr	r3, [pc, #136]	; (800688c <ETH_SetDMAConfig+0x100>)
 8006802:	4013      	ands	r3, r2
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	6812      	ldr	r2, [r2, #0]
 8006808:	68f9      	ldr	r1, [r7, #12]
 800680a:	430b      	orrs	r3, r1
 800680c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006810:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	7d1b      	ldrb	r3, [r3, #20]
 800681c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800681e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	7f5b      	ldrb	r3, [r3, #29]
 8006824:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8006826:	4313      	orrs	r3, r2
 8006828:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006832:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8006836:	4b16      	ldr	r3, [pc, #88]	; (8006890 <ETH_SetDMAConfig+0x104>)
 8006838:	4013      	ands	r3, r2
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	6812      	ldr	r2, [r2, #0]
 800683e:	68f9      	ldr	r1, [r7, #12]
 8006840:	430b      	orrs	r3, r1
 8006842:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006846:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	7f1b      	ldrb	r3, [r3, #28]
 800684e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8006854:	4313      	orrs	r3, r2
 8006856:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006860:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8006864:	4b0b      	ldr	r3, [pc, #44]	; (8006894 <ETH_SetDMAConfig+0x108>)
 8006866:	4013      	ands	r3, r2
 8006868:	687a      	ldr	r2, [r7, #4]
 800686a:	6812      	ldr	r2, [r2, #0]
 800686c:	68f9      	ldr	r1, [r7, #12]
 800686e:	430b      	orrs	r3, r1
 8006870:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006874:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8006878:	bf00      	nop
 800687a:	3714      	adds	r7, #20
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr
 8006884:	ffff87fd 	.word	0xffff87fd
 8006888:	ffff2ffe 	.word	0xffff2ffe
 800688c:	fffec000 	.word	0xfffec000
 8006890:	ffc0efef 	.word	0xffc0efef
 8006894:	7fc0ffff 	.word	0x7fc0ffff

08006898 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b0a4      	sub	sp, #144	; 0x90
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80068a0:	2301      	movs	r3, #1
 80068a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80068a6:	2300      	movs	r3, #0
 80068a8:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80068aa:	2300      	movs	r3, #0
 80068ac:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80068b0:	2300      	movs	r3, #0
 80068b2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80068b6:	2301      	movs	r3, #1
 80068b8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80068bc:	2301      	movs	r3, #1
 80068be:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80068c2:	2301      	movs	r3, #1
 80068c4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80068c8:	2300      	movs	r3, #0
 80068ca:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80068ce:	2301      	movs	r3, #1
 80068d0:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80068d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80068d8:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80068da:	2300      	movs	r3, #0
 80068dc:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80068e0:	2300      	movs	r3, #0
 80068e2:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80068e4:	2300      	movs	r3, #0
 80068e6:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80068ea:	2300      	movs	r3, #0
 80068ec:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80068f0:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80068f4:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80068f6:	2300      	movs	r3, #0
 80068f8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80068fc:	2300      	movs	r3, #0
 80068fe:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8006900:	2301      	movs	r3, #1
 8006902:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8006906:	2300      	movs	r3, #0
 8006908:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800690c:	2300      	movs	r3, #0
 800690e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8006912:	2300      	movs	r3, #0
 8006914:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8006916:	2300      	movs	r3, #0
 8006918:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800691a:	2300      	movs	r3, #0
 800691c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800691e:	2300      	movs	r3, #0
 8006920:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8006924:	2300      	movs	r3, #0
 8006926:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800692a:	2301      	movs	r3, #1
 800692c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8006930:	2320      	movs	r3, #32
 8006932:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8006936:	2301      	movs	r3, #1
 8006938:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800693c:	2300      	movs	r3, #0
 800693e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8006942:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8006946:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8006948:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800694c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800694e:	2300      	movs	r3, #0
 8006950:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8006954:	2302      	movs	r3, #2
 8006956:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800695a:	2300      	movs	r3, #0
 800695c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8006960:	2300      	movs	r3, #0
 8006962:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8006966:	2300      	movs	r3, #0
 8006968:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800696c:	2301      	movs	r3, #1
 800696e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8006972:	2300      	movs	r3, #0
 8006974:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8006976:	2301      	movs	r3, #1
 8006978:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800697c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006980:	4619      	mov	r1, r3
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f7ff fde6 	bl	8006554 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8006988:	2301      	movs	r3, #1
 800698a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800698c:	2301      	movs	r3, #1
 800698e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8006990:	2300      	movs	r3, #0
 8006992:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8006994:	2300      	movs	r3, #0
 8006996:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800699a:	2300      	movs	r3, #0
 800699c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800699e:	2300      	movs	r3, #0
 80069a0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80069a2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80069a6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80069a8:	2300      	movs	r3, #0
 80069aa:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80069ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80069b0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80069b2:	2300      	movs	r3, #0
 80069b4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80069b8:	f44f 7306 	mov.w	r3, #536	; 0x218
 80069bc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80069be:	f107 0308 	add.w	r3, r7, #8
 80069c2:	4619      	mov	r1, r3
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f7ff fee1 	bl	800678c <ETH_SetDMAConfig>
}
 80069ca:	bf00      	nop
 80069cc:	3790      	adds	r7, #144	; 0x90
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}

080069d2 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80069d2:	b480      	push	{r7}
 80069d4:	b085      	sub	sp, #20
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80069da:	2300      	movs	r3, #0
 80069dc:	60fb      	str	r3, [r7, #12]
 80069de:	e01d      	b.n	8006a1c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	68d9      	ldr	r1, [r3, #12]
 80069e4:	68fa      	ldr	r2, [r7, #12]
 80069e6:	4613      	mov	r3, r2
 80069e8:	005b      	lsls	r3, r3, #1
 80069ea:	4413      	add	r3, r2
 80069ec:	00db      	lsls	r3, r3, #3
 80069ee:	440b      	add	r3, r1
 80069f0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	2200      	movs	r2, #0
 80069f6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	2200      	movs	r2, #0
 80069fc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	2200      	movs	r2, #0
 8006a02:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	2200      	movs	r2, #0
 8006a08:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8006a0a:	68b9      	ldr	r1, [r7, #8]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	3206      	adds	r2, #6
 8006a12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	3301      	adds	r3, #1
 8006a1a:	60fb      	str	r3, [r7, #12]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2b03      	cmp	r3, #3
 8006a20:	d9de      	bls.n	80069e0 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2200      	movs	r2, #0
 8006a26:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a30:	461a      	mov	r2, r3
 8006a32:	2303      	movs	r3, #3
 8006a34:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	68da      	ldr	r2, [r3, #12]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a44:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	68da      	ldr	r2, [r3, #12]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a54:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8006a58:	bf00      	nop
 8006a5a:	3714      	adds	r7, #20
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr

08006a64 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b085      	sub	sp, #20
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	60fb      	str	r3, [r7, #12]
 8006a70:	e023      	b.n	8006aba <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6919      	ldr	r1, [r3, #16]
 8006a76:	68fa      	ldr	r2, [r7, #12]
 8006a78:	4613      	mov	r3, r2
 8006a7a:	005b      	lsls	r3, r3, #1
 8006a7c:	4413      	add	r3, r2
 8006a7e:	00db      	lsls	r3, r3, #3
 8006a80:	440b      	add	r3, r1
 8006a82:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	2200      	movs	r2, #0
 8006a88:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	2200      	movs	r2, #0
 8006a94:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8006aa8:	68b9      	ldr	r1, [r7, #8]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	68fa      	ldr	r2, [r7, #12]
 8006aae:	3212      	adds	r2, #18
 8006ab0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	60fb      	str	r3, [r7, #12]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2b03      	cmp	r3, #3
 8006abe:	d9d8      	bls.n	8006a72 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	2303      	movs	r3, #3
 8006aea:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	691a      	ldr	r2, [r3, #16]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006afa:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	691b      	ldr	r3, [r3, #16]
 8006b02:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b0e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8006b12:	bf00      	nop
 8006b14:	3714      	adds	r7, #20
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr
	...

08006b20 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b08d      	sub	sp, #52	; 0x34
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	3318      	adds	r3, #24
 8006b30:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	691b      	ldr	r3, [r3, #16]
 8006b36:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	691b      	ldr	r3, [r3, #16]
 8006b3c:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b4a:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8006b52:	2300      	movs	r3, #0
 8006b54:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8006b56:	6a3b      	ldr	r3, [r7, #32]
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b62:	d007      	beq.n	8006b74 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8006b64:	697a      	ldr	r2, [r7, #20]
 8006b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b68:	3304      	adds	r3, #4
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	4413      	add	r3, r2
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d001      	beq.n	8006b78 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8006b74:	2302      	movs	r3, #2
 8006b76:	e259      	b.n	800702c <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f003 0304 	and.w	r3, r3, #4
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d044      	beq.n	8006c0e <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8006b84:	6a3b      	ldr	r3, [r7, #32]
 8006b86:	68da      	ldr	r2, [r3, #12]
 8006b88:	4b75      	ldr	r3, [pc, #468]	; (8006d60 <ETH_Prepare_Tx_Descriptors+0x240>)
 8006b8a:	4013      	ands	r3, r2
 8006b8c:	68ba      	ldr	r2, [r7, #8]
 8006b8e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006b90:	431a      	orrs	r2, r3
 8006b92:	6a3b      	ldr	r3, [r7, #32]
 8006b94:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8006b96:	6a3b      	ldr	r3, [r7, #32]
 8006b98:	68db      	ldr	r3, [r3, #12]
 8006b9a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006b9e:	6a3b      	ldr	r3, [r7, #32]
 8006ba0:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006bb0:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f003 0308 	and.w	r3, r3, #8
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d027      	beq.n	8006c0e <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8006bbe:	6a3b      	ldr	r3, [r7, #32]
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	b29a      	uxth	r2, r3
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc8:	041b      	lsls	r3, r3, #16
 8006bca:	431a      	orrs	r2, r3
 8006bcc:	6a3b      	ldr	r3, [r7, #32]
 8006bce:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8006bd0:	6a3b      	ldr	r3, [r7, #32]
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006bd8:	6a3b      	ldr	r3, [r7, #32]
 8006bda:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8006bdc:	6a3b      	ldr	r3, [r7, #32]
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be8:	431a      	orrs	r2, r3
 8006bea:	6a3b      	ldr	r3, [r7, #32]
 8006bec:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006bfc:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006c0c:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f003 0310 	and.w	r3, r3, #16
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d00e      	beq.n	8006c38 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8006c1a:	6a3b      	ldr	r3, [r7, #32]
 8006c1c:	689a      	ldr	r2, [r3, #8]
 8006c1e:	4b51      	ldr	r3, [pc, #324]	; (8006d64 <ETH_Prepare_Tx_Descriptors+0x244>)
 8006c20:	4013      	ands	r3, r2
 8006c22:	68ba      	ldr	r2, [r7, #8]
 8006c24:	6992      	ldr	r2, [r2, #24]
 8006c26:	431a      	orrs	r2, r3
 8006c28:	6a3b      	ldr	r3, [r7, #32]
 8006c2a:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8006c2c:	6a3b      	ldr	r3, [r7, #32]
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006c34:	6a3b      	ldr	r3, [r7, #32]
 8006c36:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f003 0304 	and.w	r3, r3, #4
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d105      	bne.n	8006c50 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f003 0310 	and.w	r3, r3, #16
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d036      	beq.n	8006cbe <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8006c50:	6a3b      	ldr	r3, [r7, #32]
 8006c52:	68db      	ldr	r3, [r3, #12]
 8006c54:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006c58:	6a3b      	ldr	r3, [r7, #32]
 8006c5a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8006c5c:	f3bf 8f5f 	dmb	sy
}
 8006c60:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8006c62:	6a3b      	ldr	r3, [r7, #32]
 8006c64:	68db      	ldr	r3, [r3, #12]
 8006c66:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006c6a:	6a3b      	ldr	r3, [r7, #32]
 8006c6c:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8006c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c70:	3301      	adds	r3, #1
 8006c72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c76:	2b03      	cmp	r3, #3
 8006c78:	d902      	bls.n	8006c80 <ETH_Prepare_Tx_Descriptors+0x160>
 8006c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c7c:	3b04      	subs	r3, #4
 8006c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c88:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8006c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8006c90:	6a3b      	ldr	r3, [r7, #32]
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c9c:	d10f      	bne.n	8006cbe <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	693a      	ldr	r2, [r7, #16]
 8006ca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ca6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 8006ca8:	f3bf 8f5f 	dmb	sy
}
 8006cac:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8006cae:	6a3b      	ldr	r3, [r7, #32]
 8006cb0:	68db      	ldr	r3, [r3, #12]
 8006cb2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006cb6:	6a3b      	ldr	r3, [r7, #32]
 8006cb8:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8006cba:	2302      	movs	r3, #2
 8006cbc:	e1b6      	b.n	800702c <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8006cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	461a      	mov	r2, r3
 8006cca:	6a3b      	ldr	r3, [r7, #32]
 8006ccc:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8006cce:	6a3b      	ldr	r3, [r7, #32]
 8006cd0:	689a      	ldr	r2, [r3, #8]
 8006cd2:	4b24      	ldr	r3, [pc, #144]	; (8006d64 <ETH_Prepare_Tx_Descriptors+0x244>)
 8006cd4:	4013      	ands	r3, r2
 8006cd6:	69fa      	ldr	r2, [r7, #28]
 8006cd8:	6852      	ldr	r2, [r2, #4]
 8006cda:	431a      	orrs	r2, r3
 8006cdc:	6a3b      	ldr	r3, [r7, #32]
 8006cde:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8006ce0:	69fb      	ldr	r3, [r7, #28]
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d012      	beq.n	8006d0e <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8006cee:	69fb      	ldr	r3, [r7, #28]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	6a3b      	ldr	r3, [r7, #32]
 8006cf6:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8006cf8:	6a3b      	ldr	r3, [r7, #32]
 8006cfa:	689a      	ldr	r2, [r3, #8]
 8006cfc:	4b1a      	ldr	r3, [pc, #104]	; (8006d68 <ETH_Prepare_Tx_Descriptors+0x248>)
 8006cfe:	4013      	ands	r3, r2
 8006d00:	69fa      	ldr	r2, [r7, #28]
 8006d02:	6852      	ldr	r2, [r2, #4]
 8006d04:	0412      	lsls	r2, r2, #16
 8006d06:	431a      	orrs	r2, r3
 8006d08:	6a3b      	ldr	r3, [r7, #32]
 8006d0a:	609a      	str	r2, [r3, #8]
 8006d0c:	e008      	b.n	8006d20 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8006d0e:	6a3b      	ldr	r3, [r7, #32]
 8006d10:	2200      	movs	r2, #0
 8006d12:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8006d14:	6a3b      	ldr	r3, [r7, #32]
 8006d16:	689a      	ldr	r2, [r3, #8]
 8006d18:	4b13      	ldr	r3, [pc, #76]	; (8006d68 <ETH_Prepare_Tx_Descriptors+0x248>)
 8006d1a:	4013      	ands	r3, r2
 8006d1c:	6a3a      	ldr	r2, [r7, #32]
 8006d1e:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f003 0310 	and.w	r3, r3, #16
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d021      	beq.n	8006d70 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8006d2c:	6a3b      	ldr	r3, [r7, #32]
 8006d2e:	68db      	ldr	r3, [r3, #12]
 8006d30:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	6a1b      	ldr	r3, [r3, #32]
 8006d38:	04db      	lsls	r3, r3, #19
 8006d3a:	431a      	orrs	r2, r3
 8006d3c:	6a3b      	ldr	r3, [r7, #32]
 8006d3e:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8006d40:	6a3b      	ldr	r3, [r7, #32]
 8006d42:	68da      	ldr	r2, [r3, #12]
 8006d44:	4b09      	ldr	r3, [pc, #36]	; (8006d6c <ETH_Prepare_Tx_Descriptors+0x24c>)
 8006d46:	4013      	ands	r3, r2
 8006d48:	68ba      	ldr	r2, [r7, #8]
 8006d4a:	69d2      	ldr	r2, [r2, #28]
 8006d4c:	431a      	orrs	r2, r3
 8006d4e:	6a3b      	ldr	r3, [r7, #32]
 8006d50:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8006d52:	6a3b      	ldr	r3, [r7, #32]
 8006d54:	68db      	ldr	r3, [r3, #12]
 8006d56:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006d5a:	6a3b      	ldr	r3, [r7, #32]
 8006d5c:	60da      	str	r2, [r3, #12]
 8006d5e:	e02e      	b.n	8006dbe <ETH_Prepare_Tx_Descriptors+0x29e>
 8006d60:	ffff0000 	.word	0xffff0000
 8006d64:	ffffc000 	.word	0xffffc000
 8006d68:	c000ffff 	.word	0xc000ffff
 8006d6c:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8006d70:	6a3b      	ldr	r3, [r7, #32]
 8006d72:	68da      	ldr	r2, [r3, #12]
 8006d74:	4b7b      	ldr	r3, [pc, #492]	; (8006f64 <ETH_Prepare_Tx_Descriptors+0x444>)
 8006d76:	4013      	ands	r3, r2
 8006d78:	68ba      	ldr	r2, [r7, #8]
 8006d7a:	6852      	ldr	r2, [r2, #4]
 8006d7c:	431a      	orrs	r2, r3
 8006d7e:	6a3b      	ldr	r3, [r7, #32]
 8006d80:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f003 0301 	and.w	r3, r3, #1
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d008      	beq.n	8006da0 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8006d8e:	6a3b      	ldr	r3, [r7, #32]
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	695b      	ldr	r3, [r3, #20]
 8006d9a:	431a      	orrs	r2, r3
 8006d9c:	6a3b      	ldr	r3, [r7, #32]
 8006d9e:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f003 0320 	and.w	r3, r3, #32
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d008      	beq.n	8006dbe <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8006dac:	6a3b      	ldr	r3, [r7, #32]
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	691b      	ldr	r3, [r3, #16]
 8006db8:	431a      	orrs	r2, r3
 8006dba:	6a3b      	ldr	r3, [r7, #32]
 8006dbc:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 0304 	and.w	r3, r3, #4
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d008      	beq.n	8006ddc <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8006dca:	6a3b      	ldr	r3, [r7, #32]
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dd6:	431a      	orrs	r2, r3
 8006dd8:	6a3b      	ldr	r3, [r7, #32]
 8006dda:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8006ddc:	6a3b      	ldr	r3, [r7, #32]
 8006dde:	68db      	ldr	r3, [r3, #12]
 8006de0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006de4:	6a3b      	ldr	r3, [r7, #32]
 8006de6:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8006de8:	6a3b      	ldr	r3, [r7, #32]
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006df0:	6a3b      	ldr	r3, [r7, #32]
 8006df2:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8006df4:	f3bf 8f5f 	dmb	sy
}
 8006df8:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8006dfa:	6a3b      	ldr	r3, [r7, #32]
 8006dfc:	68db      	ldr	r3, [r3, #12]
 8006dfe:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006e02:	6a3b      	ldr	r3, [r7, #32]
 8006e04:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f003 0302 	and.w	r3, r3, #2
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	f000 80da 	beq.w	8006fc8 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8006e14:	6a3b      	ldr	r3, [r7, #32]
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	68db      	ldr	r3, [r3, #12]
 8006e20:	431a      	orrs	r2, r3
 8006e22:	6a3b      	ldr	r3, [r7, #32]
 8006e24:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8006e26:	e0cf      	b.n	8006fc8 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8006e28:	6a3b      	ldr	r3, [r7, #32]
 8006e2a:	68db      	ldr	r3, [r3, #12]
 8006e2c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006e30:	6a3b      	ldr	r3, [r7, #32]
 8006e32:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8006e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e36:	3301      	adds	r3, #1
 8006e38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e3c:	2b03      	cmp	r3, #3
 8006e3e:	d902      	bls.n	8006e46 <ETH_Prepare_Tx_Descriptors+0x326>
 8006e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e42:	3b04      	subs	r3, #4
 8006e44:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e4e:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8006e50:	6a3b      	ldr	r3, [r7, #32]
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006e58:	6a3b      	ldr	r3, [r7, #32]
 8006e5a:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8006e5c:	6a3b      	ldr	r3, [r7, #32]
 8006e5e:	68db      	ldr	r3, [r3, #12]
 8006e60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e68:	d007      	beq.n	8006e7a <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8006e6a:	697a      	ldr	r2, [r7, #20]
 8006e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e6e:	3304      	adds	r3, #4
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	4413      	add	r3, r2
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d029      	beq.n	8006ece <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e86:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8006e88:	2300      	movs	r3, #0
 8006e8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e8c:	e019      	b.n	8006ec2 <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 8006e8e:	f3bf 8f5f 	dmb	sy
}
 8006e92:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8006e94:	6a3b      	ldr	r3, [r7, #32]
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006e9c:	6a3b      	ldr	r3, [r7, #32]
 8006e9e:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8006ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea8:	2b03      	cmp	r3, #3
 8006eaa:	d902      	bls.n	8006eb2 <ETH_Prepare_Tx_Descriptors+0x392>
 8006eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eae:	3b04      	subs	r3, #4
 8006eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006eb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eba:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8006ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ebe:	3301      	adds	r3, #1
 8006ec0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ec2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d3e1      	bcc.n	8006e8e <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 8006eca:	2302      	movs	r3, #2
 8006ecc:	e0ae      	b.n	800702c <ETH_Prepare_Tx_Descriptors+0x50c>
    }

    descnbr += 1U;
 8006ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8006ed4:	69fb      	ldr	r3, [r7, #28]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8006eda:	69fb      	ldr	r3, [r7, #28]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	461a      	mov	r2, r3
 8006ee0:	6a3b      	ldr	r3, [r7, #32]
 8006ee2:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8006ee4:	6a3b      	ldr	r3, [r7, #32]
 8006ee6:	689a      	ldr	r2, [r3, #8]
 8006ee8:	4b1f      	ldr	r3, [pc, #124]	; (8006f68 <ETH_Prepare_Tx_Descriptors+0x448>)
 8006eea:	4013      	ands	r3, r2
 8006eec:	69fa      	ldr	r2, [r7, #28]
 8006eee:	6852      	ldr	r2, [r2, #4]
 8006ef0:	431a      	orrs	r2, r3
 8006ef2:	6a3b      	ldr	r3, [r7, #32]
 8006ef4:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8006ef6:	69fb      	ldr	r3, [r7, #28]
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d012      	beq.n	8006f24 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8006efe:	69fb      	ldr	r3, [r7, #28]
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8006f04:	69fb      	ldr	r3, [r7, #28]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	461a      	mov	r2, r3
 8006f0a:	6a3b      	ldr	r3, [r7, #32]
 8006f0c:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8006f0e:	6a3b      	ldr	r3, [r7, #32]
 8006f10:	689a      	ldr	r2, [r3, #8]
 8006f12:	4b16      	ldr	r3, [pc, #88]	; (8006f6c <ETH_Prepare_Tx_Descriptors+0x44c>)
 8006f14:	4013      	ands	r3, r2
 8006f16:	69fa      	ldr	r2, [r7, #28]
 8006f18:	6852      	ldr	r2, [r2, #4]
 8006f1a:	0412      	lsls	r2, r2, #16
 8006f1c:	431a      	orrs	r2, r3
 8006f1e:	6a3b      	ldr	r3, [r7, #32]
 8006f20:	609a      	str	r2, [r3, #8]
 8006f22:	e008      	b.n	8006f36 <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8006f24:	6a3b      	ldr	r3, [r7, #32]
 8006f26:	2200      	movs	r2, #0
 8006f28:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8006f2a:	6a3b      	ldr	r3, [r7, #32]
 8006f2c:	689a      	ldr	r2, [r3, #8]
 8006f2e:	4b0f      	ldr	r3, [pc, #60]	; (8006f6c <ETH_Prepare_Tx_Descriptors+0x44c>)
 8006f30:	4013      	ands	r3, r2
 8006f32:	6a3a      	ldr	r2, [r7, #32]
 8006f34:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f003 0310 	and.w	r3, r3, #16
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d018      	beq.n	8006f74 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8006f42:	6a3b      	ldr	r3, [r7, #32]
 8006f44:	68da      	ldr	r2, [r3, #12]
 8006f46:	4b0a      	ldr	r3, [pc, #40]	; (8006f70 <ETH_Prepare_Tx_Descriptors+0x450>)
 8006f48:	4013      	ands	r3, r2
 8006f4a:	68ba      	ldr	r2, [r7, #8]
 8006f4c:	69d2      	ldr	r2, [r2, #28]
 8006f4e:	431a      	orrs	r2, r3
 8006f50:	6a3b      	ldr	r3, [r7, #32]
 8006f52:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8006f54:	6a3b      	ldr	r3, [r7, #32]
 8006f56:	68db      	ldr	r3, [r3, #12]
 8006f58:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006f5c:	6a3b      	ldr	r3, [r7, #32]
 8006f5e:	60da      	str	r2, [r3, #12]
 8006f60:	e020      	b.n	8006fa4 <ETH_Prepare_Tx_Descriptors+0x484>
 8006f62:	bf00      	nop
 8006f64:	ffff8000 	.word	0xffff8000
 8006f68:	ffffc000 	.word	0xffffc000
 8006f6c:	c000ffff 	.word	0xc000ffff
 8006f70:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8006f74:	6a3b      	ldr	r3, [r7, #32]
 8006f76:	68da      	ldr	r2, [r3, #12]
 8006f78:	4b2f      	ldr	r3, [pc, #188]	; (8007038 <ETH_Prepare_Tx_Descriptors+0x518>)
 8006f7a:	4013      	ands	r3, r2
 8006f7c:	68ba      	ldr	r2, [r7, #8]
 8006f7e:	6852      	ldr	r2, [r2, #4]
 8006f80:	431a      	orrs	r2, r3
 8006f82:	6a3b      	ldr	r3, [r7, #32]
 8006f84:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f003 0301 	and.w	r3, r3, #1
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d008      	beq.n	8006fa4 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8006f92:	6a3b      	ldr	r3, [r7, #32]
 8006f94:	68db      	ldr	r3, [r3, #12]
 8006f96:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	695b      	ldr	r3, [r3, #20]
 8006f9e:	431a      	orrs	r2, r3
 8006fa0:	6a3b      	ldr	r3, [r7, #32]
 8006fa2:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8006fa4:	69bb      	ldr	r3, [r7, #24]
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8006faa:	f3bf 8f5f 	dmb	sy
}
 8006fae:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8006fb0:	6a3b      	ldr	r3, [r7, #32]
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006fb8:	6a3b      	ldr	r3, [r7, #32]
 8006fba:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8006fbc:	6a3b      	ldr	r3, [r7, #32]
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006fc4:	6a3b      	ldr	r3, [r7, #32]
 8006fc6:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	f47f af2b 	bne.w	8006e28 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d006      	beq.n	8006fe6 <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8006fd8:	6a3b      	ldr	r3, [r7, #32]
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006fe0:	6a3b      	ldr	r3, [r7, #32]
 8006fe2:	609a      	str	r2, [r3, #8]
 8006fe4:	e005      	b.n	8006ff2 <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8006fe6:	6a3b      	ldr	r3, [r7, #32]
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006fee:	6a3b      	ldr	r3, [r7, #32]
 8006ff0:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8006ff2:	6a3b      	ldr	r3, [r7, #32]
 8006ff4:	68db      	ldr	r3, [r3, #12]
 8006ff6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006ffa:	6a3b      	ldr	r3, [r7, #32]
 8006ffc:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007002:	6979      	ldr	r1, [r7, #20]
 8007004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007006:	3304      	adds	r3, #4
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	440b      	add	r3, r1
 800700c:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007012:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8007014:	b672      	cpsid	i
}
 8007016:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	4413      	add	r3, r2
 8007020:	1c5a      	adds	r2, r3, #1
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8007026:	b662      	cpsie	i
}
 8007028:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800702a:	2300      	movs	r3, #0
}
 800702c:	4618      	mov	r0, r3
 800702e:	3734      	adds	r7, #52	; 0x34
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr
 8007038:	ffff8000 	.word	0xffff8000

0800703c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800703c:	b480      	push	{r7}
 800703e:	b089      	sub	sp, #36	; 0x24
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007046:	2300      	movs	r3, #0
 8007048:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800704a:	4b89      	ldr	r3, [pc, #548]	; (8007270 <HAL_GPIO_Init+0x234>)
 800704c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800704e:	e194      	b.n	800737a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	2101      	movs	r1, #1
 8007056:	69fb      	ldr	r3, [r7, #28]
 8007058:	fa01 f303 	lsl.w	r3, r1, r3
 800705c:	4013      	ands	r3, r2
 800705e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	2b00      	cmp	r3, #0
 8007064:	f000 8186 	beq.w	8007374 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	f003 0303 	and.w	r3, r3, #3
 8007070:	2b01      	cmp	r3, #1
 8007072:	d005      	beq.n	8007080 <HAL_GPIO_Init+0x44>
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	f003 0303 	and.w	r3, r3, #3
 800707c:	2b02      	cmp	r3, #2
 800707e:	d130      	bne.n	80070e2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007086:	69fb      	ldr	r3, [r7, #28]
 8007088:	005b      	lsls	r3, r3, #1
 800708a:	2203      	movs	r2, #3
 800708c:	fa02 f303 	lsl.w	r3, r2, r3
 8007090:	43db      	mvns	r3, r3
 8007092:	69ba      	ldr	r2, [r7, #24]
 8007094:	4013      	ands	r3, r2
 8007096:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	68da      	ldr	r2, [r3, #12]
 800709c:	69fb      	ldr	r3, [r7, #28]
 800709e:	005b      	lsls	r3, r3, #1
 80070a0:	fa02 f303 	lsl.w	r3, r2, r3
 80070a4:	69ba      	ldr	r2, [r7, #24]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	69ba      	ldr	r2, [r7, #24]
 80070ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80070b6:	2201      	movs	r2, #1
 80070b8:	69fb      	ldr	r3, [r7, #28]
 80070ba:	fa02 f303 	lsl.w	r3, r2, r3
 80070be:	43db      	mvns	r3, r3
 80070c0:	69ba      	ldr	r2, [r7, #24]
 80070c2:	4013      	ands	r3, r2
 80070c4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	091b      	lsrs	r3, r3, #4
 80070cc:	f003 0201 	and.w	r2, r3, #1
 80070d0:	69fb      	ldr	r3, [r7, #28]
 80070d2:	fa02 f303 	lsl.w	r3, r2, r3
 80070d6:	69ba      	ldr	r2, [r7, #24]
 80070d8:	4313      	orrs	r3, r2
 80070da:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	69ba      	ldr	r2, [r7, #24]
 80070e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	f003 0303 	and.w	r3, r3, #3
 80070ea:	2b03      	cmp	r3, #3
 80070ec:	d017      	beq.n	800711e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	68db      	ldr	r3, [r3, #12]
 80070f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80070f4:	69fb      	ldr	r3, [r7, #28]
 80070f6:	005b      	lsls	r3, r3, #1
 80070f8:	2203      	movs	r2, #3
 80070fa:	fa02 f303 	lsl.w	r3, r2, r3
 80070fe:	43db      	mvns	r3, r3
 8007100:	69ba      	ldr	r2, [r7, #24]
 8007102:	4013      	ands	r3, r2
 8007104:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	689a      	ldr	r2, [r3, #8]
 800710a:	69fb      	ldr	r3, [r7, #28]
 800710c:	005b      	lsls	r3, r3, #1
 800710e:	fa02 f303 	lsl.w	r3, r2, r3
 8007112:	69ba      	ldr	r2, [r7, #24]
 8007114:	4313      	orrs	r3, r2
 8007116:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	69ba      	ldr	r2, [r7, #24]
 800711c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	f003 0303 	and.w	r3, r3, #3
 8007126:	2b02      	cmp	r3, #2
 8007128:	d123      	bne.n	8007172 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800712a:	69fb      	ldr	r3, [r7, #28]
 800712c:	08da      	lsrs	r2, r3, #3
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	3208      	adds	r2, #8
 8007132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007136:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007138:	69fb      	ldr	r3, [r7, #28]
 800713a:	f003 0307 	and.w	r3, r3, #7
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	220f      	movs	r2, #15
 8007142:	fa02 f303 	lsl.w	r3, r2, r3
 8007146:	43db      	mvns	r3, r3
 8007148:	69ba      	ldr	r2, [r7, #24]
 800714a:	4013      	ands	r3, r2
 800714c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	691a      	ldr	r2, [r3, #16]
 8007152:	69fb      	ldr	r3, [r7, #28]
 8007154:	f003 0307 	and.w	r3, r3, #7
 8007158:	009b      	lsls	r3, r3, #2
 800715a:	fa02 f303 	lsl.w	r3, r2, r3
 800715e:	69ba      	ldr	r2, [r7, #24]
 8007160:	4313      	orrs	r3, r2
 8007162:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007164:	69fb      	ldr	r3, [r7, #28]
 8007166:	08da      	lsrs	r2, r3, #3
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	3208      	adds	r2, #8
 800716c:	69b9      	ldr	r1, [r7, #24]
 800716e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007178:	69fb      	ldr	r3, [r7, #28]
 800717a:	005b      	lsls	r3, r3, #1
 800717c:	2203      	movs	r2, #3
 800717e:	fa02 f303 	lsl.w	r3, r2, r3
 8007182:	43db      	mvns	r3, r3
 8007184:	69ba      	ldr	r2, [r7, #24]
 8007186:	4013      	ands	r3, r2
 8007188:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	f003 0203 	and.w	r2, r3, #3
 8007192:	69fb      	ldr	r3, [r7, #28]
 8007194:	005b      	lsls	r3, r3, #1
 8007196:	fa02 f303 	lsl.w	r3, r2, r3
 800719a:	69ba      	ldr	r2, [r7, #24]
 800719c:	4313      	orrs	r3, r2
 800719e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	69ba      	ldr	r2, [r7, #24]
 80071a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	f000 80e0 	beq.w	8007374 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80071b4:	4b2f      	ldr	r3, [pc, #188]	; (8007274 <HAL_GPIO_Init+0x238>)
 80071b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80071ba:	4a2e      	ldr	r2, [pc, #184]	; (8007274 <HAL_GPIO_Init+0x238>)
 80071bc:	f043 0302 	orr.w	r3, r3, #2
 80071c0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80071c4:	4b2b      	ldr	r3, [pc, #172]	; (8007274 <HAL_GPIO_Init+0x238>)
 80071c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80071ca:	f003 0302 	and.w	r3, r3, #2
 80071ce:	60fb      	str	r3, [r7, #12]
 80071d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80071d2:	4a29      	ldr	r2, [pc, #164]	; (8007278 <HAL_GPIO_Init+0x23c>)
 80071d4:	69fb      	ldr	r3, [r7, #28]
 80071d6:	089b      	lsrs	r3, r3, #2
 80071d8:	3302      	adds	r3, #2
 80071da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80071e0:	69fb      	ldr	r3, [r7, #28]
 80071e2:	f003 0303 	and.w	r3, r3, #3
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	220f      	movs	r2, #15
 80071ea:	fa02 f303 	lsl.w	r3, r2, r3
 80071ee:	43db      	mvns	r3, r3
 80071f0:	69ba      	ldr	r2, [r7, #24]
 80071f2:	4013      	ands	r3, r2
 80071f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	4a20      	ldr	r2, [pc, #128]	; (800727c <HAL_GPIO_Init+0x240>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d052      	beq.n	80072a4 <HAL_GPIO_Init+0x268>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	4a1f      	ldr	r2, [pc, #124]	; (8007280 <HAL_GPIO_Init+0x244>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d031      	beq.n	800726a <HAL_GPIO_Init+0x22e>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	4a1e      	ldr	r2, [pc, #120]	; (8007284 <HAL_GPIO_Init+0x248>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d02b      	beq.n	8007266 <HAL_GPIO_Init+0x22a>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	4a1d      	ldr	r2, [pc, #116]	; (8007288 <HAL_GPIO_Init+0x24c>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d025      	beq.n	8007262 <HAL_GPIO_Init+0x226>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	4a1c      	ldr	r2, [pc, #112]	; (800728c <HAL_GPIO_Init+0x250>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d01f      	beq.n	800725e <HAL_GPIO_Init+0x222>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	4a1b      	ldr	r2, [pc, #108]	; (8007290 <HAL_GPIO_Init+0x254>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d019      	beq.n	800725a <HAL_GPIO_Init+0x21e>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	4a1a      	ldr	r2, [pc, #104]	; (8007294 <HAL_GPIO_Init+0x258>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d013      	beq.n	8007256 <HAL_GPIO_Init+0x21a>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	4a19      	ldr	r2, [pc, #100]	; (8007298 <HAL_GPIO_Init+0x25c>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d00d      	beq.n	8007252 <HAL_GPIO_Init+0x216>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	4a18      	ldr	r2, [pc, #96]	; (800729c <HAL_GPIO_Init+0x260>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d007      	beq.n	800724e <HAL_GPIO_Init+0x212>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	4a17      	ldr	r2, [pc, #92]	; (80072a0 <HAL_GPIO_Init+0x264>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d101      	bne.n	800724a <HAL_GPIO_Init+0x20e>
 8007246:	2309      	movs	r3, #9
 8007248:	e02d      	b.n	80072a6 <HAL_GPIO_Init+0x26a>
 800724a:	230a      	movs	r3, #10
 800724c:	e02b      	b.n	80072a6 <HAL_GPIO_Init+0x26a>
 800724e:	2308      	movs	r3, #8
 8007250:	e029      	b.n	80072a6 <HAL_GPIO_Init+0x26a>
 8007252:	2307      	movs	r3, #7
 8007254:	e027      	b.n	80072a6 <HAL_GPIO_Init+0x26a>
 8007256:	2306      	movs	r3, #6
 8007258:	e025      	b.n	80072a6 <HAL_GPIO_Init+0x26a>
 800725a:	2305      	movs	r3, #5
 800725c:	e023      	b.n	80072a6 <HAL_GPIO_Init+0x26a>
 800725e:	2304      	movs	r3, #4
 8007260:	e021      	b.n	80072a6 <HAL_GPIO_Init+0x26a>
 8007262:	2303      	movs	r3, #3
 8007264:	e01f      	b.n	80072a6 <HAL_GPIO_Init+0x26a>
 8007266:	2302      	movs	r3, #2
 8007268:	e01d      	b.n	80072a6 <HAL_GPIO_Init+0x26a>
 800726a:	2301      	movs	r3, #1
 800726c:	e01b      	b.n	80072a6 <HAL_GPIO_Init+0x26a>
 800726e:	bf00      	nop
 8007270:	58000080 	.word	0x58000080
 8007274:	58024400 	.word	0x58024400
 8007278:	58000400 	.word	0x58000400
 800727c:	58020000 	.word	0x58020000
 8007280:	58020400 	.word	0x58020400
 8007284:	58020800 	.word	0x58020800
 8007288:	58020c00 	.word	0x58020c00
 800728c:	58021000 	.word	0x58021000
 8007290:	58021400 	.word	0x58021400
 8007294:	58021800 	.word	0x58021800
 8007298:	58021c00 	.word	0x58021c00
 800729c:	58022000 	.word	0x58022000
 80072a0:	58022400 	.word	0x58022400
 80072a4:	2300      	movs	r3, #0
 80072a6:	69fa      	ldr	r2, [r7, #28]
 80072a8:	f002 0203 	and.w	r2, r2, #3
 80072ac:	0092      	lsls	r2, r2, #2
 80072ae:	4093      	lsls	r3, r2
 80072b0:	69ba      	ldr	r2, [r7, #24]
 80072b2:	4313      	orrs	r3, r2
 80072b4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80072b6:	4938      	ldr	r1, [pc, #224]	; (8007398 <HAL_GPIO_Init+0x35c>)
 80072b8:	69fb      	ldr	r3, [r7, #28]
 80072ba:	089b      	lsrs	r3, r3, #2
 80072bc:	3302      	adds	r3, #2
 80072be:	69ba      	ldr	r2, [r7, #24]
 80072c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80072c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	43db      	mvns	r3, r3
 80072d0:	69ba      	ldr	r2, [r7, #24]
 80072d2:	4013      	ands	r3, r2
 80072d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d003      	beq.n	80072ea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80072e2:	69ba      	ldr	r2, [r7, #24]
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	4313      	orrs	r3, r2
 80072e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80072ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80072ee:	69bb      	ldr	r3, [r7, #24]
 80072f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80072f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	43db      	mvns	r3, r3
 80072fe:	69ba      	ldr	r2, [r7, #24]
 8007300:	4013      	ands	r3, r2
 8007302:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800730c:	2b00      	cmp	r3, #0
 800730e:	d003      	beq.n	8007318 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007310:	69ba      	ldr	r2, [r7, #24]
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	4313      	orrs	r3, r2
 8007316:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007318:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800731c:	69bb      	ldr	r3, [r7, #24]
 800731e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	43db      	mvns	r3, r3
 800732a:	69ba      	ldr	r2, [r7, #24]
 800732c:	4013      	ands	r3, r2
 800732e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007338:	2b00      	cmp	r3, #0
 800733a:	d003      	beq.n	8007344 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800733c:	69ba      	ldr	r2, [r7, #24]
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	4313      	orrs	r3, r2
 8007342:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	69ba      	ldr	r2, [r7, #24]
 8007348:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	43db      	mvns	r3, r3
 8007354:	69ba      	ldr	r2, [r7, #24]
 8007356:	4013      	ands	r3, r2
 8007358:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007362:	2b00      	cmp	r3, #0
 8007364:	d003      	beq.n	800736e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007366:	69ba      	ldr	r2, [r7, #24]
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	4313      	orrs	r3, r2
 800736c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	69ba      	ldr	r2, [r7, #24]
 8007372:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007374:	69fb      	ldr	r3, [r7, #28]
 8007376:	3301      	adds	r3, #1
 8007378:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	69fb      	ldr	r3, [r7, #28]
 8007380:	fa22 f303 	lsr.w	r3, r2, r3
 8007384:	2b00      	cmp	r3, #0
 8007386:	f47f ae63 	bne.w	8007050 <HAL_GPIO_Init+0x14>
  }
}
 800738a:	bf00      	nop
 800738c:	bf00      	nop
 800738e:	3724      	adds	r7, #36	; 0x24
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr
 8007398:	58000400 	.word	0x58000400

0800739c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800739c:	b480      	push	{r7}
 800739e:	b085      	sub	sp, #20
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	460b      	mov	r3, r1
 80073a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	691a      	ldr	r2, [r3, #16]
 80073ac:	887b      	ldrh	r3, [r7, #2]
 80073ae:	4013      	ands	r3, r2
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d002      	beq.n	80073ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80073b4:	2301      	movs	r3, #1
 80073b6:	73fb      	strb	r3, [r7, #15]
 80073b8:	e001      	b.n	80073be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80073ba:	2300      	movs	r3, #0
 80073bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80073be:	7bfb      	ldrb	r3, [r7, #15]
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3714      	adds	r7, #20
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b083      	sub	sp, #12
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	460b      	mov	r3, r1
 80073d6:	807b      	strh	r3, [r7, #2]
 80073d8:	4613      	mov	r3, r2
 80073da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80073dc:	787b      	ldrb	r3, [r7, #1]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d003      	beq.n	80073ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80073e2:	887a      	ldrh	r2, [r7, #2]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80073e8:	e003      	b.n	80073f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80073ea:	887b      	ldrh	r3, [r7, #2]
 80073ec:	041a      	lsls	r2, r3, #16
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	619a      	str	r2, [r3, #24]
}
 80073f2:	bf00      	nop
 80073f4:	370c      	adds	r7, #12
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr

080073fe <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80073fe:	b480      	push	{r7}
 8007400:	b085      	sub	sp, #20
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
 8007406:	460b      	mov	r3, r1
 8007408:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	695b      	ldr	r3, [r3, #20]
 800740e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007410:	887a      	ldrh	r2, [r7, #2]
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	4013      	ands	r3, r2
 8007416:	041a      	lsls	r2, r3, #16
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	43d9      	mvns	r1, r3
 800741c:	887b      	ldrh	r3, [r7, #2]
 800741e:	400b      	ands	r3, r1
 8007420:	431a      	orrs	r2, r3
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	619a      	str	r2, [r3, #24]
}
 8007426:	bf00      	nop
 8007428:	3714      	adds	r7, #20
 800742a:	46bd      	mov	sp, r7
 800742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007430:	4770      	bx	lr

08007432 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007432:	b580      	push	{r7, lr}
 8007434:	b082      	sub	sp, #8
 8007436:	af00      	add	r7, sp, #0
 8007438:	4603      	mov	r3, r0
 800743a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800743c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007440:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007444:	88fb      	ldrh	r3, [r7, #6]
 8007446:	4013      	ands	r3, r2
 8007448:	2b00      	cmp	r3, #0
 800744a:	d008      	beq.n	800745e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800744c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007450:	88fb      	ldrh	r3, [r7, #6]
 8007452:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007456:	88fb      	ldrh	r3, [r7, #6]
 8007458:	4618      	mov	r0, r3
 800745a:	f000 f804 	bl	8007466 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800745e:	bf00      	nop
 8007460:	3708      	adds	r7, #8
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}

08007466 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007466:	b480      	push	{r7}
 8007468:	b083      	sub	sp, #12
 800746a:	af00      	add	r7, sp, #0
 800746c:	4603      	mov	r3, r0
 800746e:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8007470:	bf00      	nop
 8007472:	370c      	adds	r7, #12
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr

0800747c <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b086      	sub	sp, #24
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d101      	bne.n	800748e <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	e0bd      	b.n	800760a <HAL_HRTIM_Init+0x18e>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2202      	movs	r2, #2
 8007492:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2200      	movs	r2, #0
 800749a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2200      	movs	r2, #0
 80074aa:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2200      	movs	r2, #0
 80074ba:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2200      	movs	r2, #0
 80074c2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	f003 0301 	and.w	r3, r3, #1
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d031      	beq.n	8007536 <HAL_HRTIM_Init+0xba>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a4f      	ldr	r2, [pc, #316]	; (8007614 <HAL_HRTIM_Init+0x198>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d10e      	bne.n	80074fa <HAL_HRTIM_Init+0x7e>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 80074dc:	4b4e      	ldr	r3, [pc, #312]	; (8007618 <HAL_HRTIM_Init+0x19c>)
 80074de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80074e2:	4a4d      	ldr	r2, [pc, #308]	; (8007618 <HAL_HRTIM_Init+0x19c>)
 80074e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80074e8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80074ec:	4b4a      	ldr	r3, [pc, #296]	; (8007618 <HAL_HRTIM_Init+0x19c>)
 80074ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80074f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80074f6:	60fb      	str	r3, [r7, #12]
 80074f8:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007508:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	691b      	ldr	r3, [r3, #16]
 800750e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007512:	693a      	ldr	r2, [r7, #16]
 8007514:	4313      	orrs	r3, r2
 8007516:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800751e:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	695b      	ldr	r3, [r3, #20]
 8007524:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007528:	693a      	ldr	r2, [r7, #16]
 800752a:	4313      	orrs	r3, r2
 800752c:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	693a      	ldr	r2, [r7, #16]
 8007534:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f7fb fbae 	bl	8002c98 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	f003 0302 	and.w	r3, r3, #2
 8007544:	2b00      	cmp	r3, #0
 8007546:	d012      	beq.n	800756e <HAL_HRTIM_Init+0xf2>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007556:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	68db      	ldr	r3, [r3, #12]
 800755c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007560:	693a      	ldr	r2, [r7, #16]
 8007562:	4313      	orrs	r3, r2
 8007564:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	693a      	ldr	r2, [r7, #16]
 800756c:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2201      	movs	r2, #1
 8007572:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2200      	movs	r2, #0
 800757a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 800757e:	2300      	movs	r3, #0
 8007580:	75fb      	strb	r3, [r7, #23]
 8007582:	e03e      	b.n	8007602 <HAL_HRTIM_Init+0x186>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8007584:	7dfa      	ldrb	r2, [r7, #23]
 8007586:	6879      	ldr	r1, [r7, #4]
 8007588:	4613      	mov	r3, r2
 800758a:	00db      	lsls	r3, r3, #3
 800758c:	1a9b      	subs	r3, r3, r2
 800758e:	009b      	lsls	r3, r3, #2
 8007590:	440b      	add	r3, r1
 8007592:	3318      	adds	r3, #24
 8007594:	2200      	movs	r2, #0
 8007596:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8007598:	7dfa      	ldrb	r2, [r7, #23]
 800759a:	6879      	ldr	r1, [r7, #4]
 800759c:	4613      	mov	r3, r2
 800759e:	00db      	lsls	r3, r3, #3
 80075a0:	1a9b      	subs	r3, r3, r2
 80075a2:	009b      	lsls	r3, r3, #2
 80075a4:	440b      	add	r3, r1
 80075a6:	331c      	adds	r3, #28
 80075a8:	2200      	movs	r2, #0
 80075aa:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 80075ac:	7dfa      	ldrb	r2, [r7, #23]
 80075ae:	6879      	ldr	r1, [r7, #4]
 80075b0:	4613      	mov	r3, r2
 80075b2:	00db      	lsls	r3, r3, #3
 80075b4:	1a9b      	subs	r3, r3, r2
 80075b6:	009b      	lsls	r3, r3, #2
 80075b8:	440b      	add	r3, r1
 80075ba:	3320      	adds	r3, #32
 80075bc:	2200      	movs	r2, #0
 80075be:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 80075c0:	7dfa      	ldrb	r2, [r7, #23]
 80075c2:	6879      	ldr	r1, [r7, #4]
 80075c4:	4613      	mov	r3, r2
 80075c6:	00db      	lsls	r3, r3, #3
 80075c8:	1a9b      	subs	r3, r3, r2
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	440b      	add	r3, r1
 80075ce:	3324      	adds	r3, #36	; 0x24
 80075d0:	2200      	movs	r2, #0
 80075d2:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 80075d4:	7dfa      	ldrb	r2, [r7, #23]
 80075d6:	6879      	ldr	r1, [r7, #4]
 80075d8:	4613      	mov	r3, r2
 80075da:	00db      	lsls	r3, r3, #3
 80075dc:	1a9b      	subs	r3, r3, r2
 80075de:	009b      	lsls	r3, r3, #2
 80075e0:	440b      	add	r3, r1
 80075e2:	3328      	adds	r3, #40	; 0x28
 80075e4:	2200      	movs	r2, #0
 80075e6:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 80075e8:	7dfa      	ldrb	r2, [r7, #23]
 80075ea:	6879      	ldr	r1, [r7, #4]
 80075ec:	4613      	mov	r3, r2
 80075ee:	00db      	lsls	r3, r3, #3
 80075f0:	1a9b      	subs	r3, r3, r2
 80075f2:	009b      	lsls	r3, r3, #2
 80075f4:	440b      	add	r3, r1
 80075f6:	3330      	adds	r3, #48	; 0x30
 80075f8:	2200      	movs	r2, #0
 80075fa:	601a      	str	r2, [r3, #0]
       timer_idx++)
 80075fc:	7dfb      	ldrb	r3, [r7, #23]
 80075fe:	3301      	adds	r3, #1
 8007600:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 8007602:	7dfb      	ldrb	r3, [r7, #23]
 8007604:	2b05      	cmp	r3, #5
 8007606:	d9bd      	bls.n	8007584 <HAL_HRTIM_Init+0x108>
  }

  return HAL_OK;
 8007608:	2300      	movs	r3, #0
}
 800760a:	4618      	mov	r0, r3
 800760c:	3718      	adds	r7, #24
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop
 8007614:	40017400 	.word	0x40017400
 8007618:	58024400 	.word	0x58024400

0800761c <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b084      	sub	sp, #16
 8007620:	af00      	add	r7, sp, #0
 8007622:	60f8      	str	r0, [r7, #12]
 8007624:	60b9      	str	r1, [r7, #8]
 8007626:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800762e:	b2db      	uxtb	r3, r3
 8007630:	2b02      	cmp	r3, #2
 8007632:	d101      	bne.n	8007638 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8007634:	2302      	movs	r3, #2
 8007636:	e015      	b.n	8007664 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2202      	movs	r2, #2
 800763c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	2b05      	cmp	r3, #5
 8007644:	d104      	bne.n	8007650 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8007646:	6879      	ldr	r1, [r7, #4]
 8007648:	68f8      	ldr	r0, [r7, #12]
 800764a:	f000 fc4d 	bl	8007ee8 <HRTIM_MasterBase_Config>
 800764e:	e004      	b.n	800765a <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	68b9      	ldr	r1, [r7, #8]
 8007654:	68f8      	ldr	r0, [r7, #12]
 8007656:	f000 fc76 	bl	8007f46 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2201      	movs	r2, #1
 800765e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  return HAL_OK;
 8007662:	2300      	movs	r3, #0
}
 8007664:	4618      	mov	r0, r3
 8007666:	3710      	adds	r7, #16
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b084      	sub	sp, #16
 8007670:	af00      	add	r7, sp, #0
 8007672:	60f8      	str	r0, [r7, #12]
 8007674:	60b9      	str	r1, [r7, #8]
 8007676:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800767e:	b2db      	uxtb	r3, r3
 8007680:	2b02      	cmp	r3, #2
 8007682:	d101      	bne.n	8007688 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 8007684:	2302      	movs	r3, #2
 8007686:	e05f      	b.n	8007748 <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800768e:	2b01      	cmp	r3, #1
 8007690:	d101      	bne.n	8007696 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 8007692:	2302      	movs	r3, #2
 8007694:	e058      	b.n	8007748 <HAL_HRTIM_WaveformTimerConfig+0xdc>
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2201      	movs	r2, #1
 800769a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2202      	movs	r2, #2
 80076a2:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	2b05      	cmp	r3, #5
 80076aa:	d104      	bne.n	80076b6 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 80076ac:	6879      	ldr	r1, [r7, #4]
 80076ae:	68f8      	ldr	r0, [r7, #12]
 80076b0:	f000 fc89 	bl	8007fc6 <HRTIM_MasterWaveform_Config>
 80076b4:	e004      	b.n	80076c0 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 80076b6:	687a      	ldr	r2, [r7, #4]
 80076b8:	68b9      	ldr	r1, [r7, #8]
 80076ba:	68f8      	ldr	r0, [r7, #12]
 80076bc:	f000 fcea 	bl	8008094 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6819      	ldr	r1, [r3, #0]
 80076c4:	68f8      	ldr	r0, [r7, #12]
 80076c6:	68ba      	ldr	r2, [r7, #8]
 80076c8:	4613      	mov	r3, r2
 80076ca:	00db      	lsls	r3, r3, #3
 80076cc:	1a9b      	subs	r3, r3, r2
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	4403      	add	r3, r0
 80076d2:	3320      	adds	r3, #32
 80076d4:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6859      	ldr	r1, [r3, #4]
 80076da:	68f8      	ldr	r0, [r7, #12]
 80076dc:	68ba      	ldr	r2, [r7, #8]
 80076de:	4613      	mov	r3, r2
 80076e0:	00db      	lsls	r3, r3, #3
 80076e2:	1a9b      	subs	r3, r3, r2
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	4403      	add	r3, r0
 80076e8:	3324      	adds	r3, #36	; 0x24
 80076ea:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6899      	ldr	r1, [r3, #8]
 80076f0:	68f8      	ldr	r0, [r7, #12]
 80076f2:	68ba      	ldr	r2, [r7, #8]
 80076f4:	4613      	mov	r3, r2
 80076f6:	00db      	lsls	r3, r3, #3
 80076f8:	1a9b      	subs	r3, r3, r2
 80076fa:	009b      	lsls	r3, r3, #2
 80076fc:	4403      	add	r3, r0
 80076fe:	3328      	adds	r3, #40	; 0x28
 8007700:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	68d9      	ldr	r1, [r3, #12]
 8007706:	68f8      	ldr	r0, [r7, #12]
 8007708:	68ba      	ldr	r2, [r7, #8]
 800770a:	4613      	mov	r3, r2
 800770c:	00db      	lsls	r3, r3, #3
 800770e:	1a9b      	subs	r3, r3, r2
 8007710:	009b      	lsls	r3, r3, #2
 8007712:	4403      	add	r3, r0
 8007714:	332c      	adds	r3, #44	; 0x2c
 8007716:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6919      	ldr	r1, [r3, #16]
 800771c:	68f8      	ldr	r0, [r7, #12]
 800771e:	68ba      	ldr	r2, [r7, #8]
 8007720:	4613      	mov	r3, r2
 8007722:	00db      	lsls	r3, r3, #3
 8007724:	1a9b      	subs	r3, r3, r2
 8007726:	009b      	lsls	r3, r3, #2
 8007728:	4403      	add	r3, r0
 800772a:	3330      	adds	r3, #48	; 0x30
 800772c:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 800772e:	68b9      	ldr	r1, [r7, #8]
 8007730:	68f8      	ldr	r0, [r7, #12]
 8007732:	f000 fec7 	bl	80084c4 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2201      	movs	r2, #1
 800773a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2200      	movs	r2, #0
 8007742:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8007746:	2300      	movs	r3, #0
}
 8007748:	4618      	mov	r0, r3
 800774a:	3710      	adds	r7, #16
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}

08007750 <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  const HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 8007750:	b480      	push	{r7}
 8007752:	b085      	sub	sp, #20
 8007754:	af00      	add	r7, sp, #0
 8007756:	60f8      	str	r0, [r7, #12]
 8007758:	60b9      	str	r1, [r7, #8]
 800775a:	607a      	str	r2, [r7, #4]
 800775c:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8007764:	b2db      	uxtb	r3, r3
 8007766:	2b02      	cmp	r3, #2
 8007768:	d101      	bne.n	800776e <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 800776a:	2302      	movs	r3, #2
 800776c:	e157      	b.n	8007a1e <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8007774:	2b01      	cmp	r3, #1
 8007776:	d101      	bne.n	800777c <HAL_HRTIM_WaveformCompareConfig+0x2c>
 8007778:	2302      	movs	r3, #2
 800777a:	e150      	b.n	8007a1e <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2201      	movs	r2, #1
 8007780:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2202      	movs	r2, #2
 8007788:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	2b05      	cmp	r3, #5
 8007790:	d140      	bne.n	8007814 <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	3b01      	subs	r3, #1
 8007796:	2b07      	cmp	r3, #7
 8007798:	d82a      	bhi.n	80077f0 <HAL_HRTIM_WaveformCompareConfig+0xa0>
 800779a:	a201      	add	r2, pc, #4	; (adr r2, 80077a0 <HAL_HRTIM_WaveformCompareConfig+0x50>)
 800779c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a0:	080077c1 	.word	0x080077c1
 80077a4:	080077cd 	.word	0x080077cd
 80077a8:	080077f1 	.word	0x080077f1
 80077ac:	080077d9 	.word	0x080077d9
 80077b0:	080077f1 	.word	0x080077f1
 80077b4:	080077f1 	.word	0x080077f1
 80077b8:	080077f1 	.word	0x080077f1
 80077bc:	080077e5 	.word	0x080077e5
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	683a      	ldr	r2, [r7, #0]
 80077c6:	6812      	ldr	r2, [r2, #0]
 80077c8:	61da      	str	r2, [r3, #28]
        break;
 80077ca:	e01a      	b.n	8007802 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	683a      	ldr	r2, [r7, #0]
 80077d2:	6812      	ldr	r2, [r2, #0]
 80077d4:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 80077d6:	e014      	b.n	8007802 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	683a      	ldr	r2, [r7, #0]
 80077de:	6812      	ldr	r2, [r2, #0]
 80077e0:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 80077e2:	e00e      	b.n	8007802 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	683a      	ldr	r2, [r7, #0]
 80077ea:	6812      	ldr	r2, [r2, #0]
 80077ec:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 80077ee:	e008      	b.n	8007802 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2207      	movs	r2, #7
 80077f4:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2200      	movs	r2, #0
 80077fc:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

        break;
 8007800:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8007808:	b2db      	uxtb	r3, r3
 800780a:	2b07      	cmp	r3, #7
 800780c:	f040 80fe 	bne.w	8007a0c <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 8007810:	2301      	movs	r3, #1
 8007812:	e104      	b.n	8007a1e <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	3b01      	subs	r3, #1
 8007818:	2b07      	cmp	r3, #7
 800781a:	f200 80e3 	bhi.w	80079e4 <HAL_HRTIM_WaveformCompareConfig+0x294>
 800781e:	a201      	add	r2, pc, #4	; (adr r2, 8007824 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 8007820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007824:	08007845 	.word	0x08007845
 8007828:	08007859 	.word	0x08007859
 800782c:	080079e5 	.word	0x080079e5
 8007830:	08007915 	.word	0x08007915
 8007834:	080079e5 	.word	0x080079e5
 8007838:	080079e5 	.word	0x080079e5
 800783c:	080079e5 	.word	0x080079e5
 8007840:	08007929 	.word	0x08007929
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6819      	ldr	r1, [r3, #0]
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	01db      	lsls	r3, r3, #7
 8007850:	440b      	add	r3, r1
 8007852:	339c      	adds	r3, #156	; 0x9c
 8007854:	601a      	str	r2, [r3, #0]
        break;
 8007856:	e0d1      	b.n	80079fc <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	6819      	ldr	r1, [r3, #0]
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	01db      	lsls	r3, r3, #7
 8007864:	440b      	add	r3, r1
 8007866:	33a4      	adds	r3, #164	; 0xa4
 8007868:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d03f      	beq.n	80078f2 <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	3301      	adds	r3, #1
 800787a:	01db      	lsls	r3, r3, #7
 800787c:	4413      	add	r3, r2
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	68fa      	ldr	r2, [r7, #12]
 8007882:	6811      	ldr	r1, [r2, #0]
 8007884:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	3301      	adds	r3, #1
 800788c:	01db      	lsls	r3, r3, #7
 800788e:	440b      	add	r3, r1
 8007890:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681a      	ldr	r2, [r3, #0]
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	3301      	adds	r3, #1
 800789a:	01db      	lsls	r3, r3, #7
 800789c:	4413      	add	r3, r2
 800789e:	681a      	ldr	r2, [r3, #0]
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	68f9      	ldr	r1, [r7, #12]
 80078a6:	6809      	ldr	r1, [r1, #0]
 80078a8:	431a      	orrs	r2, r3
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	3301      	adds	r3, #1
 80078ae:	01db      	lsls	r3, r3, #7
 80078b0:	440b      	add	r3, r1
 80078b2:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078bc:	d109      	bne.n	80078d2 <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	6819      	ldr	r1, [r3, #0]
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	689a      	ldr	r2, [r3, #8]
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	01db      	lsls	r3, r3, #7
 80078ca:	440b      	add	r3, r1
 80078cc:	339c      	adds	r3, #156	; 0x9c
 80078ce:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 80078d0:	e091      	b.n	80079f6 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80078da:	f040 808c 	bne.w	80079f6 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	6819      	ldr	r1, [r3, #0]
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	689a      	ldr	r2, [r3, #8]
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	01db      	lsls	r3, r3, #7
 80078ea:	440b      	add	r3, r1
 80078ec:	33a8      	adds	r3, #168	; 0xa8
 80078ee:	601a      	str	r2, [r3, #0]
         break;
 80078f0:	e081      	b.n	80079f6 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	3301      	adds	r3, #1
 80078fa:	01db      	lsls	r3, r3, #7
 80078fc:	4413      	add	r3, r2
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	68fa      	ldr	r2, [r7, #12]
 8007902:	6811      	ldr	r1, [r2, #0]
 8007904:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	3301      	adds	r3, #1
 800790c:	01db      	lsls	r3, r3, #7
 800790e:	440b      	add	r3, r1
 8007910:	601a      	str	r2, [r3, #0]
         break;
 8007912:	e070      	b.n	80079f6 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	6819      	ldr	r1, [r3, #0]
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	681a      	ldr	r2, [r3, #0]
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	01db      	lsls	r3, r3, #7
 8007920:	440b      	add	r3, r1
 8007922:	33a8      	adds	r3, #168	; 0xa8
 8007924:	601a      	str	r2, [r3, #0]
        break;
 8007926:	e069      	b.n	80079fc <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6819      	ldr	r1, [r3, #0]
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	01db      	lsls	r3, r3, #7
 8007934:	440b      	add	r3, r1
 8007936:	33ac      	adds	r3, #172	; 0xac
 8007938:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d03f      	beq.n	80079c2 <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681a      	ldr	r2, [r3, #0]
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	3301      	adds	r3, #1
 800794a:	01db      	lsls	r3, r3, #7
 800794c:	4413      	add	r3, r2
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	68fa      	ldr	r2, [r7, #12]
 8007952:	6811      	ldr	r1, [r2, #0]
 8007954:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	3301      	adds	r3, #1
 800795c:	01db      	lsls	r3, r3, #7
 800795e:	440b      	add	r3, r1
 8007960:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	3301      	adds	r3, #1
 800796a:	01db      	lsls	r3, r3, #7
 800796c:	4413      	add	r3, r2
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	009b      	lsls	r3, r3, #2
 8007976:	68f9      	ldr	r1, [r7, #12]
 8007978:	6809      	ldr	r1, [r1, #0]
 800797a:	431a      	orrs	r2, r3
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	3301      	adds	r3, #1
 8007980:	01db      	lsls	r3, r3, #7
 8007982:	440b      	add	r3, r1
 8007984:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800798e:	d109      	bne.n	80079a4 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	6819      	ldr	r1, [r3, #0]
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	689a      	ldr	r2, [r3, #8]
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	01db      	lsls	r3, r3, #7
 800799c:	440b      	add	r3, r1
 800799e:	339c      	adds	r3, #156	; 0x9c
 80079a0:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 80079a2:	e02a      	b.n	80079fa <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80079ac:	d125      	bne.n	80079fa <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	6819      	ldr	r1, [r3, #0]
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	689a      	ldr	r2, [r3, #8]
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	01db      	lsls	r3, r3, #7
 80079ba:	440b      	add	r3, r1
 80079bc:	33a8      	adds	r3, #168	; 0xa8
 80079be:	601a      	str	r2, [r3, #0]
         break;
 80079c0:	e01b      	b.n	80079fa <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681a      	ldr	r2, [r3, #0]
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	3301      	adds	r3, #1
 80079ca:	01db      	lsls	r3, r3, #7
 80079cc:	4413      	add	r3, r2
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	68fa      	ldr	r2, [r7, #12]
 80079d2:	6811      	ldr	r1, [r2, #0]
 80079d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	3301      	adds	r3, #1
 80079dc:	01db      	lsls	r3, r3, #7
 80079de:	440b      	add	r3, r1
 80079e0:	601a      	str	r2, [r3, #0]
         break;
 80079e2:	e00a      	b.n	80079fa <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2207      	movs	r2, #7
 80079e8:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2200      	movs	r2, #0
 80079f0:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      break;
 80079f4:	e002      	b.n	80079fc <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 80079f6:	bf00      	nop
 80079f8:	e000      	b.n	80079fc <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 80079fa:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8007a02:	b2db      	uxtb	r3, r3
 8007a04:	2b07      	cmp	r3, #7
 8007a06:	d101      	bne.n	8007a0c <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 8007a08:	2301      	movs	r3, #1
 8007a0a:	e008      	b.n	8007a1e <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2201      	movs	r2, #1
 8007a10:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2200      	movs	r2, #0
 8007a18:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8007a1c:	2300      	movs	r3, #0
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3714      	adds	r7, #20
 8007a22:	46bd      	mov	sp, r7
 8007a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a28:	4770      	bx	lr
 8007a2a:	bf00      	nop

08007a2c <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b084      	sub	sp, #16
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	60f8      	str	r0, [r7, #12]
 8007a34:	60b9      	str	r1, [r7, #8]
 8007a36:	607a      	str	r2, [r7, #4]
 8007a38:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8007a40:	b2db      	uxtb	r3, r3
 8007a42:	2b02      	cmp	r3, #2
 8007a44:	d101      	bne.n	8007a4a <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 8007a46:	2302      	movs	r3, #2
 8007a48:	e01d      	b.n	8007a86 <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d101      	bne.n	8007a58 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 8007a54:	2302      	movs	r3, #2
 8007a56:	e016      	b.n	8007a86 <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	2202      	movs	r2, #2
 8007a64:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	687a      	ldr	r2, [r7, #4]
 8007a6c:	68b9      	ldr	r1, [r7, #8]
 8007a6e:	68f8      	ldr	r0, [r7, #12]
 8007a70:	f000 fc50 	bl	8008314 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2201      	movs	r2, #1
 8007a78:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8007a84:	2300      	movs	r3, #0
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3710      	adds	r7, #16
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}

08007a8e <HAL_HRTIM_WaveformOutputStart>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t OutputsToStart)
{
 8007a8e:	b480      	push	{r7}
 8007a90:	b083      	sub	sp, #12
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	6078      	str	r0, [r7, #4]
 8007a96:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStart));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	d101      	bne.n	8007aa6 <HAL_HRTIM_WaveformOutputStart+0x18>
 8007aa2:	2302      	movs	r3, #2
 8007aa4:	e01a      	b.n	8007adc <HAL_HRTIM_WaveformOutputStart+0x4e>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2202      	movs	r2, #2
 8007ab2:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f8d3 1394 	ldr.w	r1, [r3, #916]	; 0x394
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	683a      	ldr	r2, [r7, #0]
 8007ac4:	430a      	orrs	r2, r1
 8007ac6:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2201      	movs	r2, #1
 8007ace:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8007ada:	2300      	movs	r3, #0
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	370c      	adds	r7, #12
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr

08007ae8 <HAL_HRTIM_WaveformOutputStop>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStop(HRTIM_HandleTypeDef * hhrtim,
                                               uint32_t OutputsToStop)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b083      	sub	sp, #12
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStop));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d101      	bne.n	8007b00 <HAL_HRTIM_WaveformOutputStop+0x18>
 8007afc:	2302      	movs	r3, #2
 8007afe:	e01a      	b.n	8007b36 <HAL_HRTIM_WaveformOutputStop+0x4e>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2201      	movs	r2, #1
 8007b04:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2202      	movs	r2, #2
 8007b0c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.ODISR |= (OutputsToStop);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f8d3 1398 	ldr.w	r1, [r3, #920]	; 0x398
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	683a      	ldr	r2, [r7, #0]
 8007b1e:	430a      	orrs	r2, r1
 8007b20:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2201      	movs	r2, #1
 8007b28:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8007b34:	2300      	movs	r3, #0
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	370c      	adds	r7, #12
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr
	...

08007b44 <HAL_HRTIM_WaveformCountStart_IT>:
  *       function.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart_IT(HRTIM_HandleTypeDef * hhrtim,
                                                    uint32_t Timers)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b085      	sub	sp, #20
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d101      	bne.n	8007b5c <HAL_HRTIM_WaveformCountStart_IT+0x18>
 8007b58:	2302      	movs	r3, #2
 8007b5a:	e05b      	b.n	8007c14 <HAL_HRTIM_WaveformCountStart_IT+0xd0>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2202      	movs	r2, #2
 8007b68:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable HRTIM interrupts (if required) */
  __HAL_HRTIM_ENABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f8d3 1390 	ldr.w	r1, [r3, #912]	; 0x390
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	685a      	ldr	r2, [r3, #4]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	430a      	orrs	r2, r1
 8007b7e:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390

  /* Enable master timer related interrupts (if required) */
  if ((Timers & HRTIM_TIMERID_MASTER) != 0U)
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d009      	beq.n	8007ba0 <HAL_HRTIM_WaveformCountStart_IT+0x5c>
  {
    __HAL_HRTIM_MASTER_ENABLE_IT(hhrtim,
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	68d9      	ldr	r1, [r3, #12]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	430a      	orrs	r2, r1
 8007b9e:	60da      	str	r2, [r3, #12]
                                 hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].InterruptRequests);
  }

  /* Enable timing unit related interrupts (if required) */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	73fb      	strb	r3, [r7, #15]
 8007ba4:	e022      	b.n	8007bec <HAL_HRTIM_WaveformCountStart_IT+0xa8>
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 8007ba6:	7bfb      	ldrb	r3, [r7, #15]
 8007ba8:	4a1d      	ldr	r2, [pc, #116]	; (8007c20 <HAL_HRTIM_WaveformCountStart_IT+0xdc>)
 8007baa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	4013      	ands	r3, r2
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d017      	beq.n	8007be6 <HAL_HRTIM_WaveformCountStart_IT+0xa2>
    {
      __HAL_HRTIM_TIMER_ENABLE_IT(hhrtim,
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	7bfb      	ldrb	r3, [r7, #15]
 8007bbc:	01db      	lsls	r3, r3, #7
 8007bbe:	4413      	add	r3, r2
 8007bc0:	338c      	adds	r3, #140	; 0x8c
 8007bc2:	6818      	ldr	r0, [r3, #0]
 8007bc4:	7bfa      	ldrb	r2, [r7, #15]
 8007bc6:	6879      	ldr	r1, [r7, #4]
 8007bc8:	4613      	mov	r3, r2
 8007bca:	00db      	lsls	r3, r3, #3
 8007bcc:	1a9b      	subs	r3, r3, r2
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	440b      	add	r3, r1
 8007bd2:	3320      	adds	r3, #32
 8007bd4:	681a      	ldr	r2, [r3, #0]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6819      	ldr	r1, [r3, #0]
 8007bda:	7bfb      	ldrb	r3, [r7, #15]
 8007bdc:	4302      	orrs	r2, r0
 8007bde:	01db      	lsls	r3, r3, #7
 8007be0:	440b      	add	r3, r1
 8007be2:	338c      	adds	r3, #140	; 0x8c
 8007be4:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8007be6:	7bfb      	ldrb	r3, [r7, #15]
 8007be8:	3301      	adds	r3, #1
 8007bea:	73fb      	strb	r3, [r7, #15]
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
 8007bec:	7bfb      	ldrb	r3, [r7, #15]
 8007bee:	2b04      	cmp	r3, #4
 8007bf0:	d9d9      	bls.n	8007ba6 <HAL_HRTIM_WaveformCountStart_IT+0x62>
                                  hhrtim->TimerParam[timer_idx].InterruptRequests);
    }
  }

  /* Enable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	6819      	ldr	r1, [r3, #0]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	683a      	ldr	r2, [r7, #0]
 8007bfe:	430a      	orrs	r2, r1
 8007c00:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2201      	movs	r2, #1
 8007c06:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;}
 8007c12:	2300      	movs	r3, #0
 8007c14:	4618      	mov	r0, r3
 8007c16:	3714      	adds	r7, #20
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr
 8007c20:	2000002c 	.word	0x2000002c

08007c24 <HAL_HRTIM_WaveformCountStop_IT>:
  * @note The counter of a timer is stopped only if all timer outputs are disabled
  * @note All enabled timer related interrupts are disabled.
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStop_IT(HRTIM_HandleTypeDef * hhrtim,
                                                   uint32_t Timers)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b085      	sub	sp, #20
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	6039      	str	r1, [r7, #0]
  /* ++ WA */
  __IO uint32_t delai = (uint32_t)(0x17FU);
 8007c2e:	f240 137f 	movw	r3, #383	; 0x17f
 8007c32:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8007c3a:	2b01      	cmp	r3, #1
 8007c3c:	d101      	bne.n	8007c42 <HAL_HRTIM_WaveformCountStop_IT+0x1e>
 8007c3e:	2302      	movs	r3, #2
 8007c40:	e065      	b.n	8007d0e <HAL_HRTIM_WaveformCountStop_IT+0xea>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2201      	movs	r2, #1
 8007c46:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2202      	movs	r2, #2
 8007c4e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Disable HRTIM interrupts (if required) */
  __HAL_HRTIM_DISABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f8d3 1390 	ldr.w	r1, [r3, #912]	; 0x390
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	43da      	mvns	r2, r3
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	400a      	ands	r2, r1
 8007c66:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390

  /* Disable master timer related interrupts (if required) */
  if ((Timers & HRTIM_TIMERID_MASTER) != 0U)
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d00a      	beq.n	8007c8a <HAL_HRTIM_WaveformCountStop_IT+0x66>
  {
    /* Interrupts enable flag must be cleared one by one */
    __HAL_HRTIM_MASTER_DISABLE_IT(hhrtim, hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].InterruptRequests);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	68d9      	ldr	r1, [r3, #12]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007c80:	43da      	mvns	r2, r3
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	400a      	ands	r2, r1
 8007c88:	60da      	str	r2, [r3, #12]
  }

  /* Disable timing unit related interrupts (if required) */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	73fb      	strb	r3, [r7, #15]
 8007c8e:	e023      	b.n	8007cd8 <HAL_HRTIM_WaveformCountStop_IT+0xb4>
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 8007c90:	7bfb      	ldrb	r3, [r7, #15]
 8007c92:	4a22      	ldr	r2, [pc, #136]	; (8007d1c <HAL_HRTIM_WaveformCountStop_IT+0xf8>)
 8007c94:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	4013      	ands	r3, r2
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d018      	beq.n	8007cd2 <HAL_HRTIM_WaveformCountStop_IT+0xae>
    {
      __HAL_HRTIM_TIMER_DISABLE_IT(hhrtim, timer_idx, hhrtim->TimerParam[timer_idx].InterruptRequests);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	7bfb      	ldrb	r3, [r7, #15]
 8007ca6:	01db      	lsls	r3, r3, #7
 8007ca8:	4413      	add	r3, r2
 8007caa:	338c      	adds	r3, #140	; 0x8c
 8007cac:	6818      	ldr	r0, [r3, #0]
 8007cae:	7bfa      	ldrb	r2, [r7, #15]
 8007cb0:	6879      	ldr	r1, [r7, #4]
 8007cb2:	4613      	mov	r3, r2
 8007cb4:	00db      	lsls	r3, r3, #3
 8007cb6:	1a9b      	subs	r3, r3, r2
 8007cb8:	009b      	lsls	r3, r3, #2
 8007cba:	440b      	add	r3, r1
 8007cbc:	3320      	adds	r3, #32
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	43da      	mvns	r2, r3
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6819      	ldr	r1, [r3, #0]
 8007cc6:	7bfb      	ldrb	r3, [r7, #15]
 8007cc8:	4002      	ands	r2, r0
 8007cca:	01db      	lsls	r3, r3, #7
 8007ccc:	440b      	add	r3, r1
 8007cce:	338c      	adds	r3, #140	; 0x8c
 8007cd0:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8007cd2:	7bfb      	ldrb	r3, [r7, #15]
 8007cd4:	3301      	adds	r3, #1
 8007cd6:	73fb      	strb	r3, [r7, #15]
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
 8007cd8:	7bfb      	ldrb	r3, [r7, #15]
 8007cda:	2b04      	cmp	r3, #4
 8007cdc:	d9d8      	bls.n	8007c90 <HAL_HRTIM_WaveformCountStop_IT+0x6c>
    }
  }

  /* ++ WA */
  do { delai--; } while (delai != 0U);
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	3b01      	subs	r3, #1
 8007ce2:	60bb      	str	r3, [r7, #8]
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d1f9      	bne.n	8007cde <HAL_HRTIM_WaveformCountStop_IT+0xba>
  /* -- WA */

  /* Disable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR &= ~(Timers);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	6819      	ldr	r1, [r3, #0]
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	43da      	mvns	r2, r3
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	400a      	ands	r2, r1
 8007cfa:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2200      	movs	r2, #0
 8007d08:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8007d0c:	2300      	movs	r3, #0
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3714      	adds	r7, #20
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr
 8007d1a:	bf00      	nop
 8007d1c:	2000002c 	.word	0x2000002c

08007d20 <HAL_HRTIM_IRQHandler>:
  *                   This parameter can be any value of HRTIM_Timer_Index
  * @retval None
  */
void HAL_HRTIM_IRQHandler(HRTIM_HandleTypeDef * hhrtim,
                          uint32_t TimerIdx)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b082      	sub	sp, #8
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	6039      	str	r1, [r7, #0]
  /* HRTIM interrupts handling */
  if (TimerIdx == HRTIM_TIMERINDEX_COMMON)
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	2bff      	cmp	r3, #255	; 0xff
 8007d2e:	d103      	bne.n	8007d38 <HAL_HRTIM_IRQHandler+0x18>
  {
    HRTIM_HRTIM_ISR(hhrtim);
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f000 fc29 	bl	8008588 <HRTIM_HRTIM_ISR>
  {
    /* Timing unit related interrupts handling */
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
  }

}
 8007d36:	e00a      	b.n	8007d4e <HAL_HRTIM_IRQHandler+0x2e>
  else if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	2b05      	cmp	r3, #5
 8007d3c:	d103      	bne.n	8007d46 <HAL_HRTIM_IRQHandler+0x26>
    HRTIM_Master_ISR(hhrtim);
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 fca0 	bl	8008684 <HRTIM_Master_ISR>
}
 8007d44:	e003      	b.n	8007d4e <HAL_HRTIM_IRQHandler+0x2e>
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
 8007d46:	6839      	ldr	r1, [r7, #0]
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f000 fd45 	bl	80087d8 <HRTIM_Timer_ISR>
}
 8007d4e:	bf00      	nop
 8007d50:	3708      	adds	r7, #8
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}

08007d56 <HAL_HRTIM_Fault1Callback>:
  * @brief  Callback function invoked when a fault 1 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle  * @retval None
  * @retval None
  */
__weak void HAL_HRTIM_Fault1Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8007d56:	b480      	push	{r7}
 8007d58:	b083      	sub	sp, #12
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault1Callback could be implemented in the user file
   */
}
 8007d5e:	bf00      	nop
 8007d60:	370c      	adds	r7, #12
 8007d62:	46bd      	mov	sp, r7
 8007d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d68:	4770      	bx	lr

08007d6a <HAL_HRTIM_Fault2Callback>:
  * @brief  Callback function invoked when a fault 2 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault2Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8007d6a:	b480      	push	{r7}
 8007d6c:	b083      	sub	sp, #12
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault2Callback could be implemented in the user file
   */
}
 8007d72:	bf00      	nop
 8007d74:	370c      	adds	r7, #12
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr

08007d7e <HAL_HRTIM_Fault3Callback>:
  * @brief  Callback function invoked when a fault 3 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault3Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8007d7e:	b480      	push	{r7}
 8007d80:	b083      	sub	sp, #12
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault3Callback could be implemented in the user file
   */
}
 8007d86:	bf00      	nop
 8007d88:	370c      	adds	r7, #12
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr

08007d92 <HAL_HRTIM_Fault4Callback>:
  * @brief  Callback function invoked when a fault 4 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault4Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8007d92:	b480      	push	{r7}
 8007d94:	b083      	sub	sp, #12
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault4Callback could be implemented in the user file
   */
}
 8007d9a:	bf00      	nop
 8007d9c:	370c      	adds	r7, #12
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr

08007da6 <HAL_HRTIM_Fault5Callback>:
  * @brief  Callback function invoked when a fault 5 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault5Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8007da6:	b480      	push	{r7}
 8007da8:	b083      	sub	sp, #12
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault5Callback could be implemented in the user file
   */
}
 8007dae:	bf00      	nop
 8007db0:	370c      	adds	r7, #12
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr

08007dba <HAL_HRTIM_SystemFaultCallback>:
  * @brief  Callback function invoked when a system fault interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SystemFaultCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8007dba:	b480      	push	{r7}
 8007dbc:	b083      	sub	sp, #12
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SystemFaultCallback could be implemented in the user file
   */
}
 8007dc2:	bf00      	nop
 8007dc4:	370c      	adds	r7, #12
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dcc:	4770      	bx	lr

08007dce <HAL_HRTIM_BurstModePeriodCallback>:
  * @brief  Callback function invoked when the end of the burst mode period is reached
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_BurstModePeriodCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8007dce:	b480      	push	{r7}
 8007dd0:	b083      	sub	sp, #12
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_BurstModeCallback could be implemented in the user file
   */
}
 8007dd6:	bf00      	nop
 8007dd8:	370c      	adds	r7, #12
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr

08007de2 <HAL_HRTIM_SynchronizationEventCallback>:
  * @brief  Callback function invoked when a synchronization input event is received
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SynchronizationEventCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8007de2:	b480      	push	{r7}
 8007de4:	b083      	sub	sp, #12
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SynchronizationEventCallback could be implemented in the user file
   */
}
 8007dea:	bf00      	nop
 8007dec:	370c      	adds	r7, #12
 8007dee:	46bd      	mov	sp, r7
 8007df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df4:	4770      	bx	lr

08007df6 <HAL_HRTIM_RegistersUpdateCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_RegistersUpdateCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007df6:	b480      	push	{r7}
 8007df8:	b083      	sub	sp, #12
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]
 8007dfe:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RegistersUpdateCallback could be implemented in the user file
   */
}
 8007e00:	bf00      	nop
 8007e02:	370c      	adds	r7, #12
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr

08007e0c <HAL_HRTIM_Compare1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b083      	sub	sp, #12
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare1EventCallback could be implemented in the user file
   */
}
 8007e16:	bf00      	nop
 8007e18:	370c      	adds	r7, #12
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e20:	4770      	bx	lr

08007e22 <HAL_HRTIM_Compare4EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare4EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007e22:	b480      	push	{r7}
 8007e24:	b083      	sub	sp, #12
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	6078      	str	r0, [r7, #4]
 8007e2a:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare4EventCallback could be implemented in the user file
   */
}
 8007e2c:	bf00      	nop
 8007e2e:	370c      	adds	r7, #12
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr

08007e38 <HAL_HRTIM_Capture1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Capture1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b083      	sub	sp, #12
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture1EventCallback could be implemented in the user file
   */
}
 8007e42:	bf00      	nop
 8007e44:	370c      	adds	r7, #12
 8007e46:	46bd      	mov	sp, r7
 8007e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4c:	4770      	bx	lr

08007e4e <HAL_HRTIM_Capture2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Capture2EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007e4e:	b480      	push	{r7}
 8007e50:	b083      	sub	sp, #12
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	6078      	str	r0, [r7, #4]
 8007e56:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture2EventCallback could be implemented in the user file
   */
}
 8007e58:	bf00      	nop
 8007e5a:	370c      	adds	r7, #12
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr

08007e64 <HAL_HRTIM_DelayedProtectionCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_DelayedProtectionCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b083      	sub	sp, #12
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_DelayedProtectionCallback could be implemented in the user file
   */
}
 8007e6e:	bf00      	nop
 8007e70:	370c      	adds	r7, #12
 8007e72:	46bd      	mov	sp, r7
 8007e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e78:	4770      	bx	lr

08007e7a <HAL_HRTIM_CounterResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_CounterResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007e7a:	b480      	push	{r7}
 8007e7c:	b083      	sub	sp, #12
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	6078      	str	r0, [r7, #4]
 8007e82:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_CounterResetCallback could be implemented in the user file
   */
}
 8007e84:	bf00      	nop
 8007e86:	370c      	adds	r7, #12
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr

08007e90 <HAL_HRTIM_Output1SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output1SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b083      	sub	sp, #12
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1SetCallback could be implemented in the user file
   */
}
 8007e9a:	bf00      	nop
 8007e9c:	370c      	adds	r7, #12
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea4:	4770      	bx	lr

08007ea6 <HAL_HRTIM_Output1ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output1ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007ea6:	b480      	push	{r7}
 8007ea8:	b083      	sub	sp, #12
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	6078      	str	r0, [r7, #4]
 8007eae:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1ResetCallback could be implemented in the user file
   */
}
 8007eb0:	bf00      	nop
 8007eb2:	370c      	adds	r7, #12
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr

08007ebc <HAL_HRTIM_Output2SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output2SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b083      	sub	sp, #12
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2SetCallback could be implemented in the user file
   */
}
 8007ec6:	bf00      	nop
 8007ec8:	370c      	adds	r7, #12
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed0:	4770      	bx	lr

08007ed2 <HAL_HRTIM_Output2ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output2ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007ed2:	b480      	push	{r7}
 8007ed4:	b083      	sub	sp, #12
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	6078      	str	r0, [r7, #4]
 8007eda:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2ResetCallback could be implemented in the user file
   */
}
 8007edc:	bf00      	nop
 8007ede:	370c      	adds	r7, #12
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee6:	4770      	bx	lr

08007ee8 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b085      	sub	sp, #20
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	f023 0307 	bic.w	r3, r3, #7
 8007f00:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	689b      	ldr	r3, [r3, #8]
 8007f06:	68fa      	ldr	r2, [r7, #12]
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f023 0318 	bic.w	r3, r3, #24
 8007f12:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	68db      	ldr	r3, [r3, #12]
 8007f18:	68fa      	ldr	r2, [r7, #12]
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	68fa      	ldr	r2, [r7, #12]
 8007f24:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	683a      	ldr	r2, [r7, #0]
 8007f2c:	6812      	ldr	r2, [r2, #0]
 8007f2e:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	683a      	ldr	r2, [r7, #0]
 8007f36:	6852      	ldr	r2, [r2, #4]
 8007f38:	619a      	str	r2, [r3, #24]
}
 8007f3a:	bf00      	nop
 8007f3c:	3714      	adds	r7, #20
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr

08007f46 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8007f46:	b480      	push	{r7}
 8007f48:	b087      	sub	sp, #28
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	60f8      	str	r0, [r7, #12]
 8007f4e:	60b9      	str	r1, [r7, #8]
 8007f50:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681a      	ldr	r2, [r3, #0]
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	3301      	adds	r3, #1
 8007f5a:	01db      	lsls	r3, r3, #7
 8007f5c:	4413      	add	r3, r2
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	f023 0307 	bic.w	r3, r3, #7
 8007f68:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	689b      	ldr	r3, [r3, #8]
 8007f6e:	697a      	ldr	r2, [r7, #20]
 8007f70:	4313      	orrs	r3, r2
 8007f72:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	f023 0318 	bic.w	r3, r3, #24
 8007f7a:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	68db      	ldr	r3, [r3, #12]
 8007f80:	697a      	ldr	r2, [r7, #20]
 8007f82:	4313      	orrs	r3, r2
 8007f84:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681a      	ldr	r2, [r3, #0]
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	3301      	adds	r3, #1
 8007f8e:	01db      	lsls	r3, r3, #7
 8007f90:	4413      	add	r3, r2
 8007f92:	697a      	ldr	r2, [r7, #20]
 8007f94:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	6819      	ldr	r1, [r3, #0]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681a      	ldr	r2, [r3, #0]
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	01db      	lsls	r3, r3, #7
 8007fa2:	440b      	add	r3, r1
 8007fa4:	3394      	adds	r3, #148	; 0x94
 8007fa6:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	6819      	ldr	r1, [r3, #0]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	685a      	ldr	r2, [r3, #4]
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	01db      	lsls	r3, r3, #7
 8007fb4:	440b      	add	r3, r1
 8007fb6:	3398      	adds	r3, #152	; 0x98
 8007fb8:	601a      	str	r2, [r3, #0]
}
 8007fba:	bf00      	nop
 8007fbc:	371c      	adds	r7, #28
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc4:	4770      	bx	lr

08007fc6 <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8007fc6:	b480      	push	{r7}
 8007fc8:	b085      	sub	sp, #20
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	6078      	str	r0, [r7, #4]
 8007fce:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8007fe0:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	f023 0320 	bic.w	r3, r3, #32
 8007fe8:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	695b      	ldr	r3, [r3, #20]
 8007fee:	68fa      	ldr	r2, [r7, #12]
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007ffa:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	699b      	ldr	r3, [r3, #24]
 8008000:	68fa      	ldr	r2, [r7, #12]
 8008002:	4313      	orrs	r3, r2
 8008004:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800800c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	69db      	ldr	r3, [r3, #28]
 8008012:	68fa      	ldr	r2, [r7, #12]
 8008014:	4313      	orrs	r3, r2
 8008016:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800801e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	6a1b      	ldr	r3, [r3, #32]
 8008024:	68fa      	ldr	r2, [r7, #12]
 8008026:	4313      	orrs	r3, r2
 8008028:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8008030:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008036:	68fa      	ldr	r2, [r7, #12]
 8008038:	4313      	orrs	r3, r2
 800803a:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8008042:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008048:	009b      	lsls	r3, r3, #2
 800804a:	68fa      	ldr	r2, [r7, #12]
 800804c:	4313      	orrs	r3, r2
 800804e:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008056:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800805c:	68fa      	ldr	r2, [r7, #12]
 800805e:	4313      	orrs	r3, r2
 8008060:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008068:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800806e:	68ba      	ldr	r2, [r7, #8]
 8008070:	4313      	orrs	r3, r2
 8008072:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	68fa      	ldr	r2, [r7, #12]
 800807a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	68ba      	ldr	r2, [r7, #8]
 8008082:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8008086:	bf00      	nop
 8008088:	3714      	adds	r7, #20
 800808a:	46bd      	mov	sp, r7
 800808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008090:	4770      	bx	lr
	...

08008094 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8008094:	b480      	push	{r7}
 8008096:	b08b      	sub	sp, #44	; 0x2c
 8008098:	af00      	add	r7, sp, #0
 800809a:	60f8      	str	r0, [r7, #12]
 800809c:	60b9      	str	r1, [r7, #8]
 800809e:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681a      	ldr	r2, [r3, #0]
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	3301      	adds	r3, #1
 80080a8:	01db      	lsls	r3, r3, #7
 80080aa:	4413      	add	r3, r2
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	68fa      	ldr	r2, [r7, #12]
 80080b0:	6811      	ldr	r1, [r2, #0]
 80080b2:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	3301      	adds	r3, #1
 80080ba:	01db      	lsls	r3, r3, #7
 80080bc:	440b      	add	r3, r1
 80080be:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	3301      	adds	r3, #1
 80080c8:	01db      	lsls	r3, r3, #7
 80080ca:	4413      	add	r3, r2
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681a      	ldr	r2, [r3, #0]
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	01db      	lsls	r3, r3, #7
 80080d8:	4413      	add	r3, r2
 80080da:	33e8      	adds	r3, #232	; 0xe8
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681a      	ldr	r2, [r3, #0]
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	01db      	lsls	r3, r3, #7
 80080e8:	4413      	add	r3, r2
 80080ea:	33e4      	adds	r3, #228	; 0xe4
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 80080f8:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 80080fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fc:	f023 0320 	bic.w	r3, r3, #32
 8008100:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	695b      	ldr	r3, [r3, #20]
 8008106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008108:	4313      	orrs	r3, r2
 800810a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 800810c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008112:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	699b      	ldr	r3, [r3, #24]
 8008118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800811a:	4313      	orrs	r3, r2
 800811c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 800811e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008120:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008124:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	69db      	ldr	r3, [r3, #28]
 800812a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800812c:	4313      	orrs	r3, r2
 800812e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8008130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008132:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008136:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6a1b      	ldr	r3, [r3, #32]
 800813c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800813e:	4313      	orrs	r3, r2
 8008140:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8008142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008144:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8008148:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800814e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008150:	4313      	orrs	r3, r2
 8008152:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8008154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008156:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800815a:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008162:	4313      	orrs	r3, r2
 8008164:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8008166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008168:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800816c:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008172:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008176:	d103      	bne.n	8008180 <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8008178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800817e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8008180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008182:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008186:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800818c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800818e:	4313      	orrs	r3, r2
 8008190:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8008192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008194:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008198:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800819e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081a0:	4313      	orrs	r3, r2
 80081a2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 80081a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a6:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 80081aa:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081b2:	4313      	orrs	r3, r2
 80081b4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 80081b6:	69bb      	ldr	r3, [r7, #24]
 80081b8:	f023 031f 	bic.w	r3, r3, #31
 80081bc:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081c2:	f003 031f 	and.w	r3, r3, #31
 80081c6:	69ba      	ldr	r2, [r7, #24]
 80081c8:	4313      	orrs	r3, r2
 80081ca:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 80081cc:	69bb      	ldr	r3, [r7, #24]
 80081ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80081d2:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081d8:	69ba      	ldr	r2, [r7, #24]
 80081da:	4313      	orrs	r3, r2
 80081dc:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d108      	bne.n	80081f8 <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 80081e6:	6a3b      	ldr	r3, [r7, #32]
 80081e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081ec:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081f2:	6a3a      	ldr	r2, [r7, #32]
 80081f4:	4313      	orrs	r3, r2
 80081f6:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081fc:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8008200:	d004      	beq.n	800820c <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008206:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 800820a:	d103      	bne.n	8008214 <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008210:	2b40      	cmp	r3, #64	; 0x40
 8008212:	d108      	bne.n	8008226 <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8008214:	6a3b      	ldr	r3, [r7, #32]
 8008216:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 800821a:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008220:	6a3a      	ldr	r2, [r7, #32]
 8008222:	4313      	orrs	r3, r2
 8008224:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800822a:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	2b04      	cmp	r3, #4
 8008230:	d843      	bhi.n	80082ba <HRTIM_TimingUnitWaveform_Config+0x226>
 8008232:	a201      	add	r2, pc, #4	; (adr r2, 8008238 <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 8008234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008238:	0800824d 	.word	0x0800824d
 800823c:	08008263 	.word	0x08008263
 8008240:	08008279 	.word	0x08008279
 8008244:	0800828f 	.word	0x0800828f
 8008248:	080082a5 	.word	0x080082a5
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 800824c:	69fb      	ldr	r3, [r7, #28]
 800824e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008252:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008258:	005b      	lsls	r3, r3, #1
 800825a:	69fa      	ldr	r2, [r7, #28]
 800825c:	4313      	orrs	r3, r2
 800825e:	61fb      	str	r3, [r7, #28]
      break;
 8008260:	e02c      	b.n	80082bc <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8008262:	69fb      	ldr	r3, [r7, #28]
 8008264:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008268:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800826e:	009b      	lsls	r3, r3, #2
 8008270:	69fa      	ldr	r2, [r7, #28]
 8008272:	4313      	orrs	r3, r2
 8008274:	61fb      	str	r3, [r7, #28]
      break;
 8008276:	e021      	b.n	80082bc <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8008278:	69fb      	ldr	r3, [r7, #28]
 800827a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800827e:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008284:	00db      	lsls	r3, r3, #3
 8008286:	69fa      	ldr	r2, [r7, #28]
 8008288:	4313      	orrs	r3, r2
 800828a:	61fb      	str	r3, [r7, #28]
      break;
 800828c:	e016      	b.n	80082bc <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 800828e:	69fb      	ldr	r3, [r7, #28]
 8008290:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008294:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800829a:	011b      	lsls	r3, r3, #4
 800829c:	69fa      	ldr	r2, [r7, #28]
 800829e:	4313      	orrs	r3, r2
 80082a0:	61fb      	str	r3, [r7, #28]
      break;
 80082a2:	e00b      	b.n	80082bc <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 80082a4:	69fb      	ldr	r3, [r7, #28]
 80082a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80082aa:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082b0:	015b      	lsls	r3, r3, #5
 80082b2:	69fa      	ldr	r2, [r7, #28]
 80082b4:	4313      	orrs	r3, r2
 80082b6:	61fb      	str	r3, [r7, #28]
      break;
 80082b8:	e000      	b.n	80082bc <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  default:
    break;
 80082ba:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681a      	ldr	r2, [r3, #0]
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	3301      	adds	r3, #1
 80082c4:	01db      	lsls	r3, r3, #7
 80082c6:	4413      	add	r3, r2
 80082c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082ca:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681a      	ldr	r2, [r3, #0]
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	01db      	lsls	r3, r3, #7
 80082d4:	4413      	add	r3, r2
 80082d6:	33e8      	adds	r3, #232	; 0xe8
 80082d8:	69ba      	ldr	r2, [r7, #24]
 80082da:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681a      	ldr	r2, [r3, #0]
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	01db      	lsls	r3, r3, #7
 80082e4:	4413      	add	r3, r2
 80082e6:	33e4      	adds	r3, #228	; 0xe4
 80082e8:	6a3a      	ldr	r2, [r7, #32]
 80082ea:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681a      	ldr	r2, [r3, #0]
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	01db      	lsls	r3, r3, #7
 80082f4:	4413      	add	r3, r2
 80082f6:	33d4      	adds	r3, #212	; 0xd4
 80082f8:	697a      	ldr	r2, [r7, #20]
 80082fa:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	69fa      	ldr	r2, [r7, #28]
 8008302:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8008306:	bf00      	nop
 8008308:	372c      	adds	r7, #44	; 0x2c
 800830a:	46bd      	mov	sp, r7
 800830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008310:	4770      	bx	lr
 8008312:	bf00      	nop

08008314 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8008314:	b480      	push	{r7}
 8008316:	b089      	sub	sp, #36	; 0x24
 8008318:	af00      	add	r7, sp, #0
 800831a:	60f8      	str	r0, [r7, #12]
 800831c:	60b9      	str	r1, [r7, #8]
 800831e:	607a      	str	r2, [r7, #4]
 8008320:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8008322:	2300      	movs	r3, #0
 8008324:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	01db      	lsls	r3, r3, #7
 800832e:	4413      	add	r3, r2
 8008330:	33e4      	adds	r3, #228	; 0xe4
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681a      	ldr	r2, [r3, #0]
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	01db      	lsls	r3, r3, #7
 800833e:	4413      	add	r3, r2
 8008340:	33b8      	adds	r3, #184	; 0xb8
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	617b      	str	r3, [r7, #20]

  switch (Output)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800834c:	d04d      	beq.n	80083ea <HRTIM_OutputConfig+0xd6>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008354:	d85e      	bhi.n	8008414 <HRTIM_OutputConfig+0x100>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800835c:	d032      	beq.n	80083c4 <HRTIM_OutputConfig+0xb0>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008364:	d856      	bhi.n	8008414 <HRTIM_OutputConfig+0x100>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2b80      	cmp	r3, #128	; 0x80
 800836a:	d03e      	beq.n	80083ea <HRTIM_OutputConfig+0xd6>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2b80      	cmp	r3, #128	; 0x80
 8008370:	d850      	bhi.n	8008414 <HRTIM_OutputConfig+0x100>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2b40      	cmp	r3, #64	; 0x40
 8008376:	d025      	beq.n	80083c4 <HRTIM_OutputConfig+0xb0>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2b40      	cmp	r3, #64	; 0x40
 800837c:	d84a      	bhi.n	8008414 <HRTIM_OutputConfig+0x100>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2b01      	cmp	r3, #1
 8008382:	d01f      	beq.n	80083c4 <HRTIM_OutputConfig+0xb0>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d044      	beq.n	8008414 <HRTIM_OutputConfig+0x100>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2b20      	cmp	r3, #32
 800838e:	d841      	bhi.n	8008414 <HRTIM_OutputConfig+0x100>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2b02      	cmp	r3, #2
 8008394:	d33e      	bcc.n	8008414 <HRTIM_OutputConfig+0x100>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	3b02      	subs	r3, #2
 800839a:	2201      	movs	r2, #1
 800839c:	409a      	lsls	r2, r3
 800839e:	4b48      	ldr	r3, [pc, #288]	; (80084c0 <HRTIM_OutputConfig+0x1ac>)
 80083a0:	4013      	ands	r3, r2
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	bf14      	ite	ne
 80083a6:	2301      	movne	r3, #1
 80083a8:	2300      	moveq	r3, #0
 80083aa:	b2db      	uxtb	r3, r3
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d11c      	bne.n	80083ea <HRTIM_OutputConfig+0xd6>
 80083b0:	f244 0304 	movw	r3, #16388	; 0x4004
 80083b4:	4013      	ands	r3, r2
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	bf14      	ite	ne
 80083ba:	2301      	movne	r3, #1
 80083bc:	2300      	moveq	r3, #0
 80083be:	b2db      	uxtb	r3, r3
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d027      	beq.n	8008414 <HRTIM_OutputConfig+0x100>
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	6819      	ldr	r1, [r3, #0]
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	685a      	ldr	r2, [r3, #4]
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	01db      	lsls	r3, r3, #7
 80083d0:	440b      	add	r3, r1
 80083d2:	33bc      	adds	r3, #188	; 0xbc
 80083d4:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	6819      	ldr	r1, [r3, #0]
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	689a      	ldr	r2, [r3, #8]
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	01db      	lsls	r3, r3, #7
 80083e2:	440b      	add	r3, r1
 80083e4:	33c0      	adds	r3, #192	; 0xc0
 80083e6:	601a      	str	r2, [r3, #0]
      break;
 80083e8:	e015      	b.n	8008416 <HRTIM_OutputConfig+0x102>
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	6819      	ldr	r1, [r3, #0]
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	685a      	ldr	r2, [r3, #4]
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	01db      	lsls	r3, r3, #7
 80083f6:	440b      	add	r3, r1
 80083f8:	33c4      	adds	r3, #196	; 0xc4
 80083fa:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	6819      	ldr	r1, [r3, #0]
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	689a      	ldr	r2, [r3, #8]
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	01db      	lsls	r3, r3, #7
 8008408:	440b      	add	r3, r1
 800840a:	33c8      	adds	r3, #200	; 0xc8
 800840c:	601a      	str	r2, [r3, #0]
      shift = 16U;
 800840e:	2310      	movs	r3, #16
 8008410:	61bb      	str	r3, [r7, #24]
      break;
 8008412:	e000      	b.n	8008416 <HRTIM_OutputConfig+0x102>
    }

  default:
    break;
 8008414:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 8008416:	22fe      	movs	r2, #254	; 0xfe
 8008418:	69bb      	ldr	r3, [r7, #24]
 800841a:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 800841e:	43db      	mvns	r3, r3
 8008420:	69fa      	ldr	r2, [r7, #28]
 8008422:	4013      	ands	r3, r2
 8008424:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	681a      	ldr	r2, [r3, #0]
 800842a:	69bb      	ldr	r3, [r7, #24]
 800842c:	fa02 f303 	lsl.w	r3, r2, r3
 8008430:	69fa      	ldr	r2, [r7, #28]
 8008432:	4313      	orrs	r3, r2
 8008434:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	68da      	ldr	r2, [r3, #12]
 800843a:	69bb      	ldr	r3, [r7, #24]
 800843c:	fa02 f303 	lsl.w	r3, r2, r3
 8008440:	69fa      	ldr	r2, [r7, #28]
 8008442:	4313      	orrs	r3, r2
 8008444:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	691a      	ldr	r2, [r3, #16]
 800844a:	69bb      	ldr	r3, [r7, #24]
 800844c:	fa02 f303 	lsl.w	r3, r2, r3
 8008450:	69fa      	ldr	r2, [r7, #28]
 8008452:	4313      	orrs	r3, r2
 8008454:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	695a      	ldr	r2, [r3, #20]
 800845a:	69bb      	ldr	r3, [r7, #24]
 800845c:	fa02 f303 	lsl.w	r3, r2, r3
 8008460:	69fa      	ldr	r2, [r7, #28]
 8008462:	4313      	orrs	r3, r2
 8008464:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	699a      	ldr	r2, [r3, #24]
 800846a:	69bb      	ldr	r3, [r7, #24]
 800846c:	fa02 f303 	lsl.w	r3, r2, r3
 8008470:	69fa      	ldr	r2, [r7, #28]
 8008472:	4313      	orrs	r3, r2
 8008474:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	691b      	ldr	r3, [r3, #16]
 800847a:	2b08      	cmp	r3, #8
 800847c:	d111      	bne.n	80084a2 <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8008484:	2b00      	cmp	r3, #0
 8008486:	d10c      	bne.n	80084a2 <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 800848e:	2b00      	cmp	r3, #0
 8008490:	d107      	bne.n	80084a2 <HRTIM_OutputConfig+0x18e>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	69da      	ldr	r2, [r3, #28]
 8008496:	69bb      	ldr	r3, [r7, #24]
 8008498:	fa02 f303 	lsl.w	r3, r2, r3
 800849c:	69fa      	ldr	r2, [r7, #28]
 800849e:	4313      	orrs	r3, r2
 80084a0:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	01db      	lsls	r3, r3, #7
 80084aa:	4413      	add	r3, r2
 80084ac:	33e4      	adds	r3, #228	; 0xe4
 80084ae:	69fa      	ldr	r2, [r7, #28]
 80084b0:	601a      	str	r2, [r3, #0]
}
 80084b2:	bf00      	nop
 80084b4:	3724      	adds	r7, #36	; 0x24
 80084b6:	46bd      	mov	sp, r7
 80084b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084bc:	4770      	bx	lr
 80084be:	bf00      	nop
 80084c0:	40000041 	.word	0x40000041

080084c4 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b083      	sub	sp, #12
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
 80084cc:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	2b05      	cmp	r3, #5
 80084d2:	d851      	bhi.n	8008578 <HRTIM_ForceRegistersUpdate+0xb4>
 80084d4:	a201      	add	r2, pc, #4	; (adr r2, 80084dc <HRTIM_ForceRegistersUpdate+0x18>)
 80084d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084da:	bf00      	nop
 80084dc:	0800850b 	.word	0x0800850b
 80084e0:	08008521 	.word	0x08008521
 80084e4:	08008537 	.word	0x08008537
 80084e8:	0800854d 	.word	0x0800854d
 80084ec:	08008563 	.word	0x08008563
 80084f0:	080084f5 	.word	0x080084f5
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f042 0201 	orr.w	r2, r2, #1
 8008504:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8008508:	e037      	b.n	800857a <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f042 0202 	orr.w	r2, r2, #2
 800851a:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800851e:	e02c      	b.n	800857a <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f042 0204 	orr.w	r2, r2, #4
 8008530:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8008534:	e021      	b.n	800857a <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f042 0208 	orr.w	r2, r2, #8
 8008546:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800854a:	e016      	b.n	800857a <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f042 0210 	orr.w	r2, r2, #16
 800855c:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8008560:	e00b      	b.n	800857a <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f042 0220 	orr.w	r2, r2, #32
 8008572:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8008576:	e000      	b.n	800857a <HRTIM_ForceRegistersUpdate+0xb6>
    }

  default:
    break;
 8008578:	bf00      	nop
  }
}
 800857a:	bf00      	nop
 800857c:	370c      	adds	r7, #12
 800857e:	46bd      	mov	sp, r7
 8008580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008584:	4770      	bx	lr
 8008586:	bf00      	nop

08008588 <HRTIM_HRTIM_ISR>:
  * @brief  HRTIM interrupts service routine
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
static void HRTIM_HRTIM_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b084      	sub	sp, #16
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8008598:	60fb      	str	r3, [r7, #12]
  uint32_t ierits   = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 80085a2:	60bb      	str	r3, [r7, #8]

  /* Fault 1 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT1) != (uint32_t)RESET)
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f003 0301 	and.w	r3, r3, #1
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d00c      	beq.n	80085c8 <HRTIM_HRTIM_ISR+0x40>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT1) != (uint32_t)RESET)
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	f003 0301 	and.w	r3, r3, #1
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d007      	beq.n	80085c8 <HRTIM_HRTIM_ISR+0x40>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT1);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	2201      	movs	r2, #1
 80085be:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault1Callback(hhrtim);
#else
      HAL_HRTIM_Fault1Callback(hhrtim);
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f7ff fbc7 	bl	8007d56 <HAL_HRTIM_Fault1Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 2 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT2) != (uint32_t)RESET)
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f003 0302 	and.w	r3, r3, #2
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d00c      	beq.n	80085ec <HRTIM_HRTIM_ISR+0x64>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT2) != (uint32_t)RESET)
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	f003 0302 	and.w	r3, r3, #2
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d007      	beq.n	80085ec <HRTIM_HRTIM_ISR+0x64>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT2);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	2202      	movs	r2, #2
 80085e2:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault2Callback(hhrtim);
#else
      HAL_HRTIM_Fault2Callback(hhrtim);
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f7ff fbbf 	bl	8007d6a <HAL_HRTIM_Fault2Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 3 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT3) != (uint32_t)RESET)
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	f003 0304 	and.w	r3, r3, #4
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d00c      	beq.n	8008610 <HRTIM_HRTIM_ISR+0x88>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT3) != (uint32_t)RESET)
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	f003 0304 	and.w	r3, r3, #4
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d007      	beq.n	8008610 <HRTIM_HRTIM_ISR+0x88>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT3);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	2204      	movs	r2, #4
 8008606:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault3Callback(hhrtim);
#else
      HAL_HRTIM_Fault3Callback(hhrtim);
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f7ff fbb7 	bl	8007d7e <HAL_HRTIM_Fault3Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 4 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT4) != (uint32_t)RESET)
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f003 0308 	and.w	r3, r3, #8
 8008616:	2b00      	cmp	r3, #0
 8008618:	d00c      	beq.n	8008634 <HRTIM_HRTIM_ISR+0xac>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT4) != (uint32_t)RESET)
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	f003 0308 	and.w	r3, r3, #8
 8008620:	2b00      	cmp	r3, #0
 8008622:	d007      	beq.n	8008634 <HRTIM_HRTIM_ISR+0xac>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT4);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	2208      	movs	r2, #8
 800862a:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault4Callback(hhrtim);
#else
      HAL_HRTIM_Fault4Callback(hhrtim);
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f7ff fbaf 	bl	8007d92 <HAL_HRTIM_Fault4Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 5 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT5) != (uint32_t)RESET)
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f003 0310 	and.w	r3, r3, #16
 800863a:	2b00      	cmp	r3, #0
 800863c:	d00c      	beq.n	8008658 <HRTIM_HRTIM_ISR+0xd0>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT5) != (uint32_t)RESET)
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	f003 0310 	and.w	r3, r3, #16
 8008644:	2b00      	cmp	r3, #0
 8008646:	d007      	beq.n	8008658 <HRTIM_HRTIM_ISR+0xd0>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT5);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	2210      	movs	r2, #16
 800864e:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 5 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault5Callback(hhrtim);
#else
      HAL_HRTIM_Fault5Callback(hhrtim);
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f7ff fba7 	bl	8007da6 <HAL_HRTIM_Fault5Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* System fault event */
  if((uint32_t)(isrflags & HRTIM_FLAG_SYSFLT) != (uint32_t)RESET)
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f003 0320 	and.w	r3, r3, #32
 800865e:	2b00      	cmp	r3, #0
 8008660:	d00c      	beq.n	800867c <HRTIM_HRTIM_ISR+0xf4>
  {
    if((uint32_t)(ierits & HRTIM_IT_SYSFLT) != (uint32_t)RESET)
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	f003 0320 	and.w	r3, r3, #32
 8008668:	2b00      	cmp	r3, #0
 800866a:	d007      	beq.n	800867c <HRTIM_HRTIM_ISR+0xf4>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_SYSFLT);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	2220      	movs	r2, #32
 8008672:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SystemFaultCallback(hhrtim);
#else
      HAL_HRTIM_SystemFaultCallback(hhrtim);
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f7ff fb9f 	bl	8007dba <HAL_HRTIM_SystemFaultCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 800867c:	bf00      	nop
 800867e:	3710      	adds	r7, #16
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <HRTIM_Master_ISR>:
* @brief  Master timer interrupts service routine
* @param  hhrtim pointer to HAL HRTIM handle
* @retval None
*/
static void HRTIM_Master_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b086      	sub	sp, #24
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8008694:	617b      	str	r3, [r7, #20]
  uint32_t ierits    = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 800869e:	613b      	str	r3, [r7, #16]
  uint32_t misrflags = READ_REG(hhrtim->Instance->sMasterRegs.MISR);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	685b      	ldr	r3, [r3, #4]
 80086a6:	60fb      	str	r3, [r7, #12]
  uint32_t mdierits  = READ_REG(hhrtim->Instance->sMasterRegs.MDIER);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	68db      	ldr	r3, [r3, #12]
 80086ae:	60bb      	str	r3, [r7, #8]

  /* Burst mode period event */
  if((uint32_t)(isrflags & HRTIM_FLAG_BMPER) != (uint32_t)RESET)
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d00d      	beq.n	80086d6 <HRTIM_Master_ISR+0x52>
  {
    if((uint32_t)(ierits & HRTIM_IT_BMPER) != (uint32_t)RESET)
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d008      	beq.n	80086d6 <HRTIM_Master_ISR+0x52>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_BMPER);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80086cc:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Burst mode period event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->BurstModePeriodCallback(hhrtim);
#else
      HAL_HRTIM_BurstModePeriodCallback(hhrtim);
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f7ff fb7c 	bl	8007dce <HAL_HRTIM_BurstModePeriodCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 1 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP1) != (uint32_t)RESET)
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	f003 0301 	and.w	r3, r3, #1
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d00c      	beq.n	80086fa <HRTIM_Master_ISR+0x76>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP1) != (uint32_t)RESET)
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	f003 0301 	and.w	r3, r3, #1
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d007      	beq.n	80086fa <HRTIM_Master_ISR+0x76>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP1);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	2201      	movs	r2, #1
 80086f0:	609a      	str	r2, [r3, #8]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80086f2:	2105      	movs	r1, #5
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f7ff fb89 	bl	8007e0c <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 2 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP2) != (uint32_t)RESET)
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f003 0302 	and.w	r3, r3, #2
 8008700:	2b00      	cmp	r3, #0
 8008702:	d00c      	beq.n	800871e <HRTIM_Master_ISR+0x9a>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP2) != (uint32_t)RESET)
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	f003 0302 	and.w	r3, r3, #2
 800870a:	2b00      	cmp	r3, #0
 800870c:	d007      	beq.n	800871e <HRTIM_Master_ISR+0x9a>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP2);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	2202      	movs	r2, #2
 8008714:	609a      	str	r2, [r3, #8]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8008716:	2105      	movs	r1, #5
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f7fa fe41 	bl	80033a0 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 3 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP3) != (uint32_t)RESET)
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	f003 0304 	and.w	r3, r3, #4
 8008724:	2b00      	cmp	r3, #0
 8008726:	d00c      	beq.n	8008742 <HRTIM_Master_ISR+0xbe>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP3) != (uint32_t)RESET)
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	f003 0304 	and.w	r3, r3, #4
 800872e:	2b00      	cmp	r3, #0
 8008730:	d007      	beq.n	8008742 <HRTIM_Master_ISR+0xbe>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP3);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	2204      	movs	r2, #4
 8008738:	609a      	str	r2, [r3, #8]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800873a:	2105      	movs	r1, #5
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f7fa fe3b 	bl	80033b8 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 4 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP4) != (uint32_t)RESET)
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	f003 0308 	and.w	r3, r3, #8
 8008748:	2b00      	cmp	r3, #0
 800874a:	d00c      	beq.n	8008766 <HRTIM_Master_ISR+0xe2>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP4) != (uint32_t)RESET)
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	f003 0308 	and.w	r3, r3, #8
 8008752:	2b00      	cmp	r3, #0
 8008754:	d007      	beq.n	8008766 <HRTIM_Master_ISR+0xe2>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP4);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	2208      	movs	r2, #8
 800875c:	609a      	str	r2, [r3, #8]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800875e:	2105      	movs	r1, #5
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f7ff fb5e 	bl	8007e22 <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer repetition event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MREP) != (uint32_t)RESET)
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	f003 0310 	and.w	r3, r3, #16
 800876c:	2b00      	cmp	r3, #0
 800876e:	d00c      	beq.n	800878a <HRTIM_Master_ISR+0x106>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MREP) != (uint32_t)RESET)
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	f003 0310 	and.w	r3, r3, #16
 8008776:	2b00      	cmp	r3, #0
 8008778:	d007      	beq.n	800878a <HRTIM_Master_ISR+0x106>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MREP);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	2210      	movs	r2, #16
 8008780:	609a      	str	r2, [r3, #8]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8008782:	2105      	movs	r1, #5
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f7fa fe8b 	bl	80034a0 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Synchronization input event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_SYNC) != (uint32_t)RESET)
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	f003 0320 	and.w	r3, r3, #32
 8008790:	2b00      	cmp	r3, #0
 8008792:	d00b      	beq.n	80087ac <HRTIM_Master_ISR+0x128>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_SYNC) != (uint32_t)RESET)
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	f003 0320 	and.w	r3, r3, #32
 800879a:	2b00      	cmp	r3, #0
 800879c:	d006      	beq.n	80087ac <HRTIM_Master_ISR+0x128>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_SYNC);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	2220      	movs	r2, #32
 80087a4:	609a      	str	r2, [r3, #8]

      /* Invoke synchronization event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SynchronizationEventCallback(hhrtim);
#else
      HAL_HRTIM_SynchronizationEventCallback(hhrtim);
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f7ff fb1b 	bl	8007de2 <HAL_HRTIM_SynchronizationEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer registers update event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MUPD) != (uint32_t)RESET)
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d00c      	beq.n	80087d0 <HRTIM_Master_ISR+0x14c>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MUPD) != (uint32_t)RESET)
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d007      	beq.n	80087d0 <HRTIM_Master_ISR+0x14c>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MUPD);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	2240      	movs	r2, #64	; 0x40
 80087c6:	609a      	str	r2, [r3, #8]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80087c8:	2105      	movs	r1, #5
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f7ff fb13 	bl	8007df6 <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 80087d0:	bf00      	nop
 80087d2:	3718      	adds	r7, #24
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}

080087d8 <HRTIM_Timer_ISR>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
*/
static void HRTIM_Timer_ISR(HRTIM_HandleTypeDef * hhrtim,
                     uint32_t TimerIdx)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b084      	sub	sp, #16
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
 80087e0:	6039      	str	r1, [r7, #0]
  uint32_t tisrflags = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxISR);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681a      	ldr	r2, [r3, #0]
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	3301      	adds	r3, #1
 80087ea:	01db      	lsls	r3, r3, #7
 80087ec:	4413      	add	r3, r2
 80087ee:	3304      	adds	r3, #4
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	60fb      	str	r3, [r7, #12]
  uint32_t tdierits  = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxDIER);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681a      	ldr	r2, [r3, #0]
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	01db      	lsls	r3, r3, #7
 80087fc:	4413      	add	r3, r2
 80087fe:	338c      	adds	r3, #140	; 0x8c
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	60bb      	str	r3, [r7, #8]

  /* Timer compare 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP1) != (uint32_t)RESET)
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f003 0301 	and.w	r3, r3, #1
 800880a:	2b00      	cmp	r3, #0
 800880c:	d010      	beq.n	8008830 <HRTIM_Timer_ISR+0x58>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP1) != (uint32_t)RESET)
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	f003 0301 	and.w	r3, r3, #1
 8008814:	2b00      	cmp	r3, #0
 8008816:	d00b      	beq.n	8008830 <HRTIM_Timer_ISR+0x58>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP1);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681a      	ldr	r2, [r3, #0]
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	01db      	lsls	r3, r3, #7
 8008820:	4413      	add	r3, r2
 8008822:	3388      	adds	r3, #136	; 0x88
 8008824:	2201      	movs	r2, #1
 8008826:	601a      	str	r2, [r3, #0]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, TimerIdx);
 8008828:	6839      	ldr	r1, [r7, #0]
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f7ff faee 	bl	8007e0c <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP2) != (uint32_t)RESET)
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	f003 0302 	and.w	r3, r3, #2
 8008836:	2b00      	cmp	r3, #0
 8008838:	d010      	beq.n	800885c <HRTIM_Timer_ISR+0x84>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP2) != (uint32_t)RESET)
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	f003 0302 	and.w	r3, r3, #2
 8008840:	2b00      	cmp	r3, #0
 8008842:	d00b      	beq.n	800885c <HRTIM_Timer_ISR+0x84>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP2);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681a      	ldr	r2, [r3, #0]
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	01db      	lsls	r3, r3, #7
 800884c:	4413      	add	r3, r2
 800884e:	3388      	adds	r3, #136	; 0x88
 8008850:	2202      	movs	r2, #2
 8008852:	601a      	str	r2, [r3, #0]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, TimerIdx);
 8008854:	6839      	ldr	r1, [r7, #0]
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f7fa fda2 	bl	80033a0 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 3 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP3) != (uint32_t)RESET)
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	f003 0304 	and.w	r3, r3, #4
 8008862:	2b00      	cmp	r3, #0
 8008864:	d010      	beq.n	8008888 <HRTIM_Timer_ISR+0xb0>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP3) != (uint32_t)RESET)
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	f003 0304 	and.w	r3, r3, #4
 800886c:	2b00      	cmp	r3, #0
 800886e:	d00b      	beq.n	8008888 <HRTIM_Timer_ISR+0xb0>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP3);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681a      	ldr	r2, [r3, #0]
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	01db      	lsls	r3, r3, #7
 8008878:	4413      	add	r3, r2
 800887a:	3388      	adds	r3, #136	; 0x88
 800887c:	2204      	movs	r2, #4
 800887e:	601a      	str	r2, [r3, #0]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, TimerIdx);
 8008880:	6839      	ldr	r1, [r7, #0]
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f7fa fd98 	bl	80033b8 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 4 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP4) != (uint32_t)RESET)
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	f003 0308 	and.w	r3, r3, #8
 800888e:	2b00      	cmp	r3, #0
 8008890:	d010      	beq.n	80088b4 <HRTIM_Timer_ISR+0xdc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP4) != (uint32_t)RESET)
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	f003 0308 	and.w	r3, r3, #8
 8008898:	2b00      	cmp	r3, #0
 800889a:	d00b      	beq.n	80088b4 <HRTIM_Timer_ISR+0xdc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP4);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681a      	ldr	r2, [r3, #0]
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	01db      	lsls	r3, r3, #7
 80088a4:	4413      	add	r3, r2
 80088a6:	3388      	adds	r3, #136	; 0x88
 80088a8:	2208      	movs	r2, #8
 80088aa:	601a      	str	r2, [r3, #0]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, TimerIdx);
 80088ac:	6839      	ldr	r1, [r7, #0]
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f7ff fab7 	bl	8007e22 <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer repetition event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_REP) != (uint32_t)RESET)
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f003 0310 	and.w	r3, r3, #16
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d010      	beq.n	80088e0 <HRTIM_Timer_ISR+0x108>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_REP) != (uint32_t)RESET)
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	f003 0310 	and.w	r3, r3, #16
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d00b      	beq.n	80088e0 <HRTIM_Timer_ISR+0x108>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_REP);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681a      	ldr	r2, [r3, #0]
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	01db      	lsls	r3, r3, #7
 80088d0:	4413      	add	r3, r2
 80088d2:	3388      	adds	r3, #136	; 0x88
 80088d4:	2210      	movs	r2, #16
 80088d6:	601a      	str	r2, [r3, #0]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, TimerIdx);
 80088d8:	6839      	ldr	r1, [r7, #0]
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f7fa fde0 	bl	80034a0 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer registers update event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_UPD) != (uint32_t)RESET)
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d010      	beq.n	800890c <HRTIM_Timer_ISR+0x134>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_UPD) != (uint32_t)RESET)
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d00b      	beq.n	800890c <HRTIM_Timer_ISR+0x134>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_UPD);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681a      	ldr	r2, [r3, #0]
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	01db      	lsls	r3, r3, #7
 80088fc:	4413      	add	r3, r2
 80088fe:	3388      	adds	r3, #136	; 0x88
 8008900:	2240      	movs	r2, #64	; 0x40
 8008902:	601a      	str	r2, [r3, #0]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, TimerIdx);
 8008904:	6839      	ldr	r1, [r7, #0]
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f7ff fa75 	bl	8007df6 <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT1) != (uint32_t)RESET)
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008912:	2b00      	cmp	r3, #0
 8008914:	d010      	beq.n	8008938 <HRTIM_Timer_ISR+0x160>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT1) != (uint32_t)RESET)
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800891c:	2b00      	cmp	r3, #0
 800891e:	d00b      	beq.n	8008938 <HRTIM_Timer_ISR+0x160>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT1);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681a      	ldr	r2, [r3, #0]
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	01db      	lsls	r3, r3, #7
 8008928:	4413      	add	r3, r2
 800892a:	3388      	adds	r3, #136	; 0x88
 800892c:	2280      	movs	r2, #128	; 0x80
 800892e:	601a      	str	r2, [r3, #0]

      /* Invoke capture 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture1EventCallback(hhrtim, TimerIdx);
 8008930:	6839      	ldr	r1, [r7, #0]
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f7ff fa80 	bl	8007e38 <HAL_HRTIM_Capture1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT2) != (uint32_t)RESET)
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800893e:	2b00      	cmp	r3, #0
 8008940:	d011      	beq.n	8008966 <HRTIM_Timer_ISR+0x18e>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT2) != (uint32_t)RESET)
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008948:	2b00      	cmp	r3, #0
 800894a:	d00c      	beq.n	8008966 <HRTIM_Timer_ISR+0x18e>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT2);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681a      	ldr	r2, [r3, #0]
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	01db      	lsls	r3, r3, #7
 8008954:	4413      	add	r3, r2
 8008956:	3388      	adds	r3, #136	; 0x88
 8008958:	f44f 7280 	mov.w	r2, #256	; 0x100
 800895c:	601a      	str	r2, [r3, #0]

      /* Invoke capture 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture2EventCallback(hhrtim, TimerIdx);
 800895e:	6839      	ldr	r1, [r7, #0]
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f7ff fa74 	bl	8007e4e <HAL_HRTIM_Capture2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET1) != (uint32_t)RESET)
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800896c:	2b00      	cmp	r3, #0
 800896e:	d011      	beq.n	8008994 <HRTIM_Timer_ISR+0x1bc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET1) != (uint32_t)RESET)
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008976:	2b00      	cmp	r3, #0
 8008978:	d00c      	beq.n	8008994 <HRTIM_Timer_ISR+0x1bc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET1);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681a      	ldr	r2, [r3, #0]
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	01db      	lsls	r3, r3, #7
 8008982:	4413      	add	r3, r2
 8008984:	3388      	adds	r3, #136	; 0x88
 8008986:	f44f 7200 	mov.w	r2, #512	; 0x200
 800898a:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1SetCallback(hhrtim, TimerIdx);
 800898c:	6839      	ldr	r1, [r7, #0]
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f7ff fa7e 	bl	8007e90 <HAL_HRTIM_Output1SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST1) != (uint32_t)RESET)
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800899a:	2b00      	cmp	r3, #0
 800899c:	d011      	beq.n	80089c2 <HRTIM_Timer_ISR+0x1ea>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST1) != (uint32_t)RESET)
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d00c      	beq.n	80089c2 <HRTIM_Timer_ISR+0x1ea>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST1);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681a      	ldr	r2, [r3, #0]
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	01db      	lsls	r3, r3, #7
 80089b0:	4413      	add	r3, r2
 80089b2:	3388      	adds	r3, #136	; 0x88
 80089b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80089b8:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1ResetCallback(hhrtim, TimerIdx);
 80089ba:	6839      	ldr	r1, [r7, #0]
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f7ff fa72 	bl	8007ea6 <HAL_HRTIM_Output1ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET2) != (uint32_t)RESET)
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d011      	beq.n	80089f0 <HRTIM_Timer_ISR+0x218>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET2) != (uint32_t)RESET)
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d00c      	beq.n	80089f0 <HRTIM_Timer_ISR+0x218>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET2);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681a      	ldr	r2, [r3, #0]
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	01db      	lsls	r3, r3, #7
 80089de:	4413      	add	r3, r2
 80089e0:	3388      	adds	r3, #136	; 0x88
 80089e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80089e6:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2SetCallback(hhrtim, TimerIdx);
 80089e8:	6839      	ldr	r1, [r7, #0]
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f7ff fa66 	bl	8007ebc <HAL_HRTIM_Output2SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST2) != (uint32_t)RESET)
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d011      	beq.n	8008a1e <HRTIM_Timer_ISR+0x246>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST2) != (uint32_t)RESET)
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d00c      	beq.n	8008a1e <HRTIM_Timer_ISR+0x246>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST2);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681a      	ldr	r2, [r3, #0]
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	01db      	lsls	r3, r3, #7
 8008a0c:	4413      	add	r3, r2
 8008a0e:	3388      	adds	r3, #136	; 0x88
 8008a10:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008a14:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2ResetCallback(hhrtim, TimerIdx);
 8008a16:	6839      	ldr	r1, [r7, #0]
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f7ff fa5a 	bl	8007ed2 <HAL_HRTIM_Output2ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST) != (uint32_t)RESET)
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d011      	beq.n	8008a4c <HRTIM_Timer_ISR+0x274>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST) != (uint32_t)RESET)
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d00c      	beq.n	8008a4c <HRTIM_Timer_ISR+0x274>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681a      	ldr	r2, [r3, #0]
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	01db      	lsls	r3, r3, #7
 8008a3a:	4413      	add	r3, r2
 8008a3c:	3388      	adds	r3, #136	; 0x88
 8008a3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008a42:	601a      	str	r2, [r3, #0]

      /* Invoke timer reset callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->CounterResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_CounterResetCallback(hhrtim, TimerIdx);
 8008a44:	6839      	ldr	r1, [r7, #0]
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f7ff fa17 	bl	8007e7a <HAL_HRTIM_CounterResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Delayed protection event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_DLYPRT) != (uint32_t)RESET)
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d011      	beq.n	8008a7a <HRTIM_Timer_ISR+0x2a2>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_DLYPRT) != (uint32_t)RESET)
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d00c      	beq.n	8008a7a <HRTIM_Timer_ISR+0x2a2>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_DLYPRT);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681a      	ldr	r2, [r3, #0]
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	01db      	lsls	r3, r3, #7
 8008a68:	4413      	add	r3, r2
 8008a6a:	3388      	adds	r3, #136	; 0x88
 8008a6c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008a70:	601a      	str	r2, [r3, #0]

      /* Invoke delayed protection callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DelayedProtectionCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_DelayedProtectionCallback(hhrtim, TimerIdx);
 8008a72:	6839      	ldr	r1, [r7, #0]
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f7ff f9f5 	bl	8007e64 <HAL_HRTIM_DelayedProtectionCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8008a7a:	bf00      	nop
 8008a7c:	3710      	adds	r7, #16
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
	...

08008a84 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b084      	sub	sp, #16
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d101      	bne.n	8008a96 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8008a92:	2301      	movs	r3, #1
 8008a94:	e097      	b.n	8008bc6 <HAL_LPTIM_Init+0x142>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d106      	bne.n	8008ab6 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f7fa f997 	bl	8002de4 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2202      	movs	r2, #2
 8008aba:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	68db      	ldr	r3, [r3, #12]
 8008ac4:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	d004      	beq.n	8008ad8 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ad2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008ad6:	d103      	bne.n	8008ae0 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	f023 031e 	bic.w	r3, r3, #30
 8008ade:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	695b      	ldr	r3, [r3, #20]
 8008ae4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d003      	beq.n	8008af4 <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8008aec:	68fa      	ldr	r2, [r7, #12]
 8008aee:	4b38      	ldr	r3, [pc, #224]	; (8008bd0 <HAL_LPTIM_Init+0x14c>)
 8008af0:	4013      	ands	r3, r2
 8008af2:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8008af4:	68fa      	ldr	r2, [r7, #12]
 8008af6:	4b37      	ldr	r3, [pc, #220]	; (8008bd4 <HAL_LPTIM_Init+0x150>)
 8008af8:	4013      	ands	r3, r2
 8008afa:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8008b04:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8008b0a:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8008b10:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8008b16:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8008b18:	68fa      	ldr	r2, [r7, #12]
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	685b      	ldr	r3, [r3, #4]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d107      	bne.n	8008b36 <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	68fa      	ldr	r2, [r7, #12]
 8008b32:	4313      	orrs	r3, r2
 8008b34:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	685b      	ldr	r3, [r3, #4]
 8008b3a:	2b01      	cmp	r3, #1
 8008b3c:	d004      	beq.n	8008b48 <HAL_LPTIM_Init+0xc4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b42:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008b46:	d107      	bne.n	8008b58 <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8008b50:	4313      	orrs	r3, r2
 8008b52:	68fa      	ldr	r2, [r7, #12]
 8008b54:	4313      	orrs	r3, r2
 8008b56:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	695b      	ldr	r3, [r3, #20]
 8008b5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d00a      	beq.n	8008b7a <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8008b6c:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8008b72:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8008b74:	68fa      	ldr	r2, [r7, #12]
 8008b76:	4313      	orrs	r3, r2
 8008b78:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	68fa      	ldr	r2, [r7, #12]
 8008b80:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4a14      	ldr	r2, [pc, #80]	; (8008bd8 <HAL_LPTIM_Init+0x154>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d004      	beq.n	8008b96 <HAL_LPTIM_Init+0x112>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	4a12      	ldr	r2, [pc, #72]	; (8008bdc <HAL_LPTIM_Init+0x158>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d108      	bne.n	8008ba8 <HAL_LPTIM_Init+0x124>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	430a      	orrs	r2, r1
 8008ba4:	625a      	str	r2, [r3, #36]	; 0x24
 8008ba6:	e009      	b.n	8008bbc <HAL_LPTIM_Init+0x138>
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	4a0c      	ldr	r2, [pc, #48]	; (8008be0 <HAL_LPTIM_Init+0x15c>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d104      	bne.n	8008bbc <HAL_LPTIM_Init+0x138>
    {
      /* Check LPTIM3 Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM3 Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	687a      	ldr	r2, [r7, #4]
 8008bb8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008bba:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8008bc4:	2300      	movs	r3, #0
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3710      	adds	r7, #16
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}
 8008bce:	bf00      	nop
 8008bd0:	ffff1f3f 	.word	0xffff1f3f
 8008bd4:	ff19f1fe 	.word	0xff19f1fe
 8008bd8:	40002400 	.word	0x40002400
 8008bdc:	58002400 	.word	0x58002400
 8008be0:	58002800 	.word	0x58002800

08008be4 <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b082      	sub	sp, #8
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2202      	movs	r2, #2
 8008bf2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	2b01      	cmp	r3, #1
 8008bfc:	d00c      	beq.n	8008c18 <HAL_LPTIM_Counter_Start_IT+0x34>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c02:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008c06:	d107      	bne.n	8008c18 <HAL_LPTIM_Counter_Start_IT+0x34>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	68da      	ldr	r2, [r3, #12]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 8008c16:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	691a      	ldr	r2, [r3, #16]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f042 0201 	orr.w	r2, r2, #1
 8008c26:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	2210      	movs	r2, #16
 8008c2e:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	683a      	ldr	r2, [r7, #0]
 8008c36:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8008c38:	2110      	movs	r1, #16
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f000 f91e 	bl	8008e7c <LPTIM_WaitForFlag>
 8008c40:	4603      	mov	r3, r0
 8008c42:	2b03      	cmp	r3, #3
 8008c44:	d101      	bne.n	8008c4a <HAL_LPTIM_Counter_Start_IT+0x66>
  {
    return HAL_TIMEOUT;
 8008c46:	2303      	movs	r3, #3
 8008c48:	e02f      	b.n	8008caa <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f000 f946 	bl	8008edc <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f000 f905 	bl	8008e60 <HAL_LPTIM_GetState>
 8008c56:	4603      	mov	r3, r0
 8008c58:	2b03      	cmp	r3, #3
 8008c5a:	d101      	bne.n	8008c60 <HAL_LPTIM_Counter_Start_IT+0x7c>
  {
    return HAL_TIMEOUT;
 8008c5c:	2303      	movs	r3, #3
 8008c5e:	e024      	b.n	8008caa <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	689a      	ldr	r2, [r3, #8]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f042 0210 	orr.w	r2, r2, #16
 8008c6e:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	689a      	ldr	r2, [r3, #8]
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f042 0202 	orr.w	r2, r2, #2
 8008c7e:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	691a      	ldr	r2, [r3, #16]
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f042 0201 	orr.w	r2, r2, #1
 8008c8e:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	691a      	ldr	r2, [r3, #16]
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f042 0204 	orr.w	r2, r2, #4
 8008c9e:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8008ca8:	2300      	movs	r3, #0
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3708      	adds	r7, #8
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}

08008cb2 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8008cb2:	b580      	push	{r7, lr}
 8008cb4:	b082      	sub	sp, #8
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f003 0301 	and.w	r3, r3, #1
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	d10d      	bne.n	8008ce4 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	689b      	ldr	r3, [r3, #8]
 8008cce:	f003 0301 	and.w	r3, r3, #1
 8008cd2:	2b01      	cmp	r3, #1
 8008cd4:	d106      	bne.n	8008ce4 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	2201      	movs	r2, #1
 8008cdc:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f000 f882 	bl	8008de8 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f003 0302 	and.w	r3, r3, #2
 8008cee:	2b02      	cmp	r3, #2
 8008cf0:	d10d      	bne.n	8008d0e <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	689b      	ldr	r3, [r3, #8]
 8008cf8:	f003 0302 	and.w	r3, r3, #2
 8008cfc:	2b02      	cmp	r3, #2
 8008cfe:	d106      	bne.n	8008d0e <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	2202      	movs	r2, #2
 8008d06:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f7fa fb3b 	bl	8003384 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f003 0304 	and.w	r3, r3, #4
 8008d18:	2b04      	cmp	r3, #4
 8008d1a:	d10d      	bne.n	8008d38 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	689b      	ldr	r3, [r3, #8]
 8008d22:	f003 0304 	and.w	r3, r3, #4
 8008d26:	2b04      	cmp	r3, #4
 8008d28:	d106      	bne.n	8008d38 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	2204      	movs	r2, #4
 8008d30:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 f862 	bl	8008dfc <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f003 0308 	and.w	r3, r3, #8
 8008d42:	2b08      	cmp	r3, #8
 8008d44:	d10d      	bne.n	8008d62 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	689b      	ldr	r3, [r3, #8]
 8008d4c:	f003 0308 	and.w	r3, r3, #8
 8008d50:	2b08      	cmp	r3, #8
 8008d52:	d106      	bne.n	8008d62 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	2208      	movs	r2, #8
 8008d5a:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f000 f857 	bl	8008e10 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f003 0310 	and.w	r3, r3, #16
 8008d6c:	2b10      	cmp	r3, #16
 8008d6e:	d10d      	bne.n	8008d8c <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	689b      	ldr	r3, [r3, #8]
 8008d76:	f003 0310 	and.w	r3, r3, #16
 8008d7a:	2b10      	cmp	r3, #16
 8008d7c:	d106      	bne.n	8008d8c <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	2210      	movs	r2, #16
 8008d84:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 f84c 	bl	8008e24 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f003 0320 	and.w	r3, r3, #32
 8008d96:	2b20      	cmp	r3, #32
 8008d98:	d10d      	bne.n	8008db6 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	689b      	ldr	r3, [r3, #8]
 8008da0:	f003 0320 	and.w	r3, r3, #32
 8008da4:	2b20      	cmp	r3, #32
 8008da6:	d106      	bne.n	8008db6 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	2220      	movs	r2, #32
 8008dae:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f000 f841 	bl	8008e38 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dc0:	2b40      	cmp	r3, #64	; 0x40
 8008dc2:	d10d      	bne.n	8008de0 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	689b      	ldr	r3, [r3, #8]
 8008dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dce:	2b40      	cmp	r3, #64	; 0x40
 8008dd0:	d106      	bne.n	8008de0 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	2240      	movs	r2, #64	; 0x40
 8008dd8:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f000 f836 	bl	8008e4c <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8008de0:	bf00      	nop
 8008de2:	3708      	adds	r7, #8
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b083      	sub	sp, #12
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8008df0:	bf00      	nop
 8008df2:	370c      	adds	r7, #12
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr

08008dfc <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b083      	sub	sp, #12
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8008e04:	bf00      	nop
 8008e06:	370c      	adds	r7, #12
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr

08008e10 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b083      	sub	sp, #12
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8008e18:	bf00      	nop
 8008e1a:	370c      	adds	r7, #12
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr

08008e24 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b083      	sub	sp, #12
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8008e2c:	bf00      	nop
 8008e2e:	370c      	adds	r7, #12
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr

08008e38 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b083      	sub	sp, #12
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8008e40:	bf00      	nop
 8008e42:	370c      	adds	r7, #12
 8008e44:	46bd      	mov	sp, r7
 8008e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4a:	4770      	bx	lr

08008e4c <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b083      	sub	sp, #12
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8008e54:	bf00      	nop
 8008e56:	370c      	adds	r7, #12
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr

08008e60 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b083      	sub	sp, #12
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8008e6e:	b2db      	uxtb	r3, r3
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	370c      	adds	r7, #12
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr

08008e7c <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b085      	sub	sp, #20
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8008e86:	2300      	movs	r3, #0
 8008e88:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8008e8a:	4b12      	ldr	r3, [pc, #72]	; (8008ed4 <LPTIM_WaitForFlag+0x58>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4a12      	ldr	r2, [pc, #72]	; (8008ed8 <LPTIM_WaitForFlag+0x5c>)
 8008e90:	fba2 2303 	umull	r2, r3, r2, r3
 8008e94:	0b9b      	lsrs	r3, r3, #14
 8008e96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008e9a:	fb02 f303 	mul.w	r3, r2, r3
 8008e9e:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	3b01      	subs	r3, #1
 8008ea4:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d101      	bne.n	8008eb0 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8008eac:	2303      	movs	r3, #3
 8008eae:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	681a      	ldr	r2, [r3, #0]
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	4013      	ands	r3, r2
 8008eba:	683a      	ldr	r2, [r7, #0]
 8008ebc:	429a      	cmp	r2, r3
 8008ebe:	d002      	beq.n	8008ec6 <LPTIM_WaitForFlag+0x4a>
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d1ec      	bne.n	8008ea0 <LPTIM_WaitForFlag+0x24>

  return result;
 8008ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3714      	adds	r7, #20
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr
 8008ed4:	20000010 	.word	0x20000010
 8008ed8:	d1b71759 	.word	0xd1b71759

08008edc <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b08c      	sub	sp, #48	; 0x30
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ee8:	f3ef 8310 	mrs	r3, PRIMASK
 8008eec:	60fb      	str	r3, [r7, #12]
  return(result);
 8008eee:	68fb      	ldr	r3, [r7, #12]
  uint32_t tmpARR;
  uint32_t primask_bit;
  uint32_t tmpCFGR2;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8008ef0:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	f383 8810 	msr	PRIMASK, r3
}
 8008efc:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4a81      	ldr	r2, [pc, #516]	; (8009108 <LPTIM_Disable+0x22c>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d02d      	beq.n	8008f64 <LPTIM_Disable+0x88>
 8008f08:	4a7f      	ldr	r2, [pc, #508]	; (8009108 <LPTIM_Disable+0x22c>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d830      	bhi.n	8008f70 <LPTIM_Disable+0x94>
 8008f0e:	4a7f      	ldr	r2, [pc, #508]	; (800910c <LPTIM_Disable+0x230>)
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d021      	beq.n	8008f58 <LPTIM_Disable+0x7c>
 8008f14:	4a7d      	ldr	r2, [pc, #500]	; (800910c <LPTIM_Disable+0x230>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d82a      	bhi.n	8008f70 <LPTIM_Disable+0x94>
 8008f1a:	4a7d      	ldr	r2, [pc, #500]	; (8009110 <LPTIM_Disable+0x234>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d015      	beq.n	8008f4c <LPTIM_Disable+0x70>
 8008f20:	4a7b      	ldr	r2, [pc, #492]	; (8009110 <LPTIM_Disable+0x234>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d824      	bhi.n	8008f70 <LPTIM_Disable+0x94>
 8008f26:	4a7b      	ldr	r2, [pc, #492]	; (8009114 <LPTIM_Disable+0x238>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d003      	beq.n	8008f34 <LPTIM_Disable+0x58>
 8008f2c:	4a7a      	ldr	r2, [pc, #488]	; (8009118 <LPTIM_Disable+0x23c>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d006      	beq.n	8008f40 <LPTIM_Disable+0x64>
    case LPTIM5_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
      break;
#endif /* LPTIM5 */
    default:
      break;
 8008f32:	e01d      	b.n	8008f70 <LPTIM_Disable+0x94>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008f34:	4b79      	ldr	r3, [pc, #484]	; (800911c <LPTIM_Disable+0x240>)
 8008f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f38:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8008f3e:	e018      	b.n	8008f72 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008f40:	4b76      	ldr	r3, [pc, #472]	; (800911c <LPTIM_Disable+0x240>)
 8008f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f44:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8008f48:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8008f4a:	e012      	b.n	8008f72 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
 8008f4c:	4b73      	ldr	r3, [pc, #460]	; (800911c <LPTIM_Disable+0x240>)
 8008f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f50:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008f54:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8008f56:	e00c      	b.n	8008f72 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM4_SOURCE();
 8008f58:	4b70      	ldr	r3, [pc, #448]	; (800911c <LPTIM_Disable+0x240>)
 8008f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f5c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008f60:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8008f62:	e006      	b.n	8008f72 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
 8008f64:	4b6d      	ldr	r3, [pc, #436]	; (800911c <LPTIM_Disable+0x240>)
 8008f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f68:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8008f6e:	e000      	b.n	8008f72 <LPTIM_Disable+0x96>
      break;
 8008f70:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	689b      	ldr	r3, [r3, #8]
 8008f78:	627b      	str	r3, [r7, #36]	; 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	68db      	ldr	r3, [r3, #12]
 8008f80:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	695b      	ldr	r3, [r3, #20]
 8008f88:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	699b      	ldr	r3, [r3, #24]
 8008f90:	61bb      	str	r3, [r7, #24]
  tmpCFGR2 = hlptim->Instance->CFGR2;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f98:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4a5a      	ldr	r2, [pc, #360]	; (8009108 <LPTIM_Disable+0x22c>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d059      	beq.n	8009058 <LPTIM_Disable+0x17c>
 8008fa4:	4a58      	ldr	r2, [pc, #352]	; (8009108 <LPTIM_Disable+0x22c>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d867      	bhi.n	800907a <LPTIM_Disable+0x19e>
 8008faa:	4a58      	ldr	r2, [pc, #352]	; (800910c <LPTIM_Disable+0x230>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d042      	beq.n	8009036 <LPTIM_Disable+0x15a>
 8008fb0:	4a56      	ldr	r2, [pc, #344]	; (800910c <LPTIM_Disable+0x230>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d861      	bhi.n	800907a <LPTIM_Disable+0x19e>
 8008fb6:	4a56      	ldr	r2, [pc, #344]	; (8009110 <LPTIM_Disable+0x234>)
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d02b      	beq.n	8009014 <LPTIM_Disable+0x138>
 8008fbc:	4a54      	ldr	r2, [pc, #336]	; (8009110 <LPTIM_Disable+0x234>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d85b      	bhi.n	800907a <LPTIM_Disable+0x19e>
 8008fc2:	4a54      	ldr	r2, [pc, #336]	; (8009114 <LPTIM_Disable+0x238>)
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d003      	beq.n	8008fd0 <LPTIM_Disable+0xf4>
 8008fc8:	4a53      	ldr	r2, [pc, #332]	; (8009118 <LPTIM_Disable+0x23c>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d011      	beq.n	8008ff2 <LPTIM_Disable+0x116>
      __HAL_RCC_LPTIM5_FORCE_RESET();
      __HAL_RCC_LPTIM5_RELEASE_RESET();
      break;
#endif /* LPTIM5 */
    default:
      break;
 8008fce:	e054      	b.n	800907a <LPTIM_Disable+0x19e>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8008fd0:	4b52      	ldr	r3, [pc, #328]	; (800911c <LPTIM_Disable+0x240>)
 8008fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fd6:	4a51      	ldr	r2, [pc, #324]	; (800911c <LPTIM_Disable+0x240>)
 8008fd8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008fdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8008fe0:	4b4e      	ldr	r3, [pc, #312]	; (800911c <LPTIM_Disable+0x240>)
 8008fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fe6:	4a4d      	ldr	r2, [pc, #308]	; (800911c <LPTIM_Disable+0x240>)
 8008fe8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008fec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      break;
 8008ff0:	e044      	b.n	800907c <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8008ff2:	4b4a      	ldr	r3, [pc, #296]	; (800911c <LPTIM_Disable+0x240>)
 8008ff4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008ff8:	4a48      	ldr	r2, [pc, #288]	; (800911c <LPTIM_Disable+0x240>)
 8008ffa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008ffe:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8009002:	4b46      	ldr	r3, [pc, #280]	; (800911c <LPTIM_Disable+0x240>)
 8009004:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009008:	4a44      	ldr	r2, [pc, #272]	; (800911c <LPTIM_Disable+0x240>)
 800900a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800900e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8009012:	e033      	b.n	800907c <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM3_FORCE_RESET();
 8009014:	4b41      	ldr	r3, [pc, #260]	; (800911c <LPTIM_Disable+0x240>)
 8009016:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800901a:	4a40      	ldr	r2, [pc, #256]	; (800911c <LPTIM_Disable+0x240>)
 800901c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009020:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM3_RELEASE_RESET();
 8009024:	4b3d      	ldr	r3, [pc, #244]	; (800911c <LPTIM_Disable+0x240>)
 8009026:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800902a:	4a3c      	ldr	r2, [pc, #240]	; (800911c <LPTIM_Disable+0x240>)
 800902c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009030:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8009034:	e022      	b.n	800907c <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM4_FORCE_RESET();
 8009036:	4b39      	ldr	r3, [pc, #228]	; (800911c <LPTIM_Disable+0x240>)
 8009038:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800903c:	4a37      	ldr	r2, [pc, #220]	; (800911c <LPTIM_Disable+0x240>)
 800903e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009042:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM4_RELEASE_RESET();
 8009046:	4b35      	ldr	r3, [pc, #212]	; (800911c <LPTIM_Disable+0x240>)
 8009048:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800904c:	4a33      	ldr	r2, [pc, #204]	; (800911c <LPTIM_Disable+0x240>)
 800904e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009052:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8009056:	e011      	b.n	800907c <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM5_FORCE_RESET();
 8009058:	4b30      	ldr	r3, [pc, #192]	; (800911c <LPTIM_Disable+0x240>)
 800905a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800905e:	4a2f      	ldr	r2, [pc, #188]	; (800911c <LPTIM_Disable+0x240>)
 8009060:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009064:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM5_RELEASE_RESET();
 8009068:	4b2c      	ldr	r3, [pc, #176]	; (800911c <LPTIM_Disable+0x240>)
 800906a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800906e:	4a2b      	ldr	r2, [pc, #172]	; (800911c <LPTIM_Disable+0x240>)
 8009070:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009074:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8009078:	e000      	b.n	800907c <LPTIM_Disable+0x1a0>
      break;
 800907a:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 800907c:	69fb      	ldr	r3, [r7, #28]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d103      	bne.n	800908a <LPTIM_Disable+0x1ae>
 8009082:	69bb      	ldr	r3, [r7, #24]
 8009084:	2b00      	cmp	r3, #0
 8009086:	f000 80d1 	beq.w	800922c <LPTIM_Disable+0x350>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4a1e      	ldr	r2, [pc, #120]	; (8009108 <LPTIM_Disable+0x22c>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d031      	beq.n	80090f8 <LPTIM_Disable+0x21c>
 8009094:	4a1c      	ldr	r2, [pc, #112]	; (8009108 <LPTIM_Disable+0x22c>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d842      	bhi.n	8009120 <LPTIM_Disable+0x244>
 800909a:	4a1c      	ldr	r2, [pc, #112]	; (800910c <LPTIM_Disable+0x230>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d024      	beq.n	80090ea <LPTIM_Disable+0x20e>
 80090a0:	4a1a      	ldr	r2, [pc, #104]	; (800910c <LPTIM_Disable+0x230>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d83c      	bhi.n	8009120 <LPTIM_Disable+0x244>
 80090a6:	4a1a      	ldr	r2, [pc, #104]	; (8009110 <LPTIM_Disable+0x234>)
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d017      	beq.n	80090dc <LPTIM_Disable+0x200>
 80090ac:	4a18      	ldr	r2, [pc, #96]	; (8009110 <LPTIM_Disable+0x234>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d836      	bhi.n	8009120 <LPTIM_Disable+0x244>
 80090b2:	4a18      	ldr	r2, [pc, #96]	; (8009114 <LPTIM_Disable+0x238>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d003      	beq.n	80090c0 <LPTIM_Disable+0x1e4>
 80090b8:	4a17      	ldr	r2, [pc, #92]	; (8009118 <LPTIM_Disable+0x23c>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d007      	beq.n	80090ce <LPTIM_Disable+0x1f2>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
        break;
#endif /* LPTIM5 */
      default:
        break;
 80090be:	e02f      	b.n	8009120 <LPTIM_Disable+0x244>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_D2PCLK1);
 80090c0:	4b16      	ldr	r3, [pc, #88]	; (800911c <LPTIM_Disable+0x240>)
 80090c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090c4:	4a15      	ldr	r2, [pc, #84]	; (800911c <LPTIM_Disable+0x240>)
 80090c6:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 80090ca:	6553      	str	r3, [r2, #84]	; 0x54
        break;
 80090cc:	e029      	b.n	8009122 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_D3PCLK1);
 80090ce:	4b13      	ldr	r3, [pc, #76]	; (800911c <LPTIM_Disable+0x240>)
 80090d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090d2:	4a12      	ldr	r2, [pc, #72]	; (800911c <LPTIM_Disable+0x240>)
 80090d4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80090d8:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 80090da:	e022      	b.n	8009122 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_D3PCLK1);
 80090dc:	4b0f      	ldr	r3, [pc, #60]	; (800911c <LPTIM_Disable+0x240>)
 80090de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090e0:	4a0e      	ldr	r2, [pc, #56]	; (800911c <LPTIM_Disable+0x240>)
 80090e2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80090e6:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 80090e8:	e01b      	b.n	8009122 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM4_CONFIG(RCC_LPTIM4CLKSOURCE_D3PCLK1);
 80090ea:	4b0c      	ldr	r3, [pc, #48]	; (800911c <LPTIM_Disable+0x240>)
 80090ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090ee:	4a0b      	ldr	r2, [pc, #44]	; (800911c <LPTIM_Disable+0x240>)
 80090f0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80090f4:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 80090f6:	e014      	b.n	8009122 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
 80090f8:	4b08      	ldr	r3, [pc, #32]	; (800911c <LPTIM_Disable+0x240>)
 80090fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090fc:	4a07      	ldr	r2, [pc, #28]	; (800911c <LPTIM_Disable+0x240>)
 80090fe:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8009102:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8009104:	e00d      	b.n	8009122 <LPTIM_Disable+0x246>
 8009106:	bf00      	nop
 8009108:	58003000 	.word	0x58003000
 800910c:	58002c00 	.word	0x58002c00
 8009110:	58002800 	.word	0x58002800
 8009114:	40002400 	.word	0x40002400
 8009118:	58002400 	.word	0x58002400
 800911c:	58024400 	.word	0x58024400
        break;
 8009120:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8009122:	69fb      	ldr	r3, [r7, #28]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d01a      	beq.n	800915e <LPTIM_Disable+0x282>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	691a      	ldr	r2, [r3, #16]
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f042 0201 	orr.w	r2, r2, #1
 8009136:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	69fa      	ldr	r2, [r7, #28]
 800913e:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8009140:	2108      	movs	r1, #8
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f7ff fe9a 	bl	8008e7c <LPTIM_WaitForFlag>
 8009148:	4603      	mov	r3, r0
 800914a:	2b03      	cmp	r3, #3
 800914c:	d103      	bne.n	8009156 <LPTIM_Disable+0x27a>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2203      	movs	r2, #3
 8009152:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	2208      	movs	r2, #8
 800915c:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 800915e:	69bb      	ldr	r3, [r7, #24]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d01a      	beq.n	800919a <LPTIM_Disable+0x2be>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	691a      	ldr	r2, [r3, #16]
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f042 0201 	orr.w	r2, r2, #1
 8009172:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	69ba      	ldr	r2, [r7, #24]
 800917a:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800917c:	2110      	movs	r1, #16
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f7ff fe7c 	bl	8008e7c <LPTIM_WaitForFlag>
 8009184:	4603      	mov	r3, r0
 8009186:	2b03      	cmp	r3, #3
 8009188:	d103      	bne.n	8009192 <LPTIM_Disable+0x2b6>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2203      	movs	r2, #3
 800918e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	2210      	movs	r2, #16
 8009198:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	4a32      	ldr	r2, [pc, #200]	; (8009268 <LPTIM_Disable+0x38c>)
 80091a0:	4293      	cmp	r3, r2
 80091a2:	d039      	beq.n	8009218 <LPTIM_Disable+0x33c>
 80091a4:	4a30      	ldr	r2, [pc, #192]	; (8009268 <LPTIM_Disable+0x38c>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d83f      	bhi.n	800922a <LPTIM_Disable+0x34e>
 80091aa:	4a30      	ldr	r2, [pc, #192]	; (800926c <LPTIM_Disable+0x390>)
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d02a      	beq.n	8009206 <LPTIM_Disable+0x32a>
 80091b0:	4a2e      	ldr	r2, [pc, #184]	; (800926c <LPTIM_Disable+0x390>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d839      	bhi.n	800922a <LPTIM_Disable+0x34e>
 80091b6:	4a2e      	ldr	r2, [pc, #184]	; (8009270 <LPTIM_Disable+0x394>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d01b      	beq.n	80091f4 <LPTIM_Disable+0x318>
 80091bc:	4a2c      	ldr	r2, [pc, #176]	; (8009270 <LPTIM_Disable+0x394>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	d833      	bhi.n	800922a <LPTIM_Disable+0x34e>
 80091c2:	4a2c      	ldr	r2, [pc, #176]	; (8009274 <LPTIM_Disable+0x398>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d003      	beq.n	80091d0 <LPTIM_Disable+0x2f4>
 80091c8:	4a2b      	ldr	r2, [pc, #172]	; (8009278 <LPTIM_Disable+0x39c>)
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d009      	beq.n	80091e2 <LPTIM_Disable+0x306>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
        break;
#endif /* LPTIM5 */
      default:
        break;
 80091ce:	e02c      	b.n	800922a <LPTIM_Disable+0x34e>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 80091d0:	4b2a      	ldr	r3, [pc, #168]	; (800927c <LPTIM_Disable+0x3a0>)
 80091d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091d4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80091d8:	4928      	ldr	r1, [pc, #160]	; (800927c <LPTIM_Disable+0x3a0>)
 80091da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091dc:	4313      	orrs	r3, r2
 80091de:	654b      	str	r3, [r1, #84]	; 0x54
        break;
 80091e0:	e024      	b.n	800922c <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 80091e2:	4b26      	ldr	r3, [pc, #152]	; (800927c <LPTIM_Disable+0x3a0>)
 80091e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091e6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80091ea:	4924      	ldr	r1, [pc, #144]	; (800927c <LPTIM_Disable+0x3a0>)
 80091ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ee:	4313      	orrs	r3, r2
 80091f0:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 80091f2:	e01b      	b.n	800922c <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
 80091f4:	4b21      	ldr	r3, [pc, #132]	; (800927c <LPTIM_Disable+0x3a0>)
 80091f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091f8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80091fc:	491f      	ldr	r1, [pc, #124]	; (800927c <LPTIM_Disable+0x3a0>)
 80091fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009200:	4313      	orrs	r3, r2
 8009202:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8009204:	e012      	b.n	800922c <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM4_CONFIG(tmpclksource);
 8009206:	4b1d      	ldr	r3, [pc, #116]	; (800927c <LPTIM_Disable+0x3a0>)
 8009208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800920a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800920e:	491b      	ldr	r1, [pc, #108]	; (800927c <LPTIM_Disable+0x3a0>)
 8009210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009212:	4313      	orrs	r3, r2
 8009214:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8009216:	e009      	b.n	800922c <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
 8009218:	4b18      	ldr	r3, [pc, #96]	; (800927c <LPTIM_Disable+0x3a0>)
 800921a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800921c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009220:	4916      	ldr	r1, [pc, #88]	; (800927c <LPTIM_Disable+0x3a0>)
 8009222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009224:	4313      	orrs	r3, r2
 8009226:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8009228:	e000      	b.n	800922c <LPTIM_Disable+0x350>
        break;
 800922a:	bf00      	nop
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	691a      	ldr	r2, [r3, #16]
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f022 0201 	bic.w	r2, r2, #1
 800923a:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009242:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	6a3a      	ldr	r2, [r7, #32]
 800924a:	60da      	str	r2, [r3, #12]
  hlptim->Instance->CFGR2 = tmpCFGR2;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	697a      	ldr	r2, [r7, #20]
 8009252:	625a      	str	r2, [r3, #36]	; 0x24
 8009254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009256:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	f383 8810 	msr	PRIMASK, r3
}
 800925e:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8009260:	bf00      	nop
 8009262:	3730      	adds	r7, #48	; 0x30
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}
 8009268:	58003000 	.word	0x58003000
 800926c:	58002c00 	.word	0x58002c00
 8009270:	58002800 	.word	0x58002800
 8009274:	40002400 	.word	0x40002400
 8009278:	58002400 	.word	0x58002400
 800927c:	58024400 	.word	0x58024400

08009280 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8009280:	b480      	push	{r7}
 8009282:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8009284:	4b05      	ldr	r3, [pc, #20]	; (800929c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	4a04      	ldr	r2, [pc, #16]	; (800929c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800928a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800928e:	6013      	str	r3, [r2, #0]
}
 8009290:	bf00      	nop
 8009292:	46bd      	mov	sp, r7
 8009294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009298:	4770      	bx	lr
 800929a:	bf00      	nop
 800929c:	58024800 	.word	0x58024800

080092a0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b084      	sub	sp, #16
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80092a8:	4b19      	ldr	r3, [pc, #100]	; (8009310 <HAL_PWREx_ConfigSupply+0x70>)
 80092aa:	68db      	ldr	r3, [r3, #12]
 80092ac:	f003 0304 	and.w	r3, r3, #4
 80092b0:	2b04      	cmp	r3, #4
 80092b2:	d00a      	beq.n	80092ca <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80092b4:	4b16      	ldr	r3, [pc, #88]	; (8009310 <HAL_PWREx_ConfigSupply+0x70>)
 80092b6:	68db      	ldr	r3, [r3, #12]
 80092b8:	f003 0307 	and.w	r3, r3, #7
 80092bc:	687a      	ldr	r2, [r7, #4]
 80092be:	429a      	cmp	r2, r3
 80092c0:	d001      	beq.n	80092c6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80092c2:	2301      	movs	r3, #1
 80092c4:	e01f      	b.n	8009306 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80092c6:	2300      	movs	r3, #0
 80092c8:	e01d      	b.n	8009306 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80092ca:	4b11      	ldr	r3, [pc, #68]	; (8009310 <HAL_PWREx_ConfigSupply+0x70>)
 80092cc:	68db      	ldr	r3, [r3, #12]
 80092ce:	f023 0207 	bic.w	r2, r3, #7
 80092d2:	490f      	ldr	r1, [pc, #60]	; (8009310 <HAL_PWREx_ConfigSupply+0x70>)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	4313      	orrs	r3, r2
 80092d8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80092da:	f7fa fafd 	bl	80038d8 <HAL_GetTick>
 80092de:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80092e0:	e009      	b.n	80092f6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80092e2:	f7fa faf9 	bl	80038d8 <HAL_GetTick>
 80092e6:	4602      	mov	r2, r0
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	1ad3      	subs	r3, r2, r3
 80092ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80092f0:	d901      	bls.n	80092f6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80092f2:	2301      	movs	r3, #1
 80092f4:	e007      	b.n	8009306 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80092f6:	4b06      	ldr	r3, [pc, #24]	; (8009310 <HAL_PWREx_ConfigSupply+0x70>)
 80092f8:	685b      	ldr	r3, [r3, #4]
 80092fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80092fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009302:	d1ee      	bne.n	80092e2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009304:	2300      	movs	r3, #0
}
 8009306:	4618      	mov	r0, r3
 8009308:	3710      	adds	r7, #16
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}
 800930e:	bf00      	nop
 8009310:	58024800 	.word	0x58024800

08009314 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b08c      	sub	sp, #48	; 0x30
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d102      	bne.n	8009328 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009322:	2301      	movs	r3, #1
 8009324:	f000 bc48 	b.w	8009bb8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f003 0301 	and.w	r3, r3, #1
 8009330:	2b00      	cmp	r3, #0
 8009332:	f000 8088 	beq.w	8009446 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009336:	4b99      	ldr	r3, [pc, #612]	; (800959c <HAL_RCC_OscConfig+0x288>)
 8009338:	691b      	ldr	r3, [r3, #16]
 800933a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800933e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009340:	4b96      	ldr	r3, [pc, #600]	; (800959c <HAL_RCC_OscConfig+0x288>)
 8009342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009344:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009348:	2b10      	cmp	r3, #16
 800934a:	d007      	beq.n	800935c <HAL_RCC_OscConfig+0x48>
 800934c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800934e:	2b18      	cmp	r3, #24
 8009350:	d111      	bne.n	8009376 <HAL_RCC_OscConfig+0x62>
 8009352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009354:	f003 0303 	and.w	r3, r3, #3
 8009358:	2b02      	cmp	r3, #2
 800935a:	d10c      	bne.n	8009376 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800935c:	4b8f      	ldr	r3, [pc, #572]	; (800959c <HAL_RCC_OscConfig+0x288>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009364:	2b00      	cmp	r3, #0
 8009366:	d06d      	beq.n	8009444 <HAL_RCC_OscConfig+0x130>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	685b      	ldr	r3, [r3, #4]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d169      	bne.n	8009444 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009370:	2301      	movs	r3, #1
 8009372:	f000 bc21 	b.w	8009bb8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	685b      	ldr	r3, [r3, #4]
 800937a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800937e:	d106      	bne.n	800938e <HAL_RCC_OscConfig+0x7a>
 8009380:	4b86      	ldr	r3, [pc, #536]	; (800959c <HAL_RCC_OscConfig+0x288>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4a85      	ldr	r2, [pc, #532]	; (800959c <HAL_RCC_OscConfig+0x288>)
 8009386:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800938a:	6013      	str	r3, [r2, #0]
 800938c:	e02e      	b.n	80093ec <HAL_RCC_OscConfig+0xd8>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	685b      	ldr	r3, [r3, #4]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d10c      	bne.n	80093b0 <HAL_RCC_OscConfig+0x9c>
 8009396:	4b81      	ldr	r3, [pc, #516]	; (800959c <HAL_RCC_OscConfig+0x288>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	4a80      	ldr	r2, [pc, #512]	; (800959c <HAL_RCC_OscConfig+0x288>)
 800939c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80093a0:	6013      	str	r3, [r2, #0]
 80093a2:	4b7e      	ldr	r3, [pc, #504]	; (800959c <HAL_RCC_OscConfig+0x288>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	4a7d      	ldr	r2, [pc, #500]	; (800959c <HAL_RCC_OscConfig+0x288>)
 80093a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80093ac:	6013      	str	r3, [r2, #0]
 80093ae:	e01d      	b.n	80093ec <HAL_RCC_OscConfig+0xd8>
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	685b      	ldr	r3, [r3, #4]
 80093b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80093b8:	d10c      	bne.n	80093d4 <HAL_RCC_OscConfig+0xc0>
 80093ba:	4b78      	ldr	r3, [pc, #480]	; (800959c <HAL_RCC_OscConfig+0x288>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	4a77      	ldr	r2, [pc, #476]	; (800959c <HAL_RCC_OscConfig+0x288>)
 80093c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80093c4:	6013      	str	r3, [r2, #0]
 80093c6:	4b75      	ldr	r3, [pc, #468]	; (800959c <HAL_RCC_OscConfig+0x288>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4a74      	ldr	r2, [pc, #464]	; (800959c <HAL_RCC_OscConfig+0x288>)
 80093cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80093d0:	6013      	str	r3, [r2, #0]
 80093d2:	e00b      	b.n	80093ec <HAL_RCC_OscConfig+0xd8>
 80093d4:	4b71      	ldr	r3, [pc, #452]	; (800959c <HAL_RCC_OscConfig+0x288>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	4a70      	ldr	r2, [pc, #448]	; (800959c <HAL_RCC_OscConfig+0x288>)
 80093da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80093de:	6013      	str	r3, [r2, #0]
 80093e0:	4b6e      	ldr	r3, [pc, #440]	; (800959c <HAL_RCC_OscConfig+0x288>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	4a6d      	ldr	r2, [pc, #436]	; (800959c <HAL_RCC_OscConfig+0x288>)
 80093e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80093ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d013      	beq.n	800941c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093f4:	f7fa fa70 	bl	80038d8 <HAL_GetTick>
 80093f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80093fa:	e008      	b.n	800940e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80093fc:	f7fa fa6c 	bl	80038d8 <HAL_GetTick>
 8009400:	4602      	mov	r2, r0
 8009402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009404:	1ad3      	subs	r3, r2, r3
 8009406:	2b64      	cmp	r3, #100	; 0x64
 8009408:	d901      	bls.n	800940e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800940a:	2303      	movs	r3, #3
 800940c:	e3d4      	b.n	8009bb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800940e:	4b63      	ldr	r3, [pc, #396]	; (800959c <HAL_RCC_OscConfig+0x288>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009416:	2b00      	cmp	r3, #0
 8009418:	d0f0      	beq.n	80093fc <HAL_RCC_OscConfig+0xe8>
 800941a:	e014      	b.n	8009446 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800941c:	f7fa fa5c 	bl	80038d8 <HAL_GetTick>
 8009420:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009422:	e008      	b.n	8009436 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009424:	f7fa fa58 	bl	80038d8 <HAL_GetTick>
 8009428:	4602      	mov	r2, r0
 800942a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800942c:	1ad3      	subs	r3, r2, r3
 800942e:	2b64      	cmp	r3, #100	; 0x64
 8009430:	d901      	bls.n	8009436 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8009432:	2303      	movs	r3, #3
 8009434:	e3c0      	b.n	8009bb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009436:	4b59      	ldr	r3, [pc, #356]	; (800959c <HAL_RCC_OscConfig+0x288>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800943e:	2b00      	cmp	r3, #0
 8009440:	d1f0      	bne.n	8009424 <HAL_RCC_OscConfig+0x110>
 8009442:	e000      	b.n	8009446 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009444:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f003 0302 	and.w	r3, r3, #2
 800944e:	2b00      	cmp	r3, #0
 8009450:	f000 80ca 	beq.w	80095e8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009454:	4b51      	ldr	r3, [pc, #324]	; (800959c <HAL_RCC_OscConfig+0x288>)
 8009456:	691b      	ldr	r3, [r3, #16]
 8009458:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800945c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800945e:	4b4f      	ldr	r3, [pc, #316]	; (800959c <HAL_RCC_OscConfig+0x288>)
 8009460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009462:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009464:	6a3b      	ldr	r3, [r7, #32]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d007      	beq.n	800947a <HAL_RCC_OscConfig+0x166>
 800946a:	6a3b      	ldr	r3, [r7, #32]
 800946c:	2b18      	cmp	r3, #24
 800946e:	d156      	bne.n	800951e <HAL_RCC_OscConfig+0x20a>
 8009470:	69fb      	ldr	r3, [r7, #28]
 8009472:	f003 0303 	and.w	r3, r3, #3
 8009476:	2b00      	cmp	r3, #0
 8009478:	d151      	bne.n	800951e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800947a:	4b48      	ldr	r3, [pc, #288]	; (800959c <HAL_RCC_OscConfig+0x288>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f003 0304 	and.w	r3, r3, #4
 8009482:	2b00      	cmp	r3, #0
 8009484:	d005      	beq.n	8009492 <HAL_RCC_OscConfig+0x17e>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	68db      	ldr	r3, [r3, #12]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d101      	bne.n	8009492 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800948e:	2301      	movs	r3, #1
 8009490:	e392      	b.n	8009bb8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009492:	4b42      	ldr	r3, [pc, #264]	; (800959c <HAL_RCC_OscConfig+0x288>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f023 0219 	bic.w	r2, r3, #25
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	68db      	ldr	r3, [r3, #12]
 800949e:	493f      	ldr	r1, [pc, #252]	; (800959c <HAL_RCC_OscConfig+0x288>)
 80094a0:	4313      	orrs	r3, r2
 80094a2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094a4:	f7fa fa18 	bl	80038d8 <HAL_GetTick>
 80094a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80094aa:	e008      	b.n	80094be <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80094ac:	f7fa fa14 	bl	80038d8 <HAL_GetTick>
 80094b0:	4602      	mov	r2, r0
 80094b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b4:	1ad3      	subs	r3, r2, r3
 80094b6:	2b02      	cmp	r3, #2
 80094b8:	d901      	bls.n	80094be <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80094ba:	2303      	movs	r3, #3
 80094bc:	e37c      	b.n	8009bb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80094be:	4b37      	ldr	r3, [pc, #220]	; (800959c <HAL_RCC_OscConfig+0x288>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f003 0304 	and.w	r3, r3, #4
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d0f0      	beq.n	80094ac <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80094ca:	f7fa fa35 	bl	8003938 <HAL_GetREVID>
 80094ce:	4603      	mov	r3, r0
 80094d0:	f241 0203 	movw	r2, #4099	; 0x1003
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d817      	bhi.n	8009508 <HAL_RCC_OscConfig+0x1f4>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	691b      	ldr	r3, [r3, #16]
 80094dc:	2b40      	cmp	r3, #64	; 0x40
 80094de:	d108      	bne.n	80094f2 <HAL_RCC_OscConfig+0x1de>
 80094e0:	4b2e      	ldr	r3, [pc, #184]	; (800959c <HAL_RCC_OscConfig+0x288>)
 80094e2:	685b      	ldr	r3, [r3, #4]
 80094e4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80094e8:	4a2c      	ldr	r2, [pc, #176]	; (800959c <HAL_RCC_OscConfig+0x288>)
 80094ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80094ee:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80094f0:	e07a      	b.n	80095e8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80094f2:	4b2a      	ldr	r3, [pc, #168]	; (800959c <HAL_RCC_OscConfig+0x288>)
 80094f4:	685b      	ldr	r3, [r3, #4]
 80094f6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	691b      	ldr	r3, [r3, #16]
 80094fe:	031b      	lsls	r3, r3, #12
 8009500:	4926      	ldr	r1, [pc, #152]	; (800959c <HAL_RCC_OscConfig+0x288>)
 8009502:	4313      	orrs	r3, r2
 8009504:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009506:	e06f      	b.n	80095e8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009508:	4b24      	ldr	r3, [pc, #144]	; (800959c <HAL_RCC_OscConfig+0x288>)
 800950a:	685b      	ldr	r3, [r3, #4]
 800950c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	691b      	ldr	r3, [r3, #16]
 8009514:	061b      	lsls	r3, r3, #24
 8009516:	4921      	ldr	r1, [pc, #132]	; (800959c <HAL_RCC_OscConfig+0x288>)
 8009518:	4313      	orrs	r3, r2
 800951a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800951c:	e064      	b.n	80095e8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	68db      	ldr	r3, [r3, #12]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d047      	beq.n	80095b6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009526:	4b1d      	ldr	r3, [pc, #116]	; (800959c <HAL_RCC_OscConfig+0x288>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f023 0219 	bic.w	r2, r3, #25
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	68db      	ldr	r3, [r3, #12]
 8009532:	491a      	ldr	r1, [pc, #104]	; (800959c <HAL_RCC_OscConfig+0x288>)
 8009534:	4313      	orrs	r3, r2
 8009536:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009538:	f7fa f9ce 	bl	80038d8 <HAL_GetTick>
 800953c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800953e:	e008      	b.n	8009552 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009540:	f7fa f9ca 	bl	80038d8 <HAL_GetTick>
 8009544:	4602      	mov	r2, r0
 8009546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009548:	1ad3      	subs	r3, r2, r3
 800954a:	2b02      	cmp	r3, #2
 800954c:	d901      	bls.n	8009552 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800954e:	2303      	movs	r3, #3
 8009550:	e332      	b.n	8009bb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009552:	4b12      	ldr	r3, [pc, #72]	; (800959c <HAL_RCC_OscConfig+0x288>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f003 0304 	and.w	r3, r3, #4
 800955a:	2b00      	cmp	r3, #0
 800955c:	d0f0      	beq.n	8009540 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800955e:	f7fa f9eb 	bl	8003938 <HAL_GetREVID>
 8009562:	4603      	mov	r3, r0
 8009564:	f241 0203 	movw	r2, #4099	; 0x1003
 8009568:	4293      	cmp	r3, r2
 800956a:	d819      	bhi.n	80095a0 <HAL_RCC_OscConfig+0x28c>
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	691b      	ldr	r3, [r3, #16]
 8009570:	2b40      	cmp	r3, #64	; 0x40
 8009572:	d108      	bne.n	8009586 <HAL_RCC_OscConfig+0x272>
 8009574:	4b09      	ldr	r3, [pc, #36]	; (800959c <HAL_RCC_OscConfig+0x288>)
 8009576:	685b      	ldr	r3, [r3, #4]
 8009578:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800957c:	4a07      	ldr	r2, [pc, #28]	; (800959c <HAL_RCC_OscConfig+0x288>)
 800957e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009582:	6053      	str	r3, [r2, #4]
 8009584:	e030      	b.n	80095e8 <HAL_RCC_OscConfig+0x2d4>
 8009586:	4b05      	ldr	r3, [pc, #20]	; (800959c <HAL_RCC_OscConfig+0x288>)
 8009588:	685b      	ldr	r3, [r3, #4]
 800958a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	691b      	ldr	r3, [r3, #16]
 8009592:	031b      	lsls	r3, r3, #12
 8009594:	4901      	ldr	r1, [pc, #4]	; (800959c <HAL_RCC_OscConfig+0x288>)
 8009596:	4313      	orrs	r3, r2
 8009598:	604b      	str	r3, [r1, #4]
 800959a:	e025      	b.n	80095e8 <HAL_RCC_OscConfig+0x2d4>
 800959c:	58024400 	.word	0x58024400
 80095a0:	4b9a      	ldr	r3, [pc, #616]	; (800980c <HAL_RCC_OscConfig+0x4f8>)
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	691b      	ldr	r3, [r3, #16]
 80095ac:	061b      	lsls	r3, r3, #24
 80095ae:	4997      	ldr	r1, [pc, #604]	; (800980c <HAL_RCC_OscConfig+0x4f8>)
 80095b0:	4313      	orrs	r3, r2
 80095b2:	604b      	str	r3, [r1, #4]
 80095b4:	e018      	b.n	80095e8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80095b6:	4b95      	ldr	r3, [pc, #596]	; (800980c <HAL_RCC_OscConfig+0x4f8>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	4a94      	ldr	r2, [pc, #592]	; (800980c <HAL_RCC_OscConfig+0x4f8>)
 80095bc:	f023 0301 	bic.w	r3, r3, #1
 80095c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095c2:	f7fa f989 	bl	80038d8 <HAL_GetTick>
 80095c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80095c8:	e008      	b.n	80095dc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80095ca:	f7fa f985 	bl	80038d8 <HAL_GetTick>
 80095ce:	4602      	mov	r2, r0
 80095d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d2:	1ad3      	subs	r3, r2, r3
 80095d4:	2b02      	cmp	r3, #2
 80095d6:	d901      	bls.n	80095dc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80095d8:	2303      	movs	r3, #3
 80095da:	e2ed      	b.n	8009bb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80095dc:	4b8b      	ldr	r3, [pc, #556]	; (800980c <HAL_RCC_OscConfig+0x4f8>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f003 0304 	and.w	r3, r3, #4
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d1f0      	bne.n	80095ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f003 0310 	and.w	r3, r3, #16
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	f000 80a9 	beq.w	8009748 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80095f6:	4b85      	ldr	r3, [pc, #532]	; (800980c <HAL_RCC_OscConfig+0x4f8>)
 80095f8:	691b      	ldr	r3, [r3, #16]
 80095fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80095fe:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009600:	4b82      	ldr	r3, [pc, #520]	; (800980c <HAL_RCC_OscConfig+0x4f8>)
 8009602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009604:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009606:	69bb      	ldr	r3, [r7, #24]
 8009608:	2b08      	cmp	r3, #8
 800960a:	d007      	beq.n	800961c <HAL_RCC_OscConfig+0x308>
 800960c:	69bb      	ldr	r3, [r7, #24]
 800960e:	2b18      	cmp	r3, #24
 8009610:	d13a      	bne.n	8009688 <HAL_RCC_OscConfig+0x374>
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	f003 0303 	and.w	r3, r3, #3
 8009618:	2b01      	cmp	r3, #1
 800961a:	d135      	bne.n	8009688 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800961c:	4b7b      	ldr	r3, [pc, #492]	; (800980c <HAL_RCC_OscConfig+0x4f8>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009624:	2b00      	cmp	r3, #0
 8009626:	d005      	beq.n	8009634 <HAL_RCC_OscConfig+0x320>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	69db      	ldr	r3, [r3, #28]
 800962c:	2b80      	cmp	r3, #128	; 0x80
 800962e:	d001      	beq.n	8009634 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8009630:	2301      	movs	r3, #1
 8009632:	e2c1      	b.n	8009bb8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009634:	f7fa f980 	bl	8003938 <HAL_GetREVID>
 8009638:	4603      	mov	r3, r0
 800963a:	f241 0203 	movw	r2, #4099	; 0x1003
 800963e:	4293      	cmp	r3, r2
 8009640:	d817      	bhi.n	8009672 <HAL_RCC_OscConfig+0x35e>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6a1b      	ldr	r3, [r3, #32]
 8009646:	2b20      	cmp	r3, #32
 8009648:	d108      	bne.n	800965c <HAL_RCC_OscConfig+0x348>
 800964a:	4b70      	ldr	r3, [pc, #448]	; (800980c <HAL_RCC_OscConfig+0x4f8>)
 800964c:	685b      	ldr	r3, [r3, #4]
 800964e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009652:	4a6e      	ldr	r2, [pc, #440]	; (800980c <HAL_RCC_OscConfig+0x4f8>)
 8009654:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009658:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800965a:	e075      	b.n	8009748 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800965c:	4b6b      	ldr	r3, [pc, #428]	; (800980c <HAL_RCC_OscConfig+0x4f8>)
 800965e:	685b      	ldr	r3, [r3, #4]
 8009660:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6a1b      	ldr	r3, [r3, #32]
 8009668:	069b      	lsls	r3, r3, #26
 800966a:	4968      	ldr	r1, [pc, #416]	; (800980c <HAL_RCC_OscConfig+0x4f8>)
 800966c:	4313      	orrs	r3, r2
 800966e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009670:	e06a      	b.n	8009748 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009672:	4b66      	ldr	r3, [pc, #408]	; (800980c <HAL_RCC_OscConfig+0x4f8>)
 8009674:	68db      	ldr	r3, [r3, #12]
 8009676:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6a1b      	ldr	r3, [r3, #32]
 800967e:	061b      	lsls	r3, r3, #24
 8009680:	4962      	ldr	r1, [pc, #392]	; (800980c <HAL_RCC_OscConfig+0x4f8>)
 8009682:	4313      	orrs	r3, r2
 8009684:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009686:	e05f      	b.n	8009748 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	69db      	ldr	r3, [r3, #28]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d042      	beq.n	8009716 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009690:	4b5e      	ldr	r3, [pc, #376]	; (800980c <HAL_RCC_OscConfig+0x4f8>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4a5d      	ldr	r2, [pc, #372]	; (800980c <HAL_RCC_OscConfig+0x4f8>)
 8009696:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800969a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800969c:	f7fa f91c 	bl	80038d8 <HAL_GetTick>
 80096a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80096a2:	e008      	b.n	80096b6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80096a4:	f7fa f918 	bl	80038d8 <HAL_GetTick>
 80096a8:	4602      	mov	r2, r0
 80096aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ac:	1ad3      	subs	r3, r2, r3
 80096ae:	2b02      	cmp	r3, #2
 80096b0:	d901      	bls.n	80096b6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80096b2:	2303      	movs	r3, #3
 80096b4:	e280      	b.n	8009bb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80096b6:	4b55      	ldr	r3, [pc, #340]	; (800980c <HAL_RCC_OscConfig+0x4f8>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d0f0      	beq.n	80096a4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80096c2:	f7fa f939 	bl	8003938 <HAL_GetREVID>
 80096c6:	4603      	mov	r3, r0
 80096c8:	f241 0203 	movw	r2, #4099	; 0x1003
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d817      	bhi.n	8009700 <HAL_RCC_OscConfig+0x3ec>
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6a1b      	ldr	r3, [r3, #32]
 80096d4:	2b20      	cmp	r3, #32
 80096d6:	d108      	bne.n	80096ea <HAL_RCC_OscConfig+0x3d6>
 80096d8:	4b4c      	ldr	r3, [pc, #304]	; (800980c <HAL_RCC_OscConfig+0x4f8>)
 80096da:	685b      	ldr	r3, [r3, #4]
 80096dc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80096e0:	4a4a      	ldr	r2, [pc, #296]	; (800980c <HAL_RCC_OscConfig+0x4f8>)
 80096e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80096e6:	6053      	str	r3, [r2, #4]
 80096e8:	e02e      	b.n	8009748 <HAL_RCC_OscConfig+0x434>
 80096ea:	4b48      	ldr	r3, [pc, #288]	; (800980c <HAL_RCC_OscConfig+0x4f8>)
 80096ec:	685b      	ldr	r3, [r3, #4]
 80096ee:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6a1b      	ldr	r3, [r3, #32]
 80096f6:	069b      	lsls	r3, r3, #26
 80096f8:	4944      	ldr	r1, [pc, #272]	; (800980c <HAL_RCC_OscConfig+0x4f8>)
 80096fa:	4313      	orrs	r3, r2
 80096fc:	604b      	str	r3, [r1, #4]
 80096fe:	e023      	b.n	8009748 <HAL_RCC_OscConfig+0x434>
 8009700:	4b42      	ldr	r3, [pc, #264]	; (800980c <HAL_RCC_OscConfig+0x4f8>)
 8009702:	68db      	ldr	r3, [r3, #12]
 8009704:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6a1b      	ldr	r3, [r3, #32]
 800970c:	061b      	lsls	r3, r3, #24
 800970e:	493f      	ldr	r1, [pc, #252]	; (800980c <HAL_RCC_OscConfig+0x4f8>)
 8009710:	4313      	orrs	r3, r2
 8009712:	60cb      	str	r3, [r1, #12]
 8009714:	e018      	b.n	8009748 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009716:	4b3d      	ldr	r3, [pc, #244]	; (800980c <HAL_RCC_OscConfig+0x4f8>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	4a3c      	ldr	r2, [pc, #240]	; (800980c <HAL_RCC_OscConfig+0x4f8>)
 800971c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009720:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009722:	f7fa f8d9 	bl	80038d8 <HAL_GetTick>
 8009726:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009728:	e008      	b.n	800973c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800972a:	f7fa f8d5 	bl	80038d8 <HAL_GetTick>
 800972e:	4602      	mov	r2, r0
 8009730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009732:	1ad3      	subs	r3, r2, r3
 8009734:	2b02      	cmp	r3, #2
 8009736:	d901      	bls.n	800973c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009738:	2303      	movs	r3, #3
 800973a:	e23d      	b.n	8009bb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800973c:	4b33      	ldr	r3, [pc, #204]	; (800980c <HAL_RCC_OscConfig+0x4f8>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009744:	2b00      	cmp	r3, #0
 8009746:	d1f0      	bne.n	800972a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f003 0308 	and.w	r3, r3, #8
 8009750:	2b00      	cmp	r3, #0
 8009752:	d036      	beq.n	80097c2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	695b      	ldr	r3, [r3, #20]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d019      	beq.n	8009790 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800975c:	4b2b      	ldr	r3, [pc, #172]	; (800980c <HAL_RCC_OscConfig+0x4f8>)
 800975e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009760:	4a2a      	ldr	r2, [pc, #168]	; (800980c <HAL_RCC_OscConfig+0x4f8>)
 8009762:	f043 0301 	orr.w	r3, r3, #1
 8009766:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009768:	f7fa f8b6 	bl	80038d8 <HAL_GetTick>
 800976c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800976e:	e008      	b.n	8009782 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009770:	f7fa f8b2 	bl	80038d8 <HAL_GetTick>
 8009774:	4602      	mov	r2, r0
 8009776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009778:	1ad3      	subs	r3, r2, r3
 800977a:	2b02      	cmp	r3, #2
 800977c:	d901      	bls.n	8009782 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800977e:	2303      	movs	r3, #3
 8009780:	e21a      	b.n	8009bb8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009782:	4b22      	ldr	r3, [pc, #136]	; (800980c <HAL_RCC_OscConfig+0x4f8>)
 8009784:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009786:	f003 0302 	and.w	r3, r3, #2
 800978a:	2b00      	cmp	r3, #0
 800978c:	d0f0      	beq.n	8009770 <HAL_RCC_OscConfig+0x45c>
 800978e:	e018      	b.n	80097c2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009790:	4b1e      	ldr	r3, [pc, #120]	; (800980c <HAL_RCC_OscConfig+0x4f8>)
 8009792:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009794:	4a1d      	ldr	r2, [pc, #116]	; (800980c <HAL_RCC_OscConfig+0x4f8>)
 8009796:	f023 0301 	bic.w	r3, r3, #1
 800979a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800979c:	f7fa f89c 	bl	80038d8 <HAL_GetTick>
 80097a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80097a2:	e008      	b.n	80097b6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80097a4:	f7fa f898 	bl	80038d8 <HAL_GetTick>
 80097a8:	4602      	mov	r2, r0
 80097aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ac:	1ad3      	subs	r3, r2, r3
 80097ae:	2b02      	cmp	r3, #2
 80097b0:	d901      	bls.n	80097b6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80097b2:	2303      	movs	r3, #3
 80097b4:	e200      	b.n	8009bb8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80097b6:	4b15      	ldr	r3, [pc, #84]	; (800980c <HAL_RCC_OscConfig+0x4f8>)
 80097b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097ba:	f003 0302 	and.w	r3, r3, #2
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d1f0      	bne.n	80097a4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f003 0320 	and.w	r3, r3, #32
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d039      	beq.n	8009842 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	699b      	ldr	r3, [r3, #24]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d01c      	beq.n	8009810 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80097d6:	4b0d      	ldr	r3, [pc, #52]	; (800980c <HAL_RCC_OscConfig+0x4f8>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4a0c      	ldr	r2, [pc, #48]	; (800980c <HAL_RCC_OscConfig+0x4f8>)
 80097dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80097e0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80097e2:	f7fa f879 	bl	80038d8 <HAL_GetTick>
 80097e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80097e8:	e008      	b.n	80097fc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80097ea:	f7fa f875 	bl	80038d8 <HAL_GetTick>
 80097ee:	4602      	mov	r2, r0
 80097f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f2:	1ad3      	subs	r3, r2, r3
 80097f4:	2b02      	cmp	r3, #2
 80097f6:	d901      	bls.n	80097fc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80097f8:	2303      	movs	r3, #3
 80097fa:	e1dd      	b.n	8009bb8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80097fc:	4b03      	ldr	r3, [pc, #12]	; (800980c <HAL_RCC_OscConfig+0x4f8>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009804:	2b00      	cmp	r3, #0
 8009806:	d0f0      	beq.n	80097ea <HAL_RCC_OscConfig+0x4d6>
 8009808:	e01b      	b.n	8009842 <HAL_RCC_OscConfig+0x52e>
 800980a:	bf00      	nop
 800980c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009810:	4b9b      	ldr	r3, [pc, #620]	; (8009a80 <HAL_RCC_OscConfig+0x76c>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	4a9a      	ldr	r2, [pc, #616]	; (8009a80 <HAL_RCC_OscConfig+0x76c>)
 8009816:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800981a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800981c:	f7fa f85c 	bl	80038d8 <HAL_GetTick>
 8009820:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009822:	e008      	b.n	8009836 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009824:	f7fa f858 	bl	80038d8 <HAL_GetTick>
 8009828:	4602      	mov	r2, r0
 800982a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800982c:	1ad3      	subs	r3, r2, r3
 800982e:	2b02      	cmp	r3, #2
 8009830:	d901      	bls.n	8009836 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8009832:	2303      	movs	r3, #3
 8009834:	e1c0      	b.n	8009bb8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009836:	4b92      	ldr	r3, [pc, #584]	; (8009a80 <HAL_RCC_OscConfig+0x76c>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800983e:	2b00      	cmp	r3, #0
 8009840:	d1f0      	bne.n	8009824 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f003 0304 	and.w	r3, r3, #4
 800984a:	2b00      	cmp	r3, #0
 800984c:	f000 8081 	beq.w	8009952 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009850:	4b8c      	ldr	r3, [pc, #560]	; (8009a84 <HAL_RCC_OscConfig+0x770>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	4a8b      	ldr	r2, [pc, #556]	; (8009a84 <HAL_RCC_OscConfig+0x770>)
 8009856:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800985a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800985c:	f7fa f83c 	bl	80038d8 <HAL_GetTick>
 8009860:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009862:	e008      	b.n	8009876 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009864:	f7fa f838 	bl	80038d8 <HAL_GetTick>
 8009868:	4602      	mov	r2, r0
 800986a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800986c:	1ad3      	subs	r3, r2, r3
 800986e:	2b64      	cmp	r3, #100	; 0x64
 8009870:	d901      	bls.n	8009876 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8009872:	2303      	movs	r3, #3
 8009874:	e1a0      	b.n	8009bb8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009876:	4b83      	ldr	r3, [pc, #524]	; (8009a84 <HAL_RCC_OscConfig+0x770>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800987e:	2b00      	cmp	r3, #0
 8009880:	d0f0      	beq.n	8009864 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	689b      	ldr	r3, [r3, #8]
 8009886:	2b01      	cmp	r3, #1
 8009888:	d106      	bne.n	8009898 <HAL_RCC_OscConfig+0x584>
 800988a:	4b7d      	ldr	r3, [pc, #500]	; (8009a80 <HAL_RCC_OscConfig+0x76c>)
 800988c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800988e:	4a7c      	ldr	r2, [pc, #496]	; (8009a80 <HAL_RCC_OscConfig+0x76c>)
 8009890:	f043 0301 	orr.w	r3, r3, #1
 8009894:	6713      	str	r3, [r2, #112]	; 0x70
 8009896:	e02d      	b.n	80098f4 <HAL_RCC_OscConfig+0x5e0>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	689b      	ldr	r3, [r3, #8]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d10c      	bne.n	80098ba <HAL_RCC_OscConfig+0x5a6>
 80098a0:	4b77      	ldr	r3, [pc, #476]	; (8009a80 <HAL_RCC_OscConfig+0x76c>)
 80098a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098a4:	4a76      	ldr	r2, [pc, #472]	; (8009a80 <HAL_RCC_OscConfig+0x76c>)
 80098a6:	f023 0301 	bic.w	r3, r3, #1
 80098aa:	6713      	str	r3, [r2, #112]	; 0x70
 80098ac:	4b74      	ldr	r3, [pc, #464]	; (8009a80 <HAL_RCC_OscConfig+0x76c>)
 80098ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098b0:	4a73      	ldr	r2, [pc, #460]	; (8009a80 <HAL_RCC_OscConfig+0x76c>)
 80098b2:	f023 0304 	bic.w	r3, r3, #4
 80098b6:	6713      	str	r3, [r2, #112]	; 0x70
 80098b8:	e01c      	b.n	80098f4 <HAL_RCC_OscConfig+0x5e0>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	689b      	ldr	r3, [r3, #8]
 80098be:	2b05      	cmp	r3, #5
 80098c0:	d10c      	bne.n	80098dc <HAL_RCC_OscConfig+0x5c8>
 80098c2:	4b6f      	ldr	r3, [pc, #444]	; (8009a80 <HAL_RCC_OscConfig+0x76c>)
 80098c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098c6:	4a6e      	ldr	r2, [pc, #440]	; (8009a80 <HAL_RCC_OscConfig+0x76c>)
 80098c8:	f043 0304 	orr.w	r3, r3, #4
 80098cc:	6713      	str	r3, [r2, #112]	; 0x70
 80098ce:	4b6c      	ldr	r3, [pc, #432]	; (8009a80 <HAL_RCC_OscConfig+0x76c>)
 80098d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098d2:	4a6b      	ldr	r2, [pc, #428]	; (8009a80 <HAL_RCC_OscConfig+0x76c>)
 80098d4:	f043 0301 	orr.w	r3, r3, #1
 80098d8:	6713      	str	r3, [r2, #112]	; 0x70
 80098da:	e00b      	b.n	80098f4 <HAL_RCC_OscConfig+0x5e0>
 80098dc:	4b68      	ldr	r3, [pc, #416]	; (8009a80 <HAL_RCC_OscConfig+0x76c>)
 80098de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098e0:	4a67      	ldr	r2, [pc, #412]	; (8009a80 <HAL_RCC_OscConfig+0x76c>)
 80098e2:	f023 0301 	bic.w	r3, r3, #1
 80098e6:	6713      	str	r3, [r2, #112]	; 0x70
 80098e8:	4b65      	ldr	r3, [pc, #404]	; (8009a80 <HAL_RCC_OscConfig+0x76c>)
 80098ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098ec:	4a64      	ldr	r2, [pc, #400]	; (8009a80 <HAL_RCC_OscConfig+0x76c>)
 80098ee:	f023 0304 	bic.w	r3, r3, #4
 80098f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	689b      	ldr	r3, [r3, #8]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d015      	beq.n	8009928 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80098fc:	f7f9 ffec 	bl	80038d8 <HAL_GetTick>
 8009900:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009902:	e00a      	b.n	800991a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009904:	f7f9 ffe8 	bl	80038d8 <HAL_GetTick>
 8009908:	4602      	mov	r2, r0
 800990a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800990c:	1ad3      	subs	r3, r2, r3
 800990e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009912:	4293      	cmp	r3, r2
 8009914:	d901      	bls.n	800991a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8009916:	2303      	movs	r3, #3
 8009918:	e14e      	b.n	8009bb8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800991a:	4b59      	ldr	r3, [pc, #356]	; (8009a80 <HAL_RCC_OscConfig+0x76c>)
 800991c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800991e:	f003 0302 	and.w	r3, r3, #2
 8009922:	2b00      	cmp	r3, #0
 8009924:	d0ee      	beq.n	8009904 <HAL_RCC_OscConfig+0x5f0>
 8009926:	e014      	b.n	8009952 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009928:	f7f9 ffd6 	bl	80038d8 <HAL_GetTick>
 800992c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800992e:	e00a      	b.n	8009946 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009930:	f7f9 ffd2 	bl	80038d8 <HAL_GetTick>
 8009934:	4602      	mov	r2, r0
 8009936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009938:	1ad3      	subs	r3, r2, r3
 800993a:	f241 3288 	movw	r2, #5000	; 0x1388
 800993e:	4293      	cmp	r3, r2
 8009940:	d901      	bls.n	8009946 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8009942:	2303      	movs	r3, #3
 8009944:	e138      	b.n	8009bb8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009946:	4b4e      	ldr	r3, [pc, #312]	; (8009a80 <HAL_RCC_OscConfig+0x76c>)
 8009948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800994a:	f003 0302 	and.w	r3, r3, #2
 800994e:	2b00      	cmp	r3, #0
 8009950:	d1ee      	bne.n	8009930 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009956:	2b00      	cmp	r3, #0
 8009958:	f000 812d 	beq.w	8009bb6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800995c:	4b48      	ldr	r3, [pc, #288]	; (8009a80 <HAL_RCC_OscConfig+0x76c>)
 800995e:	691b      	ldr	r3, [r3, #16]
 8009960:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009964:	2b18      	cmp	r3, #24
 8009966:	f000 80bd 	beq.w	8009ae4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800996e:	2b02      	cmp	r3, #2
 8009970:	f040 809e 	bne.w	8009ab0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009974:	4b42      	ldr	r3, [pc, #264]	; (8009a80 <HAL_RCC_OscConfig+0x76c>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	4a41      	ldr	r2, [pc, #260]	; (8009a80 <HAL_RCC_OscConfig+0x76c>)
 800997a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800997e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009980:	f7f9 ffaa 	bl	80038d8 <HAL_GetTick>
 8009984:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009986:	e008      	b.n	800999a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009988:	f7f9 ffa6 	bl	80038d8 <HAL_GetTick>
 800998c:	4602      	mov	r2, r0
 800998e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009990:	1ad3      	subs	r3, r2, r3
 8009992:	2b02      	cmp	r3, #2
 8009994:	d901      	bls.n	800999a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8009996:	2303      	movs	r3, #3
 8009998:	e10e      	b.n	8009bb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800999a:	4b39      	ldr	r3, [pc, #228]	; (8009a80 <HAL_RCC_OscConfig+0x76c>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d1f0      	bne.n	8009988 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80099a6:	4b36      	ldr	r3, [pc, #216]	; (8009a80 <HAL_RCC_OscConfig+0x76c>)
 80099a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80099aa:	4b37      	ldr	r3, [pc, #220]	; (8009a88 <HAL_RCC_OscConfig+0x774>)
 80099ac:	4013      	ands	r3, r2
 80099ae:	687a      	ldr	r2, [r7, #4]
 80099b0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80099b2:	687a      	ldr	r2, [r7, #4]
 80099b4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80099b6:	0112      	lsls	r2, r2, #4
 80099b8:	430a      	orrs	r2, r1
 80099ba:	4931      	ldr	r1, [pc, #196]	; (8009a80 <HAL_RCC_OscConfig+0x76c>)
 80099bc:	4313      	orrs	r3, r2
 80099be:	628b      	str	r3, [r1, #40]	; 0x28
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099c4:	3b01      	subs	r3, #1
 80099c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099ce:	3b01      	subs	r3, #1
 80099d0:	025b      	lsls	r3, r3, #9
 80099d2:	b29b      	uxth	r3, r3
 80099d4:	431a      	orrs	r2, r3
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099da:	3b01      	subs	r3, #1
 80099dc:	041b      	lsls	r3, r3, #16
 80099de:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80099e2:	431a      	orrs	r2, r3
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099e8:	3b01      	subs	r3, #1
 80099ea:	061b      	lsls	r3, r3, #24
 80099ec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80099f0:	4923      	ldr	r1, [pc, #140]	; (8009a80 <HAL_RCC_OscConfig+0x76c>)
 80099f2:	4313      	orrs	r3, r2
 80099f4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80099f6:	4b22      	ldr	r3, [pc, #136]	; (8009a80 <HAL_RCC_OscConfig+0x76c>)
 80099f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099fa:	4a21      	ldr	r2, [pc, #132]	; (8009a80 <HAL_RCC_OscConfig+0x76c>)
 80099fc:	f023 0301 	bic.w	r3, r3, #1
 8009a00:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009a02:	4b1f      	ldr	r3, [pc, #124]	; (8009a80 <HAL_RCC_OscConfig+0x76c>)
 8009a04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a06:	4b21      	ldr	r3, [pc, #132]	; (8009a8c <HAL_RCC_OscConfig+0x778>)
 8009a08:	4013      	ands	r3, r2
 8009a0a:	687a      	ldr	r2, [r7, #4]
 8009a0c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009a0e:	00d2      	lsls	r2, r2, #3
 8009a10:	491b      	ldr	r1, [pc, #108]	; (8009a80 <HAL_RCC_OscConfig+0x76c>)
 8009a12:	4313      	orrs	r3, r2
 8009a14:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009a16:	4b1a      	ldr	r3, [pc, #104]	; (8009a80 <HAL_RCC_OscConfig+0x76c>)
 8009a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a1a:	f023 020c 	bic.w	r2, r3, #12
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a22:	4917      	ldr	r1, [pc, #92]	; (8009a80 <HAL_RCC_OscConfig+0x76c>)
 8009a24:	4313      	orrs	r3, r2
 8009a26:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009a28:	4b15      	ldr	r3, [pc, #84]	; (8009a80 <HAL_RCC_OscConfig+0x76c>)
 8009a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a2c:	f023 0202 	bic.w	r2, r3, #2
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a34:	4912      	ldr	r1, [pc, #72]	; (8009a80 <HAL_RCC_OscConfig+0x76c>)
 8009a36:	4313      	orrs	r3, r2
 8009a38:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009a3a:	4b11      	ldr	r3, [pc, #68]	; (8009a80 <HAL_RCC_OscConfig+0x76c>)
 8009a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a3e:	4a10      	ldr	r2, [pc, #64]	; (8009a80 <HAL_RCC_OscConfig+0x76c>)
 8009a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a44:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a46:	4b0e      	ldr	r3, [pc, #56]	; (8009a80 <HAL_RCC_OscConfig+0x76c>)
 8009a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a4a:	4a0d      	ldr	r2, [pc, #52]	; (8009a80 <HAL_RCC_OscConfig+0x76c>)
 8009a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a50:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009a52:	4b0b      	ldr	r3, [pc, #44]	; (8009a80 <HAL_RCC_OscConfig+0x76c>)
 8009a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a56:	4a0a      	ldr	r2, [pc, #40]	; (8009a80 <HAL_RCC_OscConfig+0x76c>)
 8009a58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009a5c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009a5e:	4b08      	ldr	r3, [pc, #32]	; (8009a80 <HAL_RCC_OscConfig+0x76c>)
 8009a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a62:	4a07      	ldr	r2, [pc, #28]	; (8009a80 <HAL_RCC_OscConfig+0x76c>)
 8009a64:	f043 0301 	orr.w	r3, r3, #1
 8009a68:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009a6a:	4b05      	ldr	r3, [pc, #20]	; (8009a80 <HAL_RCC_OscConfig+0x76c>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	4a04      	ldr	r2, [pc, #16]	; (8009a80 <HAL_RCC_OscConfig+0x76c>)
 8009a70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009a74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a76:	f7f9 ff2f 	bl	80038d8 <HAL_GetTick>
 8009a7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009a7c:	e011      	b.n	8009aa2 <HAL_RCC_OscConfig+0x78e>
 8009a7e:	bf00      	nop
 8009a80:	58024400 	.word	0x58024400
 8009a84:	58024800 	.word	0x58024800
 8009a88:	fffffc0c 	.word	0xfffffc0c
 8009a8c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009a90:	f7f9 ff22 	bl	80038d8 <HAL_GetTick>
 8009a94:	4602      	mov	r2, r0
 8009a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a98:	1ad3      	subs	r3, r2, r3
 8009a9a:	2b02      	cmp	r3, #2
 8009a9c:	d901      	bls.n	8009aa2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8009a9e:	2303      	movs	r3, #3
 8009aa0:	e08a      	b.n	8009bb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009aa2:	4b47      	ldr	r3, [pc, #284]	; (8009bc0 <HAL_RCC_OscConfig+0x8ac>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d0f0      	beq.n	8009a90 <HAL_RCC_OscConfig+0x77c>
 8009aae:	e082      	b.n	8009bb6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009ab0:	4b43      	ldr	r3, [pc, #268]	; (8009bc0 <HAL_RCC_OscConfig+0x8ac>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4a42      	ldr	r2, [pc, #264]	; (8009bc0 <HAL_RCC_OscConfig+0x8ac>)
 8009ab6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009aba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009abc:	f7f9 ff0c 	bl	80038d8 <HAL_GetTick>
 8009ac0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009ac2:	e008      	b.n	8009ad6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009ac4:	f7f9 ff08 	bl	80038d8 <HAL_GetTick>
 8009ac8:	4602      	mov	r2, r0
 8009aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009acc:	1ad3      	subs	r3, r2, r3
 8009ace:	2b02      	cmp	r3, #2
 8009ad0:	d901      	bls.n	8009ad6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8009ad2:	2303      	movs	r3, #3
 8009ad4:	e070      	b.n	8009bb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009ad6:	4b3a      	ldr	r3, [pc, #232]	; (8009bc0 <HAL_RCC_OscConfig+0x8ac>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d1f0      	bne.n	8009ac4 <HAL_RCC_OscConfig+0x7b0>
 8009ae2:	e068      	b.n	8009bb6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009ae4:	4b36      	ldr	r3, [pc, #216]	; (8009bc0 <HAL_RCC_OscConfig+0x8ac>)
 8009ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ae8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009aea:	4b35      	ldr	r3, [pc, #212]	; (8009bc0 <HAL_RCC_OscConfig+0x8ac>)
 8009aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aee:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009af4:	2b01      	cmp	r3, #1
 8009af6:	d031      	beq.n	8009b5c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	f003 0203 	and.w	r2, r3, #3
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009b02:	429a      	cmp	r2, r3
 8009b04:	d12a      	bne.n	8009b5c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	091b      	lsrs	r3, r3, #4
 8009b0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009b12:	429a      	cmp	r2, r3
 8009b14:	d122      	bne.n	8009b5c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b20:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009b22:	429a      	cmp	r2, r3
 8009b24:	d11a      	bne.n	8009b5c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	0a5b      	lsrs	r3, r3, #9
 8009b2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b32:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009b34:	429a      	cmp	r2, r3
 8009b36:	d111      	bne.n	8009b5c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	0c1b      	lsrs	r3, r3, #16
 8009b3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b44:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009b46:	429a      	cmp	r2, r3
 8009b48:	d108      	bne.n	8009b5c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	0e1b      	lsrs	r3, r3, #24
 8009b4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b56:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009b58:	429a      	cmp	r2, r3
 8009b5a:	d001      	beq.n	8009b60 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	e02b      	b.n	8009bb8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009b60:	4b17      	ldr	r3, [pc, #92]	; (8009bc0 <HAL_RCC_OscConfig+0x8ac>)
 8009b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b64:	08db      	lsrs	r3, r3, #3
 8009b66:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009b6a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b70:	693a      	ldr	r2, [r7, #16]
 8009b72:	429a      	cmp	r2, r3
 8009b74:	d01f      	beq.n	8009bb6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8009b76:	4b12      	ldr	r3, [pc, #72]	; (8009bc0 <HAL_RCC_OscConfig+0x8ac>)
 8009b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b7a:	4a11      	ldr	r2, [pc, #68]	; (8009bc0 <HAL_RCC_OscConfig+0x8ac>)
 8009b7c:	f023 0301 	bic.w	r3, r3, #1
 8009b80:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009b82:	f7f9 fea9 	bl	80038d8 <HAL_GetTick>
 8009b86:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009b88:	bf00      	nop
 8009b8a:	f7f9 fea5 	bl	80038d8 <HAL_GetTick>
 8009b8e:	4602      	mov	r2, r0
 8009b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b92:	4293      	cmp	r3, r2
 8009b94:	d0f9      	beq.n	8009b8a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009b96:	4b0a      	ldr	r3, [pc, #40]	; (8009bc0 <HAL_RCC_OscConfig+0x8ac>)
 8009b98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b9a:	4b0a      	ldr	r3, [pc, #40]	; (8009bc4 <HAL_RCC_OscConfig+0x8b0>)
 8009b9c:	4013      	ands	r3, r2
 8009b9e:	687a      	ldr	r2, [r7, #4]
 8009ba0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009ba2:	00d2      	lsls	r2, r2, #3
 8009ba4:	4906      	ldr	r1, [pc, #24]	; (8009bc0 <HAL_RCC_OscConfig+0x8ac>)
 8009ba6:	4313      	orrs	r3, r2
 8009ba8:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009baa:	4b05      	ldr	r3, [pc, #20]	; (8009bc0 <HAL_RCC_OscConfig+0x8ac>)
 8009bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bae:	4a04      	ldr	r2, [pc, #16]	; (8009bc0 <HAL_RCC_OscConfig+0x8ac>)
 8009bb0:	f043 0301 	orr.w	r3, r3, #1
 8009bb4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8009bb6:	2300      	movs	r3, #0
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	3730      	adds	r7, #48	; 0x30
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}
 8009bc0:	58024400 	.word	0x58024400
 8009bc4:	ffff0007 	.word	0xffff0007

08009bc8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b086      	sub	sp, #24
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
 8009bd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d101      	bne.n	8009bdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009bd8:	2301      	movs	r3, #1
 8009bda:	e19c      	b.n	8009f16 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009bdc:	4b8a      	ldr	r3, [pc, #552]	; (8009e08 <HAL_RCC_ClockConfig+0x240>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f003 030f 	and.w	r3, r3, #15
 8009be4:	683a      	ldr	r2, [r7, #0]
 8009be6:	429a      	cmp	r2, r3
 8009be8:	d910      	bls.n	8009c0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009bea:	4b87      	ldr	r3, [pc, #540]	; (8009e08 <HAL_RCC_ClockConfig+0x240>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f023 020f 	bic.w	r2, r3, #15
 8009bf2:	4985      	ldr	r1, [pc, #532]	; (8009e08 <HAL_RCC_ClockConfig+0x240>)
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	4313      	orrs	r3, r2
 8009bf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009bfa:	4b83      	ldr	r3, [pc, #524]	; (8009e08 <HAL_RCC_ClockConfig+0x240>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f003 030f 	and.w	r3, r3, #15
 8009c02:	683a      	ldr	r2, [r7, #0]
 8009c04:	429a      	cmp	r2, r3
 8009c06:	d001      	beq.n	8009c0c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009c08:	2301      	movs	r3, #1
 8009c0a:	e184      	b.n	8009f16 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f003 0304 	and.w	r3, r3, #4
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d010      	beq.n	8009c3a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	691a      	ldr	r2, [r3, #16]
 8009c1c:	4b7b      	ldr	r3, [pc, #492]	; (8009e0c <HAL_RCC_ClockConfig+0x244>)
 8009c1e:	699b      	ldr	r3, [r3, #24]
 8009c20:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009c24:	429a      	cmp	r2, r3
 8009c26:	d908      	bls.n	8009c3a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009c28:	4b78      	ldr	r3, [pc, #480]	; (8009e0c <HAL_RCC_ClockConfig+0x244>)
 8009c2a:	699b      	ldr	r3, [r3, #24]
 8009c2c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	691b      	ldr	r3, [r3, #16]
 8009c34:	4975      	ldr	r1, [pc, #468]	; (8009e0c <HAL_RCC_ClockConfig+0x244>)
 8009c36:	4313      	orrs	r3, r2
 8009c38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f003 0308 	and.w	r3, r3, #8
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d010      	beq.n	8009c68 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	695a      	ldr	r2, [r3, #20]
 8009c4a:	4b70      	ldr	r3, [pc, #448]	; (8009e0c <HAL_RCC_ClockConfig+0x244>)
 8009c4c:	69db      	ldr	r3, [r3, #28]
 8009c4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009c52:	429a      	cmp	r2, r3
 8009c54:	d908      	bls.n	8009c68 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009c56:	4b6d      	ldr	r3, [pc, #436]	; (8009e0c <HAL_RCC_ClockConfig+0x244>)
 8009c58:	69db      	ldr	r3, [r3, #28]
 8009c5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	695b      	ldr	r3, [r3, #20]
 8009c62:	496a      	ldr	r1, [pc, #424]	; (8009e0c <HAL_RCC_ClockConfig+0x244>)
 8009c64:	4313      	orrs	r3, r2
 8009c66:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f003 0310 	and.w	r3, r3, #16
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d010      	beq.n	8009c96 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	699a      	ldr	r2, [r3, #24]
 8009c78:	4b64      	ldr	r3, [pc, #400]	; (8009e0c <HAL_RCC_ClockConfig+0x244>)
 8009c7a:	69db      	ldr	r3, [r3, #28]
 8009c7c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009c80:	429a      	cmp	r2, r3
 8009c82:	d908      	bls.n	8009c96 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009c84:	4b61      	ldr	r3, [pc, #388]	; (8009e0c <HAL_RCC_ClockConfig+0x244>)
 8009c86:	69db      	ldr	r3, [r3, #28]
 8009c88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	699b      	ldr	r3, [r3, #24]
 8009c90:	495e      	ldr	r1, [pc, #376]	; (8009e0c <HAL_RCC_ClockConfig+0x244>)
 8009c92:	4313      	orrs	r3, r2
 8009c94:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f003 0320 	and.w	r3, r3, #32
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d010      	beq.n	8009cc4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	69da      	ldr	r2, [r3, #28]
 8009ca6:	4b59      	ldr	r3, [pc, #356]	; (8009e0c <HAL_RCC_ClockConfig+0x244>)
 8009ca8:	6a1b      	ldr	r3, [r3, #32]
 8009caa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009cae:	429a      	cmp	r2, r3
 8009cb0:	d908      	bls.n	8009cc4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009cb2:	4b56      	ldr	r3, [pc, #344]	; (8009e0c <HAL_RCC_ClockConfig+0x244>)
 8009cb4:	6a1b      	ldr	r3, [r3, #32]
 8009cb6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	69db      	ldr	r3, [r3, #28]
 8009cbe:	4953      	ldr	r1, [pc, #332]	; (8009e0c <HAL_RCC_ClockConfig+0x244>)
 8009cc0:	4313      	orrs	r3, r2
 8009cc2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f003 0302 	and.w	r3, r3, #2
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d010      	beq.n	8009cf2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	68da      	ldr	r2, [r3, #12]
 8009cd4:	4b4d      	ldr	r3, [pc, #308]	; (8009e0c <HAL_RCC_ClockConfig+0x244>)
 8009cd6:	699b      	ldr	r3, [r3, #24]
 8009cd8:	f003 030f 	and.w	r3, r3, #15
 8009cdc:	429a      	cmp	r2, r3
 8009cde:	d908      	bls.n	8009cf2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009ce0:	4b4a      	ldr	r3, [pc, #296]	; (8009e0c <HAL_RCC_ClockConfig+0x244>)
 8009ce2:	699b      	ldr	r3, [r3, #24]
 8009ce4:	f023 020f 	bic.w	r2, r3, #15
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	68db      	ldr	r3, [r3, #12]
 8009cec:	4947      	ldr	r1, [pc, #284]	; (8009e0c <HAL_RCC_ClockConfig+0x244>)
 8009cee:	4313      	orrs	r3, r2
 8009cf0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f003 0301 	and.w	r3, r3, #1
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d055      	beq.n	8009daa <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009cfe:	4b43      	ldr	r3, [pc, #268]	; (8009e0c <HAL_RCC_ClockConfig+0x244>)
 8009d00:	699b      	ldr	r3, [r3, #24]
 8009d02:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	689b      	ldr	r3, [r3, #8]
 8009d0a:	4940      	ldr	r1, [pc, #256]	; (8009e0c <HAL_RCC_ClockConfig+0x244>)
 8009d0c:	4313      	orrs	r3, r2
 8009d0e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	685b      	ldr	r3, [r3, #4]
 8009d14:	2b02      	cmp	r3, #2
 8009d16:	d107      	bne.n	8009d28 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009d18:	4b3c      	ldr	r3, [pc, #240]	; (8009e0c <HAL_RCC_ClockConfig+0x244>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d121      	bne.n	8009d68 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009d24:	2301      	movs	r3, #1
 8009d26:	e0f6      	b.n	8009f16 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	685b      	ldr	r3, [r3, #4]
 8009d2c:	2b03      	cmp	r3, #3
 8009d2e:	d107      	bne.n	8009d40 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009d30:	4b36      	ldr	r3, [pc, #216]	; (8009e0c <HAL_RCC_ClockConfig+0x244>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d115      	bne.n	8009d68 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	e0ea      	b.n	8009f16 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	685b      	ldr	r3, [r3, #4]
 8009d44:	2b01      	cmp	r3, #1
 8009d46:	d107      	bne.n	8009d58 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009d48:	4b30      	ldr	r3, [pc, #192]	; (8009e0c <HAL_RCC_ClockConfig+0x244>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d109      	bne.n	8009d68 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009d54:	2301      	movs	r3, #1
 8009d56:	e0de      	b.n	8009f16 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009d58:	4b2c      	ldr	r3, [pc, #176]	; (8009e0c <HAL_RCC_ClockConfig+0x244>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f003 0304 	and.w	r3, r3, #4
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d101      	bne.n	8009d68 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009d64:	2301      	movs	r3, #1
 8009d66:	e0d6      	b.n	8009f16 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009d68:	4b28      	ldr	r3, [pc, #160]	; (8009e0c <HAL_RCC_ClockConfig+0x244>)
 8009d6a:	691b      	ldr	r3, [r3, #16]
 8009d6c:	f023 0207 	bic.w	r2, r3, #7
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	685b      	ldr	r3, [r3, #4]
 8009d74:	4925      	ldr	r1, [pc, #148]	; (8009e0c <HAL_RCC_ClockConfig+0x244>)
 8009d76:	4313      	orrs	r3, r2
 8009d78:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d7a:	f7f9 fdad 	bl	80038d8 <HAL_GetTick>
 8009d7e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009d80:	e00a      	b.n	8009d98 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009d82:	f7f9 fda9 	bl	80038d8 <HAL_GetTick>
 8009d86:	4602      	mov	r2, r0
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	1ad3      	subs	r3, r2, r3
 8009d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d90:	4293      	cmp	r3, r2
 8009d92:	d901      	bls.n	8009d98 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009d94:	2303      	movs	r3, #3
 8009d96:	e0be      	b.n	8009f16 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009d98:	4b1c      	ldr	r3, [pc, #112]	; (8009e0c <HAL_RCC_ClockConfig+0x244>)
 8009d9a:	691b      	ldr	r3, [r3, #16]
 8009d9c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	685b      	ldr	r3, [r3, #4]
 8009da4:	00db      	lsls	r3, r3, #3
 8009da6:	429a      	cmp	r2, r3
 8009da8:	d1eb      	bne.n	8009d82 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f003 0302 	and.w	r3, r3, #2
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d010      	beq.n	8009dd8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	68da      	ldr	r2, [r3, #12]
 8009dba:	4b14      	ldr	r3, [pc, #80]	; (8009e0c <HAL_RCC_ClockConfig+0x244>)
 8009dbc:	699b      	ldr	r3, [r3, #24]
 8009dbe:	f003 030f 	and.w	r3, r3, #15
 8009dc2:	429a      	cmp	r2, r3
 8009dc4:	d208      	bcs.n	8009dd8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009dc6:	4b11      	ldr	r3, [pc, #68]	; (8009e0c <HAL_RCC_ClockConfig+0x244>)
 8009dc8:	699b      	ldr	r3, [r3, #24]
 8009dca:	f023 020f 	bic.w	r2, r3, #15
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	68db      	ldr	r3, [r3, #12]
 8009dd2:	490e      	ldr	r1, [pc, #56]	; (8009e0c <HAL_RCC_ClockConfig+0x244>)
 8009dd4:	4313      	orrs	r3, r2
 8009dd6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009dd8:	4b0b      	ldr	r3, [pc, #44]	; (8009e08 <HAL_RCC_ClockConfig+0x240>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f003 030f 	and.w	r3, r3, #15
 8009de0:	683a      	ldr	r2, [r7, #0]
 8009de2:	429a      	cmp	r2, r3
 8009de4:	d214      	bcs.n	8009e10 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009de6:	4b08      	ldr	r3, [pc, #32]	; (8009e08 <HAL_RCC_ClockConfig+0x240>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f023 020f 	bic.w	r2, r3, #15
 8009dee:	4906      	ldr	r1, [pc, #24]	; (8009e08 <HAL_RCC_ClockConfig+0x240>)
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	4313      	orrs	r3, r2
 8009df4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009df6:	4b04      	ldr	r3, [pc, #16]	; (8009e08 <HAL_RCC_ClockConfig+0x240>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f003 030f 	and.w	r3, r3, #15
 8009dfe:	683a      	ldr	r2, [r7, #0]
 8009e00:	429a      	cmp	r2, r3
 8009e02:	d005      	beq.n	8009e10 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009e04:	2301      	movs	r3, #1
 8009e06:	e086      	b.n	8009f16 <HAL_RCC_ClockConfig+0x34e>
 8009e08:	52002000 	.word	0x52002000
 8009e0c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f003 0304 	and.w	r3, r3, #4
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d010      	beq.n	8009e3e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	691a      	ldr	r2, [r3, #16]
 8009e20:	4b3f      	ldr	r3, [pc, #252]	; (8009f20 <HAL_RCC_ClockConfig+0x358>)
 8009e22:	699b      	ldr	r3, [r3, #24]
 8009e24:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009e28:	429a      	cmp	r2, r3
 8009e2a:	d208      	bcs.n	8009e3e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009e2c:	4b3c      	ldr	r3, [pc, #240]	; (8009f20 <HAL_RCC_ClockConfig+0x358>)
 8009e2e:	699b      	ldr	r3, [r3, #24]
 8009e30:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	691b      	ldr	r3, [r3, #16]
 8009e38:	4939      	ldr	r1, [pc, #228]	; (8009f20 <HAL_RCC_ClockConfig+0x358>)
 8009e3a:	4313      	orrs	r3, r2
 8009e3c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f003 0308 	and.w	r3, r3, #8
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d010      	beq.n	8009e6c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	695a      	ldr	r2, [r3, #20]
 8009e4e:	4b34      	ldr	r3, [pc, #208]	; (8009f20 <HAL_RCC_ClockConfig+0x358>)
 8009e50:	69db      	ldr	r3, [r3, #28]
 8009e52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009e56:	429a      	cmp	r2, r3
 8009e58:	d208      	bcs.n	8009e6c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009e5a:	4b31      	ldr	r3, [pc, #196]	; (8009f20 <HAL_RCC_ClockConfig+0x358>)
 8009e5c:	69db      	ldr	r3, [r3, #28]
 8009e5e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	695b      	ldr	r3, [r3, #20]
 8009e66:	492e      	ldr	r1, [pc, #184]	; (8009f20 <HAL_RCC_ClockConfig+0x358>)
 8009e68:	4313      	orrs	r3, r2
 8009e6a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f003 0310 	and.w	r3, r3, #16
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d010      	beq.n	8009e9a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	699a      	ldr	r2, [r3, #24]
 8009e7c:	4b28      	ldr	r3, [pc, #160]	; (8009f20 <HAL_RCC_ClockConfig+0x358>)
 8009e7e:	69db      	ldr	r3, [r3, #28]
 8009e80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009e84:	429a      	cmp	r2, r3
 8009e86:	d208      	bcs.n	8009e9a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009e88:	4b25      	ldr	r3, [pc, #148]	; (8009f20 <HAL_RCC_ClockConfig+0x358>)
 8009e8a:	69db      	ldr	r3, [r3, #28]
 8009e8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	699b      	ldr	r3, [r3, #24]
 8009e94:	4922      	ldr	r1, [pc, #136]	; (8009f20 <HAL_RCC_ClockConfig+0x358>)
 8009e96:	4313      	orrs	r3, r2
 8009e98:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f003 0320 	and.w	r3, r3, #32
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d010      	beq.n	8009ec8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	69da      	ldr	r2, [r3, #28]
 8009eaa:	4b1d      	ldr	r3, [pc, #116]	; (8009f20 <HAL_RCC_ClockConfig+0x358>)
 8009eac:	6a1b      	ldr	r3, [r3, #32]
 8009eae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009eb2:	429a      	cmp	r2, r3
 8009eb4:	d208      	bcs.n	8009ec8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009eb6:	4b1a      	ldr	r3, [pc, #104]	; (8009f20 <HAL_RCC_ClockConfig+0x358>)
 8009eb8:	6a1b      	ldr	r3, [r3, #32]
 8009eba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	69db      	ldr	r3, [r3, #28]
 8009ec2:	4917      	ldr	r1, [pc, #92]	; (8009f20 <HAL_RCC_ClockConfig+0x358>)
 8009ec4:	4313      	orrs	r3, r2
 8009ec6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009ec8:	f000 f844 	bl	8009f54 <HAL_RCC_GetSysClockFreq>
 8009ecc:	4602      	mov	r2, r0
 8009ece:	4b14      	ldr	r3, [pc, #80]	; (8009f20 <HAL_RCC_ClockConfig+0x358>)
 8009ed0:	699b      	ldr	r3, [r3, #24]
 8009ed2:	0a1b      	lsrs	r3, r3, #8
 8009ed4:	f003 030f 	and.w	r3, r3, #15
 8009ed8:	4912      	ldr	r1, [pc, #72]	; (8009f24 <HAL_RCC_ClockConfig+0x35c>)
 8009eda:	5ccb      	ldrb	r3, [r1, r3]
 8009edc:	f003 031f 	and.w	r3, r3, #31
 8009ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8009ee4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009ee6:	4b0e      	ldr	r3, [pc, #56]	; (8009f20 <HAL_RCC_ClockConfig+0x358>)
 8009ee8:	699b      	ldr	r3, [r3, #24]
 8009eea:	f003 030f 	and.w	r3, r3, #15
 8009eee:	4a0d      	ldr	r2, [pc, #52]	; (8009f24 <HAL_RCC_ClockConfig+0x35c>)
 8009ef0:	5cd3      	ldrb	r3, [r2, r3]
 8009ef2:	f003 031f 	and.w	r3, r3, #31
 8009ef6:	693a      	ldr	r2, [r7, #16]
 8009ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8009efc:	4a0a      	ldr	r2, [pc, #40]	; (8009f28 <HAL_RCC_ClockConfig+0x360>)
 8009efe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009f00:	4a0a      	ldr	r2, [pc, #40]	; (8009f2c <HAL_RCC_ClockConfig+0x364>)
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8009f06:	4b0a      	ldr	r3, [pc, #40]	; (8009f30 <HAL_RCC_ClockConfig+0x368>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f7f9 fc9a 	bl	8003844 <HAL_InitTick>
 8009f10:	4603      	mov	r3, r0
 8009f12:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	3718      	adds	r7, #24
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}
 8009f1e:	bf00      	nop
 8009f20:	58024400 	.word	0x58024400
 8009f24:	0801e6d0 	.word	0x0801e6d0
 8009f28:	20000014 	.word	0x20000014
 8009f2c:	20000010 	.word	0x20000010
 8009f30:	20000024 	.word	0x20000024

08009f34 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8009f34:	b480      	push	{r7}
 8009f36:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 8009f38:	4b05      	ldr	r3, [pc, #20]	; (8009f50 <HAL_RCC_EnableCSS+0x1c>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	4a04      	ldr	r2, [pc, #16]	; (8009f50 <HAL_RCC_EnableCSS+0x1c>)
 8009f3e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009f42:	6013      	str	r3, [r2, #0]
}
 8009f44:	bf00      	nop
 8009f46:	46bd      	mov	sp, r7
 8009f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4c:	4770      	bx	lr
 8009f4e:	bf00      	nop
 8009f50:	58024400 	.word	0x58024400

08009f54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009f54:	b480      	push	{r7}
 8009f56:	b089      	sub	sp, #36	; 0x24
 8009f58:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009f5a:	4bb3      	ldr	r3, [pc, #716]	; (800a228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f5c:	691b      	ldr	r3, [r3, #16]
 8009f5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f62:	2b18      	cmp	r3, #24
 8009f64:	f200 8155 	bhi.w	800a212 <HAL_RCC_GetSysClockFreq+0x2be>
 8009f68:	a201      	add	r2, pc, #4	; (adr r2, 8009f70 <HAL_RCC_GetSysClockFreq+0x1c>)
 8009f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f6e:	bf00      	nop
 8009f70:	08009fd5 	.word	0x08009fd5
 8009f74:	0800a213 	.word	0x0800a213
 8009f78:	0800a213 	.word	0x0800a213
 8009f7c:	0800a213 	.word	0x0800a213
 8009f80:	0800a213 	.word	0x0800a213
 8009f84:	0800a213 	.word	0x0800a213
 8009f88:	0800a213 	.word	0x0800a213
 8009f8c:	0800a213 	.word	0x0800a213
 8009f90:	08009ffb 	.word	0x08009ffb
 8009f94:	0800a213 	.word	0x0800a213
 8009f98:	0800a213 	.word	0x0800a213
 8009f9c:	0800a213 	.word	0x0800a213
 8009fa0:	0800a213 	.word	0x0800a213
 8009fa4:	0800a213 	.word	0x0800a213
 8009fa8:	0800a213 	.word	0x0800a213
 8009fac:	0800a213 	.word	0x0800a213
 8009fb0:	0800a001 	.word	0x0800a001
 8009fb4:	0800a213 	.word	0x0800a213
 8009fb8:	0800a213 	.word	0x0800a213
 8009fbc:	0800a213 	.word	0x0800a213
 8009fc0:	0800a213 	.word	0x0800a213
 8009fc4:	0800a213 	.word	0x0800a213
 8009fc8:	0800a213 	.word	0x0800a213
 8009fcc:	0800a213 	.word	0x0800a213
 8009fd0:	0800a007 	.word	0x0800a007
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009fd4:	4b94      	ldr	r3, [pc, #592]	; (800a228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f003 0320 	and.w	r3, r3, #32
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d009      	beq.n	8009ff4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009fe0:	4b91      	ldr	r3, [pc, #580]	; (800a228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	08db      	lsrs	r3, r3, #3
 8009fe6:	f003 0303 	and.w	r3, r3, #3
 8009fea:	4a90      	ldr	r2, [pc, #576]	; (800a22c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009fec:	fa22 f303 	lsr.w	r3, r2, r3
 8009ff0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8009ff2:	e111      	b.n	800a218 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009ff4:	4b8d      	ldr	r3, [pc, #564]	; (800a22c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009ff6:	61bb      	str	r3, [r7, #24]
      break;
 8009ff8:	e10e      	b.n	800a218 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8009ffa:	4b8d      	ldr	r3, [pc, #564]	; (800a230 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009ffc:	61bb      	str	r3, [r7, #24]
      break;
 8009ffe:	e10b      	b.n	800a218 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a000:	4b8c      	ldr	r3, [pc, #560]	; (800a234 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a002:	61bb      	str	r3, [r7, #24]
      break;
 800a004:	e108      	b.n	800a218 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a006:	4b88      	ldr	r3, [pc, #544]	; (800a228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a00a:	f003 0303 	and.w	r3, r3, #3
 800a00e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a010:	4b85      	ldr	r3, [pc, #532]	; (800a228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a014:	091b      	lsrs	r3, r3, #4
 800a016:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a01a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a01c:	4b82      	ldr	r3, [pc, #520]	; (800a228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a01e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a020:	f003 0301 	and.w	r3, r3, #1
 800a024:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a026:	4b80      	ldr	r3, [pc, #512]	; (800a228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a02a:	08db      	lsrs	r3, r3, #3
 800a02c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a030:	68fa      	ldr	r2, [r7, #12]
 800a032:	fb02 f303 	mul.w	r3, r2, r3
 800a036:	ee07 3a90 	vmov	s15, r3
 800a03a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a03e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	2b00      	cmp	r3, #0
 800a046:	f000 80e1 	beq.w	800a20c <HAL_RCC_GetSysClockFreq+0x2b8>
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	2b02      	cmp	r3, #2
 800a04e:	f000 8083 	beq.w	800a158 <HAL_RCC_GetSysClockFreq+0x204>
 800a052:	697b      	ldr	r3, [r7, #20]
 800a054:	2b02      	cmp	r3, #2
 800a056:	f200 80a1 	bhi.w	800a19c <HAL_RCC_GetSysClockFreq+0x248>
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d003      	beq.n	800a068 <HAL_RCC_GetSysClockFreq+0x114>
 800a060:	697b      	ldr	r3, [r7, #20]
 800a062:	2b01      	cmp	r3, #1
 800a064:	d056      	beq.n	800a114 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a066:	e099      	b.n	800a19c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a068:	4b6f      	ldr	r3, [pc, #444]	; (800a228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f003 0320 	and.w	r3, r3, #32
 800a070:	2b00      	cmp	r3, #0
 800a072:	d02d      	beq.n	800a0d0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a074:	4b6c      	ldr	r3, [pc, #432]	; (800a228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	08db      	lsrs	r3, r3, #3
 800a07a:	f003 0303 	and.w	r3, r3, #3
 800a07e:	4a6b      	ldr	r2, [pc, #428]	; (800a22c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a080:	fa22 f303 	lsr.w	r3, r2, r3
 800a084:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	ee07 3a90 	vmov	s15, r3
 800a08c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a090:	693b      	ldr	r3, [r7, #16]
 800a092:	ee07 3a90 	vmov	s15, r3
 800a096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a09a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a09e:	4b62      	ldr	r3, [pc, #392]	; (800a228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a0a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0a6:	ee07 3a90 	vmov	s15, r3
 800a0aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0ae:	ed97 6a02 	vldr	s12, [r7, #8]
 800a0b2:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a238 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a0b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0ca:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a0ce:	e087      	b.n	800a1e0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a0d0:	693b      	ldr	r3, [r7, #16]
 800a0d2:	ee07 3a90 	vmov	s15, r3
 800a0d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0da:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a23c <HAL_RCC_GetSysClockFreq+0x2e8>
 800a0de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0e2:	4b51      	ldr	r3, [pc, #324]	; (800a228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a0e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0ea:	ee07 3a90 	vmov	s15, r3
 800a0ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0f2:	ed97 6a02 	vldr	s12, [r7, #8]
 800a0f6:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a238 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a0fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a102:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a106:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a10a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a10e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a112:	e065      	b.n	800a1e0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a114:	693b      	ldr	r3, [r7, #16]
 800a116:	ee07 3a90 	vmov	s15, r3
 800a11a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a11e:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a240 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a122:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a126:	4b40      	ldr	r3, [pc, #256]	; (800a228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a12a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a12e:	ee07 3a90 	vmov	s15, r3
 800a132:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a136:	ed97 6a02 	vldr	s12, [r7, #8]
 800a13a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a238 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a13e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a142:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a146:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a14a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a14e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a152:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a156:	e043      	b.n	800a1e0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a158:	693b      	ldr	r3, [r7, #16]
 800a15a:	ee07 3a90 	vmov	s15, r3
 800a15e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a162:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a244 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a166:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a16a:	4b2f      	ldr	r3, [pc, #188]	; (800a228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a16c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a16e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a172:	ee07 3a90 	vmov	s15, r3
 800a176:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a17a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a17e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a238 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a182:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a186:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a18a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a18e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a192:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a196:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a19a:	e021      	b.n	800a1e0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a19c:	693b      	ldr	r3, [r7, #16]
 800a19e:	ee07 3a90 	vmov	s15, r3
 800a1a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1a6:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a240 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a1aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1ae:	4b1e      	ldr	r3, [pc, #120]	; (800a228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a1b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1b6:	ee07 3a90 	vmov	s15, r3
 800a1ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1be:	ed97 6a02 	vldr	s12, [r7, #8]
 800a1c2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a238 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a1c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a1de:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a1e0:	4b11      	ldr	r3, [pc, #68]	; (800a228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a1e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1e4:	0a5b      	lsrs	r3, r3, #9
 800a1e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1ea:	3301      	adds	r3, #1
 800a1ec:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	ee07 3a90 	vmov	s15, r3
 800a1f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a1f8:	edd7 6a07 	vldr	s13, [r7, #28]
 800a1fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a200:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a204:	ee17 3a90 	vmov	r3, s15
 800a208:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a20a:	e005      	b.n	800a218 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a20c:	2300      	movs	r3, #0
 800a20e:	61bb      	str	r3, [r7, #24]
      break;
 800a210:	e002      	b.n	800a218 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a212:	4b07      	ldr	r3, [pc, #28]	; (800a230 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a214:	61bb      	str	r3, [r7, #24]
      break;
 800a216:	bf00      	nop
  }

  return sysclockfreq;
 800a218:	69bb      	ldr	r3, [r7, #24]
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3724      	adds	r7, #36	; 0x24
 800a21e:	46bd      	mov	sp, r7
 800a220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a224:	4770      	bx	lr
 800a226:	bf00      	nop
 800a228:	58024400 	.word	0x58024400
 800a22c:	03d09000 	.word	0x03d09000
 800a230:	003d0900 	.word	0x003d0900
 800a234:	00989680 	.word	0x00989680
 800a238:	46000000 	.word	0x46000000
 800a23c:	4c742400 	.word	0x4c742400
 800a240:	4a742400 	.word	0x4a742400
 800a244:	4b189680 	.word	0x4b189680

0800a248 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b082      	sub	sp, #8
 800a24c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a24e:	f7ff fe81 	bl	8009f54 <HAL_RCC_GetSysClockFreq>
 800a252:	4602      	mov	r2, r0
 800a254:	4b10      	ldr	r3, [pc, #64]	; (800a298 <HAL_RCC_GetHCLKFreq+0x50>)
 800a256:	699b      	ldr	r3, [r3, #24]
 800a258:	0a1b      	lsrs	r3, r3, #8
 800a25a:	f003 030f 	and.w	r3, r3, #15
 800a25e:	490f      	ldr	r1, [pc, #60]	; (800a29c <HAL_RCC_GetHCLKFreq+0x54>)
 800a260:	5ccb      	ldrb	r3, [r1, r3]
 800a262:	f003 031f 	and.w	r3, r3, #31
 800a266:	fa22 f303 	lsr.w	r3, r2, r3
 800a26a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a26c:	4b0a      	ldr	r3, [pc, #40]	; (800a298 <HAL_RCC_GetHCLKFreq+0x50>)
 800a26e:	699b      	ldr	r3, [r3, #24]
 800a270:	f003 030f 	and.w	r3, r3, #15
 800a274:	4a09      	ldr	r2, [pc, #36]	; (800a29c <HAL_RCC_GetHCLKFreq+0x54>)
 800a276:	5cd3      	ldrb	r3, [r2, r3]
 800a278:	f003 031f 	and.w	r3, r3, #31
 800a27c:	687a      	ldr	r2, [r7, #4]
 800a27e:	fa22 f303 	lsr.w	r3, r2, r3
 800a282:	4a07      	ldr	r2, [pc, #28]	; (800a2a0 <HAL_RCC_GetHCLKFreq+0x58>)
 800a284:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a286:	4a07      	ldr	r2, [pc, #28]	; (800a2a4 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a28c:	4b04      	ldr	r3, [pc, #16]	; (800a2a0 <HAL_RCC_GetHCLKFreq+0x58>)
 800a28e:	681b      	ldr	r3, [r3, #0]
}
 800a290:	4618      	mov	r0, r3
 800a292:	3708      	adds	r7, #8
 800a294:	46bd      	mov	sp, r7
 800a296:	bd80      	pop	{r7, pc}
 800a298:	58024400 	.word	0x58024400
 800a29c:	0801e6d0 	.word	0x0801e6d0
 800a2a0:	20000014 	.word	0x20000014
 800a2a4:	20000010 	.word	0x20000010

0800a2a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a2ac:	f7ff ffcc 	bl	800a248 <HAL_RCC_GetHCLKFreq>
 800a2b0:	4602      	mov	r2, r0
 800a2b2:	4b06      	ldr	r3, [pc, #24]	; (800a2cc <HAL_RCC_GetPCLK1Freq+0x24>)
 800a2b4:	69db      	ldr	r3, [r3, #28]
 800a2b6:	091b      	lsrs	r3, r3, #4
 800a2b8:	f003 0307 	and.w	r3, r3, #7
 800a2bc:	4904      	ldr	r1, [pc, #16]	; (800a2d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a2be:	5ccb      	ldrb	r3, [r1, r3]
 800a2c0:	f003 031f 	and.w	r3, r3, #31
 800a2c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	bd80      	pop	{r7, pc}
 800a2cc:	58024400 	.word	0x58024400
 800a2d0:	0801e6d0 	.word	0x0801e6d0

0800a2d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a2d8:	f7ff ffb6 	bl	800a248 <HAL_RCC_GetHCLKFreq>
 800a2dc:	4602      	mov	r2, r0
 800a2de:	4b06      	ldr	r3, [pc, #24]	; (800a2f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a2e0:	69db      	ldr	r3, [r3, #28]
 800a2e2:	0a1b      	lsrs	r3, r3, #8
 800a2e4:	f003 0307 	and.w	r3, r3, #7
 800a2e8:	4904      	ldr	r1, [pc, #16]	; (800a2fc <HAL_RCC_GetPCLK2Freq+0x28>)
 800a2ea:	5ccb      	ldrb	r3, [r1, r3]
 800a2ec:	f003 031f 	and.w	r3, r3, #31
 800a2f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	bd80      	pop	{r7, pc}
 800a2f8:	58024400 	.word	0x58024400
 800a2fc:	0801e6d0 	.word	0x0801e6d0

0800a300 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 800a304:	4b07      	ldr	r3, [pc, #28]	; (800a324 <HAL_RCC_NMI_IRQHandler+0x24>)
 800a306:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a308:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a30c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a310:	d105      	bne.n	800a31e <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800a312:	f000 f809 	bl	800a328 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800a316:	4b03      	ldr	r3, [pc, #12]	; (800a324 <HAL_RCC_NMI_IRQHandler+0x24>)
 800a318:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a31c:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 800a31e:	bf00      	nop
 800a320:	bd80      	pop	{r7, pc}
 800a322:	bf00      	nop
 800a324:	58024400 	.word	0x58024400

0800a328 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800a328:	b480      	push	{r7}
 800a32a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 800a32c:	bf00      	nop
 800a32e:	46bd      	mov	sp, r7
 800a330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a334:	4770      	bx	lr
	...

0800a338 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a338:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a33c:	b0ca      	sub	sp, #296	; 0x128
 800a33e:	af00      	add	r7, sp, #0
 800a340:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a344:	2300      	movs	r3, #0
 800a346:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a34a:	2300      	movs	r3, #0
 800a34c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a350:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a354:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a358:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800a35c:	2500      	movs	r5, #0
 800a35e:	ea54 0305 	orrs.w	r3, r4, r5
 800a362:	d049      	beq.n	800a3f8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a364:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a368:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a36a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a36e:	d02f      	beq.n	800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a370:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a374:	d828      	bhi.n	800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a376:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a37a:	d01a      	beq.n	800a3b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a37c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a380:	d822      	bhi.n	800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a382:	2b00      	cmp	r3, #0
 800a384:	d003      	beq.n	800a38e <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a386:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a38a:	d007      	beq.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a38c:	e01c      	b.n	800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a38e:	4bb8      	ldr	r3, [pc, #736]	; (800a670 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a392:	4ab7      	ldr	r2, [pc, #732]	; (800a670 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a394:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a398:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a39a:	e01a      	b.n	800a3d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a39c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3a0:	3308      	adds	r3, #8
 800a3a2:	2102      	movs	r1, #2
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f002 fbb7 	bl	800cb18 <RCCEx_PLL2_Config>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a3b0:	e00f      	b.n	800a3d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a3b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3b6:	3328      	adds	r3, #40	; 0x28
 800a3b8:	2102      	movs	r1, #2
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f002 fc5e 	bl	800cc7c <RCCEx_PLL3_Config>
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a3c6:	e004      	b.n	800a3d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a3ce:	e000      	b.n	800a3d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800a3d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a3d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d10a      	bne.n	800a3f0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a3da:	4ba5      	ldr	r3, [pc, #660]	; (800a670 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a3dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3de:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a3e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a3e8:	4aa1      	ldr	r2, [pc, #644]	; (800a670 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a3ea:	430b      	orrs	r3, r1
 800a3ec:	6513      	str	r3, [r2, #80]	; 0x50
 800a3ee:	e003      	b.n	800a3f8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a3f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a3f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a400:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800a404:	f04f 0900 	mov.w	r9, #0
 800a408:	ea58 0309 	orrs.w	r3, r8, r9
 800a40c:	d047      	beq.n	800a49e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800a40e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a414:	2b04      	cmp	r3, #4
 800a416:	d82a      	bhi.n	800a46e <HAL_RCCEx_PeriphCLKConfig+0x136>
 800a418:	a201      	add	r2, pc, #4	; (adr r2, 800a420 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800a41a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a41e:	bf00      	nop
 800a420:	0800a435 	.word	0x0800a435
 800a424:	0800a443 	.word	0x0800a443
 800a428:	0800a459 	.word	0x0800a459
 800a42c:	0800a477 	.word	0x0800a477
 800a430:	0800a477 	.word	0x0800a477
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a434:	4b8e      	ldr	r3, [pc, #568]	; (800a670 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a438:	4a8d      	ldr	r2, [pc, #564]	; (800a670 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a43a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a43e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a440:	e01a      	b.n	800a478 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a442:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a446:	3308      	adds	r3, #8
 800a448:	2100      	movs	r1, #0
 800a44a:	4618      	mov	r0, r3
 800a44c:	f002 fb64 	bl	800cb18 <RCCEx_PLL2_Config>
 800a450:	4603      	mov	r3, r0
 800a452:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a456:	e00f      	b.n	800a478 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a458:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a45c:	3328      	adds	r3, #40	; 0x28
 800a45e:	2100      	movs	r1, #0
 800a460:	4618      	mov	r0, r3
 800a462:	f002 fc0b 	bl	800cc7c <RCCEx_PLL3_Config>
 800a466:	4603      	mov	r3, r0
 800a468:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a46c:	e004      	b.n	800a478 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a46e:	2301      	movs	r3, #1
 800a470:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a474:	e000      	b.n	800a478 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800a476:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a478:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d10a      	bne.n	800a496 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a480:	4b7b      	ldr	r3, [pc, #492]	; (800a670 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a482:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a484:	f023 0107 	bic.w	r1, r3, #7
 800a488:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a48c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a48e:	4a78      	ldr	r2, [pc, #480]	; (800a670 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a490:	430b      	orrs	r3, r1
 800a492:	6513      	str	r3, [r2, #80]	; 0x50
 800a494:	e003      	b.n	800a49e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a496:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a49a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800a49e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800a4aa:	f04f 0b00 	mov.w	fp, #0
 800a4ae:	ea5a 030b 	orrs.w	r3, sl, fp
 800a4b2:	d04c      	beq.n	800a54e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800a4b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4be:	d030      	beq.n	800a522 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800a4c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4c4:	d829      	bhi.n	800a51a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800a4c6:	2bc0      	cmp	r3, #192	; 0xc0
 800a4c8:	d02d      	beq.n	800a526 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800a4ca:	2bc0      	cmp	r3, #192	; 0xc0
 800a4cc:	d825      	bhi.n	800a51a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800a4ce:	2b80      	cmp	r3, #128	; 0x80
 800a4d0:	d018      	beq.n	800a504 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800a4d2:	2b80      	cmp	r3, #128	; 0x80
 800a4d4:	d821      	bhi.n	800a51a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d002      	beq.n	800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800a4da:	2b40      	cmp	r3, #64	; 0x40
 800a4dc:	d007      	beq.n	800a4ee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800a4de:	e01c      	b.n	800a51a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a4e0:	4b63      	ldr	r3, [pc, #396]	; (800a670 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a4e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4e4:	4a62      	ldr	r2, [pc, #392]	; (800a670 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a4e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a4ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800a4ec:	e01c      	b.n	800a528 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a4ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4f2:	3308      	adds	r3, #8
 800a4f4:	2100      	movs	r1, #0
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f002 fb0e 	bl	800cb18 <RCCEx_PLL2_Config>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800a502:	e011      	b.n	800a528 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a504:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a508:	3328      	adds	r3, #40	; 0x28
 800a50a:	2100      	movs	r1, #0
 800a50c:	4618      	mov	r0, r3
 800a50e:	f002 fbb5 	bl	800cc7c <RCCEx_PLL3_Config>
 800a512:	4603      	mov	r3, r0
 800a514:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800a518:	e006      	b.n	800a528 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a51a:	2301      	movs	r3, #1
 800a51c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a520:	e002      	b.n	800a528 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800a522:	bf00      	nop
 800a524:	e000      	b.n	800a528 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800a526:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a528:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d10a      	bne.n	800a546 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800a530:	4b4f      	ldr	r3, [pc, #316]	; (800a670 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a534:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800a538:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a53c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a53e:	4a4c      	ldr	r2, [pc, #304]	; (800a670 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a540:	430b      	orrs	r3, r1
 800a542:	6513      	str	r3, [r2, #80]	; 0x50
 800a544:	e003      	b.n	800a54e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a546:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a54a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a54e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a552:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a556:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800a55a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a55e:	2300      	movs	r3, #0
 800a560:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800a564:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800a568:	460b      	mov	r3, r1
 800a56a:	4313      	orrs	r3, r2
 800a56c:	d053      	beq.n	800a616 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800a56e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a572:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a576:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a57a:	d035      	beq.n	800a5e8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800a57c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a580:	d82e      	bhi.n	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a582:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a586:	d031      	beq.n	800a5ec <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800a588:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a58c:	d828      	bhi.n	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a58e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a592:	d01a      	beq.n	800a5ca <HAL_RCCEx_PeriphCLKConfig+0x292>
 800a594:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a598:	d822      	bhi.n	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d003      	beq.n	800a5a6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800a59e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a5a2:	d007      	beq.n	800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800a5a4:	e01c      	b.n	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a5a6:	4b32      	ldr	r3, [pc, #200]	; (800a670 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a5a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5aa:	4a31      	ldr	r2, [pc, #196]	; (800a670 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a5ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a5b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a5b2:	e01c      	b.n	800a5ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a5b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5b8:	3308      	adds	r3, #8
 800a5ba:	2100      	movs	r1, #0
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f002 faab 	bl	800cb18 <RCCEx_PLL2_Config>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a5c8:	e011      	b.n	800a5ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a5ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5ce:	3328      	adds	r3, #40	; 0x28
 800a5d0:	2100      	movs	r1, #0
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	f002 fb52 	bl	800cc7c <RCCEx_PLL3_Config>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a5de:	e006      	b.n	800a5ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a5e0:	2301      	movs	r3, #1
 800a5e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a5e6:	e002      	b.n	800a5ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800a5e8:	bf00      	nop
 800a5ea:	e000      	b.n	800a5ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800a5ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a5ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d10b      	bne.n	800a60e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a5f6:	4b1e      	ldr	r3, [pc, #120]	; (800a670 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a5f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5fa:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800a5fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a602:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a606:	4a1a      	ldr	r2, [pc, #104]	; (800a670 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a608:	430b      	orrs	r3, r1
 800a60a:	6593      	str	r3, [r2, #88]	; 0x58
 800a60c:	e003      	b.n	800a616 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a60e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a612:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a616:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a61a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a61e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800a622:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a626:	2300      	movs	r3, #0
 800a628:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a62c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800a630:	460b      	mov	r3, r1
 800a632:	4313      	orrs	r3, r2
 800a634:	d056      	beq.n	800a6e4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800a636:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a63a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a63e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a642:	d038      	beq.n	800a6b6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800a644:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a648:	d831      	bhi.n	800a6ae <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a64a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a64e:	d034      	beq.n	800a6ba <HAL_RCCEx_PeriphCLKConfig+0x382>
 800a650:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a654:	d82b      	bhi.n	800a6ae <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a656:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a65a:	d01d      	beq.n	800a698 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800a65c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a660:	d825      	bhi.n	800a6ae <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a662:	2b00      	cmp	r3, #0
 800a664:	d006      	beq.n	800a674 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800a666:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a66a:	d00a      	beq.n	800a682 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800a66c:	e01f      	b.n	800a6ae <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a66e:	bf00      	nop
 800a670:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a674:	4ba2      	ldr	r3, [pc, #648]	; (800a900 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a678:	4aa1      	ldr	r2, [pc, #644]	; (800a900 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a67a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a67e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a680:	e01c      	b.n	800a6bc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a682:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a686:	3308      	adds	r3, #8
 800a688:	2100      	movs	r1, #0
 800a68a:	4618      	mov	r0, r3
 800a68c:	f002 fa44 	bl	800cb18 <RCCEx_PLL2_Config>
 800a690:	4603      	mov	r3, r0
 800a692:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a696:	e011      	b.n	800a6bc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a698:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a69c:	3328      	adds	r3, #40	; 0x28
 800a69e:	2100      	movs	r1, #0
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f002 faeb 	bl	800cc7c <RCCEx_PLL3_Config>
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a6ac:	e006      	b.n	800a6bc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a6b4:	e002      	b.n	800a6bc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800a6b6:	bf00      	nop
 800a6b8:	e000      	b.n	800a6bc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800a6ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a6bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d10b      	bne.n	800a6dc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a6c4:	4b8e      	ldr	r3, [pc, #568]	; (800a900 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a6c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6c8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800a6cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6d0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a6d4:	4a8a      	ldr	r2, [pc, #552]	; (800a900 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a6d6:	430b      	orrs	r3, r1
 800a6d8:	6593      	str	r3, [r2, #88]	; 0x58
 800a6da:	e003      	b.n	800a6e4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a6e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a6e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ec:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800a6f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a6fa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800a6fe:	460b      	mov	r3, r1
 800a700:	4313      	orrs	r3, r2
 800a702:	d03a      	beq.n	800a77a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800a704:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a70a:	2b30      	cmp	r3, #48	; 0x30
 800a70c:	d01f      	beq.n	800a74e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800a70e:	2b30      	cmp	r3, #48	; 0x30
 800a710:	d819      	bhi.n	800a746 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800a712:	2b20      	cmp	r3, #32
 800a714:	d00c      	beq.n	800a730 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800a716:	2b20      	cmp	r3, #32
 800a718:	d815      	bhi.n	800a746 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d019      	beq.n	800a752 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800a71e:	2b10      	cmp	r3, #16
 800a720:	d111      	bne.n	800a746 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a722:	4b77      	ldr	r3, [pc, #476]	; (800a900 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a726:	4a76      	ldr	r2, [pc, #472]	; (800a900 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a728:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a72c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800a72e:	e011      	b.n	800a754 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a730:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a734:	3308      	adds	r3, #8
 800a736:	2102      	movs	r1, #2
 800a738:	4618      	mov	r0, r3
 800a73a:	f002 f9ed 	bl	800cb18 <RCCEx_PLL2_Config>
 800a73e:	4603      	mov	r3, r0
 800a740:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800a744:	e006      	b.n	800a754 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a746:	2301      	movs	r3, #1
 800a748:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a74c:	e002      	b.n	800a754 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800a74e:	bf00      	nop
 800a750:	e000      	b.n	800a754 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800a752:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a754:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d10a      	bne.n	800a772 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a75c:	4b68      	ldr	r3, [pc, #416]	; (800a900 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a75e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a760:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800a764:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a76a:	4a65      	ldr	r2, [pc, #404]	; (800a900 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a76c:	430b      	orrs	r3, r1
 800a76e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a770:	e003      	b.n	800a77a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a772:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a776:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a77a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a782:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800a786:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a78a:	2300      	movs	r3, #0
 800a78c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a790:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800a794:	460b      	mov	r3, r1
 800a796:	4313      	orrs	r3, r2
 800a798:	d051      	beq.n	800a83e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800a79a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a79e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a7a4:	d035      	beq.n	800a812 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800a7a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a7aa:	d82e      	bhi.n	800a80a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a7ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a7b0:	d031      	beq.n	800a816 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800a7b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a7b6:	d828      	bhi.n	800a80a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a7b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a7bc:	d01a      	beq.n	800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800a7be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a7c2:	d822      	bhi.n	800a80a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d003      	beq.n	800a7d0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800a7c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7cc:	d007      	beq.n	800a7de <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800a7ce:	e01c      	b.n	800a80a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a7d0:	4b4b      	ldr	r3, [pc, #300]	; (800a900 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a7d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7d4:	4a4a      	ldr	r2, [pc, #296]	; (800a900 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a7d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a7da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a7dc:	e01c      	b.n	800a818 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a7de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7e2:	3308      	adds	r3, #8
 800a7e4:	2100      	movs	r1, #0
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f002 f996 	bl	800cb18 <RCCEx_PLL2_Config>
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a7f2:	e011      	b.n	800a818 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a7f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7f8:	3328      	adds	r3, #40	; 0x28
 800a7fa:	2100      	movs	r1, #0
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	f002 fa3d 	bl	800cc7c <RCCEx_PLL3_Config>
 800a802:	4603      	mov	r3, r0
 800a804:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a808:	e006      	b.n	800a818 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a80a:	2301      	movs	r3, #1
 800a80c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a810:	e002      	b.n	800a818 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800a812:	bf00      	nop
 800a814:	e000      	b.n	800a818 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800a816:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a818:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d10a      	bne.n	800a836 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a820:	4b37      	ldr	r3, [pc, #220]	; (800a900 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a824:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800a828:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a82c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a82e:	4a34      	ldr	r2, [pc, #208]	; (800a900 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a830:	430b      	orrs	r3, r1
 800a832:	6513      	str	r3, [r2, #80]	; 0x50
 800a834:	e003      	b.n	800a83e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a836:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a83a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a83e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a846:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800a84a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a84e:	2300      	movs	r3, #0
 800a850:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a854:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800a858:	460b      	mov	r3, r1
 800a85a:	4313      	orrs	r3, r2
 800a85c:	d056      	beq.n	800a90c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a85e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a862:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a864:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a868:	d033      	beq.n	800a8d2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800a86a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a86e:	d82c      	bhi.n	800a8ca <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a870:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a874:	d02f      	beq.n	800a8d6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800a876:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a87a:	d826      	bhi.n	800a8ca <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a87c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a880:	d02b      	beq.n	800a8da <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800a882:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a886:	d820      	bhi.n	800a8ca <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a888:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a88c:	d012      	beq.n	800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800a88e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a892:	d81a      	bhi.n	800a8ca <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a894:	2b00      	cmp	r3, #0
 800a896:	d022      	beq.n	800a8de <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800a898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a89c:	d115      	bne.n	800a8ca <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a89e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8a2:	3308      	adds	r3, #8
 800a8a4:	2101      	movs	r1, #1
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	f002 f936 	bl	800cb18 <RCCEx_PLL2_Config>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a8b2:	e015      	b.n	800a8e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a8b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8b8:	3328      	adds	r3, #40	; 0x28
 800a8ba:	2101      	movs	r1, #1
 800a8bc:	4618      	mov	r0, r3
 800a8be:	f002 f9dd 	bl	800cc7c <RCCEx_PLL3_Config>
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a8c8:	e00a      	b.n	800a8e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a8d0:	e006      	b.n	800a8e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a8d2:	bf00      	nop
 800a8d4:	e004      	b.n	800a8e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a8d6:	bf00      	nop
 800a8d8:	e002      	b.n	800a8e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a8da:	bf00      	nop
 800a8dc:	e000      	b.n	800a8e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a8de:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d10d      	bne.n	800a904 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a8e8:	4b05      	ldr	r3, [pc, #20]	; (800a900 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a8ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8ec:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800a8f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a8f6:	4a02      	ldr	r2, [pc, #8]	; (800a900 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a8f8:	430b      	orrs	r3, r1
 800a8fa:	6513      	str	r3, [r2, #80]	; 0x50
 800a8fc:	e006      	b.n	800a90c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800a8fe:	bf00      	nop
 800a900:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a904:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a908:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a90c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a910:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a914:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800a918:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a91c:	2300      	movs	r3, #0
 800a91e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a922:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800a926:	460b      	mov	r3, r1
 800a928:	4313      	orrs	r3, r2
 800a92a:	d055      	beq.n	800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a92c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a930:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a934:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a938:	d033      	beq.n	800a9a2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800a93a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a93e:	d82c      	bhi.n	800a99a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a944:	d02f      	beq.n	800a9a6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800a946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a94a:	d826      	bhi.n	800a99a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a94c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a950:	d02b      	beq.n	800a9aa <HAL_RCCEx_PeriphCLKConfig+0x672>
 800a952:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a956:	d820      	bhi.n	800a99a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a958:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a95c:	d012      	beq.n	800a984 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800a95e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a962:	d81a      	bhi.n	800a99a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a964:	2b00      	cmp	r3, #0
 800a966:	d022      	beq.n	800a9ae <HAL_RCCEx_PeriphCLKConfig+0x676>
 800a968:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a96c:	d115      	bne.n	800a99a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a96e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a972:	3308      	adds	r3, #8
 800a974:	2101      	movs	r1, #1
 800a976:	4618      	mov	r0, r3
 800a978:	f002 f8ce 	bl	800cb18 <RCCEx_PLL2_Config>
 800a97c:	4603      	mov	r3, r0
 800a97e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a982:	e015      	b.n	800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a984:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a988:	3328      	adds	r3, #40	; 0x28
 800a98a:	2101      	movs	r1, #1
 800a98c:	4618      	mov	r0, r3
 800a98e:	f002 f975 	bl	800cc7c <RCCEx_PLL3_Config>
 800a992:	4603      	mov	r3, r0
 800a994:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a998:	e00a      	b.n	800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800a99a:	2301      	movs	r3, #1
 800a99c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a9a0:	e006      	b.n	800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a9a2:	bf00      	nop
 800a9a4:	e004      	b.n	800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a9a6:	bf00      	nop
 800a9a8:	e002      	b.n	800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a9aa:	bf00      	nop
 800a9ac:	e000      	b.n	800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a9ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a9b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d10b      	bne.n	800a9d0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a9b8:	4ba3      	ldr	r3, [pc, #652]	; (800ac48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a9ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9bc:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a9c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a9c8:	4a9f      	ldr	r2, [pc, #636]	; (800ac48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a9ca:	430b      	orrs	r3, r1
 800a9cc:	6593      	str	r3, [r2, #88]	; 0x58
 800a9ce:	e003      	b.n	800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a9d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a9d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800a9e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a9ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a9f2:	460b      	mov	r3, r1
 800a9f4:	4313      	orrs	r3, r2
 800a9f6:	d037      	beq.n	800aa68 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800a9f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa02:	d00e      	beq.n	800aa22 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800aa04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa08:	d816      	bhi.n	800aa38 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d018      	beq.n	800aa40 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800aa0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa12:	d111      	bne.n	800aa38 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa14:	4b8c      	ldr	r3, [pc, #560]	; (800ac48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aa16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa18:	4a8b      	ldr	r2, [pc, #556]	; (800ac48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aa1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800aa20:	e00f      	b.n	800aa42 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aa22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa26:	3308      	adds	r3, #8
 800aa28:	2101      	movs	r1, #1
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f002 f874 	bl	800cb18 <RCCEx_PLL2_Config>
 800aa30:	4603      	mov	r3, r0
 800aa32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800aa36:	e004      	b.n	800aa42 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aa38:	2301      	movs	r3, #1
 800aa3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aa3e:	e000      	b.n	800aa42 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800aa40:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d10a      	bne.n	800aa60 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800aa4a:	4b7f      	ldr	r3, [pc, #508]	; (800ac48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aa4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa4e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800aa52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa58:	4a7b      	ldr	r2, [pc, #492]	; (800ac48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aa5a:	430b      	orrs	r3, r1
 800aa5c:	6513      	str	r3, [r2, #80]	; 0x50
 800aa5e:	e003      	b.n	800aa68 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa64:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800aa68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa70:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800aa74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800aa78:	2300      	movs	r3, #0
 800aa7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800aa7e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800aa82:	460b      	mov	r3, r1
 800aa84:	4313      	orrs	r3, r2
 800aa86:	d039      	beq.n	800aafc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800aa88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa8e:	2b03      	cmp	r3, #3
 800aa90:	d81c      	bhi.n	800aacc <HAL_RCCEx_PeriphCLKConfig+0x794>
 800aa92:	a201      	add	r2, pc, #4	; (adr r2, 800aa98 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800aa94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa98:	0800aad5 	.word	0x0800aad5
 800aa9c:	0800aaa9 	.word	0x0800aaa9
 800aaa0:	0800aab7 	.word	0x0800aab7
 800aaa4:	0800aad5 	.word	0x0800aad5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aaa8:	4b67      	ldr	r3, [pc, #412]	; (800ac48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aaaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaac:	4a66      	ldr	r2, [pc, #408]	; (800ac48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aaae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aab2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800aab4:	e00f      	b.n	800aad6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aaba:	3308      	adds	r3, #8
 800aabc:	2102      	movs	r1, #2
 800aabe:	4618      	mov	r0, r3
 800aac0:	f002 f82a 	bl	800cb18 <RCCEx_PLL2_Config>
 800aac4:	4603      	mov	r3, r0
 800aac6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800aaca:	e004      	b.n	800aad6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800aacc:	2301      	movs	r3, #1
 800aace:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aad2:	e000      	b.n	800aad6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800aad4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aad6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d10a      	bne.n	800aaf4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800aade:	4b5a      	ldr	r3, [pc, #360]	; (800ac48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aae2:	f023 0103 	bic.w	r1, r3, #3
 800aae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aaea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aaec:	4a56      	ldr	r2, [pc, #344]	; (800ac48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aaee:	430b      	orrs	r3, r1
 800aaf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800aaf2:	e003      	b.n	800aafc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aaf4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aaf8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800aafc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab04:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800ab08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ab12:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800ab16:	460b      	mov	r3, r1
 800ab18:	4313      	orrs	r3, r2
 800ab1a:	f000 809f 	beq.w	800ac5c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ab1e:	4b4b      	ldr	r3, [pc, #300]	; (800ac4c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	4a4a      	ldr	r2, [pc, #296]	; (800ac4c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800ab24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab28:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ab2a:	f7f8 fed5 	bl	80038d8 <HAL_GetTick>
 800ab2e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ab32:	e00b      	b.n	800ab4c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ab34:	f7f8 fed0 	bl	80038d8 <HAL_GetTick>
 800ab38:	4602      	mov	r2, r0
 800ab3a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800ab3e:	1ad3      	subs	r3, r2, r3
 800ab40:	2b64      	cmp	r3, #100	; 0x64
 800ab42:	d903      	bls.n	800ab4c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800ab44:	2303      	movs	r3, #3
 800ab46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ab4a:	e005      	b.n	800ab58 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ab4c:	4b3f      	ldr	r3, [pc, #252]	; (800ac4c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d0ed      	beq.n	800ab34 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800ab58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d179      	bne.n	800ac54 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800ab60:	4b39      	ldr	r3, [pc, #228]	; (800ac48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ab62:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ab64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab68:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ab6c:	4053      	eors	r3, r2
 800ab6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d015      	beq.n	800aba2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ab76:	4b34      	ldr	r3, [pc, #208]	; (800ac48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ab78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab7e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ab82:	4b31      	ldr	r3, [pc, #196]	; (800ac48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ab84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab86:	4a30      	ldr	r2, [pc, #192]	; (800ac48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ab88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ab8c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ab8e:	4b2e      	ldr	r3, [pc, #184]	; (800ac48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ab90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab92:	4a2d      	ldr	r2, [pc, #180]	; (800ac48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ab94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ab98:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800ab9a:	4a2b      	ldr	r2, [pc, #172]	; (800ac48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ab9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800aba0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800aba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aba6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800abaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abae:	d118      	bne.n	800abe2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800abb0:	f7f8 fe92 	bl	80038d8 <HAL_GetTick>
 800abb4:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800abb8:	e00d      	b.n	800abd6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800abba:	f7f8 fe8d 	bl	80038d8 <HAL_GetTick>
 800abbe:	4602      	mov	r2, r0
 800abc0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800abc4:	1ad2      	subs	r2, r2, r3
 800abc6:	f241 3388 	movw	r3, #5000	; 0x1388
 800abca:	429a      	cmp	r2, r3
 800abcc:	d903      	bls.n	800abd6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800abce:	2303      	movs	r3, #3
 800abd0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800abd4:	e005      	b.n	800abe2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800abd6:	4b1c      	ldr	r3, [pc, #112]	; (800ac48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800abd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abda:	f003 0302 	and.w	r3, r3, #2
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d0eb      	beq.n	800abba <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800abe2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d129      	bne.n	800ac3e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800abea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800abf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800abf6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800abfa:	d10e      	bne.n	800ac1a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800abfc:	4b12      	ldr	r3, [pc, #72]	; (800ac48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800abfe:	691b      	ldr	r3, [r3, #16]
 800ac00:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800ac04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac08:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ac0c:	091a      	lsrs	r2, r3, #4
 800ac0e:	4b10      	ldr	r3, [pc, #64]	; (800ac50 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800ac10:	4013      	ands	r3, r2
 800ac12:	4a0d      	ldr	r2, [pc, #52]	; (800ac48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ac14:	430b      	orrs	r3, r1
 800ac16:	6113      	str	r3, [r2, #16]
 800ac18:	e005      	b.n	800ac26 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800ac1a:	4b0b      	ldr	r3, [pc, #44]	; (800ac48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ac1c:	691b      	ldr	r3, [r3, #16]
 800ac1e:	4a0a      	ldr	r2, [pc, #40]	; (800ac48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ac20:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ac24:	6113      	str	r3, [r2, #16]
 800ac26:	4b08      	ldr	r3, [pc, #32]	; (800ac48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ac28:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800ac2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac2e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ac32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ac36:	4a04      	ldr	r2, [pc, #16]	; (800ac48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ac38:	430b      	orrs	r3, r1
 800ac3a:	6713      	str	r3, [r2, #112]	; 0x70
 800ac3c:	e00e      	b.n	800ac5c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ac3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac42:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800ac46:	e009      	b.n	800ac5c <HAL_RCCEx_PeriphCLKConfig+0x924>
 800ac48:	58024400 	.word	0x58024400
 800ac4c:	58024800 	.word	0x58024800
 800ac50:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac58:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ac5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac64:	f002 0301 	and.w	r3, r2, #1
 800ac68:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ac72:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800ac76:	460b      	mov	r3, r1
 800ac78:	4313      	orrs	r3, r2
 800ac7a:	f000 8089 	beq.w	800ad90 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800ac7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac84:	2b28      	cmp	r3, #40	; 0x28
 800ac86:	d86b      	bhi.n	800ad60 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800ac88:	a201      	add	r2, pc, #4	; (adr r2, 800ac90 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ac8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac8e:	bf00      	nop
 800ac90:	0800ad69 	.word	0x0800ad69
 800ac94:	0800ad61 	.word	0x0800ad61
 800ac98:	0800ad61 	.word	0x0800ad61
 800ac9c:	0800ad61 	.word	0x0800ad61
 800aca0:	0800ad61 	.word	0x0800ad61
 800aca4:	0800ad61 	.word	0x0800ad61
 800aca8:	0800ad61 	.word	0x0800ad61
 800acac:	0800ad61 	.word	0x0800ad61
 800acb0:	0800ad35 	.word	0x0800ad35
 800acb4:	0800ad61 	.word	0x0800ad61
 800acb8:	0800ad61 	.word	0x0800ad61
 800acbc:	0800ad61 	.word	0x0800ad61
 800acc0:	0800ad61 	.word	0x0800ad61
 800acc4:	0800ad61 	.word	0x0800ad61
 800acc8:	0800ad61 	.word	0x0800ad61
 800accc:	0800ad61 	.word	0x0800ad61
 800acd0:	0800ad4b 	.word	0x0800ad4b
 800acd4:	0800ad61 	.word	0x0800ad61
 800acd8:	0800ad61 	.word	0x0800ad61
 800acdc:	0800ad61 	.word	0x0800ad61
 800ace0:	0800ad61 	.word	0x0800ad61
 800ace4:	0800ad61 	.word	0x0800ad61
 800ace8:	0800ad61 	.word	0x0800ad61
 800acec:	0800ad61 	.word	0x0800ad61
 800acf0:	0800ad69 	.word	0x0800ad69
 800acf4:	0800ad61 	.word	0x0800ad61
 800acf8:	0800ad61 	.word	0x0800ad61
 800acfc:	0800ad61 	.word	0x0800ad61
 800ad00:	0800ad61 	.word	0x0800ad61
 800ad04:	0800ad61 	.word	0x0800ad61
 800ad08:	0800ad61 	.word	0x0800ad61
 800ad0c:	0800ad61 	.word	0x0800ad61
 800ad10:	0800ad69 	.word	0x0800ad69
 800ad14:	0800ad61 	.word	0x0800ad61
 800ad18:	0800ad61 	.word	0x0800ad61
 800ad1c:	0800ad61 	.word	0x0800ad61
 800ad20:	0800ad61 	.word	0x0800ad61
 800ad24:	0800ad61 	.word	0x0800ad61
 800ad28:	0800ad61 	.word	0x0800ad61
 800ad2c:	0800ad61 	.word	0x0800ad61
 800ad30:	0800ad69 	.word	0x0800ad69
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ad34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad38:	3308      	adds	r3, #8
 800ad3a:	2101      	movs	r1, #1
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	f001 feeb 	bl	800cb18 <RCCEx_PLL2_Config>
 800ad42:	4603      	mov	r3, r0
 800ad44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800ad48:	e00f      	b.n	800ad6a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ad4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad4e:	3328      	adds	r3, #40	; 0x28
 800ad50:	2101      	movs	r1, #1
 800ad52:	4618      	mov	r0, r3
 800ad54:	f001 ff92 	bl	800cc7c <RCCEx_PLL3_Config>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800ad5e:	e004      	b.n	800ad6a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad60:	2301      	movs	r3, #1
 800ad62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ad66:	e000      	b.n	800ad6a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800ad68:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d10a      	bne.n	800ad88 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800ad72:	4bbf      	ldr	r3, [pc, #764]	; (800b070 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ad74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad76:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800ad7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad80:	4abb      	ldr	r2, [pc, #748]	; (800b070 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ad82:	430b      	orrs	r3, r1
 800ad84:	6553      	str	r3, [r2, #84]	; 0x54
 800ad86:	e003      	b.n	800ad90 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ad8c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800ad90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad98:	f002 0302 	and.w	r3, r2, #2
 800ad9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ada0:	2300      	movs	r3, #0
 800ada2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800ada6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800adaa:	460b      	mov	r3, r1
 800adac:	4313      	orrs	r3, r2
 800adae:	d041      	beq.n	800ae34 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800adb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800adb6:	2b05      	cmp	r3, #5
 800adb8:	d824      	bhi.n	800ae04 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800adba:	a201      	add	r2, pc, #4	; (adr r2, 800adc0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800adbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adc0:	0800ae0d 	.word	0x0800ae0d
 800adc4:	0800add9 	.word	0x0800add9
 800adc8:	0800adef 	.word	0x0800adef
 800adcc:	0800ae0d 	.word	0x0800ae0d
 800add0:	0800ae0d 	.word	0x0800ae0d
 800add4:	0800ae0d 	.word	0x0800ae0d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800add8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800addc:	3308      	adds	r3, #8
 800adde:	2101      	movs	r1, #1
 800ade0:	4618      	mov	r0, r3
 800ade2:	f001 fe99 	bl	800cb18 <RCCEx_PLL2_Config>
 800ade6:	4603      	mov	r3, r0
 800ade8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800adec:	e00f      	b.n	800ae0e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800adee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adf2:	3328      	adds	r3, #40	; 0x28
 800adf4:	2101      	movs	r1, #1
 800adf6:	4618      	mov	r0, r3
 800adf8:	f001 ff40 	bl	800cc7c <RCCEx_PLL3_Config>
 800adfc:	4603      	mov	r3, r0
 800adfe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800ae02:	e004      	b.n	800ae0e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ae04:	2301      	movs	r3, #1
 800ae06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ae0a:	e000      	b.n	800ae0e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800ae0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d10a      	bne.n	800ae2c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800ae16:	4b96      	ldr	r3, [pc, #600]	; (800b070 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ae18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae1a:	f023 0107 	bic.w	r1, r3, #7
 800ae1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ae24:	4a92      	ldr	r2, [pc, #584]	; (800b070 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ae26:	430b      	orrs	r3, r1
 800ae28:	6553      	str	r3, [r2, #84]	; 0x54
 800ae2a:	e003      	b.n	800ae34 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae30:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ae34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae3c:	f002 0304 	and.w	r3, r2, #4
 800ae40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ae44:	2300      	movs	r3, #0
 800ae46:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ae4a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800ae4e:	460b      	mov	r3, r1
 800ae50:	4313      	orrs	r3, r2
 800ae52:	d044      	beq.n	800aede <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800ae54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ae5c:	2b05      	cmp	r3, #5
 800ae5e:	d825      	bhi.n	800aeac <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800ae60:	a201      	add	r2, pc, #4	; (adr r2, 800ae68 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800ae62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae66:	bf00      	nop
 800ae68:	0800aeb5 	.word	0x0800aeb5
 800ae6c:	0800ae81 	.word	0x0800ae81
 800ae70:	0800ae97 	.word	0x0800ae97
 800ae74:	0800aeb5 	.word	0x0800aeb5
 800ae78:	0800aeb5 	.word	0x0800aeb5
 800ae7c:	0800aeb5 	.word	0x0800aeb5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ae80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae84:	3308      	adds	r3, #8
 800ae86:	2101      	movs	r1, #1
 800ae88:	4618      	mov	r0, r3
 800ae8a:	f001 fe45 	bl	800cb18 <RCCEx_PLL2_Config>
 800ae8e:	4603      	mov	r3, r0
 800ae90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800ae94:	e00f      	b.n	800aeb6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ae96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae9a:	3328      	adds	r3, #40	; 0x28
 800ae9c:	2101      	movs	r1, #1
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f001 feec 	bl	800cc7c <RCCEx_PLL3_Config>
 800aea4:	4603      	mov	r3, r0
 800aea6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800aeaa:	e004      	b.n	800aeb6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aeac:	2301      	movs	r3, #1
 800aeae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aeb2:	e000      	b.n	800aeb6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800aeb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aeb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d10b      	bne.n	800aed6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800aebe:	4b6c      	ldr	r3, [pc, #432]	; (800b070 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800aec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aec2:	f023 0107 	bic.w	r1, r3, #7
 800aec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aeca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aece:	4a68      	ldr	r2, [pc, #416]	; (800b070 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800aed0:	430b      	orrs	r3, r1
 800aed2:	6593      	str	r3, [r2, #88]	; 0x58
 800aed4:	e003      	b.n	800aede <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aed6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aeda:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800aede:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee6:	f002 0320 	and.w	r3, r2, #32
 800aeea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800aeee:	2300      	movs	r3, #0
 800aef0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800aef4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800aef8:	460b      	mov	r3, r1
 800aefa:	4313      	orrs	r3, r2
 800aefc:	d055      	beq.n	800afaa <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800aefe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800af0a:	d033      	beq.n	800af74 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800af0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800af10:	d82c      	bhi.n	800af6c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800af12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af16:	d02f      	beq.n	800af78 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800af18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af1c:	d826      	bhi.n	800af6c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800af1e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800af22:	d02b      	beq.n	800af7c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800af24:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800af28:	d820      	bhi.n	800af6c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800af2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af2e:	d012      	beq.n	800af56 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800af30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af34:	d81a      	bhi.n	800af6c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800af36:	2b00      	cmp	r3, #0
 800af38:	d022      	beq.n	800af80 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800af3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800af3e:	d115      	bne.n	800af6c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800af40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af44:	3308      	adds	r3, #8
 800af46:	2100      	movs	r1, #0
 800af48:	4618      	mov	r0, r3
 800af4a:	f001 fde5 	bl	800cb18 <RCCEx_PLL2_Config>
 800af4e:	4603      	mov	r3, r0
 800af50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800af54:	e015      	b.n	800af82 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800af56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af5a:	3328      	adds	r3, #40	; 0x28
 800af5c:	2102      	movs	r1, #2
 800af5e:	4618      	mov	r0, r3
 800af60:	f001 fe8c 	bl	800cc7c <RCCEx_PLL3_Config>
 800af64:	4603      	mov	r3, r0
 800af66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800af6a:	e00a      	b.n	800af82 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af6c:	2301      	movs	r3, #1
 800af6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800af72:	e006      	b.n	800af82 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800af74:	bf00      	nop
 800af76:	e004      	b.n	800af82 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800af78:	bf00      	nop
 800af7a:	e002      	b.n	800af82 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800af7c:	bf00      	nop
 800af7e:	e000      	b.n	800af82 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800af80:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af86:	2b00      	cmp	r3, #0
 800af88:	d10b      	bne.n	800afa2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800af8a:	4b39      	ldr	r3, [pc, #228]	; (800b070 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800af8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af8e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800af92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af9a:	4a35      	ldr	r2, [pc, #212]	; (800b070 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800af9c:	430b      	orrs	r3, r1
 800af9e:	6553      	str	r3, [r2, #84]	; 0x54
 800afa0:	e003      	b.n	800afaa <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afa2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800afa6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800afaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800afb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800afba:	2300      	movs	r3, #0
 800afbc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800afc0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800afc4:	460b      	mov	r3, r1
 800afc6:	4313      	orrs	r3, r2
 800afc8:	d058      	beq.n	800b07c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800afca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800afd2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800afd6:	d033      	beq.n	800b040 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800afd8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800afdc:	d82c      	bhi.n	800b038 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800afde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800afe2:	d02f      	beq.n	800b044 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800afe4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800afe8:	d826      	bhi.n	800b038 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800afea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800afee:	d02b      	beq.n	800b048 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800aff0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aff4:	d820      	bhi.n	800b038 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800aff6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800affa:	d012      	beq.n	800b022 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800affc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b000:	d81a      	bhi.n	800b038 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b002:	2b00      	cmp	r3, #0
 800b004:	d022      	beq.n	800b04c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800b006:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b00a:	d115      	bne.n	800b038 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b00c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b010:	3308      	adds	r3, #8
 800b012:	2100      	movs	r1, #0
 800b014:	4618      	mov	r0, r3
 800b016:	f001 fd7f 	bl	800cb18 <RCCEx_PLL2_Config>
 800b01a:	4603      	mov	r3, r0
 800b01c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b020:	e015      	b.n	800b04e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b022:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b026:	3328      	adds	r3, #40	; 0x28
 800b028:	2102      	movs	r1, #2
 800b02a:	4618      	mov	r0, r3
 800b02c:	f001 fe26 	bl	800cc7c <RCCEx_PLL3_Config>
 800b030:	4603      	mov	r3, r0
 800b032:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b036:	e00a      	b.n	800b04e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b038:	2301      	movs	r3, #1
 800b03a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b03e:	e006      	b.n	800b04e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b040:	bf00      	nop
 800b042:	e004      	b.n	800b04e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b044:	bf00      	nop
 800b046:	e002      	b.n	800b04e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b048:	bf00      	nop
 800b04a:	e000      	b.n	800b04e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b04c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b04e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b052:	2b00      	cmp	r3, #0
 800b054:	d10e      	bne.n	800b074 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b056:	4b06      	ldr	r3, [pc, #24]	; (800b070 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b05a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800b05e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b062:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b066:	4a02      	ldr	r2, [pc, #8]	; (800b070 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b068:	430b      	orrs	r3, r1
 800b06a:	6593      	str	r3, [r2, #88]	; 0x58
 800b06c:	e006      	b.n	800b07c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800b06e:	bf00      	nop
 800b070:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b074:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b078:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b07c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b080:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b084:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800b088:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b08c:	2300      	movs	r3, #0
 800b08e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b092:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800b096:	460b      	mov	r3, r1
 800b098:	4313      	orrs	r3, r2
 800b09a:	d055      	beq.n	800b148 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b09c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b0a4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b0a8:	d033      	beq.n	800b112 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800b0aa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b0ae:	d82c      	bhi.n	800b10a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b0b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b0b4:	d02f      	beq.n	800b116 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800b0b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b0ba:	d826      	bhi.n	800b10a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b0bc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b0c0:	d02b      	beq.n	800b11a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800b0c2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b0c6:	d820      	bhi.n	800b10a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b0c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b0cc:	d012      	beq.n	800b0f4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800b0ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b0d2:	d81a      	bhi.n	800b10a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d022      	beq.n	800b11e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800b0d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b0dc:	d115      	bne.n	800b10a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b0de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0e2:	3308      	adds	r3, #8
 800b0e4:	2100      	movs	r1, #0
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f001 fd16 	bl	800cb18 <RCCEx_PLL2_Config>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b0f2:	e015      	b.n	800b120 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b0f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0f8:	3328      	adds	r3, #40	; 0x28
 800b0fa:	2102      	movs	r1, #2
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	f001 fdbd 	bl	800cc7c <RCCEx_PLL3_Config>
 800b102:	4603      	mov	r3, r0
 800b104:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b108:	e00a      	b.n	800b120 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b10a:	2301      	movs	r3, #1
 800b10c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b110:	e006      	b.n	800b120 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b112:	bf00      	nop
 800b114:	e004      	b.n	800b120 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b116:	bf00      	nop
 800b118:	e002      	b.n	800b120 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b11a:	bf00      	nop
 800b11c:	e000      	b.n	800b120 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b11e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b120:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b124:	2b00      	cmp	r3, #0
 800b126:	d10b      	bne.n	800b140 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b128:	4ba1      	ldr	r3, [pc, #644]	; (800b3b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b12a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b12c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800b130:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b134:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b138:	4a9d      	ldr	r2, [pc, #628]	; (800b3b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b13a:	430b      	orrs	r3, r1
 800b13c:	6593      	str	r3, [r2, #88]	; 0x58
 800b13e:	e003      	b.n	800b148 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b140:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b144:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b148:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b150:	f002 0308 	and.w	r3, r2, #8
 800b154:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b158:	2300      	movs	r3, #0
 800b15a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b15e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800b162:	460b      	mov	r3, r1
 800b164:	4313      	orrs	r3, r2
 800b166:	d01e      	beq.n	800b1a6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800b168:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b16c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b170:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b174:	d10c      	bne.n	800b190 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b176:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b17a:	3328      	adds	r3, #40	; 0x28
 800b17c:	2102      	movs	r1, #2
 800b17e:	4618      	mov	r0, r3
 800b180:	f001 fd7c 	bl	800cc7c <RCCEx_PLL3_Config>
 800b184:	4603      	mov	r3, r0
 800b186:	2b00      	cmp	r3, #0
 800b188:	d002      	beq.n	800b190 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800b18a:	2301      	movs	r3, #1
 800b18c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b190:	4b87      	ldr	r3, [pc, #540]	; (800b3b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b194:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b198:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b19c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b1a0:	4a83      	ldr	r2, [pc, #524]	; (800b3b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b1a2:	430b      	orrs	r3, r1
 800b1a4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b1a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ae:	f002 0310 	and.w	r3, r2, #16
 800b1b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b1bc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800b1c0:	460b      	mov	r3, r1
 800b1c2:	4313      	orrs	r3, r2
 800b1c4:	d01e      	beq.n	800b204 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b1c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b1ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b1d2:	d10c      	bne.n	800b1ee <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b1d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1d8:	3328      	adds	r3, #40	; 0x28
 800b1da:	2102      	movs	r1, #2
 800b1dc:	4618      	mov	r0, r3
 800b1de:	f001 fd4d 	bl	800cc7c <RCCEx_PLL3_Config>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d002      	beq.n	800b1ee <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b1ee:	4b70      	ldr	r3, [pc, #448]	; (800b3b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b1f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b1f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b1fe:	4a6c      	ldr	r2, [pc, #432]	; (800b3b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b200:	430b      	orrs	r3, r1
 800b202:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b204:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b20c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800b210:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b214:	2300      	movs	r3, #0
 800b216:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b21a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800b21e:	460b      	mov	r3, r1
 800b220:	4313      	orrs	r3, r2
 800b222:	d03e      	beq.n	800b2a2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b224:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b228:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b22c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b230:	d022      	beq.n	800b278 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800b232:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b236:	d81b      	bhi.n	800b270 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d003      	beq.n	800b244 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800b23c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b240:	d00b      	beq.n	800b25a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800b242:	e015      	b.n	800b270 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b244:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b248:	3308      	adds	r3, #8
 800b24a:	2100      	movs	r1, #0
 800b24c:	4618      	mov	r0, r3
 800b24e:	f001 fc63 	bl	800cb18 <RCCEx_PLL2_Config>
 800b252:	4603      	mov	r3, r0
 800b254:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b258:	e00f      	b.n	800b27a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b25a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b25e:	3328      	adds	r3, #40	; 0x28
 800b260:	2102      	movs	r1, #2
 800b262:	4618      	mov	r0, r3
 800b264:	f001 fd0a 	bl	800cc7c <RCCEx_PLL3_Config>
 800b268:	4603      	mov	r3, r0
 800b26a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b26e:	e004      	b.n	800b27a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b270:	2301      	movs	r3, #1
 800b272:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b276:	e000      	b.n	800b27a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800b278:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b27a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d10b      	bne.n	800b29a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b282:	4b4b      	ldr	r3, [pc, #300]	; (800b3b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b286:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800b28a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b28e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b292:	4a47      	ldr	r2, [pc, #284]	; (800b3b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b294:	430b      	orrs	r3, r1
 800b296:	6593      	str	r3, [r2, #88]	; 0x58
 800b298:	e003      	b.n	800b2a2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b29a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b29e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b2a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2aa:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800b2ae:	67bb      	str	r3, [r7, #120]	; 0x78
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b2b4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800b2b8:	460b      	mov	r3, r1
 800b2ba:	4313      	orrs	r3, r2
 800b2bc:	d03b      	beq.n	800b336 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b2be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2c6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b2ca:	d01f      	beq.n	800b30c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800b2cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b2d0:	d818      	bhi.n	800b304 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800b2d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b2d6:	d003      	beq.n	800b2e0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800b2d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b2dc:	d007      	beq.n	800b2ee <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800b2de:	e011      	b.n	800b304 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b2e0:	4b33      	ldr	r3, [pc, #204]	; (800b3b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b2e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2e4:	4a32      	ldr	r2, [pc, #200]	; (800b3b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b2e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b2ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b2ec:	e00f      	b.n	800b30e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b2ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2f2:	3328      	adds	r3, #40	; 0x28
 800b2f4:	2101      	movs	r1, #1
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	f001 fcc0 	bl	800cc7c <RCCEx_PLL3_Config>
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800b302:	e004      	b.n	800b30e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b304:	2301      	movs	r3, #1
 800b306:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b30a:	e000      	b.n	800b30e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800b30c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b30e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b312:	2b00      	cmp	r3, #0
 800b314:	d10b      	bne.n	800b32e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b316:	4b26      	ldr	r3, [pc, #152]	; (800b3b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b31a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b31e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b326:	4a22      	ldr	r2, [pc, #136]	; (800b3b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b328:	430b      	orrs	r3, r1
 800b32a:	6553      	str	r3, [r2, #84]	; 0x54
 800b32c:	e003      	b.n	800b336 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b32e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b332:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b336:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b33a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b33e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800b342:	673b      	str	r3, [r7, #112]	; 0x70
 800b344:	2300      	movs	r3, #0
 800b346:	677b      	str	r3, [r7, #116]	; 0x74
 800b348:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800b34c:	460b      	mov	r3, r1
 800b34e:	4313      	orrs	r3, r2
 800b350:	d034      	beq.n	800b3bc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b352:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d003      	beq.n	800b364 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800b35c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b360:	d007      	beq.n	800b372 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800b362:	e011      	b.n	800b388 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b364:	4b12      	ldr	r3, [pc, #72]	; (800b3b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b368:	4a11      	ldr	r2, [pc, #68]	; (800b3b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b36a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b36e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b370:	e00e      	b.n	800b390 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b372:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b376:	3308      	adds	r3, #8
 800b378:	2102      	movs	r1, #2
 800b37a:	4618      	mov	r0, r3
 800b37c:	f001 fbcc 	bl	800cb18 <RCCEx_PLL2_Config>
 800b380:	4603      	mov	r3, r0
 800b382:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b386:	e003      	b.n	800b390 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800b388:	2301      	movs	r3, #1
 800b38a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b38e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b390:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b394:	2b00      	cmp	r3, #0
 800b396:	d10d      	bne.n	800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b398:	4b05      	ldr	r3, [pc, #20]	; (800b3b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b39a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b39c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b3a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3a6:	4a02      	ldr	r2, [pc, #8]	; (800b3b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b3a8:	430b      	orrs	r3, r1
 800b3aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b3ac:	e006      	b.n	800b3bc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800b3ae:	bf00      	nop
 800b3b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b3b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b3bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3c4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800b3c8:	66bb      	str	r3, [r7, #104]	; 0x68
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b3ce:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800b3d2:	460b      	mov	r3, r1
 800b3d4:	4313      	orrs	r3, r2
 800b3d6:	d00c      	beq.n	800b3f2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b3d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3dc:	3328      	adds	r3, #40	; 0x28
 800b3de:	2102      	movs	r1, #2
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	f001 fc4b 	bl	800cc7c <RCCEx_PLL3_Config>
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d002      	beq.n	800b3f2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800b3ec:	2301      	movs	r3, #1
 800b3ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b3f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3fa:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800b3fe:	663b      	str	r3, [r7, #96]	; 0x60
 800b400:	2300      	movs	r3, #0
 800b402:	667b      	str	r3, [r7, #100]	; 0x64
 800b404:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800b408:	460b      	mov	r3, r1
 800b40a:	4313      	orrs	r3, r2
 800b40c:	d038      	beq.n	800b480 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800b40e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b412:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b416:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b41a:	d018      	beq.n	800b44e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800b41c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b420:	d811      	bhi.n	800b446 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800b422:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b426:	d014      	beq.n	800b452 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800b428:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b42c:	d80b      	bhi.n	800b446 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d011      	beq.n	800b456 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800b432:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b436:	d106      	bne.n	800b446 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b438:	4bc3      	ldr	r3, [pc, #780]	; (800b748 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b43a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b43c:	4ac2      	ldr	r2, [pc, #776]	; (800b748 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b43e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b442:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800b444:	e008      	b.n	800b458 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b446:	2301      	movs	r3, #1
 800b448:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b44c:	e004      	b.n	800b458 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800b44e:	bf00      	nop
 800b450:	e002      	b.n	800b458 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800b452:	bf00      	nop
 800b454:	e000      	b.n	800b458 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800b456:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b458:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d10b      	bne.n	800b478 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b460:	4bb9      	ldr	r3, [pc, #740]	; (800b748 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b464:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b468:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b46c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b470:	4ab5      	ldr	r2, [pc, #724]	; (800b748 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b472:	430b      	orrs	r3, r1
 800b474:	6553      	str	r3, [r2, #84]	; 0x54
 800b476:	e003      	b.n	800b480 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b478:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b47c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b480:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b484:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b488:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800b48c:	65bb      	str	r3, [r7, #88]	; 0x58
 800b48e:	2300      	movs	r3, #0
 800b490:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b492:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800b496:	460b      	mov	r3, r1
 800b498:	4313      	orrs	r3, r2
 800b49a:	d009      	beq.n	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b49c:	4baa      	ldr	r3, [pc, #680]	; (800b748 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b49e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4a0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b4a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b4aa:	4aa7      	ldr	r2, [pc, #668]	; (800b748 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b4ac:	430b      	orrs	r3, r1
 800b4ae:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800b4b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800b4bc:	653b      	str	r3, [r7, #80]	; 0x50
 800b4be:	2300      	movs	r3, #0
 800b4c0:	657b      	str	r3, [r7, #84]	; 0x54
 800b4c2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800b4c6:	460b      	mov	r3, r1
 800b4c8:	4313      	orrs	r3, r2
 800b4ca:	d00a      	beq.n	800b4e2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800b4cc:	4b9e      	ldr	r3, [pc, #632]	; (800b748 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b4ce:	691b      	ldr	r3, [r3, #16]
 800b4d0:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800b4d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4d8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800b4dc:	4a9a      	ldr	r2, [pc, #616]	; (800b748 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b4de:	430b      	orrs	r3, r1
 800b4e0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b4e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ea:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800b4ee:	64bb      	str	r3, [r7, #72]	; 0x48
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b4f4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800b4f8:	460b      	mov	r3, r1
 800b4fa:	4313      	orrs	r3, r2
 800b4fc:	d009      	beq.n	800b512 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b4fe:	4b92      	ldr	r3, [pc, #584]	; (800b748 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b500:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b502:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800b506:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b50a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b50c:	4a8e      	ldr	r2, [pc, #568]	; (800b748 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b50e:	430b      	orrs	r3, r1
 800b510:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b512:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b51a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800b51e:	643b      	str	r3, [r7, #64]	; 0x40
 800b520:	2300      	movs	r3, #0
 800b522:	647b      	str	r3, [r7, #68]	; 0x44
 800b524:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800b528:	460b      	mov	r3, r1
 800b52a:	4313      	orrs	r3, r2
 800b52c:	d00e      	beq.n	800b54c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b52e:	4b86      	ldr	r3, [pc, #536]	; (800b748 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b530:	691b      	ldr	r3, [r3, #16]
 800b532:	4a85      	ldr	r2, [pc, #532]	; (800b748 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b534:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b538:	6113      	str	r3, [r2, #16]
 800b53a:	4b83      	ldr	r3, [pc, #524]	; (800b748 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b53c:	6919      	ldr	r1, [r3, #16]
 800b53e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b542:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800b546:	4a80      	ldr	r2, [pc, #512]	; (800b748 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b548:	430b      	orrs	r3, r1
 800b54a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b54c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b550:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b554:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800b558:	63bb      	str	r3, [r7, #56]	; 0x38
 800b55a:	2300      	movs	r3, #0
 800b55c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b55e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800b562:	460b      	mov	r3, r1
 800b564:	4313      	orrs	r3, r2
 800b566:	d009      	beq.n	800b57c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b568:	4b77      	ldr	r3, [pc, #476]	; (800b748 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b56a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b56c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b570:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b576:	4a74      	ldr	r2, [pc, #464]	; (800b748 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b578:	430b      	orrs	r3, r1
 800b57a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b57c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b580:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b584:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800b588:	633b      	str	r3, [r7, #48]	; 0x30
 800b58a:	2300      	movs	r3, #0
 800b58c:	637b      	str	r3, [r7, #52]	; 0x34
 800b58e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800b592:	460b      	mov	r3, r1
 800b594:	4313      	orrs	r3, r2
 800b596:	d00a      	beq.n	800b5ae <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b598:	4b6b      	ldr	r3, [pc, #428]	; (800b748 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b59a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b59c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800b5a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b5a8:	4a67      	ldr	r2, [pc, #412]	; (800b748 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b5aa:	430b      	orrs	r3, r1
 800b5ac:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b5ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5b6:	2100      	movs	r1, #0
 800b5b8:	62b9      	str	r1, [r7, #40]	; 0x28
 800b5ba:	f003 0301 	and.w	r3, r3, #1
 800b5be:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b5c0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800b5c4:	460b      	mov	r3, r1
 800b5c6:	4313      	orrs	r3, r2
 800b5c8:	d011      	beq.n	800b5ee <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b5ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5ce:	3308      	adds	r3, #8
 800b5d0:	2100      	movs	r1, #0
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	f001 faa0 	bl	800cb18 <RCCEx_PLL2_Config>
 800b5d8:	4603      	mov	r3, r0
 800b5da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800b5de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d003      	beq.n	800b5ee <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b5ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5f6:	2100      	movs	r1, #0
 800b5f8:	6239      	str	r1, [r7, #32]
 800b5fa:	f003 0302 	and.w	r3, r3, #2
 800b5fe:	627b      	str	r3, [r7, #36]	; 0x24
 800b600:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b604:	460b      	mov	r3, r1
 800b606:	4313      	orrs	r3, r2
 800b608:	d011      	beq.n	800b62e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b60a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b60e:	3308      	adds	r3, #8
 800b610:	2101      	movs	r1, #1
 800b612:	4618      	mov	r0, r3
 800b614:	f001 fa80 	bl	800cb18 <RCCEx_PLL2_Config>
 800b618:	4603      	mov	r3, r0
 800b61a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800b61e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b622:	2b00      	cmp	r3, #0
 800b624:	d003      	beq.n	800b62e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b626:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b62a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b62e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b632:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b636:	2100      	movs	r1, #0
 800b638:	61b9      	str	r1, [r7, #24]
 800b63a:	f003 0304 	and.w	r3, r3, #4
 800b63e:	61fb      	str	r3, [r7, #28]
 800b640:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b644:	460b      	mov	r3, r1
 800b646:	4313      	orrs	r3, r2
 800b648:	d011      	beq.n	800b66e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b64a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b64e:	3308      	adds	r3, #8
 800b650:	2102      	movs	r1, #2
 800b652:	4618      	mov	r0, r3
 800b654:	f001 fa60 	bl	800cb18 <RCCEx_PLL2_Config>
 800b658:	4603      	mov	r3, r0
 800b65a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800b65e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b662:	2b00      	cmp	r3, #0
 800b664:	d003      	beq.n	800b66e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b666:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b66a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b66e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b672:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b676:	2100      	movs	r1, #0
 800b678:	6139      	str	r1, [r7, #16]
 800b67a:	f003 0308 	and.w	r3, r3, #8
 800b67e:	617b      	str	r3, [r7, #20]
 800b680:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b684:	460b      	mov	r3, r1
 800b686:	4313      	orrs	r3, r2
 800b688:	d011      	beq.n	800b6ae <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b68a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b68e:	3328      	adds	r3, #40	; 0x28
 800b690:	2100      	movs	r1, #0
 800b692:	4618      	mov	r0, r3
 800b694:	f001 faf2 	bl	800cc7c <RCCEx_PLL3_Config>
 800b698:	4603      	mov	r3, r0
 800b69a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800b69e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d003      	beq.n	800b6ae <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b6ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b6:	2100      	movs	r1, #0
 800b6b8:	60b9      	str	r1, [r7, #8]
 800b6ba:	f003 0310 	and.w	r3, r3, #16
 800b6be:	60fb      	str	r3, [r7, #12]
 800b6c0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b6c4:	460b      	mov	r3, r1
 800b6c6:	4313      	orrs	r3, r2
 800b6c8:	d011      	beq.n	800b6ee <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b6ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6ce:	3328      	adds	r3, #40	; 0x28
 800b6d0:	2101      	movs	r1, #1
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f001 fad2 	bl	800cc7c <RCCEx_PLL3_Config>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800b6de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d003      	beq.n	800b6ee <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b6ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6f6:	2100      	movs	r1, #0
 800b6f8:	6039      	str	r1, [r7, #0]
 800b6fa:	f003 0320 	and.w	r3, r3, #32
 800b6fe:	607b      	str	r3, [r7, #4]
 800b700:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b704:	460b      	mov	r3, r1
 800b706:	4313      	orrs	r3, r2
 800b708:	d011      	beq.n	800b72e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b70a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b70e:	3328      	adds	r3, #40	; 0x28
 800b710:	2102      	movs	r1, #2
 800b712:	4618      	mov	r0, r3
 800b714:	f001 fab2 	bl	800cc7c <RCCEx_PLL3_Config>
 800b718:	4603      	mov	r3, r0
 800b71a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800b71e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b722:	2b00      	cmp	r3, #0
 800b724:	d003      	beq.n	800b72e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b726:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b72a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800b72e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800b732:	2b00      	cmp	r3, #0
 800b734:	d101      	bne.n	800b73a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800b736:	2300      	movs	r3, #0
 800b738:	e000      	b.n	800b73c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800b73a:	2301      	movs	r3, #1
}
 800b73c:	4618      	mov	r0, r3
 800b73e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800b742:	46bd      	mov	sp, r7
 800b744:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b748:	58024400 	.word	0x58024400

0800b74c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b090      	sub	sp, #64	; 0x40
 800b750:	af00      	add	r7, sp, #0
 800b752:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b756:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b75a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800b75e:	430b      	orrs	r3, r1
 800b760:	f040 8094 	bne.w	800b88c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800b764:	4b9e      	ldr	r3, [pc, #632]	; (800b9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b766:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b768:	f003 0307 	and.w	r3, r3, #7
 800b76c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b76e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b770:	2b04      	cmp	r3, #4
 800b772:	f200 8087 	bhi.w	800b884 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800b776:	a201      	add	r2, pc, #4	; (adr r2, 800b77c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800b778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b77c:	0800b791 	.word	0x0800b791
 800b780:	0800b7b9 	.word	0x0800b7b9
 800b784:	0800b7e1 	.word	0x0800b7e1
 800b788:	0800b87d 	.word	0x0800b87d
 800b78c:	0800b809 	.word	0x0800b809
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b790:	4b93      	ldr	r3, [pc, #588]	; (800b9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b798:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b79c:	d108      	bne.n	800b7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b79e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	f001 f810 	bl	800c7c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b7a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b7ac:	f000 bd45 	b.w	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7b4:	f000 bd41 	b.w	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b7b8:	4b89      	ldr	r3, [pc, #548]	; (800b9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b7c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b7c4:	d108      	bne.n	800b7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b7c6:	f107 0318 	add.w	r3, r7, #24
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	f000 fd54 	bl	800c278 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b7d0:	69bb      	ldr	r3, [r7, #24]
 800b7d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b7d4:	f000 bd31 	b.w	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b7d8:	2300      	movs	r3, #0
 800b7da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7dc:	f000 bd2d 	b.w	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b7e0:	4b7f      	ldr	r3, [pc, #508]	; (800b9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b7e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b7ec:	d108      	bne.n	800b800 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b7ee:	f107 030c 	add.w	r3, r7, #12
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	f000 fe94 	bl	800c520 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b7fc:	f000 bd1d 	b.w	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b800:	2300      	movs	r3, #0
 800b802:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b804:	f000 bd19 	b.w	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b808:	4b75      	ldr	r3, [pc, #468]	; (800b9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b80a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b80c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b810:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b812:	4b73      	ldr	r3, [pc, #460]	; (800b9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	f003 0304 	and.w	r3, r3, #4
 800b81a:	2b04      	cmp	r3, #4
 800b81c:	d10c      	bne.n	800b838 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800b81e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b820:	2b00      	cmp	r3, #0
 800b822:	d109      	bne.n	800b838 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b824:	4b6e      	ldr	r3, [pc, #440]	; (800b9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	08db      	lsrs	r3, r3, #3
 800b82a:	f003 0303 	and.w	r3, r3, #3
 800b82e:	4a6d      	ldr	r2, [pc, #436]	; (800b9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b830:	fa22 f303 	lsr.w	r3, r2, r3
 800b834:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b836:	e01f      	b.n	800b878 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b838:	4b69      	ldr	r3, [pc, #420]	; (800b9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b840:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b844:	d106      	bne.n	800b854 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800b846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b848:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b84c:	d102      	bne.n	800b854 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b84e:	4b66      	ldr	r3, [pc, #408]	; (800b9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b850:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b852:	e011      	b.n	800b878 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b854:	4b62      	ldr	r3, [pc, #392]	; (800b9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b85c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b860:	d106      	bne.n	800b870 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800b862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b864:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b868:	d102      	bne.n	800b870 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b86a:	4b60      	ldr	r3, [pc, #384]	; (800b9ec <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b86c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b86e:	e003      	b.n	800b878 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b870:	2300      	movs	r3, #0
 800b872:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b874:	f000 bce1 	b.w	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b878:	f000 bcdf 	b.w	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b87c:	4b5c      	ldr	r3, [pc, #368]	; (800b9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b87e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b880:	f000 bcdb 	b.w	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b884:	2300      	movs	r3, #0
 800b886:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b888:	f000 bcd7 	b.w	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800b88c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b890:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800b894:	430b      	orrs	r3, r1
 800b896:	f040 80ad 	bne.w	800b9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800b89a:	4b51      	ldr	r3, [pc, #324]	; (800b9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b89c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b89e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800b8a2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b8a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8aa:	d056      	beq.n	800b95a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800b8ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8b2:	f200 8090 	bhi.w	800b9d6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b8b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8b8:	2bc0      	cmp	r3, #192	; 0xc0
 800b8ba:	f000 8088 	beq.w	800b9ce <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800b8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8c0:	2bc0      	cmp	r3, #192	; 0xc0
 800b8c2:	f200 8088 	bhi.w	800b9d6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b8c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8c8:	2b80      	cmp	r3, #128	; 0x80
 800b8ca:	d032      	beq.n	800b932 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800b8cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ce:	2b80      	cmp	r3, #128	; 0x80
 800b8d0:	f200 8081 	bhi.w	800b9d6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b8d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d003      	beq.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800b8da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8dc:	2b40      	cmp	r3, #64	; 0x40
 800b8de:	d014      	beq.n	800b90a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800b8e0:	e079      	b.n	800b9d6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b8e2:	4b3f      	ldr	r3, [pc, #252]	; (800b9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b8ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b8ee:	d108      	bne.n	800b902 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b8f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	f000 ff67 	bl	800c7c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b8fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b8fe:	f000 bc9c 	b.w	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b902:	2300      	movs	r3, #0
 800b904:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b906:	f000 bc98 	b.w	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b90a:	4b35      	ldr	r3, [pc, #212]	; (800b9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b912:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b916:	d108      	bne.n	800b92a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b918:	f107 0318 	add.w	r3, r7, #24
 800b91c:	4618      	mov	r0, r3
 800b91e:	f000 fcab 	bl	800c278 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b922:	69bb      	ldr	r3, [r7, #24]
 800b924:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b926:	f000 bc88 	b.w	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b92a:	2300      	movs	r3, #0
 800b92c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b92e:	f000 bc84 	b.w	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b932:	4b2b      	ldr	r3, [pc, #172]	; (800b9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b93a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b93e:	d108      	bne.n	800b952 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b940:	f107 030c 	add.w	r3, r7, #12
 800b944:	4618      	mov	r0, r3
 800b946:	f000 fdeb 	bl	800c520 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b94e:	f000 bc74 	b.w	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b952:	2300      	movs	r3, #0
 800b954:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b956:	f000 bc70 	b.w	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b95a:	4b21      	ldr	r3, [pc, #132]	; (800b9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b95c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b95e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b962:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b964:	4b1e      	ldr	r3, [pc, #120]	; (800b9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	f003 0304 	and.w	r3, r3, #4
 800b96c:	2b04      	cmp	r3, #4
 800b96e:	d10c      	bne.n	800b98a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800b970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b972:	2b00      	cmp	r3, #0
 800b974:	d109      	bne.n	800b98a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b976:	4b1a      	ldr	r3, [pc, #104]	; (800b9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	08db      	lsrs	r3, r3, #3
 800b97c:	f003 0303 	and.w	r3, r3, #3
 800b980:	4a18      	ldr	r2, [pc, #96]	; (800b9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b982:	fa22 f303 	lsr.w	r3, r2, r3
 800b986:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b988:	e01f      	b.n	800b9ca <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b98a:	4b15      	ldr	r3, [pc, #84]	; (800b9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b992:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b996:	d106      	bne.n	800b9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800b998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b99a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b99e:	d102      	bne.n	800b9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b9a0:	4b11      	ldr	r3, [pc, #68]	; (800b9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b9a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b9a4:	e011      	b.n	800b9ca <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b9a6:	4b0e      	ldr	r3, [pc, #56]	; (800b9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b9ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b9b2:	d106      	bne.n	800b9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800b9b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b9ba:	d102      	bne.n	800b9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b9bc:	4b0b      	ldr	r3, [pc, #44]	; (800b9ec <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b9be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b9c0:	e003      	b.n	800b9ca <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b9c6:	f000 bc38 	b.w	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b9ca:	f000 bc36 	b.w	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b9ce:	4b08      	ldr	r3, [pc, #32]	; (800b9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b9d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9d2:	f000 bc32 	b.w	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9da:	f000 bc2e 	b.w	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b9de:	bf00      	nop
 800b9e0:	58024400 	.word	0x58024400
 800b9e4:	03d09000 	.word	0x03d09000
 800b9e8:	003d0900 	.word	0x003d0900
 800b9ec:	00989680 	.word	0x00989680
 800b9f0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b9f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b9f8:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800b9fc:	430b      	orrs	r3, r1
 800b9fe:	f040 809c 	bne.w	800bb3a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800ba02:	4b9e      	ldr	r3, [pc, #632]	; (800bc7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ba04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba06:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800ba0a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ba0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba0e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ba12:	d054      	beq.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800ba14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba16:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ba1a:	f200 808b 	bhi.w	800bb34 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ba1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba20:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ba24:	f000 8083 	beq.w	800bb2e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800ba28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba2a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ba2e:	f200 8081 	bhi.w	800bb34 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ba32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ba38:	d02f      	beq.n	800ba9a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800ba3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ba40:	d878      	bhi.n	800bb34 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ba42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d004      	beq.n	800ba52 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800ba48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ba4e:	d012      	beq.n	800ba76 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800ba50:	e070      	b.n	800bb34 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ba52:	4b8a      	ldr	r3, [pc, #552]	; (800bc7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ba5e:	d107      	bne.n	800ba70 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ba60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ba64:	4618      	mov	r0, r3
 800ba66:	f000 feaf 	bl	800c7c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ba6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba6e:	e3e4      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ba70:	2300      	movs	r3, #0
 800ba72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba74:	e3e1      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ba76:	4b81      	ldr	r3, [pc, #516]	; (800bc7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ba7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ba82:	d107      	bne.n	800ba94 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba84:	f107 0318 	add.w	r3, r7, #24
 800ba88:	4618      	mov	r0, r3
 800ba8a:	f000 fbf5 	bl	800c278 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ba8e:	69bb      	ldr	r3, [r7, #24]
 800ba90:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba92:	e3d2      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ba94:	2300      	movs	r3, #0
 800ba96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba98:	e3cf      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ba9a:	4b78      	ldr	r3, [pc, #480]	; (800bc7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800baa2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800baa6:	d107      	bne.n	800bab8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800baa8:	f107 030c 	add.w	r3, r7, #12
 800baac:	4618      	mov	r0, r3
 800baae:	f000 fd37 	bl	800c520 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bab6:	e3c0      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bab8:	2300      	movs	r3, #0
 800baba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800babc:	e3bd      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800babe:	4b6f      	ldr	r3, [pc, #444]	; (800bc7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bac2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bac6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bac8:	4b6c      	ldr	r3, [pc, #432]	; (800bc7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	f003 0304 	and.w	r3, r3, #4
 800bad0:	2b04      	cmp	r3, #4
 800bad2:	d10c      	bne.n	800baee <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800bad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d109      	bne.n	800baee <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bada:	4b68      	ldr	r3, [pc, #416]	; (800bc7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	08db      	lsrs	r3, r3, #3
 800bae0:	f003 0303 	and.w	r3, r3, #3
 800bae4:	4a66      	ldr	r2, [pc, #408]	; (800bc80 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800bae6:	fa22 f303 	lsr.w	r3, r2, r3
 800baea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800baec:	e01e      	b.n	800bb2c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800baee:	4b63      	ldr	r3, [pc, #396]	; (800bc7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800baf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bafa:	d106      	bne.n	800bb0a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800bafc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bafe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bb02:	d102      	bne.n	800bb0a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bb04:	4b5f      	ldr	r3, [pc, #380]	; (800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800bb06:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb08:	e010      	b.n	800bb2c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bb0a:	4b5c      	ldr	r3, [pc, #368]	; (800bc7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bb16:	d106      	bne.n	800bb26 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800bb18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb1e:	d102      	bne.n	800bb26 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bb20:	4b59      	ldr	r3, [pc, #356]	; (800bc88 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800bb22:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb24:	e002      	b.n	800bb2c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bb26:	2300      	movs	r3, #0
 800bb28:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bb2a:	e386      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bb2c:	e385      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bb2e:	4b57      	ldr	r3, [pc, #348]	; (800bc8c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800bb30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb32:	e382      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800bb34:	2300      	movs	r3, #0
 800bb36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb38:	e37f      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800bb3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb3e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800bb42:	430b      	orrs	r3, r1
 800bb44:	f040 80a7 	bne.w	800bc96 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800bb48:	4b4c      	ldr	r3, [pc, #304]	; (800bc7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bb4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb4c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800bb50:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bb52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bb58:	d055      	beq.n	800bc06 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800bb5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bb60:	f200 8096 	bhi.w	800bc90 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800bb64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb66:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bb6a:	f000 8084 	beq.w	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800bb6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb70:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bb74:	f200 808c 	bhi.w	800bc90 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800bb78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bb7e:	d030      	beq.n	800bbe2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800bb80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bb86:	f200 8083 	bhi.w	800bc90 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800bb8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d004      	beq.n	800bb9a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800bb90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb92:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bb96:	d012      	beq.n	800bbbe <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800bb98:	e07a      	b.n	800bc90 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bb9a:	4b38      	ldr	r3, [pc, #224]	; (800bc7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bba2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bba6:	d107      	bne.n	800bbb8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bba8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bbac:	4618      	mov	r0, r3
 800bbae:	f000 fe0b 	bl	800c7c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bbb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bbb6:	e340      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bbb8:	2300      	movs	r3, #0
 800bbba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bbbc:	e33d      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bbbe:	4b2f      	ldr	r3, [pc, #188]	; (800bc7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bbc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bbca:	d107      	bne.n	800bbdc <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bbcc:	f107 0318 	add.w	r3, r7, #24
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	f000 fb51 	bl	800c278 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bbd6:	69bb      	ldr	r3, [r7, #24]
 800bbd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bbda:	e32e      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bbdc:	2300      	movs	r3, #0
 800bbde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bbe0:	e32b      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bbe2:	4b26      	ldr	r3, [pc, #152]	; (800bc7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bbea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bbee:	d107      	bne.n	800bc00 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bbf0:	f107 030c 	add.w	r3, r7, #12
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	f000 fc93 	bl	800c520 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bbfe:	e31c      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bc00:	2300      	movs	r3, #0
 800bc02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc04:	e319      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bc06:	4b1d      	ldr	r3, [pc, #116]	; (800bc7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bc08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc0a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bc0e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bc10:	4b1a      	ldr	r3, [pc, #104]	; (800bc7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	f003 0304 	and.w	r3, r3, #4
 800bc18:	2b04      	cmp	r3, #4
 800bc1a:	d10c      	bne.n	800bc36 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800bc1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d109      	bne.n	800bc36 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bc22:	4b16      	ldr	r3, [pc, #88]	; (800bc7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	08db      	lsrs	r3, r3, #3
 800bc28:	f003 0303 	and.w	r3, r3, #3
 800bc2c:	4a14      	ldr	r2, [pc, #80]	; (800bc80 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800bc2e:	fa22 f303 	lsr.w	r3, r2, r3
 800bc32:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc34:	e01e      	b.n	800bc74 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bc36:	4b11      	ldr	r3, [pc, #68]	; (800bc7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc42:	d106      	bne.n	800bc52 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800bc44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bc4a:	d102      	bne.n	800bc52 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bc4c:	4b0d      	ldr	r3, [pc, #52]	; (800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800bc4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc50:	e010      	b.n	800bc74 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bc52:	4b0a      	ldr	r3, [pc, #40]	; (800bc7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bc5e:	d106      	bne.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800bc60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc66:	d102      	bne.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bc68:	4b07      	ldr	r3, [pc, #28]	; (800bc88 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800bc6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc6c:	e002      	b.n	800bc74 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bc6e:	2300      	movs	r3, #0
 800bc70:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bc72:	e2e2      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bc74:	e2e1      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bc76:	4b05      	ldr	r3, [pc, #20]	; (800bc8c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800bc78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc7a:	e2de      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bc7c:	58024400 	.word	0x58024400
 800bc80:	03d09000 	.word	0x03d09000
 800bc84:	003d0900 	.word	0x003d0900
 800bc88:	00989680 	.word	0x00989680
 800bc8c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800bc90:	2300      	movs	r3, #0
 800bc92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc94:	e2d1      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800bc96:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc9a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800bc9e:	430b      	orrs	r3, r1
 800bca0:	f040 809c 	bne.w	800bddc <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800bca4:	4b93      	ldr	r3, [pc, #588]	; (800bef4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bca6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bca8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800bcac:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800bcae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bcb4:	d054      	beq.n	800bd60 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800bcb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bcbc:	f200 808b 	bhi.w	800bdd6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800bcc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcc2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bcc6:	f000 8083 	beq.w	800bdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800bcca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bccc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bcd0:	f200 8081 	bhi.w	800bdd6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800bcd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bcda:	d02f      	beq.n	800bd3c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800bcdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bce2:	d878      	bhi.n	800bdd6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800bce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d004      	beq.n	800bcf4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800bcea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bcf0:	d012      	beq.n	800bd18 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800bcf2:	e070      	b.n	800bdd6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bcf4:	4b7f      	ldr	r3, [pc, #508]	; (800bef4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bcfc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bd00:	d107      	bne.n	800bd12 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bd02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bd06:	4618      	mov	r0, r3
 800bd08:	f000 fd5e 	bl	800c7c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bd0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd10:	e293      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bd12:	2300      	movs	r3, #0
 800bd14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd16:	e290      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bd18:	4b76      	ldr	r3, [pc, #472]	; (800bef4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bd20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bd24:	d107      	bne.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd26:	f107 0318 	add.w	r3, r7, #24
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	f000 faa4 	bl	800c278 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bd30:	69bb      	ldr	r3, [r7, #24]
 800bd32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd34:	e281      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bd36:	2300      	movs	r3, #0
 800bd38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd3a:	e27e      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bd3c:	4b6d      	ldr	r3, [pc, #436]	; (800bef4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bd44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd48:	d107      	bne.n	800bd5a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bd4a:	f107 030c 	add.w	r3, r7, #12
 800bd4e:	4618      	mov	r0, r3
 800bd50:	f000 fbe6 	bl	800c520 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd58:	e26f      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd5e:	e26c      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bd60:	4b64      	ldr	r3, [pc, #400]	; (800bef4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bd62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd64:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bd68:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bd6a:	4b62      	ldr	r3, [pc, #392]	; (800bef4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	f003 0304 	and.w	r3, r3, #4
 800bd72:	2b04      	cmp	r3, #4
 800bd74:	d10c      	bne.n	800bd90 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800bd76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d109      	bne.n	800bd90 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bd7c:	4b5d      	ldr	r3, [pc, #372]	; (800bef4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	08db      	lsrs	r3, r3, #3
 800bd82:	f003 0303 	and.w	r3, r3, #3
 800bd86:	4a5c      	ldr	r2, [pc, #368]	; (800bef8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800bd88:	fa22 f303 	lsr.w	r3, r2, r3
 800bd8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd8e:	e01e      	b.n	800bdce <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bd90:	4b58      	ldr	r3, [pc, #352]	; (800bef4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd9c:	d106      	bne.n	800bdac <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800bd9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bda0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bda4:	d102      	bne.n	800bdac <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bda6:	4b55      	ldr	r3, [pc, #340]	; (800befc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800bda8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bdaa:	e010      	b.n	800bdce <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bdac:	4b51      	ldr	r3, [pc, #324]	; (800bef4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bdb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bdb8:	d106      	bne.n	800bdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800bdba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bdc0:	d102      	bne.n	800bdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bdc2:	4b4f      	ldr	r3, [pc, #316]	; (800bf00 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800bdc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bdc6:	e002      	b.n	800bdce <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bdc8:	2300      	movs	r3, #0
 800bdca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bdcc:	e235      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bdce:	e234      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bdd0:	4b4c      	ldr	r3, [pc, #304]	; (800bf04 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800bdd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bdd4:	e231      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bdda:	e22e      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800bddc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bde0:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800bde4:	430b      	orrs	r3, r1
 800bde6:	f040 808f 	bne.w	800bf08 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800bdea:	4b42      	ldr	r3, [pc, #264]	; (800bef4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bdec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdee:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800bdf2:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800bdf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdf6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bdfa:	d06b      	beq.n	800bed4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800bdfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdfe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800be02:	d874      	bhi.n	800beee <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800be04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be06:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800be0a:	d056      	beq.n	800beba <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800be0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be0e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800be12:	d86c      	bhi.n	800beee <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800be14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be16:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800be1a:	d03b      	beq.n	800be94 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800be1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be1e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800be22:	d864      	bhi.n	800beee <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800be24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be2a:	d021      	beq.n	800be70 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800be2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be32:	d85c      	bhi.n	800beee <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800be34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be36:	2b00      	cmp	r3, #0
 800be38:	d004      	beq.n	800be44 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800be3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be40:	d004      	beq.n	800be4c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800be42:	e054      	b.n	800beee <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800be44:	f7fe fa30 	bl	800a2a8 <HAL_RCC_GetPCLK1Freq>
 800be48:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800be4a:	e1f6      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800be4c:	4b29      	ldr	r3, [pc, #164]	; (800bef4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800be58:	d107      	bne.n	800be6a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be5a:	f107 0318 	add.w	r3, r7, #24
 800be5e:	4618      	mov	r0, r3
 800be60:	f000 fa0a 	bl	800c278 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800be64:	69fb      	ldr	r3, [r7, #28]
 800be66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be68:	e1e7      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800be6a:	2300      	movs	r3, #0
 800be6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be6e:	e1e4      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800be70:	4b20      	ldr	r3, [pc, #128]	; (800bef4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800be78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be7c:	d107      	bne.n	800be8e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be7e:	f107 030c 	add.w	r3, r7, #12
 800be82:	4618      	mov	r0, r3
 800be84:	f000 fb4c 	bl	800c520 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800be88:	693b      	ldr	r3, [r7, #16]
 800be8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be8c:	e1d5      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800be8e:	2300      	movs	r3, #0
 800be90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be92:	e1d2      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800be94:	4b17      	ldr	r3, [pc, #92]	; (800bef4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	f003 0304 	and.w	r3, r3, #4
 800be9c:	2b04      	cmp	r3, #4
 800be9e:	d109      	bne.n	800beb4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bea0:	4b14      	ldr	r3, [pc, #80]	; (800bef4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	08db      	lsrs	r3, r3, #3
 800bea6:	f003 0303 	and.w	r3, r3, #3
 800beaa:	4a13      	ldr	r2, [pc, #76]	; (800bef8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800beac:	fa22 f303 	lsr.w	r3, r2, r3
 800beb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800beb2:	e1c2      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800beb4:	2300      	movs	r3, #0
 800beb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800beb8:	e1bf      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800beba:	4b0e      	ldr	r3, [pc, #56]	; (800bef4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bec2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bec6:	d102      	bne.n	800bece <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800bec8:	4b0c      	ldr	r3, [pc, #48]	; (800befc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800beca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800becc:	e1b5      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bece:	2300      	movs	r3, #0
 800bed0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bed2:	e1b2      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bed4:	4b07      	ldr	r3, [pc, #28]	; (800bef4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bedc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bee0:	d102      	bne.n	800bee8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800bee2:	4b07      	ldr	r3, [pc, #28]	; (800bf00 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800bee4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bee6:	e1a8      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bee8:	2300      	movs	r3, #0
 800beea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800beec:	e1a5      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800beee:	2300      	movs	r3, #0
 800bef0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bef2:	e1a2      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bef4:	58024400 	.word	0x58024400
 800bef8:	03d09000 	.word	0x03d09000
 800befc:	003d0900 	.word	0x003d0900
 800bf00:	00989680 	.word	0x00989680
 800bf04:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800bf08:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf0c:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800bf10:	430b      	orrs	r3, r1
 800bf12:	d173      	bne.n	800bffc <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800bf14:	4b9c      	ldr	r3, [pc, #624]	; (800c188 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bf16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800bf1c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800bf1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bf24:	d02f      	beq.n	800bf86 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800bf26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bf2c:	d863      	bhi.n	800bff6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800bf2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d004      	beq.n	800bf3e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800bf34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf3a:	d012      	beq.n	800bf62 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800bf3c:	e05b      	b.n	800bff6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bf3e:	4b92      	ldr	r3, [pc, #584]	; (800c188 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bf4a:	d107      	bne.n	800bf5c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf4c:	f107 0318 	add.w	r3, r7, #24
 800bf50:	4618      	mov	r0, r3
 800bf52:	f000 f991 	bl	800c278 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bf56:	69bb      	ldr	r3, [r7, #24]
 800bf58:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf5a:	e16e      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf60:	e16b      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bf62:	4b89      	ldr	r3, [pc, #548]	; (800c188 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf6e:	d107      	bne.n	800bf80 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bf70:	f107 030c 	add.w	r3, r7, #12
 800bf74:	4618      	mov	r0, r3
 800bf76:	f000 fad3 	bl	800c520 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800bf7a:	697b      	ldr	r3, [r7, #20]
 800bf7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf7e:	e15c      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bf80:	2300      	movs	r3, #0
 800bf82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf84:	e159      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bf86:	4b80      	ldr	r3, [pc, #512]	; (800c188 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bf88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf8a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bf8e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bf90:	4b7d      	ldr	r3, [pc, #500]	; (800c188 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	f003 0304 	and.w	r3, r3, #4
 800bf98:	2b04      	cmp	r3, #4
 800bf9a:	d10c      	bne.n	800bfb6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800bf9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d109      	bne.n	800bfb6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bfa2:	4b79      	ldr	r3, [pc, #484]	; (800c188 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	08db      	lsrs	r3, r3, #3
 800bfa8:	f003 0303 	and.w	r3, r3, #3
 800bfac:	4a77      	ldr	r2, [pc, #476]	; (800c18c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800bfae:	fa22 f303 	lsr.w	r3, r2, r3
 800bfb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfb4:	e01e      	b.n	800bff4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bfb6:	4b74      	ldr	r3, [pc, #464]	; (800c188 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bfbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bfc2:	d106      	bne.n	800bfd2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800bfc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfc6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bfca:	d102      	bne.n	800bfd2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bfcc:	4b70      	ldr	r3, [pc, #448]	; (800c190 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800bfce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfd0:	e010      	b.n	800bff4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bfd2:	4b6d      	ldr	r3, [pc, #436]	; (800c188 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bfda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bfde:	d106      	bne.n	800bfee <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800bfe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfe2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bfe6:	d102      	bne.n	800bfee <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bfe8:	4b6a      	ldr	r3, [pc, #424]	; (800c194 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800bfea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfec:	e002      	b.n	800bff4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bfee:	2300      	movs	r3, #0
 800bff0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bff2:	e122      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bff4:	e121      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800bff6:	2300      	movs	r3, #0
 800bff8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bffa:	e11e      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800bffc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c000:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800c004:	430b      	orrs	r3, r1
 800c006:	d133      	bne.n	800c070 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c008:	4b5f      	ldr	r3, [pc, #380]	; (800c188 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c00a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c00c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c010:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c014:	2b00      	cmp	r3, #0
 800c016:	d004      	beq.n	800c022 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800c018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c01a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c01e:	d012      	beq.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800c020:	e023      	b.n	800c06a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c022:	4b59      	ldr	r3, [pc, #356]	; (800c188 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c02a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c02e:	d107      	bne.n	800c040 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c030:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c034:	4618      	mov	r0, r3
 800c036:	f000 fbc7 	bl	800c7c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c03a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c03c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c03e:	e0fc      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c040:	2300      	movs	r3, #0
 800c042:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c044:	e0f9      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c046:	4b50      	ldr	r3, [pc, #320]	; (800c188 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c04e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c052:	d107      	bne.n	800c064 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c054:	f107 0318 	add.w	r3, r7, #24
 800c058:	4618      	mov	r0, r3
 800c05a:	f000 f90d 	bl	800c278 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c05e:	6a3b      	ldr	r3, [r7, #32]
 800c060:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c062:	e0ea      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c064:	2300      	movs	r3, #0
 800c066:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c068:	e0e7      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c06a:	2300      	movs	r3, #0
 800c06c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c06e:	e0e4      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c070:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c074:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800c078:	430b      	orrs	r3, r1
 800c07a:	f040 808d 	bne.w	800c198 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c07e:	4b42      	ldr	r3, [pc, #264]	; (800c188 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c082:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c086:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c08a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c08e:	d06b      	beq.n	800c168 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800c090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c092:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c096:	d874      	bhi.n	800c182 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c09a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c09e:	d056      	beq.n	800c14e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800c0a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c0a6:	d86c      	bhi.n	800c182 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c0a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c0ae:	d03b      	beq.n	800c128 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800c0b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0b2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c0b6:	d864      	bhi.n	800c182 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c0b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c0be:	d021      	beq.n	800c104 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800c0c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c0c6:	d85c      	bhi.n	800c182 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c0c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d004      	beq.n	800c0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800c0ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c0d4:	d004      	beq.n	800c0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800c0d6:	e054      	b.n	800c182 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c0d8:	f000 f8b8 	bl	800c24c <HAL_RCCEx_GetD3PCLK1Freq>
 800c0dc:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c0de:	e0ac      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c0e0:	4b29      	ldr	r3, [pc, #164]	; (800c188 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c0e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c0ec:	d107      	bne.n	800c0fe <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c0ee:	f107 0318 	add.w	r3, r7, #24
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	f000 f8c0 	bl	800c278 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c0f8:	69fb      	ldr	r3, [r7, #28]
 800c0fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c0fc:	e09d      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c0fe:	2300      	movs	r3, #0
 800c100:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c102:	e09a      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c104:	4b20      	ldr	r3, [pc, #128]	; (800c188 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c10c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c110:	d107      	bne.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c112:	f107 030c 	add.w	r3, r7, #12
 800c116:	4618      	mov	r0, r3
 800c118:	f000 fa02 	bl	800c520 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c11c:	693b      	ldr	r3, [r7, #16]
 800c11e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c120:	e08b      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c122:	2300      	movs	r3, #0
 800c124:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c126:	e088      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c128:	4b17      	ldr	r3, [pc, #92]	; (800c188 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	f003 0304 	and.w	r3, r3, #4
 800c130:	2b04      	cmp	r3, #4
 800c132:	d109      	bne.n	800c148 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c134:	4b14      	ldr	r3, [pc, #80]	; (800c188 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	08db      	lsrs	r3, r3, #3
 800c13a:	f003 0303 	and.w	r3, r3, #3
 800c13e:	4a13      	ldr	r2, [pc, #76]	; (800c18c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800c140:	fa22 f303 	lsr.w	r3, r2, r3
 800c144:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c146:	e078      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c148:	2300      	movs	r3, #0
 800c14a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c14c:	e075      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c14e:	4b0e      	ldr	r3, [pc, #56]	; (800c188 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c156:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c15a:	d102      	bne.n	800c162 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800c15c:	4b0c      	ldr	r3, [pc, #48]	; (800c190 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800c15e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c160:	e06b      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c162:	2300      	movs	r3, #0
 800c164:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c166:	e068      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c168:	4b07      	ldr	r3, [pc, #28]	; (800c188 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c170:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c174:	d102      	bne.n	800c17c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800c176:	4b07      	ldr	r3, [pc, #28]	; (800c194 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800c178:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c17a:	e05e      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c17c:	2300      	movs	r3, #0
 800c17e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c180:	e05b      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c182:	2300      	movs	r3, #0
 800c184:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c186:	e058      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c188:	58024400 	.word	0x58024400
 800c18c:	03d09000 	.word	0x03d09000
 800c190:	003d0900 	.word	0x003d0900
 800c194:	00989680 	.word	0x00989680
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c198:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c19c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800c1a0:	430b      	orrs	r3, r1
 800c1a2:	d148      	bne.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c1a4:	4b27      	ldr	r3, [pc, #156]	; (800c244 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c1a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c1ac:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c1ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c1b4:	d02a      	beq.n	800c20c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800c1b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c1bc:	d838      	bhi.n	800c230 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800c1be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d004      	beq.n	800c1ce <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800c1c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c1ca:	d00d      	beq.n	800c1e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800c1cc:	e030      	b.n	800c230 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c1ce:	4b1d      	ldr	r3, [pc, #116]	; (800c244 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c1da:	d102      	bne.n	800c1e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800c1dc:	4b1a      	ldr	r3, [pc, #104]	; (800c248 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800c1de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1e0:	e02b      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1e6:	e028      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c1e8:	4b16      	ldr	r3, [pc, #88]	; (800c244 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c1f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c1f4:	d107      	bne.n	800c206 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c1f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	f000 fae4 	bl	800c7c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c202:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c204:	e019      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c206:	2300      	movs	r3, #0
 800c208:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c20a:	e016      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c20c:	4b0d      	ldr	r3, [pc, #52]	; (800c244 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c214:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c218:	d107      	bne.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c21a:	f107 0318 	add.w	r3, r7, #24
 800c21e:	4618      	mov	r0, r3
 800c220:	f000 f82a 	bl	800c278 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c224:	69fb      	ldr	r3, [r7, #28]
 800c226:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c228:	e007      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c22a:	2300      	movs	r3, #0
 800c22c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c22e:	e004      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c230:	2300      	movs	r3, #0
 800c232:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c234:	e001      	b.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800c236:	2300      	movs	r3, #0
 800c238:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800c23a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c23c:	4618      	mov	r0, r3
 800c23e:	3740      	adds	r7, #64	; 0x40
 800c240:	46bd      	mov	sp, r7
 800c242:	bd80      	pop	{r7, pc}
 800c244:	58024400 	.word	0x58024400
 800c248:	00989680 	.word	0x00989680

0800c24c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c250:	f7fd fffa 	bl	800a248 <HAL_RCC_GetHCLKFreq>
 800c254:	4602      	mov	r2, r0
 800c256:	4b06      	ldr	r3, [pc, #24]	; (800c270 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c258:	6a1b      	ldr	r3, [r3, #32]
 800c25a:	091b      	lsrs	r3, r3, #4
 800c25c:	f003 0307 	and.w	r3, r3, #7
 800c260:	4904      	ldr	r1, [pc, #16]	; (800c274 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c262:	5ccb      	ldrb	r3, [r1, r3]
 800c264:	f003 031f 	and.w	r3, r3, #31
 800c268:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c26c:	4618      	mov	r0, r3
 800c26e:	bd80      	pop	{r7, pc}
 800c270:	58024400 	.word	0x58024400
 800c274:	0801e6d0 	.word	0x0801e6d0

0800c278 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c278:	b480      	push	{r7}
 800c27a:	b089      	sub	sp, #36	; 0x24
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c280:	4ba1      	ldr	r3, [pc, #644]	; (800c508 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c284:	f003 0303 	and.w	r3, r3, #3
 800c288:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c28a:	4b9f      	ldr	r3, [pc, #636]	; (800c508 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c28c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c28e:	0b1b      	lsrs	r3, r3, #12
 800c290:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c294:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c296:	4b9c      	ldr	r3, [pc, #624]	; (800c508 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c29a:	091b      	lsrs	r3, r3, #4
 800c29c:	f003 0301 	and.w	r3, r3, #1
 800c2a0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c2a2:	4b99      	ldr	r3, [pc, #612]	; (800c508 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c2a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2a6:	08db      	lsrs	r3, r3, #3
 800c2a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c2ac:	693a      	ldr	r2, [r7, #16]
 800c2ae:	fb02 f303 	mul.w	r3, r2, r3
 800c2b2:	ee07 3a90 	vmov	s15, r3
 800c2b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2ba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c2be:	697b      	ldr	r3, [r7, #20]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	f000 8111 	beq.w	800c4e8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c2c6:	69bb      	ldr	r3, [r7, #24]
 800c2c8:	2b02      	cmp	r3, #2
 800c2ca:	f000 8083 	beq.w	800c3d4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c2ce:	69bb      	ldr	r3, [r7, #24]
 800c2d0:	2b02      	cmp	r3, #2
 800c2d2:	f200 80a1 	bhi.w	800c418 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c2d6:	69bb      	ldr	r3, [r7, #24]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d003      	beq.n	800c2e4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c2dc:	69bb      	ldr	r3, [r7, #24]
 800c2de:	2b01      	cmp	r3, #1
 800c2e0:	d056      	beq.n	800c390 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c2e2:	e099      	b.n	800c418 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c2e4:	4b88      	ldr	r3, [pc, #544]	; (800c508 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	f003 0320 	and.w	r3, r3, #32
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d02d      	beq.n	800c34c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c2f0:	4b85      	ldr	r3, [pc, #532]	; (800c508 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	08db      	lsrs	r3, r3, #3
 800c2f6:	f003 0303 	and.w	r3, r3, #3
 800c2fa:	4a84      	ldr	r2, [pc, #528]	; (800c50c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c2fc:	fa22 f303 	lsr.w	r3, r2, r3
 800c300:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c302:	68bb      	ldr	r3, [r7, #8]
 800c304:	ee07 3a90 	vmov	s15, r3
 800c308:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c30c:	697b      	ldr	r3, [r7, #20]
 800c30e:	ee07 3a90 	vmov	s15, r3
 800c312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c31a:	4b7b      	ldr	r3, [pc, #492]	; (800c508 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c31c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c31e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c322:	ee07 3a90 	vmov	s15, r3
 800c326:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c32a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c32e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c510 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c332:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c336:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c33a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c33e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c342:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c346:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c34a:	e087      	b.n	800c45c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c34c:	697b      	ldr	r3, [r7, #20]
 800c34e:	ee07 3a90 	vmov	s15, r3
 800c352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c356:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c514 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c35a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c35e:	4b6a      	ldr	r3, [pc, #424]	; (800c508 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c366:	ee07 3a90 	vmov	s15, r3
 800c36a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c36e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c372:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c510 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c376:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c37a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c37e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c382:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c38a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c38e:	e065      	b.n	800c45c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c390:	697b      	ldr	r3, [r7, #20]
 800c392:	ee07 3a90 	vmov	s15, r3
 800c396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c39a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c518 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c39e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c3a2:	4b59      	ldr	r3, [pc, #356]	; (800c508 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c3a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3aa:	ee07 3a90 	vmov	s15, r3
 800c3ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3b2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c3b6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c510 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c3ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c3be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c3c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c3c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c3ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c3d2:	e043      	b.n	800c45c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c3d4:	697b      	ldr	r3, [r7, #20]
 800c3d6:	ee07 3a90 	vmov	s15, r3
 800c3da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3de:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c51c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c3e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c3e6:	4b48      	ldr	r3, [pc, #288]	; (800c508 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c3e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3ee:	ee07 3a90 	vmov	s15, r3
 800c3f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3f6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c3fa:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c510 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c3fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c402:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c406:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c40a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c40e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c412:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c416:	e021      	b.n	800c45c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c418:	697b      	ldr	r3, [r7, #20]
 800c41a:	ee07 3a90 	vmov	s15, r3
 800c41e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c422:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c518 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c426:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c42a:	4b37      	ldr	r3, [pc, #220]	; (800c508 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c42c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c42e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c432:	ee07 3a90 	vmov	s15, r3
 800c436:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c43a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c43e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c510 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c442:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c446:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c44a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c44e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c452:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c456:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c45a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c45c:	4b2a      	ldr	r3, [pc, #168]	; (800c508 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c45e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c460:	0a5b      	lsrs	r3, r3, #9
 800c462:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c466:	ee07 3a90 	vmov	s15, r3
 800c46a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c46e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c472:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c476:	edd7 6a07 	vldr	s13, [r7, #28]
 800c47a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c47e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c482:	ee17 2a90 	vmov	r2, s15
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800c48a:	4b1f      	ldr	r3, [pc, #124]	; (800c508 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c48c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c48e:	0c1b      	lsrs	r3, r3, #16
 800c490:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c494:	ee07 3a90 	vmov	s15, r3
 800c498:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c49c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c4a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c4a4:	edd7 6a07 	vldr	s13, [r7, #28]
 800c4a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c4ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c4b0:	ee17 2a90 	vmov	r2, s15
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800c4b8:	4b13      	ldr	r3, [pc, #76]	; (800c508 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c4ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4bc:	0e1b      	lsrs	r3, r3, #24
 800c4be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4c2:	ee07 3a90 	vmov	s15, r3
 800c4c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c4ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c4d2:	edd7 6a07 	vldr	s13, [r7, #28]
 800c4d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c4da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c4de:	ee17 2a90 	vmov	r2, s15
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c4e6:	e008      	b.n	800c4fa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	609a      	str	r2, [r3, #8]
}
 800c4fa:	bf00      	nop
 800c4fc:	3724      	adds	r7, #36	; 0x24
 800c4fe:	46bd      	mov	sp, r7
 800c500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c504:	4770      	bx	lr
 800c506:	bf00      	nop
 800c508:	58024400 	.word	0x58024400
 800c50c:	03d09000 	.word	0x03d09000
 800c510:	46000000 	.word	0x46000000
 800c514:	4c742400 	.word	0x4c742400
 800c518:	4a742400 	.word	0x4a742400
 800c51c:	4b189680 	.word	0x4b189680

0800c520 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c520:	b480      	push	{r7}
 800c522:	b089      	sub	sp, #36	; 0x24
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c528:	4ba1      	ldr	r3, [pc, #644]	; (800c7b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c52a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c52c:	f003 0303 	and.w	r3, r3, #3
 800c530:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c532:	4b9f      	ldr	r3, [pc, #636]	; (800c7b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c536:	0d1b      	lsrs	r3, r3, #20
 800c538:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c53c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c53e:	4b9c      	ldr	r3, [pc, #624]	; (800c7b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c542:	0a1b      	lsrs	r3, r3, #8
 800c544:	f003 0301 	and.w	r3, r3, #1
 800c548:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c54a:	4b99      	ldr	r3, [pc, #612]	; (800c7b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c54c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c54e:	08db      	lsrs	r3, r3, #3
 800c550:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c554:	693a      	ldr	r2, [r7, #16]
 800c556:	fb02 f303 	mul.w	r3, r2, r3
 800c55a:	ee07 3a90 	vmov	s15, r3
 800c55e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c562:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c566:	697b      	ldr	r3, [r7, #20]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	f000 8111 	beq.w	800c790 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c56e:	69bb      	ldr	r3, [r7, #24]
 800c570:	2b02      	cmp	r3, #2
 800c572:	f000 8083 	beq.w	800c67c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c576:	69bb      	ldr	r3, [r7, #24]
 800c578:	2b02      	cmp	r3, #2
 800c57a:	f200 80a1 	bhi.w	800c6c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c57e:	69bb      	ldr	r3, [r7, #24]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d003      	beq.n	800c58c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c584:	69bb      	ldr	r3, [r7, #24]
 800c586:	2b01      	cmp	r3, #1
 800c588:	d056      	beq.n	800c638 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c58a:	e099      	b.n	800c6c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c58c:	4b88      	ldr	r3, [pc, #544]	; (800c7b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	f003 0320 	and.w	r3, r3, #32
 800c594:	2b00      	cmp	r3, #0
 800c596:	d02d      	beq.n	800c5f4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c598:	4b85      	ldr	r3, [pc, #532]	; (800c7b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	08db      	lsrs	r3, r3, #3
 800c59e:	f003 0303 	and.w	r3, r3, #3
 800c5a2:	4a84      	ldr	r2, [pc, #528]	; (800c7b4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c5a4:	fa22 f303 	lsr.w	r3, r2, r3
 800c5a8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c5aa:	68bb      	ldr	r3, [r7, #8]
 800c5ac:	ee07 3a90 	vmov	s15, r3
 800c5b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5b4:	697b      	ldr	r3, [r7, #20]
 800c5b6:	ee07 3a90 	vmov	s15, r3
 800c5ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c5c2:	4b7b      	ldr	r3, [pc, #492]	; (800c7b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c5c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5ca:	ee07 3a90 	vmov	s15, r3
 800c5ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5d2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c5d6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c7b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c5da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c5de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c5e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c5e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c5ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5ee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c5f2:	e087      	b.n	800c704 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c5f4:	697b      	ldr	r3, [r7, #20]
 800c5f6:	ee07 3a90 	vmov	s15, r3
 800c5fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5fe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c7bc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c602:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c606:	4b6a      	ldr	r3, [pc, #424]	; (800c7b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c60a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c60e:	ee07 3a90 	vmov	s15, r3
 800c612:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c616:	ed97 6a03 	vldr	s12, [r7, #12]
 800c61a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c7b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c61e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c622:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c626:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c62a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c62e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c632:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c636:	e065      	b.n	800c704 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c638:	697b      	ldr	r3, [r7, #20]
 800c63a:	ee07 3a90 	vmov	s15, r3
 800c63e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c642:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c7c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c646:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c64a:	4b59      	ldr	r3, [pc, #356]	; (800c7b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c64c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c64e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c652:	ee07 3a90 	vmov	s15, r3
 800c656:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c65a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c65e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c7b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c662:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c666:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c66a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c66e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c672:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c676:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c67a:	e043      	b.n	800c704 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c67c:	697b      	ldr	r3, [r7, #20]
 800c67e:	ee07 3a90 	vmov	s15, r3
 800c682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c686:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c7c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c68a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c68e:	4b48      	ldr	r3, [pc, #288]	; (800c7b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c692:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c696:	ee07 3a90 	vmov	s15, r3
 800c69a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c69e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c6a2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c7b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c6a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c6aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c6ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c6b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c6be:	e021      	b.n	800c704 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c6c0:	697b      	ldr	r3, [r7, #20]
 800c6c2:	ee07 3a90 	vmov	s15, r3
 800c6c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6ca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c7c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c6ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c6d2:	4b37      	ldr	r3, [pc, #220]	; (800c7b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c6d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6da:	ee07 3a90 	vmov	s15, r3
 800c6de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c6e6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c7b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c6ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c6ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c6f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c6f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c702:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c704:	4b2a      	ldr	r3, [pc, #168]	; (800c7b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c708:	0a5b      	lsrs	r3, r3, #9
 800c70a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c70e:	ee07 3a90 	vmov	s15, r3
 800c712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c716:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c71a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c71e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c722:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c726:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c72a:	ee17 2a90 	vmov	r2, s15
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800c732:	4b1f      	ldr	r3, [pc, #124]	; (800c7b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c736:	0c1b      	lsrs	r3, r3, #16
 800c738:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c73c:	ee07 3a90 	vmov	s15, r3
 800c740:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c744:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c748:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c74c:	edd7 6a07 	vldr	s13, [r7, #28]
 800c750:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c754:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c758:	ee17 2a90 	vmov	r2, s15
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800c760:	4b13      	ldr	r3, [pc, #76]	; (800c7b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c764:	0e1b      	lsrs	r3, r3, #24
 800c766:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c76a:	ee07 3a90 	vmov	s15, r3
 800c76e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c772:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c776:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c77a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c77e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c782:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c786:	ee17 2a90 	vmov	r2, s15
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c78e:	e008      	b.n	800c7a2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	2200      	movs	r2, #0
 800c794:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	2200      	movs	r2, #0
 800c79a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	2200      	movs	r2, #0
 800c7a0:	609a      	str	r2, [r3, #8]
}
 800c7a2:	bf00      	nop
 800c7a4:	3724      	adds	r7, #36	; 0x24
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ac:	4770      	bx	lr
 800c7ae:	bf00      	nop
 800c7b0:	58024400 	.word	0x58024400
 800c7b4:	03d09000 	.word	0x03d09000
 800c7b8:	46000000 	.word	0x46000000
 800c7bc:	4c742400 	.word	0x4c742400
 800c7c0:	4a742400 	.word	0x4a742400
 800c7c4:	4b189680 	.word	0x4b189680

0800c7c8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800c7c8:	b480      	push	{r7}
 800c7ca:	b089      	sub	sp, #36	; 0x24
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c7d0:	4ba0      	ldr	r3, [pc, #640]	; (800ca54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c7d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7d4:	f003 0303 	and.w	r3, r3, #3
 800c7d8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800c7da:	4b9e      	ldr	r3, [pc, #632]	; (800ca54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c7dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7de:	091b      	lsrs	r3, r3, #4
 800c7e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c7e4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c7e6:	4b9b      	ldr	r3, [pc, #620]	; (800ca54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c7e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7ea:	f003 0301 	and.w	r3, r3, #1
 800c7ee:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c7f0:	4b98      	ldr	r3, [pc, #608]	; (800ca54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c7f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7f4:	08db      	lsrs	r3, r3, #3
 800c7f6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c7fa:	693a      	ldr	r2, [r7, #16]
 800c7fc:	fb02 f303 	mul.w	r3, r2, r3
 800c800:	ee07 3a90 	vmov	s15, r3
 800c804:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c808:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800c80c:	697b      	ldr	r3, [r7, #20]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	f000 8111 	beq.w	800ca36 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800c814:	69bb      	ldr	r3, [r7, #24]
 800c816:	2b02      	cmp	r3, #2
 800c818:	f000 8083 	beq.w	800c922 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800c81c:	69bb      	ldr	r3, [r7, #24]
 800c81e:	2b02      	cmp	r3, #2
 800c820:	f200 80a1 	bhi.w	800c966 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800c824:	69bb      	ldr	r3, [r7, #24]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d003      	beq.n	800c832 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800c82a:	69bb      	ldr	r3, [r7, #24]
 800c82c:	2b01      	cmp	r3, #1
 800c82e:	d056      	beq.n	800c8de <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800c830:	e099      	b.n	800c966 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c832:	4b88      	ldr	r3, [pc, #544]	; (800ca54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	f003 0320 	and.w	r3, r3, #32
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d02d      	beq.n	800c89a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c83e:	4b85      	ldr	r3, [pc, #532]	; (800ca54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	08db      	lsrs	r3, r3, #3
 800c844:	f003 0303 	and.w	r3, r3, #3
 800c848:	4a83      	ldr	r2, [pc, #524]	; (800ca58 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800c84a:	fa22 f303 	lsr.w	r3, r2, r3
 800c84e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c850:	68bb      	ldr	r3, [r7, #8]
 800c852:	ee07 3a90 	vmov	s15, r3
 800c856:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c85a:	697b      	ldr	r3, [r7, #20]
 800c85c:	ee07 3a90 	vmov	s15, r3
 800c860:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c864:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c868:	4b7a      	ldr	r3, [pc, #488]	; (800ca54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c86a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c86c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c870:	ee07 3a90 	vmov	s15, r3
 800c874:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c878:	ed97 6a03 	vldr	s12, [r7, #12]
 800c87c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800ca5c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c880:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c884:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c888:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c88c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c890:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c894:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c898:	e087      	b.n	800c9aa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c89a:	697b      	ldr	r3, [r7, #20]
 800c89c:	ee07 3a90 	vmov	s15, r3
 800c8a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8a4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800ca60 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c8a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8ac:	4b69      	ldr	r3, [pc, #420]	; (800ca54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c8ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8b4:	ee07 3a90 	vmov	s15, r3
 800c8b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8bc:	ed97 6a03 	vldr	s12, [r7, #12]
 800c8c0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800ca5c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c8c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c8c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c8cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c8d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c8d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8d8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c8dc:	e065      	b.n	800c9aa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c8de:	697b      	ldr	r3, [r7, #20]
 800c8e0:	ee07 3a90 	vmov	s15, r3
 800c8e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8e8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800ca64 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800c8ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8f0:	4b58      	ldr	r3, [pc, #352]	; (800ca54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c8f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8f8:	ee07 3a90 	vmov	s15, r3
 800c8fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c900:	ed97 6a03 	vldr	s12, [r7, #12]
 800c904:	eddf 5a55 	vldr	s11, [pc, #340]	; 800ca5c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c908:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c90c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c910:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c914:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c918:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c91c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c920:	e043      	b.n	800c9aa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c922:	697b      	ldr	r3, [r7, #20]
 800c924:	ee07 3a90 	vmov	s15, r3
 800c928:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c92c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800ca68 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c930:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c934:	4b47      	ldr	r3, [pc, #284]	; (800ca54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c93c:	ee07 3a90 	vmov	s15, r3
 800c940:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c944:	ed97 6a03 	vldr	s12, [r7, #12]
 800c948:	eddf 5a44 	vldr	s11, [pc, #272]	; 800ca5c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c94c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c950:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c954:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c958:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c95c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c960:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c964:	e021      	b.n	800c9aa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c966:	697b      	ldr	r3, [r7, #20]
 800c968:	ee07 3a90 	vmov	s15, r3
 800c96c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c970:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800ca60 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c974:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c978:	4b36      	ldr	r3, [pc, #216]	; (800ca54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c97a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c97c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c980:	ee07 3a90 	vmov	s15, r3
 800c984:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c988:	ed97 6a03 	vldr	s12, [r7, #12]
 800c98c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800ca5c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c990:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c994:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c998:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c99c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9a4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c9a8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800c9aa:	4b2a      	ldr	r3, [pc, #168]	; (800ca54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c9ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9ae:	0a5b      	lsrs	r3, r3, #9
 800c9b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9b4:	ee07 3a90 	vmov	s15, r3
 800c9b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c9c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c9c4:	edd7 6a07 	vldr	s13, [r7, #28]
 800c9c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c9cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c9d0:	ee17 2a90 	vmov	r2, s15
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800c9d8:	4b1e      	ldr	r3, [pc, #120]	; (800ca54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c9da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9dc:	0c1b      	lsrs	r3, r3, #16
 800c9de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9e2:	ee07 3a90 	vmov	s15, r3
 800c9e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c9ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c9f2:	edd7 6a07 	vldr	s13, [r7, #28]
 800c9f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c9fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c9fe:	ee17 2a90 	vmov	r2, s15
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800ca06:	4b13      	ldr	r3, [pc, #76]	; (800ca54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ca08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca0a:	0e1b      	lsrs	r3, r3, #24
 800ca0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca10:	ee07 3a90 	vmov	s15, r3
 800ca14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ca1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ca20:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca2c:	ee17 2a90 	vmov	r2, s15
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800ca34:	e008      	b.n	800ca48 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	2200      	movs	r2, #0
 800ca3a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	2200      	movs	r2, #0
 800ca40:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	2200      	movs	r2, #0
 800ca46:	609a      	str	r2, [r3, #8]
}
 800ca48:	bf00      	nop
 800ca4a:	3724      	adds	r7, #36	; 0x24
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca52:	4770      	bx	lr
 800ca54:	58024400 	.word	0x58024400
 800ca58:	03d09000 	.word	0x03d09000
 800ca5c:	46000000 	.word	0x46000000
 800ca60:	4c742400 	.word	0x4c742400
 800ca64:	4a742400 	.word	0x4a742400
 800ca68:	4b189680 	.word	0x4b189680

0800ca6c <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b084      	sub	sp, #16
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 800ca74:	4b26      	ldr	r3, [pc, #152]	; (800cb10 <HAL_RCCEx_CRSConfig+0xa4>)
 800ca76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ca7a:	4a25      	ldr	r2, [pc, #148]	; (800cb10 <HAL_RCCEx_CRSConfig+0xa4>)
 800ca7c:	f043 0302 	orr.w	r3, r3, #2
 800ca80:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
 800ca84:	4b22      	ldr	r3, [pc, #136]	; (800cb10 <HAL_RCCEx_CRSConfig+0xa4>)
 800ca86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ca8a:	4a21      	ldr	r2, [pc, #132]	; (800cb10 <HAL_RCCEx_CRSConfig+0xa4>)
 800ca8c:	f023 0302 	bic.w	r3, r3, #2
 800ca90:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
 800ca94:	f7f6 ff50 	bl	8003938 <HAL_GetREVID>
 800ca98:	4603      	mov	r3, r0
 800ca9a:	f241 0203 	movw	r2, #4099	; 0x1003
 800ca9e:	4293      	cmp	r3, r2
 800caa0:	d80b      	bhi.n	800caba <HAL_RCCEx_CRSConfig+0x4e>
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	685b      	ldr	r3, [r3, #4]
 800caa6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800caaa:	d106      	bne.n	800caba <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681a      	ldr	r2, [r3, #0]
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	689b      	ldr	r3, [r3, #8]
 800cab4:	4313      	orrs	r3, r2
 800cab6:	60fb      	str	r3, [r7, #12]
 800cab8:	e008      	b.n	800cacc <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681a      	ldr	r2, [r3, #0]
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	685b      	ldr	r3, [r3, #4]
 800cac2:	431a      	orrs	r2, r3
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	689b      	ldr	r3, [r3, #8]
 800cac8:	4313      	orrs	r3, r2
 800caca:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	68db      	ldr	r3, [r3, #12]
 800cad0:	68fa      	ldr	r2, [r7, #12]
 800cad2:	4313      	orrs	r3, r2
 800cad4:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	691b      	ldr	r3, [r3, #16]
 800cada:	041b      	lsls	r3, r3, #16
 800cadc:	68fa      	ldr	r2, [r7, #12]
 800cade:	4313      	orrs	r3, r2
 800cae0:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 800cae2:	4a0c      	ldr	r2, [pc, #48]	; (800cb14 <HAL_RCCEx_CRSConfig+0xa8>)
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 800cae8:	4b0a      	ldr	r3, [pc, #40]	; (800cb14 <HAL_RCCEx_CRSConfig+0xa8>)
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	695b      	ldr	r3, [r3, #20]
 800caf4:	021b      	lsls	r3, r3, #8
 800caf6:	4907      	ldr	r1, [pc, #28]	; (800cb14 <HAL_RCCEx_CRSConfig+0xa8>)
 800caf8:	4313      	orrs	r3, r2
 800cafa:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 800cafc:	4b05      	ldr	r3, [pc, #20]	; (800cb14 <HAL_RCCEx_CRSConfig+0xa8>)
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	4a04      	ldr	r2, [pc, #16]	; (800cb14 <HAL_RCCEx_CRSConfig+0xa8>)
 800cb02:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800cb06:	6013      	str	r3, [r2, #0]
}
 800cb08:	bf00      	nop
 800cb0a:	3710      	adds	r7, #16
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	bd80      	pop	{r7, pc}
 800cb10:	58024400 	.word	0x58024400
 800cb14:	40008400 	.word	0x40008400

0800cb18 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b084      	sub	sp, #16
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
 800cb20:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cb22:	2300      	movs	r3, #0
 800cb24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cb26:	4b53      	ldr	r3, [pc, #332]	; (800cc74 <RCCEx_PLL2_Config+0x15c>)
 800cb28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb2a:	f003 0303 	and.w	r3, r3, #3
 800cb2e:	2b03      	cmp	r3, #3
 800cb30:	d101      	bne.n	800cb36 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800cb32:	2301      	movs	r3, #1
 800cb34:	e099      	b.n	800cc6a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800cb36:	4b4f      	ldr	r3, [pc, #316]	; (800cc74 <RCCEx_PLL2_Config+0x15c>)
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	4a4e      	ldr	r2, [pc, #312]	; (800cc74 <RCCEx_PLL2_Config+0x15c>)
 800cb3c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cb40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cb42:	f7f6 fec9 	bl	80038d8 <HAL_GetTick>
 800cb46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cb48:	e008      	b.n	800cb5c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cb4a:	f7f6 fec5 	bl	80038d8 <HAL_GetTick>
 800cb4e:	4602      	mov	r2, r0
 800cb50:	68bb      	ldr	r3, [r7, #8]
 800cb52:	1ad3      	subs	r3, r2, r3
 800cb54:	2b02      	cmp	r3, #2
 800cb56:	d901      	bls.n	800cb5c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cb58:	2303      	movs	r3, #3
 800cb5a:	e086      	b.n	800cc6a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cb5c:	4b45      	ldr	r3, [pc, #276]	; (800cc74 <RCCEx_PLL2_Config+0x15c>)
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d1f0      	bne.n	800cb4a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800cb68:	4b42      	ldr	r3, [pc, #264]	; (800cc74 <RCCEx_PLL2_Config+0x15c>)
 800cb6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb6c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	031b      	lsls	r3, r3, #12
 800cb76:	493f      	ldr	r1, [pc, #252]	; (800cc74 <RCCEx_PLL2_Config+0x15c>)
 800cb78:	4313      	orrs	r3, r2
 800cb7a:	628b      	str	r3, [r1, #40]	; 0x28
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	685b      	ldr	r3, [r3, #4]
 800cb80:	3b01      	subs	r3, #1
 800cb82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	689b      	ldr	r3, [r3, #8]
 800cb8a:	3b01      	subs	r3, #1
 800cb8c:	025b      	lsls	r3, r3, #9
 800cb8e:	b29b      	uxth	r3, r3
 800cb90:	431a      	orrs	r2, r3
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	68db      	ldr	r3, [r3, #12]
 800cb96:	3b01      	subs	r3, #1
 800cb98:	041b      	lsls	r3, r3, #16
 800cb9a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cb9e:	431a      	orrs	r2, r3
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	691b      	ldr	r3, [r3, #16]
 800cba4:	3b01      	subs	r3, #1
 800cba6:	061b      	lsls	r3, r3, #24
 800cba8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cbac:	4931      	ldr	r1, [pc, #196]	; (800cc74 <RCCEx_PLL2_Config+0x15c>)
 800cbae:	4313      	orrs	r3, r2
 800cbb0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800cbb2:	4b30      	ldr	r3, [pc, #192]	; (800cc74 <RCCEx_PLL2_Config+0x15c>)
 800cbb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbb6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	695b      	ldr	r3, [r3, #20]
 800cbbe:	492d      	ldr	r1, [pc, #180]	; (800cc74 <RCCEx_PLL2_Config+0x15c>)
 800cbc0:	4313      	orrs	r3, r2
 800cbc2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800cbc4:	4b2b      	ldr	r3, [pc, #172]	; (800cc74 <RCCEx_PLL2_Config+0x15c>)
 800cbc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbc8:	f023 0220 	bic.w	r2, r3, #32
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	699b      	ldr	r3, [r3, #24]
 800cbd0:	4928      	ldr	r1, [pc, #160]	; (800cc74 <RCCEx_PLL2_Config+0x15c>)
 800cbd2:	4313      	orrs	r3, r2
 800cbd4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800cbd6:	4b27      	ldr	r3, [pc, #156]	; (800cc74 <RCCEx_PLL2_Config+0x15c>)
 800cbd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbda:	4a26      	ldr	r2, [pc, #152]	; (800cc74 <RCCEx_PLL2_Config+0x15c>)
 800cbdc:	f023 0310 	bic.w	r3, r3, #16
 800cbe0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800cbe2:	4b24      	ldr	r3, [pc, #144]	; (800cc74 <RCCEx_PLL2_Config+0x15c>)
 800cbe4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cbe6:	4b24      	ldr	r3, [pc, #144]	; (800cc78 <RCCEx_PLL2_Config+0x160>)
 800cbe8:	4013      	ands	r3, r2
 800cbea:	687a      	ldr	r2, [r7, #4]
 800cbec:	69d2      	ldr	r2, [r2, #28]
 800cbee:	00d2      	lsls	r2, r2, #3
 800cbf0:	4920      	ldr	r1, [pc, #128]	; (800cc74 <RCCEx_PLL2_Config+0x15c>)
 800cbf2:	4313      	orrs	r3, r2
 800cbf4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800cbf6:	4b1f      	ldr	r3, [pc, #124]	; (800cc74 <RCCEx_PLL2_Config+0x15c>)
 800cbf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbfa:	4a1e      	ldr	r2, [pc, #120]	; (800cc74 <RCCEx_PLL2_Config+0x15c>)
 800cbfc:	f043 0310 	orr.w	r3, r3, #16
 800cc00:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800cc02:	683b      	ldr	r3, [r7, #0]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d106      	bne.n	800cc16 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800cc08:	4b1a      	ldr	r3, [pc, #104]	; (800cc74 <RCCEx_PLL2_Config+0x15c>)
 800cc0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc0c:	4a19      	ldr	r2, [pc, #100]	; (800cc74 <RCCEx_PLL2_Config+0x15c>)
 800cc0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cc12:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cc14:	e00f      	b.n	800cc36 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800cc16:	683b      	ldr	r3, [r7, #0]
 800cc18:	2b01      	cmp	r3, #1
 800cc1a:	d106      	bne.n	800cc2a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800cc1c:	4b15      	ldr	r3, [pc, #84]	; (800cc74 <RCCEx_PLL2_Config+0x15c>)
 800cc1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc20:	4a14      	ldr	r2, [pc, #80]	; (800cc74 <RCCEx_PLL2_Config+0x15c>)
 800cc22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cc26:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cc28:	e005      	b.n	800cc36 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800cc2a:	4b12      	ldr	r3, [pc, #72]	; (800cc74 <RCCEx_PLL2_Config+0x15c>)
 800cc2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc2e:	4a11      	ldr	r2, [pc, #68]	; (800cc74 <RCCEx_PLL2_Config+0x15c>)
 800cc30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cc34:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800cc36:	4b0f      	ldr	r3, [pc, #60]	; (800cc74 <RCCEx_PLL2_Config+0x15c>)
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	4a0e      	ldr	r2, [pc, #56]	; (800cc74 <RCCEx_PLL2_Config+0x15c>)
 800cc3c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cc40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cc42:	f7f6 fe49 	bl	80038d8 <HAL_GetTick>
 800cc46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cc48:	e008      	b.n	800cc5c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cc4a:	f7f6 fe45 	bl	80038d8 <HAL_GetTick>
 800cc4e:	4602      	mov	r2, r0
 800cc50:	68bb      	ldr	r3, [r7, #8]
 800cc52:	1ad3      	subs	r3, r2, r3
 800cc54:	2b02      	cmp	r3, #2
 800cc56:	d901      	bls.n	800cc5c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cc58:	2303      	movs	r3, #3
 800cc5a:	e006      	b.n	800cc6a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cc5c:	4b05      	ldr	r3, [pc, #20]	; (800cc74 <RCCEx_PLL2_Config+0x15c>)
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d0f0      	beq.n	800cc4a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800cc68:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	3710      	adds	r7, #16
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	bd80      	pop	{r7, pc}
 800cc72:	bf00      	nop
 800cc74:	58024400 	.word	0x58024400
 800cc78:	ffff0007 	.word	0xffff0007

0800cc7c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b084      	sub	sp, #16
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
 800cc84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cc86:	2300      	movs	r3, #0
 800cc88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cc8a:	4b53      	ldr	r3, [pc, #332]	; (800cdd8 <RCCEx_PLL3_Config+0x15c>)
 800cc8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc8e:	f003 0303 	and.w	r3, r3, #3
 800cc92:	2b03      	cmp	r3, #3
 800cc94:	d101      	bne.n	800cc9a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800cc96:	2301      	movs	r3, #1
 800cc98:	e099      	b.n	800cdce <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800cc9a:	4b4f      	ldr	r3, [pc, #316]	; (800cdd8 <RCCEx_PLL3_Config+0x15c>)
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	4a4e      	ldr	r2, [pc, #312]	; (800cdd8 <RCCEx_PLL3_Config+0x15c>)
 800cca0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cca4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cca6:	f7f6 fe17 	bl	80038d8 <HAL_GetTick>
 800ccaa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ccac:	e008      	b.n	800ccc0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ccae:	f7f6 fe13 	bl	80038d8 <HAL_GetTick>
 800ccb2:	4602      	mov	r2, r0
 800ccb4:	68bb      	ldr	r3, [r7, #8]
 800ccb6:	1ad3      	subs	r3, r2, r3
 800ccb8:	2b02      	cmp	r3, #2
 800ccba:	d901      	bls.n	800ccc0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ccbc:	2303      	movs	r3, #3
 800ccbe:	e086      	b.n	800cdce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ccc0:	4b45      	ldr	r3, [pc, #276]	; (800cdd8 <RCCEx_PLL3_Config+0x15c>)
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d1f0      	bne.n	800ccae <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800cccc:	4b42      	ldr	r3, [pc, #264]	; (800cdd8 <RCCEx_PLL3_Config+0x15c>)
 800ccce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccd0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	051b      	lsls	r3, r3, #20
 800ccda:	493f      	ldr	r1, [pc, #252]	; (800cdd8 <RCCEx_PLL3_Config+0x15c>)
 800ccdc:	4313      	orrs	r3, r2
 800ccde:	628b      	str	r3, [r1, #40]	; 0x28
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	685b      	ldr	r3, [r3, #4]
 800cce4:	3b01      	subs	r3, #1
 800cce6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	689b      	ldr	r3, [r3, #8]
 800ccee:	3b01      	subs	r3, #1
 800ccf0:	025b      	lsls	r3, r3, #9
 800ccf2:	b29b      	uxth	r3, r3
 800ccf4:	431a      	orrs	r2, r3
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	68db      	ldr	r3, [r3, #12]
 800ccfa:	3b01      	subs	r3, #1
 800ccfc:	041b      	lsls	r3, r3, #16
 800ccfe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cd02:	431a      	orrs	r2, r3
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	691b      	ldr	r3, [r3, #16]
 800cd08:	3b01      	subs	r3, #1
 800cd0a:	061b      	lsls	r3, r3, #24
 800cd0c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cd10:	4931      	ldr	r1, [pc, #196]	; (800cdd8 <RCCEx_PLL3_Config+0x15c>)
 800cd12:	4313      	orrs	r3, r2
 800cd14:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800cd16:	4b30      	ldr	r3, [pc, #192]	; (800cdd8 <RCCEx_PLL3_Config+0x15c>)
 800cd18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd1a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	695b      	ldr	r3, [r3, #20]
 800cd22:	492d      	ldr	r1, [pc, #180]	; (800cdd8 <RCCEx_PLL3_Config+0x15c>)
 800cd24:	4313      	orrs	r3, r2
 800cd26:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800cd28:	4b2b      	ldr	r3, [pc, #172]	; (800cdd8 <RCCEx_PLL3_Config+0x15c>)
 800cd2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd2c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	699b      	ldr	r3, [r3, #24]
 800cd34:	4928      	ldr	r1, [pc, #160]	; (800cdd8 <RCCEx_PLL3_Config+0x15c>)
 800cd36:	4313      	orrs	r3, r2
 800cd38:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800cd3a:	4b27      	ldr	r3, [pc, #156]	; (800cdd8 <RCCEx_PLL3_Config+0x15c>)
 800cd3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd3e:	4a26      	ldr	r2, [pc, #152]	; (800cdd8 <RCCEx_PLL3_Config+0x15c>)
 800cd40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cd44:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800cd46:	4b24      	ldr	r3, [pc, #144]	; (800cdd8 <RCCEx_PLL3_Config+0x15c>)
 800cd48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cd4a:	4b24      	ldr	r3, [pc, #144]	; (800cddc <RCCEx_PLL3_Config+0x160>)
 800cd4c:	4013      	ands	r3, r2
 800cd4e:	687a      	ldr	r2, [r7, #4]
 800cd50:	69d2      	ldr	r2, [r2, #28]
 800cd52:	00d2      	lsls	r2, r2, #3
 800cd54:	4920      	ldr	r1, [pc, #128]	; (800cdd8 <RCCEx_PLL3_Config+0x15c>)
 800cd56:	4313      	orrs	r3, r2
 800cd58:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800cd5a:	4b1f      	ldr	r3, [pc, #124]	; (800cdd8 <RCCEx_PLL3_Config+0x15c>)
 800cd5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd5e:	4a1e      	ldr	r2, [pc, #120]	; (800cdd8 <RCCEx_PLL3_Config+0x15c>)
 800cd60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cd64:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800cd66:	683b      	ldr	r3, [r7, #0]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d106      	bne.n	800cd7a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800cd6c:	4b1a      	ldr	r3, [pc, #104]	; (800cdd8 <RCCEx_PLL3_Config+0x15c>)
 800cd6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd70:	4a19      	ldr	r2, [pc, #100]	; (800cdd8 <RCCEx_PLL3_Config+0x15c>)
 800cd72:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800cd76:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cd78:	e00f      	b.n	800cd9a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800cd7a:	683b      	ldr	r3, [r7, #0]
 800cd7c:	2b01      	cmp	r3, #1
 800cd7e:	d106      	bne.n	800cd8e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800cd80:	4b15      	ldr	r3, [pc, #84]	; (800cdd8 <RCCEx_PLL3_Config+0x15c>)
 800cd82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd84:	4a14      	ldr	r2, [pc, #80]	; (800cdd8 <RCCEx_PLL3_Config+0x15c>)
 800cd86:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cd8a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cd8c:	e005      	b.n	800cd9a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800cd8e:	4b12      	ldr	r3, [pc, #72]	; (800cdd8 <RCCEx_PLL3_Config+0x15c>)
 800cd90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd92:	4a11      	ldr	r2, [pc, #68]	; (800cdd8 <RCCEx_PLL3_Config+0x15c>)
 800cd94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cd98:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800cd9a:	4b0f      	ldr	r3, [pc, #60]	; (800cdd8 <RCCEx_PLL3_Config+0x15c>)
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	4a0e      	ldr	r2, [pc, #56]	; (800cdd8 <RCCEx_PLL3_Config+0x15c>)
 800cda0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cda4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cda6:	f7f6 fd97 	bl	80038d8 <HAL_GetTick>
 800cdaa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cdac:	e008      	b.n	800cdc0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cdae:	f7f6 fd93 	bl	80038d8 <HAL_GetTick>
 800cdb2:	4602      	mov	r2, r0
 800cdb4:	68bb      	ldr	r3, [r7, #8]
 800cdb6:	1ad3      	subs	r3, r2, r3
 800cdb8:	2b02      	cmp	r3, #2
 800cdba:	d901      	bls.n	800cdc0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cdbc:	2303      	movs	r3, #3
 800cdbe:	e006      	b.n	800cdce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cdc0:	4b05      	ldr	r3, [pc, #20]	; (800cdd8 <RCCEx_PLL3_Config+0x15c>)
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d0f0      	beq.n	800cdae <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800cdcc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdce:	4618      	mov	r0, r3
 800cdd0:	3710      	adds	r7, #16
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	bd80      	pop	{r7, pc}
 800cdd6:	bf00      	nop
 800cdd8:	58024400 	.word	0x58024400
 800cddc:	ffff0007 	.word	0xffff0007

0800cde0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cde0:	b580      	push	{r7, lr}
 800cde2:	b082      	sub	sp, #8
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d101      	bne.n	800cdf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cdee:	2301      	movs	r3, #1
 800cdf0:	e049      	b.n	800ce86 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cdf8:	b2db      	uxtb	r3, r3
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d106      	bne.n	800ce0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	2200      	movs	r2, #0
 800ce02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ce06:	6878      	ldr	r0, [r7, #4]
 800ce08:	f7f6 f830 	bl	8002e6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	2202      	movs	r2, #2
 800ce10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681a      	ldr	r2, [r3, #0]
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	3304      	adds	r3, #4
 800ce1c:	4619      	mov	r1, r3
 800ce1e:	4610      	mov	r0, r2
 800ce20:	f000 f92e 	bl	800d080 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	2201      	movs	r2, #1
 800ce28:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	2201      	movs	r2, #1
 800ce30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	2201      	movs	r2, #1
 800ce38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2201      	movs	r2, #1
 800ce40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	2201      	movs	r2, #1
 800ce48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	2201      	movs	r2, #1
 800ce50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	2201      	movs	r2, #1
 800ce58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	2201      	movs	r2, #1
 800ce60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	2201      	movs	r2, #1
 800ce68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	2201      	movs	r2, #1
 800ce70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	2201      	movs	r2, #1
 800ce78:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	2201      	movs	r2, #1
 800ce80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ce84:	2300      	movs	r3, #0
}
 800ce86:	4618      	mov	r0, r3
 800ce88:	3708      	adds	r7, #8
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	bd80      	pop	{r7, pc}
	...

0800ce90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b084      	sub	sp, #16
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
 800ce98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cea4:	2b01      	cmp	r3, #1
 800cea6:	d101      	bne.n	800ceac <HAL_TIM_ConfigClockSource+0x1c>
 800cea8:	2302      	movs	r3, #2
 800ceaa:	e0dc      	b.n	800d066 <HAL_TIM_ConfigClockSource+0x1d6>
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	2201      	movs	r2, #1
 800ceb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	2202      	movs	r2, #2
 800ceb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	689b      	ldr	r3, [r3, #8]
 800cec2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cec4:	68ba      	ldr	r2, [r7, #8]
 800cec6:	4b6a      	ldr	r3, [pc, #424]	; (800d070 <HAL_TIM_ConfigClockSource+0x1e0>)
 800cec8:	4013      	ands	r3, r2
 800ceca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cecc:	68bb      	ldr	r3, [r7, #8]
 800cece:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ced2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	68ba      	ldr	r2, [r7, #8]
 800ceda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cedc:	683b      	ldr	r3, [r7, #0]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	4a64      	ldr	r2, [pc, #400]	; (800d074 <HAL_TIM_ConfigClockSource+0x1e4>)
 800cee2:	4293      	cmp	r3, r2
 800cee4:	f000 80a9 	beq.w	800d03a <HAL_TIM_ConfigClockSource+0x1aa>
 800cee8:	4a62      	ldr	r2, [pc, #392]	; (800d074 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ceea:	4293      	cmp	r3, r2
 800ceec:	f200 80ae 	bhi.w	800d04c <HAL_TIM_ConfigClockSource+0x1bc>
 800cef0:	4a61      	ldr	r2, [pc, #388]	; (800d078 <HAL_TIM_ConfigClockSource+0x1e8>)
 800cef2:	4293      	cmp	r3, r2
 800cef4:	f000 80a1 	beq.w	800d03a <HAL_TIM_ConfigClockSource+0x1aa>
 800cef8:	4a5f      	ldr	r2, [pc, #380]	; (800d078 <HAL_TIM_ConfigClockSource+0x1e8>)
 800cefa:	4293      	cmp	r3, r2
 800cefc:	f200 80a6 	bhi.w	800d04c <HAL_TIM_ConfigClockSource+0x1bc>
 800cf00:	4a5e      	ldr	r2, [pc, #376]	; (800d07c <HAL_TIM_ConfigClockSource+0x1ec>)
 800cf02:	4293      	cmp	r3, r2
 800cf04:	f000 8099 	beq.w	800d03a <HAL_TIM_ConfigClockSource+0x1aa>
 800cf08:	4a5c      	ldr	r2, [pc, #368]	; (800d07c <HAL_TIM_ConfigClockSource+0x1ec>)
 800cf0a:	4293      	cmp	r3, r2
 800cf0c:	f200 809e 	bhi.w	800d04c <HAL_TIM_ConfigClockSource+0x1bc>
 800cf10:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800cf14:	f000 8091 	beq.w	800d03a <HAL_TIM_ConfigClockSource+0x1aa>
 800cf18:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800cf1c:	f200 8096 	bhi.w	800d04c <HAL_TIM_ConfigClockSource+0x1bc>
 800cf20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cf24:	f000 8089 	beq.w	800d03a <HAL_TIM_ConfigClockSource+0x1aa>
 800cf28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cf2c:	f200 808e 	bhi.w	800d04c <HAL_TIM_ConfigClockSource+0x1bc>
 800cf30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cf34:	d03e      	beq.n	800cfb4 <HAL_TIM_ConfigClockSource+0x124>
 800cf36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cf3a:	f200 8087 	bhi.w	800d04c <HAL_TIM_ConfigClockSource+0x1bc>
 800cf3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cf42:	f000 8086 	beq.w	800d052 <HAL_TIM_ConfigClockSource+0x1c2>
 800cf46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cf4a:	d87f      	bhi.n	800d04c <HAL_TIM_ConfigClockSource+0x1bc>
 800cf4c:	2b70      	cmp	r3, #112	; 0x70
 800cf4e:	d01a      	beq.n	800cf86 <HAL_TIM_ConfigClockSource+0xf6>
 800cf50:	2b70      	cmp	r3, #112	; 0x70
 800cf52:	d87b      	bhi.n	800d04c <HAL_TIM_ConfigClockSource+0x1bc>
 800cf54:	2b60      	cmp	r3, #96	; 0x60
 800cf56:	d050      	beq.n	800cffa <HAL_TIM_ConfigClockSource+0x16a>
 800cf58:	2b60      	cmp	r3, #96	; 0x60
 800cf5a:	d877      	bhi.n	800d04c <HAL_TIM_ConfigClockSource+0x1bc>
 800cf5c:	2b50      	cmp	r3, #80	; 0x50
 800cf5e:	d03c      	beq.n	800cfda <HAL_TIM_ConfigClockSource+0x14a>
 800cf60:	2b50      	cmp	r3, #80	; 0x50
 800cf62:	d873      	bhi.n	800d04c <HAL_TIM_ConfigClockSource+0x1bc>
 800cf64:	2b40      	cmp	r3, #64	; 0x40
 800cf66:	d058      	beq.n	800d01a <HAL_TIM_ConfigClockSource+0x18a>
 800cf68:	2b40      	cmp	r3, #64	; 0x40
 800cf6a:	d86f      	bhi.n	800d04c <HAL_TIM_ConfigClockSource+0x1bc>
 800cf6c:	2b30      	cmp	r3, #48	; 0x30
 800cf6e:	d064      	beq.n	800d03a <HAL_TIM_ConfigClockSource+0x1aa>
 800cf70:	2b30      	cmp	r3, #48	; 0x30
 800cf72:	d86b      	bhi.n	800d04c <HAL_TIM_ConfigClockSource+0x1bc>
 800cf74:	2b20      	cmp	r3, #32
 800cf76:	d060      	beq.n	800d03a <HAL_TIM_ConfigClockSource+0x1aa>
 800cf78:	2b20      	cmp	r3, #32
 800cf7a:	d867      	bhi.n	800d04c <HAL_TIM_ConfigClockSource+0x1bc>
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d05c      	beq.n	800d03a <HAL_TIM_ConfigClockSource+0x1aa>
 800cf80:	2b10      	cmp	r3, #16
 800cf82:	d05a      	beq.n	800d03a <HAL_TIM_ConfigClockSource+0x1aa>
 800cf84:	e062      	b.n	800d04c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cf8a:	683b      	ldr	r3, [r7, #0]
 800cf8c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cf8e:	683b      	ldr	r3, [r7, #0]
 800cf90:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cf92:	683b      	ldr	r3, [r7, #0]
 800cf94:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cf96:	f000 f98b 	bl	800d2b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	689b      	ldr	r3, [r3, #8]
 800cfa0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cfa2:	68bb      	ldr	r3, [r7, #8]
 800cfa4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800cfa8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	68ba      	ldr	r2, [r7, #8]
 800cfb0:	609a      	str	r2, [r3, #8]
      break;
 800cfb2:	e04f      	b.n	800d054 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cfb8:	683b      	ldr	r3, [r7, #0]
 800cfba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cfbc:	683b      	ldr	r3, [r7, #0]
 800cfbe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cfc0:	683b      	ldr	r3, [r7, #0]
 800cfc2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cfc4:	f000 f974 	bl	800d2b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	689a      	ldr	r2, [r3, #8]
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cfd6:	609a      	str	r2, [r3, #8]
      break;
 800cfd8:	e03c      	b.n	800d054 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cfde:	683b      	ldr	r3, [r7, #0]
 800cfe0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cfe2:	683b      	ldr	r3, [r7, #0]
 800cfe4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cfe6:	461a      	mov	r2, r3
 800cfe8:	f000 f8e4 	bl	800d1b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	2150      	movs	r1, #80	; 0x50
 800cff2:	4618      	mov	r0, r3
 800cff4:	f000 f93e 	bl	800d274 <TIM_ITRx_SetConfig>
      break;
 800cff8:	e02c      	b.n	800d054 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cffe:	683b      	ldr	r3, [r7, #0]
 800d000:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d002:	683b      	ldr	r3, [r7, #0]
 800d004:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d006:	461a      	mov	r2, r3
 800d008:	f000 f903 	bl	800d212 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	2160      	movs	r1, #96	; 0x60
 800d012:	4618      	mov	r0, r3
 800d014:	f000 f92e 	bl	800d274 <TIM_ITRx_SetConfig>
      break;
 800d018:	e01c      	b.n	800d054 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d01e:	683b      	ldr	r3, [r7, #0]
 800d020:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d022:	683b      	ldr	r3, [r7, #0]
 800d024:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d026:	461a      	mov	r2, r3
 800d028:	f000 f8c4 	bl	800d1b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	2140      	movs	r1, #64	; 0x40
 800d032:	4618      	mov	r0, r3
 800d034:	f000 f91e 	bl	800d274 <TIM_ITRx_SetConfig>
      break;
 800d038:	e00c      	b.n	800d054 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681a      	ldr	r2, [r3, #0]
 800d03e:	683b      	ldr	r3, [r7, #0]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	4619      	mov	r1, r3
 800d044:	4610      	mov	r0, r2
 800d046:	f000 f915 	bl	800d274 <TIM_ITRx_SetConfig>
      break;
 800d04a:	e003      	b.n	800d054 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800d04c:	2301      	movs	r3, #1
 800d04e:	73fb      	strb	r3, [r7, #15]
      break;
 800d050:	e000      	b.n	800d054 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800d052:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	2201      	movs	r2, #1
 800d058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	2200      	movs	r2, #0
 800d060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d064:	7bfb      	ldrb	r3, [r7, #15]
}
 800d066:	4618      	mov	r0, r3
 800d068:	3710      	adds	r7, #16
 800d06a:	46bd      	mov	sp, r7
 800d06c:	bd80      	pop	{r7, pc}
 800d06e:	bf00      	nop
 800d070:	ffceff88 	.word	0xffceff88
 800d074:	00100040 	.word	0x00100040
 800d078:	00100030 	.word	0x00100030
 800d07c:	00100020 	.word	0x00100020

0800d080 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d080:	b480      	push	{r7}
 800d082:	b085      	sub	sp, #20
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
 800d088:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	4a40      	ldr	r2, [pc, #256]	; (800d194 <TIM_Base_SetConfig+0x114>)
 800d094:	4293      	cmp	r3, r2
 800d096:	d013      	beq.n	800d0c0 <TIM_Base_SetConfig+0x40>
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d09e:	d00f      	beq.n	800d0c0 <TIM_Base_SetConfig+0x40>
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	4a3d      	ldr	r2, [pc, #244]	; (800d198 <TIM_Base_SetConfig+0x118>)
 800d0a4:	4293      	cmp	r3, r2
 800d0a6:	d00b      	beq.n	800d0c0 <TIM_Base_SetConfig+0x40>
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	4a3c      	ldr	r2, [pc, #240]	; (800d19c <TIM_Base_SetConfig+0x11c>)
 800d0ac:	4293      	cmp	r3, r2
 800d0ae:	d007      	beq.n	800d0c0 <TIM_Base_SetConfig+0x40>
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	4a3b      	ldr	r2, [pc, #236]	; (800d1a0 <TIM_Base_SetConfig+0x120>)
 800d0b4:	4293      	cmp	r3, r2
 800d0b6:	d003      	beq.n	800d0c0 <TIM_Base_SetConfig+0x40>
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	4a3a      	ldr	r2, [pc, #232]	; (800d1a4 <TIM_Base_SetConfig+0x124>)
 800d0bc:	4293      	cmp	r3, r2
 800d0be:	d108      	bne.n	800d0d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d0c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d0c8:	683b      	ldr	r3, [r7, #0]
 800d0ca:	685b      	ldr	r3, [r3, #4]
 800d0cc:	68fa      	ldr	r2, [r7, #12]
 800d0ce:	4313      	orrs	r3, r2
 800d0d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	4a2f      	ldr	r2, [pc, #188]	; (800d194 <TIM_Base_SetConfig+0x114>)
 800d0d6:	4293      	cmp	r3, r2
 800d0d8:	d01f      	beq.n	800d11a <TIM_Base_SetConfig+0x9a>
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d0e0:	d01b      	beq.n	800d11a <TIM_Base_SetConfig+0x9a>
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	4a2c      	ldr	r2, [pc, #176]	; (800d198 <TIM_Base_SetConfig+0x118>)
 800d0e6:	4293      	cmp	r3, r2
 800d0e8:	d017      	beq.n	800d11a <TIM_Base_SetConfig+0x9a>
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	4a2b      	ldr	r2, [pc, #172]	; (800d19c <TIM_Base_SetConfig+0x11c>)
 800d0ee:	4293      	cmp	r3, r2
 800d0f0:	d013      	beq.n	800d11a <TIM_Base_SetConfig+0x9a>
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	4a2a      	ldr	r2, [pc, #168]	; (800d1a0 <TIM_Base_SetConfig+0x120>)
 800d0f6:	4293      	cmp	r3, r2
 800d0f8:	d00f      	beq.n	800d11a <TIM_Base_SetConfig+0x9a>
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	4a29      	ldr	r2, [pc, #164]	; (800d1a4 <TIM_Base_SetConfig+0x124>)
 800d0fe:	4293      	cmp	r3, r2
 800d100:	d00b      	beq.n	800d11a <TIM_Base_SetConfig+0x9a>
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	4a28      	ldr	r2, [pc, #160]	; (800d1a8 <TIM_Base_SetConfig+0x128>)
 800d106:	4293      	cmp	r3, r2
 800d108:	d007      	beq.n	800d11a <TIM_Base_SetConfig+0x9a>
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	4a27      	ldr	r2, [pc, #156]	; (800d1ac <TIM_Base_SetConfig+0x12c>)
 800d10e:	4293      	cmp	r3, r2
 800d110:	d003      	beq.n	800d11a <TIM_Base_SetConfig+0x9a>
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	4a26      	ldr	r2, [pc, #152]	; (800d1b0 <TIM_Base_SetConfig+0x130>)
 800d116:	4293      	cmp	r3, r2
 800d118:	d108      	bne.n	800d12c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d120:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d122:	683b      	ldr	r3, [r7, #0]
 800d124:	68db      	ldr	r3, [r3, #12]
 800d126:	68fa      	ldr	r2, [r7, #12]
 800d128:	4313      	orrs	r3, r2
 800d12a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d132:	683b      	ldr	r3, [r7, #0]
 800d134:	695b      	ldr	r3, [r3, #20]
 800d136:	4313      	orrs	r3, r2
 800d138:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	68fa      	ldr	r2, [r7, #12]
 800d13e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d140:	683b      	ldr	r3, [r7, #0]
 800d142:	689a      	ldr	r2, [r3, #8]
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d148:	683b      	ldr	r3, [r7, #0]
 800d14a:	681a      	ldr	r2, [r3, #0]
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	4a10      	ldr	r2, [pc, #64]	; (800d194 <TIM_Base_SetConfig+0x114>)
 800d154:	4293      	cmp	r3, r2
 800d156:	d00f      	beq.n	800d178 <TIM_Base_SetConfig+0xf8>
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	4a12      	ldr	r2, [pc, #72]	; (800d1a4 <TIM_Base_SetConfig+0x124>)
 800d15c:	4293      	cmp	r3, r2
 800d15e:	d00b      	beq.n	800d178 <TIM_Base_SetConfig+0xf8>
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	4a11      	ldr	r2, [pc, #68]	; (800d1a8 <TIM_Base_SetConfig+0x128>)
 800d164:	4293      	cmp	r3, r2
 800d166:	d007      	beq.n	800d178 <TIM_Base_SetConfig+0xf8>
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	4a10      	ldr	r2, [pc, #64]	; (800d1ac <TIM_Base_SetConfig+0x12c>)
 800d16c:	4293      	cmp	r3, r2
 800d16e:	d003      	beq.n	800d178 <TIM_Base_SetConfig+0xf8>
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	4a0f      	ldr	r2, [pc, #60]	; (800d1b0 <TIM_Base_SetConfig+0x130>)
 800d174:	4293      	cmp	r3, r2
 800d176:	d103      	bne.n	800d180 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d178:	683b      	ldr	r3, [r7, #0]
 800d17a:	691a      	ldr	r2, [r3, #16]
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2201      	movs	r2, #1
 800d184:	615a      	str	r2, [r3, #20]
}
 800d186:	bf00      	nop
 800d188:	3714      	adds	r7, #20
 800d18a:	46bd      	mov	sp, r7
 800d18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d190:	4770      	bx	lr
 800d192:	bf00      	nop
 800d194:	40010000 	.word	0x40010000
 800d198:	40000400 	.word	0x40000400
 800d19c:	40000800 	.word	0x40000800
 800d1a0:	40000c00 	.word	0x40000c00
 800d1a4:	40010400 	.word	0x40010400
 800d1a8:	40014000 	.word	0x40014000
 800d1ac:	40014400 	.word	0x40014400
 800d1b0:	40014800 	.word	0x40014800

0800d1b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d1b4:	b480      	push	{r7}
 800d1b6:	b087      	sub	sp, #28
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	60f8      	str	r0, [r7, #12]
 800d1bc:	60b9      	str	r1, [r7, #8]
 800d1be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	6a1b      	ldr	r3, [r3, #32]
 800d1c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	6a1b      	ldr	r3, [r3, #32]
 800d1ca:	f023 0201 	bic.w	r2, r3, #1
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	699b      	ldr	r3, [r3, #24]
 800d1d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d1d8:	693b      	ldr	r3, [r7, #16]
 800d1da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d1de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	011b      	lsls	r3, r3, #4
 800d1e4:	693a      	ldr	r2, [r7, #16]
 800d1e6:	4313      	orrs	r3, r2
 800d1e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d1ea:	697b      	ldr	r3, [r7, #20]
 800d1ec:	f023 030a 	bic.w	r3, r3, #10
 800d1f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d1f2:	697a      	ldr	r2, [r7, #20]
 800d1f4:	68bb      	ldr	r3, [r7, #8]
 800d1f6:	4313      	orrs	r3, r2
 800d1f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	693a      	ldr	r2, [r7, #16]
 800d1fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	697a      	ldr	r2, [r7, #20]
 800d204:	621a      	str	r2, [r3, #32]
}
 800d206:	bf00      	nop
 800d208:	371c      	adds	r7, #28
 800d20a:	46bd      	mov	sp, r7
 800d20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d210:	4770      	bx	lr

0800d212 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d212:	b480      	push	{r7}
 800d214:	b087      	sub	sp, #28
 800d216:	af00      	add	r7, sp, #0
 800d218:	60f8      	str	r0, [r7, #12]
 800d21a:	60b9      	str	r1, [r7, #8]
 800d21c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	6a1b      	ldr	r3, [r3, #32]
 800d222:	f023 0210 	bic.w	r2, r3, #16
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	699b      	ldr	r3, [r3, #24]
 800d22e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	6a1b      	ldr	r3, [r3, #32]
 800d234:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d236:	697b      	ldr	r3, [r7, #20]
 800d238:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d23c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	031b      	lsls	r3, r3, #12
 800d242:	697a      	ldr	r2, [r7, #20]
 800d244:	4313      	orrs	r3, r2
 800d246:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d248:	693b      	ldr	r3, [r7, #16]
 800d24a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d24e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d250:	68bb      	ldr	r3, [r7, #8]
 800d252:	011b      	lsls	r3, r3, #4
 800d254:	693a      	ldr	r2, [r7, #16]
 800d256:	4313      	orrs	r3, r2
 800d258:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	697a      	ldr	r2, [r7, #20]
 800d25e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	693a      	ldr	r2, [r7, #16]
 800d264:	621a      	str	r2, [r3, #32]
}
 800d266:	bf00      	nop
 800d268:	371c      	adds	r7, #28
 800d26a:	46bd      	mov	sp, r7
 800d26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d270:	4770      	bx	lr
	...

0800d274 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d274:	b480      	push	{r7}
 800d276:	b085      	sub	sp, #20
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
 800d27c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	689b      	ldr	r3, [r3, #8]
 800d282:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d284:	68fa      	ldr	r2, [r7, #12]
 800d286:	4b09      	ldr	r3, [pc, #36]	; (800d2ac <TIM_ITRx_SetConfig+0x38>)
 800d288:	4013      	ands	r3, r2
 800d28a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d28c:	683a      	ldr	r2, [r7, #0]
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	4313      	orrs	r3, r2
 800d292:	f043 0307 	orr.w	r3, r3, #7
 800d296:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	68fa      	ldr	r2, [r7, #12]
 800d29c:	609a      	str	r2, [r3, #8]
}
 800d29e:	bf00      	nop
 800d2a0:	3714      	adds	r7, #20
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a8:	4770      	bx	lr
 800d2aa:	bf00      	nop
 800d2ac:	ffcfff8f 	.word	0xffcfff8f

0800d2b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d2b0:	b480      	push	{r7}
 800d2b2:	b087      	sub	sp, #28
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	60f8      	str	r0, [r7, #12]
 800d2b8:	60b9      	str	r1, [r7, #8]
 800d2ba:	607a      	str	r2, [r7, #4]
 800d2bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	689b      	ldr	r3, [r3, #8]
 800d2c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d2c4:	697b      	ldr	r3, [r7, #20]
 800d2c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d2ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d2cc:	683b      	ldr	r3, [r7, #0]
 800d2ce:	021a      	lsls	r2, r3, #8
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	431a      	orrs	r2, r3
 800d2d4:	68bb      	ldr	r3, [r7, #8]
 800d2d6:	4313      	orrs	r3, r2
 800d2d8:	697a      	ldr	r2, [r7, #20]
 800d2da:	4313      	orrs	r3, r2
 800d2dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	697a      	ldr	r2, [r7, #20]
 800d2e2:	609a      	str	r2, [r3, #8]
}
 800d2e4:	bf00      	nop
 800d2e6:	371c      	adds	r7, #28
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ee:	4770      	bx	lr

0800d2f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d2f0:	b480      	push	{r7}
 800d2f2:	b085      	sub	sp, #20
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	6078      	str	r0, [r7, #4]
 800d2f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d300:	2b01      	cmp	r3, #1
 800d302:	d101      	bne.n	800d308 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d304:	2302      	movs	r3, #2
 800d306:	e06d      	b.n	800d3e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	2201      	movs	r2, #1
 800d30c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	2202      	movs	r2, #2
 800d314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	685b      	ldr	r3, [r3, #4]
 800d31e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	689b      	ldr	r3, [r3, #8]
 800d326:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	4a30      	ldr	r2, [pc, #192]	; (800d3f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d32e:	4293      	cmp	r3, r2
 800d330:	d004      	beq.n	800d33c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	4a2f      	ldr	r2, [pc, #188]	; (800d3f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d338:	4293      	cmp	r3, r2
 800d33a:	d108      	bne.n	800d34e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d342:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d344:	683b      	ldr	r3, [r7, #0]
 800d346:	685b      	ldr	r3, [r3, #4]
 800d348:	68fa      	ldr	r2, [r7, #12]
 800d34a:	4313      	orrs	r3, r2
 800d34c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d354:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d356:	683b      	ldr	r3, [r7, #0]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	68fa      	ldr	r2, [r7, #12]
 800d35c:	4313      	orrs	r3, r2
 800d35e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	68fa      	ldr	r2, [r7, #12]
 800d366:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	4a20      	ldr	r2, [pc, #128]	; (800d3f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d36e:	4293      	cmp	r3, r2
 800d370:	d022      	beq.n	800d3b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d37a:	d01d      	beq.n	800d3b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	4a1d      	ldr	r2, [pc, #116]	; (800d3f8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d382:	4293      	cmp	r3, r2
 800d384:	d018      	beq.n	800d3b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	4a1c      	ldr	r2, [pc, #112]	; (800d3fc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d38c:	4293      	cmp	r3, r2
 800d38e:	d013      	beq.n	800d3b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	4a1a      	ldr	r2, [pc, #104]	; (800d400 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d396:	4293      	cmp	r3, r2
 800d398:	d00e      	beq.n	800d3b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	4a15      	ldr	r2, [pc, #84]	; (800d3f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d3a0:	4293      	cmp	r3, r2
 800d3a2:	d009      	beq.n	800d3b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	4a16      	ldr	r2, [pc, #88]	; (800d404 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d3aa:	4293      	cmp	r3, r2
 800d3ac:	d004      	beq.n	800d3b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	4a15      	ldr	r2, [pc, #84]	; (800d408 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d3b4:	4293      	cmp	r3, r2
 800d3b6:	d10c      	bne.n	800d3d2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d3b8:	68bb      	ldr	r3, [r7, #8]
 800d3ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d3be:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d3c0:	683b      	ldr	r3, [r7, #0]
 800d3c2:	689b      	ldr	r3, [r3, #8]
 800d3c4:	68ba      	ldr	r2, [r7, #8]
 800d3c6:	4313      	orrs	r3, r2
 800d3c8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	68ba      	ldr	r2, [r7, #8]
 800d3d0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	2201      	movs	r2, #1
 800d3d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	2200      	movs	r2, #0
 800d3de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d3e2:	2300      	movs	r3, #0
}
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	3714      	adds	r7, #20
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ee:	4770      	bx	lr
 800d3f0:	40010000 	.word	0x40010000
 800d3f4:	40010400 	.word	0x40010400
 800d3f8:	40000400 	.word	0x40000400
 800d3fc:	40000800 	.word	0x40000800
 800d400:	40000c00 	.word	0x40000c00
 800d404:	40001800 	.word	0x40001800
 800d408:	40014000 	.word	0x40014000

0800d40c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b082      	sub	sp, #8
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d101      	bne.n	800d41e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d41a:	2301      	movs	r3, #1
 800d41c:	e042      	b.n	800d4a4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d424:	2b00      	cmp	r3, #0
 800d426:	d106      	bne.n	800d436 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	2200      	movs	r2, #0
 800d42c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d430:	6878      	ldr	r0, [r7, #4]
 800d432:	f7f5 fd81 	bl	8002f38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	2224      	movs	r2, #36	; 0x24
 800d43a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	681a      	ldr	r2, [r3, #0]
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	f022 0201 	bic.w	r2, r2, #1
 800d44c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d44e:	6878      	ldr	r0, [r7, #4]
 800d450:	f000 f8ba 	bl	800d5c8 <UART_SetConfig>
 800d454:	4603      	mov	r3, r0
 800d456:	2b01      	cmp	r3, #1
 800d458:	d101      	bne.n	800d45e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800d45a:	2301      	movs	r3, #1
 800d45c:	e022      	b.n	800d4a4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d462:	2b00      	cmp	r3, #0
 800d464:	d002      	beq.n	800d46c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800d466:	6878      	ldr	r0, [r7, #4]
 800d468:	f000 fe16 	bl	800e098 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	685a      	ldr	r2, [r3, #4]
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d47a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	689a      	ldr	r2, [r3, #8]
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d48a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	681a      	ldr	r2, [r3, #0]
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	f042 0201 	orr.w	r2, r2, #1
 800d49a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d49c:	6878      	ldr	r0, [r7, #4]
 800d49e:	f000 fe9d 	bl	800e1dc <UART_CheckIdleState>
 800d4a2:	4603      	mov	r3, r0
}
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	3708      	adds	r7, #8
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	bd80      	pop	{r7, pc}

0800d4ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b08a      	sub	sp, #40	; 0x28
 800d4b0:	af02      	add	r7, sp, #8
 800d4b2:	60f8      	str	r0, [r7, #12]
 800d4b4:	60b9      	str	r1, [r7, #8]
 800d4b6:	603b      	str	r3, [r7, #0]
 800d4b8:	4613      	mov	r3, r2
 800d4ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d4c2:	2b20      	cmp	r3, #32
 800d4c4:	d17b      	bne.n	800d5be <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800d4c6:	68bb      	ldr	r3, [r7, #8]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d002      	beq.n	800d4d2 <HAL_UART_Transmit+0x26>
 800d4cc:	88fb      	ldrh	r3, [r7, #6]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d101      	bne.n	800d4d6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800d4d2:	2301      	movs	r3, #1
 800d4d4:	e074      	b.n	800d5c0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	2200      	movs	r2, #0
 800d4da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	2221      	movs	r2, #33	; 0x21
 800d4e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d4e6:	f7f6 f9f7 	bl	80038d8 <HAL_GetTick>
 800d4ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	88fa      	ldrh	r2, [r7, #6]
 800d4f0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	88fa      	ldrh	r2, [r7, #6]
 800d4f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	689b      	ldr	r3, [r3, #8]
 800d500:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d504:	d108      	bne.n	800d518 <HAL_UART_Transmit+0x6c>
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	691b      	ldr	r3, [r3, #16]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d104      	bne.n	800d518 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800d50e:	2300      	movs	r3, #0
 800d510:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d512:	68bb      	ldr	r3, [r7, #8]
 800d514:	61bb      	str	r3, [r7, #24]
 800d516:	e003      	b.n	800d520 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800d518:	68bb      	ldr	r3, [r7, #8]
 800d51a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d51c:	2300      	movs	r3, #0
 800d51e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d520:	e030      	b.n	800d584 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d522:	683b      	ldr	r3, [r7, #0]
 800d524:	9300      	str	r3, [sp, #0]
 800d526:	697b      	ldr	r3, [r7, #20]
 800d528:	2200      	movs	r2, #0
 800d52a:	2180      	movs	r1, #128	; 0x80
 800d52c:	68f8      	ldr	r0, [r7, #12]
 800d52e:	f000 feff 	bl	800e330 <UART_WaitOnFlagUntilTimeout>
 800d532:	4603      	mov	r3, r0
 800d534:	2b00      	cmp	r3, #0
 800d536:	d005      	beq.n	800d544 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	2220      	movs	r2, #32
 800d53c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800d540:	2303      	movs	r3, #3
 800d542:	e03d      	b.n	800d5c0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800d544:	69fb      	ldr	r3, [r7, #28]
 800d546:	2b00      	cmp	r3, #0
 800d548:	d10b      	bne.n	800d562 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d54a:	69bb      	ldr	r3, [r7, #24]
 800d54c:	881b      	ldrh	r3, [r3, #0]
 800d54e:	461a      	mov	r2, r3
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d558:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d55a:	69bb      	ldr	r3, [r7, #24]
 800d55c:	3302      	adds	r3, #2
 800d55e:	61bb      	str	r3, [r7, #24]
 800d560:	e007      	b.n	800d572 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d562:	69fb      	ldr	r3, [r7, #28]
 800d564:	781a      	ldrb	r2, [r3, #0]
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d56c:	69fb      	ldr	r3, [r7, #28]
 800d56e:	3301      	adds	r3, #1
 800d570:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d578:	b29b      	uxth	r3, r3
 800d57a:	3b01      	subs	r3, #1
 800d57c:	b29a      	uxth	r2, r3
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d58a:	b29b      	uxth	r3, r3
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d1c8      	bne.n	800d522 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d590:	683b      	ldr	r3, [r7, #0]
 800d592:	9300      	str	r3, [sp, #0]
 800d594:	697b      	ldr	r3, [r7, #20]
 800d596:	2200      	movs	r2, #0
 800d598:	2140      	movs	r1, #64	; 0x40
 800d59a:	68f8      	ldr	r0, [r7, #12]
 800d59c:	f000 fec8 	bl	800e330 <UART_WaitOnFlagUntilTimeout>
 800d5a0:	4603      	mov	r3, r0
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d005      	beq.n	800d5b2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	2220      	movs	r2, #32
 800d5aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800d5ae:	2303      	movs	r3, #3
 800d5b0:	e006      	b.n	800d5c0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	2220      	movs	r2, #32
 800d5b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	e000      	b.n	800d5c0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800d5be:	2302      	movs	r3, #2
  }
}
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	3720      	adds	r7, #32
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	bd80      	pop	{r7, pc}

0800d5c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d5c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d5cc:	b092      	sub	sp, #72	; 0x48
 800d5ce:	af00      	add	r7, sp, #0
 800d5d0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d5d8:	697b      	ldr	r3, [r7, #20]
 800d5da:	689a      	ldr	r2, [r3, #8]
 800d5dc:	697b      	ldr	r3, [r7, #20]
 800d5de:	691b      	ldr	r3, [r3, #16]
 800d5e0:	431a      	orrs	r2, r3
 800d5e2:	697b      	ldr	r3, [r7, #20]
 800d5e4:	695b      	ldr	r3, [r3, #20]
 800d5e6:	431a      	orrs	r2, r3
 800d5e8:	697b      	ldr	r3, [r7, #20]
 800d5ea:	69db      	ldr	r3, [r3, #28]
 800d5ec:	4313      	orrs	r3, r2
 800d5ee:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d5f0:	697b      	ldr	r3, [r7, #20]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	681a      	ldr	r2, [r3, #0]
 800d5f6:	4bbe      	ldr	r3, [pc, #760]	; (800d8f0 <UART_SetConfig+0x328>)
 800d5f8:	4013      	ands	r3, r2
 800d5fa:	697a      	ldr	r2, [r7, #20]
 800d5fc:	6812      	ldr	r2, [r2, #0]
 800d5fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d600:	430b      	orrs	r3, r1
 800d602:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d604:	697b      	ldr	r3, [r7, #20]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	685b      	ldr	r3, [r3, #4]
 800d60a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d60e:	697b      	ldr	r3, [r7, #20]
 800d610:	68da      	ldr	r2, [r3, #12]
 800d612:	697b      	ldr	r3, [r7, #20]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	430a      	orrs	r2, r1
 800d618:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d61a:	697b      	ldr	r3, [r7, #20]
 800d61c:	699b      	ldr	r3, [r3, #24]
 800d61e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d620:	697b      	ldr	r3, [r7, #20]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	4ab3      	ldr	r2, [pc, #716]	; (800d8f4 <UART_SetConfig+0x32c>)
 800d626:	4293      	cmp	r3, r2
 800d628:	d004      	beq.n	800d634 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d62a:	697b      	ldr	r3, [r7, #20]
 800d62c:	6a1b      	ldr	r3, [r3, #32]
 800d62e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d630:	4313      	orrs	r3, r2
 800d632:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d634:	697b      	ldr	r3, [r7, #20]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	689a      	ldr	r2, [r3, #8]
 800d63a:	4baf      	ldr	r3, [pc, #700]	; (800d8f8 <UART_SetConfig+0x330>)
 800d63c:	4013      	ands	r3, r2
 800d63e:	697a      	ldr	r2, [r7, #20]
 800d640:	6812      	ldr	r2, [r2, #0]
 800d642:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d644:	430b      	orrs	r3, r1
 800d646:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d648:	697b      	ldr	r3, [r7, #20]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d64e:	f023 010f 	bic.w	r1, r3, #15
 800d652:	697b      	ldr	r3, [r7, #20]
 800d654:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d656:	697b      	ldr	r3, [r7, #20]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	430a      	orrs	r2, r1
 800d65c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d65e:	697b      	ldr	r3, [r7, #20]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	4aa6      	ldr	r2, [pc, #664]	; (800d8fc <UART_SetConfig+0x334>)
 800d664:	4293      	cmp	r3, r2
 800d666:	d177      	bne.n	800d758 <UART_SetConfig+0x190>
 800d668:	4ba5      	ldr	r3, [pc, #660]	; (800d900 <UART_SetConfig+0x338>)
 800d66a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d66c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d670:	2b28      	cmp	r3, #40	; 0x28
 800d672:	d86d      	bhi.n	800d750 <UART_SetConfig+0x188>
 800d674:	a201      	add	r2, pc, #4	; (adr r2, 800d67c <UART_SetConfig+0xb4>)
 800d676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d67a:	bf00      	nop
 800d67c:	0800d721 	.word	0x0800d721
 800d680:	0800d751 	.word	0x0800d751
 800d684:	0800d751 	.word	0x0800d751
 800d688:	0800d751 	.word	0x0800d751
 800d68c:	0800d751 	.word	0x0800d751
 800d690:	0800d751 	.word	0x0800d751
 800d694:	0800d751 	.word	0x0800d751
 800d698:	0800d751 	.word	0x0800d751
 800d69c:	0800d729 	.word	0x0800d729
 800d6a0:	0800d751 	.word	0x0800d751
 800d6a4:	0800d751 	.word	0x0800d751
 800d6a8:	0800d751 	.word	0x0800d751
 800d6ac:	0800d751 	.word	0x0800d751
 800d6b0:	0800d751 	.word	0x0800d751
 800d6b4:	0800d751 	.word	0x0800d751
 800d6b8:	0800d751 	.word	0x0800d751
 800d6bc:	0800d731 	.word	0x0800d731
 800d6c0:	0800d751 	.word	0x0800d751
 800d6c4:	0800d751 	.word	0x0800d751
 800d6c8:	0800d751 	.word	0x0800d751
 800d6cc:	0800d751 	.word	0x0800d751
 800d6d0:	0800d751 	.word	0x0800d751
 800d6d4:	0800d751 	.word	0x0800d751
 800d6d8:	0800d751 	.word	0x0800d751
 800d6dc:	0800d739 	.word	0x0800d739
 800d6e0:	0800d751 	.word	0x0800d751
 800d6e4:	0800d751 	.word	0x0800d751
 800d6e8:	0800d751 	.word	0x0800d751
 800d6ec:	0800d751 	.word	0x0800d751
 800d6f0:	0800d751 	.word	0x0800d751
 800d6f4:	0800d751 	.word	0x0800d751
 800d6f8:	0800d751 	.word	0x0800d751
 800d6fc:	0800d741 	.word	0x0800d741
 800d700:	0800d751 	.word	0x0800d751
 800d704:	0800d751 	.word	0x0800d751
 800d708:	0800d751 	.word	0x0800d751
 800d70c:	0800d751 	.word	0x0800d751
 800d710:	0800d751 	.word	0x0800d751
 800d714:	0800d751 	.word	0x0800d751
 800d718:	0800d751 	.word	0x0800d751
 800d71c:	0800d749 	.word	0x0800d749
 800d720:	2301      	movs	r3, #1
 800d722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d726:	e222      	b.n	800db6e <UART_SetConfig+0x5a6>
 800d728:	2304      	movs	r3, #4
 800d72a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d72e:	e21e      	b.n	800db6e <UART_SetConfig+0x5a6>
 800d730:	2308      	movs	r3, #8
 800d732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d736:	e21a      	b.n	800db6e <UART_SetConfig+0x5a6>
 800d738:	2310      	movs	r3, #16
 800d73a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d73e:	e216      	b.n	800db6e <UART_SetConfig+0x5a6>
 800d740:	2320      	movs	r3, #32
 800d742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d746:	e212      	b.n	800db6e <UART_SetConfig+0x5a6>
 800d748:	2340      	movs	r3, #64	; 0x40
 800d74a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d74e:	e20e      	b.n	800db6e <UART_SetConfig+0x5a6>
 800d750:	2380      	movs	r3, #128	; 0x80
 800d752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d756:	e20a      	b.n	800db6e <UART_SetConfig+0x5a6>
 800d758:	697b      	ldr	r3, [r7, #20]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	4a69      	ldr	r2, [pc, #420]	; (800d904 <UART_SetConfig+0x33c>)
 800d75e:	4293      	cmp	r3, r2
 800d760:	d130      	bne.n	800d7c4 <UART_SetConfig+0x1fc>
 800d762:	4b67      	ldr	r3, [pc, #412]	; (800d900 <UART_SetConfig+0x338>)
 800d764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d766:	f003 0307 	and.w	r3, r3, #7
 800d76a:	2b05      	cmp	r3, #5
 800d76c:	d826      	bhi.n	800d7bc <UART_SetConfig+0x1f4>
 800d76e:	a201      	add	r2, pc, #4	; (adr r2, 800d774 <UART_SetConfig+0x1ac>)
 800d770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d774:	0800d78d 	.word	0x0800d78d
 800d778:	0800d795 	.word	0x0800d795
 800d77c:	0800d79d 	.word	0x0800d79d
 800d780:	0800d7a5 	.word	0x0800d7a5
 800d784:	0800d7ad 	.word	0x0800d7ad
 800d788:	0800d7b5 	.word	0x0800d7b5
 800d78c:	2300      	movs	r3, #0
 800d78e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d792:	e1ec      	b.n	800db6e <UART_SetConfig+0x5a6>
 800d794:	2304      	movs	r3, #4
 800d796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d79a:	e1e8      	b.n	800db6e <UART_SetConfig+0x5a6>
 800d79c:	2308      	movs	r3, #8
 800d79e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7a2:	e1e4      	b.n	800db6e <UART_SetConfig+0x5a6>
 800d7a4:	2310      	movs	r3, #16
 800d7a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7aa:	e1e0      	b.n	800db6e <UART_SetConfig+0x5a6>
 800d7ac:	2320      	movs	r3, #32
 800d7ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7b2:	e1dc      	b.n	800db6e <UART_SetConfig+0x5a6>
 800d7b4:	2340      	movs	r3, #64	; 0x40
 800d7b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7ba:	e1d8      	b.n	800db6e <UART_SetConfig+0x5a6>
 800d7bc:	2380      	movs	r3, #128	; 0x80
 800d7be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7c2:	e1d4      	b.n	800db6e <UART_SetConfig+0x5a6>
 800d7c4:	697b      	ldr	r3, [r7, #20]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	4a4f      	ldr	r2, [pc, #316]	; (800d908 <UART_SetConfig+0x340>)
 800d7ca:	4293      	cmp	r3, r2
 800d7cc:	d130      	bne.n	800d830 <UART_SetConfig+0x268>
 800d7ce:	4b4c      	ldr	r3, [pc, #304]	; (800d900 <UART_SetConfig+0x338>)
 800d7d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d7d2:	f003 0307 	and.w	r3, r3, #7
 800d7d6:	2b05      	cmp	r3, #5
 800d7d8:	d826      	bhi.n	800d828 <UART_SetConfig+0x260>
 800d7da:	a201      	add	r2, pc, #4	; (adr r2, 800d7e0 <UART_SetConfig+0x218>)
 800d7dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7e0:	0800d7f9 	.word	0x0800d7f9
 800d7e4:	0800d801 	.word	0x0800d801
 800d7e8:	0800d809 	.word	0x0800d809
 800d7ec:	0800d811 	.word	0x0800d811
 800d7f0:	0800d819 	.word	0x0800d819
 800d7f4:	0800d821 	.word	0x0800d821
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7fe:	e1b6      	b.n	800db6e <UART_SetConfig+0x5a6>
 800d800:	2304      	movs	r3, #4
 800d802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d806:	e1b2      	b.n	800db6e <UART_SetConfig+0x5a6>
 800d808:	2308      	movs	r3, #8
 800d80a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d80e:	e1ae      	b.n	800db6e <UART_SetConfig+0x5a6>
 800d810:	2310      	movs	r3, #16
 800d812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d816:	e1aa      	b.n	800db6e <UART_SetConfig+0x5a6>
 800d818:	2320      	movs	r3, #32
 800d81a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d81e:	e1a6      	b.n	800db6e <UART_SetConfig+0x5a6>
 800d820:	2340      	movs	r3, #64	; 0x40
 800d822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d826:	e1a2      	b.n	800db6e <UART_SetConfig+0x5a6>
 800d828:	2380      	movs	r3, #128	; 0x80
 800d82a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d82e:	e19e      	b.n	800db6e <UART_SetConfig+0x5a6>
 800d830:	697b      	ldr	r3, [r7, #20]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	4a35      	ldr	r2, [pc, #212]	; (800d90c <UART_SetConfig+0x344>)
 800d836:	4293      	cmp	r3, r2
 800d838:	d130      	bne.n	800d89c <UART_SetConfig+0x2d4>
 800d83a:	4b31      	ldr	r3, [pc, #196]	; (800d900 <UART_SetConfig+0x338>)
 800d83c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d83e:	f003 0307 	and.w	r3, r3, #7
 800d842:	2b05      	cmp	r3, #5
 800d844:	d826      	bhi.n	800d894 <UART_SetConfig+0x2cc>
 800d846:	a201      	add	r2, pc, #4	; (adr r2, 800d84c <UART_SetConfig+0x284>)
 800d848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d84c:	0800d865 	.word	0x0800d865
 800d850:	0800d86d 	.word	0x0800d86d
 800d854:	0800d875 	.word	0x0800d875
 800d858:	0800d87d 	.word	0x0800d87d
 800d85c:	0800d885 	.word	0x0800d885
 800d860:	0800d88d 	.word	0x0800d88d
 800d864:	2300      	movs	r3, #0
 800d866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d86a:	e180      	b.n	800db6e <UART_SetConfig+0x5a6>
 800d86c:	2304      	movs	r3, #4
 800d86e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d872:	e17c      	b.n	800db6e <UART_SetConfig+0x5a6>
 800d874:	2308      	movs	r3, #8
 800d876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d87a:	e178      	b.n	800db6e <UART_SetConfig+0x5a6>
 800d87c:	2310      	movs	r3, #16
 800d87e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d882:	e174      	b.n	800db6e <UART_SetConfig+0x5a6>
 800d884:	2320      	movs	r3, #32
 800d886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d88a:	e170      	b.n	800db6e <UART_SetConfig+0x5a6>
 800d88c:	2340      	movs	r3, #64	; 0x40
 800d88e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d892:	e16c      	b.n	800db6e <UART_SetConfig+0x5a6>
 800d894:	2380      	movs	r3, #128	; 0x80
 800d896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d89a:	e168      	b.n	800db6e <UART_SetConfig+0x5a6>
 800d89c:	697b      	ldr	r3, [r7, #20]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	4a1b      	ldr	r2, [pc, #108]	; (800d910 <UART_SetConfig+0x348>)
 800d8a2:	4293      	cmp	r3, r2
 800d8a4:	d142      	bne.n	800d92c <UART_SetConfig+0x364>
 800d8a6:	4b16      	ldr	r3, [pc, #88]	; (800d900 <UART_SetConfig+0x338>)
 800d8a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8aa:	f003 0307 	and.w	r3, r3, #7
 800d8ae:	2b05      	cmp	r3, #5
 800d8b0:	d838      	bhi.n	800d924 <UART_SetConfig+0x35c>
 800d8b2:	a201      	add	r2, pc, #4	; (adr r2, 800d8b8 <UART_SetConfig+0x2f0>)
 800d8b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8b8:	0800d8d1 	.word	0x0800d8d1
 800d8bc:	0800d8d9 	.word	0x0800d8d9
 800d8c0:	0800d8e1 	.word	0x0800d8e1
 800d8c4:	0800d8e9 	.word	0x0800d8e9
 800d8c8:	0800d915 	.word	0x0800d915
 800d8cc:	0800d91d 	.word	0x0800d91d
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8d6:	e14a      	b.n	800db6e <UART_SetConfig+0x5a6>
 800d8d8:	2304      	movs	r3, #4
 800d8da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8de:	e146      	b.n	800db6e <UART_SetConfig+0x5a6>
 800d8e0:	2308      	movs	r3, #8
 800d8e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8e6:	e142      	b.n	800db6e <UART_SetConfig+0x5a6>
 800d8e8:	2310      	movs	r3, #16
 800d8ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8ee:	e13e      	b.n	800db6e <UART_SetConfig+0x5a6>
 800d8f0:	cfff69f3 	.word	0xcfff69f3
 800d8f4:	58000c00 	.word	0x58000c00
 800d8f8:	11fff4ff 	.word	0x11fff4ff
 800d8fc:	40011000 	.word	0x40011000
 800d900:	58024400 	.word	0x58024400
 800d904:	40004400 	.word	0x40004400
 800d908:	40004800 	.word	0x40004800
 800d90c:	40004c00 	.word	0x40004c00
 800d910:	40005000 	.word	0x40005000
 800d914:	2320      	movs	r3, #32
 800d916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d91a:	e128      	b.n	800db6e <UART_SetConfig+0x5a6>
 800d91c:	2340      	movs	r3, #64	; 0x40
 800d91e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d922:	e124      	b.n	800db6e <UART_SetConfig+0x5a6>
 800d924:	2380      	movs	r3, #128	; 0x80
 800d926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d92a:	e120      	b.n	800db6e <UART_SetConfig+0x5a6>
 800d92c:	697b      	ldr	r3, [r7, #20]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	4acb      	ldr	r2, [pc, #812]	; (800dc60 <UART_SetConfig+0x698>)
 800d932:	4293      	cmp	r3, r2
 800d934:	d176      	bne.n	800da24 <UART_SetConfig+0x45c>
 800d936:	4bcb      	ldr	r3, [pc, #812]	; (800dc64 <UART_SetConfig+0x69c>)
 800d938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d93a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d93e:	2b28      	cmp	r3, #40	; 0x28
 800d940:	d86c      	bhi.n	800da1c <UART_SetConfig+0x454>
 800d942:	a201      	add	r2, pc, #4	; (adr r2, 800d948 <UART_SetConfig+0x380>)
 800d944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d948:	0800d9ed 	.word	0x0800d9ed
 800d94c:	0800da1d 	.word	0x0800da1d
 800d950:	0800da1d 	.word	0x0800da1d
 800d954:	0800da1d 	.word	0x0800da1d
 800d958:	0800da1d 	.word	0x0800da1d
 800d95c:	0800da1d 	.word	0x0800da1d
 800d960:	0800da1d 	.word	0x0800da1d
 800d964:	0800da1d 	.word	0x0800da1d
 800d968:	0800d9f5 	.word	0x0800d9f5
 800d96c:	0800da1d 	.word	0x0800da1d
 800d970:	0800da1d 	.word	0x0800da1d
 800d974:	0800da1d 	.word	0x0800da1d
 800d978:	0800da1d 	.word	0x0800da1d
 800d97c:	0800da1d 	.word	0x0800da1d
 800d980:	0800da1d 	.word	0x0800da1d
 800d984:	0800da1d 	.word	0x0800da1d
 800d988:	0800d9fd 	.word	0x0800d9fd
 800d98c:	0800da1d 	.word	0x0800da1d
 800d990:	0800da1d 	.word	0x0800da1d
 800d994:	0800da1d 	.word	0x0800da1d
 800d998:	0800da1d 	.word	0x0800da1d
 800d99c:	0800da1d 	.word	0x0800da1d
 800d9a0:	0800da1d 	.word	0x0800da1d
 800d9a4:	0800da1d 	.word	0x0800da1d
 800d9a8:	0800da05 	.word	0x0800da05
 800d9ac:	0800da1d 	.word	0x0800da1d
 800d9b0:	0800da1d 	.word	0x0800da1d
 800d9b4:	0800da1d 	.word	0x0800da1d
 800d9b8:	0800da1d 	.word	0x0800da1d
 800d9bc:	0800da1d 	.word	0x0800da1d
 800d9c0:	0800da1d 	.word	0x0800da1d
 800d9c4:	0800da1d 	.word	0x0800da1d
 800d9c8:	0800da0d 	.word	0x0800da0d
 800d9cc:	0800da1d 	.word	0x0800da1d
 800d9d0:	0800da1d 	.word	0x0800da1d
 800d9d4:	0800da1d 	.word	0x0800da1d
 800d9d8:	0800da1d 	.word	0x0800da1d
 800d9dc:	0800da1d 	.word	0x0800da1d
 800d9e0:	0800da1d 	.word	0x0800da1d
 800d9e4:	0800da1d 	.word	0x0800da1d
 800d9e8:	0800da15 	.word	0x0800da15
 800d9ec:	2301      	movs	r3, #1
 800d9ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9f2:	e0bc      	b.n	800db6e <UART_SetConfig+0x5a6>
 800d9f4:	2304      	movs	r3, #4
 800d9f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9fa:	e0b8      	b.n	800db6e <UART_SetConfig+0x5a6>
 800d9fc:	2308      	movs	r3, #8
 800d9fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da02:	e0b4      	b.n	800db6e <UART_SetConfig+0x5a6>
 800da04:	2310      	movs	r3, #16
 800da06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da0a:	e0b0      	b.n	800db6e <UART_SetConfig+0x5a6>
 800da0c:	2320      	movs	r3, #32
 800da0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da12:	e0ac      	b.n	800db6e <UART_SetConfig+0x5a6>
 800da14:	2340      	movs	r3, #64	; 0x40
 800da16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da1a:	e0a8      	b.n	800db6e <UART_SetConfig+0x5a6>
 800da1c:	2380      	movs	r3, #128	; 0x80
 800da1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da22:	e0a4      	b.n	800db6e <UART_SetConfig+0x5a6>
 800da24:	697b      	ldr	r3, [r7, #20]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	4a8f      	ldr	r2, [pc, #572]	; (800dc68 <UART_SetConfig+0x6a0>)
 800da2a:	4293      	cmp	r3, r2
 800da2c:	d130      	bne.n	800da90 <UART_SetConfig+0x4c8>
 800da2e:	4b8d      	ldr	r3, [pc, #564]	; (800dc64 <UART_SetConfig+0x69c>)
 800da30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da32:	f003 0307 	and.w	r3, r3, #7
 800da36:	2b05      	cmp	r3, #5
 800da38:	d826      	bhi.n	800da88 <UART_SetConfig+0x4c0>
 800da3a:	a201      	add	r2, pc, #4	; (adr r2, 800da40 <UART_SetConfig+0x478>)
 800da3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da40:	0800da59 	.word	0x0800da59
 800da44:	0800da61 	.word	0x0800da61
 800da48:	0800da69 	.word	0x0800da69
 800da4c:	0800da71 	.word	0x0800da71
 800da50:	0800da79 	.word	0x0800da79
 800da54:	0800da81 	.word	0x0800da81
 800da58:	2300      	movs	r3, #0
 800da5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da5e:	e086      	b.n	800db6e <UART_SetConfig+0x5a6>
 800da60:	2304      	movs	r3, #4
 800da62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da66:	e082      	b.n	800db6e <UART_SetConfig+0x5a6>
 800da68:	2308      	movs	r3, #8
 800da6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da6e:	e07e      	b.n	800db6e <UART_SetConfig+0x5a6>
 800da70:	2310      	movs	r3, #16
 800da72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da76:	e07a      	b.n	800db6e <UART_SetConfig+0x5a6>
 800da78:	2320      	movs	r3, #32
 800da7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da7e:	e076      	b.n	800db6e <UART_SetConfig+0x5a6>
 800da80:	2340      	movs	r3, #64	; 0x40
 800da82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da86:	e072      	b.n	800db6e <UART_SetConfig+0x5a6>
 800da88:	2380      	movs	r3, #128	; 0x80
 800da8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da8e:	e06e      	b.n	800db6e <UART_SetConfig+0x5a6>
 800da90:	697b      	ldr	r3, [r7, #20]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	4a75      	ldr	r2, [pc, #468]	; (800dc6c <UART_SetConfig+0x6a4>)
 800da96:	4293      	cmp	r3, r2
 800da98:	d130      	bne.n	800dafc <UART_SetConfig+0x534>
 800da9a:	4b72      	ldr	r3, [pc, #456]	; (800dc64 <UART_SetConfig+0x69c>)
 800da9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da9e:	f003 0307 	and.w	r3, r3, #7
 800daa2:	2b05      	cmp	r3, #5
 800daa4:	d826      	bhi.n	800daf4 <UART_SetConfig+0x52c>
 800daa6:	a201      	add	r2, pc, #4	; (adr r2, 800daac <UART_SetConfig+0x4e4>)
 800daa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daac:	0800dac5 	.word	0x0800dac5
 800dab0:	0800dacd 	.word	0x0800dacd
 800dab4:	0800dad5 	.word	0x0800dad5
 800dab8:	0800dadd 	.word	0x0800dadd
 800dabc:	0800dae5 	.word	0x0800dae5
 800dac0:	0800daed 	.word	0x0800daed
 800dac4:	2300      	movs	r3, #0
 800dac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daca:	e050      	b.n	800db6e <UART_SetConfig+0x5a6>
 800dacc:	2304      	movs	r3, #4
 800dace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dad2:	e04c      	b.n	800db6e <UART_SetConfig+0x5a6>
 800dad4:	2308      	movs	r3, #8
 800dad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dada:	e048      	b.n	800db6e <UART_SetConfig+0x5a6>
 800dadc:	2310      	movs	r3, #16
 800dade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dae2:	e044      	b.n	800db6e <UART_SetConfig+0x5a6>
 800dae4:	2320      	movs	r3, #32
 800dae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daea:	e040      	b.n	800db6e <UART_SetConfig+0x5a6>
 800daec:	2340      	movs	r3, #64	; 0x40
 800daee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daf2:	e03c      	b.n	800db6e <UART_SetConfig+0x5a6>
 800daf4:	2380      	movs	r3, #128	; 0x80
 800daf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dafa:	e038      	b.n	800db6e <UART_SetConfig+0x5a6>
 800dafc:	697b      	ldr	r3, [r7, #20]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	4a5b      	ldr	r2, [pc, #364]	; (800dc70 <UART_SetConfig+0x6a8>)
 800db02:	4293      	cmp	r3, r2
 800db04:	d130      	bne.n	800db68 <UART_SetConfig+0x5a0>
 800db06:	4b57      	ldr	r3, [pc, #348]	; (800dc64 <UART_SetConfig+0x69c>)
 800db08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db0a:	f003 0307 	and.w	r3, r3, #7
 800db0e:	2b05      	cmp	r3, #5
 800db10:	d826      	bhi.n	800db60 <UART_SetConfig+0x598>
 800db12:	a201      	add	r2, pc, #4	; (adr r2, 800db18 <UART_SetConfig+0x550>)
 800db14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db18:	0800db31 	.word	0x0800db31
 800db1c:	0800db39 	.word	0x0800db39
 800db20:	0800db41 	.word	0x0800db41
 800db24:	0800db49 	.word	0x0800db49
 800db28:	0800db51 	.word	0x0800db51
 800db2c:	0800db59 	.word	0x0800db59
 800db30:	2302      	movs	r3, #2
 800db32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db36:	e01a      	b.n	800db6e <UART_SetConfig+0x5a6>
 800db38:	2304      	movs	r3, #4
 800db3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db3e:	e016      	b.n	800db6e <UART_SetConfig+0x5a6>
 800db40:	2308      	movs	r3, #8
 800db42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db46:	e012      	b.n	800db6e <UART_SetConfig+0x5a6>
 800db48:	2310      	movs	r3, #16
 800db4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db4e:	e00e      	b.n	800db6e <UART_SetConfig+0x5a6>
 800db50:	2320      	movs	r3, #32
 800db52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db56:	e00a      	b.n	800db6e <UART_SetConfig+0x5a6>
 800db58:	2340      	movs	r3, #64	; 0x40
 800db5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db5e:	e006      	b.n	800db6e <UART_SetConfig+0x5a6>
 800db60:	2380      	movs	r3, #128	; 0x80
 800db62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db66:	e002      	b.n	800db6e <UART_SetConfig+0x5a6>
 800db68:	2380      	movs	r3, #128	; 0x80
 800db6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800db6e:	697b      	ldr	r3, [r7, #20]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	4a3f      	ldr	r2, [pc, #252]	; (800dc70 <UART_SetConfig+0x6a8>)
 800db74:	4293      	cmp	r3, r2
 800db76:	f040 80f8 	bne.w	800dd6a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800db7a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800db7e:	2b20      	cmp	r3, #32
 800db80:	dc46      	bgt.n	800dc10 <UART_SetConfig+0x648>
 800db82:	2b02      	cmp	r3, #2
 800db84:	f2c0 8082 	blt.w	800dc8c <UART_SetConfig+0x6c4>
 800db88:	3b02      	subs	r3, #2
 800db8a:	2b1e      	cmp	r3, #30
 800db8c:	d87e      	bhi.n	800dc8c <UART_SetConfig+0x6c4>
 800db8e:	a201      	add	r2, pc, #4	; (adr r2, 800db94 <UART_SetConfig+0x5cc>)
 800db90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db94:	0800dc17 	.word	0x0800dc17
 800db98:	0800dc8d 	.word	0x0800dc8d
 800db9c:	0800dc1f 	.word	0x0800dc1f
 800dba0:	0800dc8d 	.word	0x0800dc8d
 800dba4:	0800dc8d 	.word	0x0800dc8d
 800dba8:	0800dc8d 	.word	0x0800dc8d
 800dbac:	0800dc2f 	.word	0x0800dc2f
 800dbb0:	0800dc8d 	.word	0x0800dc8d
 800dbb4:	0800dc8d 	.word	0x0800dc8d
 800dbb8:	0800dc8d 	.word	0x0800dc8d
 800dbbc:	0800dc8d 	.word	0x0800dc8d
 800dbc0:	0800dc8d 	.word	0x0800dc8d
 800dbc4:	0800dc8d 	.word	0x0800dc8d
 800dbc8:	0800dc8d 	.word	0x0800dc8d
 800dbcc:	0800dc3f 	.word	0x0800dc3f
 800dbd0:	0800dc8d 	.word	0x0800dc8d
 800dbd4:	0800dc8d 	.word	0x0800dc8d
 800dbd8:	0800dc8d 	.word	0x0800dc8d
 800dbdc:	0800dc8d 	.word	0x0800dc8d
 800dbe0:	0800dc8d 	.word	0x0800dc8d
 800dbe4:	0800dc8d 	.word	0x0800dc8d
 800dbe8:	0800dc8d 	.word	0x0800dc8d
 800dbec:	0800dc8d 	.word	0x0800dc8d
 800dbf0:	0800dc8d 	.word	0x0800dc8d
 800dbf4:	0800dc8d 	.word	0x0800dc8d
 800dbf8:	0800dc8d 	.word	0x0800dc8d
 800dbfc:	0800dc8d 	.word	0x0800dc8d
 800dc00:	0800dc8d 	.word	0x0800dc8d
 800dc04:	0800dc8d 	.word	0x0800dc8d
 800dc08:	0800dc8d 	.word	0x0800dc8d
 800dc0c:	0800dc7f 	.word	0x0800dc7f
 800dc10:	2b40      	cmp	r3, #64	; 0x40
 800dc12:	d037      	beq.n	800dc84 <UART_SetConfig+0x6bc>
 800dc14:	e03a      	b.n	800dc8c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800dc16:	f7fe fb19 	bl	800c24c <HAL_RCCEx_GetD3PCLK1Freq>
 800dc1a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dc1c:	e03c      	b.n	800dc98 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dc1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dc22:	4618      	mov	r0, r3
 800dc24:	f7fe fb28 	bl	800c278 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dc28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dc2c:	e034      	b.n	800dc98 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dc2e:	f107 0318 	add.w	r3, r7, #24
 800dc32:	4618      	mov	r0, r3
 800dc34:	f7fe fc74 	bl	800c520 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dc38:	69fb      	ldr	r3, [r7, #28]
 800dc3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dc3c:	e02c      	b.n	800dc98 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dc3e:	4b09      	ldr	r3, [pc, #36]	; (800dc64 <UART_SetConfig+0x69c>)
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	f003 0320 	and.w	r3, r3, #32
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d016      	beq.n	800dc78 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dc4a:	4b06      	ldr	r3, [pc, #24]	; (800dc64 <UART_SetConfig+0x69c>)
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	08db      	lsrs	r3, r3, #3
 800dc50:	f003 0303 	and.w	r3, r3, #3
 800dc54:	4a07      	ldr	r2, [pc, #28]	; (800dc74 <UART_SetConfig+0x6ac>)
 800dc56:	fa22 f303 	lsr.w	r3, r2, r3
 800dc5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dc5c:	e01c      	b.n	800dc98 <UART_SetConfig+0x6d0>
 800dc5e:	bf00      	nop
 800dc60:	40011400 	.word	0x40011400
 800dc64:	58024400 	.word	0x58024400
 800dc68:	40007800 	.word	0x40007800
 800dc6c:	40007c00 	.word	0x40007c00
 800dc70:	58000c00 	.word	0x58000c00
 800dc74:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800dc78:	4b9d      	ldr	r3, [pc, #628]	; (800def0 <UART_SetConfig+0x928>)
 800dc7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dc7c:	e00c      	b.n	800dc98 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dc7e:	4b9d      	ldr	r3, [pc, #628]	; (800def4 <UART_SetConfig+0x92c>)
 800dc80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dc82:	e009      	b.n	800dc98 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dc84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dc88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dc8a:	e005      	b.n	800dc98 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800dc90:	2301      	movs	r3, #1
 800dc92:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800dc96:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800dc98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	f000 81de 	beq.w	800e05c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800dca0:	697b      	ldr	r3, [r7, #20]
 800dca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dca4:	4a94      	ldr	r2, [pc, #592]	; (800def8 <UART_SetConfig+0x930>)
 800dca6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dcaa:	461a      	mov	r2, r3
 800dcac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dcae:	fbb3 f3f2 	udiv	r3, r3, r2
 800dcb2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dcb4:	697b      	ldr	r3, [r7, #20]
 800dcb6:	685a      	ldr	r2, [r3, #4]
 800dcb8:	4613      	mov	r3, r2
 800dcba:	005b      	lsls	r3, r3, #1
 800dcbc:	4413      	add	r3, r2
 800dcbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dcc0:	429a      	cmp	r2, r3
 800dcc2:	d305      	bcc.n	800dcd0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800dcc4:	697b      	ldr	r3, [r7, #20]
 800dcc6:	685b      	ldr	r3, [r3, #4]
 800dcc8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dcca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dccc:	429a      	cmp	r2, r3
 800dcce:	d903      	bls.n	800dcd8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800dcd0:	2301      	movs	r3, #1
 800dcd2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800dcd6:	e1c1      	b.n	800e05c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dcd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dcda:	2200      	movs	r2, #0
 800dcdc:	60bb      	str	r3, [r7, #8]
 800dcde:	60fa      	str	r2, [r7, #12]
 800dce0:	697b      	ldr	r3, [r7, #20]
 800dce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dce4:	4a84      	ldr	r2, [pc, #528]	; (800def8 <UART_SetConfig+0x930>)
 800dce6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dcea:	b29b      	uxth	r3, r3
 800dcec:	2200      	movs	r2, #0
 800dcee:	603b      	str	r3, [r7, #0]
 800dcf0:	607a      	str	r2, [r7, #4]
 800dcf2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dcf6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800dcfa:	f7f3 fdb9 	bl	8001870 <__aeabi_uldivmod>
 800dcfe:	4602      	mov	r2, r0
 800dd00:	460b      	mov	r3, r1
 800dd02:	4610      	mov	r0, r2
 800dd04:	4619      	mov	r1, r3
 800dd06:	f04f 0200 	mov.w	r2, #0
 800dd0a:	f04f 0300 	mov.w	r3, #0
 800dd0e:	020b      	lsls	r3, r1, #8
 800dd10:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800dd14:	0202      	lsls	r2, r0, #8
 800dd16:	6979      	ldr	r1, [r7, #20]
 800dd18:	6849      	ldr	r1, [r1, #4]
 800dd1a:	0849      	lsrs	r1, r1, #1
 800dd1c:	2000      	movs	r0, #0
 800dd1e:	460c      	mov	r4, r1
 800dd20:	4605      	mov	r5, r0
 800dd22:	eb12 0804 	adds.w	r8, r2, r4
 800dd26:	eb43 0905 	adc.w	r9, r3, r5
 800dd2a:	697b      	ldr	r3, [r7, #20]
 800dd2c:	685b      	ldr	r3, [r3, #4]
 800dd2e:	2200      	movs	r2, #0
 800dd30:	469a      	mov	sl, r3
 800dd32:	4693      	mov	fp, r2
 800dd34:	4652      	mov	r2, sl
 800dd36:	465b      	mov	r3, fp
 800dd38:	4640      	mov	r0, r8
 800dd3a:	4649      	mov	r1, r9
 800dd3c:	f7f3 fd98 	bl	8001870 <__aeabi_uldivmod>
 800dd40:	4602      	mov	r2, r0
 800dd42:	460b      	mov	r3, r1
 800dd44:	4613      	mov	r3, r2
 800dd46:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800dd48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dd4e:	d308      	bcc.n	800dd62 <UART_SetConfig+0x79a>
 800dd50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dd56:	d204      	bcs.n	800dd62 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800dd58:	697b      	ldr	r3, [r7, #20]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dd5e:	60da      	str	r2, [r3, #12]
 800dd60:	e17c      	b.n	800e05c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800dd62:	2301      	movs	r3, #1
 800dd64:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800dd68:	e178      	b.n	800e05c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dd6a:	697b      	ldr	r3, [r7, #20]
 800dd6c:	69db      	ldr	r3, [r3, #28]
 800dd6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dd72:	f040 80c5 	bne.w	800df00 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800dd76:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800dd7a:	2b20      	cmp	r3, #32
 800dd7c:	dc48      	bgt.n	800de10 <UART_SetConfig+0x848>
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	db7b      	blt.n	800de7a <UART_SetConfig+0x8b2>
 800dd82:	2b20      	cmp	r3, #32
 800dd84:	d879      	bhi.n	800de7a <UART_SetConfig+0x8b2>
 800dd86:	a201      	add	r2, pc, #4	; (adr r2, 800dd8c <UART_SetConfig+0x7c4>)
 800dd88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd8c:	0800de17 	.word	0x0800de17
 800dd90:	0800de1f 	.word	0x0800de1f
 800dd94:	0800de7b 	.word	0x0800de7b
 800dd98:	0800de7b 	.word	0x0800de7b
 800dd9c:	0800de27 	.word	0x0800de27
 800dda0:	0800de7b 	.word	0x0800de7b
 800dda4:	0800de7b 	.word	0x0800de7b
 800dda8:	0800de7b 	.word	0x0800de7b
 800ddac:	0800de37 	.word	0x0800de37
 800ddb0:	0800de7b 	.word	0x0800de7b
 800ddb4:	0800de7b 	.word	0x0800de7b
 800ddb8:	0800de7b 	.word	0x0800de7b
 800ddbc:	0800de7b 	.word	0x0800de7b
 800ddc0:	0800de7b 	.word	0x0800de7b
 800ddc4:	0800de7b 	.word	0x0800de7b
 800ddc8:	0800de7b 	.word	0x0800de7b
 800ddcc:	0800de47 	.word	0x0800de47
 800ddd0:	0800de7b 	.word	0x0800de7b
 800ddd4:	0800de7b 	.word	0x0800de7b
 800ddd8:	0800de7b 	.word	0x0800de7b
 800dddc:	0800de7b 	.word	0x0800de7b
 800dde0:	0800de7b 	.word	0x0800de7b
 800dde4:	0800de7b 	.word	0x0800de7b
 800dde8:	0800de7b 	.word	0x0800de7b
 800ddec:	0800de7b 	.word	0x0800de7b
 800ddf0:	0800de7b 	.word	0x0800de7b
 800ddf4:	0800de7b 	.word	0x0800de7b
 800ddf8:	0800de7b 	.word	0x0800de7b
 800ddfc:	0800de7b 	.word	0x0800de7b
 800de00:	0800de7b 	.word	0x0800de7b
 800de04:	0800de7b 	.word	0x0800de7b
 800de08:	0800de7b 	.word	0x0800de7b
 800de0c:	0800de6d 	.word	0x0800de6d
 800de10:	2b40      	cmp	r3, #64	; 0x40
 800de12:	d02e      	beq.n	800de72 <UART_SetConfig+0x8aa>
 800de14:	e031      	b.n	800de7a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800de16:	f7fc fa47 	bl	800a2a8 <HAL_RCC_GetPCLK1Freq>
 800de1a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800de1c:	e033      	b.n	800de86 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800de1e:	f7fc fa59 	bl	800a2d4 <HAL_RCC_GetPCLK2Freq>
 800de22:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800de24:	e02f      	b.n	800de86 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800de26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800de2a:	4618      	mov	r0, r3
 800de2c:	f7fe fa24 	bl	800c278 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800de30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de34:	e027      	b.n	800de86 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800de36:	f107 0318 	add.w	r3, r7, #24
 800de3a:	4618      	mov	r0, r3
 800de3c:	f7fe fb70 	bl	800c520 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800de40:	69fb      	ldr	r3, [r7, #28]
 800de42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de44:	e01f      	b.n	800de86 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800de46:	4b2d      	ldr	r3, [pc, #180]	; (800defc <UART_SetConfig+0x934>)
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	f003 0320 	and.w	r3, r3, #32
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d009      	beq.n	800de66 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800de52:	4b2a      	ldr	r3, [pc, #168]	; (800defc <UART_SetConfig+0x934>)
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	08db      	lsrs	r3, r3, #3
 800de58:	f003 0303 	and.w	r3, r3, #3
 800de5c:	4a24      	ldr	r2, [pc, #144]	; (800def0 <UART_SetConfig+0x928>)
 800de5e:	fa22 f303 	lsr.w	r3, r2, r3
 800de62:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800de64:	e00f      	b.n	800de86 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800de66:	4b22      	ldr	r3, [pc, #136]	; (800def0 <UART_SetConfig+0x928>)
 800de68:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de6a:	e00c      	b.n	800de86 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800de6c:	4b21      	ldr	r3, [pc, #132]	; (800def4 <UART_SetConfig+0x92c>)
 800de6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de70:	e009      	b.n	800de86 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800de72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800de76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de78:	e005      	b.n	800de86 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800de7a:	2300      	movs	r3, #0
 800de7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800de7e:	2301      	movs	r3, #1
 800de80:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800de84:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800de86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de88:	2b00      	cmp	r3, #0
 800de8a:	f000 80e7 	beq.w	800e05c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800de8e:	697b      	ldr	r3, [r7, #20]
 800de90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de92:	4a19      	ldr	r2, [pc, #100]	; (800def8 <UART_SetConfig+0x930>)
 800de94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800de98:	461a      	mov	r2, r3
 800de9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de9c:	fbb3 f3f2 	udiv	r3, r3, r2
 800dea0:	005a      	lsls	r2, r3, #1
 800dea2:	697b      	ldr	r3, [r7, #20]
 800dea4:	685b      	ldr	r3, [r3, #4]
 800dea6:	085b      	lsrs	r3, r3, #1
 800dea8:	441a      	add	r2, r3
 800deaa:	697b      	ldr	r3, [r7, #20]
 800deac:	685b      	ldr	r3, [r3, #4]
 800deae:	fbb2 f3f3 	udiv	r3, r2, r3
 800deb2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800deb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deb6:	2b0f      	cmp	r3, #15
 800deb8:	d916      	bls.n	800dee8 <UART_SetConfig+0x920>
 800deba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800debc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dec0:	d212      	bcs.n	800dee8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800dec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dec4:	b29b      	uxth	r3, r3
 800dec6:	f023 030f 	bic.w	r3, r3, #15
 800deca:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800decc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dece:	085b      	lsrs	r3, r3, #1
 800ded0:	b29b      	uxth	r3, r3
 800ded2:	f003 0307 	and.w	r3, r3, #7
 800ded6:	b29a      	uxth	r2, r3
 800ded8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800deda:	4313      	orrs	r3, r2
 800dedc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800dede:	697b      	ldr	r3, [r7, #20]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800dee4:	60da      	str	r2, [r3, #12]
 800dee6:	e0b9      	b.n	800e05c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800dee8:	2301      	movs	r3, #1
 800deea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800deee:	e0b5      	b.n	800e05c <UART_SetConfig+0xa94>
 800def0:	03d09000 	.word	0x03d09000
 800def4:	003d0900 	.word	0x003d0900
 800def8:	0801e6e0 	.word	0x0801e6e0
 800defc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800df00:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800df04:	2b20      	cmp	r3, #32
 800df06:	dc49      	bgt.n	800df9c <UART_SetConfig+0x9d4>
 800df08:	2b00      	cmp	r3, #0
 800df0a:	db7c      	blt.n	800e006 <UART_SetConfig+0xa3e>
 800df0c:	2b20      	cmp	r3, #32
 800df0e:	d87a      	bhi.n	800e006 <UART_SetConfig+0xa3e>
 800df10:	a201      	add	r2, pc, #4	; (adr r2, 800df18 <UART_SetConfig+0x950>)
 800df12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df16:	bf00      	nop
 800df18:	0800dfa3 	.word	0x0800dfa3
 800df1c:	0800dfab 	.word	0x0800dfab
 800df20:	0800e007 	.word	0x0800e007
 800df24:	0800e007 	.word	0x0800e007
 800df28:	0800dfb3 	.word	0x0800dfb3
 800df2c:	0800e007 	.word	0x0800e007
 800df30:	0800e007 	.word	0x0800e007
 800df34:	0800e007 	.word	0x0800e007
 800df38:	0800dfc3 	.word	0x0800dfc3
 800df3c:	0800e007 	.word	0x0800e007
 800df40:	0800e007 	.word	0x0800e007
 800df44:	0800e007 	.word	0x0800e007
 800df48:	0800e007 	.word	0x0800e007
 800df4c:	0800e007 	.word	0x0800e007
 800df50:	0800e007 	.word	0x0800e007
 800df54:	0800e007 	.word	0x0800e007
 800df58:	0800dfd3 	.word	0x0800dfd3
 800df5c:	0800e007 	.word	0x0800e007
 800df60:	0800e007 	.word	0x0800e007
 800df64:	0800e007 	.word	0x0800e007
 800df68:	0800e007 	.word	0x0800e007
 800df6c:	0800e007 	.word	0x0800e007
 800df70:	0800e007 	.word	0x0800e007
 800df74:	0800e007 	.word	0x0800e007
 800df78:	0800e007 	.word	0x0800e007
 800df7c:	0800e007 	.word	0x0800e007
 800df80:	0800e007 	.word	0x0800e007
 800df84:	0800e007 	.word	0x0800e007
 800df88:	0800e007 	.word	0x0800e007
 800df8c:	0800e007 	.word	0x0800e007
 800df90:	0800e007 	.word	0x0800e007
 800df94:	0800e007 	.word	0x0800e007
 800df98:	0800dff9 	.word	0x0800dff9
 800df9c:	2b40      	cmp	r3, #64	; 0x40
 800df9e:	d02e      	beq.n	800dffe <UART_SetConfig+0xa36>
 800dfa0:	e031      	b.n	800e006 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dfa2:	f7fc f981 	bl	800a2a8 <HAL_RCC_GetPCLK1Freq>
 800dfa6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dfa8:	e033      	b.n	800e012 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dfaa:	f7fc f993 	bl	800a2d4 <HAL_RCC_GetPCLK2Freq>
 800dfae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dfb0:	e02f      	b.n	800e012 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dfb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	f7fe f95e 	bl	800c278 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dfbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dfc0:	e027      	b.n	800e012 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dfc2:	f107 0318 	add.w	r3, r7, #24
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	f7fe faaa 	bl	800c520 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dfcc:	69fb      	ldr	r3, [r7, #28]
 800dfce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dfd0:	e01f      	b.n	800e012 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dfd2:	4b2d      	ldr	r3, [pc, #180]	; (800e088 <UART_SetConfig+0xac0>)
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	f003 0320 	and.w	r3, r3, #32
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d009      	beq.n	800dff2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dfde:	4b2a      	ldr	r3, [pc, #168]	; (800e088 <UART_SetConfig+0xac0>)
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	08db      	lsrs	r3, r3, #3
 800dfe4:	f003 0303 	and.w	r3, r3, #3
 800dfe8:	4a28      	ldr	r2, [pc, #160]	; (800e08c <UART_SetConfig+0xac4>)
 800dfea:	fa22 f303 	lsr.w	r3, r2, r3
 800dfee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dff0:	e00f      	b.n	800e012 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800dff2:	4b26      	ldr	r3, [pc, #152]	; (800e08c <UART_SetConfig+0xac4>)
 800dff4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dff6:	e00c      	b.n	800e012 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dff8:	4b25      	ldr	r3, [pc, #148]	; (800e090 <UART_SetConfig+0xac8>)
 800dffa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dffc:	e009      	b.n	800e012 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dffe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e002:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e004:	e005      	b.n	800e012 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800e006:	2300      	movs	r3, #0
 800e008:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e00a:	2301      	movs	r3, #1
 800e00c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e010:	bf00      	nop
    }

    if (pclk != 0U)
 800e012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e014:	2b00      	cmp	r3, #0
 800e016:	d021      	beq.n	800e05c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e018:	697b      	ldr	r3, [r7, #20]
 800e01a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e01c:	4a1d      	ldr	r2, [pc, #116]	; (800e094 <UART_SetConfig+0xacc>)
 800e01e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e022:	461a      	mov	r2, r3
 800e024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e026:	fbb3 f2f2 	udiv	r2, r3, r2
 800e02a:	697b      	ldr	r3, [r7, #20]
 800e02c:	685b      	ldr	r3, [r3, #4]
 800e02e:	085b      	lsrs	r3, r3, #1
 800e030:	441a      	add	r2, r3
 800e032:	697b      	ldr	r3, [r7, #20]
 800e034:	685b      	ldr	r3, [r3, #4]
 800e036:	fbb2 f3f3 	udiv	r3, r2, r3
 800e03a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e03c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e03e:	2b0f      	cmp	r3, #15
 800e040:	d909      	bls.n	800e056 <UART_SetConfig+0xa8e>
 800e042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e048:	d205      	bcs.n	800e056 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e04c:	b29a      	uxth	r2, r3
 800e04e:	697b      	ldr	r3, [r7, #20]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	60da      	str	r2, [r3, #12]
 800e054:	e002      	b.n	800e05c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e056:	2301      	movs	r3, #1
 800e058:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e05c:	697b      	ldr	r3, [r7, #20]
 800e05e:	2201      	movs	r2, #1
 800e060:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e064:	697b      	ldr	r3, [r7, #20]
 800e066:	2201      	movs	r2, #1
 800e068:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e06c:	697b      	ldr	r3, [r7, #20]
 800e06e:	2200      	movs	r2, #0
 800e070:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800e072:	697b      	ldr	r3, [r7, #20]
 800e074:	2200      	movs	r2, #0
 800e076:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800e078:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800e07c:	4618      	mov	r0, r3
 800e07e:	3748      	adds	r7, #72	; 0x48
 800e080:	46bd      	mov	sp, r7
 800e082:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e086:	bf00      	nop
 800e088:	58024400 	.word	0x58024400
 800e08c:	03d09000 	.word	0x03d09000
 800e090:	003d0900 	.word	0x003d0900
 800e094:	0801e6e0 	.word	0x0801e6e0

0800e098 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e098:	b480      	push	{r7}
 800e09a:	b083      	sub	sp, #12
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0a4:	f003 0301 	and.w	r3, r3, #1
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d00a      	beq.n	800e0c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	685b      	ldr	r3, [r3, #4]
 800e0b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	430a      	orrs	r2, r1
 800e0c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0c6:	f003 0302 	and.w	r3, r3, #2
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d00a      	beq.n	800e0e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	685b      	ldr	r3, [r3, #4]
 800e0d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	430a      	orrs	r2, r1
 800e0e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0e8:	f003 0304 	and.w	r3, r3, #4
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d00a      	beq.n	800e106 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	685b      	ldr	r3, [r3, #4]
 800e0f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	430a      	orrs	r2, r1
 800e104:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e10a:	f003 0308 	and.w	r3, r3, #8
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d00a      	beq.n	800e128 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	685b      	ldr	r3, [r3, #4]
 800e118:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	430a      	orrs	r2, r1
 800e126:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e12c:	f003 0310 	and.w	r3, r3, #16
 800e130:	2b00      	cmp	r3, #0
 800e132:	d00a      	beq.n	800e14a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	689b      	ldr	r3, [r3, #8]
 800e13a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	430a      	orrs	r2, r1
 800e148:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e14e:	f003 0320 	and.w	r3, r3, #32
 800e152:	2b00      	cmp	r3, #0
 800e154:	d00a      	beq.n	800e16c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	689b      	ldr	r3, [r3, #8]
 800e15c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	430a      	orrs	r2, r1
 800e16a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e174:	2b00      	cmp	r3, #0
 800e176:	d01a      	beq.n	800e1ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	685b      	ldr	r3, [r3, #4]
 800e17e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	430a      	orrs	r2, r1
 800e18c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e192:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e196:	d10a      	bne.n	800e1ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	685b      	ldr	r3, [r3, #4]
 800e19e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	430a      	orrs	r2, r1
 800e1ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d00a      	beq.n	800e1d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	685b      	ldr	r3, [r3, #4]
 800e1c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	430a      	orrs	r2, r1
 800e1ce:	605a      	str	r2, [r3, #4]
  }
}
 800e1d0:	bf00      	nop
 800e1d2:	370c      	adds	r7, #12
 800e1d4:	46bd      	mov	sp, r7
 800e1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1da:	4770      	bx	lr

0800e1dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e1dc:	b580      	push	{r7, lr}
 800e1de:	b098      	sub	sp, #96	; 0x60
 800e1e0:	af02      	add	r7, sp, #8
 800e1e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e1ec:	f7f5 fb74 	bl	80038d8 <HAL_GetTick>
 800e1f0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	f003 0308 	and.w	r3, r3, #8
 800e1fc:	2b08      	cmp	r3, #8
 800e1fe:	d12f      	bne.n	800e260 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e200:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e204:	9300      	str	r3, [sp, #0]
 800e206:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e208:	2200      	movs	r2, #0
 800e20a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e20e:	6878      	ldr	r0, [r7, #4]
 800e210:	f000 f88e 	bl	800e330 <UART_WaitOnFlagUntilTimeout>
 800e214:	4603      	mov	r3, r0
 800e216:	2b00      	cmp	r3, #0
 800e218:	d022      	beq.n	800e260 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e222:	e853 3f00 	ldrex	r3, [r3]
 800e226:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e22a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e22e:	653b      	str	r3, [r7, #80]	; 0x50
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	461a      	mov	r2, r3
 800e236:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e238:	647b      	str	r3, [r7, #68]	; 0x44
 800e23a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e23c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e23e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e240:	e841 2300 	strex	r3, r2, [r1]
 800e244:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e246:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d1e6      	bne.n	800e21a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	2220      	movs	r2, #32
 800e250:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	2200      	movs	r2, #0
 800e258:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e25c:	2303      	movs	r3, #3
 800e25e:	e063      	b.n	800e328 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	f003 0304 	and.w	r3, r3, #4
 800e26a:	2b04      	cmp	r3, #4
 800e26c:	d149      	bne.n	800e302 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e26e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e272:	9300      	str	r3, [sp, #0]
 800e274:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e276:	2200      	movs	r2, #0
 800e278:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e27c:	6878      	ldr	r0, [r7, #4]
 800e27e:	f000 f857 	bl	800e330 <UART_WaitOnFlagUntilTimeout>
 800e282:	4603      	mov	r3, r0
 800e284:	2b00      	cmp	r3, #0
 800e286:	d03c      	beq.n	800e302 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e290:	e853 3f00 	ldrex	r3, [r3]
 800e294:	623b      	str	r3, [r7, #32]
   return(result);
 800e296:	6a3b      	ldr	r3, [r7, #32]
 800e298:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e29c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	461a      	mov	r2, r3
 800e2a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e2a6:	633b      	str	r3, [r7, #48]	; 0x30
 800e2a8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e2ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e2ae:	e841 2300 	strex	r3, r2, [r1]
 800e2b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d1e6      	bne.n	800e288 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	3308      	adds	r3, #8
 800e2c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2c2:	693b      	ldr	r3, [r7, #16]
 800e2c4:	e853 3f00 	ldrex	r3, [r3]
 800e2c8:	60fb      	str	r3, [r7, #12]
   return(result);
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	f023 0301 	bic.w	r3, r3, #1
 800e2d0:	64bb      	str	r3, [r7, #72]	; 0x48
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	3308      	adds	r3, #8
 800e2d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e2da:	61fa      	str	r2, [r7, #28]
 800e2dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2de:	69b9      	ldr	r1, [r7, #24]
 800e2e0:	69fa      	ldr	r2, [r7, #28]
 800e2e2:	e841 2300 	strex	r3, r2, [r1]
 800e2e6:	617b      	str	r3, [r7, #20]
   return(result);
 800e2e8:	697b      	ldr	r3, [r7, #20]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d1e5      	bne.n	800e2ba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	2220      	movs	r2, #32
 800e2f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	2200      	movs	r2, #0
 800e2fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e2fe:	2303      	movs	r3, #3
 800e300:	e012      	b.n	800e328 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	2220      	movs	r2, #32
 800e306:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	2220      	movs	r2, #32
 800e30e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	2200      	movs	r2, #0
 800e316:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	2200      	movs	r2, #0
 800e31c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	2200      	movs	r2, #0
 800e322:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e326:	2300      	movs	r3, #0
}
 800e328:	4618      	mov	r0, r3
 800e32a:	3758      	adds	r7, #88	; 0x58
 800e32c:	46bd      	mov	sp, r7
 800e32e:	bd80      	pop	{r7, pc}

0800e330 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e330:	b580      	push	{r7, lr}
 800e332:	b084      	sub	sp, #16
 800e334:	af00      	add	r7, sp, #0
 800e336:	60f8      	str	r0, [r7, #12]
 800e338:	60b9      	str	r1, [r7, #8]
 800e33a:	603b      	str	r3, [r7, #0]
 800e33c:	4613      	mov	r3, r2
 800e33e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e340:	e049      	b.n	800e3d6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e342:	69bb      	ldr	r3, [r7, #24]
 800e344:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e348:	d045      	beq.n	800e3d6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e34a:	f7f5 fac5 	bl	80038d8 <HAL_GetTick>
 800e34e:	4602      	mov	r2, r0
 800e350:	683b      	ldr	r3, [r7, #0]
 800e352:	1ad3      	subs	r3, r2, r3
 800e354:	69ba      	ldr	r2, [r7, #24]
 800e356:	429a      	cmp	r2, r3
 800e358:	d302      	bcc.n	800e360 <UART_WaitOnFlagUntilTimeout+0x30>
 800e35a:	69bb      	ldr	r3, [r7, #24]
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d101      	bne.n	800e364 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e360:	2303      	movs	r3, #3
 800e362:	e048      	b.n	800e3f6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	f003 0304 	and.w	r3, r3, #4
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d031      	beq.n	800e3d6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	69db      	ldr	r3, [r3, #28]
 800e378:	f003 0308 	and.w	r3, r3, #8
 800e37c:	2b08      	cmp	r3, #8
 800e37e:	d110      	bne.n	800e3a2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	2208      	movs	r2, #8
 800e386:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800e388:	68f8      	ldr	r0, [r7, #12]
 800e38a:	f000 f839 	bl	800e400 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	2208      	movs	r2, #8
 800e392:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	2200      	movs	r2, #0
 800e39a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800e39e:	2301      	movs	r3, #1
 800e3a0:	e029      	b.n	800e3f6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	69db      	ldr	r3, [r3, #28]
 800e3a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e3ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e3b0:	d111      	bne.n	800e3d6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e3ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e3bc:	68f8      	ldr	r0, [r7, #12]
 800e3be:	f000 f81f 	bl	800e400 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	2220      	movs	r2, #32
 800e3c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	2200      	movs	r2, #0
 800e3ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800e3d2:	2303      	movs	r3, #3
 800e3d4:	e00f      	b.n	800e3f6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	69da      	ldr	r2, [r3, #28]
 800e3dc:	68bb      	ldr	r3, [r7, #8]
 800e3de:	4013      	ands	r3, r2
 800e3e0:	68ba      	ldr	r2, [r7, #8]
 800e3e2:	429a      	cmp	r2, r3
 800e3e4:	bf0c      	ite	eq
 800e3e6:	2301      	moveq	r3, #1
 800e3e8:	2300      	movne	r3, #0
 800e3ea:	b2db      	uxtb	r3, r3
 800e3ec:	461a      	mov	r2, r3
 800e3ee:	79fb      	ldrb	r3, [r7, #7]
 800e3f0:	429a      	cmp	r2, r3
 800e3f2:	d0a6      	beq.n	800e342 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e3f4:	2300      	movs	r3, #0
}
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	3710      	adds	r7, #16
 800e3fa:	46bd      	mov	sp, r7
 800e3fc:	bd80      	pop	{r7, pc}
	...

0800e400 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e400:	b480      	push	{r7}
 800e402:	b095      	sub	sp, #84	; 0x54
 800e404:	af00      	add	r7, sp, #0
 800e406:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e40e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e410:	e853 3f00 	ldrex	r3, [r3]
 800e414:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e418:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e41c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	461a      	mov	r2, r3
 800e424:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e426:	643b      	str	r3, [r7, #64]	; 0x40
 800e428:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e42a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e42c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e42e:	e841 2300 	strex	r3, r2, [r1]
 800e432:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e436:	2b00      	cmp	r3, #0
 800e438:	d1e6      	bne.n	800e408 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	3308      	adds	r3, #8
 800e440:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e442:	6a3b      	ldr	r3, [r7, #32]
 800e444:	e853 3f00 	ldrex	r3, [r3]
 800e448:	61fb      	str	r3, [r7, #28]
   return(result);
 800e44a:	69fa      	ldr	r2, [r7, #28]
 800e44c:	4b1e      	ldr	r3, [pc, #120]	; (800e4c8 <UART_EndRxTransfer+0xc8>)
 800e44e:	4013      	ands	r3, r2
 800e450:	64bb      	str	r3, [r7, #72]	; 0x48
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	3308      	adds	r3, #8
 800e458:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e45a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e45c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e45e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e460:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e462:	e841 2300 	strex	r3, r2, [r1]
 800e466:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d1e5      	bne.n	800e43a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e472:	2b01      	cmp	r3, #1
 800e474:	d118      	bne.n	800e4a8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	e853 3f00 	ldrex	r3, [r3]
 800e482:	60bb      	str	r3, [r7, #8]
   return(result);
 800e484:	68bb      	ldr	r3, [r7, #8]
 800e486:	f023 0310 	bic.w	r3, r3, #16
 800e48a:	647b      	str	r3, [r7, #68]	; 0x44
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	461a      	mov	r2, r3
 800e492:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e494:	61bb      	str	r3, [r7, #24]
 800e496:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e498:	6979      	ldr	r1, [r7, #20]
 800e49a:	69ba      	ldr	r2, [r7, #24]
 800e49c:	e841 2300 	strex	r3, r2, [r1]
 800e4a0:	613b      	str	r3, [r7, #16]
   return(result);
 800e4a2:	693b      	ldr	r3, [r7, #16]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d1e6      	bne.n	800e476 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	2220      	movs	r2, #32
 800e4ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	2200      	movs	r2, #0
 800e4b4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	2200      	movs	r2, #0
 800e4ba:	675a      	str	r2, [r3, #116]	; 0x74
}
 800e4bc:	bf00      	nop
 800e4be:	3754      	adds	r7, #84	; 0x54
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c6:	4770      	bx	lr
 800e4c8:	effffffe 	.word	0xeffffffe

0800e4cc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e4cc:	b480      	push	{r7}
 800e4ce:	b085      	sub	sp, #20
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e4da:	2b01      	cmp	r3, #1
 800e4dc:	d101      	bne.n	800e4e2 <HAL_UARTEx_DisableFifoMode+0x16>
 800e4de:	2302      	movs	r3, #2
 800e4e0:	e027      	b.n	800e532 <HAL_UARTEx_DisableFifoMode+0x66>
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	2201      	movs	r2, #1
 800e4e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	2224      	movs	r2, #36	; 0x24
 800e4ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	681a      	ldr	r2, [r3, #0]
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	f022 0201 	bic.w	r2, r2, #1
 800e508:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e510:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	2200      	movs	r2, #0
 800e516:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	68fa      	ldr	r2, [r7, #12]
 800e51e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	2220      	movs	r2, #32
 800e524:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	2200      	movs	r2, #0
 800e52c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e530:	2300      	movs	r3, #0
}
 800e532:	4618      	mov	r0, r3
 800e534:	3714      	adds	r7, #20
 800e536:	46bd      	mov	sp, r7
 800e538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e53c:	4770      	bx	lr

0800e53e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e53e:	b580      	push	{r7, lr}
 800e540:	b084      	sub	sp, #16
 800e542:	af00      	add	r7, sp, #0
 800e544:	6078      	str	r0, [r7, #4]
 800e546:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e54e:	2b01      	cmp	r3, #1
 800e550:	d101      	bne.n	800e556 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e552:	2302      	movs	r3, #2
 800e554:	e02d      	b.n	800e5b2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	2201      	movs	r2, #1
 800e55a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	2224      	movs	r2, #36	; 0x24
 800e562:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	681a      	ldr	r2, [r3, #0]
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	f022 0201 	bic.w	r2, r2, #1
 800e57c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	689b      	ldr	r3, [r3, #8]
 800e584:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	683a      	ldr	r2, [r7, #0]
 800e58e:	430a      	orrs	r2, r1
 800e590:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e592:	6878      	ldr	r0, [r7, #4]
 800e594:	f000 f850 	bl	800e638 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	68fa      	ldr	r2, [r7, #12]
 800e59e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	2220      	movs	r2, #32
 800e5a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	2200      	movs	r2, #0
 800e5ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e5b0:	2300      	movs	r3, #0
}
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	3710      	adds	r7, #16
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	bd80      	pop	{r7, pc}

0800e5ba <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e5ba:	b580      	push	{r7, lr}
 800e5bc:	b084      	sub	sp, #16
 800e5be:	af00      	add	r7, sp, #0
 800e5c0:	6078      	str	r0, [r7, #4]
 800e5c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e5ca:	2b01      	cmp	r3, #1
 800e5cc:	d101      	bne.n	800e5d2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e5ce:	2302      	movs	r3, #2
 800e5d0:	e02d      	b.n	800e62e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	2201      	movs	r2, #1
 800e5d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	2224      	movs	r2, #36	; 0x24
 800e5de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	681a      	ldr	r2, [r3, #0]
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	f022 0201 	bic.w	r2, r2, #1
 800e5f8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	689b      	ldr	r3, [r3, #8]
 800e600:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	683a      	ldr	r2, [r7, #0]
 800e60a:	430a      	orrs	r2, r1
 800e60c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e60e:	6878      	ldr	r0, [r7, #4]
 800e610:	f000 f812 	bl	800e638 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	68fa      	ldr	r2, [r7, #12]
 800e61a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	2220      	movs	r2, #32
 800e620:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	2200      	movs	r2, #0
 800e628:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e62c:	2300      	movs	r3, #0
}
 800e62e:	4618      	mov	r0, r3
 800e630:	3710      	adds	r7, #16
 800e632:	46bd      	mov	sp, r7
 800e634:	bd80      	pop	{r7, pc}
	...

0800e638 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e638:	b480      	push	{r7}
 800e63a:	b085      	sub	sp, #20
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e644:	2b00      	cmp	r3, #0
 800e646:	d108      	bne.n	800e65a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	2201      	movs	r2, #1
 800e64c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	2201      	movs	r2, #1
 800e654:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e658:	e031      	b.n	800e6be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e65a:	2310      	movs	r3, #16
 800e65c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e65e:	2310      	movs	r3, #16
 800e660:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	689b      	ldr	r3, [r3, #8]
 800e668:	0e5b      	lsrs	r3, r3, #25
 800e66a:	b2db      	uxtb	r3, r3
 800e66c:	f003 0307 	and.w	r3, r3, #7
 800e670:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	689b      	ldr	r3, [r3, #8]
 800e678:	0f5b      	lsrs	r3, r3, #29
 800e67a:	b2db      	uxtb	r3, r3
 800e67c:	f003 0307 	and.w	r3, r3, #7
 800e680:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e682:	7bbb      	ldrb	r3, [r7, #14]
 800e684:	7b3a      	ldrb	r2, [r7, #12]
 800e686:	4911      	ldr	r1, [pc, #68]	; (800e6cc <UARTEx_SetNbDataToProcess+0x94>)
 800e688:	5c8a      	ldrb	r2, [r1, r2]
 800e68a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e68e:	7b3a      	ldrb	r2, [r7, #12]
 800e690:	490f      	ldr	r1, [pc, #60]	; (800e6d0 <UARTEx_SetNbDataToProcess+0x98>)
 800e692:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e694:	fb93 f3f2 	sdiv	r3, r3, r2
 800e698:	b29a      	uxth	r2, r3
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e6a0:	7bfb      	ldrb	r3, [r7, #15]
 800e6a2:	7b7a      	ldrb	r2, [r7, #13]
 800e6a4:	4909      	ldr	r1, [pc, #36]	; (800e6cc <UARTEx_SetNbDataToProcess+0x94>)
 800e6a6:	5c8a      	ldrb	r2, [r1, r2]
 800e6a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e6ac:	7b7a      	ldrb	r2, [r7, #13]
 800e6ae:	4908      	ldr	r1, [pc, #32]	; (800e6d0 <UARTEx_SetNbDataToProcess+0x98>)
 800e6b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e6b2:	fb93 f3f2 	sdiv	r3, r3, r2
 800e6b6:	b29a      	uxth	r2, r3
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e6be:	bf00      	nop
 800e6c0:	3714      	adds	r7, #20
 800e6c2:	46bd      	mov	sp, r7
 800e6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c8:	4770      	bx	lr
 800e6ca:	bf00      	nop
 800e6cc:	0801e6f8 	.word	0x0801e6f8
 800e6d0:	0801e700 	.word	0x0801e700

0800e6d4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b084      	sub	sp, #16
 800e6d8:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800e6da:	4b8d      	ldr	r3, [pc, #564]	; (800e910 <MX_LWIP_Init+0x23c>)
 800e6dc:	22c0      	movs	r2, #192	; 0xc0
 800e6de:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800e6e0:	4b8b      	ldr	r3, [pc, #556]	; (800e910 <MX_LWIP_Init+0x23c>)
 800e6e2:	22a8      	movs	r2, #168	; 0xa8
 800e6e4:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 800e6e6:	4b8a      	ldr	r3, [pc, #552]	; (800e910 <MX_LWIP_Init+0x23c>)
 800e6e8:	2200      	movs	r2, #0
 800e6ea:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 800e6ec:	4b88      	ldr	r3, [pc, #544]	; (800e910 <MX_LWIP_Init+0x23c>)
 800e6ee:	220a      	movs	r2, #10
 800e6f0:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800e6f2:	4b88      	ldr	r3, [pc, #544]	; (800e914 <MX_LWIP_Init+0x240>)
 800e6f4:	22ff      	movs	r2, #255	; 0xff
 800e6f6:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800e6f8:	4b86      	ldr	r3, [pc, #536]	; (800e914 <MX_LWIP_Init+0x240>)
 800e6fa:	22ff      	movs	r2, #255	; 0xff
 800e6fc:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 0;
 800e6fe:	4b85      	ldr	r3, [pc, #532]	; (800e914 <MX_LWIP_Init+0x240>)
 800e700:	2200      	movs	r2, #0
 800e702:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800e704:	4b83      	ldr	r3, [pc, #524]	; (800e914 <MX_LWIP_Init+0x240>)
 800e706:	2200      	movs	r2, #0
 800e708:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800e70a:	4b83      	ldr	r3, [pc, #524]	; (800e918 <MX_LWIP_Init+0x244>)
 800e70c:	22c0      	movs	r2, #192	; 0xc0
 800e70e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800e710:	4b81      	ldr	r3, [pc, #516]	; (800e918 <MX_LWIP_Init+0x244>)
 800e712:	22a8      	movs	r2, #168	; 0xa8
 800e714:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800e716:	4b80      	ldr	r3, [pc, #512]	; (800e918 <MX_LWIP_Init+0x244>)
 800e718:	2200      	movs	r2, #0
 800e71a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800e71c:	4b7e      	ldr	r3, [pc, #504]	; (800e918 <MX_LWIP_Init+0x244>)
 800e71e:	2201      	movs	r2, #1
 800e720:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800e722:	f000 fd3d 	bl	800f1a0 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800e726:	4b7a      	ldr	r3, [pc, #488]	; (800e910 <MX_LWIP_Init+0x23c>)
 800e728:	781b      	ldrb	r3, [r3, #0]
 800e72a:	061a      	lsls	r2, r3, #24
 800e72c:	4b78      	ldr	r3, [pc, #480]	; (800e910 <MX_LWIP_Init+0x23c>)
 800e72e:	785b      	ldrb	r3, [r3, #1]
 800e730:	041b      	lsls	r3, r3, #16
 800e732:	431a      	orrs	r2, r3
 800e734:	4b76      	ldr	r3, [pc, #472]	; (800e910 <MX_LWIP_Init+0x23c>)
 800e736:	789b      	ldrb	r3, [r3, #2]
 800e738:	021b      	lsls	r3, r3, #8
 800e73a:	4313      	orrs	r3, r2
 800e73c:	4a74      	ldr	r2, [pc, #464]	; (800e910 <MX_LWIP_Init+0x23c>)
 800e73e:	78d2      	ldrb	r2, [r2, #3]
 800e740:	4313      	orrs	r3, r2
 800e742:	061a      	lsls	r2, r3, #24
 800e744:	4b72      	ldr	r3, [pc, #456]	; (800e910 <MX_LWIP_Init+0x23c>)
 800e746:	781b      	ldrb	r3, [r3, #0]
 800e748:	0619      	lsls	r1, r3, #24
 800e74a:	4b71      	ldr	r3, [pc, #452]	; (800e910 <MX_LWIP_Init+0x23c>)
 800e74c:	785b      	ldrb	r3, [r3, #1]
 800e74e:	041b      	lsls	r3, r3, #16
 800e750:	4319      	orrs	r1, r3
 800e752:	4b6f      	ldr	r3, [pc, #444]	; (800e910 <MX_LWIP_Init+0x23c>)
 800e754:	789b      	ldrb	r3, [r3, #2]
 800e756:	021b      	lsls	r3, r3, #8
 800e758:	430b      	orrs	r3, r1
 800e75a:	496d      	ldr	r1, [pc, #436]	; (800e910 <MX_LWIP_Init+0x23c>)
 800e75c:	78c9      	ldrb	r1, [r1, #3]
 800e75e:	430b      	orrs	r3, r1
 800e760:	021b      	lsls	r3, r3, #8
 800e762:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e766:	431a      	orrs	r2, r3
 800e768:	4b69      	ldr	r3, [pc, #420]	; (800e910 <MX_LWIP_Init+0x23c>)
 800e76a:	781b      	ldrb	r3, [r3, #0]
 800e76c:	0619      	lsls	r1, r3, #24
 800e76e:	4b68      	ldr	r3, [pc, #416]	; (800e910 <MX_LWIP_Init+0x23c>)
 800e770:	785b      	ldrb	r3, [r3, #1]
 800e772:	041b      	lsls	r3, r3, #16
 800e774:	4319      	orrs	r1, r3
 800e776:	4b66      	ldr	r3, [pc, #408]	; (800e910 <MX_LWIP_Init+0x23c>)
 800e778:	789b      	ldrb	r3, [r3, #2]
 800e77a:	021b      	lsls	r3, r3, #8
 800e77c:	430b      	orrs	r3, r1
 800e77e:	4964      	ldr	r1, [pc, #400]	; (800e910 <MX_LWIP_Init+0x23c>)
 800e780:	78c9      	ldrb	r1, [r1, #3]
 800e782:	430b      	orrs	r3, r1
 800e784:	0a1b      	lsrs	r3, r3, #8
 800e786:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e78a:	431a      	orrs	r2, r3
 800e78c:	4b60      	ldr	r3, [pc, #384]	; (800e910 <MX_LWIP_Init+0x23c>)
 800e78e:	781b      	ldrb	r3, [r3, #0]
 800e790:	0619      	lsls	r1, r3, #24
 800e792:	4b5f      	ldr	r3, [pc, #380]	; (800e910 <MX_LWIP_Init+0x23c>)
 800e794:	785b      	ldrb	r3, [r3, #1]
 800e796:	041b      	lsls	r3, r3, #16
 800e798:	4319      	orrs	r1, r3
 800e79a:	4b5d      	ldr	r3, [pc, #372]	; (800e910 <MX_LWIP_Init+0x23c>)
 800e79c:	789b      	ldrb	r3, [r3, #2]
 800e79e:	021b      	lsls	r3, r3, #8
 800e7a0:	430b      	orrs	r3, r1
 800e7a2:	495b      	ldr	r1, [pc, #364]	; (800e910 <MX_LWIP_Init+0x23c>)
 800e7a4:	78c9      	ldrb	r1, [r1, #3]
 800e7a6:	430b      	orrs	r3, r1
 800e7a8:	0e1b      	lsrs	r3, r3, #24
 800e7aa:	4313      	orrs	r3, r2
 800e7ac:	4a5b      	ldr	r2, [pc, #364]	; (800e91c <MX_LWIP_Init+0x248>)
 800e7ae:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800e7b0:	4b58      	ldr	r3, [pc, #352]	; (800e914 <MX_LWIP_Init+0x240>)
 800e7b2:	781b      	ldrb	r3, [r3, #0]
 800e7b4:	061a      	lsls	r2, r3, #24
 800e7b6:	4b57      	ldr	r3, [pc, #348]	; (800e914 <MX_LWIP_Init+0x240>)
 800e7b8:	785b      	ldrb	r3, [r3, #1]
 800e7ba:	041b      	lsls	r3, r3, #16
 800e7bc:	431a      	orrs	r2, r3
 800e7be:	4b55      	ldr	r3, [pc, #340]	; (800e914 <MX_LWIP_Init+0x240>)
 800e7c0:	789b      	ldrb	r3, [r3, #2]
 800e7c2:	021b      	lsls	r3, r3, #8
 800e7c4:	4313      	orrs	r3, r2
 800e7c6:	4a53      	ldr	r2, [pc, #332]	; (800e914 <MX_LWIP_Init+0x240>)
 800e7c8:	78d2      	ldrb	r2, [r2, #3]
 800e7ca:	4313      	orrs	r3, r2
 800e7cc:	061a      	lsls	r2, r3, #24
 800e7ce:	4b51      	ldr	r3, [pc, #324]	; (800e914 <MX_LWIP_Init+0x240>)
 800e7d0:	781b      	ldrb	r3, [r3, #0]
 800e7d2:	0619      	lsls	r1, r3, #24
 800e7d4:	4b4f      	ldr	r3, [pc, #316]	; (800e914 <MX_LWIP_Init+0x240>)
 800e7d6:	785b      	ldrb	r3, [r3, #1]
 800e7d8:	041b      	lsls	r3, r3, #16
 800e7da:	4319      	orrs	r1, r3
 800e7dc:	4b4d      	ldr	r3, [pc, #308]	; (800e914 <MX_LWIP_Init+0x240>)
 800e7de:	789b      	ldrb	r3, [r3, #2]
 800e7e0:	021b      	lsls	r3, r3, #8
 800e7e2:	430b      	orrs	r3, r1
 800e7e4:	494b      	ldr	r1, [pc, #300]	; (800e914 <MX_LWIP_Init+0x240>)
 800e7e6:	78c9      	ldrb	r1, [r1, #3]
 800e7e8:	430b      	orrs	r3, r1
 800e7ea:	021b      	lsls	r3, r3, #8
 800e7ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e7f0:	431a      	orrs	r2, r3
 800e7f2:	4b48      	ldr	r3, [pc, #288]	; (800e914 <MX_LWIP_Init+0x240>)
 800e7f4:	781b      	ldrb	r3, [r3, #0]
 800e7f6:	0619      	lsls	r1, r3, #24
 800e7f8:	4b46      	ldr	r3, [pc, #280]	; (800e914 <MX_LWIP_Init+0x240>)
 800e7fa:	785b      	ldrb	r3, [r3, #1]
 800e7fc:	041b      	lsls	r3, r3, #16
 800e7fe:	4319      	orrs	r1, r3
 800e800:	4b44      	ldr	r3, [pc, #272]	; (800e914 <MX_LWIP_Init+0x240>)
 800e802:	789b      	ldrb	r3, [r3, #2]
 800e804:	021b      	lsls	r3, r3, #8
 800e806:	430b      	orrs	r3, r1
 800e808:	4942      	ldr	r1, [pc, #264]	; (800e914 <MX_LWIP_Init+0x240>)
 800e80a:	78c9      	ldrb	r1, [r1, #3]
 800e80c:	430b      	orrs	r3, r1
 800e80e:	0a1b      	lsrs	r3, r3, #8
 800e810:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e814:	431a      	orrs	r2, r3
 800e816:	4b3f      	ldr	r3, [pc, #252]	; (800e914 <MX_LWIP_Init+0x240>)
 800e818:	781b      	ldrb	r3, [r3, #0]
 800e81a:	0619      	lsls	r1, r3, #24
 800e81c:	4b3d      	ldr	r3, [pc, #244]	; (800e914 <MX_LWIP_Init+0x240>)
 800e81e:	785b      	ldrb	r3, [r3, #1]
 800e820:	041b      	lsls	r3, r3, #16
 800e822:	4319      	orrs	r1, r3
 800e824:	4b3b      	ldr	r3, [pc, #236]	; (800e914 <MX_LWIP_Init+0x240>)
 800e826:	789b      	ldrb	r3, [r3, #2]
 800e828:	021b      	lsls	r3, r3, #8
 800e82a:	430b      	orrs	r3, r1
 800e82c:	4939      	ldr	r1, [pc, #228]	; (800e914 <MX_LWIP_Init+0x240>)
 800e82e:	78c9      	ldrb	r1, [r1, #3]
 800e830:	430b      	orrs	r3, r1
 800e832:	0e1b      	lsrs	r3, r3, #24
 800e834:	4313      	orrs	r3, r2
 800e836:	4a3a      	ldr	r2, [pc, #232]	; (800e920 <MX_LWIP_Init+0x24c>)
 800e838:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800e83a:	4b37      	ldr	r3, [pc, #220]	; (800e918 <MX_LWIP_Init+0x244>)
 800e83c:	781b      	ldrb	r3, [r3, #0]
 800e83e:	061a      	lsls	r2, r3, #24
 800e840:	4b35      	ldr	r3, [pc, #212]	; (800e918 <MX_LWIP_Init+0x244>)
 800e842:	785b      	ldrb	r3, [r3, #1]
 800e844:	041b      	lsls	r3, r3, #16
 800e846:	431a      	orrs	r2, r3
 800e848:	4b33      	ldr	r3, [pc, #204]	; (800e918 <MX_LWIP_Init+0x244>)
 800e84a:	789b      	ldrb	r3, [r3, #2]
 800e84c:	021b      	lsls	r3, r3, #8
 800e84e:	4313      	orrs	r3, r2
 800e850:	4a31      	ldr	r2, [pc, #196]	; (800e918 <MX_LWIP_Init+0x244>)
 800e852:	78d2      	ldrb	r2, [r2, #3]
 800e854:	4313      	orrs	r3, r2
 800e856:	061a      	lsls	r2, r3, #24
 800e858:	4b2f      	ldr	r3, [pc, #188]	; (800e918 <MX_LWIP_Init+0x244>)
 800e85a:	781b      	ldrb	r3, [r3, #0]
 800e85c:	0619      	lsls	r1, r3, #24
 800e85e:	4b2e      	ldr	r3, [pc, #184]	; (800e918 <MX_LWIP_Init+0x244>)
 800e860:	785b      	ldrb	r3, [r3, #1]
 800e862:	041b      	lsls	r3, r3, #16
 800e864:	4319      	orrs	r1, r3
 800e866:	4b2c      	ldr	r3, [pc, #176]	; (800e918 <MX_LWIP_Init+0x244>)
 800e868:	789b      	ldrb	r3, [r3, #2]
 800e86a:	021b      	lsls	r3, r3, #8
 800e86c:	430b      	orrs	r3, r1
 800e86e:	492a      	ldr	r1, [pc, #168]	; (800e918 <MX_LWIP_Init+0x244>)
 800e870:	78c9      	ldrb	r1, [r1, #3]
 800e872:	430b      	orrs	r3, r1
 800e874:	021b      	lsls	r3, r3, #8
 800e876:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e87a:	431a      	orrs	r2, r3
 800e87c:	4b26      	ldr	r3, [pc, #152]	; (800e918 <MX_LWIP_Init+0x244>)
 800e87e:	781b      	ldrb	r3, [r3, #0]
 800e880:	0619      	lsls	r1, r3, #24
 800e882:	4b25      	ldr	r3, [pc, #148]	; (800e918 <MX_LWIP_Init+0x244>)
 800e884:	785b      	ldrb	r3, [r3, #1]
 800e886:	041b      	lsls	r3, r3, #16
 800e888:	4319      	orrs	r1, r3
 800e88a:	4b23      	ldr	r3, [pc, #140]	; (800e918 <MX_LWIP_Init+0x244>)
 800e88c:	789b      	ldrb	r3, [r3, #2]
 800e88e:	021b      	lsls	r3, r3, #8
 800e890:	430b      	orrs	r3, r1
 800e892:	4921      	ldr	r1, [pc, #132]	; (800e918 <MX_LWIP_Init+0x244>)
 800e894:	78c9      	ldrb	r1, [r1, #3]
 800e896:	430b      	orrs	r3, r1
 800e898:	0a1b      	lsrs	r3, r3, #8
 800e89a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e89e:	431a      	orrs	r2, r3
 800e8a0:	4b1d      	ldr	r3, [pc, #116]	; (800e918 <MX_LWIP_Init+0x244>)
 800e8a2:	781b      	ldrb	r3, [r3, #0]
 800e8a4:	0619      	lsls	r1, r3, #24
 800e8a6:	4b1c      	ldr	r3, [pc, #112]	; (800e918 <MX_LWIP_Init+0x244>)
 800e8a8:	785b      	ldrb	r3, [r3, #1]
 800e8aa:	041b      	lsls	r3, r3, #16
 800e8ac:	4319      	orrs	r1, r3
 800e8ae:	4b1a      	ldr	r3, [pc, #104]	; (800e918 <MX_LWIP_Init+0x244>)
 800e8b0:	789b      	ldrb	r3, [r3, #2]
 800e8b2:	021b      	lsls	r3, r3, #8
 800e8b4:	430b      	orrs	r3, r1
 800e8b6:	4918      	ldr	r1, [pc, #96]	; (800e918 <MX_LWIP_Init+0x244>)
 800e8b8:	78c9      	ldrb	r1, [r1, #3]
 800e8ba:	430b      	orrs	r3, r1
 800e8bc:	0e1b      	lsrs	r3, r3, #24
 800e8be:	4313      	orrs	r3, r2
 800e8c0:	4a18      	ldr	r2, [pc, #96]	; (800e924 <MX_LWIP_Init+0x250>)
 800e8c2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800e8c4:	4b18      	ldr	r3, [pc, #96]	; (800e928 <MX_LWIP_Init+0x254>)
 800e8c6:	9302      	str	r3, [sp, #8]
 800e8c8:	4b18      	ldr	r3, [pc, #96]	; (800e92c <MX_LWIP_Init+0x258>)
 800e8ca:	9301      	str	r3, [sp, #4]
 800e8cc:	2300      	movs	r3, #0
 800e8ce:	9300      	str	r3, [sp, #0]
 800e8d0:	4b14      	ldr	r3, [pc, #80]	; (800e924 <MX_LWIP_Init+0x250>)
 800e8d2:	4a13      	ldr	r2, [pc, #76]	; (800e920 <MX_LWIP_Init+0x24c>)
 800e8d4:	4911      	ldr	r1, [pc, #68]	; (800e91c <MX_LWIP_Init+0x248>)
 800e8d6:	4816      	ldr	r0, [pc, #88]	; (800e930 <MX_LWIP_Init+0x25c>)
 800e8d8:	f001 f94a 	bl	800fb70 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800e8dc:	4814      	ldr	r0, [pc, #80]	; (800e930 <MX_LWIP_Init+0x25c>)
 800e8de:	f001 faf9 	bl	800fed4 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800e8e2:	4b13      	ldr	r3, [pc, #76]	; (800e930 <MX_LWIP_Init+0x25c>)
 800e8e4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e8e8:	089b      	lsrs	r3, r3, #2
 800e8ea:	f003 0301 	and.w	r3, r3, #1
 800e8ee:	b2db      	uxtb	r3, r3
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d003      	beq.n	800e8fc <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800e8f4:	480e      	ldr	r0, [pc, #56]	; (800e930 <MX_LWIP_Init+0x25c>)
 800e8f6:	f001 fafd 	bl	800fef4 <netif_set_up>
 800e8fa:	e002      	b.n	800e902 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800e8fc:	480c      	ldr	r0, [pc, #48]	; (800e930 <MX_LWIP_Init+0x25c>)
 800e8fe:	f001 fb65 	bl	800ffcc <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800e902:	490c      	ldr	r1, [pc, #48]	; (800e934 <MX_LWIP_Init+0x260>)
 800e904:	480a      	ldr	r0, [pc, #40]	; (800e930 <MX_LWIP_Init+0x25c>)
 800e906:	f001 fbf7 	bl	80100f8 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800e90a:	bf00      	nop
 800e90c:	46bd      	mov	sp, r7
 800e90e:	bd80      	pop	{r7, pc}
 800e910:	2000070c 	.word	0x2000070c
 800e914:	20000710 	.word	0x20000710
 800e918:	20000714 	.word	0x20000714
 800e91c:	20000700 	.word	0x20000700
 800e920:	20000704 	.word	0x20000704
 800e924:	20000708 	.word	0x20000708
 800e928:	0801893d 	.word	0x0801893d
 800e92c:	0800eb7d 	.word	0x0800eb7d
 800e930:	200006cc 	.word	0x200006cc
 800e934:	0800e939 	.word	0x0800e939

0800e938 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800e938:	b480      	push	{r7}
 800e93a:	b083      	sub	sp, #12
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800e940:	bf00      	nop
 800e942:	370c      	adds	r7, #12
 800e944:	46bd      	mov	sp, r7
 800e946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e94a:	4770      	bx	lr

0800e94c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800e94c:	b580      	push	{r7, lr}
 800e94e:	b084      	sub	sp, #16
 800e950:	af00      	add	r7, sp, #0
 800e952:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800e954:	2300      	movs	r3, #0
 800e956:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800e958:	4b3f      	ldr	r3, [pc, #252]	; (800ea58 <low_level_init+0x10c>)
 800e95a:	4a40      	ldr	r2, [pc, #256]	; (800ea5c <low_level_init+0x110>)
 800e95c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800e95e:	2300      	movs	r3, #0
 800e960:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800e962:	2380      	movs	r3, #128	; 0x80
 800e964:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800e966:	23e1      	movs	r3, #225	; 0xe1
 800e968:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800e96a:	2300      	movs	r3, #0
 800e96c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800e96e:	2300      	movs	r3, #0
 800e970:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800e972:	2300      	movs	r3, #0
 800e974:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800e976:	4a38      	ldr	r2, [pc, #224]	; (800ea58 <low_level_init+0x10c>)
 800e978:	f107 0308 	add.w	r3, r7, #8
 800e97c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800e97e:	4b36      	ldr	r3, [pc, #216]	; (800ea58 <low_level_init+0x10c>)
 800e980:	2201      	movs	r2, #1
 800e982:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800e984:	4b34      	ldr	r3, [pc, #208]	; (800ea58 <low_level_init+0x10c>)
 800e986:	4a36      	ldr	r2, [pc, #216]	; (800ea60 <low_level_init+0x114>)
 800e988:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800e98a:	4b33      	ldr	r3, [pc, #204]	; (800ea58 <low_level_init+0x10c>)
 800e98c:	4a35      	ldr	r2, [pc, #212]	; (800ea64 <low_level_init+0x118>)
 800e98e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800e990:	4b31      	ldr	r3, [pc, #196]	; (800ea58 <low_level_init+0x10c>)
 800e992:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800e996:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800e998:	482f      	ldr	r0, [pc, #188]	; (800ea58 <low_level_init+0x10c>)
 800e99a:	f7f7 f84f 	bl	8005a3c <HAL_ETH_Init>
 800e99e:	4603      	mov	r3, r0
 800e9a0:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800e9a2:	2238      	movs	r2, #56	; 0x38
 800e9a4:	2100      	movs	r1, #0
 800e9a6:	4830      	ldr	r0, [pc, #192]	; (800ea68 <low_level_init+0x11c>)
 800e9a8:	f00a ff1e 	bl	80197e8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800e9ac:	4b2e      	ldr	r3, [pc, #184]	; (800ea68 <low_level_init+0x11c>)
 800e9ae:	2221      	movs	r2, #33	; 0x21
 800e9b0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800e9b2:	4b2d      	ldr	r3, [pc, #180]	; (800ea68 <low_level_init+0x11c>)
 800e9b4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800e9b8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800e9ba:	4b2b      	ldr	r3, [pc, #172]	; (800ea68 <low_level_init+0x11c>)
 800e9bc:	2200      	movs	r2, #0
 800e9be:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800e9c0:	482a      	ldr	r0, [pc, #168]	; (800ea6c <low_level_init+0x120>)
 800e9c2:	f000 ff9d 	bl	800f900 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	2206      	movs	r2, #6
 800e9ca:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800e9ce:	4b22      	ldr	r3, [pc, #136]	; (800ea58 <low_level_init+0x10c>)
 800e9d0:	685b      	ldr	r3, [r3, #4]
 800e9d2:	781a      	ldrb	r2, [r3, #0]
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800e9da:	4b1f      	ldr	r3, [pc, #124]	; (800ea58 <low_level_init+0x10c>)
 800e9dc:	685b      	ldr	r3, [r3, #4]
 800e9de:	785a      	ldrb	r2, [r3, #1]
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800e9e6:	4b1c      	ldr	r3, [pc, #112]	; (800ea58 <low_level_init+0x10c>)
 800e9e8:	685b      	ldr	r3, [r3, #4]
 800e9ea:	789a      	ldrb	r2, [r3, #2]
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800e9f2:	4b19      	ldr	r3, [pc, #100]	; (800ea58 <low_level_init+0x10c>)
 800e9f4:	685b      	ldr	r3, [r3, #4]
 800e9f6:	78da      	ldrb	r2, [r3, #3]
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800e9fe:	4b16      	ldr	r3, [pc, #88]	; (800ea58 <low_level_init+0x10c>)
 800ea00:	685b      	ldr	r3, [r3, #4]
 800ea02:	791a      	ldrb	r2, [r3, #4]
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800ea0a:	4b13      	ldr	r3, [pc, #76]	; (800ea58 <low_level_init+0x10c>)
 800ea0c:	685b      	ldr	r3, [r3, #4]
 800ea0e:	795a      	ldrb	r2, [r3, #5]
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800ea1c:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ea24:	f043 030a 	orr.w	r3, r3, #10
 800ea28:	b2da      	uxtb	r2, r3
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800ea30:	490f      	ldr	r1, [pc, #60]	; (800ea70 <low_level_init+0x124>)
 800ea32:	4810      	ldr	r0, [pc, #64]	; (800ea74 <low_level_init+0x128>)
 800ea34:	f7f4 fd69 	bl	800350a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800ea38:	480e      	ldr	r0, [pc, #56]	; (800ea74 <low_level_init+0x128>)
 800ea3a:	f7f4 fd98 	bl	800356e <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800ea3e:	7bfb      	ldrb	r3, [r7, #15]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d103      	bne.n	800ea4c <low_level_init+0x100>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800ea44:	6878      	ldr	r0, [r7, #4]
 800ea46:	f000 fa05 	bl	800ee54 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800ea4a:	e001      	b.n	800ea50 <low_level_init+0x104>
    Error_Handler();
 800ea4c:	f7f4 f82c 	bl	8002aa8 <Error_Handler>
}
 800ea50:	bf00      	nop
 800ea52:	3710      	adds	r7, #16
 800ea54:	46bd      	mov	sp, r7
 800ea56:	bd80      	pop	{r7, pc}
 800ea58:	200050a4 	.word	0x200050a4
 800ea5c:	40028000 	.word	0x40028000
 800ea60:	2000028c 	.word	0x2000028c
 800ea64:	2000022c 	.word	0x2000022c
 800ea68:	20005154 	.word	0x20005154
 800ea6c:	0801e708 	.word	0x0801e708
 800ea70:	20000044 	.word	0x20000044
 800ea74:	2000518c 	.word	0x2000518c

0800ea78 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800ea78:	b580      	push	{r7, lr}
 800ea7a:	b092      	sub	sp, #72	; 0x48
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	6078      	str	r0, [r7, #4]
 800ea80:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800ea82:	2300      	movs	r3, #0
 800ea84:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800ea86:	2300      	movs	r3, #0
 800ea88:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800ea90:	f107 030c 	add.w	r3, r7, #12
 800ea94:	2230      	movs	r2, #48	; 0x30
 800ea96:	2100      	movs	r1, #0
 800ea98:	4618      	mov	r0, r3
 800ea9a:	f00a fea5 	bl	80197e8 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800ea9e:	f107 030c 	add.w	r3, r7, #12
 800eaa2:	2230      	movs	r2, #48	; 0x30
 800eaa4:	2100      	movs	r1, #0
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	f00a fe9e 	bl	80197e8 <memset>

  for(q = p; q != NULL; q = q->next)
 800eaac:	683b      	ldr	r3, [r7, #0]
 800eaae:	643b      	str	r3, [r7, #64]	; 0x40
 800eab0:	e045      	b.n	800eb3e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800eab2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eab4:	2b03      	cmp	r3, #3
 800eab6:	d902      	bls.n	800eabe <low_level_output+0x46>
      return ERR_IF;
 800eab8:	f06f 030b 	mvn.w	r3, #11
 800eabc:	e055      	b.n	800eb6a <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800eabe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eac0:	6859      	ldr	r1, [r3, #4]
 800eac2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eac4:	4613      	mov	r3, r2
 800eac6:	005b      	lsls	r3, r3, #1
 800eac8:	4413      	add	r3, r2
 800eaca:	009b      	lsls	r3, r3, #2
 800eacc:	3348      	adds	r3, #72	; 0x48
 800eace:	443b      	add	r3, r7
 800ead0:	3b3c      	subs	r3, #60	; 0x3c
 800ead2:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800ead4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ead6:	895b      	ldrh	r3, [r3, #10]
 800ead8:	4619      	mov	r1, r3
 800eada:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eadc:	4613      	mov	r3, r2
 800eade:	005b      	lsls	r3, r3, #1
 800eae0:	4413      	add	r3, r2
 800eae2:	009b      	lsls	r3, r3, #2
 800eae4:	3348      	adds	r3, #72	; 0x48
 800eae6:	443b      	add	r3, r7
 800eae8:	3b38      	subs	r3, #56	; 0x38
 800eaea:	6019      	str	r1, [r3, #0]

    if(i>0)
 800eaec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d011      	beq.n	800eb16 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800eaf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eaf4:	1e5a      	subs	r2, r3, #1
 800eaf6:	f107 000c 	add.w	r0, r7, #12
 800eafa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eafc:	460b      	mov	r3, r1
 800eafe:	005b      	lsls	r3, r3, #1
 800eb00:	440b      	add	r3, r1
 800eb02:	009b      	lsls	r3, r3, #2
 800eb04:	18c1      	adds	r1, r0, r3
 800eb06:	4613      	mov	r3, r2
 800eb08:	005b      	lsls	r3, r3, #1
 800eb0a:	4413      	add	r3, r2
 800eb0c:	009b      	lsls	r3, r3, #2
 800eb0e:	3348      	adds	r3, #72	; 0x48
 800eb10:	443b      	add	r3, r7
 800eb12:	3b34      	subs	r3, #52	; 0x34
 800eb14:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800eb16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d109      	bne.n	800eb32 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800eb1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eb20:	4613      	mov	r3, r2
 800eb22:	005b      	lsls	r3, r3, #1
 800eb24:	4413      	add	r3, r2
 800eb26:	009b      	lsls	r3, r3, #2
 800eb28:	3348      	adds	r3, #72	; 0x48
 800eb2a:	443b      	add	r3, r7
 800eb2c:	3b34      	subs	r3, #52	; 0x34
 800eb2e:	2200      	movs	r2, #0
 800eb30:	601a      	str	r2, [r3, #0]
    }

    i++;
 800eb32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb34:	3301      	adds	r3, #1
 800eb36:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800eb38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	643b      	str	r3, [r7, #64]	; 0x40
 800eb3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d1b6      	bne.n	800eab2 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800eb44:	683b      	ldr	r3, [r7, #0]
 800eb46:	891b      	ldrh	r3, [r3, #8]
 800eb48:	461a      	mov	r2, r3
 800eb4a:	4b0a      	ldr	r3, [pc, #40]	; (800eb74 <low_level_output+0xfc>)
 800eb4c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800eb4e:	4a09      	ldr	r2, [pc, #36]	; (800eb74 <low_level_output+0xfc>)
 800eb50:	f107 030c 	add.w	r3, r7, #12
 800eb54:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800eb56:	4a07      	ldr	r2, [pc, #28]	; (800eb74 <low_level_output+0xfc>)
 800eb58:	683b      	ldr	r3, [r7, #0]
 800eb5a:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800eb5c:	2214      	movs	r2, #20
 800eb5e:	4905      	ldr	r1, [pc, #20]	; (800eb74 <low_level_output+0xfc>)
 800eb60:	4805      	ldr	r0, [pc, #20]	; (800eb78 <low_level_output+0x100>)
 800eb62:	f7f7 f903 	bl	8005d6c <HAL_ETH_Transmit>

  return errval;
 800eb66:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800eb6a:	4618      	mov	r0, r3
 800eb6c:	3748      	adds	r7, #72	; 0x48
 800eb6e:	46bd      	mov	sp, r7
 800eb70:	bd80      	pop	{r7, pc}
 800eb72:	bf00      	nop
 800eb74:	20005154 	.word	0x20005154
 800eb78:	200050a4 	.word	0x200050a4

0800eb7c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	b082      	sub	sp, #8
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d106      	bne.n	800eb98 <ethernetif_init+0x1c>
 800eb8a:	4b0e      	ldr	r3, [pc, #56]	; (800ebc4 <ethernetif_init+0x48>)
 800eb8c:	f240 127b 	movw	r2, #379	; 0x17b
 800eb90:	490d      	ldr	r1, [pc, #52]	; (800ebc8 <ethernetif_init+0x4c>)
 800eb92:	480e      	ldr	r0, [pc, #56]	; (800ebcc <ethernetif_init+0x50>)
 800eb94:	f00a fcd2 	bl	801953c <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	2273      	movs	r2, #115	; 0x73
 800eb9c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	2274      	movs	r2, #116	; 0x74
 800eba4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	4a09      	ldr	r2, [pc, #36]	; (800ebd0 <ethernetif_init+0x54>)
 800ebac:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	4a08      	ldr	r2, [pc, #32]	; (800ebd4 <ethernetif_init+0x58>)
 800ebb2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800ebb4:	6878      	ldr	r0, [r7, #4]
 800ebb6:	f7ff fec9 	bl	800e94c <low_level_init>

  return ERR_OK;
 800ebba:	2300      	movs	r3, #0
}
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	3708      	adds	r7, #8
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	bd80      	pop	{r7, pc}
 800ebc4:	0801bcd8 	.word	0x0801bcd8
 800ebc8:	0801bcf4 	.word	0x0801bcf4
 800ebcc:	0801bd04 	.word	0x0801bd04
 800ebd0:	08016da9 	.word	0x08016da9
 800ebd4:	0800ea79 	.word	0x0800ea79

0800ebd8 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b084      	sub	sp, #16
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800ebe4:	68f9      	ldr	r1, [r7, #12]
 800ebe6:	4807      	ldr	r0, [pc, #28]	; (800ec04 <pbuf_free_custom+0x2c>)
 800ebe8:	f000 ff6c 	bl	800fac4 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800ebec:	4b06      	ldr	r3, [pc, #24]	; (800ec08 <pbuf_free_custom+0x30>)
 800ebee:	781b      	ldrb	r3, [r3, #0]
 800ebf0:	2b01      	cmp	r3, #1
 800ebf2:	d102      	bne.n	800ebfa <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800ebf4:	4b04      	ldr	r3, [pc, #16]	; (800ec08 <pbuf_free_custom+0x30>)
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	701a      	strb	r2, [r3, #0]
  }
}
 800ebfa:	bf00      	nop
 800ebfc:	3710      	adds	r7, #16
 800ebfe:	46bd      	mov	sp, r7
 800ec00:	bd80      	pop	{r7, pc}
 800ec02:	bf00      	nop
 800ec04:	0801e708 	.word	0x0801e708
 800ec08:	200050a0 	.word	0x200050a0

0800ec0c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800ec10:	f7f4 fe62 	bl	80038d8 <HAL_GetTick>
 800ec14:	4603      	mov	r3, r0
}
 800ec16:	4618      	mov	r0, r3
 800ec18:	bd80      	pop	{r7, pc}
	...

0800ec1c <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	b08e      	sub	sp, #56	; 0x38
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ec24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ec28:	2200      	movs	r2, #0
 800ec2a:	601a      	str	r2, [r3, #0]
 800ec2c:	605a      	str	r2, [r3, #4]
 800ec2e:	609a      	str	r2, [r3, #8]
 800ec30:	60da      	str	r2, [r3, #12]
 800ec32:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	4a59      	ldr	r2, [pc, #356]	; (800eda0 <HAL_ETH_MspInit+0x184>)
 800ec3a:	4293      	cmp	r3, r2
 800ec3c:	f040 80ab 	bne.w	800ed96 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800ec40:	4b58      	ldr	r3, [pc, #352]	; (800eda4 <HAL_ETH_MspInit+0x188>)
 800ec42:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800ec46:	4a57      	ldr	r2, [pc, #348]	; (800eda4 <HAL_ETH_MspInit+0x188>)
 800ec48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ec4c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800ec50:	4b54      	ldr	r3, [pc, #336]	; (800eda4 <HAL_ETH_MspInit+0x188>)
 800ec52:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800ec56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ec5a:	623b      	str	r3, [r7, #32]
 800ec5c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800ec5e:	4b51      	ldr	r3, [pc, #324]	; (800eda4 <HAL_ETH_MspInit+0x188>)
 800ec60:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800ec64:	4a4f      	ldr	r2, [pc, #316]	; (800eda4 <HAL_ETH_MspInit+0x188>)
 800ec66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ec6a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800ec6e:	4b4d      	ldr	r3, [pc, #308]	; (800eda4 <HAL_ETH_MspInit+0x188>)
 800ec70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800ec74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ec78:	61fb      	str	r3, [r7, #28]
 800ec7a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800ec7c:	4b49      	ldr	r3, [pc, #292]	; (800eda4 <HAL_ETH_MspInit+0x188>)
 800ec7e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800ec82:	4a48      	ldr	r2, [pc, #288]	; (800eda4 <HAL_ETH_MspInit+0x188>)
 800ec84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ec88:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800ec8c:	4b45      	ldr	r3, [pc, #276]	; (800eda4 <HAL_ETH_MspInit+0x188>)
 800ec8e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800ec92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ec96:	61bb      	str	r3, [r7, #24]
 800ec98:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ec9a:	4b42      	ldr	r3, [pc, #264]	; (800eda4 <HAL_ETH_MspInit+0x188>)
 800ec9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800eca0:	4a40      	ldr	r2, [pc, #256]	; (800eda4 <HAL_ETH_MspInit+0x188>)
 800eca2:	f043 0304 	orr.w	r3, r3, #4
 800eca6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ecaa:	4b3e      	ldr	r3, [pc, #248]	; (800eda4 <HAL_ETH_MspInit+0x188>)
 800ecac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ecb0:	f003 0304 	and.w	r3, r3, #4
 800ecb4:	617b      	str	r3, [r7, #20]
 800ecb6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ecb8:	4b3a      	ldr	r3, [pc, #232]	; (800eda4 <HAL_ETH_MspInit+0x188>)
 800ecba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ecbe:	4a39      	ldr	r2, [pc, #228]	; (800eda4 <HAL_ETH_MspInit+0x188>)
 800ecc0:	f043 0301 	orr.w	r3, r3, #1
 800ecc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ecc8:	4b36      	ldr	r3, [pc, #216]	; (800eda4 <HAL_ETH_MspInit+0x188>)
 800ecca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ecce:	f003 0301 	and.w	r3, r3, #1
 800ecd2:	613b      	str	r3, [r7, #16]
 800ecd4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ecd6:	4b33      	ldr	r3, [pc, #204]	; (800eda4 <HAL_ETH_MspInit+0x188>)
 800ecd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ecdc:	4a31      	ldr	r2, [pc, #196]	; (800eda4 <HAL_ETH_MspInit+0x188>)
 800ecde:	f043 0302 	orr.w	r3, r3, #2
 800ece2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ece6:	4b2f      	ldr	r3, [pc, #188]	; (800eda4 <HAL_ETH_MspInit+0x188>)
 800ece8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ecec:	f003 0302 	and.w	r3, r3, #2
 800ecf0:	60fb      	str	r3, [r7, #12]
 800ecf2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800ecf4:	4b2b      	ldr	r3, [pc, #172]	; (800eda4 <HAL_ETH_MspInit+0x188>)
 800ecf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ecfa:	4a2a      	ldr	r2, [pc, #168]	; (800eda4 <HAL_ETH_MspInit+0x188>)
 800ecfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ed04:	4b27      	ldr	r3, [pc, #156]	; (800eda4 <HAL_ETH_MspInit+0x188>)
 800ed06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ed0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed0e:	60bb      	str	r3, [r7, #8]
 800ed10:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800ed12:	2332      	movs	r3, #50	; 0x32
 800ed14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ed16:	2302      	movs	r3, #2
 800ed18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ed1e:	2300      	movs	r3, #0
 800ed20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ed22:	230b      	movs	r3, #11
 800ed24:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ed26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ed2a:	4619      	mov	r1, r3
 800ed2c:	481e      	ldr	r0, [pc, #120]	; (800eda8 <HAL_ETH_MspInit+0x18c>)
 800ed2e:	f7f8 f985 	bl	800703c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800ed32:	2386      	movs	r3, #134	; 0x86
 800ed34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ed36:	2302      	movs	r3, #2
 800ed38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ed3e:	2300      	movs	r3, #0
 800ed40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ed42:	230b      	movs	r3, #11
 800ed44:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ed46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ed4a:	4619      	mov	r1, r3
 800ed4c:	4817      	ldr	r0, [pc, #92]	; (800edac <HAL_ETH_MspInit+0x190>)
 800ed4e:	f7f8 f975 	bl	800703c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800ed52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ed56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ed58:	2302      	movs	r3, #2
 800ed5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed5c:	2300      	movs	r3, #0
 800ed5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ed60:	2300      	movs	r3, #0
 800ed62:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ed64:	230b      	movs	r3, #11
 800ed66:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ed68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ed6c:	4619      	mov	r1, r3
 800ed6e:	4810      	ldr	r0, [pc, #64]	; (800edb0 <HAL_ETH_MspInit+0x194>)
 800ed70:	f7f8 f964 	bl	800703c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800ed74:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ed78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ed7a:	2302      	movs	r3, #2
 800ed7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed7e:	2300      	movs	r3, #0
 800ed80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ed82:	2300      	movs	r3, #0
 800ed84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ed86:	230b      	movs	r3, #11
 800ed88:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800ed8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ed8e:	4619      	mov	r1, r3
 800ed90:	4808      	ldr	r0, [pc, #32]	; (800edb4 <HAL_ETH_MspInit+0x198>)
 800ed92:	f7f8 f953 	bl	800703c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800ed96:	bf00      	nop
 800ed98:	3738      	adds	r7, #56	; 0x38
 800ed9a:	46bd      	mov	sp, r7
 800ed9c:	bd80      	pop	{r7, pc}
 800ed9e:	bf00      	nop
 800eda0:	40028000 	.word	0x40028000
 800eda4:	58024400 	.word	0x58024400
 800eda8:	58020800 	.word	0x58020800
 800edac:	58020000 	.word	0x58020000
 800edb0:	58020400 	.word	0x58020400
 800edb4:	58021800 	.word	0x58021800

0800edb8 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800edb8:	b580      	push	{r7, lr}
 800edba:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800edbc:	4802      	ldr	r0, [pc, #8]	; (800edc8 <ETH_PHY_IO_Init+0x10>)
 800edbe:	f7f7 fb71 	bl	80064a4 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800edc2:	2300      	movs	r3, #0
}
 800edc4:	4618      	mov	r0, r3
 800edc6:	bd80      	pop	{r7, pc}
 800edc8:	200050a4 	.word	0x200050a4

0800edcc <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800edcc:	b480      	push	{r7}
 800edce:	af00      	add	r7, sp, #0
  return 0;
 800edd0:	2300      	movs	r3, #0
}
 800edd2:	4618      	mov	r0, r3
 800edd4:	46bd      	mov	sp, r7
 800edd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edda:	4770      	bx	lr

0800eddc <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800eddc:	b580      	push	{r7, lr}
 800edde:	b084      	sub	sp, #16
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	60f8      	str	r0, [r7, #12]
 800ede4:	60b9      	str	r1, [r7, #8]
 800ede6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	68ba      	ldr	r2, [r7, #8]
 800edec:	68f9      	ldr	r1, [r7, #12]
 800edee:	4807      	ldr	r0, [pc, #28]	; (800ee0c <ETH_PHY_IO_ReadReg+0x30>)
 800edf0:	f7f7 f8c1 	bl	8005f76 <HAL_ETH_ReadPHYRegister>
 800edf4:	4603      	mov	r3, r0
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d002      	beq.n	800ee00 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800edfa:	f04f 33ff 	mov.w	r3, #4294967295
 800edfe:	e000      	b.n	800ee02 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800ee00:	2300      	movs	r3, #0
}
 800ee02:	4618      	mov	r0, r3
 800ee04:	3710      	adds	r7, #16
 800ee06:	46bd      	mov	sp, r7
 800ee08:	bd80      	pop	{r7, pc}
 800ee0a:	bf00      	nop
 800ee0c:	200050a4 	.word	0x200050a4

0800ee10 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800ee10:	b580      	push	{r7, lr}
 800ee12:	b084      	sub	sp, #16
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	60f8      	str	r0, [r7, #12]
 800ee18:	60b9      	str	r1, [r7, #8]
 800ee1a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	68ba      	ldr	r2, [r7, #8]
 800ee20:	68f9      	ldr	r1, [r7, #12]
 800ee22:	4807      	ldr	r0, [pc, #28]	; (800ee40 <ETH_PHY_IO_WriteReg+0x30>)
 800ee24:	f7f7 f8fc 	bl	8006020 <HAL_ETH_WritePHYRegister>
 800ee28:	4603      	mov	r3, r0
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d002      	beq.n	800ee34 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800ee2e:	f04f 33ff 	mov.w	r3, #4294967295
 800ee32:	e000      	b.n	800ee36 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800ee34:	2300      	movs	r3, #0
}
 800ee36:	4618      	mov	r0, r3
 800ee38:	3710      	adds	r7, #16
 800ee3a:	46bd      	mov	sp, r7
 800ee3c:	bd80      	pop	{r7, pc}
 800ee3e:	bf00      	nop
 800ee40:	200050a4 	.word	0x200050a4

0800ee44 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800ee44:	b580      	push	{r7, lr}
 800ee46:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800ee48:	f7f4 fd46 	bl	80038d8 <HAL_GetTick>
 800ee4c:	4603      	mov	r3, r0
}
 800ee4e:	4618      	mov	r0, r3
 800ee50:	bd80      	pop	{r7, pc}
	...

0800ee54 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800ee54:	b580      	push	{r7, lr}
 800ee56:	b0a0      	sub	sp, #128	; 0x80
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800ee5c:	f107 030c 	add.w	r3, r7, #12
 800ee60:	2264      	movs	r2, #100	; 0x64
 800ee62:	2100      	movs	r1, #0
 800ee64:	4618      	mov	r0, r3
 800ee66:	f00a fcbf 	bl	80197e8 <memset>
  int32_t PHYLinkState = 0;
 800ee6a:	2300      	movs	r3, #0
 800ee6c:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800ee6e:	2300      	movs	r3, #0
 800ee70:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ee72:	2300      	movs	r3, #0
 800ee74:	67bb      	str	r3, [r7, #120]	; 0x78
 800ee76:	2300      	movs	r3, #0
 800ee78:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800ee7a:	483a      	ldr	r0, [pc, #232]	; (800ef64 <ethernet_link_check_state+0x110>)
 800ee7c:	f7f4 fc1f 	bl	80036be <LAN8742_GetLinkState>
 800ee80:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ee88:	089b      	lsrs	r3, r3, #2
 800ee8a:	f003 0301 	and.w	r3, r3, #1
 800ee8e:	b2db      	uxtb	r3, r3
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d00c      	beq.n	800eeae <ethernet_link_check_state+0x5a>
 800ee94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ee96:	2b01      	cmp	r3, #1
 800ee98:	dc09      	bgt.n	800eeae <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800ee9a:	4833      	ldr	r0, [pc, #204]	; (800ef68 <ethernet_link_check_state+0x114>)
 800ee9c:	f7f6 ff16 	bl	8005ccc <HAL_ETH_Stop>
    netif_set_down(netif);
 800eea0:	6878      	ldr	r0, [r7, #4]
 800eea2:	f001 f893 	bl	800ffcc <netif_set_down>
    netif_set_link_down(netif);
 800eea6:	6878      	ldr	r0, [r7, #4]
 800eea8:	f001 f8f6 	bl	8010098 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800eeac:	e055      	b.n	800ef5a <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800eeb4:	f003 0304 	and.w	r3, r3, #4
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d14e      	bne.n	800ef5a <ethernet_link_check_state+0x106>
 800eebc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800eebe:	2b01      	cmp	r3, #1
 800eec0:	dd4b      	ble.n	800ef5a <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800eec2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800eec4:	3b02      	subs	r3, #2
 800eec6:	2b03      	cmp	r3, #3
 800eec8:	d82a      	bhi.n	800ef20 <ethernet_link_check_state+0xcc>
 800eeca:	a201      	add	r2, pc, #4	; (adr r2, 800eed0 <ethernet_link_check_state+0x7c>)
 800eecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eed0:	0800eee1 	.word	0x0800eee1
 800eed4:	0800eef3 	.word	0x0800eef3
 800eed8:	0800ef03 	.word	0x0800ef03
 800eedc:	0800ef13 	.word	0x0800ef13
      duplex = ETH_FULLDUPLEX_MODE;
 800eee0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800eee4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800eee6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800eeea:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800eeec:	2301      	movs	r3, #1
 800eeee:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800eef0:	e017      	b.n	800ef22 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800eef2:	2300      	movs	r3, #0
 800eef4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800eef6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800eefa:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800eefc:	2301      	movs	r3, #1
 800eefe:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800ef00:	e00f      	b.n	800ef22 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800ef02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ef06:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800ef08:	2300      	movs	r3, #0
 800ef0a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800ef0c:	2301      	movs	r3, #1
 800ef0e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800ef10:	e007      	b.n	800ef22 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800ef12:	2300      	movs	r3, #0
 800ef14:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800ef16:	2300      	movs	r3, #0
 800ef18:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800ef1a:	2301      	movs	r3, #1
 800ef1c:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800ef1e:	e000      	b.n	800ef22 <ethernet_link_check_state+0xce>
      break;
 800ef20:	bf00      	nop
    if(linkchanged)
 800ef22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d018      	beq.n	800ef5a <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800ef28:	f107 030c 	add.w	r3, r7, #12
 800ef2c:	4619      	mov	r1, r3
 800ef2e:	480e      	ldr	r0, [pc, #56]	; (800ef68 <ethernet_link_check_state+0x114>)
 800ef30:	f7f7 f8ca 	bl	80060c8 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800ef34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ef36:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 800ef38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ef3a:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800ef3c:	f107 030c 	add.w	r3, r7, #12
 800ef40:	4619      	mov	r1, r3
 800ef42:	4809      	ldr	r0, [pc, #36]	; (800ef68 <ethernet_link_check_state+0x114>)
 800ef44:	f7f7 fa94 	bl	8006470 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800ef48:	4807      	ldr	r0, [pc, #28]	; (800ef68 <ethernet_link_check_state+0x114>)
 800ef4a:	f7f6 fe5d 	bl	8005c08 <HAL_ETH_Start>
      netif_set_up(netif);
 800ef4e:	6878      	ldr	r0, [r7, #4]
 800ef50:	f000 ffd0 	bl	800fef4 <netif_set_up>
      netif_set_link_up(netif);
 800ef54:	6878      	ldr	r0, [r7, #4]
 800ef56:	f001 f86b 	bl	8010030 <netif_set_link_up>
}
 800ef5a:	bf00      	nop
 800ef5c:	3780      	adds	r7, #128	; 0x80
 800ef5e:	46bd      	mov	sp, r7
 800ef60:	bd80      	pop	{r7, pc}
 800ef62:	bf00      	nop
 800ef64:	2000518c 	.word	0x2000518c
 800ef68:	200050a4 	.word	0x200050a4

0800ef6c <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800ef6c:	b580      	push	{r7, lr}
 800ef6e:	b086      	sub	sp, #24
 800ef70:	af02      	add	r7, sp, #8
 800ef72:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800ef74:	4812      	ldr	r0, [pc, #72]	; (800efc0 <HAL_ETH_RxAllocateCallback+0x54>)
 800ef76:	f000 fd37 	bl	800f9e8 <memp_malloc_pool>
 800ef7a:	60f8      	str	r0, [r7, #12]
  if (p)
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d014      	beq.n	800efac <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	f103 0220 	add.w	r2, r3, #32
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	4a0d      	ldr	r2, [pc, #52]	; (800efc4 <HAL_ETH_RxAllocateCallback+0x58>)
 800ef90:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800ef9a:	9201      	str	r2, [sp, #4]
 800ef9c:	9300      	str	r3, [sp, #0]
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	2241      	movs	r2, #65	; 0x41
 800efa2:	2100      	movs	r1, #0
 800efa4:	2000      	movs	r0, #0
 800efa6:	f001 fa4d 	bl	8010444 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800efaa:	e005      	b.n	800efb8 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800efac:	4b06      	ldr	r3, [pc, #24]	; (800efc8 <HAL_ETH_RxAllocateCallback+0x5c>)
 800efae:	2201      	movs	r2, #1
 800efb0:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	2200      	movs	r2, #0
 800efb6:	601a      	str	r2, [r3, #0]
}
 800efb8:	bf00      	nop
 800efba:	3710      	adds	r7, #16
 800efbc:	46bd      	mov	sp, r7
 800efbe:	bd80      	pop	{r7, pc}
 800efc0:	0801e708 	.word	0x0801e708
 800efc4:	0800ebd9 	.word	0x0800ebd9
 800efc8:	200050a0 	.word	0x200050a0

0800efcc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800efcc:	b480      	push	{r7}
 800efce:	b083      	sub	sp, #12
 800efd0:	af00      	add	r7, sp, #0
 800efd2:	4603      	mov	r3, r0
 800efd4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800efd6:	88fb      	ldrh	r3, [r7, #6]
 800efd8:	021b      	lsls	r3, r3, #8
 800efda:	b21a      	sxth	r2, r3
 800efdc:	88fb      	ldrh	r3, [r7, #6]
 800efde:	0a1b      	lsrs	r3, r3, #8
 800efe0:	b29b      	uxth	r3, r3
 800efe2:	b21b      	sxth	r3, r3
 800efe4:	4313      	orrs	r3, r2
 800efe6:	b21b      	sxth	r3, r3
 800efe8:	b29b      	uxth	r3, r3
}
 800efea:	4618      	mov	r0, r3
 800efec:	370c      	adds	r7, #12
 800efee:	46bd      	mov	sp, r7
 800eff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff4:	4770      	bx	lr

0800eff6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800eff6:	b480      	push	{r7}
 800eff8:	b083      	sub	sp, #12
 800effa:	af00      	add	r7, sp, #0
 800effc:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	061a      	lsls	r2, r3, #24
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	021b      	lsls	r3, r3, #8
 800f006:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f00a:	431a      	orrs	r2, r3
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	0a1b      	lsrs	r3, r3, #8
 800f010:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f014:	431a      	orrs	r2, r3
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	0e1b      	lsrs	r3, r3, #24
 800f01a:	4313      	orrs	r3, r2
}
 800f01c:	4618      	mov	r0, r3
 800f01e:	370c      	adds	r7, #12
 800f020:	46bd      	mov	sp, r7
 800f022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f026:	4770      	bx	lr

0800f028 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800f028:	b480      	push	{r7}
 800f02a:	b089      	sub	sp, #36	; 0x24
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	6078      	str	r0, [r7, #4]
 800f030:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800f036:	2300      	movs	r3, #0
 800f038:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800f03a:	2300      	movs	r3, #0
 800f03c:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800f03e:	69fb      	ldr	r3, [r7, #28]
 800f040:	f003 0301 	and.w	r3, r3, #1
 800f044:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800f046:	693b      	ldr	r3, [r7, #16]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d00d      	beq.n	800f068 <lwip_standard_chksum+0x40>
 800f04c:	683b      	ldr	r3, [r7, #0]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	dd0a      	ble.n	800f068 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800f052:	69fa      	ldr	r2, [r7, #28]
 800f054:	1c53      	adds	r3, r2, #1
 800f056:	61fb      	str	r3, [r7, #28]
 800f058:	f107 030e 	add.w	r3, r7, #14
 800f05c:	3301      	adds	r3, #1
 800f05e:	7812      	ldrb	r2, [r2, #0]
 800f060:	701a      	strb	r2, [r3, #0]
    len--;
 800f062:	683b      	ldr	r3, [r7, #0]
 800f064:	3b01      	subs	r3, #1
 800f066:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800f068:	69fb      	ldr	r3, [r7, #28]
 800f06a:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800f06c:	e00a      	b.n	800f084 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800f06e:	69bb      	ldr	r3, [r7, #24]
 800f070:	1c9a      	adds	r2, r3, #2
 800f072:	61ba      	str	r2, [r7, #24]
 800f074:	881b      	ldrh	r3, [r3, #0]
 800f076:	461a      	mov	r2, r3
 800f078:	697b      	ldr	r3, [r7, #20]
 800f07a:	4413      	add	r3, r2
 800f07c:	617b      	str	r3, [r7, #20]
    len -= 2;
 800f07e:	683b      	ldr	r3, [r7, #0]
 800f080:	3b02      	subs	r3, #2
 800f082:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800f084:	683b      	ldr	r3, [r7, #0]
 800f086:	2b01      	cmp	r3, #1
 800f088:	dcf1      	bgt.n	800f06e <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800f08a:	683b      	ldr	r3, [r7, #0]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	dd04      	ble.n	800f09a <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800f090:	f107 030e 	add.w	r3, r7, #14
 800f094:	69ba      	ldr	r2, [r7, #24]
 800f096:	7812      	ldrb	r2, [r2, #0]
 800f098:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800f09a:	89fb      	ldrh	r3, [r7, #14]
 800f09c:	461a      	mov	r2, r3
 800f09e:	697b      	ldr	r3, [r7, #20]
 800f0a0:	4413      	add	r3, r2
 800f0a2:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800f0a4:	697b      	ldr	r3, [r7, #20]
 800f0a6:	0c1a      	lsrs	r2, r3, #16
 800f0a8:	697b      	ldr	r3, [r7, #20]
 800f0aa:	b29b      	uxth	r3, r3
 800f0ac:	4413      	add	r3, r2
 800f0ae:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800f0b0:	697b      	ldr	r3, [r7, #20]
 800f0b2:	0c1a      	lsrs	r2, r3, #16
 800f0b4:	697b      	ldr	r3, [r7, #20]
 800f0b6:	b29b      	uxth	r3, r3
 800f0b8:	4413      	add	r3, r2
 800f0ba:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800f0bc:	693b      	ldr	r3, [r7, #16]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d007      	beq.n	800f0d2 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800f0c2:	697b      	ldr	r3, [r7, #20]
 800f0c4:	021b      	lsls	r3, r3, #8
 800f0c6:	b29a      	uxth	r2, r3
 800f0c8:	697b      	ldr	r3, [r7, #20]
 800f0ca:	0a1b      	lsrs	r3, r3, #8
 800f0cc:	b2db      	uxtb	r3, r3
 800f0ce:	4313      	orrs	r3, r2
 800f0d0:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800f0d2:	697b      	ldr	r3, [r7, #20]
 800f0d4:	b29b      	uxth	r3, r3
}
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	3724      	adds	r7, #36	; 0x24
 800f0da:	46bd      	mov	sp, r7
 800f0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e0:	4770      	bx	lr

0800f0e2 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800f0e2:	b580      	push	{r7, lr}
 800f0e4:	b082      	sub	sp, #8
 800f0e6:	af00      	add	r7, sp, #0
 800f0e8:	6078      	str	r0, [r7, #4]
 800f0ea:	460b      	mov	r3, r1
 800f0ec:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800f0ee:	887b      	ldrh	r3, [r7, #2]
 800f0f0:	4619      	mov	r1, r3
 800f0f2:	6878      	ldr	r0, [r7, #4]
 800f0f4:	f7ff ff98 	bl	800f028 <lwip_standard_chksum>
 800f0f8:	4603      	mov	r3, r0
 800f0fa:	43db      	mvns	r3, r3
 800f0fc:	b29b      	uxth	r3, r3
}
 800f0fe:	4618      	mov	r0, r3
 800f100:	3708      	adds	r7, #8
 800f102:	46bd      	mov	sp, r7
 800f104:	bd80      	pop	{r7, pc}

0800f106 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800f106:	b580      	push	{r7, lr}
 800f108:	b086      	sub	sp, #24
 800f10a:	af00      	add	r7, sp, #0
 800f10c:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800f10e:	2300      	movs	r3, #0
 800f110:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800f112:	2300      	movs	r3, #0
 800f114:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	613b      	str	r3, [r7, #16]
 800f11a:	e02b      	b.n	800f174 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800f11c:	693b      	ldr	r3, [r7, #16]
 800f11e:	685a      	ldr	r2, [r3, #4]
 800f120:	693b      	ldr	r3, [r7, #16]
 800f122:	895b      	ldrh	r3, [r3, #10]
 800f124:	4619      	mov	r1, r3
 800f126:	4610      	mov	r0, r2
 800f128:	f7ff ff7e 	bl	800f028 <lwip_standard_chksum>
 800f12c:	4603      	mov	r3, r0
 800f12e:	461a      	mov	r2, r3
 800f130:	697b      	ldr	r3, [r7, #20]
 800f132:	4413      	add	r3, r2
 800f134:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800f136:	697b      	ldr	r3, [r7, #20]
 800f138:	0c1a      	lsrs	r2, r3, #16
 800f13a:	697b      	ldr	r3, [r7, #20]
 800f13c:	b29b      	uxth	r3, r3
 800f13e:	4413      	add	r3, r2
 800f140:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800f142:	693b      	ldr	r3, [r7, #16]
 800f144:	895b      	ldrh	r3, [r3, #10]
 800f146:	f003 0301 	and.w	r3, r3, #1
 800f14a:	b29b      	uxth	r3, r3
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d00e      	beq.n	800f16e <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	2b00      	cmp	r3, #0
 800f154:	bf0c      	ite	eq
 800f156:	2301      	moveq	r3, #1
 800f158:	2300      	movne	r3, #0
 800f15a:	b2db      	uxtb	r3, r3
 800f15c:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800f15e:	697b      	ldr	r3, [r7, #20]
 800f160:	021b      	lsls	r3, r3, #8
 800f162:	b29a      	uxth	r2, r3
 800f164:	697b      	ldr	r3, [r7, #20]
 800f166:	0a1b      	lsrs	r3, r3, #8
 800f168:	b2db      	uxtb	r3, r3
 800f16a:	4313      	orrs	r3, r2
 800f16c:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800f16e:	693b      	ldr	r3, [r7, #16]
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	613b      	str	r3, [r7, #16]
 800f174:	693b      	ldr	r3, [r7, #16]
 800f176:	2b00      	cmp	r3, #0
 800f178:	d1d0      	bne.n	800f11c <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d007      	beq.n	800f190 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800f180:	697b      	ldr	r3, [r7, #20]
 800f182:	021b      	lsls	r3, r3, #8
 800f184:	b29a      	uxth	r2, r3
 800f186:	697b      	ldr	r3, [r7, #20]
 800f188:	0a1b      	lsrs	r3, r3, #8
 800f18a:	b2db      	uxtb	r3, r3
 800f18c:	4313      	orrs	r3, r2
 800f18e:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800f190:	697b      	ldr	r3, [r7, #20]
 800f192:	b29b      	uxth	r3, r3
 800f194:	43db      	mvns	r3, r3
 800f196:	b29b      	uxth	r3, r3
}
 800f198:	4618      	mov	r0, r3
 800f19a:	3718      	adds	r7, #24
 800f19c:	46bd      	mov	sp, r7
 800f19e:	bd80      	pop	{r7, pc}

0800f1a0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800f1a0:	b580      	push	{r7, lr}
 800f1a2:	b082      	sub	sp, #8
 800f1a4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800f1aa:	f000 f8d5 	bl	800f358 <mem_init>
  memp_init();
 800f1ae:	f000 fbd7 	bl	800f960 <memp_init>
  pbuf_init();
  netif_init();
 800f1b2:	f000 fcd5 	bl	800fb60 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800f1b6:	f006 fff1 	bl	801619c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800f1ba:	f001 fd8b 	bl	8010cd4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800f1be:	f006 ffa5 	bl	801610c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800f1c2:	bf00      	nop
 800f1c4:	3708      	adds	r7, #8
 800f1c6:	46bd      	mov	sp, r7
 800f1c8:	bd80      	pop	{r7, pc}
	...

0800f1cc <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800f1cc:	b480      	push	{r7}
 800f1ce:	b083      	sub	sp, #12
 800f1d0:	af00      	add	r7, sp, #0
 800f1d2:	4603      	mov	r3, r0
 800f1d4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800f1d6:	4b05      	ldr	r3, [pc, #20]	; (800f1ec <ptr_to_mem+0x20>)
 800f1d8:	681a      	ldr	r2, [r3, #0]
 800f1da:	88fb      	ldrh	r3, [r7, #6]
 800f1dc:	4413      	add	r3, r2
}
 800f1de:	4618      	mov	r0, r3
 800f1e0:	370c      	adds	r7, #12
 800f1e2:	46bd      	mov	sp, r7
 800f1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e8:	4770      	bx	lr
 800f1ea:	bf00      	nop
 800f1ec:	200051c4 	.word	0x200051c4

0800f1f0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800f1f0:	b480      	push	{r7}
 800f1f2:	b083      	sub	sp, #12
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800f1f8:	4b05      	ldr	r3, [pc, #20]	; (800f210 <mem_to_ptr+0x20>)
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	687a      	ldr	r2, [r7, #4]
 800f1fe:	1ad3      	subs	r3, r2, r3
 800f200:	b29b      	uxth	r3, r3
}
 800f202:	4618      	mov	r0, r3
 800f204:	370c      	adds	r7, #12
 800f206:	46bd      	mov	sp, r7
 800f208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f20c:	4770      	bx	lr
 800f20e:	bf00      	nop
 800f210:	200051c4 	.word	0x200051c4

0800f214 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800f214:	b590      	push	{r4, r7, lr}
 800f216:	b085      	sub	sp, #20
 800f218:	af00      	add	r7, sp, #0
 800f21a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800f21c:	4b45      	ldr	r3, [pc, #276]	; (800f334 <plug_holes+0x120>)
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	687a      	ldr	r2, [r7, #4]
 800f222:	429a      	cmp	r2, r3
 800f224:	d206      	bcs.n	800f234 <plug_holes+0x20>
 800f226:	4b44      	ldr	r3, [pc, #272]	; (800f338 <plug_holes+0x124>)
 800f228:	f240 12df 	movw	r2, #479	; 0x1df
 800f22c:	4943      	ldr	r1, [pc, #268]	; (800f33c <plug_holes+0x128>)
 800f22e:	4844      	ldr	r0, [pc, #272]	; (800f340 <plug_holes+0x12c>)
 800f230:	f00a f984 	bl	801953c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800f234:	4b43      	ldr	r3, [pc, #268]	; (800f344 <plug_holes+0x130>)
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	687a      	ldr	r2, [r7, #4]
 800f23a:	429a      	cmp	r2, r3
 800f23c:	d306      	bcc.n	800f24c <plug_holes+0x38>
 800f23e:	4b3e      	ldr	r3, [pc, #248]	; (800f338 <plug_holes+0x124>)
 800f240:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800f244:	4940      	ldr	r1, [pc, #256]	; (800f348 <plug_holes+0x134>)
 800f246:	483e      	ldr	r0, [pc, #248]	; (800f340 <plug_holes+0x12c>)
 800f248:	f00a f978 	bl	801953c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	791b      	ldrb	r3, [r3, #4]
 800f250:	2b00      	cmp	r3, #0
 800f252:	d006      	beq.n	800f262 <plug_holes+0x4e>
 800f254:	4b38      	ldr	r3, [pc, #224]	; (800f338 <plug_holes+0x124>)
 800f256:	f240 12e1 	movw	r2, #481	; 0x1e1
 800f25a:	493c      	ldr	r1, [pc, #240]	; (800f34c <plug_holes+0x138>)
 800f25c:	4838      	ldr	r0, [pc, #224]	; (800f340 <plug_holes+0x12c>)
 800f25e:	f00a f96d 	bl	801953c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	881b      	ldrh	r3, [r3, #0]
 800f266:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f26a:	d906      	bls.n	800f27a <plug_holes+0x66>
 800f26c:	4b32      	ldr	r3, [pc, #200]	; (800f338 <plug_holes+0x124>)
 800f26e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800f272:	4937      	ldr	r1, [pc, #220]	; (800f350 <plug_holes+0x13c>)
 800f274:	4832      	ldr	r0, [pc, #200]	; (800f340 <plug_holes+0x12c>)
 800f276:	f00a f961 	bl	801953c <iprintf>

  nmem = ptr_to_mem(mem->next);
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	881b      	ldrh	r3, [r3, #0]
 800f27e:	4618      	mov	r0, r3
 800f280:	f7ff ffa4 	bl	800f1cc <ptr_to_mem>
 800f284:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800f286:	687a      	ldr	r2, [r7, #4]
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	429a      	cmp	r2, r3
 800f28c:	d024      	beq.n	800f2d8 <plug_holes+0xc4>
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	791b      	ldrb	r3, [r3, #4]
 800f292:	2b00      	cmp	r3, #0
 800f294:	d120      	bne.n	800f2d8 <plug_holes+0xc4>
 800f296:	4b2b      	ldr	r3, [pc, #172]	; (800f344 <plug_holes+0x130>)
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	68fa      	ldr	r2, [r7, #12]
 800f29c:	429a      	cmp	r2, r3
 800f29e:	d01b      	beq.n	800f2d8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800f2a0:	4b2c      	ldr	r3, [pc, #176]	; (800f354 <plug_holes+0x140>)
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	68fa      	ldr	r2, [r7, #12]
 800f2a6:	429a      	cmp	r2, r3
 800f2a8:	d102      	bne.n	800f2b0 <plug_holes+0x9c>
      lfree = mem;
 800f2aa:	4a2a      	ldr	r2, [pc, #168]	; (800f354 <plug_holes+0x140>)
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	881a      	ldrh	r2, [r3, #0]
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	881b      	ldrh	r3, [r3, #0]
 800f2bc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f2c0:	d00a      	beq.n	800f2d8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	881b      	ldrh	r3, [r3, #0]
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	f7ff ff80 	bl	800f1cc <ptr_to_mem>
 800f2cc:	4604      	mov	r4, r0
 800f2ce:	6878      	ldr	r0, [r7, #4]
 800f2d0:	f7ff ff8e 	bl	800f1f0 <mem_to_ptr>
 800f2d4:	4603      	mov	r3, r0
 800f2d6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	885b      	ldrh	r3, [r3, #2]
 800f2dc:	4618      	mov	r0, r3
 800f2de:	f7ff ff75 	bl	800f1cc <ptr_to_mem>
 800f2e2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800f2e4:	68ba      	ldr	r2, [r7, #8]
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	429a      	cmp	r2, r3
 800f2ea:	d01f      	beq.n	800f32c <plug_holes+0x118>
 800f2ec:	68bb      	ldr	r3, [r7, #8]
 800f2ee:	791b      	ldrb	r3, [r3, #4]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d11b      	bne.n	800f32c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800f2f4:	4b17      	ldr	r3, [pc, #92]	; (800f354 <plug_holes+0x140>)
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	687a      	ldr	r2, [r7, #4]
 800f2fa:	429a      	cmp	r2, r3
 800f2fc:	d102      	bne.n	800f304 <plug_holes+0xf0>
      lfree = pmem;
 800f2fe:	4a15      	ldr	r2, [pc, #84]	; (800f354 <plug_holes+0x140>)
 800f300:	68bb      	ldr	r3, [r7, #8]
 800f302:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	881a      	ldrh	r2, [r3, #0]
 800f308:	68bb      	ldr	r3, [r7, #8]
 800f30a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	881b      	ldrh	r3, [r3, #0]
 800f310:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f314:	d00a      	beq.n	800f32c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	881b      	ldrh	r3, [r3, #0]
 800f31a:	4618      	mov	r0, r3
 800f31c:	f7ff ff56 	bl	800f1cc <ptr_to_mem>
 800f320:	4604      	mov	r4, r0
 800f322:	68b8      	ldr	r0, [r7, #8]
 800f324:	f7ff ff64 	bl	800f1f0 <mem_to_ptr>
 800f328:	4603      	mov	r3, r0
 800f32a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800f32c:	bf00      	nop
 800f32e:	3714      	adds	r7, #20
 800f330:	46bd      	mov	sp, r7
 800f332:	bd90      	pop	{r4, r7, pc}
 800f334:	200051c4 	.word	0x200051c4
 800f338:	0801bd2c 	.word	0x0801bd2c
 800f33c:	0801bd5c 	.word	0x0801bd5c
 800f340:	0801bd74 	.word	0x0801bd74
 800f344:	200051c8 	.word	0x200051c8
 800f348:	0801bd9c 	.word	0x0801bd9c
 800f34c:	0801bdb8 	.word	0x0801bdb8
 800f350:	0801bdd4 	.word	0x0801bdd4
 800f354:	200051cc 	.word	0x200051cc

0800f358 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800f358:	b580      	push	{r7, lr}
 800f35a:	b082      	sub	sp, #8
 800f35c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800f35e:	4b16      	ldr	r3, [pc, #88]	; (800f3b8 <mem_init+0x60>)
 800f360:	4a16      	ldr	r2, [pc, #88]	; (800f3bc <mem_init+0x64>)
 800f362:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800f364:	4b14      	ldr	r3, [pc, #80]	; (800f3b8 <mem_init+0x60>)
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800f370:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	2200      	movs	r2, #0
 800f376:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	2200      	movs	r2, #0
 800f37c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800f37e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800f382:	f7ff ff23 	bl	800f1cc <ptr_to_mem>
 800f386:	4603      	mov	r3, r0
 800f388:	4a0d      	ldr	r2, [pc, #52]	; (800f3c0 <mem_init+0x68>)
 800f38a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800f38c:	4b0c      	ldr	r3, [pc, #48]	; (800f3c0 <mem_init+0x68>)
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	2201      	movs	r2, #1
 800f392:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800f394:	4b0a      	ldr	r3, [pc, #40]	; (800f3c0 <mem_init+0x68>)
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800f39c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800f39e:	4b08      	ldr	r3, [pc, #32]	; (800f3c0 <mem_init+0x68>)
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800f3a6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800f3a8:	4b03      	ldr	r3, [pc, #12]	; (800f3b8 <mem_init+0x60>)
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	4a05      	ldr	r2, [pc, #20]	; (800f3c4 <mem_init+0x6c>)
 800f3ae:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800f3b0:	bf00      	nop
 800f3b2:	3708      	adds	r7, #8
 800f3b4:	46bd      	mov	sp, r7
 800f3b6:	bd80      	pop	{r7, pc}
 800f3b8:	200051c4 	.word	0x200051c4
 800f3bc:	30044000 	.word	0x30044000
 800f3c0:	200051c8 	.word	0x200051c8
 800f3c4:	200051cc 	.word	0x200051cc

0800f3c8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b086      	sub	sp, #24
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800f3d0:	6878      	ldr	r0, [r7, #4]
 800f3d2:	f7ff ff0d 	bl	800f1f0 <mem_to_ptr>
 800f3d6:	4603      	mov	r3, r0
 800f3d8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	881b      	ldrh	r3, [r3, #0]
 800f3de:	4618      	mov	r0, r3
 800f3e0:	f7ff fef4 	bl	800f1cc <ptr_to_mem>
 800f3e4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	885b      	ldrh	r3, [r3, #2]
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	f7ff feee 	bl	800f1cc <ptr_to_mem>
 800f3f0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	881b      	ldrh	r3, [r3, #0]
 800f3f6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f3fa:	d818      	bhi.n	800f42e <mem_link_valid+0x66>
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	885b      	ldrh	r3, [r3, #2]
 800f400:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f404:	d813      	bhi.n	800f42e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800f40a:	8afa      	ldrh	r2, [r7, #22]
 800f40c:	429a      	cmp	r2, r3
 800f40e:	d004      	beq.n	800f41a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	881b      	ldrh	r3, [r3, #0]
 800f414:	8afa      	ldrh	r2, [r7, #22]
 800f416:	429a      	cmp	r2, r3
 800f418:	d109      	bne.n	800f42e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800f41a:	4b08      	ldr	r3, [pc, #32]	; (800f43c <mem_link_valid+0x74>)
 800f41c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f41e:	693a      	ldr	r2, [r7, #16]
 800f420:	429a      	cmp	r2, r3
 800f422:	d006      	beq.n	800f432 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800f424:	693b      	ldr	r3, [r7, #16]
 800f426:	885b      	ldrh	r3, [r3, #2]
 800f428:	8afa      	ldrh	r2, [r7, #22]
 800f42a:	429a      	cmp	r2, r3
 800f42c:	d001      	beq.n	800f432 <mem_link_valid+0x6a>
    return 0;
 800f42e:	2300      	movs	r3, #0
 800f430:	e000      	b.n	800f434 <mem_link_valid+0x6c>
  }
  return 1;
 800f432:	2301      	movs	r3, #1
}
 800f434:	4618      	mov	r0, r3
 800f436:	3718      	adds	r7, #24
 800f438:	46bd      	mov	sp, r7
 800f43a:	bd80      	pop	{r7, pc}
 800f43c:	200051c8 	.word	0x200051c8

0800f440 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800f440:	b580      	push	{r7, lr}
 800f442:	b084      	sub	sp, #16
 800f444:	af00      	add	r7, sp, #0
 800f446:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d04c      	beq.n	800f4e8 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	f003 0303 	and.w	r3, r3, #3
 800f454:	2b00      	cmp	r3, #0
 800f456:	d007      	beq.n	800f468 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800f458:	4b25      	ldr	r3, [pc, #148]	; (800f4f0 <mem_free+0xb0>)
 800f45a:	f240 2273 	movw	r2, #627	; 0x273
 800f45e:	4925      	ldr	r1, [pc, #148]	; (800f4f4 <mem_free+0xb4>)
 800f460:	4825      	ldr	r0, [pc, #148]	; (800f4f8 <mem_free+0xb8>)
 800f462:	f00a f86b 	bl	801953c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800f466:	e040      	b.n	800f4ea <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	3b08      	subs	r3, #8
 800f46c:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800f46e:	4b23      	ldr	r3, [pc, #140]	; (800f4fc <mem_free+0xbc>)
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	68fa      	ldr	r2, [r7, #12]
 800f474:	429a      	cmp	r2, r3
 800f476:	d306      	bcc.n	800f486 <mem_free+0x46>
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	f103 020c 	add.w	r2, r3, #12
 800f47e:	4b20      	ldr	r3, [pc, #128]	; (800f500 <mem_free+0xc0>)
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	429a      	cmp	r2, r3
 800f484:	d907      	bls.n	800f496 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800f486:	4b1a      	ldr	r3, [pc, #104]	; (800f4f0 <mem_free+0xb0>)
 800f488:	f240 227f 	movw	r2, #639	; 0x27f
 800f48c:	491d      	ldr	r1, [pc, #116]	; (800f504 <mem_free+0xc4>)
 800f48e:	481a      	ldr	r0, [pc, #104]	; (800f4f8 <mem_free+0xb8>)
 800f490:	f00a f854 	bl	801953c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800f494:	e029      	b.n	800f4ea <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	791b      	ldrb	r3, [r3, #4]
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d107      	bne.n	800f4ae <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800f49e:	4b14      	ldr	r3, [pc, #80]	; (800f4f0 <mem_free+0xb0>)
 800f4a0:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800f4a4:	4918      	ldr	r1, [pc, #96]	; (800f508 <mem_free+0xc8>)
 800f4a6:	4814      	ldr	r0, [pc, #80]	; (800f4f8 <mem_free+0xb8>)
 800f4a8:	f00a f848 	bl	801953c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800f4ac:	e01d      	b.n	800f4ea <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800f4ae:	68f8      	ldr	r0, [r7, #12]
 800f4b0:	f7ff ff8a 	bl	800f3c8 <mem_link_valid>
 800f4b4:	4603      	mov	r3, r0
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d107      	bne.n	800f4ca <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800f4ba:	4b0d      	ldr	r3, [pc, #52]	; (800f4f0 <mem_free+0xb0>)
 800f4bc:	f240 2295 	movw	r2, #661	; 0x295
 800f4c0:	4912      	ldr	r1, [pc, #72]	; (800f50c <mem_free+0xcc>)
 800f4c2:	480d      	ldr	r0, [pc, #52]	; (800f4f8 <mem_free+0xb8>)
 800f4c4:	f00a f83a 	bl	801953c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800f4c8:	e00f      	b.n	800f4ea <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	2200      	movs	r2, #0
 800f4ce:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800f4d0:	4b0f      	ldr	r3, [pc, #60]	; (800f510 <mem_free+0xd0>)
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	68fa      	ldr	r2, [r7, #12]
 800f4d6:	429a      	cmp	r2, r3
 800f4d8:	d202      	bcs.n	800f4e0 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800f4da:	4a0d      	ldr	r2, [pc, #52]	; (800f510 <mem_free+0xd0>)
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800f4e0:	68f8      	ldr	r0, [r7, #12]
 800f4e2:	f7ff fe97 	bl	800f214 <plug_holes>
 800f4e6:	e000      	b.n	800f4ea <mem_free+0xaa>
    return;
 800f4e8:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800f4ea:	3710      	adds	r7, #16
 800f4ec:	46bd      	mov	sp, r7
 800f4ee:	bd80      	pop	{r7, pc}
 800f4f0:	0801bd2c 	.word	0x0801bd2c
 800f4f4:	0801be00 	.word	0x0801be00
 800f4f8:	0801bd74 	.word	0x0801bd74
 800f4fc:	200051c4 	.word	0x200051c4
 800f500:	200051c8 	.word	0x200051c8
 800f504:	0801be24 	.word	0x0801be24
 800f508:	0801be40 	.word	0x0801be40
 800f50c:	0801be68 	.word	0x0801be68
 800f510:	200051cc 	.word	0x200051cc

0800f514 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800f514:	b580      	push	{r7, lr}
 800f516:	b088      	sub	sp, #32
 800f518:	af00      	add	r7, sp, #0
 800f51a:	6078      	str	r0, [r7, #4]
 800f51c:	460b      	mov	r3, r1
 800f51e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800f520:	887b      	ldrh	r3, [r7, #2]
 800f522:	3303      	adds	r3, #3
 800f524:	b29b      	uxth	r3, r3
 800f526:	f023 0303 	bic.w	r3, r3, #3
 800f52a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800f52c:	8bfb      	ldrh	r3, [r7, #30]
 800f52e:	2b0b      	cmp	r3, #11
 800f530:	d801      	bhi.n	800f536 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800f532:	230c      	movs	r3, #12
 800f534:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800f536:	8bfb      	ldrh	r3, [r7, #30]
 800f538:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f53c:	d803      	bhi.n	800f546 <mem_trim+0x32>
 800f53e:	8bfa      	ldrh	r2, [r7, #30]
 800f540:	887b      	ldrh	r3, [r7, #2]
 800f542:	429a      	cmp	r2, r3
 800f544:	d201      	bcs.n	800f54a <mem_trim+0x36>
    return NULL;
 800f546:	2300      	movs	r3, #0
 800f548:	e0cc      	b.n	800f6e4 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800f54a:	4b68      	ldr	r3, [pc, #416]	; (800f6ec <mem_trim+0x1d8>)
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	687a      	ldr	r2, [r7, #4]
 800f550:	429a      	cmp	r2, r3
 800f552:	d304      	bcc.n	800f55e <mem_trim+0x4a>
 800f554:	4b66      	ldr	r3, [pc, #408]	; (800f6f0 <mem_trim+0x1dc>)
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	687a      	ldr	r2, [r7, #4]
 800f55a:	429a      	cmp	r2, r3
 800f55c:	d306      	bcc.n	800f56c <mem_trim+0x58>
 800f55e:	4b65      	ldr	r3, [pc, #404]	; (800f6f4 <mem_trim+0x1e0>)
 800f560:	f240 22d1 	movw	r2, #721	; 0x2d1
 800f564:	4964      	ldr	r1, [pc, #400]	; (800f6f8 <mem_trim+0x1e4>)
 800f566:	4865      	ldr	r0, [pc, #404]	; (800f6fc <mem_trim+0x1e8>)
 800f568:	f009 ffe8 	bl	801953c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800f56c:	4b5f      	ldr	r3, [pc, #380]	; (800f6ec <mem_trim+0x1d8>)
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	687a      	ldr	r2, [r7, #4]
 800f572:	429a      	cmp	r2, r3
 800f574:	d304      	bcc.n	800f580 <mem_trim+0x6c>
 800f576:	4b5e      	ldr	r3, [pc, #376]	; (800f6f0 <mem_trim+0x1dc>)
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	687a      	ldr	r2, [r7, #4]
 800f57c:	429a      	cmp	r2, r3
 800f57e:	d301      	bcc.n	800f584 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	e0af      	b.n	800f6e4 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	3b08      	subs	r3, #8
 800f588:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800f58a:	69b8      	ldr	r0, [r7, #24]
 800f58c:	f7ff fe30 	bl	800f1f0 <mem_to_ptr>
 800f590:	4603      	mov	r3, r0
 800f592:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800f594:	69bb      	ldr	r3, [r7, #24]
 800f596:	881a      	ldrh	r2, [r3, #0]
 800f598:	8afb      	ldrh	r3, [r7, #22]
 800f59a:	1ad3      	subs	r3, r2, r3
 800f59c:	b29b      	uxth	r3, r3
 800f59e:	3b08      	subs	r3, #8
 800f5a0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800f5a2:	8bfa      	ldrh	r2, [r7, #30]
 800f5a4:	8abb      	ldrh	r3, [r7, #20]
 800f5a6:	429a      	cmp	r2, r3
 800f5a8:	d906      	bls.n	800f5b8 <mem_trim+0xa4>
 800f5aa:	4b52      	ldr	r3, [pc, #328]	; (800f6f4 <mem_trim+0x1e0>)
 800f5ac:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800f5b0:	4953      	ldr	r1, [pc, #332]	; (800f700 <mem_trim+0x1ec>)
 800f5b2:	4852      	ldr	r0, [pc, #328]	; (800f6fc <mem_trim+0x1e8>)
 800f5b4:	f009 ffc2 	bl	801953c <iprintf>
  if (newsize > size) {
 800f5b8:	8bfa      	ldrh	r2, [r7, #30]
 800f5ba:	8abb      	ldrh	r3, [r7, #20]
 800f5bc:	429a      	cmp	r2, r3
 800f5be:	d901      	bls.n	800f5c4 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	e08f      	b.n	800f6e4 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800f5c4:	8bfa      	ldrh	r2, [r7, #30]
 800f5c6:	8abb      	ldrh	r3, [r7, #20]
 800f5c8:	429a      	cmp	r2, r3
 800f5ca:	d101      	bne.n	800f5d0 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	e089      	b.n	800f6e4 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800f5d0:	69bb      	ldr	r3, [r7, #24]
 800f5d2:	881b      	ldrh	r3, [r3, #0]
 800f5d4:	4618      	mov	r0, r3
 800f5d6:	f7ff fdf9 	bl	800f1cc <ptr_to_mem>
 800f5da:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800f5dc:	693b      	ldr	r3, [r7, #16]
 800f5de:	791b      	ldrb	r3, [r3, #4]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d13f      	bne.n	800f664 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800f5e4:	69bb      	ldr	r3, [r7, #24]
 800f5e6:	881b      	ldrh	r3, [r3, #0]
 800f5e8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f5ec:	d106      	bne.n	800f5fc <mem_trim+0xe8>
 800f5ee:	4b41      	ldr	r3, [pc, #260]	; (800f6f4 <mem_trim+0x1e0>)
 800f5f0:	f240 22f5 	movw	r2, #757	; 0x2f5
 800f5f4:	4943      	ldr	r1, [pc, #268]	; (800f704 <mem_trim+0x1f0>)
 800f5f6:	4841      	ldr	r0, [pc, #260]	; (800f6fc <mem_trim+0x1e8>)
 800f5f8:	f009 ffa0 	bl	801953c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800f5fc:	693b      	ldr	r3, [r7, #16]
 800f5fe:	881b      	ldrh	r3, [r3, #0]
 800f600:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800f602:	8afa      	ldrh	r2, [r7, #22]
 800f604:	8bfb      	ldrh	r3, [r7, #30]
 800f606:	4413      	add	r3, r2
 800f608:	b29b      	uxth	r3, r3
 800f60a:	3308      	adds	r3, #8
 800f60c:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800f60e:	4b3e      	ldr	r3, [pc, #248]	; (800f708 <mem_trim+0x1f4>)
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	693a      	ldr	r2, [r7, #16]
 800f614:	429a      	cmp	r2, r3
 800f616:	d106      	bne.n	800f626 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800f618:	89fb      	ldrh	r3, [r7, #14]
 800f61a:	4618      	mov	r0, r3
 800f61c:	f7ff fdd6 	bl	800f1cc <ptr_to_mem>
 800f620:	4603      	mov	r3, r0
 800f622:	4a39      	ldr	r2, [pc, #228]	; (800f708 <mem_trim+0x1f4>)
 800f624:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800f626:	89fb      	ldrh	r3, [r7, #14]
 800f628:	4618      	mov	r0, r3
 800f62a:	f7ff fdcf 	bl	800f1cc <ptr_to_mem>
 800f62e:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800f630:	693b      	ldr	r3, [r7, #16]
 800f632:	2200      	movs	r2, #0
 800f634:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800f636:	693b      	ldr	r3, [r7, #16]
 800f638:	89ba      	ldrh	r2, [r7, #12]
 800f63a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800f63c:	693b      	ldr	r3, [r7, #16]
 800f63e:	8afa      	ldrh	r2, [r7, #22]
 800f640:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800f642:	69bb      	ldr	r3, [r7, #24]
 800f644:	89fa      	ldrh	r2, [r7, #14]
 800f646:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f648:	693b      	ldr	r3, [r7, #16]
 800f64a:	881b      	ldrh	r3, [r3, #0]
 800f64c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f650:	d047      	beq.n	800f6e2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800f652:	693b      	ldr	r3, [r7, #16]
 800f654:	881b      	ldrh	r3, [r3, #0]
 800f656:	4618      	mov	r0, r3
 800f658:	f7ff fdb8 	bl	800f1cc <ptr_to_mem>
 800f65c:	4602      	mov	r2, r0
 800f65e:	89fb      	ldrh	r3, [r7, #14]
 800f660:	8053      	strh	r3, [r2, #2]
 800f662:	e03e      	b.n	800f6e2 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800f664:	8bfb      	ldrh	r3, [r7, #30]
 800f666:	f103 0214 	add.w	r2, r3, #20
 800f66a:	8abb      	ldrh	r3, [r7, #20]
 800f66c:	429a      	cmp	r2, r3
 800f66e:	d838      	bhi.n	800f6e2 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800f670:	8afa      	ldrh	r2, [r7, #22]
 800f672:	8bfb      	ldrh	r3, [r7, #30]
 800f674:	4413      	add	r3, r2
 800f676:	b29b      	uxth	r3, r3
 800f678:	3308      	adds	r3, #8
 800f67a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800f67c:	69bb      	ldr	r3, [r7, #24]
 800f67e:	881b      	ldrh	r3, [r3, #0]
 800f680:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f684:	d106      	bne.n	800f694 <mem_trim+0x180>
 800f686:	4b1b      	ldr	r3, [pc, #108]	; (800f6f4 <mem_trim+0x1e0>)
 800f688:	f240 3216 	movw	r2, #790	; 0x316
 800f68c:	491d      	ldr	r1, [pc, #116]	; (800f704 <mem_trim+0x1f0>)
 800f68e:	481b      	ldr	r0, [pc, #108]	; (800f6fc <mem_trim+0x1e8>)
 800f690:	f009 ff54 	bl	801953c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800f694:	89fb      	ldrh	r3, [r7, #14]
 800f696:	4618      	mov	r0, r3
 800f698:	f7ff fd98 	bl	800f1cc <ptr_to_mem>
 800f69c:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800f69e:	4b1a      	ldr	r3, [pc, #104]	; (800f708 <mem_trim+0x1f4>)
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	693a      	ldr	r2, [r7, #16]
 800f6a4:	429a      	cmp	r2, r3
 800f6a6:	d202      	bcs.n	800f6ae <mem_trim+0x19a>
      lfree = mem2;
 800f6a8:	4a17      	ldr	r2, [pc, #92]	; (800f708 <mem_trim+0x1f4>)
 800f6aa:	693b      	ldr	r3, [r7, #16]
 800f6ac:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800f6ae:	693b      	ldr	r3, [r7, #16]
 800f6b0:	2200      	movs	r2, #0
 800f6b2:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800f6b4:	69bb      	ldr	r3, [r7, #24]
 800f6b6:	881a      	ldrh	r2, [r3, #0]
 800f6b8:	693b      	ldr	r3, [r7, #16]
 800f6ba:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800f6bc:	693b      	ldr	r3, [r7, #16]
 800f6be:	8afa      	ldrh	r2, [r7, #22]
 800f6c0:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800f6c2:	69bb      	ldr	r3, [r7, #24]
 800f6c4:	89fa      	ldrh	r2, [r7, #14]
 800f6c6:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f6c8:	693b      	ldr	r3, [r7, #16]
 800f6ca:	881b      	ldrh	r3, [r3, #0]
 800f6cc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f6d0:	d007      	beq.n	800f6e2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800f6d2:	693b      	ldr	r3, [r7, #16]
 800f6d4:	881b      	ldrh	r3, [r3, #0]
 800f6d6:	4618      	mov	r0, r3
 800f6d8:	f7ff fd78 	bl	800f1cc <ptr_to_mem>
 800f6dc:	4602      	mov	r2, r0
 800f6de:	89fb      	ldrh	r3, [r7, #14]
 800f6e0:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800f6e2:	687b      	ldr	r3, [r7, #4]
}
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	3720      	adds	r7, #32
 800f6e8:	46bd      	mov	sp, r7
 800f6ea:	bd80      	pop	{r7, pc}
 800f6ec:	200051c4 	.word	0x200051c4
 800f6f0:	200051c8 	.word	0x200051c8
 800f6f4:	0801bd2c 	.word	0x0801bd2c
 800f6f8:	0801be9c 	.word	0x0801be9c
 800f6fc:	0801bd74 	.word	0x0801bd74
 800f700:	0801beb4 	.word	0x0801beb4
 800f704:	0801bed4 	.word	0x0801bed4
 800f708:	200051cc 	.word	0x200051cc

0800f70c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800f70c:	b580      	push	{r7, lr}
 800f70e:	b088      	sub	sp, #32
 800f710:	af00      	add	r7, sp, #0
 800f712:	4603      	mov	r3, r0
 800f714:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800f716:	88fb      	ldrh	r3, [r7, #6]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d101      	bne.n	800f720 <mem_malloc+0x14>
    return NULL;
 800f71c:	2300      	movs	r3, #0
 800f71e:	e0d9      	b.n	800f8d4 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800f720:	88fb      	ldrh	r3, [r7, #6]
 800f722:	3303      	adds	r3, #3
 800f724:	b29b      	uxth	r3, r3
 800f726:	f023 0303 	bic.w	r3, r3, #3
 800f72a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800f72c:	8bbb      	ldrh	r3, [r7, #28]
 800f72e:	2b0b      	cmp	r3, #11
 800f730:	d801      	bhi.n	800f736 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800f732:	230c      	movs	r3, #12
 800f734:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800f736:	8bbb      	ldrh	r3, [r7, #28]
 800f738:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f73c:	d803      	bhi.n	800f746 <mem_malloc+0x3a>
 800f73e:	8bba      	ldrh	r2, [r7, #28]
 800f740:	88fb      	ldrh	r3, [r7, #6]
 800f742:	429a      	cmp	r2, r3
 800f744:	d201      	bcs.n	800f74a <mem_malloc+0x3e>
    return NULL;
 800f746:	2300      	movs	r3, #0
 800f748:	e0c4      	b.n	800f8d4 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800f74a:	4b64      	ldr	r3, [pc, #400]	; (800f8dc <mem_malloc+0x1d0>)
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	4618      	mov	r0, r3
 800f750:	f7ff fd4e 	bl	800f1f0 <mem_to_ptr>
 800f754:	4603      	mov	r3, r0
 800f756:	83fb      	strh	r3, [r7, #30]
 800f758:	e0b4      	b.n	800f8c4 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800f75a:	8bfb      	ldrh	r3, [r7, #30]
 800f75c:	4618      	mov	r0, r3
 800f75e:	f7ff fd35 	bl	800f1cc <ptr_to_mem>
 800f762:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800f764:	697b      	ldr	r3, [r7, #20]
 800f766:	791b      	ldrb	r3, [r3, #4]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	f040 80a4 	bne.w	800f8b6 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800f76e:	697b      	ldr	r3, [r7, #20]
 800f770:	881b      	ldrh	r3, [r3, #0]
 800f772:	461a      	mov	r2, r3
 800f774:	8bfb      	ldrh	r3, [r7, #30]
 800f776:	1ad3      	subs	r3, r2, r3
 800f778:	f1a3 0208 	sub.w	r2, r3, #8
 800f77c:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800f77e:	429a      	cmp	r2, r3
 800f780:	f0c0 8099 	bcc.w	800f8b6 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800f784:	697b      	ldr	r3, [r7, #20]
 800f786:	881b      	ldrh	r3, [r3, #0]
 800f788:	461a      	mov	r2, r3
 800f78a:	8bfb      	ldrh	r3, [r7, #30]
 800f78c:	1ad3      	subs	r3, r2, r3
 800f78e:	f1a3 0208 	sub.w	r2, r3, #8
 800f792:	8bbb      	ldrh	r3, [r7, #28]
 800f794:	3314      	adds	r3, #20
 800f796:	429a      	cmp	r2, r3
 800f798:	d333      	bcc.n	800f802 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800f79a:	8bfa      	ldrh	r2, [r7, #30]
 800f79c:	8bbb      	ldrh	r3, [r7, #28]
 800f79e:	4413      	add	r3, r2
 800f7a0:	b29b      	uxth	r3, r3
 800f7a2:	3308      	adds	r3, #8
 800f7a4:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800f7a6:	8a7b      	ldrh	r3, [r7, #18]
 800f7a8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f7ac:	d106      	bne.n	800f7bc <mem_malloc+0xb0>
 800f7ae:	4b4c      	ldr	r3, [pc, #304]	; (800f8e0 <mem_malloc+0x1d4>)
 800f7b0:	f240 3287 	movw	r2, #903	; 0x387
 800f7b4:	494b      	ldr	r1, [pc, #300]	; (800f8e4 <mem_malloc+0x1d8>)
 800f7b6:	484c      	ldr	r0, [pc, #304]	; (800f8e8 <mem_malloc+0x1dc>)
 800f7b8:	f009 fec0 	bl	801953c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800f7bc:	8a7b      	ldrh	r3, [r7, #18]
 800f7be:	4618      	mov	r0, r3
 800f7c0:	f7ff fd04 	bl	800f1cc <ptr_to_mem>
 800f7c4:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	2200      	movs	r2, #0
 800f7ca:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800f7cc:	697b      	ldr	r3, [r7, #20]
 800f7ce:	881a      	ldrh	r2, [r3, #0]
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	8bfa      	ldrh	r2, [r7, #30]
 800f7d8:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800f7da:	697b      	ldr	r3, [r7, #20]
 800f7dc:	8a7a      	ldrh	r2, [r7, #18]
 800f7de:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800f7e0:	697b      	ldr	r3, [r7, #20]
 800f7e2:	2201      	movs	r2, #1
 800f7e4:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	881b      	ldrh	r3, [r3, #0]
 800f7ea:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f7ee:	d00b      	beq.n	800f808 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	881b      	ldrh	r3, [r3, #0]
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	f7ff fce9 	bl	800f1cc <ptr_to_mem>
 800f7fa:	4602      	mov	r2, r0
 800f7fc:	8a7b      	ldrh	r3, [r7, #18]
 800f7fe:	8053      	strh	r3, [r2, #2]
 800f800:	e002      	b.n	800f808 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800f802:	697b      	ldr	r3, [r7, #20]
 800f804:	2201      	movs	r2, #1
 800f806:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800f808:	4b34      	ldr	r3, [pc, #208]	; (800f8dc <mem_malloc+0x1d0>)
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	697a      	ldr	r2, [r7, #20]
 800f80e:	429a      	cmp	r2, r3
 800f810:	d127      	bne.n	800f862 <mem_malloc+0x156>
          struct mem *cur = lfree;
 800f812:	4b32      	ldr	r3, [pc, #200]	; (800f8dc <mem_malloc+0x1d0>)
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800f818:	e005      	b.n	800f826 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800f81a:	69bb      	ldr	r3, [r7, #24]
 800f81c:	881b      	ldrh	r3, [r3, #0]
 800f81e:	4618      	mov	r0, r3
 800f820:	f7ff fcd4 	bl	800f1cc <ptr_to_mem>
 800f824:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800f826:	69bb      	ldr	r3, [r7, #24]
 800f828:	791b      	ldrb	r3, [r3, #4]
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d004      	beq.n	800f838 <mem_malloc+0x12c>
 800f82e:	4b2f      	ldr	r3, [pc, #188]	; (800f8ec <mem_malloc+0x1e0>)
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	69ba      	ldr	r2, [r7, #24]
 800f834:	429a      	cmp	r2, r3
 800f836:	d1f0      	bne.n	800f81a <mem_malloc+0x10e>
          }
          lfree = cur;
 800f838:	4a28      	ldr	r2, [pc, #160]	; (800f8dc <mem_malloc+0x1d0>)
 800f83a:	69bb      	ldr	r3, [r7, #24]
 800f83c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800f83e:	4b27      	ldr	r3, [pc, #156]	; (800f8dc <mem_malloc+0x1d0>)
 800f840:	681a      	ldr	r2, [r3, #0]
 800f842:	4b2a      	ldr	r3, [pc, #168]	; (800f8ec <mem_malloc+0x1e0>)
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	429a      	cmp	r2, r3
 800f848:	d00b      	beq.n	800f862 <mem_malloc+0x156>
 800f84a:	4b24      	ldr	r3, [pc, #144]	; (800f8dc <mem_malloc+0x1d0>)
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	791b      	ldrb	r3, [r3, #4]
 800f850:	2b00      	cmp	r3, #0
 800f852:	d006      	beq.n	800f862 <mem_malloc+0x156>
 800f854:	4b22      	ldr	r3, [pc, #136]	; (800f8e0 <mem_malloc+0x1d4>)
 800f856:	f240 32b5 	movw	r2, #949	; 0x3b5
 800f85a:	4925      	ldr	r1, [pc, #148]	; (800f8f0 <mem_malloc+0x1e4>)
 800f85c:	4822      	ldr	r0, [pc, #136]	; (800f8e8 <mem_malloc+0x1dc>)
 800f85e:	f009 fe6d 	bl	801953c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800f862:	8bba      	ldrh	r2, [r7, #28]
 800f864:	697b      	ldr	r3, [r7, #20]
 800f866:	4413      	add	r3, r2
 800f868:	3308      	adds	r3, #8
 800f86a:	4a20      	ldr	r2, [pc, #128]	; (800f8ec <mem_malloc+0x1e0>)
 800f86c:	6812      	ldr	r2, [r2, #0]
 800f86e:	4293      	cmp	r3, r2
 800f870:	d906      	bls.n	800f880 <mem_malloc+0x174>
 800f872:	4b1b      	ldr	r3, [pc, #108]	; (800f8e0 <mem_malloc+0x1d4>)
 800f874:	f240 32b9 	movw	r2, #953	; 0x3b9
 800f878:	491e      	ldr	r1, [pc, #120]	; (800f8f4 <mem_malloc+0x1e8>)
 800f87a:	481b      	ldr	r0, [pc, #108]	; (800f8e8 <mem_malloc+0x1dc>)
 800f87c:	f009 fe5e 	bl	801953c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800f880:	697b      	ldr	r3, [r7, #20]
 800f882:	f003 0303 	and.w	r3, r3, #3
 800f886:	2b00      	cmp	r3, #0
 800f888:	d006      	beq.n	800f898 <mem_malloc+0x18c>
 800f88a:	4b15      	ldr	r3, [pc, #84]	; (800f8e0 <mem_malloc+0x1d4>)
 800f88c:	f240 32bb 	movw	r2, #955	; 0x3bb
 800f890:	4919      	ldr	r1, [pc, #100]	; (800f8f8 <mem_malloc+0x1ec>)
 800f892:	4815      	ldr	r0, [pc, #84]	; (800f8e8 <mem_malloc+0x1dc>)
 800f894:	f009 fe52 	bl	801953c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800f898:	697b      	ldr	r3, [r7, #20]
 800f89a:	f003 0303 	and.w	r3, r3, #3
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d006      	beq.n	800f8b0 <mem_malloc+0x1a4>
 800f8a2:	4b0f      	ldr	r3, [pc, #60]	; (800f8e0 <mem_malloc+0x1d4>)
 800f8a4:	f240 32bd 	movw	r2, #957	; 0x3bd
 800f8a8:	4914      	ldr	r1, [pc, #80]	; (800f8fc <mem_malloc+0x1f0>)
 800f8aa:	480f      	ldr	r0, [pc, #60]	; (800f8e8 <mem_malloc+0x1dc>)
 800f8ac:	f009 fe46 	bl	801953c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800f8b0:	697b      	ldr	r3, [r7, #20]
 800f8b2:	3308      	adds	r3, #8
 800f8b4:	e00e      	b.n	800f8d4 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800f8b6:	8bfb      	ldrh	r3, [r7, #30]
 800f8b8:	4618      	mov	r0, r3
 800f8ba:	f7ff fc87 	bl	800f1cc <ptr_to_mem>
 800f8be:	4603      	mov	r3, r0
 800f8c0:	881b      	ldrh	r3, [r3, #0]
 800f8c2:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800f8c4:	8bfa      	ldrh	r2, [r7, #30]
 800f8c6:	8bbb      	ldrh	r3, [r7, #28]
 800f8c8:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800f8cc:	429a      	cmp	r2, r3
 800f8ce:	f4ff af44 	bcc.w	800f75a <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800f8d2:	2300      	movs	r3, #0
}
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	3720      	adds	r7, #32
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	bd80      	pop	{r7, pc}
 800f8dc:	200051cc 	.word	0x200051cc
 800f8e0:	0801bd2c 	.word	0x0801bd2c
 800f8e4:	0801bed4 	.word	0x0801bed4
 800f8e8:	0801bd74 	.word	0x0801bd74
 800f8ec:	200051c8 	.word	0x200051c8
 800f8f0:	0801bee8 	.word	0x0801bee8
 800f8f4:	0801bf04 	.word	0x0801bf04
 800f8f8:	0801bf34 	.word	0x0801bf34
 800f8fc:	0801bf64 	.word	0x0801bf64

0800f900 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800f900:	b480      	push	{r7}
 800f902:	b085      	sub	sp, #20
 800f904:	af00      	add	r7, sp, #0
 800f906:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	689b      	ldr	r3, [r3, #8]
 800f90c:	2200      	movs	r2, #0
 800f90e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	685b      	ldr	r3, [r3, #4]
 800f914:	3303      	adds	r3, #3
 800f916:	f023 0303 	bic.w	r3, r3, #3
 800f91a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800f91c:	2300      	movs	r3, #0
 800f91e:	60fb      	str	r3, [r7, #12]
 800f920:	e011      	b.n	800f946 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	689b      	ldr	r3, [r3, #8]
 800f926:	681a      	ldr	r2, [r3, #0]
 800f928:	68bb      	ldr	r3, [r7, #8]
 800f92a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	689b      	ldr	r3, [r3, #8]
 800f930:	68ba      	ldr	r2, [r7, #8]
 800f932:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	881b      	ldrh	r3, [r3, #0]
 800f938:	461a      	mov	r2, r3
 800f93a:	68bb      	ldr	r3, [r7, #8]
 800f93c:	4413      	add	r3, r2
 800f93e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	3301      	adds	r3, #1
 800f944:	60fb      	str	r3, [r7, #12]
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	885b      	ldrh	r3, [r3, #2]
 800f94a:	461a      	mov	r2, r3
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	4293      	cmp	r3, r2
 800f950:	dbe7      	blt.n	800f922 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800f952:	bf00      	nop
 800f954:	bf00      	nop
 800f956:	3714      	adds	r7, #20
 800f958:	46bd      	mov	sp, r7
 800f95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f95e:	4770      	bx	lr

0800f960 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800f960:	b580      	push	{r7, lr}
 800f962:	b082      	sub	sp, #8
 800f964:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f966:	2300      	movs	r3, #0
 800f968:	80fb      	strh	r3, [r7, #6]
 800f96a:	e009      	b.n	800f980 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800f96c:	88fb      	ldrh	r3, [r7, #6]
 800f96e:	4a08      	ldr	r2, [pc, #32]	; (800f990 <memp_init+0x30>)
 800f970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f974:	4618      	mov	r0, r3
 800f976:	f7ff ffc3 	bl	800f900 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f97a:	88fb      	ldrh	r3, [r7, #6]
 800f97c:	3301      	adds	r3, #1
 800f97e:	80fb      	strh	r3, [r7, #6]
 800f980:	88fb      	ldrh	r3, [r7, #6]
 800f982:	2b08      	cmp	r3, #8
 800f984:	d9f2      	bls.n	800f96c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800f986:	bf00      	nop
 800f988:	bf00      	nop
 800f98a:	3708      	adds	r7, #8
 800f98c:	46bd      	mov	sp, r7
 800f98e:	bd80      	pop	{r7, pc}
 800f990:	0801e780 	.word	0x0801e780

0800f994 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800f994:	b580      	push	{r7, lr}
 800f996:	b084      	sub	sp, #16
 800f998:	af00      	add	r7, sp, #0
 800f99a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	689b      	ldr	r3, [r3, #8]
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d012      	beq.n	800f9d0 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	689b      	ldr	r3, [r3, #8]
 800f9ae:	68fa      	ldr	r2, [r7, #12]
 800f9b0:	6812      	ldr	r2, [r2, #0]
 800f9b2:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	f003 0303 	and.w	r3, r3, #3
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d006      	beq.n	800f9cc <do_memp_malloc_pool+0x38>
 800f9be:	4b07      	ldr	r3, [pc, #28]	; (800f9dc <do_memp_malloc_pool+0x48>)
 800f9c0:	f44f 728c 	mov.w	r2, #280	; 0x118
 800f9c4:	4906      	ldr	r1, [pc, #24]	; (800f9e0 <do_memp_malloc_pool+0x4c>)
 800f9c6:	4807      	ldr	r0, [pc, #28]	; (800f9e4 <do_memp_malloc_pool+0x50>)
 800f9c8:	f009 fdb8 	bl	801953c <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	e000      	b.n	800f9d2 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800f9d0:	2300      	movs	r3, #0
}
 800f9d2:	4618      	mov	r0, r3
 800f9d4:	3710      	adds	r7, #16
 800f9d6:	46bd      	mov	sp, r7
 800f9d8:	bd80      	pop	{r7, pc}
 800f9da:	bf00      	nop
 800f9dc:	0801bf88 	.word	0x0801bf88
 800f9e0:	0801bfb8 	.word	0x0801bfb8
 800f9e4:	0801bfdc 	.word	0x0801bfdc

0800f9e8 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800f9e8:	b580      	push	{r7, lr}
 800f9ea:	b082      	sub	sp, #8
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d106      	bne.n	800fa04 <memp_malloc_pool+0x1c>
 800f9f6:	4b0a      	ldr	r3, [pc, #40]	; (800fa20 <memp_malloc_pool+0x38>)
 800f9f8:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800f9fc:	4909      	ldr	r1, [pc, #36]	; (800fa24 <memp_malloc_pool+0x3c>)
 800f9fe:	480a      	ldr	r0, [pc, #40]	; (800fa28 <memp_malloc_pool+0x40>)
 800fa00:	f009 fd9c 	bl	801953c <iprintf>
  if (desc == NULL) {
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d101      	bne.n	800fa0e <memp_malloc_pool+0x26>
    return NULL;
 800fa0a:	2300      	movs	r3, #0
 800fa0c:	e003      	b.n	800fa16 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800fa0e:	6878      	ldr	r0, [r7, #4]
 800fa10:	f7ff ffc0 	bl	800f994 <do_memp_malloc_pool>
 800fa14:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800fa16:	4618      	mov	r0, r3
 800fa18:	3708      	adds	r7, #8
 800fa1a:	46bd      	mov	sp, r7
 800fa1c:	bd80      	pop	{r7, pc}
 800fa1e:	bf00      	nop
 800fa20:	0801bf88 	.word	0x0801bf88
 800fa24:	0801c004 	.word	0x0801c004
 800fa28:	0801bfdc 	.word	0x0801bfdc

0800fa2c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800fa2c:	b580      	push	{r7, lr}
 800fa2e:	b084      	sub	sp, #16
 800fa30:	af00      	add	r7, sp, #0
 800fa32:	4603      	mov	r3, r0
 800fa34:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800fa36:	79fb      	ldrb	r3, [r7, #7]
 800fa38:	2b08      	cmp	r3, #8
 800fa3a:	d908      	bls.n	800fa4e <memp_malloc+0x22>
 800fa3c:	4b0a      	ldr	r3, [pc, #40]	; (800fa68 <memp_malloc+0x3c>)
 800fa3e:	f240 1257 	movw	r2, #343	; 0x157
 800fa42:	490a      	ldr	r1, [pc, #40]	; (800fa6c <memp_malloc+0x40>)
 800fa44:	480a      	ldr	r0, [pc, #40]	; (800fa70 <memp_malloc+0x44>)
 800fa46:	f009 fd79 	bl	801953c <iprintf>
 800fa4a:	2300      	movs	r3, #0
 800fa4c:	e008      	b.n	800fa60 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800fa4e:	79fb      	ldrb	r3, [r7, #7]
 800fa50:	4a08      	ldr	r2, [pc, #32]	; (800fa74 <memp_malloc+0x48>)
 800fa52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fa56:	4618      	mov	r0, r3
 800fa58:	f7ff ff9c 	bl	800f994 <do_memp_malloc_pool>
 800fa5c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800fa5e:	68fb      	ldr	r3, [r7, #12]
}
 800fa60:	4618      	mov	r0, r3
 800fa62:	3710      	adds	r7, #16
 800fa64:	46bd      	mov	sp, r7
 800fa66:	bd80      	pop	{r7, pc}
 800fa68:	0801bf88 	.word	0x0801bf88
 800fa6c:	0801c018 	.word	0x0801c018
 800fa70:	0801bfdc 	.word	0x0801bfdc
 800fa74:	0801e780 	.word	0x0801e780

0800fa78 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800fa78:	b580      	push	{r7, lr}
 800fa7a:	b084      	sub	sp, #16
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	6078      	str	r0, [r7, #4]
 800fa80:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800fa82:	683b      	ldr	r3, [r7, #0]
 800fa84:	f003 0303 	and.w	r3, r3, #3
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d006      	beq.n	800fa9a <do_memp_free_pool+0x22>
 800fa8c:	4b0a      	ldr	r3, [pc, #40]	; (800fab8 <do_memp_free_pool+0x40>)
 800fa8e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800fa92:	490a      	ldr	r1, [pc, #40]	; (800fabc <do_memp_free_pool+0x44>)
 800fa94:	480a      	ldr	r0, [pc, #40]	; (800fac0 <do_memp_free_pool+0x48>)
 800fa96:	f009 fd51 	bl	801953c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800fa9a:	683b      	ldr	r3, [r7, #0]
 800fa9c:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	689b      	ldr	r3, [r3, #8]
 800faa2:	681a      	ldr	r2, [r3, #0]
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	689b      	ldr	r3, [r3, #8]
 800faac:	68fa      	ldr	r2, [r7, #12]
 800faae:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800fab0:	bf00      	nop
 800fab2:	3710      	adds	r7, #16
 800fab4:	46bd      	mov	sp, r7
 800fab6:	bd80      	pop	{r7, pc}
 800fab8:	0801bf88 	.word	0x0801bf88
 800fabc:	0801c038 	.word	0x0801c038
 800fac0:	0801bfdc 	.word	0x0801bfdc

0800fac4 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800fac4:	b580      	push	{r7, lr}
 800fac6:	b082      	sub	sp, #8
 800fac8:	af00      	add	r7, sp, #0
 800faca:	6078      	str	r0, [r7, #4]
 800facc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d106      	bne.n	800fae2 <memp_free_pool+0x1e>
 800fad4:	4b0a      	ldr	r3, [pc, #40]	; (800fb00 <memp_free_pool+0x3c>)
 800fad6:	f240 1295 	movw	r2, #405	; 0x195
 800fada:	490a      	ldr	r1, [pc, #40]	; (800fb04 <memp_free_pool+0x40>)
 800fadc:	480a      	ldr	r0, [pc, #40]	; (800fb08 <memp_free_pool+0x44>)
 800fade:	f009 fd2d 	bl	801953c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d007      	beq.n	800faf8 <memp_free_pool+0x34>
 800fae8:	683b      	ldr	r3, [r7, #0]
 800faea:	2b00      	cmp	r3, #0
 800faec:	d004      	beq.n	800faf8 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800faee:	6839      	ldr	r1, [r7, #0]
 800faf0:	6878      	ldr	r0, [r7, #4]
 800faf2:	f7ff ffc1 	bl	800fa78 <do_memp_free_pool>
 800faf6:	e000      	b.n	800fafa <memp_free_pool+0x36>
    return;
 800faf8:	bf00      	nop
}
 800fafa:	3708      	adds	r7, #8
 800fafc:	46bd      	mov	sp, r7
 800fafe:	bd80      	pop	{r7, pc}
 800fb00:	0801bf88 	.word	0x0801bf88
 800fb04:	0801c004 	.word	0x0801c004
 800fb08:	0801bfdc 	.word	0x0801bfdc

0800fb0c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800fb0c:	b580      	push	{r7, lr}
 800fb0e:	b082      	sub	sp, #8
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	4603      	mov	r3, r0
 800fb14:	6039      	str	r1, [r7, #0]
 800fb16:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800fb18:	79fb      	ldrb	r3, [r7, #7]
 800fb1a:	2b08      	cmp	r3, #8
 800fb1c:	d907      	bls.n	800fb2e <memp_free+0x22>
 800fb1e:	4b0c      	ldr	r3, [pc, #48]	; (800fb50 <memp_free+0x44>)
 800fb20:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800fb24:	490b      	ldr	r1, [pc, #44]	; (800fb54 <memp_free+0x48>)
 800fb26:	480c      	ldr	r0, [pc, #48]	; (800fb58 <memp_free+0x4c>)
 800fb28:	f009 fd08 	bl	801953c <iprintf>
 800fb2c:	e00c      	b.n	800fb48 <memp_free+0x3c>

  if (mem == NULL) {
 800fb2e:	683b      	ldr	r3, [r7, #0]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d008      	beq.n	800fb46 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800fb34:	79fb      	ldrb	r3, [r7, #7]
 800fb36:	4a09      	ldr	r2, [pc, #36]	; (800fb5c <memp_free+0x50>)
 800fb38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb3c:	6839      	ldr	r1, [r7, #0]
 800fb3e:	4618      	mov	r0, r3
 800fb40:	f7ff ff9a 	bl	800fa78 <do_memp_free_pool>
 800fb44:	e000      	b.n	800fb48 <memp_free+0x3c>
    return;
 800fb46:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800fb48:	3708      	adds	r7, #8
 800fb4a:	46bd      	mov	sp, r7
 800fb4c:	bd80      	pop	{r7, pc}
 800fb4e:	bf00      	nop
 800fb50:	0801bf88 	.word	0x0801bf88
 800fb54:	0801c058 	.word	0x0801c058
 800fb58:	0801bfdc 	.word	0x0801bfdc
 800fb5c:	0801e780 	.word	0x0801e780

0800fb60 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800fb60:	b480      	push	{r7}
 800fb62:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800fb64:	bf00      	nop
 800fb66:	46bd      	mov	sp, r7
 800fb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb6c:	4770      	bx	lr
	...

0800fb70 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800fb70:	b580      	push	{r7, lr}
 800fb72:	b086      	sub	sp, #24
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	60f8      	str	r0, [r7, #12]
 800fb78:	60b9      	str	r1, [r7, #8]
 800fb7a:	607a      	str	r2, [r7, #4]
 800fb7c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d108      	bne.n	800fb96 <netif_add+0x26>
 800fb84:	4b57      	ldr	r3, [pc, #348]	; (800fce4 <netif_add+0x174>)
 800fb86:	f240 1227 	movw	r2, #295	; 0x127
 800fb8a:	4957      	ldr	r1, [pc, #348]	; (800fce8 <netif_add+0x178>)
 800fb8c:	4857      	ldr	r0, [pc, #348]	; (800fcec <netif_add+0x17c>)
 800fb8e:	f009 fcd5 	bl	801953c <iprintf>
 800fb92:	2300      	movs	r3, #0
 800fb94:	e0a2      	b.n	800fcdc <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800fb96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d108      	bne.n	800fbae <netif_add+0x3e>
 800fb9c:	4b51      	ldr	r3, [pc, #324]	; (800fce4 <netif_add+0x174>)
 800fb9e:	f44f 7294 	mov.w	r2, #296	; 0x128
 800fba2:	4953      	ldr	r1, [pc, #332]	; (800fcf0 <netif_add+0x180>)
 800fba4:	4851      	ldr	r0, [pc, #324]	; (800fcec <netif_add+0x17c>)
 800fba6:	f009 fcc9 	bl	801953c <iprintf>
 800fbaa:	2300      	movs	r3, #0
 800fbac:	e096      	b.n	800fcdc <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800fbae:	68bb      	ldr	r3, [r7, #8]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d101      	bne.n	800fbb8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800fbb4:	4b4f      	ldr	r3, [pc, #316]	; (800fcf4 <netif_add+0x184>)
 800fbb6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d101      	bne.n	800fbc2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800fbbe:	4b4d      	ldr	r3, [pc, #308]	; (800fcf4 <netif_add+0x184>)
 800fbc0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800fbc2:	683b      	ldr	r3, [r7, #0]
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d101      	bne.n	800fbcc <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800fbc8:	4b4a      	ldr	r3, [pc, #296]	; (800fcf4 <netif_add+0x184>)
 800fbca:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	2200      	movs	r2, #0
 800fbd0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	2200      	movs	r2, #0
 800fbd6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	2200      	movs	r2, #0
 800fbdc:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	4a45      	ldr	r2, [pc, #276]	; (800fcf8 <netif_add+0x188>)
 800fbe2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	2200      	movs	r2, #0
 800fbe8:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	2200      	movs	r2, #0
 800fbee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	2200      	movs	r2, #0
 800fbf6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	6a3a      	ldr	r2, [r7, #32]
 800fbfc:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800fbfe:	4b3f      	ldr	r3, [pc, #252]	; (800fcfc <netif_add+0x18c>)
 800fc00:	781a      	ldrb	r2, [r3, #0]
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fc0c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800fc0e:	683b      	ldr	r3, [r7, #0]
 800fc10:	687a      	ldr	r2, [r7, #4]
 800fc12:	68b9      	ldr	r1, [r7, #8]
 800fc14:	68f8      	ldr	r0, [r7, #12]
 800fc16:	f000 f913 	bl	800fe40 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800fc1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc1c:	68f8      	ldr	r0, [r7, #12]
 800fc1e:	4798      	blx	r3
 800fc20:	4603      	mov	r3, r0
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d001      	beq.n	800fc2a <netif_add+0xba>
    return NULL;
 800fc26:	2300      	movs	r3, #0
 800fc28:	e058      	b.n	800fcdc <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fc30:	2bff      	cmp	r3, #255	; 0xff
 800fc32:	d103      	bne.n	800fc3c <netif_add+0xcc>
        netif->num = 0;
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	2200      	movs	r2, #0
 800fc38:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800fc3c:	2300      	movs	r3, #0
 800fc3e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800fc40:	4b2f      	ldr	r3, [pc, #188]	; (800fd00 <netif_add+0x190>)
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	617b      	str	r3, [r7, #20]
 800fc46:	e02b      	b.n	800fca0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800fc48:	697a      	ldr	r2, [r7, #20]
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	429a      	cmp	r2, r3
 800fc4e:	d106      	bne.n	800fc5e <netif_add+0xee>
 800fc50:	4b24      	ldr	r3, [pc, #144]	; (800fce4 <netif_add+0x174>)
 800fc52:	f240 128b 	movw	r2, #395	; 0x18b
 800fc56:	492b      	ldr	r1, [pc, #172]	; (800fd04 <netif_add+0x194>)
 800fc58:	4824      	ldr	r0, [pc, #144]	; (800fcec <netif_add+0x17c>)
 800fc5a:	f009 fc6f 	bl	801953c <iprintf>
        num_netifs++;
 800fc5e:	693b      	ldr	r3, [r7, #16]
 800fc60:	3301      	adds	r3, #1
 800fc62:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800fc64:	693b      	ldr	r3, [r7, #16]
 800fc66:	2bff      	cmp	r3, #255	; 0xff
 800fc68:	dd06      	ble.n	800fc78 <netif_add+0x108>
 800fc6a:	4b1e      	ldr	r3, [pc, #120]	; (800fce4 <netif_add+0x174>)
 800fc6c:	f240 128d 	movw	r2, #397	; 0x18d
 800fc70:	4925      	ldr	r1, [pc, #148]	; (800fd08 <netif_add+0x198>)
 800fc72:	481e      	ldr	r0, [pc, #120]	; (800fcec <netif_add+0x17c>)
 800fc74:	f009 fc62 	bl	801953c <iprintf>
        if (netif2->num == netif->num) {
 800fc78:	697b      	ldr	r3, [r7, #20]
 800fc7a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fc84:	429a      	cmp	r2, r3
 800fc86:	d108      	bne.n	800fc9a <netif_add+0x12a>
          netif->num++;
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fc8e:	3301      	adds	r3, #1
 800fc90:	b2da      	uxtb	r2, r3
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800fc98:	e005      	b.n	800fca6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800fc9a:	697b      	ldr	r3, [r7, #20]
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	617b      	str	r3, [r7, #20]
 800fca0:	697b      	ldr	r3, [r7, #20]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d1d0      	bne.n	800fc48 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800fca6:	697b      	ldr	r3, [r7, #20]
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d1be      	bne.n	800fc2a <netif_add+0xba>
  }
  if (netif->num == 254) {
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fcb2:	2bfe      	cmp	r3, #254	; 0xfe
 800fcb4:	d103      	bne.n	800fcbe <netif_add+0x14e>
    netif_num = 0;
 800fcb6:	4b11      	ldr	r3, [pc, #68]	; (800fcfc <netif_add+0x18c>)
 800fcb8:	2200      	movs	r2, #0
 800fcba:	701a      	strb	r2, [r3, #0]
 800fcbc:	e006      	b.n	800fccc <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fcc4:	3301      	adds	r3, #1
 800fcc6:	b2da      	uxtb	r2, r3
 800fcc8:	4b0c      	ldr	r3, [pc, #48]	; (800fcfc <netif_add+0x18c>)
 800fcca:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800fccc:	4b0c      	ldr	r3, [pc, #48]	; (800fd00 <netif_add+0x190>)
 800fcce:	681a      	ldr	r2, [r3, #0]
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800fcd4:	4a0a      	ldr	r2, [pc, #40]	; (800fd00 <netif_add+0x190>)
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800fcda:	68fb      	ldr	r3, [r7, #12]
}
 800fcdc:	4618      	mov	r0, r3
 800fcde:	3718      	adds	r7, #24
 800fce0:	46bd      	mov	sp, r7
 800fce2:	bd80      	pop	{r7, pc}
 800fce4:	0801c074 	.word	0x0801c074
 800fce8:	0801c108 	.word	0x0801c108
 800fcec:	0801c0c4 	.word	0x0801c0c4
 800fcf0:	0801c124 	.word	0x0801c124
 800fcf4:	0801e7e4 	.word	0x0801e7e4
 800fcf8:	0801011b 	.word	0x0801011b
 800fcfc:	200080c4 	.word	0x200080c4
 800fd00:	200080bc 	.word	0x200080bc
 800fd04:	0801c148 	.word	0x0801c148
 800fd08:	0801c15c 	.word	0x0801c15c

0800fd0c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800fd0c:	b580      	push	{r7, lr}
 800fd0e:	b082      	sub	sp, #8
 800fd10:	af00      	add	r7, sp, #0
 800fd12:	6078      	str	r0, [r7, #4]
 800fd14:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800fd16:	6839      	ldr	r1, [r7, #0]
 800fd18:	6878      	ldr	r0, [r7, #4]
 800fd1a:	f002 fb23 	bl	8012364 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800fd1e:	6839      	ldr	r1, [r7, #0]
 800fd20:	6878      	ldr	r0, [r7, #4]
 800fd22:	f006 fbc5 	bl	80164b0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800fd26:	bf00      	nop
 800fd28:	3708      	adds	r7, #8
 800fd2a:	46bd      	mov	sp, r7
 800fd2c:	bd80      	pop	{r7, pc}
	...

0800fd30 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800fd30:	b580      	push	{r7, lr}
 800fd32:	b086      	sub	sp, #24
 800fd34:	af00      	add	r7, sp, #0
 800fd36:	60f8      	str	r0, [r7, #12]
 800fd38:	60b9      	str	r1, [r7, #8]
 800fd3a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800fd3c:	68bb      	ldr	r3, [r7, #8]
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d106      	bne.n	800fd50 <netif_do_set_ipaddr+0x20>
 800fd42:	4b1d      	ldr	r3, [pc, #116]	; (800fdb8 <netif_do_set_ipaddr+0x88>)
 800fd44:	f240 12cb 	movw	r2, #459	; 0x1cb
 800fd48:	491c      	ldr	r1, [pc, #112]	; (800fdbc <netif_do_set_ipaddr+0x8c>)
 800fd4a:	481d      	ldr	r0, [pc, #116]	; (800fdc0 <netif_do_set_ipaddr+0x90>)
 800fd4c:	f009 fbf6 	bl	801953c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d106      	bne.n	800fd64 <netif_do_set_ipaddr+0x34>
 800fd56:	4b18      	ldr	r3, [pc, #96]	; (800fdb8 <netif_do_set_ipaddr+0x88>)
 800fd58:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800fd5c:	4917      	ldr	r1, [pc, #92]	; (800fdbc <netif_do_set_ipaddr+0x8c>)
 800fd5e:	4818      	ldr	r0, [pc, #96]	; (800fdc0 <netif_do_set_ipaddr+0x90>)
 800fd60:	f009 fbec 	bl	801953c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800fd64:	68bb      	ldr	r3, [r7, #8]
 800fd66:	681a      	ldr	r2, [r3, #0]
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	3304      	adds	r3, #4
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	429a      	cmp	r2, r3
 800fd70:	d01c      	beq.n	800fdac <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800fd72:	68bb      	ldr	r3, [r7, #8]
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	3304      	adds	r3, #4
 800fd7c:	681a      	ldr	r2, [r3, #0]
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800fd82:	f107 0314 	add.w	r3, r7, #20
 800fd86:	4619      	mov	r1, r3
 800fd88:	6878      	ldr	r0, [r7, #4]
 800fd8a:	f7ff ffbf 	bl	800fd0c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800fd8e:	68bb      	ldr	r3, [r7, #8]
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d002      	beq.n	800fd9a <netif_do_set_ipaddr+0x6a>
 800fd94:	68bb      	ldr	r3, [r7, #8]
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	e000      	b.n	800fd9c <netif_do_set_ipaddr+0x6c>
 800fd9a:	2300      	movs	r3, #0
 800fd9c:	68fa      	ldr	r2, [r7, #12]
 800fd9e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800fda0:	2101      	movs	r1, #1
 800fda2:	68f8      	ldr	r0, [r7, #12]
 800fda4:	f000 f8d2 	bl	800ff4c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800fda8:	2301      	movs	r3, #1
 800fdaa:	e000      	b.n	800fdae <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800fdac:	2300      	movs	r3, #0
}
 800fdae:	4618      	mov	r0, r3
 800fdb0:	3718      	adds	r7, #24
 800fdb2:	46bd      	mov	sp, r7
 800fdb4:	bd80      	pop	{r7, pc}
 800fdb6:	bf00      	nop
 800fdb8:	0801c074 	.word	0x0801c074
 800fdbc:	0801c18c 	.word	0x0801c18c
 800fdc0:	0801c0c4 	.word	0x0801c0c4

0800fdc4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800fdc4:	b480      	push	{r7}
 800fdc6:	b085      	sub	sp, #20
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	60f8      	str	r0, [r7, #12]
 800fdcc:	60b9      	str	r1, [r7, #8]
 800fdce:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800fdd0:	68bb      	ldr	r3, [r7, #8]
 800fdd2:	681a      	ldr	r2, [r3, #0]
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	3308      	adds	r3, #8
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	429a      	cmp	r2, r3
 800fddc:	d00a      	beq.n	800fdf4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800fdde:	68bb      	ldr	r3, [r7, #8]
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d002      	beq.n	800fdea <netif_do_set_netmask+0x26>
 800fde4:	68bb      	ldr	r3, [r7, #8]
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	e000      	b.n	800fdec <netif_do_set_netmask+0x28>
 800fdea:	2300      	movs	r3, #0
 800fdec:	68fa      	ldr	r2, [r7, #12]
 800fdee:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800fdf0:	2301      	movs	r3, #1
 800fdf2:	e000      	b.n	800fdf6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800fdf4:	2300      	movs	r3, #0
}
 800fdf6:	4618      	mov	r0, r3
 800fdf8:	3714      	adds	r7, #20
 800fdfa:	46bd      	mov	sp, r7
 800fdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe00:	4770      	bx	lr

0800fe02 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800fe02:	b480      	push	{r7}
 800fe04:	b085      	sub	sp, #20
 800fe06:	af00      	add	r7, sp, #0
 800fe08:	60f8      	str	r0, [r7, #12]
 800fe0a:	60b9      	str	r1, [r7, #8]
 800fe0c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800fe0e:	68bb      	ldr	r3, [r7, #8]
 800fe10:	681a      	ldr	r2, [r3, #0]
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	330c      	adds	r3, #12
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	429a      	cmp	r2, r3
 800fe1a:	d00a      	beq.n	800fe32 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800fe1c:	68bb      	ldr	r3, [r7, #8]
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d002      	beq.n	800fe28 <netif_do_set_gw+0x26>
 800fe22:	68bb      	ldr	r3, [r7, #8]
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	e000      	b.n	800fe2a <netif_do_set_gw+0x28>
 800fe28:	2300      	movs	r3, #0
 800fe2a:	68fa      	ldr	r2, [r7, #12]
 800fe2c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800fe2e:	2301      	movs	r3, #1
 800fe30:	e000      	b.n	800fe34 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800fe32:	2300      	movs	r3, #0
}
 800fe34:	4618      	mov	r0, r3
 800fe36:	3714      	adds	r7, #20
 800fe38:	46bd      	mov	sp, r7
 800fe3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe3e:	4770      	bx	lr

0800fe40 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800fe40:	b580      	push	{r7, lr}
 800fe42:	b088      	sub	sp, #32
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	60f8      	str	r0, [r7, #12]
 800fe48:	60b9      	str	r1, [r7, #8]
 800fe4a:	607a      	str	r2, [r7, #4]
 800fe4c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800fe4e:	2300      	movs	r3, #0
 800fe50:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800fe52:	2300      	movs	r3, #0
 800fe54:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800fe56:	68bb      	ldr	r3, [r7, #8]
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d101      	bne.n	800fe60 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800fe5c:	4b1c      	ldr	r3, [pc, #112]	; (800fed0 <netif_set_addr+0x90>)
 800fe5e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d101      	bne.n	800fe6a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800fe66:	4b1a      	ldr	r3, [pc, #104]	; (800fed0 <netif_set_addr+0x90>)
 800fe68:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800fe6a:	683b      	ldr	r3, [r7, #0]
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d101      	bne.n	800fe74 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800fe70:	4b17      	ldr	r3, [pc, #92]	; (800fed0 <netif_set_addr+0x90>)
 800fe72:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800fe74:	68bb      	ldr	r3, [r7, #8]
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d003      	beq.n	800fe82 <netif_set_addr+0x42>
 800fe7a:	68bb      	ldr	r3, [r7, #8]
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d101      	bne.n	800fe86 <netif_set_addr+0x46>
 800fe82:	2301      	movs	r3, #1
 800fe84:	e000      	b.n	800fe88 <netif_set_addr+0x48>
 800fe86:	2300      	movs	r3, #0
 800fe88:	617b      	str	r3, [r7, #20]
  if (remove) {
 800fe8a:	697b      	ldr	r3, [r7, #20]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d006      	beq.n	800fe9e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800fe90:	f107 0310 	add.w	r3, r7, #16
 800fe94:	461a      	mov	r2, r3
 800fe96:	68b9      	ldr	r1, [r7, #8]
 800fe98:	68f8      	ldr	r0, [r7, #12]
 800fe9a:	f7ff ff49 	bl	800fd30 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800fe9e:	69fa      	ldr	r2, [r7, #28]
 800fea0:	6879      	ldr	r1, [r7, #4]
 800fea2:	68f8      	ldr	r0, [r7, #12]
 800fea4:	f7ff ff8e 	bl	800fdc4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800fea8:	69ba      	ldr	r2, [r7, #24]
 800feaa:	6839      	ldr	r1, [r7, #0]
 800feac:	68f8      	ldr	r0, [r7, #12]
 800feae:	f7ff ffa8 	bl	800fe02 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800feb2:	697b      	ldr	r3, [r7, #20]
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d106      	bne.n	800fec6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800feb8:	f107 0310 	add.w	r3, r7, #16
 800febc:	461a      	mov	r2, r3
 800febe:	68b9      	ldr	r1, [r7, #8]
 800fec0:	68f8      	ldr	r0, [r7, #12]
 800fec2:	f7ff ff35 	bl	800fd30 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800fec6:	bf00      	nop
 800fec8:	3720      	adds	r7, #32
 800feca:	46bd      	mov	sp, r7
 800fecc:	bd80      	pop	{r7, pc}
 800fece:	bf00      	nop
 800fed0:	0801e7e4 	.word	0x0801e7e4

0800fed4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800fed4:	b480      	push	{r7}
 800fed6:	b083      	sub	sp, #12
 800fed8:	af00      	add	r7, sp, #0
 800feda:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800fedc:	4a04      	ldr	r2, [pc, #16]	; (800fef0 <netif_set_default+0x1c>)
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800fee2:	bf00      	nop
 800fee4:	370c      	adds	r7, #12
 800fee6:	46bd      	mov	sp, r7
 800fee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feec:	4770      	bx	lr
 800feee:	bf00      	nop
 800fef0:	200080c0 	.word	0x200080c0

0800fef4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800fef4:	b580      	push	{r7, lr}
 800fef6:	b082      	sub	sp, #8
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d107      	bne.n	800ff12 <netif_set_up+0x1e>
 800ff02:	4b0f      	ldr	r3, [pc, #60]	; (800ff40 <netif_set_up+0x4c>)
 800ff04:	f44f 7254 	mov.w	r2, #848	; 0x350
 800ff08:	490e      	ldr	r1, [pc, #56]	; (800ff44 <netif_set_up+0x50>)
 800ff0a:	480f      	ldr	r0, [pc, #60]	; (800ff48 <netif_set_up+0x54>)
 800ff0c:	f009 fb16 	bl	801953c <iprintf>
 800ff10:	e013      	b.n	800ff3a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ff18:	f003 0301 	and.w	r3, r3, #1
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d10c      	bne.n	800ff3a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ff26:	f043 0301 	orr.w	r3, r3, #1
 800ff2a:	b2da      	uxtb	r2, r3
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ff32:	2103      	movs	r1, #3
 800ff34:	6878      	ldr	r0, [r7, #4]
 800ff36:	f000 f809 	bl	800ff4c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800ff3a:	3708      	adds	r7, #8
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	bd80      	pop	{r7, pc}
 800ff40:	0801c074 	.word	0x0801c074
 800ff44:	0801c1fc 	.word	0x0801c1fc
 800ff48:	0801c0c4 	.word	0x0801c0c4

0800ff4c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	b082      	sub	sp, #8
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	6078      	str	r0, [r7, #4]
 800ff54:	460b      	mov	r3, r1
 800ff56:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d106      	bne.n	800ff6c <netif_issue_reports+0x20>
 800ff5e:	4b18      	ldr	r3, [pc, #96]	; (800ffc0 <netif_issue_reports+0x74>)
 800ff60:	f240 326d 	movw	r2, #877	; 0x36d
 800ff64:	4917      	ldr	r1, [pc, #92]	; (800ffc4 <netif_issue_reports+0x78>)
 800ff66:	4818      	ldr	r0, [pc, #96]	; (800ffc8 <netif_issue_reports+0x7c>)
 800ff68:	f009 fae8 	bl	801953c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ff72:	f003 0304 	and.w	r3, r3, #4
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d01e      	beq.n	800ffb8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ff80:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d017      	beq.n	800ffb8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ff88:	78fb      	ldrb	r3, [r7, #3]
 800ff8a:	f003 0301 	and.w	r3, r3, #1
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d013      	beq.n	800ffba <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	3304      	adds	r3, #4
 800ff96:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d00e      	beq.n	800ffba <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ffa2:	f003 0308 	and.w	r3, r3, #8
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d007      	beq.n	800ffba <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	3304      	adds	r3, #4
 800ffae:	4619      	mov	r1, r3
 800ffb0:	6878      	ldr	r0, [r7, #4]
 800ffb2:	f007 f9e7 	bl	8017384 <etharp_request>
 800ffb6:	e000      	b.n	800ffba <netif_issue_reports+0x6e>
    return;
 800ffb8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800ffba:	3708      	adds	r7, #8
 800ffbc:	46bd      	mov	sp, r7
 800ffbe:	bd80      	pop	{r7, pc}
 800ffc0:	0801c074 	.word	0x0801c074
 800ffc4:	0801c218 	.word	0x0801c218
 800ffc8:	0801c0c4 	.word	0x0801c0c4

0800ffcc <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800ffcc:	b580      	push	{r7, lr}
 800ffce:	b082      	sub	sp, #8
 800ffd0:	af00      	add	r7, sp, #0
 800ffd2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d107      	bne.n	800ffea <netif_set_down+0x1e>
 800ffda:	4b12      	ldr	r3, [pc, #72]	; (8010024 <netif_set_down+0x58>)
 800ffdc:	f240 329b 	movw	r2, #923	; 0x39b
 800ffe0:	4911      	ldr	r1, [pc, #68]	; (8010028 <netif_set_down+0x5c>)
 800ffe2:	4812      	ldr	r0, [pc, #72]	; (801002c <netif_set_down+0x60>)
 800ffe4:	f009 faaa 	bl	801953c <iprintf>
 800ffe8:	e019      	b.n	801001e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fff0:	f003 0301 	and.w	r3, r3, #1
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d012      	beq.n	801001e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fffe:	f023 0301 	bic.w	r3, r3, #1
 8010002:	b2da      	uxtb	r2, r3
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010010:	f003 0308 	and.w	r3, r3, #8
 8010014:	2b00      	cmp	r3, #0
 8010016:	d002      	beq.n	801001e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8010018:	6878      	ldr	r0, [r7, #4]
 801001a:	f006 fd71 	bl	8016b00 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 801001e:	3708      	adds	r7, #8
 8010020:	46bd      	mov	sp, r7
 8010022:	bd80      	pop	{r7, pc}
 8010024:	0801c074 	.word	0x0801c074
 8010028:	0801c23c 	.word	0x0801c23c
 801002c:	0801c0c4 	.word	0x0801c0c4

08010030 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8010030:	b580      	push	{r7, lr}
 8010032:	b082      	sub	sp, #8
 8010034:	af00      	add	r7, sp, #0
 8010036:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	2b00      	cmp	r3, #0
 801003c:	d107      	bne.n	801004e <netif_set_link_up+0x1e>
 801003e:	4b13      	ldr	r3, [pc, #76]	; (801008c <netif_set_link_up+0x5c>)
 8010040:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8010044:	4912      	ldr	r1, [pc, #72]	; (8010090 <netif_set_link_up+0x60>)
 8010046:	4813      	ldr	r0, [pc, #76]	; (8010094 <netif_set_link_up+0x64>)
 8010048:	f009 fa78 	bl	801953c <iprintf>
 801004c:	e01b      	b.n	8010086 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010054:	f003 0304 	and.w	r3, r3, #4
 8010058:	2b00      	cmp	r3, #0
 801005a:	d114      	bne.n	8010086 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010062:	f043 0304 	orr.w	r3, r3, #4
 8010066:	b2da      	uxtb	r2, r3
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801006e:	2103      	movs	r1, #3
 8010070:	6878      	ldr	r0, [r7, #4]
 8010072:	f7ff ff6b 	bl	800ff4c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	69db      	ldr	r3, [r3, #28]
 801007a:	2b00      	cmp	r3, #0
 801007c:	d003      	beq.n	8010086 <netif_set_link_up+0x56>
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	69db      	ldr	r3, [r3, #28]
 8010082:	6878      	ldr	r0, [r7, #4]
 8010084:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8010086:	3708      	adds	r7, #8
 8010088:	46bd      	mov	sp, r7
 801008a:	bd80      	pop	{r7, pc}
 801008c:	0801c074 	.word	0x0801c074
 8010090:	0801c25c 	.word	0x0801c25c
 8010094:	0801c0c4 	.word	0x0801c0c4

08010098 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8010098:	b580      	push	{r7, lr}
 801009a:	b082      	sub	sp, #8
 801009c:	af00      	add	r7, sp, #0
 801009e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d107      	bne.n	80100b6 <netif_set_link_down+0x1e>
 80100a6:	4b11      	ldr	r3, [pc, #68]	; (80100ec <netif_set_link_down+0x54>)
 80100a8:	f240 4206 	movw	r2, #1030	; 0x406
 80100ac:	4910      	ldr	r1, [pc, #64]	; (80100f0 <netif_set_link_down+0x58>)
 80100ae:	4811      	ldr	r0, [pc, #68]	; (80100f4 <netif_set_link_down+0x5c>)
 80100b0:	f009 fa44 	bl	801953c <iprintf>
 80100b4:	e017      	b.n	80100e6 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80100bc:	f003 0304 	and.w	r3, r3, #4
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d010      	beq.n	80100e6 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80100ca:	f023 0304 	bic.w	r3, r3, #4
 80100ce:	b2da      	uxtb	r2, r3
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	69db      	ldr	r3, [r3, #28]
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d003      	beq.n	80100e6 <netif_set_link_down+0x4e>
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	69db      	ldr	r3, [r3, #28]
 80100e2:	6878      	ldr	r0, [r7, #4]
 80100e4:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80100e6:	3708      	adds	r7, #8
 80100e8:	46bd      	mov	sp, r7
 80100ea:	bd80      	pop	{r7, pc}
 80100ec:	0801c074 	.word	0x0801c074
 80100f0:	0801c280 	.word	0x0801c280
 80100f4:	0801c0c4 	.word	0x0801c0c4

080100f8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80100f8:	b480      	push	{r7}
 80100fa:	b083      	sub	sp, #12
 80100fc:	af00      	add	r7, sp, #0
 80100fe:	6078      	str	r0, [r7, #4]
 8010100:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	2b00      	cmp	r3, #0
 8010106:	d002      	beq.n	801010e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	683a      	ldr	r2, [r7, #0]
 801010c:	61da      	str	r2, [r3, #28]
  }
}
 801010e:	bf00      	nop
 8010110:	370c      	adds	r7, #12
 8010112:	46bd      	mov	sp, r7
 8010114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010118:	4770      	bx	lr

0801011a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 801011a:	b480      	push	{r7}
 801011c:	b085      	sub	sp, #20
 801011e:	af00      	add	r7, sp, #0
 8010120:	60f8      	str	r0, [r7, #12]
 8010122:	60b9      	str	r1, [r7, #8]
 8010124:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8010126:	f06f 030b 	mvn.w	r3, #11
}
 801012a:	4618      	mov	r0, r3
 801012c:	3714      	adds	r7, #20
 801012e:	46bd      	mov	sp, r7
 8010130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010134:	4770      	bx	lr
	...

08010138 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8010138:	b480      	push	{r7}
 801013a:	b085      	sub	sp, #20
 801013c:	af00      	add	r7, sp, #0
 801013e:	4603      	mov	r3, r0
 8010140:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8010142:	79fb      	ldrb	r3, [r7, #7]
 8010144:	2b00      	cmp	r3, #0
 8010146:	d013      	beq.n	8010170 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8010148:	4b0d      	ldr	r3, [pc, #52]	; (8010180 <netif_get_by_index+0x48>)
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	60fb      	str	r3, [r7, #12]
 801014e:	e00c      	b.n	801016a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010156:	3301      	adds	r3, #1
 8010158:	b2db      	uxtb	r3, r3
 801015a:	79fa      	ldrb	r2, [r7, #7]
 801015c:	429a      	cmp	r2, r3
 801015e:	d101      	bne.n	8010164 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	e006      	b.n	8010172 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	60fb      	str	r3, [r7, #12]
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	2b00      	cmp	r3, #0
 801016e:	d1ef      	bne.n	8010150 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8010170:	2300      	movs	r3, #0
}
 8010172:	4618      	mov	r0, r3
 8010174:	3714      	adds	r7, #20
 8010176:	46bd      	mov	sp, r7
 8010178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801017c:	4770      	bx	lr
 801017e:	bf00      	nop
 8010180:	200080bc 	.word	0x200080bc

08010184 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8010184:	b480      	push	{r7}
 8010186:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8010188:	4b03      	ldr	r3, [pc, #12]	; (8010198 <pbuf_pool_is_empty+0x14>)
 801018a:	2201      	movs	r2, #1
 801018c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 801018e:	bf00      	nop
 8010190:	46bd      	mov	sp, r7
 8010192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010196:	4770      	bx	lr
 8010198:	200080c5 	.word	0x200080c5

0801019c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 801019c:	b480      	push	{r7}
 801019e:	b085      	sub	sp, #20
 80101a0:	af00      	add	r7, sp, #0
 80101a2:	60f8      	str	r0, [r7, #12]
 80101a4:	60b9      	str	r1, [r7, #8]
 80101a6:	4611      	mov	r1, r2
 80101a8:	461a      	mov	r2, r3
 80101aa:	460b      	mov	r3, r1
 80101ac:	80fb      	strh	r3, [r7, #6]
 80101ae:	4613      	mov	r3, r2
 80101b0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	2200      	movs	r2, #0
 80101b6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	68ba      	ldr	r2, [r7, #8]
 80101bc:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	88fa      	ldrh	r2, [r7, #6]
 80101c2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	88ba      	ldrh	r2, [r7, #4]
 80101c8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80101ca:	8b3b      	ldrh	r3, [r7, #24]
 80101cc:	b2da      	uxtb	r2, r3
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	7f3a      	ldrb	r2, [r7, #28]
 80101d6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	2201      	movs	r2, #1
 80101dc:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	2200      	movs	r2, #0
 80101e2:	73da      	strb	r2, [r3, #15]
}
 80101e4:	bf00      	nop
 80101e6:	3714      	adds	r7, #20
 80101e8:	46bd      	mov	sp, r7
 80101ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ee:	4770      	bx	lr

080101f0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80101f0:	b580      	push	{r7, lr}
 80101f2:	b08c      	sub	sp, #48	; 0x30
 80101f4:	af02      	add	r7, sp, #8
 80101f6:	4603      	mov	r3, r0
 80101f8:	71fb      	strb	r3, [r7, #7]
 80101fa:	460b      	mov	r3, r1
 80101fc:	80bb      	strh	r3, [r7, #4]
 80101fe:	4613      	mov	r3, r2
 8010200:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8010202:	79fb      	ldrb	r3, [r7, #7]
 8010204:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8010206:	887b      	ldrh	r3, [r7, #2]
 8010208:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 801020c:	d07f      	beq.n	801030e <pbuf_alloc+0x11e>
 801020e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8010212:	f300 80c8 	bgt.w	80103a6 <pbuf_alloc+0x1b6>
 8010216:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 801021a:	d010      	beq.n	801023e <pbuf_alloc+0x4e>
 801021c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8010220:	f300 80c1 	bgt.w	80103a6 <pbuf_alloc+0x1b6>
 8010224:	2b01      	cmp	r3, #1
 8010226:	d002      	beq.n	801022e <pbuf_alloc+0x3e>
 8010228:	2b41      	cmp	r3, #65	; 0x41
 801022a:	f040 80bc 	bne.w	80103a6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 801022e:	887a      	ldrh	r2, [r7, #2]
 8010230:	88bb      	ldrh	r3, [r7, #4]
 8010232:	4619      	mov	r1, r3
 8010234:	2000      	movs	r0, #0
 8010236:	f000 f8d1 	bl	80103dc <pbuf_alloc_reference>
 801023a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 801023c:	e0bd      	b.n	80103ba <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 801023e:	2300      	movs	r3, #0
 8010240:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8010242:	2300      	movs	r3, #0
 8010244:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8010246:	88bb      	ldrh	r3, [r7, #4]
 8010248:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801024a:	2008      	movs	r0, #8
 801024c:	f7ff fbee 	bl	800fa2c <memp_malloc>
 8010250:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8010252:	693b      	ldr	r3, [r7, #16]
 8010254:	2b00      	cmp	r3, #0
 8010256:	d109      	bne.n	801026c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8010258:	f7ff ff94 	bl	8010184 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 801025c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801025e:	2b00      	cmp	r3, #0
 8010260:	d002      	beq.n	8010268 <pbuf_alloc+0x78>
            pbuf_free(p);
 8010262:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010264:	f000 faa8 	bl	80107b8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8010268:	2300      	movs	r3, #0
 801026a:	e0a7      	b.n	80103bc <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801026c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801026e:	3303      	adds	r3, #3
 8010270:	b29b      	uxth	r3, r3
 8010272:	f023 0303 	bic.w	r3, r3, #3
 8010276:	b29b      	uxth	r3, r3
 8010278:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 801027c:	b29b      	uxth	r3, r3
 801027e:	8b7a      	ldrh	r2, [r7, #26]
 8010280:	4293      	cmp	r3, r2
 8010282:	bf28      	it	cs
 8010284:	4613      	movcs	r3, r2
 8010286:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8010288:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801028a:	3310      	adds	r3, #16
 801028c:	693a      	ldr	r2, [r7, #16]
 801028e:	4413      	add	r3, r2
 8010290:	3303      	adds	r3, #3
 8010292:	f023 0303 	bic.w	r3, r3, #3
 8010296:	4618      	mov	r0, r3
 8010298:	89f9      	ldrh	r1, [r7, #14]
 801029a:	8b7a      	ldrh	r2, [r7, #26]
 801029c:	2300      	movs	r3, #0
 801029e:	9301      	str	r3, [sp, #4]
 80102a0:	887b      	ldrh	r3, [r7, #2]
 80102a2:	9300      	str	r3, [sp, #0]
 80102a4:	460b      	mov	r3, r1
 80102a6:	4601      	mov	r1, r0
 80102a8:	6938      	ldr	r0, [r7, #16]
 80102aa:	f7ff ff77 	bl	801019c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80102ae:	693b      	ldr	r3, [r7, #16]
 80102b0:	685b      	ldr	r3, [r3, #4]
 80102b2:	f003 0303 	and.w	r3, r3, #3
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d006      	beq.n	80102c8 <pbuf_alloc+0xd8>
 80102ba:	4b42      	ldr	r3, [pc, #264]	; (80103c4 <pbuf_alloc+0x1d4>)
 80102bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80102c0:	4941      	ldr	r1, [pc, #260]	; (80103c8 <pbuf_alloc+0x1d8>)
 80102c2:	4842      	ldr	r0, [pc, #264]	; (80103cc <pbuf_alloc+0x1dc>)
 80102c4:	f009 f93a 	bl	801953c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80102c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80102ca:	3303      	adds	r3, #3
 80102cc:	f023 0303 	bic.w	r3, r3, #3
 80102d0:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80102d4:	d106      	bne.n	80102e4 <pbuf_alloc+0xf4>
 80102d6:	4b3b      	ldr	r3, [pc, #236]	; (80103c4 <pbuf_alloc+0x1d4>)
 80102d8:	f44f 7281 	mov.w	r2, #258	; 0x102
 80102dc:	493c      	ldr	r1, [pc, #240]	; (80103d0 <pbuf_alloc+0x1e0>)
 80102de:	483b      	ldr	r0, [pc, #236]	; (80103cc <pbuf_alloc+0x1dc>)
 80102e0:	f009 f92c 	bl	801953c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80102e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d102      	bne.n	80102f0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80102ea:	693b      	ldr	r3, [r7, #16]
 80102ec:	627b      	str	r3, [r7, #36]	; 0x24
 80102ee:	e002      	b.n	80102f6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80102f0:	69fb      	ldr	r3, [r7, #28]
 80102f2:	693a      	ldr	r2, [r7, #16]
 80102f4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80102f6:	693b      	ldr	r3, [r7, #16]
 80102f8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80102fa:	8b7a      	ldrh	r2, [r7, #26]
 80102fc:	89fb      	ldrh	r3, [r7, #14]
 80102fe:	1ad3      	subs	r3, r2, r3
 8010300:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8010302:	2300      	movs	r3, #0
 8010304:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8010306:	8b7b      	ldrh	r3, [r7, #26]
 8010308:	2b00      	cmp	r3, #0
 801030a:	d19e      	bne.n	801024a <pbuf_alloc+0x5a>
      break;
 801030c:	e055      	b.n	80103ba <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801030e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010310:	3303      	adds	r3, #3
 8010312:	b29b      	uxth	r3, r3
 8010314:	f023 0303 	bic.w	r3, r3, #3
 8010318:	b29a      	uxth	r2, r3
 801031a:	88bb      	ldrh	r3, [r7, #4]
 801031c:	3303      	adds	r3, #3
 801031e:	b29b      	uxth	r3, r3
 8010320:	f023 0303 	bic.w	r3, r3, #3
 8010324:	b29b      	uxth	r3, r3
 8010326:	4413      	add	r3, r2
 8010328:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801032a:	8b3b      	ldrh	r3, [r7, #24]
 801032c:	3310      	adds	r3, #16
 801032e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8010330:	8b3a      	ldrh	r2, [r7, #24]
 8010332:	88bb      	ldrh	r3, [r7, #4]
 8010334:	3303      	adds	r3, #3
 8010336:	f023 0303 	bic.w	r3, r3, #3
 801033a:	429a      	cmp	r2, r3
 801033c:	d306      	bcc.n	801034c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 801033e:	8afa      	ldrh	r2, [r7, #22]
 8010340:	88bb      	ldrh	r3, [r7, #4]
 8010342:	3303      	adds	r3, #3
 8010344:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8010348:	429a      	cmp	r2, r3
 801034a:	d201      	bcs.n	8010350 <pbuf_alloc+0x160>
        return NULL;
 801034c:	2300      	movs	r3, #0
 801034e:	e035      	b.n	80103bc <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8010350:	8afb      	ldrh	r3, [r7, #22]
 8010352:	4618      	mov	r0, r3
 8010354:	f7ff f9da 	bl	800f70c <mem_malloc>
 8010358:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 801035a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801035c:	2b00      	cmp	r3, #0
 801035e:	d101      	bne.n	8010364 <pbuf_alloc+0x174>
        return NULL;
 8010360:	2300      	movs	r3, #0
 8010362:	e02b      	b.n	80103bc <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8010364:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010366:	3310      	adds	r3, #16
 8010368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801036a:	4413      	add	r3, r2
 801036c:	3303      	adds	r3, #3
 801036e:	f023 0303 	bic.w	r3, r3, #3
 8010372:	4618      	mov	r0, r3
 8010374:	88b9      	ldrh	r1, [r7, #4]
 8010376:	88ba      	ldrh	r2, [r7, #4]
 8010378:	2300      	movs	r3, #0
 801037a:	9301      	str	r3, [sp, #4]
 801037c:	887b      	ldrh	r3, [r7, #2]
 801037e:	9300      	str	r3, [sp, #0]
 8010380:	460b      	mov	r3, r1
 8010382:	4601      	mov	r1, r0
 8010384:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010386:	f7ff ff09 	bl	801019c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801038a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801038c:	685b      	ldr	r3, [r3, #4]
 801038e:	f003 0303 	and.w	r3, r3, #3
 8010392:	2b00      	cmp	r3, #0
 8010394:	d010      	beq.n	80103b8 <pbuf_alloc+0x1c8>
 8010396:	4b0b      	ldr	r3, [pc, #44]	; (80103c4 <pbuf_alloc+0x1d4>)
 8010398:	f44f 7291 	mov.w	r2, #290	; 0x122
 801039c:	490d      	ldr	r1, [pc, #52]	; (80103d4 <pbuf_alloc+0x1e4>)
 801039e:	480b      	ldr	r0, [pc, #44]	; (80103cc <pbuf_alloc+0x1dc>)
 80103a0:	f009 f8cc 	bl	801953c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80103a4:	e008      	b.n	80103b8 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80103a6:	4b07      	ldr	r3, [pc, #28]	; (80103c4 <pbuf_alloc+0x1d4>)
 80103a8:	f240 1227 	movw	r2, #295	; 0x127
 80103ac:	490a      	ldr	r1, [pc, #40]	; (80103d8 <pbuf_alloc+0x1e8>)
 80103ae:	4807      	ldr	r0, [pc, #28]	; (80103cc <pbuf_alloc+0x1dc>)
 80103b0:	f009 f8c4 	bl	801953c <iprintf>
      return NULL;
 80103b4:	2300      	movs	r3, #0
 80103b6:	e001      	b.n	80103bc <pbuf_alloc+0x1cc>
      break;
 80103b8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80103ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80103bc:	4618      	mov	r0, r3
 80103be:	3728      	adds	r7, #40	; 0x28
 80103c0:	46bd      	mov	sp, r7
 80103c2:	bd80      	pop	{r7, pc}
 80103c4:	0801c2a4 	.word	0x0801c2a4
 80103c8:	0801c2d4 	.word	0x0801c2d4
 80103cc:	0801c304 	.word	0x0801c304
 80103d0:	0801c32c 	.word	0x0801c32c
 80103d4:	0801c360 	.word	0x0801c360
 80103d8:	0801c38c 	.word	0x0801c38c

080103dc <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80103dc:	b580      	push	{r7, lr}
 80103de:	b086      	sub	sp, #24
 80103e0:	af02      	add	r7, sp, #8
 80103e2:	6078      	str	r0, [r7, #4]
 80103e4:	460b      	mov	r3, r1
 80103e6:	807b      	strh	r3, [r7, #2]
 80103e8:	4613      	mov	r3, r2
 80103ea:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80103ec:	883b      	ldrh	r3, [r7, #0]
 80103ee:	2b41      	cmp	r3, #65	; 0x41
 80103f0:	d009      	beq.n	8010406 <pbuf_alloc_reference+0x2a>
 80103f2:	883b      	ldrh	r3, [r7, #0]
 80103f4:	2b01      	cmp	r3, #1
 80103f6:	d006      	beq.n	8010406 <pbuf_alloc_reference+0x2a>
 80103f8:	4b0f      	ldr	r3, [pc, #60]	; (8010438 <pbuf_alloc_reference+0x5c>)
 80103fa:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80103fe:	490f      	ldr	r1, [pc, #60]	; (801043c <pbuf_alloc_reference+0x60>)
 8010400:	480f      	ldr	r0, [pc, #60]	; (8010440 <pbuf_alloc_reference+0x64>)
 8010402:	f009 f89b 	bl	801953c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8010406:	2007      	movs	r0, #7
 8010408:	f7ff fb10 	bl	800fa2c <memp_malloc>
 801040c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	2b00      	cmp	r3, #0
 8010412:	d101      	bne.n	8010418 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8010414:	2300      	movs	r3, #0
 8010416:	e00b      	b.n	8010430 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8010418:	8879      	ldrh	r1, [r7, #2]
 801041a:	887a      	ldrh	r2, [r7, #2]
 801041c:	2300      	movs	r3, #0
 801041e:	9301      	str	r3, [sp, #4]
 8010420:	883b      	ldrh	r3, [r7, #0]
 8010422:	9300      	str	r3, [sp, #0]
 8010424:	460b      	mov	r3, r1
 8010426:	6879      	ldr	r1, [r7, #4]
 8010428:	68f8      	ldr	r0, [r7, #12]
 801042a:	f7ff feb7 	bl	801019c <pbuf_init_alloced_pbuf>
  return p;
 801042e:	68fb      	ldr	r3, [r7, #12]
}
 8010430:	4618      	mov	r0, r3
 8010432:	3710      	adds	r7, #16
 8010434:	46bd      	mov	sp, r7
 8010436:	bd80      	pop	{r7, pc}
 8010438:	0801c2a4 	.word	0x0801c2a4
 801043c:	0801c3a8 	.word	0x0801c3a8
 8010440:	0801c304 	.word	0x0801c304

08010444 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8010444:	b580      	push	{r7, lr}
 8010446:	b088      	sub	sp, #32
 8010448:	af02      	add	r7, sp, #8
 801044a:	607b      	str	r3, [r7, #4]
 801044c:	4603      	mov	r3, r0
 801044e:	73fb      	strb	r3, [r7, #15]
 8010450:	460b      	mov	r3, r1
 8010452:	81bb      	strh	r3, [r7, #12]
 8010454:	4613      	mov	r3, r2
 8010456:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8010458:	7bfb      	ldrb	r3, [r7, #15]
 801045a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801045c:	8a7b      	ldrh	r3, [r7, #18]
 801045e:	3303      	adds	r3, #3
 8010460:	f023 0203 	bic.w	r2, r3, #3
 8010464:	89bb      	ldrh	r3, [r7, #12]
 8010466:	441a      	add	r2, r3
 8010468:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801046a:	429a      	cmp	r2, r3
 801046c:	d901      	bls.n	8010472 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801046e:	2300      	movs	r3, #0
 8010470:	e018      	b.n	80104a4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8010472:	6a3b      	ldr	r3, [r7, #32]
 8010474:	2b00      	cmp	r3, #0
 8010476:	d007      	beq.n	8010488 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8010478:	8a7b      	ldrh	r3, [r7, #18]
 801047a:	3303      	adds	r3, #3
 801047c:	f023 0303 	bic.w	r3, r3, #3
 8010480:	6a3a      	ldr	r2, [r7, #32]
 8010482:	4413      	add	r3, r2
 8010484:	617b      	str	r3, [r7, #20]
 8010486:	e001      	b.n	801048c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8010488:	2300      	movs	r3, #0
 801048a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 801048c:	6878      	ldr	r0, [r7, #4]
 801048e:	89b9      	ldrh	r1, [r7, #12]
 8010490:	89ba      	ldrh	r2, [r7, #12]
 8010492:	2302      	movs	r3, #2
 8010494:	9301      	str	r3, [sp, #4]
 8010496:	897b      	ldrh	r3, [r7, #10]
 8010498:	9300      	str	r3, [sp, #0]
 801049a:	460b      	mov	r3, r1
 801049c:	6979      	ldr	r1, [r7, #20]
 801049e:	f7ff fe7d 	bl	801019c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80104a2:	687b      	ldr	r3, [r7, #4]
}
 80104a4:	4618      	mov	r0, r3
 80104a6:	3718      	adds	r7, #24
 80104a8:	46bd      	mov	sp, r7
 80104aa:	bd80      	pop	{r7, pc}

080104ac <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80104ac:	b580      	push	{r7, lr}
 80104ae:	b084      	sub	sp, #16
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	6078      	str	r0, [r7, #4]
 80104b4:	460b      	mov	r3, r1
 80104b6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d106      	bne.n	80104cc <pbuf_realloc+0x20>
 80104be:	4b3a      	ldr	r3, [pc, #232]	; (80105a8 <pbuf_realloc+0xfc>)
 80104c0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80104c4:	4939      	ldr	r1, [pc, #228]	; (80105ac <pbuf_realloc+0x100>)
 80104c6:	483a      	ldr	r0, [pc, #232]	; (80105b0 <pbuf_realloc+0x104>)
 80104c8:	f009 f838 	bl	801953c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	891b      	ldrh	r3, [r3, #8]
 80104d0:	887a      	ldrh	r2, [r7, #2]
 80104d2:	429a      	cmp	r2, r3
 80104d4:	d263      	bcs.n	801059e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	891a      	ldrh	r2, [r3, #8]
 80104da:	887b      	ldrh	r3, [r7, #2]
 80104dc:	1ad3      	subs	r3, r2, r3
 80104de:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80104e0:	887b      	ldrh	r3, [r7, #2]
 80104e2:	817b      	strh	r3, [r7, #10]
  q = p;
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80104e8:	e018      	b.n	801051c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	895b      	ldrh	r3, [r3, #10]
 80104ee:	897a      	ldrh	r2, [r7, #10]
 80104f0:	1ad3      	subs	r3, r2, r3
 80104f2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	891a      	ldrh	r2, [r3, #8]
 80104f8:	893b      	ldrh	r3, [r7, #8]
 80104fa:	1ad3      	subs	r3, r2, r3
 80104fc:	b29a      	uxth	r2, r3
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	2b00      	cmp	r3, #0
 801050c:	d106      	bne.n	801051c <pbuf_realloc+0x70>
 801050e:	4b26      	ldr	r3, [pc, #152]	; (80105a8 <pbuf_realloc+0xfc>)
 8010510:	f240 12af 	movw	r2, #431	; 0x1af
 8010514:	4927      	ldr	r1, [pc, #156]	; (80105b4 <pbuf_realloc+0x108>)
 8010516:	4826      	ldr	r0, [pc, #152]	; (80105b0 <pbuf_realloc+0x104>)
 8010518:	f009 f810 	bl	801953c <iprintf>
  while (rem_len > q->len) {
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	895b      	ldrh	r3, [r3, #10]
 8010520:	897a      	ldrh	r2, [r7, #10]
 8010522:	429a      	cmp	r2, r3
 8010524:	d8e1      	bhi.n	80104ea <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	7b1b      	ldrb	r3, [r3, #12]
 801052a:	f003 030f 	and.w	r3, r3, #15
 801052e:	2b00      	cmp	r3, #0
 8010530:	d121      	bne.n	8010576 <pbuf_realloc+0xca>
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	895b      	ldrh	r3, [r3, #10]
 8010536:	897a      	ldrh	r2, [r7, #10]
 8010538:	429a      	cmp	r2, r3
 801053a:	d01c      	beq.n	8010576 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	7b5b      	ldrb	r3, [r3, #13]
 8010540:	f003 0302 	and.w	r3, r3, #2
 8010544:	2b00      	cmp	r3, #0
 8010546:	d116      	bne.n	8010576 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	685a      	ldr	r2, [r3, #4]
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	1ad3      	subs	r3, r2, r3
 8010550:	b29a      	uxth	r2, r3
 8010552:	897b      	ldrh	r3, [r7, #10]
 8010554:	4413      	add	r3, r2
 8010556:	b29b      	uxth	r3, r3
 8010558:	4619      	mov	r1, r3
 801055a:	68f8      	ldr	r0, [r7, #12]
 801055c:	f7fe ffda 	bl	800f514 <mem_trim>
 8010560:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	2b00      	cmp	r3, #0
 8010566:	d106      	bne.n	8010576 <pbuf_realloc+0xca>
 8010568:	4b0f      	ldr	r3, [pc, #60]	; (80105a8 <pbuf_realloc+0xfc>)
 801056a:	f240 12bd 	movw	r2, #445	; 0x1bd
 801056e:	4912      	ldr	r1, [pc, #72]	; (80105b8 <pbuf_realloc+0x10c>)
 8010570:	480f      	ldr	r0, [pc, #60]	; (80105b0 <pbuf_realloc+0x104>)
 8010572:	f008 ffe3 	bl	801953c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	897a      	ldrh	r2, [r7, #10]
 801057a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	895a      	ldrh	r2, [r3, #10]
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	2b00      	cmp	r3, #0
 801058a:	d004      	beq.n	8010596 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	4618      	mov	r0, r3
 8010592:	f000 f911 	bl	80107b8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	2200      	movs	r2, #0
 801059a:	601a      	str	r2, [r3, #0]
 801059c:	e000      	b.n	80105a0 <pbuf_realloc+0xf4>
    return;
 801059e:	bf00      	nop

}
 80105a0:	3710      	adds	r7, #16
 80105a2:	46bd      	mov	sp, r7
 80105a4:	bd80      	pop	{r7, pc}
 80105a6:	bf00      	nop
 80105a8:	0801c2a4 	.word	0x0801c2a4
 80105ac:	0801c3bc 	.word	0x0801c3bc
 80105b0:	0801c304 	.word	0x0801c304
 80105b4:	0801c3d4 	.word	0x0801c3d4
 80105b8:	0801c3ec 	.word	0x0801c3ec

080105bc <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80105bc:	b580      	push	{r7, lr}
 80105be:	b086      	sub	sp, #24
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	60f8      	str	r0, [r7, #12]
 80105c4:	60b9      	str	r1, [r7, #8]
 80105c6:	4613      	mov	r3, r2
 80105c8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d106      	bne.n	80105de <pbuf_add_header_impl+0x22>
 80105d0:	4b2b      	ldr	r3, [pc, #172]	; (8010680 <pbuf_add_header_impl+0xc4>)
 80105d2:	f240 12df 	movw	r2, #479	; 0x1df
 80105d6:	492b      	ldr	r1, [pc, #172]	; (8010684 <pbuf_add_header_impl+0xc8>)
 80105d8:	482b      	ldr	r0, [pc, #172]	; (8010688 <pbuf_add_header_impl+0xcc>)
 80105da:	f008 ffaf 	bl	801953c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d003      	beq.n	80105ec <pbuf_add_header_impl+0x30>
 80105e4:	68bb      	ldr	r3, [r7, #8]
 80105e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80105ea:	d301      	bcc.n	80105f0 <pbuf_add_header_impl+0x34>
    return 1;
 80105ec:	2301      	movs	r3, #1
 80105ee:	e043      	b.n	8010678 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80105f0:	68bb      	ldr	r3, [r7, #8]
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d101      	bne.n	80105fa <pbuf_add_header_impl+0x3e>
    return 0;
 80105f6:	2300      	movs	r3, #0
 80105f8:	e03e      	b.n	8010678 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80105fa:	68bb      	ldr	r3, [r7, #8]
 80105fc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	891a      	ldrh	r2, [r3, #8]
 8010602:	8a7b      	ldrh	r3, [r7, #18]
 8010604:	4413      	add	r3, r2
 8010606:	b29b      	uxth	r3, r3
 8010608:	8a7a      	ldrh	r2, [r7, #18]
 801060a:	429a      	cmp	r2, r3
 801060c:	d901      	bls.n	8010612 <pbuf_add_header_impl+0x56>
    return 1;
 801060e:	2301      	movs	r3, #1
 8010610:	e032      	b.n	8010678 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	7b1b      	ldrb	r3, [r3, #12]
 8010616:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8010618:	8a3b      	ldrh	r3, [r7, #16]
 801061a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801061e:	2b00      	cmp	r3, #0
 8010620:	d00c      	beq.n	801063c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	685a      	ldr	r2, [r3, #4]
 8010626:	68bb      	ldr	r3, [r7, #8]
 8010628:	425b      	negs	r3, r3
 801062a:	4413      	add	r3, r2
 801062c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	3310      	adds	r3, #16
 8010632:	697a      	ldr	r2, [r7, #20]
 8010634:	429a      	cmp	r2, r3
 8010636:	d20d      	bcs.n	8010654 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8010638:	2301      	movs	r3, #1
 801063a:	e01d      	b.n	8010678 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 801063c:	79fb      	ldrb	r3, [r7, #7]
 801063e:	2b00      	cmp	r3, #0
 8010640:	d006      	beq.n	8010650 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	685a      	ldr	r2, [r3, #4]
 8010646:	68bb      	ldr	r3, [r7, #8]
 8010648:	425b      	negs	r3, r3
 801064a:	4413      	add	r3, r2
 801064c:	617b      	str	r3, [r7, #20]
 801064e:	e001      	b.n	8010654 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8010650:	2301      	movs	r3, #1
 8010652:	e011      	b.n	8010678 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	697a      	ldr	r2, [r7, #20]
 8010658:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	895a      	ldrh	r2, [r3, #10]
 801065e:	8a7b      	ldrh	r3, [r7, #18]
 8010660:	4413      	add	r3, r2
 8010662:	b29a      	uxth	r2, r3
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	891a      	ldrh	r2, [r3, #8]
 801066c:	8a7b      	ldrh	r3, [r7, #18]
 801066e:	4413      	add	r3, r2
 8010670:	b29a      	uxth	r2, r3
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	811a      	strh	r2, [r3, #8]


  return 0;
 8010676:	2300      	movs	r3, #0
}
 8010678:	4618      	mov	r0, r3
 801067a:	3718      	adds	r7, #24
 801067c:	46bd      	mov	sp, r7
 801067e:	bd80      	pop	{r7, pc}
 8010680:	0801c2a4 	.word	0x0801c2a4
 8010684:	0801c408 	.word	0x0801c408
 8010688:	0801c304 	.word	0x0801c304

0801068c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 801068c:	b580      	push	{r7, lr}
 801068e:	b082      	sub	sp, #8
 8010690:	af00      	add	r7, sp, #0
 8010692:	6078      	str	r0, [r7, #4]
 8010694:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8010696:	2200      	movs	r2, #0
 8010698:	6839      	ldr	r1, [r7, #0]
 801069a:	6878      	ldr	r0, [r7, #4]
 801069c:	f7ff ff8e 	bl	80105bc <pbuf_add_header_impl>
 80106a0:	4603      	mov	r3, r0
}
 80106a2:	4618      	mov	r0, r3
 80106a4:	3708      	adds	r7, #8
 80106a6:	46bd      	mov	sp, r7
 80106a8:	bd80      	pop	{r7, pc}
	...

080106ac <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80106ac:	b580      	push	{r7, lr}
 80106ae:	b084      	sub	sp, #16
 80106b0:	af00      	add	r7, sp, #0
 80106b2:	6078      	str	r0, [r7, #4]
 80106b4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d106      	bne.n	80106ca <pbuf_remove_header+0x1e>
 80106bc:	4b20      	ldr	r3, [pc, #128]	; (8010740 <pbuf_remove_header+0x94>)
 80106be:	f240 224b 	movw	r2, #587	; 0x24b
 80106c2:	4920      	ldr	r1, [pc, #128]	; (8010744 <pbuf_remove_header+0x98>)
 80106c4:	4820      	ldr	r0, [pc, #128]	; (8010748 <pbuf_remove_header+0x9c>)
 80106c6:	f008 ff39 	bl	801953c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d003      	beq.n	80106d8 <pbuf_remove_header+0x2c>
 80106d0:	683b      	ldr	r3, [r7, #0]
 80106d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80106d6:	d301      	bcc.n	80106dc <pbuf_remove_header+0x30>
    return 1;
 80106d8:	2301      	movs	r3, #1
 80106da:	e02c      	b.n	8010736 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80106dc:	683b      	ldr	r3, [r7, #0]
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d101      	bne.n	80106e6 <pbuf_remove_header+0x3a>
    return 0;
 80106e2:	2300      	movs	r3, #0
 80106e4:	e027      	b.n	8010736 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80106e6:	683b      	ldr	r3, [r7, #0]
 80106e8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	895b      	ldrh	r3, [r3, #10]
 80106ee:	89fa      	ldrh	r2, [r7, #14]
 80106f0:	429a      	cmp	r2, r3
 80106f2:	d908      	bls.n	8010706 <pbuf_remove_header+0x5a>
 80106f4:	4b12      	ldr	r3, [pc, #72]	; (8010740 <pbuf_remove_header+0x94>)
 80106f6:	f240 2255 	movw	r2, #597	; 0x255
 80106fa:	4914      	ldr	r1, [pc, #80]	; (801074c <pbuf_remove_header+0xa0>)
 80106fc:	4812      	ldr	r0, [pc, #72]	; (8010748 <pbuf_remove_header+0x9c>)
 80106fe:	f008 ff1d 	bl	801953c <iprintf>
 8010702:	2301      	movs	r3, #1
 8010704:	e017      	b.n	8010736 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	685b      	ldr	r3, [r3, #4]
 801070a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	685a      	ldr	r2, [r3, #4]
 8010710:	683b      	ldr	r3, [r7, #0]
 8010712:	441a      	add	r2, r3
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	895a      	ldrh	r2, [r3, #10]
 801071c:	89fb      	ldrh	r3, [r7, #14]
 801071e:	1ad3      	subs	r3, r2, r3
 8010720:	b29a      	uxth	r2, r3
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	891a      	ldrh	r2, [r3, #8]
 801072a:	89fb      	ldrh	r3, [r7, #14]
 801072c:	1ad3      	subs	r3, r2, r3
 801072e:	b29a      	uxth	r2, r3
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8010734:	2300      	movs	r3, #0
}
 8010736:	4618      	mov	r0, r3
 8010738:	3710      	adds	r7, #16
 801073a:	46bd      	mov	sp, r7
 801073c:	bd80      	pop	{r7, pc}
 801073e:	bf00      	nop
 8010740:	0801c2a4 	.word	0x0801c2a4
 8010744:	0801c408 	.word	0x0801c408
 8010748:	0801c304 	.word	0x0801c304
 801074c:	0801c414 	.word	0x0801c414

08010750 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8010750:	b580      	push	{r7, lr}
 8010752:	b082      	sub	sp, #8
 8010754:	af00      	add	r7, sp, #0
 8010756:	6078      	str	r0, [r7, #4]
 8010758:	460b      	mov	r3, r1
 801075a:	807b      	strh	r3, [r7, #2]
 801075c:	4613      	mov	r3, r2
 801075e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8010760:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010764:	2b00      	cmp	r3, #0
 8010766:	da08      	bge.n	801077a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8010768:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801076c:	425b      	negs	r3, r3
 801076e:	4619      	mov	r1, r3
 8010770:	6878      	ldr	r0, [r7, #4]
 8010772:	f7ff ff9b 	bl	80106ac <pbuf_remove_header>
 8010776:	4603      	mov	r3, r0
 8010778:	e007      	b.n	801078a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801077a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801077e:	787a      	ldrb	r2, [r7, #1]
 8010780:	4619      	mov	r1, r3
 8010782:	6878      	ldr	r0, [r7, #4]
 8010784:	f7ff ff1a 	bl	80105bc <pbuf_add_header_impl>
 8010788:	4603      	mov	r3, r0
  }
}
 801078a:	4618      	mov	r0, r3
 801078c:	3708      	adds	r7, #8
 801078e:	46bd      	mov	sp, r7
 8010790:	bd80      	pop	{r7, pc}

08010792 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8010792:	b580      	push	{r7, lr}
 8010794:	b082      	sub	sp, #8
 8010796:	af00      	add	r7, sp, #0
 8010798:	6078      	str	r0, [r7, #4]
 801079a:	460b      	mov	r3, r1
 801079c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801079e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80107a2:	2201      	movs	r2, #1
 80107a4:	4619      	mov	r1, r3
 80107a6:	6878      	ldr	r0, [r7, #4]
 80107a8:	f7ff ffd2 	bl	8010750 <pbuf_header_impl>
 80107ac:	4603      	mov	r3, r0
}
 80107ae:	4618      	mov	r0, r3
 80107b0:	3708      	adds	r7, #8
 80107b2:	46bd      	mov	sp, r7
 80107b4:	bd80      	pop	{r7, pc}
	...

080107b8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80107b8:	b580      	push	{r7, lr}
 80107ba:	b086      	sub	sp, #24
 80107bc:	af00      	add	r7, sp, #0
 80107be:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d10b      	bne.n	80107de <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d106      	bne.n	80107da <pbuf_free+0x22>
 80107cc:	4b38      	ldr	r3, [pc, #224]	; (80108b0 <pbuf_free+0xf8>)
 80107ce:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80107d2:	4938      	ldr	r1, [pc, #224]	; (80108b4 <pbuf_free+0xfc>)
 80107d4:	4838      	ldr	r0, [pc, #224]	; (80108b8 <pbuf_free+0x100>)
 80107d6:	f008 feb1 	bl	801953c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80107da:	2300      	movs	r3, #0
 80107dc:	e063      	b.n	80108a6 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80107de:	2300      	movs	r3, #0
 80107e0:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80107e2:	e05c      	b.n	801089e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	7b9b      	ldrb	r3, [r3, #14]
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d106      	bne.n	80107fa <pbuf_free+0x42>
 80107ec:	4b30      	ldr	r3, [pc, #192]	; (80108b0 <pbuf_free+0xf8>)
 80107ee:	f240 22f1 	movw	r2, #753	; 0x2f1
 80107f2:	4932      	ldr	r1, [pc, #200]	; (80108bc <pbuf_free+0x104>)
 80107f4:	4830      	ldr	r0, [pc, #192]	; (80108b8 <pbuf_free+0x100>)
 80107f6:	f008 fea1 	bl	801953c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	7b9b      	ldrb	r3, [r3, #14]
 80107fe:	3b01      	subs	r3, #1
 8010800:	b2da      	uxtb	r2, r3
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	739a      	strb	r2, [r3, #14]
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	7b9b      	ldrb	r3, [r3, #14]
 801080a:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 801080c:	7dbb      	ldrb	r3, [r7, #22]
 801080e:	2b00      	cmp	r3, #0
 8010810:	d143      	bne.n	801089a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	7b1b      	ldrb	r3, [r3, #12]
 801081c:	f003 030f 	and.w	r3, r3, #15
 8010820:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	7b5b      	ldrb	r3, [r3, #13]
 8010826:	f003 0302 	and.w	r3, r3, #2
 801082a:	2b00      	cmp	r3, #0
 801082c:	d011      	beq.n	8010852 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8010832:	68bb      	ldr	r3, [r7, #8]
 8010834:	691b      	ldr	r3, [r3, #16]
 8010836:	2b00      	cmp	r3, #0
 8010838:	d106      	bne.n	8010848 <pbuf_free+0x90>
 801083a:	4b1d      	ldr	r3, [pc, #116]	; (80108b0 <pbuf_free+0xf8>)
 801083c:	f240 22ff 	movw	r2, #767	; 0x2ff
 8010840:	491f      	ldr	r1, [pc, #124]	; (80108c0 <pbuf_free+0x108>)
 8010842:	481d      	ldr	r0, [pc, #116]	; (80108b8 <pbuf_free+0x100>)
 8010844:	f008 fe7a 	bl	801953c <iprintf>
        pc->custom_free_function(p);
 8010848:	68bb      	ldr	r3, [r7, #8]
 801084a:	691b      	ldr	r3, [r3, #16]
 801084c:	6878      	ldr	r0, [r7, #4]
 801084e:	4798      	blx	r3
 8010850:	e01d      	b.n	801088e <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8010852:	7bfb      	ldrb	r3, [r7, #15]
 8010854:	2b02      	cmp	r3, #2
 8010856:	d104      	bne.n	8010862 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8010858:	6879      	ldr	r1, [r7, #4]
 801085a:	2008      	movs	r0, #8
 801085c:	f7ff f956 	bl	800fb0c <memp_free>
 8010860:	e015      	b.n	801088e <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8010862:	7bfb      	ldrb	r3, [r7, #15]
 8010864:	2b01      	cmp	r3, #1
 8010866:	d104      	bne.n	8010872 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8010868:	6879      	ldr	r1, [r7, #4]
 801086a:	2007      	movs	r0, #7
 801086c:	f7ff f94e 	bl	800fb0c <memp_free>
 8010870:	e00d      	b.n	801088e <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8010872:	7bfb      	ldrb	r3, [r7, #15]
 8010874:	2b00      	cmp	r3, #0
 8010876:	d103      	bne.n	8010880 <pbuf_free+0xc8>
          mem_free(p);
 8010878:	6878      	ldr	r0, [r7, #4]
 801087a:	f7fe fde1 	bl	800f440 <mem_free>
 801087e:	e006      	b.n	801088e <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8010880:	4b0b      	ldr	r3, [pc, #44]	; (80108b0 <pbuf_free+0xf8>)
 8010882:	f240 320f 	movw	r2, #783	; 0x30f
 8010886:	490f      	ldr	r1, [pc, #60]	; (80108c4 <pbuf_free+0x10c>)
 8010888:	480b      	ldr	r0, [pc, #44]	; (80108b8 <pbuf_free+0x100>)
 801088a:	f008 fe57 	bl	801953c <iprintf>
        }
      }
      count++;
 801088e:	7dfb      	ldrb	r3, [r7, #23]
 8010890:	3301      	adds	r3, #1
 8010892:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8010894:	693b      	ldr	r3, [r7, #16]
 8010896:	607b      	str	r3, [r7, #4]
 8010898:	e001      	b.n	801089e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801089a:	2300      	movs	r3, #0
 801089c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d19f      	bne.n	80107e4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80108a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80108a6:	4618      	mov	r0, r3
 80108a8:	3718      	adds	r7, #24
 80108aa:	46bd      	mov	sp, r7
 80108ac:	bd80      	pop	{r7, pc}
 80108ae:	bf00      	nop
 80108b0:	0801c2a4 	.word	0x0801c2a4
 80108b4:	0801c408 	.word	0x0801c408
 80108b8:	0801c304 	.word	0x0801c304
 80108bc:	0801c434 	.word	0x0801c434
 80108c0:	0801c44c 	.word	0x0801c44c
 80108c4:	0801c470 	.word	0x0801c470

080108c8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80108c8:	b480      	push	{r7}
 80108ca:	b085      	sub	sp, #20
 80108cc:	af00      	add	r7, sp, #0
 80108ce:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80108d0:	2300      	movs	r3, #0
 80108d2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80108d4:	e005      	b.n	80108e2 <pbuf_clen+0x1a>
    ++len;
 80108d6:	89fb      	ldrh	r3, [r7, #14]
 80108d8:	3301      	adds	r3, #1
 80108da:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d1f6      	bne.n	80108d6 <pbuf_clen+0xe>
  }
  return len;
 80108e8:	89fb      	ldrh	r3, [r7, #14]
}
 80108ea:	4618      	mov	r0, r3
 80108ec:	3714      	adds	r7, #20
 80108ee:	46bd      	mov	sp, r7
 80108f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f4:	4770      	bx	lr
	...

080108f8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80108f8:	b580      	push	{r7, lr}
 80108fa:	b082      	sub	sp, #8
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	2b00      	cmp	r3, #0
 8010904:	d010      	beq.n	8010928 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	7b9b      	ldrb	r3, [r3, #14]
 801090a:	3301      	adds	r3, #1
 801090c:	b2da      	uxtb	r2, r3
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	7b9b      	ldrb	r3, [r3, #14]
 8010916:	2b00      	cmp	r3, #0
 8010918:	d106      	bne.n	8010928 <pbuf_ref+0x30>
 801091a:	4b05      	ldr	r3, [pc, #20]	; (8010930 <pbuf_ref+0x38>)
 801091c:	f240 3242 	movw	r2, #834	; 0x342
 8010920:	4904      	ldr	r1, [pc, #16]	; (8010934 <pbuf_ref+0x3c>)
 8010922:	4805      	ldr	r0, [pc, #20]	; (8010938 <pbuf_ref+0x40>)
 8010924:	f008 fe0a 	bl	801953c <iprintf>
  }
}
 8010928:	bf00      	nop
 801092a:	3708      	adds	r7, #8
 801092c:	46bd      	mov	sp, r7
 801092e:	bd80      	pop	{r7, pc}
 8010930:	0801c2a4 	.word	0x0801c2a4
 8010934:	0801c484 	.word	0x0801c484
 8010938:	0801c304 	.word	0x0801c304

0801093c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 801093c:	b580      	push	{r7, lr}
 801093e:	b084      	sub	sp, #16
 8010940:	af00      	add	r7, sp, #0
 8010942:	6078      	str	r0, [r7, #4]
 8010944:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	2b00      	cmp	r3, #0
 801094a:	d002      	beq.n	8010952 <pbuf_cat+0x16>
 801094c:	683b      	ldr	r3, [r7, #0]
 801094e:	2b00      	cmp	r3, #0
 8010950:	d107      	bne.n	8010962 <pbuf_cat+0x26>
 8010952:	4b20      	ldr	r3, [pc, #128]	; (80109d4 <pbuf_cat+0x98>)
 8010954:	f240 3259 	movw	r2, #857	; 0x359
 8010958:	491f      	ldr	r1, [pc, #124]	; (80109d8 <pbuf_cat+0x9c>)
 801095a:	4820      	ldr	r0, [pc, #128]	; (80109dc <pbuf_cat+0xa0>)
 801095c:	f008 fdee 	bl	801953c <iprintf>
 8010960:	e034      	b.n	80109cc <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	60fb      	str	r3, [r7, #12]
 8010966:	e00a      	b.n	801097e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8010968:	68fb      	ldr	r3, [r7, #12]
 801096a:	891a      	ldrh	r2, [r3, #8]
 801096c:	683b      	ldr	r3, [r7, #0]
 801096e:	891b      	ldrh	r3, [r3, #8]
 8010970:	4413      	add	r3, r2
 8010972:	b29a      	uxth	r2, r3
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	60fb      	str	r3, [r7, #12]
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	2b00      	cmp	r3, #0
 8010984:	d1f0      	bne.n	8010968 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	891a      	ldrh	r2, [r3, #8]
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	895b      	ldrh	r3, [r3, #10]
 801098e:	429a      	cmp	r2, r3
 8010990:	d006      	beq.n	80109a0 <pbuf_cat+0x64>
 8010992:	4b10      	ldr	r3, [pc, #64]	; (80109d4 <pbuf_cat+0x98>)
 8010994:	f240 3262 	movw	r2, #866	; 0x362
 8010998:	4911      	ldr	r1, [pc, #68]	; (80109e0 <pbuf_cat+0xa4>)
 801099a:	4810      	ldr	r0, [pc, #64]	; (80109dc <pbuf_cat+0xa0>)
 801099c:	f008 fdce 	bl	801953c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d006      	beq.n	80109b6 <pbuf_cat+0x7a>
 80109a8:	4b0a      	ldr	r3, [pc, #40]	; (80109d4 <pbuf_cat+0x98>)
 80109aa:	f240 3263 	movw	r2, #867	; 0x363
 80109ae:	490d      	ldr	r1, [pc, #52]	; (80109e4 <pbuf_cat+0xa8>)
 80109b0:	480a      	ldr	r0, [pc, #40]	; (80109dc <pbuf_cat+0xa0>)
 80109b2:	f008 fdc3 	bl	801953c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	891a      	ldrh	r2, [r3, #8]
 80109ba:	683b      	ldr	r3, [r7, #0]
 80109bc:	891b      	ldrh	r3, [r3, #8]
 80109be:	4413      	add	r3, r2
 80109c0:	b29a      	uxth	r2, r3
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	683a      	ldr	r2, [r7, #0]
 80109ca:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80109cc:	3710      	adds	r7, #16
 80109ce:	46bd      	mov	sp, r7
 80109d0:	bd80      	pop	{r7, pc}
 80109d2:	bf00      	nop
 80109d4:	0801c2a4 	.word	0x0801c2a4
 80109d8:	0801c498 	.word	0x0801c498
 80109dc:	0801c304 	.word	0x0801c304
 80109e0:	0801c4d0 	.word	0x0801c4d0
 80109e4:	0801c500 	.word	0x0801c500

080109e8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80109e8:	b580      	push	{r7, lr}
 80109ea:	b086      	sub	sp, #24
 80109ec:	af00      	add	r7, sp, #0
 80109ee:	6078      	str	r0, [r7, #4]
 80109f0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80109f2:	2300      	movs	r3, #0
 80109f4:	617b      	str	r3, [r7, #20]
 80109f6:	2300      	movs	r3, #0
 80109f8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d008      	beq.n	8010a12 <pbuf_copy+0x2a>
 8010a00:	683b      	ldr	r3, [r7, #0]
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d005      	beq.n	8010a12 <pbuf_copy+0x2a>
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	891a      	ldrh	r2, [r3, #8]
 8010a0a:	683b      	ldr	r3, [r7, #0]
 8010a0c:	891b      	ldrh	r3, [r3, #8]
 8010a0e:	429a      	cmp	r2, r3
 8010a10:	d209      	bcs.n	8010a26 <pbuf_copy+0x3e>
 8010a12:	4b57      	ldr	r3, [pc, #348]	; (8010b70 <pbuf_copy+0x188>)
 8010a14:	f240 32c9 	movw	r2, #969	; 0x3c9
 8010a18:	4956      	ldr	r1, [pc, #344]	; (8010b74 <pbuf_copy+0x18c>)
 8010a1a:	4857      	ldr	r0, [pc, #348]	; (8010b78 <pbuf_copy+0x190>)
 8010a1c:	f008 fd8e 	bl	801953c <iprintf>
 8010a20:	f06f 030f 	mvn.w	r3, #15
 8010a24:	e09f      	b.n	8010b66 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	895b      	ldrh	r3, [r3, #10]
 8010a2a:	461a      	mov	r2, r3
 8010a2c:	697b      	ldr	r3, [r7, #20]
 8010a2e:	1ad2      	subs	r2, r2, r3
 8010a30:	683b      	ldr	r3, [r7, #0]
 8010a32:	895b      	ldrh	r3, [r3, #10]
 8010a34:	4619      	mov	r1, r3
 8010a36:	693b      	ldr	r3, [r7, #16]
 8010a38:	1acb      	subs	r3, r1, r3
 8010a3a:	429a      	cmp	r2, r3
 8010a3c:	d306      	bcc.n	8010a4c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8010a3e:	683b      	ldr	r3, [r7, #0]
 8010a40:	895b      	ldrh	r3, [r3, #10]
 8010a42:	461a      	mov	r2, r3
 8010a44:	693b      	ldr	r3, [r7, #16]
 8010a46:	1ad3      	subs	r3, r2, r3
 8010a48:	60fb      	str	r3, [r7, #12]
 8010a4a:	e005      	b.n	8010a58 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	895b      	ldrh	r3, [r3, #10]
 8010a50:	461a      	mov	r2, r3
 8010a52:	697b      	ldr	r3, [r7, #20]
 8010a54:	1ad3      	subs	r3, r2, r3
 8010a56:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	685a      	ldr	r2, [r3, #4]
 8010a5c:	697b      	ldr	r3, [r7, #20]
 8010a5e:	18d0      	adds	r0, r2, r3
 8010a60:	683b      	ldr	r3, [r7, #0]
 8010a62:	685a      	ldr	r2, [r3, #4]
 8010a64:	693b      	ldr	r3, [r7, #16]
 8010a66:	4413      	add	r3, r2
 8010a68:	68fa      	ldr	r2, [r7, #12]
 8010a6a:	4619      	mov	r1, r3
 8010a6c:	f008 ff34 	bl	80198d8 <memcpy>
    offset_to += len;
 8010a70:	697a      	ldr	r2, [r7, #20]
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	4413      	add	r3, r2
 8010a76:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8010a78:	693a      	ldr	r2, [r7, #16]
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	4413      	add	r3, r2
 8010a7e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	895b      	ldrh	r3, [r3, #10]
 8010a84:	461a      	mov	r2, r3
 8010a86:	697b      	ldr	r3, [r7, #20]
 8010a88:	4293      	cmp	r3, r2
 8010a8a:	d906      	bls.n	8010a9a <pbuf_copy+0xb2>
 8010a8c:	4b38      	ldr	r3, [pc, #224]	; (8010b70 <pbuf_copy+0x188>)
 8010a8e:	f240 32d9 	movw	r2, #985	; 0x3d9
 8010a92:	493a      	ldr	r1, [pc, #232]	; (8010b7c <pbuf_copy+0x194>)
 8010a94:	4838      	ldr	r0, [pc, #224]	; (8010b78 <pbuf_copy+0x190>)
 8010a96:	f008 fd51 	bl	801953c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8010a9a:	683b      	ldr	r3, [r7, #0]
 8010a9c:	895b      	ldrh	r3, [r3, #10]
 8010a9e:	461a      	mov	r2, r3
 8010aa0:	693b      	ldr	r3, [r7, #16]
 8010aa2:	4293      	cmp	r3, r2
 8010aa4:	d906      	bls.n	8010ab4 <pbuf_copy+0xcc>
 8010aa6:	4b32      	ldr	r3, [pc, #200]	; (8010b70 <pbuf_copy+0x188>)
 8010aa8:	f240 32da 	movw	r2, #986	; 0x3da
 8010aac:	4934      	ldr	r1, [pc, #208]	; (8010b80 <pbuf_copy+0x198>)
 8010aae:	4832      	ldr	r0, [pc, #200]	; (8010b78 <pbuf_copy+0x190>)
 8010ab0:	f008 fd44 	bl	801953c <iprintf>
    if (offset_from >= p_from->len) {
 8010ab4:	683b      	ldr	r3, [r7, #0]
 8010ab6:	895b      	ldrh	r3, [r3, #10]
 8010ab8:	461a      	mov	r2, r3
 8010aba:	693b      	ldr	r3, [r7, #16]
 8010abc:	4293      	cmp	r3, r2
 8010abe:	d304      	bcc.n	8010aca <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8010ac0:	2300      	movs	r3, #0
 8010ac2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8010ac4:	683b      	ldr	r3, [r7, #0]
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	895b      	ldrh	r3, [r3, #10]
 8010ace:	461a      	mov	r2, r3
 8010ad0:	697b      	ldr	r3, [r7, #20]
 8010ad2:	4293      	cmp	r3, r2
 8010ad4:	d114      	bne.n	8010b00 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8010ad6:	2300      	movs	r3, #0
 8010ad8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d10c      	bne.n	8010b00 <pbuf_copy+0x118>
 8010ae6:	683b      	ldr	r3, [r7, #0]
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d009      	beq.n	8010b00 <pbuf_copy+0x118>
 8010aec:	4b20      	ldr	r3, [pc, #128]	; (8010b70 <pbuf_copy+0x188>)
 8010aee:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8010af2:	4924      	ldr	r1, [pc, #144]	; (8010b84 <pbuf_copy+0x19c>)
 8010af4:	4820      	ldr	r0, [pc, #128]	; (8010b78 <pbuf_copy+0x190>)
 8010af6:	f008 fd21 	bl	801953c <iprintf>
 8010afa:	f06f 030f 	mvn.w	r3, #15
 8010afe:	e032      	b.n	8010b66 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8010b00:	683b      	ldr	r3, [r7, #0]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d013      	beq.n	8010b2e <pbuf_copy+0x146>
 8010b06:	683b      	ldr	r3, [r7, #0]
 8010b08:	895a      	ldrh	r2, [r3, #10]
 8010b0a:	683b      	ldr	r3, [r7, #0]
 8010b0c:	891b      	ldrh	r3, [r3, #8]
 8010b0e:	429a      	cmp	r2, r3
 8010b10:	d10d      	bne.n	8010b2e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010b12:	683b      	ldr	r3, [r7, #0]
 8010b14:	681b      	ldr	r3, [r3, #0]
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d009      	beq.n	8010b2e <pbuf_copy+0x146>
 8010b1a:	4b15      	ldr	r3, [pc, #84]	; (8010b70 <pbuf_copy+0x188>)
 8010b1c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8010b20:	4919      	ldr	r1, [pc, #100]	; (8010b88 <pbuf_copy+0x1a0>)
 8010b22:	4815      	ldr	r0, [pc, #84]	; (8010b78 <pbuf_copy+0x190>)
 8010b24:	f008 fd0a 	bl	801953c <iprintf>
 8010b28:	f06f 0305 	mvn.w	r3, #5
 8010b2c:	e01b      	b.n	8010b66 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d013      	beq.n	8010b5c <pbuf_copy+0x174>
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	895a      	ldrh	r2, [r3, #10]
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	891b      	ldrh	r3, [r3, #8]
 8010b3c:	429a      	cmp	r2, r3
 8010b3e:	d10d      	bne.n	8010b5c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d009      	beq.n	8010b5c <pbuf_copy+0x174>
 8010b48:	4b09      	ldr	r3, [pc, #36]	; (8010b70 <pbuf_copy+0x188>)
 8010b4a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8010b4e:	490e      	ldr	r1, [pc, #56]	; (8010b88 <pbuf_copy+0x1a0>)
 8010b50:	4809      	ldr	r0, [pc, #36]	; (8010b78 <pbuf_copy+0x190>)
 8010b52:	f008 fcf3 	bl	801953c <iprintf>
 8010b56:	f06f 0305 	mvn.w	r3, #5
 8010b5a:	e004      	b.n	8010b66 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8010b5c:	683b      	ldr	r3, [r7, #0]
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	f47f af61 	bne.w	8010a26 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8010b64:	2300      	movs	r3, #0
}
 8010b66:	4618      	mov	r0, r3
 8010b68:	3718      	adds	r7, #24
 8010b6a:	46bd      	mov	sp, r7
 8010b6c:	bd80      	pop	{r7, pc}
 8010b6e:	bf00      	nop
 8010b70:	0801c2a4 	.word	0x0801c2a4
 8010b74:	0801c54c 	.word	0x0801c54c
 8010b78:	0801c304 	.word	0x0801c304
 8010b7c:	0801c57c 	.word	0x0801c57c
 8010b80:	0801c594 	.word	0x0801c594
 8010b84:	0801c5b0 	.word	0x0801c5b0
 8010b88:	0801c5c0 	.word	0x0801c5c0

08010b8c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8010b8c:	b580      	push	{r7, lr}
 8010b8e:	b088      	sub	sp, #32
 8010b90:	af00      	add	r7, sp, #0
 8010b92:	60f8      	str	r0, [r7, #12]
 8010b94:	60b9      	str	r1, [r7, #8]
 8010b96:	4611      	mov	r1, r2
 8010b98:	461a      	mov	r2, r3
 8010b9a:	460b      	mov	r3, r1
 8010b9c:	80fb      	strh	r3, [r7, #6]
 8010b9e:	4613      	mov	r3, r2
 8010ba0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8010ba2:	2300      	movs	r3, #0
 8010ba4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8010ba6:	2300      	movs	r3, #0
 8010ba8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d108      	bne.n	8010bc2 <pbuf_copy_partial+0x36>
 8010bb0:	4b2b      	ldr	r3, [pc, #172]	; (8010c60 <pbuf_copy_partial+0xd4>)
 8010bb2:	f240 420a 	movw	r2, #1034	; 0x40a
 8010bb6:	492b      	ldr	r1, [pc, #172]	; (8010c64 <pbuf_copy_partial+0xd8>)
 8010bb8:	482b      	ldr	r0, [pc, #172]	; (8010c68 <pbuf_copy_partial+0xdc>)
 8010bba:	f008 fcbf 	bl	801953c <iprintf>
 8010bbe:	2300      	movs	r3, #0
 8010bc0:	e04a      	b.n	8010c58 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8010bc2:	68bb      	ldr	r3, [r7, #8]
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d108      	bne.n	8010bda <pbuf_copy_partial+0x4e>
 8010bc8:	4b25      	ldr	r3, [pc, #148]	; (8010c60 <pbuf_copy_partial+0xd4>)
 8010bca:	f240 420b 	movw	r2, #1035	; 0x40b
 8010bce:	4927      	ldr	r1, [pc, #156]	; (8010c6c <pbuf_copy_partial+0xe0>)
 8010bd0:	4825      	ldr	r0, [pc, #148]	; (8010c68 <pbuf_copy_partial+0xdc>)
 8010bd2:	f008 fcb3 	bl	801953c <iprintf>
 8010bd6:	2300      	movs	r3, #0
 8010bd8:	e03e      	b.n	8010c58 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	61fb      	str	r3, [r7, #28]
 8010bde:	e034      	b.n	8010c4a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8010be0:	88bb      	ldrh	r3, [r7, #4]
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d00a      	beq.n	8010bfc <pbuf_copy_partial+0x70>
 8010be6:	69fb      	ldr	r3, [r7, #28]
 8010be8:	895b      	ldrh	r3, [r3, #10]
 8010bea:	88ba      	ldrh	r2, [r7, #4]
 8010bec:	429a      	cmp	r2, r3
 8010bee:	d305      	bcc.n	8010bfc <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8010bf0:	69fb      	ldr	r3, [r7, #28]
 8010bf2:	895b      	ldrh	r3, [r3, #10]
 8010bf4:	88ba      	ldrh	r2, [r7, #4]
 8010bf6:	1ad3      	subs	r3, r2, r3
 8010bf8:	80bb      	strh	r3, [r7, #4]
 8010bfa:	e023      	b.n	8010c44 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8010bfc:	69fb      	ldr	r3, [r7, #28]
 8010bfe:	895a      	ldrh	r2, [r3, #10]
 8010c00:	88bb      	ldrh	r3, [r7, #4]
 8010c02:	1ad3      	subs	r3, r2, r3
 8010c04:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8010c06:	8b3a      	ldrh	r2, [r7, #24]
 8010c08:	88fb      	ldrh	r3, [r7, #6]
 8010c0a:	429a      	cmp	r2, r3
 8010c0c:	d901      	bls.n	8010c12 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8010c0e:	88fb      	ldrh	r3, [r7, #6]
 8010c10:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8010c12:	8b7b      	ldrh	r3, [r7, #26]
 8010c14:	68ba      	ldr	r2, [r7, #8]
 8010c16:	18d0      	adds	r0, r2, r3
 8010c18:	69fb      	ldr	r3, [r7, #28]
 8010c1a:	685a      	ldr	r2, [r3, #4]
 8010c1c:	88bb      	ldrh	r3, [r7, #4]
 8010c1e:	4413      	add	r3, r2
 8010c20:	8b3a      	ldrh	r2, [r7, #24]
 8010c22:	4619      	mov	r1, r3
 8010c24:	f008 fe58 	bl	80198d8 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8010c28:	8afa      	ldrh	r2, [r7, #22]
 8010c2a:	8b3b      	ldrh	r3, [r7, #24]
 8010c2c:	4413      	add	r3, r2
 8010c2e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8010c30:	8b7a      	ldrh	r2, [r7, #26]
 8010c32:	8b3b      	ldrh	r3, [r7, #24]
 8010c34:	4413      	add	r3, r2
 8010c36:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8010c38:	88fa      	ldrh	r2, [r7, #6]
 8010c3a:	8b3b      	ldrh	r3, [r7, #24]
 8010c3c:	1ad3      	subs	r3, r2, r3
 8010c3e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8010c40:	2300      	movs	r3, #0
 8010c42:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8010c44:	69fb      	ldr	r3, [r7, #28]
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	61fb      	str	r3, [r7, #28]
 8010c4a:	88fb      	ldrh	r3, [r7, #6]
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d002      	beq.n	8010c56 <pbuf_copy_partial+0xca>
 8010c50:	69fb      	ldr	r3, [r7, #28]
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d1c4      	bne.n	8010be0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8010c56:	8afb      	ldrh	r3, [r7, #22]
}
 8010c58:	4618      	mov	r0, r3
 8010c5a:	3720      	adds	r7, #32
 8010c5c:	46bd      	mov	sp, r7
 8010c5e:	bd80      	pop	{r7, pc}
 8010c60:	0801c2a4 	.word	0x0801c2a4
 8010c64:	0801c5ec 	.word	0x0801c5ec
 8010c68:	0801c304 	.word	0x0801c304
 8010c6c:	0801c60c 	.word	0x0801c60c

08010c70 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8010c70:	b580      	push	{r7, lr}
 8010c72:	b084      	sub	sp, #16
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	4603      	mov	r3, r0
 8010c78:	603a      	str	r2, [r7, #0]
 8010c7a:	71fb      	strb	r3, [r7, #7]
 8010c7c:	460b      	mov	r3, r1
 8010c7e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8010c80:	683b      	ldr	r3, [r7, #0]
 8010c82:	8919      	ldrh	r1, [r3, #8]
 8010c84:	88ba      	ldrh	r2, [r7, #4]
 8010c86:	79fb      	ldrb	r3, [r7, #7]
 8010c88:	4618      	mov	r0, r3
 8010c8a:	f7ff fab1 	bl	80101f0 <pbuf_alloc>
 8010c8e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d101      	bne.n	8010c9a <pbuf_clone+0x2a>
    return NULL;
 8010c96:	2300      	movs	r3, #0
 8010c98:	e011      	b.n	8010cbe <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8010c9a:	6839      	ldr	r1, [r7, #0]
 8010c9c:	68f8      	ldr	r0, [r7, #12]
 8010c9e:	f7ff fea3 	bl	80109e8 <pbuf_copy>
 8010ca2:	4603      	mov	r3, r0
 8010ca4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8010ca6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d006      	beq.n	8010cbc <pbuf_clone+0x4c>
 8010cae:	4b06      	ldr	r3, [pc, #24]	; (8010cc8 <pbuf_clone+0x58>)
 8010cb0:	f240 5224 	movw	r2, #1316	; 0x524
 8010cb4:	4905      	ldr	r1, [pc, #20]	; (8010ccc <pbuf_clone+0x5c>)
 8010cb6:	4806      	ldr	r0, [pc, #24]	; (8010cd0 <pbuf_clone+0x60>)
 8010cb8:	f008 fc40 	bl	801953c <iprintf>
  return q;
 8010cbc:	68fb      	ldr	r3, [r7, #12]
}
 8010cbe:	4618      	mov	r0, r3
 8010cc0:	3710      	adds	r7, #16
 8010cc2:	46bd      	mov	sp, r7
 8010cc4:	bd80      	pop	{r7, pc}
 8010cc6:	bf00      	nop
 8010cc8:	0801c2a4 	.word	0x0801c2a4
 8010ccc:	0801c718 	.word	0x0801c718
 8010cd0:	0801c304 	.word	0x0801c304

08010cd4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8010cd4:	b580      	push	{r7, lr}
 8010cd6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8010cd8:	f007 ff06 	bl	8018ae8 <rand>
 8010cdc:	4603      	mov	r3, r0
 8010cde:	b29b      	uxth	r3, r3
 8010ce0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010ce4:	b29b      	uxth	r3, r3
 8010ce6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8010cea:	b29a      	uxth	r2, r3
 8010cec:	4b01      	ldr	r3, [pc, #4]	; (8010cf4 <tcp_init+0x20>)
 8010cee:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8010cf0:	bf00      	nop
 8010cf2:	bd80      	pop	{r7, pc}
 8010cf4:	20000058 	.word	0x20000058

08010cf8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8010cf8:	b580      	push	{r7, lr}
 8010cfa:	b082      	sub	sp, #8
 8010cfc:	af00      	add	r7, sp, #0
 8010cfe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	7d1b      	ldrb	r3, [r3, #20]
 8010d04:	2b01      	cmp	r3, #1
 8010d06:	d105      	bne.n	8010d14 <tcp_free+0x1c>
 8010d08:	4b06      	ldr	r3, [pc, #24]	; (8010d24 <tcp_free+0x2c>)
 8010d0a:	22d4      	movs	r2, #212	; 0xd4
 8010d0c:	4906      	ldr	r1, [pc, #24]	; (8010d28 <tcp_free+0x30>)
 8010d0e:	4807      	ldr	r0, [pc, #28]	; (8010d2c <tcp_free+0x34>)
 8010d10:	f008 fc14 	bl	801953c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8010d14:	6879      	ldr	r1, [r7, #4]
 8010d16:	2001      	movs	r0, #1
 8010d18:	f7fe fef8 	bl	800fb0c <memp_free>
}
 8010d1c:	bf00      	nop
 8010d1e:	3708      	adds	r7, #8
 8010d20:	46bd      	mov	sp, r7
 8010d22:	bd80      	pop	{r7, pc}
 8010d24:	0801c7a4 	.word	0x0801c7a4
 8010d28:	0801c7d4 	.word	0x0801c7d4
 8010d2c:	0801c7e8 	.word	0x0801c7e8

08010d30 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8010d30:	b580      	push	{r7, lr}
 8010d32:	b082      	sub	sp, #8
 8010d34:	af00      	add	r7, sp, #0
 8010d36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	7d1b      	ldrb	r3, [r3, #20]
 8010d3c:	2b01      	cmp	r3, #1
 8010d3e:	d105      	bne.n	8010d4c <tcp_free_listen+0x1c>
 8010d40:	4b06      	ldr	r3, [pc, #24]	; (8010d5c <tcp_free_listen+0x2c>)
 8010d42:	22df      	movs	r2, #223	; 0xdf
 8010d44:	4906      	ldr	r1, [pc, #24]	; (8010d60 <tcp_free_listen+0x30>)
 8010d46:	4807      	ldr	r0, [pc, #28]	; (8010d64 <tcp_free_listen+0x34>)
 8010d48:	f008 fbf8 	bl	801953c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8010d4c:	6879      	ldr	r1, [r7, #4]
 8010d4e:	2002      	movs	r0, #2
 8010d50:	f7fe fedc 	bl	800fb0c <memp_free>
}
 8010d54:	bf00      	nop
 8010d56:	3708      	adds	r7, #8
 8010d58:	46bd      	mov	sp, r7
 8010d5a:	bd80      	pop	{r7, pc}
 8010d5c:	0801c7a4 	.word	0x0801c7a4
 8010d60:	0801c810 	.word	0x0801c810
 8010d64:	0801c7e8 	.word	0x0801c7e8

08010d68 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8010d68:	b580      	push	{r7, lr}
 8010d6a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8010d6c:	f000 fea2 	bl	8011ab4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8010d70:	4b07      	ldr	r3, [pc, #28]	; (8010d90 <tcp_tmr+0x28>)
 8010d72:	781b      	ldrb	r3, [r3, #0]
 8010d74:	3301      	adds	r3, #1
 8010d76:	b2da      	uxtb	r2, r3
 8010d78:	4b05      	ldr	r3, [pc, #20]	; (8010d90 <tcp_tmr+0x28>)
 8010d7a:	701a      	strb	r2, [r3, #0]
 8010d7c:	4b04      	ldr	r3, [pc, #16]	; (8010d90 <tcp_tmr+0x28>)
 8010d7e:	781b      	ldrb	r3, [r3, #0]
 8010d80:	f003 0301 	and.w	r3, r3, #1
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d001      	beq.n	8010d8c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8010d88:	f000 fb54 	bl	8011434 <tcp_slowtmr>
  }
}
 8010d8c:	bf00      	nop
 8010d8e:	bd80      	pop	{r7, pc}
 8010d90:	200080dd 	.word	0x200080dd

08010d94 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8010d94:	b580      	push	{r7, lr}
 8010d96:	b084      	sub	sp, #16
 8010d98:	af00      	add	r7, sp, #0
 8010d9a:	6078      	str	r0, [r7, #4]
 8010d9c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8010d9e:	683b      	ldr	r3, [r7, #0]
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d105      	bne.n	8010db0 <tcp_remove_listener+0x1c>
 8010da4:	4b0d      	ldr	r3, [pc, #52]	; (8010ddc <tcp_remove_listener+0x48>)
 8010da6:	22ff      	movs	r2, #255	; 0xff
 8010da8:	490d      	ldr	r1, [pc, #52]	; (8010de0 <tcp_remove_listener+0x4c>)
 8010daa:	480e      	ldr	r0, [pc, #56]	; (8010de4 <tcp_remove_listener+0x50>)
 8010dac:	f008 fbc6 	bl	801953c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	60fb      	str	r3, [r7, #12]
 8010db4:	e00a      	b.n	8010dcc <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8010db6:	68fb      	ldr	r3, [r7, #12]
 8010db8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010dba:	683a      	ldr	r2, [r7, #0]
 8010dbc:	429a      	cmp	r2, r3
 8010dbe:	d102      	bne.n	8010dc6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8010dc0:	68fb      	ldr	r3, [r7, #12]
 8010dc2:	2200      	movs	r2, #0
 8010dc4:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	68db      	ldr	r3, [r3, #12]
 8010dca:	60fb      	str	r3, [r7, #12]
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d1f1      	bne.n	8010db6 <tcp_remove_listener+0x22>
    }
  }
}
 8010dd2:	bf00      	nop
 8010dd4:	bf00      	nop
 8010dd6:	3710      	adds	r7, #16
 8010dd8:	46bd      	mov	sp, r7
 8010dda:	bd80      	pop	{r7, pc}
 8010ddc:	0801c7a4 	.word	0x0801c7a4
 8010de0:	0801c82c 	.word	0x0801c82c
 8010de4:	0801c7e8 	.word	0x0801c7e8

08010de8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8010de8:	b580      	push	{r7, lr}
 8010dea:	b084      	sub	sp, #16
 8010dec:	af00      	add	r7, sp, #0
 8010dee:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d106      	bne.n	8010e04 <tcp_listen_closed+0x1c>
 8010df6:	4b14      	ldr	r3, [pc, #80]	; (8010e48 <tcp_listen_closed+0x60>)
 8010df8:	f240 1211 	movw	r2, #273	; 0x111
 8010dfc:	4913      	ldr	r1, [pc, #76]	; (8010e4c <tcp_listen_closed+0x64>)
 8010dfe:	4814      	ldr	r0, [pc, #80]	; (8010e50 <tcp_listen_closed+0x68>)
 8010e00:	f008 fb9c 	bl	801953c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	7d1b      	ldrb	r3, [r3, #20]
 8010e08:	2b01      	cmp	r3, #1
 8010e0a:	d006      	beq.n	8010e1a <tcp_listen_closed+0x32>
 8010e0c:	4b0e      	ldr	r3, [pc, #56]	; (8010e48 <tcp_listen_closed+0x60>)
 8010e0e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8010e12:	4910      	ldr	r1, [pc, #64]	; (8010e54 <tcp_listen_closed+0x6c>)
 8010e14:	480e      	ldr	r0, [pc, #56]	; (8010e50 <tcp_listen_closed+0x68>)
 8010e16:	f008 fb91 	bl	801953c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8010e1a:	2301      	movs	r3, #1
 8010e1c:	60fb      	str	r3, [r7, #12]
 8010e1e:	e00b      	b.n	8010e38 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8010e20:	4a0d      	ldr	r2, [pc, #52]	; (8010e58 <tcp_listen_closed+0x70>)
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	6879      	ldr	r1, [r7, #4]
 8010e2c:	4618      	mov	r0, r3
 8010e2e:	f7ff ffb1 	bl	8010d94 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	3301      	adds	r3, #1
 8010e36:	60fb      	str	r3, [r7, #12]
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	2b03      	cmp	r3, #3
 8010e3c:	d9f0      	bls.n	8010e20 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8010e3e:	bf00      	nop
 8010e40:	bf00      	nop
 8010e42:	3710      	adds	r7, #16
 8010e44:	46bd      	mov	sp, r7
 8010e46:	bd80      	pop	{r7, pc}
 8010e48:	0801c7a4 	.word	0x0801c7a4
 8010e4c:	0801c854 	.word	0x0801c854
 8010e50:	0801c7e8 	.word	0x0801c7e8
 8010e54:	0801c860 	.word	0x0801c860
 8010e58:	0801e7bc 	.word	0x0801e7bc

08010e5c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8010e5c:	b5b0      	push	{r4, r5, r7, lr}
 8010e5e:	b088      	sub	sp, #32
 8010e60:	af04      	add	r7, sp, #16
 8010e62:	6078      	str	r0, [r7, #4]
 8010e64:	460b      	mov	r3, r1
 8010e66:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d106      	bne.n	8010e7c <tcp_close_shutdown+0x20>
 8010e6e:	4b63      	ldr	r3, [pc, #396]	; (8010ffc <tcp_close_shutdown+0x1a0>)
 8010e70:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8010e74:	4962      	ldr	r1, [pc, #392]	; (8011000 <tcp_close_shutdown+0x1a4>)
 8010e76:	4863      	ldr	r0, [pc, #396]	; (8011004 <tcp_close_shutdown+0x1a8>)
 8010e78:	f008 fb60 	bl	801953c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8010e7c:	78fb      	ldrb	r3, [r7, #3]
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d066      	beq.n	8010f50 <tcp_close_shutdown+0xf4>
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	7d1b      	ldrb	r3, [r3, #20]
 8010e86:	2b04      	cmp	r3, #4
 8010e88:	d003      	beq.n	8010e92 <tcp_close_shutdown+0x36>
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	7d1b      	ldrb	r3, [r3, #20]
 8010e8e:	2b07      	cmp	r3, #7
 8010e90:	d15e      	bne.n	8010f50 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d104      	bne.n	8010ea4 <tcp_close_shutdown+0x48>
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010e9e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010ea2:	d055      	beq.n	8010f50 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	8b5b      	ldrh	r3, [r3, #26]
 8010ea8:	f003 0310 	and.w	r3, r3, #16
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d106      	bne.n	8010ebe <tcp_close_shutdown+0x62>
 8010eb0:	4b52      	ldr	r3, [pc, #328]	; (8010ffc <tcp_close_shutdown+0x1a0>)
 8010eb2:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8010eb6:	4954      	ldr	r1, [pc, #336]	; (8011008 <tcp_close_shutdown+0x1ac>)
 8010eb8:	4852      	ldr	r0, [pc, #328]	; (8011004 <tcp_close_shutdown+0x1a8>)
 8010eba:	f008 fb3f 	bl	801953c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8010ec6:	687d      	ldr	r5, [r7, #4]
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	3304      	adds	r3, #4
 8010ecc:	687a      	ldr	r2, [r7, #4]
 8010ece:	8ad2      	ldrh	r2, [r2, #22]
 8010ed0:	6879      	ldr	r1, [r7, #4]
 8010ed2:	8b09      	ldrh	r1, [r1, #24]
 8010ed4:	9102      	str	r1, [sp, #8]
 8010ed6:	9201      	str	r2, [sp, #4]
 8010ed8:	9300      	str	r3, [sp, #0]
 8010eda:	462b      	mov	r3, r5
 8010edc:	4622      	mov	r2, r4
 8010ede:	4601      	mov	r1, r0
 8010ee0:	6878      	ldr	r0, [r7, #4]
 8010ee2:	f004 fe91 	bl	8015c08 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8010ee6:	6878      	ldr	r0, [r7, #4]
 8010ee8:	f001 f8c6 	bl	8012078 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8010eec:	4b47      	ldr	r3, [pc, #284]	; (801100c <tcp_close_shutdown+0x1b0>)
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	687a      	ldr	r2, [r7, #4]
 8010ef2:	429a      	cmp	r2, r3
 8010ef4:	d105      	bne.n	8010f02 <tcp_close_shutdown+0xa6>
 8010ef6:	4b45      	ldr	r3, [pc, #276]	; (801100c <tcp_close_shutdown+0x1b0>)
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	68db      	ldr	r3, [r3, #12]
 8010efc:	4a43      	ldr	r2, [pc, #268]	; (801100c <tcp_close_shutdown+0x1b0>)
 8010efe:	6013      	str	r3, [r2, #0]
 8010f00:	e013      	b.n	8010f2a <tcp_close_shutdown+0xce>
 8010f02:	4b42      	ldr	r3, [pc, #264]	; (801100c <tcp_close_shutdown+0x1b0>)
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	60fb      	str	r3, [r7, #12]
 8010f08:	e00c      	b.n	8010f24 <tcp_close_shutdown+0xc8>
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	68db      	ldr	r3, [r3, #12]
 8010f0e:	687a      	ldr	r2, [r7, #4]
 8010f10:	429a      	cmp	r2, r3
 8010f12:	d104      	bne.n	8010f1e <tcp_close_shutdown+0xc2>
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	68da      	ldr	r2, [r3, #12]
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	60da      	str	r2, [r3, #12]
 8010f1c:	e005      	b.n	8010f2a <tcp_close_shutdown+0xce>
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	68db      	ldr	r3, [r3, #12]
 8010f22:	60fb      	str	r3, [r7, #12]
 8010f24:	68fb      	ldr	r3, [r7, #12]
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d1ef      	bne.n	8010f0a <tcp_close_shutdown+0xae>
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	2200      	movs	r2, #0
 8010f2e:	60da      	str	r2, [r3, #12]
 8010f30:	4b37      	ldr	r3, [pc, #220]	; (8011010 <tcp_close_shutdown+0x1b4>)
 8010f32:	2201      	movs	r2, #1
 8010f34:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8010f36:	4b37      	ldr	r3, [pc, #220]	; (8011014 <tcp_close_shutdown+0x1b8>)
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	687a      	ldr	r2, [r7, #4]
 8010f3c:	429a      	cmp	r2, r3
 8010f3e:	d102      	bne.n	8010f46 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8010f40:	f003 fd5e 	bl	8014a00 <tcp_trigger_input_pcb_close>
 8010f44:	e002      	b.n	8010f4c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8010f46:	6878      	ldr	r0, [r7, #4]
 8010f48:	f7ff fed6 	bl	8010cf8 <tcp_free>
      }
      return ERR_OK;
 8010f4c:	2300      	movs	r3, #0
 8010f4e:	e050      	b.n	8010ff2 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	7d1b      	ldrb	r3, [r3, #20]
 8010f54:	2b02      	cmp	r3, #2
 8010f56:	d03b      	beq.n	8010fd0 <tcp_close_shutdown+0x174>
 8010f58:	2b02      	cmp	r3, #2
 8010f5a:	dc44      	bgt.n	8010fe6 <tcp_close_shutdown+0x18a>
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d002      	beq.n	8010f66 <tcp_close_shutdown+0x10a>
 8010f60:	2b01      	cmp	r3, #1
 8010f62:	d02a      	beq.n	8010fba <tcp_close_shutdown+0x15e>
 8010f64:	e03f      	b.n	8010fe6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	8adb      	ldrh	r3, [r3, #22]
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d021      	beq.n	8010fb2 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8010f6e:	4b2a      	ldr	r3, [pc, #168]	; (8011018 <tcp_close_shutdown+0x1bc>)
 8010f70:	681b      	ldr	r3, [r3, #0]
 8010f72:	687a      	ldr	r2, [r7, #4]
 8010f74:	429a      	cmp	r2, r3
 8010f76:	d105      	bne.n	8010f84 <tcp_close_shutdown+0x128>
 8010f78:	4b27      	ldr	r3, [pc, #156]	; (8011018 <tcp_close_shutdown+0x1bc>)
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	68db      	ldr	r3, [r3, #12]
 8010f7e:	4a26      	ldr	r2, [pc, #152]	; (8011018 <tcp_close_shutdown+0x1bc>)
 8010f80:	6013      	str	r3, [r2, #0]
 8010f82:	e013      	b.n	8010fac <tcp_close_shutdown+0x150>
 8010f84:	4b24      	ldr	r3, [pc, #144]	; (8011018 <tcp_close_shutdown+0x1bc>)
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	60bb      	str	r3, [r7, #8]
 8010f8a:	e00c      	b.n	8010fa6 <tcp_close_shutdown+0x14a>
 8010f8c:	68bb      	ldr	r3, [r7, #8]
 8010f8e:	68db      	ldr	r3, [r3, #12]
 8010f90:	687a      	ldr	r2, [r7, #4]
 8010f92:	429a      	cmp	r2, r3
 8010f94:	d104      	bne.n	8010fa0 <tcp_close_shutdown+0x144>
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	68da      	ldr	r2, [r3, #12]
 8010f9a:	68bb      	ldr	r3, [r7, #8]
 8010f9c:	60da      	str	r2, [r3, #12]
 8010f9e:	e005      	b.n	8010fac <tcp_close_shutdown+0x150>
 8010fa0:	68bb      	ldr	r3, [r7, #8]
 8010fa2:	68db      	ldr	r3, [r3, #12]
 8010fa4:	60bb      	str	r3, [r7, #8]
 8010fa6:	68bb      	ldr	r3, [r7, #8]
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d1ef      	bne.n	8010f8c <tcp_close_shutdown+0x130>
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	2200      	movs	r2, #0
 8010fb0:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8010fb2:	6878      	ldr	r0, [r7, #4]
 8010fb4:	f7ff fea0 	bl	8010cf8 <tcp_free>
      break;
 8010fb8:	e01a      	b.n	8010ff0 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8010fba:	6878      	ldr	r0, [r7, #4]
 8010fbc:	f7ff ff14 	bl	8010de8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8010fc0:	6879      	ldr	r1, [r7, #4]
 8010fc2:	4816      	ldr	r0, [pc, #88]	; (801101c <tcp_close_shutdown+0x1c0>)
 8010fc4:	f001 f8a8 	bl	8012118 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8010fc8:	6878      	ldr	r0, [r7, #4]
 8010fca:	f7ff feb1 	bl	8010d30 <tcp_free_listen>
      break;
 8010fce:	e00f      	b.n	8010ff0 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8010fd0:	6879      	ldr	r1, [r7, #4]
 8010fd2:	480e      	ldr	r0, [pc, #56]	; (801100c <tcp_close_shutdown+0x1b0>)
 8010fd4:	f001 f8a0 	bl	8012118 <tcp_pcb_remove>
 8010fd8:	4b0d      	ldr	r3, [pc, #52]	; (8011010 <tcp_close_shutdown+0x1b4>)
 8010fda:	2201      	movs	r2, #1
 8010fdc:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8010fde:	6878      	ldr	r0, [r7, #4]
 8010fe0:	f7ff fe8a 	bl	8010cf8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8010fe4:	e004      	b.n	8010ff0 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8010fe6:	6878      	ldr	r0, [r7, #4]
 8010fe8:	f000 f81a 	bl	8011020 <tcp_close_shutdown_fin>
 8010fec:	4603      	mov	r3, r0
 8010fee:	e000      	b.n	8010ff2 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8010ff0:	2300      	movs	r3, #0
}
 8010ff2:	4618      	mov	r0, r3
 8010ff4:	3710      	adds	r7, #16
 8010ff6:	46bd      	mov	sp, r7
 8010ff8:	bdb0      	pop	{r4, r5, r7, pc}
 8010ffa:	bf00      	nop
 8010ffc:	0801c7a4 	.word	0x0801c7a4
 8011000:	0801c878 	.word	0x0801c878
 8011004:	0801c7e8 	.word	0x0801c7e8
 8011008:	0801c898 	.word	0x0801c898
 801100c:	200080d4 	.word	0x200080d4
 8011010:	200080dc 	.word	0x200080dc
 8011014:	20008114 	.word	0x20008114
 8011018:	200080cc 	.word	0x200080cc
 801101c:	200080d0 	.word	0x200080d0

08011020 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8011020:	b580      	push	{r7, lr}
 8011022:	b084      	sub	sp, #16
 8011024:	af00      	add	r7, sp, #0
 8011026:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	2b00      	cmp	r3, #0
 801102c:	d106      	bne.n	801103c <tcp_close_shutdown_fin+0x1c>
 801102e:	4b2e      	ldr	r3, [pc, #184]	; (80110e8 <tcp_close_shutdown_fin+0xc8>)
 8011030:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8011034:	492d      	ldr	r1, [pc, #180]	; (80110ec <tcp_close_shutdown_fin+0xcc>)
 8011036:	482e      	ldr	r0, [pc, #184]	; (80110f0 <tcp_close_shutdown_fin+0xd0>)
 8011038:	f008 fa80 	bl	801953c <iprintf>

  switch (pcb->state) {
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	7d1b      	ldrb	r3, [r3, #20]
 8011040:	2b07      	cmp	r3, #7
 8011042:	d020      	beq.n	8011086 <tcp_close_shutdown_fin+0x66>
 8011044:	2b07      	cmp	r3, #7
 8011046:	dc2b      	bgt.n	80110a0 <tcp_close_shutdown_fin+0x80>
 8011048:	2b03      	cmp	r3, #3
 801104a:	d002      	beq.n	8011052 <tcp_close_shutdown_fin+0x32>
 801104c:	2b04      	cmp	r3, #4
 801104e:	d00d      	beq.n	801106c <tcp_close_shutdown_fin+0x4c>
 8011050:	e026      	b.n	80110a0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8011052:	6878      	ldr	r0, [r7, #4]
 8011054:	f003 fee6 	bl	8014e24 <tcp_send_fin>
 8011058:	4603      	mov	r3, r0
 801105a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801105c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011060:	2b00      	cmp	r3, #0
 8011062:	d11f      	bne.n	80110a4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	2205      	movs	r2, #5
 8011068:	751a      	strb	r2, [r3, #20]
      }
      break;
 801106a:	e01b      	b.n	80110a4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 801106c:	6878      	ldr	r0, [r7, #4]
 801106e:	f003 fed9 	bl	8014e24 <tcp_send_fin>
 8011072:	4603      	mov	r3, r0
 8011074:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801107a:	2b00      	cmp	r3, #0
 801107c:	d114      	bne.n	80110a8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	2205      	movs	r2, #5
 8011082:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011084:	e010      	b.n	80110a8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8011086:	6878      	ldr	r0, [r7, #4]
 8011088:	f003 fecc 	bl	8014e24 <tcp_send_fin>
 801108c:	4603      	mov	r3, r0
 801108e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011090:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011094:	2b00      	cmp	r3, #0
 8011096:	d109      	bne.n	80110ac <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	2209      	movs	r2, #9
 801109c:	751a      	strb	r2, [r3, #20]
      }
      break;
 801109e:	e005      	b.n	80110ac <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80110a0:	2300      	movs	r3, #0
 80110a2:	e01c      	b.n	80110de <tcp_close_shutdown_fin+0xbe>
      break;
 80110a4:	bf00      	nop
 80110a6:	e002      	b.n	80110ae <tcp_close_shutdown_fin+0x8e>
      break;
 80110a8:	bf00      	nop
 80110aa:	e000      	b.n	80110ae <tcp_close_shutdown_fin+0x8e>
      break;
 80110ac:	bf00      	nop
  }

  if (err == ERR_OK) {
 80110ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d103      	bne.n	80110be <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80110b6:	6878      	ldr	r0, [r7, #4]
 80110b8:	f003 fff2 	bl	80150a0 <tcp_output>
 80110bc:	e00d      	b.n	80110da <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80110be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80110c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110c6:	d108      	bne.n	80110da <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	8b5b      	ldrh	r3, [r3, #26]
 80110cc:	f043 0308 	orr.w	r3, r3, #8
 80110d0:	b29a      	uxth	r2, r3
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80110d6:	2300      	movs	r3, #0
 80110d8:	e001      	b.n	80110de <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80110da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80110de:	4618      	mov	r0, r3
 80110e0:	3710      	adds	r7, #16
 80110e2:	46bd      	mov	sp, r7
 80110e4:	bd80      	pop	{r7, pc}
 80110e6:	bf00      	nop
 80110e8:	0801c7a4 	.word	0x0801c7a4
 80110ec:	0801c854 	.word	0x0801c854
 80110f0:	0801c7e8 	.word	0x0801c7e8

080110f4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80110f4:	b580      	push	{r7, lr}
 80110f6:	b082      	sub	sp, #8
 80110f8:	af00      	add	r7, sp, #0
 80110fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d109      	bne.n	8011116 <tcp_close+0x22>
 8011102:	4b0f      	ldr	r3, [pc, #60]	; (8011140 <tcp_close+0x4c>)
 8011104:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8011108:	490e      	ldr	r1, [pc, #56]	; (8011144 <tcp_close+0x50>)
 801110a:	480f      	ldr	r0, [pc, #60]	; (8011148 <tcp_close+0x54>)
 801110c:	f008 fa16 	bl	801953c <iprintf>
 8011110:	f06f 030f 	mvn.w	r3, #15
 8011114:	e00f      	b.n	8011136 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	7d1b      	ldrb	r3, [r3, #20]
 801111a:	2b01      	cmp	r3, #1
 801111c:	d006      	beq.n	801112c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	8b5b      	ldrh	r3, [r3, #26]
 8011122:	f043 0310 	orr.w	r3, r3, #16
 8011126:	b29a      	uxth	r2, r3
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 801112c:	2101      	movs	r1, #1
 801112e:	6878      	ldr	r0, [r7, #4]
 8011130:	f7ff fe94 	bl	8010e5c <tcp_close_shutdown>
 8011134:	4603      	mov	r3, r0
}
 8011136:	4618      	mov	r0, r3
 8011138:	3708      	adds	r7, #8
 801113a:	46bd      	mov	sp, r7
 801113c:	bd80      	pop	{r7, pc}
 801113e:	bf00      	nop
 8011140:	0801c7a4 	.word	0x0801c7a4
 8011144:	0801c8b4 	.word	0x0801c8b4
 8011148:	0801c7e8 	.word	0x0801c7e8

0801114c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 801114c:	b580      	push	{r7, lr}
 801114e:	b08e      	sub	sp, #56	; 0x38
 8011150:	af04      	add	r7, sp, #16
 8011152:	6078      	str	r0, [r7, #4]
 8011154:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	2b00      	cmp	r3, #0
 801115a:	d107      	bne.n	801116c <tcp_abandon+0x20>
 801115c:	4b52      	ldr	r3, [pc, #328]	; (80112a8 <tcp_abandon+0x15c>)
 801115e:	f240 223d 	movw	r2, #573	; 0x23d
 8011162:	4952      	ldr	r1, [pc, #328]	; (80112ac <tcp_abandon+0x160>)
 8011164:	4852      	ldr	r0, [pc, #328]	; (80112b0 <tcp_abandon+0x164>)
 8011166:	f008 f9e9 	bl	801953c <iprintf>
 801116a:	e099      	b.n	80112a0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	7d1b      	ldrb	r3, [r3, #20]
 8011170:	2b01      	cmp	r3, #1
 8011172:	d106      	bne.n	8011182 <tcp_abandon+0x36>
 8011174:	4b4c      	ldr	r3, [pc, #304]	; (80112a8 <tcp_abandon+0x15c>)
 8011176:	f44f 7210 	mov.w	r2, #576	; 0x240
 801117a:	494e      	ldr	r1, [pc, #312]	; (80112b4 <tcp_abandon+0x168>)
 801117c:	484c      	ldr	r0, [pc, #304]	; (80112b0 <tcp_abandon+0x164>)
 801117e:	f008 f9dd 	bl	801953c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	7d1b      	ldrb	r3, [r3, #20]
 8011186:	2b0a      	cmp	r3, #10
 8011188:	d107      	bne.n	801119a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801118a:	6879      	ldr	r1, [r7, #4]
 801118c:	484a      	ldr	r0, [pc, #296]	; (80112b8 <tcp_abandon+0x16c>)
 801118e:	f000 ffc3 	bl	8012118 <tcp_pcb_remove>
    tcp_free(pcb);
 8011192:	6878      	ldr	r0, [r7, #4]
 8011194:	f7ff fdb0 	bl	8010cf8 <tcp_free>
 8011198:	e082      	b.n	80112a0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 801119a:	2300      	movs	r3, #0
 801119c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 801119e:	2300      	movs	r3, #0
 80111a0:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80111a6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111ac:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80111b4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	691b      	ldr	r3, [r3, #16]
 80111ba:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	7d1b      	ldrb	r3, [r3, #20]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d126      	bne.n	8011212 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	8adb      	ldrh	r3, [r3, #22]
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d02e      	beq.n	801122a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80111cc:	4b3b      	ldr	r3, [pc, #236]	; (80112bc <tcp_abandon+0x170>)
 80111ce:	681b      	ldr	r3, [r3, #0]
 80111d0:	687a      	ldr	r2, [r7, #4]
 80111d2:	429a      	cmp	r2, r3
 80111d4:	d105      	bne.n	80111e2 <tcp_abandon+0x96>
 80111d6:	4b39      	ldr	r3, [pc, #228]	; (80112bc <tcp_abandon+0x170>)
 80111d8:	681b      	ldr	r3, [r3, #0]
 80111da:	68db      	ldr	r3, [r3, #12]
 80111dc:	4a37      	ldr	r2, [pc, #220]	; (80112bc <tcp_abandon+0x170>)
 80111de:	6013      	str	r3, [r2, #0]
 80111e0:	e013      	b.n	801120a <tcp_abandon+0xbe>
 80111e2:	4b36      	ldr	r3, [pc, #216]	; (80112bc <tcp_abandon+0x170>)
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	61fb      	str	r3, [r7, #28]
 80111e8:	e00c      	b.n	8011204 <tcp_abandon+0xb8>
 80111ea:	69fb      	ldr	r3, [r7, #28]
 80111ec:	68db      	ldr	r3, [r3, #12]
 80111ee:	687a      	ldr	r2, [r7, #4]
 80111f0:	429a      	cmp	r2, r3
 80111f2:	d104      	bne.n	80111fe <tcp_abandon+0xb2>
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	68da      	ldr	r2, [r3, #12]
 80111f8:	69fb      	ldr	r3, [r7, #28]
 80111fa:	60da      	str	r2, [r3, #12]
 80111fc:	e005      	b.n	801120a <tcp_abandon+0xbe>
 80111fe:	69fb      	ldr	r3, [r7, #28]
 8011200:	68db      	ldr	r3, [r3, #12]
 8011202:	61fb      	str	r3, [r7, #28]
 8011204:	69fb      	ldr	r3, [r7, #28]
 8011206:	2b00      	cmp	r3, #0
 8011208:	d1ef      	bne.n	80111ea <tcp_abandon+0x9e>
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	2200      	movs	r2, #0
 801120e:	60da      	str	r2, [r3, #12]
 8011210:	e00b      	b.n	801122a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8011212:	683b      	ldr	r3, [r7, #0]
 8011214:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	8adb      	ldrh	r3, [r3, #22]
 801121a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801121c:	6879      	ldr	r1, [r7, #4]
 801121e:	4828      	ldr	r0, [pc, #160]	; (80112c0 <tcp_abandon+0x174>)
 8011220:	f000 ff7a 	bl	8012118 <tcp_pcb_remove>
 8011224:	4b27      	ldr	r3, [pc, #156]	; (80112c4 <tcp_abandon+0x178>)
 8011226:	2201      	movs	r2, #1
 8011228:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801122e:	2b00      	cmp	r3, #0
 8011230:	d004      	beq.n	801123c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011236:	4618      	mov	r0, r3
 8011238:	f000 fd1c 	bl	8011c74 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011240:	2b00      	cmp	r3, #0
 8011242:	d004      	beq.n	801124e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011248:	4618      	mov	r0, r3
 801124a:	f000 fd13 	bl	8011c74 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011252:	2b00      	cmp	r3, #0
 8011254:	d004      	beq.n	8011260 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801125a:	4618      	mov	r0, r3
 801125c:	f000 fd0a 	bl	8011c74 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8011260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011262:	2b00      	cmp	r3, #0
 8011264:	d00e      	beq.n	8011284 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8011266:	6879      	ldr	r1, [r7, #4]
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	3304      	adds	r3, #4
 801126c:	687a      	ldr	r2, [r7, #4]
 801126e:	8b12      	ldrh	r2, [r2, #24]
 8011270:	9202      	str	r2, [sp, #8]
 8011272:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011274:	9201      	str	r2, [sp, #4]
 8011276:	9300      	str	r3, [sp, #0]
 8011278:	460b      	mov	r3, r1
 801127a:	697a      	ldr	r2, [r7, #20]
 801127c:	69b9      	ldr	r1, [r7, #24]
 801127e:	6878      	ldr	r0, [r7, #4]
 8011280:	f004 fcc2 	bl	8015c08 <tcp_rst>
    }
    last_state = pcb->state;
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	7d1b      	ldrb	r3, [r3, #20]
 8011288:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801128a:	6878      	ldr	r0, [r7, #4]
 801128c:	f7ff fd34 	bl	8010cf8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8011290:	693b      	ldr	r3, [r7, #16]
 8011292:	2b00      	cmp	r3, #0
 8011294:	d004      	beq.n	80112a0 <tcp_abandon+0x154>
 8011296:	693b      	ldr	r3, [r7, #16]
 8011298:	f06f 010c 	mvn.w	r1, #12
 801129c:	68f8      	ldr	r0, [r7, #12]
 801129e:	4798      	blx	r3
  }
}
 80112a0:	3728      	adds	r7, #40	; 0x28
 80112a2:	46bd      	mov	sp, r7
 80112a4:	bd80      	pop	{r7, pc}
 80112a6:	bf00      	nop
 80112a8:	0801c7a4 	.word	0x0801c7a4
 80112ac:	0801c8e8 	.word	0x0801c8e8
 80112b0:	0801c7e8 	.word	0x0801c7e8
 80112b4:	0801c904 	.word	0x0801c904
 80112b8:	200080d8 	.word	0x200080d8
 80112bc:	200080cc 	.word	0x200080cc
 80112c0:	200080d4 	.word	0x200080d4
 80112c4:	200080dc 	.word	0x200080dc

080112c8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80112c8:	b580      	push	{r7, lr}
 80112ca:	b082      	sub	sp, #8
 80112cc:	af00      	add	r7, sp, #0
 80112ce:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80112d0:	2101      	movs	r1, #1
 80112d2:	6878      	ldr	r0, [r7, #4]
 80112d4:	f7ff ff3a 	bl	801114c <tcp_abandon>
}
 80112d8:	bf00      	nop
 80112da:	3708      	adds	r7, #8
 80112dc:	46bd      	mov	sp, r7
 80112de:	bd80      	pop	{r7, pc}

080112e0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80112e0:	b580      	push	{r7, lr}
 80112e2:	b084      	sub	sp, #16
 80112e4:	af00      	add	r7, sp, #0
 80112e6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d106      	bne.n	80112fc <tcp_update_rcv_ann_wnd+0x1c>
 80112ee:	4b25      	ldr	r3, [pc, #148]	; (8011384 <tcp_update_rcv_ann_wnd+0xa4>)
 80112f0:	f240 32a6 	movw	r2, #934	; 0x3a6
 80112f4:	4924      	ldr	r1, [pc, #144]	; (8011388 <tcp_update_rcv_ann_wnd+0xa8>)
 80112f6:	4825      	ldr	r0, [pc, #148]	; (801138c <tcp_update_rcv_ann_wnd+0xac>)
 80112f8:	f008 f920 	bl	801953c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011300:	687a      	ldr	r2, [r7, #4]
 8011302:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8011304:	4413      	add	r3, r2
 8011306:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801130c:	687a      	ldr	r2, [r7, #4]
 801130e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8011310:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8011314:	bf28      	it	cs
 8011316:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 801131a:	b292      	uxth	r2, r2
 801131c:	4413      	add	r3, r2
 801131e:	68fa      	ldr	r2, [r7, #12]
 8011320:	1ad3      	subs	r3, r2, r3
 8011322:	2b00      	cmp	r3, #0
 8011324:	db08      	blt.n	8011338 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011332:	68fa      	ldr	r2, [r7, #12]
 8011334:	1ad3      	subs	r3, r2, r3
 8011336:	e020      	b.n	801137a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011340:	1ad3      	subs	r3, r2, r3
 8011342:	2b00      	cmp	r3, #0
 8011344:	dd03      	ble.n	801134e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	2200      	movs	r2, #0
 801134a:	855a      	strh	r2, [r3, #42]	; 0x2a
 801134c:	e014      	b.n	8011378 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011356:	1ad3      	subs	r3, r2, r3
 8011358:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801135a:	68bb      	ldr	r3, [r7, #8]
 801135c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011360:	d306      	bcc.n	8011370 <tcp_update_rcv_ann_wnd+0x90>
 8011362:	4b08      	ldr	r3, [pc, #32]	; (8011384 <tcp_update_rcv_ann_wnd+0xa4>)
 8011364:	f240 32b6 	movw	r2, #950	; 0x3b6
 8011368:	4909      	ldr	r1, [pc, #36]	; (8011390 <tcp_update_rcv_ann_wnd+0xb0>)
 801136a:	4808      	ldr	r0, [pc, #32]	; (801138c <tcp_update_rcv_ann_wnd+0xac>)
 801136c:	f008 f8e6 	bl	801953c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8011370:	68bb      	ldr	r3, [r7, #8]
 8011372:	b29a      	uxth	r2, r3
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8011378:	2300      	movs	r3, #0
  }
}
 801137a:	4618      	mov	r0, r3
 801137c:	3710      	adds	r7, #16
 801137e:	46bd      	mov	sp, r7
 8011380:	bd80      	pop	{r7, pc}
 8011382:	bf00      	nop
 8011384:	0801c7a4 	.word	0x0801c7a4
 8011388:	0801ca00 	.word	0x0801ca00
 801138c:	0801c7e8 	.word	0x0801c7e8
 8011390:	0801ca24 	.word	0x0801ca24

08011394 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8011394:	b580      	push	{r7, lr}
 8011396:	b084      	sub	sp, #16
 8011398:	af00      	add	r7, sp, #0
 801139a:	6078      	str	r0, [r7, #4]
 801139c:	460b      	mov	r3, r1
 801139e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d107      	bne.n	80113b6 <tcp_recved+0x22>
 80113a6:	4b1f      	ldr	r3, [pc, #124]	; (8011424 <tcp_recved+0x90>)
 80113a8:	f240 32cf 	movw	r2, #975	; 0x3cf
 80113ac:	491e      	ldr	r1, [pc, #120]	; (8011428 <tcp_recved+0x94>)
 80113ae:	481f      	ldr	r0, [pc, #124]	; (801142c <tcp_recved+0x98>)
 80113b0:	f008 f8c4 	bl	801953c <iprintf>
 80113b4:	e032      	b.n	801141c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	7d1b      	ldrb	r3, [r3, #20]
 80113ba:	2b01      	cmp	r3, #1
 80113bc:	d106      	bne.n	80113cc <tcp_recved+0x38>
 80113be:	4b19      	ldr	r3, [pc, #100]	; (8011424 <tcp_recved+0x90>)
 80113c0:	f240 32d2 	movw	r2, #978	; 0x3d2
 80113c4:	491a      	ldr	r1, [pc, #104]	; (8011430 <tcp_recved+0x9c>)
 80113c6:	4819      	ldr	r0, [pc, #100]	; (801142c <tcp_recved+0x98>)
 80113c8:	f008 f8b8 	bl	801953c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80113d0:	887b      	ldrh	r3, [r7, #2]
 80113d2:	4413      	add	r3, r2
 80113d4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80113d6:	89fb      	ldrh	r3, [r7, #14]
 80113d8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80113dc:	d804      	bhi.n	80113e8 <tcp_recved+0x54>
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80113e2:	89fa      	ldrh	r2, [r7, #14]
 80113e4:	429a      	cmp	r2, r3
 80113e6:	d204      	bcs.n	80113f2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80113ee:	851a      	strh	r2, [r3, #40]	; 0x28
 80113f0:	e002      	b.n	80113f8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	89fa      	ldrh	r2, [r7, #14]
 80113f6:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80113f8:	6878      	ldr	r0, [r7, #4]
 80113fa:	f7ff ff71 	bl	80112e0 <tcp_update_rcv_ann_wnd>
 80113fe:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8011400:	68bb      	ldr	r3, [r7, #8]
 8011402:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8011406:	d309      	bcc.n	801141c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	8b5b      	ldrh	r3, [r3, #26]
 801140c:	f043 0302 	orr.w	r3, r3, #2
 8011410:	b29a      	uxth	r2, r3
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011416:	6878      	ldr	r0, [r7, #4]
 8011418:	f003 fe42 	bl	80150a0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 801141c:	3710      	adds	r7, #16
 801141e:	46bd      	mov	sp, r7
 8011420:	bd80      	pop	{r7, pc}
 8011422:	bf00      	nop
 8011424:	0801c7a4 	.word	0x0801c7a4
 8011428:	0801ca40 	.word	0x0801ca40
 801142c:	0801c7e8 	.word	0x0801c7e8
 8011430:	0801ca58 	.word	0x0801ca58

08011434 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8011434:	b5b0      	push	{r4, r5, r7, lr}
 8011436:	b090      	sub	sp, #64	; 0x40
 8011438:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801143a:	2300      	movs	r3, #0
 801143c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8011440:	4b94      	ldr	r3, [pc, #592]	; (8011694 <tcp_slowtmr+0x260>)
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	3301      	adds	r3, #1
 8011446:	4a93      	ldr	r2, [pc, #588]	; (8011694 <tcp_slowtmr+0x260>)
 8011448:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801144a:	4b93      	ldr	r3, [pc, #588]	; (8011698 <tcp_slowtmr+0x264>)
 801144c:	781b      	ldrb	r3, [r3, #0]
 801144e:	3301      	adds	r3, #1
 8011450:	b2da      	uxtb	r2, r3
 8011452:	4b91      	ldr	r3, [pc, #580]	; (8011698 <tcp_slowtmr+0x264>)
 8011454:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8011456:	2300      	movs	r3, #0
 8011458:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 801145a:	4b90      	ldr	r3, [pc, #576]	; (801169c <tcp_slowtmr+0x268>)
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8011460:	e29d      	b.n	801199e <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8011462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011464:	7d1b      	ldrb	r3, [r3, #20]
 8011466:	2b00      	cmp	r3, #0
 8011468:	d106      	bne.n	8011478 <tcp_slowtmr+0x44>
 801146a:	4b8d      	ldr	r3, [pc, #564]	; (80116a0 <tcp_slowtmr+0x26c>)
 801146c:	f240 42be 	movw	r2, #1214	; 0x4be
 8011470:	498c      	ldr	r1, [pc, #560]	; (80116a4 <tcp_slowtmr+0x270>)
 8011472:	488d      	ldr	r0, [pc, #564]	; (80116a8 <tcp_slowtmr+0x274>)
 8011474:	f008 f862 	bl	801953c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8011478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801147a:	7d1b      	ldrb	r3, [r3, #20]
 801147c:	2b01      	cmp	r3, #1
 801147e:	d106      	bne.n	801148e <tcp_slowtmr+0x5a>
 8011480:	4b87      	ldr	r3, [pc, #540]	; (80116a0 <tcp_slowtmr+0x26c>)
 8011482:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8011486:	4989      	ldr	r1, [pc, #548]	; (80116ac <tcp_slowtmr+0x278>)
 8011488:	4887      	ldr	r0, [pc, #540]	; (80116a8 <tcp_slowtmr+0x274>)
 801148a:	f008 f857 	bl	801953c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801148e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011490:	7d1b      	ldrb	r3, [r3, #20]
 8011492:	2b0a      	cmp	r3, #10
 8011494:	d106      	bne.n	80114a4 <tcp_slowtmr+0x70>
 8011496:	4b82      	ldr	r3, [pc, #520]	; (80116a0 <tcp_slowtmr+0x26c>)
 8011498:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 801149c:	4984      	ldr	r1, [pc, #528]	; (80116b0 <tcp_slowtmr+0x27c>)
 801149e:	4882      	ldr	r0, [pc, #520]	; (80116a8 <tcp_slowtmr+0x274>)
 80114a0:	f008 f84c 	bl	801953c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80114a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114a6:	7f9a      	ldrb	r2, [r3, #30]
 80114a8:	4b7b      	ldr	r3, [pc, #492]	; (8011698 <tcp_slowtmr+0x264>)
 80114aa:	781b      	ldrb	r3, [r3, #0]
 80114ac:	429a      	cmp	r2, r3
 80114ae:	d105      	bne.n	80114bc <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80114b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114b2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80114b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114b6:	68db      	ldr	r3, [r3, #12]
 80114b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80114ba:	e270      	b.n	801199e <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 80114bc:	4b76      	ldr	r3, [pc, #472]	; (8011698 <tcp_slowtmr+0x264>)
 80114be:	781a      	ldrb	r2, [r3, #0]
 80114c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114c2:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80114c4:	2300      	movs	r3, #0
 80114c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80114ca:	2300      	movs	r3, #0
 80114cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80114d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114d2:	7d1b      	ldrb	r3, [r3, #20]
 80114d4:	2b02      	cmp	r3, #2
 80114d6:	d10a      	bne.n	80114ee <tcp_slowtmr+0xba>
 80114d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80114de:	2b05      	cmp	r3, #5
 80114e0:	d905      	bls.n	80114ee <tcp_slowtmr+0xba>
      ++pcb_remove;
 80114e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80114e6:	3301      	adds	r3, #1
 80114e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80114ec:	e11e      	b.n	801172c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80114ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80114f4:	2b0b      	cmp	r3, #11
 80114f6:	d905      	bls.n	8011504 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80114f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80114fc:	3301      	adds	r3, #1
 80114fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011502:	e113      	b.n	801172c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8011504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011506:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801150a:	2b00      	cmp	r3, #0
 801150c:	d075      	beq.n	80115fa <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801150e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011512:	2b00      	cmp	r3, #0
 8011514:	d006      	beq.n	8011524 <tcp_slowtmr+0xf0>
 8011516:	4b62      	ldr	r3, [pc, #392]	; (80116a0 <tcp_slowtmr+0x26c>)
 8011518:	f240 42d4 	movw	r2, #1236	; 0x4d4
 801151c:	4965      	ldr	r1, [pc, #404]	; (80116b4 <tcp_slowtmr+0x280>)
 801151e:	4862      	ldr	r0, [pc, #392]	; (80116a8 <tcp_slowtmr+0x274>)
 8011520:	f008 f80c 	bl	801953c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8011524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011526:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011528:	2b00      	cmp	r3, #0
 801152a:	d106      	bne.n	801153a <tcp_slowtmr+0x106>
 801152c:	4b5c      	ldr	r3, [pc, #368]	; (80116a0 <tcp_slowtmr+0x26c>)
 801152e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8011532:	4961      	ldr	r1, [pc, #388]	; (80116b8 <tcp_slowtmr+0x284>)
 8011534:	485c      	ldr	r0, [pc, #368]	; (80116a8 <tcp_slowtmr+0x274>)
 8011536:	f008 f801 	bl	801953c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801153a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801153c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011540:	2b0b      	cmp	r3, #11
 8011542:	d905      	bls.n	8011550 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8011544:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011548:	3301      	adds	r3, #1
 801154a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801154e:	e0ed      	b.n	801172c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8011550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011552:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011556:	3b01      	subs	r3, #1
 8011558:	4a58      	ldr	r2, [pc, #352]	; (80116bc <tcp_slowtmr+0x288>)
 801155a:	5cd3      	ldrb	r3, [r2, r3]
 801155c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801155e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011560:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011564:	7c7a      	ldrb	r2, [r7, #17]
 8011566:	429a      	cmp	r2, r3
 8011568:	d907      	bls.n	801157a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 801156a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801156c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011570:	3301      	adds	r3, #1
 8011572:	b2da      	uxtb	r2, r3
 8011574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011576:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 801157a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801157c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011580:	7c7a      	ldrb	r2, [r7, #17]
 8011582:	429a      	cmp	r2, r3
 8011584:	f200 80d2 	bhi.w	801172c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8011588:	2301      	movs	r3, #1
 801158a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 801158c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801158e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011592:	2b00      	cmp	r3, #0
 8011594:	d108      	bne.n	80115a8 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8011596:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011598:	f004 fc2a 	bl	8015df0 <tcp_zero_window_probe>
 801159c:	4603      	mov	r3, r0
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d014      	beq.n	80115cc <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80115a2:	2300      	movs	r3, #0
 80115a4:	623b      	str	r3, [r7, #32]
 80115a6:	e011      	b.n	80115cc <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80115a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80115ae:	4619      	mov	r1, r3
 80115b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80115b2:	f003 faef 	bl	8014b94 <tcp_split_unsent_seg>
 80115b6:	4603      	mov	r3, r0
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d107      	bne.n	80115cc <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80115bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80115be:	f003 fd6f 	bl	80150a0 <tcp_output>
 80115c2:	4603      	mov	r3, r0
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d101      	bne.n	80115cc <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80115c8:	2300      	movs	r3, #0
 80115ca:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80115cc:	6a3b      	ldr	r3, [r7, #32]
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	f000 80ac 	beq.w	801172c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80115d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115d6:	2200      	movs	r2, #0
 80115d8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80115dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115de:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80115e2:	2b06      	cmp	r3, #6
 80115e4:	f200 80a2 	bhi.w	801172c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80115e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115ea:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80115ee:	3301      	adds	r3, #1
 80115f0:	b2da      	uxtb	r2, r3
 80115f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115f4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80115f8:	e098      	b.n	801172c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80115fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115fc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011600:	2b00      	cmp	r3, #0
 8011602:	db0f      	blt.n	8011624 <tcp_slowtmr+0x1f0>
 8011604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011606:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801160a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801160e:	4293      	cmp	r3, r2
 8011610:	d008      	beq.n	8011624 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8011612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011614:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011618:	b29b      	uxth	r3, r3
 801161a:	3301      	adds	r3, #1
 801161c:	b29b      	uxth	r3, r3
 801161e:	b21a      	sxth	r2, r3
 8011620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011622:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8011624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011626:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 801162a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801162c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8011630:	429a      	cmp	r2, r3
 8011632:	db7b      	blt.n	801172c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8011634:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011636:	f004 f827 	bl	8015688 <tcp_rexmit_rto_prepare>
 801163a:	4603      	mov	r3, r0
 801163c:	2b00      	cmp	r3, #0
 801163e:	d007      	beq.n	8011650 <tcp_slowtmr+0x21c>
 8011640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011644:	2b00      	cmp	r3, #0
 8011646:	d171      	bne.n	801172c <tcp_slowtmr+0x2f8>
 8011648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801164a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801164c:	2b00      	cmp	r3, #0
 801164e:	d06d      	beq.n	801172c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8011650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011652:	7d1b      	ldrb	r3, [r3, #20]
 8011654:	2b02      	cmp	r3, #2
 8011656:	d03a      	beq.n	80116ce <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8011658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801165a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801165e:	2b0c      	cmp	r3, #12
 8011660:	bf28      	it	cs
 8011662:	230c      	movcs	r3, #12
 8011664:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8011666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011668:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801166c:	10db      	asrs	r3, r3, #3
 801166e:	b21b      	sxth	r3, r3
 8011670:	461a      	mov	r2, r3
 8011672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011674:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011678:	4413      	add	r3, r2
 801167a:	7efa      	ldrb	r2, [r7, #27]
 801167c:	4910      	ldr	r1, [pc, #64]	; (80116c0 <tcp_slowtmr+0x28c>)
 801167e:	5c8a      	ldrb	r2, [r1, r2]
 8011680:	4093      	lsls	r3, r2
 8011682:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8011684:	697b      	ldr	r3, [r7, #20]
 8011686:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 801168a:	4293      	cmp	r3, r2
 801168c:	dc1a      	bgt.n	80116c4 <tcp_slowtmr+0x290>
 801168e:	697b      	ldr	r3, [r7, #20]
 8011690:	b21a      	sxth	r2, r3
 8011692:	e019      	b.n	80116c8 <tcp_slowtmr+0x294>
 8011694:	200080c8 	.word	0x200080c8
 8011698:	200080de 	.word	0x200080de
 801169c:	200080d4 	.word	0x200080d4
 80116a0:	0801c7a4 	.word	0x0801c7a4
 80116a4:	0801cae8 	.word	0x0801cae8
 80116a8:	0801c7e8 	.word	0x0801c7e8
 80116ac:	0801cb14 	.word	0x0801cb14
 80116b0:	0801cb40 	.word	0x0801cb40
 80116b4:	0801cb70 	.word	0x0801cb70
 80116b8:	0801cba4 	.word	0x0801cba4
 80116bc:	0801e7b4 	.word	0x0801e7b4
 80116c0:	0801e7a4 	.word	0x0801e7a4
 80116c4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80116c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80116ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116d0:	2200      	movs	r2, #0
 80116d2:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80116d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116d6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80116da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116dc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80116e0:	4293      	cmp	r3, r2
 80116e2:	bf28      	it	cs
 80116e4:	4613      	movcs	r3, r2
 80116e6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80116e8:	8a7b      	ldrh	r3, [r7, #18]
 80116ea:	085b      	lsrs	r3, r3, #1
 80116ec:	b29a      	uxth	r2, r3
 80116ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116f0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80116f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116f6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80116fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80116fe:	005b      	lsls	r3, r3, #1
 8011700:	b29b      	uxth	r3, r3
 8011702:	429a      	cmp	r2, r3
 8011704:	d206      	bcs.n	8011714 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8011706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011708:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801170a:	005b      	lsls	r3, r3, #1
 801170c:	b29a      	uxth	r2, r3
 801170e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011710:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8011714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011716:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8011718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801171a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 801171e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011720:	2200      	movs	r2, #0
 8011722:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8011726:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011728:	f004 f81e 	bl	8015768 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 801172c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801172e:	7d1b      	ldrb	r3, [r3, #20]
 8011730:	2b06      	cmp	r3, #6
 8011732:	d111      	bne.n	8011758 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8011734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011736:	8b5b      	ldrh	r3, [r3, #26]
 8011738:	f003 0310 	and.w	r3, r3, #16
 801173c:	2b00      	cmp	r3, #0
 801173e:	d00b      	beq.n	8011758 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011740:	4b9c      	ldr	r3, [pc, #624]	; (80119b4 <tcp_slowtmr+0x580>)
 8011742:	681a      	ldr	r2, [r3, #0]
 8011744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011746:	6a1b      	ldr	r3, [r3, #32]
 8011748:	1ad3      	subs	r3, r2, r3
 801174a:	2b28      	cmp	r3, #40	; 0x28
 801174c:	d904      	bls.n	8011758 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 801174e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011752:	3301      	adds	r3, #1
 8011754:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801175a:	7a5b      	ldrb	r3, [r3, #9]
 801175c:	f003 0308 	and.w	r3, r3, #8
 8011760:	2b00      	cmp	r3, #0
 8011762:	d04a      	beq.n	80117fa <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8011764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011766:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011768:	2b04      	cmp	r3, #4
 801176a:	d003      	beq.n	8011774 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 801176c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801176e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8011770:	2b07      	cmp	r3, #7
 8011772:	d142      	bne.n	80117fa <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011774:	4b8f      	ldr	r3, [pc, #572]	; (80119b4 <tcp_slowtmr+0x580>)
 8011776:	681a      	ldr	r2, [r3, #0]
 8011778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801177a:	6a1b      	ldr	r3, [r3, #32]
 801177c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801177e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011780:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8011784:	4b8c      	ldr	r3, [pc, #560]	; (80119b8 <tcp_slowtmr+0x584>)
 8011786:	440b      	add	r3, r1
 8011788:	498c      	ldr	r1, [pc, #560]	; (80119bc <tcp_slowtmr+0x588>)
 801178a:	fba1 1303 	umull	r1, r3, r1, r3
 801178e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011790:	429a      	cmp	r2, r3
 8011792:	d90a      	bls.n	80117aa <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8011794:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011798:	3301      	adds	r3, #1
 801179a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 801179e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80117a2:	3301      	adds	r3, #1
 80117a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80117a8:	e027      	b.n	80117fa <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80117aa:	4b82      	ldr	r3, [pc, #520]	; (80119b4 <tcp_slowtmr+0x580>)
 80117ac:	681a      	ldr	r2, [r3, #0]
 80117ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117b0:	6a1b      	ldr	r3, [r3, #32]
 80117b2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80117b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117b6:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80117ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117bc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80117c0:	4618      	mov	r0, r3
 80117c2:	4b7f      	ldr	r3, [pc, #508]	; (80119c0 <tcp_slowtmr+0x58c>)
 80117c4:	fb00 f303 	mul.w	r3, r0, r3
 80117c8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80117ca:	497c      	ldr	r1, [pc, #496]	; (80119bc <tcp_slowtmr+0x588>)
 80117cc:	fba1 1303 	umull	r1, r3, r1, r3
 80117d0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80117d2:	429a      	cmp	r2, r3
 80117d4:	d911      	bls.n	80117fa <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 80117d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80117d8:	f004 faca 	bl	8015d70 <tcp_keepalive>
 80117dc:	4603      	mov	r3, r0
 80117de:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80117e2:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d107      	bne.n	80117fa <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 80117ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117ec:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80117f0:	3301      	adds	r3, #1
 80117f2:	b2da      	uxtb	r2, r3
 80117f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117f6:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80117fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d011      	beq.n	8011826 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8011802:	4b6c      	ldr	r3, [pc, #432]	; (80119b4 <tcp_slowtmr+0x580>)
 8011804:	681a      	ldr	r2, [r3, #0]
 8011806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011808:	6a1b      	ldr	r3, [r3, #32]
 801180a:	1ad2      	subs	r2, r2, r3
 801180c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801180e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8011812:	4619      	mov	r1, r3
 8011814:	460b      	mov	r3, r1
 8011816:	005b      	lsls	r3, r3, #1
 8011818:	440b      	add	r3, r1
 801181a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 801181c:	429a      	cmp	r2, r3
 801181e:	d302      	bcc.n	8011826 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8011820:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011822:	f000 fddd 	bl	80123e0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8011826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011828:	7d1b      	ldrb	r3, [r3, #20]
 801182a:	2b03      	cmp	r3, #3
 801182c:	d10b      	bne.n	8011846 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801182e:	4b61      	ldr	r3, [pc, #388]	; (80119b4 <tcp_slowtmr+0x580>)
 8011830:	681a      	ldr	r2, [r3, #0]
 8011832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011834:	6a1b      	ldr	r3, [r3, #32]
 8011836:	1ad3      	subs	r3, r2, r3
 8011838:	2b28      	cmp	r3, #40	; 0x28
 801183a:	d904      	bls.n	8011846 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 801183c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011840:	3301      	adds	r3, #1
 8011842:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8011846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011848:	7d1b      	ldrb	r3, [r3, #20]
 801184a:	2b09      	cmp	r3, #9
 801184c:	d10b      	bne.n	8011866 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801184e:	4b59      	ldr	r3, [pc, #356]	; (80119b4 <tcp_slowtmr+0x580>)
 8011850:	681a      	ldr	r2, [r3, #0]
 8011852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011854:	6a1b      	ldr	r3, [r3, #32]
 8011856:	1ad3      	subs	r3, r2, r3
 8011858:	2bf0      	cmp	r3, #240	; 0xf0
 801185a:	d904      	bls.n	8011866 <tcp_slowtmr+0x432>
        ++pcb_remove;
 801185c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011860:	3301      	adds	r3, #1
 8011862:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011866:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801186a:	2b00      	cmp	r3, #0
 801186c:	d060      	beq.n	8011930 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 801186e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011874:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8011876:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011878:	f000 fbfe 	bl	8012078 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 801187c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801187e:	2b00      	cmp	r3, #0
 8011880:	d010      	beq.n	80118a4 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8011882:	4b50      	ldr	r3, [pc, #320]	; (80119c4 <tcp_slowtmr+0x590>)
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011888:	429a      	cmp	r2, r3
 801188a:	d106      	bne.n	801189a <tcp_slowtmr+0x466>
 801188c:	4b4e      	ldr	r3, [pc, #312]	; (80119c8 <tcp_slowtmr+0x594>)
 801188e:	f240 526d 	movw	r2, #1389	; 0x56d
 8011892:	494e      	ldr	r1, [pc, #312]	; (80119cc <tcp_slowtmr+0x598>)
 8011894:	484e      	ldr	r0, [pc, #312]	; (80119d0 <tcp_slowtmr+0x59c>)
 8011896:	f007 fe51 	bl	801953c <iprintf>
        prev->next = pcb->next;
 801189a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801189c:	68da      	ldr	r2, [r3, #12]
 801189e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118a0:	60da      	str	r2, [r3, #12]
 80118a2:	e00f      	b.n	80118c4 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80118a4:	4b47      	ldr	r3, [pc, #284]	; (80119c4 <tcp_slowtmr+0x590>)
 80118a6:	681b      	ldr	r3, [r3, #0]
 80118a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80118aa:	429a      	cmp	r2, r3
 80118ac:	d006      	beq.n	80118bc <tcp_slowtmr+0x488>
 80118ae:	4b46      	ldr	r3, [pc, #280]	; (80119c8 <tcp_slowtmr+0x594>)
 80118b0:	f240 5271 	movw	r2, #1393	; 0x571
 80118b4:	4947      	ldr	r1, [pc, #284]	; (80119d4 <tcp_slowtmr+0x5a0>)
 80118b6:	4846      	ldr	r0, [pc, #280]	; (80119d0 <tcp_slowtmr+0x59c>)
 80118b8:	f007 fe40 	bl	801953c <iprintf>
        tcp_active_pcbs = pcb->next;
 80118bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118be:	68db      	ldr	r3, [r3, #12]
 80118c0:	4a40      	ldr	r2, [pc, #256]	; (80119c4 <tcp_slowtmr+0x590>)
 80118c2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80118c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d013      	beq.n	80118f4 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80118cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118ce:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80118d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118d2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80118d4:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80118d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118d8:	3304      	adds	r3, #4
 80118da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80118dc:	8ad2      	ldrh	r2, [r2, #22]
 80118de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80118e0:	8b09      	ldrh	r1, [r1, #24]
 80118e2:	9102      	str	r1, [sp, #8]
 80118e4:	9201      	str	r2, [sp, #4]
 80118e6:	9300      	str	r3, [sp, #0]
 80118e8:	462b      	mov	r3, r5
 80118ea:	4622      	mov	r2, r4
 80118ec:	4601      	mov	r1, r0
 80118ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80118f0:	f004 f98a 	bl	8015c08 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80118f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118f6:	691b      	ldr	r3, [r3, #16]
 80118f8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80118fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118fc:	7d1b      	ldrb	r3, [r3, #20]
 80118fe:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8011900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011902:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8011904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011906:	68db      	ldr	r3, [r3, #12]
 8011908:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801190a:	6838      	ldr	r0, [r7, #0]
 801190c:	f7ff f9f4 	bl	8010cf8 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8011910:	4b31      	ldr	r3, [pc, #196]	; (80119d8 <tcp_slowtmr+0x5a4>)
 8011912:	2200      	movs	r2, #0
 8011914:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	2b00      	cmp	r3, #0
 801191a:	d004      	beq.n	8011926 <tcp_slowtmr+0x4f2>
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	f06f 010c 	mvn.w	r1, #12
 8011922:	68b8      	ldr	r0, [r7, #8]
 8011924:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8011926:	4b2c      	ldr	r3, [pc, #176]	; (80119d8 <tcp_slowtmr+0x5a4>)
 8011928:	781b      	ldrb	r3, [r3, #0]
 801192a:	2b00      	cmp	r3, #0
 801192c:	d037      	beq.n	801199e <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 801192e:	e592      	b.n	8011456 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8011930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011932:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8011934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011936:	68db      	ldr	r3, [r3, #12]
 8011938:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 801193a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801193c:	7f1b      	ldrb	r3, [r3, #28]
 801193e:	3301      	adds	r3, #1
 8011940:	b2da      	uxtb	r2, r3
 8011942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011944:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8011946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011948:	7f1a      	ldrb	r2, [r3, #28]
 801194a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801194c:	7f5b      	ldrb	r3, [r3, #29]
 801194e:	429a      	cmp	r2, r3
 8011950:	d325      	bcc.n	801199e <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8011952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011954:	2200      	movs	r2, #0
 8011956:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8011958:	4b1f      	ldr	r3, [pc, #124]	; (80119d8 <tcp_slowtmr+0x5a4>)
 801195a:	2200      	movs	r2, #0
 801195c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801195e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011960:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011964:	2b00      	cmp	r3, #0
 8011966:	d00b      	beq.n	8011980 <tcp_slowtmr+0x54c>
 8011968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801196a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801196e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011970:	6912      	ldr	r2, [r2, #16]
 8011972:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011974:	4610      	mov	r0, r2
 8011976:	4798      	blx	r3
 8011978:	4603      	mov	r3, r0
 801197a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801197e:	e002      	b.n	8011986 <tcp_slowtmr+0x552>
 8011980:	2300      	movs	r3, #0
 8011982:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8011986:	4b14      	ldr	r3, [pc, #80]	; (80119d8 <tcp_slowtmr+0x5a4>)
 8011988:	781b      	ldrb	r3, [r3, #0]
 801198a:	2b00      	cmp	r3, #0
 801198c:	d000      	beq.n	8011990 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 801198e:	e562      	b.n	8011456 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8011990:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8011994:	2b00      	cmp	r3, #0
 8011996:	d102      	bne.n	801199e <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8011998:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801199a:	f003 fb81 	bl	80150a0 <tcp_output>
  while (pcb != NULL) {
 801199e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	f47f ad5e 	bne.w	8011462 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80119a6:	2300      	movs	r3, #0
 80119a8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80119aa:	4b0c      	ldr	r3, [pc, #48]	; (80119dc <tcp_slowtmr+0x5a8>)
 80119ac:	681b      	ldr	r3, [r3, #0]
 80119ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80119b0:	e069      	b.n	8011a86 <tcp_slowtmr+0x652>
 80119b2:	bf00      	nop
 80119b4:	200080c8 	.word	0x200080c8
 80119b8:	000a4cb8 	.word	0x000a4cb8
 80119bc:	10624dd3 	.word	0x10624dd3
 80119c0:	000124f8 	.word	0x000124f8
 80119c4:	200080d4 	.word	0x200080d4
 80119c8:	0801c7a4 	.word	0x0801c7a4
 80119cc:	0801cbdc 	.word	0x0801cbdc
 80119d0:	0801c7e8 	.word	0x0801c7e8
 80119d4:	0801cc08 	.word	0x0801cc08
 80119d8:	200080dc 	.word	0x200080dc
 80119dc:	200080d8 	.word	0x200080d8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80119e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119e2:	7d1b      	ldrb	r3, [r3, #20]
 80119e4:	2b0a      	cmp	r3, #10
 80119e6:	d006      	beq.n	80119f6 <tcp_slowtmr+0x5c2>
 80119e8:	4b2b      	ldr	r3, [pc, #172]	; (8011a98 <tcp_slowtmr+0x664>)
 80119ea:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80119ee:	492b      	ldr	r1, [pc, #172]	; (8011a9c <tcp_slowtmr+0x668>)
 80119f0:	482b      	ldr	r0, [pc, #172]	; (8011aa0 <tcp_slowtmr+0x66c>)
 80119f2:	f007 fda3 	bl	801953c <iprintf>
    pcb_remove = 0;
 80119f6:	2300      	movs	r3, #0
 80119f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80119fc:	4b29      	ldr	r3, [pc, #164]	; (8011aa4 <tcp_slowtmr+0x670>)
 80119fe:	681a      	ldr	r2, [r3, #0]
 8011a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a02:	6a1b      	ldr	r3, [r3, #32]
 8011a04:	1ad3      	subs	r3, r2, r3
 8011a06:	2bf0      	cmp	r3, #240	; 0xf0
 8011a08:	d904      	bls.n	8011a14 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8011a0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011a0e:	3301      	adds	r3, #1
 8011a10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011a14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d02f      	beq.n	8011a7c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8011a1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011a1e:	f000 fb2b 	bl	8012078 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8011a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d010      	beq.n	8011a4a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8011a28:	4b1f      	ldr	r3, [pc, #124]	; (8011aa8 <tcp_slowtmr+0x674>)
 8011a2a:	681b      	ldr	r3, [r3, #0]
 8011a2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011a2e:	429a      	cmp	r2, r3
 8011a30:	d106      	bne.n	8011a40 <tcp_slowtmr+0x60c>
 8011a32:	4b19      	ldr	r3, [pc, #100]	; (8011a98 <tcp_slowtmr+0x664>)
 8011a34:	f240 52af 	movw	r2, #1455	; 0x5af
 8011a38:	491c      	ldr	r1, [pc, #112]	; (8011aac <tcp_slowtmr+0x678>)
 8011a3a:	4819      	ldr	r0, [pc, #100]	; (8011aa0 <tcp_slowtmr+0x66c>)
 8011a3c:	f007 fd7e 	bl	801953c <iprintf>
        prev->next = pcb->next;
 8011a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a42:	68da      	ldr	r2, [r3, #12]
 8011a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a46:	60da      	str	r2, [r3, #12]
 8011a48:	e00f      	b.n	8011a6a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8011a4a:	4b17      	ldr	r3, [pc, #92]	; (8011aa8 <tcp_slowtmr+0x674>)
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011a50:	429a      	cmp	r2, r3
 8011a52:	d006      	beq.n	8011a62 <tcp_slowtmr+0x62e>
 8011a54:	4b10      	ldr	r3, [pc, #64]	; (8011a98 <tcp_slowtmr+0x664>)
 8011a56:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8011a5a:	4915      	ldr	r1, [pc, #84]	; (8011ab0 <tcp_slowtmr+0x67c>)
 8011a5c:	4810      	ldr	r0, [pc, #64]	; (8011aa0 <tcp_slowtmr+0x66c>)
 8011a5e:	f007 fd6d 	bl	801953c <iprintf>
        tcp_tw_pcbs = pcb->next;
 8011a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a64:	68db      	ldr	r3, [r3, #12]
 8011a66:	4a10      	ldr	r2, [pc, #64]	; (8011aa8 <tcp_slowtmr+0x674>)
 8011a68:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8011a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a6c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8011a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a70:	68db      	ldr	r3, [r3, #12]
 8011a72:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8011a74:	69f8      	ldr	r0, [r7, #28]
 8011a76:	f7ff f93f 	bl	8010cf8 <tcp_free>
 8011a7a:	e004      	b.n	8011a86 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8011a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a7e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8011a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a82:	68db      	ldr	r3, [r3, #12]
 8011a84:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8011a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d1a9      	bne.n	80119e0 <tcp_slowtmr+0x5ac>
    }
  }
}
 8011a8c:	bf00      	nop
 8011a8e:	bf00      	nop
 8011a90:	3730      	adds	r7, #48	; 0x30
 8011a92:	46bd      	mov	sp, r7
 8011a94:	bdb0      	pop	{r4, r5, r7, pc}
 8011a96:	bf00      	nop
 8011a98:	0801c7a4 	.word	0x0801c7a4
 8011a9c:	0801cc34 	.word	0x0801cc34
 8011aa0:	0801c7e8 	.word	0x0801c7e8
 8011aa4:	200080c8 	.word	0x200080c8
 8011aa8:	200080d8 	.word	0x200080d8
 8011aac:	0801cc64 	.word	0x0801cc64
 8011ab0:	0801cc8c 	.word	0x0801cc8c

08011ab4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8011ab4:	b580      	push	{r7, lr}
 8011ab6:	b082      	sub	sp, #8
 8011ab8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8011aba:	4b2d      	ldr	r3, [pc, #180]	; (8011b70 <tcp_fasttmr+0xbc>)
 8011abc:	781b      	ldrb	r3, [r3, #0]
 8011abe:	3301      	adds	r3, #1
 8011ac0:	b2da      	uxtb	r2, r3
 8011ac2:	4b2b      	ldr	r3, [pc, #172]	; (8011b70 <tcp_fasttmr+0xbc>)
 8011ac4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8011ac6:	4b2b      	ldr	r3, [pc, #172]	; (8011b74 <tcp_fasttmr+0xc0>)
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8011acc:	e048      	b.n	8011b60 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	7f9a      	ldrb	r2, [r3, #30]
 8011ad2:	4b27      	ldr	r3, [pc, #156]	; (8011b70 <tcp_fasttmr+0xbc>)
 8011ad4:	781b      	ldrb	r3, [r3, #0]
 8011ad6:	429a      	cmp	r2, r3
 8011ad8:	d03f      	beq.n	8011b5a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8011ada:	4b25      	ldr	r3, [pc, #148]	; (8011b70 <tcp_fasttmr+0xbc>)
 8011adc:	781a      	ldrb	r2, [r3, #0]
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	8b5b      	ldrh	r3, [r3, #26]
 8011ae6:	f003 0301 	and.w	r3, r3, #1
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d010      	beq.n	8011b10 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	8b5b      	ldrh	r3, [r3, #26]
 8011af2:	f043 0302 	orr.w	r3, r3, #2
 8011af6:	b29a      	uxth	r2, r3
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8011afc:	6878      	ldr	r0, [r7, #4]
 8011afe:	f003 facf 	bl	80150a0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	8b5b      	ldrh	r3, [r3, #26]
 8011b06:	f023 0303 	bic.w	r3, r3, #3
 8011b0a:	b29a      	uxth	r2, r3
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	8b5b      	ldrh	r3, [r3, #26]
 8011b14:	f003 0308 	and.w	r3, r3, #8
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d009      	beq.n	8011b30 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	8b5b      	ldrh	r3, [r3, #26]
 8011b20:	f023 0308 	bic.w	r3, r3, #8
 8011b24:	b29a      	uxth	r2, r3
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8011b2a:	6878      	ldr	r0, [r7, #4]
 8011b2c:	f7ff fa78 	bl	8011020 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	68db      	ldr	r3, [r3, #12]
 8011b34:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d00a      	beq.n	8011b54 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8011b3e:	4b0e      	ldr	r3, [pc, #56]	; (8011b78 <tcp_fasttmr+0xc4>)
 8011b40:	2200      	movs	r2, #0
 8011b42:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8011b44:	6878      	ldr	r0, [r7, #4]
 8011b46:	f000 f819 	bl	8011b7c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8011b4a:	4b0b      	ldr	r3, [pc, #44]	; (8011b78 <tcp_fasttmr+0xc4>)
 8011b4c:	781b      	ldrb	r3, [r3, #0]
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d000      	beq.n	8011b54 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8011b52:	e7b8      	b.n	8011ac6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8011b54:	683b      	ldr	r3, [r7, #0]
 8011b56:	607b      	str	r3, [r7, #4]
 8011b58:	e002      	b.n	8011b60 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	68db      	ldr	r3, [r3, #12]
 8011b5e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d1b3      	bne.n	8011ace <tcp_fasttmr+0x1a>
    }
  }
}
 8011b66:	bf00      	nop
 8011b68:	bf00      	nop
 8011b6a:	3708      	adds	r7, #8
 8011b6c:	46bd      	mov	sp, r7
 8011b6e:	bd80      	pop	{r7, pc}
 8011b70:	200080de 	.word	0x200080de
 8011b74:	200080d4 	.word	0x200080d4
 8011b78:	200080dc 	.word	0x200080dc

08011b7c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8011b7c:	b590      	push	{r4, r7, lr}
 8011b7e:	b085      	sub	sp, #20
 8011b80:	af00      	add	r7, sp, #0
 8011b82:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d109      	bne.n	8011b9e <tcp_process_refused_data+0x22>
 8011b8a:	4b37      	ldr	r3, [pc, #220]	; (8011c68 <tcp_process_refused_data+0xec>)
 8011b8c:	f240 6209 	movw	r2, #1545	; 0x609
 8011b90:	4936      	ldr	r1, [pc, #216]	; (8011c6c <tcp_process_refused_data+0xf0>)
 8011b92:	4837      	ldr	r0, [pc, #220]	; (8011c70 <tcp_process_refused_data+0xf4>)
 8011b94:	f007 fcd2 	bl	801953c <iprintf>
 8011b98:	f06f 030f 	mvn.w	r3, #15
 8011b9c:	e060      	b.n	8011c60 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011ba2:	7b5b      	ldrb	r3, [r3, #13]
 8011ba4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011baa:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	2200      	movs	r2, #0
 8011bb0:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d00b      	beq.n	8011bd4 <tcp_process_refused_data+0x58>
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	6918      	ldr	r0, [r3, #16]
 8011bc6:	2300      	movs	r3, #0
 8011bc8:	68ba      	ldr	r2, [r7, #8]
 8011bca:	6879      	ldr	r1, [r7, #4]
 8011bcc:	47a0      	blx	r4
 8011bce:	4603      	mov	r3, r0
 8011bd0:	73fb      	strb	r3, [r7, #15]
 8011bd2:	e007      	b.n	8011be4 <tcp_process_refused_data+0x68>
 8011bd4:	2300      	movs	r3, #0
 8011bd6:	68ba      	ldr	r2, [r7, #8]
 8011bd8:	6879      	ldr	r1, [r7, #4]
 8011bda:	2000      	movs	r0, #0
 8011bdc:	f000 f8a4 	bl	8011d28 <tcp_recv_null>
 8011be0:	4603      	mov	r3, r0
 8011be2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8011be4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d12a      	bne.n	8011c42 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8011bec:	7bbb      	ldrb	r3, [r7, #14]
 8011bee:	f003 0320 	and.w	r3, r3, #32
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d033      	beq.n	8011c5e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011bfa:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8011bfe:	d005      	beq.n	8011c0c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011c04:	3301      	adds	r3, #1
 8011c06:	b29a      	uxth	r2, r3
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d00b      	beq.n	8011c2e <tcp_process_refused_data+0xb2>
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	6918      	ldr	r0, [r3, #16]
 8011c20:	2300      	movs	r3, #0
 8011c22:	2200      	movs	r2, #0
 8011c24:	6879      	ldr	r1, [r7, #4]
 8011c26:	47a0      	blx	r4
 8011c28:	4603      	mov	r3, r0
 8011c2a:	73fb      	strb	r3, [r7, #15]
 8011c2c:	e001      	b.n	8011c32 <tcp_process_refused_data+0xb6>
 8011c2e:	2300      	movs	r3, #0
 8011c30:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8011c32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011c36:	f113 0f0d 	cmn.w	r3, #13
 8011c3a:	d110      	bne.n	8011c5e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8011c3c:	f06f 030c 	mvn.w	r3, #12
 8011c40:	e00e      	b.n	8011c60 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8011c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011c46:	f113 0f0d 	cmn.w	r3, #13
 8011c4a:	d102      	bne.n	8011c52 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8011c4c:	f06f 030c 	mvn.w	r3, #12
 8011c50:	e006      	b.n	8011c60 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	68ba      	ldr	r2, [r7, #8]
 8011c56:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8011c58:	f06f 0304 	mvn.w	r3, #4
 8011c5c:	e000      	b.n	8011c60 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8011c5e:	2300      	movs	r3, #0
}
 8011c60:	4618      	mov	r0, r3
 8011c62:	3714      	adds	r7, #20
 8011c64:	46bd      	mov	sp, r7
 8011c66:	bd90      	pop	{r4, r7, pc}
 8011c68:	0801c7a4 	.word	0x0801c7a4
 8011c6c:	0801ccb4 	.word	0x0801ccb4
 8011c70:	0801c7e8 	.word	0x0801c7e8

08011c74 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8011c74:	b580      	push	{r7, lr}
 8011c76:	b084      	sub	sp, #16
 8011c78:	af00      	add	r7, sp, #0
 8011c7a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8011c7c:	e007      	b.n	8011c8e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8011c84:	6878      	ldr	r0, [r7, #4]
 8011c86:	f000 f80a 	bl	8011c9e <tcp_seg_free>
    seg = next;
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	d1f4      	bne.n	8011c7e <tcp_segs_free+0xa>
  }
}
 8011c94:	bf00      	nop
 8011c96:	bf00      	nop
 8011c98:	3710      	adds	r7, #16
 8011c9a:	46bd      	mov	sp, r7
 8011c9c:	bd80      	pop	{r7, pc}

08011c9e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8011c9e:	b580      	push	{r7, lr}
 8011ca0:	b082      	sub	sp, #8
 8011ca2:	af00      	add	r7, sp, #0
 8011ca4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d00c      	beq.n	8011cc6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	685b      	ldr	r3, [r3, #4]
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d004      	beq.n	8011cbe <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	685b      	ldr	r3, [r3, #4]
 8011cb8:	4618      	mov	r0, r3
 8011cba:	f7fe fd7d 	bl	80107b8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8011cbe:	6879      	ldr	r1, [r7, #4]
 8011cc0:	2003      	movs	r0, #3
 8011cc2:	f7fd ff23 	bl	800fb0c <memp_free>
  }
}
 8011cc6:	bf00      	nop
 8011cc8:	3708      	adds	r7, #8
 8011cca:	46bd      	mov	sp, r7
 8011ccc:	bd80      	pop	{r7, pc}
	...

08011cd0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8011cd0:	b580      	push	{r7, lr}
 8011cd2:	b084      	sub	sp, #16
 8011cd4:	af00      	add	r7, sp, #0
 8011cd6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d106      	bne.n	8011cec <tcp_seg_copy+0x1c>
 8011cde:	4b0f      	ldr	r3, [pc, #60]	; (8011d1c <tcp_seg_copy+0x4c>)
 8011ce0:	f240 6282 	movw	r2, #1666	; 0x682
 8011ce4:	490e      	ldr	r1, [pc, #56]	; (8011d20 <tcp_seg_copy+0x50>)
 8011ce6:	480f      	ldr	r0, [pc, #60]	; (8011d24 <tcp_seg_copy+0x54>)
 8011ce8:	f007 fc28 	bl	801953c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8011cec:	2003      	movs	r0, #3
 8011cee:	f7fd fe9d 	bl	800fa2c <memp_malloc>
 8011cf2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8011cf4:	68fb      	ldr	r3, [r7, #12]
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	d101      	bne.n	8011cfe <tcp_seg_copy+0x2e>
    return NULL;
 8011cfa:	2300      	movs	r3, #0
 8011cfc:	e00a      	b.n	8011d14 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8011cfe:	2210      	movs	r2, #16
 8011d00:	6879      	ldr	r1, [r7, #4]
 8011d02:	68f8      	ldr	r0, [r7, #12]
 8011d04:	f007 fde8 	bl	80198d8 <memcpy>
  pbuf_ref(cseg->p);
 8011d08:	68fb      	ldr	r3, [r7, #12]
 8011d0a:	685b      	ldr	r3, [r3, #4]
 8011d0c:	4618      	mov	r0, r3
 8011d0e:	f7fe fdf3 	bl	80108f8 <pbuf_ref>
  return cseg;
 8011d12:	68fb      	ldr	r3, [r7, #12]
}
 8011d14:	4618      	mov	r0, r3
 8011d16:	3710      	adds	r7, #16
 8011d18:	46bd      	mov	sp, r7
 8011d1a:	bd80      	pop	{r7, pc}
 8011d1c:	0801c7a4 	.word	0x0801c7a4
 8011d20:	0801ccf8 	.word	0x0801ccf8
 8011d24:	0801c7e8 	.word	0x0801c7e8

08011d28 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8011d28:	b580      	push	{r7, lr}
 8011d2a:	b084      	sub	sp, #16
 8011d2c:	af00      	add	r7, sp, #0
 8011d2e:	60f8      	str	r0, [r7, #12]
 8011d30:	60b9      	str	r1, [r7, #8]
 8011d32:	607a      	str	r2, [r7, #4]
 8011d34:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8011d36:	68bb      	ldr	r3, [r7, #8]
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d109      	bne.n	8011d50 <tcp_recv_null+0x28>
 8011d3c:	4b12      	ldr	r3, [pc, #72]	; (8011d88 <tcp_recv_null+0x60>)
 8011d3e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8011d42:	4912      	ldr	r1, [pc, #72]	; (8011d8c <tcp_recv_null+0x64>)
 8011d44:	4812      	ldr	r0, [pc, #72]	; (8011d90 <tcp_recv_null+0x68>)
 8011d46:	f007 fbf9 	bl	801953c <iprintf>
 8011d4a:	f06f 030f 	mvn.w	r3, #15
 8011d4e:	e016      	b.n	8011d7e <tcp_recv_null+0x56>

  if (p != NULL) {
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d009      	beq.n	8011d6a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	891b      	ldrh	r3, [r3, #8]
 8011d5a:	4619      	mov	r1, r3
 8011d5c:	68b8      	ldr	r0, [r7, #8]
 8011d5e:	f7ff fb19 	bl	8011394 <tcp_recved>
    pbuf_free(p);
 8011d62:	6878      	ldr	r0, [r7, #4]
 8011d64:	f7fe fd28 	bl	80107b8 <pbuf_free>
 8011d68:	e008      	b.n	8011d7c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8011d6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d104      	bne.n	8011d7c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8011d72:	68b8      	ldr	r0, [r7, #8]
 8011d74:	f7ff f9be 	bl	80110f4 <tcp_close>
 8011d78:	4603      	mov	r3, r0
 8011d7a:	e000      	b.n	8011d7e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8011d7c:	2300      	movs	r3, #0
}
 8011d7e:	4618      	mov	r0, r3
 8011d80:	3710      	adds	r7, #16
 8011d82:	46bd      	mov	sp, r7
 8011d84:	bd80      	pop	{r7, pc}
 8011d86:	bf00      	nop
 8011d88:	0801c7a4 	.word	0x0801c7a4
 8011d8c:	0801cd14 	.word	0x0801cd14
 8011d90:	0801c7e8 	.word	0x0801c7e8

08011d94 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8011d94:	b580      	push	{r7, lr}
 8011d96:	b086      	sub	sp, #24
 8011d98:	af00      	add	r7, sp, #0
 8011d9a:	4603      	mov	r3, r0
 8011d9c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8011d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	db01      	blt.n	8011daa <tcp_kill_prio+0x16>
 8011da6:	79fb      	ldrb	r3, [r7, #7]
 8011da8:	e000      	b.n	8011dac <tcp_kill_prio+0x18>
 8011daa:	237f      	movs	r3, #127	; 0x7f
 8011dac:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8011dae:	7afb      	ldrb	r3, [r7, #11]
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d034      	beq.n	8011e1e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8011db4:	7afb      	ldrb	r3, [r7, #11]
 8011db6:	3b01      	subs	r3, #1
 8011db8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8011dba:	2300      	movs	r3, #0
 8011dbc:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8011dbe:	2300      	movs	r3, #0
 8011dc0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011dc2:	4b19      	ldr	r3, [pc, #100]	; (8011e28 <tcp_kill_prio+0x94>)
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	617b      	str	r3, [r7, #20]
 8011dc8:	e01f      	b.n	8011e0a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8011dca:	697b      	ldr	r3, [r7, #20]
 8011dcc:	7d5b      	ldrb	r3, [r3, #21]
 8011dce:	7afa      	ldrb	r2, [r7, #11]
 8011dd0:	429a      	cmp	r2, r3
 8011dd2:	d80c      	bhi.n	8011dee <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8011dd4:	697b      	ldr	r3, [r7, #20]
 8011dd6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8011dd8:	7afa      	ldrb	r2, [r7, #11]
 8011dda:	429a      	cmp	r2, r3
 8011ddc:	d112      	bne.n	8011e04 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8011dde:	4b13      	ldr	r3, [pc, #76]	; (8011e2c <tcp_kill_prio+0x98>)
 8011de0:	681a      	ldr	r2, [r3, #0]
 8011de2:	697b      	ldr	r3, [r7, #20]
 8011de4:	6a1b      	ldr	r3, [r3, #32]
 8011de6:	1ad3      	subs	r3, r2, r3
 8011de8:	68fa      	ldr	r2, [r7, #12]
 8011dea:	429a      	cmp	r2, r3
 8011dec:	d80a      	bhi.n	8011e04 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8011dee:	4b0f      	ldr	r3, [pc, #60]	; (8011e2c <tcp_kill_prio+0x98>)
 8011df0:	681a      	ldr	r2, [r3, #0]
 8011df2:	697b      	ldr	r3, [r7, #20]
 8011df4:	6a1b      	ldr	r3, [r3, #32]
 8011df6:	1ad3      	subs	r3, r2, r3
 8011df8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8011dfa:	697b      	ldr	r3, [r7, #20]
 8011dfc:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8011dfe:	697b      	ldr	r3, [r7, #20]
 8011e00:	7d5b      	ldrb	r3, [r3, #21]
 8011e02:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011e04:	697b      	ldr	r3, [r7, #20]
 8011e06:	68db      	ldr	r3, [r3, #12]
 8011e08:	617b      	str	r3, [r7, #20]
 8011e0a:	697b      	ldr	r3, [r7, #20]
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d1dc      	bne.n	8011dca <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8011e10:	693b      	ldr	r3, [r7, #16]
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d004      	beq.n	8011e20 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8011e16:	6938      	ldr	r0, [r7, #16]
 8011e18:	f7ff fa56 	bl	80112c8 <tcp_abort>
 8011e1c:	e000      	b.n	8011e20 <tcp_kill_prio+0x8c>
    return;
 8011e1e:	bf00      	nop
  }
}
 8011e20:	3718      	adds	r7, #24
 8011e22:	46bd      	mov	sp, r7
 8011e24:	bd80      	pop	{r7, pc}
 8011e26:	bf00      	nop
 8011e28:	200080d4 	.word	0x200080d4
 8011e2c:	200080c8 	.word	0x200080c8

08011e30 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8011e30:	b580      	push	{r7, lr}
 8011e32:	b086      	sub	sp, #24
 8011e34:	af00      	add	r7, sp, #0
 8011e36:	4603      	mov	r3, r0
 8011e38:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8011e3a:	79fb      	ldrb	r3, [r7, #7]
 8011e3c:	2b08      	cmp	r3, #8
 8011e3e:	d009      	beq.n	8011e54 <tcp_kill_state+0x24>
 8011e40:	79fb      	ldrb	r3, [r7, #7]
 8011e42:	2b09      	cmp	r3, #9
 8011e44:	d006      	beq.n	8011e54 <tcp_kill_state+0x24>
 8011e46:	4b1a      	ldr	r3, [pc, #104]	; (8011eb0 <tcp_kill_state+0x80>)
 8011e48:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8011e4c:	4919      	ldr	r1, [pc, #100]	; (8011eb4 <tcp_kill_state+0x84>)
 8011e4e:	481a      	ldr	r0, [pc, #104]	; (8011eb8 <tcp_kill_state+0x88>)
 8011e50:	f007 fb74 	bl	801953c <iprintf>

  inactivity = 0;
 8011e54:	2300      	movs	r3, #0
 8011e56:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8011e58:	2300      	movs	r3, #0
 8011e5a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011e5c:	4b17      	ldr	r3, [pc, #92]	; (8011ebc <tcp_kill_state+0x8c>)
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	617b      	str	r3, [r7, #20]
 8011e62:	e017      	b.n	8011e94 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8011e64:	697b      	ldr	r3, [r7, #20]
 8011e66:	7d1b      	ldrb	r3, [r3, #20]
 8011e68:	79fa      	ldrb	r2, [r7, #7]
 8011e6a:	429a      	cmp	r2, r3
 8011e6c:	d10f      	bne.n	8011e8e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8011e6e:	4b14      	ldr	r3, [pc, #80]	; (8011ec0 <tcp_kill_state+0x90>)
 8011e70:	681a      	ldr	r2, [r3, #0]
 8011e72:	697b      	ldr	r3, [r7, #20]
 8011e74:	6a1b      	ldr	r3, [r3, #32]
 8011e76:	1ad3      	subs	r3, r2, r3
 8011e78:	68fa      	ldr	r2, [r7, #12]
 8011e7a:	429a      	cmp	r2, r3
 8011e7c:	d807      	bhi.n	8011e8e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8011e7e:	4b10      	ldr	r3, [pc, #64]	; (8011ec0 <tcp_kill_state+0x90>)
 8011e80:	681a      	ldr	r2, [r3, #0]
 8011e82:	697b      	ldr	r3, [r7, #20]
 8011e84:	6a1b      	ldr	r3, [r3, #32]
 8011e86:	1ad3      	subs	r3, r2, r3
 8011e88:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8011e8a:	697b      	ldr	r3, [r7, #20]
 8011e8c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011e8e:	697b      	ldr	r3, [r7, #20]
 8011e90:	68db      	ldr	r3, [r3, #12]
 8011e92:	617b      	str	r3, [r7, #20]
 8011e94:	697b      	ldr	r3, [r7, #20]
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d1e4      	bne.n	8011e64 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8011e9a:	693b      	ldr	r3, [r7, #16]
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d003      	beq.n	8011ea8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8011ea0:	2100      	movs	r1, #0
 8011ea2:	6938      	ldr	r0, [r7, #16]
 8011ea4:	f7ff f952 	bl	801114c <tcp_abandon>
  }
}
 8011ea8:	bf00      	nop
 8011eaa:	3718      	adds	r7, #24
 8011eac:	46bd      	mov	sp, r7
 8011eae:	bd80      	pop	{r7, pc}
 8011eb0:	0801c7a4 	.word	0x0801c7a4
 8011eb4:	0801cd30 	.word	0x0801cd30
 8011eb8:	0801c7e8 	.word	0x0801c7e8
 8011ebc:	200080d4 	.word	0x200080d4
 8011ec0:	200080c8 	.word	0x200080c8

08011ec4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8011ec4:	b580      	push	{r7, lr}
 8011ec6:	b084      	sub	sp, #16
 8011ec8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8011eca:	2300      	movs	r3, #0
 8011ecc:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8011ece:	2300      	movs	r3, #0
 8011ed0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011ed2:	4b12      	ldr	r3, [pc, #72]	; (8011f1c <tcp_kill_timewait+0x58>)
 8011ed4:	681b      	ldr	r3, [r3, #0]
 8011ed6:	60fb      	str	r3, [r7, #12]
 8011ed8:	e012      	b.n	8011f00 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8011eda:	4b11      	ldr	r3, [pc, #68]	; (8011f20 <tcp_kill_timewait+0x5c>)
 8011edc:	681a      	ldr	r2, [r3, #0]
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	6a1b      	ldr	r3, [r3, #32]
 8011ee2:	1ad3      	subs	r3, r2, r3
 8011ee4:	687a      	ldr	r2, [r7, #4]
 8011ee6:	429a      	cmp	r2, r3
 8011ee8:	d807      	bhi.n	8011efa <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8011eea:	4b0d      	ldr	r3, [pc, #52]	; (8011f20 <tcp_kill_timewait+0x5c>)
 8011eec:	681a      	ldr	r2, [r3, #0]
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	6a1b      	ldr	r3, [r3, #32]
 8011ef2:	1ad3      	subs	r3, r2, r3
 8011ef4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	68db      	ldr	r3, [r3, #12]
 8011efe:	60fb      	str	r3, [r7, #12]
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d1e9      	bne.n	8011eda <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8011f06:	68bb      	ldr	r3, [r7, #8]
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d002      	beq.n	8011f12 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8011f0c:	68b8      	ldr	r0, [r7, #8]
 8011f0e:	f7ff f9db 	bl	80112c8 <tcp_abort>
  }
}
 8011f12:	bf00      	nop
 8011f14:	3710      	adds	r7, #16
 8011f16:	46bd      	mov	sp, r7
 8011f18:	bd80      	pop	{r7, pc}
 8011f1a:	bf00      	nop
 8011f1c:	200080d8 	.word	0x200080d8
 8011f20:	200080c8 	.word	0x200080c8

08011f24 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8011f24:	b580      	push	{r7, lr}
 8011f26:	b082      	sub	sp, #8
 8011f28:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8011f2a:	4b10      	ldr	r3, [pc, #64]	; (8011f6c <tcp_handle_closepend+0x48>)
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8011f30:	e014      	b.n	8011f5c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	68db      	ldr	r3, [r3, #12]
 8011f36:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	8b5b      	ldrh	r3, [r3, #26]
 8011f3c:	f003 0308 	and.w	r3, r3, #8
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d009      	beq.n	8011f58 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	8b5b      	ldrh	r3, [r3, #26]
 8011f48:	f023 0308 	bic.w	r3, r3, #8
 8011f4c:	b29a      	uxth	r2, r3
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8011f52:	6878      	ldr	r0, [r7, #4]
 8011f54:	f7ff f864 	bl	8011020 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8011f58:	683b      	ldr	r3, [r7, #0]
 8011f5a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d1e7      	bne.n	8011f32 <tcp_handle_closepend+0xe>
  }
}
 8011f62:	bf00      	nop
 8011f64:	bf00      	nop
 8011f66:	3708      	adds	r7, #8
 8011f68:	46bd      	mov	sp, r7
 8011f6a:	bd80      	pop	{r7, pc}
 8011f6c:	200080d4 	.word	0x200080d4

08011f70 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8011f70:	b580      	push	{r7, lr}
 8011f72:	b084      	sub	sp, #16
 8011f74:	af00      	add	r7, sp, #0
 8011f76:	4603      	mov	r3, r0
 8011f78:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011f7a:	2001      	movs	r0, #1
 8011f7c:	f7fd fd56 	bl	800fa2c <memp_malloc>
 8011f80:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d126      	bne.n	8011fd6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8011f88:	f7ff ffcc 	bl	8011f24 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8011f8c:	f7ff ff9a 	bl	8011ec4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011f90:	2001      	movs	r0, #1
 8011f92:	f7fd fd4b 	bl	800fa2c <memp_malloc>
 8011f96:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d11b      	bne.n	8011fd6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8011f9e:	2009      	movs	r0, #9
 8011fa0:	f7ff ff46 	bl	8011e30 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011fa4:	2001      	movs	r0, #1
 8011fa6:	f7fd fd41 	bl	800fa2c <memp_malloc>
 8011faa:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d111      	bne.n	8011fd6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8011fb2:	2008      	movs	r0, #8
 8011fb4:	f7ff ff3c 	bl	8011e30 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011fb8:	2001      	movs	r0, #1
 8011fba:	f7fd fd37 	bl	800fa2c <memp_malloc>
 8011fbe:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8011fc0:	68fb      	ldr	r3, [r7, #12]
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d107      	bne.n	8011fd6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8011fc6:	79fb      	ldrb	r3, [r7, #7]
 8011fc8:	4618      	mov	r0, r3
 8011fca:	f7ff fee3 	bl	8011d94 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011fce:	2001      	movs	r0, #1
 8011fd0:	f7fd fd2c 	bl	800fa2c <memp_malloc>
 8011fd4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8011fd6:	68fb      	ldr	r3, [r7, #12]
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d03f      	beq.n	801205c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8011fdc:	229c      	movs	r2, #156	; 0x9c
 8011fde:	2100      	movs	r1, #0
 8011fe0:	68f8      	ldr	r0, [r7, #12]
 8011fe2:	f007 fc01 	bl	80197e8 <memset>
    pcb->prio = prio;
 8011fe6:	68fb      	ldr	r3, [r7, #12]
 8011fe8:	79fa      	ldrb	r2, [r7, #7]
 8011fea:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8011fec:	68fb      	ldr	r3, [r7, #12]
 8011fee:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8011ff2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8011ff6:	68fb      	ldr	r3, [r7, #12]
 8011ff8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8011ffc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8011ffe:	68fb      	ldr	r3, [r7, #12]
 8012000:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012002:	68fb      	ldr	r3, [r7, #12]
 8012004:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8012006:	68fb      	ldr	r3, [r7, #12]
 8012008:	22ff      	movs	r2, #255	; 0xff
 801200a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 801200c:	68fb      	ldr	r3, [r7, #12]
 801200e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8012012:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8012014:	68fb      	ldr	r3, [r7, #12]
 8012016:	2206      	movs	r2, #6
 8012018:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	2206      	movs	r2, #6
 8012020:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8012022:	68fb      	ldr	r3, [r7, #12]
 8012024:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012028:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801202a:	68fb      	ldr	r3, [r7, #12]
 801202c:	2201      	movs	r2, #1
 801202e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8012032:	4b0d      	ldr	r3, [pc, #52]	; (8012068 <tcp_alloc+0xf8>)
 8012034:	681a      	ldr	r2, [r3, #0]
 8012036:	68fb      	ldr	r3, [r7, #12]
 8012038:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801203a:	4b0c      	ldr	r3, [pc, #48]	; (801206c <tcp_alloc+0xfc>)
 801203c:	781a      	ldrb	r2, [r3, #0]
 801203e:	68fb      	ldr	r3, [r7, #12]
 8012040:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8012048:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 801204c:	68fb      	ldr	r3, [r7, #12]
 801204e:	4a08      	ldr	r2, [pc, #32]	; (8012070 <tcp_alloc+0x100>)
 8012050:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8012054:	68fb      	ldr	r3, [r7, #12]
 8012056:	4a07      	ldr	r2, [pc, #28]	; (8012074 <tcp_alloc+0x104>)
 8012058:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 801205c:	68fb      	ldr	r3, [r7, #12]
}
 801205e:	4618      	mov	r0, r3
 8012060:	3710      	adds	r7, #16
 8012062:	46bd      	mov	sp, r7
 8012064:	bd80      	pop	{r7, pc}
 8012066:	bf00      	nop
 8012068:	200080c8 	.word	0x200080c8
 801206c:	200080de 	.word	0x200080de
 8012070:	08011d29 	.word	0x08011d29
 8012074:	006ddd00 	.word	0x006ddd00

08012078 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8012078:	b580      	push	{r7, lr}
 801207a:	b082      	sub	sp, #8
 801207c:	af00      	add	r7, sp, #0
 801207e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	2b00      	cmp	r3, #0
 8012084:	d107      	bne.n	8012096 <tcp_pcb_purge+0x1e>
 8012086:	4b21      	ldr	r3, [pc, #132]	; (801210c <tcp_pcb_purge+0x94>)
 8012088:	f640 0251 	movw	r2, #2129	; 0x851
 801208c:	4920      	ldr	r1, [pc, #128]	; (8012110 <tcp_pcb_purge+0x98>)
 801208e:	4821      	ldr	r0, [pc, #132]	; (8012114 <tcp_pcb_purge+0x9c>)
 8012090:	f007 fa54 	bl	801953c <iprintf>
 8012094:	e037      	b.n	8012106 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	7d1b      	ldrb	r3, [r3, #20]
 801209a:	2b00      	cmp	r3, #0
 801209c:	d033      	beq.n	8012106 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80120a2:	2b0a      	cmp	r3, #10
 80120a4:	d02f      	beq.n	8012106 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80120aa:	2b01      	cmp	r3, #1
 80120ac:	d02b      	beq.n	8012106 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d007      	beq.n	80120c6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80120ba:	4618      	mov	r0, r3
 80120bc:	f7fe fb7c 	bl	80107b8 <pbuf_free>
      pcb->refused_data = NULL;
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	2200      	movs	r2, #0
 80120c4:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d002      	beq.n	80120d4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80120ce:	6878      	ldr	r0, [r7, #4]
 80120d0:	f000 f986 	bl	80123e0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80120da:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80120e0:	4618      	mov	r0, r3
 80120e2:	f7ff fdc7 	bl	8011c74 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80120ea:	4618      	mov	r0, r3
 80120ec:	f7ff fdc2 	bl	8011c74 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	2200      	movs	r2, #0
 80120f4:	66da      	str	r2, [r3, #108]	; 0x6c
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	2200      	movs	r2, #0
 8012102:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8012106:	3708      	adds	r7, #8
 8012108:	46bd      	mov	sp, r7
 801210a:	bd80      	pop	{r7, pc}
 801210c:	0801c7a4 	.word	0x0801c7a4
 8012110:	0801cdf0 	.word	0x0801cdf0
 8012114:	0801c7e8 	.word	0x0801c7e8

08012118 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8012118:	b580      	push	{r7, lr}
 801211a:	b084      	sub	sp, #16
 801211c:	af00      	add	r7, sp, #0
 801211e:	6078      	str	r0, [r7, #4]
 8012120:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8012122:	683b      	ldr	r3, [r7, #0]
 8012124:	2b00      	cmp	r3, #0
 8012126:	d106      	bne.n	8012136 <tcp_pcb_remove+0x1e>
 8012128:	4b3e      	ldr	r3, [pc, #248]	; (8012224 <tcp_pcb_remove+0x10c>)
 801212a:	f640 0283 	movw	r2, #2179	; 0x883
 801212e:	493e      	ldr	r1, [pc, #248]	; (8012228 <tcp_pcb_remove+0x110>)
 8012130:	483e      	ldr	r0, [pc, #248]	; (801222c <tcp_pcb_remove+0x114>)
 8012132:	f007 fa03 	bl	801953c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	2b00      	cmp	r3, #0
 801213a:	d106      	bne.n	801214a <tcp_pcb_remove+0x32>
 801213c:	4b39      	ldr	r3, [pc, #228]	; (8012224 <tcp_pcb_remove+0x10c>)
 801213e:	f640 0284 	movw	r2, #2180	; 0x884
 8012142:	493b      	ldr	r1, [pc, #236]	; (8012230 <tcp_pcb_remove+0x118>)
 8012144:	4839      	ldr	r0, [pc, #228]	; (801222c <tcp_pcb_remove+0x114>)
 8012146:	f007 f9f9 	bl	801953c <iprintf>

  TCP_RMV(pcblist, pcb);
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	681b      	ldr	r3, [r3, #0]
 801214e:	683a      	ldr	r2, [r7, #0]
 8012150:	429a      	cmp	r2, r3
 8012152:	d105      	bne.n	8012160 <tcp_pcb_remove+0x48>
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	681b      	ldr	r3, [r3, #0]
 8012158:	68da      	ldr	r2, [r3, #12]
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	601a      	str	r2, [r3, #0]
 801215e:	e013      	b.n	8012188 <tcp_pcb_remove+0x70>
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	681b      	ldr	r3, [r3, #0]
 8012164:	60fb      	str	r3, [r7, #12]
 8012166:	e00c      	b.n	8012182 <tcp_pcb_remove+0x6a>
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	68db      	ldr	r3, [r3, #12]
 801216c:	683a      	ldr	r2, [r7, #0]
 801216e:	429a      	cmp	r2, r3
 8012170:	d104      	bne.n	801217c <tcp_pcb_remove+0x64>
 8012172:	683b      	ldr	r3, [r7, #0]
 8012174:	68da      	ldr	r2, [r3, #12]
 8012176:	68fb      	ldr	r3, [r7, #12]
 8012178:	60da      	str	r2, [r3, #12]
 801217a:	e005      	b.n	8012188 <tcp_pcb_remove+0x70>
 801217c:	68fb      	ldr	r3, [r7, #12]
 801217e:	68db      	ldr	r3, [r3, #12]
 8012180:	60fb      	str	r3, [r7, #12]
 8012182:	68fb      	ldr	r3, [r7, #12]
 8012184:	2b00      	cmp	r3, #0
 8012186:	d1ef      	bne.n	8012168 <tcp_pcb_remove+0x50>
 8012188:	683b      	ldr	r3, [r7, #0]
 801218a:	2200      	movs	r2, #0
 801218c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801218e:	6838      	ldr	r0, [r7, #0]
 8012190:	f7ff ff72 	bl	8012078 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8012194:	683b      	ldr	r3, [r7, #0]
 8012196:	7d1b      	ldrb	r3, [r3, #20]
 8012198:	2b0a      	cmp	r3, #10
 801219a:	d013      	beq.n	80121c4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 801219c:	683b      	ldr	r3, [r7, #0]
 801219e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80121a0:	2b01      	cmp	r3, #1
 80121a2:	d00f      	beq.n	80121c4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80121a4:	683b      	ldr	r3, [r7, #0]
 80121a6:	8b5b      	ldrh	r3, [r3, #26]
 80121a8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d009      	beq.n	80121c4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80121b0:	683b      	ldr	r3, [r7, #0]
 80121b2:	8b5b      	ldrh	r3, [r3, #26]
 80121b4:	f043 0302 	orr.w	r3, r3, #2
 80121b8:	b29a      	uxth	r2, r3
 80121ba:	683b      	ldr	r3, [r7, #0]
 80121bc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80121be:	6838      	ldr	r0, [r7, #0]
 80121c0:	f002 ff6e 	bl	80150a0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80121c4:	683b      	ldr	r3, [r7, #0]
 80121c6:	7d1b      	ldrb	r3, [r3, #20]
 80121c8:	2b01      	cmp	r3, #1
 80121ca:	d020      	beq.n	801220e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80121cc:	683b      	ldr	r3, [r7, #0]
 80121ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d006      	beq.n	80121e2 <tcp_pcb_remove+0xca>
 80121d4:	4b13      	ldr	r3, [pc, #76]	; (8012224 <tcp_pcb_remove+0x10c>)
 80121d6:	f640 0293 	movw	r2, #2195	; 0x893
 80121da:	4916      	ldr	r1, [pc, #88]	; (8012234 <tcp_pcb_remove+0x11c>)
 80121dc:	4813      	ldr	r0, [pc, #76]	; (801222c <tcp_pcb_remove+0x114>)
 80121de:	f007 f9ad 	bl	801953c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80121e2:	683b      	ldr	r3, [r7, #0]
 80121e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d006      	beq.n	80121f8 <tcp_pcb_remove+0xe0>
 80121ea:	4b0e      	ldr	r3, [pc, #56]	; (8012224 <tcp_pcb_remove+0x10c>)
 80121ec:	f640 0294 	movw	r2, #2196	; 0x894
 80121f0:	4911      	ldr	r1, [pc, #68]	; (8012238 <tcp_pcb_remove+0x120>)
 80121f2:	480e      	ldr	r0, [pc, #56]	; (801222c <tcp_pcb_remove+0x114>)
 80121f4:	f007 f9a2 	bl	801953c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80121f8:	683b      	ldr	r3, [r7, #0]
 80121fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d006      	beq.n	801220e <tcp_pcb_remove+0xf6>
 8012200:	4b08      	ldr	r3, [pc, #32]	; (8012224 <tcp_pcb_remove+0x10c>)
 8012202:	f640 0296 	movw	r2, #2198	; 0x896
 8012206:	490d      	ldr	r1, [pc, #52]	; (801223c <tcp_pcb_remove+0x124>)
 8012208:	4808      	ldr	r0, [pc, #32]	; (801222c <tcp_pcb_remove+0x114>)
 801220a:	f007 f997 	bl	801953c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801220e:	683b      	ldr	r3, [r7, #0]
 8012210:	2200      	movs	r2, #0
 8012212:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8012214:	683b      	ldr	r3, [r7, #0]
 8012216:	2200      	movs	r2, #0
 8012218:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801221a:	bf00      	nop
 801221c:	3710      	adds	r7, #16
 801221e:	46bd      	mov	sp, r7
 8012220:	bd80      	pop	{r7, pc}
 8012222:	bf00      	nop
 8012224:	0801c7a4 	.word	0x0801c7a4
 8012228:	0801ce0c 	.word	0x0801ce0c
 801222c:	0801c7e8 	.word	0x0801c7e8
 8012230:	0801ce28 	.word	0x0801ce28
 8012234:	0801ce48 	.word	0x0801ce48
 8012238:	0801ce60 	.word	0x0801ce60
 801223c:	0801ce7c 	.word	0x0801ce7c

08012240 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8012240:	b580      	push	{r7, lr}
 8012242:	b082      	sub	sp, #8
 8012244:	af00      	add	r7, sp, #0
 8012246:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	2b00      	cmp	r3, #0
 801224c:	d106      	bne.n	801225c <tcp_next_iss+0x1c>
 801224e:	4b0a      	ldr	r3, [pc, #40]	; (8012278 <tcp_next_iss+0x38>)
 8012250:	f640 02af 	movw	r2, #2223	; 0x8af
 8012254:	4909      	ldr	r1, [pc, #36]	; (801227c <tcp_next_iss+0x3c>)
 8012256:	480a      	ldr	r0, [pc, #40]	; (8012280 <tcp_next_iss+0x40>)
 8012258:	f007 f970 	bl	801953c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801225c:	4b09      	ldr	r3, [pc, #36]	; (8012284 <tcp_next_iss+0x44>)
 801225e:	681a      	ldr	r2, [r3, #0]
 8012260:	4b09      	ldr	r3, [pc, #36]	; (8012288 <tcp_next_iss+0x48>)
 8012262:	681b      	ldr	r3, [r3, #0]
 8012264:	4413      	add	r3, r2
 8012266:	4a07      	ldr	r2, [pc, #28]	; (8012284 <tcp_next_iss+0x44>)
 8012268:	6013      	str	r3, [r2, #0]
  return iss;
 801226a:	4b06      	ldr	r3, [pc, #24]	; (8012284 <tcp_next_iss+0x44>)
 801226c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801226e:	4618      	mov	r0, r3
 8012270:	3708      	adds	r7, #8
 8012272:	46bd      	mov	sp, r7
 8012274:	bd80      	pop	{r7, pc}
 8012276:	bf00      	nop
 8012278:	0801c7a4 	.word	0x0801c7a4
 801227c:	0801ce94 	.word	0x0801ce94
 8012280:	0801c7e8 	.word	0x0801c7e8
 8012284:	2000005c 	.word	0x2000005c
 8012288:	200080c8 	.word	0x200080c8

0801228c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 801228c:	b580      	push	{r7, lr}
 801228e:	b086      	sub	sp, #24
 8012290:	af00      	add	r7, sp, #0
 8012292:	4603      	mov	r3, r0
 8012294:	60b9      	str	r1, [r7, #8]
 8012296:	607a      	str	r2, [r7, #4]
 8012298:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	2b00      	cmp	r3, #0
 801229e:	d106      	bne.n	80122ae <tcp_eff_send_mss_netif+0x22>
 80122a0:	4b14      	ldr	r3, [pc, #80]	; (80122f4 <tcp_eff_send_mss_netif+0x68>)
 80122a2:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80122a6:	4914      	ldr	r1, [pc, #80]	; (80122f8 <tcp_eff_send_mss_netif+0x6c>)
 80122a8:	4814      	ldr	r0, [pc, #80]	; (80122fc <tcp_eff_send_mss_netif+0x70>)
 80122aa:	f007 f947 	bl	801953c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80122ae:	68bb      	ldr	r3, [r7, #8]
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d101      	bne.n	80122b8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80122b4:	89fb      	ldrh	r3, [r7, #14]
 80122b6:	e019      	b.n	80122ec <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80122b8:	68bb      	ldr	r3, [r7, #8]
 80122ba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80122bc:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80122be:	8afb      	ldrh	r3, [r7, #22]
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d012      	beq.n	80122ea <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80122c4:	2328      	movs	r3, #40	; 0x28
 80122c6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80122c8:	8afa      	ldrh	r2, [r7, #22]
 80122ca:	8abb      	ldrh	r3, [r7, #20]
 80122cc:	429a      	cmp	r2, r3
 80122ce:	d904      	bls.n	80122da <tcp_eff_send_mss_netif+0x4e>
 80122d0:	8afa      	ldrh	r2, [r7, #22]
 80122d2:	8abb      	ldrh	r3, [r7, #20]
 80122d4:	1ad3      	subs	r3, r2, r3
 80122d6:	b29b      	uxth	r3, r3
 80122d8:	e000      	b.n	80122dc <tcp_eff_send_mss_netif+0x50>
 80122da:	2300      	movs	r3, #0
 80122dc:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80122de:	8a7a      	ldrh	r2, [r7, #18]
 80122e0:	89fb      	ldrh	r3, [r7, #14]
 80122e2:	4293      	cmp	r3, r2
 80122e4:	bf28      	it	cs
 80122e6:	4613      	movcs	r3, r2
 80122e8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80122ea:	89fb      	ldrh	r3, [r7, #14]
}
 80122ec:	4618      	mov	r0, r3
 80122ee:	3718      	adds	r7, #24
 80122f0:	46bd      	mov	sp, r7
 80122f2:	bd80      	pop	{r7, pc}
 80122f4:	0801c7a4 	.word	0x0801c7a4
 80122f8:	0801ceb0 	.word	0x0801ceb0
 80122fc:	0801c7e8 	.word	0x0801c7e8

08012300 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8012300:	b580      	push	{r7, lr}
 8012302:	b084      	sub	sp, #16
 8012304:	af00      	add	r7, sp, #0
 8012306:	6078      	str	r0, [r7, #4]
 8012308:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801230a:	683b      	ldr	r3, [r7, #0]
 801230c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	2b00      	cmp	r3, #0
 8012312:	d119      	bne.n	8012348 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8012314:	4b10      	ldr	r3, [pc, #64]	; (8012358 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8012316:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801231a:	4910      	ldr	r1, [pc, #64]	; (801235c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 801231c:	4810      	ldr	r0, [pc, #64]	; (8012360 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801231e:	f007 f90d 	bl	801953c <iprintf>

  while (pcb != NULL) {
 8012322:	e011      	b.n	8012348 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8012324:	68fb      	ldr	r3, [r7, #12]
 8012326:	681a      	ldr	r2, [r3, #0]
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	429a      	cmp	r2, r3
 801232e:	d108      	bne.n	8012342 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	68db      	ldr	r3, [r3, #12]
 8012334:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8012336:	68f8      	ldr	r0, [r7, #12]
 8012338:	f7fe ffc6 	bl	80112c8 <tcp_abort>
      pcb = next;
 801233c:	68bb      	ldr	r3, [r7, #8]
 801233e:	60fb      	str	r3, [r7, #12]
 8012340:	e002      	b.n	8012348 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8012342:	68fb      	ldr	r3, [r7, #12]
 8012344:	68db      	ldr	r3, [r3, #12]
 8012346:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8012348:	68fb      	ldr	r3, [r7, #12]
 801234a:	2b00      	cmp	r3, #0
 801234c:	d1ea      	bne.n	8012324 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801234e:	bf00      	nop
 8012350:	bf00      	nop
 8012352:	3710      	adds	r7, #16
 8012354:	46bd      	mov	sp, r7
 8012356:	bd80      	pop	{r7, pc}
 8012358:	0801c7a4 	.word	0x0801c7a4
 801235c:	0801ced8 	.word	0x0801ced8
 8012360:	0801c7e8 	.word	0x0801c7e8

08012364 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012364:	b580      	push	{r7, lr}
 8012366:	b084      	sub	sp, #16
 8012368:	af00      	add	r7, sp, #0
 801236a:	6078      	str	r0, [r7, #4]
 801236c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	2b00      	cmp	r3, #0
 8012372:	d02a      	beq.n	80123ca <tcp_netif_ip_addr_changed+0x66>
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	681b      	ldr	r3, [r3, #0]
 8012378:	2b00      	cmp	r3, #0
 801237a:	d026      	beq.n	80123ca <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801237c:	4b15      	ldr	r3, [pc, #84]	; (80123d4 <tcp_netif_ip_addr_changed+0x70>)
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	4619      	mov	r1, r3
 8012382:	6878      	ldr	r0, [r7, #4]
 8012384:	f7ff ffbc 	bl	8012300 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8012388:	4b13      	ldr	r3, [pc, #76]	; (80123d8 <tcp_netif_ip_addr_changed+0x74>)
 801238a:	681b      	ldr	r3, [r3, #0]
 801238c:	4619      	mov	r1, r3
 801238e:	6878      	ldr	r0, [r7, #4]
 8012390:	f7ff ffb6 	bl	8012300 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8012394:	683b      	ldr	r3, [r7, #0]
 8012396:	2b00      	cmp	r3, #0
 8012398:	d017      	beq.n	80123ca <tcp_netif_ip_addr_changed+0x66>
 801239a:	683b      	ldr	r3, [r7, #0]
 801239c:	681b      	ldr	r3, [r3, #0]
 801239e:	2b00      	cmp	r3, #0
 80123a0:	d013      	beq.n	80123ca <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80123a2:	4b0e      	ldr	r3, [pc, #56]	; (80123dc <tcp_netif_ip_addr_changed+0x78>)
 80123a4:	681b      	ldr	r3, [r3, #0]
 80123a6:	60fb      	str	r3, [r7, #12]
 80123a8:	e00c      	b.n	80123c4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80123aa:	68fb      	ldr	r3, [r7, #12]
 80123ac:	681a      	ldr	r2, [r3, #0]
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	681b      	ldr	r3, [r3, #0]
 80123b2:	429a      	cmp	r2, r3
 80123b4:	d103      	bne.n	80123be <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80123b6:	683b      	ldr	r3, [r7, #0]
 80123b8:	681a      	ldr	r2, [r3, #0]
 80123ba:	68fb      	ldr	r3, [r7, #12]
 80123bc:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80123be:	68fb      	ldr	r3, [r7, #12]
 80123c0:	68db      	ldr	r3, [r3, #12]
 80123c2:	60fb      	str	r3, [r7, #12]
 80123c4:	68fb      	ldr	r3, [r7, #12]
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d1ef      	bne.n	80123aa <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80123ca:	bf00      	nop
 80123cc:	3710      	adds	r7, #16
 80123ce:	46bd      	mov	sp, r7
 80123d0:	bd80      	pop	{r7, pc}
 80123d2:	bf00      	nop
 80123d4:	200080d4 	.word	0x200080d4
 80123d8:	200080cc 	.word	0x200080cc
 80123dc:	200080d0 	.word	0x200080d0

080123e0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80123e0:	b580      	push	{r7, lr}
 80123e2:	b082      	sub	sp, #8
 80123e4:	af00      	add	r7, sp, #0
 80123e6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d007      	beq.n	8012400 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80123f4:	4618      	mov	r0, r3
 80123f6:	f7ff fc3d 	bl	8011c74 <tcp_segs_free>
    pcb->ooseq = NULL;
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	2200      	movs	r2, #0
 80123fe:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8012400:	bf00      	nop
 8012402:	3708      	adds	r7, #8
 8012404:	46bd      	mov	sp, r7
 8012406:	bd80      	pop	{r7, pc}

08012408 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8012408:	b590      	push	{r4, r7, lr}
 801240a:	b08d      	sub	sp, #52	; 0x34
 801240c:	af04      	add	r7, sp, #16
 801240e:	6078      	str	r0, [r7, #4]
 8012410:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	2b00      	cmp	r3, #0
 8012416:	d105      	bne.n	8012424 <tcp_input+0x1c>
 8012418:	4b9b      	ldr	r3, [pc, #620]	; (8012688 <tcp_input+0x280>)
 801241a:	2283      	movs	r2, #131	; 0x83
 801241c:	499b      	ldr	r1, [pc, #620]	; (801268c <tcp_input+0x284>)
 801241e:	489c      	ldr	r0, [pc, #624]	; (8012690 <tcp_input+0x288>)
 8012420:	f007 f88c 	bl	801953c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	685b      	ldr	r3, [r3, #4]
 8012428:	4a9a      	ldr	r2, [pc, #616]	; (8012694 <tcp_input+0x28c>)
 801242a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	895b      	ldrh	r3, [r3, #10]
 8012430:	2b13      	cmp	r3, #19
 8012432:	f240 83d1 	bls.w	8012bd8 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8012436:	4b98      	ldr	r3, [pc, #608]	; (8012698 <tcp_input+0x290>)
 8012438:	695b      	ldr	r3, [r3, #20]
 801243a:	4a97      	ldr	r2, [pc, #604]	; (8012698 <tcp_input+0x290>)
 801243c:	6812      	ldr	r2, [r2, #0]
 801243e:	4611      	mov	r1, r2
 8012440:	4618      	mov	r0, r3
 8012442:	f005 fbfb 	bl	8017c3c <ip4_addr_isbroadcast_u32>
 8012446:	4603      	mov	r3, r0
 8012448:	2b00      	cmp	r3, #0
 801244a:	f040 83c7 	bne.w	8012bdc <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801244e:	4b92      	ldr	r3, [pc, #584]	; (8012698 <tcp_input+0x290>)
 8012450:	695b      	ldr	r3, [r3, #20]
 8012452:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8012456:	2be0      	cmp	r3, #224	; 0xe0
 8012458:	f000 83c0 	beq.w	8012bdc <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801245c:	4b8d      	ldr	r3, [pc, #564]	; (8012694 <tcp_input+0x28c>)
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	899b      	ldrh	r3, [r3, #12]
 8012462:	b29b      	uxth	r3, r3
 8012464:	4618      	mov	r0, r3
 8012466:	f7fc fdb1 	bl	800efcc <lwip_htons>
 801246a:	4603      	mov	r3, r0
 801246c:	0b1b      	lsrs	r3, r3, #12
 801246e:	b29b      	uxth	r3, r3
 8012470:	b2db      	uxtb	r3, r3
 8012472:	009b      	lsls	r3, r3, #2
 8012474:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8012476:	7cbb      	ldrb	r3, [r7, #18]
 8012478:	2b13      	cmp	r3, #19
 801247a:	f240 83b1 	bls.w	8012be0 <tcp_input+0x7d8>
 801247e:	7cbb      	ldrb	r3, [r7, #18]
 8012480:	b29a      	uxth	r2, r3
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	891b      	ldrh	r3, [r3, #8]
 8012486:	429a      	cmp	r2, r3
 8012488:	f200 83aa 	bhi.w	8012be0 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801248c:	7cbb      	ldrb	r3, [r7, #18]
 801248e:	b29b      	uxth	r3, r3
 8012490:	3b14      	subs	r3, #20
 8012492:	b29a      	uxth	r2, r3
 8012494:	4b81      	ldr	r3, [pc, #516]	; (801269c <tcp_input+0x294>)
 8012496:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8012498:	4b81      	ldr	r3, [pc, #516]	; (80126a0 <tcp_input+0x298>)
 801249a:	2200      	movs	r2, #0
 801249c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	895a      	ldrh	r2, [r3, #10]
 80124a2:	7cbb      	ldrb	r3, [r7, #18]
 80124a4:	b29b      	uxth	r3, r3
 80124a6:	429a      	cmp	r2, r3
 80124a8:	d309      	bcc.n	80124be <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80124aa:	4b7c      	ldr	r3, [pc, #496]	; (801269c <tcp_input+0x294>)
 80124ac:	881a      	ldrh	r2, [r3, #0]
 80124ae:	4b7d      	ldr	r3, [pc, #500]	; (80126a4 <tcp_input+0x29c>)
 80124b0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80124b2:	7cbb      	ldrb	r3, [r7, #18]
 80124b4:	4619      	mov	r1, r3
 80124b6:	6878      	ldr	r0, [r7, #4]
 80124b8:	f7fe f8f8 	bl	80106ac <pbuf_remove_header>
 80124bc:	e04e      	b.n	801255c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d105      	bne.n	80124d2 <tcp_input+0xca>
 80124c6:	4b70      	ldr	r3, [pc, #448]	; (8012688 <tcp_input+0x280>)
 80124c8:	22c2      	movs	r2, #194	; 0xc2
 80124ca:	4977      	ldr	r1, [pc, #476]	; (80126a8 <tcp_input+0x2a0>)
 80124cc:	4870      	ldr	r0, [pc, #448]	; (8012690 <tcp_input+0x288>)
 80124ce:	f007 f835 	bl	801953c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80124d2:	2114      	movs	r1, #20
 80124d4:	6878      	ldr	r0, [r7, #4]
 80124d6:	f7fe f8e9 	bl	80106ac <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	895a      	ldrh	r2, [r3, #10]
 80124de:	4b71      	ldr	r3, [pc, #452]	; (80126a4 <tcp_input+0x29c>)
 80124e0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80124e2:	4b6e      	ldr	r3, [pc, #440]	; (801269c <tcp_input+0x294>)
 80124e4:	881a      	ldrh	r2, [r3, #0]
 80124e6:	4b6f      	ldr	r3, [pc, #444]	; (80126a4 <tcp_input+0x29c>)
 80124e8:	881b      	ldrh	r3, [r3, #0]
 80124ea:	1ad3      	subs	r3, r2, r3
 80124ec:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80124ee:	4b6d      	ldr	r3, [pc, #436]	; (80126a4 <tcp_input+0x29c>)
 80124f0:	881b      	ldrh	r3, [r3, #0]
 80124f2:	4619      	mov	r1, r3
 80124f4:	6878      	ldr	r0, [r7, #4]
 80124f6:	f7fe f8d9 	bl	80106ac <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	681b      	ldr	r3, [r3, #0]
 80124fe:	895b      	ldrh	r3, [r3, #10]
 8012500:	8a3a      	ldrh	r2, [r7, #16]
 8012502:	429a      	cmp	r2, r3
 8012504:	f200 836e 	bhi.w	8012be4 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	681b      	ldr	r3, [r3, #0]
 801250c:	685b      	ldr	r3, [r3, #4]
 801250e:	4a64      	ldr	r2, [pc, #400]	; (80126a0 <tcp_input+0x298>)
 8012510:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	8a3a      	ldrh	r2, [r7, #16]
 8012518:	4611      	mov	r1, r2
 801251a:	4618      	mov	r0, r3
 801251c:	f7fe f8c6 	bl	80106ac <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	891a      	ldrh	r2, [r3, #8]
 8012524:	8a3b      	ldrh	r3, [r7, #16]
 8012526:	1ad3      	subs	r3, r2, r3
 8012528:	b29a      	uxth	r2, r3
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	895b      	ldrh	r3, [r3, #10]
 8012532:	2b00      	cmp	r3, #0
 8012534:	d005      	beq.n	8012542 <tcp_input+0x13a>
 8012536:	4b54      	ldr	r3, [pc, #336]	; (8012688 <tcp_input+0x280>)
 8012538:	22df      	movs	r2, #223	; 0xdf
 801253a:	495c      	ldr	r1, [pc, #368]	; (80126ac <tcp_input+0x2a4>)
 801253c:	4854      	ldr	r0, [pc, #336]	; (8012690 <tcp_input+0x288>)
 801253e:	f006 fffd 	bl	801953c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	891a      	ldrh	r2, [r3, #8]
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	681b      	ldr	r3, [r3, #0]
 801254a:	891b      	ldrh	r3, [r3, #8]
 801254c:	429a      	cmp	r2, r3
 801254e:	d005      	beq.n	801255c <tcp_input+0x154>
 8012550:	4b4d      	ldr	r3, [pc, #308]	; (8012688 <tcp_input+0x280>)
 8012552:	22e0      	movs	r2, #224	; 0xe0
 8012554:	4956      	ldr	r1, [pc, #344]	; (80126b0 <tcp_input+0x2a8>)
 8012556:	484e      	ldr	r0, [pc, #312]	; (8012690 <tcp_input+0x288>)
 8012558:	f006 fff0 	bl	801953c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801255c:	4b4d      	ldr	r3, [pc, #308]	; (8012694 <tcp_input+0x28c>)
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	881b      	ldrh	r3, [r3, #0]
 8012562:	b29b      	uxth	r3, r3
 8012564:	4a4b      	ldr	r2, [pc, #300]	; (8012694 <tcp_input+0x28c>)
 8012566:	6814      	ldr	r4, [r2, #0]
 8012568:	4618      	mov	r0, r3
 801256a:	f7fc fd2f 	bl	800efcc <lwip_htons>
 801256e:	4603      	mov	r3, r0
 8012570:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8012572:	4b48      	ldr	r3, [pc, #288]	; (8012694 <tcp_input+0x28c>)
 8012574:	681b      	ldr	r3, [r3, #0]
 8012576:	885b      	ldrh	r3, [r3, #2]
 8012578:	b29b      	uxth	r3, r3
 801257a:	4a46      	ldr	r2, [pc, #280]	; (8012694 <tcp_input+0x28c>)
 801257c:	6814      	ldr	r4, [r2, #0]
 801257e:	4618      	mov	r0, r3
 8012580:	f7fc fd24 	bl	800efcc <lwip_htons>
 8012584:	4603      	mov	r3, r0
 8012586:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8012588:	4b42      	ldr	r3, [pc, #264]	; (8012694 <tcp_input+0x28c>)
 801258a:	681b      	ldr	r3, [r3, #0]
 801258c:	685b      	ldr	r3, [r3, #4]
 801258e:	4a41      	ldr	r2, [pc, #260]	; (8012694 <tcp_input+0x28c>)
 8012590:	6814      	ldr	r4, [r2, #0]
 8012592:	4618      	mov	r0, r3
 8012594:	f7fc fd2f 	bl	800eff6 <lwip_htonl>
 8012598:	4603      	mov	r3, r0
 801259a:	6063      	str	r3, [r4, #4]
 801259c:	6863      	ldr	r3, [r4, #4]
 801259e:	4a45      	ldr	r2, [pc, #276]	; (80126b4 <tcp_input+0x2ac>)
 80125a0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80125a2:	4b3c      	ldr	r3, [pc, #240]	; (8012694 <tcp_input+0x28c>)
 80125a4:	681b      	ldr	r3, [r3, #0]
 80125a6:	689b      	ldr	r3, [r3, #8]
 80125a8:	4a3a      	ldr	r2, [pc, #232]	; (8012694 <tcp_input+0x28c>)
 80125aa:	6814      	ldr	r4, [r2, #0]
 80125ac:	4618      	mov	r0, r3
 80125ae:	f7fc fd22 	bl	800eff6 <lwip_htonl>
 80125b2:	4603      	mov	r3, r0
 80125b4:	60a3      	str	r3, [r4, #8]
 80125b6:	68a3      	ldr	r3, [r4, #8]
 80125b8:	4a3f      	ldr	r2, [pc, #252]	; (80126b8 <tcp_input+0x2b0>)
 80125ba:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80125bc:	4b35      	ldr	r3, [pc, #212]	; (8012694 <tcp_input+0x28c>)
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	89db      	ldrh	r3, [r3, #14]
 80125c2:	b29b      	uxth	r3, r3
 80125c4:	4a33      	ldr	r2, [pc, #204]	; (8012694 <tcp_input+0x28c>)
 80125c6:	6814      	ldr	r4, [r2, #0]
 80125c8:	4618      	mov	r0, r3
 80125ca:	f7fc fcff 	bl	800efcc <lwip_htons>
 80125ce:	4603      	mov	r3, r0
 80125d0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80125d2:	4b30      	ldr	r3, [pc, #192]	; (8012694 <tcp_input+0x28c>)
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	899b      	ldrh	r3, [r3, #12]
 80125d8:	b29b      	uxth	r3, r3
 80125da:	4618      	mov	r0, r3
 80125dc:	f7fc fcf6 	bl	800efcc <lwip_htons>
 80125e0:	4603      	mov	r3, r0
 80125e2:	b2db      	uxtb	r3, r3
 80125e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80125e8:	b2da      	uxtb	r2, r3
 80125ea:	4b34      	ldr	r3, [pc, #208]	; (80126bc <tcp_input+0x2b4>)
 80125ec:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	891a      	ldrh	r2, [r3, #8]
 80125f2:	4b33      	ldr	r3, [pc, #204]	; (80126c0 <tcp_input+0x2b8>)
 80125f4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80125f6:	4b31      	ldr	r3, [pc, #196]	; (80126bc <tcp_input+0x2b4>)
 80125f8:	781b      	ldrb	r3, [r3, #0]
 80125fa:	f003 0303 	and.w	r3, r3, #3
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d00c      	beq.n	801261c <tcp_input+0x214>
    tcplen++;
 8012602:	4b2f      	ldr	r3, [pc, #188]	; (80126c0 <tcp_input+0x2b8>)
 8012604:	881b      	ldrh	r3, [r3, #0]
 8012606:	3301      	adds	r3, #1
 8012608:	b29a      	uxth	r2, r3
 801260a:	4b2d      	ldr	r3, [pc, #180]	; (80126c0 <tcp_input+0x2b8>)
 801260c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	891a      	ldrh	r2, [r3, #8]
 8012612:	4b2b      	ldr	r3, [pc, #172]	; (80126c0 <tcp_input+0x2b8>)
 8012614:	881b      	ldrh	r3, [r3, #0]
 8012616:	429a      	cmp	r2, r3
 8012618:	f200 82e6 	bhi.w	8012be8 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801261c:	2300      	movs	r3, #0
 801261e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012620:	4b28      	ldr	r3, [pc, #160]	; (80126c4 <tcp_input+0x2bc>)
 8012622:	681b      	ldr	r3, [r3, #0]
 8012624:	61fb      	str	r3, [r7, #28]
 8012626:	e09d      	b.n	8012764 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8012628:	69fb      	ldr	r3, [r7, #28]
 801262a:	7d1b      	ldrb	r3, [r3, #20]
 801262c:	2b00      	cmp	r3, #0
 801262e:	d105      	bne.n	801263c <tcp_input+0x234>
 8012630:	4b15      	ldr	r3, [pc, #84]	; (8012688 <tcp_input+0x280>)
 8012632:	22fb      	movs	r2, #251	; 0xfb
 8012634:	4924      	ldr	r1, [pc, #144]	; (80126c8 <tcp_input+0x2c0>)
 8012636:	4816      	ldr	r0, [pc, #88]	; (8012690 <tcp_input+0x288>)
 8012638:	f006 ff80 	bl	801953c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801263c:	69fb      	ldr	r3, [r7, #28]
 801263e:	7d1b      	ldrb	r3, [r3, #20]
 8012640:	2b0a      	cmp	r3, #10
 8012642:	d105      	bne.n	8012650 <tcp_input+0x248>
 8012644:	4b10      	ldr	r3, [pc, #64]	; (8012688 <tcp_input+0x280>)
 8012646:	22fc      	movs	r2, #252	; 0xfc
 8012648:	4920      	ldr	r1, [pc, #128]	; (80126cc <tcp_input+0x2c4>)
 801264a:	4811      	ldr	r0, [pc, #68]	; (8012690 <tcp_input+0x288>)
 801264c:	f006 ff76 	bl	801953c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8012650:	69fb      	ldr	r3, [r7, #28]
 8012652:	7d1b      	ldrb	r3, [r3, #20]
 8012654:	2b01      	cmp	r3, #1
 8012656:	d105      	bne.n	8012664 <tcp_input+0x25c>
 8012658:	4b0b      	ldr	r3, [pc, #44]	; (8012688 <tcp_input+0x280>)
 801265a:	22fd      	movs	r2, #253	; 0xfd
 801265c:	491c      	ldr	r1, [pc, #112]	; (80126d0 <tcp_input+0x2c8>)
 801265e:	480c      	ldr	r0, [pc, #48]	; (8012690 <tcp_input+0x288>)
 8012660:	f006 ff6c 	bl	801953c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012664:	69fb      	ldr	r3, [r7, #28]
 8012666:	7a1b      	ldrb	r3, [r3, #8]
 8012668:	2b00      	cmp	r3, #0
 801266a:	d033      	beq.n	80126d4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801266c:	69fb      	ldr	r3, [r7, #28]
 801266e:	7a1a      	ldrb	r2, [r3, #8]
 8012670:	4b09      	ldr	r3, [pc, #36]	; (8012698 <tcp_input+0x290>)
 8012672:	685b      	ldr	r3, [r3, #4]
 8012674:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012678:	3301      	adds	r3, #1
 801267a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801267c:	429a      	cmp	r2, r3
 801267e:	d029      	beq.n	80126d4 <tcp_input+0x2cc>
      prev = pcb;
 8012680:	69fb      	ldr	r3, [r7, #28]
 8012682:	61bb      	str	r3, [r7, #24]
      continue;
 8012684:	e06b      	b.n	801275e <tcp_input+0x356>
 8012686:	bf00      	nop
 8012688:	0801cf0c 	.word	0x0801cf0c
 801268c:	0801cf40 	.word	0x0801cf40
 8012690:	0801cf58 	.word	0x0801cf58
 8012694:	200080f0 	.word	0x200080f0
 8012698:	200051ac 	.word	0x200051ac
 801269c:	200080f4 	.word	0x200080f4
 80126a0:	200080f8 	.word	0x200080f8
 80126a4:	200080f6 	.word	0x200080f6
 80126a8:	0801cf80 	.word	0x0801cf80
 80126ac:	0801cf90 	.word	0x0801cf90
 80126b0:	0801cf9c 	.word	0x0801cf9c
 80126b4:	20008100 	.word	0x20008100
 80126b8:	20008104 	.word	0x20008104
 80126bc:	2000810c 	.word	0x2000810c
 80126c0:	2000810a 	.word	0x2000810a
 80126c4:	200080d4 	.word	0x200080d4
 80126c8:	0801cfbc 	.word	0x0801cfbc
 80126cc:	0801cfe4 	.word	0x0801cfe4
 80126d0:	0801d010 	.word	0x0801d010
    }

    if (pcb->remote_port == tcphdr->src &&
 80126d4:	69fb      	ldr	r3, [r7, #28]
 80126d6:	8b1a      	ldrh	r2, [r3, #24]
 80126d8:	4b72      	ldr	r3, [pc, #456]	; (80128a4 <tcp_input+0x49c>)
 80126da:	681b      	ldr	r3, [r3, #0]
 80126dc:	881b      	ldrh	r3, [r3, #0]
 80126de:	b29b      	uxth	r3, r3
 80126e0:	429a      	cmp	r2, r3
 80126e2:	d13a      	bne.n	801275a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80126e4:	69fb      	ldr	r3, [r7, #28]
 80126e6:	8ada      	ldrh	r2, [r3, #22]
 80126e8:	4b6e      	ldr	r3, [pc, #440]	; (80128a4 <tcp_input+0x49c>)
 80126ea:	681b      	ldr	r3, [r3, #0]
 80126ec:	885b      	ldrh	r3, [r3, #2]
 80126ee:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80126f0:	429a      	cmp	r2, r3
 80126f2:	d132      	bne.n	801275a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80126f4:	69fb      	ldr	r3, [r7, #28]
 80126f6:	685a      	ldr	r2, [r3, #4]
 80126f8:	4b6b      	ldr	r3, [pc, #428]	; (80128a8 <tcp_input+0x4a0>)
 80126fa:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80126fc:	429a      	cmp	r2, r3
 80126fe:	d12c      	bne.n	801275a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012700:	69fb      	ldr	r3, [r7, #28]
 8012702:	681a      	ldr	r2, [r3, #0]
 8012704:	4b68      	ldr	r3, [pc, #416]	; (80128a8 <tcp_input+0x4a0>)
 8012706:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012708:	429a      	cmp	r2, r3
 801270a:	d126      	bne.n	801275a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801270c:	69fb      	ldr	r3, [r7, #28]
 801270e:	68db      	ldr	r3, [r3, #12]
 8012710:	69fa      	ldr	r2, [r7, #28]
 8012712:	429a      	cmp	r2, r3
 8012714:	d106      	bne.n	8012724 <tcp_input+0x31c>
 8012716:	4b65      	ldr	r3, [pc, #404]	; (80128ac <tcp_input+0x4a4>)
 8012718:	f240 120d 	movw	r2, #269	; 0x10d
 801271c:	4964      	ldr	r1, [pc, #400]	; (80128b0 <tcp_input+0x4a8>)
 801271e:	4865      	ldr	r0, [pc, #404]	; (80128b4 <tcp_input+0x4ac>)
 8012720:	f006 ff0c 	bl	801953c <iprintf>
      if (prev != NULL) {
 8012724:	69bb      	ldr	r3, [r7, #24]
 8012726:	2b00      	cmp	r3, #0
 8012728:	d00a      	beq.n	8012740 <tcp_input+0x338>
        prev->next = pcb->next;
 801272a:	69fb      	ldr	r3, [r7, #28]
 801272c:	68da      	ldr	r2, [r3, #12]
 801272e:	69bb      	ldr	r3, [r7, #24]
 8012730:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8012732:	4b61      	ldr	r3, [pc, #388]	; (80128b8 <tcp_input+0x4b0>)
 8012734:	681a      	ldr	r2, [r3, #0]
 8012736:	69fb      	ldr	r3, [r7, #28]
 8012738:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801273a:	4a5f      	ldr	r2, [pc, #380]	; (80128b8 <tcp_input+0x4b0>)
 801273c:	69fb      	ldr	r3, [r7, #28]
 801273e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8012740:	69fb      	ldr	r3, [r7, #28]
 8012742:	68db      	ldr	r3, [r3, #12]
 8012744:	69fa      	ldr	r2, [r7, #28]
 8012746:	429a      	cmp	r2, r3
 8012748:	d111      	bne.n	801276e <tcp_input+0x366>
 801274a:	4b58      	ldr	r3, [pc, #352]	; (80128ac <tcp_input+0x4a4>)
 801274c:	f240 1215 	movw	r2, #277	; 0x115
 8012750:	495a      	ldr	r1, [pc, #360]	; (80128bc <tcp_input+0x4b4>)
 8012752:	4858      	ldr	r0, [pc, #352]	; (80128b4 <tcp_input+0x4ac>)
 8012754:	f006 fef2 	bl	801953c <iprintf>
      break;
 8012758:	e009      	b.n	801276e <tcp_input+0x366>
    }
    prev = pcb;
 801275a:	69fb      	ldr	r3, [r7, #28]
 801275c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801275e:	69fb      	ldr	r3, [r7, #28]
 8012760:	68db      	ldr	r3, [r3, #12]
 8012762:	61fb      	str	r3, [r7, #28]
 8012764:	69fb      	ldr	r3, [r7, #28]
 8012766:	2b00      	cmp	r3, #0
 8012768:	f47f af5e 	bne.w	8012628 <tcp_input+0x220>
 801276c:	e000      	b.n	8012770 <tcp_input+0x368>
      break;
 801276e:	bf00      	nop
  }

  if (pcb == NULL) {
 8012770:	69fb      	ldr	r3, [r7, #28]
 8012772:	2b00      	cmp	r3, #0
 8012774:	f040 80aa 	bne.w	80128cc <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012778:	4b51      	ldr	r3, [pc, #324]	; (80128c0 <tcp_input+0x4b8>)
 801277a:	681b      	ldr	r3, [r3, #0]
 801277c:	61fb      	str	r3, [r7, #28]
 801277e:	e03f      	b.n	8012800 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012780:	69fb      	ldr	r3, [r7, #28]
 8012782:	7d1b      	ldrb	r3, [r3, #20]
 8012784:	2b0a      	cmp	r3, #10
 8012786:	d006      	beq.n	8012796 <tcp_input+0x38e>
 8012788:	4b48      	ldr	r3, [pc, #288]	; (80128ac <tcp_input+0x4a4>)
 801278a:	f240 121f 	movw	r2, #287	; 0x11f
 801278e:	494d      	ldr	r1, [pc, #308]	; (80128c4 <tcp_input+0x4bc>)
 8012790:	4848      	ldr	r0, [pc, #288]	; (80128b4 <tcp_input+0x4ac>)
 8012792:	f006 fed3 	bl	801953c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012796:	69fb      	ldr	r3, [r7, #28]
 8012798:	7a1b      	ldrb	r3, [r3, #8]
 801279a:	2b00      	cmp	r3, #0
 801279c:	d009      	beq.n	80127b2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801279e:	69fb      	ldr	r3, [r7, #28]
 80127a0:	7a1a      	ldrb	r2, [r3, #8]
 80127a2:	4b41      	ldr	r3, [pc, #260]	; (80128a8 <tcp_input+0x4a0>)
 80127a4:	685b      	ldr	r3, [r3, #4]
 80127a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80127aa:	3301      	adds	r3, #1
 80127ac:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80127ae:	429a      	cmp	r2, r3
 80127b0:	d122      	bne.n	80127f8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80127b2:	69fb      	ldr	r3, [r7, #28]
 80127b4:	8b1a      	ldrh	r2, [r3, #24]
 80127b6:	4b3b      	ldr	r3, [pc, #236]	; (80128a4 <tcp_input+0x49c>)
 80127b8:	681b      	ldr	r3, [r3, #0]
 80127ba:	881b      	ldrh	r3, [r3, #0]
 80127bc:	b29b      	uxth	r3, r3
 80127be:	429a      	cmp	r2, r3
 80127c0:	d11b      	bne.n	80127fa <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80127c2:	69fb      	ldr	r3, [r7, #28]
 80127c4:	8ada      	ldrh	r2, [r3, #22]
 80127c6:	4b37      	ldr	r3, [pc, #220]	; (80128a4 <tcp_input+0x49c>)
 80127c8:	681b      	ldr	r3, [r3, #0]
 80127ca:	885b      	ldrh	r3, [r3, #2]
 80127cc:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80127ce:	429a      	cmp	r2, r3
 80127d0:	d113      	bne.n	80127fa <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80127d2:	69fb      	ldr	r3, [r7, #28]
 80127d4:	685a      	ldr	r2, [r3, #4]
 80127d6:	4b34      	ldr	r3, [pc, #208]	; (80128a8 <tcp_input+0x4a0>)
 80127d8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80127da:	429a      	cmp	r2, r3
 80127dc:	d10d      	bne.n	80127fa <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80127de:	69fb      	ldr	r3, [r7, #28]
 80127e0:	681a      	ldr	r2, [r3, #0]
 80127e2:	4b31      	ldr	r3, [pc, #196]	; (80128a8 <tcp_input+0x4a0>)
 80127e4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80127e6:	429a      	cmp	r2, r3
 80127e8:	d107      	bne.n	80127fa <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80127ea:	69f8      	ldr	r0, [r7, #28]
 80127ec:	f000 fb56 	bl	8012e9c <tcp_timewait_input>
        }
        pbuf_free(p);
 80127f0:	6878      	ldr	r0, [r7, #4]
 80127f2:	f7fd ffe1 	bl	80107b8 <pbuf_free>
        return;
 80127f6:	e1fd      	b.n	8012bf4 <tcp_input+0x7ec>
        continue;
 80127f8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80127fa:	69fb      	ldr	r3, [r7, #28]
 80127fc:	68db      	ldr	r3, [r3, #12]
 80127fe:	61fb      	str	r3, [r7, #28]
 8012800:	69fb      	ldr	r3, [r7, #28]
 8012802:	2b00      	cmp	r3, #0
 8012804:	d1bc      	bne.n	8012780 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8012806:	2300      	movs	r3, #0
 8012808:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801280a:	4b2f      	ldr	r3, [pc, #188]	; (80128c8 <tcp_input+0x4c0>)
 801280c:	681b      	ldr	r3, [r3, #0]
 801280e:	617b      	str	r3, [r7, #20]
 8012810:	e02a      	b.n	8012868 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8012812:	697b      	ldr	r3, [r7, #20]
 8012814:	7a1b      	ldrb	r3, [r3, #8]
 8012816:	2b00      	cmp	r3, #0
 8012818:	d00c      	beq.n	8012834 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801281a:	697b      	ldr	r3, [r7, #20]
 801281c:	7a1a      	ldrb	r2, [r3, #8]
 801281e:	4b22      	ldr	r3, [pc, #136]	; (80128a8 <tcp_input+0x4a0>)
 8012820:	685b      	ldr	r3, [r3, #4]
 8012822:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012826:	3301      	adds	r3, #1
 8012828:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801282a:	429a      	cmp	r2, r3
 801282c:	d002      	beq.n	8012834 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801282e:	697b      	ldr	r3, [r7, #20]
 8012830:	61bb      	str	r3, [r7, #24]
        continue;
 8012832:	e016      	b.n	8012862 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8012834:	697b      	ldr	r3, [r7, #20]
 8012836:	8ada      	ldrh	r2, [r3, #22]
 8012838:	4b1a      	ldr	r3, [pc, #104]	; (80128a4 <tcp_input+0x49c>)
 801283a:	681b      	ldr	r3, [r3, #0]
 801283c:	885b      	ldrh	r3, [r3, #2]
 801283e:	b29b      	uxth	r3, r3
 8012840:	429a      	cmp	r2, r3
 8012842:	d10c      	bne.n	801285e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8012844:	697b      	ldr	r3, [r7, #20]
 8012846:	681a      	ldr	r2, [r3, #0]
 8012848:	4b17      	ldr	r3, [pc, #92]	; (80128a8 <tcp_input+0x4a0>)
 801284a:	695b      	ldr	r3, [r3, #20]
 801284c:	429a      	cmp	r2, r3
 801284e:	d00f      	beq.n	8012870 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8012850:	697b      	ldr	r3, [r7, #20]
 8012852:	2b00      	cmp	r3, #0
 8012854:	d00d      	beq.n	8012872 <tcp_input+0x46a>
 8012856:	697b      	ldr	r3, [r7, #20]
 8012858:	681b      	ldr	r3, [r3, #0]
 801285a:	2b00      	cmp	r3, #0
 801285c:	d009      	beq.n	8012872 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801285e:	697b      	ldr	r3, [r7, #20]
 8012860:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012862:	697b      	ldr	r3, [r7, #20]
 8012864:	68db      	ldr	r3, [r3, #12]
 8012866:	617b      	str	r3, [r7, #20]
 8012868:	697b      	ldr	r3, [r7, #20]
 801286a:	2b00      	cmp	r3, #0
 801286c:	d1d1      	bne.n	8012812 <tcp_input+0x40a>
 801286e:	e000      	b.n	8012872 <tcp_input+0x46a>
            break;
 8012870:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8012872:	697b      	ldr	r3, [r7, #20]
 8012874:	2b00      	cmp	r3, #0
 8012876:	d029      	beq.n	80128cc <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8012878:	69bb      	ldr	r3, [r7, #24]
 801287a:	2b00      	cmp	r3, #0
 801287c:	d00a      	beq.n	8012894 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801287e:	697b      	ldr	r3, [r7, #20]
 8012880:	68da      	ldr	r2, [r3, #12]
 8012882:	69bb      	ldr	r3, [r7, #24]
 8012884:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8012886:	4b10      	ldr	r3, [pc, #64]	; (80128c8 <tcp_input+0x4c0>)
 8012888:	681a      	ldr	r2, [r3, #0]
 801288a:	697b      	ldr	r3, [r7, #20]
 801288c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801288e:	4a0e      	ldr	r2, [pc, #56]	; (80128c8 <tcp_input+0x4c0>)
 8012890:	697b      	ldr	r3, [r7, #20]
 8012892:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8012894:	6978      	ldr	r0, [r7, #20]
 8012896:	f000 fa03 	bl	8012ca0 <tcp_listen_input>
      }
      pbuf_free(p);
 801289a:	6878      	ldr	r0, [r7, #4]
 801289c:	f7fd ff8c 	bl	80107b8 <pbuf_free>
      return;
 80128a0:	e1a8      	b.n	8012bf4 <tcp_input+0x7ec>
 80128a2:	bf00      	nop
 80128a4:	200080f0 	.word	0x200080f0
 80128a8:	200051ac 	.word	0x200051ac
 80128ac:	0801cf0c 	.word	0x0801cf0c
 80128b0:	0801d038 	.word	0x0801d038
 80128b4:	0801cf58 	.word	0x0801cf58
 80128b8:	200080d4 	.word	0x200080d4
 80128bc:	0801d064 	.word	0x0801d064
 80128c0:	200080d8 	.word	0x200080d8
 80128c4:	0801d090 	.word	0x0801d090
 80128c8:	200080d0 	.word	0x200080d0
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80128cc:	69fb      	ldr	r3, [r7, #28]
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	f000 8158 	beq.w	8012b84 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80128d4:	4b95      	ldr	r3, [pc, #596]	; (8012b2c <tcp_input+0x724>)
 80128d6:	2200      	movs	r2, #0
 80128d8:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	891a      	ldrh	r2, [r3, #8]
 80128de:	4b93      	ldr	r3, [pc, #588]	; (8012b2c <tcp_input+0x724>)
 80128e0:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80128e2:	4a92      	ldr	r2, [pc, #584]	; (8012b2c <tcp_input+0x724>)
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80128e8:	4b91      	ldr	r3, [pc, #580]	; (8012b30 <tcp_input+0x728>)
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	4a8f      	ldr	r2, [pc, #572]	; (8012b2c <tcp_input+0x724>)
 80128ee:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80128f0:	4b90      	ldr	r3, [pc, #576]	; (8012b34 <tcp_input+0x72c>)
 80128f2:	2200      	movs	r2, #0
 80128f4:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80128f6:	4b90      	ldr	r3, [pc, #576]	; (8012b38 <tcp_input+0x730>)
 80128f8:	2200      	movs	r2, #0
 80128fa:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80128fc:	4b8f      	ldr	r3, [pc, #572]	; (8012b3c <tcp_input+0x734>)
 80128fe:	2200      	movs	r2, #0
 8012900:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8012902:	4b8f      	ldr	r3, [pc, #572]	; (8012b40 <tcp_input+0x738>)
 8012904:	781b      	ldrb	r3, [r3, #0]
 8012906:	f003 0308 	and.w	r3, r3, #8
 801290a:	2b00      	cmp	r3, #0
 801290c:	d006      	beq.n	801291c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	7b5b      	ldrb	r3, [r3, #13]
 8012912:	f043 0301 	orr.w	r3, r3, #1
 8012916:	b2da      	uxtb	r2, r3
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801291c:	69fb      	ldr	r3, [r7, #28]
 801291e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012920:	2b00      	cmp	r3, #0
 8012922:	d017      	beq.n	8012954 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012924:	69f8      	ldr	r0, [r7, #28]
 8012926:	f7ff f929 	bl	8011b7c <tcp_process_refused_data>
 801292a:	4603      	mov	r3, r0
 801292c:	f113 0f0d 	cmn.w	r3, #13
 8012930:	d007      	beq.n	8012942 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012932:	69fb      	ldr	r3, [r7, #28]
 8012934:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012936:	2b00      	cmp	r3, #0
 8012938:	d00c      	beq.n	8012954 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801293a:	4b82      	ldr	r3, [pc, #520]	; (8012b44 <tcp_input+0x73c>)
 801293c:	881b      	ldrh	r3, [r3, #0]
 801293e:	2b00      	cmp	r3, #0
 8012940:	d008      	beq.n	8012954 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8012942:	69fb      	ldr	r3, [r7, #28]
 8012944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012946:	2b00      	cmp	r3, #0
 8012948:	f040 80e3 	bne.w	8012b12 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801294c:	69f8      	ldr	r0, [r7, #28]
 801294e:	f003 f9ad 	bl	8015cac <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8012952:	e0de      	b.n	8012b12 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8012954:	4a7c      	ldr	r2, [pc, #496]	; (8012b48 <tcp_input+0x740>)
 8012956:	69fb      	ldr	r3, [r7, #28]
 8012958:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801295a:	69f8      	ldr	r0, [r7, #28]
 801295c:	f000 fb18 	bl	8012f90 <tcp_process>
 8012960:	4603      	mov	r3, r0
 8012962:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8012964:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012968:	f113 0f0d 	cmn.w	r3, #13
 801296c:	f000 80d3 	beq.w	8012b16 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8012970:	4b71      	ldr	r3, [pc, #452]	; (8012b38 <tcp_input+0x730>)
 8012972:	781b      	ldrb	r3, [r3, #0]
 8012974:	f003 0308 	and.w	r3, r3, #8
 8012978:	2b00      	cmp	r3, #0
 801297a:	d015      	beq.n	80129a8 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801297c:	69fb      	ldr	r3, [r7, #28]
 801297e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012982:	2b00      	cmp	r3, #0
 8012984:	d008      	beq.n	8012998 <tcp_input+0x590>
 8012986:	69fb      	ldr	r3, [r7, #28]
 8012988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801298c:	69fa      	ldr	r2, [r7, #28]
 801298e:	6912      	ldr	r2, [r2, #16]
 8012990:	f06f 010d 	mvn.w	r1, #13
 8012994:	4610      	mov	r0, r2
 8012996:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8012998:	69f9      	ldr	r1, [r7, #28]
 801299a:	486c      	ldr	r0, [pc, #432]	; (8012b4c <tcp_input+0x744>)
 801299c:	f7ff fbbc 	bl	8012118 <tcp_pcb_remove>
        tcp_free(pcb);
 80129a0:	69f8      	ldr	r0, [r7, #28]
 80129a2:	f7fe f9a9 	bl	8010cf8 <tcp_free>
 80129a6:	e0da      	b.n	8012b5e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80129a8:	2300      	movs	r3, #0
 80129aa:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80129ac:	4b63      	ldr	r3, [pc, #396]	; (8012b3c <tcp_input+0x734>)
 80129ae:	881b      	ldrh	r3, [r3, #0]
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d01d      	beq.n	80129f0 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80129b4:	4b61      	ldr	r3, [pc, #388]	; (8012b3c <tcp_input+0x734>)
 80129b6:	881b      	ldrh	r3, [r3, #0]
 80129b8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80129ba:	69fb      	ldr	r3, [r7, #28]
 80129bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d00a      	beq.n	80129da <tcp_input+0x5d2>
 80129c4:	69fb      	ldr	r3, [r7, #28]
 80129c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80129ca:	69fa      	ldr	r2, [r7, #28]
 80129cc:	6910      	ldr	r0, [r2, #16]
 80129ce:	89fa      	ldrh	r2, [r7, #14]
 80129d0:	69f9      	ldr	r1, [r7, #28]
 80129d2:	4798      	blx	r3
 80129d4:	4603      	mov	r3, r0
 80129d6:	74fb      	strb	r3, [r7, #19]
 80129d8:	e001      	b.n	80129de <tcp_input+0x5d6>
 80129da:	2300      	movs	r3, #0
 80129dc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80129de:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80129e2:	f113 0f0d 	cmn.w	r3, #13
 80129e6:	f000 8098 	beq.w	8012b1a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 80129ea:	4b54      	ldr	r3, [pc, #336]	; (8012b3c <tcp_input+0x734>)
 80129ec:	2200      	movs	r2, #0
 80129ee:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80129f0:	69f8      	ldr	r0, [r7, #28]
 80129f2:	f000 f915 	bl	8012c20 <tcp_input_delayed_close>
 80129f6:	4603      	mov	r3, r0
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	f040 8090 	bne.w	8012b1e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80129fe:	4b4d      	ldr	r3, [pc, #308]	; (8012b34 <tcp_input+0x72c>)
 8012a00:	681b      	ldr	r3, [r3, #0]
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d041      	beq.n	8012a8a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8012a06:	69fb      	ldr	r3, [r7, #28]
 8012a08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d006      	beq.n	8012a1c <tcp_input+0x614>
 8012a0e:	4b50      	ldr	r3, [pc, #320]	; (8012b50 <tcp_input+0x748>)
 8012a10:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8012a14:	494f      	ldr	r1, [pc, #316]	; (8012b54 <tcp_input+0x74c>)
 8012a16:	4850      	ldr	r0, [pc, #320]	; (8012b58 <tcp_input+0x750>)
 8012a18:	f006 fd90 	bl	801953c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8012a1c:	69fb      	ldr	r3, [r7, #28]
 8012a1e:	8b5b      	ldrh	r3, [r3, #26]
 8012a20:	f003 0310 	and.w	r3, r3, #16
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d008      	beq.n	8012a3a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8012a28:	4b42      	ldr	r3, [pc, #264]	; (8012b34 <tcp_input+0x72c>)
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	4618      	mov	r0, r3
 8012a2e:	f7fd fec3 	bl	80107b8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8012a32:	69f8      	ldr	r0, [r7, #28]
 8012a34:	f7fe fc48 	bl	80112c8 <tcp_abort>
            goto aborted;
 8012a38:	e091      	b.n	8012b5e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8012a3a:	69fb      	ldr	r3, [r7, #28]
 8012a3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d00c      	beq.n	8012a5e <tcp_input+0x656>
 8012a44:	69fb      	ldr	r3, [r7, #28]
 8012a46:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012a4a:	69fb      	ldr	r3, [r7, #28]
 8012a4c:	6918      	ldr	r0, [r3, #16]
 8012a4e:	4b39      	ldr	r3, [pc, #228]	; (8012b34 <tcp_input+0x72c>)
 8012a50:	681a      	ldr	r2, [r3, #0]
 8012a52:	2300      	movs	r3, #0
 8012a54:	69f9      	ldr	r1, [r7, #28]
 8012a56:	47a0      	blx	r4
 8012a58:	4603      	mov	r3, r0
 8012a5a:	74fb      	strb	r3, [r7, #19]
 8012a5c:	e008      	b.n	8012a70 <tcp_input+0x668>
 8012a5e:	4b35      	ldr	r3, [pc, #212]	; (8012b34 <tcp_input+0x72c>)
 8012a60:	681a      	ldr	r2, [r3, #0]
 8012a62:	2300      	movs	r3, #0
 8012a64:	69f9      	ldr	r1, [r7, #28]
 8012a66:	2000      	movs	r0, #0
 8012a68:	f7ff f95e 	bl	8011d28 <tcp_recv_null>
 8012a6c:	4603      	mov	r3, r0
 8012a6e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8012a70:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012a74:	f113 0f0d 	cmn.w	r3, #13
 8012a78:	d053      	beq.n	8012b22 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8012a7a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d003      	beq.n	8012a8a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8012a82:	4b2c      	ldr	r3, [pc, #176]	; (8012b34 <tcp_input+0x72c>)
 8012a84:	681a      	ldr	r2, [r3, #0]
 8012a86:	69fb      	ldr	r3, [r7, #28]
 8012a88:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8012a8a:	4b2b      	ldr	r3, [pc, #172]	; (8012b38 <tcp_input+0x730>)
 8012a8c:	781b      	ldrb	r3, [r3, #0]
 8012a8e:	f003 0320 	and.w	r3, r3, #32
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d030      	beq.n	8012af8 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8012a96:	69fb      	ldr	r3, [r7, #28]
 8012a98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d009      	beq.n	8012ab2 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8012a9e:	69fb      	ldr	r3, [r7, #28]
 8012aa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012aa2:	7b5a      	ldrb	r2, [r3, #13]
 8012aa4:	69fb      	ldr	r3, [r7, #28]
 8012aa6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012aa8:	f042 0220 	orr.w	r2, r2, #32
 8012aac:	b2d2      	uxtb	r2, r2
 8012aae:	735a      	strb	r2, [r3, #13]
 8012ab0:	e022      	b.n	8012af8 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8012ab2:	69fb      	ldr	r3, [r7, #28]
 8012ab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012ab6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8012aba:	d005      	beq.n	8012ac8 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8012abc:	69fb      	ldr	r3, [r7, #28]
 8012abe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012ac0:	3301      	adds	r3, #1
 8012ac2:	b29a      	uxth	r2, r3
 8012ac4:	69fb      	ldr	r3, [r7, #28]
 8012ac6:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8012ac8:	69fb      	ldr	r3, [r7, #28]
 8012aca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d00b      	beq.n	8012aea <tcp_input+0x6e2>
 8012ad2:	69fb      	ldr	r3, [r7, #28]
 8012ad4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012ad8:	69fb      	ldr	r3, [r7, #28]
 8012ada:	6918      	ldr	r0, [r3, #16]
 8012adc:	2300      	movs	r3, #0
 8012ade:	2200      	movs	r2, #0
 8012ae0:	69f9      	ldr	r1, [r7, #28]
 8012ae2:	47a0      	blx	r4
 8012ae4:	4603      	mov	r3, r0
 8012ae6:	74fb      	strb	r3, [r7, #19]
 8012ae8:	e001      	b.n	8012aee <tcp_input+0x6e6>
 8012aea:	2300      	movs	r3, #0
 8012aec:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012aee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012af2:	f113 0f0d 	cmn.w	r3, #13
 8012af6:	d016      	beq.n	8012b26 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8012af8:	4b13      	ldr	r3, [pc, #76]	; (8012b48 <tcp_input+0x740>)
 8012afa:	2200      	movs	r2, #0
 8012afc:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8012afe:	69f8      	ldr	r0, [r7, #28]
 8012b00:	f000 f88e 	bl	8012c20 <tcp_input_delayed_close>
 8012b04:	4603      	mov	r3, r0
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d128      	bne.n	8012b5c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8012b0a:	69f8      	ldr	r0, [r7, #28]
 8012b0c:	f002 fac8 	bl	80150a0 <tcp_output>
 8012b10:	e025      	b.n	8012b5e <tcp_input+0x756>
        goto aborted;
 8012b12:	bf00      	nop
 8012b14:	e023      	b.n	8012b5e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8012b16:	bf00      	nop
 8012b18:	e021      	b.n	8012b5e <tcp_input+0x756>
              goto aborted;
 8012b1a:	bf00      	nop
 8012b1c:	e01f      	b.n	8012b5e <tcp_input+0x756>
          goto aborted;
 8012b1e:	bf00      	nop
 8012b20:	e01d      	b.n	8012b5e <tcp_input+0x756>
            goto aborted;
 8012b22:	bf00      	nop
 8012b24:	e01b      	b.n	8012b5e <tcp_input+0x756>
              goto aborted;
 8012b26:	bf00      	nop
 8012b28:	e019      	b.n	8012b5e <tcp_input+0x756>
 8012b2a:	bf00      	nop
 8012b2c:	200080e0 	.word	0x200080e0
 8012b30:	200080f0 	.word	0x200080f0
 8012b34:	20008110 	.word	0x20008110
 8012b38:	2000810d 	.word	0x2000810d
 8012b3c:	20008108 	.word	0x20008108
 8012b40:	2000810c 	.word	0x2000810c
 8012b44:	2000810a 	.word	0x2000810a
 8012b48:	20008114 	.word	0x20008114
 8012b4c:	200080d4 	.word	0x200080d4
 8012b50:	0801cf0c 	.word	0x0801cf0c
 8012b54:	0801d0c0 	.word	0x0801d0c0
 8012b58:	0801cf58 	.word	0x0801cf58
          goto aborted;
 8012b5c:	bf00      	nop
    tcp_input_pcb = NULL;
 8012b5e:	4b27      	ldr	r3, [pc, #156]	; (8012bfc <tcp_input+0x7f4>)
 8012b60:	2200      	movs	r2, #0
 8012b62:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8012b64:	4b26      	ldr	r3, [pc, #152]	; (8012c00 <tcp_input+0x7f8>)
 8012b66:	2200      	movs	r2, #0
 8012b68:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8012b6a:	4b26      	ldr	r3, [pc, #152]	; (8012c04 <tcp_input+0x7fc>)
 8012b6c:	685b      	ldr	r3, [r3, #4]
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d03f      	beq.n	8012bf2 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8012b72:	4b24      	ldr	r3, [pc, #144]	; (8012c04 <tcp_input+0x7fc>)
 8012b74:	685b      	ldr	r3, [r3, #4]
 8012b76:	4618      	mov	r0, r3
 8012b78:	f7fd fe1e 	bl	80107b8 <pbuf_free>
      inseg.p = NULL;
 8012b7c:	4b21      	ldr	r3, [pc, #132]	; (8012c04 <tcp_input+0x7fc>)
 8012b7e:	2200      	movs	r2, #0
 8012b80:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8012b82:	e036      	b.n	8012bf2 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8012b84:	4b20      	ldr	r3, [pc, #128]	; (8012c08 <tcp_input+0x800>)
 8012b86:	681b      	ldr	r3, [r3, #0]
 8012b88:	899b      	ldrh	r3, [r3, #12]
 8012b8a:	b29b      	uxth	r3, r3
 8012b8c:	4618      	mov	r0, r3
 8012b8e:	f7fc fa1d 	bl	800efcc <lwip_htons>
 8012b92:	4603      	mov	r3, r0
 8012b94:	b2db      	uxtb	r3, r3
 8012b96:	f003 0304 	and.w	r3, r3, #4
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d118      	bne.n	8012bd0 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012b9e:	4b1b      	ldr	r3, [pc, #108]	; (8012c0c <tcp_input+0x804>)
 8012ba0:	6819      	ldr	r1, [r3, #0]
 8012ba2:	4b1b      	ldr	r3, [pc, #108]	; (8012c10 <tcp_input+0x808>)
 8012ba4:	881b      	ldrh	r3, [r3, #0]
 8012ba6:	461a      	mov	r2, r3
 8012ba8:	4b1a      	ldr	r3, [pc, #104]	; (8012c14 <tcp_input+0x80c>)
 8012baa:	681b      	ldr	r3, [r3, #0]
 8012bac:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012bae:	4b16      	ldr	r3, [pc, #88]	; (8012c08 <tcp_input+0x800>)
 8012bb0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012bb2:	885b      	ldrh	r3, [r3, #2]
 8012bb4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012bb6:	4a14      	ldr	r2, [pc, #80]	; (8012c08 <tcp_input+0x800>)
 8012bb8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012bba:	8812      	ldrh	r2, [r2, #0]
 8012bbc:	b292      	uxth	r2, r2
 8012bbe:	9202      	str	r2, [sp, #8]
 8012bc0:	9301      	str	r3, [sp, #4]
 8012bc2:	4b15      	ldr	r3, [pc, #84]	; (8012c18 <tcp_input+0x810>)
 8012bc4:	9300      	str	r3, [sp, #0]
 8012bc6:	4b15      	ldr	r3, [pc, #84]	; (8012c1c <tcp_input+0x814>)
 8012bc8:	4602      	mov	r2, r0
 8012bca:	2000      	movs	r0, #0
 8012bcc:	f003 f81c 	bl	8015c08 <tcp_rst>
    pbuf_free(p);
 8012bd0:	6878      	ldr	r0, [r7, #4]
 8012bd2:	f7fd fdf1 	bl	80107b8 <pbuf_free>
  return;
 8012bd6:	e00c      	b.n	8012bf2 <tcp_input+0x7ea>
    goto dropped;
 8012bd8:	bf00      	nop
 8012bda:	e006      	b.n	8012bea <tcp_input+0x7e2>
    goto dropped;
 8012bdc:	bf00      	nop
 8012bde:	e004      	b.n	8012bea <tcp_input+0x7e2>
    goto dropped;
 8012be0:	bf00      	nop
 8012be2:	e002      	b.n	8012bea <tcp_input+0x7e2>
      goto dropped;
 8012be4:	bf00      	nop
 8012be6:	e000      	b.n	8012bea <tcp_input+0x7e2>
      goto dropped;
 8012be8:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8012bea:	6878      	ldr	r0, [r7, #4]
 8012bec:	f7fd fde4 	bl	80107b8 <pbuf_free>
 8012bf0:	e000      	b.n	8012bf4 <tcp_input+0x7ec>
  return;
 8012bf2:	bf00      	nop
}
 8012bf4:	3724      	adds	r7, #36	; 0x24
 8012bf6:	46bd      	mov	sp, r7
 8012bf8:	bd90      	pop	{r4, r7, pc}
 8012bfa:	bf00      	nop
 8012bfc:	20008114 	.word	0x20008114
 8012c00:	20008110 	.word	0x20008110
 8012c04:	200080e0 	.word	0x200080e0
 8012c08:	200080f0 	.word	0x200080f0
 8012c0c:	20008104 	.word	0x20008104
 8012c10:	2000810a 	.word	0x2000810a
 8012c14:	20008100 	.word	0x20008100
 8012c18:	200051bc 	.word	0x200051bc
 8012c1c:	200051c0 	.word	0x200051c0

08012c20 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8012c20:	b580      	push	{r7, lr}
 8012c22:	b082      	sub	sp, #8
 8012c24:	af00      	add	r7, sp, #0
 8012c26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	d106      	bne.n	8012c3c <tcp_input_delayed_close+0x1c>
 8012c2e:	4b17      	ldr	r3, [pc, #92]	; (8012c8c <tcp_input_delayed_close+0x6c>)
 8012c30:	f240 225a 	movw	r2, #602	; 0x25a
 8012c34:	4916      	ldr	r1, [pc, #88]	; (8012c90 <tcp_input_delayed_close+0x70>)
 8012c36:	4817      	ldr	r0, [pc, #92]	; (8012c94 <tcp_input_delayed_close+0x74>)
 8012c38:	f006 fc80 	bl	801953c <iprintf>

  if (recv_flags & TF_CLOSED) {
 8012c3c:	4b16      	ldr	r3, [pc, #88]	; (8012c98 <tcp_input_delayed_close+0x78>)
 8012c3e:	781b      	ldrb	r3, [r3, #0]
 8012c40:	f003 0310 	and.w	r3, r3, #16
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d01c      	beq.n	8012c82 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	8b5b      	ldrh	r3, [r3, #26]
 8012c4c:	f003 0310 	and.w	r3, r3, #16
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d10d      	bne.n	8012c70 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d008      	beq.n	8012c70 <tcp_input_delayed_close+0x50>
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012c64:	687a      	ldr	r2, [r7, #4]
 8012c66:	6912      	ldr	r2, [r2, #16]
 8012c68:	f06f 010e 	mvn.w	r1, #14
 8012c6c:	4610      	mov	r0, r2
 8012c6e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8012c70:	6879      	ldr	r1, [r7, #4]
 8012c72:	480a      	ldr	r0, [pc, #40]	; (8012c9c <tcp_input_delayed_close+0x7c>)
 8012c74:	f7ff fa50 	bl	8012118 <tcp_pcb_remove>
    tcp_free(pcb);
 8012c78:	6878      	ldr	r0, [r7, #4]
 8012c7a:	f7fe f83d 	bl	8010cf8 <tcp_free>
    return 1;
 8012c7e:	2301      	movs	r3, #1
 8012c80:	e000      	b.n	8012c84 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8012c82:	2300      	movs	r3, #0
}
 8012c84:	4618      	mov	r0, r3
 8012c86:	3708      	adds	r7, #8
 8012c88:	46bd      	mov	sp, r7
 8012c8a:	bd80      	pop	{r7, pc}
 8012c8c:	0801cf0c 	.word	0x0801cf0c
 8012c90:	0801d0dc 	.word	0x0801d0dc
 8012c94:	0801cf58 	.word	0x0801cf58
 8012c98:	2000810d 	.word	0x2000810d
 8012c9c:	200080d4 	.word	0x200080d4

08012ca0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8012ca0:	b590      	push	{r4, r7, lr}
 8012ca2:	b08b      	sub	sp, #44	; 0x2c
 8012ca4:	af04      	add	r7, sp, #16
 8012ca6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8012ca8:	4b6f      	ldr	r3, [pc, #444]	; (8012e68 <tcp_listen_input+0x1c8>)
 8012caa:	781b      	ldrb	r3, [r3, #0]
 8012cac:	f003 0304 	and.w	r3, r3, #4
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	f040 80d2 	bne.w	8012e5a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d106      	bne.n	8012cca <tcp_listen_input+0x2a>
 8012cbc:	4b6b      	ldr	r3, [pc, #428]	; (8012e6c <tcp_listen_input+0x1cc>)
 8012cbe:	f240 2281 	movw	r2, #641	; 0x281
 8012cc2:	496b      	ldr	r1, [pc, #428]	; (8012e70 <tcp_listen_input+0x1d0>)
 8012cc4:	486b      	ldr	r0, [pc, #428]	; (8012e74 <tcp_listen_input+0x1d4>)
 8012cc6:	f006 fc39 	bl	801953c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8012cca:	4b67      	ldr	r3, [pc, #412]	; (8012e68 <tcp_listen_input+0x1c8>)
 8012ccc:	781b      	ldrb	r3, [r3, #0]
 8012cce:	f003 0310 	and.w	r3, r3, #16
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d019      	beq.n	8012d0a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012cd6:	4b68      	ldr	r3, [pc, #416]	; (8012e78 <tcp_listen_input+0x1d8>)
 8012cd8:	6819      	ldr	r1, [r3, #0]
 8012cda:	4b68      	ldr	r3, [pc, #416]	; (8012e7c <tcp_listen_input+0x1dc>)
 8012cdc:	881b      	ldrh	r3, [r3, #0]
 8012cde:	461a      	mov	r2, r3
 8012ce0:	4b67      	ldr	r3, [pc, #412]	; (8012e80 <tcp_listen_input+0x1e0>)
 8012ce2:	681b      	ldr	r3, [r3, #0]
 8012ce4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012ce6:	4b67      	ldr	r3, [pc, #412]	; (8012e84 <tcp_listen_input+0x1e4>)
 8012ce8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012cea:	885b      	ldrh	r3, [r3, #2]
 8012cec:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012cee:	4a65      	ldr	r2, [pc, #404]	; (8012e84 <tcp_listen_input+0x1e4>)
 8012cf0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012cf2:	8812      	ldrh	r2, [r2, #0]
 8012cf4:	b292      	uxth	r2, r2
 8012cf6:	9202      	str	r2, [sp, #8]
 8012cf8:	9301      	str	r3, [sp, #4]
 8012cfa:	4b63      	ldr	r3, [pc, #396]	; (8012e88 <tcp_listen_input+0x1e8>)
 8012cfc:	9300      	str	r3, [sp, #0]
 8012cfe:	4b63      	ldr	r3, [pc, #396]	; (8012e8c <tcp_listen_input+0x1ec>)
 8012d00:	4602      	mov	r2, r0
 8012d02:	6878      	ldr	r0, [r7, #4]
 8012d04:	f002 ff80 	bl	8015c08 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8012d08:	e0a9      	b.n	8012e5e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8012d0a:	4b57      	ldr	r3, [pc, #348]	; (8012e68 <tcp_listen_input+0x1c8>)
 8012d0c:	781b      	ldrb	r3, [r3, #0]
 8012d0e:	f003 0302 	and.w	r3, r3, #2
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	f000 80a3 	beq.w	8012e5e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	7d5b      	ldrb	r3, [r3, #21]
 8012d1c:	4618      	mov	r0, r3
 8012d1e:	f7ff f927 	bl	8011f70 <tcp_alloc>
 8012d22:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8012d24:	697b      	ldr	r3, [r7, #20]
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d111      	bne.n	8012d4e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	699b      	ldr	r3, [r3, #24]
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d00a      	beq.n	8012d48 <tcp_listen_input+0xa8>
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	699b      	ldr	r3, [r3, #24]
 8012d36:	687a      	ldr	r2, [r7, #4]
 8012d38:	6910      	ldr	r0, [r2, #16]
 8012d3a:	f04f 32ff 	mov.w	r2, #4294967295
 8012d3e:	2100      	movs	r1, #0
 8012d40:	4798      	blx	r3
 8012d42:	4603      	mov	r3, r0
 8012d44:	73bb      	strb	r3, [r7, #14]
      return;
 8012d46:	e08b      	b.n	8012e60 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8012d48:	23f0      	movs	r3, #240	; 0xf0
 8012d4a:	73bb      	strb	r3, [r7, #14]
      return;
 8012d4c:	e088      	b.n	8012e60 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8012d4e:	4b50      	ldr	r3, [pc, #320]	; (8012e90 <tcp_listen_input+0x1f0>)
 8012d50:	695a      	ldr	r2, [r3, #20]
 8012d52:	697b      	ldr	r3, [r7, #20]
 8012d54:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8012d56:	4b4e      	ldr	r3, [pc, #312]	; (8012e90 <tcp_listen_input+0x1f0>)
 8012d58:	691a      	ldr	r2, [r3, #16]
 8012d5a:	697b      	ldr	r3, [r7, #20]
 8012d5c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	8ada      	ldrh	r2, [r3, #22]
 8012d62:	697b      	ldr	r3, [r7, #20]
 8012d64:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8012d66:	4b47      	ldr	r3, [pc, #284]	; (8012e84 <tcp_listen_input+0x1e4>)
 8012d68:	681b      	ldr	r3, [r3, #0]
 8012d6a:	881b      	ldrh	r3, [r3, #0]
 8012d6c:	b29a      	uxth	r2, r3
 8012d6e:	697b      	ldr	r3, [r7, #20]
 8012d70:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8012d72:	697b      	ldr	r3, [r7, #20]
 8012d74:	2203      	movs	r2, #3
 8012d76:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8012d78:	4b41      	ldr	r3, [pc, #260]	; (8012e80 <tcp_listen_input+0x1e0>)
 8012d7a:	681b      	ldr	r3, [r3, #0]
 8012d7c:	1c5a      	adds	r2, r3, #1
 8012d7e:	697b      	ldr	r3, [r7, #20]
 8012d80:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8012d82:	697b      	ldr	r3, [r7, #20]
 8012d84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012d86:	697b      	ldr	r3, [r7, #20]
 8012d88:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8012d8a:	6978      	ldr	r0, [r7, #20]
 8012d8c:	f7ff fa58 	bl	8012240 <tcp_next_iss>
 8012d90:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8012d92:	697b      	ldr	r3, [r7, #20]
 8012d94:	693a      	ldr	r2, [r7, #16]
 8012d96:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8012d98:	697b      	ldr	r3, [r7, #20]
 8012d9a:	693a      	ldr	r2, [r7, #16]
 8012d9c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8012d9e:	697b      	ldr	r3, [r7, #20]
 8012da0:	693a      	ldr	r2, [r7, #16]
 8012da2:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8012da4:	697b      	ldr	r3, [r7, #20]
 8012da6:	693a      	ldr	r2, [r7, #16]
 8012da8:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8012daa:	4b35      	ldr	r3, [pc, #212]	; (8012e80 <tcp_listen_input+0x1e0>)
 8012dac:	681b      	ldr	r3, [r3, #0]
 8012dae:	1e5a      	subs	r2, r3, #1
 8012db0:	697b      	ldr	r3, [r7, #20]
 8012db2:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	691a      	ldr	r2, [r3, #16]
 8012db8:	697b      	ldr	r3, [r7, #20]
 8012dba:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8012dbc:	697b      	ldr	r3, [r7, #20]
 8012dbe:	687a      	ldr	r2, [r7, #4]
 8012dc0:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	7a5b      	ldrb	r3, [r3, #9]
 8012dc6:	f003 030c 	and.w	r3, r3, #12
 8012dca:	b2da      	uxtb	r2, r3
 8012dcc:	697b      	ldr	r3, [r7, #20]
 8012dce:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	7a1a      	ldrb	r2, [r3, #8]
 8012dd4:	697b      	ldr	r3, [r7, #20]
 8012dd6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8012dd8:	4b2e      	ldr	r3, [pc, #184]	; (8012e94 <tcp_listen_input+0x1f4>)
 8012dda:	681a      	ldr	r2, [r3, #0]
 8012ddc:	697b      	ldr	r3, [r7, #20]
 8012dde:	60da      	str	r2, [r3, #12]
 8012de0:	4a2c      	ldr	r2, [pc, #176]	; (8012e94 <tcp_listen_input+0x1f4>)
 8012de2:	697b      	ldr	r3, [r7, #20]
 8012de4:	6013      	str	r3, [r2, #0]
 8012de6:	f003 f8d1 	bl	8015f8c <tcp_timer_needed>
 8012dea:	4b2b      	ldr	r3, [pc, #172]	; (8012e98 <tcp_listen_input+0x1f8>)
 8012dec:	2201      	movs	r2, #1
 8012dee:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8012df0:	6978      	ldr	r0, [r7, #20]
 8012df2:	f001 fd8f 	bl	8014914 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8012df6:	4b23      	ldr	r3, [pc, #140]	; (8012e84 <tcp_listen_input+0x1e4>)
 8012df8:	681b      	ldr	r3, [r3, #0]
 8012dfa:	89db      	ldrh	r3, [r3, #14]
 8012dfc:	b29a      	uxth	r2, r3
 8012dfe:	697b      	ldr	r3, [r7, #20]
 8012e00:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8012e04:	697b      	ldr	r3, [r7, #20]
 8012e06:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012e0a:	697b      	ldr	r3, [r7, #20]
 8012e0c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8012e10:	697b      	ldr	r3, [r7, #20]
 8012e12:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8012e14:	697b      	ldr	r3, [r7, #20]
 8012e16:	3304      	adds	r3, #4
 8012e18:	4618      	mov	r0, r3
 8012e1a:	f004 fc79 	bl	8017710 <ip4_route>
 8012e1e:	4601      	mov	r1, r0
 8012e20:	697b      	ldr	r3, [r7, #20]
 8012e22:	3304      	adds	r3, #4
 8012e24:	461a      	mov	r2, r3
 8012e26:	4620      	mov	r0, r4
 8012e28:	f7ff fa30 	bl	801228c <tcp_eff_send_mss_netif>
 8012e2c:	4603      	mov	r3, r0
 8012e2e:	461a      	mov	r2, r3
 8012e30:	697b      	ldr	r3, [r7, #20]
 8012e32:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8012e34:	2112      	movs	r1, #18
 8012e36:	6978      	ldr	r0, [r7, #20]
 8012e38:	f002 f844 	bl	8014ec4 <tcp_enqueue_flags>
 8012e3c:	4603      	mov	r3, r0
 8012e3e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8012e40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d004      	beq.n	8012e52 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8012e48:	2100      	movs	r1, #0
 8012e4a:	6978      	ldr	r0, [r7, #20]
 8012e4c:	f7fe f97e 	bl	801114c <tcp_abandon>
      return;
 8012e50:	e006      	b.n	8012e60 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8012e52:	6978      	ldr	r0, [r7, #20]
 8012e54:	f002 f924 	bl	80150a0 <tcp_output>
  return;
 8012e58:	e001      	b.n	8012e5e <tcp_listen_input+0x1be>
    return;
 8012e5a:	bf00      	nop
 8012e5c:	e000      	b.n	8012e60 <tcp_listen_input+0x1c0>
  return;
 8012e5e:	bf00      	nop
}
 8012e60:	371c      	adds	r7, #28
 8012e62:	46bd      	mov	sp, r7
 8012e64:	bd90      	pop	{r4, r7, pc}
 8012e66:	bf00      	nop
 8012e68:	2000810c 	.word	0x2000810c
 8012e6c:	0801cf0c 	.word	0x0801cf0c
 8012e70:	0801d104 	.word	0x0801d104
 8012e74:	0801cf58 	.word	0x0801cf58
 8012e78:	20008104 	.word	0x20008104
 8012e7c:	2000810a 	.word	0x2000810a
 8012e80:	20008100 	.word	0x20008100
 8012e84:	200080f0 	.word	0x200080f0
 8012e88:	200051bc 	.word	0x200051bc
 8012e8c:	200051c0 	.word	0x200051c0
 8012e90:	200051ac 	.word	0x200051ac
 8012e94:	200080d4 	.word	0x200080d4
 8012e98:	200080dc 	.word	0x200080dc

08012e9c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8012e9c:	b580      	push	{r7, lr}
 8012e9e:	b086      	sub	sp, #24
 8012ea0:	af04      	add	r7, sp, #16
 8012ea2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8012ea4:	4b2f      	ldr	r3, [pc, #188]	; (8012f64 <tcp_timewait_input+0xc8>)
 8012ea6:	781b      	ldrb	r3, [r3, #0]
 8012ea8:	f003 0304 	and.w	r3, r3, #4
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d153      	bne.n	8012f58 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d106      	bne.n	8012ec4 <tcp_timewait_input+0x28>
 8012eb6:	4b2c      	ldr	r3, [pc, #176]	; (8012f68 <tcp_timewait_input+0xcc>)
 8012eb8:	f240 22ee 	movw	r2, #750	; 0x2ee
 8012ebc:	492b      	ldr	r1, [pc, #172]	; (8012f6c <tcp_timewait_input+0xd0>)
 8012ebe:	482c      	ldr	r0, [pc, #176]	; (8012f70 <tcp_timewait_input+0xd4>)
 8012ec0:	f006 fb3c 	bl	801953c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8012ec4:	4b27      	ldr	r3, [pc, #156]	; (8012f64 <tcp_timewait_input+0xc8>)
 8012ec6:	781b      	ldrb	r3, [r3, #0]
 8012ec8:	f003 0302 	and.w	r3, r3, #2
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d02a      	beq.n	8012f26 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8012ed0:	4b28      	ldr	r3, [pc, #160]	; (8012f74 <tcp_timewait_input+0xd8>)
 8012ed2:	681a      	ldr	r2, [r3, #0]
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ed8:	1ad3      	subs	r3, r2, r3
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	db2d      	blt.n	8012f3a <tcp_timewait_input+0x9e>
 8012ede:	4b25      	ldr	r3, [pc, #148]	; (8012f74 <tcp_timewait_input+0xd8>)
 8012ee0:	681a      	ldr	r2, [r3, #0]
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ee6:	6879      	ldr	r1, [r7, #4]
 8012ee8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012eea:	440b      	add	r3, r1
 8012eec:	1ad3      	subs	r3, r2, r3
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	dc23      	bgt.n	8012f3a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012ef2:	4b21      	ldr	r3, [pc, #132]	; (8012f78 <tcp_timewait_input+0xdc>)
 8012ef4:	6819      	ldr	r1, [r3, #0]
 8012ef6:	4b21      	ldr	r3, [pc, #132]	; (8012f7c <tcp_timewait_input+0xe0>)
 8012ef8:	881b      	ldrh	r3, [r3, #0]
 8012efa:	461a      	mov	r2, r3
 8012efc:	4b1d      	ldr	r3, [pc, #116]	; (8012f74 <tcp_timewait_input+0xd8>)
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012f02:	4b1f      	ldr	r3, [pc, #124]	; (8012f80 <tcp_timewait_input+0xe4>)
 8012f04:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012f06:	885b      	ldrh	r3, [r3, #2]
 8012f08:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012f0a:	4a1d      	ldr	r2, [pc, #116]	; (8012f80 <tcp_timewait_input+0xe4>)
 8012f0c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012f0e:	8812      	ldrh	r2, [r2, #0]
 8012f10:	b292      	uxth	r2, r2
 8012f12:	9202      	str	r2, [sp, #8]
 8012f14:	9301      	str	r3, [sp, #4]
 8012f16:	4b1b      	ldr	r3, [pc, #108]	; (8012f84 <tcp_timewait_input+0xe8>)
 8012f18:	9300      	str	r3, [sp, #0]
 8012f1a:	4b1b      	ldr	r3, [pc, #108]	; (8012f88 <tcp_timewait_input+0xec>)
 8012f1c:	4602      	mov	r2, r0
 8012f1e:	6878      	ldr	r0, [r7, #4]
 8012f20:	f002 fe72 	bl	8015c08 <tcp_rst>
      return;
 8012f24:	e01b      	b.n	8012f5e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8012f26:	4b0f      	ldr	r3, [pc, #60]	; (8012f64 <tcp_timewait_input+0xc8>)
 8012f28:	781b      	ldrb	r3, [r3, #0]
 8012f2a:	f003 0301 	and.w	r3, r3, #1
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d003      	beq.n	8012f3a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8012f32:	4b16      	ldr	r3, [pc, #88]	; (8012f8c <tcp_timewait_input+0xf0>)
 8012f34:	681a      	ldr	r2, [r3, #0]
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8012f3a:	4b10      	ldr	r3, [pc, #64]	; (8012f7c <tcp_timewait_input+0xe0>)
 8012f3c:	881b      	ldrh	r3, [r3, #0]
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d00c      	beq.n	8012f5c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	8b5b      	ldrh	r3, [r3, #26]
 8012f46:	f043 0302 	orr.w	r3, r3, #2
 8012f4a:	b29a      	uxth	r2, r3
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8012f50:	6878      	ldr	r0, [r7, #4]
 8012f52:	f002 f8a5 	bl	80150a0 <tcp_output>
  }
  return;
 8012f56:	e001      	b.n	8012f5c <tcp_timewait_input+0xc0>
    return;
 8012f58:	bf00      	nop
 8012f5a:	e000      	b.n	8012f5e <tcp_timewait_input+0xc2>
  return;
 8012f5c:	bf00      	nop
}
 8012f5e:	3708      	adds	r7, #8
 8012f60:	46bd      	mov	sp, r7
 8012f62:	bd80      	pop	{r7, pc}
 8012f64:	2000810c 	.word	0x2000810c
 8012f68:	0801cf0c 	.word	0x0801cf0c
 8012f6c:	0801d124 	.word	0x0801d124
 8012f70:	0801cf58 	.word	0x0801cf58
 8012f74:	20008100 	.word	0x20008100
 8012f78:	20008104 	.word	0x20008104
 8012f7c:	2000810a 	.word	0x2000810a
 8012f80:	200080f0 	.word	0x200080f0
 8012f84:	200051bc 	.word	0x200051bc
 8012f88:	200051c0 	.word	0x200051c0
 8012f8c:	200080c8 	.word	0x200080c8

08012f90 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8012f90:	b590      	push	{r4, r7, lr}
 8012f92:	b08d      	sub	sp, #52	; 0x34
 8012f94:	af04      	add	r7, sp, #16
 8012f96:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8012f98:	2300      	movs	r3, #0
 8012f9a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8012f9c:	2300      	movs	r3, #0
 8012f9e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d106      	bne.n	8012fb4 <tcp_process+0x24>
 8012fa6:	4b9d      	ldr	r3, [pc, #628]	; (801321c <tcp_process+0x28c>)
 8012fa8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8012fac:	499c      	ldr	r1, [pc, #624]	; (8013220 <tcp_process+0x290>)
 8012fae:	489d      	ldr	r0, [pc, #628]	; (8013224 <tcp_process+0x294>)
 8012fb0:	f006 fac4 	bl	801953c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8012fb4:	4b9c      	ldr	r3, [pc, #624]	; (8013228 <tcp_process+0x298>)
 8012fb6:	781b      	ldrb	r3, [r3, #0]
 8012fb8:	f003 0304 	and.w	r3, r3, #4
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d04e      	beq.n	801305e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	7d1b      	ldrb	r3, [r3, #20]
 8012fc4:	2b02      	cmp	r3, #2
 8012fc6:	d108      	bne.n	8012fda <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012fcc:	4b97      	ldr	r3, [pc, #604]	; (801322c <tcp_process+0x29c>)
 8012fce:	681b      	ldr	r3, [r3, #0]
 8012fd0:	429a      	cmp	r2, r3
 8012fd2:	d123      	bne.n	801301c <tcp_process+0x8c>
        acceptable = 1;
 8012fd4:	2301      	movs	r3, #1
 8012fd6:	76fb      	strb	r3, [r7, #27]
 8012fd8:	e020      	b.n	801301c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012fde:	4b94      	ldr	r3, [pc, #592]	; (8013230 <tcp_process+0x2a0>)
 8012fe0:	681b      	ldr	r3, [r3, #0]
 8012fe2:	429a      	cmp	r2, r3
 8012fe4:	d102      	bne.n	8012fec <tcp_process+0x5c>
        acceptable = 1;
 8012fe6:	2301      	movs	r3, #1
 8012fe8:	76fb      	strb	r3, [r7, #27]
 8012fea:	e017      	b.n	801301c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012fec:	4b90      	ldr	r3, [pc, #576]	; (8013230 <tcp_process+0x2a0>)
 8012fee:	681a      	ldr	r2, [r3, #0]
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ff4:	1ad3      	subs	r3, r2, r3
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	db10      	blt.n	801301c <tcp_process+0x8c>
 8012ffa:	4b8d      	ldr	r3, [pc, #564]	; (8013230 <tcp_process+0x2a0>)
 8012ffc:	681a      	ldr	r2, [r3, #0]
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013002:	6879      	ldr	r1, [r7, #4]
 8013004:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013006:	440b      	add	r3, r1
 8013008:	1ad3      	subs	r3, r2, r3
 801300a:	2b00      	cmp	r3, #0
 801300c:	dc06      	bgt.n	801301c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	8b5b      	ldrh	r3, [r3, #26]
 8013012:	f043 0302 	orr.w	r3, r3, #2
 8013016:	b29a      	uxth	r2, r3
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801301c:	7efb      	ldrb	r3, [r7, #27]
 801301e:	2b00      	cmp	r3, #0
 8013020:	d01b      	beq.n	801305a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	7d1b      	ldrb	r3, [r3, #20]
 8013026:	2b00      	cmp	r3, #0
 8013028:	d106      	bne.n	8013038 <tcp_process+0xa8>
 801302a:	4b7c      	ldr	r3, [pc, #496]	; (801321c <tcp_process+0x28c>)
 801302c:	f44f 724e 	mov.w	r2, #824	; 0x338
 8013030:	4980      	ldr	r1, [pc, #512]	; (8013234 <tcp_process+0x2a4>)
 8013032:	487c      	ldr	r0, [pc, #496]	; (8013224 <tcp_process+0x294>)
 8013034:	f006 fa82 	bl	801953c <iprintf>
      recv_flags |= TF_RESET;
 8013038:	4b7f      	ldr	r3, [pc, #508]	; (8013238 <tcp_process+0x2a8>)
 801303a:	781b      	ldrb	r3, [r3, #0]
 801303c:	f043 0308 	orr.w	r3, r3, #8
 8013040:	b2da      	uxtb	r2, r3
 8013042:	4b7d      	ldr	r3, [pc, #500]	; (8013238 <tcp_process+0x2a8>)
 8013044:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	8b5b      	ldrh	r3, [r3, #26]
 801304a:	f023 0301 	bic.w	r3, r3, #1
 801304e:	b29a      	uxth	r2, r3
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8013054:	f06f 030d 	mvn.w	r3, #13
 8013058:	e37a      	b.n	8013750 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801305a:	2300      	movs	r3, #0
 801305c:	e378      	b.n	8013750 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801305e:	4b72      	ldr	r3, [pc, #456]	; (8013228 <tcp_process+0x298>)
 8013060:	781b      	ldrb	r3, [r3, #0]
 8013062:	f003 0302 	and.w	r3, r3, #2
 8013066:	2b00      	cmp	r3, #0
 8013068:	d010      	beq.n	801308c <tcp_process+0xfc>
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	7d1b      	ldrb	r3, [r3, #20]
 801306e:	2b02      	cmp	r3, #2
 8013070:	d00c      	beq.n	801308c <tcp_process+0xfc>
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	7d1b      	ldrb	r3, [r3, #20]
 8013076:	2b03      	cmp	r3, #3
 8013078:	d008      	beq.n	801308c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	8b5b      	ldrh	r3, [r3, #26]
 801307e:	f043 0302 	orr.w	r3, r3, #2
 8013082:	b29a      	uxth	r2, r3
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8013088:	2300      	movs	r3, #0
 801308a:	e361      	b.n	8013750 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	8b5b      	ldrh	r3, [r3, #26]
 8013090:	f003 0310 	and.w	r3, r3, #16
 8013094:	2b00      	cmp	r3, #0
 8013096:	d103      	bne.n	80130a0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8013098:	4b68      	ldr	r3, [pc, #416]	; (801323c <tcp_process+0x2ac>)
 801309a:	681a      	ldr	r2, [r3, #0]
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	2200      	movs	r2, #0
 80130a4:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	2200      	movs	r2, #0
 80130ac:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80130b0:	6878      	ldr	r0, [r7, #4]
 80130b2:	f001 fc2f 	bl	8014914 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	7d1b      	ldrb	r3, [r3, #20]
 80130ba:	3b02      	subs	r3, #2
 80130bc:	2b07      	cmp	r3, #7
 80130be:	f200 8337 	bhi.w	8013730 <tcp_process+0x7a0>
 80130c2:	a201      	add	r2, pc, #4	; (adr r2, 80130c8 <tcp_process+0x138>)
 80130c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80130c8:	080130e9 	.word	0x080130e9
 80130cc:	08013319 	.word	0x08013319
 80130d0:	08013491 	.word	0x08013491
 80130d4:	080134bb 	.word	0x080134bb
 80130d8:	080135df 	.word	0x080135df
 80130dc:	08013491 	.word	0x08013491
 80130e0:	0801366b 	.word	0x0801366b
 80130e4:	080136fb 	.word	0x080136fb
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80130e8:	4b4f      	ldr	r3, [pc, #316]	; (8013228 <tcp_process+0x298>)
 80130ea:	781b      	ldrb	r3, [r3, #0]
 80130ec:	f003 0310 	and.w	r3, r3, #16
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	f000 80e4 	beq.w	80132be <tcp_process+0x32e>
 80130f6:	4b4c      	ldr	r3, [pc, #304]	; (8013228 <tcp_process+0x298>)
 80130f8:	781b      	ldrb	r3, [r3, #0]
 80130fa:	f003 0302 	and.w	r3, r3, #2
 80130fe:	2b00      	cmp	r3, #0
 8013100:	f000 80dd 	beq.w	80132be <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013108:	1c5a      	adds	r2, r3, #1
 801310a:	4b48      	ldr	r3, [pc, #288]	; (801322c <tcp_process+0x29c>)
 801310c:	681b      	ldr	r3, [r3, #0]
 801310e:	429a      	cmp	r2, r3
 8013110:	f040 80d5 	bne.w	80132be <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8013114:	4b46      	ldr	r3, [pc, #280]	; (8013230 <tcp_process+0x2a0>)
 8013116:	681b      	ldr	r3, [r3, #0]
 8013118:	1c5a      	adds	r2, r3, #1
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8013126:	4b41      	ldr	r3, [pc, #260]	; (801322c <tcp_process+0x29c>)
 8013128:	681a      	ldr	r2, [r3, #0]
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801312e:	4b44      	ldr	r3, [pc, #272]	; (8013240 <tcp_process+0x2b0>)
 8013130:	681b      	ldr	r3, [r3, #0]
 8013132:	89db      	ldrh	r3, [r3, #14]
 8013134:	b29a      	uxth	r2, r3
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8013148:	4b39      	ldr	r3, [pc, #228]	; (8013230 <tcp_process+0x2a0>)
 801314a:	681b      	ldr	r3, [r3, #0]
 801314c:	1e5a      	subs	r2, r3, #1
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	2204      	movs	r2, #4
 8013156:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	3304      	adds	r3, #4
 8013160:	4618      	mov	r0, r3
 8013162:	f004 fad5 	bl	8017710 <ip4_route>
 8013166:	4601      	mov	r1, r0
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	3304      	adds	r3, #4
 801316c:	461a      	mov	r2, r3
 801316e:	4620      	mov	r0, r4
 8013170:	f7ff f88c 	bl	801228c <tcp_eff_send_mss_netif>
 8013174:	4603      	mov	r3, r0
 8013176:	461a      	mov	r2, r3
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013180:	009a      	lsls	r2, r3, #2
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013186:	005b      	lsls	r3, r3, #1
 8013188:	f241 111c 	movw	r1, #4380	; 0x111c
 801318c:	428b      	cmp	r3, r1
 801318e:	bf38      	it	cc
 8013190:	460b      	movcc	r3, r1
 8013192:	429a      	cmp	r2, r3
 8013194:	d204      	bcs.n	80131a0 <tcp_process+0x210>
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801319a:	009b      	lsls	r3, r3, #2
 801319c:	b29b      	uxth	r3, r3
 801319e:	e00d      	b.n	80131bc <tcp_process+0x22c>
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80131a4:	005b      	lsls	r3, r3, #1
 80131a6:	f241 121c 	movw	r2, #4380	; 0x111c
 80131aa:	4293      	cmp	r3, r2
 80131ac:	d904      	bls.n	80131b8 <tcp_process+0x228>
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80131b2:	005b      	lsls	r3, r3, #1
 80131b4:	b29b      	uxth	r3, r3
 80131b6:	e001      	b.n	80131bc <tcp_process+0x22c>
 80131b8:	f241 131c 	movw	r3, #4380	; 0x111c
 80131bc:	687a      	ldr	r2, [r7, #4]
 80131be:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d106      	bne.n	80131da <tcp_process+0x24a>
 80131cc:	4b13      	ldr	r3, [pc, #76]	; (801321c <tcp_process+0x28c>)
 80131ce:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80131d2:	491c      	ldr	r1, [pc, #112]	; (8013244 <tcp_process+0x2b4>)
 80131d4:	4813      	ldr	r0, [pc, #76]	; (8013224 <tcp_process+0x294>)
 80131d6:	f006 f9b1 	bl	801953c <iprintf>
        --pcb->snd_queuelen;
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80131e0:	3b01      	subs	r3, #1
 80131e2:	b29a      	uxth	r2, r3
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80131ee:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80131f0:	69fb      	ldr	r3, [r7, #28]
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d12a      	bne.n	801324c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80131fa:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80131fc:	69fb      	ldr	r3, [r7, #28]
 80131fe:	2b00      	cmp	r3, #0
 8013200:	d106      	bne.n	8013210 <tcp_process+0x280>
 8013202:	4b06      	ldr	r3, [pc, #24]	; (801321c <tcp_process+0x28c>)
 8013204:	f44f 725d 	mov.w	r2, #884	; 0x374
 8013208:	490f      	ldr	r1, [pc, #60]	; (8013248 <tcp_process+0x2b8>)
 801320a:	4806      	ldr	r0, [pc, #24]	; (8013224 <tcp_process+0x294>)
 801320c:	f006 f996 	bl	801953c <iprintf>
          pcb->unsent = rseg->next;
 8013210:	69fb      	ldr	r3, [r7, #28]
 8013212:	681a      	ldr	r2, [r3, #0]
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	66da      	str	r2, [r3, #108]	; 0x6c
 8013218:	e01c      	b.n	8013254 <tcp_process+0x2c4>
 801321a:	bf00      	nop
 801321c:	0801cf0c 	.word	0x0801cf0c
 8013220:	0801d144 	.word	0x0801d144
 8013224:	0801cf58 	.word	0x0801cf58
 8013228:	2000810c 	.word	0x2000810c
 801322c:	20008104 	.word	0x20008104
 8013230:	20008100 	.word	0x20008100
 8013234:	0801d160 	.word	0x0801d160
 8013238:	2000810d 	.word	0x2000810d
 801323c:	200080c8 	.word	0x200080c8
 8013240:	200080f0 	.word	0x200080f0
 8013244:	0801d180 	.word	0x0801d180
 8013248:	0801d198 	.word	0x0801d198
        } else {
          pcb->unacked = rseg->next;
 801324c:	69fb      	ldr	r3, [r7, #28]
 801324e:	681a      	ldr	r2, [r3, #0]
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8013254:	69f8      	ldr	r0, [r7, #28]
 8013256:	f7fe fd22 	bl	8011c9e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801325e:	2b00      	cmp	r3, #0
 8013260:	d104      	bne.n	801326c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013268:	861a      	strh	r2, [r3, #48]	; 0x30
 801326a:	e006      	b.n	801327a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	2200      	movs	r2, #0
 8013270:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	2200      	movs	r2, #0
 8013276:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013280:	2b00      	cmp	r3, #0
 8013282:	d00a      	beq.n	801329a <tcp_process+0x30a>
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801328a:	687a      	ldr	r2, [r7, #4]
 801328c:	6910      	ldr	r0, [r2, #16]
 801328e:	2200      	movs	r2, #0
 8013290:	6879      	ldr	r1, [r7, #4]
 8013292:	4798      	blx	r3
 8013294:	4603      	mov	r3, r0
 8013296:	76bb      	strb	r3, [r7, #26]
 8013298:	e001      	b.n	801329e <tcp_process+0x30e>
 801329a:	2300      	movs	r3, #0
 801329c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801329e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80132a2:	f113 0f0d 	cmn.w	r3, #13
 80132a6:	d102      	bne.n	80132ae <tcp_process+0x31e>
          return ERR_ABRT;
 80132a8:	f06f 030c 	mvn.w	r3, #12
 80132ac:	e250      	b.n	8013750 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	8b5b      	ldrh	r3, [r3, #26]
 80132b2:	f043 0302 	orr.w	r3, r3, #2
 80132b6:	b29a      	uxth	r2, r3
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80132bc:	e23a      	b.n	8013734 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80132be:	4b98      	ldr	r3, [pc, #608]	; (8013520 <tcp_process+0x590>)
 80132c0:	781b      	ldrb	r3, [r3, #0]
 80132c2:	f003 0310 	and.w	r3, r3, #16
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	f000 8234 	beq.w	8013734 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80132cc:	4b95      	ldr	r3, [pc, #596]	; (8013524 <tcp_process+0x594>)
 80132ce:	6819      	ldr	r1, [r3, #0]
 80132d0:	4b95      	ldr	r3, [pc, #596]	; (8013528 <tcp_process+0x598>)
 80132d2:	881b      	ldrh	r3, [r3, #0]
 80132d4:	461a      	mov	r2, r3
 80132d6:	4b95      	ldr	r3, [pc, #596]	; (801352c <tcp_process+0x59c>)
 80132d8:	681b      	ldr	r3, [r3, #0]
 80132da:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80132dc:	4b94      	ldr	r3, [pc, #592]	; (8013530 <tcp_process+0x5a0>)
 80132de:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80132e0:	885b      	ldrh	r3, [r3, #2]
 80132e2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80132e4:	4a92      	ldr	r2, [pc, #584]	; (8013530 <tcp_process+0x5a0>)
 80132e6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80132e8:	8812      	ldrh	r2, [r2, #0]
 80132ea:	b292      	uxth	r2, r2
 80132ec:	9202      	str	r2, [sp, #8]
 80132ee:	9301      	str	r3, [sp, #4]
 80132f0:	4b90      	ldr	r3, [pc, #576]	; (8013534 <tcp_process+0x5a4>)
 80132f2:	9300      	str	r3, [sp, #0]
 80132f4:	4b90      	ldr	r3, [pc, #576]	; (8013538 <tcp_process+0x5a8>)
 80132f6:	4602      	mov	r2, r0
 80132f8:	6878      	ldr	r0, [r7, #4]
 80132fa:	f002 fc85 	bl	8015c08 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013304:	2b05      	cmp	r3, #5
 8013306:	f200 8215 	bhi.w	8013734 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	2200      	movs	r2, #0
 801330e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8013310:	6878      	ldr	r0, [r7, #4]
 8013312:	f002 fa51 	bl	80157b8 <tcp_rexmit_rto>
      break;
 8013316:	e20d      	b.n	8013734 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8013318:	4b81      	ldr	r3, [pc, #516]	; (8013520 <tcp_process+0x590>)
 801331a:	781b      	ldrb	r3, [r3, #0]
 801331c:	f003 0310 	and.w	r3, r3, #16
 8013320:	2b00      	cmp	r3, #0
 8013322:	f000 80a1 	beq.w	8013468 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013326:	4b7f      	ldr	r3, [pc, #508]	; (8013524 <tcp_process+0x594>)
 8013328:	681a      	ldr	r2, [r3, #0]
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801332e:	1ad3      	subs	r3, r2, r3
 8013330:	3b01      	subs	r3, #1
 8013332:	2b00      	cmp	r3, #0
 8013334:	db7e      	blt.n	8013434 <tcp_process+0x4a4>
 8013336:	4b7b      	ldr	r3, [pc, #492]	; (8013524 <tcp_process+0x594>)
 8013338:	681a      	ldr	r2, [r3, #0]
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801333e:	1ad3      	subs	r3, r2, r3
 8013340:	2b00      	cmp	r3, #0
 8013342:	dc77      	bgt.n	8013434 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	2204      	movs	r2, #4
 8013348:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801334e:	2b00      	cmp	r3, #0
 8013350:	d102      	bne.n	8013358 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8013352:	23fa      	movs	r3, #250	; 0xfa
 8013354:	76bb      	strb	r3, [r7, #26]
 8013356:	e01d      	b.n	8013394 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801335c:	699b      	ldr	r3, [r3, #24]
 801335e:	2b00      	cmp	r3, #0
 8013360:	d106      	bne.n	8013370 <tcp_process+0x3e0>
 8013362:	4b76      	ldr	r3, [pc, #472]	; (801353c <tcp_process+0x5ac>)
 8013364:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8013368:	4975      	ldr	r1, [pc, #468]	; (8013540 <tcp_process+0x5b0>)
 801336a:	4876      	ldr	r0, [pc, #472]	; (8013544 <tcp_process+0x5b4>)
 801336c:	f006 f8e6 	bl	801953c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013374:	699b      	ldr	r3, [r3, #24]
 8013376:	2b00      	cmp	r3, #0
 8013378:	d00a      	beq.n	8013390 <tcp_process+0x400>
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801337e:	699b      	ldr	r3, [r3, #24]
 8013380:	687a      	ldr	r2, [r7, #4]
 8013382:	6910      	ldr	r0, [r2, #16]
 8013384:	2200      	movs	r2, #0
 8013386:	6879      	ldr	r1, [r7, #4]
 8013388:	4798      	blx	r3
 801338a:	4603      	mov	r3, r0
 801338c:	76bb      	strb	r3, [r7, #26]
 801338e:	e001      	b.n	8013394 <tcp_process+0x404>
 8013390:	23f0      	movs	r3, #240	; 0xf0
 8013392:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8013394:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013398:	2b00      	cmp	r3, #0
 801339a:	d00a      	beq.n	80133b2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801339c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80133a0:	f113 0f0d 	cmn.w	r3, #13
 80133a4:	d002      	beq.n	80133ac <tcp_process+0x41c>
              tcp_abort(pcb);
 80133a6:	6878      	ldr	r0, [r7, #4]
 80133a8:	f7fd ff8e 	bl	80112c8 <tcp_abort>
            }
            return ERR_ABRT;
 80133ac:	f06f 030c 	mvn.w	r3, #12
 80133b0:	e1ce      	b.n	8013750 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80133b2:	6878      	ldr	r0, [r7, #4]
 80133b4:	f000 fae0 	bl	8013978 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80133b8:	4b63      	ldr	r3, [pc, #396]	; (8013548 <tcp_process+0x5b8>)
 80133ba:	881b      	ldrh	r3, [r3, #0]
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d005      	beq.n	80133cc <tcp_process+0x43c>
            recv_acked--;
 80133c0:	4b61      	ldr	r3, [pc, #388]	; (8013548 <tcp_process+0x5b8>)
 80133c2:	881b      	ldrh	r3, [r3, #0]
 80133c4:	3b01      	subs	r3, #1
 80133c6:	b29a      	uxth	r2, r3
 80133c8:	4b5f      	ldr	r3, [pc, #380]	; (8013548 <tcp_process+0x5b8>)
 80133ca:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80133d0:	009a      	lsls	r2, r3, #2
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80133d6:	005b      	lsls	r3, r3, #1
 80133d8:	f241 111c 	movw	r1, #4380	; 0x111c
 80133dc:	428b      	cmp	r3, r1
 80133de:	bf38      	it	cc
 80133e0:	460b      	movcc	r3, r1
 80133e2:	429a      	cmp	r2, r3
 80133e4:	d204      	bcs.n	80133f0 <tcp_process+0x460>
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80133ea:	009b      	lsls	r3, r3, #2
 80133ec:	b29b      	uxth	r3, r3
 80133ee:	e00d      	b.n	801340c <tcp_process+0x47c>
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80133f4:	005b      	lsls	r3, r3, #1
 80133f6:	f241 121c 	movw	r2, #4380	; 0x111c
 80133fa:	4293      	cmp	r3, r2
 80133fc:	d904      	bls.n	8013408 <tcp_process+0x478>
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013402:	005b      	lsls	r3, r3, #1
 8013404:	b29b      	uxth	r3, r3
 8013406:	e001      	b.n	801340c <tcp_process+0x47c>
 8013408:	f241 131c 	movw	r3, #4380	; 0x111c
 801340c:	687a      	ldr	r2, [r7, #4]
 801340e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8013412:	4b4e      	ldr	r3, [pc, #312]	; (801354c <tcp_process+0x5bc>)
 8013414:	781b      	ldrb	r3, [r3, #0]
 8013416:	f003 0320 	and.w	r3, r3, #32
 801341a:	2b00      	cmp	r3, #0
 801341c:	d037      	beq.n	801348e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	8b5b      	ldrh	r3, [r3, #26]
 8013422:	f043 0302 	orr.w	r3, r3, #2
 8013426:	b29a      	uxth	r2, r3
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	2207      	movs	r2, #7
 8013430:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8013432:	e02c      	b.n	801348e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013434:	4b3b      	ldr	r3, [pc, #236]	; (8013524 <tcp_process+0x594>)
 8013436:	6819      	ldr	r1, [r3, #0]
 8013438:	4b3b      	ldr	r3, [pc, #236]	; (8013528 <tcp_process+0x598>)
 801343a:	881b      	ldrh	r3, [r3, #0]
 801343c:	461a      	mov	r2, r3
 801343e:	4b3b      	ldr	r3, [pc, #236]	; (801352c <tcp_process+0x59c>)
 8013440:	681b      	ldr	r3, [r3, #0]
 8013442:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013444:	4b3a      	ldr	r3, [pc, #232]	; (8013530 <tcp_process+0x5a0>)
 8013446:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013448:	885b      	ldrh	r3, [r3, #2]
 801344a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801344c:	4a38      	ldr	r2, [pc, #224]	; (8013530 <tcp_process+0x5a0>)
 801344e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013450:	8812      	ldrh	r2, [r2, #0]
 8013452:	b292      	uxth	r2, r2
 8013454:	9202      	str	r2, [sp, #8]
 8013456:	9301      	str	r3, [sp, #4]
 8013458:	4b36      	ldr	r3, [pc, #216]	; (8013534 <tcp_process+0x5a4>)
 801345a:	9300      	str	r3, [sp, #0]
 801345c:	4b36      	ldr	r3, [pc, #216]	; (8013538 <tcp_process+0x5a8>)
 801345e:	4602      	mov	r2, r0
 8013460:	6878      	ldr	r0, [r7, #4]
 8013462:	f002 fbd1 	bl	8015c08 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8013466:	e167      	b.n	8013738 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8013468:	4b2d      	ldr	r3, [pc, #180]	; (8013520 <tcp_process+0x590>)
 801346a:	781b      	ldrb	r3, [r3, #0]
 801346c:	f003 0302 	and.w	r3, r3, #2
 8013470:	2b00      	cmp	r3, #0
 8013472:	f000 8161 	beq.w	8013738 <tcp_process+0x7a8>
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801347a:	1e5a      	subs	r2, r3, #1
 801347c:	4b2b      	ldr	r3, [pc, #172]	; (801352c <tcp_process+0x59c>)
 801347e:	681b      	ldr	r3, [r3, #0]
 8013480:	429a      	cmp	r2, r3
 8013482:	f040 8159 	bne.w	8013738 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8013486:	6878      	ldr	r0, [r7, #4]
 8013488:	f002 f9b8 	bl	80157fc <tcp_rexmit>
      break;
 801348c:	e154      	b.n	8013738 <tcp_process+0x7a8>
 801348e:	e153      	b.n	8013738 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8013490:	6878      	ldr	r0, [r7, #4]
 8013492:	f000 fa71 	bl	8013978 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8013496:	4b2d      	ldr	r3, [pc, #180]	; (801354c <tcp_process+0x5bc>)
 8013498:	781b      	ldrb	r3, [r3, #0]
 801349a:	f003 0320 	and.w	r3, r3, #32
 801349e:	2b00      	cmp	r3, #0
 80134a0:	f000 814c 	beq.w	801373c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	8b5b      	ldrh	r3, [r3, #26]
 80134a8:	f043 0302 	orr.w	r3, r3, #2
 80134ac:	b29a      	uxth	r2, r3
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	2207      	movs	r2, #7
 80134b6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80134b8:	e140      	b.n	801373c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80134ba:	6878      	ldr	r0, [r7, #4]
 80134bc:	f000 fa5c 	bl	8013978 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80134c0:	4b22      	ldr	r3, [pc, #136]	; (801354c <tcp_process+0x5bc>)
 80134c2:	781b      	ldrb	r3, [r3, #0]
 80134c4:	f003 0320 	and.w	r3, r3, #32
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d071      	beq.n	80135b0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80134cc:	4b14      	ldr	r3, [pc, #80]	; (8013520 <tcp_process+0x590>)
 80134ce:	781b      	ldrb	r3, [r3, #0]
 80134d0:	f003 0310 	and.w	r3, r3, #16
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d060      	beq.n	801359a <tcp_process+0x60a>
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80134dc:	4b11      	ldr	r3, [pc, #68]	; (8013524 <tcp_process+0x594>)
 80134de:	681b      	ldr	r3, [r3, #0]
 80134e0:	429a      	cmp	r2, r3
 80134e2:	d15a      	bne.n	801359a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d156      	bne.n	801359a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	8b5b      	ldrh	r3, [r3, #26]
 80134f0:	f043 0302 	orr.w	r3, r3, #2
 80134f4:	b29a      	uxth	r2, r3
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80134fa:	6878      	ldr	r0, [r7, #4]
 80134fc:	f7fe fdbc 	bl	8012078 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8013500:	4b13      	ldr	r3, [pc, #76]	; (8013550 <tcp_process+0x5c0>)
 8013502:	681b      	ldr	r3, [r3, #0]
 8013504:	687a      	ldr	r2, [r7, #4]
 8013506:	429a      	cmp	r2, r3
 8013508:	d105      	bne.n	8013516 <tcp_process+0x586>
 801350a:	4b11      	ldr	r3, [pc, #68]	; (8013550 <tcp_process+0x5c0>)
 801350c:	681b      	ldr	r3, [r3, #0]
 801350e:	68db      	ldr	r3, [r3, #12]
 8013510:	4a0f      	ldr	r2, [pc, #60]	; (8013550 <tcp_process+0x5c0>)
 8013512:	6013      	str	r3, [r2, #0]
 8013514:	e02e      	b.n	8013574 <tcp_process+0x5e4>
 8013516:	4b0e      	ldr	r3, [pc, #56]	; (8013550 <tcp_process+0x5c0>)
 8013518:	681b      	ldr	r3, [r3, #0]
 801351a:	617b      	str	r3, [r7, #20]
 801351c:	e027      	b.n	801356e <tcp_process+0x5de>
 801351e:	bf00      	nop
 8013520:	2000810c 	.word	0x2000810c
 8013524:	20008104 	.word	0x20008104
 8013528:	2000810a 	.word	0x2000810a
 801352c:	20008100 	.word	0x20008100
 8013530:	200080f0 	.word	0x200080f0
 8013534:	200051bc 	.word	0x200051bc
 8013538:	200051c0 	.word	0x200051c0
 801353c:	0801cf0c 	.word	0x0801cf0c
 8013540:	0801d1ac 	.word	0x0801d1ac
 8013544:	0801cf58 	.word	0x0801cf58
 8013548:	20008108 	.word	0x20008108
 801354c:	2000810d 	.word	0x2000810d
 8013550:	200080d4 	.word	0x200080d4
 8013554:	697b      	ldr	r3, [r7, #20]
 8013556:	68db      	ldr	r3, [r3, #12]
 8013558:	687a      	ldr	r2, [r7, #4]
 801355a:	429a      	cmp	r2, r3
 801355c:	d104      	bne.n	8013568 <tcp_process+0x5d8>
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	68da      	ldr	r2, [r3, #12]
 8013562:	697b      	ldr	r3, [r7, #20]
 8013564:	60da      	str	r2, [r3, #12]
 8013566:	e005      	b.n	8013574 <tcp_process+0x5e4>
 8013568:	697b      	ldr	r3, [r7, #20]
 801356a:	68db      	ldr	r3, [r3, #12]
 801356c:	617b      	str	r3, [r7, #20]
 801356e:	697b      	ldr	r3, [r7, #20]
 8013570:	2b00      	cmp	r3, #0
 8013572:	d1ef      	bne.n	8013554 <tcp_process+0x5c4>
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	2200      	movs	r2, #0
 8013578:	60da      	str	r2, [r3, #12]
 801357a:	4b77      	ldr	r3, [pc, #476]	; (8013758 <tcp_process+0x7c8>)
 801357c:	2201      	movs	r2, #1
 801357e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	220a      	movs	r2, #10
 8013584:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8013586:	4b75      	ldr	r3, [pc, #468]	; (801375c <tcp_process+0x7cc>)
 8013588:	681a      	ldr	r2, [r3, #0]
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	60da      	str	r2, [r3, #12]
 801358e:	4a73      	ldr	r2, [pc, #460]	; (801375c <tcp_process+0x7cc>)
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	6013      	str	r3, [r2, #0]
 8013594:	f002 fcfa 	bl	8015f8c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8013598:	e0d2      	b.n	8013740 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	8b5b      	ldrh	r3, [r3, #26]
 801359e:	f043 0302 	orr.w	r3, r3, #2
 80135a2:	b29a      	uxth	r2, r3
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	2208      	movs	r2, #8
 80135ac:	751a      	strb	r2, [r3, #20]
      break;
 80135ae:	e0c7      	b.n	8013740 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80135b0:	4b6b      	ldr	r3, [pc, #428]	; (8013760 <tcp_process+0x7d0>)
 80135b2:	781b      	ldrb	r3, [r3, #0]
 80135b4:	f003 0310 	and.w	r3, r3, #16
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	f000 80c1 	beq.w	8013740 <tcp_process+0x7b0>
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80135c2:	4b68      	ldr	r3, [pc, #416]	; (8013764 <tcp_process+0x7d4>)
 80135c4:	681b      	ldr	r3, [r3, #0]
 80135c6:	429a      	cmp	r2, r3
 80135c8:	f040 80ba 	bne.w	8013740 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	f040 80b5 	bne.w	8013740 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	2206      	movs	r2, #6
 80135da:	751a      	strb	r2, [r3, #20]
      break;
 80135dc:	e0b0      	b.n	8013740 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80135de:	6878      	ldr	r0, [r7, #4]
 80135e0:	f000 f9ca 	bl	8013978 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80135e4:	4b60      	ldr	r3, [pc, #384]	; (8013768 <tcp_process+0x7d8>)
 80135e6:	781b      	ldrb	r3, [r3, #0]
 80135e8:	f003 0320 	and.w	r3, r3, #32
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	f000 80a9 	beq.w	8013744 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	8b5b      	ldrh	r3, [r3, #26]
 80135f6:	f043 0302 	orr.w	r3, r3, #2
 80135fa:	b29a      	uxth	r2, r3
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8013600:	6878      	ldr	r0, [r7, #4]
 8013602:	f7fe fd39 	bl	8012078 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8013606:	4b59      	ldr	r3, [pc, #356]	; (801376c <tcp_process+0x7dc>)
 8013608:	681b      	ldr	r3, [r3, #0]
 801360a:	687a      	ldr	r2, [r7, #4]
 801360c:	429a      	cmp	r2, r3
 801360e:	d105      	bne.n	801361c <tcp_process+0x68c>
 8013610:	4b56      	ldr	r3, [pc, #344]	; (801376c <tcp_process+0x7dc>)
 8013612:	681b      	ldr	r3, [r3, #0]
 8013614:	68db      	ldr	r3, [r3, #12]
 8013616:	4a55      	ldr	r2, [pc, #340]	; (801376c <tcp_process+0x7dc>)
 8013618:	6013      	str	r3, [r2, #0]
 801361a:	e013      	b.n	8013644 <tcp_process+0x6b4>
 801361c:	4b53      	ldr	r3, [pc, #332]	; (801376c <tcp_process+0x7dc>)
 801361e:	681b      	ldr	r3, [r3, #0]
 8013620:	613b      	str	r3, [r7, #16]
 8013622:	e00c      	b.n	801363e <tcp_process+0x6ae>
 8013624:	693b      	ldr	r3, [r7, #16]
 8013626:	68db      	ldr	r3, [r3, #12]
 8013628:	687a      	ldr	r2, [r7, #4]
 801362a:	429a      	cmp	r2, r3
 801362c:	d104      	bne.n	8013638 <tcp_process+0x6a8>
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	68da      	ldr	r2, [r3, #12]
 8013632:	693b      	ldr	r3, [r7, #16]
 8013634:	60da      	str	r2, [r3, #12]
 8013636:	e005      	b.n	8013644 <tcp_process+0x6b4>
 8013638:	693b      	ldr	r3, [r7, #16]
 801363a:	68db      	ldr	r3, [r3, #12]
 801363c:	613b      	str	r3, [r7, #16]
 801363e:	693b      	ldr	r3, [r7, #16]
 8013640:	2b00      	cmp	r3, #0
 8013642:	d1ef      	bne.n	8013624 <tcp_process+0x694>
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	2200      	movs	r2, #0
 8013648:	60da      	str	r2, [r3, #12]
 801364a:	4b43      	ldr	r3, [pc, #268]	; (8013758 <tcp_process+0x7c8>)
 801364c:	2201      	movs	r2, #1
 801364e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	220a      	movs	r2, #10
 8013654:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8013656:	4b41      	ldr	r3, [pc, #260]	; (801375c <tcp_process+0x7cc>)
 8013658:	681a      	ldr	r2, [r3, #0]
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	60da      	str	r2, [r3, #12]
 801365e:	4a3f      	ldr	r2, [pc, #252]	; (801375c <tcp_process+0x7cc>)
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	6013      	str	r3, [r2, #0]
 8013664:	f002 fc92 	bl	8015f8c <tcp_timer_needed>
      }
      break;
 8013668:	e06c      	b.n	8013744 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801366a:	6878      	ldr	r0, [r7, #4]
 801366c:	f000 f984 	bl	8013978 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013670:	4b3b      	ldr	r3, [pc, #236]	; (8013760 <tcp_process+0x7d0>)
 8013672:	781b      	ldrb	r3, [r3, #0]
 8013674:	f003 0310 	and.w	r3, r3, #16
 8013678:	2b00      	cmp	r3, #0
 801367a:	d065      	beq.n	8013748 <tcp_process+0x7b8>
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013680:	4b38      	ldr	r3, [pc, #224]	; (8013764 <tcp_process+0x7d4>)
 8013682:	681b      	ldr	r3, [r3, #0]
 8013684:	429a      	cmp	r2, r3
 8013686:	d15f      	bne.n	8013748 <tcp_process+0x7b8>
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801368c:	2b00      	cmp	r3, #0
 801368e:	d15b      	bne.n	8013748 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8013690:	6878      	ldr	r0, [r7, #4]
 8013692:	f7fe fcf1 	bl	8012078 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8013696:	4b35      	ldr	r3, [pc, #212]	; (801376c <tcp_process+0x7dc>)
 8013698:	681b      	ldr	r3, [r3, #0]
 801369a:	687a      	ldr	r2, [r7, #4]
 801369c:	429a      	cmp	r2, r3
 801369e:	d105      	bne.n	80136ac <tcp_process+0x71c>
 80136a0:	4b32      	ldr	r3, [pc, #200]	; (801376c <tcp_process+0x7dc>)
 80136a2:	681b      	ldr	r3, [r3, #0]
 80136a4:	68db      	ldr	r3, [r3, #12]
 80136a6:	4a31      	ldr	r2, [pc, #196]	; (801376c <tcp_process+0x7dc>)
 80136a8:	6013      	str	r3, [r2, #0]
 80136aa:	e013      	b.n	80136d4 <tcp_process+0x744>
 80136ac:	4b2f      	ldr	r3, [pc, #188]	; (801376c <tcp_process+0x7dc>)
 80136ae:	681b      	ldr	r3, [r3, #0]
 80136b0:	60fb      	str	r3, [r7, #12]
 80136b2:	e00c      	b.n	80136ce <tcp_process+0x73e>
 80136b4:	68fb      	ldr	r3, [r7, #12]
 80136b6:	68db      	ldr	r3, [r3, #12]
 80136b8:	687a      	ldr	r2, [r7, #4]
 80136ba:	429a      	cmp	r2, r3
 80136bc:	d104      	bne.n	80136c8 <tcp_process+0x738>
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	68da      	ldr	r2, [r3, #12]
 80136c2:	68fb      	ldr	r3, [r7, #12]
 80136c4:	60da      	str	r2, [r3, #12]
 80136c6:	e005      	b.n	80136d4 <tcp_process+0x744>
 80136c8:	68fb      	ldr	r3, [r7, #12]
 80136ca:	68db      	ldr	r3, [r3, #12]
 80136cc:	60fb      	str	r3, [r7, #12]
 80136ce:	68fb      	ldr	r3, [r7, #12]
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	d1ef      	bne.n	80136b4 <tcp_process+0x724>
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	2200      	movs	r2, #0
 80136d8:	60da      	str	r2, [r3, #12]
 80136da:	4b1f      	ldr	r3, [pc, #124]	; (8013758 <tcp_process+0x7c8>)
 80136dc:	2201      	movs	r2, #1
 80136de:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	220a      	movs	r2, #10
 80136e4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80136e6:	4b1d      	ldr	r3, [pc, #116]	; (801375c <tcp_process+0x7cc>)
 80136e8:	681a      	ldr	r2, [r3, #0]
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	60da      	str	r2, [r3, #12]
 80136ee:	4a1b      	ldr	r2, [pc, #108]	; (801375c <tcp_process+0x7cc>)
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	6013      	str	r3, [r2, #0]
 80136f4:	f002 fc4a 	bl	8015f8c <tcp_timer_needed>
      }
      break;
 80136f8:	e026      	b.n	8013748 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80136fa:	6878      	ldr	r0, [r7, #4]
 80136fc:	f000 f93c 	bl	8013978 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013700:	4b17      	ldr	r3, [pc, #92]	; (8013760 <tcp_process+0x7d0>)
 8013702:	781b      	ldrb	r3, [r3, #0]
 8013704:	f003 0310 	and.w	r3, r3, #16
 8013708:	2b00      	cmp	r3, #0
 801370a:	d01f      	beq.n	801374c <tcp_process+0x7bc>
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013710:	4b14      	ldr	r3, [pc, #80]	; (8013764 <tcp_process+0x7d4>)
 8013712:	681b      	ldr	r3, [r3, #0]
 8013714:	429a      	cmp	r2, r3
 8013716:	d119      	bne.n	801374c <tcp_process+0x7bc>
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801371c:	2b00      	cmp	r3, #0
 801371e:	d115      	bne.n	801374c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8013720:	4b11      	ldr	r3, [pc, #68]	; (8013768 <tcp_process+0x7d8>)
 8013722:	781b      	ldrb	r3, [r3, #0]
 8013724:	f043 0310 	orr.w	r3, r3, #16
 8013728:	b2da      	uxtb	r2, r3
 801372a:	4b0f      	ldr	r3, [pc, #60]	; (8013768 <tcp_process+0x7d8>)
 801372c:	701a      	strb	r2, [r3, #0]
      }
      break;
 801372e:	e00d      	b.n	801374c <tcp_process+0x7bc>
    default:
      break;
 8013730:	bf00      	nop
 8013732:	e00c      	b.n	801374e <tcp_process+0x7be>
      break;
 8013734:	bf00      	nop
 8013736:	e00a      	b.n	801374e <tcp_process+0x7be>
      break;
 8013738:	bf00      	nop
 801373a:	e008      	b.n	801374e <tcp_process+0x7be>
      break;
 801373c:	bf00      	nop
 801373e:	e006      	b.n	801374e <tcp_process+0x7be>
      break;
 8013740:	bf00      	nop
 8013742:	e004      	b.n	801374e <tcp_process+0x7be>
      break;
 8013744:	bf00      	nop
 8013746:	e002      	b.n	801374e <tcp_process+0x7be>
      break;
 8013748:	bf00      	nop
 801374a:	e000      	b.n	801374e <tcp_process+0x7be>
      break;
 801374c:	bf00      	nop
  }
  return ERR_OK;
 801374e:	2300      	movs	r3, #0
}
 8013750:	4618      	mov	r0, r3
 8013752:	3724      	adds	r7, #36	; 0x24
 8013754:	46bd      	mov	sp, r7
 8013756:	bd90      	pop	{r4, r7, pc}
 8013758:	200080dc 	.word	0x200080dc
 801375c:	200080d8 	.word	0x200080d8
 8013760:	2000810c 	.word	0x2000810c
 8013764:	20008104 	.word	0x20008104
 8013768:	2000810d 	.word	0x2000810d
 801376c:	200080d4 	.word	0x200080d4

08013770 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8013770:	b590      	push	{r4, r7, lr}
 8013772:	b085      	sub	sp, #20
 8013774:	af00      	add	r7, sp, #0
 8013776:	6078      	str	r0, [r7, #4]
 8013778:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	2b00      	cmp	r3, #0
 801377e:	d106      	bne.n	801378e <tcp_oos_insert_segment+0x1e>
 8013780:	4b3b      	ldr	r3, [pc, #236]	; (8013870 <tcp_oos_insert_segment+0x100>)
 8013782:	f240 421f 	movw	r2, #1055	; 0x41f
 8013786:	493b      	ldr	r1, [pc, #236]	; (8013874 <tcp_oos_insert_segment+0x104>)
 8013788:	483b      	ldr	r0, [pc, #236]	; (8013878 <tcp_oos_insert_segment+0x108>)
 801378a:	f005 fed7 	bl	801953c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	68db      	ldr	r3, [r3, #12]
 8013792:	899b      	ldrh	r3, [r3, #12]
 8013794:	b29b      	uxth	r3, r3
 8013796:	4618      	mov	r0, r3
 8013798:	f7fb fc18 	bl	800efcc <lwip_htons>
 801379c:	4603      	mov	r3, r0
 801379e:	b2db      	uxtb	r3, r3
 80137a0:	f003 0301 	and.w	r3, r3, #1
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	d028      	beq.n	80137fa <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80137a8:	6838      	ldr	r0, [r7, #0]
 80137aa:	f7fe fa63 	bl	8011c74 <tcp_segs_free>
    next = NULL;
 80137ae:	2300      	movs	r3, #0
 80137b0:	603b      	str	r3, [r7, #0]
 80137b2:	e056      	b.n	8013862 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80137b4:	683b      	ldr	r3, [r7, #0]
 80137b6:	68db      	ldr	r3, [r3, #12]
 80137b8:	899b      	ldrh	r3, [r3, #12]
 80137ba:	b29b      	uxth	r3, r3
 80137bc:	4618      	mov	r0, r3
 80137be:	f7fb fc05 	bl	800efcc <lwip_htons>
 80137c2:	4603      	mov	r3, r0
 80137c4:	b2db      	uxtb	r3, r3
 80137c6:	f003 0301 	and.w	r3, r3, #1
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	d00d      	beq.n	80137ea <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	68db      	ldr	r3, [r3, #12]
 80137d2:	899b      	ldrh	r3, [r3, #12]
 80137d4:	b29c      	uxth	r4, r3
 80137d6:	2001      	movs	r0, #1
 80137d8:	f7fb fbf8 	bl	800efcc <lwip_htons>
 80137dc:	4603      	mov	r3, r0
 80137de:	461a      	mov	r2, r3
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	68db      	ldr	r3, [r3, #12]
 80137e4:	4322      	orrs	r2, r4
 80137e6:	b292      	uxth	r2, r2
 80137e8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80137ea:	683b      	ldr	r3, [r7, #0]
 80137ec:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80137ee:	683b      	ldr	r3, [r7, #0]
 80137f0:	681b      	ldr	r3, [r3, #0]
 80137f2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80137f4:	68f8      	ldr	r0, [r7, #12]
 80137f6:	f7fe fa52 	bl	8011c9e <tcp_seg_free>
    while (next &&
 80137fa:	683b      	ldr	r3, [r7, #0]
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	d00e      	beq.n	801381e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	891b      	ldrh	r3, [r3, #8]
 8013804:	461a      	mov	r2, r3
 8013806:	4b1d      	ldr	r3, [pc, #116]	; (801387c <tcp_oos_insert_segment+0x10c>)
 8013808:	681b      	ldr	r3, [r3, #0]
 801380a:	441a      	add	r2, r3
 801380c:	683b      	ldr	r3, [r7, #0]
 801380e:	68db      	ldr	r3, [r3, #12]
 8013810:	685b      	ldr	r3, [r3, #4]
 8013812:	6839      	ldr	r1, [r7, #0]
 8013814:	8909      	ldrh	r1, [r1, #8]
 8013816:	440b      	add	r3, r1
 8013818:	1ad3      	subs	r3, r2, r3
    while (next &&
 801381a:	2b00      	cmp	r3, #0
 801381c:	daca      	bge.n	80137b4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801381e:	683b      	ldr	r3, [r7, #0]
 8013820:	2b00      	cmp	r3, #0
 8013822:	d01e      	beq.n	8013862 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	891b      	ldrh	r3, [r3, #8]
 8013828:	461a      	mov	r2, r3
 801382a:	4b14      	ldr	r3, [pc, #80]	; (801387c <tcp_oos_insert_segment+0x10c>)
 801382c:	681b      	ldr	r3, [r3, #0]
 801382e:	441a      	add	r2, r3
 8013830:	683b      	ldr	r3, [r7, #0]
 8013832:	68db      	ldr	r3, [r3, #12]
 8013834:	685b      	ldr	r3, [r3, #4]
 8013836:	1ad3      	subs	r3, r2, r3
    if (next &&
 8013838:	2b00      	cmp	r3, #0
 801383a:	dd12      	ble.n	8013862 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801383c:	683b      	ldr	r3, [r7, #0]
 801383e:	68db      	ldr	r3, [r3, #12]
 8013840:	685b      	ldr	r3, [r3, #4]
 8013842:	b29a      	uxth	r2, r3
 8013844:	4b0d      	ldr	r3, [pc, #52]	; (801387c <tcp_oos_insert_segment+0x10c>)
 8013846:	681b      	ldr	r3, [r3, #0]
 8013848:	b29b      	uxth	r3, r3
 801384a:	1ad3      	subs	r3, r2, r3
 801384c:	b29a      	uxth	r2, r3
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	685a      	ldr	r2, [r3, #4]
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	891b      	ldrh	r3, [r3, #8]
 801385a:	4619      	mov	r1, r3
 801385c:	4610      	mov	r0, r2
 801385e:	f7fc fe25 	bl	80104ac <pbuf_realloc>
    }
  }
  cseg->next = next;
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	683a      	ldr	r2, [r7, #0]
 8013866:	601a      	str	r2, [r3, #0]
}
 8013868:	bf00      	nop
 801386a:	3714      	adds	r7, #20
 801386c:	46bd      	mov	sp, r7
 801386e:	bd90      	pop	{r4, r7, pc}
 8013870:	0801cf0c 	.word	0x0801cf0c
 8013874:	0801d1cc 	.word	0x0801d1cc
 8013878:	0801cf58 	.word	0x0801cf58
 801387c:	20008100 	.word	0x20008100

08013880 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8013880:	b5b0      	push	{r4, r5, r7, lr}
 8013882:	b086      	sub	sp, #24
 8013884:	af00      	add	r7, sp, #0
 8013886:	60f8      	str	r0, [r7, #12]
 8013888:	60b9      	str	r1, [r7, #8]
 801388a:	607a      	str	r2, [r7, #4]
 801388c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801388e:	e03e      	b.n	801390e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8013890:	68bb      	ldr	r3, [r7, #8]
 8013892:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8013894:	68bb      	ldr	r3, [r7, #8]
 8013896:	681b      	ldr	r3, [r3, #0]
 8013898:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801389a:	697b      	ldr	r3, [r7, #20]
 801389c:	685b      	ldr	r3, [r3, #4]
 801389e:	4618      	mov	r0, r3
 80138a0:	f7fd f812 	bl	80108c8 <pbuf_clen>
 80138a4:	4603      	mov	r3, r0
 80138a6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80138a8:	68fb      	ldr	r3, [r7, #12]
 80138aa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80138ae:	8a7a      	ldrh	r2, [r7, #18]
 80138b0:	429a      	cmp	r2, r3
 80138b2:	d906      	bls.n	80138c2 <tcp_free_acked_segments+0x42>
 80138b4:	4b2a      	ldr	r3, [pc, #168]	; (8013960 <tcp_free_acked_segments+0xe0>)
 80138b6:	f240 4257 	movw	r2, #1111	; 0x457
 80138ba:	492a      	ldr	r1, [pc, #168]	; (8013964 <tcp_free_acked_segments+0xe4>)
 80138bc:	482a      	ldr	r0, [pc, #168]	; (8013968 <tcp_free_acked_segments+0xe8>)
 80138be:	f005 fe3d 	bl	801953c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80138c2:	68fb      	ldr	r3, [r7, #12]
 80138c4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80138c8:	8a7b      	ldrh	r3, [r7, #18]
 80138ca:	1ad3      	subs	r3, r2, r3
 80138cc:	b29a      	uxth	r2, r3
 80138ce:	68fb      	ldr	r3, [r7, #12]
 80138d0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80138d4:	697b      	ldr	r3, [r7, #20]
 80138d6:	891a      	ldrh	r2, [r3, #8]
 80138d8:	4b24      	ldr	r3, [pc, #144]	; (801396c <tcp_free_acked_segments+0xec>)
 80138da:	881b      	ldrh	r3, [r3, #0]
 80138dc:	4413      	add	r3, r2
 80138de:	b29a      	uxth	r2, r3
 80138e0:	4b22      	ldr	r3, [pc, #136]	; (801396c <tcp_free_acked_segments+0xec>)
 80138e2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80138e4:	6978      	ldr	r0, [r7, #20]
 80138e6:	f7fe f9da 	bl	8011c9e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80138ea:	68fb      	ldr	r3, [r7, #12]
 80138ec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d00c      	beq.n	801390e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80138f4:	68bb      	ldr	r3, [r7, #8]
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d109      	bne.n	801390e <tcp_free_acked_segments+0x8e>
 80138fa:	683b      	ldr	r3, [r7, #0]
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d106      	bne.n	801390e <tcp_free_acked_segments+0x8e>
 8013900:	4b17      	ldr	r3, [pc, #92]	; (8013960 <tcp_free_acked_segments+0xe0>)
 8013902:	f240 4261 	movw	r2, #1121	; 0x461
 8013906:	491a      	ldr	r1, [pc, #104]	; (8013970 <tcp_free_acked_segments+0xf0>)
 8013908:	4817      	ldr	r0, [pc, #92]	; (8013968 <tcp_free_acked_segments+0xe8>)
 801390a:	f005 fe17 	bl	801953c <iprintf>
  while (seg_list != NULL &&
 801390e:	68bb      	ldr	r3, [r7, #8]
 8013910:	2b00      	cmp	r3, #0
 8013912:	d020      	beq.n	8013956 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8013914:	68bb      	ldr	r3, [r7, #8]
 8013916:	68db      	ldr	r3, [r3, #12]
 8013918:	685b      	ldr	r3, [r3, #4]
 801391a:	4618      	mov	r0, r3
 801391c:	f7fb fb6b 	bl	800eff6 <lwip_htonl>
 8013920:	4604      	mov	r4, r0
 8013922:	68bb      	ldr	r3, [r7, #8]
 8013924:	891b      	ldrh	r3, [r3, #8]
 8013926:	461d      	mov	r5, r3
 8013928:	68bb      	ldr	r3, [r7, #8]
 801392a:	68db      	ldr	r3, [r3, #12]
 801392c:	899b      	ldrh	r3, [r3, #12]
 801392e:	b29b      	uxth	r3, r3
 8013930:	4618      	mov	r0, r3
 8013932:	f7fb fb4b 	bl	800efcc <lwip_htons>
 8013936:	4603      	mov	r3, r0
 8013938:	b2db      	uxtb	r3, r3
 801393a:	f003 0303 	and.w	r3, r3, #3
 801393e:	2b00      	cmp	r3, #0
 8013940:	d001      	beq.n	8013946 <tcp_free_acked_segments+0xc6>
 8013942:	2301      	movs	r3, #1
 8013944:	e000      	b.n	8013948 <tcp_free_acked_segments+0xc8>
 8013946:	2300      	movs	r3, #0
 8013948:	442b      	add	r3, r5
 801394a:	18e2      	adds	r2, r4, r3
 801394c:	4b09      	ldr	r3, [pc, #36]	; (8013974 <tcp_free_acked_segments+0xf4>)
 801394e:	681b      	ldr	r3, [r3, #0]
 8013950:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8013952:	2b00      	cmp	r3, #0
 8013954:	dd9c      	ble.n	8013890 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8013956:	68bb      	ldr	r3, [r7, #8]
}
 8013958:	4618      	mov	r0, r3
 801395a:	3718      	adds	r7, #24
 801395c:	46bd      	mov	sp, r7
 801395e:	bdb0      	pop	{r4, r5, r7, pc}
 8013960:	0801cf0c 	.word	0x0801cf0c
 8013964:	0801d1f4 	.word	0x0801d1f4
 8013968:	0801cf58 	.word	0x0801cf58
 801396c:	20008108 	.word	0x20008108
 8013970:	0801d21c 	.word	0x0801d21c
 8013974:	20008104 	.word	0x20008104

08013978 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8013978:	b5b0      	push	{r4, r5, r7, lr}
 801397a:	b094      	sub	sp, #80	; 0x50
 801397c:	af00      	add	r7, sp, #0
 801397e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8013980:	2300      	movs	r3, #0
 8013982:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	2b00      	cmp	r3, #0
 8013988:	d106      	bne.n	8013998 <tcp_receive+0x20>
 801398a:	4b91      	ldr	r3, [pc, #580]	; (8013bd0 <tcp_receive+0x258>)
 801398c:	f240 427b 	movw	r2, #1147	; 0x47b
 8013990:	4990      	ldr	r1, [pc, #576]	; (8013bd4 <tcp_receive+0x25c>)
 8013992:	4891      	ldr	r0, [pc, #580]	; (8013bd8 <tcp_receive+0x260>)
 8013994:	f005 fdd2 	bl	801953c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	7d1b      	ldrb	r3, [r3, #20]
 801399c:	2b03      	cmp	r3, #3
 801399e:	d806      	bhi.n	80139ae <tcp_receive+0x36>
 80139a0:	4b8b      	ldr	r3, [pc, #556]	; (8013bd0 <tcp_receive+0x258>)
 80139a2:	f240 427c 	movw	r2, #1148	; 0x47c
 80139a6:	498d      	ldr	r1, [pc, #564]	; (8013bdc <tcp_receive+0x264>)
 80139a8:	488b      	ldr	r0, [pc, #556]	; (8013bd8 <tcp_receive+0x260>)
 80139aa:	f005 fdc7 	bl	801953c <iprintf>

  if (flags & TCP_ACK) {
 80139ae:	4b8c      	ldr	r3, [pc, #560]	; (8013be0 <tcp_receive+0x268>)
 80139b0:	781b      	ldrb	r3, [r3, #0]
 80139b2:	f003 0310 	and.w	r3, r3, #16
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	f000 8264 	beq.w	8013e84 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80139c2:	461a      	mov	r2, r3
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80139c8:	4413      	add	r3, r2
 80139ca:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80139d0:	4b84      	ldr	r3, [pc, #528]	; (8013be4 <tcp_receive+0x26c>)
 80139d2:	681b      	ldr	r3, [r3, #0]
 80139d4:	1ad3      	subs	r3, r2, r3
 80139d6:	2b00      	cmp	r3, #0
 80139d8:	db1b      	blt.n	8013a12 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80139de:	4b81      	ldr	r3, [pc, #516]	; (8013be4 <tcp_receive+0x26c>)
 80139e0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80139e2:	429a      	cmp	r2, r3
 80139e4:	d106      	bne.n	80139f4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80139ea:	4b7f      	ldr	r3, [pc, #508]	; (8013be8 <tcp_receive+0x270>)
 80139ec:	681b      	ldr	r3, [r3, #0]
 80139ee:	1ad3      	subs	r3, r2, r3
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	db0e      	blt.n	8013a12 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80139f8:	4b7b      	ldr	r3, [pc, #492]	; (8013be8 <tcp_receive+0x270>)
 80139fa:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80139fc:	429a      	cmp	r2, r3
 80139fe:	d125      	bne.n	8013a4c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013a00:	4b7a      	ldr	r3, [pc, #488]	; (8013bec <tcp_receive+0x274>)
 8013a02:	681b      	ldr	r3, [r3, #0]
 8013a04:	89db      	ldrh	r3, [r3, #14]
 8013a06:	b29a      	uxth	r2, r3
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013a0e:	429a      	cmp	r2, r3
 8013a10:	d91c      	bls.n	8013a4c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8013a12:	4b76      	ldr	r3, [pc, #472]	; (8013bec <tcp_receive+0x274>)
 8013a14:	681b      	ldr	r3, [r3, #0]
 8013a16:	89db      	ldrh	r3, [r3, #14]
 8013a18:	b29a      	uxth	r2, r3
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013a2c:	429a      	cmp	r2, r3
 8013a2e:	d205      	bcs.n	8013a3c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8013a3c:	4b69      	ldr	r3, [pc, #420]	; (8013be4 <tcp_receive+0x26c>)
 8013a3e:	681a      	ldr	r2, [r3, #0]
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8013a44:	4b68      	ldr	r3, [pc, #416]	; (8013be8 <tcp_receive+0x270>)
 8013a46:	681a      	ldr	r2, [r3, #0]
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8013a4c:	4b66      	ldr	r3, [pc, #408]	; (8013be8 <tcp_receive+0x270>)
 8013a4e:	681a      	ldr	r2, [r3, #0]
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013a54:	1ad3      	subs	r3, r2, r3
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	dc58      	bgt.n	8013b0c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8013a5a:	4b65      	ldr	r3, [pc, #404]	; (8013bf0 <tcp_receive+0x278>)
 8013a5c:	881b      	ldrh	r3, [r3, #0]
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d14b      	bne.n	8013afa <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013a66:	687a      	ldr	r2, [r7, #4]
 8013a68:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8013a6c:	4413      	add	r3, r2
 8013a6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013a70:	429a      	cmp	r2, r3
 8013a72:	d142      	bne.n	8013afa <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	db3d      	blt.n	8013afa <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013a82:	4b59      	ldr	r3, [pc, #356]	; (8013be8 <tcp_receive+0x270>)
 8013a84:	681b      	ldr	r3, [r3, #0]
 8013a86:	429a      	cmp	r2, r3
 8013a88:	d137      	bne.n	8013afa <tcp_receive+0x182>
              found_dupack = 1;
 8013a8a:	2301      	movs	r3, #1
 8013a8c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013a94:	2bff      	cmp	r3, #255	; 0xff
 8013a96:	d007      	beq.n	8013aa8 <tcp_receive+0x130>
                ++pcb->dupacks;
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013a9e:	3301      	adds	r3, #1
 8013aa0:	b2da      	uxtb	r2, r3
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013aae:	2b03      	cmp	r3, #3
 8013ab0:	d91b      	bls.n	8013aea <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013abc:	4413      	add	r3, r2
 8013abe:	b29a      	uxth	r2, r3
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013ac6:	429a      	cmp	r2, r3
 8013ac8:	d30a      	bcc.n	8013ae0 <tcp_receive+0x168>
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013ad4:	4413      	add	r3, r2
 8013ad6:	b29a      	uxth	r2, r3
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013ade:	e004      	b.n	8013aea <tcp_receive+0x172>
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013ae6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013af0:	2b02      	cmp	r3, #2
 8013af2:	d902      	bls.n	8013afa <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8013af4:	6878      	ldr	r0, [r7, #4]
 8013af6:	f001 feed 	bl	80158d4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8013afa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	f040 8161 	bne.w	8013dc4 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	2200      	movs	r2, #0
 8013b06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013b0a:	e15b      	b.n	8013dc4 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013b0c:	4b36      	ldr	r3, [pc, #216]	; (8013be8 <tcp_receive+0x270>)
 8013b0e:	681a      	ldr	r2, [r3, #0]
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013b14:	1ad3      	subs	r3, r2, r3
 8013b16:	3b01      	subs	r3, #1
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	f2c0 814e 	blt.w	8013dba <tcp_receive+0x442>
 8013b1e:	4b32      	ldr	r3, [pc, #200]	; (8013be8 <tcp_receive+0x270>)
 8013b20:	681a      	ldr	r2, [r3, #0]
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013b26:	1ad3      	subs	r3, r2, r3
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	f300 8146 	bgt.w	8013dba <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	8b5b      	ldrh	r3, [r3, #26]
 8013b32:	f003 0304 	and.w	r3, r3, #4
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	d010      	beq.n	8013b5c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	8b5b      	ldrh	r3, [r3, #26]
 8013b3e:	f023 0304 	bic.w	r3, r3, #4
 8013b42:	b29a      	uxth	r2, r3
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	2200      	movs	r2, #0
 8013b58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	2200      	movs	r2, #0
 8013b60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013b6a:	10db      	asrs	r3, r3, #3
 8013b6c:	b21b      	sxth	r3, r3
 8013b6e:	b29a      	uxth	r2, r3
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013b76:	b29b      	uxth	r3, r3
 8013b78:	4413      	add	r3, r2
 8013b7a:	b29b      	uxth	r3, r3
 8013b7c:	b21a      	sxth	r2, r3
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8013b84:	4b18      	ldr	r3, [pc, #96]	; (8013be8 <tcp_receive+0x270>)
 8013b86:	681b      	ldr	r3, [r3, #0]
 8013b88:	b29a      	uxth	r2, r3
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013b8e:	b29b      	uxth	r3, r3
 8013b90:	1ad3      	subs	r3, r2, r3
 8013b92:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	2200      	movs	r2, #0
 8013b98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8013b9c:	4b12      	ldr	r3, [pc, #72]	; (8013be8 <tcp_receive+0x270>)
 8013b9e:	681a      	ldr	r2, [r3, #0]
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	7d1b      	ldrb	r3, [r3, #20]
 8013ba8:	2b03      	cmp	r3, #3
 8013baa:	f240 8097 	bls.w	8013cdc <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8013bba:	429a      	cmp	r2, r3
 8013bbc:	d245      	bcs.n	8013c4a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	8b5b      	ldrh	r3, [r3, #26]
 8013bc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	d014      	beq.n	8013bf4 <tcp_receive+0x27c>
 8013bca:	2301      	movs	r3, #1
 8013bcc:	e013      	b.n	8013bf6 <tcp_receive+0x27e>
 8013bce:	bf00      	nop
 8013bd0:	0801cf0c 	.word	0x0801cf0c
 8013bd4:	0801d23c 	.word	0x0801d23c
 8013bd8:	0801cf58 	.word	0x0801cf58
 8013bdc:	0801d258 	.word	0x0801d258
 8013be0:	2000810c 	.word	0x2000810c
 8013be4:	20008100 	.word	0x20008100
 8013be8:	20008104 	.word	0x20008104
 8013bec:	200080f0 	.word	0x200080f0
 8013bf0:	2000810a 	.word	0x2000810a
 8013bf4:	2302      	movs	r3, #2
 8013bf6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8013bfa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8013bfe:	b29a      	uxth	r2, r3
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013c04:	fb12 f303 	smulbb	r3, r2, r3
 8013c08:	b29b      	uxth	r3, r3
 8013c0a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013c0c:	4293      	cmp	r3, r2
 8013c0e:	bf28      	it	cs
 8013c10:	4613      	movcs	r3, r2
 8013c12:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013c1a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013c1c:	4413      	add	r3, r2
 8013c1e:	b29a      	uxth	r2, r3
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013c26:	429a      	cmp	r2, r3
 8013c28:	d309      	bcc.n	8013c3e <tcp_receive+0x2c6>
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013c30:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013c32:	4413      	add	r3, r2
 8013c34:	b29a      	uxth	r2, r3
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013c3c:	e04e      	b.n	8013cdc <tcp_receive+0x364>
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013c44:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013c48:	e048      	b.n	8013cdc <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8013c50:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013c52:	4413      	add	r3, r2
 8013c54:	b29a      	uxth	r2, r3
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8013c5c:	429a      	cmp	r2, r3
 8013c5e:	d309      	bcc.n	8013c74 <tcp_receive+0x2fc>
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8013c66:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013c68:	4413      	add	r3, r2
 8013c6a:	b29a      	uxth	r2, r3
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8013c72:	e004      	b.n	8013c7e <tcp_receive+0x306>
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013c7a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013c8a:	429a      	cmp	r2, r3
 8013c8c:	d326      	bcc.n	8013cdc <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013c9a:	1ad3      	subs	r3, r2, r3
 8013c9c:	b29a      	uxth	r2, r3
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013cae:	4413      	add	r3, r2
 8013cb0:	b29a      	uxth	r2, r3
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013cb8:	429a      	cmp	r2, r3
 8013cba:	d30a      	bcc.n	8013cd2 <tcp_receive+0x35a>
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013cc6:	4413      	add	r3, r2
 8013cc8:	b29a      	uxth	r2, r3
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013cd0:	e004      	b.n	8013cdc <tcp_receive+0x364>
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013cd8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ce4:	4a98      	ldr	r2, [pc, #608]	; (8013f48 <tcp_receive+0x5d0>)
 8013ce6:	6878      	ldr	r0, [r7, #4]
 8013ce8:	f7ff fdca 	bl	8013880 <tcp_free_acked_segments>
 8013cec:	4602      	mov	r2, r0
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013cfa:	4a94      	ldr	r2, [pc, #592]	; (8013f4c <tcp_receive+0x5d4>)
 8013cfc:	6878      	ldr	r0, [r7, #4]
 8013cfe:	f7ff fdbf 	bl	8013880 <tcp_free_acked_segments>
 8013d02:	4602      	mov	r2, r0
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	d104      	bne.n	8013d1a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013d16:	861a      	strh	r2, [r3, #48]	; 0x30
 8013d18:	e002      	b.n	8013d20 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	2200      	movs	r2, #0
 8013d1e:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	2200      	movs	r2, #0
 8013d24:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	d103      	bne.n	8013d36 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	2200      	movs	r2, #0
 8013d32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8013d3c:	4b84      	ldr	r3, [pc, #528]	; (8013f50 <tcp_receive+0x5d8>)
 8013d3e:	881b      	ldrh	r3, [r3, #0]
 8013d40:	4413      	add	r3, r2
 8013d42:	b29a      	uxth	r2, r3
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	8b5b      	ldrh	r3, [r3, #26]
 8013d4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	d035      	beq.n	8013dc2 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	d118      	bne.n	8013d90 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d00c      	beq.n	8013d80 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013d6e:	68db      	ldr	r3, [r3, #12]
 8013d70:	685b      	ldr	r3, [r3, #4]
 8013d72:	4618      	mov	r0, r3
 8013d74:	f7fb f93f 	bl	800eff6 <lwip_htonl>
 8013d78:	4603      	mov	r3, r0
 8013d7a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	dc20      	bgt.n	8013dc2 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	8b5b      	ldrh	r3, [r3, #26]
 8013d84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013d88:	b29a      	uxth	r2, r3
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013d8e:	e018      	b.n	8013dc2 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013d98:	68db      	ldr	r3, [r3, #12]
 8013d9a:	685b      	ldr	r3, [r3, #4]
 8013d9c:	4618      	mov	r0, r3
 8013d9e:	f7fb f92a 	bl	800eff6 <lwip_htonl>
 8013da2:	4603      	mov	r3, r0
 8013da4:	1ae3      	subs	r3, r4, r3
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	dc0b      	bgt.n	8013dc2 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	8b5b      	ldrh	r3, [r3, #26]
 8013dae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013db2:	b29a      	uxth	r2, r3
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013db8:	e003      	b.n	8013dc2 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8013dba:	6878      	ldr	r0, [r7, #4]
 8013dbc:	f001 ff76 	bl	8015cac <tcp_send_empty_ack>
 8013dc0:	e000      	b.n	8013dc4 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013dc2:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	d05b      	beq.n	8013e84 <tcp_receive+0x50c>
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013dd0:	4b60      	ldr	r3, [pc, #384]	; (8013f54 <tcp_receive+0x5dc>)
 8013dd2:	681b      	ldr	r3, [r3, #0]
 8013dd4:	1ad3      	subs	r3, r2, r3
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	da54      	bge.n	8013e84 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8013dda:	4b5f      	ldr	r3, [pc, #380]	; (8013f58 <tcp_receive+0x5e0>)
 8013ddc:	681b      	ldr	r3, [r3, #0]
 8013dde:	b29a      	uxth	r2, r3
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013de4:	b29b      	uxth	r3, r3
 8013de6:	1ad3      	subs	r3, r2, r3
 8013de8:	b29b      	uxth	r3, r3
 8013dea:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8013dee:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013df8:	10db      	asrs	r3, r3, #3
 8013dfa:	b21b      	sxth	r3, r3
 8013dfc:	b29b      	uxth	r3, r3
 8013dfe:	1ad3      	subs	r3, r2, r3
 8013e00:	b29b      	uxth	r3, r3
 8013e02:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013e0c:	b29a      	uxth	r2, r3
 8013e0e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8013e12:	4413      	add	r3, r2
 8013e14:	b29b      	uxth	r3, r3
 8013e16:	b21a      	sxth	r2, r3
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8013e1c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	da05      	bge.n	8013e30 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8013e24:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8013e28:	425b      	negs	r3, r3
 8013e2a:	b29b      	uxth	r3, r3
 8013e2c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8013e30:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013e3a:	109b      	asrs	r3, r3, #2
 8013e3c:	b21b      	sxth	r3, r3
 8013e3e:	b29b      	uxth	r3, r3
 8013e40:	1ad3      	subs	r3, r2, r3
 8013e42:	b29b      	uxth	r3, r3
 8013e44:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013e4e:	b29a      	uxth	r2, r3
 8013e50:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8013e54:	4413      	add	r3, r2
 8013e56:	b29b      	uxth	r3, r3
 8013e58:	b21a      	sxth	r2, r3
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013e64:	10db      	asrs	r3, r3, #3
 8013e66:	b21b      	sxth	r3, r3
 8013e68:	b29a      	uxth	r2, r3
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013e70:	b29b      	uxth	r3, r3
 8013e72:	4413      	add	r3, r2
 8013e74:	b29b      	uxth	r3, r3
 8013e76:	b21a      	sxth	r2, r3
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	2200      	movs	r2, #0
 8013e82:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8013e84:	4b35      	ldr	r3, [pc, #212]	; (8013f5c <tcp_receive+0x5e4>)
 8013e86:	881b      	ldrh	r3, [r3, #0]
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	f000 84e2 	beq.w	8014852 <tcp_receive+0xeda>
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	7d1b      	ldrb	r3, [r3, #20]
 8013e92:	2b06      	cmp	r3, #6
 8013e94:	f200 84dd 	bhi.w	8014852 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013e9c:	4b30      	ldr	r3, [pc, #192]	; (8013f60 <tcp_receive+0x5e8>)
 8013e9e:	681b      	ldr	r3, [r3, #0]
 8013ea0:	1ad3      	subs	r3, r2, r3
 8013ea2:	3b01      	subs	r3, #1
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	f2c0 808f 	blt.w	8013fc8 <tcp_receive+0x650>
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013eae:	4b2b      	ldr	r3, [pc, #172]	; (8013f5c <tcp_receive+0x5e4>)
 8013eb0:	881b      	ldrh	r3, [r3, #0]
 8013eb2:	4619      	mov	r1, r3
 8013eb4:	4b2a      	ldr	r3, [pc, #168]	; (8013f60 <tcp_receive+0x5e8>)
 8013eb6:	681b      	ldr	r3, [r3, #0]
 8013eb8:	440b      	add	r3, r1
 8013eba:	1ad3      	subs	r3, r2, r3
 8013ebc:	3301      	adds	r3, #1
 8013ebe:	2b00      	cmp	r3, #0
 8013ec0:	f300 8082 	bgt.w	8013fc8 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8013ec4:	4b27      	ldr	r3, [pc, #156]	; (8013f64 <tcp_receive+0x5ec>)
 8013ec6:	685b      	ldr	r3, [r3, #4]
 8013ec8:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013ece:	4b24      	ldr	r3, [pc, #144]	; (8013f60 <tcp_receive+0x5e8>)
 8013ed0:	681b      	ldr	r3, [r3, #0]
 8013ed2:	1ad3      	subs	r3, r2, r3
 8013ed4:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8013ed6:	4b23      	ldr	r3, [pc, #140]	; (8013f64 <tcp_receive+0x5ec>)
 8013ed8:	685b      	ldr	r3, [r3, #4]
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	d106      	bne.n	8013eec <tcp_receive+0x574>
 8013ede:	4b22      	ldr	r3, [pc, #136]	; (8013f68 <tcp_receive+0x5f0>)
 8013ee0:	f240 5294 	movw	r2, #1428	; 0x594
 8013ee4:	4921      	ldr	r1, [pc, #132]	; (8013f6c <tcp_receive+0x5f4>)
 8013ee6:	4822      	ldr	r0, [pc, #136]	; (8013f70 <tcp_receive+0x5f8>)
 8013ee8:	f005 fb28 	bl	801953c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8013eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013eee:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8013ef2:	4293      	cmp	r3, r2
 8013ef4:	d906      	bls.n	8013f04 <tcp_receive+0x58c>
 8013ef6:	4b1c      	ldr	r3, [pc, #112]	; (8013f68 <tcp_receive+0x5f0>)
 8013ef8:	f240 5295 	movw	r2, #1429	; 0x595
 8013efc:	491d      	ldr	r1, [pc, #116]	; (8013f74 <tcp_receive+0x5fc>)
 8013efe:	481c      	ldr	r0, [pc, #112]	; (8013f70 <tcp_receive+0x5f8>)
 8013f00:	f005 fb1c 	bl	801953c <iprintf>
      off = (u16_t)off32;
 8013f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f06:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8013f0a:	4b16      	ldr	r3, [pc, #88]	; (8013f64 <tcp_receive+0x5ec>)
 8013f0c:	685b      	ldr	r3, [r3, #4]
 8013f0e:	891b      	ldrh	r3, [r3, #8]
 8013f10:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013f14:	429a      	cmp	r2, r3
 8013f16:	d906      	bls.n	8013f26 <tcp_receive+0x5ae>
 8013f18:	4b13      	ldr	r3, [pc, #76]	; (8013f68 <tcp_receive+0x5f0>)
 8013f1a:	f240 5297 	movw	r2, #1431	; 0x597
 8013f1e:	4916      	ldr	r1, [pc, #88]	; (8013f78 <tcp_receive+0x600>)
 8013f20:	4813      	ldr	r0, [pc, #76]	; (8013f70 <tcp_receive+0x5f8>)
 8013f22:	f005 fb0b 	bl	801953c <iprintf>
      inseg.len -= off;
 8013f26:	4b0f      	ldr	r3, [pc, #60]	; (8013f64 <tcp_receive+0x5ec>)
 8013f28:	891a      	ldrh	r2, [r3, #8]
 8013f2a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013f2e:	1ad3      	subs	r3, r2, r3
 8013f30:	b29a      	uxth	r2, r3
 8013f32:	4b0c      	ldr	r3, [pc, #48]	; (8013f64 <tcp_receive+0x5ec>)
 8013f34:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8013f36:	4b0b      	ldr	r3, [pc, #44]	; (8013f64 <tcp_receive+0x5ec>)
 8013f38:	685b      	ldr	r3, [r3, #4]
 8013f3a:	891a      	ldrh	r2, [r3, #8]
 8013f3c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013f40:	1ad3      	subs	r3, r2, r3
 8013f42:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8013f44:	e02a      	b.n	8013f9c <tcp_receive+0x624>
 8013f46:	bf00      	nop
 8013f48:	0801d274 	.word	0x0801d274
 8013f4c:	0801d27c 	.word	0x0801d27c
 8013f50:	20008108 	.word	0x20008108
 8013f54:	20008104 	.word	0x20008104
 8013f58:	200080c8 	.word	0x200080c8
 8013f5c:	2000810a 	.word	0x2000810a
 8013f60:	20008100 	.word	0x20008100
 8013f64:	200080e0 	.word	0x200080e0
 8013f68:	0801cf0c 	.word	0x0801cf0c
 8013f6c:	0801d284 	.word	0x0801d284
 8013f70:	0801cf58 	.word	0x0801cf58
 8013f74:	0801d294 	.word	0x0801d294
 8013f78:	0801d2a4 	.word	0x0801d2a4
        off -= p->len;
 8013f7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013f7e:	895b      	ldrh	r3, [r3, #10]
 8013f80:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013f84:	1ad3      	subs	r3, r2, r3
 8013f86:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8013f8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013f8c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013f8e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8013f90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013f92:	2200      	movs	r2, #0
 8013f94:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8013f96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013f98:	681b      	ldr	r3, [r3, #0]
 8013f9a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8013f9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013f9e:	895b      	ldrh	r3, [r3, #10]
 8013fa0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013fa4:	429a      	cmp	r2, r3
 8013fa6:	d8e9      	bhi.n	8013f7c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8013fa8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013fac:	4619      	mov	r1, r3
 8013fae:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8013fb0:	f7fc fb7c 	bl	80106ac <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fb8:	4a91      	ldr	r2, [pc, #580]	; (8014200 <tcp_receive+0x888>)
 8013fba:	6013      	str	r3, [r2, #0]
 8013fbc:	4b91      	ldr	r3, [pc, #580]	; (8014204 <tcp_receive+0x88c>)
 8013fbe:	68db      	ldr	r3, [r3, #12]
 8013fc0:	4a8f      	ldr	r2, [pc, #572]	; (8014200 <tcp_receive+0x888>)
 8013fc2:	6812      	ldr	r2, [r2, #0]
 8013fc4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8013fc6:	e00d      	b.n	8013fe4 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8013fc8:	4b8d      	ldr	r3, [pc, #564]	; (8014200 <tcp_receive+0x888>)
 8013fca:	681a      	ldr	r2, [r3, #0]
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fd0:	1ad3      	subs	r3, r2, r3
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	da06      	bge.n	8013fe4 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	8b5b      	ldrh	r3, [r3, #26]
 8013fda:	f043 0302 	orr.w	r3, r3, #2
 8013fde:	b29a      	uxth	r2, r3
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013fe4:	4b86      	ldr	r3, [pc, #536]	; (8014200 <tcp_receive+0x888>)
 8013fe6:	681a      	ldr	r2, [r3, #0]
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fec:	1ad3      	subs	r3, r2, r3
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	f2c0 842a 	blt.w	8014848 <tcp_receive+0xed0>
 8013ff4:	4b82      	ldr	r3, [pc, #520]	; (8014200 <tcp_receive+0x888>)
 8013ff6:	681a      	ldr	r2, [r3, #0]
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ffc:	6879      	ldr	r1, [r7, #4]
 8013ffe:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014000:	440b      	add	r3, r1
 8014002:	1ad3      	subs	r3, r2, r3
 8014004:	3301      	adds	r3, #1
 8014006:	2b00      	cmp	r3, #0
 8014008:	f300 841e 	bgt.w	8014848 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014010:	4b7b      	ldr	r3, [pc, #492]	; (8014200 <tcp_receive+0x888>)
 8014012:	681b      	ldr	r3, [r3, #0]
 8014014:	429a      	cmp	r2, r3
 8014016:	f040 829a 	bne.w	801454e <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801401a:	4b7a      	ldr	r3, [pc, #488]	; (8014204 <tcp_receive+0x88c>)
 801401c:	891c      	ldrh	r4, [r3, #8]
 801401e:	4b79      	ldr	r3, [pc, #484]	; (8014204 <tcp_receive+0x88c>)
 8014020:	68db      	ldr	r3, [r3, #12]
 8014022:	899b      	ldrh	r3, [r3, #12]
 8014024:	b29b      	uxth	r3, r3
 8014026:	4618      	mov	r0, r3
 8014028:	f7fa ffd0 	bl	800efcc <lwip_htons>
 801402c:	4603      	mov	r3, r0
 801402e:	b2db      	uxtb	r3, r3
 8014030:	f003 0303 	and.w	r3, r3, #3
 8014034:	2b00      	cmp	r3, #0
 8014036:	d001      	beq.n	801403c <tcp_receive+0x6c4>
 8014038:	2301      	movs	r3, #1
 801403a:	e000      	b.n	801403e <tcp_receive+0x6c6>
 801403c:	2300      	movs	r3, #0
 801403e:	4423      	add	r3, r4
 8014040:	b29a      	uxth	r2, r3
 8014042:	4b71      	ldr	r3, [pc, #452]	; (8014208 <tcp_receive+0x890>)
 8014044:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801404a:	4b6f      	ldr	r3, [pc, #444]	; (8014208 <tcp_receive+0x890>)
 801404c:	881b      	ldrh	r3, [r3, #0]
 801404e:	429a      	cmp	r2, r3
 8014050:	d275      	bcs.n	801413e <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014052:	4b6c      	ldr	r3, [pc, #432]	; (8014204 <tcp_receive+0x88c>)
 8014054:	68db      	ldr	r3, [r3, #12]
 8014056:	899b      	ldrh	r3, [r3, #12]
 8014058:	b29b      	uxth	r3, r3
 801405a:	4618      	mov	r0, r3
 801405c:	f7fa ffb6 	bl	800efcc <lwip_htons>
 8014060:	4603      	mov	r3, r0
 8014062:	b2db      	uxtb	r3, r3
 8014064:	f003 0301 	and.w	r3, r3, #1
 8014068:	2b00      	cmp	r3, #0
 801406a:	d01f      	beq.n	80140ac <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801406c:	4b65      	ldr	r3, [pc, #404]	; (8014204 <tcp_receive+0x88c>)
 801406e:	68db      	ldr	r3, [r3, #12]
 8014070:	899b      	ldrh	r3, [r3, #12]
 8014072:	b29b      	uxth	r3, r3
 8014074:	b21b      	sxth	r3, r3
 8014076:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801407a:	b21c      	sxth	r4, r3
 801407c:	4b61      	ldr	r3, [pc, #388]	; (8014204 <tcp_receive+0x88c>)
 801407e:	68db      	ldr	r3, [r3, #12]
 8014080:	899b      	ldrh	r3, [r3, #12]
 8014082:	b29b      	uxth	r3, r3
 8014084:	4618      	mov	r0, r3
 8014086:	f7fa ffa1 	bl	800efcc <lwip_htons>
 801408a:	4603      	mov	r3, r0
 801408c:	b2db      	uxtb	r3, r3
 801408e:	b29b      	uxth	r3, r3
 8014090:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8014094:	b29b      	uxth	r3, r3
 8014096:	4618      	mov	r0, r3
 8014098:	f7fa ff98 	bl	800efcc <lwip_htons>
 801409c:	4603      	mov	r3, r0
 801409e:	b21b      	sxth	r3, r3
 80140a0:	4323      	orrs	r3, r4
 80140a2:	b21a      	sxth	r2, r3
 80140a4:	4b57      	ldr	r3, [pc, #348]	; (8014204 <tcp_receive+0x88c>)
 80140a6:	68db      	ldr	r3, [r3, #12]
 80140a8:	b292      	uxth	r2, r2
 80140aa:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80140b0:	4b54      	ldr	r3, [pc, #336]	; (8014204 <tcp_receive+0x88c>)
 80140b2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80140b4:	4b53      	ldr	r3, [pc, #332]	; (8014204 <tcp_receive+0x88c>)
 80140b6:	68db      	ldr	r3, [r3, #12]
 80140b8:	899b      	ldrh	r3, [r3, #12]
 80140ba:	b29b      	uxth	r3, r3
 80140bc:	4618      	mov	r0, r3
 80140be:	f7fa ff85 	bl	800efcc <lwip_htons>
 80140c2:	4603      	mov	r3, r0
 80140c4:	b2db      	uxtb	r3, r3
 80140c6:	f003 0302 	and.w	r3, r3, #2
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	d005      	beq.n	80140da <tcp_receive+0x762>
            inseg.len -= 1;
 80140ce:	4b4d      	ldr	r3, [pc, #308]	; (8014204 <tcp_receive+0x88c>)
 80140d0:	891b      	ldrh	r3, [r3, #8]
 80140d2:	3b01      	subs	r3, #1
 80140d4:	b29a      	uxth	r2, r3
 80140d6:	4b4b      	ldr	r3, [pc, #300]	; (8014204 <tcp_receive+0x88c>)
 80140d8:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80140da:	4b4a      	ldr	r3, [pc, #296]	; (8014204 <tcp_receive+0x88c>)
 80140dc:	685b      	ldr	r3, [r3, #4]
 80140de:	4a49      	ldr	r2, [pc, #292]	; (8014204 <tcp_receive+0x88c>)
 80140e0:	8912      	ldrh	r2, [r2, #8]
 80140e2:	4611      	mov	r1, r2
 80140e4:	4618      	mov	r0, r3
 80140e6:	f7fc f9e1 	bl	80104ac <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80140ea:	4b46      	ldr	r3, [pc, #280]	; (8014204 <tcp_receive+0x88c>)
 80140ec:	891c      	ldrh	r4, [r3, #8]
 80140ee:	4b45      	ldr	r3, [pc, #276]	; (8014204 <tcp_receive+0x88c>)
 80140f0:	68db      	ldr	r3, [r3, #12]
 80140f2:	899b      	ldrh	r3, [r3, #12]
 80140f4:	b29b      	uxth	r3, r3
 80140f6:	4618      	mov	r0, r3
 80140f8:	f7fa ff68 	bl	800efcc <lwip_htons>
 80140fc:	4603      	mov	r3, r0
 80140fe:	b2db      	uxtb	r3, r3
 8014100:	f003 0303 	and.w	r3, r3, #3
 8014104:	2b00      	cmp	r3, #0
 8014106:	d001      	beq.n	801410c <tcp_receive+0x794>
 8014108:	2301      	movs	r3, #1
 801410a:	e000      	b.n	801410e <tcp_receive+0x796>
 801410c:	2300      	movs	r3, #0
 801410e:	4423      	add	r3, r4
 8014110:	b29a      	uxth	r2, r3
 8014112:	4b3d      	ldr	r3, [pc, #244]	; (8014208 <tcp_receive+0x890>)
 8014114:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8014116:	4b3c      	ldr	r3, [pc, #240]	; (8014208 <tcp_receive+0x890>)
 8014118:	881b      	ldrh	r3, [r3, #0]
 801411a:	461a      	mov	r2, r3
 801411c:	4b38      	ldr	r3, [pc, #224]	; (8014200 <tcp_receive+0x888>)
 801411e:	681b      	ldr	r3, [r3, #0]
 8014120:	441a      	add	r2, r3
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014126:	6879      	ldr	r1, [r7, #4]
 8014128:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801412a:	440b      	add	r3, r1
 801412c:	429a      	cmp	r2, r3
 801412e:	d006      	beq.n	801413e <tcp_receive+0x7c6>
 8014130:	4b36      	ldr	r3, [pc, #216]	; (801420c <tcp_receive+0x894>)
 8014132:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8014136:	4936      	ldr	r1, [pc, #216]	; (8014210 <tcp_receive+0x898>)
 8014138:	4836      	ldr	r0, [pc, #216]	; (8014214 <tcp_receive+0x89c>)
 801413a:	f005 f9ff 	bl	801953c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014142:	2b00      	cmp	r3, #0
 8014144:	f000 80e7 	beq.w	8014316 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014148:	4b2e      	ldr	r3, [pc, #184]	; (8014204 <tcp_receive+0x88c>)
 801414a:	68db      	ldr	r3, [r3, #12]
 801414c:	899b      	ldrh	r3, [r3, #12]
 801414e:	b29b      	uxth	r3, r3
 8014150:	4618      	mov	r0, r3
 8014152:	f7fa ff3b 	bl	800efcc <lwip_htons>
 8014156:	4603      	mov	r3, r0
 8014158:	b2db      	uxtb	r3, r3
 801415a:	f003 0301 	and.w	r3, r3, #1
 801415e:	2b00      	cmp	r3, #0
 8014160:	d010      	beq.n	8014184 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8014162:	e00a      	b.n	801417a <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014168:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801416e:	681a      	ldr	r2, [r3, #0]
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8014174:	68f8      	ldr	r0, [r7, #12]
 8014176:	f7fd fd92 	bl	8011c9e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801417e:	2b00      	cmp	r3, #0
 8014180:	d1f0      	bne.n	8014164 <tcp_receive+0x7ec>
 8014182:	e0c8      	b.n	8014316 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014188:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801418a:	e052      	b.n	8014232 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801418c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801418e:	68db      	ldr	r3, [r3, #12]
 8014190:	899b      	ldrh	r3, [r3, #12]
 8014192:	b29b      	uxth	r3, r3
 8014194:	4618      	mov	r0, r3
 8014196:	f7fa ff19 	bl	800efcc <lwip_htons>
 801419a:	4603      	mov	r3, r0
 801419c:	b2db      	uxtb	r3, r3
 801419e:	f003 0301 	and.w	r3, r3, #1
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	d03d      	beq.n	8014222 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80141a6:	4b17      	ldr	r3, [pc, #92]	; (8014204 <tcp_receive+0x88c>)
 80141a8:	68db      	ldr	r3, [r3, #12]
 80141aa:	899b      	ldrh	r3, [r3, #12]
 80141ac:	b29b      	uxth	r3, r3
 80141ae:	4618      	mov	r0, r3
 80141b0:	f7fa ff0c 	bl	800efcc <lwip_htons>
 80141b4:	4603      	mov	r3, r0
 80141b6:	b2db      	uxtb	r3, r3
 80141b8:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d130      	bne.n	8014222 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80141c0:	4b10      	ldr	r3, [pc, #64]	; (8014204 <tcp_receive+0x88c>)
 80141c2:	68db      	ldr	r3, [r3, #12]
 80141c4:	899b      	ldrh	r3, [r3, #12]
 80141c6:	b29c      	uxth	r4, r3
 80141c8:	2001      	movs	r0, #1
 80141ca:	f7fa feff 	bl	800efcc <lwip_htons>
 80141ce:	4603      	mov	r3, r0
 80141d0:	461a      	mov	r2, r3
 80141d2:	4b0c      	ldr	r3, [pc, #48]	; (8014204 <tcp_receive+0x88c>)
 80141d4:	68db      	ldr	r3, [r3, #12]
 80141d6:	4322      	orrs	r2, r4
 80141d8:	b292      	uxth	r2, r2
 80141da:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80141dc:	4b09      	ldr	r3, [pc, #36]	; (8014204 <tcp_receive+0x88c>)
 80141de:	891c      	ldrh	r4, [r3, #8]
 80141e0:	4b08      	ldr	r3, [pc, #32]	; (8014204 <tcp_receive+0x88c>)
 80141e2:	68db      	ldr	r3, [r3, #12]
 80141e4:	899b      	ldrh	r3, [r3, #12]
 80141e6:	b29b      	uxth	r3, r3
 80141e8:	4618      	mov	r0, r3
 80141ea:	f7fa feef 	bl	800efcc <lwip_htons>
 80141ee:	4603      	mov	r3, r0
 80141f0:	b2db      	uxtb	r3, r3
 80141f2:	f003 0303 	and.w	r3, r3, #3
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	d00e      	beq.n	8014218 <tcp_receive+0x8a0>
 80141fa:	2301      	movs	r3, #1
 80141fc:	e00d      	b.n	801421a <tcp_receive+0x8a2>
 80141fe:	bf00      	nop
 8014200:	20008100 	.word	0x20008100
 8014204:	200080e0 	.word	0x200080e0
 8014208:	2000810a 	.word	0x2000810a
 801420c:	0801cf0c 	.word	0x0801cf0c
 8014210:	0801d2b4 	.word	0x0801d2b4
 8014214:	0801cf58 	.word	0x0801cf58
 8014218:	2300      	movs	r3, #0
 801421a:	4423      	add	r3, r4
 801421c:	b29a      	uxth	r2, r3
 801421e:	4b98      	ldr	r3, [pc, #608]	; (8014480 <tcp_receive+0xb08>)
 8014220:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8014222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014224:	613b      	str	r3, [r7, #16]
              next = next->next;
 8014226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014228:	681b      	ldr	r3, [r3, #0]
 801422a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 801422c:	6938      	ldr	r0, [r7, #16]
 801422e:	f7fd fd36 	bl	8011c9e <tcp_seg_free>
            while (next &&
 8014232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014234:	2b00      	cmp	r3, #0
 8014236:	d00e      	beq.n	8014256 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8014238:	4b91      	ldr	r3, [pc, #580]	; (8014480 <tcp_receive+0xb08>)
 801423a:	881b      	ldrh	r3, [r3, #0]
 801423c:	461a      	mov	r2, r3
 801423e:	4b91      	ldr	r3, [pc, #580]	; (8014484 <tcp_receive+0xb0c>)
 8014240:	681b      	ldr	r3, [r3, #0]
 8014242:	441a      	add	r2, r3
 8014244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014246:	68db      	ldr	r3, [r3, #12]
 8014248:	685b      	ldr	r3, [r3, #4]
 801424a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801424c:	8909      	ldrh	r1, [r1, #8]
 801424e:	440b      	add	r3, r1
 8014250:	1ad3      	subs	r3, r2, r3
            while (next &&
 8014252:	2b00      	cmp	r3, #0
 8014254:	da9a      	bge.n	801418c <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8014256:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014258:	2b00      	cmp	r3, #0
 801425a:	d059      	beq.n	8014310 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 801425c:	4b88      	ldr	r3, [pc, #544]	; (8014480 <tcp_receive+0xb08>)
 801425e:	881b      	ldrh	r3, [r3, #0]
 8014260:	461a      	mov	r2, r3
 8014262:	4b88      	ldr	r3, [pc, #544]	; (8014484 <tcp_receive+0xb0c>)
 8014264:	681b      	ldr	r3, [r3, #0]
 8014266:	441a      	add	r2, r3
 8014268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801426a:	68db      	ldr	r3, [r3, #12]
 801426c:	685b      	ldr	r3, [r3, #4]
 801426e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8014270:	2b00      	cmp	r3, #0
 8014272:	dd4d      	ble.n	8014310 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8014274:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014276:	68db      	ldr	r3, [r3, #12]
 8014278:	685b      	ldr	r3, [r3, #4]
 801427a:	b29a      	uxth	r2, r3
 801427c:	4b81      	ldr	r3, [pc, #516]	; (8014484 <tcp_receive+0xb0c>)
 801427e:	681b      	ldr	r3, [r3, #0]
 8014280:	b29b      	uxth	r3, r3
 8014282:	1ad3      	subs	r3, r2, r3
 8014284:	b29a      	uxth	r2, r3
 8014286:	4b80      	ldr	r3, [pc, #512]	; (8014488 <tcp_receive+0xb10>)
 8014288:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801428a:	4b7f      	ldr	r3, [pc, #508]	; (8014488 <tcp_receive+0xb10>)
 801428c:	68db      	ldr	r3, [r3, #12]
 801428e:	899b      	ldrh	r3, [r3, #12]
 8014290:	b29b      	uxth	r3, r3
 8014292:	4618      	mov	r0, r3
 8014294:	f7fa fe9a 	bl	800efcc <lwip_htons>
 8014298:	4603      	mov	r3, r0
 801429a:	b2db      	uxtb	r3, r3
 801429c:	f003 0302 	and.w	r3, r3, #2
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d005      	beq.n	80142b0 <tcp_receive+0x938>
                inseg.len -= 1;
 80142a4:	4b78      	ldr	r3, [pc, #480]	; (8014488 <tcp_receive+0xb10>)
 80142a6:	891b      	ldrh	r3, [r3, #8]
 80142a8:	3b01      	subs	r3, #1
 80142aa:	b29a      	uxth	r2, r3
 80142ac:	4b76      	ldr	r3, [pc, #472]	; (8014488 <tcp_receive+0xb10>)
 80142ae:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80142b0:	4b75      	ldr	r3, [pc, #468]	; (8014488 <tcp_receive+0xb10>)
 80142b2:	685b      	ldr	r3, [r3, #4]
 80142b4:	4a74      	ldr	r2, [pc, #464]	; (8014488 <tcp_receive+0xb10>)
 80142b6:	8912      	ldrh	r2, [r2, #8]
 80142b8:	4611      	mov	r1, r2
 80142ba:	4618      	mov	r0, r3
 80142bc:	f7fc f8f6 	bl	80104ac <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80142c0:	4b71      	ldr	r3, [pc, #452]	; (8014488 <tcp_receive+0xb10>)
 80142c2:	891c      	ldrh	r4, [r3, #8]
 80142c4:	4b70      	ldr	r3, [pc, #448]	; (8014488 <tcp_receive+0xb10>)
 80142c6:	68db      	ldr	r3, [r3, #12]
 80142c8:	899b      	ldrh	r3, [r3, #12]
 80142ca:	b29b      	uxth	r3, r3
 80142cc:	4618      	mov	r0, r3
 80142ce:	f7fa fe7d 	bl	800efcc <lwip_htons>
 80142d2:	4603      	mov	r3, r0
 80142d4:	b2db      	uxtb	r3, r3
 80142d6:	f003 0303 	and.w	r3, r3, #3
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d001      	beq.n	80142e2 <tcp_receive+0x96a>
 80142de:	2301      	movs	r3, #1
 80142e0:	e000      	b.n	80142e4 <tcp_receive+0x96c>
 80142e2:	2300      	movs	r3, #0
 80142e4:	4423      	add	r3, r4
 80142e6:	b29a      	uxth	r2, r3
 80142e8:	4b65      	ldr	r3, [pc, #404]	; (8014480 <tcp_receive+0xb08>)
 80142ea:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80142ec:	4b64      	ldr	r3, [pc, #400]	; (8014480 <tcp_receive+0xb08>)
 80142ee:	881b      	ldrh	r3, [r3, #0]
 80142f0:	461a      	mov	r2, r3
 80142f2:	4b64      	ldr	r3, [pc, #400]	; (8014484 <tcp_receive+0xb0c>)
 80142f4:	681b      	ldr	r3, [r3, #0]
 80142f6:	441a      	add	r2, r3
 80142f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80142fa:	68db      	ldr	r3, [r3, #12]
 80142fc:	685b      	ldr	r3, [r3, #4]
 80142fe:	429a      	cmp	r2, r3
 8014300:	d006      	beq.n	8014310 <tcp_receive+0x998>
 8014302:	4b62      	ldr	r3, [pc, #392]	; (801448c <tcp_receive+0xb14>)
 8014304:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8014308:	4961      	ldr	r1, [pc, #388]	; (8014490 <tcp_receive+0xb18>)
 801430a:	4862      	ldr	r0, [pc, #392]	; (8014494 <tcp_receive+0xb1c>)
 801430c:	f005 f916 	bl	801953c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014314:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8014316:	4b5a      	ldr	r3, [pc, #360]	; (8014480 <tcp_receive+0xb08>)
 8014318:	881b      	ldrh	r3, [r3, #0]
 801431a:	461a      	mov	r2, r3
 801431c:	4b59      	ldr	r3, [pc, #356]	; (8014484 <tcp_receive+0xb0c>)
 801431e:	681b      	ldr	r3, [r3, #0]
 8014320:	441a      	add	r2, r3
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801432a:	4b55      	ldr	r3, [pc, #340]	; (8014480 <tcp_receive+0xb08>)
 801432c:	881b      	ldrh	r3, [r3, #0]
 801432e:	429a      	cmp	r2, r3
 8014330:	d206      	bcs.n	8014340 <tcp_receive+0x9c8>
 8014332:	4b56      	ldr	r3, [pc, #344]	; (801448c <tcp_receive+0xb14>)
 8014334:	f240 6207 	movw	r2, #1543	; 0x607
 8014338:	4957      	ldr	r1, [pc, #348]	; (8014498 <tcp_receive+0xb20>)
 801433a:	4856      	ldr	r0, [pc, #344]	; (8014494 <tcp_receive+0xb1c>)
 801433c:	f005 f8fe 	bl	801953c <iprintf>
        pcb->rcv_wnd -= tcplen;
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014344:	4b4e      	ldr	r3, [pc, #312]	; (8014480 <tcp_receive+0xb08>)
 8014346:	881b      	ldrh	r3, [r3, #0]
 8014348:	1ad3      	subs	r3, r2, r3
 801434a:	b29a      	uxth	r2, r3
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8014350:	6878      	ldr	r0, [r7, #4]
 8014352:	f7fc ffc5 	bl	80112e0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8014356:	4b4c      	ldr	r3, [pc, #304]	; (8014488 <tcp_receive+0xb10>)
 8014358:	685b      	ldr	r3, [r3, #4]
 801435a:	891b      	ldrh	r3, [r3, #8]
 801435c:	2b00      	cmp	r3, #0
 801435e:	d006      	beq.n	801436e <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8014360:	4b49      	ldr	r3, [pc, #292]	; (8014488 <tcp_receive+0xb10>)
 8014362:	685b      	ldr	r3, [r3, #4]
 8014364:	4a4d      	ldr	r2, [pc, #308]	; (801449c <tcp_receive+0xb24>)
 8014366:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8014368:	4b47      	ldr	r3, [pc, #284]	; (8014488 <tcp_receive+0xb10>)
 801436a:	2200      	movs	r2, #0
 801436c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801436e:	4b46      	ldr	r3, [pc, #280]	; (8014488 <tcp_receive+0xb10>)
 8014370:	68db      	ldr	r3, [r3, #12]
 8014372:	899b      	ldrh	r3, [r3, #12]
 8014374:	b29b      	uxth	r3, r3
 8014376:	4618      	mov	r0, r3
 8014378:	f7fa fe28 	bl	800efcc <lwip_htons>
 801437c:	4603      	mov	r3, r0
 801437e:	b2db      	uxtb	r3, r3
 8014380:	f003 0301 	and.w	r3, r3, #1
 8014384:	2b00      	cmp	r3, #0
 8014386:	f000 80b8 	beq.w	80144fa <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801438a:	4b45      	ldr	r3, [pc, #276]	; (80144a0 <tcp_receive+0xb28>)
 801438c:	781b      	ldrb	r3, [r3, #0]
 801438e:	f043 0320 	orr.w	r3, r3, #32
 8014392:	b2da      	uxtb	r2, r3
 8014394:	4b42      	ldr	r3, [pc, #264]	; (80144a0 <tcp_receive+0xb28>)
 8014396:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8014398:	e0af      	b.n	80144fa <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801439e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80143a4:	68db      	ldr	r3, [r3, #12]
 80143a6:	685b      	ldr	r3, [r3, #4]
 80143a8:	4a36      	ldr	r2, [pc, #216]	; (8014484 <tcp_receive+0xb0c>)
 80143aa:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80143ac:	68bb      	ldr	r3, [r7, #8]
 80143ae:	891b      	ldrh	r3, [r3, #8]
 80143b0:	461c      	mov	r4, r3
 80143b2:	68bb      	ldr	r3, [r7, #8]
 80143b4:	68db      	ldr	r3, [r3, #12]
 80143b6:	899b      	ldrh	r3, [r3, #12]
 80143b8:	b29b      	uxth	r3, r3
 80143ba:	4618      	mov	r0, r3
 80143bc:	f7fa fe06 	bl	800efcc <lwip_htons>
 80143c0:	4603      	mov	r3, r0
 80143c2:	b2db      	uxtb	r3, r3
 80143c4:	f003 0303 	and.w	r3, r3, #3
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d001      	beq.n	80143d0 <tcp_receive+0xa58>
 80143cc:	2301      	movs	r3, #1
 80143ce:	e000      	b.n	80143d2 <tcp_receive+0xa5a>
 80143d0:	2300      	movs	r3, #0
 80143d2:	191a      	adds	r2, r3, r4
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143d8:	441a      	add	r2, r3
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80143e2:	461c      	mov	r4, r3
 80143e4:	68bb      	ldr	r3, [r7, #8]
 80143e6:	891b      	ldrh	r3, [r3, #8]
 80143e8:	461d      	mov	r5, r3
 80143ea:	68bb      	ldr	r3, [r7, #8]
 80143ec:	68db      	ldr	r3, [r3, #12]
 80143ee:	899b      	ldrh	r3, [r3, #12]
 80143f0:	b29b      	uxth	r3, r3
 80143f2:	4618      	mov	r0, r3
 80143f4:	f7fa fdea 	bl	800efcc <lwip_htons>
 80143f8:	4603      	mov	r3, r0
 80143fa:	b2db      	uxtb	r3, r3
 80143fc:	f003 0303 	and.w	r3, r3, #3
 8014400:	2b00      	cmp	r3, #0
 8014402:	d001      	beq.n	8014408 <tcp_receive+0xa90>
 8014404:	2301      	movs	r3, #1
 8014406:	e000      	b.n	801440a <tcp_receive+0xa92>
 8014408:	2300      	movs	r3, #0
 801440a:	442b      	add	r3, r5
 801440c:	429c      	cmp	r4, r3
 801440e:	d206      	bcs.n	801441e <tcp_receive+0xaa6>
 8014410:	4b1e      	ldr	r3, [pc, #120]	; (801448c <tcp_receive+0xb14>)
 8014412:	f240 622b 	movw	r2, #1579	; 0x62b
 8014416:	4923      	ldr	r1, [pc, #140]	; (80144a4 <tcp_receive+0xb2c>)
 8014418:	481e      	ldr	r0, [pc, #120]	; (8014494 <tcp_receive+0xb1c>)
 801441a:	f005 f88f 	bl	801953c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801441e:	68bb      	ldr	r3, [r7, #8]
 8014420:	891b      	ldrh	r3, [r3, #8]
 8014422:	461c      	mov	r4, r3
 8014424:	68bb      	ldr	r3, [r7, #8]
 8014426:	68db      	ldr	r3, [r3, #12]
 8014428:	899b      	ldrh	r3, [r3, #12]
 801442a:	b29b      	uxth	r3, r3
 801442c:	4618      	mov	r0, r3
 801442e:	f7fa fdcd 	bl	800efcc <lwip_htons>
 8014432:	4603      	mov	r3, r0
 8014434:	b2db      	uxtb	r3, r3
 8014436:	f003 0303 	and.w	r3, r3, #3
 801443a:	2b00      	cmp	r3, #0
 801443c:	d001      	beq.n	8014442 <tcp_receive+0xaca>
 801443e:	2301      	movs	r3, #1
 8014440:	e000      	b.n	8014444 <tcp_receive+0xacc>
 8014442:	2300      	movs	r3, #0
 8014444:	1919      	adds	r1, r3, r4
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801444a:	b28b      	uxth	r3, r1
 801444c:	1ad3      	subs	r3, r2, r3
 801444e:	b29a      	uxth	r2, r3
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8014454:	6878      	ldr	r0, [r7, #4]
 8014456:	f7fc ff43 	bl	80112e0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801445a:	68bb      	ldr	r3, [r7, #8]
 801445c:	685b      	ldr	r3, [r3, #4]
 801445e:	891b      	ldrh	r3, [r3, #8]
 8014460:	2b00      	cmp	r3, #0
 8014462:	d028      	beq.n	80144b6 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8014464:	4b0d      	ldr	r3, [pc, #52]	; (801449c <tcp_receive+0xb24>)
 8014466:	681b      	ldr	r3, [r3, #0]
 8014468:	2b00      	cmp	r3, #0
 801446a:	d01d      	beq.n	80144a8 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 801446c:	4b0b      	ldr	r3, [pc, #44]	; (801449c <tcp_receive+0xb24>)
 801446e:	681a      	ldr	r2, [r3, #0]
 8014470:	68bb      	ldr	r3, [r7, #8]
 8014472:	685b      	ldr	r3, [r3, #4]
 8014474:	4619      	mov	r1, r3
 8014476:	4610      	mov	r0, r2
 8014478:	f7fc fa60 	bl	801093c <pbuf_cat>
 801447c:	e018      	b.n	80144b0 <tcp_receive+0xb38>
 801447e:	bf00      	nop
 8014480:	2000810a 	.word	0x2000810a
 8014484:	20008100 	.word	0x20008100
 8014488:	200080e0 	.word	0x200080e0
 801448c:	0801cf0c 	.word	0x0801cf0c
 8014490:	0801d2ec 	.word	0x0801d2ec
 8014494:	0801cf58 	.word	0x0801cf58
 8014498:	0801d328 	.word	0x0801d328
 801449c:	20008110 	.word	0x20008110
 80144a0:	2000810d 	.word	0x2000810d
 80144a4:	0801d348 	.word	0x0801d348
            } else {
              recv_data = cseg->p;
 80144a8:	68bb      	ldr	r3, [r7, #8]
 80144aa:	685b      	ldr	r3, [r3, #4]
 80144ac:	4a70      	ldr	r2, [pc, #448]	; (8014670 <tcp_receive+0xcf8>)
 80144ae:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80144b0:	68bb      	ldr	r3, [r7, #8]
 80144b2:	2200      	movs	r2, #0
 80144b4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80144b6:	68bb      	ldr	r3, [r7, #8]
 80144b8:	68db      	ldr	r3, [r3, #12]
 80144ba:	899b      	ldrh	r3, [r3, #12]
 80144bc:	b29b      	uxth	r3, r3
 80144be:	4618      	mov	r0, r3
 80144c0:	f7fa fd84 	bl	800efcc <lwip_htons>
 80144c4:	4603      	mov	r3, r0
 80144c6:	b2db      	uxtb	r3, r3
 80144c8:	f003 0301 	and.w	r3, r3, #1
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d00d      	beq.n	80144ec <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80144d0:	4b68      	ldr	r3, [pc, #416]	; (8014674 <tcp_receive+0xcfc>)
 80144d2:	781b      	ldrb	r3, [r3, #0]
 80144d4:	f043 0320 	orr.w	r3, r3, #32
 80144d8:	b2da      	uxtb	r2, r3
 80144da:	4b66      	ldr	r3, [pc, #408]	; (8014674 <tcp_receive+0xcfc>)
 80144dc:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	7d1b      	ldrb	r3, [r3, #20]
 80144e2:	2b04      	cmp	r3, #4
 80144e4:	d102      	bne.n	80144ec <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	2207      	movs	r2, #7
 80144ea:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80144ec:	68bb      	ldr	r3, [r7, #8]
 80144ee:	681a      	ldr	r2, [r3, #0]
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80144f4:	68b8      	ldr	r0, [r7, #8]
 80144f6:	f7fd fbd2 	bl	8011c9e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80144fa:	687b      	ldr	r3, [r7, #4]
 80144fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80144fe:	2b00      	cmp	r3, #0
 8014500:	d008      	beq.n	8014514 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014506:	68db      	ldr	r3, [r3, #12]
 8014508:	685a      	ldr	r2, [r3, #4]
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801450e:	429a      	cmp	r2, r3
 8014510:	f43f af43 	beq.w	801439a <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	8b5b      	ldrh	r3, [r3, #26]
 8014518:	f003 0301 	and.w	r3, r3, #1
 801451c:	2b00      	cmp	r3, #0
 801451e:	d00e      	beq.n	801453e <tcp_receive+0xbc6>
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	8b5b      	ldrh	r3, [r3, #26]
 8014524:	f023 0301 	bic.w	r3, r3, #1
 8014528:	b29a      	uxth	r2, r3
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	835a      	strh	r2, [r3, #26]
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	8b5b      	ldrh	r3, [r3, #26]
 8014532:	f043 0302 	orr.w	r3, r3, #2
 8014536:	b29a      	uxth	r2, r3
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801453c:	e188      	b.n	8014850 <tcp_receive+0xed8>
        tcp_ack(pcb);
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	8b5b      	ldrh	r3, [r3, #26]
 8014542:	f043 0301 	orr.w	r3, r3, #1
 8014546:	b29a      	uxth	r2, r3
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801454c:	e180      	b.n	8014850 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014552:	2b00      	cmp	r3, #0
 8014554:	d106      	bne.n	8014564 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8014556:	4848      	ldr	r0, [pc, #288]	; (8014678 <tcp_receive+0xd00>)
 8014558:	f7fd fbba 	bl	8011cd0 <tcp_seg_copy>
 801455c:	4602      	mov	r2, r0
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	675a      	str	r2, [r3, #116]	; 0x74
 8014562:	e16d      	b.n	8014840 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8014564:	2300      	movs	r3, #0
 8014566:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801456c:	63bb      	str	r3, [r7, #56]	; 0x38
 801456e:	e157      	b.n	8014820 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8014570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014572:	68db      	ldr	r3, [r3, #12]
 8014574:	685a      	ldr	r2, [r3, #4]
 8014576:	4b41      	ldr	r3, [pc, #260]	; (801467c <tcp_receive+0xd04>)
 8014578:	681b      	ldr	r3, [r3, #0]
 801457a:	429a      	cmp	r2, r3
 801457c:	d11d      	bne.n	80145ba <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801457e:	4b3e      	ldr	r3, [pc, #248]	; (8014678 <tcp_receive+0xd00>)
 8014580:	891a      	ldrh	r2, [r3, #8]
 8014582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014584:	891b      	ldrh	r3, [r3, #8]
 8014586:	429a      	cmp	r2, r3
 8014588:	f240 814f 	bls.w	801482a <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801458c:	483a      	ldr	r0, [pc, #232]	; (8014678 <tcp_receive+0xd00>)
 801458e:	f7fd fb9f 	bl	8011cd0 <tcp_seg_copy>
 8014592:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8014594:	697b      	ldr	r3, [r7, #20]
 8014596:	2b00      	cmp	r3, #0
 8014598:	f000 8149 	beq.w	801482e <tcp_receive+0xeb6>
                  if (prev != NULL) {
 801459c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801459e:	2b00      	cmp	r3, #0
 80145a0:	d003      	beq.n	80145aa <tcp_receive+0xc32>
                    prev->next = cseg;
 80145a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80145a4:	697a      	ldr	r2, [r7, #20]
 80145a6:	601a      	str	r2, [r3, #0]
 80145a8:	e002      	b.n	80145b0 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	697a      	ldr	r2, [r7, #20]
 80145ae:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80145b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80145b2:	6978      	ldr	r0, [r7, #20]
 80145b4:	f7ff f8dc 	bl	8013770 <tcp_oos_insert_segment>
                }
                break;
 80145b8:	e139      	b.n	801482e <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80145ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80145bc:	2b00      	cmp	r3, #0
 80145be:	d117      	bne.n	80145f0 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80145c0:	4b2e      	ldr	r3, [pc, #184]	; (801467c <tcp_receive+0xd04>)
 80145c2:	681a      	ldr	r2, [r3, #0]
 80145c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145c6:	68db      	ldr	r3, [r3, #12]
 80145c8:	685b      	ldr	r3, [r3, #4]
 80145ca:	1ad3      	subs	r3, r2, r3
 80145cc:	2b00      	cmp	r3, #0
 80145ce:	da57      	bge.n	8014680 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80145d0:	4829      	ldr	r0, [pc, #164]	; (8014678 <tcp_receive+0xd00>)
 80145d2:	f7fd fb7d 	bl	8011cd0 <tcp_seg_copy>
 80145d6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80145d8:	69bb      	ldr	r3, [r7, #24]
 80145da:	2b00      	cmp	r3, #0
 80145dc:	f000 8129 	beq.w	8014832 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	69ba      	ldr	r2, [r7, #24]
 80145e4:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80145e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80145e8:	69b8      	ldr	r0, [r7, #24]
 80145ea:	f7ff f8c1 	bl	8013770 <tcp_oos_insert_segment>
                  }
                  break;
 80145ee:	e120      	b.n	8014832 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80145f0:	4b22      	ldr	r3, [pc, #136]	; (801467c <tcp_receive+0xd04>)
 80145f2:	681a      	ldr	r2, [r3, #0]
 80145f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80145f6:	68db      	ldr	r3, [r3, #12]
 80145f8:	685b      	ldr	r3, [r3, #4]
 80145fa:	1ad3      	subs	r3, r2, r3
 80145fc:	3b01      	subs	r3, #1
 80145fe:	2b00      	cmp	r3, #0
 8014600:	db3e      	blt.n	8014680 <tcp_receive+0xd08>
 8014602:	4b1e      	ldr	r3, [pc, #120]	; (801467c <tcp_receive+0xd04>)
 8014604:	681a      	ldr	r2, [r3, #0]
 8014606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014608:	68db      	ldr	r3, [r3, #12]
 801460a:	685b      	ldr	r3, [r3, #4]
 801460c:	1ad3      	subs	r3, r2, r3
 801460e:	3301      	adds	r3, #1
 8014610:	2b00      	cmp	r3, #0
 8014612:	dc35      	bgt.n	8014680 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014614:	4818      	ldr	r0, [pc, #96]	; (8014678 <tcp_receive+0xd00>)
 8014616:	f7fd fb5b 	bl	8011cd0 <tcp_seg_copy>
 801461a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801461c:	69fb      	ldr	r3, [r7, #28]
 801461e:	2b00      	cmp	r3, #0
 8014620:	f000 8109 	beq.w	8014836 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8014624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014626:	68db      	ldr	r3, [r3, #12]
 8014628:	685b      	ldr	r3, [r3, #4]
 801462a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801462c:	8912      	ldrh	r2, [r2, #8]
 801462e:	441a      	add	r2, r3
 8014630:	4b12      	ldr	r3, [pc, #72]	; (801467c <tcp_receive+0xd04>)
 8014632:	681b      	ldr	r3, [r3, #0]
 8014634:	1ad3      	subs	r3, r2, r3
 8014636:	2b00      	cmp	r3, #0
 8014638:	dd12      	ble.n	8014660 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801463a:	4b10      	ldr	r3, [pc, #64]	; (801467c <tcp_receive+0xd04>)
 801463c:	681b      	ldr	r3, [r3, #0]
 801463e:	b29a      	uxth	r2, r3
 8014640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014642:	68db      	ldr	r3, [r3, #12]
 8014644:	685b      	ldr	r3, [r3, #4]
 8014646:	b29b      	uxth	r3, r3
 8014648:	1ad3      	subs	r3, r2, r3
 801464a:	b29a      	uxth	r2, r3
 801464c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801464e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8014650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014652:	685a      	ldr	r2, [r3, #4]
 8014654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014656:	891b      	ldrh	r3, [r3, #8]
 8014658:	4619      	mov	r1, r3
 801465a:	4610      	mov	r0, r2
 801465c:	f7fb ff26 	bl	80104ac <pbuf_realloc>
                    }
                    prev->next = cseg;
 8014660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014662:	69fa      	ldr	r2, [r7, #28]
 8014664:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8014666:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014668:	69f8      	ldr	r0, [r7, #28]
 801466a:	f7ff f881 	bl	8013770 <tcp_oos_insert_segment>
                  }
                  break;
 801466e:	e0e2      	b.n	8014836 <tcp_receive+0xebe>
 8014670:	20008110 	.word	0x20008110
 8014674:	2000810d 	.word	0x2000810d
 8014678:	200080e0 	.word	0x200080e0
 801467c:	20008100 	.word	0x20008100
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8014680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014682:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8014684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014686:	681b      	ldr	r3, [r3, #0]
 8014688:	2b00      	cmp	r3, #0
 801468a:	f040 80c6 	bne.w	801481a <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801468e:	4b80      	ldr	r3, [pc, #512]	; (8014890 <tcp_receive+0xf18>)
 8014690:	681a      	ldr	r2, [r3, #0]
 8014692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014694:	68db      	ldr	r3, [r3, #12]
 8014696:	685b      	ldr	r3, [r3, #4]
 8014698:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801469a:	2b00      	cmp	r3, #0
 801469c:	f340 80bd 	ble.w	801481a <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80146a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146a2:	68db      	ldr	r3, [r3, #12]
 80146a4:	899b      	ldrh	r3, [r3, #12]
 80146a6:	b29b      	uxth	r3, r3
 80146a8:	4618      	mov	r0, r3
 80146aa:	f7fa fc8f 	bl	800efcc <lwip_htons>
 80146ae:	4603      	mov	r3, r0
 80146b0:	b2db      	uxtb	r3, r3
 80146b2:	f003 0301 	and.w	r3, r3, #1
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	f040 80bf 	bne.w	801483a <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80146bc:	4875      	ldr	r0, [pc, #468]	; (8014894 <tcp_receive+0xf1c>)
 80146be:	f7fd fb07 	bl	8011cd0 <tcp_seg_copy>
 80146c2:	4602      	mov	r2, r0
 80146c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146c6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80146c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146ca:	681b      	ldr	r3, [r3, #0]
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	f000 80b6 	beq.w	801483e <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80146d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146d4:	68db      	ldr	r3, [r3, #12]
 80146d6:	685b      	ldr	r3, [r3, #4]
 80146d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80146da:	8912      	ldrh	r2, [r2, #8]
 80146dc:	441a      	add	r2, r3
 80146de:	4b6c      	ldr	r3, [pc, #432]	; (8014890 <tcp_receive+0xf18>)
 80146e0:	681b      	ldr	r3, [r3, #0]
 80146e2:	1ad3      	subs	r3, r2, r3
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	dd12      	ble.n	801470e <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80146e8:	4b69      	ldr	r3, [pc, #420]	; (8014890 <tcp_receive+0xf18>)
 80146ea:	681b      	ldr	r3, [r3, #0]
 80146ec:	b29a      	uxth	r2, r3
 80146ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146f0:	68db      	ldr	r3, [r3, #12]
 80146f2:	685b      	ldr	r3, [r3, #4]
 80146f4:	b29b      	uxth	r3, r3
 80146f6:	1ad3      	subs	r3, r2, r3
 80146f8:	b29a      	uxth	r2, r3
 80146fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146fc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80146fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014700:	685a      	ldr	r2, [r3, #4]
 8014702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014704:	891b      	ldrh	r3, [r3, #8]
 8014706:	4619      	mov	r1, r3
 8014708:	4610      	mov	r0, r2
 801470a:	f7fb fecf 	bl	80104ac <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801470e:	4b62      	ldr	r3, [pc, #392]	; (8014898 <tcp_receive+0xf20>)
 8014710:	881b      	ldrh	r3, [r3, #0]
 8014712:	461a      	mov	r2, r3
 8014714:	4b5e      	ldr	r3, [pc, #376]	; (8014890 <tcp_receive+0xf18>)
 8014716:	681b      	ldr	r3, [r3, #0]
 8014718:	441a      	add	r2, r3
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801471e:	6879      	ldr	r1, [r7, #4]
 8014720:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014722:	440b      	add	r3, r1
 8014724:	1ad3      	subs	r3, r2, r3
 8014726:	2b00      	cmp	r3, #0
 8014728:	f340 8089 	ble.w	801483e <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801472c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801472e:	681b      	ldr	r3, [r3, #0]
 8014730:	68db      	ldr	r3, [r3, #12]
 8014732:	899b      	ldrh	r3, [r3, #12]
 8014734:	b29b      	uxth	r3, r3
 8014736:	4618      	mov	r0, r3
 8014738:	f7fa fc48 	bl	800efcc <lwip_htons>
 801473c:	4603      	mov	r3, r0
 801473e:	b2db      	uxtb	r3, r3
 8014740:	f003 0301 	and.w	r3, r3, #1
 8014744:	2b00      	cmp	r3, #0
 8014746:	d022      	beq.n	801478e <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8014748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801474a:	681b      	ldr	r3, [r3, #0]
 801474c:	68db      	ldr	r3, [r3, #12]
 801474e:	899b      	ldrh	r3, [r3, #12]
 8014750:	b29b      	uxth	r3, r3
 8014752:	b21b      	sxth	r3, r3
 8014754:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014758:	b21c      	sxth	r4, r3
 801475a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801475c:	681b      	ldr	r3, [r3, #0]
 801475e:	68db      	ldr	r3, [r3, #12]
 8014760:	899b      	ldrh	r3, [r3, #12]
 8014762:	b29b      	uxth	r3, r3
 8014764:	4618      	mov	r0, r3
 8014766:	f7fa fc31 	bl	800efcc <lwip_htons>
 801476a:	4603      	mov	r3, r0
 801476c:	b2db      	uxtb	r3, r3
 801476e:	b29b      	uxth	r3, r3
 8014770:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8014774:	b29b      	uxth	r3, r3
 8014776:	4618      	mov	r0, r3
 8014778:	f7fa fc28 	bl	800efcc <lwip_htons>
 801477c:	4603      	mov	r3, r0
 801477e:	b21b      	sxth	r3, r3
 8014780:	4323      	orrs	r3, r4
 8014782:	b21a      	sxth	r2, r3
 8014784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014786:	681b      	ldr	r3, [r3, #0]
 8014788:	68db      	ldr	r3, [r3, #12]
 801478a:	b292      	uxth	r2, r2
 801478c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014792:	b29a      	uxth	r2, r3
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014798:	4413      	add	r3, r2
 801479a:	b299      	uxth	r1, r3
 801479c:	4b3c      	ldr	r3, [pc, #240]	; (8014890 <tcp_receive+0xf18>)
 801479e:	681b      	ldr	r3, [r3, #0]
 80147a0:	b29a      	uxth	r2, r3
 80147a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147a4:	681b      	ldr	r3, [r3, #0]
 80147a6:	1a8a      	subs	r2, r1, r2
 80147a8:	b292      	uxth	r2, r2
 80147aa:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80147ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147ae:	681b      	ldr	r3, [r3, #0]
 80147b0:	685a      	ldr	r2, [r3, #4]
 80147b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147b4:	681b      	ldr	r3, [r3, #0]
 80147b6:	891b      	ldrh	r3, [r3, #8]
 80147b8:	4619      	mov	r1, r3
 80147ba:	4610      	mov	r0, r2
 80147bc:	f7fb fe76 	bl	80104ac <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80147c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147c2:	681b      	ldr	r3, [r3, #0]
 80147c4:	891c      	ldrh	r4, [r3, #8]
 80147c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147c8:	681b      	ldr	r3, [r3, #0]
 80147ca:	68db      	ldr	r3, [r3, #12]
 80147cc:	899b      	ldrh	r3, [r3, #12]
 80147ce:	b29b      	uxth	r3, r3
 80147d0:	4618      	mov	r0, r3
 80147d2:	f7fa fbfb 	bl	800efcc <lwip_htons>
 80147d6:	4603      	mov	r3, r0
 80147d8:	b2db      	uxtb	r3, r3
 80147da:	f003 0303 	and.w	r3, r3, #3
 80147de:	2b00      	cmp	r3, #0
 80147e0:	d001      	beq.n	80147e6 <tcp_receive+0xe6e>
 80147e2:	2301      	movs	r3, #1
 80147e4:	e000      	b.n	80147e8 <tcp_receive+0xe70>
 80147e6:	2300      	movs	r3, #0
 80147e8:	4423      	add	r3, r4
 80147ea:	b29a      	uxth	r2, r3
 80147ec:	4b2a      	ldr	r3, [pc, #168]	; (8014898 <tcp_receive+0xf20>)
 80147ee:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80147f0:	4b29      	ldr	r3, [pc, #164]	; (8014898 <tcp_receive+0xf20>)
 80147f2:	881b      	ldrh	r3, [r3, #0]
 80147f4:	461a      	mov	r2, r3
 80147f6:	4b26      	ldr	r3, [pc, #152]	; (8014890 <tcp_receive+0xf18>)
 80147f8:	681b      	ldr	r3, [r3, #0]
 80147fa:	441a      	add	r2, r3
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014800:	6879      	ldr	r1, [r7, #4]
 8014802:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014804:	440b      	add	r3, r1
 8014806:	429a      	cmp	r2, r3
 8014808:	d019      	beq.n	801483e <tcp_receive+0xec6>
 801480a:	4b24      	ldr	r3, [pc, #144]	; (801489c <tcp_receive+0xf24>)
 801480c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8014810:	4923      	ldr	r1, [pc, #140]	; (80148a0 <tcp_receive+0xf28>)
 8014812:	4824      	ldr	r0, [pc, #144]	; (80148a4 <tcp_receive+0xf2c>)
 8014814:	f004 fe92 	bl	801953c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8014818:	e011      	b.n	801483e <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801481a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801481c:	681b      	ldr	r3, [r3, #0]
 801481e:	63bb      	str	r3, [r7, #56]	; 0x38
 8014820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014822:	2b00      	cmp	r3, #0
 8014824:	f47f aea4 	bne.w	8014570 <tcp_receive+0xbf8>
 8014828:	e00a      	b.n	8014840 <tcp_receive+0xec8>
                break;
 801482a:	bf00      	nop
 801482c:	e008      	b.n	8014840 <tcp_receive+0xec8>
                break;
 801482e:	bf00      	nop
 8014830:	e006      	b.n	8014840 <tcp_receive+0xec8>
                  break;
 8014832:	bf00      	nop
 8014834:	e004      	b.n	8014840 <tcp_receive+0xec8>
                  break;
 8014836:	bf00      	nop
 8014838:	e002      	b.n	8014840 <tcp_receive+0xec8>
                  break;
 801483a:	bf00      	nop
 801483c:	e000      	b.n	8014840 <tcp_receive+0xec8>
                break;
 801483e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8014840:	6878      	ldr	r0, [r7, #4]
 8014842:	f001 fa33 	bl	8015cac <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8014846:	e003      	b.n	8014850 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8014848:	6878      	ldr	r0, [r7, #4]
 801484a:	f001 fa2f 	bl	8015cac <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801484e:	e01a      	b.n	8014886 <tcp_receive+0xf0e>
 8014850:	e019      	b.n	8014886 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8014852:	4b0f      	ldr	r3, [pc, #60]	; (8014890 <tcp_receive+0xf18>)
 8014854:	681a      	ldr	r2, [r3, #0]
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801485a:	1ad3      	subs	r3, r2, r3
 801485c:	2b00      	cmp	r3, #0
 801485e:	db0a      	blt.n	8014876 <tcp_receive+0xefe>
 8014860:	4b0b      	ldr	r3, [pc, #44]	; (8014890 <tcp_receive+0xf18>)
 8014862:	681a      	ldr	r2, [r3, #0]
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014868:	6879      	ldr	r1, [r7, #4]
 801486a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801486c:	440b      	add	r3, r1
 801486e:	1ad3      	subs	r3, r2, r3
 8014870:	3301      	adds	r3, #1
 8014872:	2b00      	cmp	r3, #0
 8014874:	dd07      	ble.n	8014886 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	8b5b      	ldrh	r3, [r3, #26]
 801487a:	f043 0302 	orr.w	r3, r3, #2
 801487e:	b29a      	uxth	r2, r3
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8014884:	e7ff      	b.n	8014886 <tcp_receive+0xf0e>
 8014886:	bf00      	nop
 8014888:	3750      	adds	r7, #80	; 0x50
 801488a:	46bd      	mov	sp, r7
 801488c:	bdb0      	pop	{r4, r5, r7, pc}
 801488e:	bf00      	nop
 8014890:	20008100 	.word	0x20008100
 8014894:	200080e0 	.word	0x200080e0
 8014898:	2000810a 	.word	0x2000810a
 801489c:	0801cf0c 	.word	0x0801cf0c
 80148a0:	0801d2b4 	.word	0x0801d2b4
 80148a4:	0801cf58 	.word	0x0801cf58

080148a8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80148a8:	b480      	push	{r7}
 80148aa:	b083      	sub	sp, #12
 80148ac:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80148ae:	4b15      	ldr	r3, [pc, #84]	; (8014904 <tcp_get_next_optbyte+0x5c>)
 80148b0:	881b      	ldrh	r3, [r3, #0]
 80148b2:	1c5a      	adds	r2, r3, #1
 80148b4:	b291      	uxth	r1, r2
 80148b6:	4a13      	ldr	r2, [pc, #76]	; (8014904 <tcp_get_next_optbyte+0x5c>)
 80148b8:	8011      	strh	r1, [r2, #0]
 80148ba:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80148bc:	4b12      	ldr	r3, [pc, #72]	; (8014908 <tcp_get_next_optbyte+0x60>)
 80148be:	681b      	ldr	r3, [r3, #0]
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	d004      	beq.n	80148ce <tcp_get_next_optbyte+0x26>
 80148c4:	4b11      	ldr	r3, [pc, #68]	; (801490c <tcp_get_next_optbyte+0x64>)
 80148c6:	881b      	ldrh	r3, [r3, #0]
 80148c8:	88fa      	ldrh	r2, [r7, #6]
 80148ca:	429a      	cmp	r2, r3
 80148cc:	d208      	bcs.n	80148e0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80148ce:	4b10      	ldr	r3, [pc, #64]	; (8014910 <tcp_get_next_optbyte+0x68>)
 80148d0:	681b      	ldr	r3, [r3, #0]
 80148d2:	3314      	adds	r3, #20
 80148d4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80148d6:	88fb      	ldrh	r3, [r7, #6]
 80148d8:	683a      	ldr	r2, [r7, #0]
 80148da:	4413      	add	r3, r2
 80148dc:	781b      	ldrb	r3, [r3, #0]
 80148de:	e00b      	b.n	80148f8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80148e0:	88fb      	ldrh	r3, [r7, #6]
 80148e2:	b2da      	uxtb	r2, r3
 80148e4:	4b09      	ldr	r3, [pc, #36]	; (801490c <tcp_get_next_optbyte+0x64>)
 80148e6:	881b      	ldrh	r3, [r3, #0]
 80148e8:	b2db      	uxtb	r3, r3
 80148ea:	1ad3      	subs	r3, r2, r3
 80148ec:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80148ee:	4b06      	ldr	r3, [pc, #24]	; (8014908 <tcp_get_next_optbyte+0x60>)
 80148f0:	681a      	ldr	r2, [r3, #0]
 80148f2:	797b      	ldrb	r3, [r7, #5]
 80148f4:	4413      	add	r3, r2
 80148f6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80148f8:	4618      	mov	r0, r3
 80148fa:	370c      	adds	r7, #12
 80148fc:	46bd      	mov	sp, r7
 80148fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014902:	4770      	bx	lr
 8014904:	200080fc 	.word	0x200080fc
 8014908:	200080f8 	.word	0x200080f8
 801490c:	200080f6 	.word	0x200080f6
 8014910:	200080f0 	.word	0x200080f0

08014914 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8014914:	b580      	push	{r7, lr}
 8014916:	b084      	sub	sp, #16
 8014918:	af00      	add	r7, sp, #0
 801491a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	2b00      	cmp	r3, #0
 8014920:	d106      	bne.n	8014930 <tcp_parseopt+0x1c>
 8014922:	4b32      	ldr	r3, [pc, #200]	; (80149ec <tcp_parseopt+0xd8>)
 8014924:	f240 727d 	movw	r2, #1917	; 0x77d
 8014928:	4931      	ldr	r1, [pc, #196]	; (80149f0 <tcp_parseopt+0xdc>)
 801492a:	4832      	ldr	r0, [pc, #200]	; (80149f4 <tcp_parseopt+0xe0>)
 801492c:	f004 fe06 	bl	801953c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8014930:	4b31      	ldr	r3, [pc, #196]	; (80149f8 <tcp_parseopt+0xe4>)
 8014932:	881b      	ldrh	r3, [r3, #0]
 8014934:	2b00      	cmp	r3, #0
 8014936:	d055      	beq.n	80149e4 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014938:	4b30      	ldr	r3, [pc, #192]	; (80149fc <tcp_parseopt+0xe8>)
 801493a:	2200      	movs	r2, #0
 801493c:	801a      	strh	r2, [r3, #0]
 801493e:	e045      	b.n	80149cc <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8014940:	f7ff ffb2 	bl	80148a8 <tcp_get_next_optbyte>
 8014944:	4603      	mov	r3, r0
 8014946:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8014948:	7bfb      	ldrb	r3, [r7, #15]
 801494a:	2b02      	cmp	r3, #2
 801494c:	d006      	beq.n	801495c <tcp_parseopt+0x48>
 801494e:	2b02      	cmp	r3, #2
 8014950:	dc2b      	bgt.n	80149aa <tcp_parseopt+0x96>
 8014952:	2b00      	cmp	r3, #0
 8014954:	d041      	beq.n	80149da <tcp_parseopt+0xc6>
 8014956:	2b01      	cmp	r3, #1
 8014958:	d127      	bne.n	80149aa <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801495a:	e037      	b.n	80149cc <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801495c:	f7ff ffa4 	bl	80148a8 <tcp_get_next_optbyte>
 8014960:	4603      	mov	r3, r0
 8014962:	2b04      	cmp	r3, #4
 8014964:	d13b      	bne.n	80149de <tcp_parseopt+0xca>
 8014966:	4b25      	ldr	r3, [pc, #148]	; (80149fc <tcp_parseopt+0xe8>)
 8014968:	881b      	ldrh	r3, [r3, #0]
 801496a:	3301      	adds	r3, #1
 801496c:	4a22      	ldr	r2, [pc, #136]	; (80149f8 <tcp_parseopt+0xe4>)
 801496e:	8812      	ldrh	r2, [r2, #0]
 8014970:	4293      	cmp	r3, r2
 8014972:	da34      	bge.n	80149de <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8014974:	f7ff ff98 	bl	80148a8 <tcp_get_next_optbyte>
 8014978:	4603      	mov	r3, r0
 801497a:	b29b      	uxth	r3, r3
 801497c:	021b      	lsls	r3, r3, #8
 801497e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8014980:	f7ff ff92 	bl	80148a8 <tcp_get_next_optbyte>
 8014984:	4603      	mov	r3, r0
 8014986:	b29a      	uxth	r2, r3
 8014988:	89bb      	ldrh	r3, [r7, #12]
 801498a:	4313      	orrs	r3, r2
 801498c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801498e:	89bb      	ldrh	r3, [r7, #12]
 8014990:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8014994:	d804      	bhi.n	80149a0 <tcp_parseopt+0x8c>
 8014996:	89bb      	ldrh	r3, [r7, #12]
 8014998:	2b00      	cmp	r3, #0
 801499a:	d001      	beq.n	80149a0 <tcp_parseopt+0x8c>
 801499c:	89ba      	ldrh	r2, [r7, #12]
 801499e:	e001      	b.n	80149a4 <tcp_parseopt+0x90>
 80149a0:	f44f 7206 	mov.w	r2, #536	; 0x218
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80149a8:	e010      	b.n	80149cc <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80149aa:	f7ff ff7d 	bl	80148a8 <tcp_get_next_optbyte>
 80149ae:	4603      	mov	r3, r0
 80149b0:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80149b2:	7afb      	ldrb	r3, [r7, #11]
 80149b4:	2b01      	cmp	r3, #1
 80149b6:	d914      	bls.n	80149e2 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80149b8:	7afb      	ldrb	r3, [r7, #11]
 80149ba:	b29a      	uxth	r2, r3
 80149bc:	4b0f      	ldr	r3, [pc, #60]	; (80149fc <tcp_parseopt+0xe8>)
 80149be:	881b      	ldrh	r3, [r3, #0]
 80149c0:	4413      	add	r3, r2
 80149c2:	b29b      	uxth	r3, r3
 80149c4:	3b02      	subs	r3, #2
 80149c6:	b29a      	uxth	r2, r3
 80149c8:	4b0c      	ldr	r3, [pc, #48]	; (80149fc <tcp_parseopt+0xe8>)
 80149ca:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80149cc:	4b0b      	ldr	r3, [pc, #44]	; (80149fc <tcp_parseopt+0xe8>)
 80149ce:	881a      	ldrh	r2, [r3, #0]
 80149d0:	4b09      	ldr	r3, [pc, #36]	; (80149f8 <tcp_parseopt+0xe4>)
 80149d2:	881b      	ldrh	r3, [r3, #0]
 80149d4:	429a      	cmp	r2, r3
 80149d6:	d3b3      	bcc.n	8014940 <tcp_parseopt+0x2c>
 80149d8:	e004      	b.n	80149e4 <tcp_parseopt+0xd0>
          return;
 80149da:	bf00      	nop
 80149dc:	e002      	b.n	80149e4 <tcp_parseopt+0xd0>
            return;
 80149de:	bf00      	nop
 80149e0:	e000      	b.n	80149e4 <tcp_parseopt+0xd0>
            return;
 80149e2:	bf00      	nop
      }
    }
  }
}
 80149e4:	3710      	adds	r7, #16
 80149e6:	46bd      	mov	sp, r7
 80149e8:	bd80      	pop	{r7, pc}
 80149ea:	bf00      	nop
 80149ec:	0801cf0c 	.word	0x0801cf0c
 80149f0:	0801d370 	.word	0x0801d370
 80149f4:	0801cf58 	.word	0x0801cf58
 80149f8:	200080f4 	.word	0x200080f4
 80149fc:	200080fc 	.word	0x200080fc

08014a00 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8014a00:	b480      	push	{r7}
 8014a02:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8014a04:	4b05      	ldr	r3, [pc, #20]	; (8014a1c <tcp_trigger_input_pcb_close+0x1c>)
 8014a06:	781b      	ldrb	r3, [r3, #0]
 8014a08:	f043 0310 	orr.w	r3, r3, #16
 8014a0c:	b2da      	uxtb	r2, r3
 8014a0e:	4b03      	ldr	r3, [pc, #12]	; (8014a1c <tcp_trigger_input_pcb_close+0x1c>)
 8014a10:	701a      	strb	r2, [r3, #0]
}
 8014a12:	bf00      	nop
 8014a14:	46bd      	mov	sp, r7
 8014a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a1a:	4770      	bx	lr
 8014a1c:	2000810d 	.word	0x2000810d

08014a20 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8014a20:	b580      	push	{r7, lr}
 8014a22:	b084      	sub	sp, #16
 8014a24:	af00      	add	r7, sp, #0
 8014a26:	60f8      	str	r0, [r7, #12]
 8014a28:	60b9      	str	r1, [r7, #8]
 8014a2a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8014a2c:	68fb      	ldr	r3, [r7, #12]
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	d00a      	beq.n	8014a48 <tcp_route+0x28>
 8014a32:	68fb      	ldr	r3, [r7, #12]
 8014a34:	7a1b      	ldrb	r3, [r3, #8]
 8014a36:	2b00      	cmp	r3, #0
 8014a38:	d006      	beq.n	8014a48 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8014a3a:	68fb      	ldr	r3, [r7, #12]
 8014a3c:	7a1b      	ldrb	r3, [r3, #8]
 8014a3e:	4618      	mov	r0, r3
 8014a40:	f7fb fb7a 	bl	8010138 <netif_get_by_index>
 8014a44:	4603      	mov	r3, r0
 8014a46:	e003      	b.n	8014a50 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8014a48:	6878      	ldr	r0, [r7, #4]
 8014a4a:	f002 fe61 	bl	8017710 <ip4_route>
 8014a4e:	4603      	mov	r3, r0
  }
}
 8014a50:	4618      	mov	r0, r3
 8014a52:	3710      	adds	r7, #16
 8014a54:	46bd      	mov	sp, r7
 8014a56:	bd80      	pop	{r7, pc}

08014a58 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8014a58:	b590      	push	{r4, r7, lr}
 8014a5a:	b087      	sub	sp, #28
 8014a5c:	af00      	add	r7, sp, #0
 8014a5e:	60f8      	str	r0, [r7, #12]
 8014a60:	60b9      	str	r1, [r7, #8]
 8014a62:	603b      	str	r3, [r7, #0]
 8014a64:	4613      	mov	r3, r2
 8014a66:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8014a68:	68fb      	ldr	r3, [r7, #12]
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d105      	bne.n	8014a7a <tcp_create_segment+0x22>
 8014a6e:	4b44      	ldr	r3, [pc, #272]	; (8014b80 <tcp_create_segment+0x128>)
 8014a70:	22a3      	movs	r2, #163	; 0xa3
 8014a72:	4944      	ldr	r1, [pc, #272]	; (8014b84 <tcp_create_segment+0x12c>)
 8014a74:	4844      	ldr	r0, [pc, #272]	; (8014b88 <tcp_create_segment+0x130>)
 8014a76:	f004 fd61 	bl	801953c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8014a7a:	68bb      	ldr	r3, [r7, #8]
 8014a7c:	2b00      	cmp	r3, #0
 8014a7e:	d105      	bne.n	8014a8c <tcp_create_segment+0x34>
 8014a80:	4b3f      	ldr	r3, [pc, #252]	; (8014b80 <tcp_create_segment+0x128>)
 8014a82:	22a4      	movs	r2, #164	; 0xa4
 8014a84:	4941      	ldr	r1, [pc, #260]	; (8014b8c <tcp_create_segment+0x134>)
 8014a86:	4840      	ldr	r0, [pc, #256]	; (8014b88 <tcp_create_segment+0x130>)
 8014a88:	f004 fd58 	bl	801953c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014a8c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014a90:	009b      	lsls	r3, r3, #2
 8014a92:	b2db      	uxtb	r3, r3
 8014a94:	f003 0304 	and.w	r3, r3, #4
 8014a98:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8014a9a:	2003      	movs	r0, #3
 8014a9c:	f7fa ffc6 	bl	800fa2c <memp_malloc>
 8014aa0:	6138      	str	r0, [r7, #16]
 8014aa2:	693b      	ldr	r3, [r7, #16]
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	d104      	bne.n	8014ab2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8014aa8:	68b8      	ldr	r0, [r7, #8]
 8014aaa:	f7fb fe85 	bl	80107b8 <pbuf_free>
    return NULL;
 8014aae:	2300      	movs	r3, #0
 8014ab0:	e061      	b.n	8014b76 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8014ab2:	693b      	ldr	r3, [r7, #16]
 8014ab4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8014ab8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8014aba:	693b      	ldr	r3, [r7, #16]
 8014abc:	2200      	movs	r2, #0
 8014abe:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8014ac0:	693b      	ldr	r3, [r7, #16]
 8014ac2:	68ba      	ldr	r2, [r7, #8]
 8014ac4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8014ac6:	68bb      	ldr	r3, [r7, #8]
 8014ac8:	891a      	ldrh	r2, [r3, #8]
 8014aca:	7dfb      	ldrb	r3, [r7, #23]
 8014acc:	b29b      	uxth	r3, r3
 8014ace:	429a      	cmp	r2, r3
 8014ad0:	d205      	bcs.n	8014ade <tcp_create_segment+0x86>
 8014ad2:	4b2b      	ldr	r3, [pc, #172]	; (8014b80 <tcp_create_segment+0x128>)
 8014ad4:	22b0      	movs	r2, #176	; 0xb0
 8014ad6:	492e      	ldr	r1, [pc, #184]	; (8014b90 <tcp_create_segment+0x138>)
 8014ad8:	482b      	ldr	r0, [pc, #172]	; (8014b88 <tcp_create_segment+0x130>)
 8014ada:	f004 fd2f 	bl	801953c <iprintf>
  seg->len = p->tot_len - optlen;
 8014ade:	68bb      	ldr	r3, [r7, #8]
 8014ae0:	891a      	ldrh	r2, [r3, #8]
 8014ae2:	7dfb      	ldrb	r3, [r7, #23]
 8014ae4:	b29b      	uxth	r3, r3
 8014ae6:	1ad3      	subs	r3, r2, r3
 8014ae8:	b29a      	uxth	r2, r3
 8014aea:	693b      	ldr	r3, [r7, #16]
 8014aec:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8014aee:	2114      	movs	r1, #20
 8014af0:	68b8      	ldr	r0, [r7, #8]
 8014af2:	f7fb fdcb 	bl	801068c <pbuf_add_header>
 8014af6:	4603      	mov	r3, r0
 8014af8:	2b00      	cmp	r3, #0
 8014afa:	d004      	beq.n	8014b06 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8014afc:	6938      	ldr	r0, [r7, #16]
 8014afe:	f7fd f8ce 	bl	8011c9e <tcp_seg_free>
    return NULL;
 8014b02:	2300      	movs	r3, #0
 8014b04:	e037      	b.n	8014b76 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8014b06:	693b      	ldr	r3, [r7, #16]
 8014b08:	685b      	ldr	r3, [r3, #4]
 8014b0a:	685a      	ldr	r2, [r3, #4]
 8014b0c:	693b      	ldr	r3, [r7, #16]
 8014b0e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8014b10:	68fb      	ldr	r3, [r7, #12]
 8014b12:	8ada      	ldrh	r2, [r3, #22]
 8014b14:	693b      	ldr	r3, [r7, #16]
 8014b16:	68dc      	ldr	r4, [r3, #12]
 8014b18:	4610      	mov	r0, r2
 8014b1a:	f7fa fa57 	bl	800efcc <lwip_htons>
 8014b1e:	4603      	mov	r3, r0
 8014b20:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8014b22:	68fb      	ldr	r3, [r7, #12]
 8014b24:	8b1a      	ldrh	r2, [r3, #24]
 8014b26:	693b      	ldr	r3, [r7, #16]
 8014b28:	68dc      	ldr	r4, [r3, #12]
 8014b2a:	4610      	mov	r0, r2
 8014b2c:	f7fa fa4e 	bl	800efcc <lwip_htons>
 8014b30:	4603      	mov	r3, r0
 8014b32:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8014b34:	693b      	ldr	r3, [r7, #16]
 8014b36:	68dc      	ldr	r4, [r3, #12]
 8014b38:	6838      	ldr	r0, [r7, #0]
 8014b3a:	f7fa fa5c 	bl	800eff6 <lwip_htonl>
 8014b3e:	4603      	mov	r3, r0
 8014b40:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8014b42:	7dfb      	ldrb	r3, [r7, #23]
 8014b44:	089b      	lsrs	r3, r3, #2
 8014b46:	b2db      	uxtb	r3, r3
 8014b48:	b29b      	uxth	r3, r3
 8014b4a:	3305      	adds	r3, #5
 8014b4c:	b29b      	uxth	r3, r3
 8014b4e:	031b      	lsls	r3, r3, #12
 8014b50:	b29a      	uxth	r2, r3
 8014b52:	79fb      	ldrb	r3, [r7, #7]
 8014b54:	b29b      	uxth	r3, r3
 8014b56:	4313      	orrs	r3, r2
 8014b58:	b29a      	uxth	r2, r3
 8014b5a:	693b      	ldr	r3, [r7, #16]
 8014b5c:	68dc      	ldr	r4, [r3, #12]
 8014b5e:	4610      	mov	r0, r2
 8014b60:	f7fa fa34 	bl	800efcc <lwip_htons>
 8014b64:	4603      	mov	r3, r0
 8014b66:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8014b68:	693b      	ldr	r3, [r7, #16]
 8014b6a:	68db      	ldr	r3, [r3, #12]
 8014b6c:	2200      	movs	r2, #0
 8014b6e:	749a      	strb	r2, [r3, #18]
 8014b70:	2200      	movs	r2, #0
 8014b72:	74da      	strb	r2, [r3, #19]
  return seg;
 8014b74:	693b      	ldr	r3, [r7, #16]
}
 8014b76:	4618      	mov	r0, r3
 8014b78:	371c      	adds	r7, #28
 8014b7a:	46bd      	mov	sp, r7
 8014b7c:	bd90      	pop	{r4, r7, pc}
 8014b7e:	bf00      	nop
 8014b80:	0801d38c 	.word	0x0801d38c
 8014b84:	0801d3c0 	.word	0x0801d3c0
 8014b88:	0801d3e0 	.word	0x0801d3e0
 8014b8c:	0801d408 	.word	0x0801d408
 8014b90:	0801d42c 	.word	0x0801d42c

08014b94 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8014b94:	b590      	push	{r4, r7, lr}
 8014b96:	b08b      	sub	sp, #44	; 0x2c
 8014b98:	af02      	add	r7, sp, #8
 8014b9a:	6078      	str	r0, [r7, #4]
 8014b9c:	460b      	mov	r3, r1
 8014b9e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8014ba0:	2300      	movs	r3, #0
 8014ba2:	61fb      	str	r3, [r7, #28]
 8014ba4:	2300      	movs	r3, #0
 8014ba6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8014ba8:	2300      	movs	r3, #0
 8014baa:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8014bac:	687b      	ldr	r3, [r7, #4]
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	d106      	bne.n	8014bc0 <tcp_split_unsent_seg+0x2c>
 8014bb2:	4b95      	ldr	r3, [pc, #596]	; (8014e08 <tcp_split_unsent_seg+0x274>)
 8014bb4:	f240 324b 	movw	r2, #843	; 0x34b
 8014bb8:	4994      	ldr	r1, [pc, #592]	; (8014e0c <tcp_split_unsent_seg+0x278>)
 8014bba:	4895      	ldr	r0, [pc, #596]	; (8014e10 <tcp_split_unsent_seg+0x27c>)
 8014bbc:	f004 fcbe 	bl	801953c <iprintf>

  useg = pcb->unsent;
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014bc4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8014bc6:	697b      	ldr	r3, [r7, #20]
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	d102      	bne.n	8014bd2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8014bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8014bd0:	e116      	b.n	8014e00 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8014bd2:	887b      	ldrh	r3, [r7, #2]
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	d109      	bne.n	8014bec <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8014bd8:	4b8b      	ldr	r3, [pc, #556]	; (8014e08 <tcp_split_unsent_seg+0x274>)
 8014bda:	f240 3253 	movw	r2, #851	; 0x353
 8014bde:	498d      	ldr	r1, [pc, #564]	; (8014e14 <tcp_split_unsent_seg+0x280>)
 8014be0:	488b      	ldr	r0, [pc, #556]	; (8014e10 <tcp_split_unsent_seg+0x27c>)
 8014be2:	f004 fcab 	bl	801953c <iprintf>
    return ERR_VAL;
 8014be6:	f06f 0305 	mvn.w	r3, #5
 8014bea:	e109      	b.n	8014e00 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8014bec:	697b      	ldr	r3, [r7, #20]
 8014bee:	891b      	ldrh	r3, [r3, #8]
 8014bf0:	887a      	ldrh	r2, [r7, #2]
 8014bf2:	429a      	cmp	r2, r3
 8014bf4:	d301      	bcc.n	8014bfa <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8014bf6:	2300      	movs	r3, #0
 8014bf8:	e102      	b.n	8014e00 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014bfe:	887a      	ldrh	r2, [r7, #2]
 8014c00:	429a      	cmp	r2, r3
 8014c02:	d906      	bls.n	8014c12 <tcp_split_unsent_seg+0x7e>
 8014c04:	4b80      	ldr	r3, [pc, #512]	; (8014e08 <tcp_split_unsent_seg+0x274>)
 8014c06:	f240 325b 	movw	r2, #859	; 0x35b
 8014c0a:	4983      	ldr	r1, [pc, #524]	; (8014e18 <tcp_split_unsent_seg+0x284>)
 8014c0c:	4880      	ldr	r0, [pc, #512]	; (8014e10 <tcp_split_unsent_seg+0x27c>)
 8014c0e:	f004 fc95 	bl	801953c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8014c12:	697b      	ldr	r3, [r7, #20]
 8014c14:	891b      	ldrh	r3, [r3, #8]
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	d106      	bne.n	8014c28 <tcp_split_unsent_seg+0x94>
 8014c1a:	4b7b      	ldr	r3, [pc, #492]	; (8014e08 <tcp_split_unsent_seg+0x274>)
 8014c1c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8014c20:	497e      	ldr	r1, [pc, #504]	; (8014e1c <tcp_split_unsent_seg+0x288>)
 8014c22:	487b      	ldr	r0, [pc, #492]	; (8014e10 <tcp_split_unsent_seg+0x27c>)
 8014c24:	f004 fc8a 	bl	801953c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8014c28:	697b      	ldr	r3, [r7, #20]
 8014c2a:	7a9b      	ldrb	r3, [r3, #10]
 8014c2c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8014c2e:	7bfb      	ldrb	r3, [r7, #15]
 8014c30:	009b      	lsls	r3, r3, #2
 8014c32:	b2db      	uxtb	r3, r3
 8014c34:	f003 0304 	and.w	r3, r3, #4
 8014c38:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8014c3a:	697b      	ldr	r3, [r7, #20]
 8014c3c:	891a      	ldrh	r2, [r3, #8]
 8014c3e:	887b      	ldrh	r3, [r7, #2]
 8014c40:	1ad3      	subs	r3, r2, r3
 8014c42:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8014c44:	7bbb      	ldrb	r3, [r7, #14]
 8014c46:	b29a      	uxth	r2, r3
 8014c48:	89bb      	ldrh	r3, [r7, #12]
 8014c4a:	4413      	add	r3, r2
 8014c4c:	b29b      	uxth	r3, r3
 8014c4e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014c52:	4619      	mov	r1, r3
 8014c54:	2036      	movs	r0, #54	; 0x36
 8014c56:	f7fb facb 	bl	80101f0 <pbuf_alloc>
 8014c5a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014c5c:	693b      	ldr	r3, [r7, #16]
 8014c5e:	2b00      	cmp	r3, #0
 8014c60:	f000 80b7 	beq.w	8014dd2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8014c64:	697b      	ldr	r3, [r7, #20]
 8014c66:	685b      	ldr	r3, [r3, #4]
 8014c68:	891a      	ldrh	r2, [r3, #8]
 8014c6a:	697b      	ldr	r3, [r7, #20]
 8014c6c:	891b      	ldrh	r3, [r3, #8]
 8014c6e:	1ad3      	subs	r3, r2, r3
 8014c70:	b29a      	uxth	r2, r3
 8014c72:	887b      	ldrh	r3, [r7, #2]
 8014c74:	4413      	add	r3, r2
 8014c76:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8014c78:	697b      	ldr	r3, [r7, #20]
 8014c7a:	6858      	ldr	r0, [r3, #4]
 8014c7c:	693b      	ldr	r3, [r7, #16]
 8014c7e:	685a      	ldr	r2, [r3, #4]
 8014c80:	7bbb      	ldrb	r3, [r7, #14]
 8014c82:	18d1      	adds	r1, r2, r3
 8014c84:	897b      	ldrh	r3, [r7, #10]
 8014c86:	89ba      	ldrh	r2, [r7, #12]
 8014c88:	f7fb ff80 	bl	8010b8c <pbuf_copy_partial>
 8014c8c:	4603      	mov	r3, r0
 8014c8e:	461a      	mov	r2, r3
 8014c90:	89bb      	ldrh	r3, [r7, #12]
 8014c92:	4293      	cmp	r3, r2
 8014c94:	f040 809f 	bne.w	8014dd6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8014c98:	697b      	ldr	r3, [r7, #20]
 8014c9a:	68db      	ldr	r3, [r3, #12]
 8014c9c:	899b      	ldrh	r3, [r3, #12]
 8014c9e:	b29b      	uxth	r3, r3
 8014ca0:	4618      	mov	r0, r3
 8014ca2:	f7fa f993 	bl	800efcc <lwip_htons>
 8014ca6:	4603      	mov	r3, r0
 8014ca8:	b2db      	uxtb	r3, r3
 8014caa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014cae:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8014cb0:	2300      	movs	r3, #0
 8014cb2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8014cb4:	7efb      	ldrb	r3, [r7, #27]
 8014cb6:	f003 0308 	and.w	r3, r3, #8
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	d007      	beq.n	8014cce <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8014cbe:	7efb      	ldrb	r3, [r7, #27]
 8014cc0:	f023 0308 	bic.w	r3, r3, #8
 8014cc4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8014cc6:	7ebb      	ldrb	r3, [r7, #26]
 8014cc8:	f043 0308 	orr.w	r3, r3, #8
 8014ccc:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8014cce:	7efb      	ldrb	r3, [r7, #27]
 8014cd0:	f003 0301 	and.w	r3, r3, #1
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	d007      	beq.n	8014ce8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8014cd8:	7efb      	ldrb	r3, [r7, #27]
 8014cda:	f023 0301 	bic.w	r3, r3, #1
 8014cde:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8014ce0:	7ebb      	ldrb	r3, [r7, #26]
 8014ce2:	f043 0301 	orr.w	r3, r3, #1
 8014ce6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8014ce8:	697b      	ldr	r3, [r7, #20]
 8014cea:	68db      	ldr	r3, [r3, #12]
 8014cec:	685b      	ldr	r3, [r3, #4]
 8014cee:	4618      	mov	r0, r3
 8014cf0:	f7fa f981 	bl	800eff6 <lwip_htonl>
 8014cf4:	4602      	mov	r2, r0
 8014cf6:	887b      	ldrh	r3, [r7, #2]
 8014cf8:	18d1      	adds	r1, r2, r3
 8014cfa:	7eba      	ldrb	r2, [r7, #26]
 8014cfc:	7bfb      	ldrb	r3, [r7, #15]
 8014cfe:	9300      	str	r3, [sp, #0]
 8014d00:	460b      	mov	r3, r1
 8014d02:	6939      	ldr	r1, [r7, #16]
 8014d04:	6878      	ldr	r0, [r7, #4]
 8014d06:	f7ff fea7 	bl	8014a58 <tcp_create_segment>
 8014d0a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8014d0c:	69fb      	ldr	r3, [r7, #28]
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	d063      	beq.n	8014dda <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8014d12:	697b      	ldr	r3, [r7, #20]
 8014d14:	685b      	ldr	r3, [r3, #4]
 8014d16:	4618      	mov	r0, r3
 8014d18:	f7fb fdd6 	bl	80108c8 <pbuf_clen>
 8014d1c:	4603      	mov	r3, r0
 8014d1e:	461a      	mov	r2, r3
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014d26:	1a9b      	subs	r3, r3, r2
 8014d28:	b29a      	uxth	r2, r3
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8014d30:	697b      	ldr	r3, [r7, #20]
 8014d32:	6858      	ldr	r0, [r3, #4]
 8014d34:	697b      	ldr	r3, [r7, #20]
 8014d36:	685b      	ldr	r3, [r3, #4]
 8014d38:	891a      	ldrh	r2, [r3, #8]
 8014d3a:	89bb      	ldrh	r3, [r7, #12]
 8014d3c:	1ad3      	subs	r3, r2, r3
 8014d3e:	b29b      	uxth	r3, r3
 8014d40:	4619      	mov	r1, r3
 8014d42:	f7fb fbb3 	bl	80104ac <pbuf_realloc>
  useg->len -= remainder;
 8014d46:	697b      	ldr	r3, [r7, #20]
 8014d48:	891a      	ldrh	r2, [r3, #8]
 8014d4a:	89bb      	ldrh	r3, [r7, #12]
 8014d4c:	1ad3      	subs	r3, r2, r3
 8014d4e:	b29a      	uxth	r2, r3
 8014d50:	697b      	ldr	r3, [r7, #20]
 8014d52:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8014d54:	697b      	ldr	r3, [r7, #20]
 8014d56:	68db      	ldr	r3, [r3, #12]
 8014d58:	899b      	ldrh	r3, [r3, #12]
 8014d5a:	b29c      	uxth	r4, r3
 8014d5c:	7efb      	ldrb	r3, [r7, #27]
 8014d5e:	b29b      	uxth	r3, r3
 8014d60:	4618      	mov	r0, r3
 8014d62:	f7fa f933 	bl	800efcc <lwip_htons>
 8014d66:	4603      	mov	r3, r0
 8014d68:	461a      	mov	r2, r3
 8014d6a:	697b      	ldr	r3, [r7, #20]
 8014d6c:	68db      	ldr	r3, [r3, #12]
 8014d6e:	4322      	orrs	r2, r4
 8014d70:	b292      	uxth	r2, r2
 8014d72:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8014d74:	697b      	ldr	r3, [r7, #20]
 8014d76:	685b      	ldr	r3, [r3, #4]
 8014d78:	4618      	mov	r0, r3
 8014d7a:	f7fb fda5 	bl	80108c8 <pbuf_clen>
 8014d7e:	4603      	mov	r3, r0
 8014d80:	461a      	mov	r2, r3
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014d88:	4413      	add	r3, r2
 8014d8a:	b29a      	uxth	r2, r3
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8014d92:	69fb      	ldr	r3, [r7, #28]
 8014d94:	685b      	ldr	r3, [r3, #4]
 8014d96:	4618      	mov	r0, r3
 8014d98:	f7fb fd96 	bl	80108c8 <pbuf_clen>
 8014d9c:	4603      	mov	r3, r0
 8014d9e:	461a      	mov	r2, r3
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014da6:	4413      	add	r3, r2
 8014da8:	b29a      	uxth	r2, r3
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8014db0:	697b      	ldr	r3, [r7, #20]
 8014db2:	681a      	ldr	r2, [r3, #0]
 8014db4:	69fb      	ldr	r3, [r7, #28]
 8014db6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8014db8:	697b      	ldr	r3, [r7, #20]
 8014dba:	69fa      	ldr	r2, [r7, #28]
 8014dbc:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8014dbe:	69fb      	ldr	r3, [r7, #28]
 8014dc0:	681b      	ldr	r3, [r3, #0]
 8014dc2:	2b00      	cmp	r3, #0
 8014dc4:	d103      	bne.n	8014dce <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	2200      	movs	r2, #0
 8014dca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8014dce:	2300      	movs	r3, #0
 8014dd0:	e016      	b.n	8014e00 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8014dd2:	bf00      	nop
 8014dd4:	e002      	b.n	8014ddc <tcp_split_unsent_seg+0x248>
    goto memerr;
 8014dd6:	bf00      	nop
 8014dd8:	e000      	b.n	8014ddc <tcp_split_unsent_seg+0x248>
    goto memerr;
 8014dda:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8014ddc:	69fb      	ldr	r3, [r7, #28]
 8014dde:	2b00      	cmp	r3, #0
 8014de0:	d006      	beq.n	8014df0 <tcp_split_unsent_seg+0x25c>
 8014de2:	4b09      	ldr	r3, [pc, #36]	; (8014e08 <tcp_split_unsent_seg+0x274>)
 8014de4:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8014de8:	490d      	ldr	r1, [pc, #52]	; (8014e20 <tcp_split_unsent_seg+0x28c>)
 8014dea:	4809      	ldr	r0, [pc, #36]	; (8014e10 <tcp_split_unsent_seg+0x27c>)
 8014dec:	f004 fba6 	bl	801953c <iprintf>
  if (p != NULL) {
 8014df0:	693b      	ldr	r3, [r7, #16]
 8014df2:	2b00      	cmp	r3, #0
 8014df4:	d002      	beq.n	8014dfc <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8014df6:	6938      	ldr	r0, [r7, #16]
 8014df8:	f7fb fcde 	bl	80107b8 <pbuf_free>
  }

  return ERR_MEM;
 8014dfc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014e00:	4618      	mov	r0, r3
 8014e02:	3724      	adds	r7, #36	; 0x24
 8014e04:	46bd      	mov	sp, r7
 8014e06:	bd90      	pop	{r4, r7, pc}
 8014e08:	0801d38c 	.word	0x0801d38c
 8014e0c:	0801d720 	.word	0x0801d720
 8014e10:	0801d3e0 	.word	0x0801d3e0
 8014e14:	0801d744 	.word	0x0801d744
 8014e18:	0801d768 	.word	0x0801d768
 8014e1c:	0801d778 	.word	0x0801d778
 8014e20:	0801d788 	.word	0x0801d788

08014e24 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8014e24:	b590      	push	{r4, r7, lr}
 8014e26:	b085      	sub	sp, #20
 8014e28:	af00      	add	r7, sp, #0
 8014e2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	2b00      	cmp	r3, #0
 8014e30:	d106      	bne.n	8014e40 <tcp_send_fin+0x1c>
 8014e32:	4b21      	ldr	r3, [pc, #132]	; (8014eb8 <tcp_send_fin+0x94>)
 8014e34:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8014e38:	4920      	ldr	r1, [pc, #128]	; (8014ebc <tcp_send_fin+0x98>)
 8014e3a:	4821      	ldr	r0, [pc, #132]	; (8014ec0 <tcp_send_fin+0x9c>)
 8014e3c:	f004 fb7e 	bl	801953c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014e44:	2b00      	cmp	r3, #0
 8014e46:	d02e      	beq.n	8014ea6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014e4c:	60fb      	str	r3, [r7, #12]
 8014e4e:	e002      	b.n	8014e56 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8014e50:	68fb      	ldr	r3, [r7, #12]
 8014e52:	681b      	ldr	r3, [r3, #0]
 8014e54:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014e56:	68fb      	ldr	r3, [r7, #12]
 8014e58:	681b      	ldr	r3, [r3, #0]
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	d1f8      	bne.n	8014e50 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8014e5e:	68fb      	ldr	r3, [r7, #12]
 8014e60:	68db      	ldr	r3, [r3, #12]
 8014e62:	899b      	ldrh	r3, [r3, #12]
 8014e64:	b29b      	uxth	r3, r3
 8014e66:	4618      	mov	r0, r3
 8014e68:	f7fa f8b0 	bl	800efcc <lwip_htons>
 8014e6c:	4603      	mov	r3, r0
 8014e6e:	b2db      	uxtb	r3, r3
 8014e70:	f003 0307 	and.w	r3, r3, #7
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	d116      	bne.n	8014ea6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8014e78:	68fb      	ldr	r3, [r7, #12]
 8014e7a:	68db      	ldr	r3, [r3, #12]
 8014e7c:	899b      	ldrh	r3, [r3, #12]
 8014e7e:	b29c      	uxth	r4, r3
 8014e80:	2001      	movs	r0, #1
 8014e82:	f7fa f8a3 	bl	800efcc <lwip_htons>
 8014e86:	4603      	mov	r3, r0
 8014e88:	461a      	mov	r2, r3
 8014e8a:	68fb      	ldr	r3, [r7, #12]
 8014e8c:	68db      	ldr	r3, [r3, #12]
 8014e8e:	4322      	orrs	r2, r4
 8014e90:	b292      	uxth	r2, r2
 8014e92:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	8b5b      	ldrh	r3, [r3, #26]
 8014e98:	f043 0320 	orr.w	r3, r3, #32
 8014e9c:	b29a      	uxth	r2, r3
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8014ea2:	2300      	movs	r3, #0
 8014ea4:	e004      	b.n	8014eb0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8014ea6:	2101      	movs	r1, #1
 8014ea8:	6878      	ldr	r0, [r7, #4]
 8014eaa:	f000 f80b 	bl	8014ec4 <tcp_enqueue_flags>
 8014eae:	4603      	mov	r3, r0
}
 8014eb0:	4618      	mov	r0, r3
 8014eb2:	3714      	adds	r7, #20
 8014eb4:	46bd      	mov	sp, r7
 8014eb6:	bd90      	pop	{r4, r7, pc}
 8014eb8:	0801d38c 	.word	0x0801d38c
 8014ebc:	0801d794 	.word	0x0801d794
 8014ec0:	0801d3e0 	.word	0x0801d3e0

08014ec4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8014ec4:	b580      	push	{r7, lr}
 8014ec6:	b08a      	sub	sp, #40	; 0x28
 8014ec8:	af02      	add	r7, sp, #8
 8014eca:	6078      	str	r0, [r7, #4]
 8014ecc:	460b      	mov	r3, r1
 8014ece:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8014ed0:	2300      	movs	r3, #0
 8014ed2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8014ed4:	2300      	movs	r3, #0
 8014ed6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8014ed8:	78fb      	ldrb	r3, [r7, #3]
 8014eda:	f003 0303 	and.w	r3, r3, #3
 8014ede:	2b00      	cmp	r3, #0
 8014ee0:	d106      	bne.n	8014ef0 <tcp_enqueue_flags+0x2c>
 8014ee2:	4b67      	ldr	r3, [pc, #412]	; (8015080 <tcp_enqueue_flags+0x1bc>)
 8014ee4:	f240 4211 	movw	r2, #1041	; 0x411
 8014ee8:	4966      	ldr	r1, [pc, #408]	; (8015084 <tcp_enqueue_flags+0x1c0>)
 8014eea:	4867      	ldr	r0, [pc, #412]	; (8015088 <tcp_enqueue_flags+0x1c4>)
 8014eec:	f004 fb26 	bl	801953c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8014ef0:	687b      	ldr	r3, [r7, #4]
 8014ef2:	2b00      	cmp	r3, #0
 8014ef4:	d106      	bne.n	8014f04 <tcp_enqueue_flags+0x40>
 8014ef6:	4b62      	ldr	r3, [pc, #392]	; (8015080 <tcp_enqueue_flags+0x1bc>)
 8014ef8:	f240 4213 	movw	r2, #1043	; 0x413
 8014efc:	4963      	ldr	r1, [pc, #396]	; (801508c <tcp_enqueue_flags+0x1c8>)
 8014efe:	4862      	ldr	r0, [pc, #392]	; (8015088 <tcp_enqueue_flags+0x1c4>)
 8014f00:	f004 fb1c 	bl	801953c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8014f04:	78fb      	ldrb	r3, [r7, #3]
 8014f06:	f003 0302 	and.w	r3, r3, #2
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	d001      	beq.n	8014f12 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8014f0e:	2301      	movs	r3, #1
 8014f10:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014f12:	7ffb      	ldrb	r3, [r7, #31]
 8014f14:	009b      	lsls	r3, r3, #2
 8014f16:	b2db      	uxtb	r3, r3
 8014f18:	f003 0304 	and.w	r3, r3, #4
 8014f1c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8014f1e:	7dfb      	ldrb	r3, [r7, #23]
 8014f20:	b29b      	uxth	r3, r3
 8014f22:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014f26:	4619      	mov	r1, r3
 8014f28:	2036      	movs	r0, #54	; 0x36
 8014f2a:	f7fb f961 	bl	80101f0 <pbuf_alloc>
 8014f2e:	6138      	str	r0, [r7, #16]
 8014f30:	693b      	ldr	r3, [r7, #16]
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	d109      	bne.n	8014f4a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	8b5b      	ldrh	r3, [r3, #26]
 8014f3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014f3e:	b29a      	uxth	r2, r3
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8014f44:	f04f 33ff 	mov.w	r3, #4294967295
 8014f48:	e095      	b.n	8015076 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8014f4a:	693b      	ldr	r3, [r7, #16]
 8014f4c:	895a      	ldrh	r2, [r3, #10]
 8014f4e:	7dfb      	ldrb	r3, [r7, #23]
 8014f50:	b29b      	uxth	r3, r3
 8014f52:	429a      	cmp	r2, r3
 8014f54:	d206      	bcs.n	8014f64 <tcp_enqueue_flags+0xa0>
 8014f56:	4b4a      	ldr	r3, [pc, #296]	; (8015080 <tcp_enqueue_flags+0x1bc>)
 8014f58:	f240 4239 	movw	r2, #1081	; 0x439
 8014f5c:	494c      	ldr	r1, [pc, #304]	; (8015090 <tcp_enqueue_flags+0x1cc>)
 8014f5e:	484a      	ldr	r0, [pc, #296]	; (8015088 <tcp_enqueue_flags+0x1c4>)
 8014f60:	f004 faec 	bl	801953c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8014f68:	78fa      	ldrb	r2, [r7, #3]
 8014f6a:	7ffb      	ldrb	r3, [r7, #31]
 8014f6c:	9300      	str	r3, [sp, #0]
 8014f6e:	460b      	mov	r3, r1
 8014f70:	6939      	ldr	r1, [r7, #16]
 8014f72:	6878      	ldr	r0, [r7, #4]
 8014f74:	f7ff fd70 	bl	8014a58 <tcp_create_segment>
 8014f78:	60f8      	str	r0, [r7, #12]
 8014f7a:	68fb      	ldr	r3, [r7, #12]
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	d109      	bne.n	8014f94 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	8b5b      	ldrh	r3, [r3, #26]
 8014f84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014f88:	b29a      	uxth	r2, r3
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8014f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8014f92:	e070      	b.n	8015076 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8014f94:	68fb      	ldr	r3, [r7, #12]
 8014f96:	68db      	ldr	r3, [r3, #12]
 8014f98:	f003 0303 	and.w	r3, r3, #3
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	d006      	beq.n	8014fae <tcp_enqueue_flags+0xea>
 8014fa0:	4b37      	ldr	r3, [pc, #220]	; (8015080 <tcp_enqueue_flags+0x1bc>)
 8014fa2:	f240 4242 	movw	r2, #1090	; 0x442
 8014fa6:	493b      	ldr	r1, [pc, #236]	; (8015094 <tcp_enqueue_flags+0x1d0>)
 8014fa8:	4837      	ldr	r0, [pc, #220]	; (8015088 <tcp_enqueue_flags+0x1c4>)
 8014faa:	f004 fac7 	bl	801953c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8014fae:	68fb      	ldr	r3, [r7, #12]
 8014fb0:	891b      	ldrh	r3, [r3, #8]
 8014fb2:	2b00      	cmp	r3, #0
 8014fb4:	d006      	beq.n	8014fc4 <tcp_enqueue_flags+0x100>
 8014fb6:	4b32      	ldr	r3, [pc, #200]	; (8015080 <tcp_enqueue_flags+0x1bc>)
 8014fb8:	f240 4243 	movw	r2, #1091	; 0x443
 8014fbc:	4936      	ldr	r1, [pc, #216]	; (8015098 <tcp_enqueue_flags+0x1d4>)
 8014fbe:	4832      	ldr	r0, [pc, #200]	; (8015088 <tcp_enqueue_flags+0x1c4>)
 8014fc0:	f004 fabc 	bl	801953c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d103      	bne.n	8014fd4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	68fa      	ldr	r2, [r7, #12]
 8014fd0:	66da      	str	r2, [r3, #108]	; 0x6c
 8014fd2:	e00d      	b.n	8014ff0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014fd8:	61bb      	str	r3, [r7, #24]
 8014fda:	e002      	b.n	8014fe2 <tcp_enqueue_flags+0x11e>
 8014fdc:	69bb      	ldr	r3, [r7, #24]
 8014fde:	681b      	ldr	r3, [r3, #0]
 8014fe0:	61bb      	str	r3, [r7, #24]
 8014fe2:	69bb      	ldr	r3, [r7, #24]
 8014fe4:	681b      	ldr	r3, [r3, #0]
 8014fe6:	2b00      	cmp	r3, #0
 8014fe8:	d1f8      	bne.n	8014fdc <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8014fea:	69bb      	ldr	r3, [r7, #24]
 8014fec:	68fa      	ldr	r2, [r7, #12]
 8014fee:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	2200      	movs	r2, #0
 8014ff4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8014ff8:	78fb      	ldrb	r3, [r7, #3]
 8014ffa:	f003 0302 	and.w	r3, r3, #2
 8014ffe:	2b00      	cmp	r3, #0
 8015000:	d104      	bne.n	801500c <tcp_enqueue_flags+0x148>
 8015002:	78fb      	ldrb	r3, [r7, #3]
 8015004:	f003 0301 	and.w	r3, r3, #1
 8015008:	2b00      	cmp	r3, #0
 801500a:	d004      	beq.n	8015016 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015010:	1c5a      	adds	r2, r3, #1
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8015016:	78fb      	ldrb	r3, [r7, #3]
 8015018:	f003 0301 	and.w	r3, r3, #1
 801501c:	2b00      	cmp	r3, #0
 801501e:	d006      	beq.n	801502e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	8b5b      	ldrh	r3, [r3, #26]
 8015024:	f043 0320 	orr.w	r3, r3, #32
 8015028:	b29a      	uxth	r2, r3
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801502e:	68fb      	ldr	r3, [r7, #12]
 8015030:	685b      	ldr	r3, [r3, #4]
 8015032:	4618      	mov	r0, r3
 8015034:	f7fb fc48 	bl	80108c8 <pbuf_clen>
 8015038:	4603      	mov	r3, r0
 801503a:	461a      	mov	r2, r3
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015042:	4413      	add	r3, r2
 8015044:	b29a      	uxth	r2, r3
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015052:	2b00      	cmp	r3, #0
 8015054:	d00e      	beq.n	8015074 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801505a:	2b00      	cmp	r3, #0
 801505c:	d10a      	bne.n	8015074 <tcp_enqueue_flags+0x1b0>
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015062:	2b00      	cmp	r3, #0
 8015064:	d106      	bne.n	8015074 <tcp_enqueue_flags+0x1b0>
 8015066:	4b06      	ldr	r3, [pc, #24]	; (8015080 <tcp_enqueue_flags+0x1bc>)
 8015068:	f240 4265 	movw	r2, #1125	; 0x465
 801506c:	490b      	ldr	r1, [pc, #44]	; (801509c <tcp_enqueue_flags+0x1d8>)
 801506e:	4806      	ldr	r0, [pc, #24]	; (8015088 <tcp_enqueue_flags+0x1c4>)
 8015070:	f004 fa64 	bl	801953c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8015074:	2300      	movs	r3, #0
}
 8015076:	4618      	mov	r0, r3
 8015078:	3720      	adds	r7, #32
 801507a:	46bd      	mov	sp, r7
 801507c:	bd80      	pop	{r7, pc}
 801507e:	bf00      	nop
 8015080:	0801d38c 	.word	0x0801d38c
 8015084:	0801d7b0 	.word	0x0801d7b0
 8015088:	0801d3e0 	.word	0x0801d3e0
 801508c:	0801d808 	.word	0x0801d808
 8015090:	0801d828 	.word	0x0801d828
 8015094:	0801d864 	.word	0x0801d864
 8015098:	0801d87c 	.word	0x0801d87c
 801509c:	0801d8a8 	.word	0x0801d8a8

080150a0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80150a0:	b5b0      	push	{r4, r5, r7, lr}
 80150a2:	b08a      	sub	sp, #40	; 0x28
 80150a4:	af00      	add	r7, sp, #0
 80150a6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	d106      	bne.n	80150bc <tcp_output+0x1c>
 80150ae:	4b8a      	ldr	r3, [pc, #552]	; (80152d8 <tcp_output+0x238>)
 80150b0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80150b4:	4989      	ldr	r1, [pc, #548]	; (80152dc <tcp_output+0x23c>)
 80150b6:	488a      	ldr	r0, [pc, #552]	; (80152e0 <tcp_output+0x240>)
 80150b8:	f004 fa40 	bl	801953c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	7d1b      	ldrb	r3, [r3, #20]
 80150c0:	2b01      	cmp	r3, #1
 80150c2:	d106      	bne.n	80150d2 <tcp_output+0x32>
 80150c4:	4b84      	ldr	r3, [pc, #528]	; (80152d8 <tcp_output+0x238>)
 80150c6:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80150ca:	4986      	ldr	r1, [pc, #536]	; (80152e4 <tcp_output+0x244>)
 80150cc:	4884      	ldr	r0, [pc, #528]	; (80152e0 <tcp_output+0x240>)
 80150ce:	f004 fa35 	bl	801953c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80150d2:	4b85      	ldr	r3, [pc, #532]	; (80152e8 <tcp_output+0x248>)
 80150d4:	681b      	ldr	r3, [r3, #0]
 80150d6:	687a      	ldr	r2, [r7, #4]
 80150d8:	429a      	cmp	r2, r3
 80150da:	d101      	bne.n	80150e0 <tcp_output+0x40>
    return ERR_OK;
 80150dc:	2300      	movs	r3, #0
 80150de:	e1ce      	b.n	801547e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80150ec:	4293      	cmp	r3, r2
 80150ee:	bf28      	it	cs
 80150f0:	4613      	movcs	r3, r2
 80150f2:	b29b      	uxth	r3, r3
 80150f4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80150fa:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80150fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150fe:	2b00      	cmp	r3, #0
 8015100:	d10b      	bne.n	801511a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8015102:	687b      	ldr	r3, [r7, #4]
 8015104:	8b5b      	ldrh	r3, [r3, #26]
 8015106:	f003 0302 	and.w	r3, r3, #2
 801510a:	2b00      	cmp	r3, #0
 801510c:	f000 81aa 	beq.w	8015464 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8015110:	6878      	ldr	r0, [r7, #4]
 8015112:	f000 fdcb 	bl	8015cac <tcp_send_empty_ack>
 8015116:	4603      	mov	r3, r0
 8015118:	e1b1      	b.n	801547e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801511a:	6879      	ldr	r1, [r7, #4]
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	3304      	adds	r3, #4
 8015120:	461a      	mov	r2, r3
 8015122:	6878      	ldr	r0, [r7, #4]
 8015124:	f7ff fc7c 	bl	8014a20 <tcp_route>
 8015128:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801512a:	697b      	ldr	r3, [r7, #20]
 801512c:	2b00      	cmp	r3, #0
 801512e:	d102      	bne.n	8015136 <tcp_output+0x96>
    return ERR_RTE;
 8015130:	f06f 0303 	mvn.w	r3, #3
 8015134:	e1a3      	b.n	801547e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	2b00      	cmp	r3, #0
 801513a:	d003      	beq.n	8015144 <tcp_output+0xa4>
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	681b      	ldr	r3, [r3, #0]
 8015140:	2b00      	cmp	r3, #0
 8015142:	d111      	bne.n	8015168 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8015144:	697b      	ldr	r3, [r7, #20]
 8015146:	2b00      	cmp	r3, #0
 8015148:	d002      	beq.n	8015150 <tcp_output+0xb0>
 801514a:	697b      	ldr	r3, [r7, #20]
 801514c:	3304      	adds	r3, #4
 801514e:	e000      	b.n	8015152 <tcp_output+0xb2>
 8015150:	2300      	movs	r3, #0
 8015152:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8015154:	693b      	ldr	r3, [r7, #16]
 8015156:	2b00      	cmp	r3, #0
 8015158:	d102      	bne.n	8015160 <tcp_output+0xc0>
      return ERR_RTE;
 801515a:	f06f 0303 	mvn.w	r3, #3
 801515e:	e18e      	b.n	801547e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8015160:	693b      	ldr	r3, [r7, #16]
 8015162:	681a      	ldr	r2, [r3, #0]
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8015168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801516a:	68db      	ldr	r3, [r3, #12]
 801516c:	685b      	ldr	r3, [r3, #4]
 801516e:	4618      	mov	r0, r3
 8015170:	f7f9 ff41 	bl	800eff6 <lwip_htonl>
 8015174:	4602      	mov	r2, r0
 8015176:	687b      	ldr	r3, [r7, #4]
 8015178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801517a:	1ad3      	subs	r3, r2, r3
 801517c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801517e:	8912      	ldrh	r2, [r2, #8]
 8015180:	4413      	add	r3, r2
 8015182:	69ba      	ldr	r2, [r7, #24]
 8015184:	429a      	cmp	r2, r3
 8015186:	d227      	bcs.n	80151d8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801518e:	461a      	mov	r2, r3
 8015190:	69bb      	ldr	r3, [r7, #24]
 8015192:	4293      	cmp	r3, r2
 8015194:	d114      	bne.n	80151c0 <tcp_output+0x120>
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801519a:	2b00      	cmp	r3, #0
 801519c:	d110      	bne.n	80151c0 <tcp_output+0x120>
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	d10b      	bne.n	80151c0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	2200      	movs	r2, #0
 80151ac:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80151b0:	687b      	ldr	r3, [r7, #4]
 80151b2:	2201      	movs	r2, #1
 80151b4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	2200      	movs	r2, #0
 80151bc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80151c0:	687b      	ldr	r3, [r7, #4]
 80151c2:	8b5b      	ldrh	r3, [r3, #26]
 80151c4:	f003 0302 	and.w	r3, r3, #2
 80151c8:	2b00      	cmp	r3, #0
 80151ca:	f000 814d 	beq.w	8015468 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80151ce:	6878      	ldr	r0, [r7, #4]
 80151d0:	f000 fd6c 	bl	8015cac <tcp_send_empty_ack>
 80151d4:	4603      	mov	r3, r0
 80151d6:	e152      	b.n	801547e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	2200      	movs	r2, #0
 80151dc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80151e0:	687b      	ldr	r3, [r7, #4]
 80151e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80151e4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80151e6:	6a3b      	ldr	r3, [r7, #32]
 80151e8:	2b00      	cmp	r3, #0
 80151ea:	f000 811c 	beq.w	8015426 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80151ee:	e002      	b.n	80151f6 <tcp_output+0x156>
 80151f0:	6a3b      	ldr	r3, [r7, #32]
 80151f2:	681b      	ldr	r3, [r3, #0]
 80151f4:	623b      	str	r3, [r7, #32]
 80151f6:	6a3b      	ldr	r3, [r7, #32]
 80151f8:	681b      	ldr	r3, [r3, #0]
 80151fa:	2b00      	cmp	r3, #0
 80151fc:	d1f8      	bne.n	80151f0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80151fe:	e112      	b.n	8015426 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8015200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015202:	68db      	ldr	r3, [r3, #12]
 8015204:	899b      	ldrh	r3, [r3, #12]
 8015206:	b29b      	uxth	r3, r3
 8015208:	4618      	mov	r0, r3
 801520a:	f7f9 fedf 	bl	800efcc <lwip_htons>
 801520e:	4603      	mov	r3, r0
 8015210:	b2db      	uxtb	r3, r3
 8015212:	f003 0304 	and.w	r3, r3, #4
 8015216:	2b00      	cmp	r3, #0
 8015218:	d006      	beq.n	8015228 <tcp_output+0x188>
 801521a:	4b2f      	ldr	r3, [pc, #188]	; (80152d8 <tcp_output+0x238>)
 801521c:	f240 5236 	movw	r2, #1334	; 0x536
 8015220:	4932      	ldr	r1, [pc, #200]	; (80152ec <tcp_output+0x24c>)
 8015222:	482f      	ldr	r0, [pc, #188]	; (80152e0 <tcp_output+0x240>)
 8015224:	f004 f98a 	bl	801953c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801522c:	2b00      	cmp	r3, #0
 801522e:	d01f      	beq.n	8015270 <tcp_output+0x1d0>
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	8b5b      	ldrh	r3, [r3, #26]
 8015234:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8015238:	2b00      	cmp	r3, #0
 801523a:	d119      	bne.n	8015270 <tcp_output+0x1d0>
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015240:	2b00      	cmp	r3, #0
 8015242:	d00b      	beq.n	801525c <tcp_output+0x1bc>
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015248:	681b      	ldr	r3, [r3, #0]
 801524a:	2b00      	cmp	r3, #0
 801524c:	d110      	bne.n	8015270 <tcp_output+0x1d0>
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015252:	891a      	ldrh	r2, [r3, #8]
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015258:	429a      	cmp	r2, r3
 801525a:	d209      	bcs.n	8015270 <tcp_output+0x1d0>
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8015262:	2b00      	cmp	r3, #0
 8015264:	d004      	beq.n	8015270 <tcp_output+0x1d0>
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801526c:	2b08      	cmp	r3, #8
 801526e:	d901      	bls.n	8015274 <tcp_output+0x1d4>
 8015270:	2301      	movs	r3, #1
 8015272:	e000      	b.n	8015276 <tcp_output+0x1d6>
 8015274:	2300      	movs	r3, #0
 8015276:	2b00      	cmp	r3, #0
 8015278:	d106      	bne.n	8015288 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	8b5b      	ldrh	r3, [r3, #26]
 801527e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8015282:	2b00      	cmp	r3, #0
 8015284:	f000 80e4 	beq.w	8015450 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8015288:	687b      	ldr	r3, [r7, #4]
 801528a:	7d1b      	ldrb	r3, [r3, #20]
 801528c:	2b02      	cmp	r3, #2
 801528e:	d00d      	beq.n	80152ac <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8015290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015292:	68db      	ldr	r3, [r3, #12]
 8015294:	899b      	ldrh	r3, [r3, #12]
 8015296:	b29c      	uxth	r4, r3
 8015298:	2010      	movs	r0, #16
 801529a:	f7f9 fe97 	bl	800efcc <lwip_htons>
 801529e:	4603      	mov	r3, r0
 80152a0:	461a      	mov	r2, r3
 80152a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152a4:	68db      	ldr	r3, [r3, #12]
 80152a6:	4322      	orrs	r2, r4
 80152a8:	b292      	uxth	r2, r2
 80152aa:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80152ac:	697a      	ldr	r2, [r7, #20]
 80152ae:	6879      	ldr	r1, [r7, #4]
 80152b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80152b2:	f000 f909 	bl	80154c8 <tcp_output_segment>
 80152b6:	4603      	mov	r3, r0
 80152b8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80152ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80152be:	2b00      	cmp	r3, #0
 80152c0:	d016      	beq.n	80152f0 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	8b5b      	ldrh	r3, [r3, #26]
 80152c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80152ca:	b29a      	uxth	r2, r3
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	835a      	strh	r2, [r3, #26]
      return err;
 80152d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80152d4:	e0d3      	b.n	801547e <tcp_output+0x3de>
 80152d6:	bf00      	nop
 80152d8:	0801d38c 	.word	0x0801d38c
 80152dc:	0801d8d0 	.word	0x0801d8d0
 80152e0:	0801d3e0 	.word	0x0801d3e0
 80152e4:	0801d8e8 	.word	0x0801d8e8
 80152e8:	20008114 	.word	0x20008114
 80152ec:	0801d910 	.word	0x0801d910
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80152f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152f2:	681a      	ldr	r2, [r3, #0]
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80152f8:	687b      	ldr	r3, [r7, #4]
 80152fa:	7d1b      	ldrb	r3, [r3, #20]
 80152fc:	2b02      	cmp	r3, #2
 80152fe:	d006      	beq.n	801530e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	8b5b      	ldrh	r3, [r3, #26]
 8015304:	f023 0303 	bic.w	r3, r3, #3
 8015308:	b29a      	uxth	r2, r3
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801530e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015310:	68db      	ldr	r3, [r3, #12]
 8015312:	685b      	ldr	r3, [r3, #4]
 8015314:	4618      	mov	r0, r3
 8015316:	f7f9 fe6e 	bl	800eff6 <lwip_htonl>
 801531a:	4604      	mov	r4, r0
 801531c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801531e:	891b      	ldrh	r3, [r3, #8]
 8015320:	461d      	mov	r5, r3
 8015322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015324:	68db      	ldr	r3, [r3, #12]
 8015326:	899b      	ldrh	r3, [r3, #12]
 8015328:	b29b      	uxth	r3, r3
 801532a:	4618      	mov	r0, r3
 801532c:	f7f9 fe4e 	bl	800efcc <lwip_htons>
 8015330:	4603      	mov	r3, r0
 8015332:	b2db      	uxtb	r3, r3
 8015334:	f003 0303 	and.w	r3, r3, #3
 8015338:	2b00      	cmp	r3, #0
 801533a:	d001      	beq.n	8015340 <tcp_output+0x2a0>
 801533c:	2301      	movs	r3, #1
 801533e:	e000      	b.n	8015342 <tcp_output+0x2a2>
 8015340:	2300      	movs	r3, #0
 8015342:	442b      	add	r3, r5
 8015344:	4423      	add	r3, r4
 8015346:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015348:	687b      	ldr	r3, [r7, #4]
 801534a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801534c:	68bb      	ldr	r3, [r7, #8]
 801534e:	1ad3      	subs	r3, r2, r3
 8015350:	2b00      	cmp	r3, #0
 8015352:	da02      	bge.n	801535a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	68ba      	ldr	r2, [r7, #8]
 8015358:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801535a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801535c:	891b      	ldrh	r3, [r3, #8]
 801535e:	461c      	mov	r4, r3
 8015360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015362:	68db      	ldr	r3, [r3, #12]
 8015364:	899b      	ldrh	r3, [r3, #12]
 8015366:	b29b      	uxth	r3, r3
 8015368:	4618      	mov	r0, r3
 801536a:	f7f9 fe2f 	bl	800efcc <lwip_htons>
 801536e:	4603      	mov	r3, r0
 8015370:	b2db      	uxtb	r3, r3
 8015372:	f003 0303 	and.w	r3, r3, #3
 8015376:	2b00      	cmp	r3, #0
 8015378:	d001      	beq.n	801537e <tcp_output+0x2de>
 801537a:	2301      	movs	r3, #1
 801537c:	e000      	b.n	8015380 <tcp_output+0x2e0>
 801537e:	2300      	movs	r3, #0
 8015380:	4423      	add	r3, r4
 8015382:	2b00      	cmp	r3, #0
 8015384:	d049      	beq.n	801541a <tcp_output+0x37a>
      seg->next = NULL;
 8015386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015388:	2200      	movs	r2, #0
 801538a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015390:	2b00      	cmp	r3, #0
 8015392:	d105      	bne.n	80153a0 <tcp_output+0x300>
        pcb->unacked = seg;
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015398:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801539a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801539c:	623b      	str	r3, [r7, #32]
 801539e:	e03f      	b.n	8015420 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80153a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153a2:	68db      	ldr	r3, [r3, #12]
 80153a4:	685b      	ldr	r3, [r3, #4]
 80153a6:	4618      	mov	r0, r3
 80153a8:	f7f9 fe25 	bl	800eff6 <lwip_htonl>
 80153ac:	4604      	mov	r4, r0
 80153ae:	6a3b      	ldr	r3, [r7, #32]
 80153b0:	68db      	ldr	r3, [r3, #12]
 80153b2:	685b      	ldr	r3, [r3, #4]
 80153b4:	4618      	mov	r0, r3
 80153b6:	f7f9 fe1e 	bl	800eff6 <lwip_htonl>
 80153ba:	4603      	mov	r3, r0
 80153bc:	1ae3      	subs	r3, r4, r3
 80153be:	2b00      	cmp	r3, #0
 80153c0:	da24      	bge.n	801540c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80153c2:	687b      	ldr	r3, [r7, #4]
 80153c4:	3370      	adds	r3, #112	; 0x70
 80153c6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80153c8:	e002      	b.n	80153d0 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80153ca:	69fb      	ldr	r3, [r7, #28]
 80153cc:	681b      	ldr	r3, [r3, #0]
 80153ce:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80153d0:	69fb      	ldr	r3, [r7, #28]
 80153d2:	681b      	ldr	r3, [r3, #0]
 80153d4:	2b00      	cmp	r3, #0
 80153d6:	d011      	beq.n	80153fc <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80153d8:	69fb      	ldr	r3, [r7, #28]
 80153da:	681b      	ldr	r3, [r3, #0]
 80153dc:	68db      	ldr	r3, [r3, #12]
 80153de:	685b      	ldr	r3, [r3, #4]
 80153e0:	4618      	mov	r0, r3
 80153e2:	f7f9 fe08 	bl	800eff6 <lwip_htonl>
 80153e6:	4604      	mov	r4, r0
 80153e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153ea:	68db      	ldr	r3, [r3, #12]
 80153ec:	685b      	ldr	r3, [r3, #4]
 80153ee:	4618      	mov	r0, r3
 80153f0:	f7f9 fe01 	bl	800eff6 <lwip_htonl>
 80153f4:	4603      	mov	r3, r0
 80153f6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80153f8:	2b00      	cmp	r3, #0
 80153fa:	dbe6      	blt.n	80153ca <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80153fc:	69fb      	ldr	r3, [r7, #28]
 80153fe:	681a      	ldr	r2, [r3, #0]
 8015400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015402:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8015404:	69fb      	ldr	r3, [r7, #28]
 8015406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015408:	601a      	str	r2, [r3, #0]
 801540a:	e009      	b.n	8015420 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801540c:	6a3b      	ldr	r3, [r7, #32]
 801540e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015410:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8015412:	6a3b      	ldr	r3, [r7, #32]
 8015414:	681b      	ldr	r3, [r3, #0]
 8015416:	623b      	str	r3, [r7, #32]
 8015418:	e002      	b.n	8015420 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801541a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801541c:	f7fc fc3f 	bl	8011c9e <tcp_seg_free>
    }
    seg = pcb->unsent;
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015424:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8015426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015428:	2b00      	cmp	r3, #0
 801542a:	d012      	beq.n	8015452 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801542c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801542e:	68db      	ldr	r3, [r3, #12]
 8015430:	685b      	ldr	r3, [r3, #4]
 8015432:	4618      	mov	r0, r3
 8015434:	f7f9 fddf 	bl	800eff6 <lwip_htonl>
 8015438:	4602      	mov	r2, r0
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801543e:	1ad3      	subs	r3, r2, r3
 8015440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015442:	8912      	ldrh	r2, [r2, #8]
 8015444:	4413      	add	r3, r2
  while (seg != NULL &&
 8015446:	69ba      	ldr	r2, [r7, #24]
 8015448:	429a      	cmp	r2, r3
 801544a:	f4bf aed9 	bcs.w	8015200 <tcp_output+0x160>
 801544e:	e000      	b.n	8015452 <tcp_output+0x3b2>
      break;
 8015450:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8015452:	687b      	ldr	r3, [r7, #4]
 8015454:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015456:	2b00      	cmp	r3, #0
 8015458:	d108      	bne.n	801546c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801545a:	687b      	ldr	r3, [r7, #4]
 801545c:	2200      	movs	r2, #0
 801545e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8015462:	e004      	b.n	801546e <tcp_output+0x3ce>
    goto output_done;
 8015464:	bf00      	nop
 8015466:	e002      	b.n	801546e <tcp_output+0x3ce>
    goto output_done;
 8015468:	bf00      	nop
 801546a:	e000      	b.n	801546e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801546c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801546e:	687b      	ldr	r3, [r7, #4]
 8015470:	8b5b      	ldrh	r3, [r3, #26]
 8015472:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015476:	b29a      	uxth	r2, r3
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801547c:	2300      	movs	r3, #0
}
 801547e:	4618      	mov	r0, r3
 8015480:	3728      	adds	r7, #40	; 0x28
 8015482:	46bd      	mov	sp, r7
 8015484:	bdb0      	pop	{r4, r5, r7, pc}
 8015486:	bf00      	nop

08015488 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8015488:	b580      	push	{r7, lr}
 801548a:	b082      	sub	sp, #8
 801548c:	af00      	add	r7, sp, #0
 801548e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	2b00      	cmp	r3, #0
 8015494:	d106      	bne.n	80154a4 <tcp_output_segment_busy+0x1c>
 8015496:	4b09      	ldr	r3, [pc, #36]	; (80154bc <tcp_output_segment_busy+0x34>)
 8015498:	f240 529a 	movw	r2, #1434	; 0x59a
 801549c:	4908      	ldr	r1, [pc, #32]	; (80154c0 <tcp_output_segment_busy+0x38>)
 801549e:	4809      	ldr	r0, [pc, #36]	; (80154c4 <tcp_output_segment_busy+0x3c>)
 80154a0:	f004 f84c 	bl	801953c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80154a4:	687b      	ldr	r3, [r7, #4]
 80154a6:	685b      	ldr	r3, [r3, #4]
 80154a8:	7b9b      	ldrb	r3, [r3, #14]
 80154aa:	2b01      	cmp	r3, #1
 80154ac:	d001      	beq.n	80154b2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80154ae:	2301      	movs	r3, #1
 80154b0:	e000      	b.n	80154b4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80154b2:	2300      	movs	r3, #0
}
 80154b4:	4618      	mov	r0, r3
 80154b6:	3708      	adds	r7, #8
 80154b8:	46bd      	mov	sp, r7
 80154ba:	bd80      	pop	{r7, pc}
 80154bc:	0801d38c 	.word	0x0801d38c
 80154c0:	0801d928 	.word	0x0801d928
 80154c4:	0801d3e0 	.word	0x0801d3e0

080154c8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80154c8:	b5b0      	push	{r4, r5, r7, lr}
 80154ca:	b08c      	sub	sp, #48	; 0x30
 80154cc:	af04      	add	r7, sp, #16
 80154ce:	60f8      	str	r0, [r7, #12]
 80154d0:	60b9      	str	r1, [r7, #8]
 80154d2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80154d4:	68fb      	ldr	r3, [r7, #12]
 80154d6:	2b00      	cmp	r3, #0
 80154d8:	d106      	bne.n	80154e8 <tcp_output_segment+0x20>
 80154da:	4b64      	ldr	r3, [pc, #400]	; (801566c <tcp_output_segment+0x1a4>)
 80154dc:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80154e0:	4963      	ldr	r1, [pc, #396]	; (8015670 <tcp_output_segment+0x1a8>)
 80154e2:	4864      	ldr	r0, [pc, #400]	; (8015674 <tcp_output_segment+0x1ac>)
 80154e4:	f004 f82a 	bl	801953c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80154e8:	68bb      	ldr	r3, [r7, #8]
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	d106      	bne.n	80154fc <tcp_output_segment+0x34>
 80154ee:	4b5f      	ldr	r3, [pc, #380]	; (801566c <tcp_output_segment+0x1a4>)
 80154f0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80154f4:	4960      	ldr	r1, [pc, #384]	; (8015678 <tcp_output_segment+0x1b0>)
 80154f6:	485f      	ldr	r0, [pc, #380]	; (8015674 <tcp_output_segment+0x1ac>)
 80154f8:	f004 f820 	bl	801953c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	2b00      	cmp	r3, #0
 8015500:	d106      	bne.n	8015510 <tcp_output_segment+0x48>
 8015502:	4b5a      	ldr	r3, [pc, #360]	; (801566c <tcp_output_segment+0x1a4>)
 8015504:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8015508:	495c      	ldr	r1, [pc, #368]	; (801567c <tcp_output_segment+0x1b4>)
 801550a:	485a      	ldr	r0, [pc, #360]	; (8015674 <tcp_output_segment+0x1ac>)
 801550c:	f004 f816 	bl	801953c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8015510:	68f8      	ldr	r0, [r7, #12]
 8015512:	f7ff ffb9 	bl	8015488 <tcp_output_segment_busy>
 8015516:	4603      	mov	r3, r0
 8015518:	2b00      	cmp	r3, #0
 801551a:	d001      	beq.n	8015520 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801551c:	2300      	movs	r3, #0
 801551e:	e0a1      	b.n	8015664 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8015520:	68bb      	ldr	r3, [r7, #8]
 8015522:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015524:	68fb      	ldr	r3, [r7, #12]
 8015526:	68dc      	ldr	r4, [r3, #12]
 8015528:	4610      	mov	r0, r2
 801552a:	f7f9 fd64 	bl	800eff6 <lwip_htonl>
 801552e:	4603      	mov	r3, r0
 8015530:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8015532:	68bb      	ldr	r3, [r7, #8]
 8015534:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8015536:	68fb      	ldr	r3, [r7, #12]
 8015538:	68dc      	ldr	r4, [r3, #12]
 801553a:	4610      	mov	r0, r2
 801553c:	f7f9 fd46 	bl	800efcc <lwip_htons>
 8015540:	4603      	mov	r3, r0
 8015542:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015544:	68bb      	ldr	r3, [r7, #8]
 8015546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015548:	68ba      	ldr	r2, [r7, #8]
 801554a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801554c:	441a      	add	r2, r3
 801554e:	68bb      	ldr	r3, [r7, #8]
 8015550:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8015552:	68fb      	ldr	r3, [r7, #12]
 8015554:	68db      	ldr	r3, [r3, #12]
 8015556:	3314      	adds	r3, #20
 8015558:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801555a:	68fb      	ldr	r3, [r7, #12]
 801555c:	7a9b      	ldrb	r3, [r3, #10]
 801555e:	f003 0301 	and.w	r3, r3, #1
 8015562:	2b00      	cmp	r3, #0
 8015564:	d015      	beq.n	8015592 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8015566:	68bb      	ldr	r3, [r7, #8]
 8015568:	3304      	adds	r3, #4
 801556a:	461a      	mov	r2, r3
 801556c:	6879      	ldr	r1, [r7, #4]
 801556e:	f44f 7006 	mov.w	r0, #536	; 0x218
 8015572:	f7fc fe8b 	bl	801228c <tcp_eff_send_mss_netif>
 8015576:	4603      	mov	r3, r0
 8015578:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801557a:	8b7b      	ldrh	r3, [r7, #26]
 801557c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8015580:	4618      	mov	r0, r3
 8015582:	f7f9 fd38 	bl	800eff6 <lwip_htonl>
 8015586:	4602      	mov	r2, r0
 8015588:	69fb      	ldr	r3, [r7, #28]
 801558a:	601a      	str	r2, [r3, #0]
    opts += 1;
 801558c:	69fb      	ldr	r3, [r7, #28]
 801558e:	3304      	adds	r3, #4
 8015590:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8015592:	68bb      	ldr	r3, [r7, #8]
 8015594:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8015598:	2b00      	cmp	r3, #0
 801559a:	da02      	bge.n	80155a2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801559c:	68bb      	ldr	r3, [r7, #8]
 801559e:	2200      	movs	r2, #0
 80155a0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80155a2:	68bb      	ldr	r3, [r7, #8]
 80155a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80155a6:	2b00      	cmp	r3, #0
 80155a8:	d10c      	bne.n	80155c4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80155aa:	4b35      	ldr	r3, [pc, #212]	; (8015680 <tcp_output_segment+0x1b8>)
 80155ac:	681a      	ldr	r2, [r3, #0]
 80155ae:	68bb      	ldr	r3, [r7, #8]
 80155b0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80155b2:	68fb      	ldr	r3, [r7, #12]
 80155b4:	68db      	ldr	r3, [r3, #12]
 80155b6:	685b      	ldr	r3, [r3, #4]
 80155b8:	4618      	mov	r0, r3
 80155ba:	f7f9 fd1c 	bl	800eff6 <lwip_htonl>
 80155be:	4602      	mov	r2, r0
 80155c0:	68bb      	ldr	r3, [r7, #8]
 80155c2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80155c4:	68fb      	ldr	r3, [r7, #12]
 80155c6:	68da      	ldr	r2, [r3, #12]
 80155c8:	68fb      	ldr	r3, [r7, #12]
 80155ca:	685b      	ldr	r3, [r3, #4]
 80155cc:	685b      	ldr	r3, [r3, #4]
 80155ce:	1ad3      	subs	r3, r2, r3
 80155d0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80155d2:	68fb      	ldr	r3, [r7, #12]
 80155d4:	685b      	ldr	r3, [r3, #4]
 80155d6:	8959      	ldrh	r1, [r3, #10]
 80155d8:	68fb      	ldr	r3, [r7, #12]
 80155da:	685b      	ldr	r3, [r3, #4]
 80155dc:	8b3a      	ldrh	r2, [r7, #24]
 80155de:	1a8a      	subs	r2, r1, r2
 80155e0:	b292      	uxth	r2, r2
 80155e2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80155e4:	68fb      	ldr	r3, [r7, #12]
 80155e6:	685b      	ldr	r3, [r3, #4]
 80155e8:	8919      	ldrh	r1, [r3, #8]
 80155ea:	68fb      	ldr	r3, [r7, #12]
 80155ec:	685b      	ldr	r3, [r3, #4]
 80155ee:	8b3a      	ldrh	r2, [r7, #24]
 80155f0:	1a8a      	subs	r2, r1, r2
 80155f2:	b292      	uxth	r2, r2
 80155f4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80155f6:	68fb      	ldr	r3, [r7, #12]
 80155f8:	685b      	ldr	r3, [r3, #4]
 80155fa:	68fa      	ldr	r2, [r7, #12]
 80155fc:	68d2      	ldr	r2, [r2, #12]
 80155fe:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8015600:	68fb      	ldr	r3, [r7, #12]
 8015602:	68db      	ldr	r3, [r3, #12]
 8015604:	2200      	movs	r2, #0
 8015606:	741a      	strb	r2, [r3, #16]
 8015608:	2200      	movs	r2, #0
 801560a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801560c:	68fb      	ldr	r3, [r7, #12]
 801560e:	68da      	ldr	r2, [r3, #12]
 8015610:	68fb      	ldr	r3, [r7, #12]
 8015612:	7a9b      	ldrb	r3, [r3, #10]
 8015614:	f003 0301 	and.w	r3, r3, #1
 8015618:	2b00      	cmp	r3, #0
 801561a:	d001      	beq.n	8015620 <tcp_output_segment+0x158>
 801561c:	2318      	movs	r3, #24
 801561e:	e000      	b.n	8015622 <tcp_output_segment+0x15a>
 8015620:	2314      	movs	r3, #20
 8015622:	4413      	add	r3, r2
 8015624:	69fa      	ldr	r2, [r7, #28]
 8015626:	429a      	cmp	r2, r3
 8015628:	d006      	beq.n	8015638 <tcp_output_segment+0x170>
 801562a:	4b10      	ldr	r3, [pc, #64]	; (801566c <tcp_output_segment+0x1a4>)
 801562c:	f240 621c 	movw	r2, #1564	; 0x61c
 8015630:	4914      	ldr	r1, [pc, #80]	; (8015684 <tcp_output_segment+0x1bc>)
 8015632:	4810      	ldr	r0, [pc, #64]	; (8015674 <tcp_output_segment+0x1ac>)
 8015634:	f003 ff82 	bl	801953c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8015638:	68fb      	ldr	r3, [r7, #12]
 801563a:	6858      	ldr	r0, [r3, #4]
 801563c:	68b9      	ldr	r1, [r7, #8]
 801563e:	68bb      	ldr	r3, [r7, #8]
 8015640:	1d1c      	adds	r4, r3, #4
 8015642:	68bb      	ldr	r3, [r7, #8]
 8015644:	7add      	ldrb	r5, [r3, #11]
 8015646:	68bb      	ldr	r3, [r7, #8]
 8015648:	7a9b      	ldrb	r3, [r3, #10]
 801564a:	687a      	ldr	r2, [r7, #4]
 801564c:	9202      	str	r2, [sp, #8]
 801564e:	2206      	movs	r2, #6
 8015650:	9201      	str	r2, [sp, #4]
 8015652:	9300      	str	r3, [sp, #0]
 8015654:	462b      	mov	r3, r5
 8015656:	4622      	mov	r2, r4
 8015658:	f002 fa18 	bl	8017a8c <ip4_output_if>
 801565c:	4603      	mov	r3, r0
 801565e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8015660:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015664:	4618      	mov	r0, r3
 8015666:	3720      	adds	r7, #32
 8015668:	46bd      	mov	sp, r7
 801566a:	bdb0      	pop	{r4, r5, r7, pc}
 801566c:	0801d38c 	.word	0x0801d38c
 8015670:	0801d950 	.word	0x0801d950
 8015674:	0801d3e0 	.word	0x0801d3e0
 8015678:	0801d970 	.word	0x0801d970
 801567c:	0801d990 	.word	0x0801d990
 8015680:	200080c8 	.word	0x200080c8
 8015684:	0801d9b4 	.word	0x0801d9b4

08015688 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8015688:	b5b0      	push	{r4, r5, r7, lr}
 801568a:	b084      	sub	sp, #16
 801568c:	af00      	add	r7, sp, #0
 801568e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8015690:	687b      	ldr	r3, [r7, #4]
 8015692:	2b00      	cmp	r3, #0
 8015694:	d106      	bne.n	80156a4 <tcp_rexmit_rto_prepare+0x1c>
 8015696:	4b31      	ldr	r3, [pc, #196]	; (801575c <tcp_rexmit_rto_prepare+0xd4>)
 8015698:	f240 6263 	movw	r2, #1635	; 0x663
 801569c:	4930      	ldr	r1, [pc, #192]	; (8015760 <tcp_rexmit_rto_prepare+0xd8>)
 801569e:	4831      	ldr	r0, [pc, #196]	; (8015764 <tcp_rexmit_rto_prepare+0xdc>)
 80156a0:	f003 ff4c 	bl	801953c <iprintf>

  if (pcb->unacked == NULL) {
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	d102      	bne.n	80156b2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80156ac:	f06f 0305 	mvn.w	r3, #5
 80156b0:	e050      	b.n	8015754 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80156b6:	60fb      	str	r3, [r7, #12]
 80156b8:	e00b      	b.n	80156d2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80156ba:	68f8      	ldr	r0, [r7, #12]
 80156bc:	f7ff fee4 	bl	8015488 <tcp_output_segment_busy>
 80156c0:	4603      	mov	r3, r0
 80156c2:	2b00      	cmp	r3, #0
 80156c4:	d002      	beq.n	80156cc <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80156c6:	f06f 0305 	mvn.w	r3, #5
 80156ca:	e043      	b.n	8015754 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80156cc:	68fb      	ldr	r3, [r7, #12]
 80156ce:	681b      	ldr	r3, [r3, #0]
 80156d0:	60fb      	str	r3, [r7, #12]
 80156d2:	68fb      	ldr	r3, [r7, #12]
 80156d4:	681b      	ldr	r3, [r3, #0]
 80156d6:	2b00      	cmp	r3, #0
 80156d8:	d1ef      	bne.n	80156ba <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80156da:	68f8      	ldr	r0, [r7, #12]
 80156dc:	f7ff fed4 	bl	8015488 <tcp_output_segment_busy>
 80156e0:	4603      	mov	r3, r0
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	d002      	beq.n	80156ec <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80156e6:	f06f 0305 	mvn.w	r3, #5
 80156ea:	e033      	b.n	8015754 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80156f0:	68fb      	ldr	r3, [r7, #12]
 80156f2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	2200      	movs	r2, #0
 8015700:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	8b5b      	ldrh	r3, [r3, #26]
 8015706:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801570a:	b29a      	uxth	r2, r3
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8015710:	68fb      	ldr	r3, [r7, #12]
 8015712:	68db      	ldr	r3, [r3, #12]
 8015714:	685b      	ldr	r3, [r3, #4]
 8015716:	4618      	mov	r0, r3
 8015718:	f7f9 fc6d 	bl	800eff6 <lwip_htonl>
 801571c:	4604      	mov	r4, r0
 801571e:	68fb      	ldr	r3, [r7, #12]
 8015720:	891b      	ldrh	r3, [r3, #8]
 8015722:	461d      	mov	r5, r3
 8015724:	68fb      	ldr	r3, [r7, #12]
 8015726:	68db      	ldr	r3, [r3, #12]
 8015728:	899b      	ldrh	r3, [r3, #12]
 801572a:	b29b      	uxth	r3, r3
 801572c:	4618      	mov	r0, r3
 801572e:	f7f9 fc4d 	bl	800efcc <lwip_htons>
 8015732:	4603      	mov	r3, r0
 8015734:	b2db      	uxtb	r3, r3
 8015736:	f003 0303 	and.w	r3, r3, #3
 801573a:	2b00      	cmp	r3, #0
 801573c:	d001      	beq.n	8015742 <tcp_rexmit_rto_prepare+0xba>
 801573e:	2301      	movs	r3, #1
 8015740:	e000      	b.n	8015744 <tcp_rexmit_rto_prepare+0xbc>
 8015742:	2300      	movs	r3, #0
 8015744:	442b      	add	r3, r5
 8015746:	18e2      	adds	r2, r4, r3
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	2200      	movs	r2, #0
 8015750:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8015752:	2300      	movs	r3, #0
}
 8015754:	4618      	mov	r0, r3
 8015756:	3710      	adds	r7, #16
 8015758:	46bd      	mov	sp, r7
 801575a:	bdb0      	pop	{r4, r5, r7, pc}
 801575c:	0801d38c 	.word	0x0801d38c
 8015760:	0801d9c8 	.word	0x0801d9c8
 8015764:	0801d3e0 	.word	0x0801d3e0

08015768 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8015768:	b580      	push	{r7, lr}
 801576a:	b082      	sub	sp, #8
 801576c:	af00      	add	r7, sp, #0
 801576e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	2b00      	cmp	r3, #0
 8015774:	d106      	bne.n	8015784 <tcp_rexmit_rto_commit+0x1c>
 8015776:	4b0d      	ldr	r3, [pc, #52]	; (80157ac <tcp_rexmit_rto_commit+0x44>)
 8015778:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801577c:	490c      	ldr	r1, [pc, #48]	; (80157b0 <tcp_rexmit_rto_commit+0x48>)
 801577e:	480d      	ldr	r0, [pc, #52]	; (80157b4 <tcp_rexmit_rto_commit+0x4c>)
 8015780:	f003 fedc 	bl	801953c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801578a:	2bff      	cmp	r3, #255	; 0xff
 801578c:	d007      	beq.n	801579e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801578e:	687b      	ldr	r3, [r7, #4]
 8015790:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015794:	3301      	adds	r3, #1
 8015796:	b2da      	uxtb	r2, r3
 8015798:	687b      	ldr	r3, [r7, #4]
 801579a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801579e:	6878      	ldr	r0, [r7, #4]
 80157a0:	f7ff fc7e 	bl	80150a0 <tcp_output>
}
 80157a4:	bf00      	nop
 80157a6:	3708      	adds	r7, #8
 80157a8:	46bd      	mov	sp, r7
 80157aa:	bd80      	pop	{r7, pc}
 80157ac:	0801d38c 	.word	0x0801d38c
 80157b0:	0801d9ec 	.word	0x0801d9ec
 80157b4:	0801d3e0 	.word	0x0801d3e0

080157b8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80157b8:	b580      	push	{r7, lr}
 80157ba:	b082      	sub	sp, #8
 80157bc:	af00      	add	r7, sp, #0
 80157be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	2b00      	cmp	r3, #0
 80157c4:	d106      	bne.n	80157d4 <tcp_rexmit_rto+0x1c>
 80157c6:	4b0a      	ldr	r3, [pc, #40]	; (80157f0 <tcp_rexmit_rto+0x38>)
 80157c8:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80157cc:	4909      	ldr	r1, [pc, #36]	; (80157f4 <tcp_rexmit_rto+0x3c>)
 80157ce:	480a      	ldr	r0, [pc, #40]	; (80157f8 <tcp_rexmit_rto+0x40>)
 80157d0:	f003 feb4 	bl	801953c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80157d4:	6878      	ldr	r0, [r7, #4]
 80157d6:	f7ff ff57 	bl	8015688 <tcp_rexmit_rto_prepare>
 80157da:	4603      	mov	r3, r0
 80157dc:	2b00      	cmp	r3, #0
 80157de:	d102      	bne.n	80157e6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80157e0:	6878      	ldr	r0, [r7, #4]
 80157e2:	f7ff ffc1 	bl	8015768 <tcp_rexmit_rto_commit>
  }
}
 80157e6:	bf00      	nop
 80157e8:	3708      	adds	r7, #8
 80157ea:	46bd      	mov	sp, r7
 80157ec:	bd80      	pop	{r7, pc}
 80157ee:	bf00      	nop
 80157f0:	0801d38c 	.word	0x0801d38c
 80157f4:	0801da10 	.word	0x0801da10
 80157f8:	0801d3e0 	.word	0x0801d3e0

080157fc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80157fc:	b590      	push	{r4, r7, lr}
 80157fe:	b085      	sub	sp, #20
 8015800:	af00      	add	r7, sp, #0
 8015802:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8015804:	687b      	ldr	r3, [r7, #4]
 8015806:	2b00      	cmp	r3, #0
 8015808:	d106      	bne.n	8015818 <tcp_rexmit+0x1c>
 801580a:	4b2f      	ldr	r3, [pc, #188]	; (80158c8 <tcp_rexmit+0xcc>)
 801580c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8015810:	492e      	ldr	r1, [pc, #184]	; (80158cc <tcp_rexmit+0xd0>)
 8015812:	482f      	ldr	r0, [pc, #188]	; (80158d0 <tcp_rexmit+0xd4>)
 8015814:	f003 fe92 	bl	801953c <iprintf>

  if (pcb->unacked == NULL) {
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801581c:	2b00      	cmp	r3, #0
 801581e:	d102      	bne.n	8015826 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8015820:	f06f 0305 	mvn.w	r3, #5
 8015824:	e04c      	b.n	80158c0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801582a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801582c:	68b8      	ldr	r0, [r7, #8]
 801582e:	f7ff fe2b 	bl	8015488 <tcp_output_segment_busy>
 8015832:	4603      	mov	r3, r0
 8015834:	2b00      	cmp	r3, #0
 8015836:	d002      	beq.n	801583e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8015838:	f06f 0305 	mvn.w	r3, #5
 801583c:	e040      	b.n	80158c0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801583e:	68bb      	ldr	r3, [r7, #8]
 8015840:	681a      	ldr	r2, [r3, #0]
 8015842:	687b      	ldr	r3, [r7, #4]
 8015844:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8015846:	687b      	ldr	r3, [r7, #4]
 8015848:	336c      	adds	r3, #108	; 0x6c
 801584a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801584c:	e002      	b.n	8015854 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801584e:	68fb      	ldr	r3, [r7, #12]
 8015850:	681b      	ldr	r3, [r3, #0]
 8015852:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015854:	68fb      	ldr	r3, [r7, #12]
 8015856:	681b      	ldr	r3, [r3, #0]
 8015858:	2b00      	cmp	r3, #0
 801585a:	d011      	beq.n	8015880 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801585c:	68fb      	ldr	r3, [r7, #12]
 801585e:	681b      	ldr	r3, [r3, #0]
 8015860:	68db      	ldr	r3, [r3, #12]
 8015862:	685b      	ldr	r3, [r3, #4]
 8015864:	4618      	mov	r0, r3
 8015866:	f7f9 fbc6 	bl	800eff6 <lwip_htonl>
 801586a:	4604      	mov	r4, r0
 801586c:	68bb      	ldr	r3, [r7, #8]
 801586e:	68db      	ldr	r3, [r3, #12]
 8015870:	685b      	ldr	r3, [r3, #4]
 8015872:	4618      	mov	r0, r3
 8015874:	f7f9 fbbf 	bl	800eff6 <lwip_htonl>
 8015878:	4603      	mov	r3, r0
 801587a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801587c:	2b00      	cmp	r3, #0
 801587e:	dbe6      	blt.n	801584e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8015880:	68fb      	ldr	r3, [r7, #12]
 8015882:	681a      	ldr	r2, [r3, #0]
 8015884:	68bb      	ldr	r3, [r7, #8]
 8015886:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8015888:	68fb      	ldr	r3, [r7, #12]
 801588a:	68ba      	ldr	r2, [r7, #8]
 801588c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801588e:	68bb      	ldr	r3, [r7, #8]
 8015890:	681b      	ldr	r3, [r3, #0]
 8015892:	2b00      	cmp	r3, #0
 8015894:	d103      	bne.n	801589e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8015896:	687b      	ldr	r3, [r7, #4]
 8015898:	2200      	movs	r2, #0
 801589a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80158a4:	2bff      	cmp	r3, #255	; 0xff
 80158a6:	d007      	beq.n	80158b8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80158a8:	687b      	ldr	r3, [r7, #4]
 80158aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80158ae:	3301      	adds	r3, #1
 80158b0:	b2da      	uxtb	r2, r3
 80158b2:	687b      	ldr	r3, [r7, #4]
 80158b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80158b8:	687b      	ldr	r3, [r7, #4]
 80158ba:	2200      	movs	r2, #0
 80158bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80158be:	2300      	movs	r3, #0
}
 80158c0:	4618      	mov	r0, r3
 80158c2:	3714      	adds	r7, #20
 80158c4:	46bd      	mov	sp, r7
 80158c6:	bd90      	pop	{r4, r7, pc}
 80158c8:	0801d38c 	.word	0x0801d38c
 80158cc:	0801da2c 	.word	0x0801da2c
 80158d0:	0801d3e0 	.word	0x0801d3e0

080158d4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80158d4:	b580      	push	{r7, lr}
 80158d6:	b082      	sub	sp, #8
 80158d8:	af00      	add	r7, sp, #0
 80158da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	2b00      	cmp	r3, #0
 80158e0:	d106      	bne.n	80158f0 <tcp_rexmit_fast+0x1c>
 80158e2:	4b2a      	ldr	r3, [pc, #168]	; (801598c <tcp_rexmit_fast+0xb8>)
 80158e4:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80158e8:	4929      	ldr	r1, [pc, #164]	; (8015990 <tcp_rexmit_fast+0xbc>)
 80158ea:	482a      	ldr	r0, [pc, #168]	; (8015994 <tcp_rexmit_fast+0xc0>)
 80158ec:	f003 fe26 	bl	801953c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80158f0:	687b      	ldr	r3, [r7, #4]
 80158f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	d045      	beq.n	8015984 <tcp_rexmit_fast+0xb0>
 80158f8:	687b      	ldr	r3, [r7, #4]
 80158fa:	8b5b      	ldrh	r3, [r3, #26]
 80158fc:	f003 0304 	and.w	r3, r3, #4
 8015900:	2b00      	cmp	r3, #0
 8015902:	d13f      	bne.n	8015984 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8015904:	6878      	ldr	r0, [r7, #4]
 8015906:	f7ff ff79 	bl	80157fc <tcp_rexmit>
 801590a:	4603      	mov	r3, r0
 801590c:	2b00      	cmp	r3, #0
 801590e:	d139      	bne.n	8015984 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801591c:	4293      	cmp	r3, r2
 801591e:	bf28      	it	cs
 8015920:	4613      	movcs	r3, r2
 8015922:	b29b      	uxth	r3, r3
 8015924:	2b00      	cmp	r3, #0
 8015926:	da00      	bge.n	801592a <tcp_rexmit_fast+0x56>
 8015928:	3301      	adds	r3, #1
 801592a:	105b      	asrs	r3, r3, #1
 801592c:	b29a      	uxth	r2, r3
 801592e:	687b      	ldr	r3, [r7, #4]
 8015930:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8015934:	687b      	ldr	r3, [r7, #4]
 8015936:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801593a:	461a      	mov	r2, r3
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015940:	005b      	lsls	r3, r3, #1
 8015942:	429a      	cmp	r2, r3
 8015944:	d206      	bcs.n	8015954 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801594a:	005b      	lsls	r3, r3, #1
 801594c:	b29a      	uxth	r2, r3
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801595e:	4619      	mov	r1, r3
 8015960:	0049      	lsls	r1, r1, #1
 8015962:	440b      	add	r3, r1
 8015964:	b29b      	uxth	r3, r3
 8015966:	4413      	add	r3, r2
 8015968:	b29a      	uxth	r2, r3
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8015970:	687b      	ldr	r3, [r7, #4]
 8015972:	8b5b      	ldrh	r3, [r3, #26]
 8015974:	f043 0304 	orr.w	r3, r3, #4
 8015978:	b29a      	uxth	r2, r3
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801597e:	687b      	ldr	r3, [r7, #4]
 8015980:	2200      	movs	r2, #0
 8015982:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8015984:	bf00      	nop
 8015986:	3708      	adds	r7, #8
 8015988:	46bd      	mov	sp, r7
 801598a:	bd80      	pop	{r7, pc}
 801598c:	0801d38c 	.word	0x0801d38c
 8015990:	0801da44 	.word	0x0801da44
 8015994:	0801d3e0 	.word	0x0801d3e0

08015998 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8015998:	b580      	push	{r7, lr}
 801599a:	b086      	sub	sp, #24
 801599c:	af00      	add	r7, sp, #0
 801599e:	60f8      	str	r0, [r7, #12]
 80159a0:	607b      	str	r3, [r7, #4]
 80159a2:	460b      	mov	r3, r1
 80159a4:	817b      	strh	r3, [r7, #10]
 80159a6:	4613      	mov	r3, r2
 80159a8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80159aa:	897a      	ldrh	r2, [r7, #10]
 80159ac:	893b      	ldrh	r3, [r7, #8]
 80159ae:	4413      	add	r3, r2
 80159b0:	b29b      	uxth	r3, r3
 80159b2:	3314      	adds	r3, #20
 80159b4:	b29b      	uxth	r3, r3
 80159b6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80159ba:	4619      	mov	r1, r3
 80159bc:	2022      	movs	r0, #34	; 0x22
 80159be:	f7fa fc17 	bl	80101f0 <pbuf_alloc>
 80159c2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80159c4:	697b      	ldr	r3, [r7, #20]
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	d04d      	beq.n	8015a66 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80159ca:	897b      	ldrh	r3, [r7, #10]
 80159cc:	3313      	adds	r3, #19
 80159ce:	697a      	ldr	r2, [r7, #20]
 80159d0:	8952      	ldrh	r2, [r2, #10]
 80159d2:	4293      	cmp	r3, r2
 80159d4:	db06      	blt.n	80159e4 <tcp_output_alloc_header_common+0x4c>
 80159d6:	4b26      	ldr	r3, [pc, #152]	; (8015a70 <tcp_output_alloc_header_common+0xd8>)
 80159d8:	f240 7223 	movw	r2, #1827	; 0x723
 80159dc:	4925      	ldr	r1, [pc, #148]	; (8015a74 <tcp_output_alloc_header_common+0xdc>)
 80159de:	4826      	ldr	r0, [pc, #152]	; (8015a78 <tcp_output_alloc_header_common+0xe0>)
 80159e0:	f003 fdac 	bl	801953c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80159e4:	697b      	ldr	r3, [r7, #20]
 80159e6:	685b      	ldr	r3, [r3, #4]
 80159e8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80159ea:	8c3b      	ldrh	r3, [r7, #32]
 80159ec:	4618      	mov	r0, r3
 80159ee:	f7f9 faed 	bl	800efcc <lwip_htons>
 80159f2:	4603      	mov	r3, r0
 80159f4:	461a      	mov	r2, r3
 80159f6:	693b      	ldr	r3, [r7, #16]
 80159f8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80159fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80159fc:	4618      	mov	r0, r3
 80159fe:	f7f9 fae5 	bl	800efcc <lwip_htons>
 8015a02:	4603      	mov	r3, r0
 8015a04:	461a      	mov	r2, r3
 8015a06:	693b      	ldr	r3, [r7, #16]
 8015a08:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8015a0a:	693b      	ldr	r3, [r7, #16]
 8015a0c:	687a      	ldr	r2, [r7, #4]
 8015a0e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8015a10:	68f8      	ldr	r0, [r7, #12]
 8015a12:	f7f9 faf0 	bl	800eff6 <lwip_htonl>
 8015a16:	4602      	mov	r2, r0
 8015a18:	693b      	ldr	r3, [r7, #16]
 8015a1a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8015a1c:	897b      	ldrh	r3, [r7, #10]
 8015a1e:	089b      	lsrs	r3, r3, #2
 8015a20:	b29b      	uxth	r3, r3
 8015a22:	3305      	adds	r3, #5
 8015a24:	b29b      	uxth	r3, r3
 8015a26:	031b      	lsls	r3, r3, #12
 8015a28:	b29a      	uxth	r2, r3
 8015a2a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015a2e:	b29b      	uxth	r3, r3
 8015a30:	4313      	orrs	r3, r2
 8015a32:	b29b      	uxth	r3, r3
 8015a34:	4618      	mov	r0, r3
 8015a36:	f7f9 fac9 	bl	800efcc <lwip_htons>
 8015a3a:	4603      	mov	r3, r0
 8015a3c:	461a      	mov	r2, r3
 8015a3e:	693b      	ldr	r3, [r7, #16]
 8015a40:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8015a42:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8015a44:	4618      	mov	r0, r3
 8015a46:	f7f9 fac1 	bl	800efcc <lwip_htons>
 8015a4a:	4603      	mov	r3, r0
 8015a4c:	461a      	mov	r2, r3
 8015a4e:	693b      	ldr	r3, [r7, #16]
 8015a50:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8015a52:	693b      	ldr	r3, [r7, #16]
 8015a54:	2200      	movs	r2, #0
 8015a56:	741a      	strb	r2, [r3, #16]
 8015a58:	2200      	movs	r2, #0
 8015a5a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8015a5c:	693b      	ldr	r3, [r7, #16]
 8015a5e:	2200      	movs	r2, #0
 8015a60:	749a      	strb	r2, [r3, #18]
 8015a62:	2200      	movs	r2, #0
 8015a64:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8015a66:	697b      	ldr	r3, [r7, #20]
}
 8015a68:	4618      	mov	r0, r3
 8015a6a:	3718      	adds	r7, #24
 8015a6c:	46bd      	mov	sp, r7
 8015a6e:	bd80      	pop	{r7, pc}
 8015a70:	0801d38c 	.word	0x0801d38c
 8015a74:	0801da64 	.word	0x0801da64
 8015a78:	0801d3e0 	.word	0x0801d3e0

08015a7c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8015a7c:	b5b0      	push	{r4, r5, r7, lr}
 8015a7e:	b08a      	sub	sp, #40	; 0x28
 8015a80:	af04      	add	r7, sp, #16
 8015a82:	60f8      	str	r0, [r7, #12]
 8015a84:	607b      	str	r3, [r7, #4]
 8015a86:	460b      	mov	r3, r1
 8015a88:	817b      	strh	r3, [r7, #10]
 8015a8a:	4613      	mov	r3, r2
 8015a8c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8015a8e:	68fb      	ldr	r3, [r7, #12]
 8015a90:	2b00      	cmp	r3, #0
 8015a92:	d106      	bne.n	8015aa2 <tcp_output_alloc_header+0x26>
 8015a94:	4b15      	ldr	r3, [pc, #84]	; (8015aec <tcp_output_alloc_header+0x70>)
 8015a96:	f240 7242 	movw	r2, #1858	; 0x742
 8015a9a:	4915      	ldr	r1, [pc, #84]	; (8015af0 <tcp_output_alloc_header+0x74>)
 8015a9c:	4815      	ldr	r0, [pc, #84]	; (8015af4 <tcp_output_alloc_header+0x78>)
 8015a9e:	f003 fd4d 	bl	801953c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8015aa2:	68fb      	ldr	r3, [r7, #12]
 8015aa4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8015aa6:	68fb      	ldr	r3, [r7, #12]
 8015aa8:	8adb      	ldrh	r3, [r3, #22]
 8015aaa:	68fa      	ldr	r2, [r7, #12]
 8015aac:	8b12      	ldrh	r2, [r2, #24]
 8015aae:	68f9      	ldr	r1, [r7, #12]
 8015ab0:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8015ab2:	893d      	ldrh	r5, [r7, #8]
 8015ab4:	897c      	ldrh	r4, [r7, #10]
 8015ab6:	9103      	str	r1, [sp, #12]
 8015ab8:	2110      	movs	r1, #16
 8015aba:	9102      	str	r1, [sp, #8]
 8015abc:	9201      	str	r2, [sp, #4]
 8015abe:	9300      	str	r3, [sp, #0]
 8015ac0:	687b      	ldr	r3, [r7, #4]
 8015ac2:	462a      	mov	r2, r5
 8015ac4:	4621      	mov	r1, r4
 8015ac6:	f7ff ff67 	bl	8015998 <tcp_output_alloc_header_common>
 8015aca:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8015acc:	697b      	ldr	r3, [r7, #20]
 8015ace:	2b00      	cmp	r3, #0
 8015ad0:	d006      	beq.n	8015ae0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015ad2:	68fb      	ldr	r3, [r7, #12]
 8015ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ad6:	68fa      	ldr	r2, [r7, #12]
 8015ad8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8015ada:	441a      	add	r2, r3
 8015adc:	68fb      	ldr	r3, [r7, #12]
 8015ade:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8015ae0:	697b      	ldr	r3, [r7, #20]
}
 8015ae2:	4618      	mov	r0, r3
 8015ae4:	3718      	adds	r7, #24
 8015ae6:	46bd      	mov	sp, r7
 8015ae8:	bdb0      	pop	{r4, r5, r7, pc}
 8015aea:	bf00      	nop
 8015aec:	0801d38c 	.word	0x0801d38c
 8015af0:	0801da94 	.word	0x0801da94
 8015af4:	0801d3e0 	.word	0x0801d3e0

08015af8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8015af8:	b580      	push	{r7, lr}
 8015afa:	b088      	sub	sp, #32
 8015afc:	af00      	add	r7, sp, #0
 8015afe:	60f8      	str	r0, [r7, #12]
 8015b00:	60b9      	str	r1, [r7, #8]
 8015b02:	4611      	mov	r1, r2
 8015b04:	461a      	mov	r2, r3
 8015b06:	460b      	mov	r3, r1
 8015b08:	71fb      	strb	r3, [r7, #7]
 8015b0a:	4613      	mov	r3, r2
 8015b0c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8015b0e:	2300      	movs	r3, #0
 8015b10:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8015b12:	68bb      	ldr	r3, [r7, #8]
 8015b14:	2b00      	cmp	r3, #0
 8015b16:	d106      	bne.n	8015b26 <tcp_output_fill_options+0x2e>
 8015b18:	4b12      	ldr	r3, [pc, #72]	; (8015b64 <tcp_output_fill_options+0x6c>)
 8015b1a:	f240 7256 	movw	r2, #1878	; 0x756
 8015b1e:	4912      	ldr	r1, [pc, #72]	; (8015b68 <tcp_output_fill_options+0x70>)
 8015b20:	4812      	ldr	r0, [pc, #72]	; (8015b6c <tcp_output_fill_options+0x74>)
 8015b22:	f003 fd0b 	bl	801953c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8015b26:	68bb      	ldr	r3, [r7, #8]
 8015b28:	685b      	ldr	r3, [r3, #4]
 8015b2a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8015b2c:	69bb      	ldr	r3, [r7, #24]
 8015b2e:	3314      	adds	r3, #20
 8015b30:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8015b32:	8bfb      	ldrh	r3, [r7, #30]
 8015b34:	009b      	lsls	r3, r3, #2
 8015b36:	461a      	mov	r2, r3
 8015b38:	79fb      	ldrb	r3, [r7, #7]
 8015b3a:	009b      	lsls	r3, r3, #2
 8015b3c:	f003 0304 	and.w	r3, r3, #4
 8015b40:	4413      	add	r3, r2
 8015b42:	3314      	adds	r3, #20
 8015b44:	69ba      	ldr	r2, [r7, #24]
 8015b46:	4413      	add	r3, r2
 8015b48:	697a      	ldr	r2, [r7, #20]
 8015b4a:	429a      	cmp	r2, r3
 8015b4c:	d006      	beq.n	8015b5c <tcp_output_fill_options+0x64>
 8015b4e:	4b05      	ldr	r3, [pc, #20]	; (8015b64 <tcp_output_fill_options+0x6c>)
 8015b50:	f240 7275 	movw	r2, #1909	; 0x775
 8015b54:	4906      	ldr	r1, [pc, #24]	; (8015b70 <tcp_output_fill_options+0x78>)
 8015b56:	4805      	ldr	r0, [pc, #20]	; (8015b6c <tcp_output_fill_options+0x74>)
 8015b58:	f003 fcf0 	bl	801953c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8015b5c:	bf00      	nop
 8015b5e:	3720      	adds	r7, #32
 8015b60:	46bd      	mov	sp, r7
 8015b62:	bd80      	pop	{r7, pc}
 8015b64:	0801d38c 	.word	0x0801d38c
 8015b68:	0801dabc 	.word	0x0801dabc
 8015b6c:	0801d3e0 	.word	0x0801d3e0
 8015b70:	0801d9b4 	.word	0x0801d9b4

08015b74 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8015b74:	b580      	push	{r7, lr}
 8015b76:	b08a      	sub	sp, #40	; 0x28
 8015b78:	af04      	add	r7, sp, #16
 8015b7a:	60f8      	str	r0, [r7, #12]
 8015b7c:	60b9      	str	r1, [r7, #8]
 8015b7e:	607a      	str	r2, [r7, #4]
 8015b80:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8015b82:	68bb      	ldr	r3, [r7, #8]
 8015b84:	2b00      	cmp	r3, #0
 8015b86:	d106      	bne.n	8015b96 <tcp_output_control_segment+0x22>
 8015b88:	4b1c      	ldr	r3, [pc, #112]	; (8015bfc <tcp_output_control_segment+0x88>)
 8015b8a:	f240 7287 	movw	r2, #1927	; 0x787
 8015b8e:	491c      	ldr	r1, [pc, #112]	; (8015c00 <tcp_output_control_segment+0x8c>)
 8015b90:	481c      	ldr	r0, [pc, #112]	; (8015c04 <tcp_output_control_segment+0x90>)
 8015b92:	f003 fcd3 	bl	801953c <iprintf>

  netif = tcp_route(pcb, src, dst);
 8015b96:	683a      	ldr	r2, [r7, #0]
 8015b98:	6879      	ldr	r1, [r7, #4]
 8015b9a:	68f8      	ldr	r0, [r7, #12]
 8015b9c:	f7fe ff40 	bl	8014a20 <tcp_route>
 8015ba0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8015ba2:	693b      	ldr	r3, [r7, #16]
 8015ba4:	2b00      	cmp	r3, #0
 8015ba6:	d102      	bne.n	8015bae <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8015ba8:	23fc      	movs	r3, #252	; 0xfc
 8015baa:	75fb      	strb	r3, [r7, #23]
 8015bac:	e01c      	b.n	8015be8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8015bae:	68fb      	ldr	r3, [r7, #12]
 8015bb0:	2b00      	cmp	r3, #0
 8015bb2:	d006      	beq.n	8015bc2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8015bb4:	68fb      	ldr	r3, [r7, #12]
 8015bb6:	7adb      	ldrb	r3, [r3, #11]
 8015bb8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8015bba:	68fb      	ldr	r3, [r7, #12]
 8015bbc:	7a9b      	ldrb	r3, [r3, #10]
 8015bbe:	757b      	strb	r3, [r7, #21]
 8015bc0:	e003      	b.n	8015bca <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8015bc2:	23ff      	movs	r3, #255	; 0xff
 8015bc4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8015bc6:	2300      	movs	r3, #0
 8015bc8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8015bca:	7dba      	ldrb	r2, [r7, #22]
 8015bcc:	693b      	ldr	r3, [r7, #16]
 8015bce:	9302      	str	r3, [sp, #8]
 8015bd0:	2306      	movs	r3, #6
 8015bd2:	9301      	str	r3, [sp, #4]
 8015bd4:	7d7b      	ldrb	r3, [r7, #21]
 8015bd6:	9300      	str	r3, [sp, #0]
 8015bd8:	4613      	mov	r3, r2
 8015bda:	683a      	ldr	r2, [r7, #0]
 8015bdc:	6879      	ldr	r1, [r7, #4]
 8015bde:	68b8      	ldr	r0, [r7, #8]
 8015be0:	f001 ff54 	bl	8017a8c <ip4_output_if>
 8015be4:	4603      	mov	r3, r0
 8015be6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8015be8:	68b8      	ldr	r0, [r7, #8]
 8015bea:	f7fa fde5 	bl	80107b8 <pbuf_free>
  return err;
 8015bee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015bf2:	4618      	mov	r0, r3
 8015bf4:	3718      	adds	r7, #24
 8015bf6:	46bd      	mov	sp, r7
 8015bf8:	bd80      	pop	{r7, pc}
 8015bfa:	bf00      	nop
 8015bfc:	0801d38c 	.word	0x0801d38c
 8015c00:	0801dae4 	.word	0x0801dae4
 8015c04:	0801d3e0 	.word	0x0801d3e0

08015c08 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8015c08:	b590      	push	{r4, r7, lr}
 8015c0a:	b08b      	sub	sp, #44	; 0x2c
 8015c0c:	af04      	add	r7, sp, #16
 8015c0e:	60f8      	str	r0, [r7, #12]
 8015c10:	60b9      	str	r1, [r7, #8]
 8015c12:	607a      	str	r2, [r7, #4]
 8015c14:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8015c16:	683b      	ldr	r3, [r7, #0]
 8015c18:	2b00      	cmp	r3, #0
 8015c1a:	d106      	bne.n	8015c2a <tcp_rst+0x22>
 8015c1c:	4b1f      	ldr	r3, [pc, #124]	; (8015c9c <tcp_rst+0x94>)
 8015c1e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8015c22:	491f      	ldr	r1, [pc, #124]	; (8015ca0 <tcp_rst+0x98>)
 8015c24:	481f      	ldr	r0, [pc, #124]	; (8015ca4 <tcp_rst+0x9c>)
 8015c26:	f003 fc89 	bl	801953c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8015c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c2c:	2b00      	cmp	r3, #0
 8015c2e:	d106      	bne.n	8015c3e <tcp_rst+0x36>
 8015c30:	4b1a      	ldr	r3, [pc, #104]	; (8015c9c <tcp_rst+0x94>)
 8015c32:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8015c36:	491c      	ldr	r1, [pc, #112]	; (8015ca8 <tcp_rst+0xa0>)
 8015c38:	481a      	ldr	r0, [pc, #104]	; (8015ca4 <tcp_rst+0x9c>)
 8015c3a:	f003 fc7f 	bl	801953c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015c3e:	2300      	movs	r3, #0
 8015c40:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8015c42:	f246 0308 	movw	r3, #24584	; 0x6008
 8015c46:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8015c48:	7dfb      	ldrb	r3, [r7, #23]
 8015c4a:	b29c      	uxth	r4, r3
 8015c4c:	68b8      	ldr	r0, [r7, #8]
 8015c4e:	f7f9 f9d2 	bl	800eff6 <lwip_htonl>
 8015c52:	4602      	mov	r2, r0
 8015c54:	8abb      	ldrh	r3, [r7, #20]
 8015c56:	9303      	str	r3, [sp, #12]
 8015c58:	2314      	movs	r3, #20
 8015c5a:	9302      	str	r3, [sp, #8]
 8015c5c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8015c5e:	9301      	str	r3, [sp, #4]
 8015c60:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8015c62:	9300      	str	r3, [sp, #0]
 8015c64:	4613      	mov	r3, r2
 8015c66:	2200      	movs	r2, #0
 8015c68:	4621      	mov	r1, r4
 8015c6a:	6878      	ldr	r0, [r7, #4]
 8015c6c:	f7ff fe94 	bl	8015998 <tcp_output_alloc_header_common>
 8015c70:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8015c72:	693b      	ldr	r3, [r7, #16]
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	d00c      	beq.n	8015c92 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015c78:	7dfb      	ldrb	r3, [r7, #23]
 8015c7a:	2200      	movs	r2, #0
 8015c7c:	6939      	ldr	r1, [r7, #16]
 8015c7e:	68f8      	ldr	r0, [r7, #12]
 8015c80:	f7ff ff3a 	bl	8015af8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8015c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c86:	683a      	ldr	r2, [r7, #0]
 8015c88:	6939      	ldr	r1, [r7, #16]
 8015c8a:	68f8      	ldr	r0, [r7, #12]
 8015c8c:	f7ff ff72 	bl	8015b74 <tcp_output_control_segment>
 8015c90:	e000      	b.n	8015c94 <tcp_rst+0x8c>
    return;
 8015c92:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8015c94:	371c      	adds	r7, #28
 8015c96:	46bd      	mov	sp, r7
 8015c98:	bd90      	pop	{r4, r7, pc}
 8015c9a:	bf00      	nop
 8015c9c:	0801d38c 	.word	0x0801d38c
 8015ca0:	0801db10 	.word	0x0801db10
 8015ca4:	0801d3e0 	.word	0x0801d3e0
 8015ca8:	0801db2c 	.word	0x0801db2c

08015cac <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8015cac:	b590      	push	{r4, r7, lr}
 8015cae:	b087      	sub	sp, #28
 8015cb0:	af00      	add	r7, sp, #0
 8015cb2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8015cb4:	2300      	movs	r3, #0
 8015cb6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8015cb8:	2300      	movs	r3, #0
 8015cba:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	2b00      	cmp	r3, #0
 8015cc0:	d106      	bne.n	8015cd0 <tcp_send_empty_ack+0x24>
 8015cc2:	4b28      	ldr	r3, [pc, #160]	; (8015d64 <tcp_send_empty_ack+0xb8>)
 8015cc4:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8015cc8:	4927      	ldr	r1, [pc, #156]	; (8015d68 <tcp_send_empty_ack+0xbc>)
 8015cca:	4828      	ldr	r0, [pc, #160]	; (8015d6c <tcp_send_empty_ack+0xc0>)
 8015ccc:	f003 fc36 	bl	801953c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015cd0:	7dfb      	ldrb	r3, [r7, #23]
 8015cd2:	009b      	lsls	r3, r3, #2
 8015cd4:	b2db      	uxtb	r3, r3
 8015cd6:	f003 0304 	and.w	r3, r3, #4
 8015cda:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8015cdc:	7d7b      	ldrb	r3, [r7, #21]
 8015cde:	b29c      	uxth	r4, r3
 8015ce0:	687b      	ldr	r3, [r7, #4]
 8015ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015ce4:	4618      	mov	r0, r3
 8015ce6:	f7f9 f986 	bl	800eff6 <lwip_htonl>
 8015cea:	4603      	mov	r3, r0
 8015cec:	2200      	movs	r2, #0
 8015cee:	4621      	mov	r1, r4
 8015cf0:	6878      	ldr	r0, [r7, #4]
 8015cf2:	f7ff fec3 	bl	8015a7c <tcp_output_alloc_header>
 8015cf6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015cf8:	693b      	ldr	r3, [r7, #16]
 8015cfa:	2b00      	cmp	r3, #0
 8015cfc:	d109      	bne.n	8015d12 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	8b5b      	ldrh	r3, [r3, #26]
 8015d02:	f043 0303 	orr.w	r3, r3, #3
 8015d06:	b29a      	uxth	r2, r3
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8015d0c:	f06f 0301 	mvn.w	r3, #1
 8015d10:	e023      	b.n	8015d5a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8015d12:	7dbb      	ldrb	r3, [r7, #22]
 8015d14:	7dfa      	ldrb	r2, [r7, #23]
 8015d16:	6939      	ldr	r1, [r7, #16]
 8015d18:	6878      	ldr	r0, [r7, #4]
 8015d1a:	f7ff feed 	bl	8015af8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015d1e:	687a      	ldr	r2, [r7, #4]
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	3304      	adds	r3, #4
 8015d24:	6939      	ldr	r1, [r7, #16]
 8015d26:	6878      	ldr	r0, [r7, #4]
 8015d28:	f7ff ff24 	bl	8015b74 <tcp_output_control_segment>
 8015d2c:	4603      	mov	r3, r0
 8015d2e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8015d30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015d34:	2b00      	cmp	r3, #0
 8015d36:	d007      	beq.n	8015d48 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	8b5b      	ldrh	r3, [r3, #26]
 8015d3c:	f043 0303 	orr.w	r3, r3, #3
 8015d40:	b29a      	uxth	r2, r3
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	835a      	strh	r2, [r3, #26]
 8015d46:	e006      	b.n	8015d56 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015d48:	687b      	ldr	r3, [r7, #4]
 8015d4a:	8b5b      	ldrh	r3, [r3, #26]
 8015d4c:	f023 0303 	bic.w	r3, r3, #3
 8015d50:	b29a      	uxth	r2, r3
 8015d52:	687b      	ldr	r3, [r7, #4]
 8015d54:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8015d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015d5a:	4618      	mov	r0, r3
 8015d5c:	371c      	adds	r7, #28
 8015d5e:	46bd      	mov	sp, r7
 8015d60:	bd90      	pop	{r4, r7, pc}
 8015d62:	bf00      	nop
 8015d64:	0801d38c 	.word	0x0801d38c
 8015d68:	0801db48 	.word	0x0801db48
 8015d6c:	0801d3e0 	.word	0x0801d3e0

08015d70 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8015d70:	b590      	push	{r4, r7, lr}
 8015d72:	b087      	sub	sp, #28
 8015d74:	af00      	add	r7, sp, #0
 8015d76:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015d78:	2300      	movs	r3, #0
 8015d7a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	2b00      	cmp	r3, #0
 8015d80:	d106      	bne.n	8015d90 <tcp_keepalive+0x20>
 8015d82:	4b18      	ldr	r3, [pc, #96]	; (8015de4 <tcp_keepalive+0x74>)
 8015d84:	f640 0224 	movw	r2, #2084	; 0x824
 8015d88:	4917      	ldr	r1, [pc, #92]	; (8015de8 <tcp_keepalive+0x78>)
 8015d8a:	4818      	ldr	r0, [pc, #96]	; (8015dec <tcp_keepalive+0x7c>)
 8015d8c:	f003 fbd6 	bl	801953c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8015d90:	7dfb      	ldrb	r3, [r7, #23]
 8015d92:	b29c      	uxth	r4, r3
 8015d94:	687b      	ldr	r3, [r7, #4]
 8015d96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015d98:	3b01      	subs	r3, #1
 8015d9a:	4618      	mov	r0, r3
 8015d9c:	f7f9 f92b 	bl	800eff6 <lwip_htonl>
 8015da0:	4603      	mov	r3, r0
 8015da2:	2200      	movs	r2, #0
 8015da4:	4621      	mov	r1, r4
 8015da6:	6878      	ldr	r0, [r7, #4]
 8015da8:	f7ff fe68 	bl	8015a7c <tcp_output_alloc_header>
 8015dac:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015dae:	693b      	ldr	r3, [r7, #16]
 8015db0:	2b00      	cmp	r3, #0
 8015db2:	d102      	bne.n	8015dba <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8015db4:	f04f 33ff 	mov.w	r3, #4294967295
 8015db8:	e010      	b.n	8015ddc <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015dba:	7dfb      	ldrb	r3, [r7, #23]
 8015dbc:	2200      	movs	r2, #0
 8015dbe:	6939      	ldr	r1, [r7, #16]
 8015dc0:	6878      	ldr	r0, [r7, #4]
 8015dc2:	f7ff fe99 	bl	8015af8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015dc6:	687a      	ldr	r2, [r7, #4]
 8015dc8:	687b      	ldr	r3, [r7, #4]
 8015dca:	3304      	adds	r3, #4
 8015dcc:	6939      	ldr	r1, [r7, #16]
 8015dce:	6878      	ldr	r0, [r7, #4]
 8015dd0:	f7ff fed0 	bl	8015b74 <tcp_output_control_segment>
 8015dd4:	4603      	mov	r3, r0
 8015dd6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8015dd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015ddc:	4618      	mov	r0, r3
 8015dde:	371c      	adds	r7, #28
 8015de0:	46bd      	mov	sp, r7
 8015de2:	bd90      	pop	{r4, r7, pc}
 8015de4:	0801d38c 	.word	0x0801d38c
 8015de8:	0801db68 	.word	0x0801db68
 8015dec:	0801d3e0 	.word	0x0801d3e0

08015df0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8015df0:	b590      	push	{r4, r7, lr}
 8015df2:	b08b      	sub	sp, #44	; 0x2c
 8015df4:	af00      	add	r7, sp, #0
 8015df6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015df8:	2300      	movs	r3, #0
 8015dfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	2b00      	cmp	r3, #0
 8015e02:	d106      	bne.n	8015e12 <tcp_zero_window_probe+0x22>
 8015e04:	4b4c      	ldr	r3, [pc, #304]	; (8015f38 <tcp_zero_window_probe+0x148>)
 8015e06:	f640 024f 	movw	r2, #2127	; 0x84f
 8015e0a:	494c      	ldr	r1, [pc, #304]	; (8015f3c <tcp_zero_window_probe+0x14c>)
 8015e0c:	484c      	ldr	r0, [pc, #304]	; (8015f40 <tcp_zero_window_probe+0x150>)
 8015e0e:	f003 fb95 	bl	801953c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8015e12:	687b      	ldr	r3, [r7, #4]
 8015e14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015e16:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8015e18:	6a3b      	ldr	r3, [r7, #32]
 8015e1a:	2b00      	cmp	r3, #0
 8015e1c:	d101      	bne.n	8015e22 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8015e1e:	2300      	movs	r3, #0
 8015e20:	e086      	b.n	8015f30 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8015e28:	2bff      	cmp	r3, #255	; 0xff
 8015e2a:	d007      	beq.n	8015e3c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8015e32:	3301      	adds	r3, #1
 8015e34:	b2da      	uxtb	r2, r3
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8015e3c:	6a3b      	ldr	r3, [r7, #32]
 8015e3e:	68db      	ldr	r3, [r3, #12]
 8015e40:	899b      	ldrh	r3, [r3, #12]
 8015e42:	b29b      	uxth	r3, r3
 8015e44:	4618      	mov	r0, r3
 8015e46:	f7f9 f8c1 	bl	800efcc <lwip_htons>
 8015e4a:	4603      	mov	r3, r0
 8015e4c:	b2db      	uxtb	r3, r3
 8015e4e:	f003 0301 	and.w	r3, r3, #1
 8015e52:	2b00      	cmp	r3, #0
 8015e54:	d005      	beq.n	8015e62 <tcp_zero_window_probe+0x72>
 8015e56:	6a3b      	ldr	r3, [r7, #32]
 8015e58:	891b      	ldrh	r3, [r3, #8]
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	d101      	bne.n	8015e62 <tcp_zero_window_probe+0x72>
 8015e5e:	2301      	movs	r3, #1
 8015e60:	e000      	b.n	8015e64 <tcp_zero_window_probe+0x74>
 8015e62:	2300      	movs	r3, #0
 8015e64:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8015e66:	7ffb      	ldrb	r3, [r7, #31]
 8015e68:	2b00      	cmp	r3, #0
 8015e6a:	bf0c      	ite	eq
 8015e6c:	2301      	moveq	r3, #1
 8015e6e:	2300      	movne	r3, #0
 8015e70:	b2db      	uxtb	r3, r3
 8015e72:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8015e74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015e78:	b299      	uxth	r1, r3
 8015e7a:	6a3b      	ldr	r3, [r7, #32]
 8015e7c:	68db      	ldr	r3, [r3, #12]
 8015e7e:	685b      	ldr	r3, [r3, #4]
 8015e80:	8bba      	ldrh	r2, [r7, #28]
 8015e82:	6878      	ldr	r0, [r7, #4]
 8015e84:	f7ff fdfa 	bl	8015a7c <tcp_output_alloc_header>
 8015e88:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8015e8a:	69bb      	ldr	r3, [r7, #24]
 8015e8c:	2b00      	cmp	r3, #0
 8015e8e:	d102      	bne.n	8015e96 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8015e90:	f04f 33ff 	mov.w	r3, #4294967295
 8015e94:	e04c      	b.n	8015f30 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8015e96:	69bb      	ldr	r3, [r7, #24]
 8015e98:	685b      	ldr	r3, [r3, #4]
 8015e9a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8015e9c:	7ffb      	ldrb	r3, [r7, #31]
 8015e9e:	2b00      	cmp	r3, #0
 8015ea0:	d011      	beq.n	8015ec6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8015ea2:	697b      	ldr	r3, [r7, #20]
 8015ea4:	899b      	ldrh	r3, [r3, #12]
 8015ea6:	b29b      	uxth	r3, r3
 8015ea8:	b21b      	sxth	r3, r3
 8015eaa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8015eae:	b21c      	sxth	r4, r3
 8015eb0:	2011      	movs	r0, #17
 8015eb2:	f7f9 f88b 	bl	800efcc <lwip_htons>
 8015eb6:	4603      	mov	r3, r0
 8015eb8:	b21b      	sxth	r3, r3
 8015eba:	4323      	orrs	r3, r4
 8015ebc:	b21b      	sxth	r3, r3
 8015ebe:	b29a      	uxth	r2, r3
 8015ec0:	697b      	ldr	r3, [r7, #20]
 8015ec2:	819a      	strh	r2, [r3, #12]
 8015ec4:	e010      	b.n	8015ee8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8015ec6:	69bb      	ldr	r3, [r7, #24]
 8015ec8:	685b      	ldr	r3, [r3, #4]
 8015eca:	3314      	adds	r3, #20
 8015ecc:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8015ece:	6a3b      	ldr	r3, [r7, #32]
 8015ed0:	6858      	ldr	r0, [r3, #4]
 8015ed2:	6a3b      	ldr	r3, [r7, #32]
 8015ed4:	685b      	ldr	r3, [r3, #4]
 8015ed6:	891a      	ldrh	r2, [r3, #8]
 8015ed8:	6a3b      	ldr	r3, [r7, #32]
 8015eda:	891b      	ldrh	r3, [r3, #8]
 8015edc:	1ad3      	subs	r3, r2, r3
 8015ede:	b29b      	uxth	r3, r3
 8015ee0:	2201      	movs	r2, #1
 8015ee2:	6939      	ldr	r1, [r7, #16]
 8015ee4:	f7fa fe52 	bl	8010b8c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8015ee8:	6a3b      	ldr	r3, [r7, #32]
 8015eea:	68db      	ldr	r3, [r3, #12]
 8015eec:	685b      	ldr	r3, [r3, #4]
 8015eee:	4618      	mov	r0, r3
 8015ef0:	f7f9 f881 	bl	800eff6 <lwip_htonl>
 8015ef4:	4603      	mov	r3, r0
 8015ef6:	3301      	adds	r3, #1
 8015ef8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015efe:	68fb      	ldr	r3, [r7, #12]
 8015f00:	1ad3      	subs	r3, r2, r3
 8015f02:	2b00      	cmp	r3, #0
 8015f04:	da02      	bge.n	8015f0c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8015f06:	687b      	ldr	r3, [r7, #4]
 8015f08:	68fa      	ldr	r2, [r7, #12]
 8015f0a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015f0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015f10:	2200      	movs	r2, #0
 8015f12:	69b9      	ldr	r1, [r7, #24]
 8015f14:	6878      	ldr	r0, [r7, #4]
 8015f16:	f7ff fdef 	bl	8015af8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015f1a:	687a      	ldr	r2, [r7, #4]
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	3304      	adds	r3, #4
 8015f20:	69b9      	ldr	r1, [r7, #24]
 8015f22:	6878      	ldr	r0, [r7, #4]
 8015f24:	f7ff fe26 	bl	8015b74 <tcp_output_control_segment>
 8015f28:	4603      	mov	r3, r0
 8015f2a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8015f2c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8015f30:	4618      	mov	r0, r3
 8015f32:	372c      	adds	r7, #44	; 0x2c
 8015f34:	46bd      	mov	sp, r7
 8015f36:	bd90      	pop	{r4, r7, pc}
 8015f38:	0801d38c 	.word	0x0801d38c
 8015f3c:	0801db84 	.word	0x0801db84
 8015f40:	0801d3e0 	.word	0x0801d3e0

08015f44 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8015f44:	b580      	push	{r7, lr}
 8015f46:	b082      	sub	sp, #8
 8015f48:	af00      	add	r7, sp, #0
 8015f4a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8015f4c:	f7fa ff0c 	bl	8010d68 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8015f50:	4b0a      	ldr	r3, [pc, #40]	; (8015f7c <tcpip_tcp_timer+0x38>)
 8015f52:	681b      	ldr	r3, [r3, #0]
 8015f54:	2b00      	cmp	r3, #0
 8015f56:	d103      	bne.n	8015f60 <tcpip_tcp_timer+0x1c>
 8015f58:	4b09      	ldr	r3, [pc, #36]	; (8015f80 <tcpip_tcp_timer+0x3c>)
 8015f5a:	681b      	ldr	r3, [r3, #0]
 8015f5c:	2b00      	cmp	r3, #0
 8015f5e:	d005      	beq.n	8015f6c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8015f60:	2200      	movs	r2, #0
 8015f62:	4908      	ldr	r1, [pc, #32]	; (8015f84 <tcpip_tcp_timer+0x40>)
 8015f64:	20fa      	movs	r0, #250	; 0xfa
 8015f66:	f000 f8f3 	bl	8016150 <sys_timeout>
 8015f6a:	e003      	b.n	8015f74 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8015f6c:	4b06      	ldr	r3, [pc, #24]	; (8015f88 <tcpip_tcp_timer+0x44>)
 8015f6e:	2200      	movs	r2, #0
 8015f70:	601a      	str	r2, [r3, #0]
  }
}
 8015f72:	bf00      	nop
 8015f74:	bf00      	nop
 8015f76:	3708      	adds	r7, #8
 8015f78:	46bd      	mov	sp, r7
 8015f7a:	bd80      	pop	{r7, pc}
 8015f7c:	200080d4 	.word	0x200080d4
 8015f80:	200080d8 	.word	0x200080d8
 8015f84:	08015f45 	.word	0x08015f45
 8015f88:	20008120 	.word	0x20008120

08015f8c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8015f8c:	b580      	push	{r7, lr}
 8015f8e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8015f90:	4b0a      	ldr	r3, [pc, #40]	; (8015fbc <tcp_timer_needed+0x30>)
 8015f92:	681b      	ldr	r3, [r3, #0]
 8015f94:	2b00      	cmp	r3, #0
 8015f96:	d10f      	bne.n	8015fb8 <tcp_timer_needed+0x2c>
 8015f98:	4b09      	ldr	r3, [pc, #36]	; (8015fc0 <tcp_timer_needed+0x34>)
 8015f9a:	681b      	ldr	r3, [r3, #0]
 8015f9c:	2b00      	cmp	r3, #0
 8015f9e:	d103      	bne.n	8015fa8 <tcp_timer_needed+0x1c>
 8015fa0:	4b08      	ldr	r3, [pc, #32]	; (8015fc4 <tcp_timer_needed+0x38>)
 8015fa2:	681b      	ldr	r3, [r3, #0]
 8015fa4:	2b00      	cmp	r3, #0
 8015fa6:	d007      	beq.n	8015fb8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8015fa8:	4b04      	ldr	r3, [pc, #16]	; (8015fbc <tcp_timer_needed+0x30>)
 8015faa:	2201      	movs	r2, #1
 8015fac:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8015fae:	2200      	movs	r2, #0
 8015fb0:	4905      	ldr	r1, [pc, #20]	; (8015fc8 <tcp_timer_needed+0x3c>)
 8015fb2:	20fa      	movs	r0, #250	; 0xfa
 8015fb4:	f000 f8cc 	bl	8016150 <sys_timeout>
  }
}
 8015fb8:	bf00      	nop
 8015fba:	bd80      	pop	{r7, pc}
 8015fbc:	20008120 	.word	0x20008120
 8015fc0:	200080d4 	.word	0x200080d4
 8015fc4:	200080d8 	.word	0x200080d8
 8015fc8:	08015f45 	.word	0x08015f45

08015fcc <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8015fcc:	b580      	push	{r7, lr}
 8015fce:	b086      	sub	sp, #24
 8015fd0:	af00      	add	r7, sp, #0
 8015fd2:	60f8      	str	r0, [r7, #12]
 8015fd4:	60b9      	str	r1, [r7, #8]
 8015fd6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8015fd8:	2006      	movs	r0, #6
 8015fda:	f7f9 fd27 	bl	800fa2c <memp_malloc>
 8015fde:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8015fe0:	693b      	ldr	r3, [r7, #16]
 8015fe2:	2b00      	cmp	r3, #0
 8015fe4:	d109      	bne.n	8015ffa <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8015fe6:	693b      	ldr	r3, [r7, #16]
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	d151      	bne.n	8016090 <sys_timeout_abs+0xc4>
 8015fec:	4b2a      	ldr	r3, [pc, #168]	; (8016098 <sys_timeout_abs+0xcc>)
 8015fee:	22be      	movs	r2, #190	; 0xbe
 8015ff0:	492a      	ldr	r1, [pc, #168]	; (801609c <sys_timeout_abs+0xd0>)
 8015ff2:	482b      	ldr	r0, [pc, #172]	; (80160a0 <sys_timeout_abs+0xd4>)
 8015ff4:	f003 faa2 	bl	801953c <iprintf>
    return;
 8015ff8:	e04a      	b.n	8016090 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8015ffa:	693b      	ldr	r3, [r7, #16]
 8015ffc:	2200      	movs	r2, #0
 8015ffe:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8016000:	693b      	ldr	r3, [r7, #16]
 8016002:	68ba      	ldr	r2, [r7, #8]
 8016004:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8016006:	693b      	ldr	r3, [r7, #16]
 8016008:	687a      	ldr	r2, [r7, #4]
 801600a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801600c:	693b      	ldr	r3, [r7, #16]
 801600e:	68fa      	ldr	r2, [r7, #12]
 8016010:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8016012:	4b24      	ldr	r3, [pc, #144]	; (80160a4 <sys_timeout_abs+0xd8>)
 8016014:	681b      	ldr	r3, [r3, #0]
 8016016:	2b00      	cmp	r3, #0
 8016018:	d103      	bne.n	8016022 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801601a:	4a22      	ldr	r2, [pc, #136]	; (80160a4 <sys_timeout_abs+0xd8>)
 801601c:	693b      	ldr	r3, [r7, #16]
 801601e:	6013      	str	r3, [r2, #0]
    return;
 8016020:	e037      	b.n	8016092 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8016022:	693b      	ldr	r3, [r7, #16]
 8016024:	685a      	ldr	r2, [r3, #4]
 8016026:	4b1f      	ldr	r3, [pc, #124]	; (80160a4 <sys_timeout_abs+0xd8>)
 8016028:	681b      	ldr	r3, [r3, #0]
 801602a:	685b      	ldr	r3, [r3, #4]
 801602c:	1ad3      	subs	r3, r2, r3
 801602e:	0fdb      	lsrs	r3, r3, #31
 8016030:	f003 0301 	and.w	r3, r3, #1
 8016034:	b2db      	uxtb	r3, r3
 8016036:	2b00      	cmp	r3, #0
 8016038:	d007      	beq.n	801604a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801603a:	4b1a      	ldr	r3, [pc, #104]	; (80160a4 <sys_timeout_abs+0xd8>)
 801603c:	681a      	ldr	r2, [r3, #0]
 801603e:	693b      	ldr	r3, [r7, #16]
 8016040:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8016042:	4a18      	ldr	r2, [pc, #96]	; (80160a4 <sys_timeout_abs+0xd8>)
 8016044:	693b      	ldr	r3, [r7, #16]
 8016046:	6013      	str	r3, [r2, #0]
 8016048:	e023      	b.n	8016092 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801604a:	4b16      	ldr	r3, [pc, #88]	; (80160a4 <sys_timeout_abs+0xd8>)
 801604c:	681b      	ldr	r3, [r3, #0]
 801604e:	617b      	str	r3, [r7, #20]
 8016050:	e01a      	b.n	8016088 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8016052:	697b      	ldr	r3, [r7, #20]
 8016054:	681b      	ldr	r3, [r3, #0]
 8016056:	2b00      	cmp	r3, #0
 8016058:	d00b      	beq.n	8016072 <sys_timeout_abs+0xa6>
 801605a:	693b      	ldr	r3, [r7, #16]
 801605c:	685a      	ldr	r2, [r3, #4]
 801605e:	697b      	ldr	r3, [r7, #20]
 8016060:	681b      	ldr	r3, [r3, #0]
 8016062:	685b      	ldr	r3, [r3, #4]
 8016064:	1ad3      	subs	r3, r2, r3
 8016066:	0fdb      	lsrs	r3, r3, #31
 8016068:	f003 0301 	and.w	r3, r3, #1
 801606c:	b2db      	uxtb	r3, r3
 801606e:	2b00      	cmp	r3, #0
 8016070:	d007      	beq.n	8016082 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8016072:	697b      	ldr	r3, [r7, #20]
 8016074:	681a      	ldr	r2, [r3, #0]
 8016076:	693b      	ldr	r3, [r7, #16]
 8016078:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801607a:	697b      	ldr	r3, [r7, #20]
 801607c:	693a      	ldr	r2, [r7, #16]
 801607e:	601a      	str	r2, [r3, #0]
        break;
 8016080:	e007      	b.n	8016092 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8016082:	697b      	ldr	r3, [r7, #20]
 8016084:	681b      	ldr	r3, [r3, #0]
 8016086:	617b      	str	r3, [r7, #20]
 8016088:	697b      	ldr	r3, [r7, #20]
 801608a:	2b00      	cmp	r3, #0
 801608c:	d1e1      	bne.n	8016052 <sys_timeout_abs+0x86>
 801608e:	e000      	b.n	8016092 <sys_timeout_abs+0xc6>
    return;
 8016090:	bf00      	nop
      }
    }
  }
}
 8016092:	3718      	adds	r7, #24
 8016094:	46bd      	mov	sp, r7
 8016096:	bd80      	pop	{r7, pc}
 8016098:	0801dba8 	.word	0x0801dba8
 801609c:	0801dbdc 	.word	0x0801dbdc
 80160a0:	0801dc1c 	.word	0x0801dc1c
 80160a4:	20008118 	.word	0x20008118

080160a8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80160a8:	b580      	push	{r7, lr}
 80160aa:	b086      	sub	sp, #24
 80160ac:	af00      	add	r7, sp, #0
 80160ae:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80160b4:	697b      	ldr	r3, [r7, #20]
 80160b6:	685b      	ldr	r3, [r3, #4]
 80160b8:	4798      	blx	r3

  now = sys_now();
 80160ba:	f7f8 fda7 	bl	800ec0c <sys_now>
 80160be:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80160c0:	697b      	ldr	r3, [r7, #20]
 80160c2:	681a      	ldr	r2, [r3, #0]
 80160c4:	4b0f      	ldr	r3, [pc, #60]	; (8016104 <lwip_cyclic_timer+0x5c>)
 80160c6:	681b      	ldr	r3, [r3, #0]
 80160c8:	4413      	add	r3, r2
 80160ca:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80160cc:	68fa      	ldr	r2, [r7, #12]
 80160ce:	693b      	ldr	r3, [r7, #16]
 80160d0:	1ad3      	subs	r3, r2, r3
 80160d2:	0fdb      	lsrs	r3, r3, #31
 80160d4:	f003 0301 	and.w	r3, r3, #1
 80160d8:	b2db      	uxtb	r3, r3
 80160da:	2b00      	cmp	r3, #0
 80160dc:	d009      	beq.n	80160f2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80160de:	697b      	ldr	r3, [r7, #20]
 80160e0:	681a      	ldr	r2, [r3, #0]
 80160e2:	693b      	ldr	r3, [r7, #16]
 80160e4:	4413      	add	r3, r2
 80160e6:	687a      	ldr	r2, [r7, #4]
 80160e8:	4907      	ldr	r1, [pc, #28]	; (8016108 <lwip_cyclic_timer+0x60>)
 80160ea:	4618      	mov	r0, r3
 80160ec:	f7ff ff6e 	bl	8015fcc <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80160f0:	e004      	b.n	80160fc <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80160f2:	687a      	ldr	r2, [r7, #4]
 80160f4:	4904      	ldr	r1, [pc, #16]	; (8016108 <lwip_cyclic_timer+0x60>)
 80160f6:	68f8      	ldr	r0, [r7, #12]
 80160f8:	f7ff ff68 	bl	8015fcc <sys_timeout_abs>
}
 80160fc:	bf00      	nop
 80160fe:	3718      	adds	r7, #24
 8016100:	46bd      	mov	sp, r7
 8016102:	bd80      	pop	{r7, pc}
 8016104:	2000811c 	.word	0x2000811c
 8016108:	080160a9 	.word	0x080160a9

0801610c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801610c:	b580      	push	{r7, lr}
 801610e:	b082      	sub	sp, #8
 8016110:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8016112:	2301      	movs	r3, #1
 8016114:	607b      	str	r3, [r7, #4]
 8016116:	e00e      	b.n	8016136 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8016118:	4a0b      	ldr	r2, [pc, #44]	; (8016148 <sys_timeouts_init+0x3c>)
 801611a:	687b      	ldr	r3, [r7, #4]
 801611c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8016120:	687b      	ldr	r3, [r7, #4]
 8016122:	00db      	lsls	r3, r3, #3
 8016124:	4a08      	ldr	r2, [pc, #32]	; (8016148 <sys_timeouts_init+0x3c>)
 8016126:	4413      	add	r3, r2
 8016128:	461a      	mov	r2, r3
 801612a:	4908      	ldr	r1, [pc, #32]	; (801614c <sys_timeouts_init+0x40>)
 801612c:	f000 f810 	bl	8016150 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	3301      	adds	r3, #1
 8016134:	607b      	str	r3, [r7, #4]
 8016136:	687b      	ldr	r3, [r7, #4]
 8016138:	2b02      	cmp	r3, #2
 801613a:	d9ed      	bls.n	8016118 <sys_timeouts_init+0xc>
  }
}
 801613c:	bf00      	nop
 801613e:	bf00      	nop
 8016140:	3708      	adds	r7, #8
 8016142:	46bd      	mov	sp, r7
 8016144:	bd80      	pop	{r7, pc}
 8016146:	bf00      	nop
 8016148:	0801e7cc 	.word	0x0801e7cc
 801614c:	080160a9 	.word	0x080160a9

08016150 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8016150:	b580      	push	{r7, lr}
 8016152:	b086      	sub	sp, #24
 8016154:	af00      	add	r7, sp, #0
 8016156:	60f8      	str	r0, [r7, #12]
 8016158:	60b9      	str	r1, [r7, #8]
 801615a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801615c:	68fb      	ldr	r3, [r7, #12]
 801615e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8016162:	d306      	bcc.n	8016172 <sys_timeout+0x22>
 8016164:	4b0a      	ldr	r3, [pc, #40]	; (8016190 <sys_timeout+0x40>)
 8016166:	f240 1229 	movw	r2, #297	; 0x129
 801616a:	490a      	ldr	r1, [pc, #40]	; (8016194 <sys_timeout+0x44>)
 801616c:	480a      	ldr	r0, [pc, #40]	; (8016198 <sys_timeout+0x48>)
 801616e:	f003 f9e5 	bl	801953c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8016172:	f7f8 fd4b 	bl	800ec0c <sys_now>
 8016176:	4602      	mov	r2, r0
 8016178:	68fb      	ldr	r3, [r7, #12]
 801617a:	4413      	add	r3, r2
 801617c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801617e:	687a      	ldr	r2, [r7, #4]
 8016180:	68b9      	ldr	r1, [r7, #8]
 8016182:	6978      	ldr	r0, [r7, #20]
 8016184:	f7ff ff22 	bl	8015fcc <sys_timeout_abs>
#endif
}
 8016188:	bf00      	nop
 801618a:	3718      	adds	r7, #24
 801618c:	46bd      	mov	sp, r7
 801618e:	bd80      	pop	{r7, pc}
 8016190:	0801dba8 	.word	0x0801dba8
 8016194:	0801dc44 	.word	0x0801dc44
 8016198:	0801dc1c 	.word	0x0801dc1c

0801619c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801619c:	b580      	push	{r7, lr}
 801619e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80161a0:	f002 fca2 	bl	8018ae8 <rand>
 80161a4:	4603      	mov	r3, r0
 80161a6:	b29b      	uxth	r3, r3
 80161a8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80161ac:	b29b      	uxth	r3, r3
 80161ae:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80161b2:	b29a      	uxth	r2, r3
 80161b4:	4b01      	ldr	r3, [pc, #4]	; (80161bc <udp_init+0x20>)
 80161b6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80161b8:	bf00      	nop
 80161ba:	bd80      	pop	{r7, pc}
 80161bc:	20000060 	.word	0x20000060

080161c0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80161c0:	b580      	push	{r7, lr}
 80161c2:	b084      	sub	sp, #16
 80161c4:	af00      	add	r7, sp, #0
 80161c6:	60f8      	str	r0, [r7, #12]
 80161c8:	60b9      	str	r1, [r7, #8]
 80161ca:	4613      	mov	r3, r2
 80161cc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80161ce:	68fb      	ldr	r3, [r7, #12]
 80161d0:	2b00      	cmp	r3, #0
 80161d2:	d105      	bne.n	80161e0 <udp_input_local_match+0x20>
 80161d4:	4b27      	ldr	r3, [pc, #156]	; (8016274 <udp_input_local_match+0xb4>)
 80161d6:	2287      	movs	r2, #135	; 0x87
 80161d8:	4927      	ldr	r1, [pc, #156]	; (8016278 <udp_input_local_match+0xb8>)
 80161da:	4828      	ldr	r0, [pc, #160]	; (801627c <udp_input_local_match+0xbc>)
 80161dc:	f003 f9ae 	bl	801953c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80161e0:	68bb      	ldr	r3, [r7, #8]
 80161e2:	2b00      	cmp	r3, #0
 80161e4:	d105      	bne.n	80161f2 <udp_input_local_match+0x32>
 80161e6:	4b23      	ldr	r3, [pc, #140]	; (8016274 <udp_input_local_match+0xb4>)
 80161e8:	2288      	movs	r2, #136	; 0x88
 80161ea:	4925      	ldr	r1, [pc, #148]	; (8016280 <udp_input_local_match+0xc0>)
 80161ec:	4823      	ldr	r0, [pc, #140]	; (801627c <udp_input_local_match+0xbc>)
 80161ee:	f003 f9a5 	bl	801953c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80161f2:	68fb      	ldr	r3, [r7, #12]
 80161f4:	7a1b      	ldrb	r3, [r3, #8]
 80161f6:	2b00      	cmp	r3, #0
 80161f8:	d00b      	beq.n	8016212 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80161fa:	68fb      	ldr	r3, [r7, #12]
 80161fc:	7a1a      	ldrb	r2, [r3, #8]
 80161fe:	4b21      	ldr	r3, [pc, #132]	; (8016284 <udp_input_local_match+0xc4>)
 8016200:	685b      	ldr	r3, [r3, #4]
 8016202:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016206:	3301      	adds	r3, #1
 8016208:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801620a:	429a      	cmp	r2, r3
 801620c:	d001      	beq.n	8016212 <udp_input_local_match+0x52>
    return 0;
 801620e:	2300      	movs	r3, #0
 8016210:	e02b      	b.n	801626a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8016212:	79fb      	ldrb	r3, [r7, #7]
 8016214:	2b00      	cmp	r3, #0
 8016216:	d018      	beq.n	801624a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016218:	68fb      	ldr	r3, [r7, #12]
 801621a:	2b00      	cmp	r3, #0
 801621c:	d013      	beq.n	8016246 <udp_input_local_match+0x86>
 801621e:	68fb      	ldr	r3, [r7, #12]
 8016220:	681b      	ldr	r3, [r3, #0]
 8016222:	2b00      	cmp	r3, #0
 8016224:	d00f      	beq.n	8016246 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016226:	4b17      	ldr	r3, [pc, #92]	; (8016284 <udp_input_local_match+0xc4>)
 8016228:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801622a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801622e:	d00a      	beq.n	8016246 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8016230:	68fb      	ldr	r3, [r7, #12]
 8016232:	681a      	ldr	r2, [r3, #0]
 8016234:	4b13      	ldr	r3, [pc, #76]	; (8016284 <udp_input_local_match+0xc4>)
 8016236:	695b      	ldr	r3, [r3, #20]
 8016238:	405a      	eors	r2, r3
 801623a:	68bb      	ldr	r3, [r7, #8]
 801623c:	3308      	adds	r3, #8
 801623e:	681b      	ldr	r3, [r3, #0]
 8016240:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016242:	2b00      	cmp	r3, #0
 8016244:	d110      	bne.n	8016268 <udp_input_local_match+0xa8>
          return 1;
 8016246:	2301      	movs	r3, #1
 8016248:	e00f      	b.n	801626a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801624a:	68fb      	ldr	r3, [r7, #12]
 801624c:	2b00      	cmp	r3, #0
 801624e:	d009      	beq.n	8016264 <udp_input_local_match+0xa4>
 8016250:	68fb      	ldr	r3, [r7, #12]
 8016252:	681b      	ldr	r3, [r3, #0]
 8016254:	2b00      	cmp	r3, #0
 8016256:	d005      	beq.n	8016264 <udp_input_local_match+0xa4>
 8016258:	68fb      	ldr	r3, [r7, #12]
 801625a:	681a      	ldr	r2, [r3, #0]
 801625c:	4b09      	ldr	r3, [pc, #36]	; (8016284 <udp_input_local_match+0xc4>)
 801625e:	695b      	ldr	r3, [r3, #20]
 8016260:	429a      	cmp	r2, r3
 8016262:	d101      	bne.n	8016268 <udp_input_local_match+0xa8>
        return 1;
 8016264:	2301      	movs	r3, #1
 8016266:	e000      	b.n	801626a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8016268:	2300      	movs	r3, #0
}
 801626a:	4618      	mov	r0, r3
 801626c:	3710      	adds	r7, #16
 801626e:	46bd      	mov	sp, r7
 8016270:	bd80      	pop	{r7, pc}
 8016272:	bf00      	nop
 8016274:	0801dc90 	.word	0x0801dc90
 8016278:	0801dcc0 	.word	0x0801dcc0
 801627c:	0801dce4 	.word	0x0801dce4
 8016280:	0801dd0c 	.word	0x0801dd0c
 8016284:	200051ac 	.word	0x200051ac

08016288 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8016288:	b590      	push	{r4, r7, lr}
 801628a:	b08d      	sub	sp, #52	; 0x34
 801628c:	af02      	add	r7, sp, #8
 801628e:	6078      	str	r0, [r7, #4]
 8016290:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8016292:	2300      	movs	r3, #0
 8016294:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	2b00      	cmp	r3, #0
 801629a:	d105      	bne.n	80162a8 <udp_input+0x20>
 801629c:	4b7c      	ldr	r3, [pc, #496]	; (8016490 <udp_input+0x208>)
 801629e:	22cf      	movs	r2, #207	; 0xcf
 80162a0:	497c      	ldr	r1, [pc, #496]	; (8016494 <udp_input+0x20c>)
 80162a2:	487d      	ldr	r0, [pc, #500]	; (8016498 <udp_input+0x210>)
 80162a4:	f003 f94a 	bl	801953c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80162a8:	683b      	ldr	r3, [r7, #0]
 80162aa:	2b00      	cmp	r3, #0
 80162ac:	d105      	bne.n	80162ba <udp_input+0x32>
 80162ae:	4b78      	ldr	r3, [pc, #480]	; (8016490 <udp_input+0x208>)
 80162b0:	22d0      	movs	r2, #208	; 0xd0
 80162b2:	497a      	ldr	r1, [pc, #488]	; (801649c <udp_input+0x214>)
 80162b4:	4878      	ldr	r0, [pc, #480]	; (8016498 <udp_input+0x210>)
 80162b6:	f003 f941 	bl	801953c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80162ba:	687b      	ldr	r3, [r7, #4]
 80162bc:	895b      	ldrh	r3, [r3, #10]
 80162be:	2b07      	cmp	r3, #7
 80162c0:	d803      	bhi.n	80162ca <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80162c2:	6878      	ldr	r0, [r7, #4]
 80162c4:	f7fa fa78 	bl	80107b8 <pbuf_free>
    goto end;
 80162c8:	e0de      	b.n	8016488 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	685b      	ldr	r3, [r3, #4]
 80162ce:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80162d0:	4b73      	ldr	r3, [pc, #460]	; (80164a0 <udp_input+0x218>)
 80162d2:	695b      	ldr	r3, [r3, #20]
 80162d4:	4a72      	ldr	r2, [pc, #456]	; (80164a0 <udp_input+0x218>)
 80162d6:	6812      	ldr	r2, [r2, #0]
 80162d8:	4611      	mov	r1, r2
 80162da:	4618      	mov	r0, r3
 80162dc:	f001 fcae 	bl	8017c3c <ip4_addr_isbroadcast_u32>
 80162e0:	4603      	mov	r3, r0
 80162e2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80162e4:	697b      	ldr	r3, [r7, #20]
 80162e6:	881b      	ldrh	r3, [r3, #0]
 80162e8:	b29b      	uxth	r3, r3
 80162ea:	4618      	mov	r0, r3
 80162ec:	f7f8 fe6e 	bl	800efcc <lwip_htons>
 80162f0:	4603      	mov	r3, r0
 80162f2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80162f4:	697b      	ldr	r3, [r7, #20]
 80162f6:	885b      	ldrh	r3, [r3, #2]
 80162f8:	b29b      	uxth	r3, r3
 80162fa:	4618      	mov	r0, r3
 80162fc:	f7f8 fe66 	bl	800efcc <lwip_htons>
 8016300:	4603      	mov	r3, r0
 8016302:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8016304:	2300      	movs	r3, #0
 8016306:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8016308:	2300      	movs	r3, #0
 801630a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801630c:	2300      	movs	r3, #0
 801630e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016310:	4b64      	ldr	r3, [pc, #400]	; (80164a4 <udp_input+0x21c>)
 8016312:	681b      	ldr	r3, [r3, #0]
 8016314:	627b      	str	r3, [r7, #36]	; 0x24
 8016316:	e054      	b.n	80163c2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8016318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801631a:	8a5b      	ldrh	r3, [r3, #18]
 801631c:	89fa      	ldrh	r2, [r7, #14]
 801631e:	429a      	cmp	r2, r3
 8016320:	d14a      	bne.n	80163b8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8016322:	7cfb      	ldrb	r3, [r7, #19]
 8016324:	461a      	mov	r2, r3
 8016326:	6839      	ldr	r1, [r7, #0]
 8016328:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801632a:	f7ff ff49 	bl	80161c0 <udp_input_local_match>
 801632e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8016330:	2b00      	cmp	r3, #0
 8016332:	d041      	beq.n	80163b8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8016334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016336:	7c1b      	ldrb	r3, [r3, #16]
 8016338:	f003 0304 	and.w	r3, r3, #4
 801633c:	2b00      	cmp	r3, #0
 801633e:	d11d      	bne.n	801637c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8016340:	69fb      	ldr	r3, [r7, #28]
 8016342:	2b00      	cmp	r3, #0
 8016344:	d102      	bne.n	801634c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8016346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016348:	61fb      	str	r3, [r7, #28]
 801634a:	e017      	b.n	801637c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801634c:	7cfb      	ldrb	r3, [r7, #19]
 801634e:	2b00      	cmp	r3, #0
 8016350:	d014      	beq.n	801637c <udp_input+0xf4>
 8016352:	4b53      	ldr	r3, [pc, #332]	; (80164a0 <udp_input+0x218>)
 8016354:	695b      	ldr	r3, [r3, #20]
 8016356:	f1b3 3fff 	cmp.w	r3, #4294967295
 801635a:	d10f      	bne.n	801637c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801635c:	69fb      	ldr	r3, [r7, #28]
 801635e:	681a      	ldr	r2, [r3, #0]
 8016360:	683b      	ldr	r3, [r7, #0]
 8016362:	3304      	adds	r3, #4
 8016364:	681b      	ldr	r3, [r3, #0]
 8016366:	429a      	cmp	r2, r3
 8016368:	d008      	beq.n	801637c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801636a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801636c:	681a      	ldr	r2, [r3, #0]
 801636e:	683b      	ldr	r3, [r7, #0]
 8016370:	3304      	adds	r3, #4
 8016372:	681b      	ldr	r3, [r3, #0]
 8016374:	429a      	cmp	r2, r3
 8016376:	d101      	bne.n	801637c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8016378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801637a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801637c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801637e:	8a9b      	ldrh	r3, [r3, #20]
 8016380:	8a3a      	ldrh	r2, [r7, #16]
 8016382:	429a      	cmp	r2, r3
 8016384:	d118      	bne.n	80163b8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016388:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801638a:	2b00      	cmp	r3, #0
 801638c:	d005      	beq.n	801639a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801638e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016390:	685a      	ldr	r2, [r3, #4]
 8016392:	4b43      	ldr	r3, [pc, #268]	; (80164a0 <udp_input+0x218>)
 8016394:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016396:	429a      	cmp	r2, r3
 8016398:	d10e      	bne.n	80163b8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801639a:	6a3b      	ldr	r3, [r7, #32]
 801639c:	2b00      	cmp	r3, #0
 801639e:	d014      	beq.n	80163ca <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80163a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163a2:	68da      	ldr	r2, [r3, #12]
 80163a4:	6a3b      	ldr	r3, [r7, #32]
 80163a6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80163a8:	4b3e      	ldr	r3, [pc, #248]	; (80164a4 <udp_input+0x21c>)
 80163aa:	681a      	ldr	r2, [r3, #0]
 80163ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163ae:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80163b0:	4a3c      	ldr	r2, [pc, #240]	; (80164a4 <udp_input+0x21c>)
 80163b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163b4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80163b6:	e008      	b.n	80163ca <udp_input+0x142>
      }
    }

    prev = pcb;
 80163b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163ba:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80163bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163be:	68db      	ldr	r3, [r3, #12]
 80163c0:	627b      	str	r3, [r7, #36]	; 0x24
 80163c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163c4:	2b00      	cmp	r3, #0
 80163c6:	d1a7      	bne.n	8016318 <udp_input+0x90>
 80163c8:	e000      	b.n	80163cc <udp_input+0x144>
        break;
 80163ca:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80163cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163ce:	2b00      	cmp	r3, #0
 80163d0:	d101      	bne.n	80163d6 <udp_input+0x14e>
    pcb = uncon_pcb;
 80163d2:	69fb      	ldr	r3, [r7, #28]
 80163d4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80163d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163d8:	2b00      	cmp	r3, #0
 80163da:	d002      	beq.n	80163e2 <udp_input+0x15a>
    for_us = 1;
 80163dc:	2301      	movs	r3, #1
 80163de:	76fb      	strb	r3, [r7, #27]
 80163e0:	e00a      	b.n	80163f8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80163e2:	683b      	ldr	r3, [r7, #0]
 80163e4:	3304      	adds	r3, #4
 80163e6:	681a      	ldr	r2, [r3, #0]
 80163e8:	4b2d      	ldr	r3, [pc, #180]	; (80164a0 <udp_input+0x218>)
 80163ea:	695b      	ldr	r3, [r3, #20]
 80163ec:	429a      	cmp	r2, r3
 80163ee:	bf0c      	ite	eq
 80163f0:	2301      	moveq	r3, #1
 80163f2:	2300      	movne	r3, #0
 80163f4:	b2db      	uxtb	r3, r3
 80163f6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80163f8:	7efb      	ldrb	r3, [r7, #27]
 80163fa:	2b00      	cmp	r3, #0
 80163fc:	d041      	beq.n	8016482 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80163fe:	2108      	movs	r1, #8
 8016400:	6878      	ldr	r0, [r7, #4]
 8016402:	f7fa f953 	bl	80106ac <pbuf_remove_header>
 8016406:	4603      	mov	r3, r0
 8016408:	2b00      	cmp	r3, #0
 801640a:	d00a      	beq.n	8016422 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801640c:	4b20      	ldr	r3, [pc, #128]	; (8016490 <udp_input+0x208>)
 801640e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8016412:	4925      	ldr	r1, [pc, #148]	; (80164a8 <udp_input+0x220>)
 8016414:	4820      	ldr	r0, [pc, #128]	; (8016498 <udp_input+0x210>)
 8016416:	f003 f891 	bl	801953c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801641a:	6878      	ldr	r0, [r7, #4]
 801641c:	f7fa f9cc 	bl	80107b8 <pbuf_free>
      goto end;
 8016420:	e032      	b.n	8016488 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8016422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016424:	2b00      	cmp	r3, #0
 8016426:	d012      	beq.n	801644e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8016428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801642a:	699b      	ldr	r3, [r3, #24]
 801642c:	2b00      	cmp	r3, #0
 801642e:	d00a      	beq.n	8016446 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8016430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016432:	699c      	ldr	r4, [r3, #24]
 8016434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016436:	69d8      	ldr	r0, [r3, #28]
 8016438:	8a3b      	ldrh	r3, [r7, #16]
 801643a:	9300      	str	r3, [sp, #0]
 801643c:	4b1b      	ldr	r3, [pc, #108]	; (80164ac <udp_input+0x224>)
 801643e:	687a      	ldr	r2, [r7, #4]
 8016440:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016442:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8016444:	e021      	b.n	801648a <udp_input+0x202>
        pbuf_free(p);
 8016446:	6878      	ldr	r0, [r7, #4]
 8016448:	f7fa f9b6 	bl	80107b8 <pbuf_free>
        goto end;
 801644c:	e01c      	b.n	8016488 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801644e:	7cfb      	ldrb	r3, [r7, #19]
 8016450:	2b00      	cmp	r3, #0
 8016452:	d112      	bne.n	801647a <udp_input+0x1f2>
 8016454:	4b12      	ldr	r3, [pc, #72]	; (80164a0 <udp_input+0x218>)
 8016456:	695b      	ldr	r3, [r3, #20]
 8016458:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801645c:	2be0      	cmp	r3, #224	; 0xe0
 801645e:	d00c      	beq.n	801647a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8016460:	4b0f      	ldr	r3, [pc, #60]	; (80164a0 <udp_input+0x218>)
 8016462:	899b      	ldrh	r3, [r3, #12]
 8016464:	3308      	adds	r3, #8
 8016466:	b29b      	uxth	r3, r3
 8016468:	b21b      	sxth	r3, r3
 801646a:	4619      	mov	r1, r3
 801646c:	6878      	ldr	r0, [r7, #4]
 801646e:	f7fa f990 	bl	8010792 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8016472:	2103      	movs	r1, #3
 8016474:	6878      	ldr	r0, [r7, #4]
 8016476:	f001 f8b7 	bl	80175e8 <icmp_dest_unreach>
      pbuf_free(p);
 801647a:	6878      	ldr	r0, [r7, #4]
 801647c:	f7fa f99c 	bl	80107b8 <pbuf_free>
  return;
 8016480:	e003      	b.n	801648a <udp_input+0x202>
    pbuf_free(p);
 8016482:	6878      	ldr	r0, [r7, #4]
 8016484:	f7fa f998 	bl	80107b8 <pbuf_free>
  return;
 8016488:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801648a:	372c      	adds	r7, #44	; 0x2c
 801648c:	46bd      	mov	sp, r7
 801648e:	bd90      	pop	{r4, r7, pc}
 8016490:	0801dc90 	.word	0x0801dc90
 8016494:	0801dd34 	.word	0x0801dd34
 8016498:	0801dce4 	.word	0x0801dce4
 801649c:	0801dd4c 	.word	0x0801dd4c
 80164a0:	200051ac 	.word	0x200051ac
 80164a4:	20008124 	.word	0x20008124
 80164a8:	0801dd68 	.word	0x0801dd68
 80164ac:	200051bc 	.word	0x200051bc

080164b0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80164b0:	b480      	push	{r7}
 80164b2:	b085      	sub	sp, #20
 80164b4:	af00      	add	r7, sp, #0
 80164b6:	6078      	str	r0, [r7, #4]
 80164b8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80164ba:	687b      	ldr	r3, [r7, #4]
 80164bc:	2b00      	cmp	r3, #0
 80164be:	d01e      	beq.n	80164fe <udp_netif_ip_addr_changed+0x4e>
 80164c0:	687b      	ldr	r3, [r7, #4]
 80164c2:	681b      	ldr	r3, [r3, #0]
 80164c4:	2b00      	cmp	r3, #0
 80164c6:	d01a      	beq.n	80164fe <udp_netif_ip_addr_changed+0x4e>
 80164c8:	683b      	ldr	r3, [r7, #0]
 80164ca:	2b00      	cmp	r3, #0
 80164cc:	d017      	beq.n	80164fe <udp_netif_ip_addr_changed+0x4e>
 80164ce:	683b      	ldr	r3, [r7, #0]
 80164d0:	681b      	ldr	r3, [r3, #0]
 80164d2:	2b00      	cmp	r3, #0
 80164d4:	d013      	beq.n	80164fe <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80164d6:	4b0d      	ldr	r3, [pc, #52]	; (801650c <udp_netif_ip_addr_changed+0x5c>)
 80164d8:	681b      	ldr	r3, [r3, #0]
 80164da:	60fb      	str	r3, [r7, #12]
 80164dc:	e00c      	b.n	80164f8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80164de:	68fb      	ldr	r3, [r7, #12]
 80164e0:	681a      	ldr	r2, [r3, #0]
 80164e2:	687b      	ldr	r3, [r7, #4]
 80164e4:	681b      	ldr	r3, [r3, #0]
 80164e6:	429a      	cmp	r2, r3
 80164e8:	d103      	bne.n	80164f2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80164ea:	683b      	ldr	r3, [r7, #0]
 80164ec:	681a      	ldr	r2, [r3, #0]
 80164ee:	68fb      	ldr	r3, [r7, #12]
 80164f0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80164f2:	68fb      	ldr	r3, [r7, #12]
 80164f4:	68db      	ldr	r3, [r3, #12]
 80164f6:	60fb      	str	r3, [r7, #12]
 80164f8:	68fb      	ldr	r3, [r7, #12]
 80164fa:	2b00      	cmp	r3, #0
 80164fc:	d1ef      	bne.n	80164de <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80164fe:	bf00      	nop
 8016500:	3714      	adds	r7, #20
 8016502:	46bd      	mov	sp, r7
 8016504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016508:	4770      	bx	lr
 801650a:	bf00      	nop
 801650c:	20008124 	.word	0x20008124

08016510 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8016510:	b580      	push	{r7, lr}
 8016512:	b082      	sub	sp, #8
 8016514:	af00      	add	r7, sp, #0
 8016516:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8016518:	4915      	ldr	r1, [pc, #84]	; (8016570 <etharp_free_entry+0x60>)
 801651a:	687a      	ldr	r2, [r7, #4]
 801651c:	4613      	mov	r3, r2
 801651e:	005b      	lsls	r3, r3, #1
 8016520:	4413      	add	r3, r2
 8016522:	00db      	lsls	r3, r3, #3
 8016524:	440b      	add	r3, r1
 8016526:	681b      	ldr	r3, [r3, #0]
 8016528:	2b00      	cmp	r3, #0
 801652a:	d013      	beq.n	8016554 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801652c:	4910      	ldr	r1, [pc, #64]	; (8016570 <etharp_free_entry+0x60>)
 801652e:	687a      	ldr	r2, [r7, #4]
 8016530:	4613      	mov	r3, r2
 8016532:	005b      	lsls	r3, r3, #1
 8016534:	4413      	add	r3, r2
 8016536:	00db      	lsls	r3, r3, #3
 8016538:	440b      	add	r3, r1
 801653a:	681b      	ldr	r3, [r3, #0]
 801653c:	4618      	mov	r0, r3
 801653e:	f7fa f93b 	bl	80107b8 <pbuf_free>
    arp_table[i].q = NULL;
 8016542:	490b      	ldr	r1, [pc, #44]	; (8016570 <etharp_free_entry+0x60>)
 8016544:	687a      	ldr	r2, [r7, #4]
 8016546:	4613      	mov	r3, r2
 8016548:	005b      	lsls	r3, r3, #1
 801654a:	4413      	add	r3, r2
 801654c:	00db      	lsls	r3, r3, #3
 801654e:	440b      	add	r3, r1
 8016550:	2200      	movs	r2, #0
 8016552:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8016554:	4906      	ldr	r1, [pc, #24]	; (8016570 <etharp_free_entry+0x60>)
 8016556:	687a      	ldr	r2, [r7, #4]
 8016558:	4613      	mov	r3, r2
 801655a:	005b      	lsls	r3, r3, #1
 801655c:	4413      	add	r3, r2
 801655e:	00db      	lsls	r3, r3, #3
 8016560:	440b      	add	r3, r1
 8016562:	3314      	adds	r3, #20
 8016564:	2200      	movs	r2, #0
 8016566:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8016568:	bf00      	nop
 801656a:	3708      	adds	r7, #8
 801656c:	46bd      	mov	sp, r7
 801656e:	bd80      	pop	{r7, pc}
 8016570:	20008128 	.word	0x20008128

08016574 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8016574:	b580      	push	{r7, lr}
 8016576:	b082      	sub	sp, #8
 8016578:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801657a:	2300      	movs	r3, #0
 801657c:	607b      	str	r3, [r7, #4]
 801657e:	e096      	b.n	80166ae <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8016580:	494f      	ldr	r1, [pc, #316]	; (80166c0 <etharp_tmr+0x14c>)
 8016582:	687a      	ldr	r2, [r7, #4]
 8016584:	4613      	mov	r3, r2
 8016586:	005b      	lsls	r3, r3, #1
 8016588:	4413      	add	r3, r2
 801658a:	00db      	lsls	r3, r3, #3
 801658c:	440b      	add	r3, r1
 801658e:	3314      	adds	r3, #20
 8016590:	781b      	ldrb	r3, [r3, #0]
 8016592:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8016594:	78fb      	ldrb	r3, [r7, #3]
 8016596:	2b00      	cmp	r3, #0
 8016598:	f000 8086 	beq.w	80166a8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801659c:	4948      	ldr	r1, [pc, #288]	; (80166c0 <etharp_tmr+0x14c>)
 801659e:	687a      	ldr	r2, [r7, #4]
 80165a0:	4613      	mov	r3, r2
 80165a2:	005b      	lsls	r3, r3, #1
 80165a4:	4413      	add	r3, r2
 80165a6:	00db      	lsls	r3, r3, #3
 80165a8:	440b      	add	r3, r1
 80165aa:	3312      	adds	r3, #18
 80165ac:	881b      	ldrh	r3, [r3, #0]
 80165ae:	3301      	adds	r3, #1
 80165b0:	b298      	uxth	r0, r3
 80165b2:	4943      	ldr	r1, [pc, #268]	; (80166c0 <etharp_tmr+0x14c>)
 80165b4:	687a      	ldr	r2, [r7, #4]
 80165b6:	4613      	mov	r3, r2
 80165b8:	005b      	lsls	r3, r3, #1
 80165ba:	4413      	add	r3, r2
 80165bc:	00db      	lsls	r3, r3, #3
 80165be:	440b      	add	r3, r1
 80165c0:	3312      	adds	r3, #18
 80165c2:	4602      	mov	r2, r0
 80165c4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80165c6:	493e      	ldr	r1, [pc, #248]	; (80166c0 <etharp_tmr+0x14c>)
 80165c8:	687a      	ldr	r2, [r7, #4]
 80165ca:	4613      	mov	r3, r2
 80165cc:	005b      	lsls	r3, r3, #1
 80165ce:	4413      	add	r3, r2
 80165d0:	00db      	lsls	r3, r3, #3
 80165d2:	440b      	add	r3, r1
 80165d4:	3312      	adds	r3, #18
 80165d6:	881b      	ldrh	r3, [r3, #0]
 80165d8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80165dc:	d215      	bcs.n	801660a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80165de:	4938      	ldr	r1, [pc, #224]	; (80166c0 <etharp_tmr+0x14c>)
 80165e0:	687a      	ldr	r2, [r7, #4]
 80165e2:	4613      	mov	r3, r2
 80165e4:	005b      	lsls	r3, r3, #1
 80165e6:	4413      	add	r3, r2
 80165e8:	00db      	lsls	r3, r3, #3
 80165ea:	440b      	add	r3, r1
 80165ec:	3314      	adds	r3, #20
 80165ee:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80165f0:	2b01      	cmp	r3, #1
 80165f2:	d10e      	bne.n	8016612 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80165f4:	4932      	ldr	r1, [pc, #200]	; (80166c0 <etharp_tmr+0x14c>)
 80165f6:	687a      	ldr	r2, [r7, #4]
 80165f8:	4613      	mov	r3, r2
 80165fa:	005b      	lsls	r3, r3, #1
 80165fc:	4413      	add	r3, r2
 80165fe:	00db      	lsls	r3, r3, #3
 8016600:	440b      	add	r3, r1
 8016602:	3312      	adds	r3, #18
 8016604:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016606:	2b04      	cmp	r3, #4
 8016608:	d903      	bls.n	8016612 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801660a:	6878      	ldr	r0, [r7, #4]
 801660c:	f7ff ff80 	bl	8016510 <etharp_free_entry>
 8016610:	e04a      	b.n	80166a8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8016612:	492b      	ldr	r1, [pc, #172]	; (80166c0 <etharp_tmr+0x14c>)
 8016614:	687a      	ldr	r2, [r7, #4]
 8016616:	4613      	mov	r3, r2
 8016618:	005b      	lsls	r3, r3, #1
 801661a:	4413      	add	r3, r2
 801661c:	00db      	lsls	r3, r3, #3
 801661e:	440b      	add	r3, r1
 8016620:	3314      	adds	r3, #20
 8016622:	781b      	ldrb	r3, [r3, #0]
 8016624:	2b03      	cmp	r3, #3
 8016626:	d10a      	bne.n	801663e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8016628:	4925      	ldr	r1, [pc, #148]	; (80166c0 <etharp_tmr+0x14c>)
 801662a:	687a      	ldr	r2, [r7, #4]
 801662c:	4613      	mov	r3, r2
 801662e:	005b      	lsls	r3, r3, #1
 8016630:	4413      	add	r3, r2
 8016632:	00db      	lsls	r3, r3, #3
 8016634:	440b      	add	r3, r1
 8016636:	3314      	adds	r3, #20
 8016638:	2204      	movs	r2, #4
 801663a:	701a      	strb	r2, [r3, #0]
 801663c:	e034      	b.n	80166a8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801663e:	4920      	ldr	r1, [pc, #128]	; (80166c0 <etharp_tmr+0x14c>)
 8016640:	687a      	ldr	r2, [r7, #4]
 8016642:	4613      	mov	r3, r2
 8016644:	005b      	lsls	r3, r3, #1
 8016646:	4413      	add	r3, r2
 8016648:	00db      	lsls	r3, r3, #3
 801664a:	440b      	add	r3, r1
 801664c:	3314      	adds	r3, #20
 801664e:	781b      	ldrb	r3, [r3, #0]
 8016650:	2b04      	cmp	r3, #4
 8016652:	d10a      	bne.n	801666a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8016654:	491a      	ldr	r1, [pc, #104]	; (80166c0 <etharp_tmr+0x14c>)
 8016656:	687a      	ldr	r2, [r7, #4]
 8016658:	4613      	mov	r3, r2
 801665a:	005b      	lsls	r3, r3, #1
 801665c:	4413      	add	r3, r2
 801665e:	00db      	lsls	r3, r3, #3
 8016660:	440b      	add	r3, r1
 8016662:	3314      	adds	r3, #20
 8016664:	2202      	movs	r2, #2
 8016666:	701a      	strb	r2, [r3, #0]
 8016668:	e01e      	b.n	80166a8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801666a:	4915      	ldr	r1, [pc, #84]	; (80166c0 <etharp_tmr+0x14c>)
 801666c:	687a      	ldr	r2, [r7, #4]
 801666e:	4613      	mov	r3, r2
 8016670:	005b      	lsls	r3, r3, #1
 8016672:	4413      	add	r3, r2
 8016674:	00db      	lsls	r3, r3, #3
 8016676:	440b      	add	r3, r1
 8016678:	3314      	adds	r3, #20
 801667a:	781b      	ldrb	r3, [r3, #0]
 801667c:	2b01      	cmp	r3, #1
 801667e:	d113      	bne.n	80166a8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8016680:	490f      	ldr	r1, [pc, #60]	; (80166c0 <etharp_tmr+0x14c>)
 8016682:	687a      	ldr	r2, [r7, #4]
 8016684:	4613      	mov	r3, r2
 8016686:	005b      	lsls	r3, r3, #1
 8016688:	4413      	add	r3, r2
 801668a:	00db      	lsls	r3, r3, #3
 801668c:	440b      	add	r3, r1
 801668e:	3308      	adds	r3, #8
 8016690:	6818      	ldr	r0, [r3, #0]
 8016692:	687a      	ldr	r2, [r7, #4]
 8016694:	4613      	mov	r3, r2
 8016696:	005b      	lsls	r3, r3, #1
 8016698:	4413      	add	r3, r2
 801669a:	00db      	lsls	r3, r3, #3
 801669c:	4a08      	ldr	r2, [pc, #32]	; (80166c0 <etharp_tmr+0x14c>)
 801669e:	4413      	add	r3, r2
 80166a0:	3304      	adds	r3, #4
 80166a2:	4619      	mov	r1, r3
 80166a4:	f000 fe6e 	bl	8017384 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80166a8:	687b      	ldr	r3, [r7, #4]
 80166aa:	3301      	adds	r3, #1
 80166ac:	607b      	str	r3, [r7, #4]
 80166ae:	687b      	ldr	r3, [r7, #4]
 80166b0:	2b09      	cmp	r3, #9
 80166b2:	f77f af65 	ble.w	8016580 <etharp_tmr+0xc>
      }
    }
  }
}
 80166b6:	bf00      	nop
 80166b8:	bf00      	nop
 80166ba:	3708      	adds	r7, #8
 80166bc:	46bd      	mov	sp, r7
 80166be:	bd80      	pop	{r7, pc}
 80166c0:	20008128 	.word	0x20008128

080166c4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80166c4:	b580      	push	{r7, lr}
 80166c6:	b08a      	sub	sp, #40	; 0x28
 80166c8:	af00      	add	r7, sp, #0
 80166ca:	60f8      	str	r0, [r7, #12]
 80166cc:	460b      	mov	r3, r1
 80166ce:	607a      	str	r2, [r7, #4]
 80166d0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80166d2:	230a      	movs	r3, #10
 80166d4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80166d6:	230a      	movs	r3, #10
 80166d8:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80166da:	230a      	movs	r3, #10
 80166dc:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80166de:	2300      	movs	r3, #0
 80166e0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80166e2:	230a      	movs	r3, #10
 80166e4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80166e6:	2300      	movs	r3, #0
 80166e8:	83bb      	strh	r3, [r7, #28]
 80166ea:	2300      	movs	r3, #0
 80166ec:	837b      	strh	r3, [r7, #26]
 80166ee:	2300      	movs	r3, #0
 80166f0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80166f2:	2300      	movs	r3, #0
 80166f4:	843b      	strh	r3, [r7, #32]
 80166f6:	e0ae      	b.n	8016856 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80166f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80166fc:	49a6      	ldr	r1, [pc, #664]	; (8016998 <etharp_find_entry+0x2d4>)
 80166fe:	4613      	mov	r3, r2
 8016700:	005b      	lsls	r3, r3, #1
 8016702:	4413      	add	r3, r2
 8016704:	00db      	lsls	r3, r3, #3
 8016706:	440b      	add	r3, r1
 8016708:	3314      	adds	r3, #20
 801670a:	781b      	ldrb	r3, [r3, #0]
 801670c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801670e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016712:	2b0a      	cmp	r3, #10
 8016714:	d105      	bne.n	8016722 <etharp_find_entry+0x5e>
 8016716:	7dfb      	ldrb	r3, [r7, #23]
 8016718:	2b00      	cmp	r3, #0
 801671a:	d102      	bne.n	8016722 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801671c:	8c3b      	ldrh	r3, [r7, #32]
 801671e:	847b      	strh	r3, [r7, #34]	; 0x22
 8016720:	e095      	b.n	801684e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8016722:	7dfb      	ldrb	r3, [r7, #23]
 8016724:	2b00      	cmp	r3, #0
 8016726:	f000 8092 	beq.w	801684e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801672a:	7dfb      	ldrb	r3, [r7, #23]
 801672c:	2b01      	cmp	r3, #1
 801672e:	d009      	beq.n	8016744 <etharp_find_entry+0x80>
 8016730:	7dfb      	ldrb	r3, [r7, #23]
 8016732:	2b01      	cmp	r3, #1
 8016734:	d806      	bhi.n	8016744 <etharp_find_entry+0x80>
 8016736:	4b99      	ldr	r3, [pc, #612]	; (801699c <etharp_find_entry+0x2d8>)
 8016738:	f240 1223 	movw	r2, #291	; 0x123
 801673c:	4998      	ldr	r1, [pc, #608]	; (80169a0 <etharp_find_entry+0x2dc>)
 801673e:	4899      	ldr	r0, [pc, #612]	; (80169a4 <etharp_find_entry+0x2e0>)
 8016740:	f002 fefc 	bl	801953c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8016744:	68fb      	ldr	r3, [r7, #12]
 8016746:	2b00      	cmp	r3, #0
 8016748:	d020      	beq.n	801678c <etharp_find_entry+0xc8>
 801674a:	68fb      	ldr	r3, [r7, #12]
 801674c:	6819      	ldr	r1, [r3, #0]
 801674e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016752:	4891      	ldr	r0, [pc, #580]	; (8016998 <etharp_find_entry+0x2d4>)
 8016754:	4613      	mov	r3, r2
 8016756:	005b      	lsls	r3, r3, #1
 8016758:	4413      	add	r3, r2
 801675a:	00db      	lsls	r3, r3, #3
 801675c:	4403      	add	r3, r0
 801675e:	3304      	adds	r3, #4
 8016760:	681b      	ldr	r3, [r3, #0]
 8016762:	4299      	cmp	r1, r3
 8016764:	d112      	bne.n	801678c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8016766:	687b      	ldr	r3, [r7, #4]
 8016768:	2b00      	cmp	r3, #0
 801676a:	d00c      	beq.n	8016786 <etharp_find_entry+0xc2>
 801676c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016770:	4989      	ldr	r1, [pc, #548]	; (8016998 <etharp_find_entry+0x2d4>)
 8016772:	4613      	mov	r3, r2
 8016774:	005b      	lsls	r3, r3, #1
 8016776:	4413      	add	r3, r2
 8016778:	00db      	lsls	r3, r3, #3
 801677a:	440b      	add	r3, r1
 801677c:	3308      	adds	r3, #8
 801677e:	681b      	ldr	r3, [r3, #0]
 8016780:	687a      	ldr	r2, [r7, #4]
 8016782:	429a      	cmp	r2, r3
 8016784:	d102      	bne.n	801678c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8016786:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801678a:	e100      	b.n	801698e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801678c:	7dfb      	ldrb	r3, [r7, #23]
 801678e:	2b01      	cmp	r3, #1
 8016790:	d140      	bne.n	8016814 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8016792:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016796:	4980      	ldr	r1, [pc, #512]	; (8016998 <etharp_find_entry+0x2d4>)
 8016798:	4613      	mov	r3, r2
 801679a:	005b      	lsls	r3, r3, #1
 801679c:	4413      	add	r3, r2
 801679e:	00db      	lsls	r3, r3, #3
 80167a0:	440b      	add	r3, r1
 80167a2:	681b      	ldr	r3, [r3, #0]
 80167a4:	2b00      	cmp	r3, #0
 80167a6:	d01a      	beq.n	80167de <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80167a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80167ac:	497a      	ldr	r1, [pc, #488]	; (8016998 <etharp_find_entry+0x2d4>)
 80167ae:	4613      	mov	r3, r2
 80167b0:	005b      	lsls	r3, r3, #1
 80167b2:	4413      	add	r3, r2
 80167b4:	00db      	lsls	r3, r3, #3
 80167b6:	440b      	add	r3, r1
 80167b8:	3312      	adds	r3, #18
 80167ba:	881b      	ldrh	r3, [r3, #0]
 80167bc:	8bba      	ldrh	r2, [r7, #28]
 80167be:	429a      	cmp	r2, r3
 80167c0:	d845      	bhi.n	801684e <etharp_find_entry+0x18a>
            old_queue = i;
 80167c2:	8c3b      	ldrh	r3, [r7, #32]
 80167c4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80167c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80167ca:	4973      	ldr	r1, [pc, #460]	; (8016998 <etharp_find_entry+0x2d4>)
 80167cc:	4613      	mov	r3, r2
 80167ce:	005b      	lsls	r3, r3, #1
 80167d0:	4413      	add	r3, r2
 80167d2:	00db      	lsls	r3, r3, #3
 80167d4:	440b      	add	r3, r1
 80167d6:	3312      	adds	r3, #18
 80167d8:	881b      	ldrh	r3, [r3, #0]
 80167da:	83bb      	strh	r3, [r7, #28]
 80167dc:	e037      	b.n	801684e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80167de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80167e2:	496d      	ldr	r1, [pc, #436]	; (8016998 <etharp_find_entry+0x2d4>)
 80167e4:	4613      	mov	r3, r2
 80167e6:	005b      	lsls	r3, r3, #1
 80167e8:	4413      	add	r3, r2
 80167ea:	00db      	lsls	r3, r3, #3
 80167ec:	440b      	add	r3, r1
 80167ee:	3312      	adds	r3, #18
 80167f0:	881b      	ldrh	r3, [r3, #0]
 80167f2:	8b7a      	ldrh	r2, [r7, #26]
 80167f4:	429a      	cmp	r2, r3
 80167f6:	d82a      	bhi.n	801684e <etharp_find_entry+0x18a>
            old_pending = i;
 80167f8:	8c3b      	ldrh	r3, [r7, #32]
 80167fa:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80167fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016800:	4965      	ldr	r1, [pc, #404]	; (8016998 <etharp_find_entry+0x2d4>)
 8016802:	4613      	mov	r3, r2
 8016804:	005b      	lsls	r3, r3, #1
 8016806:	4413      	add	r3, r2
 8016808:	00db      	lsls	r3, r3, #3
 801680a:	440b      	add	r3, r1
 801680c:	3312      	adds	r3, #18
 801680e:	881b      	ldrh	r3, [r3, #0]
 8016810:	837b      	strh	r3, [r7, #26]
 8016812:	e01c      	b.n	801684e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8016814:	7dfb      	ldrb	r3, [r7, #23]
 8016816:	2b01      	cmp	r3, #1
 8016818:	d919      	bls.n	801684e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801681a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801681e:	495e      	ldr	r1, [pc, #376]	; (8016998 <etharp_find_entry+0x2d4>)
 8016820:	4613      	mov	r3, r2
 8016822:	005b      	lsls	r3, r3, #1
 8016824:	4413      	add	r3, r2
 8016826:	00db      	lsls	r3, r3, #3
 8016828:	440b      	add	r3, r1
 801682a:	3312      	adds	r3, #18
 801682c:	881b      	ldrh	r3, [r3, #0]
 801682e:	8b3a      	ldrh	r2, [r7, #24]
 8016830:	429a      	cmp	r2, r3
 8016832:	d80c      	bhi.n	801684e <etharp_find_entry+0x18a>
            old_stable = i;
 8016834:	8c3b      	ldrh	r3, [r7, #32]
 8016836:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8016838:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801683c:	4956      	ldr	r1, [pc, #344]	; (8016998 <etharp_find_entry+0x2d4>)
 801683e:	4613      	mov	r3, r2
 8016840:	005b      	lsls	r3, r3, #1
 8016842:	4413      	add	r3, r2
 8016844:	00db      	lsls	r3, r3, #3
 8016846:	440b      	add	r3, r1
 8016848:	3312      	adds	r3, #18
 801684a:	881b      	ldrh	r3, [r3, #0]
 801684c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801684e:	8c3b      	ldrh	r3, [r7, #32]
 8016850:	3301      	adds	r3, #1
 8016852:	b29b      	uxth	r3, r3
 8016854:	843b      	strh	r3, [r7, #32]
 8016856:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801685a:	2b09      	cmp	r3, #9
 801685c:	f77f af4c 	ble.w	80166f8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8016860:	7afb      	ldrb	r3, [r7, #11]
 8016862:	f003 0302 	and.w	r3, r3, #2
 8016866:	2b00      	cmp	r3, #0
 8016868:	d108      	bne.n	801687c <etharp_find_entry+0x1b8>
 801686a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801686e:	2b0a      	cmp	r3, #10
 8016870:	d107      	bne.n	8016882 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8016872:	7afb      	ldrb	r3, [r7, #11]
 8016874:	f003 0301 	and.w	r3, r3, #1
 8016878:	2b00      	cmp	r3, #0
 801687a:	d102      	bne.n	8016882 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801687c:	f04f 33ff 	mov.w	r3, #4294967295
 8016880:	e085      	b.n	801698e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8016882:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016886:	2b09      	cmp	r3, #9
 8016888:	dc02      	bgt.n	8016890 <etharp_find_entry+0x1cc>
    i = empty;
 801688a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801688c:	843b      	strh	r3, [r7, #32]
 801688e:	e039      	b.n	8016904 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8016890:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8016894:	2b09      	cmp	r3, #9
 8016896:	dc14      	bgt.n	80168c2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8016898:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801689a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801689c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80168a0:	493d      	ldr	r1, [pc, #244]	; (8016998 <etharp_find_entry+0x2d4>)
 80168a2:	4613      	mov	r3, r2
 80168a4:	005b      	lsls	r3, r3, #1
 80168a6:	4413      	add	r3, r2
 80168a8:	00db      	lsls	r3, r3, #3
 80168aa:	440b      	add	r3, r1
 80168ac:	681b      	ldr	r3, [r3, #0]
 80168ae:	2b00      	cmp	r3, #0
 80168b0:	d018      	beq.n	80168e4 <etharp_find_entry+0x220>
 80168b2:	4b3a      	ldr	r3, [pc, #232]	; (801699c <etharp_find_entry+0x2d8>)
 80168b4:	f240 126d 	movw	r2, #365	; 0x16d
 80168b8:	493b      	ldr	r1, [pc, #236]	; (80169a8 <etharp_find_entry+0x2e4>)
 80168ba:	483a      	ldr	r0, [pc, #232]	; (80169a4 <etharp_find_entry+0x2e0>)
 80168bc:	f002 fe3e 	bl	801953c <iprintf>
 80168c0:	e010      	b.n	80168e4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80168c2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80168c6:	2b09      	cmp	r3, #9
 80168c8:	dc02      	bgt.n	80168d0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80168ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80168cc:	843b      	strh	r3, [r7, #32]
 80168ce:	e009      	b.n	80168e4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80168d0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80168d4:	2b09      	cmp	r3, #9
 80168d6:	dc02      	bgt.n	80168de <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80168d8:	8bfb      	ldrh	r3, [r7, #30]
 80168da:	843b      	strh	r3, [r7, #32]
 80168dc:	e002      	b.n	80168e4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80168de:	f04f 33ff 	mov.w	r3, #4294967295
 80168e2:	e054      	b.n	801698e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80168e4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80168e8:	2b09      	cmp	r3, #9
 80168ea:	dd06      	ble.n	80168fa <etharp_find_entry+0x236>
 80168ec:	4b2b      	ldr	r3, [pc, #172]	; (801699c <etharp_find_entry+0x2d8>)
 80168ee:	f240 127f 	movw	r2, #383	; 0x17f
 80168f2:	492e      	ldr	r1, [pc, #184]	; (80169ac <etharp_find_entry+0x2e8>)
 80168f4:	482b      	ldr	r0, [pc, #172]	; (80169a4 <etharp_find_entry+0x2e0>)
 80168f6:	f002 fe21 	bl	801953c <iprintf>
    etharp_free_entry(i);
 80168fa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80168fe:	4618      	mov	r0, r3
 8016900:	f7ff fe06 	bl	8016510 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016904:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016908:	2b09      	cmp	r3, #9
 801690a:	dd06      	ble.n	801691a <etharp_find_entry+0x256>
 801690c:	4b23      	ldr	r3, [pc, #140]	; (801699c <etharp_find_entry+0x2d8>)
 801690e:	f240 1283 	movw	r2, #387	; 0x183
 8016912:	4926      	ldr	r1, [pc, #152]	; (80169ac <etharp_find_entry+0x2e8>)
 8016914:	4823      	ldr	r0, [pc, #140]	; (80169a4 <etharp_find_entry+0x2e0>)
 8016916:	f002 fe11 	bl	801953c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801691a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801691e:	491e      	ldr	r1, [pc, #120]	; (8016998 <etharp_find_entry+0x2d4>)
 8016920:	4613      	mov	r3, r2
 8016922:	005b      	lsls	r3, r3, #1
 8016924:	4413      	add	r3, r2
 8016926:	00db      	lsls	r3, r3, #3
 8016928:	440b      	add	r3, r1
 801692a:	3314      	adds	r3, #20
 801692c:	781b      	ldrb	r3, [r3, #0]
 801692e:	2b00      	cmp	r3, #0
 8016930:	d006      	beq.n	8016940 <etharp_find_entry+0x27c>
 8016932:	4b1a      	ldr	r3, [pc, #104]	; (801699c <etharp_find_entry+0x2d8>)
 8016934:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8016938:	491d      	ldr	r1, [pc, #116]	; (80169b0 <etharp_find_entry+0x2ec>)
 801693a:	481a      	ldr	r0, [pc, #104]	; (80169a4 <etharp_find_entry+0x2e0>)
 801693c:	f002 fdfe 	bl	801953c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8016940:	68fb      	ldr	r3, [r7, #12]
 8016942:	2b00      	cmp	r3, #0
 8016944:	d00b      	beq.n	801695e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8016946:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801694a:	68fb      	ldr	r3, [r7, #12]
 801694c:	6819      	ldr	r1, [r3, #0]
 801694e:	4812      	ldr	r0, [pc, #72]	; (8016998 <etharp_find_entry+0x2d4>)
 8016950:	4613      	mov	r3, r2
 8016952:	005b      	lsls	r3, r3, #1
 8016954:	4413      	add	r3, r2
 8016956:	00db      	lsls	r3, r3, #3
 8016958:	4403      	add	r3, r0
 801695a:	3304      	adds	r3, #4
 801695c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801695e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016962:	490d      	ldr	r1, [pc, #52]	; (8016998 <etharp_find_entry+0x2d4>)
 8016964:	4613      	mov	r3, r2
 8016966:	005b      	lsls	r3, r3, #1
 8016968:	4413      	add	r3, r2
 801696a:	00db      	lsls	r3, r3, #3
 801696c:	440b      	add	r3, r1
 801696e:	3312      	adds	r3, #18
 8016970:	2200      	movs	r2, #0
 8016972:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8016974:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016978:	4907      	ldr	r1, [pc, #28]	; (8016998 <etharp_find_entry+0x2d4>)
 801697a:	4613      	mov	r3, r2
 801697c:	005b      	lsls	r3, r3, #1
 801697e:	4413      	add	r3, r2
 8016980:	00db      	lsls	r3, r3, #3
 8016982:	440b      	add	r3, r1
 8016984:	3308      	adds	r3, #8
 8016986:	687a      	ldr	r2, [r7, #4]
 8016988:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801698a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801698e:	4618      	mov	r0, r3
 8016990:	3728      	adds	r7, #40	; 0x28
 8016992:	46bd      	mov	sp, r7
 8016994:	bd80      	pop	{r7, pc}
 8016996:	bf00      	nop
 8016998:	20008128 	.word	0x20008128
 801699c:	0801dff4 	.word	0x0801dff4
 80169a0:	0801e02c 	.word	0x0801e02c
 80169a4:	0801e06c 	.word	0x0801e06c
 80169a8:	0801e094 	.word	0x0801e094
 80169ac:	0801e0ac 	.word	0x0801e0ac
 80169b0:	0801e0c0 	.word	0x0801e0c0

080169b4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80169b4:	b580      	push	{r7, lr}
 80169b6:	b088      	sub	sp, #32
 80169b8:	af02      	add	r7, sp, #8
 80169ba:	60f8      	str	r0, [r7, #12]
 80169bc:	60b9      	str	r1, [r7, #8]
 80169be:	607a      	str	r2, [r7, #4]
 80169c0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80169c2:	68fb      	ldr	r3, [r7, #12]
 80169c4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80169c8:	2b06      	cmp	r3, #6
 80169ca:	d006      	beq.n	80169da <etharp_update_arp_entry+0x26>
 80169cc:	4b48      	ldr	r3, [pc, #288]	; (8016af0 <etharp_update_arp_entry+0x13c>)
 80169ce:	f240 12a9 	movw	r2, #425	; 0x1a9
 80169d2:	4948      	ldr	r1, [pc, #288]	; (8016af4 <etharp_update_arp_entry+0x140>)
 80169d4:	4848      	ldr	r0, [pc, #288]	; (8016af8 <etharp_update_arp_entry+0x144>)
 80169d6:	f002 fdb1 	bl	801953c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80169da:	68bb      	ldr	r3, [r7, #8]
 80169dc:	2b00      	cmp	r3, #0
 80169de:	d012      	beq.n	8016a06 <etharp_update_arp_entry+0x52>
 80169e0:	68bb      	ldr	r3, [r7, #8]
 80169e2:	681b      	ldr	r3, [r3, #0]
 80169e4:	2b00      	cmp	r3, #0
 80169e6:	d00e      	beq.n	8016a06 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80169e8:	68bb      	ldr	r3, [r7, #8]
 80169ea:	681b      	ldr	r3, [r3, #0]
 80169ec:	68f9      	ldr	r1, [r7, #12]
 80169ee:	4618      	mov	r0, r3
 80169f0:	f001 f924 	bl	8017c3c <ip4_addr_isbroadcast_u32>
 80169f4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80169f6:	2b00      	cmp	r3, #0
 80169f8:	d105      	bne.n	8016a06 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80169fa:	68bb      	ldr	r3, [r7, #8]
 80169fc:	681b      	ldr	r3, [r3, #0]
 80169fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016a02:	2be0      	cmp	r3, #224	; 0xe0
 8016a04:	d102      	bne.n	8016a0c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016a06:	f06f 030f 	mvn.w	r3, #15
 8016a0a:	e06c      	b.n	8016ae6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8016a0c:	78fb      	ldrb	r3, [r7, #3]
 8016a0e:	68fa      	ldr	r2, [r7, #12]
 8016a10:	4619      	mov	r1, r3
 8016a12:	68b8      	ldr	r0, [r7, #8]
 8016a14:	f7ff fe56 	bl	80166c4 <etharp_find_entry>
 8016a18:	4603      	mov	r3, r0
 8016a1a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8016a1c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8016a20:	2b00      	cmp	r3, #0
 8016a22:	da02      	bge.n	8016a2a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8016a24:	8afb      	ldrh	r3, [r7, #22]
 8016a26:	b25b      	sxtb	r3, r3
 8016a28:	e05d      	b.n	8016ae6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8016a2a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016a2e:	4933      	ldr	r1, [pc, #204]	; (8016afc <etharp_update_arp_entry+0x148>)
 8016a30:	4613      	mov	r3, r2
 8016a32:	005b      	lsls	r3, r3, #1
 8016a34:	4413      	add	r3, r2
 8016a36:	00db      	lsls	r3, r3, #3
 8016a38:	440b      	add	r3, r1
 8016a3a:	3314      	adds	r3, #20
 8016a3c:	2202      	movs	r2, #2
 8016a3e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8016a40:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016a44:	492d      	ldr	r1, [pc, #180]	; (8016afc <etharp_update_arp_entry+0x148>)
 8016a46:	4613      	mov	r3, r2
 8016a48:	005b      	lsls	r3, r3, #1
 8016a4a:	4413      	add	r3, r2
 8016a4c:	00db      	lsls	r3, r3, #3
 8016a4e:	440b      	add	r3, r1
 8016a50:	3308      	adds	r3, #8
 8016a52:	68fa      	ldr	r2, [r7, #12]
 8016a54:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8016a56:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016a5a:	4613      	mov	r3, r2
 8016a5c:	005b      	lsls	r3, r3, #1
 8016a5e:	4413      	add	r3, r2
 8016a60:	00db      	lsls	r3, r3, #3
 8016a62:	3308      	adds	r3, #8
 8016a64:	4a25      	ldr	r2, [pc, #148]	; (8016afc <etharp_update_arp_entry+0x148>)
 8016a66:	4413      	add	r3, r2
 8016a68:	3304      	adds	r3, #4
 8016a6a:	2206      	movs	r2, #6
 8016a6c:	6879      	ldr	r1, [r7, #4]
 8016a6e:	4618      	mov	r0, r3
 8016a70:	f002 ff32 	bl	80198d8 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8016a74:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016a78:	4920      	ldr	r1, [pc, #128]	; (8016afc <etharp_update_arp_entry+0x148>)
 8016a7a:	4613      	mov	r3, r2
 8016a7c:	005b      	lsls	r3, r3, #1
 8016a7e:	4413      	add	r3, r2
 8016a80:	00db      	lsls	r3, r3, #3
 8016a82:	440b      	add	r3, r1
 8016a84:	3312      	adds	r3, #18
 8016a86:	2200      	movs	r2, #0
 8016a88:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8016a8a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016a8e:	491b      	ldr	r1, [pc, #108]	; (8016afc <etharp_update_arp_entry+0x148>)
 8016a90:	4613      	mov	r3, r2
 8016a92:	005b      	lsls	r3, r3, #1
 8016a94:	4413      	add	r3, r2
 8016a96:	00db      	lsls	r3, r3, #3
 8016a98:	440b      	add	r3, r1
 8016a9a:	681b      	ldr	r3, [r3, #0]
 8016a9c:	2b00      	cmp	r3, #0
 8016a9e:	d021      	beq.n	8016ae4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8016aa0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016aa4:	4915      	ldr	r1, [pc, #84]	; (8016afc <etharp_update_arp_entry+0x148>)
 8016aa6:	4613      	mov	r3, r2
 8016aa8:	005b      	lsls	r3, r3, #1
 8016aaa:	4413      	add	r3, r2
 8016aac:	00db      	lsls	r3, r3, #3
 8016aae:	440b      	add	r3, r1
 8016ab0:	681b      	ldr	r3, [r3, #0]
 8016ab2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8016ab4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016ab8:	4910      	ldr	r1, [pc, #64]	; (8016afc <etharp_update_arp_entry+0x148>)
 8016aba:	4613      	mov	r3, r2
 8016abc:	005b      	lsls	r3, r3, #1
 8016abe:	4413      	add	r3, r2
 8016ac0:	00db      	lsls	r3, r3, #3
 8016ac2:	440b      	add	r3, r1
 8016ac4:	2200      	movs	r2, #0
 8016ac6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8016ac8:	68fb      	ldr	r3, [r7, #12]
 8016aca:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8016ace:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016ad2:	9300      	str	r3, [sp, #0]
 8016ad4:	687b      	ldr	r3, [r7, #4]
 8016ad6:	6939      	ldr	r1, [r7, #16]
 8016ad8:	68f8      	ldr	r0, [r7, #12]
 8016ada:	f001 ffbd 	bl	8018a58 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8016ade:	6938      	ldr	r0, [r7, #16]
 8016ae0:	f7f9 fe6a 	bl	80107b8 <pbuf_free>
  }
  return ERR_OK;
 8016ae4:	2300      	movs	r3, #0
}
 8016ae6:	4618      	mov	r0, r3
 8016ae8:	3718      	adds	r7, #24
 8016aea:	46bd      	mov	sp, r7
 8016aec:	bd80      	pop	{r7, pc}
 8016aee:	bf00      	nop
 8016af0:	0801dff4 	.word	0x0801dff4
 8016af4:	0801e0ec 	.word	0x0801e0ec
 8016af8:	0801e06c 	.word	0x0801e06c
 8016afc:	20008128 	.word	0x20008128

08016b00 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8016b00:	b580      	push	{r7, lr}
 8016b02:	b084      	sub	sp, #16
 8016b04:	af00      	add	r7, sp, #0
 8016b06:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016b08:	2300      	movs	r3, #0
 8016b0a:	60fb      	str	r3, [r7, #12]
 8016b0c:	e01e      	b.n	8016b4c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8016b0e:	4913      	ldr	r1, [pc, #76]	; (8016b5c <etharp_cleanup_netif+0x5c>)
 8016b10:	68fa      	ldr	r2, [r7, #12]
 8016b12:	4613      	mov	r3, r2
 8016b14:	005b      	lsls	r3, r3, #1
 8016b16:	4413      	add	r3, r2
 8016b18:	00db      	lsls	r3, r3, #3
 8016b1a:	440b      	add	r3, r1
 8016b1c:	3314      	adds	r3, #20
 8016b1e:	781b      	ldrb	r3, [r3, #0]
 8016b20:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8016b22:	7afb      	ldrb	r3, [r7, #11]
 8016b24:	2b00      	cmp	r3, #0
 8016b26:	d00e      	beq.n	8016b46 <etharp_cleanup_netif+0x46>
 8016b28:	490c      	ldr	r1, [pc, #48]	; (8016b5c <etharp_cleanup_netif+0x5c>)
 8016b2a:	68fa      	ldr	r2, [r7, #12]
 8016b2c:	4613      	mov	r3, r2
 8016b2e:	005b      	lsls	r3, r3, #1
 8016b30:	4413      	add	r3, r2
 8016b32:	00db      	lsls	r3, r3, #3
 8016b34:	440b      	add	r3, r1
 8016b36:	3308      	adds	r3, #8
 8016b38:	681b      	ldr	r3, [r3, #0]
 8016b3a:	687a      	ldr	r2, [r7, #4]
 8016b3c:	429a      	cmp	r2, r3
 8016b3e:	d102      	bne.n	8016b46 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8016b40:	68f8      	ldr	r0, [r7, #12]
 8016b42:	f7ff fce5 	bl	8016510 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016b46:	68fb      	ldr	r3, [r7, #12]
 8016b48:	3301      	adds	r3, #1
 8016b4a:	60fb      	str	r3, [r7, #12]
 8016b4c:	68fb      	ldr	r3, [r7, #12]
 8016b4e:	2b09      	cmp	r3, #9
 8016b50:	dddd      	ble.n	8016b0e <etharp_cleanup_netif+0xe>
    }
  }
}
 8016b52:	bf00      	nop
 8016b54:	bf00      	nop
 8016b56:	3710      	adds	r7, #16
 8016b58:	46bd      	mov	sp, r7
 8016b5a:	bd80      	pop	{r7, pc}
 8016b5c:	20008128 	.word	0x20008128

08016b60 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8016b60:	b5b0      	push	{r4, r5, r7, lr}
 8016b62:	b08a      	sub	sp, #40	; 0x28
 8016b64:	af04      	add	r7, sp, #16
 8016b66:	6078      	str	r0, [r7, #4]
 8016b68:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8016b6a:	683b      	ldr	r3, [r7, #0]
 8016b6c:	2b00      	cmp	r3, #0
 8016b6e:	d107      	bne.n	8016b80 <etharp_input+0x20>
 8016b70:	4b3d      	ldr	r3, [pc, #244]	; (8016c68 <etharp_input+0x108>)
 8016b72:	f240 228a 	movw	r2, #650	; 0x28a
 8016b76:	493d      	ldr	r1, [pc, #244]	; (8016c6c <etharp_input+0x10c>)
 8016b78:	483d      	ldr	r0, [pc, #244]	; (8016c70 <etharp_input+0x110>)
 8016b7a:	f002 fcdf 	bl	801953c <iprintf>
 8016b7e:	e06f      	b.n	8016c60 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8016b80:	687b      	ldr	r3, [r7, #4]
 8016b82:	685b      	ldr	r3, [r3, #4]
 8016b84:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016b86:	693b      	ldr	r3, [r7, #16]
 8016b88:	881b      	ldrh	r3, [r3, #0]
 8016b8a:	b29b      	uxth	r3, r3
 8016b8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016b90:	d10c      	bne.n	8016bac <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016b92:	693b      	ldr	r3, [r7, #16]
 8016b94:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016b96:	2b06      	cmp	r3, #6
 8016b98:	d108      	bne.n	8016bac <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016b9a:	693b      	ldr	r3, [r7, #16]
 8016b9c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016b9e:	2b04      	cmp	r3, #4
 8016ba0:	d104      	bne.n	8016bac <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8016ba2:	693b      	ldr	r3, [r7, #16]
 8016ba4:	885b      	ldrh	r3, [r3, #2]
 8016ba6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016ba8:	2b08      	cmp	r3, #8
 8016baa:	d003      	beq.n	8016bb4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8016bac:	6878      	ldr	r0, [r7, #4]
 8016bae:	f7f9 fe03 	bl	80107b8 <pbuf_free>
    return;
 8016bb2:	e055      	b.n	8016c60 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8016bb4:	693b      	ldr	r3, [r7, #16]
 8016bb6:	330e      	adds	r3, #14
 8016bb8:	681b      	ldr	r3, [r3, #0]
 8016bba:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8016bbc:	693b      	ldr	r3, [r7, #16]
 8016bbe:	3318      	adds	r3, #24
 8016bc0:	681b      	ldr	r3, [r3, #0]
 8016bc2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016bc4:	683b      	ldr	r3, [r7, #0]
 8016bc6:	3304      	adds	r3, #4
 8016bc8:	681b      	ldr	r3, [r3, #0]
 8016bca:	2b00      	cmp	r3, #0
 8016bcc:	d102      	bne.n	8016bd4 <etharp_input+0x74>
    for_us = 0;
 8016bce:	2300      	movs	r3, #0
 8016bd0:	75fb      	strb	r3, [r7, #23]
 8016bd2:	e009      	b.n	8016be8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8016bd4:	68ba      	ldr	r2, [r7, #8]
 8016bd6:	683b      	ldr	r3, [r7, #0]
 8016bd8:	3304      	adds	r3, #4
 8016bda:	681b      	ldr	r3, [r3, #0]
 8016bdc:	429a      	cmp	r2, r3
 8016bde:	bf0c      	ite	eq
 8016be0:	2301      	moveq	r3, #1
 8016be2:	2300      	movne	r3, #0
 8016be4:	b2db      	uxtb	r3, r3
 8016be6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8016be8:	693b      	ldr	r3, [r7, #16]
 8016bea:	f103 0208 	add.w	r2, r3, #8
 8016bee:	7dfb      	ldrb	r3, [r7, #23]
 8016bf0:	2b00      	cmp	r3, #0
 8016bf2:	d001      	beq.n	8016bf8 <etharp_input+0x98>
 8016bf4:	2301      	movs	r3, #1
 8016bf6:	e000      	b.n	8016bfa <etharp_input+0x9a>
 8016bf8:	2302      	movs	r3, #2
 8016bfa:	f107 010c 	add.w	r1, r7, #12
 8016bfe:	6838      	ldr	r0, [r7, #0]
 8016c00:	f7ff fed8 	bl	80169b4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8016c04:	693b      	ldr	r3, [r7, #16]
 8016c06:	88db      	ldrh	r3, [r3, #6]
 8016c08:	b29b      	uxth	r3, r3
 8016c0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016c0e:	d003      	beq.n	8016c18 <etharp_input+0xb8>
 8016c10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016c14:	d01e      	beq.n	8016c54 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8016c16:	e020      	b.n	8016c5a <etharp_input+0xfa>
      if (for_us) {
 8016c18:	7dfb      	ldrb	r3, [r7, #23]
 8016c1a:	2b00      	cmp	r3, #0
 8016c1c:	d01c      	beq.n	8016c58 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8016c1e:	683b      	ldr	r3, [r7, #0]
 8016c20:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8016c24:	693b      	ldr	r3, [r7, #16]
 8016c26:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8016c2a:	683b      	ldr	r3, [r7, #0]
 8016c2c:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8016c30:	683b      	ldr	r3, [r7, #0]
 8016c32:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8016c34:	693a      	ldr	r2, [r7, #16]
 8016c36:	3208      	adds	r2, #8
        etharp_raw(netif,
 8016c38:	2102      	movs	r1, #2
 8016c3a:	9103      	str	r1, [sp, #12]
 8016c3c:	f107 010c 	add.w	r1, r7, #12
 8016c40:	9102      	str	r1, [sp, #8]
 8016c42:	9201      	str	r2, [sp, #4]
 8016c44:	9300      	str	r3, [sp, #0]
 8016c46:	462b      	mov	r3, r5
 8016c48:	4622      	mov	r2, r4
 8016c4a:	4601      	mov	r1, r0
 8016c4c:	6838      	ldr	r0, [r7, #0]
 8016c4e:	f000 faeb 	bl	8017228 <etharp_raw>
      break;
 8016c52:	e001      	b.n	8016c58 <etharp_input+0xf8>
      break;
 8016c54:	bf00      	nop
 8016c56:	e000      	b.n	8016c5a <etharp_input+0xfa>
      break;
 8016c58:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8016c5a:	6878      	ldr	r0, [r7, #4]
 8016c5c:	f7f9 fdac 	bl	80107b8 <pbuf_free>
}
 8016c60:	3718      	adds	r7, #24
 8016c62:	46bd      	mov	sp, r7
 8016c64:	bdb0      	pop	{r4, r5, r7, pc}
 8016c66:	bf00      	nop
 8016c68:	0801dff4 	.word	0x0801dff4
 8016c6c:	0801e144 	.word	0x0801e144
 8016c70:	0801e06c 	.word	0x0801e06c

08016c74 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8016c74:	b580      	push	{r7, lr}
 8016c76:	b086      	sub	sp, #24
 8016c78:	af02      	add	r7, sp, #8
 8016c7a:	60f8      	str	r0, [r7, #12]
 8016c7c:	60b9      	str	r1, [r7, #8]
 8016c7e:	4613      	mov	r3, r2
 8016c80:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8016c82:	79fa      	ldrb	r2, [r7, #7]
 8016c84:	4944      	ldr	r1, [pc, #272]	; (8016d98 <etharp_output_to_arp_index+0x124>)
 8016c86:	4613      	mov	r3, r2
 8016c88:	005b      	lsls	r3, r3, #1
 8016c8a:	4413      	add	r3, r2
 8016c8c:	00db      	lsls	r3, r3, #3
 8016c8e:	440b      	add	r3, r1
 8016c90:	3314      	adds	r3, #20
 8016c92:	781b      	ldrb	r3, [r3, #0]
 8016c94:	2b01      	cmp	r3, #1
 8016c96:	d806      	bhi.n	8016ca6 <etharp_output_to_arp_index+0x32>
 8016c98:	4b40      	ldr	r3, [pc, #256]	; (8016d9c <etharp_output_to_arp_index+0x128>)
 8016c9a:	f240 22ee 	movw	r2, #750	; 0x2ee
 8016c9e:	4940      	ldr	r1, [pc, #256]	; (8016da0 <etharp_output_to_arp_index+0x12c>)
 8016ca0:	4840      	ldr	r0, [pc, #256]	; (8016da4 <etharp_output_to_arp_index+0x130>)
 8016ca2:	f002 fc4b 	bl	801953c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8016ca6:	79fa      	ldrb	r2, [r7, #7]
 8016ca8:	493b      	ldr	r1, [pc, #236]	; (8016d98 <etharp_output_to_arp_index+0x124>)
 8016caa:	4613      	mov	r3, r2
 8016cac:	005b      	lsls	r3, r3, #1
 8016cae:	4413      	add	r3, r2
 8016cb0:	00db      	lsls	r3, r3, #3
 8016cb2:	440b      	add	r3, r1
 8016cb4:	3314      	adds	r3, #20
 8016cb6:	781b      	ldrb	r3, [r3, #0]
 8016cb8:	2b02      	cmp	r3, #2
 8016cba:	d153      	bne.n	8016d64 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8016cbc:	79fa      	ldrb	r2, [r7, #7]
 8016cbe:	4936      	ldr	r1, [pc, #216]	; (8016d98 <etharp_output_to_arp_index+0x124>)
 8016cc0:	4613      	mov	r3, r2
 8016cc2:	005b      	lsls	r3, r3, #1
 8016cc4:	4413      	add	r3, r2
 8016cc6:	00db      	lsls	r3, r3, #3
 8016cc8:	440b      	add	r3, r1
 8016cca:	3312      	adds	r3, #18
 8016ccc:	881b      	ldrh	r3, [r3, #0]
 8016cce:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8016cd2:	d919      	bls.n	8016d08 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8016cd4:	79fa      	ldrb	r2, [r7, #7]
 8016cd6:	4613      	mov	r3, r2
 8016cd8:	005b      	lsls	r3, r3, #1
 8016cda:	4413      	add	r3, r2
 8016cdc:	00db      	lsls	r3, r3, #3
 8016cde:	4a2e      	ldr	r2, [pc, #184]	; (8016d98 <etharp_output_to_arp_index+0x124>)
 8016ce0:	4413      	add	r3, r2
 8016ce2:	3304      	adds	r3, #4
 8016ce4:	4619      	mov	r1, r3
 8016ce6:	68f8      	ldr	r0, [r7, #12]
 8016ce8:	f000 fb4c 	bl	8017384 <etharp_request>
 8016cec:	4603      	mov	r3, r0
 8016cee:	2b00      	cmp	r3, #0
 8016cf0:	d138      	bne.n	8016d64 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016cf2:	79fa      	ldrb	r2, [r7, #7]
 8016cf4:	4928      	ldr	r1, [pc, #160]	; (8016d98 <etharp_output_to_arp_index+0x124>)
 8016cf6:	4613      	mov	r3, r2
 8016cf8:	005b      	lsls	r3, r3, #1
 8016cfa:	4413      	add	r3, r2
 8016cfc:	00db      	lsls	r3, r3, #3
 8016cfe:	440b      	add	r3, r1
 8016d00:	3314      	adds	r3, #20
 8016d02:	2203      	movs	r2, #3
 8016d04:	701a      	strb	r2, [r3, #0]
 8016d06:	e02d      	b.n	8016d64 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8016d08:	79fa      	ldrb	r2, [r7, #7]
 8016d0a:	4923      	ldr	r1, [pc, #140]	; (8016d98 <etharp_output_to_arp_index+0x124>)
 8016d0c:	4613      	mov	r3, r2
 8016d0e:	005b      	lsls	r3, r3, #1
 8016d10:	4413      	add	r3, r2
 8016d12:	00db      	lsls	r3, r3, #3
 8016d14:	440b      	add	r3, r1
 8016d16:	3312      	adds	r3, #18
 8016d18:	881b      	ldrh	r3, [r3, #0]
 8016d1a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8016d1e:	d321      	bcc.n	8016d64 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8016d20:	79fa      	ldrb	r2, [r7, #7]
 8016d22:	4613      	mov	r3, r2
 8016d24:	005b      	lsls	r3, r3, #1
 8016d26:	4413      	add	r3, r2
 8016d28:	00db      	lsls	r3, r3, #3
 8016d2a:	4a1b      	ldr	r2, [pc, #108]	; (8016d98 <etharp_output_to_arp_index+0x124>)
 8016d2c:	4413      	add	r3, r2
 8016d2e:	1d19      	adds	r1, r3, #4
 8016d30:	79fa      	ldrb	r2, [r7, #7]
 8016d32:	4613      	mov	r3, r2
 8016d34:	005b      	lsls	r3, r3, #1
 8016d36:	4413      	add	r3, r2
 8016d38:	00db      	lsls	r3, r3, #3
 8016d3a:	3308      	adds	r3, #8
 8016d3c:	4a16      	ldr	r2, [pc, #88]	; (8016d98 <etharp_output_to_arp_index+0x124>)
 8016d3e:	4413      	add	r3, r2
 8016d40:	3304      	adds	r3, #4
 8016d42:	461a      	mov	r2, r3
 8016d44:	68f8      	ldr	r0, [r7, #12]
 8016d46:	f000 fafb 	bl	8017340 <etharp_request_dst>
 8016d4a:	4603      	mov	r3, r0
 8016d4c:	2b00      	cmp	r3, #0
 8016d4e:	d109      	bne.n	8016d64 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016d50:	79fa      	ldrb	r2, [r7, #7]
 8016d52:	4911      	ldr	r1, [pc, #68]	; (8016d98 <etharp_output_to_arp_index+0x124>)
 8016d54:	4613      	mov	r3, r2
 8016d56:	005b      	lsls	r3, r3, #1
 8016d58:	4413      	add	r3, r2
 8016d5a:	00db      	lsls	r3, r3, #3
 8016d5c:	440b      	add	r3, r1
 8016d5e:	3314      	adds	r3, #20
 8016d60:	2203      	movs	r2, #3
 8016d62:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8016d64:	68fb      	ldr	r3, [r7, #12]
 8016d66:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8016d6a:	79fa      	ldrb	r2, [r7, #7]
 8016d6c:	4613      	mov	r3, r2
 8016d6e:	005b      	lsls	r3, r3, #1
 8016d70:	4413      	add	r3, r2
 8016d72:	00db      	lsls	r3, r3, #3
 8016d74:	3308      	adds	r3, #8
 8016d76:	4a08      	ldr	r2, [pc, #32]	; (8016d98 <etharp_output_to_arp_index+0x124>)
 8016d78:	4413      	add	r3, r2
 8016d7a:	3304      	adds	r3, #4
 8016d7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016d80:	9200      	str	r2, [sp, #0]
 8016d82:	460a      	mov	r2, r1
 8016d84:	68b9      	ldr	r1, [r7, #8]
 8016d86:	68f8      	ldr	r0, [r7, #12]
 8016d88:	f001 fe66 	bl	8018a58 <ethernet_output>
 8016d8c:	4603      	mov	r3, r0
}
 8016d8e:	4618      	mov	r0, r3
 8016d90:	3710      	adds	r7, #16
 8016d92:	46bd      	mov	sp, r7
 8016d94:	bd80      	pop	{r7, pc}
 8016d96:	bf00      	nop
 8016d98:	20008128 	.word	0x20008128
 8016d9c:	0801dff4 	.word	0x0801dff4
 8016da0:	0801e164 	.word	0x0801e164
 8016da4:	0801e06c 	.word	0x0801e06c

08016da8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8016da8:	b580      	push	{r7, lr}
 8016daa:	b08a      	sub	sp, #40	; 0x28
 8016dac:	af02      	add	r7, sp, #8
 8016dae:	60f8      	str	r0, [r7, #12]
 8016db0:	60b9      	str	r1, [r7, #8]
 8016db2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8016db4:	687b      	ldr	r3, [r7, #4]
 8016db6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016db8:	68fb      	ldr	r3, [r7, #12]
 8016dba:	2b00      	cmp	r3, #0
 8016dbc:	d106      	bne.n	8016dcc <etharp_output+0x24>
 8016dbe:	4b73      	ldr	r3, [pc, #460]	; (8016f8c <etharp_output+0x1e4>)
 8016dc0:	f240 321e 	movw	r2, #798	; 0x31e
 8016dc4:	4972      	ldr	r1, [pc, #456]	; (8016f90 <etharp_output+0x1e8>)
 8016dc6:	4873      	ldr	r0, [pc, #460]	; (8016f94 <etharp_output+0x1ec>)
 8016dc8:	f002 fbb8 	bl	801953c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8016dcc:	68bb      	ldr	r3, [r7, #8]
 8016dce:	2b00      	cmp	r3, #0
 8016dd0:	d106      	bne.n	8016de0 <etharp_output+0x38>
 8016dd2:	4b6e      	ldr	r3, [pc, #440]	; (8016f8c <etharp_output+0x1e4>)
 8016dd4:	f240 321f 	movw	r2, #799	; 0x31f
 8016dd8:	496f      	ldr	r1, [pc, #444]	; (8016f98 <etharp_output+0x1f0>)
 8016dda:	486e      	ldr	r0, [pc, #440]	; (8016f94 <etharp_output+0x1ec>)
 8016ddc:	f002 fbae 	bl	801953c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8016de0:	687b      	ldr	r3, [r7, #4]
 8016de2:	2b00      	cmp	r3, #0
 8016de4:	d106      	bne.n	8016df4 <etharp_output+0x4c>
 8016de6:	4b69      	ldr	r3, [pc, #420]	; (8016f8c <etharp_output+0x1e4>)
 8016de8:	f44f 7248 	mov.w	r2, #800	; 0x320
 8016dec:	496b      	ldr	r1, [pc, #428]	; (8016f9c <etharp_output+0x1f4>)
 8016dee:	4869      	ldr	r0, [pc, #420]	; (8016f94 <etharp_output+0x1ec>)
 8016df0:	f002 fba4 	bl	801953c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8016df4:	687b      	ldr	r3, [r7, #4]
 8016df6:	681b      	ldr	r3, [r3, #0]
 8016df8:	68f9      	ldr	r1, [r7, #12]
 8016dfa:	4618      	mov	r0, r3
 8016dfc:	f000 ff1e 	bl	8017c3c <ip4_addr_isbroadcast_u32>
 8016e00:	4603      	mov	r3, r0
 8016e02:	2b00      	cmp	r3, #0
 8016e04:	d002      	beq.n	8016e0c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8016e06:	4b66      	ldr	r3, [pc, #408]	; (8016fa0 <etharp_output+0x1f8>)
 8016e08:	61fb      	str	r3, [r7, #28]
 8016e0a:	e0af      	b.n	8016f6c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8016e0c:	687b      	ldr	r3, [r7, #4]
 8016e0e:	681b      	ldr	r3, [r3, #0]
 8016e10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016e14:	2be0      	cmp	r3, #224	; 0xe0
 8016e16:	d118      	bne.n	8016e4a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8016e18:	2301      	movs	r3, #1
 8016e1a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8016e1c:	2300      	movs	r3, #0
 8016e1e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8016e20:	235e      	movs	r3, #94	; 0x5e
 8016e22:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8016e24:	687b      	ldr	r3, [r7, #4]
 8016e26:	3301      	adds	r3, #1
 8016e28:	781b      	ldrb	r3, [r3, #0]
 8016e2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016e2e:	b2db      	uxtb	r3, r3
 8016e30:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8016e32:	687b      	ldr	r3, [r7, #4]
 8016e34:	3302      	adds	r3, #2
 8016e36:	781b      	ldrb	r3, [r3, #0]
 8016e38:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8016e3a:	687b      	ldr	r3, [r7, #4]
 8016e3c:	3303      	adds	r3, #3
 8016e3e:	781b      	ldrb	r3, [r3, #0]
 8016e40:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8016e42:	f107 0310 	add.w	r3, r7, #16
 8016e46:	61fb      	str	r3, [r7, #28]
 8016e48:	e090      	b.n	8016f6c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016e4a:	687b      	ldr	r3, [r7, #4]
 8016e4c:	681a      	ldr	r2, [r3, #0]
 8016e4e:	68fb      	ldr	r3, [r7, #12]
 8016e50:	3304      	adds	r3, #4
 8016e52:	681b      	ldr	r3, [r3, #0]
 8016e54:	405a      	eors	r2, r3
 8016e56:	68fb      	ldr	r3, [r7, #12]
 8016e58:	3308      	adds	r3, #8
 8016e5a:	681b      	ldr	r3, [r3, #0]
 8016e5c:	4013      	ands	r3, r2
 8016e5e:	2b00      	cmp	r3, #0
 8016e60:	d012      	beq.n	8016e88 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8016e62:	687b      	ldr	r3, [r7, #4]
 8016e64:	681b      	ldr	r3, [r3, #0]
 8016e66:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016e68:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8016e6c:	4293      	cmp	r3, r2
 8016e6e:	d00b      	beq.n	8016e88 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8016e70:	68fb      	ldr	r3, [r7, #12]
 8016e72:	330c      	adds	r3, #12
 8016e74:	681b      	ldr	r3, [r3, #0]
 8016e76:	2b00      	cmp	r3, #0
 8016e78:	d003      	beq.n	8016e82 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8016e7a:	68fb      	ldr	r3, [r7, #12]
 8016e7c:	330c      	adds	r3, #12
 8016e7e:	61bb      	str	r3, [r7, #24]
 8016e80:	e002      	b.n	8016e88 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8016e82:	f06f 0303 	mvn.w	r3, #3
 8016e86:	e07d      	b.n	8016f84 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016e88:	4b46      	ldr	r3, [pc, #280]	; (8016fa4 <etharp_output+0x1fc>)
 8016e8a:	781b      	ldrb	r3, [r3, #0]
 8016e8c:	4619      	mov	r1, r3
 8016e8e:	4a46      	ldr	r2, [pc, #280]	; (8016fa8 <etharp_output+0x200>)
 8016e90:	460b      	mov	r3, r1
 8016e92:	005b      	lsls	r3, r3, #1
 8016e94:	440b      	add	r3, r1
 8016e96:	00db      	lsls	r3, r3, #3
 8016e98:	4413      	add	r3, r2
 8016e9a:	3314      	adds	r3, #20
 8016e9c:	781b      	ldrb	r3, [r3, #0]
 8016e9e:	2b01      	cmp	r3, #1
 8016ea0:	d925      	bls.n	8016eee <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016ea2:	4b40      	ldr	r3, [pc, #256]	; (8016fa4 <etharp_output+0x1fc>)
 8016ea4:	781b      	ldrb	r3, [r3, #0]
 8016ea6:	4619      	mov	r1, r3
 8016ea8:	4a3f      	ldr	r2, [pc, #252]	; (8016fa8 <etharp_output+0x200>)
 8016eaa:	460b      	mov	r3, r1
 8016eac:	005b      	lsls	r3, r3, #1
 8016eae:	440b      	add	r3, r1
 8016eb0:	00db      	lsls	r3, r3, #3
 8016eb2:	4413      	add	r3, r2
 8016eb4:	3308      	adds	r3, #8
 8016eb6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016eb8:	68fa      	ldr	r2, [r7, #12]
 8016eba:	429a      	cmp	r2, r3
 8016ebc:	d117      	bne.n	8016eee <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8016ebe:	69bb      	ldr	r3, [r7, #24]
 8016ec0:	681a      	ldr	r2, [r3, #0]
 8016ec2:	4b38      	ldr	r3, [pc, #224]	; (8016fa4 <etharp_output+0x1fc>)
 8016ec4:	781b      	ldrb	r3, [r3, #0]
 8016ec6:	4618      	mov	r0, r3
 8016ec8:	4937      	ldr	r1, [pc, #220]	; (8016fa8 <etharp_output+0x200>)
 8016eca:	4603      	mov	r3, r0
 8016ecc:	005b      	lsls	r3, r3, #1
 8016ece:	4403      	add	r3, r0
 8016ed0:	00db      	lsls	r3, r3, #3
 8016ed2:	440b      	add	r3, r1
 8016ed4:	3304      	adds	r3, #4
 8016ed6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016ed8:	429a      	cmp	r2, r3
 8016eda:	d108      	bne.n	8016eee <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8016edc:	4b31      	ldr	r3, [pc, #196]	; (8016fa4 <etharp_output+0x1fc>)
 8016ede:	781b      	ldrb	r3, [r3, #0]
 8016ee0:	461a      	mov	r2, r3
 8016ee2:	68b9      	ldr	r1, [r7, #8]
 8016ee4:	68f8      	ldr	r0, [r7, #12]
 8016ee6:	f7ff fec5 	bl	8016c74 <etharp_output_to_arp_index>
 8016eea:	4603      	mov	r3, r0
 8016eec:	e04a      	b.n	8016f84 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016eee:	2300      	movs	r3, #0
 8016ef0:	75fb      	strb	r3, [r7, #23]
 8016ef2:	e031      	b.n	8016f58 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016ef4:	7dfa      	ldrb	r2, [r7, #23]
 8016ef6:	492c      	ldr	r1, [pc, #176]	; (8016fa8 <etharp_output+0x200>)
 8016ef8:	4613      	mov	r3, r2
 8016efa:	005b      	lsls	r3, r3, #1
 8016efc:	4413      	add	r3, r2
 8016efe:	00db      	lsls	r3, r3, #3
 8016f00:	440b      	add	r3, r1
 8016f02:	3314      	adds	r3, #20
 8016f04:	781b      	ldrb	r3, [r3, #0]
 8016f06:	2b01      	cmp	r3, #1
 8016f08:	d923      	bls.n	8016f52 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8016f0a:	7dfa      	ldrb	r2, [r7, #23]
 8016f0c:	4926      	ldr	r1, [pc, #152]	; (8016fa8 <etharp_output+0x200>)
 8016f0e:	4613      	mov	r3, r2
 8016f10:	005b      	lsls	r3, r3, #1
 8016f12:	4413      	add	r3, r2
 8016f14:	00db      	lsls	r3, r3, #3
 8016f16:	440b      	add	r3, r1
 8016f18:	3308      	adds	r3, #8
 8016f1a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016f1c:	68fa      	ldr	r2, [r7, #12]
 8016f1e:	429a      	cmp	r2, r3
 8016f20:	d117      	bne.n	8016f52 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8016f22:	69bb      	ldr	r3, [r7, #24]
 8016f24:	6819      	ldr	r1, [r3, #0]
 8016f26:	7dfa      	ldrb	r2, [r7, #23]
 8016f28:	481f      	ldr	r0, [pc, #124]	; (8016fa8 <etharp_output+0x200>)
 8016f2a:	4613      	mov	r3, r2
 8016f2c:	005b      	lsls	r3, r3, #1
 8016f2e:	4413      	add	r3, r2
 8016f30:	00db      	lsls	r3, r3, #3
 8016f32:	4403      	add	r3, r0
 8016f34:	3304      	adds	r3, #4
 8016f36:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8016f38:	4299      	cmp	r1, r3
 8016f3a:	d10a      	bne.n	8016f52 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8016f3c:	4a19      	ldr	r2, [pc, #100]	; (8016fa4 <etharp_output+0x1fc>)
 8016f3e:	7dfb      	ldrb	r3, [r7, #23]
 8016f40:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8016f42:	7dfb      	ldrb	r3, [r7, #23]
 8016f44:	461a      	mov	r2, r3
 8016f46:	68b9      	ldr	r1, [r7, #8]
 8016f48:	68f8      	ldr	r0, [r7, #12]
 8016f4a:	f7ff fe93 	bl	8016c74 <etharp_output_to_arp_index>
 8016f4e:	4603      	mov	r3, r0
 8016f50:	e018      	b.n	8016f84 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016f52:	7dfb      	ldrb	r3, [r7, #23]
 8016f54:	3301      	adds	r3, #1
 8016f56:	75fb      	strb	r3, [r7, #23]
 8016f58:	7dfb      	ldrb	r3, [r7, #23]
 8016f5a:	2b09      	cmp	r3, #9
 8016f5c:	d9ca      	bls.n	8016ef4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8016f5e:	68ba      	ldr	r2, [r7, #8]
 8016f60:	69b9      	ldr	r1, [r7, #24]
 8016f62:	68f8      	ldr	r0, [r7, #12]
 8016f64:	f000 f822 	bl	8016fac <etharp_query>
 8016f68:	4603      	mov	r3, r0
 8016f6a:	e00b      	b.n	8016f84 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8016f6c:	68fb      	ldr	r3, [r7, #12]
 8016f6e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8016f72:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016f76:	9300      	str	r3, [sp, #0]
 8016f78:	69fb      	ldr	r3, [r7, #28]
 8016f7a:	68b9      	ldr	r1, [r7, #8]
 8016f7c:	68f8      	ldr	r0, [r7, #12]
 8016f7e:	f001 fd6b 	bl	8018a58 <ethernet_output>
 8016f82:	4603      	mov	r3, r0
}
 8016f84:	4618      	mov	r0, r3
 8016f86:	3720      	adds	r7, #32
 8016f88:	46bd      	mov	sp, r7
 8016f8a:	bd80      	pop	{r7, pc}
 8016f8c:	0801dff4 	.word	0x0801dff4
 8016f90:	0801e144 	.word	0x0801e144
 8016f94:	0801e06c 	.word	0x0801e06c
 8016f98:	0801e194 	.word	0x0801e194
 8016f9c:	0801e134 	.word	0x0801e134
 8016fa0:	0801e7e8 	.word	0x0801e7e8
 8016fa4:	20008218 	.word	0x20008218
 8016fa8:	20008128 	.word	0x20008128

08016fac <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8016fac:	b580      	push	{r7, lr}
 8016fae:	b08c      	sub	sp, #48	; 0x30
 8016fb0:	af02      	add	r7, sp, #8
 8016fb2:	60f8      	str	r0, [r7, #12]
 8016fb4:	60b9      	str	r1, [r7, #8]
 8016fb6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8016fb8:	68fb      	ldr	r3, [r7, #12]
 8016fba:	3326      	adds	r3, #38	; 0x26
 8016fbc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8016fbe:	23ff      	movs	r3, #255	; 0xff
 8016fc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8016fc4:	2300      	movs	r3, #0
 8016fc6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016fc8:	68bb      	ldr	r3, [r7, #8]
 8016fca:	681b      	ldr	r3, [r3, #0]
 8016fcc:	68f9      	ldr	r1, [r7, #12]
 8016fce:	4618      	mov	r0, r3
 8016fd0:	f000 fe34 	bl	8017c3c <ip4_addr_isbroadcast_u32>
 8016fd4:	4603      	mov	r3, r0
 8016fd6:	2b00      	cmp	r3, #0
 8016fd8:	d10c      	bne.n	8016ff4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016fda:	68bb      	ldr	r3, [r7, #8]
 8016fdc:	681b      	ldr	r3, [r3, #0]
 8016fde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016fe2:	2be0      	cmp	r3, #224	; 0xe0
 8016fe4:	d006      	beq.n	8016ff4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016fe6:	68bb      	ldr	r3, [r7, #8]
 8016fe8:	2b00      	cmp	r3, #0
 8016fea:	d003      	beq.n	8016ff4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8016fec:	68bb      	ldr	r3, [r7, #8]
 8016fee:	681b      	ldr	r3, [r3, #0]
 8016ff0:	2b00      	cmp	r3, #0
 8016ff2:	d102      	bne.n	8016ffa <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016ff4:	f06f 030f 	mvn.w	r3, #15
 8016ff8:	e101      	b.n	80171fe <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8016ffa:	68fa      	ldr	r2, [r7, #12]
 8016ffc:	2101      	movs	r1, #1
 8016ffe:	68b8      	ldr	r0, [r7, #8]
 8017000:	f7ff fb60 	bl	80166c4 <etharp_find_entry>
 8017004:	4603      	mov	r3, r0
 8017006:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8017008:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801700c:	2b00      	cmp	r3, #0
 801700e:	da02      	bge.n	8017016 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8017010:	8a7b      	ldrh	r3, [r7, #18]
 8017012:	b25b      	sxtb	r3, r3
 8017014:	e0f3      	b.n	80171fe <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8017016:	8a7b      	ldrh	r3, [r7, #18]
 8017018:	2b7e      	cmp	r3, #126	; 0x7e
 801701a:	d906      	bls.n	801702a <etharp_query+0x7e>
 801701c:	4b7a      	ldr	r3, [pc, #488]	; (8017208 <etharp_query+0x25c>)
 801701e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8017022:	497a      	ldr	r1, [pc, #488]	; (801720c <etharp_query+0x260>)
 8017024:	487a      	ldr	r0, [pc, #488]	; (8017210 <etharp_query+0x264>)
 8017026:	f002 fa89 	bl	801953c <iprintf>
  i = (netif_addr_idx_t)i_err;
 801702a:	8a7b      	ldrh	r3, [r7, #18]
 801702c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801702e:	7c7a      	ldrb	r2, [r7, #17]
 8017030:	4978      	ldr	r1, [pc, #480]	; (8017214 <etharp_query+0x268>)
 8017032:	4613      	mov	r3, r2
 8017034:	005b      	lsls	r3, r3, #1
 8017036:	4413      	add	r3, r2
 8017038:	00db      	lsls	r3, r3, #3
 801703a:	440b      	add	r3, r1
 801703c:	3314      	adds	r3, #20
 801703e:	781b      	ldrb	r3, [r3, #0]
 8017040:	2b00      	cmp	r3, #0
 8017042:	d115      	bne.n	8017070 <etharp_query+0xc4>
    is_new_entry = 1;
 8017044:	2301      	movs	r3, #1
 8017046:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8017048:	7c7a      	ldrb	r2, [r7, #17]
 801704a:	4972      	ldr	r1, [pc, #456]	; (8017214 <etharp_query+0x268>)
 801704c:	4613      	mov	r3, r2
 801704e:	005b      	lsls	r3, r3, #1
 8017050:	4413      	add	r3, r2
 8017052:	00db      	lsls	r3, r3, #3
 8017054:	440b      	add	r3, r1
 8017056:	3314      	adds	r3, #20
 8017058:	2201      	movs	r2, #1
 801705a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801705c:	7c7a      	ldrb	r2, [r7, #17]
 801705e:	496d      	ldr	r1, [pc, #436]	; (8017214 <etharp_query+0x268>)
 8017060:	4613      	mov	r3, r2
 8017062:	005b      	lsls	r3, r3, #1
 8017064:	4413      	add	r3, r2
 8017066:	00db      	lsls	r3, r3, #3
 8017068:	440b      	add	r3, r1
 801706a:	3308      	adds	r3, #8
 801706c:	68fa      	ldr	r2, [r7, #12]
 801706e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8017070:	7c7a      	ldrb	r2, [r7, #17]
 8017072:	4968      	ldr	r1, [pc, #416]	; (8017214 <etharp_query+0x268>)
 8017074:	4613      	mov	r3, r2
 8017076:	005b      	lsls	r3, r3, #1
 8017078:	4413      	add	r3, r2
 801707a:	00db      	lsls	r3, r3, #3
 801707c:	440b      	add	r3, r1
 801707e:	3314      	adds	r3, #20
 8017080:	781b      	ldrb	r3, [r3, #0]
 8017082:	2b01      	cmp	r3, #1
 8017084:	d011      	beq.n	80170aa <etharp_query+0xfe>
 8017086:	7c7a      	ldrb	r2, [r7, #17]
 8017088:	4962      	ldr	r1, [pc, #392]	; (8017214 <etharp_query+0x268>)
 801708a:	4613      	mov	r3, r2
 801708c:	005b      	lsls	r3, r3, #1
 801708e:	4413      	add	r3, r2
 8017090:	00db      	lsls	r3, r3, #3
 8017092:	440b      	add	r3, r1
 8017094:	3314      	adds	r3, #20
 8017096:	781b      	ldrb	r3, [r3, #0]
 8017098:	2b01      	cmp	r3, #1
 801709a:	d806      	bhi.n	80170aa <etharp_query+0xfe>
 801709c:	4b5a      	ldr	r3, [pc, #360]	; (8017208 <etharp_query+0x25c>)
 801709e:	f240 32cd 	movw	r2, #973	; 0x3cd
 80170a2:	495d      	ldr	r1, [pc, #372]	; (8017218 <etharp_query+0x26c>)
 80170a4:	485a      	ldr	r0, [pc, #360]	; (8017210 <etharp_query+0x264>)
 80170a6:	f002 fa49 	bl	801953c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80170aa:	6a3b      	ldr	r3, [r7, #32]
 80170ac:	2b00      	cmp	r3, #0
 80170ae:	d102      	bne.n	80170b6 <etharp_query+0x10a>
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	2b00      	cmp	r3, #0
 80170b4:	d10c      	bne.n	80170d0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80170b6:	68b9      	ldr	r1, [r7, #8]
 80170b8:	68f8      	ldr	r0, [r7, #12]
 80170ba:	f000 f963 	bl	8017384 <etharp_request>
 80170be:	4603      	mov	r3, r0
 80170c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80170c4:	687b      	ldr	r3, [r7, #4]
 80170c6:	2b00      	cmp	r3, #0
 80170c8:	d102      	bne.n	80170d0 <etharp_query+0x124>
      return result;
 80170ca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80170ce:	e096      	b.n	80171fe <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80170d0:	687b      	ldr	r3, [r7, #4]
 80170d2:	2b00      	cmp	r3, #0
 80170d4:	d106      	bne.n	80170e4 <etharp_query+0x138>
 80170d6:	4b4c      	ldr	r3, [pc, #304]	; (8017208 <etharp_query+0x25c>)
 80170d8:	f240 32e1 	movw	r2, #993	; 0x3e1
 80170dc:	494f      	ldr	r1, [pc, #316]	; (801721c <etharp_query+0x270>)
 80170de:	484c      	ldr	r0, [pc, #304]	; (8017210 <etharp_query+0x264>)
 80170e0:	f002 fa2c 	bl	801953c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80170e4:	7c7a      	ldrb	r2, [r7, #17]
 80170e6:	494b      	ldr	r1, [pc, #300]	; (8017214 <etharp_query+0x268>)
 80170e8:	4613      	mov	r3, r2
 80170ea:	005b      	lsls	r3, r3, #1
 80170ec:	4413      	add	r3, r2
 80170ee:	00db      	lsls	r3, r3, #3
 80170f0:	440b      	add	r3, r1
 80170f2:	3314      	adds	r3, #20
 80170f4:	781b      	ldrb	r3, [r3, #0]
 80170f6:	2b01      	cmp	r3, #1
 80170f8:	d917      	bls.n	801712a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80170fa:	4a49      	ldr	r2, [pc, #292]	; (8017220 <etharp_query+0x274>)
 80170fc:	7c7b      	ldrb	r3, [r7, #17]
 80170fe:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8017100:	7c7a      	ldrb	r2, [r7, #17]
 8017102:	4613      	mov	r3, r2
 8017104:	005b      	lsls	r3, r3, #1
 8017106:	4413      	add	r3, r2
 8017108:	00db      	lsls	r3, r3, #3
 801710a:	3308      	adds	r3, #8
 801710c:	4a41      	ldr	r2, [pc, #260]	; (8017214 <etharp_query+0x268>)
 801710e:	4413      	add	r3, r2
 8017110:	3304      	adds	r3, #4
 8017112:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017116:	9200      	str	r2, [sp, #0]
 8017118:	697a      	ldr	r2, [r7, #20]
 801711a:	6879      	ldr	r1, [r7, #4]
 801711c:	68f8      	ldr	r0, [r7, #12]
 801711e:	f001 fc9b 	bl	8018a58 <ethernet_output>
 8017122:	4603      	mov	r3, r0
 8017124:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017128:	e067      	b.n	80171fa <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801712a:	7c7a      	ldrb	r2, [r7, #17]
 801712c:	4939      	ldr	r1, [pc, #228]	; (8017214 <etharp_query+0x268>)
 801712e:	4613      	mov	r3, r2
 8017130:	005b      	lsls	r3, r3, #1
 8017132:	4413      	add	r3, r2
 8017134:	00db      	lsls	r3, r3, #3
 8017136:	440b      	add	r3, r1
 8017138:	3314      	adds	r3, #20
 801713a:	781b      	ldrb	r3, [r3, #0]
 801713c:	2b01      	cmp	r3, #1
 801713e:	d15c      	bne.n	80171fa <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8017140:	2300      	movs	r3, #0
 8017142:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8017144:	687b      	ldr	r3, [r7, #4]
 8017146:	61fb      	str	r3, [r7, #28]
    while (p) {
 8017148:	e01c      	b.n	8017184 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801714a:	69fb      	ldr	r3, [r7, #28]
 801714c:	895a      	ldrh	r2, [r3, #10]
 801714e:	69fb      	ldr	r3, [r7, #28]
 8017150:	891b      	ldrh	r3, [r3, #8]
 8017152:	429a      	cmp	r2, r3
 8017154:	d10a      	bne.n	801716c <etharp_query+0x1c0>
 8017156:	69fb      	ldr	r3, [r7, #28]
 8017158:	681b      	ldr	r3, [r3, #0]
 801715a:	2b00      	cmp	r3, #0
 801715c:	d006      	beq.n	801716c <etharp_query+0x1c0>
 801715e:	4b2a      	ldr	r3, [pc, #168]	; (8017208 <etharp_query+0x25c>)
 8017160:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8017164:	492f      	ldr	r1, [pc, #188]	; (8017224 <etharp_query+0x278>)
 8017166:	482a      	ldr	r0, [pc, #168]	; (8017210 <etharp_query+0x264>)
 8017168:	f002 f9e8 	bl	801953c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801716c:	69fb      	ldr	r3, [r7, #28]
 801716e:	7b1b      	ldrb	r3, [r3, #12]
 8017170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017174:	2b00      	cmp	r3, #0
 8017176:	d002      	beq.n	801717e <etharp_query+0x1d2>
        copy_needed = 1;
 8017178:	2301      	movs	r3, #1
 801717a:	61bb      	str	r3, [r7, #24]
        break;
 801717c:	e005      	b.n	801718a <etharp_query+0x1de>
      }
      p = p->next;
 801717e:	69fb      	ldr	r3, [r7, #28]
 8017180:	681b      	ldr	r3, [r3, #0]
 8017182:	61fb      	str	r3, [r7, #28]
    while (p) {
 8017184:	69fb      	ldr	r3, [r7, #28]
 8017186:	2b00      	cmp	r3, #0
 8017188:	d1df      	bne.n	801714a <etharp_query+0x19e>
    }
    if (copy_needed) {
 801718a:	69bb      	ldr	r3, [r7, #24]
 801718c:	2b00      	cmp	r3, #0
 801718e:	d007      	beq.n	80171a0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8017190:	687a      	ldr	r2, [r7, #4]
 8017192:	f44f 7120 	mov.w	r1, #640	; 0x280
 8017196:	200e      	movs	r0, #14
 8017198:	f7f9 fd6a 	bl	8010c70 <pbuf_clone>
 801719c:	61f8      	str	r0, [r7, #28]
 801719e:	e004      	b.n	80171aa <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80171a0:	687b      	ldr	r3, [r7, #4]
 80171a2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80171a4:	69f8      	ldr	r0, [r7, #28]
 80171a6:	f7f9 fba7 	bl	80108f8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80171aa:	69fb      	ldr	r3, [r7, #28]
 80171ac:	2b00      	cmp	r3, #0
 80171ae:	d021      	beq.n	80171f4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80171b0:	7c7a      	ldrb	r2, [r7, #17]
 80171b2:	4918      	ldr	r1, [pc, #96]	; (8017214 <etharp_query+0x268>)
 80171b4:	4613      	mov	r3, r2
 80171b6:	005b      	lsls	r3, r3, #1
 80171b8:	4413      	add	r3, r2
 80171ba:	00db      	lsls	r3, r3, #3
 80171bc:	440b      	add	r3, r1
 80171be:	681b      	ldr	r3, [r3, #0]
 80171c0:	2b00      	cmp	r3, #0
 80171c2:	d00a      	beq.n	80171da <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80171c4:	7c7a      	ldrb	r2, [r7, #17]
 80171c6:	4913      	ldr	r1, [pc, #76]	; (8017214 <etharp_query+0x268>)
 80171c8:	4613      	mov	r3, r2
 80171ca:	005b      	lsls	r3, r3, #1
 80171cc:	4413      	add	r3, r2
 80171ce:	00db      	lsls	r3, r3, #3
 80171d0:	440b      	add	r3, r1
 80171d2:	681b      	ldr	r3, [r3, #0]
 80171d4:	4618      	mov	r0, r3
 80171d6:	f7f9 faef 	bl	80107b8 <pbuf_free>
      }
      arp_table[i].q = p;
 80171da:	7c7a      	ldrb	r2, [r7, #17]
 80171dc:	490d      	ldr	r1, [pc, #52]	; (8017214 <etharp_query+0x268>)
 80171de:	4613      	mov	r3, r2
 80171e0:	005b      	lsls	r3, r3, #1
 80171e2:	4413      	add	r3, r2
 80171e4:	00db      	lsls	r3, r3, #3
 80171e6:	440b      	add	r3, r1
 80171e8:	69fa      	ldr	r2, [r7, #28]
 80171ea:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80171ec:	2300      	movs	r3, #0
 80171ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80171f2:	e002      	b.n	80171fa <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80171f4:	23ff      	movs	r3, #255	; 0xff
 80171f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80171fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80171fe:	4618      	mov	r0, r3
 8017200:	3728      	adds	r7, #40	; 0x28
 8017202:	46bd      	mov	sp, r7
 8017204:	bd80      	pop	{r7, pc}
 8017206:	bf00      	nop
 8017208:	0801dff4 	.word	0x0801dff4
 801720c:	0801e1a0 	.word	0x0801e1a0
 8017210:	0801e06c 	.word	0x0801e06c
 8017214:	20008128 	.word	0x20008128
 8017218:	0801e1b0 	.word	0x0801e1b0
 801721c:	0801e194 	.word	0x0801e194
 8017220:	20008218 	.word	0x20008218
 8017224:	0801e1d8 	.word	0x0801e1d8

08017228 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8017228:	b580      	push	{r7, lr}
 801722a:	b08a      	sub	sp, #40	; 0x28
 801722c:	af02      	add	r7, sp, #8
 801722e:	60f8      	str	r0, [r7, #12]
 8017230:	60b9      	str	r1, [r7, #8]
 8017232:	607a      	str	r2, [r7, #4]
 8017234:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8017236:	2300      	movs	r3, #0
 8017238:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801723a:	68fb      	ldr	r3, [r7, #12]
 801723c:	2b00      	cmp	r3, #0
 801723e:	d106      	bne.n	801724e <etharp_raw+0x26>
 8017240:	4b3a      	ldr	r3, [pc, #232]	; (801732c <etharp_raw+0x104>)
 8017242:	f240 4257 	movw	r2, #1111	; 0x457
 8017246:	493a      	ldr	r1, [pc, #232]	; (8017330 <etharp_raw+0x108>)
 8017248:	483a      	ldr	r0, [pc, #232]	; (8017334 <etharp_raw+0x10c>)
 801724a:	f002 f977 	bl	801953c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801724e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017252:	211c      	movs	r1, #28
 8017254:	200e      	movs	r0, #14
 8017256:	f7f8 ffcb 	bl	80101f0 <pbuf_alloc>
 801725a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801725c:	69bb      	ldr	r3, [r7, #24]
 801725e:	2b00      	cmp	r3, #0
 8017260:	d102      	bne.n	8017268 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8017262:	f04f 33ff 	mov.w	r3, #4294967295
 8017266:	e05d      	b.n	8017324 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8017268:	69bb      	ldr	r3, [r7, #24]
 801726a:	895b      	ldrh	r3, [r3, #10]
 801726c:	2b1b      	cmp	r3, #27
 801726e:	d806      	bhi.n	801727e <etharp_raw+0x56>
 8017270:	4b2e      	ldr	r3, [pc, #184]	; (801732c <etharp_raw+0x104>)
 8017272:	f240 4262 	movw	r2, #1122	; 0x462
 8017276:	4930      	ldr	r1, [pc, #192]	; (8017338 <etharp_raw+0x110>)
 8017278:	482e      	ldr	r0, [pc, #184]	; (8017334 <etharp_raw+0x10c>)
 801727a:	f002 f95f 	bl	801953c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801727e:	69bb      	ldr	r3, [r7, #24]
 8017280:	685b      	ldr	r3, [r3, #4]
 8017282:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8017284:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8017286:	4618      	mov	r0, r3
 8017288:	f7f7 fea0 	bl	800efcc <lwip_htons>
 801728c:	4603      	mov	r3, r0
 801728e:	461a      	mov	r2, r3
 8017290:	697b      	ldr	r3, [r7, #20]
 8017292:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8017294:	68fb      	ldr	r3, [r7, #12]
 8017296:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801729a:	2b06      	cmp	r3, #6
 801729c:	d006      	beq.n	80172ac <etharp_raw+0x84>
 801729e:	4b23      	ldr	r3, [pc, #140]	; (801732c <etharp_raw+0x104>)
 80172a0:	f240 4269 	movw	r2, #1129	; 0x469
 80172a4:	4925      	ldr	r1, [pc, #148]	; (801733c <etharp_raw+0x114>)
 80172a6:	4823      	ldr	r0, [pc, #140]	; (8017334 <etharp_raw+0x10c>)
 80172a8:	f002 f948 	bl	801953c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80172ac:	697b      	ldr	r3, [r7, #20]
 80172ae:	3308      	adds	r3, #8
 80172b0:	2206      	movs	r2, #6
 80172b2:	6839      	ldr	r1, [r7, #0]
 80172b4:	4618      	mov	r0, r3
 80172b6:	f002 fb0f 	bl	80198d8 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80172ba:	697b      	ldr	r3, [r7, #20]
 80172bc:	3312      	adds	r3, #18
 80172be:	2206      	movs	r2, #6
 80172c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80172c2:	4618      	mov	r0, r3
 80172c4:	f002 fb08 	bl	80198d8 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80172c8:	697b      	ldr	r3, [r7, #20]
 80172ca:	330e      	adds	r3, #14
 80172cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80172ce:	6812      	ldr	r2, [r2, #0]
 80172d0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80172d2:	697b      	ldr	r3, [r7, #20]
 80172d4:	3318      	adds	r3, #24
 80172d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80172d8:	6812      	ldr	r2, [r2, #0]
 80172da:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80172dc:	697b      	ldr	r3, [r7, #20]
 80172de:	2200      	movs	r2, #0
 80172e0:	701a      	strb	r2, [r3, #0]
 80172e2:	2200      	movs	r2, #0
 80172e4:	f042 0201 	orr.w	r2, r2, #1
 80172e8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80172ea:	697b      	ldr	r3, [r7, #20]
 80172ec:	2200      	movs	r2, #0
 80172ee:	f042 0208 	orr.w	r2, r2, #8
 80172f2:	709a      	strb	r2, [r3, #2]
 80172f4:	2200      	movs	r2, #0
 80172f6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80172f8:	697b      	ldr	r3, [r7, #20]
 80172fa:	2206      	movs	r2, #6
 80172fc:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80172fe:	697b      	ldr	r3, [r7, #20]
 8017300:	2204      	movs	r2, #4
 8017302:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8017304:	f640 0306 	movw	r3, #2054	; 0x806
 8017308:	9300      	str	r3, [sp, #0]
 801730a:	687b      	ldr	r3, [r7, #4]
 801730c:	68ba      	ldr	r2, [r7, #8]
 801730e:	69b9      	ldr	r1, [r7, #24]
 8017310:	68f8      	ldr	r0, [r7, #12]
 8017312:	f001 fba1 	bl	8018a58 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8017316:	69b8      	ldr	r0, [r7, #24]
 8017318:	f7f9 fa4e 	bl	80107b8 <pbuf_free>
  p = NULL;
 801731c:	2300      	movs	r3, #0
 801731e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8017320:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8017324:	4618      	mov	r0, r3
 8017326:	3720      	adds	r7, #32
 8017328:	46bd      	mov	sp, r7
 801732a:	bd80      	pop	{r7, pc}
 801732c:	0801dff4 	.word	0x0801dff4
 8017330:	0801e144 	.word	0x0801e144
 8017334:	0801e06c 	.word	0x0801e06c
 8017338:	0801e1f4 	.word	0x0801e1f4
 801733c:	0801e228 	.word	0x0801e228

08017340 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8017340:	b580      	push	{r7, lr}
 8017342:	b088      	sub	sp, #32
 8017344:	af04      	add	r7, sp, #16
 8017346:	60f8      	str	r0, [r7, #12]
 8017348:	60b9      	str	r1, [r7, #8]
 801734a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801734c:	68fb      	ldr	r3, [r7, #12]
 801734e:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8017352:	68fb      	ldr	r3, [r7, #12]
 8017354:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8017358:	68fb      	ldr	r3, [r7, #12]
 801735a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801735c:	2201      	movs	r2, #1
 801735e:	9203      	str	r2, [sp, #12]
 8017360:	68ba      	ldr	r2, [r7, #8]
 8017362:	9202      	str	r2, [sp, #8]
 8017364:	4a06      	ldr	r2, [pc, #24]	; (8017380 <etharp_request_dst+0x40>)
 8017366:	9201      	str	r2, [sp, #4]
 8017368:	9300      	str	r3, [sp, #0]
 801736a:	4603      	mov	r3, r0
 801736c:	687a      	ldr	r2, [r7, #4]
 801736e:	68f8      	ldr	r0, [r7, #12]
 8017370:	f7ff ff5a 	bl	8017228 <etharp_raw>
 8017374:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8017376:	4618      	mov	r0, r3
 8017378:	3710      	adds	r7, #16
 801737a:	46bd      	mov	sp, r7
 801737c:	bd80      	pop	{r7, pc}
 801737e:	bf00      	nop
 8017380:	0801e7f0 	.word	0x0801e7f0

08017384 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8017384:	b580      	push	{r7, lr}
 8017386:	b082      	sub	sp, #8
 8017388:	af00      	add	r7, sp, #0
 801738a:	6078      	str	r0, [r7, #4]
 801738c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801738e:	4a05      	ldr	r2, [pc, #20]	; (80173a4 <etharp_request+0x20>)
 8017390:	6839      	ldr	r1, [r7, #0]
 8017392:	6878      	ldr	r0, [r7, #4]
 8017394:	f7ff ffd4 	bl	8017340 <etharp_request_dst>
 8017398:	4603      	mov	r3, r0
}
 801739a:	4618      	mov	r0, r3
 801739c:	3708      	adds	r7, #8
 801739e:	46bd      	mov	sp, r7
 80173a0:	bd80      	pop	{r7, pc}
 80173a2:	bf00      	nop
 80173a4:	0801e7e8 	.word	0x0801e7e8

080173a8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80173a8:	b580      	push	{r7, lr}
 80173aa:	b08e      	sub	sp, #56	; 0x38
 80173ac:	af04      	add	r7, sp, #16
 80173ae:	6078      	str	r0, [r7, #4]
 80173b0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80173b2:	4b87      	ldr	r3, [pc, #540]	; (80175d0 <icmp_input+0x228>)
 80173b4:	689b      	ldr	r3, [r3, #8]
 80173b6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80173b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173ba:	781b      	ldrb	r3, [r3, #0]
 80173bc:	f003 030f 	and.w	r3, r3, #15
 80173c0:	b2db      	uxtb	r3, r3
 80173c2:	009b      	lsls	r3, r3, #2
 80173c4:	b2db      	uxtb	r3, r3
 80173c6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80173c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80173ca:	2b13      	cmp	r3, #19
 80173cc:	f240 80e8 	bls.w	80175a0 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80173d0:	687b      	ldr	r3, [r7, #4]
 80173d2:	895b      	ldrh	r3, [r3, #10]
 80173d4:	2b03      	cmp	r3, #3
 80173d6:	f240 80e5 	bls.w	80175a4 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80173da:	687b      	ldr	r3, [r7, #4]
 80173dc:	685b      	ldr	r3, [r3, #4]
 80173de:	781b      	ldrb	r3, [r3, #0]
 80173e0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80173e4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80173e8:	2b00      	cmp	r3, #0
 80173ea:	f000 80d2 	beq.w	8017592 <icmp_input+0x1ea>
 80173ee:	2b08      	cmp	r3, #8
 80173f0:	f040 80d2 	bne.w	8017598 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80173f4:	4b77      	ldr	r3, [pc, #476]	; (80175d4 <icmp_input+0x22c>)
 80173f6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80173f8:	4b75      	ldr	r3, [pc, #468]	; (80175d0 <icmp_input+0x228>)
 80173fa:	695b      	ldr	r3, [r3, #20]
 80173fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017400:	2be0      	cmp	r3, #224	; 0xe0
 8017402:	f000 80d6 	beq.w	80175b2 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8017406:	4b72      	ldr	r3, [pc, #456]	; (80175d0 <icmp_input+0x228>)
 8017408:	695b      	ldr	r3, [r3, #20]
 801740a:	4a71      	ldr	r2, [pc, #452]	; (80175d0 <icmp_input+0x228>)
 801740c:	6812      	ldr	r2, [r2, #0]
 801740e:	4611      	mov	r1, r2
 8017410:	4618      	mov	r0, r3
 8017412:	f000 fc13 	bl	8017c3c <ip4_addr_isbroadcast_u32>
 8017416:	4603      	mov	r3, r0
 8017418:	2b00      	cmp	r3, #0
 801741a:	f040 80cc 	bne.w	80175b6 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801741e:	687b      	ldr	r3, [r7, #4]
 8017420:	891b      	ldrh	r3, [r3, #8]
 8017422:	2b07      	cmp	r3, #7
 8017424:	f240 80c0 	bls.w	80175a8 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8017428:	6878      	ldr	r0, [r7, #4]
 801742a:	f7f7 fe6c 	bl	800f106 <inet_chksum_pbuf>
 801742e:	4603      	mov	r3, r0
 8017430:	2b00      	cmp	r3, #0
 8017432:	d003      	beq.n	801743c <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8017434:	6878      	ldr	r0, [r7, #4]
 8017436:	f7f9 f9bf 	bl	80107b8 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 801743a:	e0c5      	b.n	80175c8 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801743c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801743e:	330e      	adds	r3, #14
 8017440:	4619      	mov	r1, r3
 8017442:	6878      	ldr	r0, [r7, #4]
 8017444:	f7f9 f922 	bl	801068c <pbuf_add_header>
 8017448:	4603      	mov	r3, r0
 801744a:	2b00      	cmp	r3, #0
 801744c:	d04b      	beq.n	80174e6 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801744e:	687b      	ldr	r3, [r7, #4]
 8017450:	891a      	ldrh	r2, [r3, #8]
 8017452:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017454:	4413      	add	r3, r2
 8017456:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8017458:	687b      	ldr	r3, [r7, #4]
 801745a:	891b      	ldrh	r3, [r3, #8]
 801745c:	8b7a      	ldrh	r2, [r7, #26]
 801745e:	429a      	cmp	r2, r3
 8017460:	f0c0 80ab 	bcc.w	80175ba <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8017464:	8b7b      	ldrh	r3, [r7, #26]
 8017466:	f44f 7220 	mov.w	r2, #640	; 0x280
 801746a:	4619      	mov	r1, r3
 801746c:	200e      	movs	r0, #14
 801746e:	f7f8 febf 	bl	80101f0 <pbuf_alloc>
 8017472:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8017474:	697b      	ldr	r3, [r7, #20]
 8017476:	2b00      	cmp	r3, #0
 8017478:	f000 80a1 	beq.w	80175be <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801747c:	697b      	ldr	r3, [r7, #20]
 801747e:	895b      	ldrh	r3, [r3, #10]
 8017480:	461a      	mov	r2, r3
 8017482:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017484:	3308      	adds	r3, #8
 8017486:	429a      	cmp	r2, r3
 8017488:	d203      	bcs.n	8017492 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801748a:	6978      	ldr	r0, [r7, #20]
 801748c:	f7f9 f994 	bl	80107b8 <pbuf_free>
          goto icmperr;
 8017490:	e096      	b.n	80175c0 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8017492:	697b      	ldr	r3, [r7, #20]
 8017494:	685b      	ldr	r3, [r3, #4]
 8017496:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8017498:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801749a:	4618      	mov	r0, r3
 801749c:	f002 fa1c 	bl	80198d8 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80174a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80174a2:	4619      	mov	r1, r3
 80174a4:	6978      	ldr	r0, [r7, #20]
 80174a6:	f7f9 f901 	bl	80106ac <pbuf_remove_header>
 80174aa:	4603      	mov	r3, r0
 80174ac:	2b00      	cmp	r3, #0
 80174ae:	d009      	beq.n	80174c4 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80174b0:	4b49      	ldr	r3, [pc, #292]	; (80175d8 <icmp_input+0x230>)
 80174b2:	22b6      	movs	r2, #182	; 0xb6
 80174b4:	4949      	ldr	r1, [pc, #292]	; (80175dc <icmp_input+0x234>)
 80174b6:	484a      	ldr	r0, [pc, #296]	; (80175e0 <icmp_input+0x238>)
 80174b8:	f002 f840 	bl	801953c <iprintf>
          pbuf_free(r);
 80174bc:	6978      	ldr	r0, [r7, #20]
 80174be:	f7f9 f97b 	bl	80107b8 <pbuf_free>
          goto icmperr;
 80174c2:	e07d      	b.n	80175c0 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80174c4:	6879      	ldr	r1, [r7, #4]
 80174c6:	6978      	ldr	r0, [r7, #20]
 80174c8:	f7f9 fa8e 	bl	80109e8 <pbuf_copy>
 80174cc:	4603      	mov	r3, r0
 80174ce:	2b00      	cmp	r3, #0
 80174d0:	d003      	beq.n	80174da <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80174d2:	6978      	ldr	r0, [r7, #20]
 80174d4:	f7f9 f970 	bl	80107b8 <pbuf_free>
          goto icmperr;
 80174d8:	e072      	b.n	80175c0 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 80174da:	6878      	ldr	r0, [r7, #4]
 80174dc:	f7f9 f96c 	bl	80107b8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80174e0:	697b      	ldr	r3, [r7, #20]
 80174e2:	607b      	str	r3, [r7, #4]
 80174e4:	e00f      	b.n	8017506 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80174e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80174e8:	330e      	adds	r3, #14
 80174ea:	4619      	mov	r1, r3
 80174ec:	6878      	ldr	r0, [r7, #4]
 80174ee:	f7f9 f8dd 	bl	80106ac <pbuf_remove_header>
 80174f2:	4603      	mov	r3, r0
 80174f4:	2b00      	cmp	r3, #0
 80174f6:	d006      	beq.n	8017506 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80174f8:	4b37      	ldr	r3, [pc, #220]	; (80175d8 <icmp_input+0x230>)
 80174fa:	22c7      	movs	r2, #199	; 0xc7
 80174fc:	4939      	ldr	r1, [pc, #228]	; (80175e4 <icmp_input+0x23c>)
 80174fe:	4838      	ldr	r0, [pc, #224]	; (80175e0 <icmp_input+0x238>)
 8017500:	f002 f81c 	bl	801953c <iprintf>
          goto icmperr;
 8017504:	e05c      	b.n	80175c0 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8017506:	687b      	ldr	r3, [r7, #4]
 8017508:	685b      	ldr	r3, [r3, #4]
 801750a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801750c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801750e:	4619      	mov	r1, r3
 8017510:	6878      	ldr	r0, [r7, #4]
 8017512:	f7f9 f8bb 	bl	801068c <pbuf_add_header>
 8017516:	4603      	mov	r3, r0
 8017518:	2b00      	cmp	r3, #0
 801751a:	d13c      	bne.n	8017596 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801751c:	687b      	ldr	r3, [r7, #4]
 801751e:	685b      	ldr	r3, [r3, #4]
 8017520:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8017522:	69fb      	ldr	r3, [r7, #28]
 8017524:	681a      	ldr	r2, [r3, #0]
 8017526:	68fb      	ldr	r3, [r7, #12]
 8017528:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801752a:	4b29      	ldr	r3, [pc, #164]	; (80175d0 <icmp_input+0x228>)
 801752c:	691a      	ldr	r2, [r3, #16]
 801752e:	68fb      	ldr	r3, [r7, #12]
 8017530:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8017532:	693b      	ldr	r3, [r7, #16]
 8017534:	2200      	movs	r2, #0
 8017536:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8017538:	693b      	ldr	r3, [r7, #16]
 801753a:	885b      	ldrh	r3, [r3, #2]
 801753c:	b29b      	uxth	r3, r3
 801753e:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8017542:	4293      	cmp	r3, r2
 8017544:	d907      	bls.n	8017556 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8017546:	693b      	ldr	r3, [r7, #16]
 8017548:	885b      	ldrh	r3, [r3, #2]
 801754a:	b29b      	uxth	r3, r3
 801754c:	3309      	adds	r3, #9
 801754e:	b29a      	uxth	r2, r3
 8017550:	693b      	ldr	r3, [r7, #16]
 8017552:	805a      	strh	r2, [r3, #2]
 8017554:	e006      	b.n	8017564 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8017556:	693b      	ldr	r3, [r7, #16]
 8017558:	885b      	ldrh	r3, [r3, #2]
 801755a:	b29b      	uxth	r3, r3
 801755c:	3308      	adds	r3, #8
 801755e:	b29a      	uxth	r2, r3
 8017560:	693b      	ldr	r3, [r7, #16]
 8017562:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8017564:	68fb      	ldr	r3, [r7, #12]
 8017566:	22ff      	movs	r2, #255	; 0xff
 8017568:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801756a:	68fb      	ldr	r3, [r7, #12]
 801756c:	2200      	movs	r2, #0
 801756e:	729a      	strb	r2, [r3, #10]
 8017570:	2200      	movs	r2, #0
 8017572:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8017574:	683b      	ldr	r3, [r7, #0]
 8017576:	9302      	str	r3, [sp, #8]
 8017578:	2301      	movs	r3, #1
 801757a:	9301      	str	r3, [sp, #4]
 801757c:	2300      	movs	r3, #0
 801757e:	9300      	str	r3, [sp, #0]
 8017580:	23ff      	movs	r3, #255	; 0xff
 8017582:	2200      	movs	r2, #0
 8017584:	69f9      	ldr	r1, [r7, #28]
 8017586:	6878      	ldr	r0, [r7, #4]
 8017588:	f000 fa80 	bl	8017a8c <ip4_output_if>
 801758c:	4603      	mov	r3, r0
 801758e:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8017590:	e001      	b.n	8017596 <icmp_input+0x1ee>
      break;
 8017592:	bf00      	nop
 8017594:	e000      	b.n	8017598 <icmp_input+0x1f0>
      break;
 8017596:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8017598:	6878      	ldr	r0, [r7, #4]
 801759a:	f7f9 f90d 	bl	80107b8 <pbuf_free>
  return;
 801759e:	e013      	b.n	80175c8 <icmp_input+0x220>
    goto lenerr;
 80175a0:	bf00      	nop
 80175a2:	e002      	b.n	80175aa <icmp_input+0x202>
    goto lenerr;
 80175a4:	bf00      	nop
 80175a6:	e000      	b.n	80175aa <icmp_input+0x202>
        goto lenerr;
 80175a8:	bf00      	nop
lenerr:
  pbuf_free(p);
 80175aa:	6878      	ldr	r0, [r7, #4]
 80175ac:	f7f9 f904 	bl	80107b8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80175b0:	e00a      	b.n	80175c8 <icmp_input+0x220>
        goto icmperr;
 80175b2:	bf00      	nop
 80175b4:	e004      	b.n	80175c0 <icmp_input+0x218>
        goto icmperr;
 80175b6:	bf00      	nop
 80175b8:	e002      	b.n	80175c0 <icmp_input+0x218>
          goto icmperr;
 80175ba:	bf00      	nop
 80175bc:	e000      	b.n	80175c0 <icmp_input+0x218>
          goto icmperr;
 80175be:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80175c0:	6878      	ldr	r0, [r7, #4]
 80175c2:	f7f9 f8f9 	bl	80107b8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80175c6:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80175c8:	3728      	adds	r7, #40	; 0x28
 80175ca:	46bd      	mov	sp, r7
 80175cc:	bd80      	pop	{r7, pc}
 80175ce:	bf00      	nop
 80175d0:	200051ac 	.word	0x200051ac
 80175d4:	200051c0 	.word	0x200051c0
 80175d8:	0801e26c 	.word	0x0801e26c
 80175dc:	0801e2a4 	.word	0x0801e2a4
 80175e0:	0801e2dc 	.word	0x0801e2dc
 80175e4:	0801e304 	.word	0x0801e304

080175e8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80175e8:	b580      	push	{r7, lr}
 80175ea:	b082      	sub	sp, #8
 80175ec:	af00      	add	r7, sp, #0
 80175ee:	6078      	str	r0, [r7, #4]
 80175f0:	460b      	mov	r3, r1
 80175f2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80175f4:	78fb      	ldrb	r3, [r7, #3]
 80175f6:	461a      	mov	r2, r3
 80175f8:	2103      	movs	r1, #3
 80175fa:	6878      	ldr	r0, [r7, #4]
 80175fc:	f000 f814 	bl	8017628 <icmp_send_response>
}
 8017600:	bf00      	nop
 8017602:	3708      	adds	r7, #8
 8017604:	46bd      	mov	sp, r7
 8017606:	bd80      	pop	{r7, pc}

08017608 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8017608:	b580      	push	{r7, lr}
 801760a:	b082      	sub	sp, #8
 801760c:	af00      	add	r7, sp, #0
 801760e:	6078      	str	r0, [r7, #4]
 8017610:	460b      	mov	r3, r1
 8017612:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8017614:	78fb      	ldrb	r3, [r7, #3]
 8017616:	461a      	mov	r2, r3
 8017618:	210b      	movs	r1, #11
 801761a:	6878      	ldr	r0, [r7, #4]
 801761c:	f000 f804 	bl	8017628 <icmp_send_response>
}
 8017620:	bf00      	nop
 8017622:	3708      	adds	r7, #8
 8017624:	46bd      	mov	sp, r7
 8017626:	bd80      	pop	{r7, pc}

08017628 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8017628:	b580      	push	{r7, lr}
 801762a:	b08c      	sub	sp, #48	; 0x30
 801762c:	af04      	add	r7, sp, #16
 801762e:	6078      	str	r0, [r7, #4]
 8017630:	460b      	mov	r3, r1
 8017632:	70fb      	strb	r3, [r7, #3]
 8017634:	4613      	mov	r3, r2
 8017636:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8017638:	f44f 7220 	mov.w	r2, #640	; 0x280
 801763c:	2124      	movs	r1, #36	; 0x24
 801763e:	2022      	movs	r0, #34	; 0x22
 8017640:	f7f8 fdd6 	bl	80101f0 <pbuf_alloc>
 8017644:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8017646:	69fb      	ldr	r3, [r7, #28]
 8017648:	2b00      	cmp	r3, #0
 801764a:	d056      	beq.n	80176fa <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801764c:	69fb      	ldr	r3, [r7, #28]
 801764e:	895b      	ldrh	r3, [r3, #10]
 8017650:	2b23      	cmp	r3, #35	; 0x23
 8017652:	d806      	bhi.n	8017662 <icmp_send_response+0x3a>
 8017654:	4b2b      	ldr	r3, [pc, #172]	; (8017704 <icmp_send_response+0xdc>)
 8017656:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801765a:	492b      	ldr	r1, [pc, #172]	; (8017708 <icmp_send_response+0xe0>)
 801765c:	482b      	ldr	r0, [pc, #172]	; (801770c <icmp_send_response+0xe4>)
 801765e:	f001 ff6d 	bl	801953c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8017662:	687b      	ldr	r3, [r7, #4]
 8017664:	685b      	ldr	r3, [r3, #4]
 8017666:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8017668:	69fb      	ldr	r3, [r7, #28]
 801766a:	685b      	ldr	r3, [r3, #4]
 801766c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801766e:	697b      	ldr	r3, [r7, #20]
 8017670:	78fa      	ldrb	r2, [r7, #3]
 8017672:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8017674:	697b      	ldr	r3, [r7, #20]
 8017676:	78ba      	ldrb	r2, [r7, #2]
 8017678:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801767a:	697b      	ldr	r3, [r7, #20]
 801767c:	2200      	movs	r2, #0
 801767e:	711a      	strb	r2, [r3, #4]
 8017680:	2200      	movs	r2, #0
 8017682:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8017684:	697b      	ldr	r3, [r7, #20]
 8017686:	2200      	movs	r2, #0
 8017688:	719a      	strb	r2, [r3, #6]
 801768a:	2200      	movs	r2, #0
 801768c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801768e:	69fb      	ldr	r3, [r7, #28]
 8017690:	685b      	ldr	r3, [r3, #4]
 8017692:	f103 0008 	add.w	r0, r3, #8
 8017696:	687b      	ldr	r3, [r7, #4]
 8017698:	685b      	ldr	r3, [r3, #4]
 801769a:	221c      	movs	r2, #28
 801769c:	4619      	mov	r1, r3
 801769e:	f002 f91b 	bl	80198d8 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80176a2:	69bb      	ldr	r3, [r7, #24]
 80176a4:	68db      	ldr	r3, [r3, #12]
 80176a6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80176a8:	f107 030c 	add.w	r3, r7, #12
 80176ac:	4618      	mov	r0, r3
 80176ae:	f000 f82f 	bl	8017710 <ip4_route>
 80176b2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80176b4:	693b      	ldr	r3, [r7, #16]
 80176b6:	2b00      	cmp	r3, #0
 80176b8:	d01b      	beq.n	80176f2 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80176ba:	697b      	ldr	r3, [r7, #20]
 80176bc:	2200      	movs	r2, #0
 80176be:	709a      	strb	r2, [r3, #2]
 80176c0:	2200      	movs	r2, #0
 80176c2:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 80176c4:	69fb      	ldr	r3, [r7, #28]
 80176c6:	895b      	ldrh	r3, [r3, #10]
 80176c8:	4619      	mov	r1, r3
 80176ca:	6978      	ldr	r0, [r7, #20]
 80176cc:	f7f7 fd09 	bl	800f0e2 <inet_chksum>
 80176d0:	4603      	mov	r3, r0
 80176d2:	461a      	mov	r2, r3
 80176d4:	697b      	ldr	r3, [r7, #20]
 80176d6:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80176d8:	f107 020c 	add.w	r2, r7, #12
 80176dc:	693b      	ldr	r3, [r7, #16]
 80176de:	9302      	str	r3, [sp, #8]
 80176e0:	2301      	movs	r3, #1
 80176e2:	9301      	str	r3, [sp, #4]
 80176e4:	2300      	movs	r3, #0
 80176e6:	9300      	str	r3, [sp, #0]
 80176e8:	23ff      	movs	r3, #255	; 0xff
 80176ea:	2100      	movs	r1, #0
 80176ec:	69f8      	ldr	r0, [r7, #28]
 80176ee:	f000 f9cd 	bl	8017a8c <ip4_output_if>
  }
  pbuf_free(q);
 80176f2:	69f8      	ldr	r0, [r7, #28]
 80176f4:	f7f9 f860 	bl	80107b8 <pbuf_free>
 80176f8:	e000      	b.n	80176fc <icmp_send_response+0xd4>
    return;
 80176fa:	bf00      	nop
}
 80176fc:	3720      	adds	r7, #32
 80176fe:	46bd      	mov	sp, r7
 8017700:	bd80      	pop	{r7, pc}
 8017702:	bf00      	nop
 8017704:	0801e26c 	.word	0x0801e26c
 8017708:	0801e338 	.word	0x0801e338
 801770c:	0801e2dc 	.word	0x0801e2dc

08017710 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8017710:	b480      	push	{r7}
 8017712:	b085      	sub	sp, #20
 8017714:	af00      	add	r7, sp, #0
 8017716:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8017718:	4b33      	ldr	r3, [pc, #204]	; (80177e8 <ip4_route+0xd8>)
 801771a:	681b      	ldr	r3, [r3, #0]
 801771c:	60fb      	str	r3, [r7, #12]
 801771e:	e036      	b.n	801778e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017720:	68fb      	ldr	r3, [r7, #12]
 8017722:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017726:	f003 0301 	and.w	r3, r3, #1
 801772a:	b2db      	uxtb	r3, r3
 801772c:	2b00      	cmp	r3, #0
 801772e:	d02b      	beq.n	8017788 <ip4_route+0x78>
 8017730:	68fb      	ldr	r3, [r7, #12]
 8017732:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017736:	089b      	lsrs	r3, r3, #2
 8017738:	f003 0301 	and.w	r3, r3, #1
 801773c:	b2db      	uxtb	r3, r3
 801773e:	2b00      	cmp	r3, #0
 8017740:	d022      	beq.n	8017788 <ip4_route+0x78>
 8017742:	68fb      	ldr	r3, [r7, #12]
 8017744:	3304      	adds	r3, #4
 8017746:	681b      	ldr	r3, [r3, #0]
 8017748:	2b00      	cmp	r3, #0
 801774a:	d01d      	beq.n	8017788 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801774c:	687b      	ldr	r3, [r7, #4]
 801774e:	681a      	ldr	r2, [r3, #0]
 8017750:	68fb      	ldr	r3, [r7, #12]
 8017752:	3304      	adds	r3, #4
 8017754:	681b      	ldr	r3, [r3, #0]
 8017756:	405a      	eors	r2, r3
 8017758:	68fb      	ldr	r3, [r7, #12]
 801775a:	3308      	adds	r3, #8
 801775c:	681b      	ldr	r3, [r3, #0]
 801775e:	4013      	ands	r3, r2
 8017760:	2b00      	cmp	r3, #0
 8017762:	d101      	bne.n	8017768 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8017764:	68fb      	ldr	r3, [r7, #12]
 8017766:	e038      	b.n	80177da <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8017768:	68fb      	ldr	r3, [r7, #12]
 801776a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801776e:	f003 0302 	and.w	r3, r3, #2
 8017772:	2b00      	cmp	r3, #0
 8017774:	d108      	bne.n	8017788 <ip4_route+0x78>
 8017776:	687b      	ldr	r3, [r7, #4]
 8017778:	681a      	ldr	r2, [r3, #0]
 801777a:	68fb      	ldr	r3, [r7, #12]
 801777c:	330c      	adds	r3, #12
 801777e:	681b      	ldr	r3, [r3, #0]
 8017780:	429a      	cmp	r2, r3
 8017782:	d101      	bne.n	8017788 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8017784:	68fb      	ldr	r3, [r7, #12]
 8017786:	e028      	b.n	80177da <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8017788:	68fb      	ldr	r3, [r7, #12]
 801778a:	681b      	ldr	r3, [r3, #0]
 801778c:	60fb      	str	r3, [r7, #12]
 801778e:	68fb      	ldr	r3, [r7, #12]
 8017790:	2b00      	cmp	r3, #0
 8017792:	d1c5      	bne.n	8017720 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017794:	4b15      	ldr	r3, [pc, #84]	; (80177ec <ip4_route+0xdc>)
 8017796:	681b      	ldr	r3, [r3, #0]
 8017798:	2b00      	cmp	r3, #0
 801779a:	d01a      	beq.n	80177d2 <ip4_route+0xc2>
 801779c:	4b13      	ldr	r3, [pc, #76]	; (80177ec <ip4_route+0xdc>)
 801779e:	681b      	ldr	r3, [r3, #0]
 80177a0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80177a4:	f003 0301 	and.w	r3, r3, #1
 80177a8:	2b00      	cmp	r3, #0
 80177aa:	d012      	beq.n	80177d2 <ip4_route+0xc2>
 80177ac:	4b0f      	ldr	r3, [pc, #60]	; (80177ec <ip4_route+0xdc>)
 80177ae:	681b      	ldr	r3, [r3, #0]
 80177b0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80177b4:	f003 0304 	and.w	r3, r3, #4
 80177b8:	2b00      	cmp	r3, #0
 80177ba:	d00a      	beq.n	80177d2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80177bc:	4b0b      	ldr	r3, [pc, #44]	; (80177ec <ip4_route+0xdc>)
 80177be:	681b      	ldr	r3, [r3, #0]
 80177c0:	3304      	adds	r3, #4
 80177c2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80177c4:	2b00      	cmp	r3, #0
 80177c6:	d004      	beq.n	80177d2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80177c8:	687b      	ldr	r3, [r7, #4]
 80177ca:	681b      	ldr	r3, [r3, #0]
 80177cc:	b2db      	uxtb	r3, r3
 80177ce:	2b7f      	cmp	r3, #127	; 0x7f
 80177d0:	d101      	bne.n	80177d6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80177d2:	2300      	movs	r3, #0
 80177d4:	e001      	b.n	80177da <ip4_route+0xca>
  }

  return netif_default;
 80177d6:	4b05      	ldr	r3, [pc, #20]	; (80177ec <ip4_route+0xdc>)
 80177d8:	681b      	ldr	r3, [r3, #0]
}
 80177da:	4618      	mov	r0, r3
 80177dc:	3714      	adds	r7, #20
 80177de:	46bd      	mov	sp, r7
 80177e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177e4:	4770      	bx	lr
 80177e6:	bf00      	nop
 80177e8:	200080bc 	.word	0x200080bc
 80177ec:	200080c0 	.word	0x200080c0

080177f0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80177f0:	b580      	push	{r7, lr}
 80177f2:	b082      	sub	sp, #8
 80177f4:	af00      	add	r7, sp, #0
 80177f6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80177f8:	687b      	ldr	r3, [r7, #4]
 80177fa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80177fe:	f003 0301 	and.w	r3, r3, #1
 8017802:	b2db      	uxtb	r3, r3
 8017804:	2b00      	cmp	r3, #0
 8017806:	d016      	beq.n	8017836 <ip4_input_accept+0x46>
 8017808:	687b      	ldr	r3, [r7, #4]
 801780a:	3304      	adds	r3, #4
 801780c:	681b      	ldr	r3, [r3, #0]
 801780e:	2b00      	cmp	r3, #0
 8017810:	d011      	beq.n	8017836 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017812:	4b0b      	ldr	r3, [pc, #44]	; (8017840 <ip4_input_accept+0x50>)
 8017814:	695a      	ldr	r2, [r3, #20]
 8017816:	687b      	ldr	r3, [r7, #4]
 8017818:	3304      	adds	r3, #4
 801781a:	681b      	ldr	r3, [r3, #0]
 801781c:	429a      	cmp	r2, r3
 801781e:	d008      	beq.n	8017832 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8017820:	4b07      	ldr	r3, [pc, #28]	; (8017840 <ip4_input_accept+0x50>)
 8017822:	695b      	ldr	r3, [r3, #20]
 8017824:	6879      	ldr	r1, [r7, #4]
 8017826:	4618      	mov	r0, r3
 8017828:	f000 fa08 	bl	8017c3c <ip4_addr_isbroadcast_u32>
 801782c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801782e:	2b00      	cmp	r3, #0
 8017830:	d001      	beq.n	8017836 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8017832:	2301      	movs	r3, #1
 8017834:	e000      	b.n	8017838 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8017836:	2300      	movs	r3, #0
}
 8017838:	4618      	mov	r0, r3
 801783a:	3708      	adds	r7, #8
 801783c:	46bd      	mov	sp, r7
 801783e:	bd80      	pop	{r7, pc}
 8017840:	200051ac 	.word	0x200051ac

08017844 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8017844:	b580      	push	{r7, lr}
 8017846:	b086      	sub	sp, #24
 8017848:	af00      	add	r7, sp, #0
 801784a:	6078      	str	r0, [r7, #4]
 801784c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801784e:	687b      	ldr	r3, [r7, #4]
 8017850:	685b      	ldr	r3, [r3, #4]
 8017852:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8017854:	697b      	ldr	r3, [r7, #20]
 8017856:	781b      	ldrb	r3, [r3, #0]
 8017858:	091b      	lsrs	r3, r3, #4
 801785a:	b2db      	uxtb	r3, r3
 801785c:	2b04      	cmp	r3, #4
 801785e:	d004      	beq.n	801786a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8017860:	6878      	ldr	r0, [r7, #4]
 8017862:	f7f8 ffa9 	bl	80107b8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8017866:	2300      	movs	r3, #0
 8017868:	e107      	b.n	8017a7a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801786a:	697b      	ldr	r3, [r7, #20]
 801786c:	781b      	ldrb	r3, [r3, #0]
 801786e:	f003 030f 	and.w	r3, r3, #15
 8017872:	b2db      	uxtb	r3, r3
 8017874:	009b      	lsls	r3, r3, #2
 8017876:	b2db      	uxtb	r3, r3
 8017878:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801787a:	697b      	ldr	r3, [r7, #20]
 801787c:	885b      	ldrh	r3, [r3, #2]
 801787e:	b29b      	uxth	r3, r3
 8017880:	4618      	mov	r0, r3
 8017882:	f7f7 fba3 	bl	800efcc <lwip_htons>
 8017886:	4603      	mov	r3, r0
 8017888:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801788a:	687b      	ldr	r3, [r7, #4]
 801788c:	891b      	ldrh	r3, [r3, #8]
 801788e:	89ba      	ldrh	r2, [r7, #12]
 8017890:	429a      	cmp	r2, r3
 8017892:	d204      	bcs.n	801789e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8017894:	89bb      	ldrh	r3, [r7, #12]
 8017896:	4619      	mov	r1, r3
 8017898:	6878      	ldr	r0, [r7, #4]
 801789a:	f7f8 fe07 	bl	80104ac <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801789e:	687b      	ldr	r3, [r7, #4]
 80178a0:	895b      	ldrh	r3, [r3, #10]
 80178a2:	89fa      	ldrh	r2, [r7, #14]
 80178a4:	429a      	cmp	r2, r3
 80178a6:	d807      	bhi.n	80178b8 <ip4_input+0x74>
 80178a8:	687b      	ldr	r3, [r7, #4]
 80178aa:	891b      	ldrh	r3, [r3, #8]
 80178ac:	89ba      	ldrh	r2, [r7, #12]
 80178ae:	429a      	cmp	r2, r3
 80178b0:	d802      	bhi.n	80178b8 <ip4_input+0x74>
 80178b2:	89fb      	ldrh	r3, [r7, #14]
 80178b4:	2b13      	cmp	r3, #19
 80178b6:	d804      	bhi.n	80178c2 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80178b8:	6878      	ldr	r0, [r7, #4]
 80178ba:	f7f8 ff7d 	bl	80107b8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80178be:	2300      	movs	r3, #0
 80178c0:	e0db      	b.n	8017a7a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80178c2:	697b      	ldr	r3, [r7, #20]
 80178c4:	691b      	ldr	r3, [r3, #16]
 80178c6:	4a6f      	ldr	r2, [pc, #444]	; (8017a84 <ip4_input+0x240>)
 80178c8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80178ca:	697b      	ldr	r3, [r7, #20]
 80178cc:	68db      	ldr	r3, [r3, #12]
 80178ce:	4a6d      	ldr	r2, [pc, #436]	; (8017a84 <ip4_input+0x240>)
 80178d0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80178d2:	4b6c      	ldr	r3, [pc, #432]	; (8017a84 <ip4_input+0x240>)
 80178d4:	695b      	ldr	r3, [r3, #20]
 80178d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80178da:	2be0      	cmp	r3, #224	; 0xe0
 80178dc:	d112      	bne.n	8017904 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80178de:	683b      	ldr	r3, [r7, #0]
 80178e0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80178e4:	f003 0301 	and.w	r3, r3, #1
 80178e8:	b2db      	uxtb	r3, r3
 80178ea:	2b00      	cmp	r3, #0
 80178ec:	d007      	beq.n	80178fe <ip4_input+0xba>
 80178ee:	683b      	ldr	r3, [r7, #0]
 80178f0:	3304      	adds	r3, #4
 80178f2:	681b      	ldr	r3, [r3, #0]
 80178f4:	2b00      	cmp	r3, #0
 80178f6:	d002      	beq.n	80178fe <ip4_input+0xba>
      netif = inp;
 80178f8:	683b      	ldr	r3, [r7, #0]
 80178fa:	613b      	str	r3, [r7, #16]
 80178fc:	e02a      	b.n	8017954 <ip4_input+0x110>
    } else {
      netif = NULL;
 80178fe:	2300      	movs	r3, #0
 8017900:	613b      	str	r3, [r7, #16]
 8017902:	e027      	b.n	8017954 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8017904:	6838      	ldr	r0, [r7, #0]
 8017906:	f7ff ff73 	bl	80177f0 <ip4_input_accept>
 801790a:	4603      	mov	r3, r0
 801790c:	2b00      	cmp	r3, #0
 801790e:	d002      	beq.n	8017916 <ip4_input+0xd2>
      netif = inp;
 8017910:	683b      	ldr	r3, [r7, #0]
 8017912:	613b      	str	r3, [r7, #16]
 8017914:	e01e      	b.n	8017954 <ip4_input+0x110>
    } else {
      netif = NULL;
 8017916:	2300      	movs	r3, #0
 8017918:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801791a:	4b5a      	ldr	r3, [pc, #360]	; (8017a84 <ip4_input+0x240>)
 801791c:	695b      	ldr	r3, [r3, #20]
 801791e:	b2db      	uxtb	r3, r3
 8017920:	2b7f      	cmp	r3, #127	; 0x7f
 8017922:	d017      	beq.n	8017954 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8017924:	4b58      	ldr	r3, [pc, #352]	; (8017a88 <ip4_input+0x244>)
 8017926:	681b      	ldr	r3, [r3, #0]
 8017928:	613b      	str	r3, [r7, #16]
 801792a:	e00e      	b.n	801794a <ip4_input+0x106>
          if (netif == inp) {
 801792c:	693a      	ldr	r2, [r7, #16]
 801792e:	683b      	ldr	r3, [r7, #0]
 8017930:	429a      	cmp	r2, r3
 8017932:	d006      	beq.n	8017942 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8017934:	6938      	ldr	r0, [r7, #16]
 8017936:	f7ff ff5b 	bl	80177f0 <ip4_input_accept>
 801793a:	4603      	mov	r3, r0
 801793c:	2b00      	cmp	r3, #0
 801793e:	d108      	bne.n	8017952 <ip4_input+0x10e>
 8017940:	e000      	b.n	8017944 <ip4_input+0x100>
            continue;
 8017942:	bf00      	nop
        NETIF_FOREACH(netif) {
 8017944:	693b      	ldr	r3, [r7, #16]
 8017946:	681b      	ldr	r3, [r3, #0]
 8017948:	613b      	str	r3, [r7, #16]
 801794a:	693b      	ldr	r3, [r7, #16]
 801794c:	2b00      	cmp	r3, #0
 801794e:	d1ed      	bne.n	801792c <ip4_input+0xe8>
 8017950:	e000      	b.n	8017954 <ip4_input+0x110>
            break;
 8017952:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017954:	4b4b      	ldr	r3, [pc, #300]	; (8017a84 <ip4_input+0x240>)
 8017956:	691b      	ldr	r3, [r3, #16]
 8017958:	6839      	ldr	r1, [r7, #0]
 801795a:	4618      	mov	r0, r3
 801795c:	f000 f96e 	bl	8017c3c <ip4_addr_isbroadcast_u32>
 8017960:	4603      	mov	r3, r0
 8017962:	2b00      	cmp	r3, #0
 8017964:	d105      	bne.n	8017972 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8017966:	4b47      	ldr	r3, [pc, #284]	; (8017a84 <ip4_input+0x240>)
 8017968:	691b      	ldr	r3, [r3, #16]
 801796a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801796e:	2be0      	cmp	r3, #224	; 0xe0
 8017970:	d104      	bne.n	801797c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8017972:	6878      	ldr	r0, [r7, #4]
 8017974:	f7f8 ff20 	bl	80107b8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8017978:	2300      	movs	r3, #0
 801797a:	e07e      	b.n	8017a7a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801797c:	693b      	ldr	r3, [r7, #16]
 801797e:	2b00      	cmp	r3, #0
 8017980:	d104      	bne.n	801798c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8017982:	6878      	ldr	r0, [r7, #4]
 8017984:	f7f8 ff18 	bl	80107b8 <pbuf_free>
    return ERR_OK;
 8017988:	2300      	movs	r3, #0
 801798a:	e076      	b.n	8017a7a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801798c:	697b      	ldr	r3, [r7, #20]
 801798e:	88db      	ldrh	r3, [r3, #6]
 8017990:	b29b      	uxth	r3, r3
 8017992:	461a      	mov	r2, r3
 8017994:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8017998:	4013      	ands	r3, r2
 801799a:	2b00      	cmp	r3, #0
 801799c:	d00b      	beq.n	80179b6 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801799e:	6878      	ldr	r0, [r7, #4]
 80179a0:	f000 fc92 	bl	80182c8 <ip4_reass>
 80179a4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80179a6:	687b      	ldr	r3, [r7, #4]
 80179a8:	2b00      	cmp	r3, #0
 80179aa:	d101      	bne.n	80179b0 <ip4_input+0x16c>
      return ERR_OK;
 80179ac:	2300      	movs	r3, #0
 80179ae:	e064      	b.n	8017a7a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80179b0:	687b      	ldr	r3, [r7, #4]
 80179b2:	685b      	ldr	r3, [r3, #4]
 80179b4:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80179b6:	4a33      	ldr	r2, [pc, #204]	; (8017a84 <ip4_input+0x240>)
 80179b8:	693b      	ldr	r3, [r7, #16]
 80179ba:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80179bc:	4a31      	ldr	r2, [pc, #196]	; (8017a84 <ip4_input+0x240>)
 80179be:	683b      	ldr	r3, [r7, #0]
 80179c0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80179c2:	4a30      	ldr	r2, [pc, #192]	; (8017a84 <ip4_input+0x240>)
 80179c4:	697b      	ldr	r3, [r7, #20]
 80179c6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80179c8:	697b      	ldr	r3, [r7, #20]
 80179ca:	781b      	ldrb	r3, [r3, #0]
 80179cc:	f003 030f 	and.w	r3, r3, #15
 80179d0:	b2db      	uxtb	r3, r3
 80179d2:	009b      	lsls	r3, r3, #2
 80179d4:	b2db      	uxtb	r3, r3
 80179d6:	b29a      	uxth	r2, r3
 80179d8:	4b2a      	ldr	r3, [pc, #168]	; (8017a84 <ip4_input+0x240>)
 80179da:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80179dc:	89fb      	ldrh	r3, [r7, #14]
 80179de:	4619      	mov	r1, r3
 80179e0:	6878      	ldr	r0, [r7, #4]
 80179e2:	f7f8 fe63 	bl	80106ac <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80179e6:	697b      	ldr	r3, [r7, #20]
 80179e8:	7a5b      	ldrb	r3, [r3, #9]
 80179ea:	2b11      	cmp	r3, #17
 80179ec:	d006      	beq.n	80179fc <ip4_input+0x1b8>
 80179ee:	2b11      	cmp	r3, #17
 80179f0:	dc13      	bgt.n	8017a1a <ip4_input+0x1d6>
 80179f2:	2b01      	cmp	r3, #1
 80179f4:	d00c      	beq.n	8017a10 <ip4_input+0x1cc>
 80179f6:	2b06      	cmp	r3, #6
 80179f8:	d005      	beq.n	8017a06 <ip4_input+0x1c2>
 80179fa:	e00e      	b.n	8017a1a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80179fc:	6839      	ldr	r1, [r7, #0]
 80179fe:	6878      	ldr	r0, [r7, #4]
 8017a00:	f7fe fc42 	bl	8016288 <udp_input>
        break;
 8017a04:	e026      	b.n	8017a54 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8017a06:	6839      	ldr	r1, [r7, #0]
 8017a08:	6878      	ldr	r0, [r7, #4]
 8017a0a:	f7fa fcfd 	bl	8012408 <tcp_input>
        break;
 8017a0e:	e021      	b.n	8017a54 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8017a10:	6839      	ldr	r1, [r7, #0]
 8017a12:	6878      	ldr	r0, [r7, #4]
 8017a14:	f7ff fcc8 	bl	80173a8 <icmp_input>
        break;
 8017a18:	e01c      	b.n	8017a54 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017a1a:	4b1a      	ldr	r3, [pc, #104]	; (8017a84 <ip4_input+0x240>)
 8017a1c:	695b      	ldr	r3, [r3, #20]
 8017a1e:	6939      	ldr	r1, [r7, #16]
 8017a20:	4618      	mov	r0, r3
 8017a22:	f000 f90b 	bl	8017c3c <ip4_addr_isbroadcast_u32>
 8017a26:	4603      	mov	r3, r0
 8017a28:	2b00      	cmp	r3, #0
 8017a2a:	d10f      	bne.n	8017a4c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017a2c:	4b15      	ldr	r3, [pc, #84]	; (8017a84 <ip4_input+0x240>)
 8017a2e:	695b      	ldr	r3, [r3, #20]
 8017a30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017a34:	2be0      	cmp	r3, #224	; 0xe0
 8017a36:	d009      	beq.n	8017a4c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8017a38:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8017a3c:	4619      	mov	r1, r3
 8017a3e:	6878      	ldr	r0, [r7, #4]
 8017a40:	f7f8 fea7 	bl	8010792 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8017a44:	2102      	movs	r1, #2
 8017a46:	6878      	ldr	r0, [r7, #4]
 8017a48:	f7ff fdce 	bl	80175e8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8017a4c:	6878      	ldr	r0, [r7, #4]
 8017a4e:	f7f8 feb3 	bl	80107b8 <pbuf_free>
        break;
 8017a52:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8017a54:	4b0b      	ldr	r3, [pc, #44]	; (8017a84 <ip4_input+0x240>)
 8017a56:	2200      	movs	r2, #0
 8017a58:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8017a5a:	4b0a      	ldr	r3, [pc, #40]	; (8017a84 <ip4_input+0x240>)
 8017a5c:	2200      	movs	r2, #0
 8017a5e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8017a60:	4b08      	ldr	r3, [pc, #32]	; (8017a84 <ip4_input+0x240>)
 8017a62:	2200      	movs	r2, #0
 8017a64:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8017a66:	4b07      	ldr	r3, [pc, #28]	; (8017a84 <ip4_input+0x240>)
 8017a68:	2200      	movs	r2, #0
 8017a6a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8017a6c:	4b05      	ldr	r3, [pc, #20]	; (8017a84 <ip4_input+0x240>)
 8017a6e:	2200      	movs	r2, #0
 8017a70:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8017a72:	4b04      	ldr	r3, [pc, #16]	; (8017a84 <ip4_input+0x240>)
 8017a74:	2200      	movs	r2, #0
 8017a76:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8017a78:	2300      	movs	r3, #0
}
 8017a7a:	4618      	mov	r0, r3
 8017a7c:	3718      	adds	r7, #24
 8017a7e:	46bd      	mov	sp, r7
 8017a80:	bd80      	pop	{r7, pc}
 8017a82:	bf00      	nop
 8017a84:	200051ac 	.word	0x200051ac
 8017a88:	200080bc 	.word	0x200080bc

08017a8c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8017a8c:	b580      	push	{r7, lr}
 8017a8e:	b08a      	sub	sp, #40	; 0x28
 8017a90:	af04      	add	r7, sp, #16
 8017a92:	60f8      	str	r0, [r7, #12]
 8017a94:	60b9      	str	r1, [r7, #8]
 8017a96:	607a      	str	r2, [r7, #4]
 8017a98:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8017a9a:	68bb      	ldr	r3, [r7, #8]
 8017a9c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8017a9e:	687b      	ldr	r3, [r7, #4]
 8017aa0:	2b00      	cmp	r3, #0
 8017aa2:	d009      	beq.n	8017ab8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8017aa4:	68bb      	ldr	r3, [r7, #8]
 8017aa6:	2b00      	cmp	r3, #0
 8017aa8:	d003      	beq.n	8017ab2 <ip4_output_if+0x26>
 8017aaa:	68bb      	ldr	r3, [r7, #8]
 8017aac:	681b      	ldr	r3, [r3, #0]
 8017aae:	2b00      	cmp	r3, #0
 8017ab0:	d102      	bne.n	8017ab8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8017ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ab4:	3304      	adds	r3, #4
 8017ab6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8017ab8:	78fa      	ldrb	r2, [r7, #3]
 8017aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017abc:	9302      	str	r3, [sp, #8]
 8017abe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017ac2:	9301      	str	r3, [sp, #4]
 8017ac4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017ac8:	9300      	str	r3, [sp, #0]
 8017aca:	4613      	mov	r3, r2
 8017acc:	687a      	ldr	r2, [r7, #4]
 8017ace:	6979      	ldr	r1, [r7, #20]
 8017ad0:	68f8      	ldr	r0, [r7, #12]
 8017ad2:	f000 f805 	bl	8017ae0 <ip4_output_if_src>
 8017ad6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8017ad8:	4618      	mov	r0, r3
 8017ada:	3718      	adds	r7, #24
 8017adc:	46bd      	mov	sp, r7
 8017ade:	bd80      	pop	{r7, pc}

08017ae0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8017ae0:	b580      	push	{r7, lr}
 8017ae2:	b088      	sub	sp, #32
 8017ae4:	af00      	add	r7, sp, #0
 8017ae6:	60f8      	str	r0, [r7, #12]
 8017ae8:	60b9      	str	r1, [r7, #8]
 8017aea:	607a      	str	r2, [r7, #4]
 8017aec:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8017aee:	68fb      	ldr	r3, [r7, #12]
 8017af0:	7b9b      	ldrb	r3, [r3, #14]
 8017af2:	2b01      	cmp	r3, #1
 8017af4:	d006      	beq.n	8017b04 <ip4_output_if_src+0x24>
 8017af6:	4b4b      	ldr	r3, [pc, #300]	; (8017c24 <ip4_output_if_src+0x144>)
 8017af8:	f44f 7255 	mov.w	r2, #852	; 0x354
 8017afc:	494a      	ldr	r1, [pc, #296]	; (8017c28 <ip4_output_if_src+0x148>)
 8017afe:	484b      	ldr	r0, [pc, #300]	; (8017c2c <ip4_output_if_src+0x14c>)
 8017b00:	f001 fd1c 	bl	801953c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8017b04:	687b      	ldr	r3, [r7, #4]
 8017b06:	2b00      	cmp	r3, #0
 8017b08:	d060      	beq.n	8017bcc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8017b0a:	2314      	movs	r3, #20
 8017b0c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8017b0e:	2114      	movs	r1, #20
 8017b10:	68f8      	ldr	r0, [r7, #12]
 8017b12:	f7f8 fdbb 	bl	801068c <pbuf_add_header>
 8017b16:	4603      	mov	r3, r0
 8017b18:	2b00      	cmp	r3, #0
 8017b1a:	d002      	beq.n	8017b22 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017b1c:	f06f 0301 	mvn.w	r3, #1
 8017b20:	e07c      	b.n	8017c1c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8017b22:	68fb      	ldr	r3, [r7, #12]
 8017b24:	685b      	ldr	r3, [r3, #4]
 8017b26:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8017b28:	68fb      	ldr	r3, [r7, #12]
 8017b2a:	895b      	ldrh	r3, [r3, #10]
 8017b2c:	2b13      	cmp	r3, #19
 8017b2e:	d806      	bhi.n	8017b3e <ip4_output_if_src+0x5e>
 8017b30:	4b3c      	ldr	r3, [pc, #240]	; (8017c24 <ip4_output_if_src+0x144>)
 8017b32:	f44f 7262 	mov.w	r2, #904	; 0x388
 8017b36:	493e      	ldr	r1, [pc, #248]	; (8017c30 <ip4_output_if_src+0x150>)
 8017b38:	483c      	ldr	r0, [pc, #240]	; (8017c2c <ip4_output_if_src+0x14c>)
 8017b3a:	f001 fcff 	bl	801953c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8017b3e:	69fb      	ldr	r3, [r7, #28]
 8017b40:	78fa      	ldrb	r2, [r7, #3]
 8017b42:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8017b44:	69fb      	ldr	r3, [r7, #28]
 8017b46:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8017b4a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8017b4c:	687b      	ldr	r3, [r7, #4]
 8017b4e:	681a      	ldr	r2, [r3, #0]
 8017b50:	69fb      	ldr	r3, [r7, #28]
 8017b52:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8017b54:	8b7b      	ldrh	r3, [r7, #26]
 8017b56:	089b      	lsrs	r3, r3, #2
 8017b58:	b29b      	uxth	r3, r3
 8017b5a:	b2db      	uxtb	r3, r3
 8017b5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017b60:	b2da      	uxtb	r2, r3
 8017b62:	69fb      	ldr	r3, [r7, #28]
 8017b64:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8017b66:	69fb      	ldr	r3, [r7, #28]
 8017b68:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8017b6c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8017b6e:	68fb      	ldr	r3, [r7, #12]
 8017b70:	891b      	ldrh	r3, [r3, #8]
 8017b72:	4618      	mov	r0, r3
 8017b74:	f7f7 fa2a 	bl	800efcc <lwip_htons>
 8017b78:	4603      	mov	r3, r0
 8017b7a:	461a      	mov	r2, r3
 8017b7c:	69fb      	ldr	r3, [r7, #28]
 8017b7e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8017b80:	69fb      	ldr	r3, [r7, #28]
 8017b82:	2200      	movs	r2, #0
 8017b84:	719a      	strb	r2, [r3, #6]
 8017b86:	2200      	movs	r2, #0
 8017b88:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8017b8a:	4b2a      	ldr	r3, [pc, #168]	; (8017c34 <ip4_output_if_src+0x154>)
 8017b8c:	881b      	ldrh	r3, [r3, #0]
 8017b8e:	4618      	mov	r0, r3
 8017b90:	f7f7 fa1c 	bl	800efcc <lwip_htons>
 8017b94:	4603      	mov	r3, r0
 8017b96:	461a      	mov	r2, r3
 8017b98:	69fb      	ldr	r3, [r7, #28]
 8017b9a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8017b9c:	4b25      	ldr	r3, [pc, #148]	; (8017c34 <ip4_output_if_src+0x154>)
 8017b9e:	881b      	ldrh	r3, [r3, #0]
 8017ba0:	3301      	adds	r3, #1
 8017ba2:	b29a      	uxth	r2, r3
 8017ba4:	4b23      	ldr	r3, [pc, #140]	; (8017c34 <ip4_output_if_src+0x154>)
 8017ba6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8017ba8:	68bb      	ldr	r3, [r7, #8]
 8017baa:	2b00      	cmp	r3, #0
 8017bac:	d104      	bne.n	8017bb8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8017bae:	4b22      	ldr	r3, [pc, #136]	; (8017c38 <ip4_output_if_src+0x158>)
 8017bb0:	681a      	ldr	r2, [r3, #0]
 8017bb2:	69fb      	ldr	r3, [r7, #28]
 8017bb4:	60da      	str	r2, [r3, #12]
 8017bb6:	e003      	b.n	8017bc0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8017bb8:	68bb      	ldr	r3, [r7, #8]
 8017bba:	681a      	ldr	r2, [r3, #0]
 8017bbc:	69fb      	ldr	r3, [r7, #28]
 8017bbe:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8017bc0:	69fb      	ldr	r3, [r7, #28]
 8017bc2:	2200      	movs	r2, #0
 8017bc4:	729a      	strb	r2, [r3, #10]
 8017bc6:	2200      	movs	r2, #0
 8017bc8:	72da      	strb	r2, [r3, #11]
 8017bca:	e00f      	b.n	8017bec <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8017bcc:	68fb      	ldr	r3, [r7, #12]
 8017bce:	895b      	ldrh	r3, [r3, #10]
 8017bd0:	2b13      	cmp	r3, #19
 8017bd2:	d802      	bhi.n	8017bda <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017bd4:	f06f 0301 	mvn.w	r3, #1
 8017bd8:	e020      	b.n	8017c1c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8017bda:	68fb      	ldr	r3, [r7, #12]
 8017bdc:	685b      	ldr	r3, [r3, #4]
 8017bde:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8017be0:	69fb      	ldr	r3, [r7, #28]
 8017be2:	691b      	ldr	r3, [r3, #16]
 8017be4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8017be6:	f107 0314 	add.w	r3, r7, #20
 8017bea:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8017bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017bee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017bf0:	2b00      	cmp	r3, #0
 8017bf2:	d00c      	beq.n	8017c0e <ip4_output_if_src+0x12e>
 8017bf4:	68fb      	ldr	r3, [r7, #12]
 8017bf6:	891a      	ldrh	r2, [r3, #8]
 8017bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017bfa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017bfc:	429a      	cmp	r2, r3
 8017bfe:	d906      	bls.n	8017c0e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8017c00:	687a      	ldr	r2, [r7, #4]
 8017c02:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017c04:	68f8      	ldr	r0, [r7, #12]
 8017c06:	f000 fd53 	bl	80186b0 <ip4_frag>
 8017c0a:	4603      	mov	r3, r0
 8017c0c:	e006      	b.n	8017c1c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8017c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c10:	695b      	ldr	r3, [r3, #20]
 8017c12:	687a      	ldr	r2, [r7, #4]
 8017c14:	68f9      	ldr	r1, [r7, #12]
 8017c16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017c18:	4798      	blx	r3
 8017c1a:	4603      	mov	r3, r0
}
 8017c1c:	4618      	mov	r0, r3
 8017c1e:	3720      	adds	r7, #32
 8017c20:	46bd      	mov	sp, r7
 8017c22:	bd80      	pop	{r7, pc}
 8017c24:	0801e364 	.word	0x0801e364
 8017c28:	0801e398 	.word	0x0801e398
 8017c2c:	0801e3a4 	.word	0x0801e3a4
 8017c30:	0801e3cc 	.word	0x0801e3cc
 8017c34:	2000821a 	.word	0x2000821a
 8017c38:	0801e7e4 	.word	0x0801e7e4

08017c3c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8017c3c:	b480      	push	{r7}
 8017c3e:	b085      	sub	sp, #20
 8017c40:	af00      	add	r7, sp, #0
 8017c42:	6078      	str	r0, [r7, #4]
 8017c44:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8017c46:	687b      	ldr	r3, [r7, #4]
 8017c48:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8017c4a:	687b      	ldr	r3, [r7, #4]
 8017c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017c50:	d002      	beq.n	8017c58 <ip4_addr_isbroadcast_u32+0x1c>
 8017c52:	687b      	ldr	r3, [r7, #4]
 8017c54:	2b00      	cmp	r3, #0
 8017c56:	d101      	bne.n	8017c5c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8017c58:	2301      	movs	r3, #1
 8017c5a:	e02a      	b.n	8017cb2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8017c5c:	683b      	ldr	r3, [r7, #0]
 8017c5e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017c62:	f003 0302 	and.w	r3, r3, #2
 8017c66:	2b00      	cmp	r3, #0
 8017c68:	d101      	bne.n	8017c6e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8017c6a:	2300      	movs	r3, #0
 8017c6c:	e021      	b.n	8017cb2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8017c6e:	683b      	ldr	r3, [r7, #0]
 8017c70:	3304      	adds	r3, #4
 8017c72:	681b      	ldr	r3, [r3, #0]
 8017c74:	687a      	ldr	r2, [r7, #4]
 8017c76:	429a      	cmp	r2, r3
 8017c78:	d101      	bne.n	8017c7e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8017c7a:	2300      	movs	r3, #0
 8017c7c:	e019      	b.n	8017cb2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8017c7e:	68fa      	ldr	r2, [r7, #12]
 8017c80:	683b      	ldr	r3, [r7, #0]
 8017c82:	3304      	adds	r3, #4
 8017c84:	681b      	ldr	r3, [r3, #0]
 8017c86:	405a      	eors	r2, r3
 8017c88:	683b      	ldr	r3, [r7, #0]
 8017c8a:	3308      	adds	r3, #8
 8017c8c:	681b      	ldr	r3, [r3, #0]
 8017c8e:	4013      	ands	r3, r2
 8017c90:	2b00      	cmp	r3, #0
 8017c92:	d10d      	bne.n	8017cb0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017c94:	683b      	ldr	r3, [r7, #0]
 8017c96:	3308      	adds	r3, #8
 8017c98:	681b      	ldr	r3, [r3, #0]
 8017c9a:	43da      	mvns	r2, r3
 8017c9c:	687b      	ldr	r3, [r7, #4]
 8017c9e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8017ca0:	683b      	ldr	r3, [r7, #0]
 8017ca2:	3308      	adds	r3, #8
 8017ca4:	681b      	ldr	r3, [r3, #0]
 8017ca6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017ca8:	429a      	cmp	r2, r3
 8017caa:	d101      	bne.n	8017cb0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8017cac:	2301      	movs	r3, #1
 8017cae:	e000      	b.n	8017cb2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8017cb0:	2300      	movs	r3, #0
  }
}
 8017cb2:	4618      	mov	r0, r3
 8017cb4:	3714      	adds	r7, #20
 8017cb6:	46bd      	mov	sp, r7
 8017cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cbc:	4770      	bx	lr
	...

08017cc0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8017cc0:	b580      	push	{r7, lr}
 8017cc2:	b084      	sub	sp, #16
 8017cc4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8017cc6:	2300      	movs	r3, #0
 8017cc8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8017cca:	4b12      	ldr	r3, [pc, #72]	; (8017d14 <ip_reass_tmr+0x54>)
 8017ccc:	681b      	ldr	r3, [r3, #0]
 8017cce:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8017cd0:	e018      	b.n	8017d04 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8017cd2:	68fb      	ldr	r3, [r7, #12]
 8017cd4:	7fdb      	ldrb	r3, [r3, #31]
 8017cd6:	2b00      	cmp	r3, #0
 8017cd8:	d00b      	beq.n	8017cf2 <ip_reass_tmr+0x32>
      r->timer--;
 8017cda:	68fb      	ldr	r3, [r7, #12]
 8017cdc:	7fdb      	ldrb	r3, [r3, #31]
 8017cde:	3b01      	subs	r3, #1
 8017ce0:	b2da      	uxtb	r2, r3
 8017ce2:	68fb      	ldr	r3, [r7, #12]
 8017ce4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8017ce6:	68fb      	ldr	r3, [r7, #12]
 8017ce8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8017cea:	68fb      	ldr	r3, [r7, #12]
 8017cec:	681b      	ldr	r3, [r3, #0]
 8017cee:	60fb      	str	r3, [r7, #12]
 8017cf0:	e008      	b.n	8017d04 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8017cf2:	68fb      	ldr	r3, [r7, #12]
 8017cf4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8017cf6:	68fb      	ldr	r3, [r7, #12]
 8017cf8:	681b      	ldr	r3, [r3, #0]
 8017cfa:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8017cfc:	68b9      	ldr	r1, [r7, #8]
 8017cfe:	6878      	ldr	r0, [r7, #4]
 8017d00:	f000 f80a 	bl	8017d18 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8017d04:	68fb      	ldr	r3, [r7, #12]
 8017d06:	2b00      	cmp	r3, #0
 8017d08:	d1e3      	bne.n	8017cd2 <ip_reass_tmr+0x12>
    }
  }
}
 8017d0a:	bf00      	nop
 8017d0c:	bf00      	nop
 8017d0e:	3710      	adds	r7, #16
 8017d10:	46bd      	mov	sp, r7
 8017d12:	bd80      	pop	{r7, pc}
 8017d14:	2000821c 	.word	0x2000821c

08017d18 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017d18:	b580      	push	{r7, lr}
 8017d1a:	b088      	sub	sp, #32
 8017d1c:	af00      	add	r7, sp, #0
 8017d1e:	6078      	str	r0, [r7, #4]
 8017d20:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8017d22:	2300      	movs	r3, #0
 8017d24:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8017d26:	683a      	ldr	r2, [r7, #0]
 8017d28:	687b      	ldr	r3, [r7, #4]
 8017d2a:	429a      	cmp	r2, r3
 8017d2c:	d105      	bne.n	8017d3a <ip_reass_free_complete_datagram+0x22>
 8017d2e:	4b45      	ldr	r3, [pc, #276]	; (8017e44 <ip_reass_free_complete_datagram+0x12c>)
 8017d30:	22ab      	movs	r2, #171	; 0xab
 8017d32:	4945      	ldr	r1, [pc, #276]	; (8017e48 <ip_reass_free_complete_datagram+0x130>)
 8017d34:	4845      	ldr	r0, [pc, #276]	; (8017e4c <ip_reass_free_complete_datagram+0x134>)
 8017d36:	f001 fc01 	bl	801953c <iprintf>
  if (prev != NULL) {
 8017d3a:	683b      	ldr	r3, [r7, #0]
 8017d3c:	2b00      	cmp	r3, #0
 8017d3e:	d00a      	beq.n	8017d56 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8017d40:	683b      	ldr	r3, [r7, #0]
 8017d42:	681b      	ldr	r3, [r3, #0]
 8017d44:	687a      	ldr	r2, [r7, #4]
 8017d46:	429a      	cmp	r2, r3
 8017d48:	d005      	beq.n	8017d56 <ip_reass_free_complete_datagram+0x3e>
 8017d4a:	4b3e      	ldr	r3, [pc, #248]	; (8017e44 <ip_reass_free_complete_datagram+0x12c>)
 8017d4c:	22ad      	movs	r2, #173	; 0xad
 8017d4e:	4940      	ldr	r1, [pc, #256]	; (8017e50 <ip_reass_free_complete_datagram+0x138>)
 8017d50:	483e      	ldr	r0, [pc, #248]	; (8017e4c <ip_reass_free_complete_datagram+0x134>)
 8017d52:	f001 fbf3 	bl	801953c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8017d56:	687b      	ldr	r3, [r7, #4]
 8017d58:	685b      	ldr	r3, [r3, #4]
 8017d5a:	685b      	ldr	r3, [r3, #4]
 8017d5c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8017d5e:	697b      	ldr	r3, [r7, #20]
 8017d60:	889b      	ldrh	r3, [r3, #4]
 8017d62:	b29b      	uxth	r3, r3
 8017d64:	2b00      	cmp	r3, #0
 8017d66:	d12a      	bne.n	8017dbe <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8017d68:	687b      	ldr	r3, [r7, #4]
 8017d6a:	685b      	ldr	r3, [r3, #4]
 8017d6c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8017d6e:	697b      	ldr	r3, [r7, #20]
 8017d70:	681a      	ldr	r2, [r3, #0]
 8017d72:	687b      	ldr	r3, [r7, #4]
 8017d74:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8017d76:	69bb      	ldr	r3, [r7, #24]
 8017d78:	6858      	ldr	r0, [r3, #4]
 8017d7a:	687b      	ldr	r3, [r7, #4]
 8017d7c:	3308      	adds	r3, #8
 8017d7e:	2214      	movs	r2, #20
 8017d80:	4619      	mov	r1, r3
 8017d82:	f001 fda9 	bl	80198d8 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8017d86:	2101      	movs	r1, #1
 8017d88:	69b8      	ldr	r0, [r7, #24]
 8017d8a:	f7ff fc3d 	bl	8017608 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8017d8e:	69b8      	ldr	r0, [r7, #24]
 8017d90:	f7f8 fd9a 	bl	80108c8 <pbuf_clen>
 8017d94:	4603      	mov	r3, r0
 8017d96:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017d98:	8bfa      	ldrh	r2, [r7, #30]
 8017d9a:	8a7b      	ldrh	r3, [r7, #18]
 8017d9c:	4413      	add	r3, r2
 8017d9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017da2:	db05      	blt.n	8017db0 <ip_reass_free_complete_datagram+0x98>
 8017da4:	4b27      	ldr	r3, [pc, #156]	; (8017e44 <ip_reass_free_complete_datagram+0x12c>)
 8017da6:	22bc      	movs	r2, #188	; 0xbc
 8017da8:	492a      	ldr	r1, [pc, #168]	; (8017e54 <ip_reass_free_complete_datagram+0x13c>)
 8017daa:	4828      	ldr	r0, [pc, #160]	; (8017e4c <ip_reass_free_complete_datagram+0x134>)
 8017dac:	f001 fbc6 	bl	801953c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017db0:	8bfa      	ldrh	r2, [r7, #30]
 8017db2:	8a7b      	ldrh	r3, [r7, #18]
 8017db4:	4413      	add	r3, r2
 8017db6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8017db8:	69b8      	ldr	r0, [r7, #24]
 8017dba:	f7f8 fcfd 	bl	80107b8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8017dbe:	687b      	ldr	r3, [r7, #4]
 8017dc0:	685b      	ldr	r3, [r3, #4]
 8017dc2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8017dc4:	e01f      	b.n	8017e06 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8017dc6:	69bb      	ldr	r3, [r7, #24]
 8017dc8:	685b      	ldr	r3, [r3, #4]
 8017dca:	617b      	str	r3, [r7, #20]
    pcur = p;
 8017dcc:	69bb      	ldr	r3, [r7, #24]
 8017dce:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8017dd0:	697b      	ldr	r3, [r7, #20]
 8017dd2:	681b      	ldr	r3, [r3, #0]
 8017dd4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8017dd6:	68f8      	ldr	r0, [r7, #12]
 8017dd8:	f7f8 fd76 	bl	80108c8 <pbuf_clen>
 8017ddc:	4603      	mov	r3, r0
 8017dde:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017de0:	8bfa      	ldrh	r2, [r7, #30]
 8017de2:	8a7b      	ldrh	r3, [r7, #18]
 8017de4:	4413      	add	r3, r2
 8017de6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017dea:	db05      	blt.n	8017df8 <ip_reass_free_complete_datagram+0xe0>
 8017dec:	4b15      	ldr	r3, [pc, #84]	; (8017e44 <ip_reass_free_complete_datagram+0x12c>)
 8017dee:	22cc      	movs	r2, #204	; 0xcc
 8017df0:	4918      	ldr	r1, [pc, #96]	; (8017e54 <ip_reass_free_complete_datagram+0x13c>)
 8017df2:	4816      	ldr	r0, [pc, #88]	; (8017e4c <ip_reass_free_complete_datagram+0x134>)
 8017df4:	f001 fba2 	bl	801953c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017df8:	8bfa      	ldrh	r2, [r7, #30]
 8017dfa:	8a7b      	ldrh	r3, [r7, #18]
 8017dfc:	4413      	add	r3, r2
 8017dfe:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8017e00:	68f8      	ldr	r0, [r7, #12]
 8017e02:	f7f8 fcd9 	bl	80107b8 <pbuf_free>
  while (p != NULL) {
 8017e06:	69bb      	ldr	r3, [r7, #24]
 8017e08:	2b00      	cmp	r3, #0
 8017e0a:	d1dc      	bne.n	8017dc6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8017e0c:	6839      	ldr	r1, [r7, #0]
 8017e0e:	6878      	ldr	r0, [r7, #4]
 8017e10:	f000 f8c2 	bl	8017f98 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8017e14:	4b10      	ldr	r3, [pc, #64]	; (8017e58 <ip_reass_free_complete_datagram+0x140>)
 8017e16:	881b      	ldrh	r3, [r3, #0]
 8017e18:	8bfa      	ldrh	r2, [r7, #30]
 8017e1a:	429a      	cmp	r2, r3
 8017e1c:	d905      	bls.n	8017e2a <ip_reass_free_complete_datagram+0x112>
 8017e1e:	4b09      	ldr	r3, [pc, #36]	; (8017e44 <ip_reass_free_complete_datagram+0x12c>)
 8017e20:	22d2      	movs	r2, #210	; 0xd2
 8017e22:	490e      	ldr	r1, [pc, #56]	; (8017e5c <ip_reass_free_complete_datagram+0x144>)
 8017e24:	4809      	ldr	r0, [pc, #36]	; (8017e4c <ip_reass_free_complete_datagram+0x134>)
 8017e26:	f001 fb89 	bl	801953c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8017e2a:	4b0b      	ldr	r3, [pc, #44]	; (8017e58 <ip_reass_free_complete_datagram+0x140>)
 8017e2c:	881a      	ldrh	r2, [r3, #0]
 8017e2e:	8bfb      	ldrh	r3, [r7, #30]
 8017e30:	1ad3      	subs	r3, r2, r3
 8017e32:	b29a      	uxth	r2, r3
 8017e34:	4b08      	ldr	r3, [pc, #32]	; (8017e58 <ip_reass_free_complete_datagram+0x140>)
 8017e36:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8017e38:	8bfb      	ldrh	r3, [r7, #30]
}
 8017e3a:	4618      	mov	r0, r3
 8017e3c:	3720      	adds	r7, #32
 8017e3e:	46bd      	mov	sp, r7
 8017e40:	bd80      	pop	{r7, pc}
 8017e42:	bf00      	nop
 8017e44:	0801e3fc 	.word	0x0801e3fc
 8017e48:	0801e438 	.word	0x0801e438
 8017e4c:	0801e444 	.word	0x0801e444
 8017e50:	0801e46c 	.word	0x0801e46c
 8017e54:	0801e480 	.word	0x0801e480
 8017e58:	20008220 	.word	0x20008220
 8017e5c:	0801e4a0 	.word	0x0801e4a0

08017e60 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8017e60:	b580      	push	{r7, lr}
 8017e62:	b08a      	sub	sp, #40	; 0x28
 8017e64:	af00      	add	r7, sp, #0
 8017e66:	6078      	str	r0, [r7, #4]
 8017e68:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8017e6a:	2300      	movs	r3, #0
 8017e6c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8017e6e:	2300      	movs	r3, #0
 8017e70:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8017e72:	2300      	movs	r3, #0
 8017e74:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8017e76:	2300      	movs	r3, #0
 8017e78:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8017e7a:	2300      	movs	r3, #0
 8017e7c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8017e7e:	4b28      	ldr	r3, [pc, #160]	; (8017f20 <ip_reass_remove_oldest_datagram+0xc0>)
 8017e80:	681b      	ldr	r3, [r3, #0]
 8017e82:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017e84:	e030      	b.n	8017ee8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8017e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e88:	695a      	ldr	r2, [r3, #20]
 8017e8a:	687b      	ldr	r3, [r7, #4]
 8017e8c:	68db      	ldr	r3, [r3, #12]
 8017e8e:	429a      	cmp	r2, r3
 8017e90:	d10c      	bne.n	8017eac <ip_reass_remove_oldest_datagram+0x4c>
 8017e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e94:	699a      	ldr	r2, [r3, #24]
 8017e96:	687b      	ldr	r3, [r7, #4]
 8017e98:	691b      	ldr	r3, [r3, #16]
 8017e9a:	429a      	cmp	r2, r3
 8017e9c:	d106      	bne.n	8017eac <ip_reass_remove_oldest_datagram+0x4c>
 8017e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ea0:	899a      	ldrh	r2, [r3, #12]
 8017ea2:	687b      	ldr	r3, [r7, #4]
 8017ea4:	889b      	ldrh	r3, [r3, #4]
 8017ea6:	b29b      	uxth	r3, r3
 8017ea8:	429a      	cmp	r2, r3
 8017eaa:	d014      	beq.n	8017ed6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8017eac:	693b      	ldr	r3, [r7, #16]
 8017eae:	3301      	adds	r3, #1
 8017eb0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8017eb2:	6a3b      	ldr	r3, [r7, #32]
 8017eb4:	2b00      	cmp	r3, #0
 8017eb6:	d104      	bne.n	8017ec2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8017eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017eba:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017ebc:	69fb      	ldr	r3, [r7, #28]
 8017ebe:	61bb      	str	r3, [r7, #24]
 8017ec0:	e009      	b.n	8017ed6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8017ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ec4:	7fda      	ldrb	r2, [r3, #31]
 8017ec6:	6a3b      	ldr	r3, [r7, #32]
 8017ec8:	7fdb      	ldrb	r3, [r3, #31]
 8017eca:	429a      	cmp	r2, r3
 8017ecc:	d803      	bhi.n	8017ed6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8017ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ed0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017ed2:	69fb      	ldr	r3, [r7, #28]
 8017ed4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8017ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ed8:	681b      	ldr	r3, [r3, #0]
 8017eda:	2b00      	cmp	r3, #0
 8017edc:	d001      	beq.n	8017ee2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8017ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ee0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8017ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ee4:	681b      	ldr	r3, [r3, #0]
 8017ee6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017eea:	2b00      	cmp	r3, #0
 8017eec:	d1cb      	bne.n	8017e86 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8017eee:	6a3b      	ldr	r3, [r7, #32]
 8017ef0:	2b00      	cmp	r3, #0
 8017ef2:	d008      	beq.n	8017f06 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8017ef4:	69b9      	ldr	r1, [r7, #24]
 8017ef6:	6a38      	ldr	r0, [r7, #32]
 8017ef8:	f7ff ff0e 	bl	8017d18 <ip_reass_free_complete_datagram>
 8017efc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8017efe:	697a      	ldr	r2, [r7, #20]
 8017f00:	68fb      	ldr	r3, [r7, #12]
 8017f02:	4413      	add	r3, r2
 8017f04:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8017f06:	697a      	ldr	r2, [r7, #20]
 8017f08:	683b      	ldr	r3, [r7, #0]
 8017f0a:	429a      	cmp	r2, r3
 8017f0c:	da02      	bge.n	8017f14 <ip_reass_remove_oldest_datagram+0xb4>
 8017f0e:	693b      	ldr	r3, [r7, #16]
 8017f10:	2b01      	cmp	r3, #1
 8017f12:	dcac      	bgt.n	8017e6e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8017f14:	697b      	ldr	r3, [r7, #20]
}
 8017f16:	4618      	mov	r0, r3
 8017f18:	3728      	adds	r7, #40	; 0x28
 8017f1a:	46bd      	mov	sp, r7
 8017f1c:	bd80      	pop	{r7, pc}
 8017f1e:	bf00      	nop
 8017f20:	2000821c 	.word	0x2000821c

08017f24 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8017f24:	b580      	push	{r7, lr}
 8017f26:	b084      	sub	sp, #16
 8017f28:	af00      	add	r7, sp, #0
 8017f2a:	6078      	str	r0, [r7, #4]
 8017f2c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017f2e:	2004      	movs	r0, #4
 8017f30:	f7f7 fd7c 	bl	800fa2c <memp_malloc>
 8017f34:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8017f36:	68fb      	ldr	r3, [r7, #12]
 8017f38:	2b00      	cmp	r3, #0
 8017f3a:	d110      	bne.n	8017f5e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8017f3c:	6839      	ldr	r1, [r7, #0]
 8017f3e:	6878      	ldr	r0, [r7, #4]
 8017f40:	f7ff ff8e 	bl	8017e60 <ip_reass_remove_oldest_datagram>
 8017f44:	4602      	mov	r2, r0
 8017f46:	683b      	ldr	r3, [r7, #0]
 8017f48:	4293      	cmp	r3, r2
 8017f4a:	dc03      	bgt.n	8017f54 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017f4c:	2004      	movs	r0, #4
 8017f4e:	f7f7 fd6d 	bl	800fa2c <memp_malloc>
 8017f52:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8017f54:	68fb      	ldr	r3, [r7, #12]
 8017f56:	2b00      	cmp	r3, #0
 8017f58:	d101      	bne.n	8017f5e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8017f5a:	2300      	movs	r3, #0
 8017f5c:	e016      	b.n	8017f8c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8017f5e:	2220      	movs	r2, #32
 8017f60:	2100      	movs	r1, #0
 8017f62:	68f8      	ldr	r0, [r7, #12]
 8017f64:	f001 fc40 	bl	80197e8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8017f68:	68fb      	ldr	r3, [r7, #12]
 8017f6a:	220f      	movs	r2, #15
 8017f6c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8017f6e:	4b09      	ldr	r3, [pc, #36]	; (8017f94 <ip_reass_enqueue_new_datagram+0x70>)
 8017f70:	681a      	ldr	r2, [r3, #0]
 8017f72:	68fb      	ldr	r3, [r7, #12]
 8017f74:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8017f76:	4a07      	ldr	r2, [pc, #28]	; (8017f94 <ip_reass_enqueue_new_datagram+0x70>)
 8017f78:	68fb      	ldr	r3, [r7, #12]
 8017f7a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8017f7c:	68fb      	ldr	r3, [r7, #12]
 8017f7e:	3308      	adds	r3, #8
 8017f80:	2214      	movs	r2, #20
 8017f82:	6879      	ldr	r1, [r7, #4]
 8017f84:	4618      	mov	r0, r3
 8017f86:	f001 fca7 	bl	80198d8 <memcpy>
  return ipr;
 8017f8a:	68fb      	ldr	r3, [r7, #12]
}
 8017f8c:	4618      	mov	r0, r3
 8017f8e:	3710      	adds	r7, #16
 8017f90:	46bd      	mov	sp, r7
 8017f92:	bd80      	pop	{r7, pc}
 8017f94:	2000821c 	.word	0x2000821c

08017f98 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017f98:	b580      	push	{r7, lr}
 8017f9a:	b082      	sub	sp, #8
 8017f9c:	af00      	add	r7, sp, #0
 8017f9e:	6078      	str	r0, [r7, #4]
 8017fa0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8017fa2:	4b10      	ldr	r3, [pc, #64]	; (8017fe4 <ip_reass_dequeue_datagram+0x4c>)
 8017fa4:	681b      	ldr	r3, [r3, #0]
 8017fa6:	687a      	ldr	r2, [r7, #4]
 8017fa8:	429a      	cmp	r2, r3
 8017faa:	d104      	bne.n	8017fb6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8017fac:	687b      	ldr	r3, [r7, #4]
 8017fae:	681b      	ldr	r3, [r3, #0]
 8017fb0:	4a0c      	ldr	r2, [pc, #48]	; (8017fe4 <ip_reass_dequeue_datagram+0x4c>)
 8017fb2:	6013      	str	r3, [r2, #0]
 8017fb4:	e00d      	b.n	8017fd2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8017fb6:	683b      	ldr	r3, [r7, #0]
 8017fb8:	2b00      	cmp	r3, #0
 8017fba:	d106      	bne.n	8017fca <ip_reass_dequeue_datagram+0x32>
 8017fbc:	4b0a      	ldr	r3, [pc, #40]	; (8017fe8 <ip_reass_dequeue_datagram+0x50>)
 8017fbe:	f240 1245 	movw	r2, #325	; 0x145
 8017fc2:	490a      	ldr	r1, [pc, #40]	; (8017fec <ip_reass_dequeue_datagram+0x54>)
 8017fc4:	480a      	ldr	r0, [pc, #40]	; (8017ff0 <ip_reass_dequeue_datagram+0x58>)
 8017fc6:	f001 fab9 	bl	801953c <iprintf>
    prev->next = ipr->next;
 8017fca:	687b      	ldr	r3, [r7, #4]
 8017fcc:	681a      	ldr	r2, [r3, #0]
 8017fce:	683b      	ldr	r3, [r7, #0]
 8017fd0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8017fd2:	6879      	ldr	r1, [r7, #4]
 8017fd4:	2004      	movs	r0, #4
 8017fd6:	f7f7 fd99 	bl	800fb0c <memp_free>
}
 8017fda:	bf00      	nop
 8017fdc:	3708      	adds	r7, #8
 8017fde:	46bd      	mov	sp, r7
 8017fe0:	bd80      	pop	{r7, pc}
 8017fe2:	bf00      	nop
 8017fe4:	2000821c 	.word	0x2000821c
 8017fe8:	0801e3fc 	.word	0x0801e3fc
 8017fec:	0801e4c4 	.word	0x0801e4c4
 8017ff0:	0801e444 	.word	0x0801e444

08017ff4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8017ff4:	b580      	push	{r7, lr}
 8017ff6:	b08c      	sub	sp, #48	; 0x30
 8017ff8:	af00      	add	r7, sp, #0
 8017ffa:	60f8      	str	r0, [r7, #12]
 8017ffc:	60b9      	str	r1, [r7, #8]
 8017ffe:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8018000:	2300      	movs	r3, #0
 8018002:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8018004:	2301      	movs	r3, #1
 8018006:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8018008:	68bb      	ldr	r3, [r7, #8]
 801800a:	685b      	ldr	r3, [r3, #4]
 801800c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801800e:	69fb      	ldr	r3, [r7, #28]
 8018010:	885b      	ldrh	r3, [r3, #2]
 8018012:	b29b      	uxth	r3, r3
 8018014:	4618      	mov	r0, r3
 8018016:	f7f6 ffd9 	bl	800efcc <lwip_htons>
 801801a:	4603      	mov	r3, r0
 801801c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801801e:	69fb      	ldr	r3, [r7, #28]
 8018020:	781b      	ldrb	r3, [r3, #0]
 8018022:	f003 030f 	and.w	r3, r3, #15
 8018026:	b2db      	uxtb	r3, r3
 8018028:	009b      	lsls	r3, r3, #2
 801802a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801802c:	7e7b      	ldrb	r3, [r7, #25]
 801802e:	b29b      	uxth	r3, r3
 8018030:	8b7a      	ldrh	r2, [r7, #26]
 8018032:	429a      	cmp	r2, r3
 8018034:	d202      	bcs.n	801803c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018036:	f04f 33ff 	mov.w	r3, #4294967295
 801803a:	e135      	b.n	80182a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801803c:	7e7b      	ldrb	r3, [r7, #25]
 801803e:	b29b      	uxth	r3, r3
 8018040:	8b7a      	ldrh	r2, [r7, #26]
 8018042:	1ad3      	subs	r3, r2, r3
 8018044:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8018046:	69fb      	ldr	r3, [r7, #28]
 8018048:	88db      	ldrh	r3, [r3, #6]
 801804a:	b29b      	uxth	r3, r3
 801804c:	4618      	mov	r0, r3
 801804e:	f7f6 ffbd 	bl	800efcc <lwip_htons>
 8018052:	4603      	mov	r3, r0
 8018054:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018058:	b29b      	uxth	r3, r3
 801805a:	00db      	lsls	r3, r3, #3
 801805c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801805e:	68bb      	ldr	r3, [r7, #8]
 8018060:	685b      	ldr	r3, [r3, #4]
 8018062:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8018064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018066:	2200      	movs	r2, #0
 8018068:	701a      	strb	r2, [r3, #0]
 801806a:	2200      	movs	r2, #0
 801806c:	705a      	strb	r2, [r3, #1]
 801806e:	2200      	movs	r2, #0
 8018070:	709a      	strb	r2, [r3, #2]
 8018072:	2200      	movs	r2, #0
 8018074:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8018076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018078:	8afa      	ldrh	r2, [r7, #22]
 801807a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801807c:	8afa      	ldrh	r2, [r7, #22]
 801807e:	8b7b      	ldrh	r3, [r7, #26]
 8018080:	4413      	add	r3, r2
 8018082:	b29a      	uxth	r2, r3
 8018084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018086:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8018088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801808a:	88db      	ldrh	r3, [r3, #6]
 801808c:	b29b      	uxth	r3, r3
 801808e:	8afa      	ldrh	r2, [r7, #22]
 8018090:	429a      	cmp	r2, r3
 8018092:	d902      	bls.n	801809a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018094:	f04f 33ff 	mov.w	r3, #4294967295
 8018098:	e106      	b.n	80182a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801809a:	68fb      	ldr	r3, [r7, #12]
 801809c:	685b      	ldr	r3, [r3, #4]
 801809e:	627b      	str	r3, [r7, #36]	; 0x24
 80180a0:	e068      	b.n	8018174 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80180a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180a4:	685b      	ldr	r3, [r3, #4]
 80180a6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80180a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180aa:	889b      	ldrh	r3, [r3, #4]
 80180ac:	b29a      	uxth	r2, r3
 80180ae:	693b      	ldr	r3, [r7, #16]
 80180b0:	889b      	ldrh	r3, [r3, #4]
 80180b2:	b29b      	uxth	r3, r3
 80180b4:	429a      	cmp	r2, r3
 80180b6:	d235      	bcs.n	8018124 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80180b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80180bc:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80180be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180c0:	2b00      	cmp	r3, #0
 80180c2:	d020      	beq.n	8018106 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80180c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180c6:	889b      	ldrh	r3, [r3, #4]
 80180c8:	b29a      	uxth	r2, r3
 80180ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180cc:	88db      	ldrh	r3, [r3, #6]
 80180ce:	b29b      	uxth	r3, r3
 80180d0:	429a      	cmp	r2, r3
 80180d2:	d307      	bcc.n	80180e4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80180d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180d6:	88db      	ldrh	r3, [r3, #6]
 80180d8:	b29a      	uxth	r2, r3
 80180da:	693b      	ldr	r3, [r7, #16]
 80180dc:	889b      	ldrh	r3, [r3, #4]
 80180de:	b29b      	uxth	r3, r3
 80180e0:	429a      	cmp	r2, r3
 80180e2:	d902      	bls.n	80180ea <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80180e4:	f04f 33ff 	mov.w	r3, #4294967295
 80180e8:	e0de      	b.n	80182a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80180ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180ec:	68ba      	ldr	r2, [r7, #8]
 80180ee:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80180f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180f2:	88db      	ldrh	r3, [r3, #6]
 80180f4:	b29a      	uxth	r2, r3
 80180f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180f8:	889b      	ldrh	r3, [r3, #4]
 80180fa:	b29b      	uxth	r3, r3
 80180fc:	429a      	cmp	r2, r3
 80180fe:	d03d      	beq.n	801817c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8018100:	2300      	movs	r3, #0
 8018102:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8018104:	e03a      	b.n	801817c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8018106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018108:	88db      	ldrh	r3, [r3, #6]
 801810a:	b29a      	uxth	r2, r3
 801810c:	693b      	ldr	r3, [r7, #16]
 801810e:	889b      	ldrh	r3, [r3, #4]
 8018110:	b29b      	uxth	r3, r3
 8018112:	429a      	cmp	r2, r3
 8018114:	d902      	bls.n	801811c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018116:	f04f 33ff 	mov.w	r3, #4294967295
 801811a:	e0c5      	b.n	80182a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801811c:	68fb      	ldr	r3, [r7, #12]
 801811e:	68ba      	ldr	r2, [r7, #8]
 8018120:	605a      	str	r2, [r3, #4]
      break;
 8018122:	e02b      	b.n	801817c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8018124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018126:	889b      	ldrh	r3, [r3, #4]
 8018128:	b29a      	uxth	r2, r3
 801812a:	693b      	ldr	r3, [r7, #16]
 801812c:	889b      	ldrh	r3, [r3, #4]
 801812e:	b29b      	uxth	r3, r3
 8018130:	429a      	cmp	r2, r3
 8018132:	d102      	bne.n	801813a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018134:	f04f 33ff 	mov.w	r3, #4294967295
 8018138:	e0b6      	b.n	80182a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801813a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801813c:	889b      	ldrh	r3, [r3, #4]
 801813e:	b29a      	uxth	r2, r3
 8018140:	693b      	ldr	r3, [r7, #16]
 8018142:	88db      	ldrh	r3, [r3, #6]
 8018144:	b29b      	uxth	r3, r3
 8018146:	429a      	cmp	r2, r3
 8018148:	d202      	bcs.n	8018150 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801814a:	f04f 33ff 	mov.w	r3, #4294967295
 801814e:	e0ab      	b.n	80182a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8018150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018152:	2b00      	cmp	r3, #0
 8018154:	d009      	beq.n	801816a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8018156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018158:	88db      	ldrh	r3, [r3, #6]
 801815a:	b29a      	uxth	r2, r3
 801815c:	693b      	ldr	r3, [r7, #16]
 801815e:	889b      	ldrh	r3, [r3, #4]
 8018160:	b29b      	uxth	r3, r3
 8018162:	429a      	cmp	r2, r3
 8018164:	d001      	beq.n	801816a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8018166:	2300      	movs	r3, #0
 8018168:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801816a:	693b      	ldr	r3, [r7, #16]
 801816c:	681b      	ldr	r3, [r3, #0]
 801816e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8018170:	693b      	ldr	r3, [r7, #16]
 8018172:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8018174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018176:	2b00      	cmp	r3, #0
 8018178:	d193      	bne.n	80180a2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801817a:	e000      	b.n	801817e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801817c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801817e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018180:	2b00      	cmp	r3, #0
 8018182:	d12d      	bne.n	80181e0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8018184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018186:	2b00      	cmp	r3, #0
 8018188:	d01c      	beq.n	80181c4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801818a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801818c:	88db      	ldrh	r3, [r3, #6]
 801818e:	b29a      	uxth	r2, r3
 8018190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018192:	889b      	ldrh	r3, [r3, #4]
 8018194:	b29b      	uxth	r3, r3
 8018196:	429a      	cmp	r2, r3
 8018198:	d906      	bls.n	80181a8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801819a:	4b45      	ldr	r3, [pc, #276]	; (80182b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801819c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80181a0:	4944      	ldr	r1, [pc, #272]	; (80182b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80181a2:	4845      	ldr	r0, [pc, #276]	; (80182b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80181a4:	f001 f9ca 	bl	801953c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80181a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181aa:	68ba      	ldr	r2, [r7, #8]
 80181ac:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80181ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181b0:	88db      	ldrh	r3, [r3, #6]
 80181b2:	b29a      	uxth	r2, r3
 80181b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181b6:	889b      	ldrh	r3, [r3, #4]
 80181b8:	b29b      	uxth	r3, r3
 80181ba:	429a      	cmp	r2, r3
 80181bc:	d010      	beq.n	80181e0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80181be:	2300      	movs	r3, #0
 80181c0:	623b      	str	r3, [r7, #32]
 80181c2:	e00d      	b.n	80181e0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80181c4:	68fb      	ldr	r3, [r7, #12]
 80181c6:	685b      	ldr	r3, [r3, #4]
 80181c8:	2b00      	cmp	r3, #0
 80181ca:	d006      	beq.n	80181da <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80181cc:	4b38      	ldr	r3, [pc, #224]	; (80182b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80181ce:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80181d2:	493a      	ldr	r1, [pc, #232]	; (80182bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80181d4:	4838      	ldr	r0, [pc, #224]	; (80182b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80181d6:	f001 f9b1 	bl	801953c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80181da:	68fb      	ldr	r3, [r7, #12]
 80181dc:	68ba      	ldr	r2, [r7, #8]
 80181de:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80181e0:	687b      	ldr	r3, [r7, #4]
 80181e2:	2b00      	cmp	r3, #0
 80181e4:	d105      	bne.n	80181f2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80181e6:	68fb      	ldr	r3, [r7, #12]
 80181e8:	7f9b      	ldrb	r3, [r3, #30]
 80181ea:	f003 0301 	and.w	r3, r3, #1
 80181ee:	2b00      	cmp	r3, #0
 80181f0:	d059      	beq.n	80182a6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80181f2:	6a3b      	ldr	r3, [r7, #32]
 80181f4:	2b00      	cmp	r3, #0
 80181f6:	d04f      	beq.n	8018298 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80181f8:	68fb      	ldr	r3, [r7, #12]
 80181fa:	685b      	ldr	r3, [r3, #4]
 80181fc:	2b00      	cmp	r3, #0
 80181fe:	d006      	beq.n	801820e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8018200:	68fb      	ldr	r3, [r7, #12]
 8018202:	685b      	ldr	r3, [r3, #4]
 8018204:	685b      	ldr	r3, [r3, #4]
 8018206:	889b      	ldrh	r3, [r3, #4]
 8018208:	b29b      	uxth	r3, r3
 801820a:	2b00      	cmp	r3, #0
 801820c:	d002      	beq.n	8018214 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801820e:	2300      	movs	r3, #0
 8018210:	623b      	str	r3, [r7, #32]
 8018212:	e041      	b.n	8018298 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8018214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018216:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8018218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801821a:	681b      	ldr	r3, [r3, #0]
 801821c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801821e:	e012      	b.n	8018246 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8018220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018222:	685b      	ldr	r3, [r3, #4]
 8018224:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8018226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018228:	88db      	ldrh	r3, [r3, #6]
 801822a:	b29a      	uxth	r2, r3
 801822c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801822e:	889b      	ldrh	r3, [r3, #4]
 8018230:	b29b      	uxth	r3, r3
 8018232:	429a      	cmp	r2, r3
 8018234:	d002      	beq.n	801823c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8018236:	2300      	movs	r3, #0
 8018238:	623b      	str	r3, [r7, #32]
            break;
 801823a:	e007      	b.n	801824c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801823c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801823e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8018240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018242:	681b      	ldr	r3, [r3, #0]
 8018244:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8018246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018248:	2b00      	cmp	r3, #0
 801824a:	d1e9      	bne.n	8018220 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801824c:	6a3b      	ldr	r3, [r7, #32]
 801824e:	2b00      	cmp	r3, #0
 8018250:	d022      	beq.n	8018298 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8018252:	68fb      	ldr	r3, [r7, #12]
 8018254:	685b      	ldr	r3, [r3, #4]
 8018256:	2b00      	cmp	r3, #0
 8018258:	d106      	bne.n	8018268 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801825a:	4b15      	ldr	r3, [pc, #84]	; (80182b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801825c:	f240 12df 	movw	r2, #479	; 0x1df
 8018260:	4917      	ldr	r1, [pc, #92]	; (80182c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018262:	4815      	ldr	r0, [pc, #84]	; (80182b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018264:	f001 f96a 	bl	801953c <iprintf>
          LWIP_ASSERT("sanity check",
 8018268:	68fb      	ldr	r3, [r7, #12]
 801826a:	685b      	ldr	r3, [r3, #4]
 801826c:	685b      	ldr	r3, [r3, #4]
 801826e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018270:	429a      	cmp	r2, r3
 8018272:	d106      	bne.n	8018282 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8018274:	4b0e      	ldr	r3, [pc, #56]	; (80182b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018276:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801827a:	4911      	ldr	r1, [pc, #68]	; (80182c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801827c:	480e      	ldr	r0, [pc, #56]	; (80182b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801827e:	f001 f95d 	bl	801953c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8018282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018284:	681b      	ldr	r3, [r3, #0]
 8018286:	2b00      	cmp	r3, #0
 8018288:	d006      	beq.n	8018298 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801828a:	4b09      	ldr	r3, [pc, #36]	; (80182b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801828c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8018290:	490c      	ldr	r1, [pc, #48]	; (80182c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8018292:	4809      	ldr	r0, [pc, #36]	; (80182b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018294:	f001 f952 	bl	801953c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8018298:	6a3b      	ldr	r3, [r7, #32]
 801829a:	2b00      	cmp	r3, #0
 801829c:	bf14      	ite	ne
 801829e:	2301      	movne	r3, #1
 80182a0:	2300      	moveq	r3, #0
 80182a2:	b2db      	uxtb	r3, r3
 80182a4:	e000      	b.n	80182a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80182a6:	2300      	movs	r3, #0
}
 80182a8:	4618      	mov	r0, r3
 80182aa:	3730      	adds	r7, #48	; 0x30
 80182ac:	46bd      	mov	sp, r7
 80182ae:	bd80      	pop	{r7, pc}
 80182b0:	0801e3fc 	.word	0x0801e3fc
 80182b4:	0801e4e0 	.word	0x0801e4e0
 80182b8:	0801e444 	.word	0x0801e444
 80182bc:	0801e500 	.word	0x0801e500
 80182c0:	0801e538 	.word	0x0801e538
 80182c4:	0801e548 	.word	0x0801e548

080182c8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80182c8:	b580      	push	{r7, lr}
 80182ca:	b08e      	sub	sp, #56	; 0x38
 80182cc:	af00      	add	r7, sp, #0
 80182ce:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80182d0:	687b      	ldr	r3, [r7, #4]
 80182d2:	685b      	ldr	r3, [r3, #4]
 80182d4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80182d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182d8:	781b      	ldrb	r3, [r3, #0]
 80182da:	f003 030f 	and.w	r3, r3, #15
 80182de:	b2db      	uxtb	r3, r3
 80182e0:	009b      	lsls	r3, r3, #2
 80182e2:	b2db      	uxtb	r3, r3
 80182e4:	2b14      	cmp	r3, #20
 80182e6:	f040 8171 	bne.w	80185cc <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80182ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182ec:	88db      	ldrh	r3, [r3, #6]
 80182ee:	b29b      	uxth	r3, r3
 80182f0:	4618      	mov	r0, r3
 80182f2:	f7f6 fe6b 	bl	800efcc <lwip_htons>
 80182f6:	4603      	mov	r3, r0
 80182f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80182fc:	b29b      	uxth	r3, r3
 80182fe:	00db      	lsls	r3, r3, #3
 8018300:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8018302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018304:	885b      	ldrh	r3, [r3, #2]
 8018306:	b29b      	uxth	r3, r3
 8018308:	4618      	mov	r0, r3
 801830a:	f7f6 fe5f 	bl	800efcc <lwip_htons>
 801830e:	4603      	mov	r3, r0
 8018310:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8018312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018314:	781b      	ldrb	r3, [r3, #0]
 8018316:	f003 030f 	and.w	r3, r3, #15
 801831a:	b2db      	uxtb	r3, r3
 801831c:	009b      	lsls	r3, r3, #2
 801831e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8018322:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018326:	b29b      	uxth	r3, r3
 8018328:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801832a:	429a      	cmp	r2, r3
 801832c:	f0c0 8150 	bcc.w	80185d0 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8018330:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018334:	b29b      	uxth	r3, r3
 8018336:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018338:	1ad3      	subs	r3, r2, r3
 801833a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801833c:	6878      	ldr	r0, [r7, #4]
 801833e:	f7f8 fac3 	bl	80108c8 <pbuf_clen>
 8018342:	4603      	mov	r3, r0
 8018344:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8018346:	4b8c      	ldr	r3, [pc, #560]	; (8018578 <ip4_reass+0x2b0>)
 8018348:	881b      	ldrh	r3, [r3, #0]
 801834a:	461a      	mov	r2, r3
 801834c:	8c3b      	ldrh	r3, [r7, #32]
 801834e:	4413      	add	r3, r2
 8018350:	2b0a      	cmp	r3, #10
 8018352:	dd10      	ble.n	8018376 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018354:	8c3b      	ldrh	r3, [r7, #32]
 8018356:	4619      	mov	r1, r3
 8018358:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801835a:	f7ff fd81 	bl	8017e60 <ip_reass_remove_oldest_datagram>
 801835e:	4603      	mov	r3, r0
 8018360:	2b00      	cmp	r3, #0
 8018362:	f000 8137 	beq.w	80185d4 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8018366:	4b84      	ldr	r3, [pc, #528]	; (8018578 <ip4_reass+0x2b0>)
 8018368:	881b      	ldrh	r3, [r3, #0]
 801836a:	461a      	mov	r2, r3
 801836c:	8c3b      	ldrh	r3, [r7, #32]
 801836e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018370:	2b0a      	cmp	r3, #10
 8018372:	f300 812f 	bgt.w	80185d4 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018376:	4b81      	ldr	r3, [pc, #516]	; (801857c <ip4_reass+0x2b4>)
 8018378:	681b      	ldr	r3, [r3, #0]
 801837a:	633b      	str	r3, [r7, #48]	; 0x30
 801837c:	e015      	b.n	80183aa <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801837e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018380:	695a      	ldr	r2, [r3, #20]
 8018382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018384:	68db      	ldr	r3, [r3, #12]
 8018386:	429a      	cmp	r2, r3
 8018388:	d10c      	bne.n	80183a4 <ip4_reass+0xdc>
 801838a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801838c:	699a      	ldr	r2, [r3, #24]
 801838e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018390:	691b      	ldr	r3, [r3, #16]
 8018392:	429a      	cmp	r2, r3
 8018394:	d106      	bne.n	80183a4 <ip4_reass+0xdc>
 8018396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018398:	899a      	ldrh	r2, [r3, #12]
 801839a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801839c:	889b      	ldrh	r3, [r3, #4]
 801839e:	b29b      	uxth	r3, r3
 80183a0:	429a      	cmp	r2, r3
 80183a2:	d006      	beq.n	80183b2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80183a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183a6:	681b      	ldr	r3, [r3, #0]
 80183a8:	633b      	str	r3, [r7, #48]	; 0x30
 80183aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183ac:	2b00      	cmp	r3, #0
 80183ae:	d1e6      	bne.n	801837e <ip4_reass+0xb6>
 80183b0:	e000      	b.n	80183b4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80183b2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80183b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183b6:	2b00      	cmp	r3, #0
 80183b8:	d109      	bne.n	80183ce <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80183ba:	8c3b      	ldrh	r3, [r7, #32]
 80183bc:	4619      	mov	r1, r3
 80183be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80183c0:	f7ff fdb0 	bl	8017f24 <ip_reass_enqueue_new_datagram>
 80183c4:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80183c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183c8:	2b00      	cmp	r3, #0
 80183ca:	d11c      	bne.n	8018406 <ip4_reass+0x13e>
      goto nullreturn;
 80183cc:	e105      	b.n	80185da <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80183ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183d0:	88db      	ldrh	r3, [r3, #6]
 80183d2:	b29b      	uxth	r3, r3
 80183d4:	4618      	mov	r0, r3
 80183d6:	f7f6 fdf9 	bl	800efcc <lwip_htons>
 80183da:	4603      	mov	r3, r0
 80183dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80183e0:	2b00      	cmp	r3, #0
 80183e2:	d110      	bne.n	8018406 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80183e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183e6:	89db      	ldrh	r3, [r3, #14]
 80183e8:	4618      	mov	r0, r3
 80183ea:	f7f6 fdef 	bl	800efcc <lwip_htons>
 80183ee:	4603      	mov	r3, r0
 80183f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80183f4:	2b00      	cmp	r3, #0
 80183f6:	d006      	beq.n	8018406 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80183f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183fa:	3308      	adds	r3, #8
 80183fc:	2214      	movs	r2, #20
 80183fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018400:	4618      	mov	r0, r3
 8018402:	f001 fa69 	bl	80198d8 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8018406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018408:	88db      	ldrh	r3, [r3, #6]
 801840a:	b29b      	uxth	r3, r3
 801840c:	f003 0320 	and.w	r3, r3, #32
 8018410:	2b00      	cmp	r3, #0
 8018412:	bf0c      	ite	eq
 8018414:	2301      	moveq	r3, #1
 8018416:	2300      	movne	r3, #0
 8018418:	b2db      	uxtb	r3, r3
 801841a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801841c:	69fb      	ldr	r3, [r7, #28]
 801841e:	2b00      	cmp	r3, #0
 8018420:	d00e      	beq.n	8018440 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8018422:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018424:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018426:	4413      	add	r3, r2
 8018428:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801842a:	8b7a      	ldrh	r2, [r7, #26]
 801842c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801842e:	429a      	cmp	r2, r3
 8018430:	f0c0 80a0 	bcc.w	8018574 <ip4_reass+0x2ac>
 8018434:	8b7b      	ldrh	r3, [r7, #26]
 8018436:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801843a:	4293      	cmp	r3, r2
 801843c:	f200 809a 	bhi.w	8018574 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8018440:	69fa      	ldr	r2, [r7, #28]
 8018442:	6879      	ldr	r1, [r7, #4]
 8018444:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018446:	f7ff fdd5 	bl	8017ff4 <ip_reass_chain_frag_into_datagram_and_validate>
 801844a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801844c:	697b      	ldr	r3, [r7, #20]
 801844e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018452:	f000 809b 	beq.w	801858c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8018456:	4b48      	ldr	r3, [pc, #288]	; (8018578 <ip4_reass+0x2b0>)
 8018458:	881a      	ldrh	r2, [r3, #0]
 801845a:	8c3b      	ldrh	r3, [r7, #32]
 801845c:	4413      	add	r3, r2
 801845e:	b29a      	uxth	r2, r3
 8018460:	4b45      	ldr	r3, [pc, #276]	; (8018578 <ip4_reass+0x2b0>)
 8018462:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8018464:	69fb      	ldr	r3, [r7, #28]
 8018466:	2b00      	cmp	r3, #0
 8018468:	d00d      	beq.n	8018486 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801846a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801846c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801846e:	4413      	add	r3, r2
 8018470:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8018472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018474:	8a7a      	ldrh	r2, [r7, #18]
 8018476:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8018478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801847a:	7f9b      	ldrb	r3, [r3, #30]
 801847c:	f043 0301 	orr.w	r3, r3, #1
 8018480:	b2da      	uxtb	r2, r3
 8018482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018484:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8018486:	697b      	ldr	r3, [r7, #20]
 8018488:	2b01      	cmp	r3, #1
 801848a:	d171      	bne.n	8018570 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801848c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801848e:	8b9b      	ldrh	r3, [r3, #28]
 8018490:	3314      	adds	r3, #20
 8018492:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8018494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018496:	685b      	ldr	r3, [r3, #4]
 8018498:	685b      	ldr	r3, [r3, #4]
 801849a:	681b      	ldr	r3, [r3, #0]
 801849c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801849e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184a0:	685b      	ldr	r3, [r3, #4]
 80184a2:	685b      	ldr	r3, [r3, #4]
 80184a4:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80184a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184a8:	3308      	adds	r3, #8
 80184aa:	2214      	movs	r2, #20
 80184ac:	4619      	mov	r1, r3
 80184ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80184b0:	f001 fa12 	bl	80198d8 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80184b4:	8a3b      	ldrh	r3, [r7, #16]
 80184b6:	4618      	mov	r0, r3
 80184b8:	f7f6 fd88 	bl	800efcc <lwip_htons>
 80184bc:	4603      	mov	r3, r0
 80184be:	461a      	mov	r2, r3
 80184c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184c2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80184c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184c6:	2200      	movs	r2, #0
 80184c8:	719a      	strb	r2, [r3, #6]
 80184ca:	2200      	movs	r2, #0
 80184cc:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80184ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184d0:	2200      	movs	r2, #0
 80184d2:	729a      	strb	r2, [r3, #10]
 80184d4:	2200      	movs	r2, #0
 80184d6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80184d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184da:	685b      	ldr	r3, [r3, #4]
 80184dc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80184de:	e00d      	b.n	80184fc <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80184e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80184e2:	685b      	ldr	r3, [r3, #4]
 80184e4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80184e6:	2114      	movs	r1, #20
 80184e8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80184ea:	f7f8 f8df 	bl	80106ac <pbuf_remove_header>
      pbuf_cat(p, r);
 80184ee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80184f0:	6878      	ldr	r0, [r7, #4]
 80184f2:	f7f8 fa23 	bl	801093c <pbuf_cat>
      r = iprh->next_pbuf;
 80184f6:	68fb      	ldr	r3, [r7, #12]
 80184f8:	681b      	ldr	r3, [r3, #0]
 80184fa:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80184fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80184fe:	2b00      	cmp	r3, #0
 8018500:	d1ee      	bne.n	80184e0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8018502:	4b1e      	ldr	r3, [pc, #120]	; (801857c <ip4_reass+0x2b4>)
 8018504:	681b      	ldr	r3, [r3, #0]
 8018506:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018508:	429a      	cmp	r2, r3
 801850a:	d102      	bne.n	8018512 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801850c:	2300      	movs	r3, #0
 801850e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018510:	e010      	b.n	8018534 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018512:	4b1a      	ldr	r3, [pc, #104]	; (801857c <ip4_reass+0x2b4>)
 8018514:	681b      	ldr	r3, [r3, #0]
 8018516:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018518:	e007      	b.n	801852a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801851a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801851c:	681b      	ldr	r3, [r3, #0]
 801851e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018520:	429a      	cmp	r2, r3
 8018522:	d006      	beq.n	8018532 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018526:	681b      	ldr	r3, [r3, #0]
 8018528:	62fb      	str	r3, [r7, #44]	; 0x2c
 801852a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801852c:	2b00      	cmp	r3, #0
 801852e:	d1f4      	bne.n	801851a <ip4_reass+0x252>
 8018530:	e000      	b.n	8018534 <ip4_reass+0x26c>
          break;
 8018532:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8018534:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018536:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018538:	f7ff fd2e 	bl	8017f98 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801853c:	6878      	ldr	r0, [r7, #4]
 801853e:	f7f8 f9c3 	bl	80108c8 <pbuf_clen>
 8018542:	4603      	mov	r3, r0
 8018544:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8018546:	4b0c      	ldr	r3, [pc, #48]	; (8018578 <ip4_reass+0x2b0>)
 8018548:	881b      	ldrh	r3, [r3, #0]
 801854a:	8c3a      	ldrh	r2, [r7, #32]
 801854c:	429a      	cmp	r2, r3
 801854e:	d906      	bls.n	801855e <ip4_reass+0x296>
 8018550:	4b0b      	ldr	r3, [pc, #44]	; (8018580 <ip4_reass+0x2b8>)
 8018552:	f240 229b 	movw	r2, #667	; 0x29b
 8018556:	490b      	ldr	r1, [pc, #44]	; (8018584 <ip4_reass+0x2bc>)
 8018558:	480b      	ldr	r0, [pc, #44]	; (8018588 <ip4_reass+0x2c0>)
 801855a:	f000 ffef 	bl	801953c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801855e:	4b06      	ldr	r3, [pc, #24]	; (8018578 <ip4_reass+0x2b0>)
 8018560:	881a      	ldrh	r2, [r3, #0]
 8018562:	8c3b      	ldrh	r3, [r7, #32]
 8018564:	1ad3      	subs	r3, r2, r3
 8018566:	b29a      	uxth	r2, r3
 8018568:	4b03      	ldr	r3, [pc, #12]	; (8018578 <ip4_reass+0x2b0>)
 801856a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801856c:	687b      	ldr	r3, [r7, #4]
 801856e:	e038      	b.n	80185e2 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8018570:	2300      	movs	r3, #0
 8018572:	e036      	b.n	80185e2 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8018574:	bf00      	nop
 8018576:	e00a      	b.n	801858e <ip4_reass+0x2c6>
 8018578:	20008220 	.word	0x20008220
 801857c:	2000821c 	.word	0x2000821c
 8018580:	0801e3fc 	.word	0x0801e3fc
 8018584:	0801e56c 	.word	0x0801e56c
 8018588:	0801e444 	.word	0x0801e444
    goto nullreturn_ipr;
 801858c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801858e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018590:	2b00      	cmp	r3, #0
 8018592:	d106      	bne.n	80185a2 <ip4_reass+0x2da>
 8018594:	4b15      	ldr	r3, [pc, #84]	; (80185ec <ip4_reass+0x324>)
 8018596:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801859a:	4915      	ldr	r1, [pc, #84]	; (80185f0 <ip4_reass+0x328>)
 801859c:	4815      	ldr	r0, [pc, #84]	; (80185f4 <ip4_reass+0x32c>)
 801859e:	f000 ffcd 	bl	801953c <iprintf>
  if (ipr->p == NULL) {
 80185a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185a4:	685b      	ldr	r3, [r3, #4]
 80185a6:	2b00      	cmp	r3, #0
 80185a8:	d116      	bne.n	80185d8 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80185aa:	4b13      	ldr	r3, [pc, #76]	; (80185f8 <ip4_reass+0x330>)
 80185ac:	681b      	ldr	r3, [r3, #0]
 80185ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80185b0:	429a      	cmp	r2, r3
 80185b2:	d006      	beq.n	80185c2 <ip4_reass+0x2fa>
 80185b4:	4b0d      	ldr	r3, [pc, #52]	; (80185ec <ip4_reass+0x324>)
 80185b6:	f240 22ab 	movw	r2, #683	; 0x2ab
 80185ba:	4910      	ldr	r1, [pc, #64]	; (80185fc <ip4_reass+0x334>)
 80185bc:	480d      	ldr	r0, [pc, #52]	; (80185f4 <ip4_reass+0x32c>)
 80185be:	f000 ffbd 	bl	801953c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80185c2:	2100      	movs	r1, #0
 80185c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80185c6:	f7ff fce7 	bl	8017f98 <ip_reass_dequeue_datagram>
 80185ca:	e006      	b.n	80185da <ip4_reass+0x312>
    goto nullreturn;
 80185cc:	bf00      	nop
 80185ce:	e004      	b.n	80185da <ip4_reass+0x312>
    goto nullreturn;
 80185d0:	bf00      	nop
 80185d2:	e002      	b.n	80185da <ip4_reass+0x312>
      goto nullreturn;
 80185d4:	bf00      	nop
 80185d6:	e000      	b.n	80185da <ip4_reass+0x312>
  }

nullreturn:
 80185d8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80185da:	6878      	ldr	r0, [r7, #4]
 80185dc:	f7f8 f8ec 	bl	80107b8 <pbuf_free>
  return NULL;
 80185e0:	2300      	movs	r3, #0
}
 80185e2:	4618      	mov	r0, r3
 80185e4:	3738      	adds	r7, #56	; 0x38
 80185e6:	46bd      	mov	sp, r7
 80185e8:	bd80      	pop	{r7, pc}
 80185ea:	bf00      	nop
 80185ec:	0801e3fc 	.word	0x0801e3fc
 80185f0:	0801e588 	.word	0x0801e588
 80185f4:	0801e444 	.word	0x0801e444
 80185f8:	2000821c 	.word	0x2000821c
 80185fc:	0801e594 	.word	0x0801e594

08018600 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8018600:	b580      	push	{r7, lr}
 8018602:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8018604:	2005      	movs	r0, #5
 8018606:	f7f7 fa11 	bl	800fa2c <memp_malloc>
 801860a:	4603      	mov	r3, r0
}
 801860c:	4618      	mov	r0, r3
 801860e:	bd80      	pop	{r7, pc}

08018610 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8018610:	b580      	push	{r7, lr}
 8018612:	b082      	sub	sp, #8
 8018614:	af00      	add	r7, sp, #0
 8018616:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8018618:	687b      	ldr	r3, [r7, #4]
 801861a:	2b00      	cmp	r3, #0
 801861c:	d106      	bne.n	801862c <ip_frag_free_pbuf_custom_ref+0x1c>
 801861e:	4b07      	ldr	r3, [pc, #28]	; (801863c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8018620:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8018624:	4906      	ldr	r1, [pc, #24]	; (8018640 <ip_frag_free_pbuf_custom_ref+0x30>)
 8018626:	4807      	ldr	r0, [pc, #28]	; (8018644 <ip_frag_free_pbuf_custom_ref+0x34>)
 8018628:	f000 ff88 	bl	801953c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801862c:	6879      	ldr	r1, [r7, #4]
 801862e:	2005      	movs	r0, #5
 8018630:	f7f7 fa6c 	bl	800fb0c <memp_free>
}
 8018634:	bf00      	nop
 8018636:	3708      	adds	r7, #8
 8018638:	46bd      	mov	sp, r7
 801863a:	bd80      	pop	{r7, pc}
 801863c:	0801e3fc 	.word	0x0801e3fc
 8018640:	0801e5b4 	.word	0x0801e5b4
 8018644:	0801e444 	.word	0x0801e444

08018648 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8018648:	b580      	push	{r7, lr}
 801864a:	b084      	sub	sp, #16
 801864c:	af00      	add	r7, sp, #0
 801864e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8018650:	687b      	ldr	r3, [r7, #4]
 8018652:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8018654:	68fb      	ldr	r3, [r7, #12]
 8018656:	2b00      	cmp	r3, #0
 8018658:	d106      	bne.n	8018668 <ipfrag_free_pbuf_custom+0x20>
 801865a:	4b11      	ldr	r3, [pc, #68]	; (80186a0 <ipfrag_free_pbuf_custom+0x58>)
 801865c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8018660:	4910      	ldr	r1, [pc, #64]	; (80186a4 <ipfrag_free_pbuf_custom+0x5c>)
 8018662:	4811      	ldr	r0, [pc, #68]	; (80186a8 <ipfrag_free_pbuf_custom+0x60>)
 8018664:	f000 ff6a 	bl	801953c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8018668:	68fa      	ldr	r2, [r7, #12]
 801866a:	687b      	ldr	r3, [r7, #4]
 801866c:	429a      	cmp	r2, r3
 801866e:	d006      	beq.n	801867e <ipfrag_free_pbuf_custom+0x36>
 8018670:	4b0b      	ldr	r3, [pc, #44]	; (80186a0 <ipfrag_free_pbuf_custom+0x58>)
 8018672:	f240 22cf 	movw	r2, #719	; 0x2cf
 8018676:	490d      	ldr	r1, [pc, #52]	; (80186ac <ipfrag_free_pbuf_custom+0x64>)
 8018678:	480b      	ldr	r0, [pc, #44]	; (80186a8 <ipfrag_free_pbuf_custom+0x60>)
 801867a:	f000 ff5f 	bl	801953c <iprintf>
  if (pcr->original != NULL) {
 801867e:	68fb      	ldr	r3, [r7, #12]
 8018680:	695b      	ldr	r3, [r3, #20]
 8018682:	2b00      	cmp	r3, #0
 8018684:	d004      	beq.n	8018690 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8018686:	68fb      	ldr	r3, [r7, #12]
 8018688:	695b      	ldr	r3, [r3, #20]
 801868a:	4618      	mov	r0, r3
 801868c:	f7f8 f894 	bl	80107b8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8018690:	68f8      	ldr	r0, [r7, #12]
 8018692:	f7ff ffbd 	bl	8018610 <ip_frag_free_pbuf_custom_ref>
}
 8018696:	bf00      	nop
 8018698:	3710      	adds	r7, #16
 801869a:	46bd      	mov	sp, r7
 801869c:	bd80      	pop	{r7, pc}
 801869e:	bf00      	nop
 80186a0:	0801e3fc 	.word	0x0801e3fc
 80186a4:	0801e5c0 	.word	0x0801e5c0
 80186a8:	0801e444 	.word	0x0801e444
 80186ac:	0801e5cc 	.word	0x0801e5cc

080186b0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80186b0:	b580      	push	{r7, lr}
 80186b2:	b094      	sub	sp, #80	; 0x50
 80186b4:	af02      	add	r7, sp, #8
 80186b6:	60f8      	str	r0, [r7, #12]
 80186b8:	60b9      	str	r1, [r7, #8]
 80186ba:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80186bc:	2300      	movs	r3, #0
 80186be:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80186c2:	68bb      	ldr	r3, [r7, #8]
 80186c4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80186c6:	3b14      	subs	r3, #20
 80186c8:	2b00      	cmp	r3, #0
 80186ca:	da00      	bge.n	80186ce <ip4_frag+0x1e>
 80186cc:	3307      	adds	r3, #7
 80186ce:	10db      	asrs	r3, r3, #3
 80186d0:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80186d2:	2314      	movs	r3, #20
 80186d4:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80186d6:	68fb      	ldr	r3, [r7, #12]
 80186d8:	685b      	ldr	r3, [r3, #4]
 80186da:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80186dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80186de:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80186e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186e2:	781b      	ldrb	r3, [r3, #0]
 80186e4:	f003 030f 	and.w	r3, r3, #15
 80186e8:	b2db      	uxtb	r3, r3
 80186ea:	009b      	lsls	r3, r3, #2
 80186ec:	b2db      	uxtb	r3, r3
 80186ee:	2b14      	cmp	r3, #20
 80186f0:	d002      	beq.n	80186f8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80186f2:	f06f 0305 	mvn.w	r3, #5
 80186f6:	e110      	b.n	801891a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80186f8:	68fb      	ldr	r3, [r7, #12]
 80186fa:	895b      	ldrh	r3, [r3, #10]
 80186fc:	2b13      	cmp	r3, #19
 80186fe:	d809      	bhi.n	8018714 <ip4_frag+0x64>
 8018700:	4b88      	ldr	r3, [pc, #544]	; (8018924 <ip4_frag+0x274>)
 8018702:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8018706:	4988      	ldr	r1, [pc, #544]	; (8018928 <ip4_frag+0x278>)
 8018708:	4888      	ldr	r0, [pc, #544]	; (801892c <ip4_frag+0x27c>)
 801870a:	f000 ff17 	bl	801953c <iprintf>
 801870e:	f06f 0305 	mvn.w	r3, #5
 8018712:	e102      	b.n	801891a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8018714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018716:	88db      	ldrh	r3, [r3, #6]
 8018718:	b29b      	uxth	r3, r3
 801871a:	4618      	mov	r0, r3
 801871c:	f7f6 fc56 	bl	800efcc <lwip_htons>
 8018720:	4603      	mov	r3, r0
 8018722:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8018724:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018726:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801872a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801872e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018730:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8018734:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8018736:	68fb      	ldr	r3, [r7, #12]
 8018738:	891b      	ldrh	r3, [r3, #8]
 801873a:	3b14      	subs	r3, #20
 801873c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8018740:	e0e1      	b.n	8018906 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8018742:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018744:	00db      	lsls	r3, r3, #3
 8018746:	b29b      	uxth	r3, r3
 8018748:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801874c:	4293      	cmp	r3, r2
 801874e:	bf28      	it	cs
 8018750:	4613      	movcs	r3, r2
 8018752:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8018754:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018758:	2114      	movs	r1, #20
 801875a:	200e      	movs	r0, #14
 801875c:	f7f7 fd48 	bl	80101f0 <pbuf_alloc>
 8018760:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8018762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018764:	2b00      	cmp	r3, #0
 8018766:	f000 80d5 	beq.w	8018914 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801876a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801876c:	895b      	ldrh	r3, [r3, #10]
 801876e:	2b13      	cmp	r3, #19
 8018770:	d806      	bhi.n	8018780 <ip4_frag+0xd0>
 8018772:	4b6c      	ldr	r3, [pc, #432]	; (8018924 <ip4_frag+0x274>)
 8018774:	f44f 7249 	mov.w	r2, #804	; 0x324
 8018778:	496d      	ldr	r1, [pc, #436]	; (8018930 <ip4_frag+0x280>)
 801877a:	486c      	ldr	r0, [pc, #432]	; (801892c <ip4_frag+0x27c>)
 801877c:	f000 fede 	bl	801953c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8018780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018782:	685b      	ldr	r3, [r3, #4]
 8018784:	2214      	movs	r2, #20
 8018786:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018788:	4618      	mov	r0, r3
 801878a:	f001 f8a5 	bl	80198d8 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801878e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018790:	685b      	ldr	r3, [r3, #4]
 8018792:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8018794:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018796:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801879a:	e064      	b.n	8018866 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801879c:	68fb      	ldr	r3, [r7, #12]
 801879e:	895a      	ldrh	r2, [r3, #10]
 80187a0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80187a2:	1ad3      	subs	r3, r2, r3
 80187a4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80187a6:	68fb      	ldr	r3, [r7, #12]
 80187a8:	895b      	ldrh	r3, [r3, #10]
 80187aa:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80187ac:	429a      	cmp	r2, r3
 80187ae:	d906      	bls.n	80187be <ip4_frag+0x10e>
 80187b0:	4b5c      	ldr	r3, [pc, #368]	; (8018924 <ip4_frag+0x274>)
 80187b2:	f240 322d 	movw	r2, #813	; 0x32d
 80187b6:	495f      	ldr	r1, [pc, #380]	; (8018934 <ip4_frag+0x284>)
 80187b8:	485c      	ldr	r0, [pc, #368]	; (801892c <ip4_frag+0x27c>)
 80187ba:	f000 febf 	bl	801953c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80187be:	8bfa      	ldrh	r2, [r7, #30]
 80187c0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80187c4:	4293      	cmp	r3, r2
 80187c6:	bf28      	it	cs
 80187c8:	4613      	movcs	r3, r2
 80187ca:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80187ce:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80187d2:	2b00      	cmp	r3, #0
 80187d4:	d105      	bne.n	80187e2 <ip4_frag+0x132>
        poff = 0;
 80187d6:	2300      	movs	r3, #0
 80187d8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80187da:	68fb      	ldr	r3, [r7, #12]
 80187dc:	681b      	ldr	r3, [r3, #0]
 80187de:	60fb      	str	r3, [r7, #12]
        continue;
 80187e0:	e041      	b.n	8018866 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80187e2:	f7ff ff0d 	bl	8018600 <ip_frag_alloc_pbuf_custom_ref>
 80187e6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80187e8:	69bb      	ldr	r3, [r7, #24]
 80187ea:	2b00      	cmp	r3, #0
 80187ec:	d103      	bne.n	80187f6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80187ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80187f0:	f7f7 ffe2 	bl	80107b8 <pbuf_free>
        goto memerr;
 80187f4:	e08f      	b.n	8018916 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80187f6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80187f8:	68fb      	ldr	r3, [r7, #12]
 80187fa:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80187fc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80187fe:	4413      	add	r3, r2
 8018800:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8018804:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8018808:	9201      	str	r2, [sp, #4]
 801880a:	9300      	str	r3, [sp, #0]
 801880c:	4603      	mov	r3, r0
 801880e:	2241      	movs	r2, #65	; 0x41
 8018810:	2000      	movs	r0, #0
 8018812:	f7f7 fe17 	bl	8010444 <pbuf_alloced_custom>
 8018816:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8018818:	697b      	ldr	r3, [r7, #20]
 801881a:	2b00      	cmp	r3, #0
 801881c:	d106      	bne.n	801882c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801881e:	69b8      	ldr	r0, [r7, #24]
 8018820:	f7ff fef6 	bl	8018610 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8018824:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018826:	f7f7 ffc7 	bl	80107b8 <pbuf_free>
        goto memerr;
 801882a:	e074      	b.n	8018916 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801882c:	68f8      	ldr	r0, [r7, #12]
 801882e:	f7f8 f863 	bl	80108f8 <pbuf_ref>
      pcr->original = p;
 8018832:	69bb      	ldr	r3, [r7, #24]
 8018834:	68fa      	ldr	r2, [r7, #12]
 8018836:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8018838:	69bb      	ldr	r3, [r7, #24]
 801883a:	4a3f      	ldr	r2, [pc, #252]	; (8018938 <ip4_frag+0x288>)
 801883c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801883e:	6979      	ldr	r1, [r7, #20]
 8018840:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018842:	f7f8 f87b 	bl	801093c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8018846:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801884a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801884e:	1ad3      	subs	r3, r2, r3
 8018850:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8018854:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018858:	2b00      	cmp	r3, #0
 801885a:	d004      	beq.n	8018866 <ip4_frag+0x1b6>
        poff = 0;
 801885c:	2300      	movs	r3, #0
 801885e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8018860:	68fb      	ldr	r3, [r7, #12]
 8018862:	681b      	ldr	r3, [r3, #0]
 8018864:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8018866:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801886a:	2b00      	cmp	r3, #0
 801886c:	d196      	bne.n	801879c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801886e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018870:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018874:	4413      	add	r3, r2
 8018876:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8018878:	68bb      	ldr	r3, [r7, #8]
 801887a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801887c:	f1a3 0213 	sub.w	r2, r3, #19
 8018880:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018884:	429a      	cmp	r2, r3
 8018886:	bfcc      	ite	gt
 8018888:	2301      	movgt	r3, #1
 801888a:	2300      	movle	r3, #0
 801888c:	b2db      	uxtb	r3, r3
 801888e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8018890:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8018894:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018898:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801889a:	6a3b      	ldr	r3, [r7, #32]
 801889c:	2b00      	cmp	r3, #0
 801889e:	d002      	beq.n	80188a6 <ip4_frag+0x1f6>
 80188a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80188a2:	2b00      	cmp	r3, #0
 80188a4:	d003      	beq.n	80188ae <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80188a6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80188a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80188ac:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80188ae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80188b0:	4618      	mov	r0, r3
 80188b2:	f7f6 fb8b 	bl	800efcc <lwip_htons>
 80188b6:	4603      	mov	r3, r0
 80188b8:	461a      	mov	r2, r3
 80188ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188bc:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80188be:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80188c0:	3314      	adds	r3, #20
 80188c2:	b29b      	uxth	r3, r3
 80188c4:	4618      	mov	r0, r3
 80188c6:	f7f6 fb81 	bl	800efcc <lwip_htons>
 80188ca:	4603      	mov	r3, r0
 80188cc:	461a      	mov	r2, r3
 80188ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188d0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80188d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188d4:	2200      	movs	r2, #0
 80188d6:	729a      	strb	r2, [r3, #10]
 80188d8:	2200      	movs	r2, #0
 80188da:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80188dc:	68bb      	ldr	r3, [r7, #8]
 80188de:	695b      	ldr	r3, [r3, #20]
 80188e0:	687a      	ldr	r2, [r7, #4]
 80188e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80188e4:	68b8      	ldr	r0, [r7, #8]
 80188e6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80188e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80188ea:	f7f7 ff65 	bl	80107b8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80188ee:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80188f2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80188f4:	1ad3      	subs	r3, r2, r3
 80188f6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80188fa:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80188fe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018900:	4413      	add	r3, r2
 8018902:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8018906:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801890a:	2b00      	cmp	r3, #0
 801890c:	f47f af19 	bne.w	8018742 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8018910:	2300      	movs	r3, #0
 8018912:	e002      	b.n	801891a <ip4_frag+0x26a>
      goto memerr;
 8018914:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8018916:	f04f 33ff 	mov.w	r3, #4294967295
}
 801891a:	4618      	mov	r0, r3
 801891c:	3748      	adds	r7, #72	; 0x48
 801891e:	46bd      	mov	sp, r7
 8018920:	bd80      	pop	{r7, pc}
 8018922:	bf00      	nop
 8018924:	0801e3fc 	.word	0x0801e3fc
 8018928:	0801e5d8 	.word	0x0801e5d8
 801892c:	0801e444 	.word	0x0801e444
 8018930:	0801e5f4 	.word	0x0801e5f4
 8018934:	0801e614 	.word	0x0801e614
 8018938:	08018649 	.word	0x08018649

0801893c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801893c:	b580      	push	{r7, lr}
 801893e:	b086      	sub	sp, #24
 8018940:	af00      	add	r7, sp, #0
 8018942:	6078      	str	r0, [r7, #4]
 8018944:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8018946:	230e      	movs	r3, #14
 8018948:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801894a:	687b      	ldr	r3, [r7, #4]
 801894c:	895b      	ldrh	r3, [r3, #10]
 801894e:	2b0e      	cmp	r3, #14
 8018950:	d96e      	bls.n	8018a30 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8018952:	687b      	ldr	r3, [r7, #4]
 8018954:	7bdb      	ldrb	r3, [r3, #15]
 8018956:	2b00      	cmp	r3, #0
 8018958:	d106      	bne.n	8018968 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801895a:	683b      	ldr	r3, [r7, #0]
 801895c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018960:	3301      	adds	r3, #1
 8018962:	b2da      	uxtb	r2, r3
 8018964:	687b      	ldr	r3, [r7, #4]
 8018966:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8018968:	687b      	ldr	r3, [r7, #4]
 801896a:	685b      	ldr	r3, [r3, #4]
 801896c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801896e:	693b      	ldr	r3, [r7, #16]
 8018970:	7b1a      	ldrb	r2, [r3, #12]
 8018972:	7b5b      	ldrb	r3, [r3, #13]
 8018974:	021b      	lsls	r3, r3, #8
 8018976:	4313      	orrs	r3, r2
 8018978:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801897a:	693b      	ldr	r3, [r7, #16]
 801897c:	781b      	ldrb	r3, [r3, #0]
 801897e:	f003 0301 	and.w	r3, r3, #1
 8018982:	2b00      	cmp	r3, #0
 8018984:	d023      	beq.n	80189ce <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8018986:	693b      	ldr	r3, [r7, #16]
 8018988:	781b      	ldrb	r3, [r3, #0]
 801898a:	2b01      	cmp	r3, #1
 801898c:	d10f      	bne.n	80189ae <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801898e:	693b      	ldr	r3, [r7, #16]
 8018990:	785b      	ldrb	r3, [r3, #1]
 8018992:	2b00      	cmp	r3, #0
 8018994:	d11b      	bne.n	80189ce <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8018996:	693b      	ldr	r3, [r7, #16]
 8018998:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801899a:	2b5e      	cmp	r3, #94	; 0x5e
 801899c:	d117      	bne.n	80189ce <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801899e:	687b      	ldr	r3, [r7, #4]
 80189a0:	7b5b      	ldrb	r3, [r3, #13]
 80189a2:	f043 0310 	orr.w	r3, r3, #16
 80189a6:	b2da      	uxtb	r2, r3
 80189a8:	687b      	ldr	r3, [r7, #4]
 80189aa:	735a      	strb	r2, [r3, #13]
 80189ac:	e00f      	b.n	80189ce <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80189ae:	693b      	ldr	r3, [r7, #16]
 80189b0:	2206      	movs	r2, #6
 80189b2:	4928      	ldr	r1, [pc, #160]	; (8018a54 <ethernet_input+0x118>)
 80189b4:	4618      	mov	r0, r3
 80189b6:	f000 ff07 	bl	80197c8 <memcmp>
 80189ba:	4603      	mov	r3, r0
 80189bc:	2b00      	cmp	r3, #0
 80189be:	d106      	bne.n	80189ce <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80189c0:	687b      	ldr	r3, [r7, #4]
 80189c2:	7b5b      	ldrb	r3, [r3, #13]
 80189c4:	f043 0308 	orr.w	r3, r3, #8
 80189c8:	b2da      	uxtb	r2, r3
 80189ca:	687b      	ldr	r3, [r7, #4]
 80189cc:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80189ce:	89fb      	ldrh	r3, [r7, #14]
 80189d0:	2b08      	cmp	r3, #8
 80189d2:	d003      	beq.n	80189dc <ethernet_input+0xa0>
 80189d4:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80189d8:	d014      	beq.n	8018a04 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80189da:	e032      	b.n	8018a42 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80189dc:	683b      	ldr	r3, [r7, #0]
 80189de:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80189e2:	f003 0308 	and.w	r3, r3, #8
 80189e6:	2b00      	cmp	r3, #0
 80189e8:	d024      	beq.n	8018a34 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80189ea:	8afb      	ldrh	r3, [r7, #22]
 80189ec:	4619      	mov	r1, r3
 80189ee:	6878      	ldr	r0, [r7, #4]
 80189f0:	f7f7 fe5c 	bl	80106ac <pbuf_remove_header>
 80189f4:	4603      	mov	r3, r0
 80189f6:	2b00      	cmp	r3, #0
 80189f8:	d11e      	bne.n	8018a38 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80189fa:	6839      	ldr	r1, [r7, #0]
 80189fc:	6878      	ldr	r0, [r7, #4]
 80189fe:	f7fe ff21 	bl	8017844 <ip4_input>
      break;
 8018a02:	e013      	b.n	8018a2c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018a04:	683b      	ldr	r3, [r7, #0]
 8018a06:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018a0a:	f003 0308 	and.w	r3, r3, #8
 8018a0e:	2b00      	cmp	r3, #0
 8018a10:	d014      	beq.n	8018a3c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018a12:	8afb      	ldrh	r3, [r7, #22]
 8018a14:	4619      	mov	r1, r3
 8018a16:	6878      	ldr	r0, [r7, #4]
 8018a18:	f7f7 fe48 	bl	80106ac <pbuf_remove_header>
 8018a1c:	4603      	mov	r3, r0
 8018a1e:	2b00      	cmp	r3, #0
 8018a20:	d10e      	bne.n	8018a40 <ethernet_input+0x104>
        etharp_input(p, netif);
 8018a22:	6839      	ldr	r1, [r7, #0]
 8018a24:	6878      	ldr	r0, [r7, #4]
 8018a26:	f7fe f89b 	bl	8016b60 <etharp_input>
      break;
 8018a2a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8018a2c:	2300      	movs	r3, #0
 8018a2e:	e00c      	b.n	8018a4a <ethernet_input+0x10e>
    goto free_and_return;
 8018a30:	bf00      	nop
 8018a32:	e006      	b.n	8018a42 <ethernet_input+0x106>
        goto free_and_return;
 8018a34:	bf00      	nop
 8018a36:	e004      	b.n	8018a42 <ethernet_input+0x106>
        goto free_and_return;
 8018a38:	bf00      	nop
 8018a3a:	e002      	b.n	8018a42 <ethernet_input+0x106>
        goto free_and_return;
 8018a3c:	bf00      	nop
 8018a3e:	e000      	b.n	8018a42 <ethernet_input+0x106>
        goto free_and_return;
 8018a40:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8018a42:	6878      	ldr	r0, [r7, #4]
 8018a44:	f7f7 feb8 	bl	80107b8 <pbuf_free>
  return ERR_OK;
 8018a48:	2300      	movs	r3, #0
}
 8018a4a:	4618      	mov	r0, r3
 8018a4c:	3718      	adds	r7, #24
 8018a4e:	46bd      	mov	sp, r7
 8018a50:	bd80      	pop	{r7, pc}
 8018a52:	bf00      	nop
 8018a54:	0801e7e8 	.word	0x0801e7e8

08018a58 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8018a58:	b580      	push	{r7, lr}
 8018a5a:	b086      	sub	sp, #24
 8018a5c:	af00      	add	r7, sp, #0
 8018a5e:	60f8      	str	r0, [r7, #12]
 8018a60:	60b9      	str	r1, [r7, #8]
 8018a62:	607a      	str	r2, [r7, #4]
 8018a64:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8018a66:	8c3b      	ldrh	r3, [r7, #32]
 8018a68:	4618      	mov	r0, r3
 8018a6a:	f7f6 faaf 	bl	800efcc <lwip_htons>
 8018a6e:	4603      	mov	r3, r0
 8018a70:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8018a72:	210e      	movs	r1, #14
 8018a74:	68b8      	ldr	r0, [r7, #8]
 8018a76:	f7f7 fe09 	bl	801068c <pbuf_add_header>
 8018a7a:	4603      	mov	r3, r0
 8018a7c:	2b00      	cmp	r3, #0
 8018a7e:	d125      	bne.n	8018acc <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8018a80:	68bb      	ldr	r3, [r7, #8]
 8018a82:	685b      	ldr	r3, [r3, #4]
 8018a84:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8018a86:	693b      	ldr	r3, [r7, #16]
 8018a88:	8afa      	ldrh	r2, [r7, #22]
 8018a8a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8018a8c:	693b      	ldr	r3, [r7, #16]
 8018a8e:	2206      	movs	r2, #6
 8018a90:	6839      	ldr	r1, [r7, #0]
 8018a92:	4618      	mov	r0, r3
 8018a94:	f000 ff20 	bl	80198d8 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8018a98:	693b      	ldr	r3, [r7, #16]
 8018a9a:	3306      	adds	r3, #6
 8018a9c:	2206      	movs	r2, #6
 8018a9e:	6879      	ldr	r1, [r7, #4]
 8018aa0:	4618      	mov	r0, r3
 8018aa2:	f000 ff19 	bl	80198d8 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8018aa6:	68fb      	ldr	r3, [r7, #12]
 8018aa8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8018aac:	2b06      	cmp	r3, #6
 8018aae:	d006      	beq.n	8018abe <ethernet_output+0x66>
 8018ab0:	4b0a      	ldr	r3, [pc, #40]	; (8018adc <ethernet_output+0x84>)
 8018ab2:	f44f 7299 	mov.w	r2, #306	; 0x132
 8018ab6:	490a      	ldr	r1, [pc, #40]	; (8018ae0 <ethernet_output+0x88>)
 8018ab8:	480a      	ldr	r0, [pc, #40]	; (8018ae4 <ethernet_output+0x8c>)
 8018aba:	f000 fd3f 	bl	801953c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8018abe:	68fb      	ldr	r3, [r7, #12]
 8018ac0:	699b      	ldr	r3, [r3, #24]
 8018ac2:	68b9      	ldr	r1, [r7, #8]
 8018ac4:	68f8      	ldr	r0, [r7, #12]
 8018ac6:	4798      	blx	r3
 8018ac8:	4603      	mov	r3, r0
 8018aca:	e002      	b.n	8018ad2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8018acc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8018ace:	f06f 0301 	mvn.w	r3, #1
}
 8018ad2:	4618      	mov	r0, r3
 8018ad4:	3718      	adds	r7, #24
 8018ad6:	46bd      	mov	sp, r7
 8018ad8:	bd80      	pop	{r7, pc}
 8018ada:	bf00      	nop
 8018adc:	0801e624 	.word	0x0801e624
 8018ae0:	0801e65c 	.word	0x0801e65c
 8018ae4:	0801e690 	.word	0x0801e690

08018ae8 <rand>:
 8018ae8:	4b16      	ldr	r3, [pc, #88]	; (8018b44 <rand+0x5c>)
 8018aea:	b510      	push	{r4, lr}
 8018aec:	681c      	ldr	r4, [r3, #0]
 8018aee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8018af0:	b9b3      	cbnz	r3, 8018b20 <rand+0x38>
 8018af2:	2018      	movs	r0, #24
 8018af4:	f001 fd5c 	bl	801a5b0 <malloc>
 8018af8:	4602      	mov	r2, r0
 8018afa:	6320      	str	r0, [r4, #48]	; 0x30
 8018afc:	b920      	cbnz	r0, 8018b08 <rand+0x20>
 8018afe:	4b12      	ldr	r3, [pc, #72]	; (8018b48 <rand+0x60>)
 8018b00:	4812      	ldr	r0, [pc, #72]	; (8018b4c <rand+0x64>)
 8018b02:	2152      	movs	r1, #82	; 0x52
 8018b04:	f000 fef6 	bl	80198f4 <__assert_func>
 8018b08:	4911      	ldr	r1, [pc, #68]	; (8018b50 <rand+0x68>)
 8018b0a:	4b12      	ldr	r3, [pc, #72]	; (8018b54 <rand+0x6c>)
 8018b0c:	e9c0 1300 	strd	r1, r3, [r0]
 8018b10:	4b11      	ldr	r3, [pc, #68]	; (8018b58 <rand+0x70>)
 8018b12:	6083      	str	r3, [r0, #8]
 8018b14:	230b      	movs	r3, #11
 8018b16:	8183      	strh	r3, [r0, #12]
 8018b18:	2100      	movs	r1, #0
 8018b1a:	2001      	movs	r0, #1
 8018b1c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8018b20:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8018b22:	480e      	ldr	r0, [pc, #56]	; (8018b5c <rand+0x74>)
 8018b24:	690b      	ldr	r3, [r1, #16]
 8018b26:	694c      	ldr	r4, [r1, #20]
 8018b28:	4a0d      	ldr	r2, [pc, #52]	; (8018b60 <rand+0x78>)
 8018b2a:	4358      	muls	r0, r3
 8018b2c:	fb02 0004 	mla	r0, r2, r4, r0
 8018b30:	fba3 3202 	umull	r3, r2, r3, r2
 8018b34:	3301      	adds	r3, #1
 8018b36:	eb40 0002 	adc.w	r0, r0, r2
 8018b3a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8018b3e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8018b42:	bd10      	pop	{r4, pc}
 8018b44:	200000bc 	.word	0x200000bc
 8018b48:	0801e7f6 	.word	0x0801e7f6
 8018b4c:	0801e80d 	.word	0x0801e80d
 8018b50:	abcd330e 	.word	0xabcd330e
 8018b54:	e66d1234 	.word	0xe66d1234
 8018b58:	0005deec 	.word	0x0005deec
 8018b5c:	5851f42d 	.word	0x5851f42d
 8018b60:	4c957f2d 	.word	0x4c957f2d

08018b64 <__cvt>:
 8018b64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018b66:	ed2d 8b02 	vpush	{d8}
 8018b6a:	eeb0 8b40 	vmov.f64	d8, d0
 8018b6e:	b085      	sub	sp, #20
 8018b70:	4617      	mov	r7, r2
 8018b72:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8018b74:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8018b76:	ee18 2a90 	vmov	r2, s17
 8018b7a:	f025 0520 	bic.w	r5, r5, #32
 8018b7e:	2a00      	cmp	r2, #0
 8018b80:	bfb6      	itet	lt
 8018b82:	222d      	movlt	r2, #45	; 0x2d
 8018b84:	2200      	movge	r2, #0
 8018b86:	eeb1 8b40 	vneglt.f64	d8, d0
 8018b8a:	2d46      	cmp	r5, #70	; 0x46
 8018b8c:	460c      	mov	r4, r1
 8018b8e:	701a      	strb	r2, [r3, #0]
 8018b90:	d004      	beq.n	8018b9c <__cvt+0x38>
 8018b92:	2d45      	cmp	r5, #69	; 0x45
 8018b94:	d100      	bne.n	8018b98 <__cvt+0x34>
 8018b96:	3401      	adds	r4, #1
 8018b98:	2102      	movs	r1, #2
 8018b9a:	e000      	b.n	8018b9e <__cvt+0x3a>
 8018b9c:	2103      	movs	r1, #3
 8018b9e:	ab03      	add	r3, sp, #12
 8018ba0:	9301      	str	r3, [sp, #4]
 8018ba2:	ab02      	add	r3, sp, #8
 8018ba4:	9300      	str	r3, [sp, #0]
 8018ba6:	4622      	mov	r2, r4
 8018ba8:	4633      	mov	r3, r6
 8018baa:	eeb0 0b48 	vmov.f64	d0, d8
 8018bae:	f000 ff47 	bl	8019a40 <_dtoa_r>
 8018bb2:	2d47      	cmp	r5, #71	; 0x47
 8018bb4:	d101      	bne.n	8018bba <__cvt+0x56>
 8018bb6:	07fb      	lsls	r3, r7, #31
 8018bb8:	d51a      	bpl.n	8018bf0 <__cvt+0x8c>
 8018bba:	2d46      	cmp	r5, #70	; 0x46
 8018bbc:	eb00 0204 	add.w	r2, r0, r4
 8018bc0:	d10c      	bne.n	8018bdc <__cvt+0x78>
 8018bc2:	7803      	ldrb	r3, [r0, #0]
 8018bc4:	2b30      	cmp	r3, #48	; 0x30
 8018bc6:	d107      	bne.n	8018bd8 <__cvt+0x74>
 8018bc8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8018bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018bd0:	bf1c      	itt	ne
 8018bd2:	f1c4 0401 	rsbne	r4, r4, #1
 8018bd6:	6034      	strne	r4, [r6, #0]
 8018bd8:	6833      	ldr	r3, [r6, #0]
 8018bda:	441a      	add	r2, r3
 8018bdc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8018be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018be4:	bf08      	it	eq
 8018be6:	9203      	streq	r2, [sp, #12]
 8018be8:	2130      	movs	r1, #48	; 0x30
 8018bea:	9b03      	ldr	r3, [sp, #12]
 8018bec:	4293      	cmp	r3, r2
 8018bee:	d307      	bcc.n	8018c00 <__cvt+0x9c>
 8018bf0:	9b03      	ldr	r3, [sp, #12]
 8018bf2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018bf4:	1a1b      	subs	r3, r3, r0
 8018bf6:	6013      	str	r3, [r2, #0]
 8018bf8:	b005      	add	sp, #20
 8018bfa:	ecbd 8b02 	vpop	{d8}
 8018bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018c00:	1c5c      	adds	r4, r3, #1
 8018c02:	9403      	str	r4, [sp, #12]
 8018c04:	7019      	strb	r1, [r3, #0]
 8018c06:	e7f0      	b.n	8018bea <__cvt+0x86>

08018c08 <__exponent>:
 8018c08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018c0a:	4603      	mov	r3, r0
 8018c0c:	2900      	cmp	r1, #0
 8018c0e:	bfb8      	it	lt
 8018c10:	4249      	neglt	r1, r1
 8018c12:	f803 2b02 	strb.w	r2, [r3], #2
 8018c16:	bfb4      	ite	lt
 8018c18:	222d      	movlt	r2, #45	; 0x2d
 8018c1a:	222b      	movge	r2, #43	; 0x2b
 8018c1c:	2909      	cmp	r1, #9
 8018c1e:	7042      	strb	r2, [r0, #1]
 8018c20:	dd2a      	ble.n	8018c78 <__exponent+0x70>
 8018c22:	f10d 0207 	add.w	r2, sp, #7
 8018c26:	4617      	mov	r7, r2
 8018c28:	260a      	movs	r6, #10
 8018c2a:	4694      	mov	ip, r2
 8018c2c:	fb91 f5f6 	sdiv	r5, r1, r6
 8018c30:	fb06 1415 	mls	r4, r6, r5, r1
 8018c34:	3430      	adds	r4, #48	; 0x30
 8018c36:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8018c3a:	460c      	mov	r4, r1
 8018c3c:	2c63      	cmp	r4, #99	; 0x63
 8018c3e:	f102 32ff 	add.w	r2, r2, #4294967295
 8018c42:	4629      	mov	r1, r5
 8018c44:	dcf1      	bgt.n	8018c2a <__exponent+0x22>
 8018c46:	3130      	adds	r1, #48	; 0x30
 8018c48:	f1ac 0402 	sub.w	r4, ip, #2
 8018c4c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8018c50:	1c41      	adds	r1, r0, #1
 8018c52:	4622      	mov	r2, r4
 8018c54:	42ba      	cmp	r2, r7
 8018c56:	d30a      	bcc.n	8018c6e <__exponent+0x66>
 8018c58:	f10d 0209 	add.w	r2, sp, #9
 8018c5c:	eba2 020c 	sub.w	r2, r2, ip
 8018c60:	42bc      	cmp	r4, r7
 8018c62:	bf88      	it	hi
 8018c64:	2200      	movhi	r2, #0
 8018c66:	4413      	add	r3, r2
 8018c68:	1a18      	subs	r0, r3, r0
 8018c6a:	b003      	add	sp, #12
 8018c6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018c6e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8018c72:	f801 5f01 	strb.w	r5, [r1, #1]!
 8018c76:	e7ed      	b.n	8018c54 <__exponent+0x4c>
 8018c78:	2330      	movs	r3, #48	; 0x30
 8018c7a:	3130      	adds	r1, #48	; 0x30
 8018c7c:	7083      	strb	r3, [r0, #2]
 8018c7e:	70c1      	strb	r1, [r0, #3]
 8018c80:	1d03      	adds	r3, r0, #4
 8018c82:	e7f1      	b.n	8018c68 <__exponent+0x60>
 8018c84:	0000      	movs	r0, r0
	...

08018c88 <_printf_float>:
 8018c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c8c:	b08b      	sub	sp, #44	; 0x2c
 8018c8e:	460c      	mov	r4, r1
 8018c90:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8018c94:	4616      	mov	r6, r2
 8018c96:	461f      	mov	r7, r3
 8018c98:	4605      	mov	r5, r0
 8018c9a:	f000 fdad 	bl	80197f8 <_localeconv_r>
 8018c9e:	f8d0 b000 	ldr.w	fp, [r0]
 8018ca2:	4658      	mov	r0, fp
 8018ca4:	f7e8 fddc 	bl	8001860 <strlen>
 8018ca8:	2300      	movs	r3, #0
 8018caa:	9308      	str	r3, [sp, #32]
 8018cac:	f8d8 3000 	ldr.w	r3, [r8]
 8018cb0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8018cb4:	6822      	ldr	r2, [r4, #0]
 8018cb6:	3307      	adds	r3, #7
 8018cb8:	f023 0307 	bic.w	r3, r3, #7
 8018cbc:	f103 0108 	add.w	r1, r3, #8
 8018cc0:	f8c8 1000 	str.w	r1, [r8]
 8018cc4:	ed93 0b00 	vldr	d0, [r3]
 8018cc8:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8018f28 <_printf_float+0x2a0>
 8018ccc:	eeb0 7bc0 	vabs.f64	d7, d0
 8018cd0:	eeb4 7b46 	vcmp.f64	d7, d6
 8018cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018cd8:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8018cdc:	4682      	mov	sl, r0
 8018cde:	dd24      	ble.n	8018d2a <_printf_float+0xa2>
 8018ce0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8018ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ce8:	d502      	bpl.n	8018cf0 <_printf_float+0x68>
 8018cea:	232d      	movs	r3, #45	; 0x2d
 8018cec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018cf0:	498f      	ldr	r1, [pc, #572]	; (8018f30 <_printf_float+0x2a8>)
 8018cf2:	4b90      	ldr	r3, [pc, #576]	; (8018f34 <_printf_float+0x2ac>)
 8018cf4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8018cf8:	bf94      	ite	ls
 8018cfa:	4688      	movls	r8, r1
 8018cfc:	4698      	movhi	r8, r3
 8018cfe:	2303      	movs	r3, #3
 8018d00:	6123      	str	r3, [r4, #16]
 8018d02:	f022 0204 	bic.w	r2, r2, #4
 8018d06:	2300      	movs	r3, #0
 8018d08:	6022      	str	r2, [r4, #0]
 8018d0a:	9304      	str	r3, [sp, #16]
 8018d0c:	9700      	str	r7, [sp, #0]
 8018d0e:	4633      	mov	r3, r6
 8018d10:	aa09      	add	r2, sp, #36	; 0x24
 8018d12:	4621      	mov	r1, r4
 8018d14:	4628      	mov	r0, r5
 8018d16:	f000 f9d1 	bl	80190bc <_printf_common>
 8018d1a:	3001      	adds	r0, #1
 8018d1c:	f040 808a 	bne.w	8018e34 <_printf_float+0x1ac>
 8018d20:	f04f 30ff 	mov.w	r0, #4294967295
 8018d24:	b00b      	add	sp, #44	; 0x2c
 8018d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d2a:	eeb4 0b40 	vcmp.f64	d0, d0
 8018d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d32:	d709      	bvc.n	8018d48 <_printf_float+0xc0>
 8018d34:	ee10 3a90 	vmov	r3, s1
 8018d38:	2b00      	cmp	r3, #0
 8018d3a:	bfbc      	itt	lt
 8018d3c:	232d      	movlt	r3, #45	; 0x2d
 8018d3e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8018d42:	497d      	ldr	r1, [pc, #500]	; (8018f38 <_printf_float+0x2b0>)
 8018d44:	4b7d      	ldr	r3, [pc, #500]	; (8018f3c <_printf_float+0x2b4>)
 8018d46:	e7d5      	b.n	8018cf4 <_printf_float+0x6c>
 8018d48:	6863      	ldr	r3, [r4, #4]
 8018d4a:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8018d4e:	9104      	str	r1, [sp, #16]
 8018d50:	1c59      	adds	r1, r3, #1
 8018d52:	d13c      	bne.n	8018dce <_printf_float+0x146>
 8018d54:	2306      	movs	r3, #6
 8018d56:	6063      	str	r3, [r4, #4]
 8018d58:	2300      	movs	r3, #0
 8018d5a:	9303      	str	r3, [sp, #12]
 8018d5c:	ab08      	add	r3, sp, #32
 8018d5e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8018d62:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8018d66:	ab07      	add	r3, sp, #28
 8018d68:	6861      	ldr	r1, [r4, #4]
 8018d6a:	9300      	str	r3, [sp, #0]
 8018d6c:	6022      	str	r2, [r4, #0]
 8018d6e:	f10d 031b 	add.w	r3, sp, #27
 8018d72:	4628      	mov	r0, r5
 8018d74:	f7ff fef6 	bl	8018b64 <__cvt>
 8018d78:	9b04      	ldr	r3, [sp, #16]
 8018d7a:	9907      	ldr	r1, [sp, #28]
 8018d7c:	2b47      	cmp	r3, #71	; 0x47
 8018d7e:	4680      	mov	r8, r0
 8018d80:	d108      	bne.n	8018d94 <_printf_float+0x10c>
 8018d82:	1cc8      	adds	r0, r1, #3
 8018d84:	db02      	blt.n	8018d8c <_printf_float+0x104>
 8018d86:	6863      	ldr	r3, [r4, #4]
 8018d88:	4299      	cmp	r1, r3
 8018d8a:	dd41      	ble.n	8018e10 <_printf_float+0x188>
 8018d8c:	f1a9 0902 	sub.w	r9, r9, #2
 8018d90:	fa5f f989 	uxtb.w	r9, r9
 8018d94:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8018d98:	d820      	bhi.n	8018ddc <_printf_float+0x154>
 8018d9a:	3901      	subs	r1, #1
 8018d9c:	464a      	mov	r2, r9
 8018d9e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8018da2:	9107      	str	r1, [sp, #28]
 8018da4:	f7ff ff30 	bl	8018c08 <__exponent>
 8018da8:	9a08      	ldr	r2, [sp, #32]
 8018daa:	9004      	str	r0, [sp, #16]
 8018dac:	1813      	adds	r3, r2, r0
 8018dae:	2a01      	cmp	r2, #1
 8018db0:	6123      	str	r3, [r4, #16]
 8018db2:	dc02      	bgt.n	8018dba <_printf_float+0x132>
 8018db4:	6822      	ldr	r2, [r4, #0]
 8018db6:	07d2      	lsls	r2, r2, #31
 8018db8:	d501      	bpl.n	8018dbe <_printf_float+0x136>
 8018dba:	3301      	adds	r3, #1
 8018dbc:	6123      	str	r3, [r4, #16]
 8018dbe:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8018dc2:	2b00      	cmp	r3, #0
 8018dc4:	d0a2      	beq.n	8018d0c <_printf_float+0x84>
 8018dc6:	232d      	movs	r3, #45	; 0x2d
 8018dc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018dcc:	e79e      	b.n	8018d0c <_printf_float+0x84>
 8018dce:	9904      	ldr	r1, [sp, #16]
 8018dd0:	2947      	cmp	r1, #71	; 0x47
 8018dd2:	d1c1      	bne.n	8018d58 <_printf_float+0xd0>
 8018dd4:	2b00      	cmp	r3, #0
 8018dd6:	d1bf      	bne.n	8018d58 <_printf_float+0xd0>
 8018dd8:	2301      	movs	r3, #1
 8018dda:	e7bc      	b.n	8018d56 <_printf_float+0xce>
 8018ddc:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8018de0:	d118      	bne.n	8018e14 <_printf_float+0x18c>
 8018de2:	2900      	cmp	r1, #0
 8018de4:	6863      	ldr	r3, [r4, #4]
 8018de6:	dd0b      	ble.n	8018e00 <_printf_float+0x178>
 8018de8:	6121      	str	r1, [r4, #16]
 8018dea:	b913      	cbnz	r3, 8018df2 <_printf_float+0x16a>
 8018dec:	6822      	ldr	r2, [r4, #0]
 8018dee:	07d0      	lsls	r0, r2, #31
 8018df0:	d502      	bpl.n	8018df8 <_printf_float+0x170>
 8018df2:	3301      	adds	r3, #1
 8018df4:	440b      	add	r3, r1
 8018df6:	6123      	str	r3, [r4, #16]
 8018df8:	2300      	movs	r3, #0
 8018dfa:	65a1      	str	r1, [r4, #88]	; 0x58
 8018dfc:	9304      	str	r3, [sp, #16]
 8018dfe:	e7de      	b.n	8018dbe <_printf_float+0x136>
 8018e00:	b913      	cbnz	r3, 8018e08 <_printf_float+0x180>
 8018e02:	6822      	ldr	r2, [r4, #0]
 8018e04:	07d2      	lsls	r2, r2, #31
 8018e06:	d501      	bpl.n	8018e0c <_printf_float+0x184>
 8018e08:	3302      	adds	r3, #2
 8018e0a:	e7f4      	b.n	8018df6 <_printf_float+0x16e>
 8018e0c:	2301      	movs	r3, #1
 8018e0e:	e7f2      	b.n	8018df6 <_printf_float+0x16e>
 8018e10:	f04f 0967 	mov.w	r9, #103	; 0x67
 8018e14:	9b08      	ldr	r3, [sp, #32]
 8018e16:	4299      	cmp	r1, r3
 8018e18:	db05      	blt.n	8018e26 <_printf_float+0x19e>
 8018e1a:	6823      	ldr	r3, [r4, #0]
 8018e1c:	6121      	str	r1, [r4, #16]
 8018e1e:	07d8      	lsls	r0, r3, #31
 8018e20:	d5ea      	bpl.n	8018df8 <_printf_float+0x170>
 8018e22:	1c4b      	adds	r3, r1, #1
 8018e24:	e7e7      	b.n	8018df6 <_printf_float+0x16e>
 8018e26:	2900      	cmp	r1, #0
 8018e28:	bfd4      	ite	le
 8018e2a:	f1c1 0202 	rsble	r2, r1, #2
 8018e2e:	2201      	movgt	r2, #1
 8018e30:	4413      	add	r3, r2
 8018e32:	e7e0      	b.n	8018df6 <_printf_float+0x16e>
 8018e34:	6823      	ldr	r3, [r4, #0]
 8018e36:	055a      	lsls	r2, r3, #21
 8018e38:	d407      	bmi.n	8018e4a <_printf_float+0x1c2>
 8018e3a:	6923      	ldr	r3, [r4, #16]
 8018e3c:	4642      	mov	r2, r8
 8018e3e:	4631      	mov	r1, r6
 8018e40:	4628      	mov	r0, r5
 8018e42:	47b8      	blx	r7
 8018e44:	3001      	adds	r0, #1
 8018e46:	d12a      	bne.n	8018e9e <_printf_float+0x216>
 8018e48:	e76a      	b.n	8018d20 <_printf_float+0x98>
 8018e4a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8018e4e:	f240 80e0 	bls.w	8019012 <_printf_float+0x38a>
 8018e52:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8018e56:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8018e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e5e:	d133      	bne.n	8018ec8 <_printf_float+0x240>
 8018e60:	4a37      	ldr	r2, [pc, #220]	; (8018f40 <_printf_float+0x2b8>)
 8018e62:	2301      	movs	r3, #1
 8018e64:	4631      	mov	r1, r6
 8018e66:	4628      	mov	r0, r5
 8018e68:	47b8      	blx	r7
 8018e6a:	3001      	adds	r0, #1
 8018e6c:	f43f af58 	beq.w	8018d20 <_printf_float+0x98>
 8018e70:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8018e74:	429a      	cmp	r2, r3
 8018e76:	db02      	blt.n	8018e7e <_printf_float+0x1f6>
 8018e78:	6823      	ldr	r3, [r4, #0]
 8018e7a:	07d8      	lsls	r0, r3, #31
 8018e7c:	d50f      	bpl.n	8018e9e <_printf_float+0x216>
 8018e7e:	4653      	mov	r3, sl
 8018e80:	465a      	mov	r2, fp
 8018e82:	4631      	mov	r1, r6
 8018e84:	4628      	mov	r0, r5
 8018e86:	47b8      	blx	r7
 8018e88:	3001      	adds	r0, #1
 8018e8a:	f43f af49 	beq.w	8018d20 <_printf_float+0x98>
 8018e8e:	f04f 0800 	mov.w	r8, #0
 8018e92:	f104 091a 	add.w	r9, r4, #26
 8018e96:	9b08      	ldr	r3, [sp, #32]
 8018e98:	3b01      	subs	r3, #1
 8018e9a:	4543      	cmp	r3, r8
 8018e9c:	dc09      	bgt.n	8018eb2 <_printf_float+0x22a>
 8018e9e:	6823      	ldr	r3, [r4, #0]
 8018ea0:	079b      	lsls	r3, r3, #30
 8018ea2:	f100 8106 	bmi.w	80190b2 <_printf_float+0x42a>
 8018ea6:	68e0      	ldr	r0, [r4, #12]
 8018ea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018eaa:	4298      	cmp	r0, r3
 8018eac:	bfb8      	it	lt
 8018eae:	4618      	movlt	r0, r3
 8018eb0:	e738      	b.n	8018d24 <_printf_float+0x9c>
 8018eb2:	2301      	movs	r3, #1
 8018eb4:	464a      	mov	r2, r9
 8018eb6:	4631      	mov	r1, r6
 8018eb8:	4628      	mov	r0, r5
 8018eba:	47b8      	blx	r7
 8018ebc:	3001      	adds	r0, #1
 8018ebe:	f43f af2f 	beq.w	8018d20 <_printf_float+0x98>
 8018ec2:	f108 0801 	add.w	r8, r8, #1
 8018ec6:	e7e6      	b.n	8018e96 <_printf_float+0x20e>
 8018ec8:	9b07      	ldr	r3, [sp, #28]
 8018eca:	2b00      	cmp	r3, #0
 8018ecc:	dc3a      	bgt.n	8018f44 <_printf_float+0x2bc>
 8018ece:	4a1c      	ldr	r2, [pc, #112]	; (8018f40 <_printf_float+0x2b8>)
 8018ed0:	2301      	movs	r3, #1
 8018ed2:	4631      	mov	r1, r6
 8018ed4:	4628      	mov	r0, r5
 8018ed6:	47b8      	blx	r7
 8018ed8:	3001      	adds	r0, #1
 8018eda:	f43f af21 	beq.w	8018d20 <_printf_float+0x98>
 8018ede:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8018ee2:	4313      	orrs	r3, r2
 8018ee4:	d102      	bne.n	8018eec <_printf_float+0x264>
 8018ee6:	6823      	ldr	r3, [r4, #0]
 8018ee8:	07d9      	lsls	r1, r3, #31
 8018eea:	d5d8      	bpl.n	8018e9e <_printf_float+0x216>
 8018eec:	4653      	mov	r3, sl
 8018eee:	465a      	mov	r2, fp
 8018ef0:	4631      	mov	r1, r6
 8018ef2:	4628      	mov	r0, r5
 8018ef4:	47b8      	blx	r7
 8018ef6:	3001      	adds	r0, #1
 8018ef8:	f43f af12 	beq.w	8018d20 <_printf_float+0x98>
 8018efc:	f04f 0900 	mov.w	r9, #0
 8018f00:	f104 0a1a 	add.w	sl, r4, #26
 8018f04:	9b07      	ldr	r3, [sp, #28]
 8018f06:	425b      	negs	r3, r3
 8018f08:	454b      	cmp	r3, r9
 8018f0a:	dc01      	bgt.n	8018f10 <_printf_float+0x288>
 8018f0c:	9b08      	ldr	r3, [sp, #32]
 8018f0e:	e795      	b.n	8018e3c <_printf_float+0x1b4>
 8018f10:	2301      	movs	r3, #1
 8018f12:	4652      	mov	r2, sl
 8018f14:	4631      	mov	r1, r6
 8018f16:	4628      	mov	r0, r5
 8018f18:	47b8      	blx	r7
 8018f1a:	3001      	adds	r0, #1
 8018f1c:	f43f af00 	beq.w	8018d20 <_printf_float+0x98>
 8018f20:	f109 0901 	add.w	r9, r9, #1
 8018f24:	e7ee      	b.n	8018f04 <_printf_float+0x27c>
 8018f26:	bf00      	nop
 8018f28:	ffffffff 	.word	0xffffffff
 8018f2c:	7fefffff 	.word	0x7fefffff
 8018f30:	0801e966 	.word	0x0801e966
 8018f34:	0801e96a 	.word	0x0801e96a
 8018f38:	0801e96e 	.word	0x0801e96e
 8018f3c:	0801e972 	.word	0x0801e972
 8018f40:	0801e976 	.word	0x0801e976
 8018f44:	9a08      	ldr	r2, [sp, #32]
 8018f46:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8018f48:	429a      	cmp	r2, r3
 8018f4a:	bfa8      	it	ge
 8018f4c:	461a      	movge	r2, r3
 8018f4e:	2a00      	cmp	r2, #0
 8018f50:	4691      	mov	r9, r2
 8018f52:	dc38      	bgt.n	8018fc6 <_printf_float+0x33e>
 8018f54:	2300      	movs	r3, #0
 8018f56:	9305      	str	r3, [sp, #20]
 8018f58:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8018f5c:	f104 021a 	add.w	r2, r4, #26
 8018f60:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8018f62:	9905      	ldr	r1, [sp, #20]
 8018f64:	9304      	str	r3, [sp, #16]
 8018f66:	eba3 0309 	sub.w	r3, r3, r9
 8018f6a:	428b      	cmp	r3, r1
 8018f6c:	dc33      	bgt.n	8018fd6 <_printf_float+0x34e>
 8018f6e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8018f72:	429a      	cmp	r2, r3
 8018f74:	db3c      	blt.n	8018ff0 <_printf_float+0x368>
 8018f76:	6823      	ldr	r3, [r4, #0]
 8018f78:	07da      	lsls	r2, r3, #31
 8018f7a:	d439      	bmi.n	8018ff0 <_printf_float+0x368>
 8018f7c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8018f80:	eba2 0903 	sub.w	r9, r2, r3
 8018f84:	9b04      	ldr	r3, [sp, #16]
 8018f86:	1ad2      	subs	r2, r2, r3
 8018f88:	4591      	cmp	r9, r2
 8018f8a:	bfa8      	it	ge
 8018f8c:	4691      	movge	r9, r2
 8018f8e:	f1b9 0f00 	cmp.w	r9, #0
 8018f92:	dc35      	bgt.n	8019000 <_printf_float+0x378>
 8018f94:	f04f 0800 	mov.w	r8, #0
 8018f98:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8018f9c:	f104 0a1a 	add.w	sl, r4, #26
 8018fa0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8018fa4:	1a9b      	subs	r3, r3, r2
 8018fa6:	eba3 0309 	sub.w	r3, r3, r9
 8018faa:	4543      	cmp	r3, r8
 8018fac:	f77f af77 	ble.w	8018e9e <_printf_float+0x216>
 8018fb0:	2301      	movs	r3, #1
 8018fb2:	4652      	mov	r2, sl
 8018fb4:	4631      	mov	r1, r6
 8018fb6:	4628      	mov	r0, r5
 8018fb8:	47b8      	blx	r7
 8018fba:	3001      	adds	r0, #1
 8018fbc:	f43f aeb0 	beq.w	8018d20 <_printf_float+0x98>
 8018fc0:	f108 0801 	add.w	r8, r8, #1
 8018fc4:	e7ec      	b.n	8018fa0 <_printf_float+0x318>
 8018fc6:	4613      	mov	r3, r2
 8018fc8:	4631      	mov	r1, r6
 8018fca:	4642      	mov	r2, r8
 8018fcc:	4628      	mov	r0, r5
 8018fce:	47b8      	blx	r7
 8018fd0:	3001      	adds	r0, #1
 8018fd2:	d1bf      	bne.n	8018f54 <_printf_float+0x2cc>
 8018fd4:	e6a4      	b.n	8018d20 <_printf_float+0x98>
 8018fd6:	2301      	movs	r3, #1
 8018fd8:	4631      	mov	r1, r6
 8018fda:	4628      	mov	r0, r5
 8018fdc:	9204      	str	r2, [sp, #16]
 8018fde:	47b8      	blx	r7
 8018fe0:	3001      	adds	r0, #1
 8018fe2:	f43f ae9d 	beq.w	8018d20 <_printf_float+0x98>
 8018fe6:	9b05      	ldr	r3, [sp, #20]
 8018fe8:	9a04      	ldr	r2, [sp, #16]
 8018fea:	3301      	adds	r3, #1
 8018fec:	9305      	str	r3, [sp, #20]
 8018fee:	e7b7      	b.n	8018f60 <_printf_float+0x2d8>
 8018ff0:	4653      	mov	r3, sl
 8018ff2:	465a      	mov	r2, fp
 8018ff4:	4631      	mov	r1, r6
 8018ff6:	4628      	mov	r0, r5
 8018ff8:	47b8      	blx	r7
 8018ffa:	3001      	adds	r0, #1
 8018ffc:	d1be      	bne.n	8018f7c <_printf_float+0x2f4>
 8018ffe:	e68f      	b.n	8018d20 <_printf_float+0x98>
 8019000:	9a04      	ldr	r2, [sp, #16]
 8019002:	464b      	mov	r3, r9
 8019004:	4442      	add	r2, r8
 8019006:	4631      	mov	r1, r6
 8019008:	4628      	mov	r0, r5
 801900a:	47b8      	blx	r7
 801900c:	3001      	adds	r0, #1
 801900e:	d1c1      	bne.n	8018f94 <_printf_float+0x30c>
 8019010:	e686      	b.n	8018d20 <_printf_float+0x98>
 8019012:	9a08      	ldr	r2, [sp, #32]
 8019014:	2a01      	cmp	r2, #1
 8019016:	dc01      	bgt.n	801901c <_printf_float+0x394>
 8019018:	07db      	lsls	r3, r3, #31
 801901a:	d537      	bpl.n	801908c <_printf_float+0x404>
 801901c:	2301      	movs	r3, #1
 801901e:	4642      	mov	r2, r8
 8019020:	4631      	mov	r1, r6
 8019022:	4628      	mov	r0, r5
 8019024:	47b8      	blx	r7
 8019026:	3001      	adds	r0, #1
 8019028:	f43f ae7a 	beq.w	8018d20 <_printf_float+0x98>
 801902c:	4653      	mov	r3, sl
 801902e:	465a      	mov	r2, fp
 8019030:	4631      	mov	r1, r6
 8019032:	4628      	mov	r0, r5
 8019034:	47b8      	blx	r7
 8019036:	3001      	adds	r0, #1
 8019038:	f43f ae72 	beq.w	8018d20 <_printf_float+0x98>
 801903c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8019040:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8019044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019048:	9b08      	ldr	r3, [sp, #32]
 801904a:	d01a      	beq.n	8019082 <_printf_float+0x3fa>
 801904c:	3b01      	subs	r3, #1
 801904e:	f108 0201 	add.w	r2, r8, #1
 8019052:	4631      	mov	r1, r6
 8019054:	4628      	mov	r0, r5
 8019056:	47b8      	blx	r7
 8019058:	3001      	adds	r0, #1
 801905a:	d10e      	bne.n	801907a <_printf_float+0x3f2>
 801905c:	e660      	b.n	8018d20 <_printf_float+0x98>
 801905e:	2301      	movs	r3, #1
 8019060:	464a      	mov	r2, r9
 8019062:	4631      	mov	r1, r6
 8019064:	4628      	mov	r0, r5
 8019066:	47b8      	blx	r7
 8019068:	3001      	adds	r0, #1
 801906a:	f43f ae59 	beq.w	8018d20 <_printf_float+0x98>
 801906e:	f108 0801 	add.w	r8, r8, #1
 8019072:	9b08      	ldr	r3, [sp, #32]
 8019074:	3b01      	subs	r3, #1
 8019076:	4543      	cmp	r3, r8
 8019078:	dcf1      	bgt.n	801905e <_printf_float+0x3d6>
 801907a:	9b04      	ldr	r3, [sp, #16]
 801907c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8019080:	e6dd      	b.n	8018e3e <_printf_float+0x1b6>
 8019082:	f04f 0800 	mov.w	r8, #0
 8019086:	f104 091a 	add.w	r9, r4, #26
 801908a:	e7f2      	b.n	8019072 <_printf_float+0x3ea>
 801908c:	2301      	movs	r3, #1
 801908e:	4642      	mov	r2, r8
 8019090:	e7df      	b.n	8019052 <_printf_float+0x3ca>
 8019092:	2301      	movs	r3, #1
 8019094:	464a      	mov	r2, r9
 8019096:	4631      	mov	r1, r6
 8019098:	4628      	mov	r0, r5
 801909a:	47b8      	blx	r7
 801909c:	3001      	adds	r0, #1
 801909e:	f43f ae3f 	beq.w	8018d20 <_printf_float+0x98>
 80190a2:	f108 0801 	add.w	r8, r8, #1
 80190a6:	68e3      	ldr	r3, [r4, #12]
 80190a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80190aa:	1a5b      	subs	r3, r3, r1
 80190ac:	4543      	cmp	r3, r8
 80190ae:	dcf0      	bgt.n	8019092 <_printf_float+0x40a>
 80190b0:	e6f9      	b.n	8018ea6 <_printf_float+0x21e>
 80190b2:	f04f 0800 	mov.w	r8, #0
 80190b6:	f104 0919 	add.w	r9, r4, #25
 80190ba:	e7f4      	b.n	80190a6 <_printf_float+0x41e>

080190bc <_printf_common>:
 80190bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80190c0:	4616      	mov	r6, r2
 80190c2:	4699      	mov	r9, r3
 80190c4:	688a      	ldr	r2, [r1, #8]
 80190c6:	690b      	ldr	r3, [r1, #16]
 80190c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80190cc:	4293      	cmp	r3, r2
 80190ce:	bfb8      	it	lt
 80190d0:	4613      	movlt	r3, r2
 80190d2:	6033      	str	r3, [r6, #0]
 80190d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80190d8:	4607      	mov	r7, r0
 80190da:	460c      	mov	r4, r1
 80190dc:	b10a      	cbz	r2, 80190e2 <_printf_common+0x26>
 80190de:	3301      	adds	r3, #1
 80190e0:	6033      	str	r3, [r6, #0]
 80190e2:	6823      	ldr	r3, [r4, #0]
 80190e4:	0699      	lsls	r1, r3, #26
 80190e6:	bf42      	ittt	mi
 80190e8:	6833      	ldrmi	r3, [r6, #0]
 80190ea:	3302      	addmi	r3, #2
 80190ec:	6033      	strmi	r3, [r6, #0]
 80190ee:	6825      	ldr	r5, [r4, #0]
 80190f0:	f015 0506 	ands.w	r5, r5, #6
 80190f4:	d106      	bne.n	8019104 <_printf_common+0x48>
 80190f6:	f104 0a19 	add.w	sl, r4, #25
 80190fa:	68e3      	ldr	r3, [r4, #12]
 80190fc:	6832      	ldr	r2, [r6, #0]
 80190fe:	1a9b      	subs	r3, r3, r2
 8019100:	42ab      	cmp	r3, r5
 8019102:	dc26      	bgt.n	8019152 <_printf_common+0x96>
 8019104:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019108:	1e13      	subs	r3, r2, #0
 801910a:	6822      	ldr	r2, [r4, #0]
 801910c:	bf18      	it	ne
 801910e:	2301      	movne	r3, #1
 8019110:	0692      	lsls	r2, r2, #26
 8019112:	d42b      	bmi.n	801916c <_printf_common+0xb0>
 8019114:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019118:	4649      	mov	r1, r9
 801911a:	4638      	mov	r0, r7
 801911c:	47c0      	blx	r8
 801911e:	3001      	adds	r0, #1
 8019120:	d01e      	beq.n	8019160 <_printf_common+0xa4>
 8019122:	6823      	ldr	r3, [r4, #0]
 8019124:	6922      	ldr	r2, [r4, #16]
 8019126:	f003 0306 	and.w	r3, r3, #6
 801912a:	2b04      	cmp	r3, #4
 801912c:	bf02      	ittt	eq
 801912e:	68e5      	ldreq	r5, [r4, #12]
 8019130:	6833      	ldreq	r3, [r6, #0]
 8019132:	1aed      	subeq	r5, r5, r3
 8019134:	68a3      	ldr	r3, [r4, #8]
 8019136:	bf0c      	ite	eq
 8019138:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801913c:	2500      	movne	r5, #0
 801913e:	4293      	cmp	r3, r2
 8019140:	bfc4      	itt	gt
 8019142:	1a9b      	subgt	r3, r3, r2
 8019144:	18ed      	addgt	r5, r5, r3
 8019146:	2600      	movs	r6, #0
 8019148:	341a      	adds	r4, #26
 801914a:	42b5      	cmp	r5, r6
 801914c:	d11a      	bne.n	8019184 <_printf_common+0xc8>
 801914e:	2000      	movs	r0, #0
 8019150:	e008      	b.n	8019164 <_printf_common+0xa8>
 8019152:	2301      	movs	r3, #1
 8019154:	4652      	mov	r2, sl
 8019156:	4649      	mov	r1, r9
 8019158:	4638      	mov	r0, r7
 801915a:	47c0      	blx	r8
 801915c:	3001      	adds	r0, #1
 801915e:	d103      	bne.n	8019168 <_printf_common+0xac>
 8019160:	f04f 30ff 	mov.w	r0, #4294967295
 8019164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019168:	3501      	adds	r5, #1
 801916a:	e7c6      	b.n	80190fa <_printf_common+0x3e>
 801916c:	18e1      	adds	r1, r4, r3
 801916e:	1c5a      	adds	r2, r3, #1
 8019170:	2030      	movs	r0, #48	; 0x30
 8019172:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019176:	4422      	add	r2, r4
 8019178:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801917c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019180:	3302      	adds	r3, #2
 8019182:	e7c7      	b.n	8019114 <_printf_common+0x58>
 8019184:	2301      	movs	r3, #1
 8019186:	4622      	mov	r2, r4
 8019188:	4649      	mov	r1, r9
 801918a:	4638      	mov	r0, r7
 801918c:	47c0      	blx	r8
 801918e:	3001      	adds	r0, #1
 8019190:	d0e6      	beq.n	8019160 <_printf_common+0xa4>
 8019192:	3601      	adds	r6, #1
 8019194:	e7d9      	b.n	801914a <_printf_common+0x8e>
	...

08019198 <_printf_i>:
 8019198:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801919c:	7e0f      	ldrb	r7, [r1, #24]
 801919e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80191a0:	2f78      	cmp	r7, #120	; 0x78
 80191a2:	4691      	mov	r9, r2
 80191a4:	4680      	mov	r8, r0
 80191a6:	460c      	mov	r4, r1
 80191a8:	469a      	mov	sl, r3
 80191aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80191ae:	d807      	bhi.n	80191c0 <_printf_i+0x28>
 80191b0:	2f62      	cmp	r7, #98	; 0x62
 80191b2:	d80a      	bhi.n	80191ca <_printf_i+0x32>
 80191b4:	2f00      	cmp	r7, #0
 80191b6:	f000 80d4 	beq.w	8019362 <_printf_i+0x1ca>
 80191ba:	2f58      	cmp	r7, #88	; 0x58
 80191bc:	f000 80c0 	beq.w	8019340 <_printf_i+0x1a8>
 80191c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80191c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80191c8:	e03a      	b.n	8019240 <_printf_i+0xa8>
 80191ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80191ce:	2b15      	cmp	r3, #21
 80191d0:	d8f6      	bhi.n	80191c0 <_printf_i+0x28>
 80191d2:	a101      	add	r1, pc, #4	; (adr r1, 80191d8 <_printf_i+0x40>)
 80191d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80191d8:	08019231 	.word	0x08019231
 80191dc:	08019245 	.word	0x08019245
 80191e0:	080191c1 	.word	0x080191c1
 80191e4:	080191c1 	.word	0x080191c1
 80191e8:	080191c1 	.word	0x080191c1
 80191ec:	080191c1 	.word	0x080191c1
 80191f0:	08019245 	.word	0x08019245
 80191f4:	080191c1 	.word	0x080191c1
 80191f8:	080191c1 	.word	0x080191c1
 80191fc:	080191c1 	.word	0x080191c1
 8019200:	080191c1 	.word	0x080191c1
 8019204:	08019349 	.word	0x08019349
 8019208:	08019271 	.word	0x08019271
 801920c:	08019303 	.word	0x08019303
 8019210:	080191c1 	.word	0x080191c1
 8019214:	080191c1 	.word	0x080191c1
 8019218:	0801936b 	.word	0x0801936b
 801921c:	080191c1 	.word	0x080191c1
 8019220:	08019271 	.word	0x08019271
 8019224:	080191c1 	.word	0x080191c1
 8019228:	080191c1 	.word	0x080191c1
 801922c:	0801930b 	.word	0x0801930b
 8019230:	682b      	ldr	r3, [r5, #0]
 8019232:	1d1a      	adds	r2, r3, #4
 8019234:	681b      	ldr	r3, [r3, #0]
 8019236:	602a      	str	r2, [r5, #0]
 8019238:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801923c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019240:	2301      	movs	r3, #1
 8019242:	e09f      	b.n	8019384 <_printf_i+0x1ec>
 8019244:	6820      	ldr	r0, [r4, #0]
 8019246:	682b      	ldr	r3, [r5, #0]
 8019248:	0607      	lsls	r7, r0, #24
 801924a:	f103 0104 	add.w	r1, r3, #4
 801924e:	6029      	str	r1, [r5, #0]
 8019250:	d501      	bpl.n	8019256 <_printf_i+0xbe>
 8019252:	681e      	ldr	r6, [r3, #0]
 8019254:	e003      	b.n	801925e <_printf_i+0xc6>
 8019256:	0646      	lsls	r6, r0, #25
 8019258:	d5fb      	bpl.n	8019252 <_printf_i+0xba>
 801925a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801925e:	2e00      	cmp	r6, #0
 8019260:	da03      	bge.n	801926a <_printf_i+0xd2>
 8019262:	232d      	movs	r3, #45	; 0x2d
 8019264:	4276      	negs	r6, r6
 8019266:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801926a:	485a      	ldr	r0, [pc, #360]	; (80193d4 <_printf_i+0x23c>)
 801926c:	230a      	movs	r3, #10
 801926e:	e012      	b.n	8019296 <_printf_i+0xfe>
 8019270:	682b      	ldr	r3, [r5, #0]
 8019272:	6820      	ldr	r0, [r4, #0]
 8019274:	1d19      	adds	r1, r3, #4
 8019276:	6029      	str	r1, [r5, #0]
 8019278:	0605      	lsls	r5, r0, #24
 801927a:	d501      	bpl.n	8019280 <_printf_i+0xe8>
 801927c:	681e      	ldr	r6, [r3, #0]
 801927e:	e002      	b.n	8019286 <_printf_i+0xee>
 8019280:	0641      	lsls	r1, r0, #25
 8019282:	d5fb      	bpl.n	801927c <_printf_i+0xe4>
 8019284:	881e      	ldrh	r6, [r3, #0]
 8019286:	4853      	ldr	r0, [pc, #332]	; (80193d4 <_printf_i+0x23c>)
 8019288:	2f6f      	cmp	r7, #111	; 0x6f
 801928a:	bf0c      	ite	eq
 801928c:	2308      	moveq	r3, #8
 801928e:	230a      	movne	r3, #10
 8019290:	2100      	movs	r1, #0
 8019292:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019296:	6865      	ldr	r5, [r4, #4]
 8019298:	60a5      	str	r5, [r4, #8]
 801929a:	2d00      	cmp	r5, #0
 801929c:	bfa2      	ittt	ge
 801929e:	6821      	ldrge	r1, [r4, #0]
 80192a0:	f021 0104 	bicge.w	r1, r1, #4
 80192a4:	6021      	strge	r1, [r4, #0]
 80192a6:	b90e      	cbnz	r6, 80192ac <_printf_i+0x114>
 80192a8:	2d00      	cmp	r5, #0
 80192aa:	d04b      	beq.n	8019344 <_printf_i+0x1ac>
 80192ac:	4615      	mov	r5, r2
 80192ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80192b2:	fb03 6711 	mls	r7, r3, r1, r6
 80192b6:	5dc7      	ldrb	r7, [r0, r7]
 80192b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80192bc:	4637      	mov	r7, r6
 80192be:	42bb      	cmp	r3, r7
 80192c0:	460e      	mov	r6, r1
 80192c2:	d9f4      	bls.n	80192ae <_printf_i+0x116>
 80192c4:	2b08      	cmp	r3, #8
 80192c6:	d10b      	bne.n	80192e0 <_printf_i+0x148>
 80192c8:	6823      	ldr	r3, [r4, #0]
 80192ca:	07de      	lsls	r6, r3, #31
 80192cc:	d508      	bpl.n	80192e0 <_printf_i+0x148>
 80192ce:	6923      	ldr	r3, [r4, #16]
 80192d0:	6861      	ldr	r1, [r4, #4]
 80192d2:	4299      	cmp	r1, r3
 80192d4:	bfde      	ittt	le
 80192d6:	2330      	movle	r3, #48	; 0x30
 80192d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80192dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80192e0:	1b52      	subs	r2, r2, r5
 80192e2:	6122      	str	r2, [r4, #16]
 80192e4:	f8cd a000 	str.w	sl, [sp]
 80192e8:	464b      	mov	r3, r9
 80192ea:	aa03      	add	r2, sp, #12
 80192ec:	4621      	mov	r1, r4
 80192ee:	4640      	mov	r0, r8
 80192f0:	f7ff fee4 	bl	80190bc <_printf_common>
 80192f4:	3001      	adds	r0, #1
 80192f6:	d14a      	bne.n	801938e <_printf_i+0x1f6>
 80192f8:	f04f 30ff 	mov.w	r0, #4294967295
 80192fc:	b004      	add	sp, #16
 80192fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019302:	6823      	ldr	r3, [r4, #0]
 8019304:	f043 0320 	orr.w	r3, r3, #32
 8019308:	6023      	str	r3, [r4, #0]
 801930a:	4833      	ldr	r0, [pc, #204]	; (80193d8 <_printf_i+0x240>)
 801930c:	2778      	movs	r7, #120	; 0x78
 801930e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8019312:	6823      	ldr	r3, [r4, #0]
 8019314:	6829      	ldr	r1, [r5, #0]
 8019316:	061f      	lsls	r7, r3, #24
 8019318:	f851 6b04 	ldr.w	r6, [r1], #4
 801931c:	d402      	bmi.n	8019324 <_printf_i+0x18c>
 801931e:	065f      	lsls	r7, r3, #25
 8019320:	bf48      	it	mi
 8019322:	b2b6      	uxthmi	r6, r6
 8019324:	07df      	lsls	r7, r3, #31
 8019326:	bf48      	it	mi
 8019328:	f043 0320 	orrmi.w	r3, r3, #32
 801932c:	6029      	str	r1, [r5, #0]
 801932e:	bf48      	it	mi
 8019330:	6023      	strmi	r3, [r4, #0]
 8019332:	b91e      	cbnz	r6, 801933c <_printf_i+0x1a4>
 8019334:	6823      	ldr	r3, [r4, #0]
 8019336:	f023 0320 	bic.w	r3, r3, #32
 801933a:	6023      	str	r3, [r4, #0]
 801933c:	2310      	movs	r3, #16
 801933e:	e7a7      	b.n	8019290 <_printf_i+0xf8>
 8019340:	4824      	ldr	r0, [pc, #144]	; (80193d4 <_printf_i+0x23c>)
 8019342:	e7e4      	b.n	801930e <_printf_i+0x176>
 8019344:	4615      	mov	r5, r2
 8019346:	e7bd      	b.n	80192c4 <_printf_i+0x12c>
 8019348:	682b      	ldr	r3, [r5, #0]
 801934a:	6826      	ldr	r6, [r4, #0]
 801934c:	6961      	ldr	r1, [r4, #20]
 801934e:	1d18      	adds	r0, r3, #4
 8019350:	6028      	str	r0, [r5, #0]
 8019352:	0635      	lsls	r5, r6, #24
 8019354:	681b      	ldr	r3, [r3, #0]
 8019356:	d501      	bpl.n	801935c <_printf_i+0x1c4>
 8019358:	6019      	str	r1, [r3, #0]
 801935a:	e002      	b.n	8019362 <_printf_i+0x1ca>
 801935c:	0670      	lsls	r0, r6, #25
 801935e:	d5fb      	bpl.n	8019358 <_printf_i+0x1c0>
 8019360:	8019      	strh	r1, [r3, #0]
 8019362:	2300      	movs	r3, #0
 8019364:	6123      	str	r3, [r4, #16]
 8019366:	4615      	mov	r5, r2
 8019368:	e7bc      	b.n	80192e4 <_printf_i+0x14c>
 801936a:	682b      	ldr	r3, [r5, #0]
 801936c:	1d1a      	adds	r2, r3, #4
 801936e:	602a      	str	r2, [r5, #0]
 8019370:	681d      	ldr	r5, [r3, #0]
 8019372:	6862      	ldr	r2, [r4, #4]
 8019374:	2100      	movs	r1, #0
 8019376:	4628      	mov	r0, r5
 8019378:	f7e8 fa22 	bl	80017c0 <memchr>
 801937c:	b108      	cbz	r0, 8019382 <_printf_i+0x1ea>
 801937e:	1b40      	subs	r0, r0, r5
 8019380:	6060      	str	r0, [r4, #4]
 8019382:	6863      	ldr	r3, [r4, #4]
 8019384:	6123      	str	r3, [r4, #16]
 8019386:	2300      	movs	r3, #0
 8019388:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801938c:	e7aa      	b.n	80192e4 <_printf_i+0x14c>
 801938e:	6923      	ldr	r3, [r4, #16]
 8019390:	462a      	mov	r2, r5
 8019392:	4649      	mov	r1, r9
 8019394:	4640      	mov	r0, r8
 8019396:	47d0      	blx	sl
 8019398:	3001      	adds	r0, #1
 801939a:	d0ad      	beq.n	80192f8 <_printf_i+0x160>
 801939c:	6823      	ldr	r3, [r4, #0]
 801939e:	079b      	lsls	r3, r3, #30
 80193a0:	d413      	bmi.n	80193ca <_printf_i+0x232>
 80193a2:	68e0      	ldr	r0, [r4, #12]
 80193a4:	9b03      	ldr	r3, [sp, #12]
 80193a6:	4298      	cmp	r0, r3
 80193a8:	bfb8      	it	lt
 80193aa:	4618      	movlt	r0, r3
 80193ac:	e7a6      	b.n	80192fc <_printf_i+0x164>
 80193ae:	2301      	movs	r3, #1
 80193b0:	4632      	mov	r2, r6
 80193b2:	4649      	mov	r1, r9
 80193b4:	4640      	mov	r0, r8
 80193b6:	47d0      	blx	sl
 80193b8:	3001      	adds	r0, #1
 80193ba:	d09d      	beq.n	80192f8 <_printf_i+0x160>
 80193bc:	3501      	adds	r5, #1
 80193be:	68e3      	ldr	r3, [r4, #12]
 80193c0:	9903      	ldr	r1, [sp, #12]
 80193c2:	1a5b      	subs	r3, r3, r1
 80193c4:	42ab      	cmp	r3, r5
 80193c6:	dcf2      	bgt.n	80193ae <_printf_i+0x216>
 80193c8:	e7eb      	b.n	80193a2 <_printf_i+0x20a>
 80193ca:	2500      	movs	r5, #0
 80193cc:	f104 0619 	add.w	r6, r4, #25
 80193d0:	e7f5      	b.n	80193be <_printf_i+0x226>
 80193d2:	bf00      	nop
 80193d4:	0801e978 	.word	0x0801e978
 80193d8:	0801e989 	.word	0x0801e989

080193dc <std>:
 80193dc:	2300      	movs	r3, #0
 80193de:	b510      	push	{r4, lr}
 80193e0:	4604      	mov	r4, r0
 80193e2:	e9c0 3300 	strd	r3, r3, [r0]
 80193e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80193ea:	6083      	str	r3, [r0, #8]
 80193ec:	8181      	strh	r1, [r0, #12]
 80193ee:	6643      	str	r3, [r0, #100]	; 0x64
 80193f0:	81c2      	strh	r2, [r0, #14]
 80193f2:	6183      	str	r3, [r0, #24]
 80193f4:	4619      	mov	r1, r3
 80193f6:	2208      	movs	r2, #8
 80193f8:	305c      	adds	r0, #92	; 0x5c
 80193fa:	f000 f9f5 	bl	80197e8 <memset>
 80193fe:	4b05      	ldr	r3, [pc, #20]	; (8019414 <std+0x38>)
 8019400:	6263      	str	r3, [r4, #36]	; 0x24
 8019402:	4b05      	ldr	r3, [pc, #20]	; (8019418 <std+0x3c>)
 8019404:	62a3      	str	r3, [r4, #40]	; 0x28
 8019406:	4b05      	ldr	r3, [pc, #20]	; (801941c <std+0x40>)
 8019408:	62e3      	str	r3, [r4, #44]	; 0x2c
 801940a:	4b05      	ldr	r3, [pc, #20]	; (8019420 <std+0x44>)
 801940c:	6224      	str	r4, [r4, #32]
 801940e:	6323      	str	r3, [r4, #48]	; 0x30
 8019410:	bd10      	pop	{r4, pc}
 8019412:	bf00      	nop
 8019414:	08019619 	.word	0x08019619
 8019418:	0801963b 	.word	0x0801963b
 801941c:	08019673 	.word	0x08019673
 8019420:	08019697 	.word	0x08019697

08019424 <stdio_exit_handler>:
 8019424:	4a02      	ldr	r2, [pc, #8]	; (8019430 <stdio_exit_handler+0xc>)
 8019426:	4903      	ldr	r1, [pc, #12]	; (8019434 <stdio_exit_handler+0x10>)
 8019428:	4803      	ldr	r0, [pc, #12]	; (8019438 <stdio_exit_handler+0x14>)
 801942a:	f000 b869 	b.w	8019500 <_fwalk_sglue>
 801942e:	bf00      	nop
 8019430:	20000064 	.word	0x20000064
 8019434:	0801b1a5 	.word	0x0801b1a5
 8019438:	20000070 	.word	0x20000070

0801943c <cleanup_stdio>:
 801943c:	6841      	ldr	r1, [r0, #4]
 801943e:	4b0c      	ldr	r3, [pc, #48]	; (8019470 <cleanup_stdio+0x34>)
 8019440:	4299      	cmp	r1, r3
 8019442:	b510      	push	{r4, lr}
 8019444:	4604      	mov	r4, r0
 8019446:	d001      	beq.n	801944c <cleanup_stdio+0x10>
 8019448:	f001 feac 	bl	801b1a4 <_fflush_r>
 801944c:	68a1      	ldr	r1, [r4, #8]
 801944e:	4b09      	ldr	r3, [pc, #36]	; (8019474 <cleanup_stdio+0x38>)
 8019450:	4299      	cmp	r1, r3
 8019452:	d002      	beq.n	801945a <cleanup_stdio+0x1e>
 8019454:	4620      	mov	r0, r4
 8019456:	f001 fea5 	bl	801b1a4 <_fflush_r>
 801945a:	68e1      	ldr	r1, [r4, #12]
 801945c:	4b06      	ldr	r3, [pc, #24]	; (8019478 <cleanup_stdio+0x3c>)
 801945e:	4299      	cmp	r1, r3
 8019460:	d004      	beq.n	801946c <cleanup_stdio+0x30>
 8019462:	4620      	mov	r0, r4
 8019464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019468:	f001 be9c 	b.w	801b1a4 <_fflush_r>
 801946c:	bd10      	pop	{r4, pc}
 801946e:	bf00      	nop
 8019470:	20008224 	.word	0x20008224
 8019474:	2000828c 	.word	0x2000828c
 8019478:	200082f4 	.word	0x200082f4

0801947c <global_stdio_init.part.0>:
 801947c:	b510      	push	{r4, lr}
 801947e:	4b0b      	ldr	r3, [pc, #44]	; (80194ac <global_stdio_init.part.0+0x30>)
 8019480:	4c0b      	ldr	r4, [pc, #44]	; (80194b0 <global_stdio_init.part.0+0x34>)
 8019482:	4a0c      	ldr	r2, [pc, #48]	; (80194b4 <global_stdio_init.part.0+0x38>)
 8019484:	601a      	str	r2, [r3, #0]
 8019486:	4620      	mov	r0, r4
 8019488:	2200      	movs	r2, #0
 801948a:	2104      	movs	r1, #4
 801948c:	f7ff ffa6 	bl	80193dc <std>
 8019490:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8019494:	2201      	movs	r2, #1
 8019496:	2109      	movs	r1, #9
 8019498:	f7ff ffa0 	bl	80193dc <std>
 801949c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80194a0:	2202      	movs	r2, #2
 80194a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80194a6:	2112      	movs	r1, #18
 80194a8:	f7ff bf98 	b.w	80193dc <std>
 80194ac:	2000835c 	.word	0x2000835c
 80194b0:	20008224 	.word	0x20008224
 80194b4:	08019425 	.word	0x08019425

080194b8 <__sfp_lock_acquire>:
 80194b8:	4801      	ldr	r0, [pc, #4]	; (80194c0 <__sfp_lock_acquire+0x8>)
 80194ba:	f000 ba0b 	b.w	80198d4 <__retarget_lock_acquire_recursive>
 80194be:	bf00      	nop
 80194c0:	20008365 	.word	0x20008365

080194c4 <__sfp_lock_release>:
 80194c4:	4801      	ldr	r0, [pc, #4]	; (80194cc <__sfp_lock_release+0x8>)
 80194c6:	f000 ba06 	b.w	80198d6 <__retarget_lock_release_recursive>
 80194ca:	bf00      	nop
 80194cc:	20008365 	.word	0x20008365

080194d0 <__sinit>:
 80194d0:	b510      	push	{r4, lr}
 80194d2:	4604      	mov	r4, r0
 80194d4:	f7ff fff0 	bl	80194b8 <__sfp_lock_acquire>
 80194d8:	6a23      	ldr	r3, [r4, #32]
 80194da:	b11b      	cbz	r3, 80194e4 <__sinit+0x14>
 80194dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80194e0:	f7ff bff0 	b.w	80194c4 <__sfp_lock_release>
 80194e4:	4b04      	ldr	r3, [pc, #16]	; (80194f8 <__sinit+0x28>)
 80194e6:	6223      	str	r3, [r4, #32]
 80194e8:	4b04      	ldr	r3, [pc, #16]	; (80194fc <__sinit+0x2c>)
 80194ea:	681b      	ldr	r3, [r3, #0]
 80194ec:	2b00      	cmp	r3, #0
 80194ee:	d1f5      	bne.n	80194dc <__sinit+0xc>
 80194f0:	f7ff ffc4 	bl	801947c <global_stdio_init.part.0>
 80194f4:	e7f2      	b.n	80194dc <__sinit+0xc>
 80194f6:	bf00      	nop
 80194f8:	0801943d 	.word	0x0801943d
 80194fc:	2000835c 	.word	0x2000835c

08019500 <_fwalk_sglue>:
 8019500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019504:	4607      	mov	r7, r0
 8019506:	4688      	mov	r8, r1
 8019508:	4614      	mov	r4, r2
 801950a:	2600      	movs	r6, #0
 801950c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019510:	f1b9 0901 	subs.w	r9, r9, #1
 8019514:	d505      	bpl.n	8019522 <_fwalk_sglue+0x22>
 8019516:	6824      	ldr	r4, [r4, #0]
 8019518:	2c00      	cmp	r4, #0
 801951a:	d1f7      	bne.n	801950c <_fwalk_sglue+0xc>
 801951c:	4630      	mov	r0, r6
 801951e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019522:	89ab      	ldrh	r3, [r5, #12]
 8019524:	2b01      	cmp	r3, #1
 8019526:	d907      	bls.n	8019538 <_fwalk_sglue+0x38>
 8019528:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801952c:	3301      	adds	r3, #1
 801952e:	d003      	beq.n	8019538 <_fwalk_sglue+0x38>
 8019530:	4629      	mov	r1, r5
 8019532:	4638      	mov	r0, r7
 8019534:	47c0      	blx	r8
 8019536:	4306      	orrs	r6, r0
 8019538:	3568      	adds	r5, #104	; 0x68
 801953a:	e7e9      	b.n	8019510 <_fwalk_sglue+0x10>

0801953c <iprintf>:
 801953c:	b40f      	push	{r0, r1, r2, r3}
 801953e:	b507      	push	{r0, r1, r2, lr}
 8019540:	4906      	ldr	r1, [pc, #24]	; (801955c <iprintf+0x20>)
 8019542:	ab04      	add	r3, sp, #16
 8019544:	6808      	ldr	r0, [r1, #0]
 8019546:	f853 2b04 	ldr.w	r2, [r3], #4
 801954a:	6881      	ldr	r1, [r0, #8]
 801954c:	9301      	str	r3, [sp, #4]
 801954e:	f001 fc89 	bl	801ae64 <_vfiprintf_r>
 8019552:	b003      	add	sp, #12
 8019554:	f85d eb04 	ldr.w	lr, [sp], #4
 8019558:	b004      	add	sp, #16
 801955a:	4770      	bx	lr
 801955c:	200000bc 	.word	0x200000bc

08019560 <_puts_r>:
 8019560:	6a03      	ldr	r3, [r0, #32]
 8019562:	b570      	push	{r4, r5, r6, lr}
 8019564:	6884      	ldr	r4, [r0, #8]
 8019566:	4605      	mov	r5, r0
 8019568:	460e      	mov	r6, r1
 801956a:	b90b      	cbnz	r3, 8019570 <_puts_r+0x10>
 801956c:	f7ff ffb0 	bl	80194d0 <__sinit>
 8019570:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019572:	07db      	lsls	r3, r3, #31
 8019574:	d405      	bmi.n	8019582 <_puts_r+0x22>
 8019576:	89a3      	ldrh	r3, [r4, #12]
 8019578:	0598      	lsls	r0, r3, #22
 801957a:	d402      	bmi.n	8019582 <_puts_r+0x22>
 801957c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801957e:	f000 f9a9 	bl	80198d4 <__retarget_lock_acquire_recursive>
 8019582:	89a3      	ldrh	r3, [r4, #12]
 8019584:	0719      	lsls	r1, r3, #28
 8019586:	d513      	bpl.n	80195b0 <_puts_r+0x50>
 8019588:	6923      	ldr	r3, [r4, #16]
 801958a:	b18b      	cbz	r3, 80195b0 <_puts_r+0x50>
 801958c:	3e01      	subs	r6, #1
 801958e:	68a3      	ldr	r3, [r4, #8]
 8019590:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8019594:	3b01      	subs	r3, #1
 8019596:	60a3      	str	r3, [r4, #8]
 8019598:	b9e9      	cbnz	r1, 80195d6 <_puts_r+0x76>
 801959a:	2b00      	cmp	r3, #0
 801959c:	da2e      	bge.n	80195fc <_puts_r+0x9c>
 801959e:	4622      	mov	r2, r4
 80195a0:	210a      	movs	r1, #10
 80195a2:	4628      	mov	r0, r5
 80195a4:	f000 f87b 	bl	801969e <__swbuf_r>
 80195a8:	3001      	adds	r0, #1
 80195aa:	d007      	beq.n	80195bc <_puts_r+0x5c>
 80195ac:	250a      	movs	r5, #10
 80195ae:	e007      	b.n	80195c0 <_puts_r+0x60>
 80195b0:	4621      	mov	r1, r4
 80195b2:	4628      	mov	r0, r5
 80195b4:	f000 f8b0 	bl	8019718 <__swsetup_r>
 80195b8:	2800      	cmp	r0, #0
 80195ba:	d0e7      	beq.n	801958c <_puts_r+0x2c>
 80195bc:	f04f 35ff 	mov.w	r5, #4294967295
 80195c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80195c2:	07da      	lsls	r2, r3, #31
 80195c4:	d405      	bmi.n	80195d2 <_puts_r+0x72>
 80195c6:	89a3      	ldrh	r3, [r4, #12]
 80195c8:	059b      	lsls	r3, r3, #22
 80195ca:	d402      	bmi.n	80195d2 <_puts_r+0x72>
 80195cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80195ce:	f000 f982 	bl	80198d6 <__retarget_lock_release_recursive>
 80195d2:	4628      	mov	r0, r5
 80195d4:	bd70      	pop	{r4, r5, r6, pc}
 80195d6:	2b00      	cmp	r3, #0
 80195d8:	da04      	bge.n	80195e4 <_puts_r+0x84>
 80195da:	69a2      	ldr	r2, [r4, #24]
 80195dc:	429a      	cmp	r2, r3
 80195de:	dc06      	bgt.n	80195ee <_puts_r+0x8e>
 80195e0:	290a      	cmp	r1, #10
 80195e2:	d004      	beq.n	80195ee <_puts_r+0x8e>
 80195e4:	6823      	ldr	r3, [r4, #0]
 80195e6:	1c5a      	adds	r2, r3, #1
 80195e8:	6022      	str	r2, [r4, #0]
 80195ea:	7019      	strb	r1, [r3, #0]
 80195ec:	e7cf      	b.n	801958e <_puts_r+0x2e>
 80195ee:	4622      	mov	r2, r4
 80195f0:	4628      	mov	r0, r5
 80195f2:	f000 f854 	bl	801969e <__swbuf_r>
 80195f6:	3001      	adds	r0, #1
 80195f8:	d1c9      	bne.n	801958e <_puts_r+0x2e>
 80195fa:	e7df      	b.n	80195bc <_puts_r+0x5c>
 80195fc:	6823      	ldr	r3, [r4, #0]
 80195fe:	250a      	movs	r5, #10
 8019600:	1c5a      	adds	r2, r3, #1
 8019602:	6022      	str	r2, [r4, #0]
 8019604:	701d      	strb	r5, [r3, #0]
 8019606:	e7db      	b.n	80195c0 <_puts_r+0x60>

08019608 <puts>:
 8019608:	4b02      	ldr	r3, [pc, #8]	; (8019614 <puts+0xc>)
 801960a:	4601      	mov	r1, r0
 801960c:	6818      	ldr	r0, [r3, #0]
 801960e:	f7ff bfa7 	b.w	8019560 <_puts_r>
 8019612:	bf00      	nop
 8019614:	200000bc 	.word	0x200000bc

08019618 <__sread>:
 8019618:	b510      	push	{r4, lr}
 801961a:	460c      	mov	r4, r1
 801961c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019620:	f000 f910 	bl	8019844 <_read_r>
 8019624:	2800      	cmp	r0, #0
 8019626:	bfab      	itete	ge
 8019628:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801962a:	89a3      	ldrhlt	r3, [r4, #12]
 801962c:	181b      	addge	r3, r3, r0
 801962e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8019632:	bfac      	ite	ge
 8019634:	6563      	strge	r3, [r4, #84]	; 0x54
 8019636:	81a3      	strhlt	r3, [r4, #12]
 8019638:	bd10      	pop	{r4, pc}

0801963a <__swrite>:
 801963a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801963e:	461f      	mov	r7, r3
 8019640:	898b      	ldrh	r3, [r1, #12]
 8019642:	05db      	lsls	r3, r3, #23
 8019644:	4605      	mov	r5, r0
 8019646:	460c      	mov	r4, r1
 8019648:	4616      	mov	r6, r2
 801964a:	d505      	bpl.n	8019658 <__swrite+0x1e>
 801964c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019650:	2302      	movs	r3, #2
 8019652:	2200      	movs	r2, #0
 8019654:	f000 f8e4 	bl	8019820 <_lseek_r>
 8019658:	89a3      	ldrh	r3, [r4, #12]
 801965a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801965e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019662:	81a3      	strh	r3, [r4, #12]
 8019664:	4632      	mov	r2, r6
 8019666:	463b      	mov	r3, r7
 8019668:	4628      	mov	r0, r5
 801966a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801966e:	f000 b8fb 	b.w	8019868 <_write_r>

08019672 <__sseek>:
 8019672:	b510      	push	{r4, lr}
 8019674:	460c      	mov	r4, r1
 8019676:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801967a:	f000 f8d1 	bl	8019820 <_lseek_r>
 801967e:	1c43      	adds	r3, r0, #1
 8019680:	89a3      	ldrh	r3, [r4, #12]
 8019682:	bf15      	itete	ne
 8019684:	6560      	strne	r0, [r4, #84]	; 0x54
 8019686:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801968a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801968e:	81a3      	strheq	r3, [r4, #12]
 8019690:	bf18      	it	ne
 8019692:	81a3      	strhne	r3, [r4, #12]
 8019694:	bd10      	pop	{r4, pc}

08019696 <__sclose>:
 8019696:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801969a:	f000 b8b1 	b.w	8019800 <_close_r>

0801969e <__swbuf_r>:
 801969e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80196a0:	460e      	mov	r6, r1
 80196a2:	4614      	mov	r4, r2
 80196a4:	4605      	mov	r5, r0
 80196a6:	b118      	cbz	r0, 80196b0 <__swbuf_r+0x12>
 80196a8:	6a03      	ldr	r3, [r0, #32]
 80196aa:	b90b      	cbnz	r3, 80196b0 <__swbuf_r+0x12>
 80196ac:	f7ff ff10 	bl	80194d0 <__sinit>
 80196b0:	69a3      	ldr	r3, [r4, #24]
 80196b2:	60a3      	str	r3, [r4, #8]
 80196b4:	89a3      	ldrh	r3, [r4, #12]
 80196b6:	071a      	lsls	r2, r3, #28
 80196b8:	d525      	bpl.n	8019706 <__swbuf_r+0x68>
 80196ba:	6923      	ldr	r3, [r4, #16]
 80196bc:	b31b      	cbz	r3, 8019706 <__swbuf_r+0x68>
 80196be:	6823      	ldr	r3, [r4, #0]
 80196c0:	6922      	ldr	r2, [r4, #16]
 80196c2:	1a98      	subs	r0, r3, r2
 80196c4:	6963      	ldr	r3, [r4, #20]
 80196c6:	b2f6      	uxtb	r6, r6
 80196c8:	4283      	cmp	r3, r0
 80196ca:	4637      	mov	r7, r6
 80196cc:	dc04      	bgt.n	80196d8 <__swbuf_r+0x3a>
 80196ce:	4621      	mov	r1, r4
 80196d0:	4628      	mov	r0, r5
 80196d2:	f001 fd67 	bl	801b1a4 <_fflush_r>
 80196d6:	b9e0      	cbnz	r0, 8019712 <__swbuf_r+0x74>
 80196d8:	68a3      	ldr	r3, [r4, #8]
 80196da:	3b01      	subs	r3, #1
 80196dc:	60a3      	str	r3, [r4, #8]
 80196de:	6823      	ldr	r3, [r4, #0]
 80196e0:	1c5a      	adds	r2, r3, #1
 80196e2:	6022      	str	r2, [r4, #0]
 80196e4:	701e      	strb	r6, [r3, #0]
 80196e6:	6962      	ldr	r2, [r4, #20]
 80196e8:	1c43      	adds	r3, r0, #1
 80196ea:	429a      	cmp	r2, r3
 80196ec:	d004      	beq.n	80196f8 <__swbuf_r+0x5a>
 80196ee:	89a3      	ldrh	r3, [r4, #12]
 80196f0:	07db      	lsls	r3, r3, #31
 80196f2:	d506      	bpl.n	8019702 <__swbuf_r+0x64>
 80196f4:	2e0a      	cmp	r6, #10
 80196f6:	d104      	bne.n	8019702 <__swbuf_r+0x64>
 80196f8:	4621      	mov	r1, r4
 80196fa:	4628      	mov	r0, r5
 80196fc:	f001 fd52 	bl	801b1a4 <_fflush_r>
 8019700:	b938      	cbnz	r0, 8019712 <__swbuf_r+0x74>
 8019702:	4638      	mov	r0, r7
 8019704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019706:	4621      	mov	r1, r4
 8019708:	4628      	mov	r0, r5
 801970a:	f000 f805 	bl	8019718 <__swsetup_r>
 801970e:	2800      	cmp	r0, #0
 8019710:	d0d5      	beq.n	80196be <__swbuf_r+0x20>
 8019712:	f04f 37ff 	mov.w	r7, #4294967295
 8019716:	e7f4      	b.n	8019702 <__swbuf_r+0x64>

08019718 <__swsetup_r>:
 8019718:	b538      	push	{r3, r4, r5, lr}
 801971a:	4b2a      	ldr	r3, [pc, #168]	; (80197c4 <__swsetup_r+0xac>)
 801971c:	4605      	mov	r5, r0
 801971e:	6818      	ldr	r0, [r3, #0]
 8019720:	460c      	mov	r4, r1
 8019722:	b118      	cbz	r0, 801972c <__swsetup_r+0x14>
 8019724:	6a03      	ldr	r3, [r0, #32]
 8019726:	b90b      	cbnz	r3, 801972c <__swsetup_r+0x14>
 8019728:	f7ff fed2 	bl	80194d0 <__sinit>
 801972c:	89a3      	ldrh	r3, [r4, #12]
 801972e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019732:	0718      	lsls	r0, r3, #28
 8019734:	d422      	bmi.n	801977c <__swsetup_r+0x64>
 8019736:	06d9      	lsls	r1, r3, #27
 8019738:	d407      	bmi.n	801974a <__swsetup_r+0x32>
 801973a:	2309      	movs	r3, #9
 801973c:	602b      	str	r3, [r5, #0]
 801973e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019742:	81a3      	strh	r3, [r4, #12]
 8019744:	f04f 30ff 	mov.w	r0, #4294967295
 8019748:	e034      	b.n	80197b4 <__swsetup_r+0x9c>
 801974a:	0758      	lsls	r0, r3, #29
 801974c:	d512      	bpl.n	8019774 <__swsetup_r+0x5c>
 801974e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019750:	b141      	cbz	r1, 8019764 <__swsetup_r+0x4c>
 8019752:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019756:	4299      	cmp	r1, r3
 8019758:	d002      	beq.n	8019760 <__swsetup_r+0x48>
 801975a:	4628      	mov	r0, r5
 801975c:	f000 fedc 	bl	801a518 <_free_r>
 8019760:	2300      	movs	r3, #0
 8019762:	6363      	str	r3, [r4, #52]	; 0x34
 8019764:	89a3      	ldrh	r3, [r4, #12]
 8019766:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801976a:	81a3      	strh	r3, [r4, #12]
 801976c:	2300      	movs	r3, #0
 801976e:	6063      	str	r3, [r4, #4]
 8019770:	6923      	ldr	r3, [r4, #16]
 8019772:	6023      	str	r3, [r4, #0]
 8019774:	89a3      	ldrh	r3, [r4, #12]
 8019776:	f043 0308 	orr.w	r3, r3, #8
 801977a:	81a3      	strh	r3, [r4, #12]
 801977c:	6923      	ldr	r3, [r4, #16]
 801977e:	b94b      	cbnz	r3, 8019794 <__swsetup_r+0x7c>
 8019780:	89a3      	ldrh	r3, [r4, #12]
 8019782:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019786:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801978a:	d003      	beq.n	8019794 <__swsetup_r+0x7c>
 801978c:	4621      	mov	r1, r4
 801978e:	4628      	mov	r0, r5
 8019790:	f001 fd68 	bl	801b264 <__smakebuf_r>
 8019794:	89a0      	ldrh	r0, [r4, #12]
 8019796:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801979a:	f010 0301 	ands.w	r3, r0, #1
 801979e:	d00a      	beq.n	80197b6 <__swsetup_r+0x9e>
 80197a0:	2300      	movs	r3, #0
 80197a2:	60a3      	str	r3, [r4, #8]
 80197a4:	6963      	ldr	r3, [r4, #20]
 80197a6:	425b      	negs	r3, r3
 80197a8:	61a3      	str	r3, [r4, #24]
 80197aa:	6923      	ldr	r3, [r4, #16]
 80197ac:	b943      	cbnz	r3, 80197c0 <__swsetup_r+0xa8>
 80197ae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80197b2:	d1c4      	bne.n	801973e <__swsetup_r+0x26>
 80197b4:	bd38      	pop	{r3, r4, r5, pc}
 80197b6:	0781      	lsls	r1, r0, #30
 80197b8:	bf58      	it	pl
 80197ba:	6963      	ldrpl	r3, [r4, #20]
 80197bc:	60a3      	str	r3, [r4, #8]
 80197be:	e7f4      	b.n	80197aa <__swsetup_r+0x92>
 80197c0:	2000      	movs	r0, #0
 80197c2:	e7f7      	b.n	80197b4 <__swsetup_r+0x9c>
 80197c4:	200000bc 	.word	0x200000bc

080197c8 <memcmp>:
 80197c8:	b510      	push	{r4, lr}
 80197ca:	3901      	subs	r1, #1
 80197cc:	4402      	add	r2, r0
 80197ce:	4290      	cmp	r0, r2
 80197d0:	d101      	bne.n	80197d6 <memcmp+0xe>
 80197d2:	2000      	movs	r0, #0
 80197d4:	e005      	b.n	80197e2 <memcmp+0x1a>
 80197d6:	7803      	ldrb	r3, [r0, #0]
 80197d8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80197dc:	42a3      	cmp	r3, r4
 80197de:	d001      	beq.n	80197e4 <memcmp+0x1c>
 80197e0:	1b18      	subs	r0, r3, r4
 80197e2:	bd10      	pop	{r4, pc}
 80197e4:	3001      	adds	r0, #1
 80197e6:	e7f2      	b.n	80197ce <memcmp+0x6>

080197e8 <memset>:
 80197e8:	4402      	add	r2, r0
 80197ea:	4603      	mov	r3, r0
 80197ec:	4293      	cmp	r3, r2
 80197ee:	d100      	bne.n	80197f2 <memset+0xa>
 80197f0:	4770      	bx	lr
 80197f2:	f803 1b01 	strb.w	r1, [r3], #1
 80197f6:	e7f9      	b.n	80197ec <memset+0x4>

080197f8 <_localeconv_r>:
 80197f8:	4800      	ldr	r0, [pc, #0]	; (80197fc <_localeconv_r+0x4>)
 80197fa:	4770      	bx	lr
 80197fc:	200001b0 	.word	0x200001b0

08019800 <_close_r>:
 8019800:	b538      	push	{r3, r4, r5, lr}
 8019802:	4d06      	ldr	r5, [pc, #24]	; (801981c <_close_r+0x1c>)
 8019804:	2300      	movs	r3, #0
 8019806:	4604      	mov	r4, r0
 8019808:	4608      	mov	r0, r1
 801980a:	602b      	str	r3, [r5, #0]
 801980c:	f7e9 fcc5 	bl	800319a <_close>
 8019810:	1c43      	adds	r3, r0, #1
 8019812:	d102      	bne.n	801981a <_close_r+0x1a>
 8019814:	682b      	ldr	r3, [r5, #0]
 8019816:	b103      	cbz	r3, 801981a <_close_r+0x1a>
 8019818:	6023      	str	r3, [r4, #0]
 801981a:	bd38      	pop	{r3, r4, r5, pc}
 801981c:	20008360 	.word	0x20008360

08019820 <_lseek_r>:
 8019820:	b538      	push	{r3, r4, r5, lr}
 8019822:	4d07      	ldr	r5, [pc, #28]	; (8019840 <_lseek_r+0x20>)
 8019824:	4604      	mov	r4, r0
 8019826:	4608      	mov	r0, r1
 8019828:	4611      	mov	r1, r2
 801982a:	2200      	movs	r2, #0
 801982c:	602a      	str	r2, [r5, #0]
 801982e:	461a      	mov	r2, r3
 8019830:	f7e9 fcda 	bl	80031e8 <_lseek>
 8019834:	1c43      	adds	r3, r0, #1
 8019836:	d102      	bne.n	801983e <_lseek_r+0x1e>
 8019838:	682b      	ldr	r3, [r5, #0]
 801983a:	b103      	cbz	r3, 801983e <_lseek_r+0x1e>
 801983c:	6023      	str	r3, [r4, #0]
 801983e:	bd38      	pop	{r3, r4, r5, pc}
 8019840:	20008360 	.word	0x20008360

08019844 <_read_r>:
 8019844:	b538      	push	{r3, r4, r5, lr}
 8019846:	4d07      	ldr	r5, [pc, #28]	; (8019864 <_read_r+0x20>)
 8019848:	4604      	mov	r4, r0
 801984a:	4608      	mov	r0, r1
 801984c:	4611      	mov	r1, r2
 801984e:	2200      	movs	r2, #0
 8019850:	602a      	str	r2, [r5, #0]
 8019852:	461a      	mov	r2, r3
 8019854:	f7e9 fc68 	bl	8003128 <_read>
 8019858:	1c43      	adds	r3, r0, #1
 801985a:	d102      	bne.n	8019862 <_read_r+0x1e>
 801985c:	682b      	ldr	r3, [r5, #0]
 801985e:	b103      	cbz	r3, 8019862 <_read_r+0x1e>
 8019860:	6023      	str	r3, [r4, #0]
 8019862:	bd38      	pop	{r3, r4, r5, pc}
 8019864:	20008360 	.word	0x20008360

08019868 <_write_r>:
 8019868:	b538      	push	{r3, r4, r5, lr}
 801986a:	4d07      	ldr	r5, [pc, #28]	; (8019888 <_write_r+0x20>)
 801986c:	4604      	mov	r4, r0
 801986e:	4608      	mov	r0, r1
 8019870:	4611      	mov	r1, r2
 8019872:	2200      	movs	r2, #0
 8019874:	602a      	str	r2, [r5, #0]
 8019876:	461a      	mov	r2, r3
 8019878:	f7e9 fc73 	bl	8003162 <_write>
 801987c:	1c43      	adds	r3, r0, #1
 801987e:	d102      	bne.n	8019886 <_write_r+0x1e>
 8019880:	682b      	ldr	r3, [r5, #0]
 8019882:	b103      	cbz	r3, 8019886 <_write_r+0x1e>
 8019884:	6023      	str	r3, [r4, #0]
 8019886:	bd38      	pop	{r3, r4, r5, pc}
 8019888:	20008360 	.word	0x20008360

0801988c <__libc_init_array>:
 801988c:	b570      	push	{r4, r5, r6, lr}
 801988e:	4d0d      	ldr	r5, [pc, #52]	; (80198c4 <__libc_init_array+0x38>)
 8019890:	4c0d      	ldr	r4, [pc, #52]	; (80198c8 <__libc_init_array+0x3c>)
 8019892:	1b64      	subs	r4, r4, r5
 8019894:	10a4      	asrs	r4, r4, #2
 8019896:	2600      	movs	r6, #0
 8019898:	42a6      	cmp	r6, r4
 801989a:	d109      	bne.n	80198b0 <__libc_init_array+0x24>
 801989c:	4d0b      	ldr	r5, [pc, #44]	; (80198cc <__libc_init_array+0x40>)
 801989e:	4c0c      	ldr	r4, [pc, #48]	; (80198d0 <__libc_init_array+0x44>)
 80198a0:	f001 fdce 	bl	801b440 <_init>
 80198a4:	1b64      	subs	r4, r4, r5
 80198a6:	10a4      	asrs	r4, r4, #2
 80198a8:	2600      	movs	r6, #0
 80198aa:	42a6      	cmp	r6, r4
 80198ac:	d105      	bne.n	80198ba <__libc_init_array+0x2e>
 80198ae:	bd70      	pop	{r4, r5, r6, pc}
 80198b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80198b4:	4798      	blx	r3
 80198b6:	3601      	adds	r6, #1
 80198b8:	e7ee      	b.n	8019898 <__libc_init_array+0xc>
 80198ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80198be:	4798      	blx	r3
 80198c0:	3601      	adds	r6, #1
 80198c2:	e7f2      	b.n	80198aa <__libc_init_array+0x1e>
 80198c4:	0801ebc8 	.word	0x0801ebc8
 80198c8:	0801ebc8 	.word	0x0801ebc8
 80198cc:	0801ebc8 	.word	0x0801ebc8
 80198d0:	0801ebcc 	.word	0x0801ebcc

080198d4 <__retarget_lock_acquire_recursive>:
 80198d4:	4770      	bx	lr

080198d6 <__retarget_lock_release_recursive>:
 80198d6:	4770      	bx	lr

080198d8 <memcpy>:
 80198d8:	440a      	add	r2, r1
 80198da:	4291      	cmp	r1, r2
 80198dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80198e0:	d100      	bne.n	80198e4 <memcpy+0xc>
 80198e2:	4770      	bx	lr
 80198e4:	b510      	push	{r4, lr}
 80198e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80198ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80198ee:	4291      	cmp	r1, r2
 80198f0:	d1f9      	bne.n	80198e6 <memcpy+0xe>
 80198f2:	bd10      	pop	{r4, pc}

080198f4 <__assert_func>:
 80198f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80198f6:	4614      	mov	r4, r2
 80198f8:	461a      	mov	r2, r3
 80198fa:	4b09      	ldr	r3, [pc, #36]	; (8019920 <__assert_func+0x2c>)
 80198fc:	681b      	ldr	r3, [r3, #0]
 80198fe:	4605      	mov	r5, r0
 8019900:	68d8      	ldr	r0, [r3, #12]
 8019902:	b14c      	cbz	r4, 8019918 <__assert_func+0x24>
 8019904:	4b07      	ldr	r3, [pc, #28]	; (8019924 <__assert_func+0x30>)
 8019906:	9100      	str	r1, [sp, #0]
 8019908:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801990c:	4906      	ldr	r1, [pc, #24]	; (8019928 <__assert_func+0x34>)
 801990e:	462b      	mov	r3, r5
 8019910:	f001 fc70 	bl	801b1f4 <fiprintf>
 8019914:	f001 fd14 	bl	801b340 <abort>
 8019918:	4b04      	ldr	r3, [pc, #16]	; (801992c <__assert_func+0x38>)
 801991a:	461c      	mov	r4, r3
 801991c:	e7f3      	b.n	8019906 <__assert_func+0x12>
 801991e:	bf00      	nop
 8019920:	200000bc 	.word	0x200000bc
 8019924:	0801e99a 	.word	0x0801e99a
 8019928:	0801e9a7 	.word	0x0801e9a7
 801992c:	0801e9d5 	.word	0x0801e9d5

08019930 <quorem>:
 8019930:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019934:	6903      	ldr	r3, [r0, #16]
 8019936:	690c      	ldr	r4, [r1, #16]
 8019938:	42a3      	cmp	r3, r4
 801993a:	4607      	mov	r7, r0
 801993c:	db7e      	blt.n	8019a3c <quorem+0x10c>
 801993e:	3c01      	subs	r4, #1
 8019940:	f101 0814 	add.w	r8, r1, #20
 8019944:	f100 0514 	add.w	r5, r0, #20
 8019948:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801994c:	9301      	str	r3, [sp, #4]
 801994e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8019952:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8019956:	3301      	adds	r3, #1
 8019958:	429a      	cmp	r2, r3
 801995a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801995e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8019962:	fbb2 f6f3 	udiv	r6, r2, r3
 8019966:	d331      	bcc.n	80199cc <quorem+0x9c>
 8019968:	f04f 0e00 	mov.w	lr, #0
 801996c:	4640      	mov	r0, r8
 801996e:	46ac      	mov	ip, r5
 8019970:	46f2      	mov	sl, lr
 8019972:	f850 2b04 	ldr.w	r2, [r0], #4
 8019976:	b293      	uxth	r3, r2
 8019978:	fb06 e303 	mla	r3, r6, r3, lr
 801997c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8019980:	0c1a      	lsrs	r2, r3, #16
 8019982:	b29b      	uxth	r3, r3
 8019984:	ebaa 0303 	sub.w	r3, sl, r3
 8019988:	f8dc a000 	ldr.w	sl, [ip]
 801998c:	fa13 f38a 	uxtah	r3, r3, sl
 8019990:	fb06 220e 	mla	r2, r6, lr, r2
 8019994:	9300      	str	r3, [sp, #0]
 8019996:	9b00      	ldr	r3, [sp, #0]
 8019998:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801999c:	b292      	uxth	r2, r2
 801999e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80199a2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80199a6:	f8bd 3000 	ldrh.w	r3, [sp]
 80199aa:	4581      	cmp	r9, r0
 80199ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80199b0:	f84c 3b04 	str.w	r3, [ip], #4
 80199b4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80199b8:	d2db      	bcs.n	8019972 <quorem+0x42>
 80199ba:	f855 300b 	ldr.w	r3, [r5, fp]
 80199be:	b92b      	cbnz	r3, 80199cc <quorem+0x9c>
 80199c0:	9b01      	ldr	r3, [sp, #4]
 80199c2:	3b04      	subs	r3, #4
 80199c4:	429d      	cmp	r5, r3
 80199c6:	461a      	mov	r2, r3
 80199c8:	d32c      	bcc.n	8019a24 <quorem+0xf4>
 80199ca:	613c      	str	r4, [r7, #16]
 80199cc:	4638      	mov	r0, r7
 80199ce:	f001 f91f 	bl	801ac10 <__mcmp>
 80199d2:	2800      	cmp	r0, #0
 80199d4:	db22      	blt.n	8019a1c <quorem+0xec>
 80199d6:	3601      	adds	r6, #1
 80199d8:	4629      	mov	r1, r5
 80199da:	2000      	movs	r0, #0
 80199dc:	f858 2b04 	ldr.w	r2, [r8], #4
 80199e0:	f8d1 c000 	ldr.w	ip, [r1]
 80199e4:	b293      	uxth	r3, r2
 80199e6:	1ac3      	subs	r3, r0, r3
 80199e8:	0c12      	lsrs	r2, r2, #16
 80199ea:	fa13 f38c 	uxtah	r3, r3, ip
 80199ee:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80199f2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80199f6:	b29b      	uxth	r3, r3
 80199f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80199fc:	45c1      	cmp	r9, r8
 80199fe:	f841 3b04 	str.w	r3, [r1], #4
 8019a02:	ea4f 4022 	mov.w	r0, r2, asr #16
 8019a06:	d2e9      	bcs.n	80199dc <quorem+0xac>
 8019a08:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8019a0c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8019a10:	b922      	cbnz	r2, 8019a1c <quorem+0xec>
 8019a12:	3b04      	subs	r3, #4
 8019a14:	429d      	cmp	r5, r3
 8019a16:	461a      	mov	r2, r3
 8019a18:	d30a      	bcc.n	8019a30 <quorem+0x100>
 8019a1a:	613c      	str	r4, [r7, #16]
 8019a1c:	4630      	mov	r0, r6
 8019a1e:	b003      	add	sp, #12
 8019a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a24:	6812      	ldr	r2, [r2, #0]
 8019a26:	3b04      	subs	r3, #4
 8019a28:	2a00      	cmp	r2, #0
 8019a2a:	d1ce      	bne.n	80199ca <quorem+0x9a>
 8019a2c:	3c01      	subs	r4, #1
 8019a2e:	e7c9      	b.n	80199c4 <quorem+0x94>
 8019a30:	6812      	ldr	r2, [r2, #0]
 8019a32:	3b04      	subs	r3, #4
 8019a34:	2a00      	cmp	r2, #0
 8019a36:	d1f0      	bne.n	8019a1a <quorem+0xea>
 8019a38:	3c01      	subs	r4, #1
 8019a3a:	e7eb      	b.n	8019a14 <quorem+0xe4>
 8019a3c:	2000      	movs	r0, #0
 8019a3e:	e7ee      	b.n	8019a1e <quorem+0xee>

08019a40 <_dtoa_r>:
 8019a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a44:	ed2d 8b02 	vpush	{d8}
 8019a48:	69c5      	ldr	r5, [r0, #28]
 8019a4a:	b091      	sub	sp, #68	; 0x44
 8019a4c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8019a50:	ec59 8b10 	vmov	r8, r9, d0
 8019a54:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8019a56:	9106      	str	r1, [sp, #24]
 8019a58:	4606      	mov	r6, r0
 8019a5a:	9208      	str	r2, [sp, #32]
 8019a5c:	930c      	str	r3, [sp, #48]	; 0x30
 8019a5e:	b975      	cbnz	r5, 8019a7e <_dtoa_r+0x3e>
 8019a60:	2010      	movs	r0, #16
 8019a62:	f000 fda5 	bl	801a5b0 <malloc>
 8019a66:	4602      	mov	r2, r0
 8019a68:	61f0      	str	r0, [r6, #28]
 8019a6a:	b920      	cbnz	r0, 8019a76 <_dtoa_r+0x36>
 8019a6c:	4ba6      	ldr	r3, [pc, #664]	; (8019d08 <_dtoa_r+0x2c8>)
 8019a6e:	21ef      	movs	r1, #239	; 0xef
 8019a70:	48a6      	ldr	r0, [pc, #664]	; (8019d0c <_dtoa_r+0x2cc>)
 8019a72:	f7ff ff3f 	bl	80198f4 <__assert_func>
 8019a76:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8019a7a:	6005      	str	r5, [r0, #0]
 8019a7c:	60c5      	str	r5, [r0, #12]
 8019a7e:	69f3      	ldr	r3, [r6, #28]
 8019a80:	6819      	ldr	r1, [r3, #0]
 8019a82:	b151      	cbz	r1, 8019a9a <_dtoa_r+0x5a>
 8019a84:	685a      	ldr	r2, [r3, #4]
 8019a86:	604a      	str	r2, [r1, #4]
 8019a88:	2301      	movs	r3, #1
 8019a8a:	4093      	lsls	r3, r2
 8019a8c:	608b      	str	r3, [r1, #8]
 8019a8e:	4630      	mov	r0, r6
 8019a90:	f000 fe82 	bl	801a798 <_Bfree>
 8019a94:	69f3      	ldr	r3, [r6, #28]
 8019a96:	2200      	movs	r2, #0
 8019a98:	601a      	str	r2, [r3, #0]
 8019a9a:	f1b9 0300 	subs.w	r3, r9, #0
 8019a9e:	bfbb      	ittet	lt
 8019aa0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8019aa4:	9303      	strlt	r3, [sp, #12]
 8019aa6:	2300      	movge	r3, #0
 8019aa8:	2201      	movlt	r2, #1
 8019aaa:	bfac      	ite	ge
 8019aac:	6023      	strge	r3, [r4, #0]
 8019aae:	6022      	strlt	r2, [r4, #0]
 8019ab0:	4b97      	ldr	r3, [pc, #604]	; (8019d10 <_dtoa_r+0x2d0>)
 8019ab2:	9c03      	ldr	r4, [sp, #12]
 8019ab4:	43a3      	bics	r3, r4
 8019ab6:	d11c      	bne.n	8019af2 <_dtoa_r+0xb2>
 8019ab8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019aba:	f242 730f 	movw	r3, #9999	; 0x270f
 8019abe:	6013      	str	r3, [r2, #0]
 8019ac0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8019ac4:	ea53 0308 	orrs.w	r3, r3, r8
 8019ac8:	f000 84fb 	beq.w	801a4c2 <_dtoa_r+0xa82>
 8019acc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019ace:	b963      	cbnz	r3, 8019aea <_dtoa_r+0xaa>
 8019ad0:	4b90      	ldr	r3, [pc, #576]	; (8019d14 <_dtoa_r+0x2d4>)
 8019ad2:	e020      	b.n	8019b16 <_dtoa_r+0xd6>
 8019ad4:	4b90      	ldr	r3, [pc, #576]	; (8019d18 <_dtoa_r+0x2d8>)
 8019ad6:	9301      	str	r3, [sp, #4]
 8019ad8:	3308      	adds	r3, #8
 8019ada:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8019adc:	6013      	str	r3, [r2, #0]
 8019ade:	9801      	ldr	r0, [sp, #4]
 8019ae0:	b011      	add	sp, #68	; 0x44
 8019ae2:	ecbd 8b02 	vpop	{d8}
 8019ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019aea:	4b8a      	ldr	r3, [pc, #552]	; (8019d14 <_dtoa_r+0x2d4>)
 8019aec:	9301      	str	r3, [sp, #4]
 8019aee:	3303      	adds	r3, #3
 8019af0:	e7f3      	b.n	8019ada <_dtoa_r+0x9a>
 8019af2:	ed9d 8b02 	vldr	d8, [sp, #8]
 8019af6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8019afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019afe:	d10c      	bne.n	8019b1a <_dtoa_r+0xda>
 8019b00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019b02:	2301      	movs	r3, #1
 8019b04:	6013      	str	r3, [r2, #0]
 8019b06:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019b08:	2b00      	cmp	r3, #0
 8019b0a:	f000 84d7 	beq.w	801a4bc <_dtoa_r+0xa7c>
 8019b0e:	4b83      	ldr	r3, [pc, #524]	; (8019d1c <_dtoa_r+0x2dc>)
 8019b10:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8019b12:	6013      	str	r3, [r2, #0]
 8019b14:	3b01      	subs	r3, #1
 8019b16:	9301      	str	r3, [sp, #4]
 8019b18:	e7e1      	b.n	8019ade <_dtoa_r+0x9e>
 8019b1a:	aa0e      	add	r2, sp, #56	; 0x38
 8019b1c:	a90f      	add	r1, sp, #60	; 0x3c
 8019b1e:	4630      	mov	r0, r6
 8019b20:	eeb0 0b48 	vmov.f64	d0, d8
 8019b24:	f001 f91a 	bl	801ad5c <__d2b>
 8019b28:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8019b2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019b2e:	4605      	mov	r5, r0
 8019b30:	2b00      	cmp	r3, #0
 8019b32:	d046      	beq.n	8019bc2 <_dtoa_r+0x182>
 8019b34:	eeb0 7b48 	vmov.f64	d7, d8
 8019b38:	ee18 1a90 	vmov	r1, s17
 8019b3c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8019b40:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8019b44:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8019b48:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8019b4c:	2000      	movs	r0, #0
 8019b4e:	ee07 1a90 	vmov	s15, r1
 8019b52:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8019b56:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8019cf0 <_dtoa_r+0x2b0>
 8019b5a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8019b5e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8019cf8 <_dtoa_r+0x2b8>
 8019b62:	eea7 6b05 	vfma.f64	d6, d7, d5
 8019b66:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8019d00 <_dtoa_r+0x2c0>
 8019b6a:	ee07 3a90 	vmov	s15, r3
 8019b6e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8019b72:	eeb0 7b46 	vmov.f64	d7, d6
 8019b76:	eea4 7b05 	vfma.f64	d7, d4, d5
 8019b7a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8019b7e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8019b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019b86:	ee16 ba90 	vmov	fp, s13
 8019b8a:	9009      	str	r0, [sp, #36]	; 0x24
 8019b8c:	d508      	bpl.n	8019ba0 <_dtoa_r+0x160>
 8019b8e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8019b92:	eeb4 6b47 	vcmp.f64	d6, d7
 8019b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019b9a:	bf18      	it	ne
 8019b9c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8019ba0:	f1bb 0f16 	cmp.w	fp, #22
 8019ba4:	d82b      	bhi.n	8019bfe <_dtoa_r+0x1be>
 8019ba6:	495e      	ldr	r1, [pc, #376]	; (8019d20 <_dtoa_r+0x2e0>)
 8019ba8:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8019bac:	ed91 7b00 	vldr	d7, [r1]
 8019bb0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8019bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019bb8:	d501      	bpl.n	8019bbe <_dtoa_r+0x17e>
 8019bba:	f10b 3bff 	add.w	fp, fp, #4294967295
 8019bbe:	2100      	movs	r1, #0
 8019bc0:	e01e      	b.n	8019c00 <_dtoa_r+0x1c0>
 8019bc2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019bc4:	4413      	add	r3, r2
 8019bc6:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8019bca:	2920      	cmp	r1, #32
 8019bcc:	bfc1      	itttt	gt
 8019bce:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 8019bd2:	408c      	lslgt	r4, r1
 8019bd4:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8019bd8:	fa28 f101 	lsrgt.w	r1, r8, r1
 8019bdc:	bfd6      	itet	le
 8019bde:	f1c1 0120 	rsble	r1, r1, #32
 8019be2:	4321      	orrgt	r1, r4
 8019be4:	fa08 f101 	lslle.w	r1, r8, r1
 8019be8:	ee07 1a90 	vmov	s15, r1
 8019bec:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8019bf0:	3b01      	subs	r3, #1
 8019bf2:	ee17 1a90 	vmov	r1, s15
 8019bf6:	2001      	movs	r0, #1
 8019bf8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8019bfc:	e7a7      	b.n	8019b4e <_dtoa_r+0x10e>
 8019bfe:	2101      	movs	r1, #1
 8019c00:	1ad2      	subs	r2, r2, r3
 8019c02:	1e53      	subs	r3, r2, #1
 8019c04:	9305      	str	r3, [sp, #20]
 8019c06:	bf45      	ittet	mi
 8019c08:	f1c2 0301 	rsbmi	r3, r2, #1
 8019c0c:	9304      	strmi	r3, [sp, #16]
 8019c0e:	2300      	movpl	r3, #0
 8019c10:	2300      	movmi	r3, #0
 8019c12:	bf4c      	ite	mi
 8019c14:	9305      	strmi	r3, [sp, #20]
 8019c16:	9304      	strpl	r3, [sp, #16]
 8019c18:	f1bb 0f00 	cmp.w	fp, #0
 8019c1c:	910b      	str	r1, [sp, #44]	; 0x2c
 8019c1e:	db18      	blt.n	8019c52 <_dtoa_r+0x212>
 8019c20:	9b05      	ldr	r3, [sp, #20]
 8019c22:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8019c26:	445b      	add	r3, fp
 8019c28:	9305      	str	r3, [sp, #20]
 8019c2a:	2300      	movs	r3, #0
 8019c2c:	9a06      	ldr	r2, [sp, #24]
 8019c2e:	2a09      	cmp	r2, #9
 8019c30:	d848      	bhi.n	8019cc4 <_dtoa_r+0x284>
 8019c32:	2a05      	cmp	r2, #5
 8019c34:	bfc4      	itt	gt
 8019c36:	3a04      	subgt	r2, #4
 8019c38:	9206      	strgt	r2, [sp, #24]
 8019c3a:	9a06      	ldr	r2, [sp, #24]
 8019c3c:	f1a2 0202 	sub.w	r2, r2, #2
 8019c40:	bfcc      	ite	gt
 8019c42:	2400      	movgt	r4, #0
 8019c44:	2401      	movle	r4, #1
 8019c46:	2a03      	cmp	r2, #3
 8019c48:	d847      	bhi.n	8019cda <_dtoa_r+0x29a>
 8019c4a:	e8df f002 	tbb	[pc, r2]
 8019c4e:	2d0b      	.short	0x2d0b
 8019c50:	392b      	.short	0x392b
 8019c52:	9b04      	ldr	r3, [sp, #16]
 8019c54:	2200      	movs	r2, #0
 8019c56:	eba3 030b 	sub.w	r3, r3, fp
 8019c5a:	9304      	str	r3, [sp, #16]
 8019c5c:	920a      	str	r2, [sp, #40]	; 0x28
 8019c5e:	f1cb 0300 	rsb	r3, fp, #0
 8019c62:	e7e3      	b.n	8019c2c <_dtoa_r+0x1ec>
 8019c64:	2200      	movs	r2, #0
 8019c66:	9207      	str	r2, [sp, #28]
 8019c68:	9a08      	ldr	r2, [sp, #32]
 8019c6a:	2a00      	cmp	r2, #0
 8019c6c:	dc38      	bgt.n	8019ce0 <_dtoa_r+0x2a0>
 8019c6e:	f04f 0a01 	mov.w	sl, #1
 8019c72:	46d1      	mov	r9, sl
 8019c74:	4652      	mov	r2, sl
 8019c76:	f8cd a020 	str.w	sl, [sp, #32]
 8019c7a:	69f7      	ldr	r7, [r6, #28]
 8019c7c:	2100      	movs	r1, #0
 8019c7e:	2004      	movs	r0, #4
 8019c80:	f100 0c14 	add.w	ip, r0, #20
 8019c84:	4594      	cmp	ip, r2
 8019c86:	d930      	bls.n	8019cea <_dtoa_r+0x2aa>
 8019c88:	6079      	str	r1, [r7, #4]
 8019c8a:	4630      	mov	r0, r6
 8019c8c:	930d      	str	r3, [sp, #52]	; 0x34
 8019c8e:	f000 fd43 	bl	801a718 <_Balloc>
 8019c92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019c94:	9001      	str	r0, [sp, #4]
 8019c96:	4602      	mov	r2, r0
 8019c98:	2800      	cmp	r0, #0
 8019c9a:	d145      	bne.n	8019d28 <_dtoa_r+0x2e8>
 8019c9c:	4b21      	ldr	r3, [pc, #132]	; (8019d24 <_dtoa_r+0x2e4>)
 8019c9e:	f240 11af 	movw	r1, #431	; 0x1af
 8019ca2:	e6e5      	b.n	8019a70 <_dtoa_r+0x30>
 8019ca4:	2201      	movs	r2, #1
 8019ca6:	e7de      	b.n	8019c66 <_dtoa_r+0x226>
 8019ca8:	2200      	movs	r2, #0
 8019caa:	9207      	str	r2, [sp, #28]
 8019cac:	9a08      	ldr	r2, [sp, #32]
 8019cae:	eb0b 0a02 	add.w	sl, fp, r2
 8019cb2:	f10a 0901 	add.w	r9, sl, #1
 8019cb6:	464a      	mov	r2, r9
 8019cb8:	2a01      	cmp	r2, #1
 8019cba:	bfb8      	it	lt
 8019cbc:	2201      	movlt	r2, #1
 8019cbe:	e7dc      	b.n	8019c7a <_dtoa_r+0x23a>
 8019cc0:	2201      	movs	r2, #1
 8019cc2:	e7f2      	b.n	8019caa <_dtoa_r+0x26a>
 8019cc4:	2401      	movs	r4, #1
 8019cc6:	2200      	movs	r2, #0
 8019cc8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8019ccc:	f04f 3aff 	mov.w	sl, #4294967295
 8019cd0:	2100      	movs	r1, #0
 8019cd2:	46d1      	mov	r9, sl
 8019cd4:	2212      	movs	r2, #18
 8019cd6:	9108      	str	r1, [sp, #32]
 8019cd8:	e7cf      	b.n	8019c7a <_dtoa_r+0x23a>
 8019cda:	2201      	movs	r2, #1
 8019cdc:	9207      	str	r2, [sp, #28]
 8019cde:	e7f5      	b.n	8019ccc <_dtoa_r+0x28c>
 8019ce0:	f8dd a020 	ldr.w	sl, [sp, #32]
 8019ce4:	46d1      	mov	r9, sl
 8019ce6:	4652      	mov	r2, sl
 8019ce8:	e7c7      	b.n	8019c7a <_dtoa_r+0x23a>
 8019cea:	3101      	adds	r1, #1
 8019cec:	0040      	lsls	r0, r0, #1
 8019cee:	e7c7      	b.n	8019c80 <_dtoa_r+0x240>
 8019cf0:	636f4361 	.word	0x636f4361
 8019cf4:	3fd287a7 	.word	0x3fd287a7
 8019cf8:	8b60c8b3 	.word	0x8b60c8b3
 8019cfc:	3fc68a28 	.word	0x3fc68a28
 8019d00:	509f79fb 	.word	0x509f79fb
 8019d04:	3fd34413 	.word	0x3fd34413
 8019d08:	0801e7f6 	.word	0x0801e7f6
 8019d0c:	0801e9e3 	.word	0x0801e9e3
 8019d10:	7ff00000 	.word	0x7ff00000
 8019d14:	0801e9df 	.word	0x0801e9df
 8019d18:	0801e9d6 	.word	0x0801e9d6
 8019d1c:	0801e977 	.word	0x0801e977
 8019d20:	0801ead0 	.word	0x0801ead0
 8019d24:	0801ea3b 	.word	0x0801ea3b
 8019d28:	69f2      	ldr	r2, [r6, #28]
 8019d2a:	9901      	ldr	r1, [sp, #4]
 8019d2c:	6011      	str	r1, [r2, #0]
 8019d2e:	f1b9 0f0e 	cmp.w	r9, #14
 8019d32:	d86c      	bhi.n	8019e0e <_dtoa_r+0x3ce>
 8019d34:	2c00      	cmp	r4, #0
 8019d36:	d06a      	beq.n	8019e0e <_dtoa_r+0x3ce>
 8019d38:	f1bb 0f00 	cmp.w	fp, #0
 8019d3c:	f340 80a0 	ble.w	8019e80 <_dtoa_r+0x440>
 8019d40:	4ac1      	ldr	r2, [pc, #772]	; (801a048 <_dtoa_r+0x608>)
 8019d42:	f00b 010f 	and.w	r1, fp, #15
 8019d46:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8019d4a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8019d4e:	ed92 7b00 	vldr	d7, [r2]
 8019d52:	ea4f 122b 	mov.w	r2, fp, asr #4
 8019d56:	f000 8087 	beq.w	8019e68 <_dtoa_r+0x428>
 8019d5a:	49bc      	ldr	r1, [pc, #752]	; (801a04c <_dtoa_r+0x60c>)
 8019d5c:	ed91 6b08 	vldr	d6, [r1, #32]
 8019d60:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8019d64:	ed8d 6b02 	vstr	d6, [sp, #8]
 8019d68:	f002 020f 	and.w	r2, r2, #15
 8019d6c:	2103      	movs	r1, #3
 8019d6e:	48b7      	ldr	r0, [pc, #732]	; (801a04c <_dtoa_r+0x60c>)
 8019d70:	2a00      	cmp	r2, #0
 8019d72:	d17b      	bne.n	8019e6c <_dtoa_r+0x42c>
 8019d74:	ed9d 6b02 	vldr	d6, [sp, #8]
 8019d78:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8019d7c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8019d80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019d82:	ed9d 7b02 	vldr	d7, [sp, #8]
 8019d86:	2a00      	cmp	r2, #0
 8019d88:	f000 80a0 	beq.w	8019ecc <_dtoa_r+0x48c>
 8019d8c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8019d90:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8019d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d98:	f140 8098 	bpl.w	8019ecc <_dtoa_r+0x48c>
 8019d9c:	f1b9 0f00 	cmp.w	r9, #0
 8019da0:	f000 8094 	beq.w	8019ecc <_dtoa_r+0x48c>
 8019da4:	f1ba 0f00 	cmp.w	sl, #0
 8019da8:	dd2f      	ble.n	8019e0a <_dtoa_r+0x3ca>
 8019daa:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8019dae:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019db2:	ed8d 7b02 	vstr	d7, [sp, #8]
 8019db6:	f10b 32ff 	add.w	r2, fp, #4294967295
 8019dba:	3101      	adds	r1, #1
 8019dbc:	4654      	mov	r4, sl
 8019dbe:	ed9d 6b02 	vldr	d6, [sp, #8]
 8019dc2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8019dc6:	ee07 1a90 	vmov	s15, r1
 8019dca:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8019dce:	eea7 5b06 	vfma.f64	d5, d7, d6
 8019dd2:	ee15 7a90 	vmov	r7, s11
 8019dd6:	ec51 0b15 	vmov	r0, r1, d5
 8019dda:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8019dde:	2c00      	cmp	r4, #0
 8019de0:	d177      	bne.n	8019ed2 <_dtoa_r+0x492>
 8019de2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8019de6:	ee36 6b47 	vsub.f64	d6, d6, d7
 8019dea:	ec41 0b17 	vmov	d7, r0, r1
 8019dee:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8019df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019df6:	f300 826a 	bgt.w	801a2ce <_dtoa_r+0x88e>
 8019dfa:	eeb1 7b47 	vneg.f64	d7, d7
 8019dfe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8019e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e06:	f100 8260 	bmi.w	801a2ca <_dtoa_r+0x88a>
 8019e0a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8019e0e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019e10:	2a00      	cmp	r2, #0
 8019e12:	f2c0 811d 	blt.w	801a050 <_dtoa_r+0x610>
 8019e16:	f1bb 0f0e 	cmp.w	fp, #14
 8019e1a:	f300 8119 	bgt.w	801a050 <_dtoa_r+0x610>
 8019e1e:	4b8a      	ldr	r3, [pc, #552]	; (801a048 <_dtoa_r+0x608>)
 8019e20:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8019e24:	ed93 6b00 	vldr	d6, [r3]
 8019e28:	9b08      	ldr	r3, [sp, #32]
 8019e2a:	2b00      	cmp	r3, #0
 8019e2c:	f280 80b7 	bge.w	8019f9e <_dtoa_r+0x55e>
 8019e30:	f1b9 0f00 	cmp.w	r9, #0
 8019e34:	f300 80b3 	bgt.w	8019f9e <_dtoa_r+0x55e>
 8019e38:	f040 8246 	bne.w	801a2c8 <_dtoa_r+0x888>
 8019e3c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8019e40:	ee26 6b07 	vmul.f64	d6, d6, d7
 8019e44:	ed9d 7b02 	vldr	d7, [sp, #8]
 8019e48:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8019e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e50:	464c      	mov	r4, r9
 8019e52:	464f      	mov	r7, r9
 8019e54:	f280 821c 	bge.w	801a290 <_dtoa_r+0x850>
 8019e58:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8019e5c:	2331      	movs	r3, #49	; 0x31
 8019e5e:	f808 3b01 	strb.w	r3, [r8], #1
 8019e62:	f10b 0b01 	add.w	fp, fp, #1
 8019e66:	e218      	b.n	801a29a <_dtoa_r+0x85a>
 8019e68:	2102      	movs	r1, #2
 8019e6a:	e780      	b.n	8019d6e <_dtoa_r+0x32e>
 8019e6c:	07d4      	lsls	r4, r2, #31
 8019e6e:	d504      	bpl.n	8019e7a <_dtoa_r+0x43a>
 8019e70:	ed90 6b00 	vldr	d6, [r0]
 8019e74:	3101      	adds	r1, #1
 8019e76:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019e7a:	1052      	asrs	r2, r2, #1
 8019e7c:	3008      	adds	r0, #8
 8019e7e:	e777      	b.n	8019d70 <_dtoa_r+0x330>
 8019e80:	d022      	beq.n	8019ec8 <_dtoa_r+0x488>
 8019e82:	f1cb 0200 	rsb	r2, fp, #0
 8019e86:	4970      	ldr	r1, [pc, #448]	; (801a048 <_dtoa_r+0x608>)
 8019e88:	f002 000f 	and.w	r0, r2, #15
 8019e8c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8019e90:	ed91 7b00 	vldr	d7, [r1]
 8019e94:	ee28 7b07 	vmul.f64	d7, d8, d7
 8019e98:	ed8d 7b02 	vstr	d7, [sp, #8]
 8019e9c:	486b      	ldr	r0, [pc, #428]	; (801a04c <_dtoa_r+0x60c>)
 8019e9e:	1112      	asrs	r2, r2, #4
 8019ea0:	2400      	movs	r4, #0
 8019ea2:	2102      	movs	r1, #2
 8019ea4:	b92a      	cbnz	r2, 8019eb2 <_dtoa_r+0x472>
 8019ea6:	2c00      	cmp	r4, #0
 8019ea8:	f43f af6a 	beq.w	8019d80 <_dtoa_r+0x340>
 8019eac:	ed8d 7b02 	vstr	d7, [sp, #8]
 8019eb0:	e766      	b.n	8019d80 <_dtoa_r+0x340>
 8019eb2:	07d7      	lsls	r7, r2, #31
 8019eb4:	d505      	bpl.n	8019ec2 <_dtoa_r+0x482>
 8019eb6:	ed90 6b00 	vldr	d6, [r0]
 8019eba:	3101      	adds	r1, #1
 8019ebc:	2401      	movs	r4, #1
 8019ebe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019ec2:	1052      	asrs	r2, r2, #1
 8019ec4:	3008      	adds	r0, #8
 8019ec6:	e7ed      	b.n	8019ea4 <_dtoa_r+0x464>
 8019ec8:	2102      	movs	r1, #2
 8019eca:	e759      	b.n	8019d80 <_dtoa_r+0x340>
 8019ecc:	465a      	mov	r2, fp
 8019ece:	464c      	mov	r4, r9
 8019ed0:	e775      	b.n	8019dbe <_dtoa_r+0x37e>
 8019ed2:	ec41 0b17 	vmov	d7, r0, r1
 8019ed6:	495c      	ldr	r1, [pc, #368]	; (801a048 <_dtoa_r+0x608>)
 8019ed8:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8019edc:	ed11 4b02 	vldr	d4, [r1, #-8]
 8019ee0:	9901      	ldr	r1, [sp, #4]
 8019ee2:	440c      	add	r4, r1
 8019ee4:	9907      	ldr	r1, [sp, #28]
 8019ee6:	b351      	cbz	r1, 8019f3e <_dtoa_r+0x4fe>
 8019ee8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8019eec:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8019ef0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8019ef4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8019ef8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8019efc:	ee35 7b47 	vsub.f64	d7, d5, d7
 8019f00:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8019f04:	ee14 1a90 	vmov	r1, s9
 8019f08:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8019f0c:	3130      	adds	r1, #48	; 0x30
 8019f0e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8019f12:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8019f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f1a:	f808 1b01 	strb.w	r1, [r8], #1
 8019f1e:	d439      	bmi.n	8019f94 <_dtoa_r+0x554>
 8019f20:	ee32 5b46 	vsub.f64	d5, d2, d6
 8019f24:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8019f28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f2c:	d472      	bmi.n	801a014 <_dtoa_r+0x5d4>
 8019f2e:	45a0      	cmp	r8, r4
 8019f30:	f43f af6b 	beq.w	8019e0a <_dtoa_r+0x3ca>
 8019f34:	ee27 7b03 	vmul.f64	d7, d7, d3
 8019f38:	ee26 6b03 	vmul.f64	d6, d6, d3
 8019f3c:	e7e0      	b.n	8019f00 <_dtoa_r+0x4c0>
 8019f3e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8019f42:	ee27 7b04 	vmul.f64	d7, d7, d4
 8019f46:	4620      	mov	r0, r4
 8019f48:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8019f4c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8019f50:	ee14 1a90 	vmov	r1, s9
 8019f54:	3130      	adds	r1, #48	; 0x30
 8019f56:	f808 1b01 	strb.w	r1, [r8], #1
 8019f5a:	45a0      	cmp	r8, r4
 8019f5c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8019f60:	ee36 6b45 	vsub.f64	d6, d6, d5
 8019f64:	d118      	bne.n	8019f98 <_dtoa_r+0x558>
 8019f66:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8019f6a:	ee37 4b05 	vadd.f64	d4, d7, d5
 8019f6e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8019f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f76:	dc4d      	bgt.n	801a014 <_dtoa_r+0x5d4>
 8019f78:	ee35 5b47 	vsub.f64	d5, d5, d7
 8019f7c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8019f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f84:	f57f af41 	bpl.w	8019e0a <_dtoa_r+0x3ca>
 8019f88:	4680      	mov	r8, r0
 8019f8a:	3801      	subs	r0, #1
 8019f8c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8019f90:	2b30      	cmp	r3, #48	; 0x30
 8019f92:	d0f9      	beq.n	8019f88 <_dtoa_r+0x548>
 8019f94:	4693      	mov	fp, r2
 8019f96:	e02a      	b.n	8019fee <_dtoa_r+0x5ae>
 8019f98:	ee26 6b03 	vmul.f64	d6, d6, d3
 8019f9c:	e7d6      	b.n	8019f4c <_dtoa_r+0x50c>
 8019f9e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8019fa2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8019fa6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8019faa:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8019fae:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8019fb2:	ee15 3a10 	vmov	r3, s10
 8019fb6:	3330      	adds	r3, #48	; 0x30
 8019fb8:	f808 3b01 	strb.w	r3, [r8], #1
 8019fbc:	9b01      	ldr	r3, [sp, #4]
 8019fbe:	eba8 0303 	sub.w	r3, r8, r3
 8019fc2:	4599      	cmp	r9, r3
 8019fc4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8019fc8:	eea3 7b46 	vfms.f64	d7, d3, d6
 8019fcc:	d133      	bne.n	801a036 <_dtoa_r+0x5f6>
 8019fce:	ee37 7b07 	vadd.f64	d7, d7, d7
 8019fd2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8019fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019fda:	dc1a      	bgt.n	801a012 <_dtoa_r+0x5d2>
 8019fdc:	eeb4 7b46 	vcmp.f64	d7, d6
 8019fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019fe4:	d103      	bne.n	8019fee <_dtoa_r+0x5ae>
 8019fe6:	ee15 3a10 	vmov	r3, s10
 8019fea:	07d9      	lsls	r1, r3, #31
 8019fec:	d411      	bmi.n	801a012 <_dtoa_r+0x5d2>
 8019fee:	4629      	mov	r1, r5
 8019ff0:	4630      	mov	r0, r6
 8019ff2:	f000 fbd1 	bl	801a798 <_Bfree>
 8019ff6:	2300      	movs	r3, #0
 8019ff8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019ffa:	f888 3000 	strb.w	r3, [r8]
 8019ffe:	f10b 0301 	add.w	r3, fp, #1
 801a002:	6013      	str	r3, [r2, #0]
 801a004:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a006:	2b00      	cmp	r3, #0
 801a008:	f43f ad69 	beq.w	8019ade <_dtoa_r+0x9e>
 801a00c:	f8c3 8000 	str.w	r8, [r3]
 801a010:	e565      	b.n	8019ade <_dtoa_r+0x9e>
 801a012:	465a      	mov	r2, fp
 801a014:	4643      	mov	r3, r8
 801a016:	4698      	mov	r8, r3
 801a018:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 801a01c:	2939      	cmp	r1, #57	; 0x39
 801a01e:	d106      	bne.n	801a02e <_dtoa_r+0x5ee>
 801a020:	9901      	ldr	r1, [sp, #4]
 801a022:	4299      	cmp	r1, r3
 801a024:	d1f7      	bne.n	801a016 <_dtoa_r+0x5d6>
 801a026:	9801      	ldr	r0, [sp, #4]
 801a028:	2130      	movs	r1, #48	; 0x30
 801a02a:	3201      	adds	r2, #1
 801a02c:	7001      	strb	r1, [r0, #0]
 801a02e:	7819      	ldrb	r1, [r3, #0]
 801a030:	3101      	adds	r1, #1
 801a032:	7019      	strb	r1, [r3, #0]
 801a034:	e7ae      	b.n	8019f94 <_dtoa_r+0x554>
 801a036:	ee27 7b04 	vmul.f64	d7, d7, d4
 801a03a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801a03e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a042:	d1b2      	bne.n	8019faa <_dtoa_r+0x56a>
 801a044:	e7d3      	b.n	8019fee <_dtoa_r+0x5ae>
 801a046:	bf00      	nop
 801a048:	0801ead0 	.word	0x0801ead0
 801a04c:	0801eaa8 	.word	0x0801eaa8
 801a050:	9907      	ldr	r1, [sp, #28]
 801a052:	2900      	cmp	r1, #0
 801a054:	f000 80d0 	beq.w	801a1f8 <_dtoa_r+0x7b8>
 801a058:	9906      	ldr	r1, [sp, #24]
 801a05a:	2901      	cmp	r1, #1
 801a05c:	f300 80b4 	bgt.w	801a1c8 <_dtoa_r+0x788>
 801a060:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a062:	2900      	cmp	r1, #0
 801a064:	f000 80ac 	beq.w	801a1c0 <_dtoa_r+0x780>
 801a068:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801a06c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801a070:	461c      	mov	r4, r3
 801a072:	9309      	str	r3, [sp, #36]	; 0x24
 801a074:	9b04      	ldr	r3, [sp, #16]
 801a076:	4413      	add	r3, r2
 801a078:	9304      	str	r3, [sp, #16]
 801a07a:	9b05      	ldr	r3, [sp, #20]
 801a07c:	2101      	movs	r1, #1
 801a07e:	4413      	add	r3, r2
 801a080:	4630      	mov	r0, r6
 801a082:	9305      	str	r3, [sp, #20]
 801a084:	f000 fc3e 	bl	801a904 <__i2b>
 801a088:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a08a:	4607      	mov	r7, r0
 801a08c:	f1b8 0f00 	cmp.w	r8, #0
 801a090:	d00d      	beq.n	801a0ae <_dtoa_r+0x66e>
 801a092:	9a05      	ldr	r2, [sp, #20]
 801a094:	2a00      	cmp	r2, #0
 801a096:	dd0a      	ble.n	801a0ae <_dtoa_r+0x66e>
 801a098:	4542      	cmp	r2, r8
 801a09a:	9904      	ldr	r1, [sp, #16]
 801a09c:	bfa8      	it	ge
 801a09e:	4642      	movge	r2, r8
 801a0a0:	1a89      	subs	r1, r1, r2
 801a0a2:	9104      	str	r1, [sp, #16]
 801a0a4:	9905      	ldr	r1, [sp, #20]
 801a0a6:	eba8 0802 	sub.w	r8, r8, r2
 801a0aa:	1a8a      	subs	r2, r1, r2
 801a0ac:	9205      	str	r2, [sp, #20]
 801a0ae:	b303      	cbz	r3, 801a0f2 <_dtoa_r+0x6b2>
 801a0b0:	9a07      	ldr	r2, [sp, #28]
 801a0b2:	2a00      	cmp	r2, #0
 801a0b4:	f000 80a5 	beq.w	801a202 <_dtoa_r+0x7c2>
 801a0b8:	2c00      	cmp	r4, #0
 801a0ba:	dd13      	ble.n	801a0e4 <_dtoa_r+0x6a4>
 801a0bc:	4639      	mov	r1, r7
 801a0be:	4622      	mov	r2, r4
 801a0c0:	4630      	mov	r0, r6
 801a0c2:	930d      	str	r3, [sp, #52]	; 0x34
 801a0c4:	f000 fcde 	bl	801aa84 <__pow5mult>
 801a0c8:	462a      	mov	r2, r5
 801a0ca:	4601      	mov	r1, r0
 801a0cc:	4607      	mov	r7, r0
 801a0ce:	4630      	mov	r0, r6
 801a0d0:	f000 fc2e 	bl	801a930 <__multiply>
 801a0d4:	4629      	mov	r1, r5
 801a0d6:	9009      	str	r0, [sp, #36]	; 0x24
 801a0d8:	4630      	mov	r0, r6
 801a0da:	f000 fb5d 	bl	801a798 <_Bfree>
 801a0de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a0e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a0e2:	4615      	mov	r5, r2
 801a0e4:	1b1a      	subs	r2, r3, r4
 801a0e6:	d004      	beq.n	801a0f2 <_dtoa_r+0x6b2>
 801a0e8:	4629      	mov	r1, r5
 801a0ea:	4630      	mov	r0, r6
 801a0ec:	f000 fcca 	bl	801aa84 <__pow5mult>
 801a0f0:	4605      	mov	r5, r0
 801a0f2:	2101      	movs	r1, #1
 801a0f4:	4630      	mov	r0, r6
 801a0f6:	f000 fc05 	bl	801a904 <__i2b>
 801a0fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a0fc:	2b00      	cmp	r3, #0
 801a0fe:	4604      	mov	r4, r0
 801a100:	f340 8081 	ble.w	801a206 <_dtoa_r+0x7c6>
 801a104:	461a      	mov	r2, r3
 801a106:	4601      	mov	r1, r0
 801a108:	4630      	mov	r0, r6
 801a10a:	f000 fcbb 	bl	801aa84 <__pow5mult>
 801a10e:	9b06      	ldr	r3, [sp, #24]
 801a110:	2b01      	cmp	r3, #1
 801a112:	4604      	mov	r4, r0
 801a114:	dd7a      	ble.n	801a20c <_dtoa_r+0x7cc>
 801a116:	2300      	movs	r3, #0
 801a118:	9309      	str	r3, [sp, #36]	; 0x24
 801a11a:	6922      	ldr	r2, [r4, #16]
 801a11c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801a120:	6910      	ldr	r0, [r2, #16]
 801a122:	f000 fba1 	bl	801a868 <__hi0bits>
 801a126:	f1c0 0020 	rsb	r0, r0, #32
 801a12a:	9b05      	ldr	r3, [sp, #20]
 801a12c:	4418      	add	r0, r3
 801a12e:	f010 001f 	ands.w	r0, r0, #31
 801a132:	f000 8093 	beq.w	801a25c <_dtoa_r+0x81c>
 801a136:	f1c0 0220 	rsb	r2, r0, #32
 801a13a:	2a04      	cmp	r2, #4
 801a13c:	f340 8085 	ble.w	801a24a <_dtoa_r+0x80a>
 801a140:	9b04      	ldr	r3, [sp, #16]
 801a142:	f1c0 001c 	rsb	r0, r0, #28
 801a146:	4403      	add	r3, r0
 801a148:	9304      	str	r3, [sp, #16]
 801a14a:	9b05      	ldr	r3, [sp, #20]
 801a14c:	4480      	add	r8, r0
 801a14e:	4403      	add	r3, r0
 801a150:	9305      	str	r3, [sp, #20]
 801a152:	9b04      	ldr	r3, [sp, #16]
 801a154:	2b00      	cmp	r3, #0
 801a156:	dd05      	ble.n	801a164 <_dtoa_r+0x724>
 801a158:	4629      	mov	r1, r5
 801a15a:	461a      	mov	r2, r3
 801a15c:	4630      	mov	r0, r6
 801a15e:	f000 fceb 	bl	801ab38 <__lshift>
 801a162:	4605      	mov	r5, r0
 801a164:	9b05      	ldr	r3, [sp, #20]
 801a166:	2b00      	cmp	r3, #0
 801a168:	dd05      	ble.n	801a176 <_dtoa_r+0x736>
 801a16a:	4621      	mov	r1, r4
 801a16c:	461a      	mov	r2, r3
 801a16e:	4630      	mov	r0, r6
 801a170:	f000 fce2 	bl	801ab38 <__lshift>
 801a174:	4604      	mov	r4, r0
 801a176:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a178:	2b00      	cmp	r3, #0
 801a17a:	d071      	beq.n	801a260 <_dtoa_r+0x820>
 801a17c:	4621      	mov	r1, r4
 801a17e:	4628      	mov	r0, r5
 801a180:	f000 fd46 	bl	801ac10 <__mcmp>
 801a184:	2800      	cmp	r0, #0
 801a186:	da6b      	bge.n	801a260 <_dtoa_r+0x820>
 801a188:	2300      	movs	r3, #0
 801a18a:	4629      	mov	r1, r5
 801a18c:	220a      	movs	r2, #10
 801a18e:	4630      	mov	r0, r6
 801a190:	f000 fb24 	bl	801a7dc <__multadd>
 801a194:	9b07      	ldr	r3, [sp, #28]
 801a196:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a19a:	4605      	mov	r5, r0
 801a19c:	2b00      	cmp	r3, #0
 801a19e:	f000 8197 	beq.w	801a4d0 <_dtoa_r+0xa90>
 801a1a2:	4639      	mov	r1, r7
 801a1a4:	2300      	movs	r3, #0
 801a1a6:	220a      	movs	r2, #10
 801a1a8:	4630      	mov	r0, r6
 801a1aa:	f000 fb17 	bl	801a7dc <__multadd>
 801a1ae:	f1ba 0f00 	cmp.w	sl, #0
 801a1b2:	4607      	mov	r7, r0
 801a1b4:	f300 8093 	bgt.w	801a2de <_dtoa_r+0x89e>
 801a1b8:	9b06      	ldr	r3, [sp, #24]
 801a1ba:	2b02      	cmp	r3, #2
 801a1bc:	dc57      	bgt.n	801a26e <_dtoa_r+0x82e>
 801a1be:	e08e      	b.n	801a2de <_dtoa_r+0x89e>
 801a1c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a1c2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801a1c6:	e751      	b.n	801a06c <_dtoa_r+0x62c>
 801a1c8:	f109 34ff 	add.w	r4, r9, #4294967295
 801a1cc:	42a3      	cmp	r3, r4
 801a1ce:	bfbf      	itttt	lt
 801a1d0:	1ae2      	sublt	r2, r4, r3
 801a1d2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801a1d4:	189b      	addlt	r3, r3, r2
 801a1d6:	930a      	strlt	r3, [sp, #40]	; 0x28
 801a1d8:	bfae      	itee	ge
 801a1da:	1b1c      	subge	r4, r3, r4
 801a1dc:	4623      	movlt	r3, r4
 801a1de:	2400      	movlt	r4, #0
 801a1e0:	f1b9 0f00 	cmp.w	r9, #0
 801a1e4:	bfb5      	itete	lt
 801a1e6:	9a04      	ldrlt	r2, [sp, #16]
 801a1e8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 801a1ec:	eba2 0809 	sublt.w	r8, r2, r9
 801a1f0:	464a      	movge	r2, r9
 801a1f2:	bfb8      	it	lt
 801a1f4:	2200      	movlt	r2, #0
 801a1f6:	e73c      	b.n	801a072 <_dtoa_r+0x632>
 801a1f8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801a1fc:	9f07      	ldr	r7, [sp, #28]
 801a1fe:	461c      	mov	r4, r3
 801a200:	e744      	b.n	801a08c <_dtoa_r+0x64c>
 801a202:	461a      	mov	r2, r3
 801a204:	e770      	b.n	801a0e8 <_dtoa_r+0x6a8>
 801a206:	9b06      	ldr	r3, [sp, #24]
 801a208:	2b01      	cmp	r3, #1
 801a20a:	dc18      	bgt.n	801a23e <_dtoa_r+0x7fe>
 801a20c:	9b02      	ldr	r3, [sp, #8]
 801a20e:	b9b3      	cbnz	r3, 801a23e <_dtoa_r+0x7fe>
 801a210:	9b03      	ldr	r3, [sp, #12]
 801a212:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801a216:	b9a2      	cbnz	r2, 801a242 <_dtoa_r+0x802>
 801a218:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801a21c:	0d12      	lsrs	r2, r2, #20
 801a21e:	0512      	lsls	r2, r2, #20
 801a220:	b18a      	cbz	r2, 801a246 <_dtoa_r+0x806>
 801a222:	9b04      	ldr	r3, [sp, #16]
 801a224:	3301      	adds	r3, #1
 801a226:	9304      	str	r3, [sp, #16]
 801a228:	9b05      	ldr	r3, [sp, #20]
 801a22a:	3301      	adds	r3, #1
 801a22c:	9305      	str	r3, [sp, #20]
 801a22e:	2301      	movs	r3, #1
 801a230:	9309      	str	r3, [sp, #36]	; 0x24
 801a232:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a234:	2b00      	cmp	r3, #0
 801a236:	f47f af70 	bne.w	801a11a <_dtoa_r+0x6da>
 801a23a:	2001      	movs	r0, #1
 801a23c:	e775      	b.n	801a12a <_dtoa_r+0x6ea>
 801a23e:	2300      	movs	r3, #0
 801a240:	e7f6      	b.n	801a230 <_dtoa_r+0x7f0>
 801a242:	9b02      	ldr	r3, [sp, #8]
 801a244:	e7f4      	b.n	801a230 <_dtoa_r+0x7f0>
 801a246:	9209      	str	r2, [sp, #36]	; 0x24
 801a248:	e7f3      	b.n	801a232 <_dtoa_r+0x7f2>
 801a24a:	d082      	beq.n	801a152 <_dtoa_r+0x712>
 801a24c:	9b04      	ldr	r3, [sp, #16]
 801a24e:	321c      	adds	r2, #28
 801a250:	4413      	add	r3, r2
 801a252:	9304      	str	r3, [sp, #16]
 801a254:	9b05      	ldr	r3, [sp, #20]
 801a256:	4490      	add	r8, r2
 801a258:	4413      	add	r3, r2
 801a25a:	e779      	b.n	801a150 <_dtoa_r+0x710>
 801a25c:	4602      	mov	r2, r0
 801a25e:	e7f5      	b.n	801a24c <_dtoa_r+0x80c>
 801a260:	f1b9 0f00 	cmp.w	r9, #0
 801a264:	dc36      	bgt.n	801a2d4 <_dtoa_r+0x894>
 801a266:	9b06      	ldr	r3, [sp, #24]
 801a268:	2b02      	cmp	r3, #2
 801a26a:	dd33      	ble.n	801a2d4 <_dtoa_r+0x894>
 801a26c:	46ca      	mov	sl, r9
 801a26e:	f1ba 0f00 	cmp.w	sl, #0
 801a272:	d10d      	bne.n	801a290 <_dtoa_r+0x850>
 801a274:	4621      	mov	r1, r4
 801a276:	4653      	mov	r3, sl
 801a278:	2205      	movs	r2, #5
 801a27a:	4630      	mov	r0, r6
 801a27c:	f000 faae 	bl	801a7dc <__multadd>
 801a280:	4601      	mov	r1, r0
 801a282:	4604      	mov	r4, r0
 801a284:	4628      	mov	r0, r5
 801a286:	f000 fcc3 	bl	801ac10 <__mcmp>
 801a28a:	2800      	cmp	r0, #0
 801a28c:	f73f ade4 	bgt.w	8019e58 <_dtoa_r+0x418>
 801a290:	9b08      	ldr	r3, [sp, #32]
 801a292:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a296:	ea6f 0b03 	mvn.w	fp, r3
 801a29a:	f04f 0900 	mov.w	r9, #0
 801a29e:	4621      	mov	r1, r4
 801a2a0:	4630      	mov	r0, r6
 801a2a2:	f000 fa79 	bl	801a798 <_Bfree>
 801a2a6:	2f00      	cmp	r7, #0
 801a2a8:	f43f aea1 	beq.w	8019fee <_dtoa_r+0x5ae>
 801a2ac:	f1b9 0f00 	cmp.w	r9, #0
 801a2b0:	d005      	beq.n	801a2be <_dtoa_r+0x87e>
 801a2b2:	45b9      	cmp	r9, r7
 801a2b4:	d003      	beq.n	801a2be <_dtoa_r+0x87e>
 801a2b6:	4649      	mov	r1, r9
 801a2b8:	4630      	mov	r0, r6
 801a2ba:	f000 fa6d 	bl	801a798 <_Bfree>
 801a2be:	4639      	mov	r1, r7
 801a2c0:	4630      	mov	r0, r6
 801a2c2:	f000 fa69 	bl	801a798 <_Bfree>
 801a2c6:	e692      	b.n	8019fee <_dtoa_r+0x5ae>
 801a2c8:	2400      	movs	r4, #0
 801a2ca:	4627      	mov	r7, r4
 801a2cc:	e7e0      	b.n	801a290 <_dtoa_r+0x850>
 801a2ce:	4693      	mov	fp, r2
 801a2d0:	4627      	mov	r7, r4
 801a2d2:	e5c1      	b.n	8019e58 <_dtoa_r+0x418>
 801a2d4:	9b07      	ldr	r3, [sp, #28]
 801a2d6:	46ca      	mov	sl, r9
 801a2d8:	2b00      	cmp	r3, #0
 801a2da:	f000 8100 	beq.w	801a4de <_dtoa_r+0xa9e>
 801a2de:	f1b8 0f00 	cmp.w	r8, #0
 801a2e2:	dd05      	ble.n	801a2f0 <_dtoa_r+0x8b0>
 801a2e4:	4639      	mov	r1, r7
 801a2e6:	4642      	mov	r2, r8
 801a2e8:	4630      	mov	r0, r6
 801a2ea:	f000 fc25 	bl	801ab38 <__lshift>
 801a2ee:	4607      	mov	r7, r0
 801a2f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a2f2:	2b00      	cmp	r3, #0
 801a2f4:	d05d      	beq.n	801a3b2 <_dtoa_r+0x972>
 801a2f6:	6879      	ldr	r1, [r7, #4]
 801a2f8:	4630      	mov	r0, r6
 801a2fa:	f000 fa0d 	bl	801a718 <_Balloc>
 801a2fe:	4680      	mov	r8, r0
 801a300:	b928      	cbnz	r0, 801a30e <_dtoa_r+0x8ce>
 801a302:	4b82      	ldr	r3, [pc, #520]	; (801a50c <_dtoa_r+0xacc>)
 801a304:	4602      	mov	r2, r0
 801a306:	f240 21ef 	movw	r1, #751	; 0x2ef
 801a30a:	f7ff bbb1 	b.w	8019a70 <_dtoa_r+0x30>
 801a30e:	693a      	ldr	r2, [r7, #16]
 801a310:	3202      	adds	r2, #2
 801a312:	0092      	lsls	r2, r2, #2
 801a314:	f107 010c 	add.w	r1, r7, #12
 801a318:	300c      	adds	r0, #12
 801a31a:	f7ff fadd 	bl	80198d8 <memcpy>
 801a31e:	2201      	movs	r2, #1
 801a320:	4641      	mov	r1, r8
 801a322:	4630      	mov	r0, r6
 801a324:	f000 fc08 	bl	801ab38 <__lshift>
 801a328:	9b01      	ldr	r3, [sp, #4]
 801a32a:	3301      	adds	r3, #1
 801a32c:	9304      	str	r3, [sp, #16]
 801a32e:	9b01      	ldr	r3, [sp, #4]
 801a330:	4453      	add	r3, sl
 801a332:	9308      	str	r3, [sp, #32]
 801a334:	9b02      	ldr	r3, [sp, #8]
 801a336:	f003 0301 	and.w	r3, r3, #1
 801a33a:	46b9      	mov	r9, r7
 801a33c:	9307      	str	r3, [sp, #28]
 801a33e:	4607      	mov	r7, r0
 801a340:	9b04      	ldr	r3, [sp, #16]
 801a342:	4621      	mov	r1, r4
 801a344:	3b01      	subs	r3, #1
 801a346:	4628      	mov	r0, r5
 801a348:	9302      	str	r3, [sp, #8]
 801a34a:	f7ff faf1 	bl	8019930 <quorem>
 801a34e:	4603      	mov	r3, r0
 801a350:	3330      	adds	r3, #48	; 0x30
 801a352:	9005      	str	r0, [sp, #20]
 801a354:	4649      	mov	r1, r9
 801a356:	4628      	mov	r0, r5
 801a358:	9309      	str	r3, [sp, #36]	; 0x24
 801a35a:	f000 fc59 	bl	801ac10 <__mcmp>
 801a35e:	463a      	mov	r2, r7
 801a360:	4682      	mov	sl, r0
 801a362:	4621      	mov	r1, r4
 801a364:	4630      	mov	r0, r6
 801a366:	f000 fc6f 	bl	801ac48 <__mdiff>
 801a36a:	68c2      	ldr	r2, [r0, #12]
 801a36c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a36e:	4680      	mov	r8, r0
 801a370:	bb0a      	cbnz	r2, 801a3b6 <_dtoa_r+0x976>
 801a372:	4601      	mov	r1, r0
 801a374:	4628      	mov	r0, r5
 801a376:	f000 fc4b 	bl	801ac10 <__mcmp>
 801a37a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a37c:	4602      	mov	r2, r0
 801a37e:	4641      	mov	r1, r8
 801a380:	4630      	mov	r0, r6
 801a382:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801a386:	f000 fa07 	bl	801a798 <_Bfree>
 801a38a:	9b06      	ldr	r3, [sp, #24]
 801a38c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a38e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801a392:	ea43 0102 	orr.w	r1, r3, r2
 801a396:	9b07      	ldr	r3, [sp, #28]
 801a398:	4319      	orrs	r1, r3
 801a39a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a39c:	d10d      	bne.n	801a3ba <_dtoa_r+0x97a>
 801a39e:	2b39      	cmp	r3, #57	; 0x39
 801a3a0:	d029      	beq.n	801a3f6 <_dtoa_r+0x9b6>
 801a3a2:	f1ba 0f00 	cmp.w	sl, #0
 801a3a6:	dd01      	ble.n	801a3ac <_dtoa_r+0x96c>
 801a3a8:	9b05      	ldr	r3, [sp, #20]
 801a3aa:	3331      	adds	r3, #49	; 0x31
 801a3ac:	9a02      	ldr	r2, [sp, #8]
 801a3ae:	7013      	strb	r3, [r2, #0]
 801a3b0:	e775      	b.n	801a29e <_dtoa_r+0x85e>
 801a3b2:	4638      	mov	r0, r7
 801a3b4:	e7b8      	b.n	801a328 <_dtoa_r+0x8e8>
 801a3b6:	2201      	movs	r2, #1
 801a3b8:	e7e1      	b.n	801a37e <_dtoa_r+0x93e>
 801a3ba:	f1ba 0f00 	cmp.w	sl, #0
 801a3be:	db06      	blt.n	801a3ce <_dtoa_r+0x98e>
 801a3c0:	9906      	ldr	r1, [sp, #24]
 801a3c2:	ea41 0a0a 	orr.w	sl, r1, sl
 801a3c6:	9907      	ldr	r1, [sp, #28]
 801a3c8:	ea5a 0a01 	orrs.w	sl, sl, r1
 801a3cc:	d120      	bne.n	801a410 <_dtoa_r+0x9d0>
 801a3ce:	2a00      	cmp	r2, #0
 801a3d0:	ddec      	ble.n	801a3ac <_dtoa_r+0x96c>
 801a3d2:	4629      	mov	r1, r5
 801a3d4:	2201      	movs	r2, #1
 801a3d6:	4630      	mov	r0, r6
 801a3d8:	9304      	str	r3, [sp, #16]
 801a3da:	f000 fbad 	bl	801ab38 <__lshift>
 801a3de:	4621      	mov	r1, r4
 801a3e0:	4605      	mov	r5, r0
 801a3e2:	f000 fc15 	bl	801ac10 <__mcmp>
 801a3e6:	2800      	cmp	r0, #0
 801a3e8:	9b04      	ldr	r3, [sp, #16]
 801a3ea:	dc02      	bgt.n	801a3f2 <_dtoa_r+0x9b2>
 801a3ec:	d1de      	bne.n	801a3ac <_dtoa_r+0x96c>
 801a3ee:	07da      	lsls	r2, r3, #31
 801a3f0:	d5dc      	bpl.n	801a3ac <_dtoa_r+0x96c>
 801a3f2:	2b39      	cmp	r3, #57	; 0x39
 801a3f4:	d1d8      	bne.n	801a3a8 <_dtoa_r+0x968>
 801a3f6:	9a02      	ldr	r2, [sp, #8]
 801a3f8:	2339      	movs	r3, #57	; 0x39
 801a3fa:	7013      	strb	r3, [r2, #0]
 801a3fc:	4643      	mov	r3, r8
 801a3fe:	4698      	mov	r8, r3
 801a400:	3b01      	subs	r3, #1
 801a402:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801a406:	2a39      	cmp	r2, #57	; 0x39
 801a408:	d051      	beq.n	801a4ae <_dtoa_r+0xa6e>
 801a40a:	3201      	adds	r2, #1
 801a40c:	701a      	strb	r2, [r3, #0]
 801a40e:	e746      	b.n	801a29e <_dtoa_r+0x85e>
 801a410:	2a00      	cmp	r2, #0
 801a412:	dd03      	ble.n	801a41c <_dtoa_r+0x9dc>
 801a414:	2b39      	cmp	r3, #57	; 0x39
 801a416:	d0ee      	beq.n	801a3f6 <_dtoa_r+0x9b6>
 801a418:	3301      	adds	r3, #1
 801a41a:	e7c7      	b.n	801a3ac <_dtoa_r+0x96c>
 801a41c:	9a04      	ldr	r2, [sp, #16]
 801a41e:	9908      	ldr	r1, [sp, #32]
 801a420:	f802 3c01 	strb.w	r3, [r2, #-1]
 801a424:	428a      	cmp	r2, r1
 801a426:	d02b      	beq.n	801a480 <_dtoa_r+0xa40>
 801a428:	4629      	mov	r1, r5
 801a42a:	2300      	movs	r3, #0
 801a42c:	220a      	movs	r2, #10
 801a42e:	4630      	mov	r0, r6
 801a430:	f000 f9d4 	bl	801a7dc <__multadd>
 801a434:	45b9      	cmp	r9, r7
 801a436:	4605      	mov	r5, r0
 801a438:	f04f 0300 	mov.w	r3, #0
 801a43c:	f04f 020a 	mov.w	r2, #10
 801a440:	4649      	mov	r1, r9
 801a442:	4630      	mov	r0, r6
 801a444:	d107      	bne.n	801a456 <_dtoa_r+0xa16>
 801a446:	f000 f9c9 	bl	801a7dc <__multadd>
 801a44a:	4681      	mov	r9, r0
 801a44c:	4607      	mov	r7, r0
 801a44e:	9b04      	ldr	r3, [sp, #16]
 801a450:	3301      	adds	r3, #1
 801a452:	9304      	str	r3, [sp, #16]
 801a454:	e774      	b.n	801a340 <_dtoa_r+0x900>
 801a456:	f000 f9c1 	bl	801a7dc <__multadd>
 801a45a:	4639      	mov	r1, r7
 801a45c:	4681      	mov	r9, r0
 801a45e:	2300      	movs	r3, #0
 801a460:	220a      	movs	r2, #10
 801a462:	4630      	mov	r0, r6
 801a464:	f000 f9ba 	bl	801a7dc <__multadd>
 801a468:	4607      	mov	r7, r0
 801a46a:	e7f0      	b.n	801a44e <_dtoa_r+0xa0e>
 801a46c:	f1ba 0f00 	cmp.w	sl, #0
 801a470:	9a01      	ldr	r2, [sp, #4]
 801a472:	bfcc      	ite	gt
 801a474:	46d0      	movgt	r8, sl
 801a476:	f04f 0801 	movle.w	r8, #1
 801a47a:	4490      	add	r8, r2
 801a47c:	f04f 0900 	mov.w	r9, #0
 801a480:	4629      	mov	r1, r5
 801a482:	2201      	movs	r2, #1
 801a484:	4630      	mov	r0, r6
 801a486:	9302      	str	r3, [sp, #8]
 801a488:	f000 fb56 	bl	801ab38 <__lshift>
 801a48c:	4621      	mov	r1, r4
 801a48e:	4605      	mov	r5, r0
 801a490:	f000 fbbe 	bl	801ac10 <__mcmp>
 801a494:	2800      	cmp	r0, #0
 801a496:	dcb1      	bgt.n	801a3fc <_dtoa_r+0x9bc>
 801a498:	d102      	bne.n	801a4a0 <_dtoa_r+0xa60>
 801a49a:	9b02      	ldr	r3, [sp, #8]
 801a49c:	07db      	lsls	r3, r3, #31
 801a49e:	d4ad      	bmi.n	801a3fc <_dtoa_r+0x9bc>
 801a4a0:	4643      	mov	r3, r8
 801a4a2:	4698      	mov	r8, r3
 801a4a4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801a4a8:	2a30      	cmp	r2, #48	; 0x30
 801a4aa:	d0fa      	beq.n	801a4a2 <_dtoa_r+0xa62>
 801a4ac:	e6f7      	b.n	801a29e <_dtoa_r+0x85e>
 801a4ae:	9a01      	ldr	r2, [sp, #4]
 801a4b0:	429a      	cmp	r2, r3
 801a4b2:	d1a4      	bne.n	801a3fe <_dtoa_r+0x9be>
 801a4b4:	f10b 0b01 	add.w	fp, fp, #1
 801a4b8:	2331      	movs	r3, #49	; 0x31
 801a4ba:	e778      	b.n	801a3ae <_dtoa_r+0x96e>
 801a4bc:	4b14      	ldr	r3, [pc, #80]	; (801a510 <_dtoa_r+0xad0>)
 801a4be:	f7ff bb2a 	b.w	8019b16 <_dtoa_r+0xd6>
 801a4c2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a4c4:	2b00      	cmp	r3, #0
 801a4c6:	f47f ab05 	bne.w	8019ad4 <_dtoa_r+0x94>
 801a4ca:	4b12      	ldr	r3, [pc, #72]	; (801a514 <_dtoa_r+0xad4>)
 801a4cc:	f7ff bb23 	b.w	8019b16 <_dtoa_r+0xd6>
 801a4d0:	f1ba 0f00 	cmp.w	sl, #0
 801a4d4:	dc03      	bgt.n	801a4de <_dtoa_r+0xa9e>
 801a4d6:	9b06      	ldr	r3, [sp, #24]
 801a4d8:	2b02      	cmp	r3, #2
 801a4da:	f73f aec8 	bgt.w	801a26e <_dtoa_r+0x82e>
 801a4de:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a4e2:	4621      	mov	r1, r4
 801a4e4:	4628      	mov	r0, r5
 801a4e6:	f7ff fa23 	bl	8019930 <quorem>
 801a4ea:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801a4ee:	f808 3b01 	strb.w	r3, [r8], #1
 801a4f2:	9a01      	ldr	r2, [sp, #4]
 801a4f4:	eba8 0202 	sub.w	r2, r8, r2
 801a4f8:	4592      	cmp	sl, r2
 801a4fa:	ddb7      	ble.n	801a46c <_dtoa_r+0xa2c>
 801a4fc:	4629      	mov	r1, r5
 801a4fe:	2300      	movs	r3, #0
 801a500:	220a      	movs	r2, #10
 801a502:	4630      	mov	r0, r6
 801a504:	f000 f96a 	bl	801a7dc <__multadd>
 801a508:	4605      	mov	r5, r0
 801a50a:	e7ea      	b.n	801a4e2 <_dtoa_r+0xaa2>
 801a50c:	0801ea3b 	.word	0x0801ea3b
 801a510:	0801e976 	.word	0x0801e976
 801a514:	0801e9d6 	.word	0x0801e9d6

0801a518 <_free_r>:
 801a518:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a51a:	2900      	cmp	r1, #0
 801a51c:	d044      	beq.n	801a5a8 <_free_r+0x90>
 801a51e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a522:	9001      	str	r0, [sp, #4]
 801a524:	2b00      	cmp	r3, #0
 801a526:	f1a1 0404 	sub.w	r4, r1, #4
 801a52a:	bfb8      	it	lt
 801a52c:	18e4      	addlt	r4, r4, r3
 801a52e:	f000 f8e7 	bl	801a700 <__malloc_lock>
 801a532:	4a1e      	ldr	r2, [pc, #120]	; (801a5ac <_free_r+0x94>)
 801a534:	9801      	ldr	r0, [sp, #4]
 801a536:	6813      	ldr	r3, [r2, #0]
 801a538:	b933      	cbnz	r3, 801a548 <_free_r+0x30>
 801a53a:	6063      	str	r3, [r4, #4]
 801a53c:	6014      	str	r4, [r2, #0]
 801a53e:	b003      	add	sp, #12
 801a540:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a544:	f000 b8e2 	b.w	801a70c <__malloc_unlock>
 801a548:	42a3      	cmp	r3, r4
 801a54a:	d908      	bls.n	801a55e <_free_r+0x46>
 801a54c:	6825      	ldr	r5, [r4, #0]
 801a54e:	1961      	adds	r1, r4, r5
 801a550:	428b      	cmp	r3, r1
 801a552:	bf01      	itttt	eq
 801a554:	6819      	ldreq	r1, [r3, #0]
 801a556:	685b      	ldreq	r3, [r3, #4]
 801a558:	1949      	addeq	r1, r1, r5
 801a55a:	6021      	streq	r1, [r4, #0]
 801a55c:	e7ed      	b.n	801a53a <_free_r+0x22>
 801a55e:	461a      	mov	r2, r3
 801a560:	685b      	ldr	r3, [r3, #4]
 801a562:	b10b      	cbz	r3, 801a568 <_free_r+0x50>
 801a564:	42a3      	cmp	r3, r4
 801a566:	d9fa      	bls.n	801a55e <_free_r+0x46>
 801a568:	6811      	ldr	r1, [r2, #0]
 801a56a:	1855      	adds	r5, r2, r1
 801a56c:	42a5      	cmp	r5, r4
 801a56e:	d10b      	bne.n	801a588 <_free_r+0x70>
 801a570:	6824      	ldr	r4, [r4, #0]
 801a572:	4421      	add	r1, r4
 801a574:	1854      	adds	r4, r2, r1
 801a576:	42a3      	cmp	r3, r4
 801a578:	6011      	str	r1, [r2, #0]
 801a57a:	d1e0      	bne.n	801a53e <_free_r+0x26>
 801a57c:	681c      	ldr	r4, [r3, #0]
 801a57e:	685b      	ldr	r3, [r3, #4]
 801a580:	6053      	str	r3, [r2, #4]
 801a582:	440c      	add	r4, r1
 801a584:	6014      	str	r4, [r2, #0]
 801a586:	e7da      	b.n	801a53e <_free_r+0x26>
 801a588:	d902      	bls.n	801a590 <_free_r+0x78>
 801a58a:	230c      	movs	r3, #12
 801a58c:	6003      	str	r3, [r0, #0]
 801a58e:	e7d6      	b.n	801a53e <_free_r+0x26>
 801a590:	6825      	ldr	r5, [r4, #0]
 801a592:	1961      	adds	r1, r4, r5
 801a594:	428b      	cmp	r3, r1
 801a596:	bf04      	itt	eq
 801a598:	6819      	ldreq	r1, [r3, #0]
 801a59a:	685b      	ldreq	r3, [r3, #4]
 801a59c:	6063      	str	r3, [r4, #4]
 801a59e:	bf04      	itt	eq
 801a5a0:	1949      	addeq	r1, r1, r5
 801a5a2:	6021      	streq	r1, [r4, #0]
 801a5a4:	6054      	str	r4, [r2, #4]
 801a5a6:	e7ca      	b.n	801a53e <_free_r+0x26>
 801a5a8:	b003      	add	sp, #12
 801a5aa:	bd30      	pop	{r4, r5, pc}
 801a5ac:	20008368 	.word	0x20008368

0801a5b0 <malloc>:
 801a5b0:	4b02      	ldr	r3, [pc, #8]	; (801a5bc <malloc+0xc>)
 801a5b2:	4601      	mov	r1, r0
 801a5b4:	6818      	ldr	r0, [r3, #0]
 801a5b6:	f000 b823 	b.w	801a600 <_malloc_r>
 801a5ba:	bf00      	nop
 801a5bc:	200000bc 	.word	0x200000bc

0801a5c0 <sbrk_aligned>:
 801a5c0:	b570      	push	{r4, r5, r6, lr}
 801a5c2:	4e0e      	ldr	r6, [pc, #56]	; (801a5fc <sbrk_aligned+0x3c>)
 801a5c4:	460c      	mov	r4, r1
 801a5c6:	6831      	ldr	r1, [r6, #0]
 801a5c8:	4605      	mov	r5, r0
 801a5ca:	b911      	cbnz	r1, 801a5d2 <sbrk_aligned+0x12>
 801a5cc:	f000 fea8 	bl	801b320 <_sbrk_r>
 801a5d0:	6030      	str	r0, [r6, #0]
 801a5d2:	4621      	mov	r1, r4
 801a5d4:	4628      	mov	r0, r5
 801a5d6:	f000 fea3 	bl	801b320 <_sbrk_r>
 801a5da:	1c43      	adds	r3, r0, #1
 801a5dc:	d00a      	beq.n	801a5f4 <sbrk_aligned+0x34>
 801a5de:	1cc4      	adds	r4, r0, #3
 801a5e0:	f024 0403 	bic.w	r4, r4, #3
 801a5e4:	42a0      	cmp	r0, r4
 801a5e6:	d007      	beq.n	801a5f8 <sbrk_aligned+0x38>
 801a5e8:	1a21      	subs	r1, r4, r0
 801a5ea:	4628      	mov	r0, r5
 801a5ec:	f000 fe98 	bl	801b320 <_sbrk_r>
 801a5f0:	3001      	adds	r0, #1
 801a5f2:	d101      	bne.n	801a5f8 <sbrk_aligned+0x38>
 801a5f4:	f04f 34ff 	mov.w	r4, #4294967295
 801a5f8:	4620      	mov	r0, r4
 801a5fa:	bd70      	pop	{r4, r5, r6, pc}
 801a5fc:	2000836c 	.word	0x2000836c

0801a600 <_malloc_r>:
 801a600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a604:	1ccd      	adds	r5, r1, #3
 801a606:	f025 0503 	bic.w	r5, r5, #3
 801a60a:	3508      	adds	r5, #8
 801a60c:	2d0c      	cmp	r5, #12
 801a60e:	bf38      	it	cc
 801a610:	250c      	movcc	r5, #12
 801a612:	2d00      	cmp	r5, #0
 801a614:	4607      	mov	r7, r0
 801a616:	db01      	blt.n	801a61c <_malloc_r+0x1c>
 801a618:	42a9      	cmp	r1, r5
 801a61a:	d905      	bls.n	801a628 <_malloc_r+0x28>
 801a61c:	230c      	movs	r3, #12
 801a61e:	603b      	str	r3, [r7, #0]
 801a620:	2600      	movs	r6, #0
 801a622:	4630      	mov	r0, r6
 801a624:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a628:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801a6fc <_malloc_r+0xfc>
 801a62c:	f000 f868 	bl	801a700 <__malloc_lock>
 801a630:	f8d8 3000 	ldr.w	r3, [r8]
 801a634:	461c      	mov	r4, r3
 801a636:	bb5c      	cbnz	r4, 801a690 <_malloc_r+0x90>
 801a638:	4629      	mov	r1, r5
 801a63a:	4638      	mov	r0, r7
 801a63c:	f7ff ffc0 	bl	801a5c0 <sbrk_aligned>
 801a640:	1c43      	adds	r3, r0, #1
 801a642:	4604      	mov	r4, r0
 801a644:	d155      	bne.n	801a6f2 <_malloc_r+0xf2>
 801a646:	f8d8 4000 	ldr.w	r4, [r8]
 801a64a:	4626      	mov	r6, r4
 801a64c:	2e00      	cmp	r6, #0
 801a64e:	d145      	bne.n	801a6dc <_malloc_r+0xdc>
 801a650:	2c00      	cmp	r4, #0
 801a652:	d048      	beq.n	801a6e6 <_malloc_r+0xe6>
 801a654:	6823      	ldr	r3, [r4, #0]
 801a656:	4631      	mov	r1, r6
 801a658:	4638      	mov	r0, r7
 801a65a:	eb04 0903 	add.w	r9, r4, r3
 801a65e:	f000 fe5f 	bl	801b320 <_sbrk_r>
 801a662:	4581      	cmp	r9, r0
 801a664:	d13f      	bne.n	801a6e6 <_malloc_r+0xe6>
 801a666:	6821      	ldr	r1, [r4, #0]
 801a668:	1a6d      	subs	r5, r5, r1
 801a66a:	4629      	mov	r1, r5
 801a66c:	4638      	mov	r0, r7
 801a66e:	f7ff ffa7 	bl	801a5c0 <sbrk_aligned>
 801a672:	3001      	adds	r0, #1
 801a674:	d037      	beq.n	801a6e6 <_malloc_r+0xe6>
 801a676:	6823      	ldr	r3, [r4, #0]
 801a678:	442b      	add	r3, r5
 801a67a:	6023      	str	r3, [r4, #0]
 801a67c:	f8d8 3000 	ldr.w	r3, [r8]
 801a680:	2b00      	cmp	r3, #0
 801a682:	d038      	beq.n	801a6f6 <_malloc_r+0xf6>
 801a684:	685a      	ldr	r2, [r3, #4]
 801a686:	42a2      	cmp	r2, r4
 801a688:	d12b      	bne.n	801a6e2 <_malloc_r+0xe2>
 801a68a:	2200      	movs	r2, #0
 801a68c:	605a      	str	r2, [r3, #4]
 801a68e:	e00f      	b.n	801a6b0 <_malloc_r+0xb0>
 801a690:	6822      	ldr	r2, [r4, #0]
 801a692:	1b52      	subs	r2, r2, r5
 801a694:	d41f      	bmi.n	801a6d6 <_malloc_r+0xd6>
 801a696:	2a0b      	cmp	r2, #11
 801a698:	d917      	bls.n	801a6ca <_malloc_r+0xca>
 801a69a:	1961      	adds	r1, r4, r5
 801a69c:	42a3      	cmp	r3, r4
 801a69e:	6025      	str	r5, [r4, #0]
 801a6a0:	bf18      	it	ne
 801a6a2:	6059      	strne	r1, [r3, #4]
 801a6a4:	6863      	ldr	r3, [r4, #4]
 801a6a6:	bf08      	it	eq
 801a6a8:	f8c8 1000 	streq.w	r1, [r8]
 801a6ac:	5162      	str	r2, [r4, r5]
 801a6ae:	604b      	str	r3, [r1, #4]
 801a6b0:	4638      	mov	r0, r7
 801a6b2:	f104 060b 	add.w	r6, r4, #11
 801a6b6:	f000 f829 	bl	801a70c <__malloc_unlock>
 801a6ba:	f026 0607 	bic.w	r6, r6, #7
 801a6be:	1d23      	adds	r3, r4, #4
 801a6c0:	1af2      	subs	r2, r6, r3
 801a6c2:	d0ae      	beq.n	801a622 <_malloc_r+0x22>
 801a6c4:	1b9b      	subs	r3, r3, r6
 801a6c6:	50a3      	str	r3, [r4, r2]
 801a6c8:	e7ab      	b.n	801a622 <_malloc_r+0x22>
 801a6ca:	42a3      	cmp	r3, r4
 801a6cc:	6862      	ldr	r2, [r4, #4]
 801a6ce:	d1dd      	bne.n	801a68c <_malloc_r+0x8c>
 801a6d0:	f8c8 2000 	str.w	r2, [r8]
 801a6d4:	e7ec      	b.n	801a6b0 <_malloc_r+0xb0>
 801a6d6:	4623      	mov	r3, r4
 801a6d8:	6864      	ldr	r4, [r4, #4]
 801a6da:	e7ac      	b.n	801a636 <_malloc_r+0x36>
 801a6dc:	4634      	mov	r4, r6
 801a6de:	6876      	ldr	r6, [r6, #4]
 801a6e0:	e7b4      	b.n	801a64c <_malloc_r+0x4c>
 801a6e2:	4613      	mov	r3, r2
 801a6e4:	e7cc      	b.n	801a680 <_malloc_r+0x80>
 801a6e6:	230c      	movs	r3, #12
 801a6e8:	603b      	str	r3, [r7, #0]
 801a6ea:	4638      	mov	r0, r7
 801a6ec:	f000 f80e 	bl	801a70c <__malloc_unlock>
 801a6f0:	e797      	b.n	801a622 <_malloc_r+0x22>
 801a6f2:	6025      	str	r5, [r4, #0]
 801a6f4:	e7dc      	b.n	801a6b0 <_malloc_r+0xb0>
 801a6f6:	605b      	str	r3, [r3, #4]
 801a6f8:	deff      	udf	#255	; 0xff
 801a6fa:	bf00      	nop
 801a6fc:	20008368 	.word	0x20008368

0801a700 <__malloc_lock>:
 801a700:	4801      	ldr	r0, [pc, #4]	; (801a708 <__malloc_lock+0x8>)
 801a702:	f7ff b8e7 	b.w	80198d4 <__retarget_lock_acquire_recursive>
 801a706:	bf00      	nop
 801a708:	20008364 	.word	0x20008364

0801a70c <__malloc_unlock>:
 801a70c:	4801      	ldr	r0, [pc, #4]	; (801a714 <__malloc_unlock+0x8>)
 801a70e:	f7ff b8e2 	b.w	80198d6 <__retarget_lock_release_recursive>
 801a712:	bf00      	nop
 801a714:	20008364 	.word	0x20008364

0801a718 <_Balloc>:
 801a718:	b570      	push	{r4, r5, r6, lr}
 801a71a:	69c6      	ldr	r6, [r0, #28]
 801a71c:	4604      	mov	r4, r0
 801a71e:	460d      	mov	r5, r1
 801a720:	b976      	cbnz	r6, 801a740 <_Balloc+0x28>
 801a722:	2010      	movs	r0, #16
 801a724:	f7ff ff44 	bl	801a5b0 <malloc>
 801a728:	4602      	mov	r2, r0
 801a72a:	61e0      	str	r0, [r4, #28]
 801a72c:	b920      	cbnz	r0, 801a738 <_Balloc+0x20>
 801a72e:	4b18      	ldr	r3, [pc, #96]	; (801a790 <_Balloc+0x78>)
 801a730:	4818      	ldr	r0, [pc, #96]	; (801a794 <_Balloc+0x7c>)
 801a732:	216b      	movs	r1, #107	; 0x6b
 801a734:	f7ff f8de 	bl	80198f4 <__assert_func>
 801a738:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801a73c:	6006      	str	r6, [r0, #0]
 801a73e:	60c6      	str	r6, [r0, #12]
 801a740:	69e6      	ldr	r6, [r4, #28]
 801a742:	68f3      	ldr	r3, [r6, #12]
 801a744:	b183      	cbz	r3, 801a768 <_Balloc+0x50>
 801a746:	69e3      	ldr	r3, [r4, #28]
 801a748:	68db      	ldr	r3, [r3, #12]
 801a74a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801a74e:	b9b8      	cbnz	r0, 801a780 <_Balloc+0x68>
 801a750:	2101      	movs	r1, #1
 801a752:	fa01 f605 	lsl.w	r6, r1, r5
 801a756:	1d72      	adds	r2, r6, #5
 801a758:	0092      	lsls	r2, r2, #2
 801a75a:	4620      	mov	r0, r4
 801a75c:	f000 fdf7 	bl	801b34e <_calloc_r>
 801a760:	b160      	cbz	r0, 801a77c <_Balloc+0x64>
 801a762:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801a766:	e00e      	b.n	801a786 <_Balloc+0x6e>
 801a768:	2221      	movs	r2, #33	; 0x21
 801a76a:	2104      	movs	r1, #4
 801a76c:	4620      	mov	r0, r4
 801a76e:	f000 fdee 	bl	801b34e <_calloc_r>
 801a772:	69e3      	ldr	r3, [r4, #28]
 801a774:	60f0      	str	r0, [r6, #12]
 801a776:	68db      	ldr	r3, [r3, #12]
 801a778:	2b00      	cmp	r3, #0
 801a77a:	d1e4      	bne.n	801a746 <_Balloc+0x2e>
 801a77c:	2000      	movs	r0, #0
 801a77e:	bd70      	pop	{r4, r5, r6, pc}
 801a780:	6802      	ldr	r2, [r0, #0]
 801a782:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801a786:	2300      	movs	r3, #0
 801a788:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801a78c:	e7f7      	b.n	801a77e <_Balloc+0x66>
 801a78e:	bf00      	nop
 801a790:	0801e7f6 	.word	0x0801e7f6
 801a794:	0801ea4c 	.word	0x0801ea4c

0801a798 <_Bfree>:
 801a798:	b570      	push	{r4, r5, r6, lr}
 801a79a:	69c6      	ldr	r6, [r0, #28]
 801a79c:	4605      	mov	r5, r0
 801a79e:	460c      	mov	r4, r1
 801a7a0:	b976      	cbnz	r6, 801a7c0 <_Bfree+0x28>
 801a7a2:	2010      	movs	r0, #16
 801a7a4:	f7ff ff04 	bl	801a5b0 <malloc>
 801a7a8:	4602      	mov	r2, r0
 801a7aa:	61e8      	str	r0, [r5, #28]
 801a7ac:	b920      	cbnz	r0, 801a7b8 <_Bfree+0x20>
 801a7ae:	4b09      	ldr	r3, [pc, #36]	; (801a7d4 <_Bfree+0x3c>)
 801a7b0:	4809      	ldr	r0, [pc, #36]	; (801a7d8 <_Bfree+0x40>)
 801a7b2:	218f      	movs	r1, #143	; 0x8f
 801a7b4:	f7ff f89e 	bl	80198f4 <__assert_func>
 801a7b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801a7bc:	6006      	str	r6, [r0, #0]
 801a7be:	60c6      	str	r6, [r0, #12]
 801a7c0:	b13c      	cbz	r4, 801a7d2 <_Bfree+0x3a>
 801a7c2:	69eb      	ldr	r3, [r5, #28]
 801a7c4:	6862      	ldr	r2, [r4, #4]
 801a7c6:	68db      	ldr	r3, [r3, #12]
 801a7c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801a7cc:	6021      	str	r1, [r4, #0]
 801a7ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801a7d2:	bd70      	pop	{r4, r5, r6, pc}
 801a7d4:	0801e7f6 	.word	0x0801e7f6
 801a7d8:	0801ea4c 	.word	0x0801ea4c

0801a7dc <__multadd>:
 801a7dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a7e0:	690d      	ldr	r5, [r1, #16]
 801a7e2:	4607      	mov	r7, r0
 801a7e4:	460c      	mov	r4, r1
 801a7e6:	461e      	mov	r6, r3
 801a7e8:	f101 0c14 	add.w	ip, r1, #20
 801a7ec:	2000      	movs	r0, #0
 801a7ee:	f8dc 3000 	ldr.w	r3, [ip]
 801a7f2:	b299      	uxth	r1, r3
 801a7f4:	fb02 6101 	mla	r1, r2, r1, r6
 801a7f8:	0c1e      	lsrs	r6, r3, #16
 801a7fa:	0c0b      	lsrs	r3, r1, #16
 801a7fc:	fb02 3306 	mla	r3, r2, r6, r3
 801a800:	b289      	uxth	r1, r1
 801a802:	3001      	adds	r0, #1
 801a804:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801a808:	4285      	cmp	r5, r0
 801a80a:	f84c 1b04 	str.w	r1, [ip], #4
 801a80e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801a812:	dcec      	bgt.n	801a7ee <__multadd+0x12>
 801a814:	b30e      	cbz	r6, 801a85a <__multadd+0x7e>
 801a816:	68a3      	ldr	r3, [r4, #8]
 801a818:	42ab      	cmp	r3, r5
 801a81a:	dc19      	bgt.n	801a850 <__multadd+0x74>
 801a81c:	6861      	ldr	r1, [r4, #4]
 801a81e:	4638      	mov	r0, r7
 801a820:	3101      	adds	r1, #1
 801a822:	f7ff ff79 	bl	801a718 <_Balloc>
 801a826:	4680      	mov	r8, r0
 801a828:	b928      	cbnz	r0, 801a836 <__multadd+0x5a>
 801a82a:	4602      	mov	r2, r0
 801a82c:	4b0c      	ldr	r3, [pc, #48]	; (801a860 <__multadd+0x84>)
 801a82e:	480d      	ldr	r0, [pc, #52]	; (801a864 <__multadd+0x88>)
 801a830:	21ba      	movs	r1, #186	; 0xba
 801a832:	f7ff f85f 	bl	80198f4 <__assert_func>
 801a836:	6922      	ldr	r2, [r4, #16]
 801a838:	3202      	adds	r2, #2
 801a83a:	f104 010c 	add.w	r1, r4, #12
 801a83e:	0092      	lsls	r2, r2, #2
 801a840:	300c      	adds	r0, #12
 801a842:	f7ff f849 	bl	80198d8 <memcpy>
 801a846:	4621      	mov	r1, r4
 801a848:	4638      	mov	r0, r7
 801a84a:	f7ff ffa5 	bl	801a798 <_Bfree>
 801a84e:	4644      	mov	r4, r8
 801a850:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801a854:	3501      	adds	r5, #1
 801a856:	615e      	str	r6, [r3, #20]
 801a858:	6125      	str	r5, [r4, #16]
 801a85a:	4620      	mov	r0, r4
 801a85c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a860:	0801ea3b 	.word	0x0801ea3b
 801a864:	0801ea4c 	.word	0x0801ea4c

0801a868 <__hi0bits>:
 801a868:	0c03      	lsrs	r3, r0, #16
 801a86a:	041b      	lsls	r3, r3, #16
 801a86c:	b9d3      	cbnz	r3, 801a8a4 <__hi0bits+0x3c>
 801a86e:	0400      	lsls	r0, r0, #16
 801a870:	2310      	movs	r3, #16
 801a872:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801a876:	bf04      	itt	eq
 801a878:	0200      	lsleq	r0, r0, #8
 801a87a:	3308      	addeq	r3, #8
 801a87c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801a880:	bf04      	itt	eq
 801a882:	0100      	lsleq	r0, r0, #4
 801a884:	3304      	addeq	r3, #4
 801a886:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801a88a:	bf04      	itt	eq
 801a88c:	0080      	lsleq	r0, r0, #2
 801a88e:	3302      	addeq	r3, #2
 801a890:	2800      	cmp	r0, #0
 801a892:	db05      	blt.n	801a8a0 <__hi0bits+0x38>
 801a894:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801a898:	f103 0301 	add.w	r3, r3, #1
 801a89c:	bf08      	it	eq
 801a89e:	2320      	moveq	r3, #32
 801a8a0:	4618      	mov	r0, r3
 801a8a2:	4770      	bx	lr
 801a8a4:	2300      	movs	r3, #0
 801a8a6:	e7e4      	b.n	801a872 <__hi0bits+0xa>

0801a8a8 <__lo0bits>:
 801a8a8:	6803      	ldr	r3, [r0, #0]
 801a8aa:	f013 0207 	ands.w	r2, r3, #7
 801a8ae:	d00c      	beq.n	801a8ca <__lo0bits+0x22>
 801a8b0:	07d9      	lsls	r1, r3, #31
 801a8b2:	d422      	bmi.n	801a8fa <__lo0bits+0x52>
 801a8b4:	079a      	lsls	r2, r3, #30
 801a8b6:	bf49      	itett	mi
 801a8b8:	085b      	lsrmi	r3, r3, #1
 801a8ba:	089b      	lsrpl	r3, r3, #2
 801a8bc:	6003      	strmi	r3, [r0, #0]
 801a8be:	2201      	movmi	r2, #1
 801a8c0:	bf5c      	itt	pl
 801a8c2:	6003      	strpl	r3, [r0, #0]
 801a8c4:	2202      	movpl	r2, #2
 801a8c6:	4610      	mov	r0, r2
 801a8c8:	4770      	bx	lr
 801a8ca:	b299      	uxth	r1, r3
 801a8cc:	b909      	cbnz	r1, 801a8d2 <__lo0bits+0x2a>
 801a8ce:	0c1b      	lsrs	r3, r3, #16
 801a8d0:	2210      	movs	r2, #16
 801a8d2:	b2d9      	uxtb	r1, r3
 801a8d4:	b909      	cbnz	r1, 801a8da <__lo0bits+0x32>
 801a8d6:	3208      	adds	r2, #8
 801a8d8:	0a1b      	lsrs	r3, r3, #8
 801a8da:	0719      	lsls	r1, r3, #28
 801a8dc:	bf04      	itt	eq
 801a8de:	091b      	lsreq	r3, r3, #4
 801a8e0:	3204      	addeq	r2, #4
 801a8e2:	0799      	lsls	r1, r3, #30
 801a8e4:	bf04      	itt	eq
 801a8e6:	089b      	lsreq	r3, r3, #2
 801a8e8:	3202      	addeq	r2, #2
 801a8ea:	07d9      	lsls	r1, r3, #31
 801a8ec:	d403      	bmi.n	801a8f6 <__lo0bits+0x4e>
 801a8ee:	085b      	lsrs	r3, r3, #1
 801a8f0:	f102 0201 	add.w	r2, r2, #1
 801a8f4:	d003      	beq.n	801a8fe <__lo0bits+0x56>
 801a8f6:	6003      	str	r3, [r0, #0]
 801a8f8:	e7e5      	b.n	801a8c6 <__lo0bits+0x1e>
 801a8fa:	2200      	movs	r2, #0
 801a8fc:	e7e3      	b.n	801a8c6 <__lo0bits+0x1e>
 801a8fe:	2220      	movs	r2, #32
 801a900:	e7e1      	b.n	801a8c6 <__lo0bits+0x1e>
	...

0801a904 <__i2b>:
 801a904:	b510      	push	{r4, lr}
 801a906:	460c      	mov	r4, r1
 801a908:	2101      	movs	r1, #1
 801a90a:	f7ff ff05 	bl	801a718 <_Balloc>
 801a90e:	4602      	mov	r2, r0
 801a910:	b928      	cbnz	r0, 801a91e <__i2b+0x1a>
 801a912:	4b05      	ldr	r3, [pc, #20]	; (801a928 <__i2b+0x24>)
 801a914:	4805      	ldr	r0, [pc, #20]	; (801a92c <__i2b+0x28>)
 801a916:	f240 1145 	movw	r1, #325	; 0x145
 801a91a:	f7fe ffeb 	bl	80198f4 <__assert_func>
 801a91e:	2301      	movs	r3, #1
 801a920:	6144      	str	r4, [r0, #20]
 801a922:	6103      	str	r3, [r0, #16]
 801a924:	bd10      	pop	{r4, pc}
 801a926:	bf00      	nop
 801a928:	0801ea3b 	.word	0x0801ea3b
 801a92c:	0801ea4c 	.word	0x0801ea4c

0801a930 <__multiply>:
 801a930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a934:	4691      	mov	r9, r2
 801a936:	690a      	ldr	r2, [r1, #16]
 801a938:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801a93c:	429a      	cmp	r2, r3
 801a93e:	bfb8      	it	lt
 801a940:	460b      	movlt	r3, r1
 801a942:	460c      	mov	r4, r1
 801a944:	bfbc      	itt	lt
 801a946:	464c      	movlt	r4, r9
 801a948:	4699      	movlt	r9, r3
 801a94a:	6927      	ldr	r7, [r4, #16]
 801a94c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801a950:	68a3      	ldr	r3, [r4, #8]
 801a952:	6861      	ldr	r1, [r4, #4]
 801a954:	eb07 060a 	add.w	r6, r7, sl
 801a958:	42b3      	cmp	r3, r6
 801a95a:	b085      	sub	sp, #20
 801a95c:	bfb8      	it	lt
 801a95e:	3101      	addlt	r1, #1
 801a960:	f7ff feda 	bl	801a718 <_Balloc>
 801a964:	b930      	cbnz	r0, 801a974 <__multiply+0x44>
 801a966:	4602      	mov	r2, r0
 801a968:	4b44      	ldr	r3, [pc, #272]	; (801aa7c <__multiply+0x14c>)
 801a96a:	4845      	ldr	r0, [pc, #276]	; (801aa80 <__multiply+0x150>)
 801a96c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801a970:	f7fe ffc0 	bl	80198f4 <__assert_func>
 801a974:	f100 0514 	add.w	r5, r0, #20
 801a978:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801a97c:	462b      	mov	r3, r5
 801a97e:	2200      	movs	r2, #0
 801a980:	4543      	cmp	r3, r8
 801a982:	d321      	bcc.n	801a9c8 <__multiply+0x98>
 801a984:	f104 0314 	add.w	r3, r4, #20
 801a988:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801a98c:	f109 0314 	add.w	r3, r9, #20
 801a990:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801a994:	9202      	str	r2, [sp, #8]
 801a996:	1b3a      	subs	r2, r7, r4
 801a998:	3a15      	subs	r2, #21
 801a99a:	f022 0203 	bic.w	r2, r2, #3
 801a99e:	3204      	adds	r2, #4
 801a9a0:	f104 0115 	add.w	r1, r4, #21
 801a9a4:	428f      	cmp	r7, r1
 801a9a6:	bf38      	it	cc
 801a9a8:	2204      	movcc	r2, #4
 801a9aa:	9201      	str	r2, [sp, #4]
 801a9ac:	9a02      	ldr	r2, [sp, #8]
 801a9ae:	9303      	str	r3, [sp, #12]
 801a9b0:	429a      	cmp	r2, r3
 801a9b2:	d80c      	bhi.n	801a9ce <__multiply+0x9e>
 801a9b4:	2e00      	cmp	r6, #0
 801a9b6:	dd03      	ble.n	801a9c0 <__multiply+0x90>
 801a9b8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801a9bc:	2b00      	cmp	r3, #0
 801a9be:	d05b      	beq.n	801aa78 <__multiply+0x148>
 801a9c0:	6106      	str	r6, [r0, #16]
 801a9c2:	b005      	add	sp, #20
 801a9c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a9c8:	f843 2b04 	str.w	r2, [r3], #4
 801a9cc:	e7d8      	b.n	801a980 <__multiply+0x50>
 801a9ce:	f8b3 a000 	ldrh.w	sl, [r3]
 801a9d2:	f1ba 0f00 	cmp.w	sl, #0
 801a9d6:	d024      	beq.n	801aa22 <__multiply+0xf2>
 801a9d8:	f104 0e14 	add.w	lr, r4, #20
 801a9dc:	46a9      	mov	r9, r5
 801a9de:	f04f 0c00 	mov.w	ip, #0
 801a9e2:	f85e 2b04 	ldr.w	r2, [lr], #4
 801a9e6:	f8d9 1000 	ldr.w	r1, [r9]
 801a9ea:	fa1f fb82 	uxth.w	fp, r2
 801a9ee:	b289      	uxth	r1, r1
 801a9f0:	fb0a 110b 	mla	r1, sl, fp, r1
 801a9f4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801a9f8:	f8d9 2000 	ldr.w	r2, [r9]
 801a9fc:	4461      	add	r1, ip
 801a9fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801aa02:	fb0a c20b 	mla	r2, sl, fp, ip
 801aa06:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801aa0a:	b289      	uxth	r1, r1
 801aa0c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801aa10:	4577      	cmp	r7, lr
 801aa12:	f849 1b04 	str.w	r1, [r9], #4
 801aa16:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801aa1a:	d8e2      	bhi.n	801a9e2 <__multiply+0xb2>
 801aa1c:	9a01      	ldr	r2, [sp, #4]
 801aa1e:	f845 c002 	str.w	ip, [r5, r2]
 801aa22:	9a03      	ldr	r2, [sp, #12]
 801aa24:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801aa28:	3304      	adds	r3, #4
 801aa2a:	f1b9 0f00 	cmp.w	r9, #0
 801aa2e:	d021      	beq.n	801aa74 <__multiply+0x144>
 801aa30:	6829      	ldr	r1, [r5, #0]
 801aa32:	f104 0c14 	add.w	ip, r4, #20
 801aa36:	46ae      	mov	lr, r5
 801aa38:	f04f 0a00 	mov.w	sl, #0
 801aa3c:	f8bc b000 	ldrh.w	fp, [ip]
 801aa40:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801aa44:	fb09 220b 	mla	r2, r9, fp, r2
 801aa48:	4452      	add	r2, sl
 801aa4a:	b289      	uxth	r1, r1
 801aa4c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801aa50:	f84e 1b04 	str.w	r1, [lr], #4
 801aa54:	f85c 1b04 	ldr.w	r1, [ip], #4
 801aa58:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801aa5c:	f8be 1000 	ldrh.w	r1, [lr]
 801aa60:	fb09 110a 	mla	r1, r9, sl, r1
 801aa64:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801aa68:	4567      	cmp	r7, ip
 801aa6a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801aa6e:	d8e5      	bhi.n	801aa3c <__multiply+0x10c>
 801aa70:	9a01      	ldr	r2, [sp, #4]
 801aa72:	50a9      	str	r1, [r5, r2]
 801aa74:	3504      	adds	r5, #4
 801aa76:	e799      	b.n	801a9ac <__multiply+0x7c>
 801aa78:	3e01      	subs	r6, #1
 801aa7a:	e79b      	b.n	801a9b4 <__multiply+0x84>
 801aa7c:	0801ea3b 	.word	0x0801ea3b
 801aa80:	0801ea4c 	.word	0x0801ea4c

0801aa84 <__pow5mult>:
 801aa84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801aa88:	4615      	mov	r5, r2
 801aa8a:	f012 0203 	ands.w	r2, r2, #3
 801aa8e:	4606      	mov	r6, r0
 801aa90:	460f      	mov	r7, r1
 801aa92:	d007      	beq.n	801aaa4 <__pow5mult+0x20>
 801aa94:	4c25      	ldr	r4, [pc, #148]	; (801ab2c <__pow5mult+0xa8>)
 801aa96:	3a01      	subs	r2, #1
 801aa98:	2300      	movs	r3, #0
 801aa9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801aa9e:	f7ff fe9d 	bl	801a7dc <__multadd>
 801aaa2:	4607      	mov	r7, r0
 801aaa4:	10ad      	asrs	r5, r5, #2
 801aaa6:	d03d      	beq.n	801ab24 <__pow5mult+0xa0>
 801aaa8:	69f4      	ldr	r4, [r6, #28]
 801aaaa:	b97c      	cbnz	r4, 801aacc <__pow5mult+0x48>
 801aaac:	2010      	movs	r0, #16
 801aaae:	f7ff fd7f 	bl	801a5b0 <malloc>
 801aab2:	4602      	mov	r2, r0
 801aab4:	61f0      	str	r0, [r6, #28]
 801aab6:	b928      	cbnz	r0, 801aac4 <__pow5mult+0x40>
 801aab8:	4b1d      	ldr	r3, [pc, #116]	; (801ab30 <__pow5mult+0xac>)
 801aaba:	481e      	ldr	r0, [pc, #120]	; (801ab34 <__pow5mult+0xb0>)
 801aabc:	f240 11b3 	movw	r1, #435	; 0x1b3
 801aac0:	f7fe ff18 	bl	80198f4 <__assert_func>
 801aac4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801aac8:	6004      	str	r4, [r0, #0]
 801aaca:	60c4      	str	r4, [r0, #12]
 801aacc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801aad0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801aad4:	b94c      	cbnz	r4, 801aaea <__pow5mult+0x66>
 801aad6:	f240 2171 	movw	r1, #625	; 0x271
 801aada:	4630      	mov	r0, r6
 801aadc:	f7ff ff12 	bl	801a904 <__i2b>
 801aae0:	2300      	movs	r3, #0
 801aae2:	f8c8 0008 	str.w	r0, [r8, #8]
 801aae6:	4604      	mov	r4, r0
 801aae8:	6003      	str	r3, [r0, #0]
 801aaea:	f04f 0900 	mov.w	r9, #0
 801aaee:	07eb      	lsls	r3, r5, #31
 801aaf0:	d50a      	bpl.n	801ab08 <__pow5mult+0x84>
 801aaf2:	4639      	mov	r1, r7
 801aaf4:	4622      	mov	r2, r4
 801aaf6:	4630      	mov	r0, r6
 801aaf8:	f7ff ff1a 	bl	801a930 <__multiply>
 801aafc:	4639      	mov	r1, r7
 801aafe:	4680      	mov	r8, r0
 801ab00:	4630      	mov	r0, r6
 801ab02:	f7ff fe49 	bl	801a798 <_Bfree>
 801ab06:	4647      	mov	r7, r8
 801ab08:	106d      	asrs	r5, r5, #1
 801ab0a:	d00b      	beq.n	801ab24 <__pow5mult+0xa0>
 801ab0c:	6820      	ldr	r0, [r4, #0]
 801ab0e:	b938      	cbnz	r0, 801ab20 <__pow5mult+0x9c>
 801ab10:	4622      	mov	r2, r4
 801ab12:	4621      	mov	r1, r4
 801ab14:	4630      	mov	r0, r6
 801ab16:	f7ff ff0b 	bl	801a930 <__multiply>
 801ab1a:	6020      	str	r0, [r4, #0]
 801ab1c:	f8c0 9000 	str.w	r9, [r0]
 801ab20:	4604      	mov	r4, r0
 801ab22:	e7e4      	b.n	801aaee <__pow5mult+0x6a>
 801ab24:	4638      	mov	r0, r7
 801ab26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ab2a:	bf00      	nop
 801ab2c:	0801eb98 	.word	0x0801eb98
 801ab30:	0801e7f6 	.word	0x0801e7f6
 801ab34:	0801ea4c 	.word	0x0801ea4c

0801ab38 <__lshift>:
 801ab38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ab3c:	460c      	mov	r4, r1
 801ab3e:	6849      	ldr	r1, [r1, #4]
 801ab40:	6923      	ldr	r3, [r4, #16]
 801ab42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801ab46:	68a3      	ldr	r3, [r4, #8]
 801ab48:	4607      	mov	r7, r0
 801ab4a:	4691      	mov	r9, r2
 801ab4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801ab50:	f108 0601 	add.w	r6, r8, #1
 801ab54:	42b3      	cmp	r3, r6
 801ab56:	db0b      	blt.n	801ab70 <__lshift+0x38>
 801ab58:	4638      	mov	r0, r7
 801ab5a:	f7ff fddd 	bl	801a718 <_Balloc>
 801ab5e:	4605      	mov	r5, r0
 801ab60:	b948      	cbnz	r0, 801ab76 <__lshift+0x3e>
 801ab62:	4602      	mov	r2, r0
 801ab64:	4b28      	ldr	r3, [pc, #160]	; (801ac08 <__lshift+0xd0>)
 801ab66:	4829      	ldr	r0, [pc, #164]	; (801ac0c <__lshift+0xd4>)
 801ab68:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801ab6c:	f7fe fec2 	bl	80198f4 <__assert_func>
 801ab70:	3101      	adds	r1, #1
 801ab72:	005b      	lsls	r3, r3, #1
 801ab74:	e7ee      	b.n	801ab54 <__lshift+0x1c>
 801ab76:	2300      	movs	r3, #0
 801ab78:	f100 0114 	add.w	r1, r0, #20
 801ab7c:	f100 0210 	add.w	r2, r0, #16
 801ab80:	4618      	mov	r0, r3
 801ab82:	4553      	cmp	r3, sl
 801ab84:	db33      	blt.n	801abee <__lshift+0xb6>
 801ab86:	6920      	ldr	r0, [r4, #16]
 801ab88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801ab8c:	f104 0314 	add.w	r3, r4, #20
 801ab90:	f019 091f 	ands.w	r9, r9, #31
 801ab94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801ab98:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801ab9c:	d02b      	beq.n	801abf6 <__lshift+0xbe>
 801ab9e:	f1c9 0e20 	rsb	lr, r9, #32
 801aba2:	468a      	mov	sl, r1
 801aba4:	2200      	movs	r2, #0
 801aba6:	6818      	ldr	r0, [r3, #0]
 801aba8:	fa00 f009 	lsl.w	r0, r0, r9
 801abac:	4310      	orrs	r0, r2
 801abae:	f84a 0b04 	str.w	r0, [sl], #4
 801abb2:	f853 2b04 	ldr.w	r2, [r3], #4
 801abb6:	459c      	cmp	ip, r3
 801abb8:	fa22 f20e 	lsr.w	r2, r2, lr
 801abbc:	d8f3      	bhi.n	801aba6 <__lshift+0x6e>
 801abbe:	ebac 0304 	sub.w	r3, ip, r4
 801abc2:	3b15      	subs	r3, #21
 801abc4:	f023 0303 	bic.w	r3, r3, #3
 801abc8:	3304      	adds	r3, #4
 801abca:	f104 0015 	add.w	r0, r4, #21
 801abce:	4584      	cmp	ip, r0
 801abd0:	bf38      	it	cc
 801abd2:	2304      	movcc	r3, #4
 801abd4:	50ca      	str	r2, [r1, r3]
 801abd6:	b10a      	cbz	r2, 801abdc <__lshift+0xa4>
 801abd8:	f108 0602 	add.w	r6, r8, #2
 801abdc:	3e01      	subs	r6, #1
 801abde:	4638      	mov	r0, r7
 801abe0:	612e      	str	r6, [r5, #16]
 801abe2:	4621      	mov	r1, r4
 801abe4:	f7ff fdd8 	bl	801a798 <_Bfree>
 801abe8:	4628      	mov	r0, r5
 801abea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801abee:	f842 0f04 	str.w	r0, [r2, #4]!
 801abf2:	3301      	adds	r3, #1
 801abf4:	e7c5      	b.n	801ab82 <__lshift+0x4a>
 801abf6:	3904      	subs	r1, #4
 801abf8:	f853 2b04 	ldr.w	r2, [r3], #4
 801abfc:	f841 2f04 	str.w	r2, [r1, #4]!
 801ac00:	459c      	cmp	ip, r3
 801ac02:	d8f9      	bhi.n	801abf8 <__lshift+0xc0>
 801ac04:	e7ea      	b.n	801abdc <__lshift+0xa4>
 801ac06:	bf00      	nop
 801ac08:	0801ea3b 	.word	0x0801ea3b
 801ac0c:	0801ea4c 	.word	0x0801ea4c

0801ac10 <__mcmp>:
 801ac10:	b530      	push	{r4, r5, lr}
 801ac12:	6902      	ldr	r2, [r0, #16]
 801ac14:	690c      	ldr	r4, [r1, #16]
 801ac16:	1b12      	subs	r2, r2, r4
 801ac18:	d10e      	bne.n	801ac38 <__mcmp+0x28>
 801ac1a:	f100 0314 	add.w	r3, r0, #20
 801ac1e:	3114      	adds	r1, #20
 801ac20:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801ac24:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801ac28:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801ac2c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801ac30:	42a5      	cmp	r5, r4
 801ac32:	d003      	beq.n	801ac3c <__mcmp+0x2c>
 801ac34:	d305      	bcc.n	801ac42 <__mcmp+0x32>
 801ac36:	2201      	movs	r2, #1
 801ac38:	4610      	mov	r0, r2
 801ac3a:	bd30      	pop	{r4, r5, pc}
 801ac3c:	4283      	cmp	r3, r0
 801ac3e:	d3f3      	bcc.n	801ac28 <__mcmp+0x18>
 801ac40:	e7fa      	b.n	801ac38 <__mcmp+0x28>
 801ac42:	f04f 32ff 	mov.w	r2, #4294967295
 801ac46:	e7f7      	b.n	801ac38 <__mcmp+0x28>

0801ac48 <__mdiff>:
 801ac48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac4c:	460c      	mov	r4, r1
 801ac4e:	4606      	mov	r6, r0
 801ac50:	4611      	mov	r1, r2
 801ac52:	4620      	mov	r0, r4
 801ac54:	4690      	mov	r8, r2
 801ac56:	f7ff ffdb 	bl	801ac10 <__mcmp>
 801ac5a:	1e05      	subs	r5, r0, #0
 801ac5c:	d110      	bne.n	801ac80 <__mdiff+0x38>
 801ac5e:	4629      	mov	r1, r5
 801ac60:	4630      	mov	r0, r6
 801ac62:	f7ff fd59 	bl	801a718 <_Balloc>
 801ac66:	b930      	cbnz	r0, 801ac76 <__mdiff+0x2e>
 801ac68:	4b3a      	ldr	r3, [pc, #232]	; (801ad54 <__mdiff+0x10c>)
 801ac6a:	4602      	mov	r2, r0
 801ac6c:	f240 2137 	movw	r1, #567	; 0x237
 801ac70:	4839      	ldr	r0, [pc, #228]	; (801ad58 <__mdiff+0x110>)
 801ac72:	f7fe fe3f 	bl	80198f4 <__assert_func>
 801ac76:	2301      	movs	r3, #1
 801ac78:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801ac7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac80:	bfa4      	itt	ge
 801ac82:	4643      	movge	r3, r8
 801ac84:	46a0      	movge	r8, r4
 801ac86:	4630      	mov	r0, r6
 801ac88:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801ac8c:	bfa6      	itte	ge
 801ac8e:	461c      	movge	r4, r3
 801ac90:	2500      	movge	r5, #0
 801ac92:	2501      	movlt	r5, #1
 801ac94:	f7ff fd40 	bl	801a718 <_Balloc>
 801ac98:	b920      	cbnz	r0, 801aca4 <__mdiff+0x5c>
 801ac9a:	4b2e      	ldr	r3, [pc, #184]	; (801ad54 <__mdiff+0x10c>)
 801ac9c:	4602      	mov	r2, r0
 801ac9e:	f240 2145 	movw	r1, #581	; 0x245
 801aca2:	e7e5      	b.n	801ac70 <__mdiff+0x28>
 801aca4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801aca8:	6926      	ldr	r6, [r4, #16]
 801acaa:	60c5      	str	r5, [r0, #12]
 801acac:	f104 0914 	add.w	r9, r4, #20
 801acb0:	f108 0514 	add.w	r5, r8, #20
 801acb4:	f100 0e14 	add.w	lr, r0, #20
 801acb8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801acbc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801acc0:	f108 0210 	add.w	r2, r8, #16
 801acc4:	46f2      	mov	sl, lr
 801acc6:	2100      	movs	r1, #0
 801acc8:	f859 3b04 	ldr.w	r3, [r9], #4
 801accc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801acd0:	fa11 f88b 	uxtah	r8, r1, fp
 801acd4:	b299      	uxth	r1, r3
 801acd6:	0c1b      	lsrs	r3, r3, #16
 801acd8:	eba8 0801 	sub.w	r8, r8, r1
 801acdc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801ace0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801ace4:	fa1f f888 	uxth.w	r8, r8
 801ace8:	1419      	asrs	r1, r3, #16
 801acea:	454e      	cmp	r6, r9
 801acec:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801acf0:	f84a 3b04 	str.w	r3, [sl], #4
 801acf4:	d8e8      	bhi.n	801acc8 <__mdiff+0x80>
 801acf6:	1b33      	subs	r3, r6, r4
 801acf8:	3b15      	subs	r3, #21
 801acfa:	f023 0303 	bic.w	r3, r3, #3
 801acfe:	3304      	adds	r3, #4
 801ad00:	3415      	adds	r4, #21
 801ad02:	42a6      	cmp	r6, r4
 801ad04:	bf38      	it	cc
 801ad06:	2304      	movcc	r3, #4
 801ad08:	441d      	add	r5, r3
 801ad0a:	4473      	add	r3, lr
 801ad0c:	469e      	mov	lr, r3
 801ad0e:	462e      	mov	r6, r5
 801ad10:	4566      	cmp	r6, ip
 801ad12:	d30e      	bcc.n	801ad32 <__mdiff+0xea>
 801ad14:	f10c 0203 	add.w	r2, ip, #3
 801ad18:	1b52      	subs	r2, r2, r5
 801ad1a:	f022 0203 	bic.w	r2, r2, #3
 801ad1e:	3d03      	subs	r5, #3
 801ad20:	45ac      	cmp	ip, r5
 801ad22:	bf38      	it	cc
 801ad24:	2200      	movcc	r2, #0
 801ad26:	4413      	add	r3, r2
 801ad28:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801ad2c:	b17a      	cbz	r2, 801ad4e <__mdiff+0x106>
 801ad2e:	6107      	str	r7, [r0, #16]
 801ad30:	e7a4      	b.n	801ac7c <__mdiff+0x34>
 801ad32:	f856 8b04 	ldr.w	r8, [r6], #4
 801ad36:	fa11 f288 	uxtah	r2, r1, r8
 801ad3a:	1414      	asrs	r4, r2, #16
 801ad3c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801ad40:	b292      	uxth	r2, r2
 801ad42:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801ad46:	f84e 2b04 	str.w	r2, [lr], #4
 801ad4a:	1421      	asrs	r1, r4, #16
 801ad4c:	e7e0      	b.n	801ad10 <__mdiff+0xc8>
 801ad4e:	3f01      	subs	r7, #1
 801ad50:	e7ea      	b.n	801ad28 <__mdiff+0xe0>
 801ad52:	bf00      	nop
 801ad54:	0801ea3b 	.word	0x0801ea3b
 801ad58:	0801ea4c 	.word	0x0801ea4c

0801ad5c <__d2b>:
 801ad5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801ad60:	460f      	mov	r7, r1
 801ad62:	2101      	movs	r1, #1
 801ad64:	ec59 8b10 	vmov	r8, r9, d0
 801ad68:	4616      	mov	r6, r2
 801ad6a:	f7ff fcd5 	bl	801a718 <_Balloc>
 801ad6e:	4604      	mov	r4, r0
 801ad70:	b930      	cbnz	r0, 801ad80 <__d2b+0x24>
 801ad72:	4602      	mov	r2, r0
 801ad74:	4b24      	ldr	r3, [pc, #144]	; (801ae08 <__d2b+0xac>)
 801ad76:	4825      	ldr	r0, [pc, #148]	; (801ae0c <__d2b+0xb0>)
 801ad78:	f240 310f 	movw	r1, #783	; 0x30f
 801ad7c:	f7fe fdba 	bl	80198f4 <__assert_func>
 801ad80:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801ad84:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801ad88:	bb2d      	cbnz	r5, 801add6 <__d2b+0x7a>
 801ad8a:	9301      	str	r3, [sp, #4]
 801ad8c:	f1b8 0300 	subs.w	r3, r8, #0
 801ad90:	d026      	beq.n	801ade0 <__d2b+0x84>
 801ad92:	4668      	mov	r0, sp
 801ad94:	9300      	str	r3, [sp, #0]
 801ad96:	f7ff fd87 	bl	801a8a8 <__lo0bits>
 801ad9a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801ad9e:	b1e8      	cbz	r0, 801addc <__d2b+0x80>
 801ada0:	f1c0 0320 	rsb	r3, r0, #32
 801ada4:	fa02 f303 	lsl.w	r3, r2, r3
 801ada8:	430b      	orrs	r3, r1
 801adaa:	40c2      	lsrs	r2, r0
 801adac:	6163      	str	r3, [r4, #20]
 801adae:	9201      	str	r2, [sp, #4]
 801adb0:	9b01      	ldr	r3, [sp, #4]
 801adb2:	61a3      	str	r3, [r4, #24]
 801adb4:	2b00      	cmp	r3, #0
 801adb6:	bf14      	ite	ne
 801adb8:	2202      	movne	r2, #2
 801adba:	2201      	moveq	r2, #1
 801adbc:	6122      	str	r2, [r4, #16]
 801adbe:	b1bd      	cbz	r5, 801adf0 <__d2b+0x94>
 801adc0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801adc4:	4405      	add	r5, r0
 801adc6:	603d      	str	r5, [r7, #0]
 801adc8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801adcc:	6030      	str	r0, [r6, #0]
 801adce:	4620      	mov	r0, r4
 801add0:	b003      	add	sp, #12
 801add2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801add6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801adda:	e7d6      	b.n	801ad8a <__d2b+0x2e>
 801addc:	6161      	str	r1, [r4, #20]
 801adde:	e7e7      	b.n	801adb0 <__d2b+0x54>
 801ade0:	a801      	add	r0, sp, #4
 801ade2:	f7ff fd61 	bl	801a8a8 <__lo0bits>
 801ade6:	9b01      	ldr	r3, [sp, #4]
 801ade8:	6163      	str	r3, [r4, #20]
 801adea:	3020      	adds	r0, #32
 801adec:	2201      	movs	r2, #1
 801adee:	e7e5      	b.n	801adbc <__d2b+0x60>
 801adf0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801adf4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801adf8:	6038      	str	r0, [r7, #0]
 801adfa:	6918      	ldr	r0, [r3, #16]
 801adfc:	f7ff fd34 	bl	801a868 <__hi0bits>
 801ae00:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801ae04:	e7e2      	b.n	801adcc <__d2b+0x70>
 801ae06:	bf00      	nop
 801ae08:	0801ea3b 	.word	0x0801ea3b
 801ae0c:	0801ea4c 	.word	0x0801ea4c

0801ae10 <__sfputc_r>:
 801ae10:	6893      	ldr	r3, [r2, #8]
 801ae12:	3b01      	subs	r3, #1
 801ae14:	2b00      	cmp	r3, #0
 801ae16:	b410      	push	{r4}
 801ae18:	6093      	str	r3, [r2, #8]
 801ae1a:	da08      	bge.n	801ae2e <__sfputc_r+0x1e>
 801ae1c:	6994      	ldr	r4, [r2, #24]
 801ae1e:	42a3      	cmp	r3, r4
 801ae20:	db01      	blt.n	801ae26 <__sfputc_r+0x16>
 801ae22:	290a      	cmp	r1, #10
 801ae24:	d103      	bne.n	801ae2e <__sfputc_r+0x1e>
 801ae26:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ae2a:	f7fe bc38 	b.w	801969e <__swbuf_r>
 801ae2e:	6813      	ldr	r3, [r2, #0]
 801ae30:	1c58      	adds	r0, r3, #1
 801ae32:	6010      	str	r0, [r2, #0]
 801ae34:	7019      	strb	r1, [r3, #0]
 801ae36:	4608      	mov	r0, r1
 801ae38:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ae3c:	4770      	bx	lr

0801ae3e <__sfputs_r>:
 801ae3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ae40:	4606      	mov	r6, r0
 801ae42:	460f      	mov	r7, r1
 801ae44:	4614      	mov	r4, r2
 801ae46:	18d5      	adds	r5, r2, r3
 801ae48:	42ac      	cmp	r4, r5
 801ae4a:	d101      	bne.n	801ae50 <__sfputs_r+0x12>
 801ae4c:	2000      	movs	r0, #0
 801ae4e:	e007      	b.n	801ae60 <__sfputs_r+0x22>
 801ae50:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ae54:	463a      	mov	r2, r7
 801ae56:	4630      	mov	r0, r6
 801ae58:	f7ff ffda 	bl	801ae10 <__sfputc_r>
 801ae5c:	1c43      	adds	r3, r0, #1
 801ae5e:	d1f3      	bne.n	801ae48 <__sfputs_r+0xa>
 801ae60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801ae64 <_vfiprintf_r>:
 801ae64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae68:	460d      	mov	r5, r1
 801ae6a:	b09d      	sub	sp, #116	; 0x74
 801ae6c:	4614      	mov	r4, r2
 801ae6e:	4698      	mov	r8, r3
 801ae70:	4606      	mov	r6, r0
 801ae72:	b118      	cbz	r0, 801ae7c <_vfiprintf_r+0x18>
 801ae74:	6a03      	ldr	r3, [r0, #32]
 801ae76:	b90b      	cbnz	r3, 801ae7c <_vfiprintf_r+0x18>
 801ae78:	f7fe fb2a 	bl	80194d0 <__sinit>
 801ae7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ae7e:	07d9      	lsls	r1, r3, #31
 801ae80:	d405      	bmi.n	801ae8e <_vfiprintf_r+0x2a>
 801ae82:	89ab      	ldrh	r3, [r5, #12]
 801ae84:	059a      	lsls	r2, r3, #22
 801ae86:	d402      	bmi.n	801ae8e <_vfiprintf_r+0x2a>
 801ae88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ae8a:	f7fe fd23 	bl	80198d4 <__retarget_lock_acquire_recursive>
 801ae8e:	89ab      	ldrh	r3, [r5, #12]
 801ae90:	071b      	lsls	r3, r3, #28
 801ae92:	d501      	bpl.n	801ae98 <_vfiprintf_r+0x34>
 801ae94:	692b      	ldr	r3, [r5, #16]
 801ae96:	b99b      	cbnz	r3, 801aec0 <_vfiprintf_r+0x5c>
 801ae98:	4629      	mov	r1, r5
 801ae9a:	4630      	mov	r0, r6
 801ae9c:	f7fe fc3c 	bl	8019718 <__swsetup_r>
 801aea0:	b170      	cbz	r0, 801aec0 <_vfiprintf_r+0x5c>
 801aea2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801aea4:	07dc      	lsls	r4, r3, #31
 801aea6:	d504      	bpl.n	801aeb2 <_vfiprintf_r+0x4e>
 801aea8:	f04f 30ff 	mov.w	r0, #4294967295
 801aeac:	b01d      	add	sp, #116	; 0x74
 801aeae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aeb2:	89ab      	ldrh	r3, [r5, #12]
 801aeb4:	0598      	lsls	r0, r3, #22
 801aeb6:	d4f7      	bmi.n	801aea8 <_vfiprintf_r+0x44>
 801aeb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801aeba:	f7fe fd0c 	bl	80198d6 <__retarget_lock_release_recursive>
 801aebe:	e7f3      	b.n	801aea8 <_vfiprintf_r+0x44>
 801aec0:	2300      	movs	r3, #0
 801aec2:	9309      	str	r3, [sp, #36]	; 0x24
 801aec4:	2320      	movs	r3, #32
 801aec6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801aeca:	f8cd 800c 	str.w	r8, [sp, #12]
 801aece:	2330      	movs	r3, #48	; 0x30
 801aed0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801b084 <_vfiprintf_r+0x220>
 801aed4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801aed8:	f04f 0901 	mov.w	r9, #1
 801aedc:	4623      	mov	r3, r4
 801aede:	469a      	mov	sl, r3
 801aee0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801aee4:	b10a      	cbz	r2, 801aeea <_vfiprintf_r+0x86>
 801aee6:	2a25      	cmp	r2, #37	; 0x25
 801aee8:	d1f9      	bne.n	801aede <_vfiprintf_r+0x7a>
 801aeea:	ebba 0b04 	subs.w	fp, sl, r4
 801aeee:	d00b      	beq.n	801af08 <_vfiprintf_r+0xa4>
 801aef0:	465b      	mov	r3, fp
 801aef2:	4622      	mov	r2, r4
 801aef4:	4629      	mov	r1, r5
 801aef6:	4630      	mov	r0, r6
 801aef8:	f7ff ffa1 	bl	801ae3e <__sfputs_r>
 801aefc:	3001      	adds	r0, #1
 801aefe:	f000 80a9 	beq.w	801b054 <_vfiprintf_r+0x1f0>
 801af02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801af04:	445a      	add	r2, fp
 801af06:	9209      	str	r2, [sp, #36]	; 0x24
 801af08:	f89a 3000 	ldrb.w	r3, [sl]
 801af0c:	2b00      	cmp	r3, #0
 801af0e:	f000 80a1 	beq.w	801b054 <_vfiprintf_r+0x1f0>
 801af12:	2300      	movs	r3, #0
 801af14:	f04f 32ff 	mov.w	r2, #4294967295
 801af18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801af1c:	f10a 0a01 	add.w	sl, sl, #1
 801af20:	9304      	str	r3, [sp, #16]
 801af22:	9307      	str	r3, [sp, #28]
 801af24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801af28:	931a      	str	r3, [sp, #104]	; 0x68
 801af2a:	4654      	mov	r4, sl
 801af2c:	2205      	movs	r2, #5
 801af2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801af32:	4854      	ldr	r0, [pc, #336]	; (801b084 <_vfiprintf_r+0x220>)
 801af34:	f7e6 fc44 	bl	80017c0 <memchr>
 801af38:	9a04      	ldr	r2, [sp, #16]
 801af3a:	b9d8      	cbnz	r0, 801af74 <_vfiprintf_r+0x110>
 801af3c:	06d1      	lsls	r1, r2, #27
 801af3e:	bf44      	itt	mi
 801af40:	2320      	movmi	r3, #32
 801af42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801af46:	0713      	lsls	r3, r2, #28
 801af48:	bf44      	itt	mi
 801af4a:	232b      	movmi	r3, #43	; 0x2b
 801af4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801af50:	f89a 3000 	ldrb.w	r3, [sl]
 801af54:	2b2a      	cmp	r3, #42	; 0x2a
 801af56:	d015      	beq.n	801af84 <_vfiprintf_r+0x120>
 801af58:	9a07      	ldr	r2, [sp, #28]
 801af5a:	4654      	mov	r4, sl
 801af5c:	2000      	movs	r0, #0
 801af5e:	f04f 0c0a 	mov.w	ip, #10
 801af62:	4621      	mov	r1, r4
 801af64:	f811 3b01 	ldrb.w	r3, [r1], #1
 801af68:	3b30      	subs	r3, #48	; 0x30
 801af6a:	2b09      	cmp	r3, #9
 801af6c:	d94d      	bls.n	801b00a <_vfiprintf_r+0x1a6>
 801af6e:	b1b0      	cbz	r0, 801af9e <_vfiprintf_r+0x13a>
 801af70:	9207      	str	r2, [sp, #28]
 801af72:	e014      	b.n	801af9e <_vfiprintf_r+0x13a>
 801af74:	eba0 0308 	sub.w	r3, r0, r8
 801af78:	fa09 f303 	lsl.w	r3, r9, r3
 801af7c:	4313      	orrs	r3, r2
 801af7e:	9304      	str	r3, [sp, #16]
 801af80:	46a2      	mov	sl, r4
 801af82:	e7d2      	b.n	801af2a <_vfiprintf_r+0xc6>
 801af84:	9b03      	ldr	r3, [sp, #12]
 801af86:	1d19      	adds	r1, r3, #4
 801af88:	681b      	ldr	r3, [r3, #0]
 801af8a:	9103      	str	r1, [sp, #12]
 801af8c:	2b00      	cmp	r3, #0
 801af8e:	bfbb      	ittet	lt
 801af90:	425b      	neglt	r3, r3
 801af92:	f042 0202 	orrlt.w	r2, r2, #2
 801af96:	9307      	strge	r3, [sp, #28]
 801af98:	9307      	strlt	r3, [sp, #28]
 801af9a:	bfb8      	it	lt
 801af9c:	9204      	strlt	r2, [sp, #16]
 801af9e:	7823      	ldrb	r3, [r4, #0]
 801afa0:	2b2e      	cmp	r3, #46	; 0x2e
 801afa2:	d10c      	bne.n	801afbe <_vfiprintf_r+0x15a>
 801afa4:	7863      	ldrb	r3, [r4, #1]
 801afa6:	2b2a      	cmp	r3, #42	; 0x2a
 801afa8:	d134      	bne.n	801b014 <_vfiprintf_r+0x1b0>
 801afaa:	9b03      	ldr	r3, [sp, #12]
 801afac:	1d1a      	adds	r2, r3, #4
 801afae:	681b      	ldr	r3, [r3, #0]
 801afb0:	9203      	str	r2, [sp, #12]
 801afb2:	2b00      	cmp	r3, #0
 801afb4:	bfb8      	it	lt
 801afb6:	f04f 33ff 	movlt.w	r3, #4294967295
 801afba:	3402      	adds	r4, #2
 801afbc:	9305      	str	r3, [sp, #20]
 801afbe:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801b094 <_vfiprintf_r+0x230>
 801afc2:	7821      	ldrb	r1, [r4, #0]
 801afc4:	2203      	movs	r2, #3
 801afc6:	4650      	mov	r0, sl
 801afc8:	f7e6 fbfa 	bl	80017c0 <memchr>
 801afcc:	b138      	cbz	r0, 801afde <_vfiprintf_r+0x17a>
 801afce:	9b04      	ldr	r3, [sp, #16]
 801afd0:	eba0 000a 	sub.w	r0, r0, sl
 801afd4:	2240      	movs	r2, #64	; 0x40
 801afd6:	4082      	lsls	r2, r0
 801afd8:	4313      	orrs	r3, r2
 801afda:	3401      	adds	r4, #1
 801afdc:	9304      	str	r3, [sp, #16]
 801afde:	f814 1b01 	ldrb.w	r1, [r4], #1
 801afe2:	4829      	ldr	r0, [pc, #164]	; (801b088 <_vfiprintf_r+0x224>)
 801afe4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801afe8:	2206      	movs	r2, #6
 801afea:	f7e6 fbe9 	bl	80017c0 <memchr>
 801afee:	2800      	cmp	r0, #0
 801aff0:	d03f      	beq.n	801b072 <_vfiprintf_r+0x20e>
 801aff2:	4b26      	ldr	r3, [pc, #152]	; (801b08c <_vfiprintf_r+0x228>)
 801aff4:	bb1b      	cbnz	r3, 801b03e <_vfiprintf_r+0x1da>
 801aff6:	9b03      	ldr	r3, [sp, #12]
 801aff8:	3307      	adds	r3, #7
 801affa:	f023 0307 	bic.w	r3, r3, #7
 801affe:	3308      	adds	r3, #8
 801b000:	9303      	str	r3, [sp, #12]
 801b002:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b004:	443b      	add	r3, r7
 801b006:	9309      	str	r3, [sp, #36]	; 0x24
 801b008:	e768      	b.n	801aedc <_vfiprintf_r+0x78>
 801b00a:	fb0c 3202 	mla	r2, ip, r2, r3
 801b00e:	460c      	mov	r4, r1
 801b010:	2001      	movs	r0, #1
 801b012:	e7a6      	b.n	801af62 <_vfiprintf_r+0xfe>
 801b014:	2300      	movs	r3, #0
 801b016:	3401      	adds	r4, #1
 801b018:	9305      	str	r3, [sp, #20]
 801b01a:	4619      	mov	r1, r3
 801b01c:	f04f 0c0a 	mov.w	ip, #10
 801b020:	4620      	mov	r0, r4
 801b022:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b026:	3a30      	subs	r2, #48	; 0x30
 801b028:	2a09      	cmp	r2, #9
 801b02a:	d903      	bls.n	801b034 <_vfiprintf_r+0x1d0>
 801b02c:	2b00      	cmp	r3, #0
 801b02e:	d0c6      	beq.n	801afbe <_vfiprintf_r+0x15a>
 801b030:	9105      	str	r1, [sp, #20]
 801b032:	e7c4      	b.n	801afbe <_vfiprintf_r+0x15a>
 801b034:	fb0c 2101 	mla	r1, ip, r1, r2
 801b038:	4604      	mov	r4, r0
 801b03a:	2301      	movs	r3, #1
 801b03c:	e7f0      	b.n	801b020 <_vfiprintf_r+0x1bc>
 801b03e:	ab03      	add	r3, sp, #12
 801b040:	9300      	str	r3, [sp, #0]
 801b042:	462a      	mov	r2, r5
 801b044:	4b12      	ldr	r3, [pc, #72]	; (801b090 <_vfiprintf_r+0x22c>)
 801b046:	a904      	add	r1, sp, #16
 801b048:	4630      	mov	r0, r6
 801b04a:	f7fd fe1d 	bl	8018c88 <_printf_float>
 801b04e:	4607      	mov	r7, r0
 801b050:	1c78      	adds	r0, r7, #1
 801b052:	d1d6      	bne.n	801b002 <_vfiprintf_r+0x19e>
 801b054:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b056:	07d9      	lsls	r1, r3, #31
 801b058:	d405      	bmi.n	801b066 <_vfiprintf_r+0x202>
 801b05a:	89ab      	ldrh	r3, [r5, #12]
 801b05c:	059a      	lsls	r2, r3, #22
 801b05e:	d402      	bmi.n	801b066 <_vfiprintf_r+0x202>
 801b060:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b062:	f7fe fc38 	bl	80198d6 <__retarget_lock_release_recursive>
 801b066:	89ab      	ldrh	r3, [r5, #12]
 801b068:	065b      	lsls	r3, r3, #25
 801b06a:	f53f af1d 	bmi.w	801aea8 <_vfiprintf_r+0x44>
 801b06e:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b070:	e71c      	b.n	801aeac <_vfiprintf_r+0x48>
 801b072:	ab03      	add	r3, sp, #12
 801b074:	9300      	str	r3, [sp, #0]
 801b076:	462a      	mov	r2, r5
 801b078:	4b05      	ldr	r3, [pc, #20]	; (801b090 <_vfiprintf_r+0x22c>)
 801b07a:	a904      	add	r1, sp, #16
 801b07c:	4630      	mov	r0, r6
 801b07e:	f7fe f88b 	bl	8019198 <_printf_i>
 801b082:	e7e4      	b.n	801b04e <_vfiprintf_r+0x1ea>
 801b084:	0801eba4 	.word	0x0801eba4
 801b088:	0801ebae 	.word	0x0801ebae
 801b08c:	08018c89 	.word	0x08018c89
 801b090:	0801ae3f 	.word	0x0801ae3f
 801b094:	0801ebaa 	.word	0x0801ebaa

0801b098 <__sflush_r>:
 801b098:	898a      	ldrh	r2, [r1, #12]
 801b09a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b09e:	4605      	mov	r5, r0
 801b0a0:	0710      	lsls	r0, r2, #28
 801b0a2:	460c      	mov	r4, r1
 801b0a4:	d458      	bmi.n	801b158 <__sflush_r+0xc0>
 801b0a6:	684b      	ldr	r3, [r1, #4]
 801b0a8:	2b00      	cmp	r3, #0
 801b0aa:	dc05      	bgt.n	801b0b8 <__sflush_r+0x20>
 801b0ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801b0ae:	2b00      	cmp	r3, #0
 801b0b0:	dc02      	bgt.n	801b0b8 <__sflush_r+0x20>
 801b0b2:	2000      	movs	r0, #0
 801b0b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b0b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b0ba:	2e00      	cmp	r6, #0
 801b0bc:	d0f9      	beq.n	801b0b2 <__sflush_r+0x1a>
 801b0be:	2300      	movs	r3, #0
 801b0c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801b0c4:	682f      	ldr	r7, [r5, #0]
 801b0c6:	6a21      	ldr	r1, [r4, #32]
 801b0c8:	602b      	str	r3, [r5, #0]
 801b0ca:	d032      	beq.n	801b132 <__sflush_r+0x9a>
 801b0cc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801b0ce:	89a3      	ldrh	r3, [r4, #12]
 801b0d0:	075a      	lsls	r2, r3, #29
 801b0d2:	d505      	bpl.n	801b0e0 <__sflush_r+0x48>
 801b0d4:	6863      	ldr	r3, [r4, #4]
 801b0d6:	1ac0      	subs	r0, r0, r3
 801b0d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b0da:	b10b      	cbz	r3, 801b0e0 <__sflush_r+0x48>
 801b0dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b0de:	1ac0      	subs	r0, r0, r3
 801b0e0:	2300      	movs	r3, #0
 801b0e2:	4602      	mov	r2, r0
 801b0e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b0e6:	6a21      	ldr	r1, [r4, #32]
 801b0e8:	4628      	mov	r0, r5
 801b0ea:	47b0      	blx	r6
 801b0ec:	1c43      	adds	r3, r0, #1
 801b0ee:	89a3      	ldrh	r3, [r4, #12]
 801b0f0:	d106      	bne.n	801b100 <__sflush_r+0x68>
 801b0f2:	6829      	ldr	r1, [r5, #0]
 801b0f4:	291d      	cmp	r1, #29
 801b0f6:	d82b      	bhi.n	801b150 <__sflush_r+0xb8>
 801b0f8:	4a29      	ldr	r2, [pc, #164]	; (801b1a0 <__sflush_r+0x108>)
 801b0fa:	410a      	asrs	r2, r1
 801b0fc:	07d6      	lsls	r6, r2, #31
 801b0fe:	d427      	bmi.n	801b150 <__sflush_r+0xb8>
 801b100:	2200      	movs	r2, #0
 801b102:	6062      	str	r2, [r4, #4]
 801b104:	04d9      	lsls	r1, r3, #19
 801b106:	6922      	ldr	r2, [r4, #16]
 801b108:	6022      	str	r2, [r4, #0]
 801b10a:	d504      	bpl.n	801b116 <__sflush_r+0x7e>
 801b10c:	1c42      	adds	r2, r0, #1
 801b10e:	d101      	bne.n	801b114 <__sflush_r+0x7c>
 801b110:	682b      	ldr	r3, [r5, #0]
 801b112:	b903      	cbnz	r3, 801b116 <__sflush_r+0x7e>
 801b114:	6560      	str	r0, [r4, #84]	; 0x54
 801b116:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b118:	602f      	str	r7, [r5, #0]
 801b11a:	2900      	cmp	r1, #0
 801b11c:	d0c9      	beq.n	801b0b2 <__sflush_r+0x1a>
 801b11e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b122:	4299      	cmp	r1, r3
 801b124:	d002      	beq.n	801b12c <__sflush_r+0x94>
 801b126:	4628      	mov	r0, r5
 801b128:	f7ff f9f6 	bl	801a518 <_free_r>
 801b12c:	2000      	movs	r0, #0
 801b12e:	6360      	str	r0, [r4, #52]	; 0x34
 801b130:	e7c0      	b.n	801b0b4 <__sflush_r+0x1c>
 801b132:	2301      	movs	r3, #1
 801b134:	4628      	mov	r0, r5
 801b136:	47b0      	blx	r6
 801b138:	1c41      	adds	r1, r0, #1
 801b13a:	d1c8      	bne.n	801b0ce <__sflush_r+0x36>
 801b13c:	682b      	ldr	r3, [r5, #0]
 801b13e:	2b00      	cmp	r3, #0
 801b140:	d0c5      	beq.n	801b0ce <__sflush_r+0x36>
 801b142:	2b1d      	cmp	r3, #29
 801b144:	d001      	beq.n	801b14a <__sflush_r+0xb2>
 801b146:	2b16      	cmp	r3, #22
 801b148:	d101      	bne.n	801b14e <__sflush_r+0xb6>
 801b14a:	602f      	str	r7, [r5, #0]
 801b14c:	e7b1      	b.n	801b0b2 <__sflush_r+0x1a>
 801b14e:	89a3      	ldrh	r3, [r4, #12]
 801b150:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b154:	81a3      	strh	r3, [r4, #12]
 801b156:	e7ad      	b.n	801b0b4 <__sflush_r+0x1c>
 801b158:	690f      	ldr	r7, [r1, #16]
 801b15a:	2f00      	cmp	r7, #0
 801b15c:	d0a9      	beq.n	801b0b2 <__sflush_r+0x1a>
 801b15e:	0793      	lsls	r3, r2, #30
 801b160:	680e      	ldr	r6, [r1, #0]
 801b162:	bf08      	it	eq
 801b164:	694b      	ldreq	r3, [r1, #20]
 801b166:	600f      	str	r7, [r1, #0]
 801b168:	bf18      	it	ne
 801b16a:	2300      	movne	r3, #0
 801b16c:	eba6 0807 	sub.w	r8, r6, r7
 801b170:	608b      	str	r3, [r1, #8]
 801b172:	f1b8 0f00 	cmp.w	r8, #0
 801b176:	dd9c      	ble.n	801b0b2 <__sflush_r+0x1a>
 801b178:	6a21      	ldr	r1, [r4, #32]
 801b17a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801b17c:	4643      	mov	r3, r8
 801b17e:	463a      	mov	r2, r7
 801b180:	4628      	mov	r0, r5
 801b182:	47b0      	blx	r6
 801b184:	2800      	cmp	r0, #0
 801b186:	dc06      	bgt.n	801b196 <__sflush_r+0xfe>
 801b188:	89a3      	ldrh	r3, [r4, #12]
 801b18a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b18e:	81a3      	strh	r3, [r4, #12]
 801b190:	f04f 30ff 	mov.w	r0, #4294967295
 801b194:	e78e      	b.n	801b0b4 <__sflush_r+0x1c>
 801b196:	4407      	add	r7, r0
 801b198:	eba8 0800 	sub.w	r8, r8, r0
 801b19c:	e7e9      	b.n	801b172 <__sflush_r+0xda>
 801b19e:	bf00      	nop
 801b1a0:	dfbffffe 	.word	0xdfbffffe

0801b1a4 <_fflush_r>:
 801b1a4:	b538      	push	{r3, r4, r5, lr}
 801b1a6:	690b      	ldr	r3, [r1, #16]
 801b1a8:	4605      	mov	r5, r0
 801b1aa:	460c      	mov	r4, r1
 801b1ac:	b913      	cbnz	r3, 801b1b4 <_fflush_r+0x10>
 801b1ae:	2500      	movs	r5, #0
 801b1b0:	4628      	mov	r0, r5
 801b1b2:	bd38      	pop	{r3, r4, r5, pc}
 801b1b4:	b118      	cbz	r0, 801b1be <_fflush_r+0x1a>
 801b1b6:	6a03      	ldr	r3, [r0, #32]
 801b1b8:	b90b      	cbnz	r3, 801b1be <_fflush_r+0x1a>
 801b1ba:	f7fe f989 	bl	80194d0 <__sinit>
 801b1be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b1c2:	2b00      	cmp	r3, #0
 801b1c4:	d0f3      	beq.n	801b1ae <_fflush_r+0xa>
 801b1c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801b1c8:	07d0      	lsls	r0, r2, #31
 801b1ca:	d404      	bmi.n	801b1d6 <_fflush_r+0x32>
 801b1cc:	0599      	lsls	r1, r3, #22
 801b1ce:	d402      	bmi.n	801b1d6 <_fflush_r+0x32>
 801b1d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b1d2:	f7fe fb7f 	bl	80198d4 <__retarget_lock_acquire_recursive>
 801b1d6:	4628      	mov	r0, r5
 801b1d8:	4621      	mov	r1, r4
 801b1da:	f7ff ff5d 	bl	801b098 <__sflush_r>
 801b1de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b1e0:	07da      	lsls	r2, r3, #31
 801b1e2:	4605      	mov	r5, r0
 801b1e4:	d4e4      	bmi.n	801b1b0 <_fflush_r+0xc>
 801b1e6:	89a3      	ldrh	r3, [r4, #12]
 801b1e8:	059b      	lsls	r3, r3, #22
 801b1ea:	d4e1      	bmi.n	801b1b0 <_fflush_r+0xc>
 801b1ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b1ee:	f7fe fb72 	bl	80198d6 <__retarget_lock_release_recursive>
 801b1f2:	e7dd      	b.n	801b1b0 <_fflush_r+0xc>

0801b1f4 <fiprintf>:
 801b1f4:	b40e      	push	{r1, r2, r3}
 801b1f6:	b503      	push	{r0, r1, lr}
 801b1f8:	4601      	mov	r1, r0
 801b1fa:	ab03      	add	r3, sp, #12
 801b1fc:	4805      	ldr	r0, [pc, #20]	; (801b214 <fiprintf+0x20>)
 801b1fe:	f853 2b04 	ldr.w	r2, [r3], #4
 801b202:	6800      	ldr	r0, [r0, #0]
 801b204:	9301      	str	r3, [sp, #4]
 801b206:	f7ff fe2d 	bl	801ae64 <_vfiprintf_r>
 801b20a:	b002      	add	sp, #8
 801b20c:	f85d eb04 	ldr.w	lr, [sp], #4
 801b210:	b003      	add	sp, #12
 801b212:	4770      	bx	lr
 801b214:	200000bc 	.word	0x200000bc

0801b218 <__swhatbuf_r>:
 801b218:	b570      	push	{r4, r5, r6, lr}
 801b21a:	460c      	mov	r4, r1
 801b21c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b220:	2900      	cmp	r1, #0
 801b222:	b096      	sub	sp, #88	; 0x58
 801b224:	4615      	mov	r5, r2
 801b226:	461e      	mov	r6, r3
 801b228:	da0d      	bge.n	801b246 <__swhatbuf_r+0x2e>
 801b22a:	89a3      	ldrh	r3, [r4, #12]
 801b22c:	f013 0f80 	tst.w	r3, #128	; 0x80
 801b230:	f04f 0100 	mov.w	r1, #0
 801b234:	bf0c      	ite	eq
 801b236:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801b23a:	2340      	movne	r3, #64	; 0x40
 801b23c:	2000      	movs	r0, #0
 801b23e:	6031      	str	r1, [r6, #0]
 801b240:	602b      	str	r3, [r5, #0]
 801b242:	b016      	add	sp, #88	; 0x58
 801b244:	bd70      	pop	{r4, r5, r6, pc}
 801b246:	466a      	mov	r2, sp
 801b248:	f000 f848 	bl	801b2dc <_fstat_r>
 801b24c:	2800      	cmp	r0, #0
 801b24e:	dbec      	blt.n	801b22a <__swhatbuf_r+0x12>
 801b250:	9901      	ldr	r1, [sp, #4]
 801b252:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801b256:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801b25a:	4259      	negs	r1, r3
 801b25c:	4159      	adcs	r1, r3
 801b25e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b262:	e7eb      	b.n	801b23c <__swhatbuf_r+0x24>

0801b264 <__smakebuf_r>:
 801b264:	898b      	ldrh	r3, [r1, #12]
 801b266:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b268:	079d      	lsls	r5, r3, #30
 801b26a:	4606      	mov	r6, r0
 801b26c:	460c      	mov	r4, r1
 801b26e:	d507      	bpl.n	801b280 <__smakebuf_r+0x1c>
 801b270:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801b274:	6023      	str	r3, [r4, #0]
 801b276:	6123      	str	r3, [r4, #16]
 801b278:	2301      	movs	r3, #1
 801b27a:	6163      	str	r3, [r4, #20]
 801b27c:	b002      	add	sp, #8
 801b27e:	bd70      	pop	{r4, r5, r6, pc}
 801b280:	ab01      	add	r3, sp, #4
 801b282:	466a      	mov	r2, sp
 801b284:	f7ff ffc8 	bl	801b218 <__swhatbuf_r>
 801b288:	9900      	ldr	r1, [sp, #0]
 801b28a:	4605      	mov	r5, r0
 801b28c:	4630      	mov	r0, r6
 801b28e:	f7ff f9b7 	bl	801a600 <_malloc_r>
 801b292:	b948      	cbnz	r0, 801b2a8 <__smakebuf_r+0x44>
 801b294:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b298:	059a      	lsls	r2, r3, #22
 801b29a:	d4ef      	bmi.n	801b27c <__smakebuf_r+0x18>
 801b29c:	f023 0303 	bic.w	r3, r3, #3
 801b2a0:	f043 0302 	orr.w	r3, r3, #2
 801b2a4:	81a3      	strh	r3, [r4, #12]
 801b2a6:	e7e3      	b.n	801b270 <__smakebuf_r+0xc>
 801b2a8:	89a3      	ldrh	r3, [r4, #12]
 801b2aa:	6020      	str	r0, [r4, #0]
 801b2ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b2b0:	81a3      	strh	r3, [r4, #12]
 801b2b2:	9b00      	ldr	r3, [sp, #0]
 801b2b4:	6163      	str	r3, [r4, #20]
 801b2b6:	9b01      	ldr	r3, [sp, #4]
 801b2b8:	6120      	str	r0, [r4, #16]
 801b2ba:	b15b      	cbz	r3, 801b2d4 <__smakebuf_r+0x70>
 801b2bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b2c0:	4630      	mov	r0, r6
 801b2c2:	f000 f81d 	bl	801b300 <_isatty_r>
 801b2c6:	b128      	cbz	r0, 801b2d4 <__smakebuf_r+0x70>
 801b2c8:	89a3      	ldrh	r3, [r4, #12]
 801b2ca:	f023 0303 	bic.w	r3, r3, #3
 801b2ce:	f043 0301 	orr.w	r3, r3, #1
 801b2d2:	81a3      	strh	r3, [r4, #12]
 801b2d4:	89a3      	ldrh	r3, [r4, #12]
 801b2d6:	431d      	orrs	r5, r3
 801b2d8:	81a5      	strh	r5, [r4, #12]
 801b2da:	e7cf      	b.n	801b27c <__smakebuf_r+0x18>

0801b2dc <_fstat_r>:
 801b2dc:	b538      	push	{r3, r4, r5, lr}
 801b2de:	4d07      	ldr	r5, [pc, #28]	; (801b2fc <_fstat_r+0x20>)
 801b2e0:	2300      	movs	r3, #0
 801b2e2:	4604      	mov	r4, r0
 801b2e4:	4608      	mov	r0, r1
 801b2e6:	4611      	mov	r1, r2
 801b2e8:	602b      	str	r3, [r5, #0]
 801b2ea:	f7e7 ff62 	bl	80031b2 <_fstat>
 801b2ee:	1c43      	adds	r3, r0, #1
 801b2f0:	d102      	bne.n	801b2f8 <_fstat_r+0x1c>
 801b2f2:	682b      	ldr	r3, [r5, #0]
 801b2f4:	b103      	cbz	r3, 801b2f8 <_fstat_r+0x1c>
 801b2f6:	6023      	str	r3, [r4, #0]
 801b2f8:	bd38      	pop	{r3, r4, r5, pc}
 801b2fa:	bf00      	nop
 801b2fc:	20008360 	.word	0x20008360

0801b300 <_isatty_r>:
 801b300:	b538      	push	{r3, r4, r5, lr}
 801b302:	4d06      	ldr	r5, [pc, #24]	; (801b31c <_isatty_r+0x1c>)
 801b304:	2300      	movs	r3, #0
 801b306:	4604      	mov	r4, r0
 801b308:	4608      	mov	r0, r1
 801b30a:	602b      	str	r3, [r5, #0]
 801b30c:	f7e7 ff61 	bl	80031d2 <_isatty>
 801b310:	1c43      	adds	r3, r0, #1
 801b312:	d102      	bne.n	801b31a <_isatty_r+0x1a>
 801b314:	682b      	ldr	r3, [r5, #0]
 801b316:	b103      	cbz	r3, 801b31a <_isatty_r+0x1a>
 801b318:	6023      	str	r3, [r4, #0]
 801b31a:	bd38      	pop	{r3, r4, r5, pc}
 801b31c:	20008360 	.word	0x20008360

0801b320 <_sbrk_r>:
 801b320:	b538      	push	{r3, r4, r5, lr}
 801b322:	4d06      	ldr	r5, [pc, #24]	; (801b33c <_sbrk_r+0x1c>)
 801b324:	2300      	movs	r3, #0
 801b326:	4604      	mov	r4, r0
 801b328:	4608      	mov	r0, r1
 801b32a:	602b      	str	r3, [r5, #0]
 801b32c:	f7e7 ff6a 	bl	8003204 <_sbrk>
 801b330:	1c43      	adds	r3, r0, #1
 801b332:	d102      	bne.n	801b33a <_sbrk_r+0x1a>
 801b334:	682b      	ldr	r3, [r5, #0]
 801b336:	b103      	cbz	r3, 801b33a <_sbrk_r+0x1a>
 801b338:	6023      	str	r3, [r4, #0]
 801b33a:	bd38      	pop	{r3, r4, r5, pc}
 801b33c:	20008360 	.word	0x20008360

0801b340 <abort>:
 801b340:	b508      	push	{r3, lr}
 801b342:	2006      	movs	r0, #6
 801b344:	f000 f860 	bl	801b408 <raise>
 801b348:	2001      	movs	r0, #1
 801b34a:	f7e7 fee3 	bl	8003114 <_exit>

0801b34e <_calloc_r>:
 801b34e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b350:	fba1 2402 	umull	r2, r4, r1, r2
 801b354:	b94c      	cbnz	r4, 801b36a <_calloc_r+0x1c>
 801b356:	4611      	mov	r1, r2
 801b358:	9201      	str	r2, [sp, #4]
 801b35a:	f7ff f951 	bl	801a600 <_malloc_r>
 801b35e:	9a01      	ldr	r2, [sp, #4]
 801b360:	4605      	mov	r5, r0
 801b362:	b930      	cbnz	r0, 801b372 <_calloc_r+0x24>
 801b364:	4628      	mov	r0, r5
 801b366:	b003      	add	sp, #12
 801b368:	bd30      	pop	{r4, r5, pc}
 801b36a:	220c      	movs	r2, #12
 801b36c:	6002      	str	r2, [r0, #0]
 801b36e:	2500      	movs	r5, #0
 801b370:	e7f8      	b.n	801b364 <_calloc_r+0x16>
 801b372:	4621      	mov	r1, r4
 801b374:	f7fe fa38 	bl	80197e8 <memset>
 801b378:	e7f4      	b.n	801b364 <_calloc_r+0x16>

0801b37a <__ascii_mbtowc>:
 801b37a:	b082      	sub	sp, #8
 801b37c:	b901      	cbnz	r1, 801b380 <__ascii_mbtowc+0x6>
 801b37e:	a901      	add	r1, sp, #4
 801b380:	b142      	cbz	r2, 801b394 <__ascii_mbtowc+0x1a>
 801b382:	b14b      	cbz	r3, 801b398 <__ascii_mbtowc+0x1e>
 801b384:	7813      	ldrb	r3, [r2, #0]
 801b386:	600b      	str	r3, [r1, #0]
 801b388:	7812      	ldrb	r2, [r2, #0]
 801b38a:	1e10      	subs	r0, r2, #0
 801b38c:	bf18      	it	ne
 801b38e:	2001      	movne	r0, #1
 801b390:	b002      	add	sp, #8
 801b392:	4770      	bx	lr
 801b394:	4610      	mov	r0, r2
 801b396:	e7fb      	b.n	801b390 <__ascii_mbtowc+0x16>
 801b398:	f06f 0001 	mvn.w	r0, #1
 801b39c:	e7f8      	b.n	801b390 <__ascii_mbtowc+0x16>

0801b39e <__ascii_wctomb>:
 801b39e:	b149      	cbz	r1, 801b3b4 <__ascii_wctomb+0x16>
 801b3a0:	2aff      	cmp	r2, #255	; 0xff
 801b3a2:	bf85      	ittet	hi
 801b3a4:	238a      	movhi	r3, #138	; 0x8a
 801b3a6:	6003      	strhi	r3, [r0, #0]
 801b3a8:	700a      	strbls	r2, [r1, #0]
 801b3aa:	f04f 30ff 	movhi.w	r0, #4294967295
 801b3ae:	bf98      	it	ls
 801b3b0:	2001      	movls	r0, #1
 801b3b2:	4770      	bx	lr
 801b3b4:	4608      	mov	r0, r1
 801b3b6:	4770      	bx	lr

0801b3b8 <_raise_r>:
 801b3b8:	291f      	cmp	r1, #31
 801b3ba:	b538      	push	{r3, r4, r5, lr}
 801b3bc:	4604      	mov	r4, r0
 801b3be:	460d      	mov	r5, r1
 801b3c0:	d904      	bls.n	801b3cc <_raise_r+0x14>
 801b3c2:	2316      	movs	r3, #22
 801b3c4:	6003      	str	r3, [r0, #0]
 801b3c6:	f04f 30ff 	mov.w	r0, #4294967295
 801b3ca:	bd38      	pop	{r3, r4, r5, pc}
 801b3cc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801b3ce:	b112      	cbz	r2, 801b3d6 <_raise_r+0x1e>
 801b3d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b3d4:	b94b      	cbnz	r3, 801b3ea <_raise_r+0x32>
 801b3d6:	4620      	mov	r0, r4
 801b3d8:	f000 f830 	bl	801b43c <_getpid_r>
 801b3dc:	462a      	mov	r2, r5
 801b3de:	4601      	mov	r1, r0
 801b3e0:	4620      	mov	r0, r4
 801b3e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b3e6:	f000 b817 	b.w	801b418 <_kill_r>
 801b3ea:	2b01      	cmp	r3, #1
 801b3ec:	d00a      	beq.n	801b404 <_raise_r+0x4c>
 801b3ee:	1c59      	adds	r1, r3, #1
 801b3f0:	d103      	bne.n	801b3fa <_raise_r+0x42>
 801b3f2:	2316      	movs	r3, #22
 801b3f4:	6003      	str	r3, [r0, #0]
 801b3f6:	2001      	movs	r0, #1
 801b3f8:	e7e7      	b.n	801b3ca <_raise_r+0x12>
 801b3fa:	2400      	movs	r4, #0
 801b3fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801b400:	4628      	mov	r0, r5
 801b402:	4798      	blx	r3
 801b404:	2000      	movs	r0, #0
 801b406:	e7e0      	b.n	801b3ca <_raise_r+0x12>

0801b408 <raise>:
 801b408:	4b02      	ldr	r3, [pc, #8]	; (801b414 <raise+0xc>)
 801b40a:	4601      	mov	r1, r0
 801b40c:	6818      	ldr	r0, [r3, #0]
 801b40e:	f7ff bfd3 	b.w	801b3b8 <_raise_r>
 801b412:	bf00      	nop
 801b414:	200000bc 	.word	0x200000bc

0801b418 <_kill_r>:
 801b418:	b538      	push	{r3, r4, r5, lr}
 801b41a:	4d07      	ldr	r5, [pc, #28]	; (801b438 <_kill_r+0x20>)
 801b41c:	2300      	movs	r3, #0
 801b41e:	4604      	mov	r4, r0
 801b420:	4608      	mov	r0, r1
 801b422:	4611      	mov	r1, r2
 801b424:	602b      	str	r3, [r5, #0]
 801b426:	f7e7 fe63 	bl	80030f0 <_kill>
 801b42a:	1c43      	adds	r3, r0, #1
 801b42c:	d102      	bne.n	801b434 <_kill_r+0x1c>
 801b42e:	682b      	ldr	r3, [r5, #0]
 801b430:	b103      	cbz	r3, 801b434 <_kill_r+0x1c>
 801b432:	6023      	str	r3, [r4, #0]
 801b434:	bd38      	pop	{r3, r4, r5, pc}
 801b436:	bf00      	nop
 801b438:	20008360 	.word	0x20008360

0801b43c <_getpid_r>:
 801b43c:	f7e7 be50 	b.w	80030e0 <_getpid>

0801b440 <_init>:
 801b440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b442:	bf00      	nop
 801b444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b446:	bc08      	pop	{r3}
 801b448:	469e      	mov	lr, r3
 801b44a:	4770      	bx	lr

0801b44c <_fini>:
 801b44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b44e:	bf00      	nop
 801b450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b452:	bc08      	pop	{r3}
 801b454:	469e      	mov	lr, r3
 801b456:	4770      	bx	lr

0801b458 <__start_POP_calibration_veneer>:
 801b458:	f85f f000 	ldr.w	pc, [pc]	; 801b45c <__start_POP_calibration_veneer+0x4>
 801b45c:	00000c49 	.word	0x00000c49

0801b460 <__calc_fixed_time_MW_sweep_veneer>:
 801b460:	f85f f000 	ldr.w	pc, [pc]	; 801b464 <__calc_fixed_time_MW_sweep_veneer+0x4>
 801b464:	00000809 	.word	0x00000809

0801b468 <__init_synthesiser_veneer>:
 801b468:	f85f f000 	ldr.w	pc, [pc]	; 801b46c <__init_synthesiser_veneer+0x4>
 801b46c:	00000181 	.word	0x00000181

0801b470 <__start_pop_veneer>:
 801b470:	f85f f000 	ldr.w	pc, [pc]	; 801b474 <__start_pop_veneer+0x4>
 801b474:	000013ad 	.word	0x000013ad

0801b478 <__set_MW_power_veneer>:
 801b478:	f85f f000 	ldr.w	pc, [pc]	; 801b47c <__set_MW_power_veneer+0x4>
 801b47c:	00000123 	.word	0x00000123

0801b480 <__MW_update_veneer>:
 801b480:	f85f f000 	ldr.w	pc, [pc]	; 801b484 <__MW_update_veneer+0x4>
 801b484:	00000d59 	.word	0x00000d59

0801b488 <__timer_delay_veneer>:
 801b488:	f85f f000 	ldr.w	pc, [pc]	; 801b48c <__timer_delay_veneer+0x4>
 801b48c:	000012bd 	.word	0x000012bd

0801b490 <__stop_pop_veneer>:
 801b490:	f85f f000 	ldr.w	pc, [pc]	; 801b494 <__stop_pop_veneer+0x4>
 801b494:	00001409 	.word	0x00001409

0801b498 <__start_continuous_MW_sweep_veneer>:
 801b498:	f85f f000 	ldr.w	pc, [pc]	; 801b49c <__start_continuous_MW_sweep_veneer+0x4>
 801b49c:	00000d3d 	.word	0x00000d3d
