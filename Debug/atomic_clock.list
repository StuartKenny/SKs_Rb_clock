
atomic_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .itcm         00001568  00000000  08000298  00020000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001a310  08001800  08001800  00021800  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .user_flash   00000000  08100000  08100000  0004022c  2**0
                  CONTENTS
  4 .rodata       00003848  0801bb10  0801bb10  0003bb10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  0801f358  0801f358  0003f358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .init_array   00000004  0801f360  0801f360  0003f360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f364  0801f364  0003f364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000022c  20000000  0801f368  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000070bc  20000230  0801f594  00040230  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200072ec  0801f594  000472ec  2**0
                  ALLOC
 11 .lwip_sec     00044b83  30000000  30000000  00050000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0004022c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0004025a  2**0
                  CONTENTS, READONLY
 14 .debug_info   000395bd  00000000  00000000  0004029d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007474  00000000  00000000  0007985a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000029a0  00000000  00000000  00080cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002139  00000000  00000000  00083670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00011b85  00000000  00000000  000857a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000407c3  00000000  00000000  0009732e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001a949d  00000000  00000000  000d7af1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000bfc8  00000000  00000000  00280f90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  0028cf58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .itcm:

00000000 <synth_writereg>:
  * @param  Address
  * @param  Chip address
  * @param  Verify
  * @retval Contents read back from register
  */
static uint32_t synth_writereg(const uint32_t data, const uint32_t reg_address, const uint32_t chip_address, const bool verify) {
       0:	b580      	push	{r7, lr}
       2:	b08a      	sub	sp, #40	; 0x28
       4:	af00      	add	r7, sp, #0
       6:	60f8      	str	r0, [r7, #12]
       8:	60b9      	str	r1, [r7, #8]
       a:	607a      	str	r2, [r7, #4]
       c:	70fb      	strb	r3, [r7, #3]

	uint32_t read_data = 0;
       e:	2300      	movs	r3, #0
      10:	627b      	str	r3, [r7, #36]	; 0x24
	const uint32_t write_data = (data << 8) | (reg_address << 3) | chip_address; // This is what we will write, 32 bits in total.
      12:	68fb      	ldr	r3, [r7, #12]
      14:	021a      	lsls	r2, r3, #8
      16:	68bb      	ldr	r3, [r7, #8]
      18:	00db      	lsls	r3, r3, #3
      1a:	4313      	orrs	r3, r2
      1c:	687a      	ldr	r2, [r7, #4]
      1e:	4313      	orrs	r3, r2
      20:	61fb      	str	r3, [r7, #28]
	#ifdef SPI_DEBUG
		printf("SPI BYTES WRITTEN: 0x%X \r\n", write_data);
	#endif //SPI_DEBUG
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
      22:	2200      	movs	r2, #0
      24:	f44f 7180 	mov.w	r1, #256	; 0x100
      28:	4830      	ldr	r0, [pc, #192]	; (ec <synth_writereg+0xec>)
      2a:	f001 fa85 	bl	1538 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 0); // Take SEN low to indicate we are sending data
      2e:	2200      	movs	r2, #0
      30:	f44f 6100 	mov.w	r1, #2048	; 0x800
      34:	482d      	ldr	r0, [pc, #180]	; (ec <synth_writereg+0xec>)
      36:	f001 fa7f 	bl	1538 <__HAL_GPIO_WritePin_veneer>

	/* Clock in the data */
	for (uint32_t i = 0; i < SYNTH_SPI_BITS; i++) {
      3a:	2300      	movs	r3, #0
      3c:	623b      	str	r3, [r7, #32]
      3e:	e036      	b.n	ae <synth_writereg+0xae>

		/* Data written on the rising edge */
		uint32_t bit = (SYNTH_SPI_BITS - 1 - i);
      40:	2220      	movs	r2, #32
      42:	6a3b      	ldr	r3, [r7, #32]
      44:	1ad3      	subs	r3, r2, r3
      46:	3b01      	subs	r3, #1
      48:	617b      	str	r3, [r7, #20]
		HAL_GPIO_WritePin(MOSI_GPIO_Port, MOSI_Pin, !!(write_data & (1 << bit)));
      4a:	2201      	movs	r2, #1
      4c:	697b      	ldr	r3, [r7, #20]
      4e:	fa02 f303 	lsl.w	r3, r2, r3
      52:	461a      	mov	r2, r3
      54:	69fb      	ldr	r3, [r7, #28]
      56:	4013      	ands	r3, r2
      58:	2b00      	cmp	r3, #0
      5a:	bf14      	ite	ne
      5c:	2301      	movne	r3, #1
      5e:	2300      	moveq	r3, #0
      60:	b2db      	uxtb	r3, r3
      62:	461a      	mov	r2, r3
      64:	f44f 7100 	mov.w	r1, #512	; 0x200
      68:	4820      	ldr	r0, [pc, #128]	; (ec <synth_writereg+0xec>)
      6a:	f001 fa65 	bl	1538 <__HAL_GPIO_WritePin_veneer>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 1);
      6e:	2201      	movs	r2, #1
      70:	f44f 7180 	mov.w	r1, #256	; 0x100
      74:	481d      	ldr	r0, [pc, #116]	; (ec <synth_writereg+0xec>)
      76:	f001 fa5f 	bl	1538 <__HAL_GPIO_WritePin_veneer>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
      7a:	2200      	movs	r2, #0
      7c:	f44f 7180 	mov.w	r1, #256	; 0x100
      80:	481a      	ldr	r0, [pc, #104]	; (ec <synth_writereg+0xec>)
      82:	f001 fa59 	bl	1538 <__HAL_GPIO_WritePin_veneer>

		/* Data read on the falling edge */
		read_data = read_data
				| (HAL_GPIO_ReadPin(MISO_GPIO_Port, MISO_Pin)
      86:	f44f 6180 	mov.w	r1, #1024	; 0x400
      8a:	4818      	ldr	r0, [pc, #96]	; (ec <synth_writereg+0xec>)
      8c:	f001 fa44 	bl	1518 <__HAL_GPIO_ReadPin_veneer>
      90:	4603      	mov	r3, r0
      92:	4619      	mov	r1, r3
						<< (SYNTH_SPI_BITS - 1 - i));
      94:	2220      	movs	r2, #32
      96:	6a3b      	ldr	r3, [r7, #32]
      98:	1ad3      	subs	r3, r2, r3
      9a:	3b01      	subs	r3, #1
      9c:	fa01 f303 	lsl.w	r3, r1, r3
      a0:	461a      	mov	r2, r3
		read_data = read_data
      a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
      a4:	4313      	orrs	r3, r2
      a6:	627b      	str	r3, [r7, #36]	; 0x24
	for (uint32_t i = 0; i < SYNTH_SPI_BITS; i++) {
      a8:	6a3b      	ldr	r3, [r7, #32]
      aa:	3301      	adds	r3, #1
      ac:	623b      	str	r3, [r7, #32]
      ae:	2220      	movs	r2, #32
      b0:	6a3b      	ldr	r3, [r7, #32]
      b2:	4293      	cmp	r3, r2
      b4:	d3c4      	bcc.n	40 <synth_writereg+0x40>
	}

	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 1); // Assert the SEN line to register the transmitted data
      b6:	2201      	movs	r2, #1
      b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
      bc:	480b      	ldr	r0, [pc, #44]	; (ec <synth_writereg+0xec>)
      be:	f001 fa3b 	bl	1538 <__HAL_GPIO_WritePin_veneer>

	if (verify) {
      c2:	78fb      	ldrb	r3, [r7, #3]
      c4:	2b00      	cmp	r3, #0
      c6:	d00c      	beq.n	e2 <synth_writereg+0xe2>
		const uint32_t verify_data = synth_readreg(reg_address); // Data returned on the second cycle
      c8:	68b8      	ldr	r0, [r7, #8]
      ca:	f000 f813 	bl	f4 <synth_readreg>
      ce:	61b8      	str	r0, [r7, #24]
		if (verify_data != data) {
      d0:	69ba      	ldr	r2, [r7, #24]
      d2:	68fb      	ldr	r3, [r7, #12]
      d4:	429a      	cmp	r2, r3
      d6:	d004      	beq.n	e2 <synth_writereg+0xe2>
			printf("SPI transmission error!\n");
      d8:	4805      	ldr	r0, [pc, #20]	; (f0 <synth_writereg+0xf0>)
      da:	f001 fa21 	bl	1520 <__puts_veneer>
			Error_Handler(); // We enter an infinite loop here
      de:	f001 fa3f 	bl	1560 <__Error_Handler_veneer>
		}
	}

	return read_data;
      e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
      e4:	4618      	mov	r0, r3
      e6:	3728      	adds	r7, #40	; 0x28
      e8:	46bd      	mov	sp, r7
      ea:	bd80      	pop	{r7, pc}
      ec:	58020800 	.word	0x58020800
      f0:	0801bd70 	.word	0x0801bd70

000000f4 <synth_readreg>:
/**
  * @brief  Reads a register.
  * @param  Address
  * @retval Register contents
  */
static uint32_t synth_readreg(const uint32_t reg_address){
      f4:	b580      	push	{r7, lr}
      f6:	b084      	sub	sp, #16
      f8:	af00      	add	r7, sp, #0
      fa:	6078      	str	r0, [r7, #4]

    synth_writereg(reg_address, 0x0, 0x0, DONT_VERIFY); // First cycle to send the read address
      fc:	2300      	movs	r3, #0
      fe:	2200      	movs	r2, #0
     100:	2100      	movs	r1, #0
     102:	6878      	ldr	r0, [r7, #4]
     104:	f7ff ff7c 	bl	0 <synth_writereg>
    const uint32_t read_data = synth_writereg(reg_address, 0x0, 0x0, DONT_VERIFY);  // Data returned on the second cycle
     108:	2300      	movs	r3, #0
     10a:	2200      	movs	r2, #0
     10c:	2100      	movs	r1, #0
     10e:	6878      	ldr	r0, [r7, #4]
     110:	f7ff ff76 	bl	0 <synth_writereg>
     114:	60f8      	str	r0, [r7, #12]

    return (read_data >> 8); // We only care about the first 24 bits returned.
     116:	68fb      	ldr	r3, [r7, #12]
     118:	0a1b      	lsrs	r3, r3, #8

}
     11a:	4618      	mov	r0, r3
     11c:	3710      	adds	r7, #16
     11e:	46bd      	mov	sp, r7
     120:	bd80      	pop	{r7, pc}

00000122 <set_MW_power>:
/**
  * @brief  Program LO2 output gain.
  * @param  MW power setting
  * @retval Success/fail
  */
uint32_t set_MW_power (const uint8_t mw_power) {
     122:	b580      	push	{r7, lr}
     124:	b084      	sub	sp, #16
     126:	af00      	add	r7, sp, #0
     128:	4603      	mov	r3, r0
     12a:	71fb      	strb	r3, [r7, #7]
	if (mw_power > 3) {//check that LO2GAIN is an integer from 0 to 3 inclusive
     12c:	79fb      	ldrb	r3, [r7, #7]
     12e:	2b03      	cmp	r3, #3
     130:	d904      	bls.n	13c <set_MW_power+0x1a>
		printf("illegal mw_power - must be an integer from 0 to 3!\n");
     132:	4811      	ldr	r0, [pc, #68]	; (178 <set_MW_power+0x56>)
     134:	f001 f9f4 	bl	1520 <__puts_veneer>
		Error_Handler(); // We enter an infinite loop here
     138:	f001 fa12 	bl	1560 <__Error_Handler_veneer>
	}
	uint32_t read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
     13c:	2016      	movs	r0, #22
     13e:	f7ff ffd9 	bl	f4 <synth_readreg>
     142:	60f8      	str	r0, [r7, #12]
	read_data &= 0xFFFFFCFF; 		// Zero bits 8:9.
     144:	68fb      	ldr	r3, [r7, #12]
     146:	f423 7340 	bic.w	r3, r3, #768	; 0x300
     14a:	60fb      	str	r3, [r7, #12]
	read_data |= (mw_power << 8);	// Set LO2GAIN value.
     14c:	79fb      	ldrb	r3, [r7, #7]
     14e:	021b      	lsls	r3, r3, #8
     150:	461a      	mov	r2, r3
     152:	68fb      	ldr	r3, [r7, #12]
     154:	4313      	orrs	r3, r2
     156:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
     158:	2301      	movs	r3, #1
     15a:	2200      	movs	r2, #0
     15c:	2116      	movs	r1, #22
     15e:	68f8      	ldr	r0, [r7, #12]
     160:	f7ff ff4e 	bl	0 <synth_writereg>
	#ifdef MW_VERBOSE
		printf("PROGRAMMED GAIN DIVIDER REGISTER: 0x%lX \r\n", read_data);
	#endif
	printf("LO2 gain setting: %u \r\n", mw_power);
     164:	79fb      	ldrb	r3, [r7, #7]
     166:	4619      	mov	r1, r3
     168:	4804      	ldr	r0, [pc, #16]	; (17c <set_MW_power+0x5a>)
     16a:	f001 f9f5 	bl	1558 <__printf_veneer>
	return SUCCESS;
     16e:	2300      	movs	r3, #0
}
     170:	4618      	mov	r0, r3
     172:	3710      	adds	r7, #16
     174:	46bd      	mov	sp, r7
     176:	bd80      	pop	{r7, pc}
     178:	0801bd88 	.word	0x0801bd88
     17c:	0801bdbc 	.word	0x0801bdbc

00000180 <init_synthesiser>:
/**
  * @brief  Initialises HMC835 synthesiser.
  * @param  MW power setting
  * @retval Success/fail
  */
uint32_t init_synthesiser(const uint8_t mw_power) {
     180:	b580      	push	{r7, lr}
     182:	b084      	sub	sp, #16
     184:	af00      	add	r7, sp, #0
     186:	4603      	mov	r3, r0
     188:	71fb      	strb	r3, [r7, #7]

	//Set pins to required initial conditions
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET); // Turn off the amber lock LED
     18a:	2200      	movs	r2, #0
     18c:	2102      	movs	r1, #2
     18e:	4856      	ldr	r0, [pc, #344]	; (2e8 <_Min_Heap_Size+0xe8>)
     190:	f001 f9d2 	bl	1538 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
     194:	2201      	movs	r2, #1
     196:	2101      	movs	r1, #1
     198:	4854      	ldr	r0, [pc, #336]	; (2ec <_Min_Heap_Size+0xec>)
     19a:	f001 f9cd 	bl	1538 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
     19e:	2200      	movs	r2, #0
     1a0:	f44f 7180 	mov.w	r1, #256	; 0x100
     1a4:	4852      	ldr	r0, [pc, #328]	; (2f0 <_Min_Heap_Size+0xf0>)
     1a6:	f001 f9c7 	bl	1538 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 1);
     1aa:	2201      	movs	r2, #1
     1ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
     1b0:	484f      	ldr	r0, [pc, #316]	; (2f0 <_Min_Heap_Size+0xf0>)
     1b2:	f001 f9c1 	bl	1538 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 1); // Enable the main regulator.
     1b6:	2201      	movs	r2, #1
     1b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
     1bc:	484c      	ldr	r0, [pc, #304]	; (2f0 <_Min_Heap_Size+0xf0>)
     1be:	f001 f9bb 	bl	1538 <__HAL_GPIO_WritePin_veneer>

	HAL_Delay(100); // Wait 100 ms for the supply to stabilise.
     1c2:	2064      	movs	r0, #100	; 0x64
     1c4:	f001 f9a0 	bl	1508 <__HAL_Delay_veneer>

	synth_writereg(0x1UL << 5, OPEN_MODE_READ_ADDRESS, 0x0, DONT_VERIFY); // Soft reset.
     1c8:	2300      	movs	r3, #0
     1ca:	2200      	movs	r2, #0
     1cc:	2100      	movs	r1, #0
     1ce:	2020      	movs	r0, #32
     1d0:	f7ff ff16 	bl	0 <synth_writereg>
	synth_writereg(0x41BFFF, ANALOG_EN_REGISTER, 0x0, VERIFY); // Set the SDO output level to 3.3 Volts
     1d4:	2301      	movs	r3, #1
     1d6:	2200      	movs	r2, #0
     1d8:	2108      	movs	r1, #8
     1da:	4846      	ldr	r0, [pc, #280]	; (2f4 <_Min_Heap_Size+0xf4>)
     1dc:	f7ff ff10 	bl	0 <synth_writereg>

	uint32_t read_data = synth_readreg(ID_REGISTER); // Read the ID register to check the chip is communicating
     1e0:	2000      	movs	r0, #0
     1e2:	f7ff ff87 	bl	f4 <synth_readreg>
     1e6:	60f8      	str	r0, [r7, #12]
	/* Check we have the correct ID */
	if (read_data != SYNTH_ID) {
     1e8:	4a43      	ldr	r2, [pc, #268]	; (2f8 <_Min_Heap_Size+0xf8>)
     1ea:	68fb      	ldr	r3, [r7, #12]
     1ec:	4293      	cmp	r3, r2
     1ee:	d00a      	beq.n	206 <_Min_Heap_Size+0x6>
		HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 0); // Disable the main regulator.
     1f0:	2200      	movs	r2, #0
     1f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
     1f6:	483e      	ldr	r0, [pc, #248]	; (2f0 <_Min_Heap_Size+0xf0>)
     1f8:	f001 f99e 	bl	1538 <__HAL_GPIO_WritePin_veneer>
		printf("Incorrect synthesiser ID!\r\n");
     1fc:	483f      	ldr	r0, [pc, #252]	; (2fc <_Min_Heap_Size+0xfc>)
     1fe:	f001 f98f 	bl	1520 <__puts_veneer>
		return ERROR;
     202:	2301      	movs	r3, #1
     204:	e06b      	b.n	2de <_Min_Heap_Size+0xde>
	}

	/* Everything looks good, we can communicate with the chip :-) */
	printf("HMC835 Detected.\r\n");
     206:	483e      	ldr	r0, [pc, #248]	; (300 <_Min_Heap_Size+0x100>)
     208:	f001 f98a 	bl	1520 <__puts_veneer>

	/* Enables Single-Ended output mode for LO2 output */
	read_data = synth_readreg(MODES_REGISTER); // Get the current value of the modes register
     20c:	2017      	movs	r0, #23
     20e:	f7ff ff71 	bl	f4 <synth_readreg>
     212:	60f8      	str	r0, [r7, #12]
#ifdef MW_VERBOSE
	printf("READ MODES REGISTER: 0x%lX \r\n", read_data);
#endif
	read_data |= (0x1UL << 9);     // Enable single ended output for LO2 (LO2_P)
     214:	68fb      	ldr	r3, [r7, #12]
     216:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     21a:	60fb      	str	r3, [r7, #12]
	read_data  &= ~(!AUTO_MUTE << 7); //can disable auto_mute - see variable declarations
     21c:	2301      	movs	r3, #1
     21e:	f083 0301 	eor.w	r3, r3, #1
     222:	b2db      	uxtb	r3, r3
     224:	01db      	lsls	r3, r3, #7
     226:	43db      	mvns	r3, r3
     228:	461a      	mov	r2, r3
     22a:	68fb      	ldr	r3, [r7, #12]
     22c:	4013      	ands	r3, r2
     22e:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, MODES_REGISTER, 0x0, VERIFY); // Send
     230:	2301      	movs	r3, #1
     232:	2200      	movs	r2, #0
     234:	2117      	movs	r1, #23
     236:	68f8      	ldr	r0, [r7, #12]
     238:	f7ff fee2 	bl	0 <synth_writereg>
	//read_data = synth_readreg(LOCK_DETECT_REGISTER); // Get the current value.
	//read_data &= 0xFFFFFFF8; // Zero the first 3 LSBs.
	//read_data |= 0x07;
	//synth_writereg(read_data, LOCK_DETECT_REGISTER, 0x0, VERIFY); // Update the VCO divide register.

	synth_writereg(1, REFDIV_REGISTER, 0x0, VERIFY); // Reference divider setting.
     23c:	2301      	movs	r3, #1
     23e:	2200      	movs	r2, #0
     240:	2102      	movs	r1, #2
     242:	2001      	movs	r0, #1
     244:	f7ff fedc 	bl	0 <synth_writereg>
	printf("PROGRAMMED DIVIDER REGISTER: 0x01 \r\n");
#endif

	/* Lock detect training: This must be done after any change to the PD
	 * reference frequency or after power cycle. */
	read_data = synth_readreg(LOCK_DETECT_REGISTER); // Get contents of lock detect register
     248:	2007      	movs	r0, #7
     24a:	f7ff ff53 	bl	f4 <synth_readreg>
     24e:	60f8      	str	r0, [r7, #12]
#ifdef MW_VERBOSE
	printf("READ LOCK_DETECT_REGISTER: 0x%lX \r\n", read_data);
#endif
	read_data |= (0x1UL << 11);      // Enable lock-detect counters.
     250:	68fb      	ldr	r3, [r7, #12]
     252:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
     256:	60fb      	str	r3, [r7, #12]
	read_data |= (0x1UL << 14);      // Enable the lock-detect timer.
     258:	68fb      	ldr	r3, [r7, #12]
     25a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     25e:	60fb      	str	r3, [r7, #12]
	read_data |= (0x1UL << 20);      // Train the lock-detect timer.
     260:	68fb      	ldr	r3, [r7, #12]
     262:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     266:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, LOCK_DETECT_REGISTER, 0x0, VERIFY); // Send
     268:	2301      	movs	r3, #1
     26a:	2200      	movs	r2, #0
     26c:	2107      	movs	r1, #7
     26e:	68f8      	ldr	r0, [r7, #12]
     270:	f7ff fec6 	bl	0 <synth_writereg>
#ifdef MW_VERBOSE
	printf("PROGRAMMED LOCK DETECT REGISTER: 0x%lX \r\n", read_data);
#endif
	HAL_Delay(10); // Wait 10 ms for training to complete, not sure if we really need to do this.
     274:	200a      	movs	r0, #10
     276:	f001 f947 	bl	1508 <__HAL_Delay_veneer>

	/* Program LO2 output gain */
	if (mw_power > 3) {//check that LO2GAIN is an integer from 0 to 3 inclusive
     27a:	79fb      	ldrb	r3, [r7, #7]
     27c:	2b03      	cmp	r3, #3
     27e:	d904      	bls.n	28a <_Min_Heap_Size+0x8a>
		printf("illegal mw_power - must be an integer from 0 to 3!\n");
     280:	4820      	ldr	r0, [pc, #128]	; (304 <_Min_Heap_Size+0x104>)
     282:	f001 f94d 	bl	1520 <__puts_veneer>
		Error_Handler();
     286:	f001 f96b 	bl	1560 <__Error_Handler_veneer>
	}
	read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
     28a:	2016      	movs	r0, #22
     28c:	f7ff ff32 	bl	f4 <synth_readreg>
     290:	60f8      	str	r0, [r7, #12]
	read_data &= 0xFFFFFCFF; 		// Zero bits 8:9.
     292:	68fb      	ldr	r3, [r7, #12]
     294:	f423 7340 	bic.w	r3, r3, #768	; 0x300
     298:	60fb      	str	r3, [r7, #12]
	read_data |= (mw_power << 8);	// Set LO2GAIN value.
     29a:	79fb      	ldrb	r3, [r7, #7]
     29c:	021b      	lsls	r3, r3, #8
     29e:	461a      	mov	r2, r3
     2a0:	68fb      	ldr	r3, [r7, #12]
     2a2:	4313      	orrs	r3, r2
     2a4:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
     2a6:	2301      	movs	r3, #1
     2a8:	2200      	movs	r2, #0
     2aa:	2116      	movs	r1, #22
     2ac:	68f8      	ldr	r0, [r7, #12]
     2ae:	f7ff fea7 	bl	0 <synth_writereg>
	printf("PROGRAMMED GAIN DIVIDER REGISTER: 0x%lX \r\n", read_data);
	printf("LO2 gain setting: %u \r\n", mw_power);
#endif

	/* Sets output frequency to the hyperfine value */
	set_frequency_hz(HYPERFINE);
     2b2:	4b15      	ldr	r3, [pc, #84]	; (308 <_Min_Heap_Size+0x108>)
     2b4:	ed93 7b00 	vldr	d7, [r3]
     2b8:	eeb0 0b47 	vmov.f64	d0, d7
     2bc:	f000 f83f 	bl	33e <set_frequency_hz>
	//printf("Single frequency output: %f Hz \r\n", HYPERFINE);
	printf("Single frequency output: %.10g Hz \r\n", HYPERFINE);
     2c0:	4b11      	ldr	r3, [pc, #68]	; (308 <_Min_Heap_Size+0x108>)
     2c2:	e9d3 2300 	ldrd	r2, r3, [r3]
     2c6:	4811      	ldr	r0, [pc, #68]	; (30c <_Min_Heap_Size+0x10c>)
     2c8:	f001 f946 	bl	1558 <__printf_veneer>
//	struct MW_struct *mw_sweep_settings = 0;  //create a structure to store the sweep settings
	mw_sweep_settings.state = MW_FIXED_FREQ;
     2cc:	4b10      	ldr	r3, [pc, #64]	; (310 <_Min_Heap_Size+0x110>)
     2ce:	2201      	movs	r2, #1
     2d0:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); // MW_invalid output low
     2d2:	2200      	movs	r2, #0
     2d4:	2102      	movs	r1, #2
     2d6:	480f      	ldr	r0, [pc, #60]	; (314 <_Min_Heap_Size+0x114>)
     2d8:	f001 f92e 	bl	1538 <__HAL_GPIO_WritePin_veneer>
	return SUCCESS;
     2dc:	2300      	movs	r3, #0
}
     2de:	4618      	mov	r0, r3
     2e0:	3710      	adds	r7, #16
     2e2:	46bd      	mov	sp, r7
     2e4:	bd80      	pop	{r7, pc}
     2e6:	bf00      	nop
     2e8:	58021000 	.word	0x58021000
     2ec:	58021800 	.word	0x58021800
     2f0:	58020800 	.word	0x58020800
     2f4:	0041bfff 	.word	0x0041bfff
     2f8:	00c7701a 	.word	0x00c7701a
     2fc:	0801bdd4 	.word	0x0801bdd4
     300:	0801bdf0 	.word	0x0801bdf0
     304:	0801bd88 	.word	0x0801bd88
     308:	0801ee48 	.word	0x0801ee48
     30c:	0801be04 	.word	0x0801be04
     310:	200005b0 	.word	0x200005b0
     314:	58020400 	.word	0x58020400

00000318 <lock_status>:
/**
  * @brief  Checks for MW frequency lock
  * @param  None
  * @retval Lock status
  */
static const bool lock_status(void) {
     318:	b580      	push	{r7, lr}
     31a:	b082      	sub	sp, #8
     31c:	af00      	add	r7, sp, #0

	bool locked = synth_readreg(GPOLD_REGISTER) & (1UL << 1);
     31e:	2012      	movs	r0, #18
     320:	f7ff fee8 	bl	f4 <synth_readreg>
     324:	4603      	mov	r3, r0
     326:	f003 0302 	and.w	r3, r3, #2
     32a:	2b00      	cmp	r3, #0
     32c:	bf14      	ite	ne
     32e:	2301      	movne	r3, #1
     330:	2300      	moveq	r3, #0
     332:	71fb      	strb	r3, [r7, #7]
	return locked;
     334:	79fb      	ldrb	r3, [r7, #7]

}
     336:	4618      	mov	r0, r3
     338:	3708      	adds	r7, #8
     33a:	46bd      	mov	sp, r7
     33c:	bd80      	pop	{r7, pc}

0000033e <set_frequency_hz>:
/**
  * @brief  Translate a frequency into register values for programming to HMC835
  * @param  Frequency
  * @retval None
  */
void set_frequency_hz(const double fo) {
     33e:	b580      	push	{r7, lr}
     340:	b088      	sub	sp, #32
     342:	af00      	add	r7, sp, #0
     344:	ed87 0b00 	vstr	d0, [r7]

#ifdef OPTIMISED_FOR_3_035GHZ_GENERATION
	/* Code optimisation for Generation of frequencies close to 3.035GHz
	 * k always equals 1
	 */
	uint32_t k = 1;
     348:	2301      	movs	r3, #1
     34a:	61fb      	str	r3, [r7, #28]
		}
	}
#endif //OPTIMISED_FOR_3_035GHZ_GENERATION

	/* Calculate the N division ratio */
	const double N = ((fo * k) / REF_FREQ);
     34c:	69fb      	ldr	r3, [r7, #28]
     34e:	ee07 3a90 	vmov	s15, r3
     352:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     356:	ed97 7b00 	vldr	d7, [r7]
     35a:	ee26 6b07 	vmul.f64	d6, d6, d7
     35e:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 408 <_Min_Stack_Size+0x8>
     362:	ee86 7b05 	vdiv.f64	d7, d6, d5
     366:	ed87 7b04 	vstr	d7, [r7, #16]

	/* Extract the fractional and integer parts */
	const uint32_t NINT = N;
     36a:	ed97 7b04 	vldr	d7, [r7, #16]
     36e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     372:	ee17 3a90 	vmov	r3, s15
     376:	60fb      	str	r3, [r7, #12]
	const uint32_t NFRAC = ((N - NINT) * (1 << 24)) + 0.5;
     378:	68fb      	ldr	r3, [r7, #12]
     37a:	ee07 3a90 	vmov	s15, r3
     37e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     382:	ed97 6b04 	vldr	d6, [r7, #16]
     386:	ee36 7b47 	vsub.f64	d7, d6, d7
     38a:	ed9f 6b21 	vldr	d6, [pc, #132]	; 410 <_Min_Stack_Size+0x10>
     38e:	ee27 7b06 	vmul.f64	d7, d7, d6
     392:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     396:	ee37 7b06 	vadd.f64	d7, d7, d6
     39a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     39e:	ee17 3a90 	vmov	r3, s15
     3a2:	60bb      	str	r3, [r7, #8]
		printf("Failed to establish synthesiser frequency accurately\r\n");
		Error_Handler();
	}
#endif

	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); //Sets MW_invalid pin high
     3a4:	2201      	movs	r2, #1
     3a6:	2102      	movs	r1, #2
     3a8:	481b      	ldr	r0, [pc, #108]	; (418 <_Min_Stack_Size+0x18>)
     3aa:	f001 f8c5 	bl	1538 <__HAL_GPIO_WritePin_veneer>
	//set_frequency(NINT, NFRAC, k, MANUAL_MUTE); //Sets only the necessary Hittite registers
	set_freq_regs(NINT, NFRAC, k); //Sets only the necessary Hittite registers
     3ae:	69fa      	ldr	r2, [r7, #28]
     3b0:	68b9      	ldr	r1, [r7, #8]
     3b2:	68f8      	ldr	r0, [r7, #12]
     3b4:	f000 f838 	bl	428 <set_freq_regs>

	//MW stabilisation delay and check for lock
	timer_delay(MW_TIMER, MW_STABILISE_TIME_US);
     3b8:	4b18      	ldr	r3, [pc, #96]	; (41c <_Min_Stack_Size+0x1c>)
     3ba:	681b      	ldr	r3, [r3, #0]
     3bc:	f241 3288 	movw	r2, #5000	; 0x1388
     3c0:	4611      	mov	r1, r2
     3c2:	4618      	mov	r0, r3
     3c4:	f000 ffbe 	bl	1344 <timer_delay>
	//if (!poll_until_locked(LOCK_WAIT_US)) {
	if (!lock_status()) {
     3c8:	f7ff ffa6 	bl	318 <lock_status>
     3cc:	4603      	mov	r3, r0
     3ce:	f083 0301 	eor.w	r3, r3, #1
     3d2:	b2db      	uxtb	r3, r3
     3d4:	2b00      	cmp	r3, #0
     3d6:	d011      	beq.n	3fc <set_frequency_hz+0xbe>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET); //turn off amber LED
     3d8:	2200      	movs	r2, #0
     3da:	2102      	movs	r1, #2
     3dc:	4810      	ldr	r0, [pc, #64]	; (420 <_Min_Stack_Size+0x20>)
     3de:	f001 f8ab 	bl	1538 <__HAL_GPIO_WritePin_veneer>
		printf("Failed to establish MW Lock within %ld us of setting frequency!\r\n", MW_STABILISE_TIME_US);
     3e2:	f241 3388 	movw	r3, #5000	; 0x1388
     3e6:	4619      	mov	r1, r3
     3e8:	480e      	ldr	r0, [pc, #56]	; (424 <_Min_Stack_Size+0x24>)
     3ea:	f001 f8b5 	bl	1558 <__printf_veneer>
#ifdef HALT_ON_LOSS_OF_LOCK
		Error_Handler();
     3ee:	f001 f8b7 	bl	1560 <__Error_Handler_veneer>
#endif //HALT_ON_LOSS_OF_LOCK
		HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); //Sets MW_invalid pin low
     3f2:	2200      	movs	r2, #0
     3f4:	2102      	movs	r1, #2
     3f6:	4808      	ldr	r0, [pc, #32]	; (418 <_Min_Stack_Size+0x18>)
     3f8:	f001 f89e 	bl	1538 <__HAL_GPIO_WritePin_veneer>
	}

}
     3fc:	bf00      	nop
     3fe:	3720      	adds	r7, #32
     400:	46bd      	mov	sp, r7
     402:	bd80      	pop	{r7, pc}
     404:	f3af 8000 	nop.w
     408:	00000000 	.word	0x00000000
     40c:	4187d784 	.word	0x4187d784
     410:	00000000 	.word	0x00000000
     414:	41700000 	.word	0x41700000
     418:	58020400 	.word	0x58020400
     41c:	2000001c 	.word	0x2000001c
     420:	58021000 	.word	0x58021000
     424:	0801be2c 	.word	0x0801be2c

00000428 <set_freq_regs>:
static void set_freq_regs(const uint32_t integer, const uint32_t fraction, const uint32_t vco_divider) {
     428:	b580      	push	{r7, lr}
     42a:	b086      	sub	sp, #24
     42c:	af00      	add	r7, sp, #0
     42e:	60f8      	str	r0, [r7, #12]
     430:	60b9      	str	r1, [r7, #8]
     432:	607a      	str	r2, [r7, #4]
	uint32_t read_data = 0x0;
     434:	2300      	movs	r3, #0
     436:	617b      	str	r3, [r7, #20]
	if (last_vcodiv == -1 || (last_vcodiv != vco_divider)) {
     438:	4b24      	ldr	r3, [pc, #144]	; (4cc <set_freq_regs+0xa4>)
     43a:	681b      	ldr	r3, [r3, #0]
     43c:	f1b3 3fff 	cmp.w	r3, #4294967295
     440:	d004      	beq.n	44c <set_freq_regs+0x24>
     442:	4b22      	ldr	r3, [pc, #136]	; (4cc <set_freq_regs+0xa4>)
     444:	681b      	ldr	r3, [r3, #0]
     446:	687a      	ldr	r2, [r7, #4]
     448:	429a      	cmp	r2, r3
     44a:	d014      	beq.n	476 <set_freq_regs+0x4e>
		read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
     44c:	2016      	movs	r0, #22
     44e:	f7ff fe51 	bl	f4 <synth_readreg>
     452:	6178      	str	r0, [r7, #20]
		read_data &= 0xFFFFFFC0; // Zero the first 6 LSBs (VCO division value - mute).
     454:	697b      	ldr	r3, [r7, #20]
     456:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
     45a:	617b      	str	r3, [r7, #20]
		read_data |= vco_divider; // This will set k which will un-mute the outputs */
     45c:	697a      	ldr	r2, [r7, #20]
     45e:	687b      	ldr	r3, [r7, #4]
     460:	4313      	orrs	r3, r2
     462:	617b      	str	r3, [r7, #20]
		synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
     464:	2301      	movs	r3, #1
     466:	2200      	movs	r2, #0
     468:	2116      	movs	r1, #22
     46a:	6978      	ldr	r0, [r7, #20]
     46c:	f7ff fdc8 	bl	0 <synth_writereg>
		last_vcodiv = vco_divider;
     470:	4a16      	ldr	r2, [pc, #88]	; (4cc <set_freq_regs+0xa4>)
     472:	687b      	ldr	r3, [r7, #4]
     474:	6013      	str	r3, [r2, #0]
	if (last_integer == -1 || (last_integer != integer)) {
     476:	4b16      	ldr	r3, [pc, #88]	; (4d0 <set_freq_regs+0xa8>)
     478:	681b      	ldr	r3, [r3, #0]
     47a:	f1b3 3fff 	cmp.w	r3, #4294967295
     47e:	d004      	beq.n	48a <set_freq_regs+0x62>
     480:	4b13      	ldr	r3, [pc, #76]	; (4d0 <set_freq_regs+0xa8>)
     482:	681b      	ldr	r3, [r3, #0]
     484:	68fa      	ldr	r2, [r7, #12]
     486:	429a      	cmp	r2, r3
     488:	d008      	beq.n	49c <set_freq_regs+0x74>
		synth_writereg(integer, INTEGER_FREQUENCY_REGISTER, 0x0, VERIFY);   // Integer register.
     48a:	2301      	movs	r3, #1
     48c:	2200      	movs	r2, #0
     48e:	2103      	movs	r1, #3
     490:	68f8      	ldr	r0, [r7, #12]
     492:	f7ff fdb5 	bl	0 <synth_writereg>
		last_integer = integer;
     496:	4a0e      	ldr	r2, [pc, #56]	; (4d0 <set_freq_regs+0xa8>)
     498:	68fb      	ldr	r3, [r7, #12]
     49a:	6013      	str	r3, [r2, #0]
	if (last_fraction == -1 || (last_fraction != fraction)) {
     49c:	4b0d      	ldr	r3, [pc, #52]	; (4d4 <set_freq_regs+0xac>)
     49e:	681b      	ldr	r3, [r3, #0]
     4a0:	f1b3 3fff 	cmp.w	r3, #4294967295
     4a4:	d004      	beq.n	4b0 <set_freq_regs+0x88>
     4a6:	4b0b      	ldr	r3, [pc, #44]	; (4d4 <set_freq_regs+0xac>)
     4a8:	681b      	ldr	r3, [r3, #0]
     4aa:	68ba      	ldr	r2, [r7, #8]
     4ac:	429a      	cmp	r2, r3
     4ae:	d008      	beq.n	4c2 <set_freq_regs+0x9a>
		synth_writereg(fraction, FRACTIONAL_FREQUENCY_REGISTER, 0x0, VERIFY);  // Fractional register.
     4b0:	2301      	movs	r3, #1
     4b2:	2200      	movs	r2, #0
     4b4:	2104      	movs	r1, #4
     4b6:	68b8      	ldr	r0, [r7, #8]
     4b8:	f7ff fda2 	bl	0 <synth_writereg>
		last_fraction = fraction;
     4bc:	4a05      	ldr	r2, [pc, #20]	; (4d4 <set_freq_regs+0xac>)
     4be:	68bb      	ldr	r3, [r7, #8]
     4c0:	6013      	str	r3, [r2, #0]
}
     4c2:	bf00      	nop
     4c4:	3718      	adds	r7, #24
     4c6:	46bd      	mov	sp, r7
     4c8:	bd80      	pop	{r7, pc}
     4ca:	bf00      	nop
     4cc:	20000004 	.word	0x20000004
     4d0:	20000008 	.word	0x20000008
     4d4:	2000000c 	.word	0x2000000c

000004d8 <print_mw_sweep_settings>:
/**
  * @brief  Print out the contents of the mw_sweep_settings structure
  * @param  None
  * @retval None
  */
  static void print_mw_sweep_settings (void) {
     4d8:	b580      	push	{r7, lr}
     4da:	af00      	add	r7, sp, #0
  	// Check that I've populated everything
    printf("state: %u \r\n", mw_sweep_settings.state);
     4dc:	4b34      	ldr	r3, [pc, #208]	; (5b0 <print_mw_sweep_settings+0xd8>)
     4de:	781b      	ldrb	r3, [r3, #0]
     4e0:	4619      	mov	r1, r3
     4e2:	4834      	ldr	r0, [pc, #208]	; (5b4 <print_mw_sweep_settings+0xdc>)
     4e4:	f001 f838 	bl	1558 <__printf_veneer>
  	printf("k: %u \r\n", mw_sweep_settings.k);
     4e8:	4b31      	ldr	r3, [pc, #196]	; (5b0 <print_mw_sweep_settings+0xd8>)
     4ea:	785b      	ldrb	r3, [r3, #1]
     4ec:	4619      	mov	r1, r3
     4ee:	4832      	ldr	r0, [pc, #200]	; (5b8 <print_mw_sweep_settings+0xe0>)
     4f0:	f001 f832 	bl	1558 <__printf_veneer>
  	printf("NINT: %lu \r\n", mw_sweep_settings.NINT);
     4f4:	4b2e      	ldr	r3, [pc, #184]	; (5b0 <print_mw_sweep_settings+0xd8>)
     4f6:	685b      	ldr	r3, [r3, #4]
     4f8:	4619      	mov	r1, r3
     4fa:	4830      	ldr	r0, [pc, #192]	; (5bc <print_mw_sweep_settings+0xe4>)
     4fc:	f001 f82c 	bl	1558 <__printf_veneer>
  	printf("NFRAC_start: %lu \r\n", mw_sweep_settings.NFRAC_start);
     500:	4b2b      	ldr	r3, [pc, #172]	; (5b0 <print_mw_sweep_settings+0xd8>)
     502:	689b      	ldr	r3, [r3, #8]
     504:	4619      	mov	r1, r3
     506:	482e      	ldr	r0, [pc, #184]	; (5c0 <print_mw_sweep_settings+0xe8>)
     508:	f001 f826 	bl	1558 <__printf_veneer>
  	printf("num_steps: %lu \r\n", mw_sweep_settings.num_steps);
     50c:	4b28      	ldr	r3, [pc, #160]	; (5b0 <print_mw_sweep_settings+0xd8>)
     50e:	68db      	ldr	r3, [r3, #12]
     510:	4619      	mov	r1, r3
     512:	482c      	ldr	r0, [pc, #176]	; (5c4 <print_mw_sweep_settings+0xec>)
     514:	f001 f820 	bl	1558 <__printf_veneer>
  	printf("step_size: %lu \r\n", mw_sweep_settings.step_size);
     518:	4b25      	ldr	r3, [pc, #148]	; (5b0 <print_mw_sweep_settings+0xd8>)
     51a:	691b      	ldr	r3, [r3, #16]
     51c:	4619      	mov	r1, r3
     51e:	482a      	ldr	r0, [pc, #168]	; (5c8 <print_mw_sweep_settings+0xf0>)
     520:	f001 f81a 	bl	1558 <__printf_veneer>
  	printf("pop_cycles_per_point: %lu \r\n", mw_sweep_settings.pop_cycles_per_point);
     524:	4b22      	ldr	r3, [pc, #136]	; (5b0 <print_mw_sweep_settings+0xd8>)
     526:	695b      	ldr	r3, [r3, #20]
     528:	4619      	mov	r1, r3
     52a:	4828      	ldr	r0, [pc, #160]	; (5cc <print_mw_sweep_settings+0xf4>)
     52c:	f001 f814 	bl	1558 <__printf_veneer>
  	printf("stabilise_time: %lu us\r\n", mw_sweep_settings.stabilise_time);
     530:	4b1f      	ldr	r3, [pc, #124]	; (5b0 <print_mw_sweep_settings+0xd8>)
     532:	699b      	ldr	r3, [r3, #24]
     534:	4619      	mov	r1, r3
     536:	4826      	ldr	r0, [pc, #152]	; (5d0 <print_mw_sweep_settings+0xf8>)
     538:	f001 f80e 	bl	1558 <__printf_veneer>
  	printf("dwell_time: %lu us\r\n", mw_sweep_settings.dwell_time);
     53c:	4b1c      	ldr	r3, [pc, #112]	; (5b0 <print_mw_sweep_settings+0xd8>)
     53e:	69db      	ldr	r3, [r3, #28]
     540:	4619      	mov	r1, r3
     542:	4824      	ldr	r0, [pc, #144]	; (5d4 <print_mw_sweep_settings+0xfc>)
     544:	f001 f808 	bl	1558 <__printf_veneer>
  	printf("MW_processing_time: %lu us\r\n", mw_sweep_settings.MW_processing_time);
     548:	4b19      	ldr	r3, [pc, #100]	; (5b0 <print_mw_sweep_settings+0xd8>)
     54a:	6a1b      	ldr	r3, [r3, #32]
     54c:	4619      	mov	r1, r3
     54e:	4822      	ldr	r0, [pc, #136]	; (5d8 <print_mw_sweep_settings+0x100>)
     550:	f001 f802 	bl	1558 <__printf_veneer>
  	printf("current_point: %lu\r\n", mw_sweep_settings.current_point);
     554:	4b16      	ldr	r3, [pc, #88]	; (5b0 <print_mw_sweep_settings+0xd8>)
     556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     558:	4619      	mov	r1, r3
     55a:	4820      	ldr	r0, [pc, #128]	; (5dc <print_mw_sweep_settings+0x104>)
     55c:	f000 fffc 	bl	1558 <__printf_veneer>
  	printf("centre_freq: %f Hz\r\n", mw_sweep_settings.centre_freq);
     560:	4b13      	ldr	r3, [pc, #76]	; (5b0 <print_mw_sweep_settings+0xd8>)
     562:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
     566:	481e      	ldr	r0, [pc, #120]	; (5e0 <print_mw_sweep_settings+0x108>)
     568:	f000 fff6 	bl	1558 <__printf_veneer>
  	printf("span: %f Hz\r\n", mw_sweep_settings.span);
     56c:	4b10      	ldr	r3, [pc, #64]	; (5b0 <print_mw_sweep_settings+0xd8>)
     56e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
     572:	481c      	ldr	r0, [pc, #112]	; (5e4 <print_mw_sweep_settings+0x10c>)
     574:	f000 fff0 	bl	1558 <__printf_veneer>
  	printf("sweep_period: %f s\r\n", mw_sweep_settings.sweep_period);
     578:	4b0d      	ldr	r3, [pc, #52]	; (5b0 <print_mw_sweep_settings+0xd8>)
     57a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
     57e:	481a      	ldr	r0, [pc, #104]	; (5e8 <print_mw_sweep_settings+0x110>)
     580:	f000 ffea 	bl	1558 <__printf_veneer>
    printf("sweep_type: %s \r\n", mw_sweep_settings.sweep_type ? "FIXED_TIME" : "FIXED_STEPS");
     584:	4b0a      	ldr	r3, [pc, #40]	; (5b0 <print_mw_sweep_settings+0xd8>)
     586:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
     58a:	2b00      	cmp	r3, #0
     58c:	d001      	beq.n	592 <print_mw_sweep_settings+0xba>
     58e:	4b17      	ldr	r3, [pc, #92]	; (5ec <print_mw_sweep_settings+0x114>)
     590:	e000      	b.n	594 <print_mw_sweep_settings+0xbc>
     592:	4b17      	ldr	r3, [pc, #92]	; (5f0 <print_mw_sweep_settings+0x118>)
     594:	4619      	mov	r1, r3
     596:	4817      	ldr	r0, [pc, #92]	; (5f4 <print_mw_sweep_settings+0x11c>)
     598:	f000 ffde 	bl	1558 <__printf_veneer>
    printf("sweep_mode: %d\r\n", mw_sweep_settings.sweep_mode);
     59c:	4b04      	ldr	r3, [pc, #16]	; (5b0 <print_mw_sweep_settings+0xd8>)
     59e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
     5a2:	4619      	mov	r1, r3
     5a4:	4814      	ldr	r0, [pc, #80]	; (5f8 <print_mw_sweep_settings+0x120>)
     5a6:	f000 ffd7 	bl	1558 <__printf_veneer>
}
     5aa:	bf00      	nop
     5ac:	bd80      	pop	{r7, pc}
     5ae:	bf00      	nop
     5b0:	200005b0 	.word	0x200005b0
     5b4:	0801be70 	.word	0x0801be70
     5b8:	0801be80 	.word	0x0801be80
     5bc:	0801be8c 	.word	0x0801be8c
     5c0:	0801be9c 	.word	0x0801be9c
     5c4:	0801beb0 	.word	0x0801beb0
     5c8:	0801bec4 	.word	0x0801bec4
     5cc:	0801bed8 	.word	0x0801bed8
     5d0:	0801bef8 	.word	0x0801bef8
     5d4:	0801bf14 	.word	0x0801bf14
     5d8:	0801bf2c 	.word	0x0801bf2c
     5dc:	0801bf4c 	.word	0x0801bf4c
     5e0:	0801bf64 	.word	0x0801bf64
     5e4:	0801bf7c 	.word	0x0801bf7c
     5e8:	0801bf8c 	.word	0x0801bf8c
     5ec:	0801bfa4 	.word	0x0801bfa4
     5f0:	0801bfb0 	.word	0x0801bfb0
     5f4:	0801bfbc 	.word	0x0801bfbc
     5f8:	0801bfd0 	.word	0x0801bfd0

000005fc <calc_defined_step_MW_sweep>:
  * @param  POP cycles per point
  * @param  Number of points
  * @param	POP_period in us
  * @retval Success/failure or early termination
  */
bool calc_defined_step_MW_sweep(const double centre_freq, const double span, const uint32_t pop_cycles_per_point, const uint32_t num_points_req) {
     5fc:	b580      	push	{r7, lr}
     5fe:	b094      	sub	sp, #80	; 0x50
     600:	af02      	add	r7, sp, #8
     602:	ed87 0b04 	vstr	d0, [r7, #16]
     606:	ed87 1b02 	vstr	d1, [r7, #8]
     60a:	6078      	str	r0, [r7, #4]
     60c:	6039      	str	r1, [r7, #0]
	printf("MW sweep will have %.10g GHz centre frequency with %.5g Hz span\r\n", centre_freq/1000000000, span);
     60e:	ed97 7b04 	vldr	d7, [r7, #16]
     612:	ed9f 6b8d 	vldr	d6, [pc, #564]	; 848 <calc_defined_step_MW_sweep+0x24c>
     616:	ee87 5b06 	vdiv.f64	d5, d7, d6
     61a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     61e:	e9cd 2300 	strd	r2, r3, [sp]
     622:	ec53 2b15 	vmov	r2, r3, d5
     626:	4892      	ldr	r0, [pc, #584]	; (870 <calc_defined_step_MW_sweep+0x274>)
     628:	f000 ff96 	bl	1558 <__printf_veneer>
	printf("and %ld POP cycles per point\r\n", pop_cycles_per_point);
     62c:	6879      	ldr	r1, [r7, #4]
     62e:	4891      	ldr	r0, [pc, #580]	; (874 <calc_defined_step_MW_sweep+0x278>)
     630:	f000 ff92 	bl	1558 <__printf_veneer>
	mw_sweep_settings.sweep_type = FIXED_STEPS;
     634:	4b90      	ldr	r3, [pc, #576]	; (878 <calc_defined_step_MW_sweep+0x27c>)
     636:	2200      	movs	r2, #0
     638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	mw_sweep_settings.pop_cycles_per_point = pop_cycles_per_point;
     63c:	4a8e      	ldr	r2, [pc, #568]	; (878 <calc_defined_step_MW_sweep+0x27c>)
     63e:	687b      	ldr	r3, [r7, #4]
     640:	6153      	str	r3, [r2, #20]
	mw_sweep_settings.centre_freq = centre_freq;
     642:	498d      	ldr	r1, [pc, #564]	; (878 <calc_defined_step_MW_sweep+0x27c>)
     644:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
     648:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	mw_sweep_settings.span = span;
     64c:	498a      	ldr	r1, [pc, #552]	; (878 <calc_defined_step_MW_sweep+0x27c>)
     64e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     652:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	/* Calculate start frequency */
	double start_freq = centre_freq - 0.5* span;
     656:	ed97 7b02 	vldr	d7, [r7, #8]
     65a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     65e:	ee27 7b06 	vmul.f64	d7, d7, d6
     662:	ed97 6b04 	vldr	d6, [r7, #16]
     666:	ee36 7b47 	vsub.f64	d7, d6, d7
     66a:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
	mw_sweep_settings.k = calculate_k(start_freq);
     66e:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
     672:	f000 fb1f 	bl	cb4 <calculate_k>
     676:	4603      	mov	r3, r0
     678:	b2da      	uxtb	r2, r3
     67a:	4b7f      	ldr	r3, [pc, #508]	; (878 <calc_defined_step_MW_sweep+0x27c>)
     67c:	705a      	strb	r2, [r3, #1]

	/* Extrapolate step size requested versus achievable  */
	const double step_size_Hz = span / (num_points_req - 1);
     67e:	683b      	ldr	r3, [r7, #0]
     680:	3b01      	subs	r3, #1
     682:	ee07 3a90 	vmov	s15, r3
     686:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     68a:	ed97 5b02 	vldr	d5, [r7, #8]
     68e:	ee85 7b06 	vdiv.f64	d7, d5, d6
     692:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
	printf("Requested %ld steps, therefore step size of %.3g Hz\r\n", num_points_req, step_size_Hz);
     696:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
     69a:	6839      	ldr	r1, [r7, #0]
     69c:	4877      	ldr	r0, [pc, #476]	; (87c <calc_defined_step_MW_sweep+0x280>)
     69e:	f000 ff5b 	bl	1558 <__printf_veneer>
	const double unit_step_size_Hz = REF_FREQ / (double) (mw_sweep_settings.k * (1 << 24)); //minimum step size possible
     6a2:	ed9f 5b6b 	vldr	d5, [pc, #428]	; 850 <calc_defined_step_MW_sweep+0x254>
     6a6:	4b74      	ldr	r3, [pc, #464]	; (878 <calc_defined_step_MW_sweep+0x27c>)
     6a8:	785b      	ldrb	r3, [r3, #1]
     6aa:	061b      	lsls	r3, r3, #24
     6ac:	ee07 3a90 	vmov	s15, r3
     6b0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
     6b4:	ee85 7b06 	vdiv.f64	d7, d5, d6
     6b8:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
	//printf("Unit step size: %.3g Hz\r\n", unit_step_size_Hz);
	mw_sweep_settings.step_size = (step_size_Hz / unit_step_size_Hz + 0.5);
     6bc:	ed97 5b0e 	vldr	d5, [r7, #56]	; 0x38
     6c0:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     6c4:	ee85 7b06 	vdiv.f64	d7, d5, d6
     6c8:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     6cc:	ee37 7b06 	vadd.f64	d7, d7, d6
     6d0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     6d4:	ee17 2a90 	vmov	r2, s15
     6d8:	4b67      	ldr	r3, [pc, #412]	; (878 <calc_defined_step_MW_sweep+0x27c>)
     6da:	611a      	str	r2, [r3, #16]
	if (!mw_sweep_settings.step_size) { //step_size must be a positive non-zero integer
     6dc:	4b66      	ldr	r3, [pc, #408]	; (878 <calc_defined_step_MW_sweep+0x27c>)
     6de:	691b      	ldr	r3, [r3, #16]
     6e0:	2b00      	cmp	r3, #0
     6e2:	d104      	bne.n	6ee <calc_defined_step_MW_sweep+0xf2>
		mw_sweep_settings.step_size++;
     6e4:	4b64      	ldr	r3, [pc, #400]	; (878 <calc_defined_step_MW_sweep+0x27c>)
     6e6:	691b      	ldr	r3, [r3, #16]
     6e8:	3301      	adds	r3, #1
     6ea:	4a63      	ldr	r2, [pc, #396]	; (878 <calc_defined_step_MW_sweep+0x27c>)
     6ec:	6113      	str	r3, [r2, #16]
	}
	const double achieved_step_size = (double) (mw_sweep_settings.step_size * unit_step_size_Hz);
     6ee:	4b62      	ldr	r3, [pc, #392]	; (878 <calc_defined_step_MW_sweep+0x27c>)
     6f0:	691b      	ldr	r3, [r3, #16]
     6f2:	ee07 3a90 	vmov	s15, r3
     6f6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     6fa:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     6fe:	ee26 7b07 	vmul.f64	d7, d6, d7
     702:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	printf("Step size achieved: %.3g Hz\r\n", achieved_step_size);
     706:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
     70a:	485d      	ldr	r0, [pc, #372]	; (880 <calc_defined_step_MW_sweep+0x284>)
     70c:	f000 ff24 	bl	1558 <__printf_veneer>
	mw_sweep_settings.num_steps = span / achieved_step_size;
     710:	ed97 5b02 	vldr	d5, [r7, #8]
     714:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
     718:	ee85 7b06 	vdiv.f64	d7, d5, d6
     71c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     720:	ee17 2a90 	vmov	r2, s15
     724:	4b54      	ldr	r3, [pc, #336]	; (878 <calc_defined_step_MW_sweep+0x27c>)
     726:	60da      	str	r2, [r3, #12]

	/* Can avoid spurs if frequency requested can be encoded exactly  */
	start_freq = ((long)(start_freq/unit_step_size_Hz)) * unit_step_size_Hz;
     728:	ed97 5b10 	vldr	d5, [r7, #64]	; 0x40
     72c:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     730:	ee85 7b06 	vdiv.f64	d7, d5, d6
     734:	eefd 7bc7 	vcvt.s32.f64	s15, d7
     738:	eeb8 7be7 	vcvt.f64.s32	d7, s15
     73c:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     740:	ee26 7b07 	vmul.f64	d7, d6, d7
     744:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40

	/* Calculate the N division ratio, extracting the fractional and integer parts */
	const double N = ((start_freq * mw_sweep_settings.k) / REF_FREQ);
     748:	4b4b      	ldr	r3, [pc, #300]	; (878 <calc_defined_step_MW_sweep+0x27c>)
     74a:	785b      	ldrb	r3, [r3, #1]
     74c:	ee07 3a90 	vmov	s15, r3
     750:	eeb8 6be7 	vcvt.f64.s32	d6, s15
     754:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
     758:	ee26 6b07 	vmul.f64	d6, d6, d7
     75c:	ed9f 5b3c 	vldr	d5, [pc, #240]	; 850 <calc_defined_step_MW_sweep+0x254>
     760:	ee86 7b05 	vdiv.f64	d7, d6, d5
     764:	ed87 7b08 	vstr	d7, [r7, #32]
	mw_sweep_settings.NINT = N;
     768:	ed97 7b08 	vldr	d7, [r7, #32]
     76c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     770:	ee17 2a90 	vmov	r2, s15
     774:	4b40      	ldr	r3, [pc, #256]	; (878 <calc_defined_step_MW_sweep+0x27c>)
     776:	605a      	str	r2, [r3, #4]
	mw_sweep_settings.NFRAC_start = ((N - mw_sweep_settings.NINT) * (1 << 24)) + 0.5;
     778:	4b3f      	ldr	r3, [pc, #252]	; (878 <calc_defined_step_MW_sweep+0x27c>)
     77a:	685b      	ldr	r3, [r3, #4]
     77c:	ee07 3a90 	vmov	s15, r3
     780:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     784:	ed97 6b08 	vldr	d6, [r7, #32]
     788:	ee36 7b47 	vsub.f64	d7, d6, d7
     78c:	ed9f 6b32 	vldr	d6, [pc, #200]	; 858 <calc_defined_step_MW_sweep+0x25c>
     790:	ee27 7b06 	vmul.f64	d7, d7, d6
     794:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     798:	ee37 7b06 	vadd.f64	d7, d7, d6
     79c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     7a0:	ee17 2a90 	vmov	r2, s15
     7a4:	4b34      	ldr	r3, [pc, #208]	; (878 <calc_defined_step_MW_sweep+0x27c>)
     7a6:	609a      	str	r2, [r3, #8]

	/* Calculate dwell time at each MW frequency */
	mw_sweep_settings.stabilise_time = MW_STABILISE_TIME_US; //Global MW stabilisation time
     7a8:	f241 3288 	movw	r2, #5000	; 0x1388
     7ac:	4b32      	ldr	r3, [pc, #200]	; (878 <calc_defined_step_MW_sweep+0x27c>)
     7ae:	619a      	str	r2, [r3, #24]
	mw_sweep_settings.dwell_time = pop_cycles_per_point * POP_period_us + TIMING_MARGIN_US;
     7b0:	4b34      	ldr	r3, [pc, #208]	; (884 <calc_defined_step_MW_sweep+0x288>)
     7b2:	681b      	ldr	r3, [r3, #0]
     7b4:	687a      	ldr	r2, [r7, #4]
     7b6:	fb02 f303 	mul.w	r3, r2, r3
     7ba:	2264      	movs	r2, #100	; 0x64
     7bc:	4413      	add	r3, r2
     7be:	4a2e      	ldr	r2, [pc, #184]	; (878 <calc_defined_step_MW_sweep+0x27c>)
     7c0:	61d3      	str	r3, [r2, #28]

	/* Calculate the period of a sweep */
	const double calc_sweep_time = (double)(MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US + mw_sweep_settings.dwell_time) * (double)(mw_sweep_settings.num_steps+1)/1000000;
     7c2:	f241 3288 	movw	r2, #5000	; 0x1388
     7c6:	2301      	movs	r3, #1
     7c8:	441a      	add	r2, r3
     7ca:	4b2b      	ldr	r3, [pc, #172]	; (878 <calc_defined_step_MW_sweep+0x27c>)
     7cc:	69db      	ldr	r3, [r3, #28]
     7ce:	4413      	add	r3, r2
     7d0:	ee07 3a90 	vmov	s15, r3
     7d4:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     7d8:	4b27      	ldr	r3, [pc, #156]	; (878 <calc_defined_step_MW_sweep+0x27c>)
     7da:	68db      	ldr	r3, [r3, #12]
     7dc:	3301      	adds	r3, #1
     7de:	ee07 3a90 	vmov	s15, r3
     7e2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     7e6:	ee26 6b07 	vmul.f64	d6, d6, d7
     7ea:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 860 <calc_defined_step_MW_sweep+0x264>
     7ee:	ee86 7b05 	vdiv.f64	d7, d6, d5
     7f2:	ed87 7b06 	vstr	d7, [r7, #24]
	printf("Sweep period: %.3g s\r\n", calc_sweep_time);
     7f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
     7fa:	4823      	ldr	r0, [pc, #140]	; (888 <calc_defined_step_MW_sweep+0x28c>)
     7fc:	f000 feac 	bl	1558 <__printf_veneer>
	printf("%ld points, %.3g ms each\r\n", mw_sweep_settings.num_steps, 1000 * calc_sweep_time / (mw_sweep_settings.num_steps + 1));
     800:	4b1d      	ldr	r3, [pc, #116]	; (878 <calc_defined_step_MW_sweep+0x27c>)
     802:	68d9      	ldr	r1, [r3, #12]
     804:	ed97 7b06 	vldr	d7, [r7, #24]
     808:	ed9f 6b17 	vldr	d6, [pc, #92]	; 868 <calc_defined_step_MW_sweep+0x26c>
     80c:	ee27 6b06 	vmul.f64	d6, d7, d6
     810:	4b19      	ldr	r3, [pc, #100]	; (878 <calc_defined_step_MW_sweep+0x27c>)
     812:	68db      	ldr	r3, [r3, #12]
     814:	3301      	adds	r3, #1
     816:	ee07 3a90 	vmov	s15, r3
     81a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     81e:	ee86 5b07 	vdiv.f64	d5, d6, d7
     822:	ec53 2b15 	vmov	r2, r3, d5
     826:	4819      	ldr	r0, [pc, #100]	; (88c <calc_defined_step_MW_sweep+0x290>)
     828:	f000 fe96 	bl	1558 <__printf_veneer>

	mw_sweep_settings.current_point = 0;
     82c:	4b12      	ldr	r3, [pc, #72]	; (878 <calc_defined_step_MW_sweep+0x27c>)
     82e:	2200      	movs	r2, #0
     830:	625a      	str	r2, [r3, #36]	; 0x24
	mw_sweep_settings.sweep_period = calc_sweep_time;
     832:	4911      	ldr	r1, [pc, #68]	; (878 <calc_defined_step_MW_sweep+0x27c>)
     834:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
     838:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	//print_mw_sweep_settings();
	return(true);
     83c:	2301      	movs	r3, #1
}
     83e:	4618      	mov	r0, r3
     840:	3748      	adds	r7, #72	; 0x48
     842:	46bd      	mov	sp, r7
     844:	bd80      	pop	{r7, pc}
     846:	bf00      	nop
     848:	00000000 	.word	0x00000000
     84c:	41cdcd65 	.word	0x41cdcd65
     850:	00000000 	.word	0x00000000
     854:	4187d784 	.word	0x4187d784
     858:	00000000 	.word	0x00000000
     85c:	41700000 	.word	0x41700000
     860:	00000000 	.word	0x00000000
     864:	412e8480 	.word	0x412e8480
     868:	00000000 	.word	0x00000000
     86c:	408f4000 	.word	0x408f4000
     870:	0801bfe4 	.word	0x0801bfe4
     874:	0801c028 	.word	0x0801c028
     878:	200005b0 	.word	0x200005b0
     87c:	0801c048 	.word	0x0801c048
     880:	0801c080 	.word	0x0801c080
     884:	200005a0 	.word	0x200005a0
     888:	0801c0a0 	.word	0x0801c0a0
     88c:	0801c0b8 	.word	0x0801c0b8

00000890 <calc_fixed_time_MW_sweep>:
  * @param  Span in Hz
  * @param  Sweep period in s
  * @param  Additional time for scope sync
  * @retval Success/failure or early termination
  */
bool calc_fixed_time_MW_sweep(const double centre_freq, const double span, const double requested_sweep_period, const bool scope_sync_time) {
     890:	b580      	push	{r7, lr}
     892:	b09e      	sub	sp, #120	; 0x78
     894:	af04      	add	r7, sp, #16
     896:	ed87 0b06 	vstr	d0, [r7, #24]
     89a:	ed87 1b04 	vstr	d1, [r7, #16]
     89e:	ed87 2b02 	vstr	d2, [r7, #8]
     8a2:	4603      	mov	r3, r0
     8a4:	71fb      	strb	r3, [r7, #7]
	//Dwell time must be a minimum of one POP cycle
	//Overall dwell time should be at least 50% of sweep time
	//Number of points shall be maximised within the available time

	printf("MW sweep will have %.10g GHz centre frequency with %.5g Hz span, over %.3g s\r\n", centre_freq/1000000000, span, requested_sweep_period);
     8a6:	ed97 7b06 	vldr	d7, [r7, #24]
     8aa:	ed9f 6b97 	vldr	d6, [pc, #604]	; b08 <calc_fixed_time_MW_sweep+0x278>
     8ae:	ee87 5b06 	vdiv.f64	d5, d7, d6
     8b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     8b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
     8ba:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
     8be:	e9cd 2300 	strd	r2, r3, [sp]
     8c2:	ec53 2b15 	vmov	r2, r3, d5
     8c6:	4898      	ldr	r0, [pc, #608]	; (b28 <calc_fixed_time_MW_sweep+0x298>)
     8c8:	f000 fe46 	bl	1558 <__printf_veneer>
	mw_sweep_settings.sweep_type = FIXED_TIME;
     8cc:	4b97      	ldr	r3, [pc, #604]	; (b2c <calc_fixed_time_MW_sweep+0x29c>)
     8ce:	2201      	movs	r2, #1
     8d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	mw_sweep_settings.centre_freq = centre_freq;
     8d4:	4995      	ldr	r1, [pc, #596]	; (b2c <calc_fixed_time_MW_sweep+0x29c>)
     8d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
     8da:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	mw_sweep_settings.span = span;
     8de:	4993      	ldr	r1, [pc, #588]	; (b2c <calc_fixed_time_MW_sweep+0x29c>)
     8e0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
     8e4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	mw_sweep_settings.dwell_time = POP_period_us + TIMING_MARGIN_US; //minimum possible value of dwell_time in us
     8e8:	4b91      	ldr	r3, [pc, #580]	; (b30 <calc_fixed_time_MW_sweep+0x2a0>)
     8ea:	681b      	ldr	r3, [r3, #0]
     8ec:	2264      	movs	r2, #100	; 0x64
     8ee:	4413      	add	r3, r2
     8f0:	4a8e      	ldr	r2, [pc, #568]	; (b2c <calc_fixed_time_MW_sweep+0x29c>)
     8f2:	61d3      	str	r3, [r2, #28]
	uint32_t point_time = MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US + mw_sweep_settings.dwell_time; //minimum possible value in us
     8f4:	f241 3288 	movw	r2, #5000	; 0x1388
     8f8:	2301      	movs	r3, #1
     8fa:	441a      	add	r2, r3
     8fc:	4b8b      	ldr	r3, [pc, #556]	; (b2c <calc_fixed_time_MW_sweep+0x29c>)
     8fe:	69db      	ldr	r3, [r3, #28]
     900:	4413      	add	r3, r2
     902:	65fb      	str	r3, [r7, #92]	; 0x5c
	uint32_t points_in_sweep = requested_sweep_period * (double)(1000000 / point_time); //maximum possible number of steps in sweep, rounded down to an integer
     904:	4a8b      	ldr	r2, [pc, #556]	; (b34 <calc_fixed_time_MW_sweep+0x2a4>)
     906:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
     908:	fbb2 f3f3 	udiv	r3, r2, r3
     90c:	ee07 3a90 	vmov	s15, r3
     910:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     914:	ed97 7b02 	vldr	d7, [r7, #8]
     918:	ee26 7b07 	vmul.f64	d7, d6, d7
     91c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     920:	ee17 3a90 	vmov	r3, s15
     924:	65bb      	str	r3, [r7, #88]	; 0x58
	//printf("%lu points in sweep, maximum\r\n", points_in_sweep);

	/* now figure out the unit_step_size and how many steps will be taken in the span */

	/* Calculate start frequency */
	double start_freq = centre_freq - 0.5* span;
     926:	ed97 7b04 	vldr	d7, [r7, #16]
     92a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     92e:	ee27 7b06 	vmul.f64	d7, d7, d6
     932:	ed97 6b06 	vldr	d6, [r7, #24]
     936:	ee36 7b47 	vsub.f64	d7, d6, d7
     93a:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
	mw_sweep_settings.k = calculate_k(start_freq);
     93e:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
     942:	f000 f9b7 	bl	cb4 <calculate_k>
     946:	4603      	mov	r3, r0
     948:	b2da      	uxtb	r2, r3
     94a:	4b78      	ldr	r3, [pc, #480]	; (b2c <calc_fixed_time_MW_sweep+0x29c>)
     94c:	705a      	strb	r2, [r3, #1]

	//steps should be evenly sized
	//selected step size should be an integer multiple of the unit step size
	//increase the step_size value until the sweep fits into the available period
	const double unit_step_size_Hz = REF_FREQ / (double) (mw_sweep_settings.k * (1 << 24)); //minimum step size possible
     94e:	ed9f 5b70 	vldr	d5, [pc, #448]	; b10 <calc_fixed_time_MW_sweep+0x280>
     952:	4b76      	ldr	r3, [pc, #472]	; (b2c <calc_fixed_time_MW_sweep+0x29c>)
     954:	785b      	ldrb	r3, [r3, #1]
     956:	061b      	lsls	r3, r3, #24
     958:	ee07 3a90 	vmov	s15, r3
     95c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
     960:	ee85 7b06 	vdiv.f64	d7, d5, d6
     964:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
	//printf("Unit step size: %.3g Hz\r\n", unit_step_size_Hz);
	mw_sweep_settings.step_size = 1;
     968:	4b70      	ldr	r3, [pc, #448]	; (b2c <calc_fixed_time_MW_sweep+0x29c>)
     96a:	2201      	movs	r2, #1
     96c:	611a      	str	r2, [r3, #16]
	while ((mw_sweep_settings.step_size * points_in_sweep) < (span / unit_step_size_Hz)) {
     96e:	e004      	b.n	97a <calc_fixed_time_MW_sweep+0xea>
		mw_sweep_settings.step_size++;
     970:	4b6e      	ldr	r3, [pc, #440]	; (b2c <calc_fixed_time_MW_sweep+0x29c>)
     972:	691b      	ldr	r3, [r3, #16]
     974:	3301      	adds	r3, #1
     976:	4a6d      	ldr	r2, [pc, #436]	; (b2c <calc_fixed_time_MW_sweep+0x29c>)
     978:	6113      	str	r3, [r2, #16]
	while ((mw_sweep_settings.step_size * points_in_sweep) < (span / unit_step_size_Hz)) {
     97a:	4b6c      	ldr	r3, [pc, #432]	; (b2c <calc_fixed_time_MW_sweep+0x29c>)
     97c:	691b      	ldr	r3, [r3, #16]
     97e:	6dba      	ldr	r2, [r7, #88]	; 0x58
     980:	fb02 f303 	mul.w	r3, r2, r3
     984:	ee07 3a90 	vmov	s15, r3
     988:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     98c:	ed97 4b04 	vldr	d4, [r7, #16]
     990:	ed97 5b12 	vldr	d5, [r7, #72]	; 0x48
     994:	ee84 7b05 	vdiv.f64	d7, d4, d5
     998:	eeb4 6bc7 	vcmpe.f64	d6, d7
     99c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     9a0:	d4e6      	bmi.n	970 <calc_fixed_time_MW_sweep+0xe0>
	}
	const double achieved_step_size = (double) (mw_sweep_settings.step_size * unit_step_size_Hz);
     9a2:	4b62      	ldr	r3, [pc, #392]	; (b2c <calc_fixed_time_MW_sweep+0x29c>)
     9a4:	691b      	ldr	r3, [r3, #16]
     9a6:	ee07 3a90 	vmov	s15, r3
     9aa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     9ae:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
     9b2:	ee26 7b07 	vmul.f64	d7, d6, d7
     9b6:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
	printf("Step size: %lu x unit step i.e. %.3g Hz\r\n", mw_sweep_settings.step_size, achieved_step_size);
     9ba:	4b5c      	ldr	r3, [pc, #368]	; (b2c <calc_fixed_time_MW_sweep+0x29c>)
     9bc:	6919      	ldr	r1, [r3, #16]
     9be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
     9c2:	485d      	ldr	r0, [pc, #372]	; (b38 <calc_fixed_time_MW_sweep+0x2a8>)
     9c4:	f000 fdc8 	bl	1558 <__printf_veneer>

	//calculate number of steps in sweep and round down to an integer (must fit in time available)
	mw_sweep_settings.num_steps = (span / achieved_step_size);
     9c8:	ed97 5b04 	vldr	d5, [r7, #16]
     9cc:	ed97 6b10 	vldr	d6, [r7, #64]	; 0x40
     9d0:	ee85 7b06 	vdiv.f64	d7, d5, d6
     9d4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     9d8:	ee17 2a90 	vmov	r2, s15
     9dc:	4b53      	ldr	r3, [pc, #332]	; (b2c <calc_fixed_time_MW_sweep+0x29c>)
     9de:	60da      	str	r2, [r3, #12]

	const uint32_t point_time_us = 1000000 * requested_sweep_period / (mw_sweep_settings.num_steps + 1); //period of each point in us
     9e0:	ed97 7b02 	vldr	d7, [r7, #8]
     9e4:	ed9f 6b4c 	vldr	d6, [pc, #304]	; b18 <calc_fixed_time_MW_sweep+0x288>
     9e8:	ee27 5b06 	vmul.f64	d5, d7, d6
     9ec:	4b4f      	ldr	r3, [pc, #316]	; (b2c <calc_fixed_time_MW_sweep+0x29c>)
     9ee:	68db      	ldr	r3, [r3, #12]
     9f0:	3301      	adds	r3, #1
     9f2:	ee07 3a90 	vmov	s15, r3
     9f6:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     9fa:	ee85 7b06 	vdiv.f64	d7, d5, d6
     9fe:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     a02:	ee17 3a90 	vmov	r3, s15
     a06:	63fb      	str	r3, [r7, #60]	; 0x3c
//	printf("DEBUG point_time_us: %lu \r\n", point_time_us);
//	printf("DEBUG sweep time in us: %lu \r\n", point_time_us * (mw_sweep_settings.num_steps + 1));
	mw_sweep_settings.pop_cycles_per_point = (point_time_us - MW_STABILISE_TIME_US - TIMING_MARGIN_US - MW_PROCESSING_TIME_US)/POP_period_us;
     a08:	f241 3288 	movw	r2, #5000	; 0x1388
     a0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     a0e:	1a9b      	subs	r3, r3, r2
     a10:	2264      	movs	r2, #100	; 0x64
     a12:	1a9b      	subs	r3, r3, r2
     a14:	2201      	movs	r2, #1
     a16:	1a9a      	subs	r2, r3, r2
     a18:	4b45      	ldr	r3, [pc, #276]	; (b30 <calc_fixed_time_MW_sweep+0x2a0>)
     a1a:	681b      	ldr	r3, [r3, #0]
     a1c:	fbb2 f3f3 	udiv	r3, r2, r3
     a20:	4a42      	ldr	r2, [pc, #264]	; (b2c <calc_fixed_time_MW_sweep+0x29c>)
     a22:	6153      	str	r3, [r2, #20]
	printf("%lu points in sweep, %lu ms and %lu POP cycles each\r\n", mw_sweep_settings.num_steps + 1, point_time_us / 1000, mw_sweep_settings.pop_cycles_per_point);
     a24:	4b41      	ldr	r3, [pc, #260]	; (b2c <calc_fixed_time_MW_sweep+0x29c>)
     a26:	68db      	ldr	r3, [r3, #12]
     a28:	1c59      	adds	r1, r3, #1
     a2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     a2c:	4a43      	ldr	r2, [pc, #268]	; (b3c <calc_fixed_time_MW_sweep+0x2ac>)
     a2e:	fba2 2303 	umull	r2, r3, r2, r3
     a32:	099a      	lsrs	r2, r3, #6
     a34:	4b3d      	ldr	r3, [pc, #244]	; (b2c <calc_fixed_time_MW_sweep+0x29c>)
     a36:	695b      	ldr	r3, [r3, #20]
     a38:	4841      	ldr	r0, [pc, #260]	; (b40 <calc_fixed_time_MW_sweep+0x2b0>)
     a3a:	f000 fd8d 	bl	1558 <__printf_veneer>
	uint32_t min_dwell_required_us = mw_sweep_settings.pop_cycles_per_point * POP_period_us + TIMING_MARGIN_US; //minimum dwell_time to achieve above
     a3e:	4b3b      	ldr	r3, [pc, #236]	; (b2c <calc_fixed_time_MW_sweep+0x29c>)
     a40:	695b      	ldr	r3, [r3, #20]
     a42:	4a3b      	ldr	r2, [pc, #236]	; (b30 <calc_fixed_time_MW_sweep+0x2a0>)
     a44:	6812      	ldr	r2, [r2, #0]
     a46:	fb02 f303 	mul.w	r3, r2, r3
     a4a:	2264      	movs	r2, #100	; 0x64
     a4c:	4413      	add	r3, r2
     a4e:	63bb      	str	r3, [r7, #56]	; 0x38
	mw_sweep_settings.dwell_time = point_time_us - MW_STABILISE_TIME_US - MW_PROCESSING_TIME_US; //actual programmed dwell time
     a50:	f241 3288 	movw	r2, #5000	; 0x1388
     a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     a56:	1a9b      	subs	r3, r3, r2
     a58:	2201      	movs	r2, #1
     a5a:	1a9b      	subs	r3, r3, r2
     a5c:	4a33      	ldr	r2, [pc, #204]	; (b2c <calc_fixed_time_MW_sweep+0x29c>)
     a5e:	61d3      	str	r3, [r2, #28]
	if (mw_sweep_settings.dwell_time < min_dwell_required_us) {
     a60:	4b32      	ldr	r3, [pc, #200]	; (b2c <calc_fixed_time_MW_sweep+0x29c>)
     a62:	69db      	ldr	r3, [r3, #28]
     a64:	6bba      	ldr	r2, [r7, #56]	; 0x38
     a66:	429a      	cmp	r2, r3
     a68:	d902      	bls.n	a70 <calc_fixed_time_MW_sweep+0x1e0>
		mw_sweep_settings.dwell_time = min_dwell_required_us;
     a6a:	4a30      	ldr	r2, [pc, #192]	; (b2c <calc_fixed_time_MW_sweep+0x29c>)
     a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     a6e:	61d3      	str	r3, [r2, #28]
	}
//	printf("DEBUG dwell_time: %lu \r\n", mw_sweep_settings.dwell_time);
//	printf("DEBUG sweep time in us: %lu \r\n", (mw_sweep_settings.dwell_time + MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US) * (mw_sweep_settings.num_steps + 1));

	/* Double check - calculate the period of a sweep */
	double point_period = (double)(MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US + mw_sweep_settings.dwell_time)/1000000;
     a70:	f241 3288 	movw	r2, #5000	; 0x1388
     a74:	2301      	movs	r3, #1
     a76:	441a      	add	r2, r3
     a78:	4b2c      	ldr	r3, [pc, #176]	; (b2c <calc_fixed_time_MW_sweep+0x29c>)
     a7a:	69db      	ldr	r3, [r3, #28]
     a7c:	4413      	add	r3, r2
     a7e:	ee07 3a90 	vmov	s15, r3
     a82:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     a86:	ed9f 5b24 	vldr	d5, [pc, #144]	; b18 <calc_fixed_time_MW_sweep+0x288>
     a8a:	ee86 7b05 	vdiv.f64	d7, d6, d5
     a8e:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
//	printf("Point period %f\r\n", point_period);
	double calc_sweep_time = point_period * (mw_sweep_settings.num_steps + 1);
     a92:	4b26      	ldr	r3, [pc, #152]	; (b2c <calc_fixed_time_MW_sweep+0x29c>)
     a94:	68db      	ldr	r3, [r3, #12]
     a96:	3301      	adds	r3, #1
     a98:	ee07 3a90 	vmov	s15, r3
     a9c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     aa0:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     aa4:	ee26 7b07 	vmul.f64	d7, d6, d7
     aa8:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
//	printf("calc_sweep_time %f\r\n", calc_sweep_time);
	double min_sweep_time = (double)((min_dwell_required_us + MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US) * (mw_sweep_settings.num_steps + 1)) / 1000000;
     aac:	f241 3288 	movw	r2, #5000	; 0x1388
     ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ab2:	4413      	add	r3, r2
     ab4:	2201      	movs	r2, #1
     ab6:	4413      	add	r3, r2
     ab8:	4a1c      	ldr	r2, [pc, #112]	; (b2c <calc_fixed_time_MW_sweep+0x29c>)
     aba:	68d2      	ldr	r2, [r2, #12]
     abc:	3201      	adds	r2, #1
     abe:	fb02 f303 	mul.w	r3, r2, r3
     ac2:	ee07 3a90 	vmov	s15, r3
     ac6:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     aca:	ed9f 5b13 	vldr	d5, [pc, #76]	; b18 <calc_fixed_time_MW_sweep+0x288>
     ace:	ee86 7b05 	vdiv.f64	d7, d6, d5
     ad2:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	if (calc_sweep_time/min_sweep_time > 1.02) {
     ad6:	ed97 5b18 	vldr	d5, [r7, #96]	; 0x60
     ada:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
     ade:	ee85 7b06 	vdiv.f64	d7, d5, d6
     ae2:	ed9f 6b0f 	vldr	d6, [pc, #60]	; b20 <calc_fixed_time_MW_sweep+0x290>
     ae6:	eeb4 7bc6 	vcmpe.f64	d7, d6
     aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     aee:	dd2b      	ble.n	b48 <calc_fixed_time_MW_sweep+0x2b8>
		printf("Sweep period %.4g s but could be reduced to %.4g s\r\n", calc_sweep_time, min_sweep_time);
     af0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
     af4:	e9cd 2300 	strd	r2, r3, [sp]
     af8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
     afc:	4811      	ldr	r0, [pc, #68]	; (b44 <calc_fixed_time_MW_sweep+0x2b4>)
     afe:	f000 fd2b 	bl	1558 <__printf_veneer>
     b02:	e029      	b.n	b58 <calc_fixed_time_MW_sweep+0x2c8>
     b04:	f3af 8000 	nop.w
     b08:	00000000 	.word	0x00000000
     b0c:	41cdcd65 	.word	0x41cdcd65
     b10:	00000000 	.word	0x00000000
     b14:	4187d784 	.word	0x4187d784
     b18:	00000000 	.word	0x00000000
     b1c:	412e8480 	.word	0x412e8480
     b20:	851eb852 	.word	0x851eb852
     b24:	3ff051eb 	.word	0x3ff051eb
     b28:	0801c0d4 	.word	0x0801c0d4
     b2c:	200005b0 	.word	0x200005b0
     b30:	200005a0 	.word	0x200005a0
     b34:	000f4240 	.word	0x000f4240
     b38:	0801c124 	.word	0x0801c124
     b3c:	10624dd3 	.word	0x10624dd3
     b40:	0801c150 	.word	0x0801c150
     b44:	0801c188 	.word	0x0801c188
	} else {
		printf("Sweep period %.4g s is pretty much optimal for %lu POP samples per point\r\n", calc_sweep_time, mw_sweep_settings.pop_cycles_per_point);
     b48:	4b57      	ldr	r3, [pc, #348]	; (ca8 <calc_fixed_time_MW_sweep+0x418>)
     b4a:	695b      	ldr	r3, [r3, #20]
     b4c:	9300      	str	r3, [sp, #0]
     b4e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
     b52:	4856      	ldr	r0, [pc, #344]	; (cac <calc_fixed_time_MW_sweep+0x41c>)
     b54:	f000 fd00 	bl	1558 <__printf_veneer>

	//Period of MW sweep isn't precise as it's based on measured average processing time
	//Steps are increased by up to 10% to increase the sweep period to guarantee horizontal scope sync
	//These are added to the end of the sweep so that the centre frequency is still central
	//Sweep period will be increased by a maximum of 1s
	if (scope_sync_time) {
     b58:	79fb      	ldrb	r3, [r7, #7]
     b5a:	2b00      	cmp	r3, #0
     b5c:	d044      	beq.n	be8 <calc_fixed_time_MW_sweep+0x358>

		mw_sweep_settings.num_steps = mw_sweep_settings.num_steps * 1.1 + 0.5;
     b5e:	4b52      	ldr	r3, [pc, #328]	; (ca8 <calc_fixed_time_MW_sweep+0x418>)
     b60:	68db      	ldr	r3, [r3, #12]
     b62:	ee07 3a90 	vmov	s15, r3
     b66:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     b6a:	ed9f 6b49 	vldr	d6, [pc, #292]	; c90 <calc_fixed_time_MW_sweep+0x400>
     b6e:	ee27 7b06 	vmul.f64	d7, d7, d6
     b72:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     b76:	ee37 7b06 	vadd.f64	d7, d7, d6
     b7a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     b7e:	ee17 2a90 	vmov	r2, s15
     b82:	4b49      	ldr	r3, [pc, #292]	; (ca8 <calc_fixed_time_MW_sweep+0x418>)
     b84:	60da      	str	r2, [r3, #12]
//		printf("DEBUG #steps: %lu \r\n", mw_sweep_settings.num_steps);
		calc_sweep_time = point_period * (mw_sweep_settings.num_steps + 1);
     b86:	4b48      	ldr	r3, [pc, #288]	; (ca8 <calc_fixed_time_MW_sweep+0x418>)
     b88:	68db      	ldr	r3, [r3, #12]
     b8a:	3301      	adds	r3, #1
     b8c:	ee07 3a90 	vmov	s15, r3
     b90:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     b94:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     b98:	ee26 7b07 	vmul.f64	d7, d6, d7
     b9c:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60

		/* Decrease number of steps if additional 10% is >1s */
//		printf("DEBUG calc_sweep_time - requested_sweep_period: %f \r\n", calc_sweep_time - requested_sweep_period);
		if ((calc_sweep_time - requested_sweep_period) > 1){
     ba0:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
     ba4:	ed97 7b02 	vldr	d7, [r7, #8]
     ba8:	ee36 7b47 	vsub.f64	d7, d6, d7
     bac:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
     bb0:	eeb4 7bc6 	vcmpe.f64	d7, d6
     bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     bb8:	dd11      	ble.n	bde <calc_fixed_time_MW_sweep+0x34e>
			mw_sweep_settings.num_steps--;
     bba:	4b3b      	ldr	r3, [pc, #236]	; (ca8 <calc_fixed_time_MW_sweep+0x418>)
     bbc:	68db      	ldr	r3, [r3, #12]
     bbe:	3b01      	subs	r3, #1
     bc0:	4a39      	ldr	r2, [pc, #228]	; (ca8 <calc_fixed_time_MW_sweep+0x418>)
     bc2:	60d3      	str	r3, [r2, #12]
			calc_sweep_time = point_period * (mw_sweep_settings.num_steps + 1);
     bc4:	4b38      	ldr	r3, [pc, #224]	; (ca8 <calc_fixed_time_MW_sweep+0x418>)
     bc6:	68db      	ldr	r3, [r3, #12]
     bc8:	3301      	adds	r3, #1
     bca:	ee07 3a90 	vmov	s15, r3
     bce:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     bd2:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     bd6:	ee26 7b07 	vmul.f64	d7, d6, d7
     bda:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
		}
//		printf("DEBUG #steps: %lu \r\n", mw_sweep_settings.num_steps);

		//Double check of the sweep period selected
		printf("Final calculated sweep period, including scope sync: %.3g s\r\n", calc_sweep_time);
     bde:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
     be2:	4833      	ldr	r0, [pc, #204]	; (cb0 <calc_fixed_time_MW_sweep+0x420>)
     be4:	f000 fcb8 	bl	1558 <__printf_veneer>
	}

	/* Can avoid spurs if frequency requested can be encoded exactly  */
	start_freq = ((long)(start_freq/unit_step_size_Hz)) * unit_step_size_Hz;
     be8:	ed97 5b14 	vldr	d5, [r7, #80]	; 0x50
     bec:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
     bf0:	ee85 7b06 	vdiv.f64	d7, d5, d6
     bf4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
     bf8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
     bfc:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
     c00:	ee26 7b07 	vmul.f64	d7, d6, d7
     c04:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50

	/* Calculate the N division ratio, extracting the fractional and integer parts */
	const double N = ((start_freq * mw_sweep_settings.k) / REF_FREQ);
     c08:	4b27      	ldr	r3, [pc, #156]	; (ca8 <calc_fixed_time_MW_sweep+0x418>)
     c0a:	785b      	ldrb	r3, [r3, #1]
     c0c:	ee07 3a90 	vmov	s15, r3
     c10:	eeb8 6be7 	vcvt.f64.s32	d6, s15
     c14:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
     c18:	ee26 6b07 	vmul.f64	d6, d6, d7
     c1c:	ed9f 5b1e 	vldr	d5, [pc, #120]	; c98 <calc_fixed_time_MW_sweep+0x408>
     c20:	ee86 7b05 	vdiv.f64	d7, d6, d5
     c24:	ed87 7b08 	vstr	d7, [r7, #32]
	mw_sweep_settings.NINT = N;
     c28:	ed97 7b08 	vldr	d7, [r7, #32]
     c2c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     c30:	ee17 2a90 	vmov	r2, s15
     c34:	4b1c      	ldr	r3, [pc, #112]	; (ca8 <calc_fixed_time_MW_sweep+0x418>)
     c36:	605a      	str	r2, [r3, #4]
	mw_sweep_settings.NFRAC_start = ((N - mw_sweep_settings.NINT) * (1 << 24)) + 0.5;
     c38:	4b1b      	ldr	r3, [pc, #108]	; (ca8 <calc_fixed_time_MW_sweep+0x418>)
     c3a:	685b      	ldr	r3, [r3, #4]
     c3c:	ee07 3a90 	vmov	s15, r3
     c40:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     c44:	ed97 6b08 	vldr	d6, [r7, #32]
     c48:	ee36 7b47 	vsub.f64	d7, d6, d7
     c4c:	ed9f 6b14 	vldr	d6, [pc, #80]	; ca0 <calc_fixed_time_MW_sweep+0x410>
     c50:	ee27 7b06 	vmul.f64	d7, d7, d6
     c54:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     c58:	ee37 7b06 	vadd.f64	d7, d7, d6
     c5c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     c60:	ee17 2a90 	vmov	r2, s15
     c64:	4b10      	ldr	r3, [pc, #64]	; (ca8 <calc_fixed_time_MW_sweep+0x418>)
     c66:	609a      	str	r2, [r3, #8]
	mw_sweep_settings.current_point = 0;
     c68:	4b0f      	ldr	r3, [pc, #60]	; (ca8 <calc_fixed_time_MW_sweep+0x418>)
     c6a:	2200      	movs	r2, #0
     c6c:	625a      	str	r2, [r3, #36]	; 0x24
	mw_sweep_settings.sweep_period = calc_sweep_time;
     c6e:	490e      	ldr	r1, [pc, #56]	; (ca8 <calc_fixed_time_MW_sweep+0x418>)
     c70:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
     c74:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	mw_sweep_settings.stabilise_time = MW_STABILISE_TIME_US; //Global MW stabilisation time
     c78:	f241 3288 	movw	r2, #5000	; 0x1388
     c7c:	4b0a      	ldr	r3, [pc, #40]	; (ca8 <calc_fixed_time_MW_sweep+0x418>)
     c7e:	619a      	str	r2, [r3, #24]
//	print_mw_sweep_settings();
	return(true);
     c80:	2301      	movs	r3, #1
}
     c82:	4618      	mov	r0, r3
     c84:	3768      	adds	r7, #104	; 0x68
     c86:	46bd      	mov	sp, r7
     c88:	bd80      	pop	{r7, pc}
     c8a:	bf00      	nop
     c8c:	f3af 8000 	nop.w
     c90:	9999999a 	.word	0x9999999a
     c94:	3ff19999 	.word	0x3ff19999
     c98:	00000000 	.word	0x00000000
     c9c:	4187d784 	.word	0x4187d784
     ca0:	00000000 	.word	0x00000000
     ca4:	41700000 	.word	0x41700000
     ca8:	200005b0 	.word	0x200005b0
     cac:	0801c1c0 	.word	0x0801c1c0
     cb0:	0801c20c 	.word	0x0801c20c

00000cb4 <calculate_k>:

/**
  * @brief  Calculates k value
  * @retval k
  */
static const uint32_t calculate_k(const double frequency) {
     cb4:	b480      	push	{r7}
     cb6:	b085      	sub	sp, #20
     cb8:	af00      	add	r7, sp, #0
     cba:	ed87 0b00 	vstr	d0, [r7]
	uint32_t k = VCO_MAX_FREQ / frequency;
     cbe:	ed9f 5b10 	vldr	d5, [pc, #64]	; d00 <calculate_k+0x4c>
     cc2:	ed97 6b00 	vldr	d6, [r7]
     cc6:	ee85 7b06 	vdiv.f64	d7, d5, d6
     cca:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     cce:	ee17 3a90 	vmov	r3, s15
     cd2:	60fb      	str	r3, [r7, #12]

	if (k != 1) {
     cd4:	68fb      	ldr	r3, [r7, #12]
     cd6:	2b01      	cmp	r3, #1
     cd8:	d00b      	beq.n	cf2 <calculate_k+0x3e>
		while (k > 62 || k % 2) {
     cda:	e002      	b.n	ce2 <calculate_k+0x2e>
			k --;
     cdc:	68fb      	ldr	r3, [r7, #12]
     cde:	3b01      	subs	r3, #1
     ce0:	60fb      	str	r3, [r7, #12]
		while (k > 62 || k % 2) {
     ce2:	68fb      	ldr	r3, [r7, #12]
     ce4:	2b3e      	cmp	r3, #62	; 0x3e
     ce6:	d8f9      	bhi.n	cdc <calculate_k+0x28>
     ce8:	68fb      	ldr	r3, [r7, #12]
     cea:	f003 0301 	and.w	r3, r3, #1
     cee:	2b00      	cmp	r3, #0
     cf0:	d1f4      	bne.n	cdc <calculate_k+0x28>
		}
	}
	return (k);
     cf2:	68fb      	ldr	r3, [r7, #12]
}
     cf4:	4618      	mov	r0, r3
     cf6:	3714      	adds	r7, #20
     cf8:	46bd      	mov	sp, r7
     cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
     cfe:	4770      	bx	lr
     d00:	20000000 	.word	0x20000000
     d04:	41ee8c21 	.word	0x41ee8c21

00000d08 <start_POP_calibration>:

/**
  * @brief  Starts the process of measuring the POP period
  * @retval None
  */
void start_POP_calibration(const bool cal_only) {
     d08:	b580      	push	{r7, lr}
     d0a:	b082      	sub	sp, #8
     d0c:	af00      	add	r7, sp, #0
     d0e:	4603      	mov	r3, r0
     d10:	71fb      	strb	r3, [r7, #7]
	/* Requires ADC to be initialised and for HAL_ADC_ConvCpltCallback to be active */
	if (cal_only == true) {
     d12:	79fb      	ldrb	r3, [r7, #7]
     d14:	2b00      	cmp	r3, #0
     d16:	d003      	beq.n	d20 <start_POP_calibration+0x18>
		mw_sweep_settings.sweep_mode = POP_CAL_ONLY;
     d18:	4b0f      	ldr	r3, [pc, #60]	; (d58 <start_POP_calibration+0x50>)
     d1a:	2201      	movs	r2, #1
     d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	}
	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); 	//Sets MW_invalid pin high to reset POP cycle
     d20:	2201      	movs	r2, #1
     d22:	2102      	movs	r1, #2
     d24:	480d      	ldr	r0, [pc, #52]	; (d5c <start_POP_calibration+0x54>)
     d26:	f000 fc07 	bl	1538 <__HAL_GPIO_WritePin_veneer>
	HAL_Delay(10); // 10ms in case ADC was part-way through a conversion
     d2a:	200a      	movs	r0, #10
     d2c:	f000 fbec 	bl	1508 <__HAL_Delay_veneer>
	sample_count = 0; //reset sample count
     d30:	4b0b      	ldr	r3, [pc, #44]	; (d60 <start_POP_calibration+0x58>)
     d32:	2200      	movs	r2, #0
     d34:	801a      	strh	r2, [r3, #0]
	mw_sweep_settings.state = MW_CALIBRATE;
     d36:	4b08      	ldr	r3, [pc, #32]	; (d58 <start_POP_calibration+0x50>)
     d38:	2204      	movs	r2, #4
     d3a:	701a      	strb	r2, [r3, #0]
	start_timer(MW_TIMER); //reset MW_timer and start counting
     d3c:	4b09      	ldr	r3, [pc, #36]	; (d64 <start_POP_calibration+0x5c>)
     d3e:	681b      	ldr	r3, [r3, #0]
     d40:	4618      	mov	r0, r3
     d42:	f000 fac3 	bl	12cc <start_timer>
	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); //Restart POP cycle
     d46:	2200      	movs	r2, #0
     d48:	2102      	movs	r1, #2
     d4a:	4804      	ldr	r0, [pc, #16]	; (d5c <start_POP_calibration+0x54>)
     d4c:	f000 fbf4 	bl	1538 <__HAL_GPIO_WritePin_veneer>
	#ifdef MW_VERBOSE
		printf("POP calibration started\r\n");
	#endif //MW_VERBOSE
}
     d50:	bf00      	nop
     d52:	3708      	adds	r7, #8
     d54:	46bd      	mov	sp, r7
     d56:	bd80      	pop	{r7, pc}
     d58:	200005b0 	.word	0x200005b0
     d5c:	58020400 	.word	0x58020400
     d60:	2000059e 	.word	0x2000059e
     d64:	2000001c 	.word	0x2000001c

00000d68 <start_MW_sweep>:

/**
  * @brief  Starts a MW sweep
  * @retval Success/failure
  */
static const bool start_MW_sweep(const bool single_sweep) {
     d68:	b580      	push	{r7, lr}
     d6a:	b082      	sub	sp, #8
     d6c:	af00      	add	r7, sp, #0
     d6e:	4603      	mov	r3, r0
     d70:	71fb      	strb	r3, [r7, #7]
	//uses settings from the mw_sweep_settings structure
	if (single_sweep == true) {
     d72:	79fb      	ldrb	r3, [r7, #7]
     d74:	2b00      	cmp	r3, #0
     d76:	d003      	beq.n	d80 <start_MW_sweep+0x18>
		mw_sweep_settings.sweep_mode = SWEEP_ONCE;
     d78:	4b1c      	ldr	r3, [pc, #112]	; (dec <start_MW_sweep+0x84>)
     d7a:	2202      	movs	r2, #2
     d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	}
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET); // Assume MW lock, the LED will be disabled if lock fails.
     d80:	2201      	movs	r2, #1
     d82:	2102      	movs	r1, #2
     d84:	481a      	ldr	r0, [pc, #104]	; (df0 <start_MW_sweep+0x88>)
     d86:	f000 fbd7 	bl	1538 <__HAL_GPIO_WritePin_veneer>

	#ifdef MW_VERBOSE
		printf("Setting trigger output low \r\n");
	#endif //MW_VERBOSE

	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); //Sets MW_invalid pin high
     d8a:	2201      	movs	r2, #1
     d8c:	2102      	movs	r1, #2
     d8e:	4819      	ldr	r0, [pc, #100]	; (df4 <start_MW_sweep+0x8c>)
     d90:	f000 fbd2 	bl	1538 <__HAL_GPIO_WritePin_veneer>
//	set_frequency(mw_sweep_settings.NINT, mw_sweep_settings.NFRAC_start, mw_sweep_settings.k, MANUAL_MUTE); //program initial MW frequency
	set_freq_regs(mw_sweep_settings.NINT, mw_sweep_settings.NFRAC_start, mw_sweep_settings.k); //program initial MW frequency
     d94:	4b15      	ldr	r3, [pc, #84]	; (dec <start_MW_sweep+0x84>)
     d96:	685b      	ldr	r3, [r3, #4]
     d98:	4a14      	ldr	r2, [pc, #80]	; (dec <start_MW_sweep+0x84>)
     d9a:	6891      	ldr	r1, [r2, #8]
     d9c:	4a13      	ldr	r2, [pc, #76]	; (dec <start_MW_sweep+0x84>)
     d9e:	7852      	ldrb	r2, [r2, #1]
     da0:	4618      	mov	r0, r3
     da2:	f7ff fb41 	bl	428 <set_freq_regs>
	mw_sweep_settings.state = MW_STABILISING; //waiting for MW output to stabilise
     da6:	4b11      	ldr	r3, [pc, #68]	; (dec <start_MW_sweep+0x84>)
     da8:	2202      	movs	r2, #2
     daa:	701a      	strb	r2, [r3, #0]
	mw_sweep_settings.current_point = 0; //currently on at start of ramp i.e. point 0
     dac:	4b0f      	ldr	r3, [pc, #60]	; (dec <start_MW_sweep+0x84>)
     dae:	2200      	movs	r2, #0
     db0:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_Delay(10); // 10ms in case ADC was part-way through a conversion
     db2:	200a      	movs	r0, #10
     db4:	f000 fba8 	bl	1508 <__HAL_Delay_veneer>
	sample_count = 0; //reset sample count
     db8:	4b0f      	ldr	r3, [pc, #60]	; (df8 <start_MW_sweep+0x90>)
     dba:	2200      	movs	r2, #0
     dbc:	801a      	strh	r2, [r3, #0]
	/* Output used for triggering external scope */
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET); // Sets trigger output low
     dbe:	2200      	movs	r2, #0
     dc0:	2101      	movs	r1, #1
     dc2:	480e      	ldr	r0, [pc, #56]	; (dfc <start_MW_sweep+0x94>)
     dc4:	f000 fbb8 	bl	1538 <__HAL_GPIO_WritePin_veneer>
	start_timer(MW_TIMER); //reset MW_timer (MW step timer) and start counting
     dc8:	4b0d      	ldr	r3, [pc, #52]	; (e00 <start_MW_sweep+0x98>)
     dca:	681b      	ldr	r3, [r3, #0]
     dcc:	4618      	mov	r0, r3
     dce:	f000 fa7d 	bl	12cc <start_timer>
	start_timer(SWEEP_TIMER); //reset general (sweep) timer and start counting
     dd2:	4b0c      	ldr	r3, [pc, #48]	; (e04 <start_MW_sweep+0x9c>)
     dd4:	681b      	ldr	r3, [r3, #0]
     dd6:	4618      	mov	r0, r3
     dd8:	f000 fa78 	bl	12cc <start_timer>
	sample_count = 0; //reset sample count
     ddc:	4b06      	ldr	r3, [pc, #24]	; (df8 <start_MW_sweep+0x90>)
     dde:	2200      	movs	r2, #0
     de0:	801a      	strh	r2, [r3, #0]
	//known limitation - if the ADC has been recently triggered and HAL_ADC_ConvCpltCallback will increment sample_count by 1
	return(true);
     de2:	2301      	movs	r3, #1
}
     de4:	4618      	mov	r0, r3
     de6:	3708      	adds	r7, #8
     de8:	46bd      	mov	sp, r7
     dea:	bd80      	pop	{r7, pc}
     dec:	200005b0 	.word	0x200005b0
     df0:	58021000 	.word	0x58021000
     df4:	58020400 	.word	0x58020400
     df8:	2000059e 	.word	0x2000059e
     dfc:	58021800 	.word	0x58021800
     e00:	2000001c 	.word	0x2000001c
     e04:	20000020 	.word	0x20000020

00000e08 <start_continuous_MW_sweep>:

/**
  * @brief  Starts a continuous MW calibrate/sweep cycle
  * @retval Success/failure
  */
void start_continuous_MW_sweep(void) {
     e08:	b580      	push	{r7, lr}
     e0a:	af00      	add	r7, sp, #0
	mw_sweep_settings.sweep_mode = CONTINUOUS_SWEEP;
     e0c:	4b04      	ldr	r3, [pc, #16]	; (e20 <start_continuous_MW_sweep+0x18>)
     e0e:	2200      	movs	r2, #0
     e10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	start_POP_calibration(false);
     e14:	2000      	movs	r0, #0
     e16:	f7ff ff77 	bl	d08 <start_POP_calibration>
}
     e1a:	bf00      	nop
     e1c:	bd80      	pop	{r7, pc}
     e1e:	bf00      	nop
     e20:	200005b0 	.word	0x200005b0

00000e24 <MW_update>:

/**
  * @brief  Checks MW status to see if a timer has elapsed and if frequency needs changing.
  * @retval True if an action was taken
  */
const bool MW_update(void) {
     e24:	b580      	push	{r7, lr}
     e26:	b08a      	sub	sp, #40	; 0x28
     e28:	af04      	add	r7, sp, #16
	uint8_t local_copy_of_MW_state = mw_sweep_settings.state; //hack to make switch statement behave
     e2a:	4b95      	ldr	r3, [pc, #596]	; (1080 <MW_update+0x25c>)
     e2c:	781b      	ldrb	r3, [r3, #0]
     e2e:	75bb      	strb	r3, [r7, #22]
	//switch (mw_sweep_settings.state)
	bool action_taken = false;
     e30:	2300      	movs	r3, #0
     e32:	75fb      	strb	r3, [r7, #23]
	uint32_t sweep_period_us;
	switch (local_copy_of_MW_state)
     e34:	7dbb      	ldrb	r3, [r7, #22]
     e36:	2b04      	cmp	r3, #4
     e38:	f200 8109 	bhi.w	104e <MW_update+0x22a>
     e3c:	a201      	add	r2, pc, #4	; (adr r2, e44 <MW_update+0x20>)
     e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     e42:	bf00      	nop
     e44:	00001067 	.word	0x00001067
     e48:	00001067 	.word	0x00001067
     e4c:	00000e59 	.word	0x00000e59
     e50:	00000e9b 	.word	0x00000e9b
     e54:	00000fdb 	.word	0x00000fdb
		case MW_STOPPED:
		case MW_FIXED_FREQ:
			break; //no action to take

		case MW_STABILISING: //waiting for MW output to stabilise
			if (check_timer(MW_TIMER) < MW_STABILISE_TIME_US) return(false); //Still waiting, no action taken
     e58:	4b8a      	ldr	r3, [pc, #552]	; (1084 <MW_update+0x260>)
     e5a:	681b      	ldr	r3, [r3, #0]
     e5c:	4618      	mov	r0, r3
     e5e:	f000 fa65 	bl	132c <check_timer>
     e62:	4603      	mov	r3, r0
     e64:	f241 3288 	movw	r2, #5000	; 0x1388
     e68:	4293      	cmp	r3, r2
     e6a:	d201      	bcs.n	e70 <MW_update+0x4c>
     e6c:	2300      	movs	r3, #0
     e6e:	e0fe      	b.n	106e <MW_update+0x24a>
			//Otherwise MW stabilisation timer has elapsed
			stop_timer(MW_TIMER);
     e70:	4b84      	ldr	r3, [pc, #528]	; (1084 <MW_update+0x260>)
     e72:	681b      	ldr	r3, [r3, #0]
     e74:	4618      	mov	r0, r3
     e76:	f000 fa47 	bl	1308 <stop_timer>
			HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); //Sets MW_invalid pin low as MW now stable
     e7a:	2200      	movs	r2, #0
     e7c:	2102      	movs	r1, #2
     e7e:	4882      	ldr	r0, [pc, #520]	; (1088 <MW_update+0x264>)
     e80:	f000 fb5a 	bl	1538 <__HAL_GPIO_WritePin_veneer>
			mw_sweep_settings.state = MW_DWELL;
     e84:	4b7e      	ldr	r3, [pc, #504]	; (1080 <MW_update+0x25c>)
     e86:	2203      	movs	r2, #3
     e88:	701a      	strb	r2, [r3, #0]
			start_timer(MW_TIMER); //Restart timer for DWELL time
     e8a:	4b7e      	ldr	r3, [pc, #504]	; (1084 <MW_update+0x260>)
     e8c:	681b      	ldr	r3, [r3, #0]
     e8e:	4618      	mov	r0, r3
     e90:	f000 fa1c 	bl	12cc <start_timer>
			action_taken = true;
     e94:	2301      	movs	r3, #1
     e96:	75fb      	strb	r3, [r7, #23]
			break;
     e98:	e0e8      	b.n	106c <MW_update+0x248>

		case MW_DWELL: //valid MW output waiting for end of dwell time
			if (check_timer(MW_TIMER) < mw_sweep_settings.dwell_time) return(false); //Still waiting
     e9a:	4b7a      	ldr	r3, [pc, #488]	; (1084 <MW_update+0x260>)
     e9c:	681b      	ldr	r3, [r3, #0]
     e9e:	4618      	mov	r0, r3
     ea0:	f000 fa44 	bl	132c <check_timer>
     ea4:	4602      	mov	r2, r0
     ea6:	4b76      	ldr	r3, [pc, #472]	; (1080 <MW_update+0x25c>)
     ea8:	69db      	ldr	r3, [r3, #28]
     eaa:	429a      	cmp	r2, r3
     eac:	d201      	bcs.n	eb2 <MW_update+0x8e>
     eae:	2300      	movs	r3, #0
     eb0:	e0dd      	b.n	106e <MW_update+0x24a>
			//Otherwise dwell timer has elapsed
			action_taken = true;
     eb2:	2301      	movs	r3, #1
     eb4:	75fb      	strb	r3, [r7, #23]
			stop_timer(MW_TIMER);
     eb6:	4b73      	ldr	r3, [pc, #460]	; (1084 <MW_update+0x260>)
     eb8:	681b      	ldr	r3, [r3, #0]
     eba:	4618      	mov	r0, r3
     ebc:	f000 fa24 	bl	1308 <stop_timer>
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //toggles red LED
     ec0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
     ec4:	4870      	ldr	r0, [pc, #448]	; (1088 <MW_update+0x264>)
     ec6:	f000 fb33 	bl	1530 <__HAL_GPIO_TogglePin_veneer>
			HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); //Sets MW_invalid pin high as about to change frequency
     eca:	2201      	movs	r2, #1
     ecc:	2102      	movs	r1, #2
     ece:	486e      	ldr	r0, [pc, #440]	; (1088 <MW_update+0x264>)
     ed0:	f000 fb32 	bl	1538 <__HAL_GPIO_WritePin_veneer>
			mw_sweep_settings.state = MW_STABILISING;
     ed4:	4b6a      	ldr	r3, [pc, #424]	; (1080 <MW_update+0x25c>)
     ed6:	2202      	movs	r2, #2
     ed8:	701a      	strb	r2, [r3, #0]
			if (mw_sweep_settings.current_point == mw_sweep_settings.num_steps) { // All steps completed, tidy up and restart next sweep
     eda:	4b69      	ldr	r3, [pc, #420]	; (1080 <MW_update+0x25c>)
     edc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
     ede:	4b68      	ldr	r3, [pc, #416]	; (1080 <MW_update+0x25c>)
     ee0:	68db      	ldr	r3, [r3, #12]
     ee2:	429a      	cmp	r2, r3
     ee4:	d15c      	bne.n	fa0 <MW_update+0x17c>
				HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
     ee6:	2201      	movs	r2, #1
     ee8:	2101      	movs	r1, #1
     eea:	4868      	ldr	r0, [pc, #416]	; (108c <MW_update+0x268>)
     eec:	f000 fb24 	bl	1538 <__HAL_GPIO_WritePin_veneer>
				sweep_period_us=check_timer(SWEEP_TIMER);
     ef0:	4b67      	ldr	r3, [pc, #412]	; (1090 <MW_update+0x26c>)
     ef2:	681b      	ldr	r3, [r3, #0]
     ef4:	4618      	mov	r0, r3
     ef6:	f000 fa19 	bl	132c <check_timer>
     efa:	60b8      	str	r0, [r7, #8]
				stop_timer(SWEEP_TIMER);
     efc:	4b64      	ldr	r3, [pc, #400]	; (1090 <MW_update+0x26c>)
     efe:	681b      	ldr	r3, [r3, #0]
     f00:	4618      	mov	r0, r3
     f02:	f000 fa01 	bl	1308 <stop_timer>
				printf("Sweep complete in %.4g s. Expected %.4g s. %u samples\r\n", (double)(sweep_period_us)/1000000, mw_sweep_settings.sweep_period, sample_count);
     f06:	68bb      	ldr	r3, [r7, #8]
     f08:	ee07 3a90 	vmov	s15, r3
     f0c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     f10:	ed9f 6b59 	vldr	d6, [pc, #356]	; 1078 <MW_update+0x254>
     f14:	ee87 5b06 	vdiv.f64	d5, d7, d6
     f18:	4b59      	ldr	r3, [pc, #356]	; (1080 <MW_update+0x25c>)
     f1a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
     f1e:	495d      	ldr	r1, [pc, #372]	; (1094 <MW_update+0x270>)
     f20:	8809      	ldrh	r1, [r1, #0]
     f22:	b289      	uxth	r1, r1
     f24:	9102      	str	r1, [sp, #8]
     f26:	e9cd 2300 	strd	r2, r3, [sp]
     f2a:	ec53 2b15 	vmov	r2, r3, d5
     f2e:	485a      	ldr	r0, [pc, #360]	; (1098 <MW_update+0x274>)
     f30:	f000 fb12 	bl	1558 <__printf_veneer>
				/* Check if the ADC registered the correct number of samples */
				uint16_t expected_samples = mw_sweep_settings.pop_cycles_per_point * (mw_sweep_settings.num_steps + 1);
     f34:	4b52      	ldr	r3, [pc, #328]	; (1080 <MW_update+0x25c>)
     f36:	695b      	ldr	r3, [r3, #20]
     f38:	b29a      	uxth	r2, r3
     f3a:	4b51      	ldr	r3, [pc, #324]	; (1080 <MW_update+0x25c>)
     f3c:	68db      	ldr	r3, [r3, #12]
     f3e:	3301      	adds	r3, #1
     f40:	b29b      	uxth	r3, r3
     f42:	fb12 f303 	smulbb	r3, r2, r3
     f46:	80fb      	strh	r3, [r7, #6]
				uint16_t possible_samples = expected_samples + mw_sweep_settings.num_steps + 1;
     f48:	4b4d      	ldr	r3, [pc, #308]	; (1080 <MW_update+0x25c>)
     f4a:	68db      	ldr	r3, [r3, #12]
     f4c:	b29a      	uxth	r2, r3
     f4e:	88fb      	ldrh	r3, [r7, #6]
     f50:	4413      	add	r3, r2
     f52:	b29b      	uxth	r3, r3
     f54:	3301      	adds	r3, #1
     f56:	80bb      	strh	r3, [r7, #4]
//				printf("Sweep generated %u full POP cycles and registered %u samples\r\n", expected_samples, sample_count);
				if ((sample_count == expected_samples) || (sample_count == possible_samples)) {
     f58:	4b4e      	ldr	r3, [pc, #312]	; (1094 <MW_update+0x270>)
     f5a:	881b      	ldrh	r3, [r3, #0]
     f5c:	b29b      	uxth	r3, r3
     f5e:	88fa      	ldrh	r2, [r7, #6]
     f60:	429a      	cmp	r2, r3
     f62:	d010      	beq.n	f86 <MW_update+0x162>
     f64:	4b4b      	ldr	r3, [pc, #300]	; (1094 <MW_update+0x270>)
     f66:	881b      	ldrh	r3, [r3, #0]
     f68:	b29b      	uxth	r3, r3
     f6a:	88ba      	ldrh	r2, [r7, #4]
     f6c:	429a      	cmp	r2, r3
     f6e:	d00a      	beq.n	f86 <MW_update+0x162>
					#ifdef MW_VERBOSE
					printf("Sweep generated and successfully registered %u samples\r\n", sample_count);
					#endif //MW_VERBOSE
				} else {
					printf("Warning - sweep generated %u samples but %u registered\r\n", expected_samples, sample_count);
     f70:	88fb      	ldrh	r3, [r7, #6]
     f72:	4a48      	ldr	r2, [pc, #288]	; (1094 <MW_update+0x270>)
     f74:	8812      	ldrh	r2, [r2, #0]
     f76:	b292      	uxth	r2, r2
     f78:	4619      	mov	r1, r3
     f7a:	4848      	ldr	r0, [pc, #288]	; (109c <MW_update+0x278>)
     f7c:	f000 faec 	bl	1558 <__printf_veneer>
					printf("Timing of last sample is marginal\r\n");
     f80:	4847      	ldr	r0, [pc, #284]	; (10a0 <MW_update+0x27c>)
     f82:	f000 facd 	bl	1520 <__puts_veneer>
//				printf("MW processing time: %lu us\r\n", measured_processing_time_us);
//				if ((double)(measured_processing_time_us)/MW_PROCESSING_TIME_US > 1.1) {
//					printf("Warning - measured MW processing time (%lu us)is larger than the %lu us expected\r\n", measured_processing_time_us, MW_PROCESSING_TIME_US);
//				}
				#endif //MW_VERBOSE
				if (mw_sweep_settings.sweep_mode == SWEEP_ONCE) {//have reached the end of a single sweep and should stop
     f86:	4b3e      	ldr	r3, [pc, #248]	; (1080 <MW_update+0x25c>)
     f88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
     f8c:	2b02      	cmp	r3, #2
     f8e:	d103      	bne.n	f98 <MW_update+0x174>
					mw_sweep_settings.state = MW_STOPPED;
     f90:	4b3b      	ldr	r3, [pc, #236]	; (1080 <MW_update+0x25c>)
     f92:	2200      	movs	r2, #0
     f94:	701a      	strb	r2, [r3, #0]
						printf("Failure to program value to DAC \r\n");
						Error_Handler();
					}
				#endif //RAMP_DAC
			}
			break;
     f96:	e069      	b.n	106c <MW_update+0x248>
					start_MW_sweep(false); //restart the next MW sweep without updating mw_sweep_settings.sweep_mode
     f98:	2000      	movs	r0, #0
     f9a:	f7ff fee5 	bl	d68 <start_MW_sweep>
			break;
     f9e:	e065      	b.n	106c <MW_update+0x248>
				mw_sweep_settings.current_point++; //increment point counter
     fa0:	4b37      	ldr	r3, [pc, #220]	; (1080 <MW_update+0x25c>)
     fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     fa4:	3301      	adds	r3, #1
     fa6:	4a36      	ldr	r2, [pc, #216]	; (1080 <MW_update+0x25c>)
     fa8:	6253      	str	r3, [r2, #36]	; 0x24
				uint32_t local_NFRAC = mw_sweep_settings.NFRAC_start + mw_sweep_settings.step_size * mw_sweep_settings.current_point;
     faa:	4b35      	ldr	r3, [pc, #212]	; (1080 <MW_update+0x25c>)
     fac:	689a      	ldr	r2, [r3, #8]
     fae:	4b34      	ldr	r3, [pc, #208]	; (1080 <MW_update+0x25c>)
     fb0:	691b      	ldr	r3, [r3, #16]
     fb2:	4933      	ldr	r1, [pc, #204]	; (1080 <MW_update+0x25c>)
     fb4:	6a49      	ldr	r1, [r1, #36]	; 0x24
     fb6:	fb01 f303 	mul.w	r3, r1, r3
     fba:	4413      	add	r3, r2
     fbc:	60fb      	str	r3, [r7, #12]
				set_freq_regs(mw_sweep_settings.NINT, local_NFRAC, mw_sweep_settings.k); //program new MW frequency
     fbe:	4b30      	ldr	r3, [pc, #192]	; (1080 <MW_update+0x25c>)
     fc0:	685b      	ldr	r3, [r3, #4]
     fc2:	4a2f      	ldr	r2, [pc, #188]	; (1080 <MW_update+0x25c>)
     fc4:	7852      	ldrb	r2, [r2, #1]
     fc6:	68f9      	ldr	r1, [r7, #12]
     fc8:	4618      	mov	r0, r3
     fca:	f7ff fa2d 	bl	428 <set_freq_regs>
				start_timer(MW_TIMER); //Restart timer for MW stabilisation time
     fce:	4b2d      	ldr	r3, [pc, #180]	; (1084 <MW_update+0x260>)
     fd0:	681b      	ldr	r3, [r3, #0]
     fd2:	4618      	mov	r0, r3
     fd4:	f000 f97a 	bl	12cc <start_timer>
			break;
     fd8:	e048      	b.n	106c <MW_update+0x248>

		case MW_CALIBRATE: //Measures the elapsed time taken for 101 samples (100 POP cycles)
			if (sample_count >= 100) {//100 or more POP cycles have elapsed
     fda:	4b2e      	ldr	r3, [pc, #184]	; (1094 <MW_update+0x270>)
     fdc:	881b      	ldrh	r3, [r3, #0]
     fde:	b29b      	uxth	r3, r3
     fe0:	2b63      	cmp	r3, #99	; 0x63
     fe2:	d942      	bls.n	106a <MW_update+0x246>
				uint32_t total_POP_cal_period = check_timer(MW_TIMER);
     fe4:	4b27      	ldr	r3, [pc, #156]	; (1084 <MW_update+0x260>)
     fe6:	681b      	ldr	r3, [r3, #0]
     fe8:	4618      	mov	r0, r3
     fea:	f000 f99f 	bl	132c <check_timer>
     fee:	6138      	str	r0, [r7, #16]
				POP_period_us = (float)(total_POP_cal_period) / 100 + 0.5;
     ff0:	693b      	ldr	r3, [r7, #16]
     ff2:	ee07 3a90 	vmov	s15, r3
     ff6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
     ffa:	eddf 6a2a 	vldr	s13, [pc, #168]	; 10a4 <MW_update+0x280>
     ffe:	eec7 7a26 	vdiv.f32	s15, s14, s13
    1002:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
    1006:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    100a:	ee37 7b06 	vadd.f64	d7, d7, d6
    100e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1012:	ee17 2a90 	vmov	r2, s15
    1016:	4b24      	ldr	r3, [pc, #144]	; (10a8 <MW_update+0x284>)
    1018:	601a      	str	r2, [r3, #0]
				stop_timer(MW_TIMER);
    101a:	4b1a      	ldr	r3, [pc, #104]	; (1084 <MW_update+0x260>)
    101c:	681b      	ldr	r3, [r3, #0]
    101e:	4618      	mov	r0, r3
    1020:	f000 f972 	bl	1308 <stop_timer>
				printf("POP period, averaged over 100 cycles: %lu us\r\n", POP_period_us);
    1024:	4b20      	ldr	r3, [pc, #128]	; (10a8 <MW_update+0x284>)
    1026:	681b      	ldr	r3, [r3, #0]
    1028:	4619      	mov	r1, r3
    102a:	4820      	ldr	r0, [pc, #128]	; (10ac <MW_update+0x288>)
    102c:	f000 fa94 	bl	1558 <__printf_veneer>
				action_taken = true;
    1030:	2301      	movs	r3, #1
    1032:	75fb      	strb	r3, [r7, #23]
				if (mw_sweep_settings.sweep_mode == POP_CAL_ONLY) {//have reached the end of calibration and should stop
    1034:	4b12      	ldr	r3, [pc, #72]	; (1080 <MW_update+0x25c>)
    1036:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
    103a:	2b01      	cmp	r3, #1
    103c:	d103      	bne.n	1046 <MW_update+0x222>
					mw_sweep_settings.state = MW_STOPPED;
    103e:	4b10      	ldr	r3, [pc, #64]	; (1080 <MW_update+0x25c>)
    1040:	2200      	movs	r2, #0
    1042:	701a      	strb	r2, [r3, #0]
				} else {
						start_MW_sweep(false); //start MW_sweep without updating mw_sweep_settings.sweep_mode
				}
			}
			break;
    1044:	e011      	b.n	106a <MW_update+0x246>
						start_MW_sweep(false); //start MW_sweep without updating mw_sweep_settings.sweep_mode
    1046:	2000      	movs	r0, #0
    1048:	f7ff fe8e 	bl	d68 <start_MW_sweep>
			break;
    104c:	e00d      	b.n	106a <MW_update+0x246>

		default: // Other state
	       printf("MW_update has detected illegal state: %u \r\n", mw_sweep_settings.state);
    104e:	4b0c      	ldr	r3, [pc, #48]	; (1080 <MW_update+0x25c>)
    1050:	781b      	ldrb	r3, [r3, #0]
    1052:	4619      	mov	r1, r3
    1054:	4816      	ldr	r0, [pc, #88]	; (10b0 <MW_update+0x28c>)
    1056:	f000 fa7f 	bl	1558 <__printf_veneer>
	       printf("local version: %u \r\n", local_copy_of_MW_state);
    105a:	7dbb      	ldrb	r3, [r7, #22]
    105c:	4619      	mov	r1, r3
    105e:	4815      	ldr	r0, [pc, #84]	; (10b4 <MW_update+0x290>)
    1060:	f000 fa7a 	bl	1558 <__printf_veneer>
    1064:	e002      	b.n	106c <MW_update+0x248>
			break; //no action to take
    1066:	bf00      	nop
    1068:	e000      	b.n	106c <MW_update+0x248>
			break;
    106a:	bf00      	nop
	}
    return(action_taken);
    106c:	7dfb      	ldrb	r3, [r7, #23]
}
    106e:	4618      	mov	r0, r3
    1070:	3718      	adds	r7, #24
    1072:	46bd      	mov	sp, r7
    1074:	bd80      	pop	{r7, pc}
    1076:	bf00      	nop
    1078:	00000000 	.word	0x00000000
    107c:	412e8480 	.word	0x412e8480
    1080:	200005b0 	.word	0x200005b0
    1084:	2000001c 	.word	0x2000001c
    1088:	58020400 	.word	0x58020400
    108c:	58021800 	.word	0x58021800
    1090:	20000020 	.word	0x20000020
    1094:	2000059e 	.word	0x2000059e
    1098:	0801c24c 	.word	0x0801c24c
    109c:	0801c284 	.word	0x0801c284
    10a0:	0801c2c0 	.word	0x0801c2c0
    10a4:	42c80000 	.word	0x42c80000
    10a8:	200005a0 	.word	0x200005a0
    10ac:	0801c2e4 	.word	0x0801c2e4
    10b0:	0801c314 	.word	0x0801c314
    10b4:	0801c340 	.word	0x0801c340

000010b8 <MW_frequency_toggle>:
//}

/* Function to check MW settling time
 * Toggles between two MW frequencies
 */
void MW_frequency_toggle (const double f_one, const double f_two) {
    10b8:	b580      	push	{r7, lr}
    10ba:	b090      	sub	sp, #64	; 0x40
    10bc:	af02      	add	r7, sp, #8
    10be:	ed87 0b02 	vstr	d0, [r7, #8]
    10c2:	ed87 1b00 	vstr	d1, [r7]
	printf("MW frequency toggling experiment\r\n");
    10c6:	486a      	ldr	r0, [pc, #424]	; (1270 <MW_frequency_toggle+0x1b8>)
    10c8:	f000 fa2a 	bl	1520 <__puts_veneer>
	printf("Toggling between %.10g and %.10g GHz\r\n", f_one/1000000000, f_two/1000000000);
    10cc:	ed97 7b02 	vldr	d7, [r7, #8]
    10d0:	ed9f 6b5f 	vldr	d6, [pc, #380]	; 1250 <MW_frequency_toggle+0x198>
    10d4:	ee87 4b06 	vdiv.f64	d4, d7, d6
    10d8:	ed97 6b00 	vldr	d6, [r7]
    10dc:	ed9f 5b5c 	vldr	d5, [pc, #368]	; 1250 <MW_frequency_toggle+0x198>
    10e0:	ee86 7b05 	vdiv.f64	d7, d6, d5
    10e4:	ed8d 7b00 	vstr	d7, [sp]
    10e8:	ec53 2b14 	vmov	r2, r3, d4
    10ec:	4861      	ldr	r0, [pc, #388]	; (1274 <MW_frequency_toggle+0x1bc>)
    10ee:	f000 fa33 	bl	1558 <__printf_veneer>

	/* For the k divider we need to find the smallest even integer or use a max of 62*/
	uint32_t k_one = VCO_MAX_FREQ / f_one;
    10f2:	ed9f 5b59 	vldr	d5, [pc, #356]	; 1258 <MW_frequency_toggle+0x1a0>
    10f6:	ed97 6b02 	vldr	d6, [r7, #8]
    10fa:	ee85 7b06 	vdiv.f64	d7, d5, d6
    10fe:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1102:	ee17 3a90 	vmov	r3, s15
    1106:	637b      	str	r3, [r7, #52]	; 0x34
	if (k_one != 1) {
    1108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    110a:	2b01      	cmp	r3, #1
    110c:	d00b      	beq.n	1126 <MW_frequency_toggle+0x6e>
		while (k_one > 62 || k_one % 2) {
    110e:	e002      	b.n	1116 <MW_frequency_toggle+0x5e>
			k_one--;
    1110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1112:	3b01      	subs	r3, #1
    1114:	637b      	str	r3, [r7, #52]	; 0x34
		while (k_one > 62 || k_one % 2) {
    1116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1118:	2b3e      	cmp	r3, #62	; 0x3e
    111a:	d8f9      	bhi.n	1110 <MW_frequency_toggle+0x58>
    111c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    111e:	f003 0301 	and.w	r3, r3, #1
    1122:	2b00      	cmp	r3, #0
    1124:	d1f4      	bne.n	1110 <MW_frequency_toggle+0x58>
		}
	}
	uint32_t k_two = VCO_MAX_FREQ / f_two;
    1126:	ed9f 5b4c 	vldr	d5, [pc, #304]	; 1258 <MW_frequency_toggle+0x1a0>
    112a:	ed97 6b00 	vldr	d6, [r7]
    112e:	ee85 7b06 	vdiv.f64	d7, d5, d6
    1132:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1136:	ee17 3a90 	vmov	r3, s15
    113a:	633b      	str	r3, [r7, #48]	; 0x30
	if (k_two != 1) {
    113c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    113e:	2b01      	cmp	r3, #1
    1140:	d00b      	beq.n	115a <MW_frequency_toggle+0xa2>
		while (k_two > 62 || k_two % 2) {
    1142:	e002      	b.n	114a <MW_frequency_toggle+0x92>
			k_two--;
    1144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1146:	3b01      	subs	r3, #1
    1148:	633b      	str	r3, [r7, #48]	; 0x30
		while (k_two > 62 || k_two % 2) {
    114a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    114c:	2b3e      	cmp	r3, #62	; 0x3e
    114e:	d8f9      	bhi.n	1144 <MW_frequency_toggle+0x8c>
    1150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1152:	f003 0301 	and.w	r3, r3, #1
    1156:	2b00      	cmp	r3, #0
    1158:	d1f4      	bne.n	1144 <MW_frequency_toggle+0x8c>
		}
	}

	const double N_one = ((f_one * k_one) / REF_FREQ);
    115a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    115c:	ee07 3a90 	vmov	s15, r3
    1160:	eeb8 6b67 	vcvt.f64.u32	d6, s15
    1164:	ed97 7b02 	vldr	d7, [r7, #8]
    1168:	ee26 6b07 	vmul.f64	d6, d6, d7
    116c:	ed9f 5b3c 	vldr	d5, [pc, #240]	; 1260 <MW_frequency_toggle+0x1a8>
    1170:	ee86 7b05 	vdiv.f64	d7, d6, d5
    1174:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	const double N_two = ((f_two * k_two) / REF_FREQ);
    1178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    117a:	ee07 3a90 	vmov	s15, r3
    117e:	eeb8 6b67 	vcvt.f64.u32	d6, s15
    1182:	ed97 7b00 	vldr	d7, [r7]
    1186:	ee26 6b07 	vmul.f64	d6, d6, d7
    118a:	ed9f 5b35 	vldr	d5, [pc, #212]	; 1260 <MW_frequency_toggle+0x1a8>
    118e:	ee86 7b05 	vdiv.f64	d7, d6, d5
    1192:	ed87 7b08 	vstr	d7, [r7, #32]

	/* Extract the fractional and integer parts */
	const uint32_t N_one_INT = N_one;
    1196:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
    119a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    119e:	ee17 3a90 	vmov	r3, s15
    11a2:	61fb      	str	r3, [r7, #28]
	const uint32_t N_one_FRAC = ((N_one - N_one_INT) * (1 << 24)) + 0.5;
    11a4:	69fb      	ldr	r3, [r7, #28]
    11a6:	ee07 3a90 	vmov	s15, r3
    11aa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    11ae:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
    11b2:	ee36 7b47 	vsub.f64	d7, d6, d7
    11b6:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 1268 <MW_frequency_toggle+0x1b0>
    11ba:	ee27 7b06 	vmul.f64	d7, d7, d6
    11be:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    11c2:	ee37 7b06 	vadd.f64	d7, d7, d6
    11c6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    11ca:	ee17 3a90 	vmov	r3, s15
    11ce:	61bb      	str	r3, [r7, #24]
	const uint32_t N_two_INT = N_two;
    11d0:	ed97 7b08 	vldr	d7, [r7, #32]
    11d4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    11d8:	ee17 3a90 	vmov	r3, s15
    11dc:	617b      	str	r3, [r7, #20]
	const uint32_t N_two_FRAC = ((N_two - N_two_INT) * (1 << 24)) + 0.5;
    11de:	697b      	ldr	r3, [r7, #20]
    11e0:	ee07 3a90 	vmov	s15, r3
    11e4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    11e8:	ed97 6b08 	vldr	d6, [r7, #32]
    11ec:	ee36 7b47 	vsub.f64	d7, d6, d7
    11f0:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 1268 <MW_frequency_toggle+0x1b0>
    11f4:	ee27 7b06 	vmul.f64	d7, d7, d6
    11f8:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    11fc:	ee37 7b06 	vadd.f64	d7, d7, d6
    1200:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1204:	ee17 3a90 	vmov	r3, s15
    1208:	613b      	str	r3, [r7, #16]

	while (1) {
	set_freq_regs(N_one_INT, N_one_FRAC, k_one); //Program necessary values for f_one
    120a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    120c:	69b9      	ldr	r1, [r7, #24]
    120e:	69f8      	ldr	r0, [r7, #28]
    1210:	f7ff f90a 	bl	428 <set_freq_regs>
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET); // Sets trigger output low
    1214:	2200      	movs	r2, #0
    1216:	2101      	movs	r1, #1
    1218:	4817      	ldr	r0, [pc, #92]	; (1278 <MW_frequency_toggle+0x1c0>)
    121a:	f000 f98d 	bl	1538 <__HAL_GPIO_WritePin_veneer>
	timer_delay(SLOW_TIMER, 100); //10ms delay
    121e:	4b17      	ldr	r3, [pc, #92]	; (127c <MW_frequency_toggle+0x1c4>)
    1220:	681b      	ldr	r3, [r3, #0]
    1222:	2164      	movs	r1, #100	; 0x64
    1224:	4618      	mov	r0, r3
    1226:	f000 f88d 	bl	1344 <timer_delay>
	set_freq_regs(N_two_INT, N_two_FRAC, k_two); //Program necessary values for f_two
    122a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    122c:	6939      	ldr	r1, [r7, #16]
    122e:	6978      	ldr	r0, [r7, #20]
    1230:	f7ff f8fa 	bl	428 <set_freq_regs>
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
    1234:	2201      	movs	r2, #1
    1236:	2101      	movs	r1, #1
    1238:	480f      	ldr	r0, [pc, #60]	; (1278 <MW_frequency_toggle+0x1c0>)
    123a:	f000 f97d 	bl	1538 <__HAL_GPIO_WritePin_veneer>
	timer_delay(SLOW_TIMER, 100); //10ms delay
    123e:	4b0f      	ldr	r3, [pc, #60]	; (127c <MW_frequency_toggle+0x1c4>)
    1240:	681b      	ldr	r3, [r3, #0]
    1242:	2164      	movs	r1, #100	; 0x64
    1244:	4618      	mov	r0, r3
    1246:	f000 f87d 	bl	1344 <timer_delay>
	set_freq_regs(N_one_INT, N_one_FRAC, k_one); //Program necessary values for f_one
    124a:	e7de      	b.n	120a <MW_frequency_toggle+0x152>
    124c:	f3af 8000 	nop.w
    1250:	00000000 	.word	0x00000000
    1254:	41cdcd65 	.word	0x41cdcd65
    1258:	20000000 	.word	0x20000000
    125c:	41ee8c21 	.word	0x41ee8c21
    1260:	00000000 	.word	0x00000000
    1264:	4187d784 	.word	0x4187d784
    1268:	00000000 	.word	0x00000000
    126c:	41700000 	.word	0x41700000
    1270:	0801c358 	.word	0x0801c358
    1274:	0801c37c 	.word	0x0801c37c
    1278:	58021800 	.word	0x58021800
    127c:	20000018 	.word	0x20000018

00001280 <set_SDO_output>:
/* Selects SDO pin connectivity/functionality
 * By default, the SDO pin will output 'Lock detect' but can be connected
 * to other internal signals. See table 2.15 of HMC835 datasheet (v04.1113)
 * for more details all options
 */
 void set_SDO_output(const uint32_t GPO_setting) {
    1280:	b580      	push	{r7, lr}
    1282:	b084      	sub	sp, #16
    1284:	af00      	add	r7, sp, #0
    1286:	6078      	str	r0, [r7, #4]
	//Default output on SDO pin is 'Lock detect output', value 0x01
	//VCO divider is 0x0A
	//See table 2.15 of HMC835 datasheet for more details (v04.1113)
	uint32_t read_data = 0x0;
    1288:	2300      	movs	r3, #0
    128a:	60fb      	str	r3, [r7, #12]

	if (GPO_setting > 31) {
    128c:	687b      	ldr	r3, [r7, #4]
    128e:	2b1f      	cmp	r3, #31
    1290:	d904      	bls.n	129c <set_SDO_output+0x1c>
		printf("SDO pin value must be less that 32\r\n");
    1292:	480d      	ldr	r0, [pc, #52]	; (12c8 <set_SDO_output+0x48>)
    1294:	f000 f944 	bl	1520 <__puts_veneer>
		Error_Handler();
    1298:	f000 f962 	bl	1560 <__Error_Handler_veneer>
	}
	read_data = synth_readreg(GPO_REGISTER); // Get the current value.
    129c:	200f      	movs	r0, #15
    129e:	f7fe ff29 	bl	f4 <synth_readreg>
    12a2:	60f8      	str	r0, [r7, #12]
	read_data &= 0xFFFFFFE0; // Zero the first 5 LSBs.
    12a4:	68fb      	ldr	r3, [r7, #12]
    12a6:	f023 031f 	bic.w	r3, r3, #31
    12aa:	60fb      	str	r3, [r7, #12]
	//read_data |= 0x0A; //Select VCO divider output
	read_data |= GPO_setting; //Select GPO output dependent on function input value
    12ac:	68fa      	ldr	r2, [r7, #12]
    12ae:	687b      	ldr	r3, [r7, #4]
    12b0:	4313      	orrs	r3, r2
    12b2:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, GPO_REGISTER, 0x0, VERIFY); // Update the GPO register.
    12b4:	2301      	movs	r3, #1
    12b6:	2200      	movs	r2, #0
    12b8:	210f      	movs	r1, #15
    12ba:	68f8      	ldr	r0, [r7, #12]
    12bc:	f7fe fea0 	bl	0 <synth_writereg>
}
    12c0:	bf00      	nop
    12c2:	3710      	adds	r7, #16
    12c4:	46bd      	mov	sp, r7
    12c6:	bd80      	pop	{r7, pc}
    12c8:	0801c3a4 	.word	0x0801c3a4

000012cc <start_timer>:

/**
  * @brief  Starts a timer.
  * @retval uint32_t
  */
uint32_t start_timer(TIM_TypeDef * timer) {
    12cc:	b480      	push	{r7}
    12ce:	b083      	sub	sp, #12
    12d0:	af00      	add	r7, sp, #0
    12d2:	6078      	str	r0, [r7, #4]

	timer->CR1 &= ~(TIM_CR1_CEN);
    12d4:	687b      	ldr	r3, [r7, #4]
    12d6:	681b      	ldr	r3, [r3, #0]
    12d8:	f023 0201 	bic.w	r2, r3, #1
    12dc:	687b      	ldr	r3, [r7, #4]
    12de:	601a      	str	r2, [r3, #0]
	timer->EGR |= TIM_EGR_UG;  // Reset CNT and PSC
    12e0:	687b      	ldr	r3, [r7, #4]
    12e2:	695b      	ldr	r3, [r3, #20]
    12e4:	f043 0201 	orr.w	r2, r3, #1
    12e8:	687b      	ldr	r3, [r7, #4]
    12ea:	615a      	str	r2, [r3, #20]
	timer->CR1 |= TIM_CR1_CEN;
    12ec:	687b      	ldr	r3, [r7, #4]
    12ee:	681b      	ldr	r3, [r3, #0]
    12f0:	f043 0201 	orr.w	r2, r3, #1
    12f4:	687b      	ldr	r3, [r7, #4]
    12f6:	601a      	str	r2, [r3, #0]
	//printf("Started timer with returned CNT value: %ld \r\n", timer->CNT);
	return timer->CNT;
    12f8:	687b      	ldr	r3, [r7, #4]
    12fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    12fc:	4618      	mov	r0, r3
    12fe:	370c      	adds	r7, #12
    1300:	46bd      	mov	sp, r7
    1302:	f85d 7b04 	ldr.w	r7, [sp], #4
    1306:	4770      	bx	lr

00001308 <stop_timer>:

/**
  * @brief  Stops a timer.
  * @retval uint32_t
  */
uint32_t stop_timer(TIM_TypeDef *timer) {
    1308:	b480      	push	{r7}
    130a:	b083      	sub	sp, #12
    130c:	af00      	add	r7, sp, #0
    130e:	6078      	str	r0, [r7, #4]

	timer->CR1 &= ~(TIM_CR1_CEN);
    1310:	687b      	ldr	r3, [r7, #4]
    1312:	681b      	ldr	r3, [r3, #0]
    1314:	f023 0201 	bic.w	r2, r3, #1
    1318:	687b      	ldr	r3, [r7, #4]
    131a:	601a      	str	r2, [r3, #0]
	return timer->CNT;
    131c:	687b      	ldr	r3, [r7, #4]
    131e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    1320:	4618      	mov	r0, r3
    1322:	370c      	adds	r7, #12
    1324:	46bd      	mov	sp, r7
    1326:	f85d 7b04 	ldr.w	r7, [sp], #4
    132a:	4770      	bx	lr

0000132c <check_timer>:
/**
  * @brief  Returns timer counter value
  * @param  Timer
  * @retval Counter value
  */
uint32_t check_timer(TIM_TypeDef *timer) {
    132c:	b480      	push	{r7}
    132e:	b083      	sub	sp, #12
    1330:	af00      	add	r7, sp, #0
    1332:	6078      	str	r0, [r7, #4]

	return timer->CNT;
    1334:	687b      	ldr	r3, [r7, #4]
    1336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    1338:	4618      	mov	r0, r3
    133a:	370c      	adds	r7, #12
    133c:	46bd      	mov	sp, r7
    133e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1342:	4770      	bx	lr

00001344 <timer_delay>:

/**
  * @brief  Uses a H/W timer to loop for the cycle count requested.
  */
void timer_delay(TIM_TypeDef *timer, const uint32_t delay_count){
    1344:	b580      	push	{r7, lr}
    1346:	b084      	sub	sp, #16
    1348:	af00      	add	r7, sp, #0
    134a:	6078      	str	r0, [r7, #4]
    134c:	6039      	str	r1, [r7, #0]
	/* Note that we don't consider overflow.
	 * FAST_TIMER will take approximately 65 ms to overflow.
	 * SLOW_TIMER will take 650ms
	 * MW_TIMER and SWEEP_TIMER will take 71 minutes */

	uint32_t start = start_timer(timer);
    134e:	6878      	ldr	r0, [r7, #4]
    1350:	f7ff ffbc 	bl	12cc <start_timer>
    1354:	60f8      	str	r0, [r7, #12]
//	timer->EGR |= TIM_EGR_UG;  // Reset CNT and PSC
//	timer->CR1 |= TIM_CR1_CEN; // Enable the timer
//	uint32_t start = timer->CNT; // Get the start value of the timer

//	while((timer->CNT - start) < delay_count){} // Loop until delay_us has expired
	while(timer->CNT < delay_count){} // Loop until delay_us has expired
    1356:	bf00      	nop
    1358:	687b      	ldr	r3, [r7, #4]
    135a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    135c:	683a      	ldr	r2, [r7, #0]
    135e:	429a      	cmp	r2, r3
    1360:	d8fa      	bhi.n	1358 <timer_delay+0x14>

	stop_timer(timer);
    1362:	6878      	ldr	r0, [r7, #4]
    1364:	f7ff ffd0 	bl	1308 <stop_timer>
//	timer->CR1 &= ~(TIM_CR1_CEN); // Disable the timer

}
    1368:	bf00      	nop
    136a:	3710      	adds	r7, #16
    136c:	46bd      	mov	sp, r7
    136e:	bd80      	pop	{r7, pc}

00001370 <measure_POP_cycle>:
/**
  * @brief  Returns the measured period of a POP cycle as averaged over 20 cycles
  * @param  None
  * @retval Period expressed as an integer number of microseconds
  */
uint32_t measure_POP_cycle(void){
    1370:	b580      	push	{r7, lr}
    1372:	b086      	sub	sp, #24
    1374:	af00      	add	r7, sp, #0

	/* Measures the elapsed time taken for 20 POP cycles
	 * Relies on the ADC value changing every time a sample is taken
	 * ADC must be initialised before running
	 */
	uint32_t adc_value = 0;
    1376:	2300      	movs	r3, #0
    1378:	617b      	str	r3, [r7, #20]
	uint32_t last_adc_value = 9999;
    137a:	f242 730f 	movw	r3, #9999	; 0x270f
    137e:	613b      	str	r3, [r7, #16]
	uint8_t cycle_count = 0;
    1380:	2300      	movs	r3, #0
    1382:	73fb      	strb	r3, [r7, #15]
	uint32_t period;
	const uint8_t iterations = 20;
    1384:	2314      	movs	r3, #20
    1386:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); 	//Sets MW_invalid pin high to reset POP cycle
    1388:	2201      	movs	r2, #1
    138a:	2102      	movs	r1, #2
    138c:	4826      	ldr	r0, [pc, #152]	; (1428 <measure_POP_cycle+0xb8>)
    138e:	f000 f8d3 	bl	1538 <__HAL_GPIO_WritePin_veneer>
	start_timer(MW_TIMER); //reset MW_timer and start counting
    1392:	4b26      	ldr	r3, [pc, #152]	; (142c <measure_POP_cycle+0xbc>)
    1394:	681b      	ldr	r3, [r3, #0]
    1396:	4618      	mov	r0, r3
    1398:	f7ff ff98 	bl	12cc <start_timer>
	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); //Start POP cycle
    139c:	2200      	movs	r2, #0
    139e:	2102      	movs	r1, #2
    13a0:	4821      	ldr	r0, [pc, #132]	; (1428 <measure_POP_cycle+0xb8>)
    13a2:	f000 f8c9 	bl	1538 <__HAL_GPIO_WritePin_veneer>

	// get the ADC conversion value
	adc_value = HAL_ADC_GetValue(&hadc3);
    13a6:	4822      	ldr	r0, [pc, #136]	; (1430 <measure_POP_cycle+0xc0>)
    13a8:	f000 f8be 	bl	1528 <__HAL_ADC_GetValue_veneer>
    13ac:	6178      	str	r0, [r7, #20]
	while (cycle_count < iterations) {
    13ae:	e00c      	b.n	13ca <measure_POP_cycle+0x5a>
		while (adc_value == last_adc_value) {
			adc_value = HAL_ADC_GetValue(&hadc3); //keep reading ADC until value changes
    13b0:	481f      	ldr	r0, [pc, #124]	; (1430 <measure_POP_cycle+0xc0>)
    13b2:	f000 f8b9 	bl	1528 <__HAL_ADC_GetValue_veneer>
    13b6:	6178      	str	r0, [r7, #20]
		while (adc_value == last_adc_value) {
    13b8:	697a      	ldr	r2, [r7, #20]
    13ba:	693b      	ldr	r3, [r7, #16]
    13bc:	429a      	cmp	r2, r3
    13be:	d0f7      	beq.n	13b0 <measure_POP_cycle+0x40>
		}
		last_adc_value = adc_value;
    13c0:	697b      	ldr	r3, [r7, #20]
    13c2:	613b      	str	r3, [r7, #16]
		cycle_count++;
    13c4:	7bfb      	ldrb	r3, [r7, #15]
    13c6:	3301      	adds	r3, #1
    13c8:	73fb      	strb	r3, [r7, #15]
	while (cycle_count < iterations) {
    13ca:	7bfa      	ldrb	r2, [r7, #15]
    13cc:	7bbb      	ldrb	r3, [r7, #14]
    13ce:	429a      	cmp	r2, r3
    13d0:	d3f2      	bcc.n	13b8 <measure_POP_cycle+0x48>
	}

	uint32_t total_period = check_timer(MW_TIMER);
    13d2:	4b16      	ldr	r3, [pc, #88]	; (142c <measure_POP_cycle+0xbc>)
    13d4:	681b      	ldr	r3, [r3, #0]
    13d6:	4618      	mov	r0, r3
    13d8:	f7ff ffa8 	bl	132c <check_timer>
    13dc:	60b8      	str	r0, [r7, #8]
	period = (float)(check_timer(MW_TIMER)) / iterations + 0.5;
    13de:	4b13      	ldr	r3, [pc, #76]	; (142c <measure_POP_cycle+0xbc>)
    13e0:	681b      	ldr	r3, [r3, #0]
    13e2:	4618      	mov	r0, r3
    13e4:	f7ff ffa2 	bl	132c <check_timer>
    13e8:	ee07 0a90 	vmov	s15, r0
    13ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
    13f0:	7bbb      	ldrb	r3, [r7, #14]
    13f2:	ee07 3a90 	vmov	s15, r3
    13f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    13fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
    13fe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
    1402:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    1406:	ee37 7b06 	vadd.f64	d7, d7, d6
    140a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    140e:	ee17 3a90 	vmov	r3, s15
    1412:	607b      	str	r3, [r7, #4]
	stop_timer(MW_TIMER);
    1414:	4b05      	ldr	r3, [pc, #20]	; (142c <measure_POP_cycle+0xbc>)
    1416:	681b      	ldr	r3, [r3, #0]
    1418:	4618      	mov	r0, r3
    141a:	f7ff ff75 	bl	1308 <stop_timer>
	#ifdef TIMER_VERBOSE
		printf("Time for %u POP cycles: %lu us\r\n", iterations, total_period);
		printf("POP period: %lu us\r\n", period);
	#endif //TIMER_VERBOSE
	return (period);
    141e:	687b      	ldr	r3, [r7, #4]

}
    1420:	4618      	mov	r0, r3
    1422:	3718      	adds	r7, #24
    1424:	46bd      	mov	sp, r7
    1426:	bd80      	pop	{r7, pc}
    1428:	58020400 	.word	0x58020400
    142c:	2000001c 	.word	0x2000001c
    1430:	2000024c 	.word	0x2000024c

00001434 <start_pop>:

	printf("POP cycle stopped!\r\n");

}

void start_pop() {
    1434:	b580      	push	{r7, lr}
    1436:	af00      	add	r7, sp, #0

	/* Timer A is the LASER enable, Timer E is the microwave pulse */
	if (HAL_HRTIM_WaveformOutputStart(&hhrtim,
    1438:	f240 1103 	movw	r1, #259	; 0x103
    143c:	480f      	ldr	r0, [pc, #60]	; (147c <start_pop+0x48>)
    143e:	f000 f867 	bl	1510 <__HAL_HRTIM_WaveformOutputStart_veneer>
    1442:	4603      	mov	r3, r0
    1444:	2b00      	cmp	r3, #0
    1446:	d004      	beq.n	1452 <start_pop+0x1e>
	HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TE1) != HAL_OK) {
		printf("Failed to start POP!\r\n");
    1448:	480d      	ldr	r0, [pc, #52]	; (1480 <start_pop+0x4c>)
    144a:	f000 f869 	bl	1520 <__puts_veneer>
		Error_Handler();
    144e:	f000 f887 	bl	1560 <__Error_Handler_veneer>
		Error_Handler();
	}

#endif

	if (HAL_HRTIM_WaveformCounterStart_IT(&hhrtim,
    1452:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
    1456:	4809      	ldr	r0, [pc, #36]	; (147c <start_pop+0x48>)
    1458:	f000 f872 	bl	1540 <__HAL_HRTIM_WaveformCountStart_IT_veneer>
    145c:	4603      	mov	r3, r0
    145e:	2b00      	cmp	r3, #0
    1460:	d004      	beq.n	146c <start_pop+0x38>
	HRTIM_TIMERID_TIMER_A | HRTIM_TIMERID_TIMER_E) != HAL_OK) {
		printf("POP failure point E!\r\n");
    1462:	4808      	ldr	r0, [pc, #32]	; (1484 <start_pop+0x50>)
    1464:	f000 f85c 	bl	1520 <__puts_veneer>
		Error_Handler();
    1468:	f000 f87a 	bl	1560 <__Error_Handler_veneer>
	}

	pop_running = true;
    146c:	4b06      	ldr	r3, [pc, #24]	; (1488 <start_pop+0x54>)
    146e:	2201      	movs	r2, #1
    1470:	701a      	strb	r2, [r3, #0]

	printf("POP cycle running!\r\n");
    1472:	4806      	ldr	r0, [pc, #24]	; (148c <start_pop+0x58>)
    1474:	f000 f854 	bl	1520 <__puts_veneer>

}
    1478:	bf00      	nop
    147a:	bd80      	pop	{r7, pc}
    147c:	200002c4 	.word	0x200002c4
    1480:	0801c3c8 	.word	0x0801c3c8
    1484:	0801c3e0 	.word	0x0801c3e0
    1488:	20000600 	.word	0x20000600
    148c:	0801c3f8 	.word	0x0801c3f8

00001490 <stop_pop>:
void stop_pop() {
    1490:	b580      	push	{r7, lr}
    1492:	af00      	add	r7, sp, #0
	if (HAL_HRTIM_WaveformOutputStop(&hhrtim,
    1494:	f240 1103 	movw	r1, #259	; 0x103
    1498:	4813      	ldr	r0, [pc, #76]	; (14e8 <stop_pop+0x58>)
    149a:	f000 f855 	bl	1548 <__HAL_HRTIM_WaveformOutputStop_veneer>
    149e:	4603      	mov	r3, r0
    14a0:	2b00      	cmp	r3, #0
    14a2:	d004      	beq.n	14ae <stop_pop+0x1e>
		printf("POP failure point A!\r\n");
    14a4:	4811      	ldr	r0, [pc, #68]	; (14ec <stop_pop+0x5c>)
    14a6:	f000 f83b 	bl	1520 <__puts_veneer>
		Error_Handler();
    14aa:	f000 f859 	bl	1560 <__Error_Handler_veneer>
	if (HAL_HRTIM_WaveformCounterStop_IT(&hhrtim,
    14ae:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
    14b2:	480d      	ldr	r0, [pc, #52]	; (14e8 <stop_pop+0x58>)
    14b4:	f000 f84c 	bl	1550 <__HAL_HRTIM_WaveformCountStop_IT_veneer>
    14b8:	4603      	mov	r3, r0
    14ba:	2b00      	cmp	r3, #0
    14bc:	d004      	beq.n	14c8 <stop_pop+0x38>
		printf("POP failure point B!\r\n");
    14be:	480c      	ldr	r0, [pc, #48]	; (14f0 <stop_pop+0x60>)
    14c0:	f000 f82e 	bl	1520 <__puts_veneer>
		Error_Handler();
    14c4:	f000 f84c 	bl	1560 <__Error_Handler_veneer>
	pop_cycle_count = 0;
    14c8:	4b0a      	ldr	r3, [pc, #40]	; (14f4 <stop_pop+0x64>)
    14ca:	2200      	movs	r2, #0
    14cc:	601a      	str	r2, [r3, #0]
	pop_running = false;
    14ce:	4b0a      	ldr	r3, [pc, #40]	; (14f8 <stop_pop+0x68>)
    14d0:	2200      	movs	r2, #0
    14d2:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0); //turn off amber LED
    14d4:	2200      	movs	r2, #0
    14d6:	2102      	movs	r1, #2
    14d8:	4808      	ldr	r0, [pc, #32]	; (14fc <stop_pop+0x6c>)
    14da:	f000 f82d 	bl	1538 <__HAL_GPIO_WritePin_veneer>
	printf("POP cycle stopped!\r\n");
    14de:	4808      	ldr	r0, [pc, #32]	; (1500 <stop_pop+0x70>)
    14e0:	f000 f81e 	bl	1520 <__puts_veneer>
}
    14e4:	bf00      	nop
    14e6:	bd80      	pop	{r7, pc}
    14e8:	200002c4 	.word	0x200002c4
    14ec:	0801c40c 	.word	0x0801c40c
    14f0:	0801c424 	.word	0x0801c424
    14f4:	200005fc 	.word	0x200005fc
    14f8:	20000600 	.word	0x20000600
    14fc:	58021000 	.word	0x58021000
    1500:	0801c43c 	.word	0x0801c43c
    1504:	00000000 	.word	0x00000000

00001508 <__HAL_Delay_veneer>:
    1508:	f85f f000 	ldr.w	pc, [pc]	; 150c <__HAL_Delay_veneer+0x4>
    150c:	08003ab9 	.word	0x08003ab9

00001510 <__HAL_HRTIM_WaveformOutputStart_veneer>:
    1510:	f85f f000 	ldr.w	pc, [pc]	; 1514 <__HAL_HRTIM_WaveformOutputStart_veneer+0x4>
    1514:	08007ed3 	.word	0x08007ed3

00001518 <__HAL_GPIO_ReadPin_veneer>:
    1518:	f85f f000 	ldr.w	pc, [pc]	; 151c <__HAL_GPIO_ReadPin_veneer+0x4>
    151c:	080077e1 	.word	0x080077e1

00001520 <__puts_veneer>:
    1520:	f85f f000 	ldr.w	pc, [pc]	; 1524 <__puts_veneer+0x4>
    1524:	08019c5d 	.word	0x08019c5d

00001528 <__HAL_ADC_GetValue_veneer>:
    1528:	f85f f000 	ldr.w	pc, [pc]	; 152c <__HAL_ADC_GetValue_veneer+0x4>
    152c:	08004565 	.word	0x08004565

00001530 <__HAL_GPIO_TogglePin_veneer>:
    1530:	f85f f000 	ldr.w	pc, [pc]	; 1534 <__HAL_GPIO_TogglePin_veneer+0x4>
    1534:	08007843 	.word	0x08007843

00001538 <__HAL_GPIO_WritePin_veneer>:
    1538:	f85f f000 	ldr.w	pc, [pc]	; 153c <__HAL_GPIO_WritePin_veneer+0x4>
    153c:	08007811 	.word	0x08007811

00001540 <__HAL_HRTIM_WaveformCountStart_IT_veneer>:
    1540:	f85f f000 	ldr.w	pc, [pc]	; 1544 <__HAL_HRTIM_WaveformCountStart_IT_veneer+0x4>
    1544:	08007f89 	.word	0x08007f89

00001548 <__HAL_HRTIM_WaveformOutputStop_veneer>:
    1548:	f85f f000 	ldr.w	pc, [pc]	; 154c <__HAL_HRTIM_WaveformOutputStop_veneer+0x4>
    154c:	08007f2d 	.word	0x08007f2d

00001550 <__HAL_HRTIM_WaveformCountStop_IT_veneer>:
    1550:	f85f f000 	ldr.w	pc, [pc]	; 1554 <__HAL_HRTIM_WaveformCountStop_IT_veneer+0x4>
    1554:	08008069 	.word	0x08008069

00001558 <__printf_veneer>:
    1558:	f85f f000 	ldr.w	pc, [pc]	; 155c <__printf_veneer+0x4>
    155c:	08019b91 	.word	0x08019b91

00001560 <__Error_Handler_veneer>:
    1560:	f85f f000 	ldr.w	pc, [pc]	; 1564 <__Error_Handler_veneer+0x4>
    1564:	08002c51 	.word	0x08002c51

Disassembly of section .text:

08001800 <__do_global_dtors_aux>:
 8001800:	b510      	push	{r4, lr}
 8001802:	4c05      	ldr	r4, [pc, #20]	; (8001818 <__do_global_dtors_aux+0x18>)
 8001804:	7823      	ldrb	r3, [r4, #0]
 8001806:	b933      	cbnz	r3, 8001816 <__do_global_dtors_aux+0x16>
 8001808:	4b04      	ldr	r3, [pc, #16]	; (800181c <__do_global_dtors_aux+0x1c>)
 800180a:	b113      	cbz	r3, 8001812 <__do_global_dtors_aux+0x12>
 800180c:	4804      	ldr	r0, [pc, #16]	; (8001820 <__do_global_dtors_aux+0x20>)
 800180e:	f3af 8000 	nop.w
 8001812:	2301      	movs	r3, #1
 8001814:	7023      	strb	r3, [r4, #0]
 8001816:	bd10      	pop	{r4, pc}
 8001818:	20000230 	.word	0x20000230
 800181c:	00000000 	.word	0x00000000
 8001820:	0801ba98 	.word	0x0801ba98

08001824 <frame_dummy>:
 8001824:	b508      	push	{r3, lr}
 8001826:	4b03      	ldr	r3, [pc, #12]	; (8001834 <frame_dummy+0x10>)
 8001828:	b11b      	cbz	r3, 8001832 <frame_dummy+0xe>
 800182a:	4903      	ldr	r1, [pc, #12]	; (8001838 <frame_dummy+0x14>)
 800182c:	4803      	ldr	r0, [pc, #12]	; (800183c <frame_dummy+0x18>)
 800182e:	f3af 8000 	nop.w
 8001832:	bd08      	pop	{r3, pc}
 8001834:	00000000 	.word	0x00000000
 8001838:	20000234 	.word	0x20000234
 800183c:	0801ba98 	.word	0x0801ba98

08001840 <memchr>:
 8001840:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8001844:	2a10      	cmp	r2, #16
 8001846:	db2b      	blt.n	80018a0 <memchr+0x60>
 8001848:	f010 0f07 	tst.w	r0, #7
 800184c:	d008      	beq.n	8001860 <memchr+0x20>
 800184e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001852:	3a01      	subs	r2, #1
 8001854:	428b      	cmp	r3, r1
 8001856:	d02d      	beq.n	80018b4 <memchr+0x74>
 8001858:	f010 0f07 	tst.w	r0, #7
 800185c:	b342      	cbz	r2, 80018b0 <memchr+0x70>
 800185e:	d1f6      	bne.n	800184e <memchr+0xe>
 8001860:	b4f0      	push	{r4, r5, r6, r7}
 8001862:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8001866:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800186a:	f022 0407 	bic.w	r4, r2, #7
 800186e:	f07f 0700 	mvns.w	r7, #0
 8001872:	2300      	movs	r3, #0
 8001874:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8001878:	3c08      	subs	r4, #8
 800187a:	ea85 0501 	eor.w	r5, r5, r1
 800187e:	ea86 0601 	eor.w	r6, r6, r1
 8001882:	fa85 f547 	uadd8	r5, r5, r7
 8001886:	faa3 f587 	sel	r5, r3, r7
 800188a:	fa86 f647 	uadd8	r6, r6, r7
 800188e:	faa5 f687 	sel	r6, r5, r7
 8001892:	b98e      	cbnz	r6, 80018b8 <memchr+0x78>
 8001894:	d1ee      	bne.n	8001874 <memchr+0x34>
 8001896:	bcf0      	pop	{r4, r5, r6, r7}
 8001898:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800189c:	f002 0207 	and.w	r2, r2, #7
 80018a0:	b132      	cbz	r2, 80018b0 <memchr+0x70>
 80018a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80018a6:	3a01      	subs	r2, #1
 80018a8:	ea83 0301 	eor.w	r3, r3, r1
 80018ac:	b113      	cbz	r3, 80018b4 <memchr+0x74>
 80018ae:	d1f8      	bne.n	80018a2 <memchr+0x62>
 80018b0:	2000      	movs	r0, #0
 80018b2:	4770      	bx	lr
 80018b4:	3801      	subs	r0, #1
 80018b6:	4770      	bx	lr
 80018b8:	2d00      	cmp	r5, #0
 80018ba:	bf06      	itte	eq
 80018bc:	4635      	moveq	r5, r6
 80018be:	3803      	subeq	r0, #3
 80018c0:	3807      	subne	r0, #7
 80018c2:	f015 0f01 	tst.w	r5, #1
 80018c6:	d107      	bne.n	80018d8 <memchr+0x98>
 80018c8:	3001      	adds	r0, #1
 80018ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80018ce:	bf02      	ittt	eq
 80018d0:	3001      	addeq	r0, #1
 80018d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80018d6:	3001      	addeq	r0, #1
 80018d8:	bcf0      	pop	{r4, r5, r6, r7}
 80018da:	3801      	subs	r0, #1
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop

080018e0 <strlen>:
 80018e0:	4603      	mov	r3, r0
 80018e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80018e6:	2a00      	cmp	r2, #0
 80018e8:	d1fb      	bne.n	80018e2 <strlen+0x2>
 80018ea:	1a18      	subs	r0, r3, r0
 80018ec:	3801      	subs	r0, #1
 80018ee:	4770      	bx	lr

080018f0 <__aeabi_uldivmod>:
 80018f0:	b953      	cbnz	r3, 8001908 <__aeabi_uldivmod+0x18>
 80018f2:	b94a      	cbnz	r2, 8001908 <__aeabi_uldivmod+0x18>
 80018f4:	2900      	cmp	r1, #0
 80018f6:	bf08      	it	eq
 80018f8:	2800      	cmpeq	r0, #0
 80018fa:	bf1c      	itt	ne
 80018fc:	f04f 31ff 	movne.w	r1, #4294967295
 8001900:	f04f 30ff 	movne.w	r0, #4294967295
 8001904:	f000 b970 	b.w	8001be8 <__aeabi_idiv0>
 8001908:	f1ad 0c08 	sub.w	ip, sp, #8
 800190c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001910:	f000 f806 	bl	8001920 <__udivmoddi4>
 8001914:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001918:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800191c:	b004      	add	sp, #16
 800191e:	4770      	bx	lr

08001920 <__udivmoddi4>:
 8001920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001924:	9e08      	ldr	r6, [sp, #32]
 8001926:	460d      	mov	r5, r1
 8001928:	4604      	mov	r4, r0
 800192a:	460f      	mov	r7, r1
 800192c:	2b00      	cmp	r3, #0
 800192e:	d14a      	bne.n	80019c6 <__udivmoddi4+0xa6>
 8001930:	428a      	cmp	r2, r1
 8001932:	4694      	mov	ip, r2
 8001934:	d965      	bls.n	8001a02 <__udivmoddi4+0xe2>
 8001936:	fab2 f382 	clz	r3, r2
 800193a:	b143      	cbz	r3, 800194e <__udivmoddi4+0x2e>
 800193c:	fa02 fc03 	lsl.w	ip, r2, r3
 8001940:	f1c3 0220 	rsb	r2, r3, #32
 8001944:	409f      	lsls	r7, r3
 8001946:	fa20 f202 	lsr.w	r2, r0, r2
 800194a:	4317      	orrs	r7, r2
 800194c:	409c      	lsls	r4, r3
 800194e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001952:	fa1f f58c 	uxth.w	r5, ip
 8001956:	fbb7 f1fe 	udiv	r1, r7, lr
 800195a:	0c22      	lsrs	r2, r4, #16
 800195c:	fb0e 7711 	mls	r7, lr, r1, r7
 8001960:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8001964:	fb01 f005 	mul.w	r0, r1, r5
 8001968:	4290      	cmp	r0, r2
 800196a:	d90a      	bls.n	8001982 <__udivmoddi4+0x62>
 800196c:	eb1c 0202 	adds.w	r2, ip, r2
 8001970:	f101 37ff 	add.w	r7, r1, #4294967295
 8001974:	f080 811c 	bcs.w	8001bb0 <__udivmoddi4+0x290>
 8001978:	4290      	cmp	r0, r2
 800197a:	f240 8119 	bls.w	8001bb0 <__udivmoddi4+0x290>
 800197e:	3902      	subs	r1, #2
 8001980:	4462      	add	r2, ip
 8001982:	1a12      	subs	r2, r2, r0
 8001984:	b2a4      	uxth	r4, r4
 8001986:	fbb2 f0fe 	udiv	r0, r2, lr
 800198a:	fb0e 2210 	mls	r2, lr, r0, r2
 800198e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001992:	fb00 f505 	mul.w	r5, r0, r5
 8001996:	42a5      	cmp	r5, r4
 8001998:	d90a      	bls.n	80019b0 <__udivmoddi4+0x90>
 800199a:	eb1c 0404 	adds.w	r4, ip, r4
 800199e:	f100 32ff 	add.w	r2, r0, #4294967295
 80019a2:	f080 8107 	bcs.w	8001bb4 <__udivmoddi4+0x294>
 80019a6:	42a5      	cmp	r5, r4
 80019a8:	f240 8104 	bls.w	8001bb4 <__udivmoddi4+0x294>
 80019ac:	4464      	add	r4, ip
 80019ae:	3802      	subs	r0, #2
 80019b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80019b4:	1b64      	subs	r4, r4, r5
 80019b6:	2100      	movs	r1, #0
 80019b8:	b11e      	cbz	r6, 80019c2 <__udivmoddi4+0xa2>
 80019ba:	40dc      	lsrs	r4, r3
 80019bc:	2300      	movs	r3, #0
 80019be:	e9c6 4300 	strd	r4, r3, [r6]
 80019c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80019c6:	428b      	cmp	r3, r1
 80019c8:	d908      	bls.n	80019dc <__udivmoddi4+0xbc>
 80019ca:	2e00      	cmp	r6, #0
 80019cc:	f000 80ed 	beq.w	8001baa <__udivmoddi4+0x28a>
 80019d0:	2100      	movs	r1, #0
 80019d2:	e9c6 0500 	strd	r0, r5, [r6]
 80019d6:	4608      	mov	r0, r1
 80019d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80019dc:	fab3 f183 	clz	r1, r3
 80019e0:	2900      	cmp	r1, #0
 80019e2:	d149      	bne.n	8001a78 <__udivmoddi4+0x158>
 80019e4:	42ab      	cmp	r3, r5
 80019e6:	d302      	bcc.n	80019ee <__udivmoddi4+0xce>
 80019e8:	4282      	cmp	r2, r0
 80019ea:	f200 80f8 	bhi.w	8001bde <__udivmoddi4+0x2be>
 80019ee:	1a84      	subs	r4, r0, r2
 80019f0:	eb65 0203 	sbc.w	r2, r5, r3
 80019f4:	2001      	movs	r0, #1
 80019f6:	4617      	mov	r7, r2
 80019f8:	2e00      	cmp	r6, #0
 80019fa:	d0e2      	beq.n	80019c2 <__udivmoddi4+0xa2>
 80019fc:	e9c6 4700 	strd	r4, r7, [r6]
 8001a00:	e7df      	b.n	80019c2 <__udivmoddi4+0xa2>
 8001a02:	b902      	cbnz	r2, 8001a06 <__udivmoddi4+0xe6>
 8001a04:	deff      	udf	#255	; 0xff
 8001a06:	fab2 f382 	clz	r3, r2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f040 8090 	bne.w	8001b30 <__udivmoddi4+0x210>
 8001a10:	1a8a      	subs	r2, r1, r2
 8001a12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001a16:	fa1f fe8c 	uxth.w	lr, ip
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	fbb2 f5f7 	udiv	r5, r2, r7
 8001a20:	fb07 2015 	mls	r0, r7, r5, r2
 8001a24:	0c22      	lsrs	r2, r4, #16
 8001a26:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8001a2a:	fb0e f005 	mul.w	r0, lr, r5
 8001a2e:	4290      	cmp	r0, r2
 8001a30:	d908      	bls.n	8001a44 <__udivmoddi4+0x124>
 8001a32:	eb1c 0202 	adds.w	r2, ip, r2
 8001a36:	f105 38ff 	add.w	r8, r5, #4294967295
 8001a3a:	d202      	bcs.n	8001a42 <__udivmoddi4+0x122>
 8001a3c:	4290      	cmp	r0, r2
 8001a3e:	f200 80cb 	bhi.w	8001bd8 <__udivmoddi4+0x2b8>
 8001a42:	4645      	mov	r5, r8
 8001a44:	1a12      	subs	r2, r2, r0
 8001a46:	b2a4      	uxth	r4, r4
 8001a48:	fbb2 f0f7 	udiv	r0, r2, r7
 8001a4c:	fb07 2210 	mls	r2, r7, r0, r2
 8001a50:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001a54:	fb0e fe00 	mul.w	lr, lr, r0
 8001a58:	45a6      	cmp	lr, r4
 8001a5a:	d908      	bls.n	8001a6e <__udivmoddi4+0x14e>
 8001a5c:	eb1c 0404 	adds.w	r4, ip, r4
 8001a60:	f100 32ff 	add.w	r2, r0, #4294967295
 8001a64:	d202      	bcs.n	8001a6c <__udivmoddi4+0x14c>
 8001a66:	45a6      	cmp	lr, r4
 8001a68:	f200 80bb 	bhi.w	8001be2 <__udivmoddi4+0x2c2>
 8001a6c:	4610      	mov	r0, r2
 8001a6e:	eba4 040e 	sub.w	r4, r4, lr
 8001a72:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8001a76:	e79f      	b.n	80019b8 <__udivmoddi4+0x98>
 8001a78:	f1c1 0720 	rsb	r7, r1, #32
 8001a7c:	408b      	lsls	r3, r1
 8001a7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8001a82:	ea4c 0c03 	orr.w	ip, ip, r3
 8001a86:	fa05 f401 	lsl.w	r4, r5, r1
 8001a8a:	fa20 f307 	lsr.w	r3, r0, r7
 8001a8e:	40fd      	lsrs	r5, r7
 8001a90:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001a94:	4323      	orrs	r3, r4
 8001a96:	fbb5 f8f9 	udiv	r8, r5, r9
 8001a9a:	fa1f fe8c 	uxth.w	lr, ip
 8001a9e:	fb09 5518 	mls	r5, r9, r8, r5
 8001aa2:	0c1c      	lsrs	r4, r3, #16
 8001aa4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001aa8:	fb08 f50e 	mul.w	r5, r8, lr
 8001aac:	42a5      	cmp	r5, r4
 8001aae:	fa02 f201 	lsl.w	r2, r2, r1
 8001ab2:	fa00 f001 	lsl.w	r0, r0, r1
 8001ab6:	d90b      	bls.n	8001ad0 <__udivmoddi4+0x1b0>
 8001ab8:	eb1c 0404 	adds.w	r4, ip, r4
 8001abc:	f108 3aff 	add.w	sl, r8, #4294967295
 8001ac0:	f080 8088 	bcs.w	8001bd4 <__udivmoddi4+0x2b4>
 8001ac4:	42a5      	cmp	r5, r4
 8001ac6:	f240 8085 	bls.w	8001bd4 <__udivmoddi4+0x2b4>
 8001aca:	f1a8 0802 	sub.w	r8, r8, #2
 8001ace:	4464      	add	r4, ip
 8001ad0:	1b64      	subs	r4, r4, r5
 8001ad2:	b29d      	uxth	r5, r3
 8001ad4:	fbb4 f3f9 	udiv	r3, r4, r9
 8001ad8:	fb09 4413 	mls	r4, r9, r3, r4
 8001adc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001ae0:	fb03 fe0e 	mul.w	lr, r3, lr
 8001ae4:	45a6      	cmp	lr, r4
 8001ae6:	d908      	bls.n	8001afa <__udivmoddi4+0x1da>
 8001ae8:	eb1c 0404 	adds.w	r4, ip, r4
 8001aec:	f103 35ff 	add.w	r5, r3, #4294967295
 8001af0:	d26c      	bcs.n	8001bcc <__udivmoddi4+0x2ac>
 8001af2:	45a6      	cmp	lr, r4
 8001af4:	d96a      	bls.n	8001bcc <__udivmoddi4+0x2ac>
 8001af6:	3b02      	subs	r3, #2
 8001af8:	4464      	add	r4, ip
 8001afa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001afe:	fba3 9502 	umull	r9, r5, r3, r2
 8001b02:	eba4 040e 	sub.w	r4, r4, lr
 8001b06:	42ac      	cmp	r4, r5
 8001b08:	46c8      	mov	r8, r9
 8001b0a:	46ae      	mov	lr, r5
 8001b0c:	d356      	bcc.n	8001bbc <__udivmoddi4+0x29c>
 8001b0e:	d053      	beq.n	8001bb8 <__udivmoddi4+0x298>
 8001b10:	b156      	cbz	r6, 8001b28 <__udivmoddi4+0x208>
 8001b12:	ebb0 0208 	subs.w	r2, r0, r8
 8001b16:	eb64 040e 	sbc.w	r4, r4, lr
 8001b1a:	fa04 f707 	lsl.w	r7, r4, r7
 8001b1e:	40ca      	lsrs	r2, r1
 8001b20:	40cc      	lsrs	r4, r1
 8001b22:	4317      	orrs	r7, r2
 8001b24:	e9c6 7400 	strd	r7, r4, [r6]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b30:	f1c3 0120 	rsb	r1, r3, #32
 8001b34:	fa02 fc03 	lsl.w	ip, r2, r3
 8001b38:	fa20 f201 	lsr.w	r2, r0, r1
 8001b3c:	fa25 f101 	lsr.w	r1, r5, r1
 8001b40:	409d      	lsls	r5, r3
 8001b42:	432a      	orrs	r2, r5
 8001b44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001b48:	fa1f fe8c 	uxth.w	lr, ip
 8001b4c:	fbb1 f0f7 	udiv	r0, r1, r7
 8001b50:	fb07 1510 	mls	r5, r7, r0, r1
 8001b54:	0c11      	lsrs	r1, r2, #16
 8001b56:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8001b5a:	fb00 f50e 	mul.w	r5, r0, lr
 8001b5e:	428d      	cmp	r5, r1
 8001b60:	fa04 f403 	lsl.w	r4, r4, r3
 8001b64:	d908      	bls.n	8001b78 <__udivmoddi4+0x258>
 8001b66:	eb1c 0101 	adds.w	r1, ip, r1
 8001b6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8001b6e:	d22f      	bcs.n	8001bd0 <__udivmoddi4+0x2b0>
 8001b70:	428d      	cmp	r5, r1
 8001b72:	d92d      	bls.n	8001bd0 <__udivmoddi4+0x2b0>
 8001b74:	3802      	subs	r0, #2
 8001b76:	4461      	add	r1, ip
 8001b78:	1b49      	subs	r1, r1, r5
 8001b7a:	b292      	uxth	r2, r2
 8001b7c:	fbb1 f5f7 	udiv	r5, r1, r7
 8001b80:	fb07 1115 	mls	r1, r7, r5, r1
 8001b84:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001b88:	fb05 f10e 	mul.w	r1, r5, lr
 8001b8c:	4291      	cmp	r1, r2
 8001b8e:	d908      	bls.n	8001ba2 <__udivmoddi4+0x282>
 8001b90:	eb1c 0202 	adds.w	r2, ip, r2
 8001b94:	f105 38ff 	add.w	r8, r5, #4294967295
 8001b98:	d216      	bcs.n	8001bc8 <__udivmoddi4+0x2a8>
 8001b9a:	4291      	cmp	r1, r2
 8001b9c:	d914      	bls.n	8001bc8 <__udivmoddi4+0x2a8>
 8001b9e:	3d02      	subs	r5, #2
 8001ba0:	4462      	add	r2, ip
 8001ba2:	1a52      	subs	r2, r2, r1
 8001ba4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001ba8:	e738      	b.n	8001a1c <__udivmoddi4+0xfc>
 8001baa:	4631      	mov	r1, r6
 8001bac:	4630      	mov	r0, r6
 8001bae:	e708      	b.n	80019c2 <__udivmoddi4+0xa2>
 8001bb0:	4639      	mov	r1, r7
 8001bb2:	e6e6      	b.n	8001982 <__udivmoddi4+0x62>
 8001bb4:	4610      	mov	r0, r2
 8001bb6:	e6fb      	b.n	80019b0 <__udivmoddi4+0x90>
 8001bb8:	4548      	cmp	r0, r9
 8001bba:	d2a9      	bcs.n	8001b10 <__udivmoddi4+0x1f0>
 8001bbc:	ebb9 0802 	subs.w	r8, r9, r2
 8001bc0:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	e7a3      	b.n	8001b10 <__udivmoddi4+0x1f0>
 8001bc8:	4645      	mov	r5, r8
 8001bca:	e7ea      	b.n	8001ba2 <__udivmoddi4+0x282>
 8001bcc:	462b      	mov	r3, r5
 8001bce:	e794      	b.n	8001afa <__udivmoddi4+0x1da>
 8001bd0:	4640      	mov	r0, r8
 8001bd2:	e7d1      	b.n	8001b78 <__udivmoddi4+0x258>
 8001bd4:	46d0      	mov	r8, sl
 8001bd6:	e77b      	b.n	8001ad0 <__udivmoddi4+0x1b0>
 8001bd8:	3d02      	subs	r5, #2
 8001bda:	4462      	add	r2, ip
 8001bdc:	e732      	b.n	8001a44 <__udivmoddi4+0x124>
 8001bde:	4608      	mov	r0, r1
 8001be0:	e70a      	b.n	80019f8 <__udivmoddi4+0xd8>
 8001be2:	4464      	add	r4, ip
 8001be4:	3802      	subs	r0, #2
 8001be6:	e742      	b.n	8001a6e <__udivmoddi4+0x14e>

08001be8 <__aeabi_idiv0>:
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop

08001bec <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 8001bf4:	1d39      	adds	r1, r7, #4
 8001bf6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	4803      	ldr	r0, [pc, #12]	; (8001c0c <__io_putchar+0x20>)
 8001bfe:	f00b fe77 	bl	800d8f0 <HAL_UART_Transmit>
	return ch;
 8001c02:	687b      	ldr	r3, [r7, #4]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	20000508 	.word	0x20000508

08001c10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* Copy from FLASH to itcm */
  memcpy(&_sitcm, &_siitcm, ((void*) &_eitcm - (void*) &_sitcm));
 8001c16:	4abc      	ldr	r2, [pc, #752]	; (8001f08 <main+0x2f8>)
 8001c18:	4bbc      	ldr	r3, [pc, #752]	; (8001f0c <main+0x2fc>)
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	49bc      	ldr	r1, [pc, #752]	; (8001f10 <main+0x300>)
 8001c20:	48ba      	ldr	r0, [pc, #744]	; (8001f0c <main+0x2fc>)
 8001c22:	f018 f984 	bl	8019f2e <memcpy>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001c26:	4bbb      	ldr	r3, [pc, #748]	; (8001f14 <main+0x304>)
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d11b      	bne.n	8001c6a <main+0x5a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001c32:	f3bf 8f4f 	dsb	sy
}
 8001c36:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c38:	f3bf 8f6f 	isb	sy
}
 8001c3c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001c3e:	4bb5      	ldr	r3, [pc, #724]	; (8001f14 <main+0x304>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001c46:	f3bf 8f4f 	dsb	sy
}
 8001c4a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c4c:	f3bf 8f6f 	isb	sy
}
 8001c50:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001c52:	4bb0      	ldr	r3, [pc, #704]	; (8001f14 <main+0x304>)
 8001c54:	695b      	ldr	r3, [r3, #20]
 8001c56:	4aaf      	ldr	r2, [pc, #700]	; (8001f14 <main+0x304>)
 8001c58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c5c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001c5e:	f3bf 8f4f 	dsb	sy
}
 8001c62:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c64:	f3bf 8f6f 	isb	sy
}
 8001c68:	e000      	b.n	8001c6c <main+0x5c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001c6a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001c6c:	4ba9      	ldr	r3, [pc, #676]	; (8001f14 <main+0x304>)
 8001c6e:	695b      	ldr	r3, [r3, #20]
 8001c70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d138      	bne.n	8001cea <main+0xda>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001c78:	4ba6      	ldr	r3, [pc, #664]	; (8001f14 <main+0x304>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001c80:	f3bf 8f4f 	dsb	sy
}
 8001c84:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001c86:	4ba3      	ldr	r3, [pc, #652]	; (8001f14 <main+0x304>)
 8001c88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c8c:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	0b5b      	lsrs	r3, r3, #13
 8001c92:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001c96:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	08db      	lsrs	r3, r3, #3
 8001c9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ca0:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	015a      	lsls	r2, r3, #5
 8001ca6:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001caa:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001cb0:	4998      	ldr	r1, [pc, #608]	; (8001f14 <main+0x304>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	1e5a      	subs	r2, r3, #1
 8001cbc:	607a      	str	r2, [r7, #4]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1ef      	bne.n	8001ca2 <main+0x92>
    } while(sets-- != 0U);
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	1e5a      	subs	r2, r3, #1
 8001cc6:	60ba      	str	r2, [r7, #8]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d1e5      	bne.n	8001c98 <main+0x88>
  __ASM volatile ("dsb 0xF":::"memory");
 8001ccc:	f3bf 8f4f 	dsb	sy
}
 8001cd0:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001cd2:	4b90      	ldr	r3, [pc, #576]	; (8001f14 <main+0x304>)
 8001cd4:	695b      	ldr	r3, [r3, #20]
 8001cd6:	4a8f      	ldr	r2, [pc, #572]	; (8001f14 <main+0x304>)
 8001cd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cdc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001cde:	f3bf 8f4f 	dsb	sy
}
 8001ce2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ce4:	f3bf 8f6f 	isb	sy
}
 8001ce8:	e000      	b.n	8001cec <main+0xdc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001cea:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cec:	f001 fe52 	bl	8003994 <HAL_Init>

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001cf0:	f000 ff5c 	bl	8002bac <MPU_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cf4:	f000 f974 	bl	8001fe0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cf8:	f000 fdd0 	bl	800289c <MX_GPIO_Init>
  MX_LPTIM1_Init();
 8001cfc:	f000 fc14 	bl	8002528 <MX_LPTIM1_Init>
  MX_DAC1_Init();
 8001d00:	f000 fa8e 	bl	8002220 <MX_DAC1_Init>
  MX_USART3_UART_Init();
 8001d04:	f000 fd7c 	bl	8002800 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8001d08:	f000 fcde 	bl	80026c8 <MX_TIM3_Init>
  MX_TIM1_Init();
 8001d0c:	f000 fc3a 	bl	8002584 <MX_TIM1_Init>
  MX_HRTIM_Init();
 8001d10:	f000 fab8 	bl	8002284 <MX_HRTIM_Init>
  MX_ADC3_Init();
 8001d14:	f000 fa22 	bl	800215c <MX_ADC3_Init>
  MX_LWIP_Init();
 8001d18:	f00c fefe 	bl	800eb18 <MX_LWIP_Init>
  MX_TIM2_Init();
 8001d1c:	f000 fc86 	bl	800262c <MX_TIM2_Init>
  MX_TIM5_Init();
 8001d20:	f000 fd20 	bl	8002764 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  printf("\033c"); //clears screen
 8001d24:	487c      	ldr	r0, [pc, #496]	; (8001f18 <main+0x308>)
 8001d26:	f017 ff33 	bl	8019b90 <iprintf>
  printf("Atomic Clock - Source __TIMESTAMP__: %s\r\n", __TIMESTAMP__);
 8001d2a:	497c      	ldr	r1, [pc, #496]	; (8001f1c <main+0x30c>)
 8001d2c:	487c      	ldr	r0, [pc, #496]	; (8001f20 <main+0x310>)
 8001d2e:	f017 ff2f 	bl	8019b90 <iprintf>

	#ifndef SYNTH_ENABLE
	printf("WARNING - MW Synthesiser is disabled\r\n");
	#endif //SYNTH_ENABLE
	#ifdef SYNTH_ENABLE
		if (init_synthesiser(MW_power) != SUCCESS) {
 8001d32:	4b7c      	ldr	r3, [pc, #496]	; (8001f24 <main+0x314>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f019 feda 	bl	801baf0 <__init_synthesiser_veneer>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d004      	beq.n	8001d4c <main+0x13c>
			printf("Synthesiser initialisation failed!\r\n");
 8001d42:	4879      	ldr	r0, [pc, #484]	; (8001f28 <main+0x318>)
 8001d44:	f017 ff8a 	bl	8019c5c <puts>
			Error_Handler();
 8001d48:	f000 ff82 	bl	8002c50 <Error_Handler>
		}
		#ifdef MW_VERBOSE
			printf("MW power setting (LO2GAIN): 0x%x \r\n", MW_power);
 8001d4c:	4b75      	ldr	r3, [pc, #468]	; (8001f24 <main+0x314>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	4619      	mov	r1, r3
 8001d52:	4876      	ldr	r0, [pc, #472]	; (8001f2c <main+0x31c>)
 8001d54:	f017 ff1c 	bl	8019b90 <iprintf>
		#endif	//MW_VERBOSE
	#endif //SYNTH_ENABLE

	/* Start a low power timer to flash an LED approximately every second */
	if (HAL_LPTIM_Counter_Start_IT(&hlptim1, 1024) != HAL_OK) {
 8001d58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d5c:	4874      	ldr	r0, [pc, #464]	; (8001f30 <main+0x320>)
 8001d5e:	f007 f963 	bl	8009028 <HAL_LPTIM_Counter_Start_IT>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d004      	beq.n	8001d72 <main+0x162>
		printf("Failed to start slow flashing LED!\r\n");
 8001d68:	4872      	ldr	r0, [pc, #456]	; (8001f34 <main+0x324>)
 8001d6a:	f017 ff77 	bl	8019c5c <puts>
		Error_Handler();
 8001d6e:	f000 ff6f 	bl	8002c50 <Error_Handler>
	}

	/* Start the DAC and zero its output */
	if (HAL_DAC_Start(&hdac1, DAC_CHANNEL_1) != HAL_OK) {
 8001d72:	2100      	movs	r1, #0
 8001d74:	4870      	ldr	r0, [pc, #448]	; (8001f38 <main+0x328>)
 8001d76:	f003 fe0d 	bl	8005994 <HAL_DAC_Start>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d004      	beq.n	8001d8a <main+0x17a>
		printf("Failure to initialise DAC \r\n");
 8001d80:	486e      	ldr	r0, [pc, #440]	; (8001f3c <main+0x32c>)
 8001d82:	f017 ff6b 	bl	8019c5c <puts>
		Error_Handler();
 8001d86:	f000 ff63 	bl	8002c50 <Error_Handler>
	}
	printf("Setting DAC output to 1.00V \r\n");
 8001d8a:	486d      	ldr	r0, [pc, #436]	; (8001f40 <main+0x330>)
 8001d8c:	f017 ff66 	bl	8019c5c <puts>
	if(HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 1241) != HAL_OK){
 8001d90:	f240 43d9 	movw	r3, #1241	; 0x4d9
 8001d94:	2200      	movs	r2, #0
 8001d96:	2100      	movs	r1, #0
 8001d98:	4867      	ldr	r0, [pc, #412]	; (8001f38 <main+0x328>)
 8001d9a:	f003 fe4d 	bl	8005a38 <HAL_DAC_SetValue>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d004      	beq.n	8001dae <main+0x19e>
			printf("DAC setup failed!\r\n");
 8001da4:	4867      	ldr	r0, [pc, #412]	; (8001f44 <main+0x334>)
 8001da6:	f017 ff59 	bl	8019c5c <puts>
		Error_Handler();
 8001daa:	f000 ff51 	bl	8002c50 <Error_Handler>
	}

	HAL_GPIO_WritePin(LASER_TUNING_GPIO_Port, LASER_TUNING_Pin, GPIO_PIN_SET); // Laser_tuning output high
 8001dae:	2201      	movs	r2, #1
 8001db0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001db4:	4864      	ldr	r0, [pc, #400]	; (8001f48 <main+0x338>)
 8001db6:	f005 fd2b 	bl	8007810 <HAL_GPIO_WritePin>

	/* Fire up the ADC
	 * external trigger, single conversion selected in ioc file
	 * calibrate ADC for better accuracy and start it w/ interrupt
	 */
	if(HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK){
 8001dba:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	4862      	ldr	r0, [pc, #392]	; (8001f4c <main+0x33c>)
 8001dc2:	f003 fba3 	bl	800550c <HAL_ADCEx_Calibration_Start>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d004      	beq.n	8001dd6 <main+0x1c6>
		printf("ADC calibration failure \r\n");
 8001dcc:	4860      	ldr	r0, [pc, #384]	; (8001f50 <main+0x340>)
 8001dce:	f017 ff45 	bl	8019c5c <puts>
		Error_Handler();
 8001dd2:	f000 ff3d 	bl	8002c50 <Error_Handler>
	}
	//Start the ADC with interrupts enabled
	if(HAL_ADC_Start_IT(&hadc3) != HAL_OK){
 8001dd6:	485d      	ldr	r0, [pc, #372]	; (8001f4c <main+0x33c>)
 8001dd8:	f002 fa86 	bl	80042e8 <HAL_ADC_Start_IT>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d004      	beq.n	8001dec <main+0x1dc>
		printf("Failed to start ADC with interrupt capability \r\n");
 8001de2:	485c      	ldr	r0, [pc, #368]	; (8001f54 <main+0x344>)
 8001de4:	f017 ff3a 	bl	8019c5c <puts>
	                Error_Handler();
 8001de8:	f000 ff32 	bl	8002c50 <Error_Handler>
	}
	printf("ADC calibrated successfully and interrupt callback enabled \r\n");
 8001dec:	485a      	ldr	r0, [pc, #360]	; (8001f58 <main+0x348>)
 8001dee:	f017 ff35 	bl	8019c5c <puts>
	/* Calculate the MW sweep settings
	 * Notes:
	 * Measure the period of a POP cycle *AFTER* the ADC has been initialised
	 * Calculate sweep settings after first POP calibration routine
	 */
	start_timer(SWEEP_TIMER); //reset SWEEP_TIMER and start counting
 8001df2:	4b5a      	ldr	r3, [pc, #360]	; (8001f5c <main+0x34c>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f019 fe82 	bl	801bb00 <__start_timer_veneer>
	start_POP_calibration(true);
 8001dfc:	2001      	movs	r0, #1
 8001dfe:	f019 fe6b 	bl	801bad8 <__start_POP_calibration_veneer>
	//loop here until period of POP cycle has been measured or 3s has elapsed
	//When correctly connected, POP cycle measurement should take 1.3s
	while (!POP_period_us && (check_timer(SWEEP_TIMER) < 3000000)) {
 8001e02:	e001      	b.n	8001e08 <main+0x1f8>
		MW_update();
 8001e04:	f019 fe54 	bl	801bab0 <__MW_update_veneer>
	while (!POP_period_us && (check_timer(SWEEP_TIMER) < 3000000)) {
 8001e08:	4b55      	ldr	r3, [pc, #340]	; (8001f60 <main+0x350>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d108      	bne.n	8001e22 <main+0x212>
 8001e10:	4b52      	ldr	r3, [pc, #328]	; (8001f5c <main+0x34c>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f019 fe63 	bl	801bae0 <__check_timer_veneer>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	4a51      	ldr	r2, [pc, #324]	; (8001f64 <main+0x354>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d9f0      	bls.n	8001e04 <main+0x1f4>
//		printf("POP_period_us %lu, SWEEP_TIMER value %lu \r\n", POP_period_us, check_timer(SWEEP_TIMER));
	}
//	printf("Finished loop - POP_period_us %lu, SWEEP_TIMER value %lu \r\n", POP_period_us, check_timer(SWEEP_TIMER));
	stop_timer(SWEEP_TIMER); //stop SWEEP_TIMER
 8001e22:	4b4e      	ldr	r3, [pc, #312]	; (8001f5c <main+0x34c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f019 fe4a 	bl	801bac0 <__stop_timer_veneer>
	if (!POP_period_us) {//if the calibration loop timed out
 8001e2c:	4b4c      	ldr	r3, [pc, #304]	; (8001f60 <main+0x350>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d102      	bne.n	8001e3a <main+0x22a>
		printf("WARNING - STM32 is not receiving a periodic sample from the FPGA \r\n");
 8001e34:	484c      	ldr	r0, [pc, #304]	; (8001f68 <main+0x358>)
 8001e36:	f017 ff11 	bl	8019c5c <puts>
	}

//	initiate_MW_calibration_sweep(POP_period);
//	calc_fixed_time_MW_sweep(3035735122, 1000, 20, ADD_SCOPE_SYNC_TIME); //1.5kHz sweep, 20s re-centred
//	calc_fixed_time_MW_sweep(HYPERFINE + MW_DELTA, 10, 3600, ADD_SCOPE_SYNC_TIME); //10Hz sweep, 1hr
	calc_fixed_time_MW_sweep(HYPERFINE + MW_DELTA, 10000, 50, ADD_SCOPE_SYNC_TIME); //10kHz sweep, 50s
 8001e3a:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 8001ee8 <main+0x2d8>
 8001e3e:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 8001ef0 <main+0x2e0>
 8001e42:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001e46:	2000      	movs	r0, #0
 8001e48:	ed9f 2b2b 	vldr	d2, [pc, #172]	; 8001ef8 <main+0x2e8>
 8001e4c:	ed9f 1b2c 	vldr	d1, [pc, #176]	; 8001f00 <main+0x2f0>
 8001e50:	eeb0 0b47 	vmov.f64	d0, d7
 8001e54:	f019 fe48 	bl	801bae8 <__calc_fixed_time_MW_sweep_veneer>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	printf("Entering main while loop.\r\n");
 8001e58:	4844      	ldr	r0, [pc, #272]	; (8001f6c <main+0x35c>)
 8001e5a:	f017 feff 	bl	8019c5c <puts>
//		if (pin_status != last_pin_status) {
//			printf("Blue button status: %u \r\n", pin_status);
//			last_pin_status = pin_status;
//		}

		blue_button_status = HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin);
 8001e5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e62:	4843      	ldr	r0, [pc, #268]	; (8001f70 <main+0x360>)
 8001e64:	f005 fcbc 	bl	80077e0 <HAL_GPIO_ReadPin>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	bf14      	ite	ne
 8001e6e:	2301      	movne	r3, #1
 8001e70:	2300      	moveq	r3, #0
 8001e72:	b2da      	uxtb	r2, r3
 8001e74:	4b3f      	ldr	r3, [pc, #252]	; (8001f74 <main+0x364>)
 8001e76:	701a      	strb	r2, [r3, #0]
		if (blue_button_status) {// If blue button is pressed
 8001e78:	4b3e      	ldr	r3, [pc, #248]	; (8001f74 <main+0x364>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f000 809a 	beq.w	8001fb8 <main+0x3a8>
			printf("Blue button pressed....\r\n");
 8001e84:	483c      	ldr	r0, [pc, #240]	; (8001f78 <main+0x368>)
 8001e86:	f017 fee9 	bl	8019c5c <puts>
			HAL_GPIO_WritePin(LASER_TUNING_GPIO_Port, LASER_TUNING_Pin, GPIO_PIN_RESET); // Laser_tuning SMA output low
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e90:	482d      	ldr	r0, [pc, #180]	; (8001f48 <main+0x338>)
 8001e92:	f005 fcbd 	bl	8007810 <HAL_GPIO_WritePin>
			//set_MW_power(0x03); //set maximum MW power to improve contrast
			//MW_frequency_toggle (3035733689, 3035733789); //infinite loop toggling 100Hz on left of DR dip
			//MW_frequency_toggle (3035733689, 3035733699); //infinite loop toggling 10Hz on left of DR dip

			//change the MW power each time the button is pressed, unless it's the first time round this loop
			if (mw_sweep_started) {
 8001e96:	4b39      	ldr	r3, [pc, #228]	; (8001f7c <main+0x36c>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d018      	beq.n	8001ed2 <main+0x2c2>
				++MW_power; //increase MW_power value by 1
 8001ea0:	4b20      	ldr	r3, [pc, #128]	; (8001f24 <main+0x314>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	b2da      	uxtb	r2, r3
 8001ea8:	4b1e      	ldr	r3, [pc, #120]	; (8001f24 <main+0x314>)
 8001eaa:	701a      	strb	r2, [r3, #0]
				if (MW_power>3) { //Loop MW_power back round to 0 if above maximum permissible value i.e. 3
 8001eac:	4b1d      	ldr	r3, [pc, #116]	; (8001f24 <main+0x314>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	2b03      	cmp	r3, #3
 8001eb2:	d902      	bls.n	8001eba <main+0x2aa>
					MW_power = 0;
 8001eb4:	4b1b      	ldr	r3, [pc, #108]	; (8001f24 <main+0x314>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	701a      	strb	r2, [r3, #0]
				}
				set_MW_power(MW_power);
 8001eba:	4b1a      	ldr	r3, [pc, #104]	; (8001f24 <main+0x314>)
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f019 fe1a 	bl	801baf8 <__set_MW_power_veneer>
			#ifdef MW_VERBOSE
				printf("LO2GAIN changed to: 0x%x \r\n", MW_power);
 8001ec4:	4b17      	ldr	r3, [pc, #92]	; (8001f24 <main+0x314>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	4619      	mov	r1, r3
 8001eca:	482d      	ldr	r0, [pc, #180]	; (8001f80 <main+0x370>)
 8001ecc:	f017 fe60 	bl	8019b90 <iprintf>
 8001ed0:	e06d      	b.n	8001fae <main+0x39e>
			#endif //MW_VERBOSE
			} else {
				printf("Initiating sweep.\r\n");
 8001ed2:	482c      	ldr	r0, [pc, #176]	; (8001f84 <main+0x374>)
 8001ed4:	f017 fec2 	bl	8019c5c <puts>
				mw_sweep_started = true;
 8001ed8:	4b28      	ldr	r3, [pc, #160]	; (8001f7c <main+0x36c>)
 8001eda:	2201      	movs	r2, #1
 8001edc:	701a      	strb	r2, [r3, #0]
				start_continuous_MW_sweep();
 8001ede:	f019 fdeb 	bl	801bab8 <__start_continuous_MW_sweep_veneer>
			}
			while(blue_button_status) {//remain here polling button until it is released
 8001ee2:	e064      	b.n	8001fae <main+0x39e>
 8001ee4:	f3af 8000 	nop.w
 8001ee8:	6d600000 	.word	0x6d600000
 8001eec:	41e69e35 	.word	0x41e69e35
 8001ef0:	00000000 	.word	0x00000000
 8001ef4:	408f4000 	.word	0x408f4000
 8001ef8:	00000000 	.word	0x00000000
 8001efc:	40490000 	.word	0x40490000
 8001f00:	00000000 	.word	0x00000000
 8001f04:	40c38800 	.word	0x40c38800
 8001f08:	00001568 	.word	0x00001568
 8001f0c:	00000000 	.word	0x00000000
 8001f10:	08000298 	.word	0x08000298
 8001f14:	e000ed00 	.word	0xe000ed00
 8001f18:	0801bb10 	.word	0x0801bb10
 8001f1c:	0801bb14 	.word	0x0801bb14
 8001f20:	0801bb30 	.word	0x0801bb30
 8001f24:	20000000 	.word	0x20000000
 8001f28:	0801bb5c 	.word	0x0801bb5c
 8001f2c:	0801bb80 	.word	0x0801bb80
 8001f30:	200003a0 	.word	0x200003a0
 8001f34:	0801bba4 	.word	0x0801bba4
 8001f38:	200002b0 	.word	0x200002b0
 8001f3c:	0801bbc8 	.word	0x0801bbc8
 8001f40:	0801bbe4 	.word	0x0801bbe4
 8001f44:	0801bc04 	.word	0x0801bc04
 8001f48:	58020400 	.word	0x58020400
 8001f4c:	2000024c 	.word	0x2000024c
 8001f50:	0801bc18 	.word	0x0801bc18
 8001f54:	0801bc34 	.word	0x0801bc34
 8001f58:	0801bc64 	.word	0x0801bc64
 8001f5c:	20000020 	.word	0x20000020
 8001f60:	200005a0 	.word	0x200005a0
 8001f64:	002dc6bf 	.word	0x002dc6bf
 8001f68:	0801bca4 	.word	0x0801bca4
 8001f6c:	0801bce8 	.word	0x0801bce8
 8001f70:	58020800 	.word	0x58020800
 8001f74:	2000059d 	.word	0x2000059d
 8001f78:	0801bd04 	.word	0x0801bd04
 8001f7c:	2000059c 	.word	0x2000059c
 8001f80:	0801bd20 	.word	0x0801bd20
 8001f84:	0801bd3c 	.word	0x0801bd3c
				timer_delay(SLOW_TIMER, 100); //10ms delay
 8001f88:	4b10      	ldr	r3, [pc, #64]	; (8001fcc <main+0x3bc>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2164      	movs	r1, #100	; 0x64
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f019 fd9a 	bl	801bac8 <__timer_delay_veneer>
				blue_button_status = HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin);
 8001f94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f98:	480d      	ldr	r0, [pc, #52]	; (8001fd0 <main+0x3c0>)
 8001f9a:	f005 fc21 	bl	80077e0 <HAL_GPIO_ReadPin>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	bf14      	ite	ne
 8001fa4:	2301      	movne	r3, #1
 8001fa6:	2300      	moveq	r3, #0
 8001fa8:	b2da      	uxtb	r2, r3
 8001faa:	4b0a      	ldr	r3, [pc, #40]	; (8001fd4 <main+0x3c4>)
 8001fac:	701a      	strb	r2, [r3, #0]
			while(blue_button_status) {//remain here polling button until it is released
 8001fae:	4b09      	ldr	r3, [pc, #36]	; (8001fd4 <main+0x3c4>)
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d1e7      	bne.n	8001f88 <main+0x378>
			}
		}

		if (mw_sweep_started) {//won't execute until the first time the blue button is pressed
 8001fb8:	4b07      	ldr	r3, [pc, #28]	; (8001fd8 <main+0x3c8>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
//			run_sweep();
//			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET); //turn off red LED
			//printf("Sweep complete.\r\n");
			//printf("LO2GAIN: 0x%x \r\n", MW_power);
		}
		MW_update();
 8001fbc:	f019 fd78 	bl	801bab0 <__MW_update_veneer>

	    /* Ethernet handling */
		ethernetif_input(&gnetif);
 8001fc0:	4806      	ldr	r0, [pc, #24]	; (8001fdc <main+0x3cc>)
 8001fc2:	f00d f817 	bl	800eff4 <ethernetif_input>
		sys_check_timeouts();
 8001fc6:	f014 fbbf 	bl	8016748 <sys_check_timeouts>
		blue_button_status = HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin);
 8001fca:	e748      	b.n	8001e5e <main+0x24e>
 8001fcc:	20000018 	.word	0x20000018
 8001fd0:	58020800 	.word	0x58020800
 8001fd4:	2000059d 	.word	0x2000059d
 8001fd8:	2000059c 	.word	0x2000059c
 8001fdc:	2000060c 	.word	0x2000060c

08001fe0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b0a4      	sub	sp, #144	; 0x90
 8001fe4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fe6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001fea:	224c      	movs	r2, #76	; 0x4c
 8001fec:	2100      	movs	r1, #0
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f017 ff24 	bl	8019e3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ff4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ff8:	2220      	movs	r2, #32
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f017 ff1d 	bl	8019e3c <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 8002002:	f107 030c 	add.w	r3, r7, #12
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	605a      	str	r2, [r3, #4]
 800200c:	609a      	str	r2, [r3, #8]
 800200e:	60da      	str	r2, [r3, #12]
 8002010:	611a      	str	r2, [r3, #16]
 8002012:	615a      	str	r2, [r3, #20]

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002014:	2002      	movs	r0, #2
 8002016:	f007 fb65 	bl	80096e4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800201a:	2300      	movs	r3, #0
 800201c:	60bb      	str	r3, [r7, #8]
 800201e:	4b4c      	ldr	r3, [pc, #304]	; (8002150 <SystemClock_Config+0x170>)
 8002020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002022:	4a4b      	ldr	r2, [pc, #300]	; (8002150 <SystemClock_Config+0x170>)
 8002024:	f023 0301 	bic.w	r3, r3, #1
 8002028:	62d3      	str	r3, [r2, #44]	; 0x2c
 800202a:	4b49      	ldr	r3, [pc, #292]	; (8002150 <SystemClock_Config+0x170>)
 800202c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	60bb      	str	r3, [r7, #8]
 8002034:	4b47      	ldr	r3, [pc, #284]	; (8002154 <SystemClock_Config+0x174>)
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	4a46      	ldr	r2, [pc, #280]	; (8002154 <SystemClock_Config+0x174>)
 800203a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800203e:	6193      	str	r3, [r2, #24]
 8002040:	4b44      	ldr	r3, [pc, #272]	; (8002154 <SystemClock_Config+0x174>)
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002048:	60bb      	str	r3, [r7, #8]
 800204a:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800204c:	bf00      	nop
 800204e:	4b41      	ldr	r3, [pc, #260]	; (8002154 <SystemClock_Config+0x174>)
 8002050:	699b      	ldr	r3, [r3, #24]
 8002052:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002056:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800205a:	d1f8      	bne.n	800204e <SystemClock_Config+0x6e>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800205c:	f007 fb32 	bl	80096c4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002060:	f001 fd4e 	bl	8003b00 <HAL_GetREVID>
 8002064:	4b3c      	ldr	r3, [pc, #240]	; (8002158 <SystemClock_Config+0x178>)
 8002066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002068:	4a3b      	ldr	r2, [pc, #236]	; (8002158 <SystemClock_Config+0x178>)
 800206a:	f023 0318 	bic.w	r3, r3, #24
 800206e:	6713      	str	r3, [r2, #112]	; 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 8002070:	2325      	movs	r3, #37	; 0x25
 8002072:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002074:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002078:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800207a:	2301      	movs	r3, #1
 800207c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800207e:	2301      	movs	r3, #1
 8002080:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002082:	2302      	movs	r3, #2
 8002084:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002086:	2302      	movs	r3, #2
 8002088:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800208a:	2301      	movs	r3, #1
 800208c:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 80;
 800208e:	2350      	movs	r3, #80	; 0x50
 8002090:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002092:	2302      	movs	r3, #2
 8002094:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002096:	2304      	movs	r3, #4
 8002098:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800209a:	2302      	movs	r3, #2
 800209c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80020a0:	230c      	movs	r3, #12
 80020a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80020a6:	2300      	movs	r3, #0
 80020a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80020ac:	2300      	movs	r3, #0
 80020ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020b2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80020b6:	4618      	mov	r0, r3
 80020b8:	f007 fb4e 	bl	8009758 <HAL_RCC_OscConfig>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80020c2:	f000 fdc5 	bl	8002c50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020c6:	233f      	movs	r3, #63	; 0x3f
 80020c8:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020ca:	2303      	movs	r3, #3
 80020cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80020ce:	2300      	movs	r3, #0
 80020d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV4;
 80020d2:	2309      	movs	r3, #9
 80020d4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80020d6:	2300      	movs	r3, #0
 80020d8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80020da:	2300      	movs	r3, #0
 80020dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV16;
 80020de:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80020e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80020e4:	2300      	movs	r3, #0
 80020e6:	643b      	str	r3, [r7, #64]	; 0x40

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80020e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ec:	2101      	movs	r1, #1
 80020ee:	4618      	mov	r0, r3
 80020f0:	f007 ff8c 	bl	800a00c <HAL_RCC_ClockConfig>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <SystemClock_Config+0x11e>
  {
    Error_Handler();
 80020fa:	f000 fda9 	bl	8002c50 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80020fe:	f008 f93b 	bl	800a378 <HAL_RCC_EnableCSS>

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 8002102:	4b15      	ldr	r3, [pc, #84]	; (8002158 <SystemClock_Config+0x178>)
 8002104:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002108:	4a13      	ldr	r2, [pc, #76]	; (8002158 <SystemClock_Config+0x178>)
 800210a:	f043 0302 	orr.w	r3, r3, #2
 800210e:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002112:	4b11      	ldr	r3, [pc, #68]	; (8002158 <SystemClock_Config+0x178>)
 8002114:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	607b      	str	r3, [r7, #4]
 800211e:	687b      	ldr	r3, [r7, #4]

  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 8002120:	2300      	movs	r3, #0
 8002122:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_LSE;
 8002124:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002128:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 800212a:	2300      	movs	r3, #0
 800212c:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,32768);
 800212e:	f240 53b7 	movw	r3, #1463	; 0x5b7
 8002132:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 8002134:	2322      	movs	r3, #34	; 0x22
 8002136:	61fb      	str	r3, [r7, #28]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 8002138:	2320      	movs	r3, #32
 800213a:	623b      	str	r3, [r7, #32]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 800213c:	f107 030c 	add.w	r3, r7, #12
 8002140:	4618      	mov	r0, r3
 8002142:	f00a feb5 	bl	800ceb0 <HAL_RCCEx_CRSConfig>
}
 8002146:	bf00      	nop
 8002148:	3790      	adds	r7, #144	; 0x90
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	58000400 	.word	0x58000400
 8002154:	58024800 	.word	0x58024800
 8002158:	58024400 	.word	0x58024400

0800215c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b088      	sub	sp, #32
 8002160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002162:	1d3b      	adds	r3, r7, #4
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	60da      	str	r2, [r3, #12]
 800216e:	611a      	str	r2, [r3, #16]
 8002170:	615a      	str	r2, [r3, #20]
 8002172:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8002174:	4b28      	ldr	r3, [pc, #160]	; (8002218 <MX_ADC3_Init+0xbc>)
 8002176:	4a29      	ldr	r2, [pc, #164]	; (800221c <MX_ADC3_Init+0xc0>)
 8002178:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 800217a:	4b27      	ldr	r3, [pc, #156]	; (8002218 <MX_ADC3_Init+0xbc>)
 800217c:	2200      	movs	r2, #0
 800217e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002180:	4b25      	ldr	r3, [pc, #148]	; (8002218 <MX_ADC3_Init+0xbc>)
 8002182:	2200      	movs	r2, #0
 8002184:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002186:	4b24      	ldr	r3, [pc, #144]	; (8002218 <MX_ADC3_Init+0xbc>)
 8002188:	2204      	movs	r2, #4
 800218a:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800218c:	4b22      	ldr	r3, [pc, #136]	; (8002218 <MX_ADC3_Init+0xbc>)
 800218e:	2200      	movs	r2, #0
 8002190:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8002192:	4b21      	ldr	r3, [pc, #132]	; (8002218 <MX_ADC3_Init+0xbc>)
 8002194:	2200      	movs	r2, #0
 8002196:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8002198:	4b1f      	ldr	r3, [pc, #124]	; (8002218 <MX_ADC3_Init+0xbc>)
 800219a:	2201      	movs	r2, #1
 800219c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800219e:	4b1e      	ldr	r3, [pc, #120]	; (8002218 <MX_ADC3_Init+0xbc>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_EXT_IT11;
 80021a4:	4b1c      	ldr	r3, [pc, #112]	; (8002218 <MX_ADC3_Init+0xbc>)
 80021a6:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80021aa:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80021ac:	4b1a      	ldr	r3, [pc, #104]	; (8002218 <MX_ADC3_Init+0xbc>)
 80021ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021b2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80021b4:	4b18      	ldr	r3, [pc, #96]	; (8002218 <MX_ADC3_Init+0xbc>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80021ba:	4b17      	ldr	r3, [pc, #92]	; (8002218 <MX_ADC3_Init+0xbc>)
 80021bc:	2200      	movs	r2, #0
 80021be:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80021c0:	4b15      	ldr	r3, [pc, #84]	; (8002218 <MX_ADC3_Init+0xbc>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80021c6:	4b14      	ldr	r3, [pc, #80]	; (8002218 <MX_ADC3_Init+0xbc>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80021ce:	4812      	ldr	r0, [pc, #72]	; (8002218 <MX_ADC3_Init+0xbc>)
 80021d0:	f001 fee8 	bl	8003fa4 <HAL_ADC_Init>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <MX_ADC3_Init+0x82>
  {
    Error_Handler();
 80021da:	f000 fd39 	bl	8002c50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80021de:	2301      	movs	r3, #1
 80021e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80021e2:	2306      	movs	r3, #6
 80021e4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80021e6:	2300      	movs	r3, #0
 80021e8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80021ea:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80021ee:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80021f0:	2304      	movs	r3, #4
 80021f2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80021f4:	2300      	movs	r3, #0
 80021f6:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80021f8:	2300      	movs	r3, #0
 80021fa:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80021fc:	1d3b      	adds	r3, r7, #4
 80021fe:	4619      	mov	r1, r3
 8002200:	4805      	ldr	r0, [pc, #20]	; (8002218 <MX_ADC3_Init+0xbc>)
 8002202:	f002 fc0b 	bl	8004a1c <HAL_ADC_ConfigChannel>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 800220c:	f000 fd20 	bl	8002c50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002210:	bf00      	nop
 8002212:	3720      	adds	r7, #32
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	2000024c 	.word	0x2000024c
 800221c:	58026000 	.word	0x58026000

08002220 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b08a      	sub	sp, #40	; 0x28
 8002224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002226:	1d3b      	adds	r3, r7, #4
 8002228:	2224      	movs	r2, #36	; 0x24
 800222a:	2100      	movs	r1, #0
 800222c:	4618      	mov	r0, r3
 800222e:	f017 fe05 	bl	8019e3c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8002232:	4b12      	ldr	r3, [pc, #72]	; (800227c <MX_DAC1_Init+0x5c>)
 8002234:	4a12      	ldr	r2, [pc, #72]	; (8002280 <MX_DAC1_Init+0x60>)
 8002236:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8002238:	4810      	ldr	r0, [pc, #64]	; (800227c <MX_DAC1_Init+0x5c>)
 800223a:	f003 fb89 	bl	8005950 <HAL_DAC_Init>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8002244:	f000 fd04 	bl	8002c50 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8002248:	2300      	movs	r3, #0
 800224a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800224c:	2300      	movs	r3, #0
 800224e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002250:	2300      	movs	r3, #0
 8002252:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8002254:	2301      	movs	r3, #1
 8002256:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8002258:	2300      	movs	r3, #0
 800225a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800225c:	1d3b      	adds	r3, r7, #4
 800225e:	2200      	movs	r2, #0
 8002260:	4619      	mov	r1, r3
 8002262:	4806      	ldr	r0, [pc, #24]	; (800227c <MX_DAC1_Init+0x5c>)
 8002264:	f003 fc0e 	bl	8005a84 <HAL_DAC_ConfigChannel>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800226e:	f000 fcef 	bl	8002c50 <Error_Handler>
//    Error_Handler();
//  }

  /* USER CODE END DAC1_Init 2 */

}
 8002272:	bf00      	nop
 8002274:	3728      	adds	r7, #40	; 0x28
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	200002b0 	.word	0x200002b0
 8002280:	40007400 	.word	0x40007400

08002284 <MX_HRTIM_Init>:
  * @brief HRTIM Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM_Init(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b0a4      	sub	sp, #144	; 0x90
 8002288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM_Init 0 */

  /* USER CODE END HRTIM_Init 0 */

  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 800228a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800228e:	2200      	movs	r2, #0
 8002290:	601a      	str	r2, [r3, #0]
 8002292:	605a      	str	r2, [r3, #4]
 8002294:	609a      	str	r2, [r3, #8]
 8002296:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8002298:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800229c:	2254      	movs	r2, #84	; 0x54
 800229e:	2100      	movs	r1, #0
 80022a0:	4618      	mov	r0, r3
 80022a2:	f017 fdcb 	bl	8019e3c <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 80022a6:	f107 0320 	add.w	r3, r7, #32
 80022aa:	2200      	movs	r2, #0
 80022ac:	601a      	str	r2, [r3, #0]
 80022ae:	605a      	str	r2, [r3, #4]
 80022b0:	609a      	str	r2, [r3, #8]
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 80022b2:	463b      	mov	r3, r7
 80022b4:	2220      	movs	r2, #32
 80022b6:	2100      	movs	r1, #0
 80022b8:	4618      	mov	r0, r3
 80022ba:	f017 fdbf 	bl	8019e3c <memset>

  /* USER CODE BEGIN HRTIM_Init 1 */

  /* USER CODE END HRTIM_Init 1 */
  hhrtim.Instance = HRTIM1;
 80022be:	4b98      	ldr	r3, [pc, #608]	; (8002520 <MX_HRTIM_Init+0x29c>)
 80022c0:	4a98      	ldr	r2, [pc, #608]	; (8002524 <MX_HRTIM_Init+0x2a0>)
 80022c2:	601a      	str	r2, [r3, #0]
  hhrtim.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 80022c4:	4b96      	ldr	r3, [pc, #600]	; (8002520 <MX_HRTIM_Init+0x29c>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	605a      	str	r2, [r3, #4]
  hhrtim.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 80022ca:	4b95      	ldr	r3, [pc, #596]	; (8002520 <MX_HRTIM_Init+0x29c>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim) != HAL_OK)
 80022d0:	4893      	ldr	r0, [pc, #588]	; (8002520 <MX_HRTIM_Init+0x29c>)
 80022d2:	f005 faf5 	bl	80078c0 <HAL_HRTIM_Init>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <MX_HRTIM_Init+0x5c>
  {
    Error_Handler();
 80022dc:	f000 fcb8 	bl	8002c50 <Error_Handler>
  }
  pTimeBaseCfg.Period = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME+PROBE_WIDTH+POP_CYCLE_DELAY;
 80022e0:	f24c 2318 	movw	r3, #49688	; 0xc218
 80022e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pTimeBaseCfg.RepetitionCounter = 0x00;
 80022e8:	2300      	movs	r3, #0
 80022ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV4;
 80022ee:	2307      	movs	r3, #7
 80022f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 80022f4:	2308      	movs	r3, #8
 80022f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 80022fa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80022fe:	461a      	mov	r2, r3
 8002300:	2100      	movs	r1, #0
 8002302:	4887      	ldr	r0, [pc, #540]	; (8002520 <MX_HRTIM_Init+0x29c>)
 8002304:	f005 fbac 	bl	8007a60 <HAL_HRTIM_TimeBaseConfig>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <MX_HRTIM_Init+0x8e>
  {
    Error_Handler();
 800230e:	f000 fc9f 	bl	8002c50 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_CMP3|HRTIM_TIM_IT_REP;
 8002312:	2314      	movs	r3, #20
 8002314:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 8002316:	2300      	movs	r3, #0
 8002318:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.DMASrcAddress = 0x0000;
 800231a:	2300      	movs	r3, #0
 800231c:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.DMADstAddress = 0x0000;
 800231e:	2300      	movs	r3, #0
 8002320:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.DMASize = 0x1;
 8002322:	2301      	movs	r3, #1
 8002324:	63fb      	str	r3, [r7, #60]	; 0x3c
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 8002326:	2300      	movs	r3, #0
 8002328:	643b      	str	r3, [r7, #64]	; 0x40
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 800232a:	2300      	movs	r3, #0
 800232c:	647b      	str	r3, [r7, #68]	; 0x44
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 800232e:	2300      	movs	r3, #0
 8002330:	64bb      	str	r3, [r7, #72]	; 0x48
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 8002332:	2300      	movs	r3, #0
 8002334:	64fb      	str	r3, [r7, #76]	; 0x4c
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 8002336:	2300      	movs	r3, #0
 8002338:	653b      	str	r3, [r7, #80]	; 0x50
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 800233a:	2300      	movs	r3, #0
 800233c:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 800233e:	2300      	movs	r3, #0
 8002340:	65bb      	str	r3, [r7, #88]	; 0x58
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 8002342:	2300      	movs	r3, #0
 8002344:	65fb      	str	r3, [r7, #92]	; 0x5c
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 8002346:	2300      	movs	r3, #0
 8002348:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 800234a:	2300      	movs	r3, #0
 800234c:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 800234e:	2300      	movs	r3, #0
 8002350:	66bb      	str	r3, [r7, #104]	; 0x68
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 8002352:	2300      	movs	r3, #0
 8002354:	66fb      	str	r3, [r7, #108]	; 0x6c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 8002356:	2300      	movs	r3, #0
 8002358:	673b      	str	r3, [r7, #112]	; 0x70
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 800235a:	2300      	movs	r3, #0
 800235c:	677b      	str	r3, [r7, #116]	; 0x74
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 800235e:	2300      	movs	r3, #0
 8002360:	67bb      	str	r3, [r7, #120]	; 0x78
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 8002362:	2300      	movs	r3, #0
 8002364:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 8002366:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800236a:	461a      	mov	r2, r3
 800236c:	2100      	movs	r1, #0
 800236e:	486c      	ldr	r0, [pc, #432]	; (8002520 <MX_HRTIM_Init+0x29c>)
 8002370:	f005 fb9e 	bl	8007ab0 <HAL_HRTIM_WaveformTimerConfig>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <MX_HRTIM_Init+0xfa>
  {
    Error_Handler();
 800237a:	f000 fc69 	bl	8002c50 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_CMP2|HRTIM_TIM_IT_CMP3;
 800237e:	2306      	movs	r3, #6
 8002380:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 8002382:	2300      	movs	r3, #0
 8002384:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimerCfg) != HAL_OK)
 8002386:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800238a:	461a      	mov	r2, r3
 800238c:	2104      	movs	r1, #4
 800238e:	4864      	ldr	r0, [pc, #400]	; (8002520 <MX_HRTIM_Init+0x29c>)
 8002390:	f005 fb8e 	bl	8007ab0 <HAL_HRTIM_WaveformTimerConfig>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <MX_HRTIM_Init+0x11a>
  {
    Error_Handler();
 800239a:	f000 fc59 	bl	8002c50 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH;
 800239e:	f240 631b 	movw	r3, #1563	; 0x61b
 80023a2:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 80023a4:	f107 0320 	add.w	r3, r7, #32
 80023a8:	2201      	movs	r2, #1
 80023aa:	2100      	movs	r1, #0
 80023ac:	485c      	ldr	r0, [pc, #368]	; (8002520 <MX_HRTIM_Init+0x29c>)
 80023ae:	f005 fbf1 	bl	8007b94 <HAL_HRTIM_WaveformCompareConfig>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <MX_HRTIM_Init+0x138>
  {
    Error_Handler();
 80023b8:	f000 fc4a 	bl	8002c50 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME;
 80023bc:	f244 5395 	movw	r3, #17813	; 0x4595
 80023c0:	623b      	str	r3, [r7, #32]
  pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 80023c2:	2300      	movs	r3, #0
 80023c4:	627b      	str	r3, [r7, #36]	; 0x24
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 80023c6:	2300      	movs	r3, #0
 80023c8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 80023ca:	f107 0320 	add.w	r3, r7, #32
 80023ce:	2202      	movs	r2, #2
 80023d0:	2100      	movs	r1, #0
 80023d2:	4853      	ldr	r0, [pc, #332]	; (8002520 <MX_HRTIM_Init+0x29c>)
 80023d4:	f005 fbde 	bl	8007b94 <HAL_HRTIM_WaveformCompareConfig>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <MX_HRTIM_Init+0x15e>
  {
    Error_Handler();
 80023de:	f000 fc37 	bl	8002c50 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH;
 80023e2:	f640 536e 	movw	r3, #3438	; 0xd6e
 80023e6:	623b      	str	r3, [r7, #32]

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 80023e8:	f107 0320 	add.w	r3, r7, #32
 80023ec:	2202      	movs	r2, #2
 80023ee:	2104      	movs	r1, #4
 80023f0:	484b      	ldr	r0, [pc, #300]	; (8002520 <MX_HRTIM_Init+0x29c>)
 80023f2:	f005 fbcf 	bl	8007b94 <HAL_HRTIM_WaveformCompareConfig>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <MX_HRTIM_Init+0x17c>
  {
    Error_Handler();
 80023fc:	f000 fc28 	bl	8002c50 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME+PROBE_WIDTH;
 8002400:	f644 0306 	movw	r3, #18438	; 0x4806
 8002404:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 8002406:	f107 0320 	add.w	r3, r7, #32
 800240a:	2204      	movs	r2, #4
 800240c:	2100      	movs	r1, #0
 800240e:	4844      	ldr	r0, [pc, #272]	; (8002520 <MX_HRTIM_Init+0x29c>)
 8002410:	f005 fbc0 	bl	8007b94 <HAL_HRTIM_WaveformCompareConfig>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <MX_HRTIM_Init+0x19a>
  {
    Error_Handler();
 800241a:	f000 fc19 	bl	8002c50 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH+RAMSEY_TIME+MICROWAVE_WIDTH;
 800241e:	f244 435d 	movw	r3, #17501	; 0x445d
 8002422:	623b      	str	r3, [r7, #32]

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_4, &pCompareCfg) != HAL_OK)
 8002424:	f107 0320 	add.w	r3, r7, #32
 8002428:	2208      	movs	r2, #8
 800242a:	2104      	movs	r1, #4
 800242c:	483c      	ldr	r0, [pc, #240]	; (8002520 <MX_HRTIM_Init+0x29c>)
 800242e:	f005 fbb1 	bl	8007b94 <HAL_HRTIM_WaveformCompareConfig>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <MX_HRTIM_Init+0x1b8>
  {
    Error_Handler();
 8002438:	f000 fc0a 	bl	8002c50 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_LOW;
 800243c:	2302      	movs	r3, #2
 800243e:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP1|HRTIM_OUTPUTSET_TIMCMP3;
 8002440:	2328      	movs	r3, #40	; 0x28
 8002442:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2|HRTIM_OUTPUTRESET_TIMPER;
 8002444:	2314      	movs	r3, #20
 8002446:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8002448:	2300      	movs	r3, #0
 800244a:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_ACTIVE;
 800244c:	2308      	movs	r3, #8
 800244e:	613b      	str	r3, [r7, #16]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8002450:	2300      	movs	r3, #0
 8002452:	617b      	str	r3, [r7, #20]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8002454:	2300      	movs	r3, #0
 8002456:	61bb      	str	r3, [r7, #24]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8002458:	2300      	movs	r3, #0
 800245a:	61fb      	str	r3, [r7, #28]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 800245c:	463b      	mov	r3, r7
 800245e:	2201      	movs	r2, #1
 8002460:	2100      	movs	r1, #0
 8002462:	482f      	ldr	r0, [pc, #188]	; (8002520 <MX_HRTIM_Init+0x29c>)
 8002464:	f005 fd04 	bl	8007e70 <HAL_HRTIM_WaveformOutputConfig>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <MX_HRTIM_Init+0x1ee>
  {
    Error_Handler();
 800246e:	f000 fbef 	bl	8002c50 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8002472:	2300      	movs	r3, #0
 8002474:	603b      	str	r3, [r7, #0]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2|HRTIM_OUTPUTRESET_TIMCMP4;
 8002476:	2350      	movs	r3, #80	; 0x50
 8002478:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 800247a:	2300      	movs	r3, #0
 800247c:	613b      	str	r3, [r7, #16]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE1, &pOutputCfg) != HAL_OK)
 800247e:	463b      	mov	r3, r7
 8002480:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002484:	2104      	movs	r1, #4
 8002486:	4826      	ldr	r0, [pc, #152]	; (8002520 <MX_HRTIM_Init+0x29c>)
 8002488:	f005 fcf2 	bl	8007e70 <HAL_HRTIM_WaveformOutputConfig>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <MX_HRTIM_Init+0x212>
  {
    Error_Handler();
 8002492:	f000 fbdd 	bl	8002c50 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_LOW;
 8002496:	2302      	movs	r3, #2
 8002498:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP3;
 800249a:	2320      	movs	r3, #32
 800249c:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2;
 800249e:	2310      	movs	r3, #16
 80024a0:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_ACTIVE;
 80024a2:	2308      	movs	r3, #8
 80024a4:	613b      	str	r3, [r7, #16]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 80024a6:	463b      	mov	r3, r7
 80024a8:	2202      	movs	r2, #2
 80024aa:	2100      	movs	r1, #0
 80024ac:	481c      	ldr	r0, [pc, #112]	; (8002520 <MX_HRTIM_Init+0x29c>)
 80024ae:	f005 fcdf 	bl	8007e70 <HAL_HRTIM_WaveformOutputConfig>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <MX_HRTIM_Init+0x238>
  {
    Error_Handler();
 80024b8:	f000 fbca 	bl	8002c50 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimeBaseCfg) != HAL_OK)
 80024bc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80024c0:	461a      	mov	r2, r3
 80024c2:	2104      	movs	r1, #4
 80024c4:	4816      	ldr	r0, [pc, #88]	; (8002520 <MX_HRTIM_Init+0x29c>)
 80024c6:	f005 facb 	bl	8007a60 <HAL_HRTIM_TimeBaseConfig>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <MX_HRTIM_Init+0x250>
  {
    Error_Handler();
 80024d0:	f000 fbbe 	bl	8002c50 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY;
 80024d4:	f240 7353 	movw	r3, #1875	; 0x753
 80024d8:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 80024da:	f107 0320 	add.w	r3, r7, #32
 80024de:	2201      	movs	r2, #1
 80024e0:	2104      	movs	r1, #4
 80024e2:	480f      	ldr	r0, [pc, #60]	; (8002520 <MX_HRTIM_Init+0x29c>)
 80024e4:	f005 fb56 	bl	8007b94 <HAL_HRTIM_WaveformCompareConfig>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <MX_HRTIM_Init+0x26e>
  {
    Error_Handler();
 80024ee:	f000 fbaf 	bl	8002c50 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH+RAMSEY_TIME;
 80024f2:	f643 6342 	movw	r3, #15938	; 0x3e42
 80024f6:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 80024f8:	f107 0320 	add.w	r3, r7, #32
 80024fc:	2204      	movs	r2, #4
 80024fe:	2104      	movs	r1, #4
 8002500:	4807      	ldr	r0, [pc, #28]	; (8002520 <MX_HRTIM_Init+0x29c>)
 8002502:	f005 fb47 	bl	8007b94 <HAL_HRTIM_WaveformCompareConfig>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <MX_HRTIM_Init+0x28c>
  {
    Error_Handler();
 800250c:	f000 fba0 	bl	8002c50 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM_Init 2 */

  /* USER CODE END HRTIM_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim);
 8002510:	4803      	ldr	r0, [pc, #12]	; (8002520 <MX_HRTIM_Init+0x29c>)
 8002512:	f000 fcdf 	bl	8002ed4 <HAL_HRTIM_MspPostInit>

}
 8002516:	bf00      	nop
 8002518:	3790      	adds	r7, #144	; 0x90
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	200002c4 	.word	0x200002c4
 8002524:	40017400 	.word	0x40017400

08002528 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 800252c:	4b13      	ldr	r3, [pc, #76]	; (800257c <MX_LPTIM1_Init+0x54>)
 800252e:	4a14      	ldr	r2, [pc, #80]	; (8002580 <MX_LPTIM1_Init+0x58>)
 8002530:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8002532:	4b12      	ldr	r3, [pc, #72]	; (800257c <MX_LPTIM1_Init+0x54>)
 8002534:	2200      	movs	r2, #0
 8002536:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV32;
 8002538:	4b10      	ldr	r3, [pc, #64]	; (800257c <MX_LPTIM1_Init+0x54>)
 800253a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800253e:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8002540:	4b0e      	ldr	r3, [pc, #56]	; (800257c <MX_LPTIM1_Init+0x54>)
 8002542:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002546:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8002548:	4b0c      	ldr	r3, [pc, #48]	; (800257c <MX_LPTIM1_Init+0x54>)
 800254a:	2200      	movs	r2, #0
 800254c:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 800254e:	4b0b      	ldr	r3, [pc, #44]	; (800257c <MX_LPTIM1_Init+0x54>)
 8002550:	2200      	movs	r2, #0
 8002552:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8002554:	4b09      	ldr	r3, [pc, #36]	; (800257c <MX_LPTIM1_Init+0x54>)
 8002556:	2200      	movs	r2, #0
 8002558:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 800255a:	4b08      	ldr	r3, [pc, #32]	; (800257c <MX_LPTIM1_Init+0x54>)
 800255c:	2200      	movs	r2, #0
 800255e:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8002560:	4b06      	ldr	r3, [pc, #24]	; (800257c <MX_LPTIM1_Init+0x54>)
 8002562:	2200      	movs	r2, #0
 8002564:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8002566:	4805      	ldr	r0, [pc, #20]	; (800257c <MX_LPTIM1_Init+0x54>)
 8002568:	f006 fcae 	bl	8008ec8 <HAL_LPTIM_Init>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 8002572:	f000 fb6d 	bl	8002c50 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8002576:	bf00      	nop
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	200003a0 	.word	0x200003a0
 8002580:	40002400 	.word	0x40002400

08002584 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b088      	sub	sp, #32
 8002588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800258a:	f107 0310 	add.w	r3, r7, #16
 800258e:	2200      	movs	r2, #0
 8002590:	601a      	str	r2, [r3, #0]
 8002592:	605a      	str	r2, [r3, #4]
 8002594:	609a      	str	r2, [r3, #8]
 8002596:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002598:	1d3b      	adds	r3, r7, #4
 800259a:	2200      	movs	r2, #0
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	605a      	str	r2, [r3, #4]
 80025a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80025a2:	4b20      	ldr	r3, [pc, #128]	; (8002624 <MX_TIM1_Init+0xa0>)
 80025a4:	4a20      	ldr	r2, [pc, #128]	; (8002628 <MX_TIM1_Init+0xa4>)
 80025a6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1249;
 80025a8:	4b1e      	ldr	r3, [pc, #120]	; (8002624 <MX_TIM1_Init+0xa0>)
 80025aa:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80025ae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025b0:	4b1c      	ldr	r3, [pc, #112]	; (8002624 <MX_TIM1_Init+0xa0>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80025b6:	4b1b      	ldr	r3, [pc, #108]	; (8002624 <MX_TIM1_Init+0xa0>)
 80025b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025bc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025be:	4b19      	ldr	r3, [pc, #100]	; (8002624 <MX_TIM1_Init+0xa0>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80025c4:	4b17      	ldr	r3, [pc, #92]	; (8002624 <MX_TIM1_Init+0xa0>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025ca:	4b16      	ldr	r3, [pc, #88]	; (8002624 <MX_TIM1_Init+0xa0>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80025d0:	4814      	ldr	r0, [pc, #80]	; (8002624 <MX_TIM1_Init+0xa0>)
 80025d2:	f00a fe27 	bl	800d224 <HAL_TIM_Base_Init>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 80025dc:	f000 fb38 	bl	8002c50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025e4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80025e6:	f107 0310 	add.w	r3, r7, #16
 80025ea:	4619      	mov	r1, r3
 80025ec:	480d      	ldr	r0, [pc, #52]	; (8002624 <MX_TIM1_Init+0xa0>)
 80025ee:	f00a fe71 	bl	800d2d4 <HAL_TIM_ConfigClockSource>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80025f8:	f000 fb2a 	bl	8002c50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025fc:	2300      	movs	r3, #0
 80025fe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002600:	2300      	movs	r3, #0
 8002602:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002604:	2300      	movs	r3, #0
 8002606:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002608:	1d3b      	adds	r3, r7, #4
 800260a:	4619      	mov	r1, r3
 800260c:	4805      	ldr	r0, [pc, #20]	; (8002624 <MX_TIM1_Init+0xa0>)
 800260e:	f00b f891 	bl	800d734 <HAL_TIMEx_MasterConfigSynchronization>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002618:	f000 fb1a 	bl	8002c50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800261c:	bf00      	nop
 800261e:	3720      	adds	r7, #32
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	200003d8 	.word	0x200003d8
 8002628:	40010000 	.word	0x40010000

0800262c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b088      	sub	sp, #32
 8002630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002632:	f107 0310 	add.w	r3, r7, #16
 8002636:	2200      	movs	r2, #0
 8002638:	601a      	str	r2, [r3, #0]
 800263a:	605a      	str	r2, [r3, #4]
 800263c:	609a      	str	r2, [r3, #8]
 800263e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002640:	1d3b      	adds	r3, r7, #4
 8002642:	2200      	movs	r2, #0
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	605a      	str	r2, [r3, #4]
 8002648:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800264a:	4b1e      	ldr	r3, [pc, #120]	; (80026c4 <MX_TIM2_Init+0x98>)
 800264c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002650:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 124;
 8002652:	4b1c      	ldr	r3, [pc, #112]	; (80026c4 <MX_TIM2_Init+0x98>)
 8002654:	227c      	movs	r2, #124	; 0x7c
 8002656:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002658:	4b1a      	ldr	r3, [pc, #104]	; (80026c4 <MX_TIM2_Init+0x98>)
 800265a:	2200      	movs	r2, #0
 800265c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800265e:	4b19      	ldr	r3, [pc, #100]	; (80026c4 <MX_TIM2_Init+0x98>)
 8002660:	f04f 32ff 	mov.w	r2, #4294967295
 8002664:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002666:	4b17      	ldr	r3, [pc, #92]	; (80026c4 <MX_TIM2_Init+0x98>)
 8002668:	2200      	movs	r2, #0
 800266a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800266c:	4b15      	ldr	r3, [pc, #84]	; (80026c4 <MX_TIM2_Init+0x98>)
 800266e:	2200      	movs	r2, #0
 8002670:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002672:	4814      	ldr	r0, [pc, #80]	; (80026c4 <MX_TIM2_Init+0x98>)
 8002674:	f00a fdd6 	bl	800d224 <HAL_TIM_Base_Init>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800267e:	f000 fae7 	bl	8002c50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002682:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002686:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002688:	f107 0310 	add.w	r3, r7, #16
 800268c:	4619      	mov	r1, r3
 800268e:	480d      	ldr	r0, [pc, #52]	; (80026c4 <MX_TIM2_Init+0x98>)
 8002690:	f00a fe20 	bl	800d2d4 <HAL_TIM_ConfigClockSource>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800269a:	f000 fad9 	bl	8002c50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800269e:	2300      	movs	r3, #0
 80026a0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026a2:	2300      	movs	r3, #0
 80026a4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80026a6:	1d3b      	adds	r3, r7, #4
 80026a8:	4619      	mov	r1, r3
 80026aa:	4806      	ldr	r0, [pc, #24]	; (80026c4 <MX_TIM2_Init+0x98>)
 80026ac:	f00b f842 	bl	800d734 <HAL_TIMEx_MasterConfigSynchronization>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80026b6:	f000 facb 	bl	8002c50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80026ba:	bf00      	nop
 80026bc:	3720      	adds	r7, #32
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	20000424 	.word	0x20000424

080026c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b088      	sub	sp, #32
 80026cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026ce:	f107 0310 	add.w	r3, r7, #16
 80026d2:	2200      	movs	r2, #0
 80026d4:	601a      	str	r2, [r3, #0]
 80026d6:	605a      	str	r2, [r3, #4]
 80026d8:	609a      	str	r2, [r3, #8]
 80026da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026dc:	1d3b      	adds	r3, r7, #4
 80026de:	2200      	movs	r2, #0
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	605a      	str	r2, [r3, #4]
 80026e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80026e6:	4b1d      	ldr	r3, [pc, #116]	; (800275c <MX_TIM3_Init+0x94>)
 80026e8:	4a1d      	ldr	r2, [pc, #116]	; (8002760 <MX_TIM3_Init+0x98>)
 80026ea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 124;
 80026ec:	4b1b      	ldr	r3, [pc, #108]	; (800275c <MX_TIM3_Init+0x94>)
 80026ee:	227c      	movs	r2, #124	; 0x7c
 80026f0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026f2:	4b1a      	ldr	r3, [pc, #104]	; (800275c <MX_TIM3_Init+0x94>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80026f8:	4b18      	ldr	r3, [pc, #96]	; (800275c <MX_TIM3_Init+0x94>)
 80026fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002700:	4b16      	ldr	r3, [pc, #88]	; (800275c <MX_TIM3_Init+0x94>)
 8002702:	2200      	movs	r2, #0
 8002704:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002706:	4b15      	ldr	r3, [pc, #84]	; (800275c <MX_TIM3_Init+0x94>)
 8002708:	2200      	movs	r2, #0
 800270a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800270c:	4813      	ldr	r0, [pc, #76]	; (800275c <MX_TIM3_Init+0x94>)
 800270e:	f00a fd89 	bl	800d224 <HAL_TIM_Base_Init>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002718:	f000 fa9a 	bl	8002c50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800271c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002720:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002722:	f107 0310 	add.w	r3, r7, #16
 8002726:	4619      	mov	r1, r3
 8002728:	480c      	ldr	r0, [pc, #48]	; (800275c <MX_TIM3_Init+0x94>)
 800272a:	f00a fdd3 	bl	800d2d4 <HAL_TIM_ConfigClockSource>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002734:	f000 fa8c 	bl	8002c50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002738:	2300      	movs	r3, #0
 800273a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800273c:	2300      	movs	r3, #0
 800273e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002740:	1d3b      	adds	r3, r7, #4
 8002742:	4619      	mov	r1, r3
 8002744:	4805      	ldr	r0, [pc, #20]	; (800275c <MX_TIM3_Init+0x94>)
 8002746:	f00a fff5 	bl	800d734 <HAL_TIMEx_MasterConfigSynchronization>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002750:	f000 fa7e 	bl	8002c50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002754:	bf00      	nop
 8002756:	3720      	adds	r7, #32
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	20000470 	.word	0x20000470
 8002760:	40000400 	.word	0x40000400

08002764 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b088      	sub	sp, #32
 8002768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800276a:	f107 0310 	add.w	r3, r7, #16
 800276e:	2200      	movs	r2, #0
 8002770:	601a      	str	r2, [r3, #0]
 8002772:	605a      	str	r2, [r3, #4]
 8002774:	609a      	str	r2, [r3, #8]
 8002776:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002778:	1d3b      	adds	r3, r7, #4
 800277a:	2200      	movs	r2, #0
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	605a      	str	r2, [r3, #4]
 8002780:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002782:	4b1d      	ldr	r3, [pc, #116]	; (80027f8 <MX_TIM5_Init+0x94>)
 8002784:	4a1d      	ldr	r2, [pc, #116]	; (80027fc <MX_TIM5_Init+0x98>)
 8002786:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 124;
 8002788:	4b1b      	ldr	r3, [pc, #108]	; (80027f8 <MX_TIM5_Init+0x94>)
 800278a:	227c      	movs	r2, #124	; 0x7c
 800278c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800278e:	4b1a      	ldr	r3, [pc, #104]	; (80027f8 <MX_TIM5_Init+0x94>)
 8002790:	2200      	movs	r2, #0
 8002792:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002794:	4b18      	ldr	r3, [pc, #96]	; (80027f8 <MX_TIM5_Init+0x94>)
 8002796:	f04f 32ff 	mov.w	r2, #4294967295
 800279a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800279c:	4b16      	ldr	r3, [pc, #88]	; (80027f8 <MX_TIM5_Init+0x94>)
 800279e:	2200      	movs	r2, #0
 80027a0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027a2:	4b15      	ldr	r3, [pc, #84]	; (80027f8 <MX_TIM5_Init+0x94>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80027a8:	4813      	ldr	r0, [pc, #76]	; (80027f8 <MX_TIM5_Init+0x94>)
 80027aa:	f00a fd3b 	bl	800d224 <HAL_TIM_Base_Init>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80027b4:	f000 fa4c 	bl	8002c50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80027be:	f107 0310 	add.w	r3, r7, #16
 80027c2:	4619      	mov	r1, r3
 80027c4:	480c      	ldr	r0, [pc, #48]	; (80027f8 <MX_TIM5_Init+0x94>)
 80027c6:	f00a fd85 	bl	800d2d4 <HAL_TIM_ConfigClockSource>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80027d0:	f000 fa3e 	bl	8002c50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027d4:	2300      	movs	r3, #0
 80027d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027d8:	2300      	movs	r3, #0
 80027da:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80027dc:	1d3b      	adds	r3, r7, #4
 80027de:	4619      	mov	r1, r3
 80027e0:	4805      	ldr	r0, [pc, #20]	; (80027f8 <MX_TIM5_Init+0x94>)
 80027e2:	f00a ffa7 	bl	800d734 <HAL_TIMEx_MasterConfigSynchronization>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80027ec:	f000 fa30 	bl	8002c50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80027f0:	bf00      	nop
 80027f2:	3720      	adds	r7, #32
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	200004bc 	.word	0x200004bc
 80027fc:	40000c00 	.word	0x40000c00

08002800 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002804:	4b22      	ldr	r3, [pc, #136]	; (8002890 <MX_USART3_UART_Init+0x90>)
 8002806:	4a23      	ldr	r2, [pc, #140]	; (8002894 <MX_USART3_UART_Init+0x94>)
 8002808:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1000000;
 800280a:	4b21      	ldr	r3, [pc, #132]	; (8002890 <MX_USART3_UART_Init+0x90>)
 800280c:	4a22      	ldr	r2, [pc, #136]	; (8002898 <MX_USART3_UART_Init+0x98>)
 800280e:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002810:	4b1f      	ldr	r3, [pc, #124]	; (8002890 <MX_USART3_UART_Init+0x90>)
 8002812:	2200      	movs	r2, #0
 8002814:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002816:	4b1e      	ldr	r3, [pc, #120]	; (8002890 <MX_USART3_UART_Init+0x90>)
 8002818:	2200      	movs	r2, #0
 800281a:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800281c:	4b1c      	ldr	r3, [pc, #112]	; (8002890 <MX_USART3_UART_Init+0x90>)
 800281e:	2200      	movs	r2, #0
 8002820:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002822:	4b1b      	ldr	r3, [pc, #108]	; (8002890 <MX_USART3_UART_Init+0x90>)
 8002824:	220c      	movs	r2, #12
 8002826:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002828:	4b19      	ldr	r3, [pc, #100]	; (8002890 <MX_USART3_UART_Init+0x90>)
 800282a:	2200      	movs	r2, #0
 800282c:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800282e:	4b18      	ldr	r3, [pc, #96]	; (8002890 <MX_USART3_UART_Init+0x90>)
 8002830:	2200      	movs	r2, #0
 8002832:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002834:	4b16      	ldr	r3, [pc, #88]	; (8002890 <MX_USART3_UART_Init+0x90>)
 8002836:	2200      	movs	r2, #0
 8002838:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800283a:	4b15      	ldr	r3, [pc, #84]	; (8002890 <MX_USART3_UART_Init+0x90>)
 800283c:	2200      	movs	r2, #0
 800283e:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002840:	4b13      	ldr	r3, [pc, #76]	; (8002890 <MX_USART3_UART_Init+0x90>)
 8002842:	2200      	movs	r2, #0
 8002844:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002846:	4812      	ldr	r0, [pc, #72]	; (8002890 <MX_USART3_UART_Init+0x90>)
 8002848:	f00b f802 	bl	800d850 <HAL_UART_Init>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8002852:	f000 f9fd 	bl	8002c50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002856:	2100      	movs	r1, #0
 8002858:	480d      	ldr	r0, [pc, #52]	; (8002890 <MX_USART3_UART_Init+0x90>)
 800285a:	f00c f892 	bl	800e982 <HAL_UARTEx_SetTxFifoThreshold>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8002864:	f000 f9f4 	bl	8002c50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002868:	2100      	movs	r1, #0
 800286a:	4809      	ldr	r0, [pc, #36]	; (8002890 <MX_USART3_UART_Init+0x90>)
 800286c:	f00c f8c7 	bl	800e9fe <HAL_UARTEx_SetRxFifoThreshold>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8002876:	f000 f9eb 	bl	8002c50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800287a:	4805      	ldr	r0, [pc, #20]	; (8002890 <MX_USART3_UART_Init+0x90>)
 800287c:	f00c f848 	bl	800e910 <HAL_UARTEx_DisableFifoMode>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8002886:	f000 f9e3 	bl	8002c50 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800288a:	bf00      	nop
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	20000508 	.word	0x20000508
 8002894:	40004800 	.word	0x40004800
 8002898:	000f4240 	.word	0x000f4240

0800289c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b08e      	sub	sp, #56	; 0x38
 80028a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028a6:	2200      	movs	r2, #0
 80028a8:	601a      	str	r2, [r3, #0]
 80028aa:	605a      	str	r2, [r3, #4]
 80028ac:	609a      	str	r2, [r3, #8]
 80028ae:	60da      	str	r2, [r3, #12]
 80028b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80028b2:	4ba0      	ldr	r3, [pc, #640]	; (8002b34 <MX_GPIO_Init+0x298>)
 80028b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028b8:	4a9e      	ldr	r2, [pc, #632]	; (8002b34 <MX_GPIO_Init+0x298>)
 80028ba:	f043 0310 	orr.w	r3, r3, #16
 80028be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028c2:	4b9c      	ldr	r3, [pc, #624]	; (8002b34 <MX_GPIO_Init+0x298>)
 80028c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028c8:	f003 0310 	and.w	r3, r3, #16
 80028cc:	623b      	str	r3, [r7, #32]
 80028ce:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028d0:	4b98      	ldr	r3, [pc, #608]	; (8002b34 <MX_GPIO_Init+0x298>)
 80028d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028d6:	4a97      	ldr	r2, [pc, #604]	; (8002b34 <MX_GPIO_Init+0x298>)
 80028d8:	f043 0304 	orr.w	r3, r3, #4
 80028dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028e0:	4b94      	ldr	r3, [pc, #592]	; (8002b34 <MX_GPIO_Init+0x298>)
 80028e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028e6:	f003 0304 	and.w	r3, r3, #4
 80028ea:	61fb      	str	r3, [r7, #28]
 80028ec:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80028ee:	4b91      	ldr	r3, [pc, #580]	; (8002b34 <MX_GPIO_Init+0x298>)
 80028f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028f4:	4a8f      	ldr	r2, [pc, #572]	; (8002b34 <MX_GPIO_Init+0x298>)
 80028f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028fe:	4b8d      	ldr	r3, [pc, #564]	; (8002b34 <MX_GPIO_Init+0x298>)
 8002900:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002908:	61bb      	str	r3, [r7, #24]
 800290a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800290c:	4b89      	ldr	r3, [pc, #548]	; (8002b34 <MX_GPIO_Init+0x298>)
 800290e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002912:	4a88      	ldr	r2, [pc, #544]	; (8002b34 <MX_GPIO_Init+0x298>)
 8002914:	f043 0301 	orr.w	r3, r3, #1
 8002918:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800291c:	4b85      	ldr	r3, [pc, #532]	; (8002b34 <MX_GPIO_Init+0x298>)
 800291e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	617b      	str	r3, [r7, #20]
 8002928:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800292a:	4b82      	ldr	r3, [pc, #520]	; (8002b34 <MX_GPIO_Init+0x298>)
 800292c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002930:	4a80      	ldr	r2, [pc, #512]	; (8002b34 <MX_GPIO_Init+0x298>)
 8002932:	f043 0302 	orr.w	r3, r3, #2
 8002936:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800293a:	4b7e      	ldr	r3, [pc, #504]	; (8002b34 <MX_GPIO_Init+0x298>)
 800293c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002940:	f003 0302 	and.w	r3, r3, #2
 8002944:	613b      	str	r3, [r7, #16]
 8002946:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002948:	4b7a      	ldr	r3, [pc, #488]	; (8002b34 <MX_GPIO_Init+0x298>)
 800294a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800294e:	4a79      	ldr	r2, [pc, #484]	; (8002b34 <MX_GPIO_Init+0x298>)
 8002950:	f043 0320 	orr.w	r3, r3, #32
 8002954:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002958:	4b76      	ldr	r3, [pc, #472]	; (8002b34 <MX_GPIO_Init+0x298>)
 800295a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800295e:	f003 0320 	and.w	r3, r3, #32
 8002962:	60fb      	str	r3, [r7, #12]
 8002964:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002966:	4b73      	ldr	r3, [pc, #460]	; (8002b34 <MX_GPIO_Init+0x298>)
 8002968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800296c:	4a71      	ldr	r2, [pc, #452]	; (8002b34 <MX_GPIO_Init+0x298>)
 800296e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002972:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002976:	4b6f      	ldr	r3, [pc, #444]	; (8002b34 <MX_GPIO_Init+0x298>)
 8002978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800297c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002980:	60bb      	str	r3, [r7, #8]
 8002982:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002984:	4b6b      	ldr	r3, [pc, #428]	; (8002b34 <MX_GPIO_Init+0x298>)
 8002986:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800298a:	4a6a      	ldr	r2, [pc, #424]	; (8002b34 <MX_GPIO_Init+0x298>)
 800298c:	f043 0308 	orr.w	r3, r3, #8
 8002990:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002994:	4b67      	ldr	r3, [pc, #412]	; (8002b34 <MX_GPIO_Init+0x298>)
 8002996:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800299a:	f003 0308 	and.w	r3, r3, #8
 800299e:	607b      	str	r3, [r7, #4]
 80029a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ATT_4_Pin|ATT_8_Pin|ATT_16_Pin, GPIO_PIN_SET);
 80029a2:	2201      	movs	r2, #1
 80029a4:	2134      	movs	r1, #52	; 0x34
 80029a6:	4864      	ldr	r0, [pc, #400]	; (8002b38 <MX_GPIO_Init+0x29c>)
 80029a8:	f004 ff32 	bl	8007810 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|MW_INVALID_Pin|LASER_TUNING_Pin|LD3_Pin
 80029ac:	2200      	movs	r2, #0
 80029ae:	f245 1103 	movw	r1, #20739	; 0x5103
 80029b2:	4862      	ldr	r0, [pc, #392]	; (8002b3c <MX_GPIO_Init+0x2a0>)
 80029b4:	f004 ff2c 	bl	8007810 <HAL_GPIO_WritePin>
                          |SPARE_OUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET);
 80029b8:	2200      	movs	r2, #0
 80029ba:	2101      	movs	r1, #1
 80029bc:	4860      	ldr	r0, [pc, #384]	; (8002b40 <MX_GPIO_Init+0x2a4>)
 80029be:	f004 ff27 	bl	8007810 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80029c2:	2200      	movs	r2, #0
 80029c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80029c8:	485e      	ldr	r0, [pc, #376]	; (8002b44 <MX_GPIO_Init+0x2a8>)
 80029ca:	f004 ff21 	bl	8007810 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SCLK_Pin|MOSI_Pin|REG_EN_Pin, GPIO_PIN_RESET);
 80029ce:	2200      	movs	r2, #0
 80029d0:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 80029d4:	485c      	ldr	r0, [pc, #368]	; (8002b48 <MX_GPIO_Init+0x2ac>)
 80029d6:	f004 ff1b 	bl	8007810 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 80029da:	2201      	movs	r2, #1
 80029dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80029e0:	4859      	ldr	r0, [pc, #356]	; (8002b48 <MX_GPIO_Init+0x2ac>)
 80029e2:	f004 ff15 	bl	8007810 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ATT_2_Pin|ATT_1_Pin|ATT_05_Pin|ATT_025_Pin
 80029e6:	2201      	movs	r2, #1
 80029e8:	21f8      	movs	r1, #248	; 0xf8
 80029ea:	4856      	ldr	r0, [pc, #344]	; (8002b44 <MX_GPIO_Init+0x2a8>)
 80029ec:	f004 ff10 	bl	8007810 <HAL_GPIO_WritePin>
                          |ATT_LE_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80029f0:	2200      	movs	r2, #0
 80029f2:	2102      	movs	r1, #2
 80029f4:	4850      	ldr	r0, [pc, #320]	; (8002b38 <MX_GPIO_Init+0x29c>)
 80029f6:	f004 ff0b 	bl	8007810 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ATT_4_Pin ATT_8_Pin ATT_16_Pin LD2_Pin */
  GPIO_InitStruct.Pin = ATT_4_Pin|ATT_8_Pin|ATT_16_Pin|LD2_Pin;
 80029fa:	2336      	movs	r3, #54	; 0x36
 80029fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029fe:	2301      	movs	r3, #1
 8002a00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a02:	2300      	movs	r3, #0
 8002a04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a06:	2300      	movs	r3, #0
 8002a08:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a0e:	4619      	mov	r1, r3
 8002a10:	4849      	ldr	r0, [pc, #292]	; (8002b38 <MX_GPIO_Init+0x29c>)
 8002a12:	f004 fd35 	bl	8007480 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 8002a16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a1c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002a20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a22:	2300      	movs	r3, #0
 8002a24:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002a26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	4846      	ldr	r0, [pc, #280]	; (8002b48 <MX_GPIO_Init+0x2ac>)
 8002a2e:	f004 fd27 	bl	8007480 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin MW_INVALID_Pin LASER_TUNING_Pin LD3_Pin
                           SPARE_OUT_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|MW_INVALID_Pin|LASER_TUNING_Pin|LD3_Pin
 8002a32:	f245 1303 	movw	r3, #20739	; 0x5103
 8002a36:	627b      	str	r3, [r7, #36]	; 0x24
                          |SPARE_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a40:	2300      	movs	r3, #0
 8002a42:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a48:	4619      	mov	r1, r3
 8002a4a:	483c      	ldr	r0, [pc, #240]	; (8002b3c <MX_GPIO_Init+0x2a0>)
 8002a4c:	f004 fd18 	bl	8007480 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002a50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a56:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a64:	4619      	mov	r1, r3
 8002a66:	4839      	ldr	r0, [pc, #228]	; (8002b4c <MX_GPIO_Init+0x2b0>)
 8002a68:	f004 fd0a 	bl	8007480 <HAL_GPIO_Init>

  /*Configure GPIO pin : SCOPE_TRIG_OUT_Pin */
  GPIO_InitStruct.Pin = SCOPE_TRIG_OUT_Pin;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a70:	2301      	movs	r3, #1
 8002a72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a74:	2300      	movs	r3, #0
 8002a76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SCOPE_TRIG_OUT_GPIO_Port, &GPIO_InitStruct);
 8002a7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a80:	4619      	mov	r1, r3
 8002a82:	482f      	ldr	r0, [pc, #188]	; (8002b40 <MX_GPIO_Init+0x2a4>)
 8002a84:	f004 fcfc 	bl	8007480 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin ATT_2_Pin ATT_1_Pin ATT_05_Pin
                           ATT_025_Pin ATT_LE_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|ATT_2_Pin|ATT_1_Pin|ATT_05_Pin
 8002a88:	f44f 639f 	mov.w	r3, #1272	; 0x4f8
 8002a8c:	627b      	str	r3, [r7, #36]	; 0x24
                          |ATT_025_Pin|ATT_LE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a92:	2300      	movs	r3, #0
 8002a94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a96:	2300      	movs	r3, #0
 8002a98:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	4828      	ldr	r0, [pc, #160]	; (8002b44 <MX_GPIO_Init+0x2a8>)
 8002aa2:	f004 fced 	bl	8007480 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8002aa6:	2380      	movs	r3, #128	; 0x80
 8002aa8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002aaa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002aae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8002ab4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ab8:	4619      	mov	r1, r3
 8002aba:	4821      	ldr	r0, [pc, #132]	; (8002b40 <MX_GPIO_Init+0x2a4>)
 8002abc:	f004 fce0 	bl	8007480 <HAL_GPIO_Init>

  /*Configure GPIO pins : SCLK_Pin MOSI_Pin SEN_Pin REG_EN_Pin */
  GPIO_InitStruct.Pin = SCLK_Pin|MOSI_Pin|SEN_Pin|REG_EN_Pin;
 8002ac0:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8002ac4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002aca:	2302      	movs	r3, #2
 8002acc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ad2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	481b      	ldr	r0, [pc, #108]	; (8002b48 <MX_GPIO_Init+0x2ac>)
 8002ada:	f004 fcd1 	bl	8007480 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8002ade:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8002ae2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aec:	2300      	movs	r3, #0
 8002aee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002af0:	230a      	movs	r3, #10
 8002af2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002af4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002af8:	4619      	mov	r1, r3
 8002afa:	4815      	ldr	r0, [pc, #84]	; (8002b50 <MX_GPIO_Init+0x2b4>)
 8002afc:	f004 fcc0 	bl	8007480 <HAL_GPIO_Init>

  /*Configure GPIO pin : MISO_Pin */
  GPIO_InitStruct.Pin = MISO_Pin;
 8002b00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b06:	2300      	movs	r3, #0
 8002b08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MISO_GPIO_Port, &GPIO_InitStruct);
 8002b0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b12:	4619      	mov	r1, r3
 8002b14:	480c      	ldr	r0, [pc, #48]	; (8002b48 <MX_GPIO_Init+0x2ac>)
 8002b16:	f004 fcb3 	bl	8007480 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	2028      	movs	r0, #40	; 0x28
 8002b20:	f002 fe65 	bl	80057ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002b24:	2028      	movs	r0, #40	; 0x28
 8002b26:	f002 fe7c 	bl	8005822 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002b2a:	bf00      	nop
 8002b2c:	3738      	adds	r7, #56	; 0x38
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	58024400 	.word	0x58024400
 8002b38:	58021000 	.word	0x58021000
 8002b3c:	58020400 	.word	0x58020400
 8002b40:	58021800 	.word	0x58021800
 8002b44:	58020c00 	.word	0x58020c00
 8002b48:	58020800 	.word	0x58020800
 8002b4c:	58021400 	.word	0x58021400
 8002b50:	58020000 	.word	0x58020000

08002b54 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  adc_val = HAL_ADC_GetValue(&hadc3);
 8002b5c:	480e      	ldr	r0, [pc, #56]	; (8002b98 <HAL_ADC_ConvCpltCallback+0x44>)
 8002b5e:	f001 fd01 	bl	8004564 <HAL_ADC_GetValue>
 8002b62:	4603      	mov	r3, r0
 8002b64:	4a0d      	ldr	r2, [pc, #52]	; (8002b9c <HAL_ADC_ConvCpltCallback+0x48>)
 8002b66:	6013      	str	r3, [r2, #0]
  //printf("ADC value: %lu \r\n", adc_val);
  dac_val = adc_val >> 4;
 8002b68:	4b0c      	ldr	r3, [pc, #48]	; (8002b9c <HAL_ADC_ConvCpltCallback+0x48>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	091b      	lsrs	r3, r3, #4
 8002b6e:	4a0c      	ldr	r2, [pc, #48]	; (8002ba0 <HAL_ADC_ConvCpltCallback+0x4c>)
 8002b70:	6013      	str	r3, [r2, #0]
  sample_count++;
 8002b72:	4b0c      	ldr	r3, [pc, #48]	; (8002ba4 <HAL_ADC_ConvCpltCallback+0x50>)
 8002b74:	881b      	ldrh	r3, [r3, #0]
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	3301      	adds	r3, #1
 8002b7a:	b29a      	uxth	r2, r3
 8002b7c:	4b09      	ldr	r3, [pc, #36]	; (8002ba4 <HAL_ADC_ConvCpltCallback+0x50>)
 8002b7e:	801a      	strh	r2, [r3, #0]
	  printf("ADC reading: %lu, max: %lu, min: %lu \r\n", adc_val, adc_max, adc_min);
  }
  //printf("ADC reading: %lu, max: %lu, min: %lu \r\n", adc_val, adc_max, adc_min);
#endif //QUANTIFY_ADC_NOISE
  //printf("ADC value: %lu, DAC value: %lu \r\n", adc_val, dac_val);
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_val);
 8002b80:	4b07      	ldr	r3, [pc, #28]	; (8002ba0 <HAL_ADC_ConvCpltCallback+0x4c>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2200      	movs	r2, #0
 8002b86:	2100      	movs	r1, #0
 8002b88:	4807      	ldr	r0, [pc, #28]	; (8002ba8 <HAL_ADC_ConvCpltCallback+0x54>)
 8002b8a:	f002 ff55 	bl	8005a38 <HAL_DAC_SetValue>
  //HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);
}
 8002b8e:	bf00      	nop
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	2000024c 	.word	0x2000024c
 8002b9c:	200005a4 	.word	0x200005a4
 8002ba0:	200005a8 	.word	0x200005a8
 8002ba4:	2000059e 	.word	0x2000059e
 8002ba8:	200002b0 	.word	0x200002b0

08002bac <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8002bb2:	463b      	mov	r3, r7
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	601a      	str	r2, [r3, #0]
 8002bb8:	605a      	str	r2, [r3, #4]
 8002bba:	609a      	str	r2, [r3, #8]
 8002bbc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8002bbe:	f002 fe4b 	bl	8005858 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8002bce:	231f      	movs	r3, #31
 8002bd0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8002bd2:	2387      	movs	r3, #135	; 0x87
 8002bd4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8002bde:	2301      	movs	r3, #1
 8002be0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002be2:	2301      	movs	r3, #1
 8002be4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8002be6:	2300      	movs	r3, #0
 8002be8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8002bea:	2300      	movs	r3, #0
 8002bec:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002bee:	463b      	mov	r3, r7
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f002 fe69 	bl	80058c8 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30020000;
 8002bfa:	4b13      	ldr	r3, [pc, #76]	; (8002c48 <MPU_Config+0x9c>)
 8002bfc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8002bfe:	2310      	movs	r3, #16
 8002c00:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8002c02:	2300      	movs	r3, #0
 8002c04:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8002c06:	2301      	movs	r3, #1
 8002c08:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002c12:	463b      	mov	r3, r7
 8002c14:	4618      	mov	r0, r3
 8002c16:	f002 fe57 	bl	80058c8 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8002c1e:	4b0b      	ldr	r3, [pc, #44]	; (8002c4c <MPU_Config+0xa0>)
 8002c20:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 8002c22:	2308      	movs	r3, #8
 8002c24:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8002c26:	2300      	movs	r3, #0
 8002c28:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002c32:	463b      	mov	r3, r7
 8002c34:	4618      	mov	r0, r3
 8002c36:	f002 fe47 	bl	80058c8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002c3a:	2004      	movs	r0, #4
 8002c3c:	f002 fe24 	bl	8005888 <HAL_MPU_Enable>

}
 8002c40:	bf00      	nop
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	30020000 	.word	0x30020000
 8002c4c:	30040000 	.word	0x30040000

08002c50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002c54:	b672      	cpsid	i
}
 8002c56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	__disable_irq();

	printf("Error handler routine called\r\n");
 8002c58:	4810      	ldr	r0, [pc, #64]	; (8002c9c <Error_Handler+0x4c>)
 8002c5a:	f016 ffff 	bl	8019c5c <puts>

	/* Disable the AOM */
	HAL_HRTIM_WaveformOutputStop(&hhrtim, HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TE1);
 8002c5e:	f240 1103 	movw	r1, #259	; 0x103
 8002c62:	480f      	ldr	r0, [pc, #60]	; (8002ca0 <Error_Handler+0x50>)
 8002c64:	f005 f962 	bl	8007f2c <HAL_HRTIM_WaveformOutputStop>
	HAL_HRTIM_WaveformCounterStop_IT(&hhrtim, HRTIM_TIMERID_TIMER_A | HRTIM_TIMERID_TIMER_E);
 8002c68:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
 8002c6c:	480c      	ldr	r0, [pc, #48]	; (8002ca0 <Error_Handler+0x50>)
 8002c6e:	f005 f9fb 	bl	8008068 <HAL_HRTIM_WaveformCountStop_IT>

	/* Power down the synthesiser */
	HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 0);
 8002c72:	2200      	movs	r2, #0
 8002c74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c78:	480a      	ldr	r0, [pc, #40]	; (8002ca4 <Error_Handler+0x54>)
 8002c7a:	f004 fdc9 	bl	8007810 <HAL_GPIO_WritePin>

	while (1) {
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //toggle red LED
 8002c7e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c82:	4809      	ldr	r0, [pc, #36]	; (8002ca8 <Error_Handler+0x58>)
 8002c84:	f004 fddd 	bl	8007842 <HAL_GPIO_TogglePin>
		timer_delay(SLOW_TIMER, ERROR_LED_DELAY);
 8002c88:	4b08      	ldr	r3, [pc, #32]	; (8002cac <Error_Handler+0x5c>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002c90:	4611      	mov	r1, r2
 8002c92:	4618      	mov	r0, r3
 8002c94:	f018 ff18 	bl	801bac8 <__timer_delay_veneer>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //toggle red LED
 8002c98:	e7f1      	b.n	8002c7e <Error_Handler+0x2e>
 8002c9a:	bf00      	nop
 8002c9c:	0801bd50 	.word	0x0801bd50
 8002ca0:	200002c4 	.word	0x200002c4
 8002ca4:	58020800 	.word	0x58020800
 8002ca8:	58020400 	.word	0x58020400
 8002cac:	20000018 	.word	0x20000018

08002cb0 <HAL_MspInit>:
void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef *hhrtim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cb6:	4b0a      	ldr	r3, [pc, #40]	; (8002ce0 <HAL_MspInit+0x30>)
 8002cb8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002cbc:	4a08      	ldr	r2, [pc, #32]	; (8002ce0 <HAL_MspInit+0x30>)
 8002cbe:	f043 0302 	orr.w	r3, r3, #2
 8002cc2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002cc6:	4b06      	ldr	r3, [pc, #24]	; (8002ce0 <HAL_MspInit+0x30>)
 8002cc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	607b      	str	r3, [r7, #4]
 8002cd2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr
 8002ce0:	58024400 	.word	0x58024400

08002ce4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b0b4      	sub	sp, #208	; 0xd0
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002cec:	f107 0310 	add.w	r3, r7, #16
 8002cf0:	22c0      	movs	r2, #192	; 0xc0
 8002cf2:	2100      	movs	r1, #0
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f017 f8a1 	bl	8019e3c <memset>
  if(hadc->Instance==ADC3)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a2b      	ldr	r2, [pc, #172]	; (8002dac <HAL_ADC_MspInit+0xc8>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d14e      	bne.n	8002da2 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002d04:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002d08:	f04f 0300 	mov.w	r3, #0
 8002d0c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8002d10:	2301      	movs	r3, #1
 8002d12:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 19;
 8002d14:	2313      	movs	r3, #19
 8002d16:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 79;
 8002d18:	234f      	movs	r3, #79	; 0x4f
 8002d1a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8002d20:	2302      	movs	r3, #2
 8002d22:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8002d24:	23c0      	movs	r3, #192	; 0xc0
 8002d26:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8002d28:	2320      	movs	r3, #32
 8002d2a:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8002d30:	2300      	movs	r3, #0
 8002d32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d36:	f107 0310 	add.w	r3, r7, #16
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f007 fd1e 	bl	800a77c <HAL_RCCEx_PeriphCLKConfig>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <HAL_ADC_MspInit+0x66>
    {
      Error_Handler();
 8002d46:	f7ff ff83 	bl	8002c50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002d4a:	4b19      	ldr	r3, [pc, #100]	; (8002db0 <HAL_ADC_MspInit+0xcc>)
 8002d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d50:	4a17      	ldr	r2, [pc, #92]	; (8002db0 <HAL_ADC_MspInit+0xcc>)
 8002d52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d5a:	4b15      	ldr	r3, [pc, #84]	; (8002db0 <HAL_ADC_MspInit+0xcc>)
 8002d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d64:	60fb      	str	r3, [r7, #12]
 8002d66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d68:	4b11      	ldr	r3, [pc, #68]	; (8002db0 <HAL_ADC_MspInit+0xcc>)
 8002d6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d6e:	4a10      	ldr	r2, [pc, #64]	; (8002db0 <HAL_ADC_MspInit+0xcc>)
 8002d70:	f043 0304 	orr.w	r3, r3, #4
 8002d74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d78:	4b0d      	ldr	r3, [pc, #52]	; (8002db0 <HAL_ADC_MspInit+0xcc>)
 8002d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d7e:	f003 0304 	and.w	r3, r3, #4
 8002d82:	60bb      	str	r3, [r7, #8]
 8002d84:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PC2_C     ------> ADC3_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8002d86:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8002d8a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002d8e:	f000 fed7 	bl	8003b40 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8002d92:	2200      	movs	r2, #0
 8002d94:	2100      	movs	r1, #0
 8002d96:	207f      	movs	r0, #127	; 0x7f
 8002d98:	f002 fd29 	bl	80057ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8002d9c:	207f      	movs	r0, #127	; 0x7f
 8002d9e:	f002 fd40 	bl	8005822 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002da2:	bf00      	nop
 8002da4:	37d0      	adds	r7, #208	; 0xd0
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	58026000 	.word	0x58026000
 8002db0:	58024400 	.word	0x58024400

08002db4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b08a      	sub	sp, #40	; 0x28
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dbc:	f107 0314 	add.w	r3, r7, #20
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	605a      	str	r2, [r3, #4]
 8002dc6:	609a      	str	r2, [r3, #8]
 8002dc8:	60da      	str	r2, [r3, #12]
 8002dca:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a18      	ldr	r2, [pc, #96]	; (8002e34 <HAL_DAC_MspInit+0x80>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d129      	bne.n	8002e2a <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8002dd6:	4b18      	ldr	r3, [pc, #96]	; (8002e38 <HAL_DAC_MspInit+0x84>)
 8002dd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ddc:	4a16      	ldr	r2, [pc, #88]	; (8002e38 <HAL_DAC_MspInit+0x84>)
 8002dde:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002de2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002de6:	4b14      	ldr	r3, [pc, #80]	; (8002e38 <HAL_DAC_MspInit+0x84>)
 8002de8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002dec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002df0:	613b      	str	r3, [r7, #16]
 8002df2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002df4:	4b10      	ldr	r3, [pc, #64]	; (8002e38 <HAL_DAC_MspInit+0x84>)
 8002df6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dfa:	4a0f      	ldr	r2, [pc, #60]	; (8002e38 <HAL_DAC_MspInit+0x84>)
 8002dfc:	f043 0301 	orr.w	r3, r3, #1
 8002e00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e04:	4b0c      	ldr	r3, [pc, #48]	; (8002e38 <HAL_DAC_MspInit+0x84>)
 8002e06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	60fb      	str	r3, [r7, #12]
 8002e10:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002e12:	2310      	movs	r3, #16
 8002e14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e16:	2303      	movs	r3, #3
 8002e18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e1e:	f107 0314 	add.w	r3, r7, #20
 8002e22:	4619      	mov	r1, r3
 8002e24:	4805      	ldr	r0, [pc, #20]	; (8002e3c <HAL_DAC_MspInit+0x88>)
 8002e26:	f004 fb2b 	bl	8007480 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002e2a:	bf00      	nop
 8002e2c:	3728      	adds	r7, #40	; 0x28
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	40007400 	.word	0x40007400
 8002e38:	58024400 	.word	0x58024400
 8002e3c:	58020000 	.word	0x58020000

08002e40 <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b0b4      	sub	sp, #208	; 0xd0
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e48:	f107 0310 	add.w	r3, r7, #16
 8002e4c:	22c0      	movs	r2, #192	; 0xc0
 8002e4e:	2100      	movs	r1, #0
 8002e50:	4618      	mov	r0, r3
 8002e52:	f016 fff3 	bl	8019e3c <memset>
  if(hhrtim->Instance==HRTIM1)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a1c      	ldr	r2, [pc, #112]	; (8002ecc <HAL_HRTIM_MspInit+0x8c>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d131      	bne.n	8002ec4 <HAL_HRTIM_MspInit+0x84>

  /* USER CODE END HRTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1;
 8002e60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e64:	f04f 0300 	mov.w	r3, #0
 8002e68:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Hrtim1ClockSelection = RCC_HRTIM1CLK_TIMCLK;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e72:	f107 0310 	add.w	r3, r7, #16
 8002e76:	4618      	mov	r0, r3
 8002e78:	f007 fc80 	bl	800a77c <HAL_RCCEx_PeriphCLKConfig>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <HAL_HRTIM_MspInit+0x46>
    {
      Error_Handler();
 8002e82:	f7ff fee5 	bl	8002c50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8002e86:	4b12      	ldr	r3, [pc, #72]	; (8002ed0 <HAL_HRTIM_MspInit+0x90>)
 8002e88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e8c:	4a10      	ldr	r2, [pc, #64]	; (8002ed0 <HAL_HRTIM_MspInit+0x90>)
 8002e8e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002e92:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002e96:	4b0e      	ldr	r3, [pc, #56]	; (8002ed0 <HAL_HRTIM_MspInit+0x90>)
 8002e98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ea0:	60fb      	str	r3, [r7, #12]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
    /* HRTIM1 interrupt Init */
    HAL_NVIC_SetPriority(HRTIM1_TIMA_IRQn, 0, 0);
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	2100      	movs	r1, #0
 8002ea8:	2068      	movs	r0, #104	; 0x68
 8002eaa:	f002 fca0 	bl	80057ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIMA_IRQn);
 8002eae:	2068      	movs	r0, #104	; 0x68
 8002eb0:	f002 fcb7 	bl	8005822 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(HRTIM1_TIME_IRQn, 0, 0);
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	206c      	movs	r0, #108	; 0x6c
 8002eba:	f002 fc98 	bl	80057ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIME_IRQn);
 8002ebe:	206c      	movs	r0, #108	; 0x6c
 8002ec0:	f002 fcaf 	bl	8005822 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }

}
 8002ec4:	bf00      	nop
 8002ec6:	37d0      	adds	r7, #208	; 0xd0
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	40017400 	.word	0x40017400
 8002ed0:	58024400 	.word	0x58024400

08002ed4 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b08a      	sub	sp, #40	; 0x28
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002edc:	f107 0314 	add.w	r3, r7, #20
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	601a      	str	r2, [r3, #0]
 8002ee4:	605a      	str	r2, [r3, #4]
 8002ee6:	609a      	str	r2, [r3, #8]
 8002ee8:	60da      	str	r2, [r3, #12]
 8002eea:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a22      	ldr	r2, [pc, #136]	; (8002f7c <HAL_HRTIM_MspPostInit+0xa8>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d13d      	bne.n	8002f72 <HAL_HRTIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002ef6:	4b22      	ldr	r3, [pc, #136]	; (8002f80 <HAL_HRTIM_MspPostInit+0xac>)
 8002ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002efc:	4a20      	ldr	r2, [pc, #128]	; (8002f80 <HAL_HRTIM_MspPostInit+0xac>)
 8002efe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f06:	4b1e      	ldr	r3, [pc, #120]	; (8002f80 <HAL_HRTIM_MspPostInit+0xac>)
 8002f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f10:	613b      	str	r3, [r7, #16]
 8002f12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f14:	4b1a      	ldr	r3, [pc, #104]	; (8002f80 <HAL_HRTIM_MspPostInit+0xac>)
 8002f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f1a:	4a19      	ldr	r2, [pc, #100]	; (8002f80 <HAL_HRTIM_MspPostInit+0xac>)
 8002f1c:	f043 0304 	orr.w	r3, r3, #4
 8002f20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f24:	4b16      	ldr	r3, [pc, #88]	; (8002f80 <HAL_HRTIM_MspPostInit+0xac>)
 8002f26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f2a:	f003 0304 	and.w	r3, r3, #4
 8002f2e:	60fb      	str	r3, [r7, #12]
 8002f30:	68fb      	ldr	r3, [r7, #12]
    /**HRTIM GPIO Configuration
    PG6     ------> HRTIM_CHE1
    PC6     ------> HRTIM_CHA1
    PC7     ------> HRTIM_CHA2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002f32:	2340      	movs	r3, #64	; 0x40
 8002f34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f36:	2302      	movs	r3, #2
 8002f38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_HRTIM1;
 8002f42:	2302      	movs	r3, #2
 8002f44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002f46:	f107 0314 	add.w	r3, r7, #20
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	480d      	ldr	r0, [pc, #52]	; (8002f84 <HAL_HRTIM_MspPostInit+0xb0>)
 8002f4e:	f004 fa97 	bl	8007480 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f52:	23c0      	movs	r3, #192	; 0xc0
 8002f54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f56:	2302      	movs	r3, #2
 8002f58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_HRTIM1;
 8002f62:	2301      	movs	r3, #1
 8002f64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f66:	f107 0314 	add.w	r3, r7, #20
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	4806      	ldr	r0, [pc, #24]	; (8002f88 <HAL_HRTIM_MspPostInit+0xb4>)
 8002f6e:	f004 fa87 	bl	8007480 <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8002f72:	bf00      	nop
 8002f74:	3728      	adds	r7, #40	; 0x28
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	40017400 	.word	0x40017400
 8002f80:	58024400 	.word	0x58024400
 8002f84:	58021800 	.word	0x58021800
 8002f88:	58020800 	.word	0x58020800

08002f8c <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b0b4      	sub	sp, #208	; 0xd0
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f94:	f107 0310 	add.w	r3, r7, #16
 8002f98:	22c0      	movs	r2, #192	; 0xc0
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f016 ff4d 	bl	8019e3c <memset>
  if(hlptim->Instance==LPTIM1)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a19      	ldr	r2, [pc, #100]	; (800300c <HAL_LPTIM_MspInit+0x80>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d12a      	bne.n	8003002 <HAL_LPTIM_MspInit+0x76>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8002fac:	f04f 0220 	mov.w	r2, #32
 8002fb0:	f04f 0300 	mov.w	r3, #0
 8002fb4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8002fb8:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002fbc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002fc0:	f107 0310 	add.w	r3, r7, #16
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f007 fbd9 	bl	800a77c <HAL_RCCEx_PeriphCLKConfig>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <HAL_LPTIM_MspInit+0x48>
    {
      Error_Handler();
 8002fd0:	f7ff fe3e 	bl	8002c50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8002fd4:	4b0e      	ldr	r3, [pc, #56]	; (8003010 <HAL_LPTIM_MspInit+0x84>)
 8002fd6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fda:	4a0d      	ldr	r2, [pc, #52]	; (8003010 <HAL_LPTIM_MspInit+0x84>)
 8002fdc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fe0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002fe4:	4b0a      	ldr	r3, [pc, #40]	; (8003010 <HAL_LPTIM_MspInit+0x84>)
 8002fe6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fee:	60fb      	str	r3, [r7, #12]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	2100      	movs	r1, #0
 8002ff6:	205d      	movs	r0, #93	; 0x5d
 8002ff8:	f002 fbf9 	bl	80057ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8002ffc:	205d      	movs	r0, #93	; 0x5d
 8002ffe:	f002 fc10 	bl	8005822 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8003002:	bf00      	nop
 8003004:	37d0      	adds	r7, #208	; 0xd0
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	40002400 	.word	0x40002400
 8003010:	58024400 	.word	0x58024400

08003014 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003014:	b480      	push	{r7}
 8003016:	b087      	sub	sp, #28
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a2b      	ldr	r2, [pc, #172]	; (80030d0 <HAL_TIM_Base_MspInit+0xbc>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d10f      	bne.n	8003046 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003026:	4b2b      	ldr	r3, [pc, #172]	; (80030d4 <HAL_TIM_Base_MspInit+0xc0>)
 8003028:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800302c:	4a29      	ldr	r2, [pc, #164]	; (80030d4 <HAL_TIM_Base_MspInit+0xc0>)
 800302e:	f043 0301 	orr.w	r3, r3, #1
 8003032:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003036:	4b27      	ldr	r3, [pc, #156]	; (80030d4 <HAL_TIM_Base_MspInit+0xc0>)
 8003038:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800303c:	f003 0301 	and.w	r3, r3, #1
 8003040:	617b      	str	r3, [r7, #20]
 8003042:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003044:	e03d      	b.n	80030c2 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM2)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800304e:	d10f      	bne.n	8003070 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003050:	4b20      	ldr	r3, [pc, #128]	; (80030d4 <HAL_TIM_Base_MspInit+0xc0>)
 8003052:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003056:	4a1f      	ldr	r2, [pc, #124]	; (80030d4 <HAL_TIM_Base_MspInit+0xc0>)
 8003058:	f043 0301 	orr.w	r3, r3, #1
 800305c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003060:	4b1c      	ldr	r3, [pc, #112]	; (80030d4 <HAL_TIM_Base_MspInit+0xc0>)
 8003062:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	613b      	str	r3, [r7, #16]
 800306c:	693b      	ldr	r3, [r7, #16]
}
 800306e:	e028      	b.n	80030c2 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a18      	ldr	r2, [pc, #96]	; (80030d8 <HAL_TIM_Base_MspInit+0xc4>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d10f      	bne.n	800309a <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800307a:	4b16      	ldr	r3, [pc, #88]	; (80030d4 <HAL_TIM_Base_MspInit+0xc0>)
 800307c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003080:	4a14      	ldr	r2, [pc, #80]	; (80030d4 <HAL_TIM_Base_MspInit+0xc0>)
 8003082:	f043 0302 	orr.w	r3, r3, #2
 8003086:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800308a:	4b12      	ldr	r3, [pc, #72]	; (80030d4 <HAL_TIM_Base_MspInit+0xc0>)
 800308c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003090:	f003 0302 	and.w	r3, r3, #2
 8003094:	60fb      	str	r3, [r7, #12]
 8003096:	68fb      	ldr	r3, [r7, #12]
}
 8003098:	e013      	b.n	80030c2 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM5)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a0f      	ldr	r2, [pc, #60]	; (80030dc <HAL_TIM_Base_MspInit+0xc8>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d10e      	bne.n	80030c2 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80030a4:	4b0b      	ldr	r3, [pc, #44]	; (80030d4 <HAL_TIM_Base_MspInit+0xc0>)
 80030a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80030aa:	4a0a      	ldr	r2, [pc, #40]	; (80030d4 <HAL_TIM_Base_MspInit+0xc0>)
 80030ac:	f043 0308 	orr.w	r3, r3, #8
 80030b0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80030b4:	4b07      	ldr	r3, [pc, #28]	; (80030d4 <HAL_TIM_Base_MspInit+0xc0>)
 80030b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80030ba:	f003 0308 	and.w	r3, r3, #8
 80030be:	60bb      	str	r3, [r7, #8]
 80030c0:	68bb      	ldr	r3, [r7, #8]
}
 80030c2:	bf00      	nop
 80030c4:	371c      	adds	r7, #28
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	40010000 	.word	0x40010000
 80030d4:	58024400 	.word	0x58024400
 80030d8:	40000400 	.word	0x40000400
 80030dc:	40000c00 	.word	0x40000c00

080030e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b0ba      	sub	sp, #232	; 0xe8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030e8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80030ec:	2200      	movs	r2, #0
 80030ee:	601a      	str	r2, [r3, #0]
 80030f0:	605a      	str	r2, [r3, #4]
 80030f2:	609a      	str	r2, [r3, #8]
 80030f4:	60da      	str	r2, [r3, #12]
 80030f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030f8:	f107 0310 	add.w	r3, r7, #16
 80030fc:	22c0      	movs	r2, #192	; 0xc0
 80030fe:	2100      	movs	r1, #0
 8003100:	4618      	mov	r0, r3
 8003102:	f016 fe9b 	bl	8019e3c <memset>
  if(huart->Instance==USART3)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a27      	ldr	r2, [pc, #156]	; (80031a8 <HAL_UART_MspInit+0xc8>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d146      	bne.n	800319e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003110:	f04f 0202 	mov.w	r2, #2
 8003114:	f04f 0300 	mov.w	r3, #0
 8003118:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800311c:	2300      	movs	r3, #0
 800311e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003122:	f107 0310 	add.w	r3, r7, #16
 8003126:	4618      	mov	r0, r3
 8003128:	f007 fb28 	bl	800a77c <HAL_RCCEx_PeriphCLKConfig>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003132:	f7ff fd8d 	bl	8002c50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003136:	4b1d      	ldr	r3, [pc, #116]	; (80031ac <HAL_UART_MspInit+0xcc>)
 8003138:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800313c:	4a1b      	ldr	r2, [pc, #108]	; (80031ac <HAL_UART_MspInit+0xcc>)
 800313e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003142:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003146:	4b19      	ldr	r3, [pc, #100]	; (80031ac <HAL_UART_MspInit+0xcc>)
 8003148:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800314c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003150:	60fb      	str	r3, [r7, #12]
 8003152:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003154:	4b15      	ldr	r3, [pc, #84]	; (80031ac <HAL_UART_MspInit+0xcc>)
 8003156:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800315a:	4a14      	ldr	r2, [pc, #80]	; (80031ac <HAL_UART_MspInit+0xcc>)
 800315c:	f043 0308 	orr.w	r3, r3, #8
 8003160:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003164:	4b11      	ldr	r3, [pc, #68]	; (80031ac <HAL_UART_MspInit+0xcc>)
 8003166:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800316a:	f003 0308 	and.w	r3, r3, #8
 800316e:	60bb      	str	r3, [r7, #8]
 8003170:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8003172:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003176:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800317a:	2302      	movs	r3, #2
 800317c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003180:	2300      	movs	r3, #0
 8003182:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003186:	2300      	movs	r3, #0
 8003188:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800318c:	2307      	movs	r3, #7
 800318e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003192:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003196:	4619      	mov	r1, r3
 8003198:	4805      	ldr	r0, [pc, #20]	; (80031b0 <HAL_UART_MspInit+0xd0>)
 800319a:	f004 f971 	bl	8007480 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800319e:	bf00      	nop
 80031a0:	37e8      	adds	r7, #232	; 0xe8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	40004800 	.word	0x40004800
 80031ac:	58024400 	.word	0x58024400
 80031b0:	58020c00 	.word	0x58020c00

080031b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80031b8:	f007 fac4 	bl	800a744 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
		Error_Handler();
 80031bc:	f7ff fd48 	bl	8002c50 <Error_Handler>
 80031c0:	e7fc      	b.n	80031bc <NMI_Handler+0x8>

080031c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  Error_Handler();
 80031c6:	f7ff fd43 	bl	8002c50 <Error_Handler>
 80031ca:	e7fc      	b.n	80031c6 <HardFault_Handler+0x4>

080031cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  Error_Handler();
 80031d0:	f7ff fd3e 	bl	8002c50 <Error_Handler>
 80031d4:	e7fc      	b.n	80031d0 <MemManage_Handler+0x4>

080031d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  Error_Handler();
 80031da:	f7ff fd39 	bl	8002c50 <Error_Handler>
 80031de:	e7fc      	b.n	80031da <BusFault_Handler+0x4>

080031e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  Error_Handler();
 80031e4:	f7ff fd34 	bl	8002c50 <Error_Handler>
 80031e8:	e7fc      	b.n	80031e4 <UsageFault_Handler+0x4>

080031ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031ea:	b480      	push	{r7}
 80031ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031ee:	bf00      	nop
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031fc:	bf00      	nop
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr

08003206 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003206:	b480      	push	{r7}
 8003208:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800320a:	bf00      	nop
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003218:	f000 fc2e 	bl	8003a78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800321c:	bf00      	nop
 800321e:	bd80      	pop	{r7, pc}

08003220 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8003224:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003228:	f004 fb25 	bl	8007876 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 800322c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003230:	f004 fb21 	bl	8007876 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003234:	bf00      	nop
 8003236:	bd80      	pop	{r7, pc}

08003238 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */
  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 800323c:	4802      	ldr	r0, [pc, #8]	; (8003248 <LPTIM1_IRQHandler+0x10>)
 800323e:	f005 ff5a 	bl	80090f6 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */
  /* USER CODE END LPTIM1_IRQn 1 */
}
 8003242:	bf00      	nop
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	200003a0 	.word	0x200003a0

0800324c <HRTIM1_TIMA_IRQHandler>:

/**
  * @brief This function handles HRTIM timer A global interrupt.
  */
void HRTIM1_TIMA_IRQHandler(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIMA_IRQn 0 */

  /* USER CODE END HRTIM1_TIMA_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim,HRTIM_TIMERINDEX_TIMER_A);
 8003250:	2100      	movs	r1, #0
 8003252:	4802      	ldr	r0, [pc, #8]	; (800325c <HRTIM1_TIMA_IRQHandler+0x10>)
 8003254:	f004 ff86 	bl	8008164 <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIMA_IRQn 1 */

  /* USER CODE END HRTIM1_TIMA_IRQn 1 */
}
 8003258:	bf00      	nop
 800325a:	bd80      	pop	{r7, pc}
 800325c:	200002c4 	.word	0x200002c4

08003260 <HRTIM1_TIME_IRQHandler>:

/**
  * @brief This function handles HRTIM timer E global interrupt.
  */
void HRTIM1_TIME_IRQHandler(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIME_IRQn 0 */

  /* USER CODE END HRTIM1_TIME_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim,HRTIM_TIMERINDEX_TIMER_E);
 8003264:	2104      	movs	r1, #4
 8003266:	4802      	ldr	r0, [pc, #8]	; (8003270 <HRTIM1_TIME_IRQHandler+0x10>)
 8003268:	f004 ff7c 	bl	8008164 <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIME_IRQn 1 */

  /* USER CODE END HRTIM1_TIME_IRQn 1 */
}
 800326c:	bf00      	nop
 800326e:	bd80      	pop	{r7, pc}
 8003270:	200002c4 	.word	0x200002c4

08003274 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8003278:	4802      	ldr	r0, [pc, #8]	; (8003284 <ADC3_IRQHandler+0x10>)
 800327a:	f001 f981 	bl	8004580 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 800327e:	bf00      	nop
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	2000024c 	.word	0x2000024c

08003288 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0
	return 1;
 800328c:	2301      	movs	r3, #1
}
 800328e:	4618      	mov	r0, r3
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <_kill>:

int _kill(int pid, int sig)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80032a2:	4b05      	ldr	r3, [pc, #20]	; (80032b8 <_kill+0x20>)
 80032a4:	2216      	movs	r2, #22
 80032a6:	601a      	str	r2, [r3, #0]
	return -1;
 80032a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr
 80032b8:	200072dc 	.word	0x200072dc

080032bc <_exit>:

void _exit (int status)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80032c4:	f04f 31ff 	mov.w	r1, #4294967295
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f7ff ffe5 	bl	8003298 <_kill>
	while (1) {}		/* Make sure we hang here */
 80032ce:	e7fe      	b.n	80032ce <_exit+0x12>

080032d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b086      	sub	sp, #24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032dc:	2300      	movs	r3, #0
 80032de:	617b      	str	r3, [r7, #20]
 80032e0:	e00a      	b.n	80032f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80032e2:	f3af 8000 	nop.w
 80032e6:	4601      	mov	r1, r0
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	1c5a      	adds	r2, r3, #1
 80032ec:	60ba      	str	r2, [r7, #8]
 80032ee:	b2ca      	uxtb	r2, r1
 80032f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	3301      	adds	r3, #1
 80032f6:	617b      	str	r3, [r7, #20]
 80032f8:	697a      	ldr	r2, [r7, #20]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	dbf0      	blt.n	80032e2 <_read+0x12>
	}

return len;
 8003300:	687b      	ldr	r3, [r7, #4]
}
 8003302:	4618      	mov	r0, r3
 8003304:	3718      	adds	r7, #24
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800330a:	b580      	push	{r7, lr}
 800330c:	b086      	sub	sp, #24
 800330e:	af00      	add	r7, sp, #0
 8003310:	60f8      	str	r0, [r7, #12]
 8003312:	60b9      	str	r1, [r7, #8]
 8003314:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003316:	2300      	movs	r3, #0
 8003318:	617b      	str	r3, [r7, #20]
 800331a:	e009      	b.n	8003330 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	1c5a      	adds	r2, r3, #1
 8003320:	60ba      	str	r2, [r7, #8]
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	4618      	mov	r0, r3
 8003326:	f7fe fc61 	bl	8001bec <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	3301      	adds	r3, #1
 800332e:	617b      	str	r3, [r7, #20]
 8003330:	697a      	ldr	r2, [r7, #20]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	429a      	cmp	r2, r3
 8003336:	dbf1      	blt.n	800331c <_write+0x12>
	}
	return len;
 8003338:	687b      	ldr	r3, [r7, #4]
}
 800333a:	4618      	mov	r0, r3
 800333c:	3718      	adds	r7, #24
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <_close>:

int _close(int file)
{
 8003342:	b480      	push	{r7}
 8003344:	b083      	sub	sp, #12
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
	return -1;
 800334a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800334e:	4618      	mov	r0, r3
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr

0800335a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800335a:	b480      	push	{r7}
 800335c:	b083      	sub	sp, #12
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
 8003362:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800336a:	605a      	str	r2, [r3, #4]
	return 0;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	370c      	adds	r7, #12
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr

0800337a <_isatty>:

int _isatty(int file)
{
 800337a:	b480      	push	{r7}
 800337c:	b083      	sub	sp, #12
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
	return 1;
 8003382:	2301      	movs	r3, #1
}
 8003384:	4618      	mov	r0, r3
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003390:	b480      	push	{r7}
 8003392:	b085      	sub	sp, #20
 8003394:	af00      	add	r7, sp, #0
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	607a      	str	r2, [r7, #4]
	return 0;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3714      	adds	r7, #20
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
	...

080033ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b087      	sub	sp, #28
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80033b4:	4a14      	ldr	r2, [pc, #80]	; (8003408 <_sbrk+0x5c>)
 80033b6:	4b15      	ldr	r3, [pc, #84]	; (800340c <_sbrk+0x60>)
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80033c0:	4b13      	ldr	r3, [pc, #76]	; (8003410 <_sbrk+0x64>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d102      	bne.n	80033ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80033c8:	4b11      	ldr	r3, [pc, #68]	; (8003410 <_sbrk+0x64>)
 80033ca:	4a12      	ldr	r2, [pc, #72]	; (8003414 <_sbrk+0x68>)
 80033cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80033ce:	4b10      	ldr	r3, [pc, #64]	; (8003410 <_sbrk+0x64>)
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4413      	add	r3, r2
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d205      	bcs.n	80033e8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80033dc:	4b0e      	ldr	r3, [pc, #56]	; (8003418 <_sbrk+0x6c>)
 80033de:	220c      	movs	r2, #12
 80033e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80033e2:	f04f 33ff 	mov.w	r3, #4294967295
 80033e6:	e009      	b.n	80033fc <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80033e8:	4b09      	ldr	r3, [pc, #36]	; (8003410 <_sbrk+0x64>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80033ee:	4b08      	ldr	r3, [pc, #32]	; (8003410 <_sbrk+0x64>)
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4413      	add	r3, r2
 80033f6:	4a06      	ldr	r2, [pc, #24]	; (8003410 <_sbrk+0x64>)
 80033f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80033fa:	68fb      	ldr	r3, [r7, #12]
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	371c      	adds	r7, #28
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr
 8003408:	20020000 	.word	0x20020000
 800340c:	00000400 	.word	0x00000400
 8003410:	200005f8 	.word	0x200005f8
 8003414:	200072f0 	.word	0x200072f0
 8003418:	200072dc 	.word	0x200072dc

0800341c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003422:	4b3f      	ldr	r3, [pc, #252]	; (8003520 <SystemInit+0x104>)
 8003424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003428:	4a3d      	ldr	r2, [pc, #244]	; (8003520 <SystemInit+0x104>)
 800342a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800342e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003432:	4b3c      	ldr	r3, [pc, #240]	; (8003524 <SystemInit+0x108>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 030f 	and.w	r3, r3, #15
 800343a:	2b06      	cmp	r3, #6
 800343c:	d807      	bhi.n	800344e <SystemInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */

	  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800343e:	4b39      	ldr	r3, [pc, #228]	; (8003524 <SystemInit+0x108>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f023 030f 	bic.w	r3, r3, #15
 8003446:	4a37      	ldr	r2, [pc, #220]	; (8003524 <SystemInit+0x108>)
 8003448:	f043 0307 	orr.w	r3, r3, #7
 800344c:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800344e:	4b36      	ldr	r3, [pc, #216]	; (8003528 <SystemInit+0x10c>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a35      	ldr	r2, [pc, #212]	; (8003528 <SystemInit+0x10c>)
 8003454:	f043 0301 	orr.w	r3, r3, #1
 8003458:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800345a:	4b33      	ldr	r3, [pc, #204]	; (8003528 <SystemInit+0x10c>)
 800345c:	2200      	movs	r2, #0
 800345e:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003460:	4b31      	ldr	r3, [pc, #196]	; (8003528 <SystemInit+0x10c>)
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	4930      	ldr	r1, [pc, #192]	; (8003528 <SystemInit+0x10c>)
 8003466:	4b31      	ldr	r3, [pc, #196]	; (800352c <SystemInit+0x110>)
 8003468:	4013      	ands	r3, r2
 800346a:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800346c:	4b2d      	ldr	r3, [pc, #180]	; (8003524 <SystemInit+0x108>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0308 	and.w	r3, r3, #8
 8003474:	2b00      	cmp	r3, #0
 8003476:	d007      	beq.n	8003488 <SystemInit+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003478:	4b2a      	ldr	r3, [pc, #168]	; (8003524 <SystemInit+0x108>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f023 030f 	bic.w	r3, r3, #15
 8003480:	4a28      	ldr	r2, [pc, #160]	; (8003524 <SystemInit+0x108>)
 8003482:	f043 0307 	orr.w	r3, r3, #7
 8003486:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003488:	4b27      	ldr	r3, [pc, #156]	; (8003528 <SystemInit+0x10c>)
 800348a:	2200      	movs	r2, #0
 800348c:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800348e:	4b26      	ldr	r3, [pc, #152]	; (8003528 <SystemInit+0x10c>)
 8003490:	2200      	movs	r2, #0
 8003492:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003494:	4b24      	ldr	r3, [pc, #144]	; (8003528 <SystemInit+0x10c>)
 8003496:	2200      	movs	r2, #0
 8003498:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800349a:	4b23      	ldr	r3, [pc, #140]	; (8003528 <SystemInit+0x10c>)
 800349c:	4a24      	ldr	r2, [pc, #144]	; (8003530 <SystemInit+0x114>)
 800349e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80034a0:	4b21      	ldr	r3, [pc, #132]	; (8003528 <SystemInit+0x10c>)
 80034a2:	4a24      	ldr	r2, [pc, #144]	; (8003534 <SystemInit+0x118>)
 80034a4:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80034a6:	4b20      	ldr	r3, [pc, #128]	; (8003528 <SystemInit+0x10c>)
 80034a8:	4a23      	ldr	r2, [pc, #140]	; (8003538 <SystemInit+0x11c>)
 80034aa:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80034ac:	4b1e      	ldr	r3, [pc, #120]	; (8003528 <SystemInit+0x10c>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80034b2:	4b1d      	ldr	r3, [pc, #116]	; (8003528 <SystemInit+0x10c>)
 80034b4:	4a20      	ldr	r2, [pc, #128]	; (8003538 <SystemInit+0x11c>)
 80034b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80034b8:	4b1b      	ldr	r3, [pc, #108]	; (8003528 <SystemInit+0x10c>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80034be:	4b1a      	ldr	r3, [pc, #104]	; (8003528 <SystemInit+0x10c>)
 80034c0:	4a1d      	ldr	r2, [pc, #116]	; (8003538 <SystemInit+0x11c>)
 80034c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80034c4:	4b18      	ldr	r3, [pc, #96]	; (8003528 <SystemInit+0x10c>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80034ca:	4b17      	ldr	r3, [pc, #92]	; (8003528 <SystemInit+0x10c>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a16      	ldr	r2, [pc, #88]	; (8003528 <SystemInit+0x10c>)
 80034d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034d4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80034d6:	4b14      	ldr	r3, [pc, #80]	; (8003528 <SystemInit+0x10c>)
 80034d8:	2200      	movs	r2, #0
 80034da:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80034dc:	4b17      	ldr	r3, [pc, #92]	; (800353c <SystemInit+0x120>)
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	4b17      	ldr	r3, [pc, #92]	; (8003540 <SystemInit+0x124>)
 80034e2:	4013      	ands	r3, r2
 80034e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034e8:	d202      	bcs.n	80034f0 <SystemInit+0xd4>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80034ea:	4b16      	ldr	r3, [pc, #88]	; (8003544 <SystemInit+0x128>)
 80034ec:	2201      	movs	r2, #1
 80034ee:	601a      	str	r2, [r3, #0]
#endif /* STM32H7_DEV_ID */

#if defined(DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM), enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
 80034f0:	4b0d      	ldr	r3, [pc, #52]	; (8003528 <SystemInit+0x10c>)
 80034f2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80034f6:	4a0c      	ldr	r2, [pc, #48]	; (8003528 <SystemInit+0x10c>)
 80034f8:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
 80034fc:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN);
#else
  RCC->AHB2ENR |= (RCC_AHB2ENR_AHBSRAM1EN | RCC_AHB2ENR_AHBSRAM2EN);
#endif /* RCC_AHB2ENR_D2SRAM3EN */

  tmpreg = RCC->AHB2ENR;
 8003500:	4b09      	ldr	r3, [pc, #36]	; (8003528 <SystemInit+0x10c>)
 8003502:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003506:	607b      	str	r3, [r7, #4]
  (void) tmpreg;
 8003508:	687b      	ldr	r3, [r7, #4]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800350a:	4b0f      	ldr	r3, [pc, #60]	; (8003548 <SystemInit+0x12c>)
 800350c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003510:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003512:	bf00      	nop
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	e000ed00 	.word	0xe000ed00
 8003524:	52002000 	.word	0x52002000
 8003528:	58024400 	.word	0x58024400
 800352c:	eaf6ed7f 	.word	0xeaf6ed7f
 8003530:	02020200 	.word	0x02020200
 8003534:	01ff0000 	.word	0x01ff0000
 8003538:	01010280 	.word	0x01010280
 800353c:	5c001000 	.word	0x5c001000
 8003540:	ffff0000 	.word	0xffff0000
 8003544:	51008108 	.word	0x51008108
 8003548:	52004000 	.word	0x52004000

0800354c <HAL_LPTIM_AutoReloadMatchCallback>:
//		}
//
//	}
//}

void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim){
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin); //toggle green LED
 8003554:	2101      	movs	r1, #1
 8003556:	4803      	ldr	r0, [pc, #12]	; (8003564 <HAL_LPTIM_AutoReloadMatchCallback+0x18>)
 8003558:	f004 f973 	bl	8007842 <HAL_GPIO_TogglePin>
}
 800355c:	bf00      	nop
 800355e:	3708      	adds	r7, #8
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	58020400 	.word	0x58020400

08003568 <HAL_HRTIM_Compare2EventCallback>:

void HAL_HRTIM_Compare2EventCallback(HRTIM_HandleTypeDef *hhrtim, uint32_t TimerIdx) {
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
		const struct AttenuatorSettings a = {0,0,0,0,0,1,0}; // 8 dB
		set_aom_atten(a);
#endif //ATTENUATOR_CODE
	}

}
 8003572:	bf00      	nop
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
	...

08003580 <HAL_HRTIM_Compare3EventCallback>:

void HAL_HRTIM_Compare3EventCallback(HRTIM_HandleTypeDef *hhrtim, uint32_t TimerIdx) {
 8003580:	b580      	push	{r7, lr}
 8003582:	b088      	sub	sp, #32
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]

	/* Called at the end of a POP cycle */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_A) {
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d15d      	bne.n	800364c <HAL_HRTIM_Compare3EventCallback+0xcc>
		/* Reset the attenuator to 0 dB */
		const struct AttenuatorSettings a = { 0, 0, 0, 0, 0, 0, 0 }; // 0 dB
		set_aom_atten(a);
#endif //ATTENUATOR_CODE

		const double start_freq = ((long)(sweep_settings.req_start_freq/sweep_settings.step_size)) * sweep_settings.step_size;
 8003590:	4b30      	ldr	r3, [pc, #192]	; (8003654 <HAL_HRTIM_Compare3EventCallback+0xd4>)
 8003592:	ed93 5b00 	vldr	d5, [r3]
 8003596:	4b2f      	ldr	r3, [pc, #188]	; (8003654 <HAL_HRTIM_Compare3EventCallback+0xd4>)
 8003598:	ed93 6b04 	vldr	d6, [r3, #16]
 800359c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80035a0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80035a4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80035a8:	4b2a      	ldr	r3, [pc, #168]	; (8003654 <HAL_HRTIM_Compare3EventCallback+0xd4>)
 80035aa:	ed93 7b04 	vldr	d7, [r3, #16]
 80035ae:	ee26 7b07 	vmul.f64	d7, d6, d7
 80035b2:	ed87 7b06 	vstr	d7, [r7, #24]
		const double stop_freq = ((long)((sweep_settings.req_stop_freq/sweep_settings.step_size) + 0.5)) * sweep_settings.step_size;
 80035b6:	4b27      	ldr	r3, [pc, #156]	; (8003654 <HAL_HRTIM_Compare3EventCallback+0xd4>)
 80035b8:	ed93 5b02 	vldr	d5, [r3, #8]
 80035bc:	4b25      	ldr	r3, [pc, #148]	; (8003654 <HAL_HRTIM_Compare3EventCallback+0xd4>)
 80035be:	ed93 6b04 	vldr	d6, [r3, #16]
 80035c2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80035c6:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80035ca:	ee37 7b06 	vadd.f64	d7, d7, d6
 80035ce:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80035d2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80035d6:	4b1f      	ldr	r3, [pc, #124]	; (8003654 <HAL_HRTIM_Compare3EventCallback+0xd4>)
 80035d8:	ed93 7b04 	vldr	d7, [r3, #16]
 80035dc:	ee26 7b07 	vmul.f64	d7, d6, d7
 80035e0:	ed87 7b04 	vstr	d7, [r7, #16]
		const uint32_t num_points = ((stop_freq - start_freq)/sweep_settings.step_size) + 1;
 80035e4:	ed97 6b04 	vldr	d6, [r7, #16]
 80035e8:	ed97 7b06 	vldr	d7, [r7, #24]
 80035ec:	ee36 5b47 	vsub.f64	d5, d6, d7
 80035f0:	4b18      	ldr	r3, [pc, #96]	; (8003654 <HAL_HRTIM_Compare3EventCallback+0xd4>)
 80035f2:	ed93 6b04 	vldr	d6, [r3, #16]
 80035f6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80035fa:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80035fe:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003602:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003606:	ee17 3a90 	vmov	r3, s15
 800360a:	60fb      	str	r3, [r7, #12]
		static uint32_t i = 0;

		/* Configure the Microwave frequency */
		if (i == num_points) {
 800360c:	4b12      	ldr	r3, [pc, #72]	; (8003658 <HAL_HRTIM_Compare3EventCallback+0xd8>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	429a      	cmp	r2, r3
 8003614:	d106      	bne.n	8003624 <HAL_HRTIM_Compare3EventCallback+0xa4>
			stop_pop();
 8003616:	f018 fa5b 	bl	801bad0 <__stop_pop_veneer>
			i = 0;
 800361a:	4b0f      	ldr	r3, [pc, #60]	; (8003658 <HAL_HRTIM_Compare3EventCallback+0xd8>)
 800361c:	2200      	movs	r2, #0
 800361e:	601a      	str	r2, [r3, #0]
			start_pop();
 8003620:	f018 fa72 	bl	801bb08 <__start_pop_veneer>

#ifdef SYNTH_ENABLE
		set_frequency_hz(start_freq + (i * sweep_settings.step_size));
#endif

		i = i + 1;
 8003624:	4b0c      	ldr	r3, [pc, #48]	; (8003658 <HAL_HRTIM_Compare3EventCallback+0xd8>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	3301      	adds	r3, #1
 800362a:	4a0b      	ldr	r2, [pc, #44]	; (8003658 <HAL_HRTIM_Compare3EventCallback+0xd8>)
 800362c:	6013      	str	r3, [r2, #0]

		pop_cycle_count = pop_cycle_count + 1;
 800362e:	4b0b      	ldr	r3, [pc, #44]	; (800365c <HAL_HRTIM_Compare3EventCallback+0xdc>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	3301      	adds	r3, #1
 8003634:	4a09      	ldr	r2, [pc, #36]	; (800365c <HAL_HRTIM_Compare3EventCallback+0xdc>)
 8003636:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); //toggle amber LED
 8003638:	2102      	movs	r1, #2
 800363a:	4809      	ldr	r0, [pc, #36]	; (8003660 <HAL_HRTIM_Compare3EventCallback+0xe0>)
 800363c:	f004 f901 	bl	8007842 <HAL_GPIO_TogglePin>
		printf("POP Cycle %lu done.\r\n", pop_cycle_count);
 8003640:	4b06      	ldr	r3, [pc, #24]	; (800365c <HAL_HRTIM_Compare3EventCallback+0xdc>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4619      	mov	r1, r3
 8003646:	4807      	ldr	r0, [pc, #28]	; (8003664 <HAL_HRTIM_Compare3EventCallback+0xe4>)
 8003648:	f016 faa2 	bl	8019b90 <iprintf>

	/* Called when the second microwave pulse goes high */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_E) {
	}

}
 800364c:	bf00      	nop
 800364e:	3720      	adds	r7, #32
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	0801ee50 	.word	0x0801ee50
 8003658:	20000604 	.word	0x20000604
 800365c:	200005fc 	.word	0x200005fc
 8003660:	58021000 	.word	0x58021000
 8003664:	0801c450 	.word	0x0801c450

08003668 <HAL_HRTIM_RepetitionEventCallback>:

void HAL_HRTIM_RepetitionEventCallback(HRTIM_HandleTypeDef *hhrtim,
		uint32_t TimerIdx) {
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]

	/* Called at the start of the next POP cycle */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_A) {
	}
}
 8003672:	bf00      	nop
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
	...

08003680 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003680:	f8df d034 	ldr.w	sp, [pc, #52]	; 80036b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003684:	f7ff feca 	bl	800341c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003688:	480c      	ldr	r0, [pc, #48]	; (80036bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800368a:	490d      	ldr	r1, [pc, #52]	; (80036c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800368c:	4a0d      	ldr	r2, [pc, #52]	; (80036c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800368e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003690:	e002      	b.n	8003698 <LoopCopyDataInit>

08003692 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003692:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003694:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003696:	3304      	adds	r3, #4

08003698 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003698:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800369a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800369c:	d3f9      	bcc.n	8003692 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800369e:	4a0a      	ldr	r2, [pc, #40]	; (80036c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80036a0:	4c0a      	ldr	r4, [pc, #40]	; (80036cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80036a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036a4:	e001      	b.n	80036aa <LoopFillZerobss>

080036a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036a8:	3204      	adds	r2, #4

080036aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036ac:	d3fb      	bcc.n	80036a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80036ae:	f016 fc17 	bl	8019ee0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80036b2:	f7fe faad 	bl	8001c10 <main>
  bx  lr
 80036b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80036b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80036bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036c0:	2000022c 	.word	0x2000022c
  ldr r2, =_sidata
 80036c4:	0801f368 	.word	0x0801f368
  ldr r2, =_sbss
 80036c8:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 80036cc:	200072ec 	.word	0x200072ec

080036d0 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80036d0:	e7fe      	b.n	80036d0 <ADC_IRQHandler>

080036d2 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80036d2:	b480      	push	{r7}
 80036d4:	b083      	sub	sp, #12
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
 80036da:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00b      	beq.n	80036fa <LAN8742_RegisterBusIO+0x28>
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d007      	beq.n	80036fa <LAN8742_RegisterBusIO+0x28>
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <LAN8742_RegisterBusIO+0x28>
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d102      	bne.n	8003700 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80036fa:	f04f 33ff 	mov.w	r3, #4294967295
 80036fe:	e014      	b.n	800372a <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685a      	ldr	r2, [r3, #4]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	68da      	ldr	r2, [r3, #12]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	689a      	ldr	r2, [r3, #8]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	691a      	ldr	r2, [r3, #16]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	370c      	adds	r7, #12
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr

08003736 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8003736:	b580      	push	{r7, lr}
 8003738:	b086      	sub	sp, #24
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800373e:	2300      	movs	r3, #0
 8003740:	60fb      	str	r3, [r7, #12]
 8003742:	2300      	movs	r3, #0
 8003744:	60bb      	str	r3, [r7, #8]
 8003746:	2300      	movs	r3, #0
 8003748:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800374a:	2300      	movs	r3, #0
 800374c:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d17c      	bne.n	8003850 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d002      	beq.n	8003764 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2220      	movs	r2, #32
 8003768:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800376a:	2300      	movs	r3, #0
 800376c:	617b      	str	r3, [r7, #20]
 800376e:	e01c      	b.n	80037aa <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	695b      	ldr	r3, [r3, #20]
 8003774:	f107 0208 	add.w	r2, r7, #8
 8003778:	2112      	movs	r1, #18
 800377a:	6978      	ldr	r0, [r7, #20]
 800377c:	4798      	blx	r3
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	da03      	bge.n	800378c <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8003784:	f06f 0304 	mvn.w	r3, #4
 8003788:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 800378a:	e00b      	b.n	80037a4 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	f003 031f 	and.w	r3, r3, #31
 8003792:	697a      	ldr	r2, [r7, #20]
 8003794:	429a      	cmp	r2, r3
 8003796:	d105      	bne.n	80037a4 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	697a      	ldr	r2, [r7, #20]
 800379c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800379e:	2300      	movs	r3, #0
 80037a0:	613b      	str	r3, [r7, #16]
         break;
 80037a2:	e005      	b.n	80037b0 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	3301      	adds	r3, #1
 80037a8:	617b      	str	r3, [r7, #20]
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	2b1f      	cmp	r3, #31
 80037ae:	d9df      	bls.n	8003770 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2b1f      	cmp	r3, #31
 80037b6:	d902      	bls.n	80037be <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80037b8:	f06f 0302 	mvn.w	r3, #2
 80037bc:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d145      	bne.n	8003850 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	691b      	ldr	r3, [r3, #16]
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	6810      	ldr	r0, [r2, #0]
 80037cc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80037d0:	2100      	movs	r1, #0
 80037d2:	4798      	blx	r3
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	db37      	blt.n	800384a <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	6810      	ldr	r0, [r2, #0]
 80037e2:	f107 0208 	add.w	r2, r7, #8
 80037e6:	2100      	movs	r1, #0
 80037e8:	4798      	blx	r3
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	db28      	blt.n	8003842 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	4798      	blx	r3
 80037f6:	4603      	mov	r3, r0
 80037f8:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80037fa:	e01c      	b.n	8003836 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	4798      	blx	r3
 8003802:	4603      	mov	r3, r0
 8003804:	461a      	mov	r2, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800380e:	d80e      	bhi.n	800382e <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	695b      	ldr	r3, [r3, #20]
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	6810      	ldr	r0, [r2, #0]
 8003818:	f107 0208 	add.w	r2, r7, #8
 800381c:	2100      	movs	r1, #0
 800381e:	4798      	blx	r3
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	da07      	bge.n	8003836 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8003826:	f06f 0304 	mvn.w	r3, #4
 800382a:	613b      	str	r3, [r7, #16]
                 break;
 800382c:	e010      	b.n	8003850 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800382e:	f06f 0301 	mvn.w	r3, #1
 8003832:	613b      	str	r3, [r7, #16]
               break;
 8003834:	e00c      	b.n	8003850 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d1dd      	bne.n	80037fc <LAN8742_Init+0xc6>
 8003840:	e006      	b.n	8003850 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8003842:	f06f 0304 	mvn.w	r3, #4
 8003846:	613b      	str	r3, [r7, #16]
 8003848:	e002      	b.n	8003850 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 800384a:	f06f 0303 	mvn.w	r3, #3
 800384e:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d112      	bne.n	800387c <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	4798      	blx	r3
 800385c:	4603      	mov	r3, r0
 800385e:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8003860:	bf00      	nop
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	4798      	blx	r3
 8003868:	4603      	mov	r3, r0
 800386a:	461a      	mov	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003874:	d9f5      	bls.n	8003862 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2201      	movs	r2, #1
 800387a:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 800387c:	693b      	ldr	r3, [r7, #16]
 }
 800387e:	4618      	mov	r0, r3
 8003880:	3718      	adds	r7, #24
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}

08003886 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8003886:	b580      	push	{r7, lr}
 8003888:	b084      	sub	sp, #16
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800388e:	2300      	movs	r3, #0
 8003890:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	6810      	ldr	r0, [r2, #0]
 800389a:	f107 020c 	add.w	r2, r7, #12
 800389e:	2101      	movs	r1, #1
 80038a0:	4798      	blx	r3
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	da02      	bge.n	80038ae <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80038a8:	f06f 0304 	mvn.w	r3, #4
 80038ac:	e06e      	b.n	800398c <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	6810      	ldr	r0, [r2, #0]
 80038b6:	f107 020c 	add.w	r2, r7, #12
 80038ba:	2101      	movs	r1, #1
 80038bc:	4798      	blx	r3
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	da02      	bge.n	80038ca <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80038c4:	f06f 0304 	mvn.w	r3, #4
 80038c8:	e060      	b.n	800398c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f003 0304 	and.w	r3, r3, #4
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d101      	bne.n	80038d8 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80038d4:	2301      	movs	r3, #1
 80038d6:	e059      	b.n	800398c <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	695b      	ldr	r3, [r3, #20]
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	6810      	ldr	r0, [r2, #0]
 80038e0:	f107 020c 	add.w	r2, r7, #12
 80038e4:	2100      	movs	r1, #0
 80038e6:	4798      	blx	r3
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	da02      	bge.n	80038f4 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80038ee:	f06f 0304 	mvn.w	r3, #4
 80038f2:	e04b      	b.n	800398c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d11b      	bne.n	8003936 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d006      	beq.n	8003916 <LAN8742_GetLinkState+0x90>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8003912:	2302      	movs	r3, #2
 8003914:	e03a      	b.n	800398c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d001      	beq.n	8003924 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8003920:	2303      	movs	r3, #3
 8003922:	e033      	b.n	800398c <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800392a:	2b00      	cmp	r3, #0
 800392c:	d001      	beq.n	8003932 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800392e:	2304      	movs	r3, #4
 8003930:	e02c      	b.n	800398c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8003932:	2305      	movs	r3, #5
 8003934:	e02a      	b.n	800398c <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	6810      	ldr	r0, [r2, #0]
 800393e:	f107 020c 	add.w	r2, r7, #12
 8003942:	211f      	movs	r1, #31
 8003944:	4798      	blx	r3
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	da02      	bge.n	8003952 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800394c:	f06f 0304 	mvn.w	r3, #4
 8003950:	e01c      	b.n	800398c <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d101      	bne.n	8003960 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800395c:	2306      	movs	r3, #6
 800395e:	e015      	b.n	800398c <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f003 031c 	and.w	r3, r3, #28
 8003966:	2b18      	cmp	r3, #24
 8003968:	d101      	bne.n	800396e <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800396a:	2302      	movs	r3, #2
 800396c:	e00e      	b.n	800398c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f003 031c 	and.w	r3, r3, #28
 8003974:	2b08      	cmp	r3, #8
 8003976:	d101      	bne.n	800397c <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8003978:	2303      	movs	r3, #3
 800397a:	e007      	b.n	800398c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f003 031c 	and.w	r3, r3, #28
 8003982:	2b14      	cmp	r3, #20
 8003984:	d101      	bne.n	800398a <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8003986:	2304      	movs	r3, #4
 8003988:	e000      	b.n	800398c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800398a:	2305      	movs	r3, #5
    }				
  }
}
 800398c:	4618      	mov	r0, r3
 800398e:	3710      	adds	r7, #16
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800399a:	2003      	movs	r0, #3
 800399c:	f001 ff1c 	bl	80057d8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80039a0:	f006 fcfa 	bl	800a398 <HAL_RCC_GetSysClockFreq>
 80039a4:	4602      	mov	r2, r0
 80039a6:	4b15      	ldr	r3, [pc, #84]	; (80039fc <HAL_Init+0x68>)
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	0a1b      	lsrs	r3, r3, #8
 80039ac:	f003 030f 	and.w	r3, r3, #15
 80039b0:	4913      	ldr	r1, [pc, #76]	; (8003a00 <HAL_Init+0x6c>)
 80039b2:	5ccb      	ldrb	r3, [r1, r3]
 80039b4:	f003 031f 	and.w	r3, r3, #31
 80039b8:	fa22 f303 	lsr.w	r3, r2, r3
 80039bc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80039be:	4b0f      	ldr	r3, [pc, #60]	; (80039fc <HAL_Init+0x68>)
 80039c0:	699b      	ldr	r3, [r3, #24]
 80039c2:	f003 030f 	and.w	r3, r3, #15
 80039c6:	4a0e      	ldr	r2, [pc, #56]	; (8003a00 <HAL_Init+0x6c>)
 80039c8:	5cd3      	ldrb	r3, [r2, r3]
 80039ca:	f003 031f 	and.w	r3, r3, #31
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	fa22 f303 	lsr.w	r3, r2, r3
 80039d4:	4a0b      	ldr	r2, [pc, #44]	; (8003a04 <HAL_Init+0x70>)
 80039d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80039d8:	4a0b      	ldr	r2, [pc, #44]	; (8003a08 <HAL_Init+0x74>)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80039de:	2000      	movs	r0, #0
 80039e0:	f000 f814 	bl	8003a0c <HAL_InitTick>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e002      	b.n	80039f4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80039ee:	f7ff f95f 	bl	8002cb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3708      	adds	r7, #8
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	58024400 	.word	0x58024400
 8003a00:	0801ee68 	.word	0x0801ee68
 8003a04:	20000014 	.word	0x20000014
 8003a08:	20000010 	.word	0x20000010

08003a0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003a14:	4b15      	ldr	r3, [pc, #84]	; (8003a6c <HAL_InitTick+0x60>)
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d101      	bne.n	8003a20 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e021      	b.n	8003a64 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003a20:	4b13      	ldr	r3, [pc, #76]	; (8003a70 <HAL_InitTick+0x64>)
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	4b11      	ldr	r3, [pc, #68]	; (8003a6c <HAL_InitTick+0x60>)
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	4619      	mov	r1, r3
 8003a2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a36:	4618      	mov	r0, r3
 8003a38:	f001 ff01 	bl	800583e <HAL_SYSTICK_Config>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d001      	beq.n	8003a46 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e00e      	b.n	8003a64 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2b0f      	cmp	r3, #15
 8003a4a:	d80a      	bhi.n	8003a62 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	6879      	ldr	r1, [r7, #4]
 8003a50:	f04f 30ff 	mov.w	r0, #4294967295
 8003a54:	f001 fecb 	bl	80057ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a58:	4a06      	ldr	r2, [pc, #24]	; (8003a74 <HAL_InitTick+0x68>)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	e000      	b.n	8003a64 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3708      	adds	r7, #8
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	20000028 	.word	0x20000028
 8003a70:	20000010 	.word	0x20000010
 8003a74:	20000024 	.word	0x20000024

08003a78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003a7c:	4b06      	ldr	r3, [pc, #24]	; (8003a98 <HAL_IncTick+0x20>)
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	461a      	mov	r2, r3
 8003a82:	4b06      	ldr	r3, [pc, #24]	; (8003a9c <HAL_IncTick+0x24>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4413      	add	r3, r2
 8003a88:	4a04      	ldr	r2, [pc, #16]	; (8003a9c <HAL_IncTick+0x24>)
 8003a8a:	6013      	str	r3, [r2, #0]
}
 8003a8c:	bf00      	nop
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	20000028 	.word	0x20000028
 8003a9c:	20000608 	.word	0x20000608

08003aa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	af00      	add	r7, sp, #0
  return uwTick;
 8003aa4:	4b03      	ldr	r3, [pc, #12]	; (8003ab4 <HAL_GetTick+0x14>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	20000608 	.word	0x20000608

08003ab8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ac0:	f7ff ffee 	bl	8003aa0 <HAL_GetTick>
 8003ac4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad0:	d005      	beq.n	8003ade <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ad2:	4b0a      	ldr	r3, [pc, #40]	; (8003afc <HAL_Delay+0x44>)
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	4413      	add	r3, r2
 8003adc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003ade:	bf00      	nop
 8003ae0:	f7ff ffde 	bl	8003aa0 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d8f7      	bhi.n	8003ae0 <HAL_Delay+0x28>
  {
  }
}
 8003af0:	bf00      	nop
 8003af2:	bf00      	nop
 8003af4:	3710      	adds	r7, #16
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	20000028 	.word	0x20000028

08003b00 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003b00:	b480      	push	{r7}
 8003b02:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003b04:	4b03      	ldr	r3, [pc, #12]	; (8003b14 <HAL_GetREVID+0x14>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	0c1b      	lsrs	r3, r3, #16
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr
 8003b14:	5c001000 	.word	0x5c001000

08003b18 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8003b20:	4b06      	ldr	r3, [pc, #24]	; (8003b3c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003b28:	4904      	ldr	r1, [pc, #16]	; (8003b3c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	604b      	str	r3, [r1, #4]
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr
 8003b3c:	58000400 	.word	0x58000400

08003b40 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003b4a:	4b07      	ldr	r3, [pc, #28]	; (8003b68 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003b4c:	685a      	ldr	r2, [r3, #4]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	43db      	mvns	r3, r3
 8003b52:	401a      	ands	r2, r3
 8003b54:	4904      	ldr	r1, [pc, #16]	; (8003b68 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	604b      	str	r3, [r1, #4]
}
 8003b5c:	bf00      	nop
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr
 8003b68:	58000400 	.word	0x58000400

08003b6c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	431a      	orrs	r2, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	609a      	str	r2, [r3, #8]
}
 8003b86:	bf00      	nop
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr

08003b92 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003b92:	b480      	push	{r7}
 8003b94:	b083      	sub	sp, #12
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
 8003b9a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	431a      	orrs	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	609a      	str	r2, [r3, #8]
}
 8003bac:	bf00      	nop
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b087      	sub	sp, #28
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	607a      	str	r2, [r7, #4]
 8003be0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	3360      	adds	r3, #96	; 0x60
 8003be6:	461a      	mov	r2, r3
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	4413      	add	r3, r2
 8003bee:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	430b      	orrs	r3, r1
 8003c02:	431a      	orrs	r2, r3
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003c08:	bf00      	nop
 8003c0a:	371c      	adds	r7, #28
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	f003 031f 	and.w	r3, r3, #31
 8003c2e:	6879      	ldr	r1, [r7, #4]
 8003c30:	fa01 f303 	lsl.w	r3, r1, r3
 8003c34:	431a      	orrs	r2, r3
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	611a      	str	r2, [r3, #16]
}
 8003c3a:	bf00      	nop
 8003c3c:	3714      	adds	r7, #20
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr

08003c46 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003c46:	b480      	push	{r7}
 8003c48:	b087      	sub	sp, #28
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	60f8      	str	r0, [r7, #12]
 8003c4e:	60b9      	str	r1, [r7, #8]
 8003c50:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	3360      	adds	r3, #96	; 0x60
 8003c56:	461a      	mov	r2, r3
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	4413      	add	r3, r2
 8003c5e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	431a      	orrs	r2, r3
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	601a      	str	r2, [r3, #0]
  }
}
 8003c70:	bf00      	nop
 8003c72:	371c      	adds	r7, #28
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d101      	bne.n	8003c94 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003c90:	2301      	movs	r3, #1
 8003c92:	e000      	b.n	8003c96 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	370c      	adds	r7, #12
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr

08003ca2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003ca2:	b480      	push	{r7}
 8003ca4:	b087      	sub	sp, #28
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	60f8      	str	r0, [r7, #12]
 8003caa:	60b9      	str	r1, [r7, #8]
 8003cac:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	3330      	adds	r3, #48	; 0x30
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	0a1b      	lsrs	r3, r3, #8
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	f003 030c 	and.w	r3, r3, #12
 8003cbe:	4413      	add	r3, r2
 8003cc0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	f003 031f 	and.w	r3, r3, #31
 8003ccc:	211f      	movs	r1, #31
 8003cce:	fa01 f303 	lsl.w	r3, r1, r3
 8003cd2:	43db      	mvns	r3, r3
 8003cd4:	401a      	ands	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	0e9b      	lsrs	r3, r3, #26
 8003cda:	f003 011f 	and.w	r1, r3, #31
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	f003 031f 	and.w	r3, r3, #31
 8003ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ce8:	431a      	orrs	r2, r3
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003cee:	bf00      	nop
 8003cf0:	371c      	adds	r7, #28
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr

08003cfa <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	b083      	sub	sp, #12
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d06:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d101      	bne.n	8003d12 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e000      	b.n	8003d14 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b087      	sub	sp, #28
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	3314      	adds	r3, #20
 8003d30:	461a      	mov	r2, r3
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	0e5b      	lsrs	r3, r3, #25
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	f003 0304 	and.w	r3, r3, #4
 8003d3c:	4413      	add	r3, r2
 8003d3e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	0d1b      	lsrs	r3, r3, #20
 8003d48:	f003 031f 	and.w	r3, r3, #31
 8003d4c:	2107      	movs	r1, #7
 8003d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d52:	43db      	mvns	r3, r3
 8003d54:	401a      	ands	r2, r3
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	0d1b      	lsrs	r3, r3, #20
 8003d5a:	f003 031f 	and.w	r3, r3, #31
 8003d5e:	6879      	ldr	r1, [r7, #4]
 8003d60:	fa01 f303 	lsl.w	r3, r1, r3
 8003d64:	431a      	orrs	r2, r3
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003d6a:	bf00      	nop
 8003d6c:	371c      	adds	r7, #28
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
	...

08003d78 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b085      	sub	sp, #20
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d90:	43db      	mvns	r3, r3
 8003d92:	401a      	ands	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f003 0318 	and.w	r3, r3, #24
 8003d9a:	4908      	ldr	r1, [pc, #32]	; (8003dbc <LL_ADC_SetChannelSingleDiff+0x44>)
 8003d9c:	40d9      	lsrs	r1, r3
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	400b      	ands	r3, r1
 8003da2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003da6:	431a      	orrs	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003dae:	bf00      	nop
 8003db0:	3714      	adds	r7, #20
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	000fffff 	.word	0x000fffff

08003dc0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f003 031f 	and.w	r3, r3, #31
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689a      	ldr	r2, [r3, #8]
 8003e04:	4b04      	ldr	r3, [pc, #16]	; (8003e18 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003e06:	4013      	ands	r3, r2
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	6093      	str	r3, [r2, #8]
}
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr
 8003e18:	5fffffc0 	.word	0x5fffffc0

08003e1c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e30:	d101      	bne.n	8003e36 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003e32:	2301      	movs	r3, #1
 8003e34:	e000      	b.n	8003e38 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689a      	ldr	r2, [r3, #8]
 8003e50:	4b05      	ldr	r3, [pc, #20]	; (8003e68 <LL_ADC_EnableInternalRegulator+0x24>)
 8003e52:	4013      	ands	r3, r2
 8003e54:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003e5c:	bf00      	nop
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr
 8003e68:	6fffffc0 	.word	0x6fffffc0

08003e6c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e80:	d101      	bne.n	8003e86 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003e82:	2301      	movs	r3, #1
 8003e84:	e000      	b.n	8003e88 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689a      	ldr	r2, [r3, #8]
 8003ea0:	4b05      	ldr	r3, [pc, #20]	; (8003eb8 <LL_ADC_Enable+0x24>)
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	f043 0201 	orr.w	r2, r3, #1
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003eac:	bf00      	nop
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr
 8003eb8:	7fffffc0 	.word	0x7fffffc0

08003ebc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	689a      	ldr	r2, [r3, #8]
 8003ec8:	4b05      	ldr	r3, [pc, #20]	; (8003ee0 <LL_ADC_Disable+0x24>)
 8003eca:	4013      	ands	r3, r2
 8003ecc:	f043 0202 	orr.w	r2, r3, #2
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003ed4:	bf00      	nop
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr
 8003ee0:	7fffffc0 	.word	0x7fffffc0

08003ee4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f003 0301 	and.w	r3, r3, #1
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d101      	bne.n	8003efc <LL_ADC_IsEnabled+0x18>
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e000      	b.n	8003efe <LL_ADC_IsEnabled+0x1a>
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	370c      	adds	r7, #12
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr

08003f0a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003f0a:	b480      	push	{r7}
 8003f0c:	b083      	sub	sp, #12
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d101      	bne.n	8003f22 <LL_ADC_IsDisableOngoing+0x18>
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e000      	b.n	8003f24 <LL_ADC_IsDisableOngoing+0x1a>
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689a      	ldr	r2, [r3, #8]
 8003f3c:	4b05      	ldr	r3, [pc, #20]	; (8003f54 <LL_ADC_REG_StartConversion+0x24>)
 8003f3e:	4013      	ands	r3, r2
 8003f40:	f043 0204 	orr.w	r2, r3, #4
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003f48:	bf00      	nop
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr
 8003f54:	7fffffc0 	.word	0x7fffffc0

08003f58 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	f003 0304 	and.w	r3, r3, #4
 8003f68:	2b04      	cmp	r3, #4
 8003f6a:	d101      	bne.n	8003f70 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e000      	b.n	8003f72 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	370c      	adds	r7, #12
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr

08003f7e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b083      	sub	sp, #12
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f003 0308 	and.w	r3, r3, #8
 8003f8e:	2b08      	cmp	r3, #8
 8003f90:	d101      	bne.n	8003f96 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003f92:	2301      	movs	r3, #1
 8003f94:	e000      	b.n	8003f98 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003fa4:	b590      	push	{r4, r7, lr}
 8003fa6:	b089      	sub	sp, #36	; 0x24
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fac:	2300      	movs	r3, #0
 8003fae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e18f      	b.n	80042de <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d109      	bne.n	8003fe0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f7fe fe89 	bl	8002ce4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f7ff ff19 	bl	8003e1c <LL_ADC_IsDeepPowerDownEnabled>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d004      	beq.n	8003ffa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7ff feff 	bl	8003df8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7ff ff34 	bl	8003e6c <LL_ADC_IsInternalRegulatorEnabled>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d114      	bne.n	8004034 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4618      	mov	r0, r3
 8004010:	f7ff ff18 	bl	8003e44 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004014:	4b87      	ldr	r3, [pc, #540]	; (8004234 <HAL_ADC_Init+0x290>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	099b      	lsrs	r3, r3, #6
 800401a:	4a87      	ldr	r2, [pc, #540]	; (8004238 <HAL_ADC_Init+0x294>)
 800401c:	fba2 2303 	umull	r2, r3, r2, r3
 8004020:	099b      	lsrs	r3, r3, #6
 8004022:	3301      	adds	r3, #1
 8004024:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004026:	e002      	b.n	800402e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	3b01      	subs	r3, #1
 800402c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1f9      	bne.n	8004028 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4618      	mov	r0, r3
 800403a:	f7ff ff17 	bl	8003e6c <LL_ADC_IsInternalRegulatorEnabled>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d10d      	bne.n	8004060 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004048:	f043 0210 	orr.w	r2, r3, #16
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004054:	f043 0201 	orr.w	r2, r3, #1
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4618      	mov	r0, r3
 8004066:	f7ff ff77 	bl	8003f58 <LL_ADC_REG_IsConversionOngoing>
 800406a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004070:	f003 0310 	and.w	r3, r3, #16
 8004074:	2b00      	cmp	r3, #0
 8004076:	f040 8129 	bne.w	80042cc <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	2b00      	cmp	r3, #0
 800407e:	f040 8125 	bne.w	80042cc <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004086:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800408a:	f043 0202 	orr.w	r2, r3, #2
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4618      	mov	r0, r3
 8004098:	f7ff ff24 	bl	8003ee4 <LL_ADC_IsEnabled>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d136      	bne.n	8004110 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a65      	ldr	r2, [pc, #404]	; (800423c <HAL_ADC_Init+0x298>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d004      	beq.n	80040b6 <HAL_ADC_Init+0x112>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a63      	ldr	r2, [pc, #396]	; (8004240 <HAL_ADC_Init+0x29c>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d10e      	bne.n	80040d4 <HAL_ADC_Init+0x130>
 80040b6:	4861      	ldr	r0, [pc, #388]	; (800423c <HAL_ADC_Init+0x298>)
 80040b8:	f7ff ff14 	bl	8003ee4 <LL_ADC_IsEnabled>
 80040bc:	4604      	mov	r4, r0
 80040be:	4860      	ldr	r0, [pc, #384]	; (8004240 <HAL_ADC_Init+0x29c>)
 80040c0:	f7ff ff10 	bl	8003ee4 <LL_ADC_IsEnabled>
 80040c4:	4603      	mov	r3, r0
 80040c6:	4323      	orrs	r3, r4
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	bf0c      	ite	eq
 80040cc:	2301      	moveq	r3, #1
 80040ce:	2300      	movne	r3, #0
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	e008      	b.n	80040e6 <HAL_ADC_Init+0x142>
 80040d4:	485b      	ldr	r0, [pc, #364]	; (8004244 <HAL_ADC_Init+0x2a0>)
 80040d6:	f7ff ff05 	bl	8003ee4 <LL_ADC_IsEnabled>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	bf0c      	ite	eq
 80040e0:	2301      	moveq	r3, #1
 80040e2:	2300      	movne	r3, #0
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d012      	beq.n	8004110 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a53      	ldr	r2, [pc, #332]	; (800423c <HAL_ADC_Init+0x298>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d004      	beq.n	80040fe <HAL_ADC_Init+0x15a>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a51      	ldr	r2, [pc, #324]	; (8004240 <HAL_ADC_Init+0x29c>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d101      	bne.n	8004102 <HAL_ADC_Init+0x15e>
 80040fe:	4a52      	ldr	r2, [pc, #328]	; (8004248 <HAL_ADC_Init+0x2a4>)
 8004100:	e000      	b.n	8004104 <HAL_ADC_Init+0x160>
 8004102:	4a52      	ldr	r2, [pc, #328]	; (800424c <HAL_ADC_Init+0x2a8>)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	4619      	mov	r1, r3
 800410a:	4610      	mov	r0, r2
 800410c:	f7ff fd2e 	bl	8003b6c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8004110:	f7ff fcf6 	bl	8003b00 <HAL_GetREVID>
 8004114:	4603      	mov	r3, r0
 8004116:	f241 0203 	movw	r2, #4099	; 0x1003
 800411a:	4293      	cmp	r3, r2
 800411c:	d914      	bls.n	8004148 <HAL_ADC_Init+0x1a4>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	2b10      	cmp	r3, #16
 8004124:	d110      	bne.n	8004148 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	7d5b      	ldrb	r3, [r3, #21]
 800412a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004130:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004136:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	7f1b      	ldrb	r3, [r3, #28]
 800413c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800413e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004140:	f043 030c 	orr.w	r3, r3, #12
 8004144:	61bb      	str	r3, [r7, #24]
 8004146:	e00d      	b.n	8004164 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	7d5b      	ldrb	r3, [r3, #21]
 800414c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004152:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004158:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	7f1b      	ldrb	r3, [r3, #28]
 800415e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004160:	4313      	orrs	r3, r2
 8004162:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	7f1b      	ldrb	r3, [r3, #28]
 8004168:	2b01      	cmp	r3, #1
 800416a:	d106      	bne.n	800417a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a1b      	ldr	r3, [r3, #32]
 8004170:	3b01      	subs	r3, #1
 8004172:	045b      	lsls	r3, r3, #17
 8004174:	69ba      	ldr	r2, [r7, #24]
 8004176:	4313      	orrs	r3, r2
 8004178:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417e:	2b00      	cmp	r3, #0
 8004180:	d009      	beq.n	8004196 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004186:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800418e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004190:	69ba      	ldr	r2, [r7, #24]
 8004192:	4313      	orrs	r3, r2
 8004194:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68da      	ldr	r2, [r3, #12]
 800419c:	4b2c      	ldr	r3, [pc, #176]	; (8004250 <HAL_ADC_Init+0x2ac>)
 800419e:	4013      	ands	r3, r2
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	6812      	ldr	r2, [r2, #0]
 80041a4:	69b9      	ldr	r1, [r7, #24]
 80041a6:	430b      	orrs	r3, r1
 80041a8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7ff fed2 	bl	8003f58 <LL_ADC_REG_IsConversionOngoing>
 80041b4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7ff fedf 	bl	8003f7e <LL_ADC_INJ_IsConversionOngoing>
 80041c0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d15f      	bne.n	8004288 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d15c      	bne.n	8004288 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	7d1b      	ldrb	r3, [r3, #20]
 80041d2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80041d8:	4313      	orrs	r3, r2
 80041da:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68da      	ldr	r2, [r3, #12]
 80041e2:	4b1c      	ldr	r3, [pc, #112]	; (8004254 <HAL_ADC_Init+0x2b0>)
 80041e4:	4013      	ands	r3, r2
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	6812      	ldr	r2, [r2, #0]
 80041ea:	69b9      	ldr	r1, [r7, #24]
 80041ec:	430b      	orrs	r3, r1
 80041ee:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d130      	bne.n	800425c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fe:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	691a      	ldr	r2, [r3, #16]
 8004206:	4b14      	ldr	r3, [pc, #80]	; (8004258 <HAL_ADC_Init+0x2b4>)
 8004208:	4013      	ands	r3, r2
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800420e:	3a01      	subs	r2, #1
 8004210:	0411      	lsls	r1, r2, #16
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004216:	4311      	orrs	r1, r2
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800421c:	4311      	orrs	r1, r2
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004222:	430a      	orrs	r2, r1
 8004224:	431a      	orrs	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f042 0201 	orr.w	r2, r2, #1
 800422e:	611a      	str	r2, [r3, #16]
 8004230:	e01c      	b.n	800426c <HAL_ADC_Init+0x2c8>
 8004232:	bf00      	nop
 8004234:	20000010 	.word	0x20000010
 8004238:	053e2d63 	.word	0x053e2d63
 800423c:	40022000 	.word	0x40022000
 8004240:	40022100 	.word	0x40022100
 8004244:	58026000 	.word	0x58026000
 8004248:	40022300 	.word	0x40022300
 800424c:	58026300 	.word	0x58026300
 8004250:	fff0c003 	.word	0xfff0c003
 8004254:	ffffbffc 	.word	0xffffbffc
 8004258:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	691a      	ldr	r2, [r3, #16]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f022 0201 	bic.w	r2, r2, #1
 800426a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	430a      	orrs	r2, r1
 8004280:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f001 f804 	bl	8005290 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d10c      	bne.n	80042aa <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004296:	f023 010f 	bic.w	r1, r3, #15
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	699b      	ldr	r3, [r3, #24]
 800429e:	1e5a      	subs	r2, r3, #1
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	430a      	orrs	r2, r1
 80042a6:	631a      	str	r2, [r3, #48]	; 0x30
 80042a8:	e007      	b.n	80042ba <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f022 020f 	bic.w	r2, r2, #15
 80042b8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042be:	f023 0303 	bic.w	r3, r3, #3
 80042c2:	f043 0201 	orr.w	r2, r3, #1
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	655a      	str	r2, [r3, #84]	; 0x54
 80042ca:	e007      	b.n	80042dc <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d0:	f043 0210 	orr.w	r2, r3, #16
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80042dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3724      	adds	r7, #36	; 0x24
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd90      	pop	{r4, r7, pc}
 80042e6:	bf00      	nop

080042e8 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b086      	sub	sp, #24
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a92      	ldr	r2, [pc, #584]	; (8004540 <HAL_ADC_Start_IT+0x258>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d004      	beq.n	8004304 <HAL_ADC_Start_IT+0x1c>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a91      	ldr	r2, [pc, #580]	; (8004544 <HAL_ADC_Start_IT+0x25c>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d101      	bne.n	8004308 <HAL_ADC_Start_IT+0x20>
 8004304:	4b90      	ldr	r3, [pc, #576]	; (8004548 <HAL_ADC_Start_IT+0x260>)
 8004306:	e000      	b.n	800430a <HAL_ADC_Start_IT+0x22>
 8004308:	4b90      	ldr	r3, [pc, #576]	; (800454c <HAL_ADC_Start_IT+0x264>)
 800430a:	4618      	mov	r0, r3
 800430c:	f7ff fd58 	bl	8003dc0 <LL_ADC_GetMultimode>
 8004310:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4618      	mov	r0, r3
 8004318:	f7ff fe1e 	bl	8003f58 <LL_ADC_REG_IsConversionOngoing>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	f040 8118 	bne.w	8004554 <HAL_ADC_Start_IT+0x26c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800432a:	2b01      	cmp	r3, #1
 800432c:	d101      	bne.n	8004332 <HAL_ADC_Start_IT+0x4a>
 800432e:	2302      	movs	r3, #2
 8004330:	e113      	b.n	800455a <HAL_ADC_Start_IT+0x272>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2201      	movs	r2, #1
 8004336:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 febe 	bl	80050bc <ADC_Enable>
 8004340:	4603      	mov	r3, r0
 8004342:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004344:	7dfb      	ldrb	r3, [r7, #23]
 8004346:	2b00      	cmp	r3, #0
 8004348:	f040 80f5 	bne.w	8004536 <HAL_ADC_Start_IT+0x24e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004350:	4b7f      	ldr	r3, [pc, #508]	; (8004550 <HAL_ADC_Start_IT+0x268>)
 8004352:	4013      	ands	r3, r2
 8004354:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a78      	ldr	r2, [pc, #480]	; (8004544 <HAL_ADC_Start_IT+0x25c>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d002      	beq.n	800436c <HAL_ADC_Start_IT+0x84>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	e000      	b.n	800436e <HAL_ADC_Start_IT+0x86>
 800436c:	4b74      	ldr	r3, [pc, #464]	; (8004540 <HAL_ADC_Start_IT+0x258>)
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	6812      	ldr	r2, [r2, #0]
 8004372:	4293      	cmp	r3, r2
 8004374:	d002      	beq.n	800437c <HAL_ADC_Start_IT+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d105      	bne.n	8004388 <HAL_ADC_Start_IT+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004380:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800438c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d006      	beq.n	80043a2 <HAL_ADC_Start_IT+0xba>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004398:	f023 0206 	bic.w	r2, r3, #6
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	659a      	str	r2, [r3, #88]	; 0x58
 80043a0:	e002      	b.n	80043a8 <HAL_ADC_Start_IT+0xc0>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	221c      	movs	r2, #28
 80043ae:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	685a      	ldr	r2, [r3, #4]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f022 021c 	bic.w	r2, r2, #28
 80043c6:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	2b08      	cmp	r3, #8
 80043ce:	d108      	bne.n	80043e2 <HAL_ADC_Start_IT+0xfa>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f042 0208 	orr.w	r2, r2, #8
 80043de:	605a      	str	r2, [r3, #4]
          break;
 80043e0:	e008      	b.n	80043f4 <HAL_ADC_Start_IT+0x10c>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	685a      	ldr	r2, [r3, #4]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f042 0204 	orr.w	r2, r2, #4
 80043f0:	605a      	str	r2, [r3, #4]
          break;
 80043f2:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d107      	bne.n	800440c <HAL_ADC_Start_IT+0x124>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	685a      	ldr	r2, [r3, #4]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f042 0210 	orr.w	r2, r2, #16
 800440a:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a4c      	ldr	r2, [pc, #304]	; (8004544 <HAL_ADC_Start_IT+0x25c>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d002      	beq.n	800441c <HAL_ADC_Start_IT+0x134>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	e000      	b.n	800441e <HAL_ADC_Start_IT+0x136>
 800441c:	4b48      	ldr	r3, [pc, #288]	; (8004540 <HAL_ADC_Start_IT+0x258>)
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	6812      	ldr	r2, [r2, #0]
 8004422:	4293      	cmp	r3, r2
 8004424:	d008      	beq.n	8004438 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d005      	beq.n	8004438 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	2b05      	cmp	r3, #5
 8004430:	d002      	beq.n	8004438 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	2b09      	cmp	r3, #9
 8004436:	d13a      	bne.n	80044ae <HAL_ADC_Start_IT+0x1c6>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d02d      	beq.n	80044a2 <HAL_ADC_Start_IT+0x1ba>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800444a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800444e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	2b08      	cmp	r3, #8
 800445c:	d110      	bne.n	8004480 <HAL_ADC_Start_IT+0x198>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	685a      	ldr	r2, [r3, #4]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f022 0220 	bic.w	r2, r2, #32
 800446c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	685a      	ldr	r2, [r3, #4]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800447c:	605a      	str	r2, [r3, #4]
              break;
 800447e:	e010      	b.n	80044a2 <HAL_ADC_Start_IT+0x1ba>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	685a      	ldr	r2, [r3, #4]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800448e:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	685a      	ldr	r2, [r3, #4]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f042 0220 	orr.w	r2, r2, #32
 800449e:	605a      	str	r2, [r3, #4]
              break;
 80044a0:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7ff fd42 	bl	8003f30 <LL_ADC_REG_StartConversion>
 80044ac:	e054      	b.n	8004558 <HAL_ADC_Start_IT+0x270>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044b2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a21      	ldr	r2, [pc, #132]	; (8004544 <HAL_ADC_Start_IT+0x25c>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d002      	beq.n	80044ca <HAL_ADC_Start_IT+0x1e2>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	e000      	b.n	80044cc <HAL_ADC_Start_IT+0x1e4>
 80044ca:	4b1d      	ldr	r3, [pc, #116]	; (8004540 <HAL_ADC_Start_IT+0x258>)
 80044cc:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d03e      	beq.n	8004558 <HAL_ADC_Start_IT+0x270>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044de:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80044e2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	2b08      	cmp	r3, #8
 80044f0:	d110      	bne.n	8004514 <HAL_ADC_Start_IT+0x22c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	685a      	ldr	r2, [r3, #4]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f022 0220 	bic.w	r2, r2, #32
 8004500:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	685a      	ldr	r2, [r3, #4]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004510:	605a      	str	r2, [r3, #4]
              break;
 8004512:	e021      	b.n	8004558 <HAL_ADC_Start_IT+0x270>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	685a      	ldr	r2, [r3, #4]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004522:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	685a      	ldr	r2, [r3, #4]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f042 0220 	orr.w	r2, r2, #32
 8004532:	605a      	str	r2, [r3, #4]
              break;
 8004534:	e010      	b.n	8004558 <HAL_ADC_Start_IT+0x270>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800453e:	e00b      	b.n	8004558 <HAL_ADC_Start_IT+0x270>
 8004540:	40022000 	.word	0x40022000
 8004544:	40022100 	.word	0x40022100
 8004548:	40022300 	.word	0x40022300
 800454c:	58026300 	.word	0x58026300
 8004550:	fffff0fe 	.word	0xfffff0fe
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004554:	2302      	movs	r3, #2
 8004556:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004558:	7dfb      	ldrb	r3, [r7, #23]
}
 800455a:	4618      	mov	r0, r3
 800455c:	3718      	adds	r7, #24
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop

08004564 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004572:	4618      	mov	r0, r3
 8004574:	370c      	adds	r7, #12
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
	...

08004580 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b08a      	sub	sp, #40	; 0x28
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004588:	2300      	movs	r3, #0
 800458a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a87      	ldr	r2, [pc, #540]	; (80047c0 <HAL_ADC_IRQHandler+0x240>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d004      	beq.n	80045b0 <HAL_ADC_IRQHandler+0x30>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a86      	ldr	r2, [pc, #536]	; (80047c4 <HAL_ADC_IRQHandler+0x244>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d101      	bne.n	80045b4 <HAL_ADC_IRQHandler+0x34>
 80045b0:	4b85      	ldr	r3, [pc, #532]	; (80047c8 <HAL_ADC_IRQHandler+0x248>)
 80045b2:	e000      	b.n	80045b6 <HAL_ADC_IRQHandler+0x36>
 80045b4:	4b85      	ldr	r3, [pc, #532]	; (80047cc <HAL_ADC_IRQHandler+0x24c>)
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7ff fc02 	bl	8003dc0 <LL_ADC_GetMultimode>
 80045bc:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	f003 0302 	and.w	r3, r3, #2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d017      	beq.n	80045f8 <HAL_ADC_IRQHandler+0x78>
 80045c8:	69bb      	ldr	r3, [r7, #24]
 80045ca:	f003 0302 	and.w	r3, r3, #2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d012      	beq.n	80045f8 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045d6:	f003 0310 	and.w	r3, r3, #16
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d105      	bne.n	80045ea <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e2:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f001 f81a 	bl	8005624 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2202      	movs	r2, #2
 80045f6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	f003 0304 	and.w	r3, r3, #4
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d004      	beq.n	800460c <HAL_ADC_IRQHandler+0x8c>
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	f003 0304 	and.w	r3, r3, #4
 8004608:	2b00      	cmp	r3, #0
 800460a:	d10a      	bne.n	8004622 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004612:	2b00      	cmp	r3, #0
 8004614:	f000 8083 	beq.w	800471e <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	f003 0308 	and.w	r3, r3, #8
 800461e:	2b00      	cmp	r3, #0
 8004620:	d07d      	beq.n	800471e <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004626:	f003 0310 	and.w	r3, r3, #16
 800462a:	2b00      	cmp	r3, #0
 800462c:	d105      	bne.n	800463a <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004632:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4618      	mov	r0, r3
 8004640:	f7ff fb1c 	bl	8003c7c <LL_ADC_REG_IsTriggerSourceSWStart>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d062      	beq.n	8004710 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a5d      	ldr	r2, [pc, #372]	; (80047c4 <HAL_ADC_IRQHandler+0x244>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d002      	beq.n	800465a <HAL_ADC_IRQHandler+0xda>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	e000      	b.n	800465c <HAL_ADC_IRQHandler+0xdc>
 800465a:	4b59      	ldr	r3, [pc, #356]	; (80047c0 <HAL_ADC_IRQHandler+0x240>)
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	6812      	ldr	r2, [r2, #0]
 8004660:	4293      	cmp	r3, r2
 8004662:	d008      	beq.n	8004676 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d005      	beq.n	8004676 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	2b05      	cmp	r3, #5
 800466e:	d002      	beq.n	8004676 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	2b09      	cmp	r3, #9
 8004674:	d104      	bne.n	8004680 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	623b      	str	r3, [r7, #32]
 800467e:	e00c      	b.n	800469a <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a4f      	ldr	r2, [pc, #316]	; (80047c4 <HAL_ADC_IRQHandler+0x244>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d002      	beq.n	8004690 <HAL_ADC_IRQHandler+0x110>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	e000      	b.n	8004692 <HAL_ADC_IRQHandler+0x112>
 8004690:	4b4b      	ldr	r3, [pc, #300]	; (80047c0 <HAL_ADC_IRQHandler+0x240>)
 8004692:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800469a:	6a3b      	ldr	r3, [r7, #32]
 800469c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d135      	bne.n	8004710 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0308 	and.w	r3, r3, #8
 80046ae:	2b08      	cmp	r3, #8
 80046b0:	d12e      	bne.n	8004710 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7ff fc4e 	bl	8003f58 <LL_ADC_REG_IsConversionOngoing>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d11a      	bne.n	80046f8 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	685a      	ldr	r2, [r3, #4]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f022 020c 	bic.w	r2, r2, #12
 80046d0:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d112      	bne.n	8004710 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ee:	f043 0201 	orr.w	r2, r3, #1
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	655a      	str	r2, [r3, #84]	; 0x54
 80046f6:	e00b      	b.n	8004710 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046fc:	f043 0210 	orr.w	r2, r3, #16
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004708:	f043 0201 	orr.w	r2, r3, #1
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f7fe fa1f 	bl	8002b54 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	220c      	movs	r2, #12
 800471c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	f003 0320 	and.w	r3, r3, #32
 8004724:	2b00      	cmp	r3, #0
 8004726:	d004      	beq.n	8004732 <HAL_ADC_IRQHandler+0x1b2>
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	f003 0320 	and.w	r3, r3, #32
 800472e:	2b00      	cmp	r3, #0
 8004730:	d10b      	bne.n	800474a <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004738:	2b00      	cmp	r3, #0
 800473a:	f000 80a0 	beq.w	800487e <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004744:	2b00      	cmp	r3, #0
 8004746:	f000 809a 	beq.w	800487e <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800474e:	f003 0310 	and.w	r3, r3, #16
 8004752:	2b00      	cmp	r3, #0
 8004754:	d105      	bne.n	8004762 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800475a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4618      	mov	r0, r3
 8004768:	f7ff fac7 	bl	8003cfa <LL_ADC_INJ_IsTriggerSourceSWStart>
 800476c:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4618      	mov	r0, r3
 8004774:	f7ff fa82 	bl	8003c7c <LL_ADC_REG_IsTriggerSourceSWStart>
 8004778:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a11      	ldr	r2, [pc, #68]	; (80047c4 <HAL_ADC_IRQHandler+0x244>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d002      	beq.n	800478a <HAL_ADC_IRQHandler+0x20a>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	e000      	b.n	800478c <HAL_ADC_IRQHandler+0x20c>
 800478a:	4b0d      	ldr	r3, [pc, #52]	; (80047c0 <HAL_ADC_IRQHandler+0x240>)
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	6812      	ldr	r2, [r2, #0]
 8004790:	4293      	cmp	r3, r2
 8004792:	d008      	beq.n	80047a6 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d005      	beq.n	80047a6 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	2b06      	cmp	r3, #6
 800479e:	d002      	beq.n	80047a6 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	2b07      	cmp	r3, #7
 80047a4:	d104      	bne.n	80047b0 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	623b      	str	r3, [r7, #32]
 80047ae:	e014      	b.n	80047da <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a03      	ldr	r2, [pc, #12]	; (80047c4 <HAL_ADC_IRQHandler+0x244>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d00a      	beq.n	80047d0 <HAL_ADC_IRQHandler+0x250>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	e008      	b.n	80047d2 <HAL_ADC_IRQHandler+0x252>
 80047c0:	40022000 	.word	0x40022000
 80047c4:	40022100 	.word	0x40022100
 80047c8:	40022300 	.word	0x40022300
 80047cc:	58026300 	.word	0x58026300
 80047d0:	4b84      	ldr	r3, [pc, #528]	; (80049e4 <HAL_ADC_IRQHandler+0x464>)
 80047d2:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d047      	beq.n	8004870 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80047e0:	6a3b      	ldr	r3, [r7, #32]
 80047e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d007      	beq.n	80047fa <HAL_ADC_IRQHandler+0x27a>
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d03f      	beq.n	8004870 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80047f0:	6a3b      	ldr	r3, [r7, #32]
 80047f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d13a      	bne.n	8004870 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004804:	2b40      	cmp	r3, #64	; 0x40
 8004806:	d133      	bne.n	8004870 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004808:	6a3b      	ldr	r3, [r7, #32]
 800480a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d12e      	bne.n	8004870 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4618      	mov	r0, r3
 8004818:	f7ff fbb1 	bl	8003f7e <LL_ADC_INJ_IsConversionOngoing>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d11a      	bne.n	8004858 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	685a      	ldr	r2, [r3, #4]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004830:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004836:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004846:	2b00      	cmp	r3, #0
 8004848:	d112      	bne.n	8004870 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800484e:	f043 0201 	orr.w	r2, r3, #1
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	655a      	str	r2, [r3, #84]	; 0x54
 8004856:	e00b      	b.n	8004870 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800485c:	f043 0210 	orr.w	r2, r3, #16
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004868:	f043 0201 	orr.w	r2, r3, #1
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f000 feaf 	bl	80055d4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2260      	movs	r2, #96	; 0x60
 800487c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004884:	2b00      	cmp	r3, #0
 8004886:	d011      	beq.n	80048ac <HAL_ADC_IRQHandler+0x32c>
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00c      	beq.n	80048ac <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004896:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 f8a8 	bl	80049f4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2280      	movs	r2, #128	; 0x80
 80048aa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d012      	beq.n	80048dc <HAL_ADC_IRQHandler+0x35c>
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d00d      	beq.n	80048dc <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f000 fe95 	bl	80055fc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048da:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d012      	beq.n	800490c <HAL_ADC_IRQHandler+0x38c>
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00d      	beq.n	800490c <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f000 fe87 	bl	8005610 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f44f 7200 	mov.w	r2, #512	; 0x200
 800490a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	f003 0310 	and.w	r3, r3, #16
 8004912:	2b00      	cmp	r3, #0
 8004914:	d043      	beq.n	800499e <HAL_ADC_IRQHandler+0x41e>
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	f003 0310 	and.w	r3, r3, #16
 800491c:	2b00      	cmp	r3, #0
 800491e:	d03e      	beq.n	800499e <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004924:	2b00      	cmp	r3, #0
 8004926:	d102      	bne.n	800492e <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8004928:	2301      	movs	r3, #1
 800492a:	627b      	str	r3, [r7, #36]	; 0x24
 800492c:	e021      	b.n	8004972 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d015      	beq.n	8004960 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a2a      	ldr	r2, [pc, #168]	; (80049e4 <HAL_ADC_IRQHandler+0x464>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d004      	beq.n	8004948 <HAL_ADC_IRQHandler+0x3c8>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a29      	ldr	r2, [pc, #164]	; (80049e8 <HAL_ADC_IRQHandler+0x468>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d101      	bne.n	800494c <HAL_ADC_IRQHandler+0x3cc>
 8004948:	4b28      	ldr	r3, [pc, #160]	; (80049ec <HAL_ADC_IRQHandler+0x46c>)
 800494a:	e000      	b.n	800494e <HAL_ADC_IRQHandler+0x3ce>
 800494c:	4b28      	ldr	r3, [pc, #160]	; (80049f0 <HAL_ADC_IRQHandler+0x470>)
 800494e:	4618      	mov	r0, r3
 8004950:	f7ff fa44 	bl	8003ddc <LL_ADC_GetMultiDMATransfer>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00b      	beq.n	8004972 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800495a:	2301      	movs	r3, #1
 800495c:	627b      	str	r3, [r7, #36]	; 0x24
 800495e:	e008      	b.n	8004972 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	f003 0303 	and.w	r3, r3, #3
 800496a:	2b00      	cmp	r3, #0
 800496c:	d001      	beq.n	8004972 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800496e:	2301      	movs	r3, #1
 8004970:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8004972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004974:	2b01      	cmp	r3, #1
 8004976:	d10e      	bne.n	8004996 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800497c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004988:	f043 0202 	orr.w	r2, r3, #2
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f000 f839 	bl	8004a08 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2210      	movs	r2, #16
 800499c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d018      	beq.n	80049da <HAL_ADC_IRQHandler+0x45a>
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d013      	beq.n	80049da <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049b6:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049c2:	f043 0208 	orr.w	r2, r3, #8
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80049d2:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f000 fe07 	bl	80055e8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80049da:	bf00      	nop
 80049dc:	3728      	adds	r7, #40	; 0x28
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	40022000 	.word	0x40022000
 80049e8:	40022100 	.word	0x40022100
 80049ec:	40022300 	.word	0x40022300
 80049f0:	58026300 	.word	0x58026300

080049f4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80049fc:	bf00      	nop
 80049fe:	370c      	adds	r7, #12
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004a10:	bf00      	nop
 8004a12:	370c      	adds	r7, #12
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004a1c:	b590      	push	{r4, r7, lr}
 8004a1e:	b0a1      	sub	sp, #132	; 0x84
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a26:	2300      	movs	r3, #0
 8004a28:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	4a9d      	ldr	r2, [pc, #628]	; (8004cac <HAL_ADC_ConfigChannel+0x290>)
 8004a36:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d101      	bne.n	8004a46 <HAL_ADC_ConfigChannel+0x2a>
 8004a42:	2302      	movs	r3, #2
 8004a44:	e321      	b.n	800508a <HAL_ADC_ConfigChannel+0x66e>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4618      	mov	r0, r3
 8004a54:	f7ff fa80 	bl	8003f58 <LL_ADC_REG_IsConversionOngoing>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	f040 8306 	bne.w	800506c <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d108      	bne.n	8004a7e <HAL_ADC_ConfigChannel+0x62>
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	0e9b      	lsrs	r3, r3, #26
 8004a72:	f003 031f 	and.w	r3, r3, #31
 8004a76:	2201      	movs	r2, #1
 8004a78:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7c:	e016      	b.n	8004aac <HAL_ADC_ConfigChannel+0x90>
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a86:	fa93 f3a3 	rbit	r3, r3
 8004a8a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004a8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a8e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004a90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d101      	bne.n	8004a9a <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8004a96:	2320      	movs	r3, #32
 8004a98:	e003      	b.n	8004aa2 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8004a9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a9c:	fab3 f383 	clz	r3, r3
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	f003 031f 	and.w	r3, r3, #31
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	6812      	ldr	r2, [r2, #0]
 8004ab0:	69d1      	ldr	r1, [r2, #28]
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	6812      	ldr	r2, [r2, #0]
 8004ab6:	430b      	orrs	r3, r1
 8004ab8:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6818      	ldr	r0, [r3, #0]
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	6859      	ldr	r1, [r3, #4]
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	f7ff f8eb 	bl	8003ca2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f7ff fa41 	bl	8003f58 <LL_ADC_REG_IsConversionOngoing>
 8004ad6:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4618      	mov	r0, r3
 8004ade:	f7ff fa4e 	bl	8003f7e <LL_ADC_INJ_IsConversionOngoing>
 8004ae2:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004ae4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	f040 80b3 	bne.w	8004c52 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004aec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	f040 80af 	bne.w	8004c52 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6818      	ldr	r0, [r3, #0]
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	6819      	ldr	r1, [r3, #0]
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	461a      	mov	r2, r3
 8004b02:	f7ff f90d 	bl	8003d20 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004b06:	4b6a      	ldr	r3, [pc, #424]	; (8004cb0 <HAL_ADC_ConfigChannel+0x294>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004b0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b12:	d10b      	bne.n	8004b2c <HAL_ADC_ConfigChannel+0x110>
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	695a      	ldr	r2, [r3, #20]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	089b      	lsrs	r3, r3, #2
 8004b20:	f003 0307 	and.w	r3, r3, #7
 8004b24:	005b      	lsls	r3, r3, #1
 8004b26:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2a:	e01d      	b.n	8004b68 <HAL_ADC_ConfigChannel+0x14c>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	f003 0310 	and.w	r3, r3, #16
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d10b      	bne.n	8004b52 <HAL_ADC_ConfigChannel+0x136>
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	695a      	ldr	r2, [r3, #20]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	089b      	lsrs	r3, r3, #2
 8004b46:	f003 0307 	and.w	r3, r3, #7
 8004b4a:	005b      	lsls	r3, r3, #1
 8004b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b50:	e00a      	b.n	8004b68 <HAL_ADC_ConfigChannel+0x14c>
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	695a      	ldr	r2, [r3, #20]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	089b      	lsrs	r3, r3, #2
 8004b5e:	f003 0304 	and.w	r3, r3, #4
 8004b62:	005b      	lsls	r3, r3, #1
 8004b64:	fa02 f303 	lsl.w	r3, r2, r3
 8004b68:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	2b04      	cmp	r3, #4
 8004b70:	d027      	beq.n	8004bc2 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6818      	ldr	r0, [r3, #0]
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	6919      	ldr	r1, [r3, #16]
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b80:	f7ff f828 	bl	8003bd4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6818      	ldr	r0, [r3, #0]
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	6919      	ldr	r1, [r3, #16]
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	7e5b      	ldrb	r3, [r3, #25]
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d102      	bne.n	8004b9a <HAL_ADC_ConfigChannel+0x17e>
 8004b94:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004b98:	e000      	b.n	8004b9c <HAL_ADC_ConfigChannel+0x180>
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	f7ff f852 	bl	8003c46 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6818      	ldr	r0, [r3, #0]
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	6919      	ldr	r1, [r3, #16]
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	7e1b      	ldrb	r3, [r3, #24]
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d102      	bne.n	8004bb8 <HAL_ADC_ConfigChannel+0x19c>
 8004bb2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004bb6:	e000      	b.n	8004bba <HAL_ADC_ConfigChannel+0x19e>
 8004bb8:	2300      	movs	r3, #0
 8004bba:	461a      	mov	r2, r3
 8004bbc:	f7ff f82a 	bl	8003c14 <LL_ADC_SetDataRightShift>
 8004bc0:	e047      	b.n	8004c52 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bc8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	069b      	lsls	r3, r3, #26
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d107      	bne.n	8004be6 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004be4:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	069b      	lsls	r3, r3, #26
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d107      	bne.n	8004c0a <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004c08:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c10:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	069b      	lsls	r3, r3, #26
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d107      	bne.n	8004c2e <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004c2c:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c34:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	069b      	lsls	r3, r3, #26
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d107      	bne.n	8004c52 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004c50:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4618      	mov	r0, r3
 8004c58:	f7ff f944 	bl	8003ee4 <LL_ADC_IsEnabled>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	f040 820d 	bne.w	800507e <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6818      	ldr	r0, [r3, #0]
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	6819      	ldr	r1, [r3, #0]
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	461a      	mov	r2, r3
 8004c72:	f7ff f881 	bl	8003d78 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	4a0c      	ldr	r2, [pc, #48]	; (8004cac <HAL_ADC_ConfigChannel+0x290>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	f040 8133 	bne.w	8004ee8 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d110      	bne.n	8004cb4 <HAL_ADC_ConfigChannel+0x298>
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	0e9b      	lsrs	r3, r3, #26
 8004c98:	3301      	adds	r3, #1
 8004c9a:	f003 031f 	and.w	r3, r3, #31
 8004c9e:	2b09      	cmp	r3, #9
 8004ca0:	bf94      	ite	ls
 8004ca2:	2301      	movls	r3, #1
 8004ca4:	2300      	movhi	r3, #0
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	e01e      	b.n	8004ce8 <HAL_ADC_ConfigChannel+0x2cc>
 8004caa:	bf00      	nop
 8004cac:	47ff0000 	.word	0x47ff0000
 8004cb0:	5c001000 	.word	0x5c001000
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cbc:	fa93 f3a3 	rbit	r3, r3
 8004cc0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004cc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cc4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004cc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d101      	bne.n	8004cd0 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8004ccc:	2320      	movs	r3, #32
 8004cce:	e003      	b.n	8004cd8 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8004cd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cd2:	fab3 f383 	clz	r3, r3
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	3301      	adds	r3, #1
 8004cda:	f003 031f 	and.w	r3, r3, #31
 8004cde:	2b09      	cmp	r3, #9
 8004ce0:	bf94      	ite	ls
 8004ce2:	2301      	movls	r3, #1
 8004ce4:	2300      	movhi	r3, #0
 8004ce6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d079      	beq.n	8004de0 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d107      	bne.n	8004d08 <HAL_ADC_ConfigChannel+0x2ec>
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	0e9b      	lsrs	r3, r3, #26
 8004cfe:	3301      	adds	r3, #1
 8004d00:	069b      	lsls	r3, r3, #26
 8004d02:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d06:	e015      	b.n	8004d34 <HAL_ADC_ConfigChannel+0x318>
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d10:	fa93 f3a3 	rbit	r3, r3
 8004d14:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004d16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d18:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004d1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d101      	bne.n	8004d24 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8004d20:	2320      	movs	r3, #32
 8004d22:	e003      	b.n	8004d2c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8004d24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d26:	fab3 f383 	clz	r3, r3
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	069b      	lsls	r3, r3, #26
 8004d30:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d109      	bne.n	8004d54 <HAL_ADC_ConfigChannel+0x338>
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	0e9b      	lsrs	r3, r3, #26
 8004d46:	3301      	adds	r3, #1
 8004d48:	f003 031f 	and.w	r3, r3, #31
 8004d4c:	2101      	movs	r1, #1
 8004d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d52:	e017      	b.n	8004d84 <HAL_ADC_ConfigChannel+0x368>
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d5c:	fa93 f3a3 	rbit	r3, r3
 8004d60:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004d62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d64:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004d66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d101      	bne.n	8004d70 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8004d6c:	2320      	movs	r3, #32
 8004d6e:	e003      	b.n	8004d78 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8004d70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d72:	fab3 f383 	clz	r3, r3
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	3301      	adds	r3, #1
 8004d7a:	f003 031f 	and.w	r3, r3, #31
 8004d7e:	2101      	movs	r1, #1
 8004d80:	fa01 f303 	lsl.w	r3, r1, r3
 8004d84:	ea42 0103 	orr.w	r1, r2, r3
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d10a      	bne.n	8004daa <HAL_ADC_ConfigChannel+0x38e>
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	0e9b      	lsrs	r3, r3, #26
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	f003 021f 	and.w	r2, r3, #31
 8004da0:	4613      	mov	r3, r2
 8004da2:	005b      	lsls	r3, r3, #1
 8004da4:	4413      	add	r3, r2
 8004da6:	051b      	lsls	r3, r3, #20
 8004da8:	e018      	b.n	8004ddc <HAL_ADC_ConfigChannel+0x3c0>
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004db2:	fa93 f3a3 	rbit	r3, r3
 8004db6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dba:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d101      	bne.n	8004dc6 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8004dc2:	2320      	movs	r3, #32
 8004dc4:	e003      	b.n	8004dce <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8004dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc8:	fab3 f383 	clz	r3, r3
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	3301      	adds	r3, #1
 8004dd0:	f003 021f 	and.w	r2, r3, #31
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	005b      	lsls	r3, r3, #1
 8004dd8:	4413      	add	r3, r2
 8004dda:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ddc:	430b      	orrs	r3, r1
 8004dde:	e07e      	b.n	8004ede <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d107      	bne.n	8004dfc <HAL_ADC_ConfigChannel+0x3e0>
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	0e9b      	lsrs	r3, r3, #26
 8004df2:	3301      	adds	r3, #1
 8004df4:	069b      	lsls	r3, r3, #26
 8004df6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004dfa:	e015      	b.n	8004e28 <HAL_ADC_ConfigChannel+0x40c>
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e04:	fa93 f3a3 	rbit	r3, r3
 8004e08:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d101      	bne.n	8004e18 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8004e14:	2320      	movs	r3, #32
 8004e16:	e003      	b.n	8004e20 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8004e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e1a:	fab3 f383 	clz	r3, r3
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	3301      	adds	r3, #1
 8004e22:	069b      	lsls	r3, r3, #26
 8004e24:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d109      	bne.n	8004e48 <HAL_ADC_ConfigChannel+0x42c>
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	0e9b      	lsrs	r3, r3, #26
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	f003 031f 	and.w	r3, r3, #31
 8004e40:	2101      	movs	r1, #1
 8004e42:	fa01 f303 	lsl.w	r3, r1, r3
 8004e46:	e017      	b.n	8004e78 <HAL_ADC_ConfigChannel+0x45c>
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	fa93 f3a3 	rbit	r3, r3
 8004e54:	61bb      	str	r3, [r7, #24]
  return result;
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004e5a:	6a3b      	ldr	r3, [r7, #32]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d101      	bne.n	8004e64 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8004e60:	2320      	movs	r3, #32
 8004e62:	e003      	b.n	8004e6c <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8004e64:	6a3b      	ldr	r3, [r7, #32]
 8004e66:	fab3 f383 	clz	r3, r3
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	f003 031f 	and.w	r3, r3, #31
 8004e72:	2101      	movs	r1, #1
 8004e74:	fa01 f303 	lsl.w	r3, r1, r3
 8004e78:	ea42 0103 	orr.w	r1, r2, r3
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d10d      	bne.n	8004ea4 <HAL_ADC_ConfigChannel+0x488>
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	0e9b      	lsrs	r3, r3, #26
 8004e8e:	3301      	adds	r3, #1
 8004e90:	f003 021f 	and.w	r2, r3, #31
 8004e94:	4613      	mov	r3, r2
 8004e96:	005b      	lsls	r3, r3, #1
 8004e98:	4413      	add	r3, r2
 8004e9a:	3b1e      	subs	r3, #30
 8004e9c:	051b      	lsls	r3, r3, #20
 8004e9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004ea2:	e01b      	b.n	8004edc <HAL_ADC_ConfigChannel+0x4c0>
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	fa93 f3a3 	rbit	r3, r3
 8004eb0:	60fb      	str	r3, [r7, #12]
  return result;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d101      	bne.n	8004ec0 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8004ebc:	2320      	movs	r3, #32
 8004ebe:	e003      	b.n	8004ec8 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	fab3 f383 	clz	r3, r3
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	3301      	adds	r3, #1
 8004eca:	f003 021f 	and.w	r2, r3, #31
 8004ece:	4613      	mov	r3, r2
 8004ed0:	005b      	lsls	r3, r3, #1
 8004ed2:	4413      	add	r3, r2
 8004ed4:	3b1e      	subs	r3, #30
 8004ed6:	051b      	lsls	r3, r3, #20
 8004ed8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004edc:	430b      	orrs	r3, r1
 8004ede:	683a      	ldr	r2, [r7, #0]
 8004ee0:	6892      	ldr	r2, [r2, #8]
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	f7fe ff1c 	bl	8003d20 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	f280 80c6 	bge.w	800507e <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a67      	ldr	r2, [pc, #412]	; (8005094 <HAL_ADC_ConfigChannel+0x678>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d004      	beq.n	8004f06 <HAL_ADC_ConfigChannel+0x4ea>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a65      	ldr	r2, [pc, #404]	; (8005098 <HAL_ADC_ConfigChannel+0x67c>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d101      	bne.n	8004f0a <HAL_ADC_ConfigChannel+0x4ee>
 8004f06:	4b65      	ldr	r3, [pc, #404]	; (800509c <HAL_ADC_ConfigChannel+0x680>)
 8004f08:	e000      	b.n	8004f0c <HAL_ADC_ConfigChannel+0x4f0>
 8004f0a:	4b65      	ldr	r3, [pc, #404]	; (80050a0 <HAL_ADC_ConfigChannel+0x684>)
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f7fe fe53 	bl	8003bb8 <LL_ADC_GetCommonPathInternalCh>
 8004f12:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a5e      	ldr	r2, [pc, #376]	; (8005094 <HAL_ADC_ConfigChannel+0x678>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d004      	beq.n	8004f28 <HAL_ADC_ConfigChannel+0x50c>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a5d      	ldr	r2, [pc, #372]	; (8005098 <HAL_ADC_ConfigChannel+0x67c>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d10e      	bne.n	8004f46 <HAL_ADC_ConfigChannel+0x52a>
 8004f28:	485a      	ldr	r0, [pc, #360]	; (8005094 <HAL_ADC_ConfigChannel+0x678>)
 8004f2a:	f7fe ffdb 	bl	8003ee4 <LL_ADC_IsEnabled>
 8004f2e:	4604      	mov	r4, r0
 8004f30:	4859      	ldr	r0, [pc, #356]	; (8005098 <HAL_ADC_ConfigChannel+0x67c>)
 8004f32:	f7fe ffd7 	bl	8003ee4 <LL_ADC_IsEnabled>
 8004f36:	4603      	mov	r3, r0
 8004f38:	4323      	orrs	r3, r4
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	bf0c      	ite	eq
 8004f3e:	2301      	moveq	r3, #1
 8004f40:	2300      	movne	r3, #0
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	e008      	b.n	8004f58 <HAL_ADC_ConfigChannel+0x53c>
 8004f46:	4857      	ldr	r0, [pc, #348]	; (80050a4 <HAL_ADC_ConfigChannel+0x688>)
 8004f48:	f7fe ffcc 	bl	8003ee4 <LL_ADC_IsEnabled>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	bf0c      	ite	eq
 8004f52:	2301      	moveq	r3, #1
 8004f54:	2300      	movne	r3, #0
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d07d      	beq.n	8005058 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a51      	ldr	r2, [pc, #324]	; (80050a8 <HAL_ADC_ConfigChannel+0x68c>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d130      	bne.n	8004fc8 <HAL_ADC_ConfigChannel+0x5ac>
 8004f66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d12b      	bne.n	8004fc8 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a4b      	ldr	r2, [pc, #300]	; (80050a4 <HAL_ADC_ConfigChannel+0x688>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	f040 8081 	bne.w	800507e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a44      	ldr	r2, [pc, #272]	; (8005094 <HAL_ADC_ConfigChannel+0x678>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d004      	beq.n	8004f90 <HAL_ADC_ConfigChannel+0x574>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a43      	ldr	r2, [pc, #268]	; (8005098 <HAL_ADC_ConfigChannel+0x67c>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d101      	bne.n	8004f94 <HAL_ADC_ConfigChannel+0x578>
 8004f90:	4a42      	ldr	r2, [pc, #264]	; (800509c <HAL_ADC_ConfigChannel+0x680>)
 8004f92:	e000      	b.n	8004f96 <HAL_ADC_ConfigChannel+0x57a>
 8004f94:	4a42      	ldr	r2, [pc, #264]	; (80050a0 <HAL_ADC_ConfigChannel+0x684>)
 8004f96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f98:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	4610      	mov	r0, r2
 8004fa0:	f7fe fdf7 	bl	8003b92 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004fa4:	4b41      	ldr	r3, [pc, #260]	; (80050ac <HAL_ADC_ConfigChannel+0x690>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	099b      	lsrs	r3, r3, #6
 8004faa:	4a41      	ldr	r2, [pc, #260]	; (80050b0 <HAL_ADC_ConfigChannel+0x694>)
 8004fac:	fba2 2303 	umull	r2, r3, r2, r3
 8004fb0:	099b      	lsrs	r3, r3, #6
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	005b      	lsls	r3, r3, #1
 8004fb6:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004fb8:	e002      	b.n	8004fc0 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1f9      	bne.n	8004fba <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004fc6:	e05a      	b.n	800507e <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a39      	ldr	r2, [pc, #228]	; (80050b4 <HAL_ADC_ConfigChannel+0x698>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d11e      	bne.n	8005010 <HAL_ADC_ConfigChannel+0x5f4>
 8004fd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d119      	bne.n	8005010 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a30      	ldr	r2, [pc, #192]	; (80050a4 <HAL_ADC_ConfigChannel+0x688>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d14b      	bne.n	800507e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a2a      	ldr	r2, [pc, #168]	; (8005094 <HAL_ADC_ConfigChannel+0x678>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d004      	beq.n	8004ffa <HAL_ADC_ConfigChannel+0x5de>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a28      	ldr	r2, [pc, #160]	; (8005098 <HAL_ADC_ConfigChannel+0x67c>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d101      	bne.n	8004ffe <HAL_ADC_ConfigChannel+0x5e2>
 8004ffa:	4a28      	ldr	r2, [pc, #160]	; (800509c <HAL_ADC_ConfigChannel+0x680>)
 8004ffc:	e000      	b.n	8005000 <HAL_ADC_ConfigChannel+0x5e4>
 8004ffe:	4a28      	ldr	r2, [pc, #160]	; (80050a0 <HAL_ADC_ConfigChannel+0x684>)
 8005000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005002:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005006:	4619      	mov	r1, r3
 8005008:	4610      	mov	r0, r2
 800500a:	f7fe fdc2 	bl	8003b92 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800500e:	e036      	b.n	800507e <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a28      	ldr	r2, [pc, #160]	; (80050b8 <HAL_ADC_ConfigChannel+0x69c>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d131      	bne.n	800507e <HAL_ADC_ConfigChannel+0x662>
 800501a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800501c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d12c      	bne.n	800507e <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a1e      	ldr	r2, [pc, #120]	; (80050a4 <HAL_ADC_ConfigChannel+0x688>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d127      	bne.n	800507e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a18      	ldr	r2, [pc, #96]	; (8005094 <HAL_ADC_ConfigChannel+0x678>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d004      	beq.n	8005042 <HAL_ADC_ConfigChannel+0x626>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a16      	ldr	r2, [pc, #88]	; (8005098 <HAL_ADC_ConfigChannel+0x67c>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d101      	bne.n	8005046 <HAL_ADC_ConfigChannel+0x62a>
 8005042:	4a16      	ldr	r2, [pc, #88]	; (800509c <HAL_ADC_ConfigChannel+0x680>)
 8005044:	e000      	b.n	8005048 <HAL_ADC_ConfigChannel+0x62c>
 8005046:	4a16      	ldr	r2, [pc, #88]	; (80050a0 <HAL_ADC_ConfigChannel+0x684>)
 8005048:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800504a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800504e:	4619      	mov	r1, r3
 8005050:	4610      	mov	r0, r2
 8005052:	f7fe fd9e 	bl	8003b92 <LL_ADC_SetCommonPathInternalCh>
 8005056:	e012      	b.n	800507e <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800505c:	f043 0220 	orr.w	r2, r3, #32
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800506a:	e008      	b.n	800507e <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005070:	f043 0220 	orr.w	r2, r3, #32
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005086:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800508a:	4618      	mov	r0, r3
 800508c:	3784      	adds	r7, #132	; 0x84
 800508e:	46bd      	mov	sp, r7
 8005090:	bd90      	pop	{r4, r7, pc}
 8005092:	bf00      	nop
 8005094:	40022000 	.word	0x40022000
 8005098:	40022100 	.word	0x40022100
 800509c:	40022300 	.word	0x40022300
 80050a0:	58026300 	.word	0x58026300
 80050a4:	58026000 	.word	0x58026000
 80050a8:	cb840000 	.word	0xcb840000
 80050ac:	20000010 	.word	0x20000010
 80050b0:	053e2d63 	.word	0x053e2d63
 80050b4:	c7520000 	.word	0xc7520000
 80050b8:	cfb80000 	.word	0xcfb80000

080050bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4618      	mov	r0, r3
 80050ca:	f7fe ff0b 	bl	8003ee4 <LL_ADC_IsEnabled>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d16e      	bne.n	80051b2 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	689a      	ldr	r2, [r3, #8]
 80050da:	4b38      	ldr	r3, [pc, #224]	; (80051bc <ADC_Enable+0x100>)
 80050dc:	4013      	ands	r3, r2
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00d      	beq.n	80050fe <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050e6:	f043 0210 	orr.w	r2, r3, #16
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050f2:	f043 0201 	orr.w	r2, r3, #1
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e05a      	b.n	80051b4 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4618      	mov	r0, r3
 8005104:	f7fe fec6 	bl	8003e94 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005108:	f7fe fcca 	bl	8003aa0 <HAL_GetTick>
 800510c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a2b      	ldr	r2, [pc, #172]	; (80051c0 <ADC_Enable+0x104>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d004      	beq.n	8005122 <ADC_Enable+0x66>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a29      	ldr	r2, [pc, #164]	; (80051c4 <ADC_Enable+0x108>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d101      	bne.n	8005126 <ADC_Enable+0x6a>
 8005122:	4b29      	ldr	r3, [pc, #164]	; (80051c8 <ADC_Enable+0x10c>)
 8005124:	e000      	b.n	8005128 <ADC_Enable+0x6c>
 8005126:	4b29      	ldr	r3, [pc, #164]	; (80051cc <ADC_Enable+0x110>)
 8005128:	4618      	mov	r0, r3
 800512a:	f7fe fe49 	bl	8003dc0 <LL_ADC_GetMultimode>
 800512e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a23      	ldr	r2, [pc, #140]	; (80051c4 <ADC_Enable+0x108>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d002      	beq.n	8005140 <ADC_Enable+0x84>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	e000      	b.n	8005142 <ADC_Enable+0x86>
 8005140:	4b1f      	ldr	r3, [pc, #124]	; (80051c0 <ADC_Enable+0x104>)
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	6812      	ldr	r2, [r2, #0]
 8005146:	4293      	cmp	r3, r2
 8005148:	d02c      	beq.n	80051a4 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d130      	bne.n	80051b2 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005150:	e028      	b.n	80051a4 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4618      	mov	r0, r3
 8005158:	f7fe fec4 	bl	8003ee4 <LL_ADC_IsEnabled>
 800515c:	4603      	mov	r3, r0
 800515e:	2b00      	cmp	r3, #0
 8005160:	d104      	bne.n	800516c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4618      	mov	r0, r3
 8005168:	f7fe fe94 	bl	8003e94 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800516c:	f7fe fc98 	bl	8003aa0 <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	2b02      	cmp	r3, #2
 8005178:	d914      	bls.n	80051a4 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0301 	and.w	r3, r3, #1
 8005184:	2b01      	cmp	r3, #1
 8005186:	d00d      	beq.n	80051a4 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800518c:	f043 0210 	orr.w	r2, r3, #16
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005198:	f043 0201 	orr.w	r2, r3, #1
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	e007      	b.n	80051b4 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0301 	and.w	r3, r3, #1
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d1cf      	bne.n	8005152 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3710      	adds	r7, #16
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	8000003f 	.word	0x8000003f
 80051c0:	40022000 	.word	0x40022000
 80051c4:	40022100 	.word	0x40022100
 80051c8:	40022300 	.word	0x40022300
 80051cc:	58026300 	.word	0x58026300

080051d0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4618      	mov	r0, r3
 80051de:	f7fe fe94 	bl	8003f0a <LL_ADC_IsDisableOngoing>
 80051e2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4618      	mov	r0, r3
 80051ea:	f7fe fe7b 	bl	8003ee4 <LL_ADC_IsEnabled>
 80051ee:	4603      	mov	r3, r0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d047      	beq.n	8005284 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d144      	bne.n	8005284 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	f003 030d 	and.w	r3, r3, #13
 8005204:	2b01      	cmp	r3, #1
 8005206:	d10c      	bne.n	8005222 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4618      	mov	r0, r3
 800520e:	f7fe fe55 	bl	8003ebc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2203      	movs	r2, #3
 8005218:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800521a:	f7fe fc41 	bl	8003aa0 <HAL_GetTick>
 800521e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005220:	e029      	b.n	8005276 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005226:	f043 0210 	orr.w	r2, r3, #16
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005232:	f043 0201 	orr.w	r2, r3, #1
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e023      	b.n	8005286 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800523e:	f7fe fc2f 	bl	8003aa0 <HAL_GetTick>
 8005242:	4602      	mov	r2, r0
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	2b02      	cmp	r3, #2
 800524a:	d914      	bls.n	8005276 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	f003 0301 	and.w	r3, r3, #1
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00d      	beq.n	8005276 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800525e:	f043 0210 	orr.w	r2, r3, #16
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800526a:	f043 0201 	orr.w	r2, r3, #1
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e007      	b.n	8005286 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	f003 0301 	and.w	r3, r3, #1
 8005280:	2b00      	cmp	r3, #0
 8005282:	d1dc      	bne.n	800523e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	3710      	adds	r7, #16
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
	...

08005290 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a7a      	ldr	r2, [pc, #488]	; (8005488 <ADC_ConfigureBoostMode+0x1f8>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d004      	beq.n	80052ac <ADC_ConfigureBoostMode+0x1c>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a79      	ldr	r2, [pc, #484]	; (800548c <ADC_ConfigureBoostMode+0x1fc>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d109      	bne.n	80052c0 <ADC_ConfigureBoostMode+0x30>
 80052ac:	4b78      	ldr	r3, [pc, #480]	; (8005490 <ADC_ConfigureBoostMode+0x200>)
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	bf14      	ite	ne
 80052b8:	2301      	movne	r3, #1
 80052ba:	2300      	moveq	r3, #0
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	e008      	b.n	80052d2 <ADC_ConfigureBoostMode+0x42>
 80052c0:	4b74      	ldr	r3, [pc, #464]	; (8005494 <ADC_ConfigureBoostMode+0x204>)
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	bf14      	ite	ne
 80052cc:	2301      	movne	r3, #1
 80052ce:	2300      	moveq	r3, #0
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d01c      	beq.n	8005310 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80052d6:	f005 f9d9 	bl	800a68c <HAL_RCC_GetHCLKFreq>
 80052da:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80052e4:	d010      	beq.n	8005308 <ADC_ConfigureBoostMode+0x78>
 80052e6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80052ea:	d873      	bhi.n	80053d4 <ADC_ConfigureBoostMode+0x144>
 80052ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052f0:	d002      	beq.n	80052f8 <ADC_ConfigureBoostMode+0x68>
 80052f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052f6:	d16d      	bne.n	80053d4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	0c1b      	lsrs	r3, r3, #16
 80052fe:	68fa      	ldr	r2, [r7, #12]
 8005300:	fbb2 f3f3 	udiv	r3, r2, r3
 8005304:	60fb      	str	r3, [r7, #12]
        break;
 8005306:	e068      	b.n	80053da <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	089b      	lsrs	r3, r3, #2
 800530c:	60fb      	str	r3, [r7, #12]
        break;
 800530e:	e064      	b.n	80053da <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005310:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005314:	f04f 0100 	mov.w	r1, #0
 8005318:	f006 fc3a 	bl	800bb90 <HAL_RCCEx_GetPeriphCLKFreq>
 800531c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005326:	d051      	beq.n	80053cc <ADC_ConfigureBoostMode+0x13c>
 8005328:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800532c:	d854      	bhi.n	80053d8 <ADC_ConfigureBoostMode+0x148>
 800532e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005332:	d047      	beq.n	80053c4 <ADC_ConfigureBoostMode+0x134>
 8005334:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005338:	d84e      	bhi.n	80053d8 <ADC_ConfigureBoostMode+0x148>
 800533a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800533e:	d03d      	beq.n	80053bc <ADC_ConfigureBoostMode+0x12c>
 8005340:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005344:	d848      	bhi.n	80053d8 <ADC_ConfigureBoostMode+0x148>
 8005346:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800534a:	d033      	beq.n	80053b4 <ADC_ConfigureBoostMode+0x124>
 800534c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005350:	d842      	bhi.n	80053d8 <ADC_ConfigureBoostMode+0x148>
 8005352:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005356:	d029      	beq.n	80053ac <ADC_ConfigureBoostMode+0x11c>
 8005358:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800535c:	d83c      	bhi.n	80053d8 <ADC_ConfigureBoostMode+0x148>
 800535e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005362:	d01a      	beq.n	800539a <ADC_ConfigureBoostMode+0x10a>
 8005364:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005368:	d836      	bhi.n	80053d8 <ADC_ConfigureBoostMode+0x148>
 800536a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800536e:	d014      	beq.n	800539a <ADC_ConfigureBoostMode+0x10a>
 8005370:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005374:	d830      	bhi.n	80053d8 <ADC_ConfigureBoostMode+0x148>
 8005376:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800537a:	d00e      	beq.n	800539a <ADC_ConfigureBoostMode+0x10a>
 800537c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005380:	d82a      	bhi.n	80053d8 <ADC_ConfigureBoostMode+0x148>
 8005382:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005386:	d008      	beq.n	800539a <ADC_ConfigureBoostMode+0x10a>
 8005388:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800538c:	d824      	bhi.n	80053d8 <ADC_ConfigureBoostMode+0x148>
 800538e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005392:	d002      	beq.n	800539a <ADC_ConfigureBoostMode+0x10a>
 8005394:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005398:	d11e      	bne.n	80053d8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	0c9b      	lsrs	r3, r3, #18
 80053a0:	005b      	lsls	r3, r3, #1
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053a8:	60fb      	str	r3, [r7, #12]
        break;
 80053aa:	e016      	b.n	80053da <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	091b      	lsrs	r3, r3, #4
 80053b0:	60fb      	str	r3, [r7, #12]
        break;
 80053b2:	e012      	b.n	80053da <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	095b      	lsrs	r3, r3, #5
 80053b8:	60fb      	str	r3, [r7, #12]
        break;
 80053ba:	e00e      	b.n	80053da <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	099b      	lsrs	r3, r3, #6
 80053c0:	60fb      	str	r3, [r7, #12]
        break;
 80053c2:	e00a      	b.n	80053da <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	09db      	lsrs	r3, r3, #7
 80053c8:	60fb      	str	r3, [r7, #12]
        break;
 80053ca:	e006      	b.n	80053da <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	0a1b      	lsrs	r3, r3, #8
 80053d0:	60fb      	str	r3, [r7, #12]
        break;
 80053d2:	e002      	b.n	80053da <ADC_ConfigureBoostMode+0x14a>
        break;
 80053d4:	bf00      	nop
 80053d6:	e000      	b.n	80053da <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80053d8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80053da:	f7fe fb91 	bl	8003b00 <HAL_GetREVID>
 80053de:	4603      	mov	r3, r0
 80053e0:	f241 0203 	movw	r2, #4099	; 0x1003
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d815      	bhi.n	8005414 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	4a2b      	ldr	r2, [pc, #172]	; (8005498 <ADC_ConfigureBoostMode+0x208>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d908      	bls.n	8005402 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	689a      	ldr	r2, [r3, #8]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053fe:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005400:	e03e      	b.n	8005480 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	689a      	ldr	r2, [r3, #8]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005410:	609a      	str	r2, [r3, #8]
}
 8005412:	e035      	b.n	8005480 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	085b      	lsrs	r3, r3, #1
 8005418:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	4a1f      	ldr	r2, [pc, #124]	; (800549c <ADC_ConfigureBoostMode+0x20c>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d808      	bhi.n	8005434 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	689a      	ldr	r2, [r3, #8]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005430:	609a      	str	r2, [r3, #8]
}
 8005432:	e025      	b.n	8005480 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	4a1a      	ldr	r2, [pc, #104]	; (80054a0 <ADC_ConfigureBoostMode+0x210>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d80a      	bhi.n	8005452 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800544e:	609a      	str	r2, [r3, #8]
}
 8005450:	e016      	b.n	8005480 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	4a13      	ldr	r2, [pc, #76]	; (80054a4 <ADC_ConfigureBoostMode+0x214>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d80a      	bhi.n	8005470 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800546c:	609a      	str	r2, [r3, #8]
}
 800546e:	e007      	b.n	8005480 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	689a      	ldr	r2, [r3, #8]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800547e:	609a      	str	r2, [r3, #8]
}
 8005480:	bf00      	nop
 8005482:	3710      	adds	r7, #16
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}
 8005488:	40022000 	.word	0x40022000
 800548c:	40022100 	.word	0x40022100
 8005490:	40022300 	.word	0x40022300
 8005494:	58026300 	.word	0x58026300
 8005498:	01312d00 	.word	0x01312d00
 800549c:	005f5e10 	.word	0x005f5e10
 80054a0:	00bebc20 	.word	0x00bebc20
 80054a4:	017d7840 	.word	0x017d7840

080054a8 <LL_ADC_StartCalibration>:
{
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	689a      	ldr	r2, [r3, #8]
 80054b8:	4b09      	ldr	r3, [pc, #36]	; (80054e0 <LL_ADC_StartCalibration+0x38>)
 80054ba:	4013      	ands	r3, r2
 80054bc:	68ba      	ldr	r2, [r7, #8]
 80054be:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80054c8:	430a      	orrs	r2, r1
 80054ca:	4313      	orrs	r3, r2
 80054cc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	609a      	str	r2, [r3, #8]
}
 80054d4:	bf00      	nop
 80054d6:	3714      	adds	r7, #20
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr
 80054e0:	3ffeffc0 	.word	0x3ffeffc0

080054e4 <LL_ADC_IsCalibrationOnGoing>:
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054f8:	d101      	bne.n	80054fe <LL_ADC_IsCalibrationOnGoing+0x1a>
 80054fa:	2301      	movs	r3, #1
 80054fc:	e000      	b.n	8005500 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b086      	sub	sp, #24
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005518:	2300      	movs	r3, #0
 800551a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005522:	2b01      	cmp	r3, #1
 8005524:	d101      	bne.n	800552a <HAL_ADCEx_Calibration_Start+0x1e>
 8005526:	2302      	movs	r3, #2
 8005528:	e04c      	b.n	80055c4 <HAL_ADCEx_Calibration_Start+0xb8>
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2201      	movs	r2, #1
 800552e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005532:	68f8      	ldr	r0, [r7, #12]
 8005534:	f7ff fe4c 	bl	80051d0 <ADC_Disable>
 8005538:	4603      	mov	r3, r0
 800553a:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800553c:	7dfb      	ldrb	r3, [r7, #23]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d135      	bne.n	80055ae <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005546:	4b21      	ldr	r3, [pc, #132]	; (80055cc <HAL_ADCEx_Calibration_Start+0xc0>)
 8005548:	4013      	ands	r3, r2
 800554a:	f043 0202 	orr.w	r2, r3, #2
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	68b9      	ldr	r1, [r7, #8]
 800555a:	4618      	mov	r0, r3
 800555c:	f7ff ffa4 	bl	80054a8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005560:	e014      	b.n	800558c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	3301      	adds	r3, #1
 8005566:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	4a19      	ldr	r2, [pc, #100]	; (80055d0 <HAL_ADCEx_Calibration_Start+0xc4>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d30d      	bcc.n	800558c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005574:	f023 0312 	bic.w	r3, r3, #18
 8005578:	f043 0210 	orr.w	r2, r3, #16
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2200      	movs	r2, #0
 8005584:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e01b      	b.n	80055c4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4618      	mov	r0, r3
 8005592:	f7ff ffa7 	bl	80054e4 <LL_ADC_IsCalibrationOnGoing>
 8005596:	4603      	mov	r3, r0
 8005598:	2b00      	cmp	r3, #0
 800559a:	d1e2      	bne.n	8005562 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a0:	f023 0303 	bic.w	r3, r3, #3
 80055a4:	f043 0201 	orr.w	r2, r3, #1
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	655a      	str	r2, [r3, #84]	; 0x54
 80055ac:	e005      	b.n	80055ba <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055b2:	f043 0210 	orr.w	r2, r3, #16
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80055c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3718      	adds	r7, #24
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	ffffeefd 	.word	0xffffeefd
 80055d0:	25c3f800 	.word	0x25c3f800

080055d4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80055dc:	bf00      	nop
 80055de:	370c      	adds	r7, #12
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80055f0:	bf00      	nop
 80055f2:	370c      	adds	r7, #12
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005604:	bf00      	nop
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005618:	bf00      	nop
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800562c:	bf00      	nop
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <__NVIC_SetPriorityGrouping>:
{
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f003 0307 	and.w	r3, r3, #7
 8005646:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005648:	4b0b      	ldr	r3, [pc, #44]	; (8005678 <__NVIC_SetPriorityGrouping+0x40>)
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800564e:	68ba      	ldr	r2, [r7, #8]
 8005650:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005654:	4013      	ands	r3, r2
 8005656:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005660:	4b06      	ldr	r3, [pc, #24]	; (800567c <__NVIC_SetPriorityGrouping+0x44>)
 8005662:	4313      	orrs	r3, r2
 8005664:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005666:	4a04      	ldr	r2, [pc, #16]	; (8005678 <__NVIC_SetPriorityGrouping+0x40>)
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	60d3      	str	r3, [r2, #12]
}
 800566c:	bf00      	nop
 800566e:	3714      	adds	r7, #20
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr
 8005678:	e000ed00 	.word	0xe000ed00
 800567c:	05fa0000 	.word	0x05fa0000

08005680 <__NVIC_GetPriorityGrouping>:
{
 8005680:	b480      	push	{r7}
 8005682:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005684:	4b04      	ldr	r3, [pc, #16]	; (8005698 <__NVIC_GetPriorityGrouping+0x18>)
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	0a1b      	lsrs	r3, r3, #8
 800568a:	f003 0307 	and.w	r3, r3, #7
}
 800568e:	4618      	mov	r0, r3
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr
 8005698:	e000ed00 	.word	0xe000ed00

0800569c <__NVIC_EnableIRQ>:
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	4603      	mov	r3, r0
 80056a4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80056a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	db0b      	blt.n	80056c6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80056ae:	88fb      	ldrh	r3, [r7, #6]
 80056b0:	f003 021f 	and.w	r2, r3, #31
 80056b4:	4907      	ldr	r1, [pc, #28]	; (80056d4 <__NVIC_EnableIRQ+0x38>)
 80056b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056ba:	095b      	lsrs	r3, r3, #5
 80056bc:	2001      	movs	r0, #1
 80056be:	fa00 f202 	lsl.w	r2, r0, r2
 80056c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80056c6:	bf00      	nop
 80056c8:	370c      	adds	r7, #12
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	e000e100 	.word	0xe000e100

080056d8 <__NVIC_SetPriority>:
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	4603      	mov	r3, r0
 80056e0:	6039      	str	r1, [r7, #0]
 80056e2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80056e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	db0a      	blt.n	8005702 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	b2da      	uxtb	r2, r3
 80056f0:	490c      	ldr	r1, [pc, #48]	; (8005724 <__NVIC_SetPriority+0x4c>)
 80056f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056f6:	0112      	lsls	r2, r2, #4
 80056f8:	b2d2      	uxtb	r2, r2
 80056fa:	440b      	add	r3, r1
 80056fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005700:	e00a      	b.n	8005718 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	b2da      	uxtb	r2, r3
 8005706:	4908      	ldr	r1, [pc, #32]	; (8005728 <__NVIC_SetPriority+0x50>)
 8005708:	88fb      	ldrh	r3, [r7, #6]
 800570a:	f003 030f 	and.w	r3, r3, #15
 800570e:	3b04      	subs	r3, #4
 8005710:	0112      	lsls	r2, r2, #4
 8005712:	b2d2      	uxtb	r2, r2
 8005714:	440b      	add	r3, r1
 8005716:	761a      	strb	r2, [r3, #24]
}
 8005718:	bf00      	nop
 800571a:	370c      	adds	r7, #12
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr
 8005724:	e000e100 	.word	0xe000e100
 8005728:	e000ed00 	.word	0xe000ed00

0800572c <NVIC_EncodePriority>:
{
 800572c:	b480      	push	{r7}
 800572e:	b089      	sub	sp, #36	; 0x24
 8005730:	af00      	add	r7, sp, #0
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	60b9      	str	r1, [r7, #8]
 8005736:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f003 0307 	and.w	r3, r3, #7
 800573e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	f1c3 0307 	rsb	r3, r3, #7
 8005746:	2b04      	cmp	r3, #4
 8005748:	bf28      	it	cs
 800574a:	2304      	movcs	r3, #4
 800574c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	3304      	adds	r3, #4
 8005752:	2b06      	cmp	r3, #6
 8005754:	d902      	bls.n	800575c <NVIC_EncodePriority+0x30>
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	3b03      	subs	r3, #3
 800575a:	e000      	b.n	800575e <NVIC_EncodePriority+0x32>
 800575c:	2300      	movs	r3, #0
 800575e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005760:	f04f 32ff 	mov.w	r2, #4294967295
 8005764:	69bb      	ldr	r3, [r7, #24]
 8005766:	fa02 f303 	lsl.w	r3, r2, r3
 800576a:	43da      	mvns	r2, r3
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	401a      	ands	r2, r3
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005774:	f04f 31ff 	mov.w	r1, #4294967295
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	fa01 f303 	lsl.w	r3, r1, r3
 800577e:	43d9      	mvns	r1, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005784:	4313      	orrs	r3, r2
}
 8005786:	4618      	mov	r0, r3
 8005788:	3724      	adds	r7, #36	; 0x24
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr
	...

08005794 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	3b01      	subs	r3, #1
 80057a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80057a4:	d301      	bcc.n	80057aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80057a6:	2301      	movs	r3, #1
 80057a8:	e00f      	b.n	80057ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80057aa:	4a0a      	ldr	r2, [pc, #40]	; (80057d4 <SysTick_Config+0x40>)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	3b01      	subs	r3, #1
 80057b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80057b2:	210f      	movs	r1, #15
 80057b4:	f04f 30ff 	mov.w	r0, #4294967295
 80057b8:	f7ff ff8e 	bl	80056d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80057bc:	4b05      	ldr	r3, [pc, #20]	; (80057d4 <SysTick_Config+0x40>)
 80057be:	2200      	movs	r2, #0
 80057c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80057c2:	4b04      	ldr	r3, [pc, #16]	; (80057d4 <SysTick_Config+0x40>)
 80057c4:	2207      	movs	r2, #7
 80057c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3708      	adds	r7, #8
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	e000e010 	.word	0xe000e010

080057d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f7ff ff29 	bl	8005638 <__NVIC_SetPriorityGrouping>
}
 80057e6:	bf00      	nop
 80057e8:	3708      	adds	r7, #8
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}

080057ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80057ee:	b580      	push	{r7, lr}
 80057f0:	b086      	sub	sp, #24
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	4603      	mov	r3, r0
 80057f6:	60b9      	str	r1, [r7, #8]
 80057f8:	607a      	str	r2, [r7, #4]
 80057fa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80057fc:	f7ff ff40 	bl	8005680 <__NVIC_GetPriorityGrouping>
 8005800:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	68b9      	ldr	r1, [r7, #8]
 8005806:	6978      	ldr	r0, [r7, #20]
 8005808:	f7ff ff90 	bl	800572c <NVIC_EncodePriority>
 800580c:	4602      	mov	r2, r0
 800580e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005812:	4611      	mov	r1, r2
 8005814:	4618      	mov	r0, r3
 8005816:	f7ff ff5f 	bl	80056d8 <__NVIC_SetPriority>
}
 800581a:	bf00      	nop
 800581c:	3718      	adds	r7, #24
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}

08005822 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005822:	b580      	push	{r7, lr}
 8005824:	b082      	sub	sp, #8
 8005826:	af00      	add	r7, sp, #0
 8005828:	4603      	mov	r3, r0
 800582a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800582c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005830:	4618      	mov	r0, r3
 8005832:	f7ff ff33 	bl	800569c <__NVIC_EnableIRQ>
}
 8005836:	bf00      	nop
 8005838:	3708      	adds	r7, #8
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}

0800583e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800583e:	b580      	push	{r7, lr}
 8005840:	b082      	sub	sp, #8
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f7ff ffa4 	bl	8005794 <SysTick_Config>
 800584c:	4603      	mov	r3, r0
}
 800584e:	4618      	mov	r0, r3
 8005850:	3708      	adds	r7, #8
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
	...

08005858 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8005858:	b480      	push	{r7}
 800585a:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 800585c:	f3bf 8f5f 	dmb	sy
}
 8005860:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8005862:	4b07      	ldr	r3, [pc, #28]	; (8005880 <HAL_MPU_Disable+0x28>)
 8005864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005866:	4a06      	ldr	r2, [pc, #24]	; (8005880 <HAL_MPU_Disable+0x28>)
 8005868:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800586c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800586e:	4b05      	ldr	r3, [pc, #20]	; (8005884 <HAL_MPU_Disable+0x2c>)
 8005870:	2200      	movs	r2, #0
 8005872:	605a      	str	r2, [r3, #4]
}
 8005874:	bf00      	nop
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr
 800587e:	bf00      	nop
 8005880:	e000ed00 	.word	0xe000ed00
 8005884:	e000ed90 	.word	0xe000ed90

08005888 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8005890:	4a0b      	ldr	r2, [pc, #44]	; (80058c0 <HAL_MPU_Enable+0x38>)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f043 0301 	orr.w	r3, r3, #1
 8005898:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800589a:	4b0a      	ldr	r3, [pc, #40]	; (80058c4 <HAL_MPU_Enable+0x3c>)
 800589c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589e:	4a09      	ldr	r2, [pc, #36]	; (80058c4 <HAL_MPU_Enable+0x3c>)
 80058a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058a4:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80058a6:	f3bf 8f4f 	dsb	sy
}
 80058aa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80058ac:	f3bf 8f6f 	isb	sy
}
 80058b0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80058b2:	bf00      	nop
 80058b4:	370c      	adds	r7, #12
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr
 80058be:	bf00      	nop
 80058c0:	e000ed90 	.word	0xe000ed90
 80058c4:	e000ed00 	.word	0xe000ed00

080058c8 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b083      	sub	sp, #12
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	785a      	ldrb	r2, [r3, #1]
 80058d4:	4b1d      	ldr	r3, [pc, #116]	; (800594c <HAL_MPU_ConfigRegion+0x84>)
 80058d6:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d029      	beq.n	8005934 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80058e0:	4a1a      	ldr	r2, [pc, #104]	; (800594c <HAL_MPU_ConfigRegion+0x84>)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	7b1b      	ldrb	r3, [r3, #12]
 80058ec:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	7adb      	ldrb	r3, [r3, #11]
 80058f2:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80058f4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	7a9b      	ldrb	r3, [r3, #10]
 80058fa:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80058fc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	7b5b      	ldrb	r3, [r3, #13]
 8005902:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005904:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	7b9b      	ldrb	r3, [r3, #14]
 800590a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800590c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	7bdb      	ldrb	r3, [r3, #15]
 8005912:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005914:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	7a5b      	ldrb	r3, [r3, #9]
 800591a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800591c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	7a1b      	ldrb	r3, [r3, #8]
 8005922:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005924:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	7812      	ldrb	r2, [r2, #0]
 800592a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800592c:	4a07      	ldr	r2, [pc, #28]	; (800594c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800592e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005930:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8005932:	e005      	b.n	8005940 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8005934:	4b05      	ldr	r3, [pc, #20]	; (800594c <HAL_MPU_ConfigRegion+0x84>)
 8005936:	2200      	movs	r2, #0
 8005938:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800593a:	4b04      	ldr	r3, [pc, #16]	; (800594c <HAL_MPU_ConfigRegion+0x84>)
 800593c:	2200      	movs	r2, #0
 800593e:	611a      	str	r2, [r3, #16]
}
 8005940:	bf00      	nop
 8005942:	370c      	adds	r7, #12
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr
 800594c:	e000ed90 	.word	0xe000ed90

08005950 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b082      	sub	sp, #8
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d101      	bne.n	8005962 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e014      	b.n	800598c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	791b      	ldrb	r3, [r3, #4]
 8005966:	b2db      	uxtb	r3, r3
 8005968:	2b00      	cmp	r3, #0
 800596a:	d105      	bne.n	8005978 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f7fd fa1e 	bl	8002db4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2202      	movs	r2, #2
 800597c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800598a:	2300      	movs	r3, #0
}
 800598c:	4618      	mov	r0, r3
 800598e:	3708      	adds	r7, #8
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	795b      	ldrb	r3, [r3, #5]
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d101      	bne.n	80059aa <HAL_DAC_Start+0x16>
 80059a6:	2302      	movs	r3, #2
 80059a8:	e040      	b.n	8005a2c <HAL_DAC_Start+0x98>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2201      	movs	r2, #1
 80059ae:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2202      	movs	r2, #2
 80059b4:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	6819      	ldr	r1, [r3, #0]
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	f003 0310 	and.w	r3, r3, #16
 80059c2:	2201      	movs	r2, #1
 80059c4:	409a      	lsls	r2, r3
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	430a      	orrs	r2, r1
 80059cc:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d10f      	bne.n	80059f4 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d11d      	bne.n	8005a1e <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	685a      	ldr	r2, [r3, #4]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f042 0201 	orr.w	r2, r2, #1
 80059f0:	605a      	str	r2, [r3, #4]
 80059f2:	e014      	b.n	8005a1e <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	f003 0310 	and.w	r3, r3, #16
 8005a04:	2102      	movs	r1, #2
 8005a06:	fa01 f303 	lsl.w	r3, r1, r3
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d107      	bne.n	8005a1e <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	685a      	ldr	r2, [r3, #4]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f042 0202 	orr.w	r2, r2, #2
 8005a1c:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2201      	movs	r2, #1
 8005a22:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005a2a:	2300      	movs	r3, #0
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	370c      	adds	r7, #12
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr

08005a38 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b087      	sub	sp, #28
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	60b9      	str	r1, [r7, #8]
 8005a42:	607a      	str	r2, [r7, #4]
 8005a44:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005a46:	2300      	movs	r3, #0
 8005a48:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d105      	bne.n	8005a62 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005a56:	697a      	ldr	r2, [r7, #20]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	3308      	adds	r3, #8
 8005a5e:	617b      	str	r3, [r7, #20]
 8005a60:	e004      	b.n	8005a6c <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005a62:	697a      	ldr	r2, [r7, #20]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4413      	add	r3, r2
 8005a68:	3314      	adds	r3, #20
 8005a6a:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	461a      	mov	r2, r3
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	371c      	adds	r7, #28
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr
	...

08005a84 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b088      	sub	sp, #32
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	60b9      	str	r1, [r7, #8]
 8005a8e:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	795b      	ldrb	r3, [r3, #5]
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d101      	bne.n	8005a9c <HAL_DAC_ConfigChannel+0x18>
 8005a98:	2302      	movs	r3, #2
 8005a9a:	e12a      	b.n	8005cf2 <HAL_DAC_ConfigChannel+0x26e>
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2202      	movs	r2, #2
 8005aa6:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2b04      	cmp	r3, #4
 8005aae:	f040 8081 	bne.w	8005bb4 <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005ab2:	f7fd fff5 	bl	8003aa0 <HAL_GetTick>
 8005ab6:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d140      	bne.n	8005b40 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005abe:	e018      	b.n	8005af2 <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005ac0:	f7fd ffee 	bl	8003aa0 <HAL_GetTick>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	69bb      	ldr	r3, [r7, #24]
 8005ac8:	1ad3      	subs	r3, r2, r3
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d911      	bls.n	8005af2 <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ad4:	4b89      	ldr	r3, [pc, #548]	; (8005cfc <HAL_DAC_ConfigChannel+0x278>)
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d00a      	beq.n	8005af2 <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	f043 0208 	orr.w	r2, r3, #8
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2203      	movs	r2, #3
 8005aec:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e0ff      	b.n	8005cf2 <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005af8:	4b80      	ldr	r3, [pc, #512]	; (8005cfc <HAL_DAC_ConfigChannel+0x278>)
 8005afa:	4013      	ands	r3, r2
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d1df      	bne.n	8005ac0 <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 8005b00:	2001      	movs	r0, #1
 8005b02:	f7fd ffd9 	bl	8003ab8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	68ba      	ldr	r2, [r7, #8]
 8005b0c:	6992      	ldr	r2, [r2, #24]
 8005b0e:	641a      	str	r2, [r3, #64]	; 0x40
 8005b10:	e023      	b.n	8005b5a <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005b12:	f7fd ffc5 	bl	8003aa0 <HAL_GetTick>
 8005b16:	4602      	mov	r2, r0
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d90f      	bls.n	8005b40 <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	da0a      	bge.n	8005b40 <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	691b      	ldr	r3, [r3, #16]
 8005b2e:	f043 0208 	orr.w	r2, r3, #8
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2203      	movs	r2, #3
 8005b3a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005b3c:	2303      	movs	r3, #3
 8005b3e:	e0d8      	b.n	8005cf2 <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	dbe3      	blt.n	8005b12 <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 8005b4a:	2001      	movs	r0, #1
 8005b4c:	f7fd ffb4 	bl	8003ab8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68ba      	ldr	r2, [r7, #8]
 8005b56:	6992      	ldr	r2, [r2, #24]
 8005b58:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f003 0310 	and.w	r3, r3, #16
 8005b66:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b6e:	43db      	mvns	r3, r3
 8005b70:	ea02 0103 	and.w	r1, r2, r3
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	69da      	ldr	r2, [r3, #28]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f003 0310 	and.w	r3, r3, #16
 8005b7e:	409a      	lsls	r2, r3
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	430a      	orrs	r2, r1
 8005b86:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f003 0310 	and.w	r3, r3, #16
 8005b94:	21ff      	movs	r1, #255	; 0xff
 8005b96:	fa01 f303 	lsl.w	r3, r1, r3
 8005b9a:	43db      	mvns	r3, r3
 8005b9c:	ea02 0103 	and.w	r1, r2, r3
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	6a1a      	ldr	r2, [r3, #32]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f003 0310 	and.w	r3, r3, #16
 8005baa:	409a      	lsls	r2, r3
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	430a      	orrs	r2, r1
 8005bb2:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	691b      	ldr	r3, [r3, #16]
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d11d      	bne.n	8005bf8 <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc2:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f003 0310 	and.w	r3, r3, #16
 8005bca:	221f      	movs	r2, #31
 8005bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd0:	43db      	mvns	r3, r3
 8005bd2:	697a      	ldr	r2, [r7, #20]
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	695b      	ldr	r3, [r3, #20]
 8005bdc:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f003 0310 	and.w	r3, r3, #16
 8005be4:	693a      	ldr	r2, [r7, #16]
 8005be6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bea:	697a      	ldr	r2, [r7, #20]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	697a      	ldr	r2, [r7, #20]
 8005bf6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bfe:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f003 0310 	and.w	r3, r3, #16
 8005c06:	2207      	movs	r2, #7
 8005c08:	fa02 f303 	lsl.w	r3, r2, r3
 8005c0c:	43db      	mvns	r3, r3
 8005c0e:	697a      	ldr	r2, [r7, #20]
 8005c10:	4013      	ands	r3, r2
 8005c12:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d102      	bne.n	8005c22 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	61fb      	str	r3, [r7, #28]
 8005c20:	e00f      	b.n	8005c42 <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	d102      	bne.n	8005c30 <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	61fb      	str	r3, [r7, #28]
 8005c2e:	e008      	b.n	8005c42 <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d102      	bne.n	8005c3e <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	61fb      	str	r3, [r7, #28]
 8005c3c:	e001      	b.n	8005c42 <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	69fa      	ldr	r2, [r7, #28]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f003 0310 	and.w	r3, r3, #16
 8005c58:	693a      	ldr	r2, [r7, #16]
 8005c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c5e:	697a      	ldr	r2, [r7, #20]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	697a      	ldr	r2, [r7, #20]
 8005c6a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	6819      	ldr	r1, [r3, #0]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f003 0310 	and.w	r3, r3, #16
 8005c78:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c80:	43da      	mvns	r2, r3
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	400a      	ands	r2, r1
 8005c88:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f003 0310 	and.w	r3, r3, #16
 8005c98:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca0:	43db      	mvns	r3, r3
 8005ca2:	697a      	ldr	r2, [r7, #20]
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f003 0310 	and.w	r3, r3, #16
 8005cb4:	693a      	ldr	r2, [r7, #16]
 8005cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cba:	697a      	ldr	r2, [r7, #20]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	697a      	ldr	r2, [r7, #20]
 8005cc6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	6819      	ldr	r1, [r3, #0]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f003 0310 	and.w	r3, r3, #16
 8005cd4:	22c0      	movs	r2, #192	; 0xc0
 8005cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cda:	43da      	mvns	r2, r3
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	400a      	ands	r2, r1
 8005ce2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2200      	movs	r2, #0
 8005cee:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005cf0:	2300      	movs	r3, #0
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3720      	adds	r7, #32
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	bf00      	nop
 8005cfc:	20008000 	.word	0x20008000

08005d00 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d101      	bne.n	8005d12 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e0cf      	b.n	8005eb2 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d106      	bne.n	8005d2a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2223      	movs	r2, #35	; 0x23
 8005d20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f009 f9d5 	bl	800f0d4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d2a:	4b64      	ldr	r3, [pc, #400]	; (8005ebc <HAL_ETH_Init+0x1bc>)
 8005d2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005d30:	4a62      	ldr	r2, [pc, #392]	; (8005ebc <HAL_ETH_Init+0x1bc>)
 8005d32:	f043 0302 	orr.w	r3, r3, #2
 8005d36:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005d3a:	4b60      	ldr	r3, [pc, #384]	; (8005ebc <HAL_ETH_Init+0x1bc>)
 8005d3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005d40:	f003 0302 	and.w	r3, r3, #2
 8005d44:	60bb      	str	r3, [r7, #8]
 8005d46:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	7a1b      	ldrb	r3, [r3, #8]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d103      	bne.n	8005d58 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8005d50:	2000      	movs	r0, #0
 8005d52:	f7fd fee1 	bl	8003b18 <HAL_SYSCFG_ETHInterfaceSelect>
 8005d56:	e003      	b.n	8005d60 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8005d58:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8005d5c:	f7fd fedc 	bl	8003b18 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8005d60:	4b57      	ldr	r3, [pc, #348]	; (8005ec0 <HAL_ETH_Init+0x1c0>)
 8005d62:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	6812      	ldr	r2, [r2, #0]
 8005d72:	f043 0301 	orr.w	r3, r3, #1
 8005d76:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005d7a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d7c:	f7fd fe90 	bl	8003aa0 <HAL_GetTick>
 8005d80:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005d82:	e011      	b.n	8005da8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8005d84:	f7fd fe8c 	bl	8003aa0 <HAL_GetTick>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	1ad3      	subs	r3, r2, r3
 8005d8e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005d92:	d909      	bls.n	8005da8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2204      	movs	r2, #4
 8005d98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	22e0      	movs	r2, #224	; 0xe0
 8005da0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	e084      	b.n	8005eb2 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 0301 	and.w	r3, r3, #1
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d1e4      	bne.n	8005d84 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 fd94 	bl	80068e8 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8005dc0:	f004 fc64 	bl	800a68c <HAL_RCC_GetHCLKFreq>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	4a3f      	ldr	r2, [pc, #252]	; (8005ec4 <HAL_ETH_Init+0x1c4>)
 8005dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8005dcc:	0c9a      	lsrs	r2, r3, #18
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	3a01      	subs	r2, #1
 8005dd4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f000 ff7f 	bl	8006cdc <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005de6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005dea:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	6812      	ldr	r2, [r2, #0]
 8005df2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005df6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005dfa:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	695b      	ldr	r3, [r3, #20]
 8005e02:	f003 0303 	and.w	r3, r3, #3
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d009      	beq.n	8005e1e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	22e0      	movs	r2, #224	; 0xe0
 8005e16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e049      	b.n	8005eb2 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e26:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8005e2a:	4b27      	ldr	r3, [pc, #156]	; (8005ec8 <HAL_ETH_Init+0x1c8>)
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	6952      	ldr	r2, [r2, #20]
 8005e32:	0051      	lsls	r1, r2, #1
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	6812      	ldr	r2, [r2, #0]
 8005e38:	430b      	orrs	r3, r1
 8005e3a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005e3e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 ffe7 	bl	8006e16 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f001 f82d 	bl	8006ea8 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	3305      	adds	r3, #5
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	021a      	lsls	r2, r3, #8
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	3304      	adds	r3, #4
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	4619      	mov	r1, r3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	430a      	orrs	r2, r1
 8005e68:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	3303      	adds	r3, #3
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	061a      	lsls	r2, r3, #24
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	3302      	adds	r3, #2
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	041b      	lsls	r3, r3, #16
 8005e80:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	3301      	adds	r3, #1
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005e8c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005e9a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005e9c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2210      	movs	r2, #16
 8005eac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005eb0:	2300      	movs	r3, #0
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3710      	adds	r7, #16
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	58024400 	.word	0x58024400
 8005ec0:	58000400 	.word	0x58000400
 8005ec4:	431bde83 	.word	0x431bde83
 8005ec8:	ffff8001 	.word	0xffff8001

08005ecc <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b082      	sub	sp, #8
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005eda:	2b10      	cmp	r3, #16
 8005edc:	d153      	bne.n	8005f86 <HAL_ETH_Start+0xba>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2223      	movs	r2, #35	; 0x23
 8005ee2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2204      	movs	r2, #4
 8005eea:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 f9f6 	bl	80062de <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f042 0202 	orr.w	r2, r2, #2
 8005f00:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f042 0201 	orr.w	r2, r2, #1
 8005f10:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f042 0201 	orr.w	r2, r2, #1
 8005f22:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f2e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	6812      	ldr	r2, [r2, #0]
 8005f36:	f043 0301 	orr.w	r3, r3, #1
 8005f3a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005f3e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f4a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	6812      	ldr	r2, [r2, #0]
 8005f52:	f043 0301 	orr.w	r3, r3, #1
 8005f56:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005f5a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f66:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	6812      	ldr	r2, [r2, #0]
 8005f6e:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 8005f72:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005f76:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160

    heth->gState = HAL_ETH_STATE_STARTED;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2223      	movs	r2, #35	; 0x23
 8005f7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005f82:	2300      	movs	r3, #0
 8005f84:	e000      	b.n	8005f88 <HAL_ETH_Start+0xbc>
  }
  else
  {
    return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
  }
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3708      	adds	r7, #8
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f9e:	2b23      	cmp	r3, #35	; 0x23
 8005fa0:	d13f      	bne.n	8006022 <HAL_ETH_Stop+0x92>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2223      	movs	r2, #35	; 0x23
 8005fa6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fb2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	6812      	ldr	r2, [r2, #0]
 8005fba:	f023 0301 	bic.w	r3, r3, #1
 8005fbe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005fc2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fce:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	6812      	ldr	r2, [r2, #0]
 8005fd6:	f023 0301 	bic.w	r3, r3, #1
 8005fda:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005fde:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f022 0201 	bic.w	r2, r2, #1
 8005ff0:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f042 0201 	orr.w	r2, r2, #1
 8006002:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f022 0202 	bic.w	r2, r2, #2
 8006014:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2210      	movs	r2, #16
 800601a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 800601e:	2300      	movs	r3, #0
 8006020:	e000      	b.n	8006024 <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
  }
}
 8006024:	4618      	mov	r0, r3
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b086      	sub	sp, #24
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d109      	bne.n	8006056 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006048:	f043 0201 	orr.w	r2, r3, #1
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	e07f      	b.n	8006156 <HAL_ETH_Transmit+0x126>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800605c:	2b23      	cmp	r3, #35	; 0x23
 800605e:	d179      	bne.n	8006154 <HAL_ETH_Transmit+0x124>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8006060:	2200      	movs	r2, #0
 8006062:	68b9      	ldr	r1, [r7, #8]
 8006064:	68f8      	ldr	r0, [r7, #12]
 8006066:	f000 ff7d 	bl	8006f64 <ETH_Prepare_Tx_Descriptors>
 800606a:	4603      	mov	r3, r0
 800606c:	2b00      	cmp	r3, #0
 800606e:	d009      	beq.n	8006084 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006076:	f043 0202 	orr.w	r2, r3, #2
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	e068      	b.n	8006156 <HAL_ETH_Transmit+0x126>
  __ASM volatile ("dsb 0xF":::"memory");
 8006084:	f3bf 8f4f 	dsb	sy
}
 8006088:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	3206      	adds	r2, #6
 8006092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006096:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800609c:	1c5a      	adds	r2, r3, #1
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	629a      	str	r2, [r3, #40]	; 0x28
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a6:	2b03      	cmp	r3, #3
 80060a8:	d904      	bls.n	80060b4 <HAL_ETH_Transmit+0x84>
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ae:	1f1a      	subs	r2, r3, #4
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	3106      	adds	r1, #6
 80060c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80060c4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80060c8:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    tickstart = HAL_GetTick();
 80060cc:	f7fd fce8 	bl	8003aa0 <HAL_GetTick>
 80060d0:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 80060d2:	e039      	b.n	8006148 <HAL_ETH_Transmit+0x118>
    {
      if ((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060dc:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80060e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d012      	beq.n	800610e <HAL_ETH_Transmit+0xde>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060ee:	f043 0208 	orr.w	r2, r3, #8
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMACSR;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006100:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e023      	b.n	8006156 <HAL_ETH_Transmit+0x126>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006114:	d018      	beq.n	8006148 <HAL_ETH_Transmit+0x118>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006116:	f7fd fcc3 	bl	8003aa0 <HAL_GetTick>
 800611a:	4602      	mov	r2, r0
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	1ad3      	subs	r3, r2, r3
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	429a      	cmp	r2, r3
 8006124:	d302      	bcc.n	800612c <HAL_ETH_Transmit+0xfc>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d10d      	bne.n	8006148 <HAL_ETH_Transmit+0x118>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006132:	f043 0204 	orr.w	r2, r3, #4
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC3 = (ETH_DMATXNDESCWBF_FD | ETH_DMATXNDESCWBF_LD);
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8006142:	60da      	str	r2, [r3, #12]
          return HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	e006      	b.n	8006156 <HAL_ETH_Transmit+0x126>
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	2b00      	cmp	r3, #0
 800614e:	dbc1      	blt.n	80060d4 <HAL_ETH_Transmit+0xa4>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8006150:	2300      	movs	r3, #0
 8006152:	e000      	b.n	8006156 <HAL_ETH_Transmit+0x126>
  }
  else
  {
    return HAL_ERROR;
 8006154:	2301      	movs	r3, #1
  }
}
 8006156:	4618      	mov	r0, r3
 8006158:	3718      	adds	r7, #24
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}

0800615e <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800615e:	b580      	push	{r7, lr}
 8006160:	b088      	sub	sp, #32
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
 8006166:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8006168:	2300      	movs	r3, #0
 800616a:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800616c:	2300      	movs	r3, #0
 800616e:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d109      	bne.n	800618a <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800617c:	f043 0201 	orr.w	r2, r3, #1
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	e0a5      	b.n	80062d6 <HAL_ETH_ReadData+0x178>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006190:	2b23      	cmp	r3, #35	; 0x23
 8006192:	d001      	beq.n	8006198 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	e09e      	b.n	80062d6 <HAL_ETH_ReadData+0x178>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800619c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	69fa      	ldr	r2, [r7, #28]
 80061a2:	3212      	adds	r2, #18
 80061a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061a8:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061ae:	f1c3 0304 	rsb	r3, r3, #4
 80061b2:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80061b4:	e067      	b.n	8006286 <HAL_ETH_ReadData+0x128>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d007      	beq.n	80061d2 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	685a      	ldr	r2, [r3, #4]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	68db      	ldr	r3, [r3, #12]
 80061d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d103      	bne.n	80061e6 <HAL_ETH_ReadData+0x88>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d03d      	beq.n	8006262 <HAL_ETH_ReadData+0x104>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	68db      	ldr	r3, [r3, #12]
 80061ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d005      	beq.n	80061fe <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	695b      	ldr	r3, [r3, #20]
 8006202:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8006204:	69bb      	ldr	r3, [r7, #24]
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800620c:	2b00      	cmp	r3, #0
 800620e:	d00d      	beq.n	800622c <HAL_ETH_ReadData+0xce>
      {
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8006210:	69bb      	ldr	r3, [r7, #24]
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800621c:	1ad3      	subs	r3, r2, r3
 800621e:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	68da      	ldr	r2, [r3, #12]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8006228:	2301      	movs	r3, #1
 800622a:	73fb      	strb	r3, [r7, #15]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800623c:	461a      	mov	r2, r3
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	b29b      	uxth	r3, r3
 8006242:	f009 f91f 	bl	800f484 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800624a:	1c5a      	adds	r2, r3, #1
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	441a      	add	r2, r3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 800625c:	69bb      	ldr	r3, [r7, #24]
 800625e:	2200      	movs	r2, #0
 8006260:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	3301      	adds	r3, #1
 8006266:	61fb      	str	r3, [r7, #28]
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	2b03      	cmp	r3, #3
 800626c:	d902      	bls.n	8006274 <HAL_ETH_ReadData+0x116>
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	3b04      	subs	r3, #4
 8006272:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	69fa      	ldr	r2, [r7, #28]
 8006278:	3212      	adds	r2, #18
 800627a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800627e:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	3301      	adds	r3, #1
 8006284:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 800628a:	2b00      	cmp	r3, #0
 800628c:	db06      	blt.n	800629c <HAL_ETH_ReadData+0x13e>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800628e:	697a      	ldr	r2, [r7, #20]
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	429a      	cmp	r2, r3
 8006294:	d202      	bcs.n	800629c <HAL_ETH_ReadData+0x13e>
         && (rxdataready == 0U))
 8006296:	7bfb      	ldrb	r3, [r7, #15]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d08c      	beq.n	80061b6 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	441a      	add	r2, r3
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d002      	beq.n	80062b6 <HAL_ETH_ReadData+0x158>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f000 f814 	bl	80062de <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	69fa      	ldr	r2, [r7, #28]
 80062ba:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 80062bc:	7bfb      	ldrb	r3, [r7, #15]
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d108      	bne.n	80062d4 <HAL_ETH_ReadData+0x176>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80062d0:	2300      	movs	r3, #0
 80062d2:	e000      	b.n	80062d6 <HAL_ETH_ReadData+0x178>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3720      	adds	r7, #32
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}

080062de <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80062de:	b580      	push	{r7, lr}
 80062e0:	b088      	sub	sp, #32
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80062e6:	2300      	movs	r3, #0
 80062e8:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 80062ea:	2301      	movs	r3, #1
 80062ec:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062f2:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	69fa      	ldr	r2, [r7, #28]
 80062f8:	3212      	adds	r2, #18
 80062fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062fe:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006304:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8006306:	e03b      	b.n	8006380 <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	691b      	ldr	r3, [r3, #16]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d112      	bne.n	8006336 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8006310:	f107 030c 	add.w	r3, r7, #12
 8006314:	4618      	mov	r0, r3
 8006316:	f009 f885 	bl	800f424 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d102      	bne.n	8006326 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8006320:	2300      	movs	r3, #0
 8006322:	74fb      	strb	r3, [r7, #19]
 8006324:	e007      	b.n	8006336 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	461a      	mov	r2, r3
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	461a      	mov	r2, r3
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8006336:	7cfb      	ldrb	r3, [r7, #19]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d021      	beq.n	8006380 <ETH_UpdateDescriptor+0xa2>
  __ASM volatile ("dmb 0xF":::"memory");
 800633c:	f3bf 8f5f 	dmb	sy
}
 8006340:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006346:	2b00      	cmp	r3, #0
 8006348:	d004      	beq.n	8006354 <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 8006350:	60da      	str	r2, [r3, #12]
 8006352:	e003      	b.n	800635c <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 800635a:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	3301      	adds	r3, #1
 8006360:	61fb      	str	r3, [r7, #28]
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	2b03      	cmp	r3, #3
 8006366:	d902      	bls.n	800636e <ETH_UpdateDescriptor+0x90>
 8006368:	69fb      	ldr	r3, [r7, #28]
 800636a:	3b04      	subs	r3, #4
 800636c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	69fa      	ldr	r2, [r7, #28]
 8006372:	3212      	adds	r2, #18
 8006374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006378:	617b      	str	r3, [r7, #20]
      desccount--;
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	3b01      	subs	r3, #1
 800637e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8006380:	69bb      	ldr	r3, [r7, #24]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d002      	beq.n	800638c <ETH_UpdateDescriptor+0xae>
 8006386:	7cfb      	ldrb	r3, [r7, #19]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d1bd      	bne.n	8006308 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006390:	69ba      	ldr	r2, [r7, #24]
 8006392:	429a      	cmp	r2, r3
 8006394:	d00d      	beq.n	80063b2 <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800639e:	461a      	mov	r2, r3
 80063a0:	2300      	movs	r3, #0
 80063a2:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	69fa      	ldr	r2, [r7, #28]
 80063aa:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	69ba      	ldr	r2, [r7, #24]
 80063b0:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80063b2:	bf00      	nop
 80063b4:	3720      	adds	r7, #32
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}

080063ba <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80063ba:	b580      	push	{r7, lr}
 80063bc:	b086      	sub	sp, #24
 80063be:	af00      	add	r7, sp, #0
 80063c0:	60f8      	str	r0, [r7, #12]
 80063c2:	60b9      	str	r1, [r7, #8]
 80063c4:	607a      	str	r2, [r7, #4]
 80063c6:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80063d0:	f003 0301 	and.w	r3, r3, #1
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d001      	beq.n	80063dc <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	e03e      	b.n	800645a <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80063e4:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	055b      	lsls	r3, r3, #21
 80063f0:	4313      	orrs	r3, r2
 80063f2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	041b      	lsls	r3, r3, #16
 80063fe:	4313      	orrs	r3, r2
 8006400:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	f043 030c 	orr.w	r3, r3, #12
 8006408:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	f043 0301 	orr.w	r3, r3, #1
 8006410:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	697a      	ldr	r2, [r7, #20]
 8006418:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 800641c:	f7fd fb40 	bl	8003aa0 <HAL_GetTick>
 8006420:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8006422:	e009      	b.n	8006438 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8006424:	f7fd fb3c 	bl	8003aa0 <HAL_GetTick>
 8006428:	4602      	mov	r2, r0
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	1ad3      	subs	r3, r2, r3
 800642e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006432:	d901      	bls.n	8006438 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	e010      	b.n	800645a <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006440:	f003 0301 	and.w	r3, r3, #1
 8006444:	2b00      	cmp	r3, #0
 8006446:	d1ed      	bne.n	8006424 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006450:	b29b      	uxth	r3, r3
 8006452:	461a      	mov	r2, r3
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006458:	2300      	movs	r3, #0
}
 800645a:	4618      	mov	r0, r3
 800645c:	3718      	adds	r7, #24
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
	...

08006464 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b086      	sub	sp, #24
 8006468:	af00      	add	r7, sp, #0
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	60b9      	str	r1, [r7, #8]
 800646e:	607a      	str	r2, [r7, #4]
 8006470:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800647a:	f003 0301 	and.w	r3, r3, #1
 800647e:	2b00      	cmp	r3, #0
 8006480:	d001      	beq.n	8006486 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	e03c      	b.n	8006500 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800648e:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	055b      	lsls	r3, r3, #21
 800649a:	4313      	orrs	r3, r2
 800649c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	041b      	lsls	r3, r3, #16
 80064a8:	4313      	orrs	r3, r2
 80064aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	f023 030c 	bic.w	r3, r3, #12
 80064b2:	f043 0304 	orr.w	r3, r3, #4
 80064b6:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	f043 0301 	orr.w	r3, r3, #1
 80064be:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	b29a      	uxth	r2, r3
 80064c4:	4b10      	ldr	r3, [pc, #64]	; (8006508 <HAL_ETH_WritePHYRegister+0xa4>)
 80064c6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 80064ca:	4a0f      	ldr	r2, [pc, #60]	; (8006508 <HAL_ETH_WritePHYRegister+0xa4>)
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 80064d2:	f7fd fae5 	bl	8003aa0 <HAL_GetTick>
 80064d6:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80064d8:	e009      	b.n	80064ee <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 80064da:	f7fd fae1 	bl	8003aa0 <HAL_GetTick>
 80064de:	4602      	mov	r2, r0
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	1ad3      	subs	r3, r2, r3
 80064e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064e8:	d901      	bls.n	80064ee <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	e008      	b.n	8006500 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80064f6:	f003 0301 	and.w	r3, r3, #1
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d1ed      	bne.n	80064da <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 80064fe:	2300      	movs	r3, #0
}
 8006500:	4618      	mov	r0, r3
 8006502:	3718      	adds	r7, #24
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}
 8006508:	40028000 	.word	0x40028000

0800650c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 800650c:	b480      	push	{r7}
 800650e:	b083      	sub	sp, #12
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d101      	bne.n	8006520 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	e1c3      	b.n	80068a8 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f003 020c 	and.w	r2, r3, #12
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 0310 	and.w	r3, r3, #16
 8006538:	2b00      	cmp	r3, #0
 800653a:	bf14      	ite	ne
 800653c:	2301      	movne	r3, #1
 800653e:	2300      	moveq	r3, #0
 8006540:	b2db      	uxtb	r3, r3
 8006542:	461a      	mov	r2, r3
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006562:	2b00      	cmp	r3, #0
 8006564:	bf0c      	ite	eq
 8006566:	2301      	moveq	r3, #1
 8006568:	2300      	movne	r3, #0
 800656a:	b2db      	uxtb	r3, r3
 800656c:	461a      	mov	r2, r3
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
 800657e:	2b00      	cmp	r3, #0
 8006580:	bf14      	ite	ne
 8006582:	2301      	movne	r3, #1
 8006584:	2300      	moveq	r3, #0
 8006586:	b2db      	uxtb	r3, r3
 8006588:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006598:	2b00      	cmp	r3, #0
 800659a:	bf0c      	ite	eq
 800659c:	2301      	moveq	r3, #1
 800659e:	2300      	movne	r3, #0
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	461a      	mov	r2, r3
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 80065ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	bf14      	ite	ne
 80065b6:	2301      	movne	r3, #1
 80065b8:	2300      	moveq	r3, #0
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	bf14      	ite	ne
 80065d0:	2301      	movne	r3, #1
 80065d2:	2300      	moveq	r3, #0
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	461a      	mov	r2, r3
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006602:	2b00      	cmp	r3, #0
 8006604:	bf14      	ite	ne
 8006606:	2301      	movne	r3, #1
 8006608:	2300      	moveq	r3, #0
 800660a:	b2db      	uxtb	r3, r3
 800660c:	461a      	mov	r2, r3
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800661c:	2b00      	cmp	r3, #0
 800661e:	bf0c      	ite	eq
 8006620:	2301      	moveq	r3, #1
 8006622:	2300      	movne	r3, #0
 8006624:	b2db      	uxtb	r3, r3
 8006626:	461a      	mov	r2, r3
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006636:	2b00      	cmp	r3, #0
 8006638:	bf0c      	ite	eq
 800663a:	2301      	moveq	r3, #1
 800663c:	2300      	movne	r3, #0
 800663e:	b2db      	uxtb	r3, r3
 8006640:	461a      	mov	r2, r3
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006650:	2b00      	cmp	r3, #0
 8006652:	bf14      	ite	ne
 8006654:	2301      	movne	r3, #1
 8006656:	2300      	moveq	r3, #0
 8006658:	b2db      	uxtb	r3, r3
 800665a:	461a      	mov	r2, r3
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800666a:	2b00      	cmp	r3, #0
 800666c:	bf14      	ite	ne
 800666e:	2301      	movne	r3, #1
 8006670:	2300      	moveq	r3, #0
 8006672:	b2db      	uxtb	r3, r3
 8006674:	461a      	mov	r2, r3
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006684:	2b00      	cmp	r3, #0
 8006686:	bf14      	ite	ne
 8006688:	2301      	movne	r3, #1
 800668a:	2300      	moveq	r3, #0
 800668c:	b2db      	uxtb	r3, r3
 800668e:	461a      	mov	r2, r3
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 800669a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800669e:	2b00      	cmp	r3, #0
 80066a0:	bf14      	ite	ne
 80066a2:	2301      	movne	r3, #1
 80066a4:	2300      	moveq	r3, #0
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	bf14      	ite	ne
 80066ca:	2301      	movne	r3, #1
 80066cc:	2300      	moveq	r3, #0
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	461a      	mov	r2, r3
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	bf0c      	ite	eq
 8006700:	2301      	moveq	r3, #1
 8006702:	2300      	movne	r3, #0
 8006704:	b2db      	uxtb	r3, r3
 8006706:	461a      	mov	r2, r3
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006718:	2b00      	cmp	r3, #0
 800671a:	bf14      	ite	ne
 800671c:	2301      	movne	r3, #1
 800671e:	2300      	moveq	r3, #0
 8006720:	b2db      	uxtb	r3, r3
 8006722:	461a      	mov	r2, r3
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8006730:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006734:	2b00      	cmp	r3, #0
 8006736:	bf14      	ite	ne
 8006738:	2301      	movne	r3, #1
 800673a:	2300      	moveq	r3, #0
 800673c:	b2db      	uxtb	r3, r3
 800673e:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
 8006750:	2b00      	cmp	r3, #0
 8006752:	bf14      	ite	ne
 8006754:	2301      	movne	r3, #1
 8006756:	2300      	moveq	r3, #0
 8006758:	b2db      	uxtb	r3, r3
 800675a:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	0e5b      	lsrs	r3, r3, #25
 800676a:	f003 021f 	and.w	r2, r3, #31
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800677c:	2b00      	cmp	r3, #0
 800677e:	bf14      	ite	ne
 8006780:	2301      	movne	r3, #1
 8006782:	2300      	moveq	r3, #0
 8006784:	b2db      	uxtb	r3, r3
 8006786:	461a      	mov	r2, r3
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	f003 020f 	and.w	r2, r3, #15
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067a2:	f003 0302 	and.w	r3, r3, #2
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	bf14      	ite	ne
 80067aa:	2301      	movne	r3, #1
 80067ac:	2300      	moveq	r3, #0
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	461a      	mov	r2, r3
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	bf0c      	ite	eq
 80067c6:	2301      	moveq	r3, #1
 80067c8:	2300      	movne	r3, #0
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	461a      	mov	r2, r3
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067da:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067e8:	0c1b      	lsrs	r3, r3, #16
 80067ea:	b29a      	uxth	r2, r3
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067f8:	f003 0301 	and.w	r3, r3, #1
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	bf14      	ite	ne
 8006800:	2301      	movne	r3, #1
 8006802:	2300      	moveq	r3, #0
 8006804:	b2db      	uxtb	r3, r3
 8006806:	461a      	mov	r2, r3
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006816:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 800681a:	2b00      	cmp	r3, #0
 800681c:	bf14      	ite	ne
 800681e:	2301      	movne	r3, #1
 8006820:	2300      	moveq	r3, #0
 8006822:	b2db      	uxtb	r3, r3
 8006824:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8006834:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8006844:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8006854:	f003 0308 	and.w	r3, r3, #8
 8006858:	2b00      	cmp	r3, #0
 800685a:	bf14      	ite	ne
 800685c:	2301      	movne	r3, #1
 800685e:	2300      	moveq	r3, #0
 8006860:	b2db      	uxtb	r3, r3
 8006862:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8006872:	f003 0310 	and.w	r3, r3, #16
 8006876:	2b00      	cmp	r3, #0
 8006878:	bf14      	ite	ne
 800687a:	2301      	movne	r3, #1
 800687c:	2300      	moveq	r3, #0
 800687e:	b2db      	uxtb	r3, r3
 8006880:	461a      	mov	r2, r3
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8006890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006894:	2b00      	cmp	r3, #0
 8006896:	bf0c      	ite	eq
 8006898:	2301      	moveq	r3, #1
 800689a:	2300      	movne	r3, #0
 800689c:	b2db      	uxtb	r3, r3
 800689e:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 80068a6:	2300      	movs	r3, #0
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b082      	sub	sp, #8
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d101      	bne.n	80068c8 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	e00b      	b.n	80068e0 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068ce:	2b10      	cmp	r3, #16
 80068d0:	d105      	bne.n	80068de <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80068d2:	6839      	ldr	r1, [r7, #0]
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f000 f85f 	bl	8006998 <ETH_SetMACConfig>

    return HAL_OK;
 80068da:	2300      	movs	r3, #0
 80068dc:	e000      	b.n	80068e0 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
  }
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3708      	adds	r7, #8
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b084      	sub	sp, #16
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80068f8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006900:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8006902:	f003 fec3 	bl	800a68c <HAL_RCC_GetHCLKFreq>
 8006906:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	4a1e      	ldr	r2, [pc, #120]	; (8006984 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d908      	bls.n	8006922 <HAL_ETH_SetMDIOClockRange+0x3a>
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	4a1d      	ldr	r2, [pc, #116]	; (8006988 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d804      	bhi.n	8006922 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800691e:	60fb      	str	r3, [r7, #12]
 8006920:	e027      	b.n	8006972 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	4a18      	ldr	r2, [pc, #96]	; (8006988 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d908      	bls.n	800693c <HAL_ETH_SetMDIOClockRange+0x54>
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	4a17      	ldr	r2, [pc, #92]	; (800698c <HAL_ETH_SetMDIOClockRange+0xa4>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d204      	bcs.n	800693c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006938:	60fb      	str	r3, [r7, #12]
 800693a:	e01a      	b.n	8006972 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	4a13      	ldr	r2, [pc, #76]	; (800698c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d303      	bcc.n	800694c <HAL_ETH_SetMDIOClockRange+0x64>
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	4a12      	ldr	r2, [pc, #72]	; (8006990 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d911      	bls.n	8006970 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	4a10      	ldr	r2, [pc, #64]	; (8006990 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d908      	bls.n	8006966 <HAL_ETH_SetMDIOClockRange+0x7e>
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	4a0f      	ldr	r2, [pc, #60]	; (8006994 <HAL_ETH_SetMDIOClockRange+0xac>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d804      	bhi.n	8006966 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006962:	60fb      	str	r3, [r7, #12]
 8006964:	e005      	b.n	8006972 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800696c:	60fb      	str	r3, [r7, #12]
 800696e:	e000      	b.n	8006972 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8006970:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	68fa      	ldr	r2, [r7, #12]
 8006978:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800697c:	bf00      	nop
 800697e:	3710      	adds	r7, #16
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}
 8006984:	01312cff 	.word	0x01312cff
 8006988:	02160ebf 	.word	0x02160ebf
 800698c:	03938700 	.word	0x03938700
 8006990:	05f5e0ff 	.word	0x05f5e0ff
 8006994:	08f0d17f 	.word	0x08f0d17f

08006998 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8006998:	b480      	push	{r7}
 800699a:	b085      	sub	sp, #20
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80069aa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	791b      	ldrb	r3, [r3, #4]
 80069b0:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80069b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	7b1b      	ldrb	r3, [r3, #12]
 80069b8:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80069ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	7b5b      	ldrb	r3, [r3, #13]
 80069c0:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80069c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	7b9b      	ldrb	r3, [r3, #14]
 80069c8:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80069ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	7bdb      	ldrb	r3, [r3, #15]
 80069d0:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80069d2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80069d4:	683a      	ldr	r2, [r7, #0]
 80069d6:	7c12      	ldrb	r2, [r2, #16]
 80069d8:	2a00      	cmp	r2, #0
 80069da:	d102      	bne.n	80069e2 <ETH_SetMACConfig+0x4a>
 80069dc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80069e0:	e000      	b.n	80069e4 <ETH_SetMACConfig+0x4c>
 80069e2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80069e4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80069e6:	683a      	ldr	r2, [r7, #0]
 80069e8:	7c52      	ldrb	r2, [r2, #17]
 80069ea:	2a00      	cmp	r2, #0
 80069ec:	d102      	bne.n	80069f4 <ETH_SetMACConfig+0x5c>
 80069ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80069f2:	e000      	b.n	80069f6 <ETH_SetMACConfig+0x5e>
 80069f4:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80069f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	7c9b      	ldrb	r3, [r3, #18]
 80069fc:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80069fe:	431a      	orrs	r2, r3
               macconf->Speed |
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8006a04:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8006a0a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	7f1b      	ldrb	r3, [r3, #28]
 8006a10:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8006a12:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	7f5b      	ldrb	r3, [r3, #29]
 8006a18:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8006a1a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8006a1c:	683a      	ldr	r2, [r7, #0]
 8006a1e:	7f92      	ldrb	r2, [r2, #30]
 8006a20:	2a00      	cmp	r2, #0
 8006a22:	d102      	bne.n	8006a2a <ETH_SetMACConfig+0x92>
 8006a24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006a28:	e000      	b.n	8006a2c <ETH_SetMACConfig+0x94>
 8006a2a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8006a2c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	7fdb      	ldrb	r3, [r3, #31]
 8006a32:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8006a34:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8006a36:	683a      	ldr	r2, [r7, #0]
 8006a38:	f892 2020 	ldrb.w	r2, [r2, #32]
 8006a3c:	2a00      	cmp	r2, #0
 8006a3e:	d102      	bne.n	8006a46 <ETH_SetMACConfig+0xae>
 8006a40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a44:	e000      	b.n	8006a48 <ETH_SetMACConfig+0xb0>
 8006a46:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8006a48:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8006a4e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a56:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8006a58:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	4b56      	ldr	r3, [pc, #344]	; (8006bc4 <ETH_SetMACConfig+0x22c>)
 8006a6a:	4013      	ands	r3, r2
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	6812      	ldr	r2, [r2, #0]
 8006a70:	68f9      	ldr	r1, [r7, #12]
 8006a72:	430b      	orrs	r3, r1
 8006a74:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a7a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006a82:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8006a84:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006a8c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8006a8e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006a96:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8006a98:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8006a9a:	683a      	ldr	r2, [r7, #0]
 8006a9c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8006aa0:	2a00      	cmp	r2, #0
 8006aa2:	d102      	bne.n	8006aaa <ETH_SetMACConfig+0x112>
 8006aa4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006aa8:	e000      	b.n	8006aac <ETH_SetMACConfig+0x114>
 8006aaa:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8006aac:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	685a      	ldr	r2, [r3, #4]
 8006abc:	4b42      	ldr	r3, [pc, #264]	; (8006bc8 <ETH_SetMACConfig+0x230>)
 8006abe:	4013      	ands	r3, r2
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	6812      	ldr	r2, [r2, #0]
 8006ac4:	68f9      	ldr	r1, [r7, #12]
 8006ac6:	430b      	orrs	r3, r1
 8006ac8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ad0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	68da      	ldr	r2, [r3, #12]
 8006ae0:	4b3a      	ldr	r3, [pc, #232]	; (8006bcc <ETH_SetMACConfig+0x234>)
 8006ae2:	4013      	ands	r3, r2
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	6812      	ldr	r2, [r2, #0]
 8006ae8:	68f9      	ldr	r1, [r7, #12]
 8006aea:	430b      	orrs	r3, r1
 8006aec:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006af4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8006afa:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8006afc:	683a      	ldr	r2, [r7, #0]
 8006afe:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8006b02:	2a00      	cmp	r2, #0
 8006b04:	d101      	bne.n	8006b0a <ETH_SetMACConfig+0x172>
 8006b06:	2280      	movs	r2, #128	; 0x80
 8006b08:	e000      	b.n	8006b0c <ETH_SetMACConfig+0x174>
 8006b0a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8006b0c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b12:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8006b14:	4313      	orrs	r3, r2
 8006b16:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006b1e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8006b22:	4013      	ands	r3, r2
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	6812      	ldr	r2, [r2, #0]
 8006b28:	68f9      	ldr	r1, [r7, #12]
 8006b2a:	430b      	orrs	r3, r1
 8006b2c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8006b34:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8006b3c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b4a:	f023 0103 	bic.w	r1, r3, #3
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	68fa      	ldr	r2, [r7, #12]
 8006b54:	430a      	orrs	r2, r1
 8006b56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8006b62:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	430a      	orrs	r2, r1
 8006b70:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8006b78:	683a      	ldr	r2, [r7, #0]
 8006b7a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8006b7e:	2a00      	cmp	r2, #0
 8006b80:	d101      	bne.n	8006b86 <ETH_SetMACConfig+0x1ee>
 8006b82:	2240      	movs	r2, #64	; 0x40
 8006b84:	e000      	b.n	8006b88 <ETH_SetMACConfig+0x1f0>
 8006b86:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8006b88:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8006b90:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8006b92:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8006b9a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8006ba8:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	68fa      	ldr	r2, [r7, #12]
 8006bb2:	430a      	orrs	r2, r1
 8006bb4:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8006bb8:	bf00      	nop
 8006bba:	3714      	adds	r7, #20
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr
 8006bc4:	00048083 	.word	0x00048083
 8006bc8:	c0f88000 	.word	0xc0f88000
 8006bcc:	fffffef0 	.word	0xfffffef0

08006bd0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b085      	sub	sp, #20
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	4b38      	ldr	r3, [pc, #224]	; (8006cc8 <ETH_SetDMAConfig+0xf8>)
 8006be6:	4013      	ands	r3, r2
 8006be8:	683a      	ldr	r2, [r7, #0]
 8006bea:	6811      	ldr	r1, [r2, #0]
 8006bec:	687a      	ldr	r2, [r7, #4]
 8006bee:	6812      	ldr	r2, [r2, #0]
 8006bf0:	430b      	orrs	r3, r1
 8006bf2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006bf6:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	791b      	ldrb	r3, [r3, #4]
 8006bfc:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8006c02:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	7b1b      	ldrb	r3, [r3, #12]
 8006c08:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c16:	685a      	ldr	r2, [r3, #4]
 8006c18:	4b2c      	ldr	r3, [pc, #176]	; (8006ccc <ETH_SetDMAConfig+0xfc>)
 8006c1a:	4013      	ands	r3, r2
 8006c1c:	687a      	ldr	r2, [r7, #4]
 8006c1e:	6812      	ldr	r2, [r2, #0]
 8006c20:	68f9      	ldr	r1, [r7, #12]
 8006c22:	430b      	orrs	r3, r1
 8006c24:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006c28:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	7b5b      	ldrb	r3, [r3, #13]
 8006c2e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8006c34:	4313      	orrs	r3, r2
 8006c36:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c40:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8006c44:	4b22      	ldr	r3, [pc, #136]	; (8006cd0 <ETH_SetDMAConfig+0x100>)
 8006c46:	4013      	ands	r3, r2
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	6812      	ldr	r2, [r2, #0]
 8006c4c:	68f9      	ldr	r1, [r7, #12]
 8006c4e:	430b      	orrs	r3, r1
 8006c50:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006c54:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	7d1b      	ldrb	r3, [r3, #20]
 8006c60:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8006c62:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	7f5b      	ldrb	r3, [r3, #29]
 8006c68:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c76:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8006c7a:	4b16      	ldr	r3, [pc, #88]	; (8006cd4 <ETH_SetDMAConfig+0x104>)
 8006c7c:	4013      	ands	r3, r2
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	6812      	ldr	r2, [r2, #0]
 8006c82:	68f9      	ldr	r1, [r7, #12]
 8006c84:	430b      	orrs	r3, r1
 8006c86:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006c8a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	7f1b      	ldrb	r3, [r3, #28]
 8006c92:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ca4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8006ca8:	4b0b      	ldr	r3, [pc, #44]	; (8006cd8 <ETH_SetDMAConfig+0x108>)
 8006caa:	4013      	ands	r3, r2
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	6812      	ldr	r2, [r2, #0]
 8006cb0:	68f9      	ldr	r1, [r7, #12]
 8006cb2:	430b      	orrs	r3, r1
 8006cb4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006cb8:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8006cbc:	bf00      	nop
 8006cbe:	3714      	adds	r7, #20
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr
 8006cc8:	ffff87fd 	.word	0xffff87fd
 8006ccc:	ffff2ffe 	.word	0xffff2ffe
 8006cd0:	fffec000 	.word	0xfffec000
 8006cd4:	ffc0efef 	.word	0xffc0efef
 8006cd8:	7fc0ffff 	.word	0x7fc0ffff

08006cdc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b0a4      	sub	sp, #144	; 0x90
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8006cea:	2300      	movs	r3, #0
 8006cec:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8006d00:	2301      	movs	r3, #1
 8006d02:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8006d06:	2301      	movs	r3, #1
 8006d08:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8006d12:	2301      	movs	r3, #1
 8006d14:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8006d18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006d1c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8006d24:	2300      	movs	r3, #0
 8006d26:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8006d34:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8006d38:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8006d40:	2300      	movs	r3, #0
 8006d42:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8006d44:	2301      	movs	r3, #1
 8006d46:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8006d50:	2300      	movs	r3, #0
 8006d52:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8006d56:	2300      	movs	r3, #0
 8006d58:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8006d62:	2300      	movs	r3, #0
 8006d64:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8006d74:	2320      	movs	r3, #32
 8006d76:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8006d80:	2300      	movs	r3, #0
 8006d82:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8006d86:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8006d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8006d8c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006d90:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8006d92:	2300      	movs	r3, #0
 8006d94:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8006d98:	2302      	movs	r3, #2
 8006d9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8006da4:	2300      	movs	r3, #0
 8006da6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8006daa:	2300      	movs	r3, #0
 8006dac:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8006db0:	2301      	movs	r3, #1
 8006db2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8006db6:	2300      	movs	r3, #0
 8006db8:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8006dc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f7ff fde6 	bl	8006998 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8006dde:	2300      	movs	r3, #0
 8006de0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8006de2:	2300      	movs	r3, #0
 8006de4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8006de6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006dea:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8006dec:	2300      	movs	r3, #0
 8006dee:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8006df0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006df4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8006df6:	2300      	movs	r3, #0
 8006df8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8006dfc:	f44f 7306 	mov.w	r3, #536	; 0x218
 8006e00:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8006e02:	f107 0308 	add.w	r3, r7, #8
 8006e06:	4619      	mov	r1, r3
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f7ff fee1 	bl	8006bd0 <ETH_SetDMAConfig>
}
 8006e0e:	bf00      	nop
 8006e10:	3790      	adds	r7, #144	; 0x90
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}

08006e16 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8006e16:	b480      	push	{r7}
 8006e18:	b085      	sub	sp, #20
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006e1e:	2300      	movs	r3, #0
 8006e20:	60fb      	str	r3, [r7, #12]
 8006e22:	e01d      	b.n	8006e60 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	68d9      	ldr	r1, [r3, #12]
 8006e28:	68fa      	ldr	r2, [r7, #12]
 8006e2a:	4613      	mov	r3, r2
 8006e2c:	005b      	lsls	r3, r3, #1
 8006e2e:	4413      	add	r3, r2
 8006e30:	00db      	lsls	r3, r3, #3
 8006e32:	440b      	add	r3, r1
 8006e34:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	2200      	movs	r2, #0
 8006e46:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8006e4e:	68b9      	ldr	r1, [r7, #8]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	68fa      	ldr	r2, [r7, #12]
 8006e54:	3206      	adds	r2, #6
 8006e56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	60fb      	str	r3, [r7, #12]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2b03      	cmp	r3, #3
 8006e64:	d9de      	bls.n	8006e24 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e74:	461a      	mov	r2, r3
 8006e76:	2303      	movs	r3, #3
 8006e78:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	68da      	ldr	r2, [r3, #12]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e88:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	68da      	ldr	r2, [r3, #12]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e98:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8006e9c:	bf00      	nop
 8006e9e:	3714      	adds	r7, #20
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b085      	sub	sp, #20
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	60fb      	str	r3, [r7, #12]
 8006eb4:	e023      	b.n	8006efe <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6919      	ldr	r1, [r3, #16]
 8006eba:	68fa      	ldr	r2, [r7, #12]
 8006ebc:	4613      	mov	r3, r2
 8006ebe:	005b      	lsls	r3, r3, #1
 8006ec0:	4413      	add	r3, r2
 8006ec2:	00db      	lsls	r3, r3, #3
 8006ec4:	440b      	add	r3, r1
 8006ec6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	2200      	movs	r2, #0
 8006ede:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8006eec:	68b9      	ldr	r1, [r7, #8]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	68fa      	ldr	r2, [r7, #12]
 8006ef2:	3212      	adds	r2, #18
 8006ef4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	3301      	adds	r3, #1
 8006efc:	60fb      	str	r3, [r7, #12]
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2b03      	cmp	r3, #3
 8006f02:	d9d8      	bls.n	8006eb6 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2200      	movs	r2, #0
 8006f08:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	2303      	movs	r3, #3
 8006f2e:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	691a      	ldr	r2, [r3, #16]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f3e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	691b      	ldr	r3, [r3, #16]
 8006f46:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f52:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8006f56:	bf00      	nop
 8006f58:	3714      	adds	r7, #20
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr
	...

08006f64 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b08d      	sub	sp, #52	; 0x34
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	60f8      	str	r0, [r7, #12]
 8006f6c:	60b9      	str	r1, [r7, #8]
 8006f6e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	3318      	adds	r3, #24
 8006f74:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	691b      	ldr	r3, [r3, #16]
 8006f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	691b      	ldr	r3, [r3, #16]
 8006f80:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8006f82:	2300      	movs	r3, #0
 8006f84:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f8e:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8006f96:	2300      	movs	r3, #0
 8006f98:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8006f9a:	6a3b      	ldr	r3, [r7, #32]
 8006f9c:	68db      	ldr	r3, [r3, #12]
 8006f9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006fa2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fa6:	d007      	beq.n	8006fb8 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8006fa8:	697a      	ldr	r2, [r7, #20]
 8006faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fac:	3304      	adds	r3, #4
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	4413      	add	r3, r2
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d001      	beq.n	8006fbc <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8006fb8:	2302      	movs	r3, #2
 8006fba:	e259      	b.n	8007470 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f003 0304 	and.w	r3, r3, #4
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d044      	beq.n	8007052 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8006fc8:	6a3b      	ldr	r3, [r7, #32]
 8006fca:	68da      	ldr	r2, [r3, #12]
 8006fcc:	4b75      	ldr	r3, [pc, #468]	; (80071a4 <ETH_Prepare_Tx_Descriptors+0x240>)
 8006fce:	4013      	ands	r3, r2
 8006fd0:	68ba      	ldr	r2, [r7, #8]
 8006fd2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006fd4:	431a      	orrs	r2, r3
 8006fd6:	6a3b      	ldr	r3, [r7, #32]
 8006fd8:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8006fda:	6a3b      	ldr	r3, [r7, #32]
 8006fdc:	68db      	ldr	r3, [r3, #12]
 8006fde:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006fe2:	6a3b      	ldr	r3, [r7, #32]
 8006fe4:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006ff4:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f003 0308 	and.w	r3, r3, #8
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d027      	beq.n	8007052 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8007002:	6a3b      	ldr	r3, [r7, #32]
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	b29a      	uxth	r2, r3
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800700c:	041b      	lsls	r3, r3, #16
 800700e:	431a      	orrs	r2, r3
 8007010:	6a3b      	ldr	r3, [r7, #32]
 8007012:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8007014:	6a3b      	ldr	r3, [r7, #32]
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800701c:	6a3b      	ldr	r3, [r7, #32]
 800701e:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8007020:	6a3b      	ldr	r3, [r7, #32]
 8007022:	68db      	ldr	r3, [r3, #12]
 8007024:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800702c:	431a      	orrs	r2, r3
 800702e:	6a3b      	ldr	r3, [r7, #32]
 8007030:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007040:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007050:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f003 0310 	and.w	r3, r3, #16
 800705a:	2b00      	cmp	r3, #0
 800705c:	d00e      	beq.n	800707c <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 800705e:	6a3b      	ldr	r3, [r7, #32]
 8007060:	689a      	ldr	r2, [r3, #8]
 8007062:	4b51      	ldr	r3, [pc, #324]	; (80071a8 <ETH_Prepare_Tx_Descriptors+0x244>)
 8007064:	4013      	ands	r3, r2
 8007066:	68ba      	ldr	r2, [r7, #8]
 8007068:	6992      	ldr	r2, [r2, #24]
 800706a:	431a      	orrs	r2, r3
 800706c:	6a3b      	ldr	r3, [r7, #32]
 800706e:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8007070:	6a3b      	ldr	r3, [r7, #32]
 8007072:	68db      	ldr	r3, [r3, #12]
 8007074:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007078:	6a3b      	ldr	r3, [r7, #32]
 800707a:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f003 0304 	and.w	r3, r3, #4
 8007084:	2b00      	cmp	r3, #0
 8007086:	d105      	bne.n	8007094 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f003 0310 	and.w	r3, r3, #16
 8007090:	2b00      	cmp	r3, #0
 8007092:	d036      	beq.n	8007102 <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8007094:	6a3b      	ldr	r3, [r7, #32]
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800709c:	6a3b      	ldr	r3, [r7, #32]
 800709e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80070a0:	f3bf 8f5f 	dmb	sy
}
 80070a4:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80070a6:	6a3b      	ldr	r3, [r7, #32]
 80070a8:	68db      	ldr	r3, [r3, #12]
 80070aa:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80070ae:	6a3b      	ldr	r3, [r7, #32]
 80070b0:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80070b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b4:	3301      	adds	r3, #1
 80070b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ba:	2b03      	cmp	r3, #3
 80070bc:	d902      	bls.n	80070c4 <ETH_Prepare_Tx_Descriptors+0x160>
 80070be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070c0:	3b04      	subs	r3, #4
 80070c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070cc:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 80070ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d0:	3301      	adds	r3, #1
 80070d2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80070d4:	6a3b      	ldr	r3, [r7, #32]
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070e0:	d10f      	bne.n	8007102 <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	693a      	ldr	r2, [r7, #16]
 80070e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070ea:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 80070ec:	f3bf 8f5f 	dmb	sy
}
 80070f0:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80070f2:	6a3b      	ldr	r3, [r7, #32]
 80070f4:	68db      	ldr	r3, [r3, #12]
 80070f6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80070fa:	6a3b      	ldr	r3, [r7, #32]
 80070fc:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 80070fe:	2302      	movs	r3, #2
 8007100:	e1b6      	b.n	8007470 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8007102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007104:	3301      	adds	r3, #1
 8007106:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8007108:	69fb      	ldr	r3, [r7, #28]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	461a      	mov	r2, r3
 800710e:	6a3b      	ldr	r3, [r7, #32]
 8007110:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8007112:	6a3b      	ldr	r3, [r7, #32]
 8007114:	689a      	ldr	r2, [r3, #8]
 8007116:	4b24      	ldr	r3, [pc, #144]	; (80071a8 <ETH_Prepare_Tx_Descriptors+0x244>)
 8007118:	4013      	ands	r3, r2
 800711a:	69fa      	ldr	r2, [r7, #28]
 800711c:	6852      	ldr	r2, [r2, #4]
 800711e:	431a      	orrs	r2, r3
 8007120:	6a3b      	ldr	r3, [r7, #32]
 8007122:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8007124:	69fb      	ldr	r3, [r7, #28]
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d012      	beq.n	8007152 <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 800712c:	69fb      	ldr	r3, [r7, #28]
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8007132:	69fb      	ldr	r3, [r7, #28]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	461a      	mov	r2, r3
 8007138:	6a3b      	ldr	r3, [r7, #32]
 800713a:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 800713c:	6a3b      	ldr	r3, [r7, #32]
 800713e:	689a      	ldr	r2, [r3, #8]
 8007140:	4b1a      	ldr	r3, [pc, #104]	; (80071ac <ETH_Prepare_Tx_Descriptors+0x248>)
 8007142:	4013      	ands	r3, r2
 8007144:	69fa      	ldr	r2, [r7, #28]
 8007146:	6852      	ldr	r2, [r2, #4]
 8007148:	0412      	lsls	r2, r2, #16
 800714a:	431a      	orrs	r2, r3
 800714c:	6a3b      	ldr	r3, [r7, #32]
 800714e:	609a      	str	r2, [r3, #8]
 8007150:	e008      	b.n	8007164 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8007152:	6a3b      	ldr	r3, [r7, #32]
 8007154:	2200      	movs	r2, #0
 8007156:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8007158:	6a3b      	ldr	r3, [r7, #32]
 800715a:	689a      	ldr	r2, [r3, #8]
 800715c:	4b13      	ldr	r3, [pc, #76]	; (80071ac <ETH_Prepare_Tx_Descriptors+0x248>)
 800715e:	4013      	ands	r3, r2
 8007160:	6a3a      	ldr	r2, [r7, #32]
 8007162:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f003 0310 	and.w	r3, r3, #16
 800716c:	2b00      	cmp	r3, #0
 800716e:	d021      	beq.n	80071b4 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8007170:	6a3b      	ldr	r3, [r7, #32]
 8007172:	68db      	ldr	r3, [r3, #12]
 8007174:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	6a1b      	ldr	r3, [r3, #32]
 800717c:	04db      	lsls	r3, r3, #19
 800717e:	431a      	orrs	r2, r3
 8007180:	6a3b      	ldr	r3, [r7, #32]
 8007182:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8007184:	6a3b      	ldr	r3, [r7, #32]
 8007186:	68da      	ldr	r2, [r3, #12]
 8007188:	4b09      	ldr	r3, [pc, #36]	; (80071b0 <ETH_Prepare_Tx_Descriptors+0x24c>)
 800718a:	4013      	ands	r3, r2
 800718c:	68ba      	ldr	r2, [r7, #8]
 800718e:	69d2      	ldr	r2, [r2, #28]
 8007190:	431a      	orrs	r2, r3
 8007192:	6a3b      	ldr	r3, [r7, #32]
 8007194:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8007196:	6a3b      	ldr	r3, [r7, #32]
 8007198:	68db      	ldr	r3, [r3, #12]
 800719a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800719e:	6a3b      	ldr	r3, [r7, #32]
 80071a0:	60da      	str	r2, [r3, #12]
 80071a2:	e02e      	b.n	8007202 <ETH_Prepare_Tx_Descriptors+0x29e>
 80071a4:	ffff0000 	.word	0xffff0000
 80071a8:	ffffc000 	.word	0xffffc000
 80071ac:	c000ffff 	.word	0xc000ffff
 80071b0:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80071b4:	6a3b      	ldr	r3, [r7, #32]
 80071b6:	68da      	ldr	r2, [r3, #12]
 80071b8:	4b7b      	ldr	r3, [pc, #492]	; (80073a8 <ETH_Prepare_Tx_Descriptors+0x444>)
 80071ba:	4013      	ands	r3, r2
 80071bc:	68ba      	ldr	r2, [r7, #8]
 80071be:	6852      	ldr	r2, [r2, #4]
 80071c0:	431a      	orrs	r2, r3
 80071c2:	6a3b      	ldr	r3, [r7, #32]
 80071c4:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f003 0301 	and.w	r3, r3, #1
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d008      	beq.n	80071e4 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80071d2:	6a3b      	ldr	r3, [r7, #32]
 80071d4:	68db      	ldr	r3, [r3, #12]
 80071d6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	695b      	ldr	r3, [r3, #20]
 80071de:	431a      	orrs	r2, r3
 80071e0:	6a3b      	ldr	r3, [r7, #32]
 80071e2:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f003 0320 	and.w	r3, r3, #32
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d008      	beq.n	8007202 <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 80071f0:	6a3b      	ldr	r3, [r7, #32]
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	691b      	ldr	r3, [r3, #16]
 80071fc:	431a      	orrs	r2, r3
 80071fe:	6a3b      	ldr	r3, [r7, #32]
 8007200:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f003 0304 	and.w	r3, r3, #4
 800720a:	2b00      	cmp	r3, #0
 800720c:	d008      	beq.n	8007220 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 800720e:	6a3b      	ldr	r3, [r7, #32]
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800721a:	431a      	orrs	r2, r3
 800721c:	6a3b      	ldr	r3, [r7, #32]
 800721e:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8007220:	6a3b      	ldr	r3, [r7, #32]
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007228:	6a3b      	ldr	r3, [r7, #32]
 800722a:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 800722c:	6a3b      	ldr	r3, [r7, #32]
 800722e:	68db      	ldr	r3, [r3, #12]
 8007230:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007234:	6a3b      	ldr	r3, [r7, #32]
 8007236:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8007238:	f3bf 8f5f 	dmb	sy
}
 800723c:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800723e:	6a3b      	ldr	r3, [r7, #32]
 8007240:	68db      	ldr	r3, [r3, #12]
 8007242:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007246:	6a3b      	ldr	r3, [r7, #32]
 8007248:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f003 0302 	and.w	r3, r3, #2
 8007252:	2b00      	cmp	r3, #0
 8007254:	f000 80da 	beq.w	800740c <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8007258:	6a3b      	ldr	r3, [r7, #32]
 800725a:	68db      	ldr	r3, [r3, #12]
 800725c:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	68db      	ldr	r3, [r3, #12]
 8007264:	431a      	orrs	r2, r3
 8007266:	6a3b      	ldr	r3, [r7, #32]
 8007268:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800726a:	e0cf      	b.n	800740c <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800726c:	6a3b      	ldr	r3, [r7, #32]
 800726e:	68db      	ldr	r3, [r3, #12]
 8007270:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007274:	6a3b      	ldr	r3, [r7, #32]
 8007276:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8007278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800727a:	3301      	adds	r3, #1
 800727c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800727e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007280:	2b03      	cmp	r3, #3
 8007282:	d902      	bls.n	800728a <ETH_Prepare_Tx_Descriptors+0x326>
 8007284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007286:	3b04      	subs	r3, #4
 8007288:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800728e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007292:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8007294:	6a3b      	ldr	r3, [r7, #32]
 8007296:	68db      	ldr	r3, [r3, #12]
 8007298:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800729c:	6a3b      	ldr	r3, [r7, #32]
 800729e:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 80072a0:	6a3b      	ldr	r3, [r7, #32]
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072ac:	d007      	beq.n	80072be <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80072ae:	697a      	ldr	r2, [r7, #20]
 80072b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b2:	3304      	adds	r3, #4
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	4413      	add	r3, r2
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d029      	beq.n	8007312 <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072ca:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80072cc:	2300      	movs	r3, #0
 80072ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80072d0:	e019      	b.n	8007306 <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 80072d2:	f3bf 8f5f 	dmb	sy
}
 80072d6:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80072d8:	6a3b      	ldr	r3, [r7, #32]
 80072da:	68db      	ldr	r3, [r3, #12]
 80072dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80072e0:	6a3b      	ldr	r3, [r7, #32]
 80072e2:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80072e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e6:	3301      	adds	r3, #1
 80072e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ec:	2b03      	cmp	r3, #3
 80072ee:	d902      	bls.n	80072f6 <ETH_Prepare_Tx_Descriptors+0x392>
 80072f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f2:	3b04      	subs	r3, #4
 80072f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072fe:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8007300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007302:	3301      	adds	r3, #1
 8007304:	62bb      	str	r3, [r7, #40]	; 0x28
 8007306:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800730a:	429a      	cmp	r2, r3
 800730c:	d3e1      	bcc.n	80072d2 <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 800730e:	2302      	movs	r3, #2
 8007310:	e0ae      	b.n	8007470 <ETH_Prepare_Tx_Descriptors+0x50c>
    }

    descnbr += 1U;
 8007312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007314:	3301      	adds	r3, #1
 8007316:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8007318:	69fb      	ldr	r3, [r7, #28]
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800731e:	69fb      	ldr	r3, [r7, #28]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	461a      	mov	r2, r3
 8007324:	6a3b      	ldr	r3, [r7, #32]
 8007326:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8007328:	6a3b      	ldr	r3, [r7, #32]
 800732a:	689a      	ldr	r2, [r3, #8]
 800732c:	4b1f      	ldr	r3, [pc, #124]	; (80073ac <ETH_Prepare_Tx_Descriptors+0x448>)
 800732e:	4013      	ands	r3, r2
 8007330:	69fa      	ldr	r2, [r7, #28]
 8007332:	6852      	ldr	r2, [r2, #4]
 8007334:	431a      	orrs	r2, r3
 8007336:	6a3b      	ldr	r3, [r7, #32]
 8007338:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d012      	beq.n	8007368 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8007342:	69fb      	ldr	r3, [r7, #28]
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8007348:	69fb      	ldr	r3, [r7, #28]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	461a      	mov	r2, r3
 800734e:	6a3b      	ldr	r3, [r7, #32]
 8007350:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8007352:	6a3b      	ldr	r3, [r7, #32]
 8007354:	689a      	ldr	r2, [r3, #8]
 8007356:	4b16      	ldr	r3, [pc, #88]	; (80073b0 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8007358:	4013      	ands	r3, r2
 800735a:	69fa      	ldr	r2, [r7, #28]
 800735c:	6852      	ldr	r2, [r2, #4]
 800735e:	0412      	lsls	r2, r2, #16
 8007360:	431a      	orrs	r2, r3
 8007362:	6a3b      	ldr	r3, [r7, #32]
 8007364:	609a      	str	r2, [r3, #8]
 8007366:	e008      	b.n	800737a <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8007368:	6a3b      	ldr	r3, [r7, #32]
 800736a:	2200      	movs	r2, #0
 800736c:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800736e:	6a3b      	ldr	r3, [r7, #32]
 8007370:	689a      	ldr	r2, [r3, #8]
 8007372:	4b0f      	ldr	r3, [pc, #60]	; (80073b0 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8007374:	4013      	ands	r3, r2
 8007376:	6a3a      	ldr	r2, [r7, #32]
 8007378:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f003 0310 	and.w	r3, r3, #16
 8007382:	2b00      	cmp	r3, #0
 8007384:	d018      	beq.n	80073b8 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8007386:	6a3b      	ldr	r3, [r7, #32]
 8007388:	68da      	ldr	r2, [r3, #12]
 800738a:	4b0a      	ldr	r3, [pc, #40]	; (80073b4 <ETH_Prepare_Tx_Descriptors+0x450>)
 800738c:	4013      	ands	r3, r2
 800738e:	68ba      	ldr	r2, [r7, #8]
 8007390:	69d2      	ldr	r2, [r2, #28]
 8007392:	431a      	orrs	r2, r3
 8007394:	6a3b      	ldr	r3, [r7, #32]
 8007396:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8007398:	6a3b      	ldr	r3, [r7, #32]
 800739a:	68db      	ldr	r3, [r3, #12]
 800739c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80073a0:	6a3b      	ldr	r3, [r7, #32]
 80073a2:	60da      	str	r2, [r3, #12]
 80073a4:	e020      	b.n	80073e8 <ETH_Prepare_Tx_Descriptors+0x484>
 80073a6:	bf00      	nop
 80073a8:	ffff8000 	.word	0xffff8000
 80073ac:	ffffc000 	.word	0xffffc000
 80073b0:	c000ffff 	.word	0xc000ffff
 80073b4:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80073b8:	6a3b      	ldr	r3, [r7, #32]
 80073ba:	68da      	ldr	r2, [r3, #12]
 80073bc:	4b2f      	ldr	r3, [pc, #188]	; (800747c <ETH_Prepare_Tx_Descriptors+0x518>)
 80073be:	4013      	ands	r3, r2
 80073c0:	68ba      	ldr	r2, [r7, #8]
 80073c2:	6852      	ldr	r2, [r2, #4]
 80073c4:	431a      	orrs	r2, r3
 80073c6:	6a3b      	ldr	r3, [r7, #32]
 80073c8:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f003 0301 	and.w	r3, r3, #1
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d008      	beq.n	80073e8 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80073d6:	6a3b      	ldr	r3, [r7, #32]
 80073d8:	68db      	ldr	r3, [r3, #12]
 80073da:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	695b      	ldr	r3, [r3, #20]
 80073e2:	431a      	orrs	r2, r3
 80073e4:	6a3b      	ldr	r3, [r7, #32]
 80073e6:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 80073e8:	69bb      	ldr	r3, [r7, #24]
 80073ea:	3301      	adds	r3, #1
 80073ec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80073ee:	f3bf 8f5f 	dmb	sy
}
 80073f2:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80073f4:	6a3b      	ldr	r3, [r7, #32]
 80073f6:	68db      	ldr	r3, [r3, #12]
 80073f8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80073fc:	6a3b      	ldr	r3, [r7, #32]
 80073fe:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8007400:	6a3b      	ldr	r3, [r7, #32]
 8007402:	68db      	ldr	r3, [r3, #12]
 8007404:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007408:	6a3b      	ldr	r3, [r7, #32]
 800740a:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 800740c:	69fb      	ldr	r3, [r7, #28]
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	2b00      	cmp	r3, #0
 8007412:	f47f af2b 	bne.w	800726c <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d006      	beq.n	800742a <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 800741c:	6a3b      	ldr	r3, [r7, #32]
 800741e:	689b      	ldr	r3, [r3, #8]
 8007420:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007424:	6a3b      	ldr	r3, [r7, #32]
 8007426:	609a      	str	r2, [r3, #8]
 8007428:	e005      	b.n	8007436 <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 800742a:	6a3b      	ldr	r3, [r7, #32]
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007432:	6a3b      	ldr	r3, [r7, #32]
 8007434:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8007436:	6a3b      	ldr	r3, [r7, #32]
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800743e:	6a3b      	ldr	r3, [r7, #32]
 8007440:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007446:	6979      	ldr	r1, [r7, #20]
 8007448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800744a:	3304      	adds	r3, #4
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	440b      	add	r3, r1
 8007450:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007456:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8007458:	b672      	cpsid	i
}
 800745a:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007460:	69bb      	ldr	r3, [r7, #24]
 8007462:	4413      	add	r3, r2
 8007464:	1c5a      	adds	r2, r3, #1
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800746a:	b662      	cpsie	i
}
 800746c:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800746e:	2300      	movs	r3, #0
}
 8007470:	4618      	mov	r0, r3
 8007472:	3734      	adds	r7, #52	; 0x34
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr
 800747c:	ffff8000 	.word	0xffff8000

08007480 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007480:	b480      	push	{r7}
 8007482:	b089      	sub	sp, #36	; 0x24
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800748a:	2300      	movs	r3, #0
 800748c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800748e:	4b89      	ldr	r3, [pc, #548]	; (80076b4 <HAL_GPIO_Init+0x234>)
 8007490:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007492:	e194      	b.n	80077be <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	681a      	ldr	r2, [r3, #0]
 8007498:	2101      	movs	r1, #1
 800749a:	69fb      	ldr	r3, [r7, #28]
 800749c:	fa01 f303 	lsl.w	r3, r1, r3
 80074a0:	4013      	ands	r3, r2
 80074a2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	f000 8186 	beq.w	80077b8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	f003 0303 	and.w	r3, r3, #3
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d005      	beq.n	80074c4 <HAL_GPIO_Init+0x44>
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	f003 0303 	and.w	r3, r3, #3
 80074c0:	2b02      	cmp	r3, #2
 80074c2:	d130      	bne.n	8007526 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80074ca:	69fb      	ldr	r3, [r7, #28]
 80074cc:	005b      	lsls	r3, r3, #1
 80074ce:	2203      	movs	r2, #3
 80074d0:	fa02 f303 	lsl.w	r3, r2, r3
 80074d4:	43db      	mvns	r3, r3
 80074d6:	69ba      	ldr	r2, [r7, #24]
 80074d8:	4013      	ands	r3, r2
 80074da:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	68da      	ldr	r2, [r3, #12]
 80074e0:	69fb      	ldr	r3, [r7, #28]
 80074e2:	005b      	lsls	r3, r3, #1
 80074e4:	fa02 f303 	lsl.w	r3, r2, r3
 80074e8:	69ba      	ldr	r2, [r7, #24]
 80074ea:	4313      	orrs	r3, r2
 80074ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	69ba      	ldr	r2, [r7, #24]
 80074f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80074fa:	2201      	movs	r2, #1
 80074fc:	69fb      	ldr	r3, [r7, #28]
 80074fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007502:	43db      	mvns	r3, r3
 8007504:	69ba      	ldr	r2, [r7, #24]
 8007506:	4013      	ands	r3, r2
 8007508:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	091b      	lsrs	r3, r3, #4
 8007510:	f003 0201 	and.w	r2, r3, #1
 8007514:	69fb      	ldr	r3, [r7, #28]
 8007516:	fa02 f303 	lsl.w	r3, r2, r3
 800751a:	69ba      	ldr	r2, [r7, #24]
 800751c:	4313      	orrs	r3, r2
 800751e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	69ba      	ldr	r2, [r7, #24]
 8007524:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	f003 0303 	and.w	r3, r3, #3
 800752e:	2b03      	cmp	r3, #3
 8007530:	d017      	beq.n	8007562 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	68db      	ldr	r3, [r3, #12]
 8007536:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007538:	69fb      	ldr	r3, [r7, #28]
 800753a:	005b      	lsls	r3, r3, #1
 800753c:	2203      	movs	r2, #3
 800753e:	fa02 f303 	lsl.w	r3, r2, r3
 8007542:	43db      	mvns	r3, r3
 8007544:	69ba      	ldr	r2, [r7, #24]
 8007546:	4013      	ands	r3, r2
 8007548:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	689a      	ldr	r2, [r3, #8]
 800754e:	69fb      	ldr	r3, [r7, #28]
 8007550:	005b      	lsls	r3, r3, #1
 8007552:	fa02 f303 	lsl.w	r3, r2, r3
 8007556:	69ba      	ldr	r2, [r7, #24]
 8007558:	4313      	orrs	r3, r2
 800755a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	69ba      	ldr	r2, [r7, #24]
 8007560:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	f003 0303 	and.w	r3, r3, #3
 800756a:	2b02      	cmp	r3, #2
 800756c:	d123      	bne.n	80075b6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800756e:	69fb      	ldr	r3, [r7, #28]
 8007570:	08da      	lsrs	r2, r3, #3
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	3208      	adds	r2, #8
 8007576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800757a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800757c:	69fb      	ldr	r3, [r7, #28]
 800757e:	f003 0307 	and.w	r3, r3, #7
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	220f      	movs	r2, #15
 8007586:	fa02 f303 	lsl.w	r3, r2, r3
 800758a:	43db      	mvns	r3, r3
 800758c:	69ba      	ldr	r2, [r7, #24]
 800758e:	4013      	ands	r3, r2
 8007590:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	691a      	ldr	r2, [r3, #16]
 8007596:	69fb      	ldr	r3, [r7, #28]
 8007598:	f003 0307 	and.w	r3, r3, #7
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	fa02 f303 	lsl.w	r3, r2, r3
 80075a2:	69ba      	ldr	r2, [r7, #24]
 80075a4:	4313      	orrs	r3, r2
 80075a6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80075a8:	69fb      	ldr	r3, [r7, #28]
 80075aa:	08da      	lsrs	r2, r3, #3
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	3208      	adds	r2, #8
 80075b0:	69b9      	ldr	r1, [r7, #24]
 80075b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80075bc:	69fb      	ldr	r3, [r7, #28]
 80075be:	005b      	lsls	r3, r3, #1
 80075c0:	2203      	movs	r2, #3
 80075c2:	fa02 f303 	lsl.w	r3, r2, r3
 80075c6:	43db      	mvns	r3, r3
 80075c8:	69ba      	ldr	r2, [r7, #24]
 80075ca:	4013      	ands	r3, r2
 80075cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	f003 0203 	and.w	r2, r3, #3
 80075d6:	69fb      	ldr	r3, [r7, #28]
 80075d8:	005b      	lsls	r3, r3, #1
 80075da:	fa02 f303 	lsl.w	r3, r2, r3
 80075de:	69ba      	ldr	r2, [r7, #24]
 80075e0:	4313      	orrs	r3, r2
 80075e2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	69ba      	ldr	r2, [r7, #24]
 80075e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	f000 80e0 	beq.w	80077b8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80075f8:	4b2f      	ldr	r3, [pc, #188]	; (80076b8 <HAL_GPIO_Init+0x238>)
 80075fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80075fe:	4a2e      	ldr	r2, [pc, #184]	; (80076b8 <HAL_GPIO_Init+0x238>)
 8007600:	f043 0302 	orr.w	r3, r3, #2
 8007604:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007608:	4b2b      	ldr	r3, [pc, #172]	; (80076b8 <HAL_GPIO_Init+0x238>)
 800760a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800760e:	f003 0302 	and.w	r3, r3, #2
 8007612:	60fb      	str	r3, [r7, #12]
 8007614:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007616:	4a29      	ldr	r2, [pc, #164]	; (80076bc <HAL_GPIO_Init+0x23c>)
 8007618:	69fb      	ldr	r3, [r7, #28]
 800761a:	089b      	lsrs	r3, r3, #2
 800761c:	3302      	adds	r3, #2
 800761e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007622:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007624:	69fb      	ldr	r3, [r7, #28]
 8007626:	f003 0303 	and.w	r3, r3, #3
 800762a:	009b      	lsls	r3, r3, #2
 800762c:	220f      	movs	r2, #15
 800762e:	fa02 f303 	lsl.w	r3, r2, r3
 8007632:	43db      	mvns	r3, r3
 8007634:	69ba      	ldr	r2, [r7, #24]
 8007636:	4013      	ands	r3, r2
 8007638:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	4a20      	ldr	r2, [pc, #128]	; (80076c0 <HAL_GPIO_Init+0x240>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d052      	beq.n	80076e8 <HAL_GPIO_Init+0x268>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	4a1f      	ldr	r2, [pc, #124]	; (80076c4 <HAL_GPIO_Init+0x244>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d031      	beq.n	80076ae <HAL_GPIO_Init+0x22e>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	4a1e      	ldr	r2, [pc, #120]	; (80076c8 <HAL_GPIO_Init+0x248>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d02b      	beq.n	80076aa <HAL_GPIO_Init+0x22a>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	4a1d      	ldr	r2, [pc, #116]	; (80076cc <HAL_GPIO_Init+0x24c>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d025      	beq.n	80076a6 <HAL_GPIO_Init+0x226>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	4a1c      	ldr	r2, [pc, #112]	; (80076d0 <HAL_GPIO_Init+0x250>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d01f      	beq.n	80076a2 <HAL_GPIO_Init+0x222>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	4a1b      	ldr	r2, [pc, #108]	; (80076d4 <HAL_GPIO_Init+0x254>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d019      	beq.n	800769e <HAL_GPIO_Init+0x21e>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	4a1a      	ldr	r2, [pc, #104]	; (80076d8 <HAL_GPIO_Init+0x258>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d013      	beq.n	800769a <HAL_GPIO_Init+0x21a>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	4a19      	ldr	r2, [pc, #100]	; (80076dc <HAL_GPIO_Init+0x25c>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d00d      	beq.n	8007696 <HAL_GPIO_Init+0x216>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	4a18      	ldr	r2, [pc, #96]	; (80076e0 <HAL_GPIO_Init+0x260>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d007      	beq.n	8007692 <HAL_GPIO_Init+0x212>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	4a17      	ldr	r2, [pc, #92]	; (80076e4 <HAL_GPIO_Init+0x264>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d101      	bne.n	800768e <HAL_GPIO_Init+0x20e>
 800768a:	2309      	movs	r3, #9
 800768c:	e02d      	b.n	80076ea <HAL_GPIO_Init+0x26a>
 800768e:	230a      	movs	r3, #10
 8007690:	e02b      	b.n	80076ea <HAL_GPIO_Init+0x26a>
 8007692:	2308      	movs	r3, #8
 8007694:	e029      	b.n	80076ea <HAL_GPIO_Init+0x26a>
 8007696:	2307      	movs	r3, #7
 8007698:	e027      	b.n	80076ea <HAL_GPIO_Init+0x26a>
 800769a:	2306      	movs	r3, #6
 800769c:	e025      	b.n	80076ea <HAL_GPIO_Init+0x26a>
 800769e:	2305      	movs	r3, #5
 80076a0:	e023      	b.n	80076ea <HAL_GPIO_Init+0x26a>
 80076a2:	2304      	movs	r3, #4
 80076a4:	e021      	b.n	80076ea <HAL_GPIO_Init+0x26a>
 80076a6:	2303      	movs	r3, #3
 80076a8:	e01f      	b.n	80076ea <HAL_GPIO_Init+0x26a>
 80076aa:	2302      	movs	r3, #2
 80076ac:	e01d      	b.n	80076ea <HAL_GPIO_Init+0x26a>
 80076ae:	2301      	movs	r3, #1
 80076b0:	e01b      	b.n	80076ea <HAL_GPIO_Init+0x26a>
 80076b2:	bf00      	nop
 80076b4:	58000080 	.word	0x58000080
 80076b8:	58024400 	.word	0x58024400
 80076bc:	58000400 	.word	0x58000400
 80076c0:	58020000 	.word	0x58020000
 80076c4:	58020400 	.word	0x58020400
 80076c8:	58020800 	.word	0x58020800
 80076cc:	58020c00 	.word	0x58020c00
 80076d0:	58021000 	.word	0x58021000
 80076d4:	58021400 	.word	0x58021400
 80076d8:	58021800 	.word	0x58021800
 80076dc:	58021c00 	.word	0x58021c00
 80076e0:	58022000 	.word	0x58022000
 80076e4:	58022400 	.word	0x58022400
 80076e8:	2300      	movs	r3, #0
 80076ea:	69fa      	ldr	r2, [r7, #28]
 80076ec:	f002 0203 	and.w	r2, r2, #3
 80076f0:	0092      	lsls	r2, r2, #2
 80076f2:	4093      	lsls	r3, r2
 80076f4:	69ba      	ldr	r2, [r7, #24]
 80076f6:	4313      	orrs	r3, r2
 80076f8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80076fa:	4938      	ldr	r1, [pc, #224]	; (80077dc <HAL_GPIO_Init+0x35c>)
 80076fc:	69fb      	ldr	r3, [r7, #28]
 80076fe:	089b      	lsrs	r3, r3, #2
 8007700:	3302      	adds	r3, #2
 8007702:	69ba      	ldr	r2, [r7, #24]
 8007704:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007708:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	43db      	mvns	r3, r3
 8007714:	69ba      	ldr	r2, [r7, #24]
 8007716:	4013      	ands	r3, r2
 8007718:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007722:	2b00      	cmp	r3, #0
 8007724:	d003      	beq.n	800772e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007726:	69ba      	ldr	r2, [r7, #24]
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	4313      	orrs	r3, r2
 800772c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800772e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007732:	69bb      	ldr	r3, [r7, #24]
 8007734:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007736:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	43db      	mvns	r3, r3
 8007742:	69ba      	ldr	r2, [r7, #24]
 8007744:	4013      	ands	r3, r2
 8007746:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007750:	2b00      	cmp	r3, #0
 8007752:	d003      	beq.n	800775c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007754:	69ba      	ldr	r2, [r7, #24]
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	4313      	orrs	r3, r2
 800775a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800775c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007760:	69bb      	ldr	r3, [r7, #24]
 8007762:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	43db      	mvns	r3, r3
 800776e:	69ba      	ldr	r2, [r7, #24]
 8007770:	4013      	ands	r3, r2
 8007772:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800777c:	2b00      	cmp	r3, #0
 800777e:	d003      	beq.n	8007788 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007780:	69ba      	ldr	r2, [r7, #24]
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	4313      	orrs	r3, r2
 8007786:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	69ba      	ldr	r2, [r7, #24]
 800778c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	43db      	mvns	r3, r3
 8007798:	69ba      	ldr	r2, [r7, #24]
 800779a:	4013      	ands	r3, r2
 800779c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d003      	beq.n	80077b2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80077aa:	69ba      	ldr	r2, [r7, #24]
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	4313      	orrs	r3, r2
 80077b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	69ba      	ldr	r2, [r7, #24]
 80077b6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80077b8:	69fb      	ldr	r3, [r7, #28]
 80077ba:	3301      	adds	r3, #1
 80077bc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	69fb      	ldr	r3, [r7, #28]
 80077c4:	fa22 f303 	lsr.w	r3, r2, r3
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	f47f ae63 	bne.w	8007494 <HAL_GPIO_Init+0x14>
  }
}
 80077ce:	bf00      	nop
 80077d0:	bf00      	nop
 80077d2:	3724      	adds	r7, #36	; 0x24
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr
 80077dc:	58000400 	.word	0x58000400

080077e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b085      	sub	sp, #20
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	460b      	mov	r3, r1
 80077ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	691a      	ldr	r2, [r3, #16]
 80077f0:	887b      	ldrh	r3, [r7, #2]
 80077f2:	4013      	ands	r3, r2
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d002      	beq.n	80077fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80077f8:	2301      	movs	r3, #1
 80077fa:	73fb      	strb	r3, [r7, #15]
 80077fc:	e001      	b.n	8007802 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80077fe:	2300      	movs	r3, #0
 8007800:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007802:	7bfb      	ldrb	r3, [r7, #15]
}
 8007804:	4618      	mov	r0, r3
 8007806:	3714      	adds	r7, #20
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr

08007810 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007810:	b480      	push	{r7}
 8007812:	b083      	sub	sp, #12
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	460b      	mov	r3, r1
 800781a:	807b      	strh	r3, [r7, #2]
 800781c:	4613      	mov	r3, r2
 800781e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007820:	787b      	ldrb	r3, [r7, #1]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d003      	beq.n	800782e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007826:	887a      	ldrh	r2, [r7, #2]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800782c:	e003      	b.n	8007836 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800782e:	887b      	ldrh	r3, [r7, #2]
 8007830:	041a      	lsls	r2, r3, #16
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	619a      	str	r2, [r3, #24]
}
 8007836:	bf00      	nop
 8007838:	370c      	adds	r7, #12
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr

08007842 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007842:	b480      	push	{r7}
 8007844:	b085      	sub	sp, #20
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
 800784a:	460b      	mov	r3, r1
 800784c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	695b      	ldr	r3, [r3, #20]
 8007852:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007854:	887a      	ldrh	r2, [r7, #2]
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	4013      	ands	r3, r2
 800785a:	041a      	lsls	r2, r3, #16
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	43d9      	mvns	r1, r3
 8007860:	887b      	ldrh	r3, [r7, #2]
 8007862:	400b      	ands	r3, r1
 8007864:	431a      	orrs	r2, r3
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	619a      	str	r2, [r3, #24]
}
 800786a:	bf00      	nop
 800786c:	3714      	adds	r7, #20
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr

08007876 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007876:	b580      	push	{r7, lr}
 8007878:	b082      	sub	sp, #8
 800787a:	af00      	add	r7, sp, #0
 800787c:	4603      	mov	r3, r0
 800787e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8007880:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007884:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007888:	88fb      	ldrh	r3, [r7, #6]
 800788a:	4013      	ands	r3, r2
 800788c:	2b00      	cmp	r3, #0
 800788e:	d008      	beq.n	80078a2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007890:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007894:	88fb      	ldrh	r3, [r7, #6]
 8007896:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800789a:	88fb      	ldrh	r3, [r7, #6]
 800789c:	4618      	mov	r0, r3
 800789e:	f000 f804 	bl	80078aa <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80078a2:	bf00      	nop
 80078a4:	3708      	adds	r7, #8
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}

080078aa <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80078aa:	b480      	push	{r7}
 80078ac:	b083      	sub	sp, #12
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	4603      	mov	r3, r0
 80078b2:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80078b4:	bf00      	nop
 80078b6:	370c      	adds	r7, #12
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr

080078c0 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b086      	sub	sp, #24
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d101      	bne.n	80078d2 <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 80078ce:	2301      	movs	r3, #1
 80078d0:	e0bd      	b.n	8007a4e <HAL_HRTIM_Init+0x18e>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2202      	movs	r2, #2
 80078d6:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2200      	movs	r2, #0
 80078e6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2200      	movs	r2, #0
 80078ee:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2200      	movs	r2, #0
 80078f6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2200      	movs	r2, #0
 80078fe:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2200      	movs	r2, #0
 8007906:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	f003 0301 	and.w	r3, r3, #1
 8007912:	2b00      	cmp	r3, #0
 8007914:	d031      	beq.n	800797a <HAL_HRTIM_Init+0xba>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a4f      	ldr	r2, [pc, #316]	; (8007a58 <HAL_HRTIM_Init+0x198>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d10e      	bne.n	800793e <HAL_HRTIM_Init+0x7e>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8007920:	4b4e      	ldr	r3, [pc, #312]	; (8007a5c <HAL_HRTIM_Init+0x19c>)
 8007922:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007926:	4a4d      	ldr	r2, [pc, #308]	; (8007a5c <HAL_HRTIM_Init+0x19c>)
 8007928:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800792c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007930:	4b4a      	ldr	r3, [pc, #296]	; (8007a5c <HAL_HRTIM_Init+0x19c>)
 8007932:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007936:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800793a:	60fb      	str	r3, [r7, #12]
 800793c:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800794c:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	691b      	ldr	r3, [r3, #16]
 8007952:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007956:	693a      	ldr	r2, [r7, #16]
 8007958:	4313      	orrs	r3, r2
 800795a:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007962:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	695b      	ldr	r3, [r3, #20]
 8007968:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800796c:	693a      	ldr	r2, [r7, #16]
 800796e:	4313      	orrs	r3, r2
 8007970:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	693a      	ldr	r2, [r7, #16]
 8007978:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f7fb fa60 	bl	8002e40 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	f003 0302 	and.w	r3, r3, #2
 8007988:	2b00      	cmp	r3, #0
 800798a:	d012      	beq.n	80079b2 <HAL_HRTIM_Init+0xf2>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800799a:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	68db      	ldr	r3, [r3, #12]
 80079a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079a4:	693a      	ldr	r2, [r7, #16]
 80079a6:	4313      	orrs	r3, r2
 80079a8:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	693a      	ldr	r2, [r7, #16]
 80079b0:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2201      	movs	r2, #1
 80079b6:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2200      	movs	r2, #0
 80079be:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 80079c2:	2300      	movs	r3, #0
 80079c4:	75fb      	strb	r3, [r7, #23]
 80079c6:	e03e      	b.n	8007a46 <HAL_HRTIM_Init+0x186>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 80079c8:	7dfa      	ldrb	r2, [r7, #23]
 80079ca:	6879      	ldr	r1, [r7, #4]
 80079cc:	4613      	mov	r3, r2
 80079ce:	00db      	lsls	r3, r3, #3
 80079d0:	1a9b      	subs	r3, r3, r2
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	440b      	add	r3, r1
 80079d6:	3318      	adds	r3, #24
 80079d8:	2200      	movs	r2, #0
 80079da:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 80079dc:	7dfa      	ldrb	r2, [r7, #23]
 80079de:	6879      	ldr	r1, [r7, #4]
 80079e0:	4613      	mov	r3, r2
 80079e2:	00db      	lsls	r3, r3, #3
 80079e4:	1a9b      	subs	r3, r3, r2
 80079e6:	009b      	lsls	r3, r3, #2
 80079e8:	440b      	add	r3, r1
 80079ea:	331c      	adds	r3, #28
 80079ec:	2200      	movs	r2, #0
 80079ee:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 80079f0:	7dfa      	ldrb	r2, [r7, #23]
 80079f2:	6879      	ldr	r1, [r7, #4]
 80079f4:	4613      	mov	r3, r2
 80079f6:	00db      	lsls	r3, r3, #3
 80079f8:	1a9b      	subs	r3, r3, r2
 80079fa:	009b      	lsls	r3, r3, #2
 80079fc:	440b      	add	r3, r1
 80079fe:	3320      	adds	r3, #32
 8007a00:	2200      	movs	r2, #0
 8007a02:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8007a04:	7dfa      	ldrb	r2, [r7, #23]
 8007a06:	6879      	ldr	r1, [r7, #4]
 8007a08:	4613      	mov	r3, r2
 8007a0a:	00db      	lsls	r3, r3, #3
 8007a0c:	1a9b      	subs	r3, r3, r2
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	440b      	add	r3, r1
 8007a12:	3324      	adds	r3, #36	; 0x24
 8007a14:	2200      	movs	r2, #0
 8007a16:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8007a18:	7dfa      	ldrb	r2, [r7, #23]
 8007a1a:	6879      	ldr	r1, [r7, #4]
 8007a1c:	4613      	mov	r3, r2
 8007a1e:	00db      	lsls	r3, r3, #3
 8007a20:	1a9b      	subs	r3, r3, r2
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	440b      	add	r3, r1
 8007a26:	3328      	adds	r3, #40	; 0x28
 8007a28:	2200      	movs	r2, #0
 8007a2a:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8007a2c:	7dfa      	ldrb	r2, [r7, #23]
 8007a2e:	6879      	ldr	r1, [r7, #4]
 8007a30:	4613      	mov	r3, r2
 8007a32:	00db      	lsls	r3, r3, #3
 8007a34:	1a9b      	subs	r3, r3, r2
 8007a36:	009b      	lsls	r3, r3, #2
 8007a38:	440b      	add	r3, r1
 8007a3a:	3330      	adds	r3, #48	; 0x30
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8007a40:	7dfb      	ldrb	r3, [r7, #23]
 8007a42:	3301      	adds	r3, #1
 8007a44:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 8007a46:	7dfb      	ldrb	r3, [r7, #23]
 8007a48:	2b05      	cmp	r3, #5
 8007a4a:	d9bd      	bls.n	80079c8 <HAL_HRTIM_Init+0x108>
  }

  return HAL_OK;
 8007a4c:	2300      	movs	r3, #0
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3718      	adds	r7, #24
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}
 8007a56:	bf00      	nop
 8007a58:	40017400 	.word	0x40017400
 8007a5c:	58024400 	.word	0x58024400

08007a60 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b084      	sub	sp, #16
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	60f8      	str	r0, [r7, #12]
 8007a68:	60b9      	str	r1, [r7, #8]
 8007a6a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	2b02      	cmp	r3, #2
 8007a76:	d101      	bne.n	8007a7c <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8007a78:	2302      	movs	r3, #2
 8007a7a:	e015      	b.n	8007aa8 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2202      	movs	r2, #2
 8007a80:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	2b05      	cmp	r3, #5
 8007a88:	d104      	bne.n	8007a94 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8007a8a:	6879      	ldr	r1, [r7, #4]
 8007a8c:	68f8      	ldr	r0, [r7, #12]
 8007a8e:	f000 fc4d 	bl	800832c <HRTIM_MasterBase_Config>
 8007a92:	e004      	b.n	8007a9e <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	68b9      	ldr	r1, [r7, #8]
 8007a98:	68f8      	ldr	r0, [r7, #12]
 8007a9a:	f000 fc76 	bl	800838a <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  return HAL_OK;
 8007aa6:	2300      	movs	r3, #0
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3710      	adds	r7, #16
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b084      	sub	sp, #16
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	60f8      	str	r0, [r7, #12]
 8007ab8:	60b9      	str	r1, [r7, #8]
 8007aba:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8007ac2:	b2db      	uxtb	r3, r3
 8007ac4:	2b02      	cmp	r3, #2
 8007ac6:	d101      	bne.n	8007acc <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 8007ac8:	2302      	movs	r3, #2
 8007aca:	e05f      	b.n	8007b8c <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	d101      	bne.n	8007ada <HAL_HRTIM_WaveformTimerConfig+0x2a>
 8007ad6:	2302      	movs	r3, #2
 8007ad8:	e058      	b.n	8007b8c <HAL_HRTIM_WaveformTimerConfig+0xdc>
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2201      	movs	r2, #1
 8007ade:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2202      	movs	r2, #2
 8007ae6:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	2b05      	cmp	r3, #5
 8007aee:	d104      	bne.n	8007afa <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8007af0:	6879      	ldr	r1, [r7, #4]
 8007af2:	68f8      	ldr	r0, [r7, #12]
 8007af4:	f000 fc89 	bl	800840a <HRTIM_MasterWaveform_Config>
 8007af8:	e004      	b.n	8007b04 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 8007afa:	687a      	ldr	r2, [r7, #4]
 8007afc:	68b9      	ldr	r1, [r7, #8]
 8007afe:	68f8      	ldr	r0, [r7, #12]
 8007b00:	f000 fcea 	bl	80084d8 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6819      	ldr	r1, [r3, #0]
 8007b08:	68f8      	ldr	r0, [r7, #12]
 8007b0a:	68ba      	ldr	r2, [r7, #8]
 8007b0c:	4613      	mov	r3, r2
 8007b0e:	00db      	lsls	r3, r3, #3
 8007b10:	1a9b      	subs	r3, r3, r2
 8007b12:	009b      	lsls	r3, r3, #2
 8007b14:	4403      	add	r3, r0
 8007b16:	3320      	adds	r3, #32
 8007b18:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6859      	ldr	r1, [r3, #4]
 8007b1e:	68f8      	ldr	r0, [r7, #12]
 8007b20:	68ba      	ldr	r2, [r7, #8]
 8007b22:	4613      	mov	r3, r2
 8007b24:	00db      	lsls	r3, r3, #3
 8007b26:	1a9b      	subs	r3, r3, r2
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	4403      	add	r3, r0
 8007b2c:	3324      	adds	r3, #36	; 0x24
 8007b2e:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6899      	ldr	r1, [r3, #8]
 8007b34:	68f8      	ldr	r0, [r7, #12]
 8007b36:	68ba      	ldr	r2, [r7, #8]
 8007b38:	4613      	mov	r3, r2
 8007b3a:	00db      	lsls	r3, r3, #3
 8007b3c:	1a9b      	subs	r3, r3, r2
 8007b3e:	009b      	lsls	r3, r3, #2
 8007b40:	4403      	add	r3, r0
 8007b42:	3328      	adds	r3, #40	; 0x28
 8007b44:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	68d9      	ldr	r1, [r3, #12]
 8007b4a:	68f8      	ldr	r0, [r7, #12]
 8007b4c:	68ba      	ldr	r2, [r7, #8]
 8007b4e:	4613      	mov	r3, r2
 8007b50:	00db      	lsls	r3, r3, #3
 8007b52:	1a9b      	subs	r3, r3, r2
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	4403      	add	r3, r0
 8007b58:	332c      	adds	r3, #44	; 0x2c
 8007b5a:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6919      	ldr	r1, [r3, #16]
 8007b60:	68f8      	ldr	r0, [r7, #12]
 8007b62:	68ba      	ldr	r2, [r7, #8]
 8007b64:	4613      	mov	r3, r2
 8007b66:	00db      	lsls	r3, r3, #3
 8007b68:	1a9b      	subs	r3, r3, r2
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	4403      	add	r3, r0
 8007b6e:	3330      	adds	r3, #48	; 0x30
 8007b70:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8007b72:	68b9      	ldr	r1, [r7, #8]
 8007b74:	68f8      	ldr	r0, [r7, #12]
 8007b76:	f000 fec7 	bl	8008908 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2200      	movs	r2, #0
 8007b86:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8007b8a:	2300      	movs	r3, #0
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3710      	adds	r7, #16
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  const HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b085      	sub	sp, #20
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	60f8      	str	r0, [r7, #12]
 8007b9c:	60b9      	str	r1, [r7, #8]
 8007b9e:	607a      	str	r2, [r7, #4]
 8007ba0:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8007ba8:	b2db      	uxtb	r3, r3
 8007baa:	2b02      	cmp	r3, #2
 8007bac:	d101      	bne.n	8007bb2 <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 8007bae:	2302      	movs	r3, #2
 8007bb0:	e157      	b.n	8007e62 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d101      	bne.n	8007bc0 <HAL_HRTIM_WaveformCompareConfig+0x2c>
 8007bbc:	2302      	movs	r3, #2
 8007bbe:	e150      	b.n	8007e62 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2202      	movs	r2, #2
 8007bcc:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	2b05      	cmp	r3, #5
 8007bd4:	d140      	bne.n	8007c58 <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	3b01      	subs	r3, #1
 8007bda:	2b07      	cmp	r3, #7
 8007bdc:	d82a      	bhi.n	8007c34 <HAL_HRTIM_WaveformCompareConfig+0xa0>
 8007bde:	a201      	add	r2, pc, #4	; (adr r2, 8007be4 <HAL_HRTIM_WaveformCompareConfig+0x50>)
 8007be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007be4:	08007c05 	.word	0x08007c05
 8007be8:	08007c11 	.word	0x08007c11
 8007bec:	08007c35 	.word	0x08007c35
 8007bf0:	08007c1d 	.word	0x08007c1d
 8007bf4:	08007c35 	.word	0x08007c35
 8007bf8:	08007c35 	.word	0x08007c35
 8007bfc:	08007c35 	.word	0x08007c35
 8007c00:	08007c29 	.word	0x08007c29
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	683a      	ldr	r2, [r7, #0]
 8007c0a:	6812      	ldr	r2, [r2, #0]
 8007c0c:	61da      	str	r2, [r3, #28]
        break;
 8007c0e:	e01a      	b.n	8007c46 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	683a      	ldr	r2, [r7, #0]
 8007c16:	6812      	ldr	r2, [r2, #0]
 8007c18:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 8007c1a:	e014      	b.n	8007c46 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	683a      	ldr	r2, [r7, #0]
 8007c22:	6812      	ldr	r2, [r2, #0]
 8007c24:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 8007c26:	e00e      	b.n	8007c46 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	683a      	ldr	r2, [r7, #0]
 8007c2e:	6812      	ldr	r2, [r2, #0]
 8007c30:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 8007c32:	e008      	b.n	8007c46 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2207      	movs	r2, #7
 8007c38:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

        break;
 8007c44:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	2b07      	cmp	r3, #7
 8007c50:	f040 80fe 	bne.w	8007e50 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 8007c54:	2301      	movs	r3, #1
 8007c56:	e104      	b.n	8007e62 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	3b01      	subs	r3, #1
 8007c5c:	2b07      	cmp	r3, #7
 8007c5e:	f200 80e3 	bhi.w	8007e28 <HAL_HRTIM_WaveformCompareConfig+0x294>
 8007c62:	a201      	add	r2, pc, #4	; (adr r2, 8007c68 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 8007c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c68:	08007c89 	.word	0x08007c89
 8007c6c:	08007c9d 	.word	0x08007c9d
 8007c70:	08007e29 	.word	0x08007e29
 8007c74:	08007d59 	.word	0x08007d59
 8007c78:	08007e29 	.word	0x08007e29
 8007c7c:	08007e29 	.word	0x08007e29
 8007c80:	08007e29 	.word	0x08007e29
 8007c84:	08007d6d 	.word	0x08007d6d
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	6819      	ldr	r1, [r3, #0]
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	681a      	ldr	r2, [r3, #0]
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	01db      	lsls	r3, r3, #7
 8007c94:	440b      	add	r3, r1
 8007c96:	339c      	adds	r3, #156	; 0x9c
 8007c98:	601a      	str	r2, [r3, #0]
        break;
 8007c9a:	e0d1      	b.n	8007e40 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	6819      	ldr	r1, [r3, #0]
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	01db      	lsls	r3, r3, #7
 8007ca8:	440b      	add	r3, r1
 8007caa:	33a4      	adds	r3, #164	; 0xa4
 8007cac:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d03f      	beq.n	8007d36 <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	3301      	adds	r3, #1
 8007cbe:	01db      	lsls	r3, r3, #7
 8007cc0:	4413      	add	r3, r2
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	68fa      	ldr	r2, [r7, #12]
 8007cc6:	6811      	ldr	r1, [r2, #0]
 8007cc8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	3301      	adds	r3, #1
 8007cd0:	01db      	lsls	r3, r3, #7
 8007cd2:	440b      	add	r3, r1
 8007cd4:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	3301      	adds	r3, #1
 8007cde:	01db      	lsls	r3, r3, #7
 8007ce0:	4413      	add	r3, r2
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	68f9      	ldr	r1, [r7, #12]
 8007cea:	6809      	ldr	r1, [r1, #0]
 8007cec:	431a      	orrs	r2, r3
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	3301      	adds	r3, #1
 8007cf2:	01db      	lsls	r3, r3, #7
 8007cf4:	440b      	add	r3, r1
 8007cf6:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d00:	d109      	bne.n	8007d16 <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	6819      	ldr	r1, [r3, #0]
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	689a      	ldr	r2, [r3, #8]
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	01db      	lsls	r3, r3, #7
 8007d0e:	440b      	add	r3, r1
 8007d10:	339c      	adds	r3, #156	; 0x9c
 8007d12:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 8007d14:	e091      	b.n	8007e3a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d1e:	f040 808c 	bne.w	8007e3a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	6819      	ldr	r1, [r3, #0]
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	689a      	ldr	r2, [r3, #8]
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	01db      	lsls	r3, r3, #7
 8007d2e:	440b      	add	r3, r1
 8007d30:	33a8      	adds	r3, #168	; 0xa8
 8007d32:	601a      	str	r2, [r3, #0]
         break;
 8007d34:	e081      	b.n	8007e3a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	3301      	adds	r3, #1
 8007d3e:	01db      	lsls	r3, r3, #7
 8007d40:	4413      	add	r3, r2
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	68fa      	ldr	r2, [r7, #12]
 8007d46:	6811      	ldr	r1, [r2, #0]
 8007d48:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	3301      	adds	r3, #1
 8007d50:	01db      	lsls	r3, r3, #7
 8007d52:	440b      	add	r3, r1
 8007d54:	601a      	str	r2, [r3, #0]
         break;
 8007d56:	e070      	b.n	8007e3a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	6819      	ldr	r1, [r3, #0]
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	681a      	ldr	r2, [r3, #0]
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	01db      	lsls	r3, r3, #7
 8007d64:	440b      	add	r3, r1
 8007d66:	33a8      	adds	r3, #168	; 0xa8
 8007d68:	601a      	str	r2, [r3, #0]
        break;
 8007d6a:	e069      	b.n	8007e40 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	6819      	ldr	r1, [r3, #0]
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	01db      	lsls	r3, r3, #7
 8007d78:	440b      	add	r3, r1
 8007d7a:	33ac      	adds	r3, #172	; 0xac
 8007d7c:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d03f      	beq.n	8007e06 <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681a      	ldr	r2, [r3, #0]
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	3301      	adds	r3, #1
 8007d8e:	01db      	lsls	r3, r3, #7
 8007d90:	4413      	add	r3, r2
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	68fa      	ldr	r2, [r7, #12]
 8007d96:	6811      	ldr	r1, [r2, #0]
 8007d98:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	3301      	adds	r3, #1
 8007da0:	01db      	lsls	r3, r3, #7
 8007da2:	440b      	add	r3, r1
 8007da4:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681a      	ldr	r2, [r3, #0]
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	3301      	adds	r3, #1
 8007dae:	01db      	lsls	r3, r3, #7
 8007db0:	4413      	add	r3, r2
 8007db2:	681a      	ldr	r2, [r3, #0]
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	009b      	lsls	r3, r3, #2
 8007dba:	68f9      	ldr	r1, [r7, #12]
 8007dbc:	6809      	ldr	r1, [r1, #0]
 8007dbe:	431a      	orrs	r2, r3
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	3301      	adds	r3, #1
 8007dc4:	01db      	lsls	r3, r3, #7
 8007dc6:	440b      	add	r3, r1
 8007dc8:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dd2:	d109      	bne.n	8007de8 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	6819      	ldr	r1, [r3, #0]
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	689a      	ldr	r2, [r3, #8]
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	01db      	lsls	r3, r3, #7
 8007de0:	440b      	add	r3, r1
 8007de2:	339c      	adds	r3, #156	; 0x9c
 8007de4:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 8007de6:	e02a      	b.n	8007e3e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007df0:	d125      	bne.n	8007e3e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	6819      	ldr	r1, [r3, #0]
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	689a      	ldr	r2, [r3, #8]
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	01db      	lsls	r3, r3, #7
 8007dfe:	440b      	add	r3, r1
 8007e00:	33a8      	adds	r3, #168	; 0xa8
 8007e02:	601a      	str	r2, [r3, #0]
         break;
 8007e04:	e01b      	b.n	8007e3e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681a      	ldr	r2, [r3, #0]
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	3301      	adds	r3, #1
 8007e0e:	01db      	lsls	r3, r3, #7
 8007e10:	4413      	add	r3, r2
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	68fa      	ldr	r2, [r7, #12]
 8007e16:	6811      	ldr	r1, [r2, #0]
 8007e18:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	3301      	adds	r3, #1
 8007e20:	01db      	lsls	r3, r3, #7
 8007e22:	440b      	add	r3, r1
 8007e24:	601a      	str	r2, [r3, #0]
         break;
 8007e26:	e00a      	b.n	8007e3e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2207      	movs	r2, #7
 8007e2c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2200      	movs	r2, #0
 8007e34:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      break;
 8007e38:	e002      	b.n	8007e40 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8007e3a:	bf00      	nop
 8007e3c:	e000      	b.n	8007e40 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8007e3e:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8007e46:	b2db      	uxtb	r3, r3
 8007e48:	2b07      	cmp	r3, #7
 8007e4a:	d101      	bne.n	8007e50 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	e008      	b.n	8007e62 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2201      	movs	r2, #1
 8007e54:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8007e60:	2300      	movs	r3, #0
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3714      	adds	r7, #20
 8007e66:	46bd      	mov	sp, r7
 8007e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6c:	4770      	bx	lr
 8007e6e:	bf00      	nop

08007e70 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b084      	sub	sp, #16
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	60f8      	str	r0, [r7, #12]
 8007e78:	60b9      	str	r1, [r7, #8]
 8007e7a:	607a      	str	r2, [r7, #4]
 8007e7c:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8007e84:	b2db      	uxtb	r3, r3
 8007e86:	2b02      	cmp	r3, #2
 8007e88:	d101      	bne.n	8007e8e <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 8007e8a:	2302      	movs	r3, #2
 8007e8c:	e01d      	b.n	8007eca <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d101      	bne.n	8007e9c <HAL_HRTIM_WaveformOutputConfig+0x2c>
 8007e98:	2302      	movs	r3, #2
 8007e9a:	e016      	b.n	8007eca <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2202      	movs	r2, #2
 8007ea8:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	687a      	ldr	r2, [r7, #4]
 8007eb0:	68b9      	ldr	r1, [r7, #8]
 8007eb2:	68f8      	ldr	r0, [r7, #12]
 8007eb4:	f000 fc50 	bl	8008758 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2201      	movs	r2, #1
 8007ebc:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8007ec8:	2300      	movs	r3, #0
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3710      	adds	r7, #16
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}

08007ed2 <HAL_HRTIM_WaveformOutputStart>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t OutputsToStart)
{
 8007ed2:	b480      	push	{r7}
 8007ed4:	b083      	sub	sp, #12
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	6078      	str	r0, [r7, #4]
 8007eda:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStart));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d101      	bne.n	8007eea <HAL_HRTIM_WaveformOutputStart+0x18>
 8007ee6:	2302      	movs	r3, #2
 8007ee8:	e01a      	b.n	8007f20 <HAL_HRTIM_WaveformOutputStart+0x4e>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2201      	movs	r2, #1
 8007eee:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2202      	movs	r2, #2
 8007ef6:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f8d3 1394 	ldr.w	r1, [r3, #916]	; 0x394
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	683a      	ldr	r2, [r7, #0]
 8007f08:	430a      	orrs	r2, r1
 8007f0a:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2201      	movs	r2, #1
 8007f12:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8007f1e:	2300      	movs	r3, #0
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	370c      	adds	r7, #12
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr

08007f2c <HAL_HRTIM_WaveformOutputStop>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStop(HRTIM_HandleTypeDef * hhrtim,
                                               uint32_t OutputsToStop)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b083      	sub	sp, #12
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStop));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d101      	bne.n	8007f44 <HAL_HRTIM_WaveformOutputStop+0x18>
 8007f40:	2302      	movs	r3, #2
 8007f42:	e01a      	b.n	8007f7a <HAL_HRTIM_WaveformOutputStop+0x4e>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2201      	movs	r2, #1
 8007f48:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2202      	movs	r2, #2
 8007f50:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.ODISR |= (OutputsToStop);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f8d3 1398 	ldr.w	r1, [r3, #920]	; 0x398
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	683a      	ldr	r2, [r7, #0]
 8007f62:	430a      	orrs	r2, r1
 8007f64:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2200      	movs	r2, #0
 8007f74:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8007f78:	2300      	movs	r3, #0
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	370c      	adds	r7, #12
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f84:	4770      	bx	lr
	...

08007f88 <HAL_HRTIM_WaveformCountStart_IT>:
  *       function.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart_IT(HRTIM_HandleTypeDef * hhrtim,
                                                    uint32_t Timers)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b085      	sub	sp, #20
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d101      	bne.n	8007fa0 <HAL_HRTIM_WaveformCountStart_IT+0x18>
 8007f9c:	2302      	movs	r3, #2
 8007f9e:	e05b      	b.n	8008058 <HAL_HRTIM_WaveformCountStart_IT+0xd0>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2202      	movs	r2, #2
 8007fac:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable HRTIM interrupts (if required) */
  __HAL_HRTIM_ENABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f8d3 1390 	ldr.w	r1, [r3, #912]	; 0x390
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	685a      	ldr	r2, [r3, #4]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	430a      	orrs	r2, r1
 8007fc2:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390

  /* Enable master timer related interrupts (if required) */
  if ((Timers & HRTIM_TIMERID_MASTER) != 0U)
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d009      	beq.n	8007fe4 <HAL_HRTIM_WaveformCountStart_IT+0x5c>
  {
    __HAL_HRTIM_MASTER_ENABLE_IT(hhrtim,
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	68d9      	ldr	r1, [r3, #12]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	430a      	orrs	r2, r1
 8007fe2:	60da      	str	r2, [r3, #12]
                                 hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].InterruptRequests);
  }

  /* Enable timing unit related interrupts (if required) */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	73fb      	strb	r3, [r7, #15]
 8007fe8:	e022      	b.n	8008030 <HAL_HRTIM_WaveformCountStart_IT+0xa8>
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 8007fea:	7bfb      	ldrb	r3, [r7, #15]
 8007fec:	4a1d      	ldr	r2, [pc, #116]	; (8008064 <HAL_HRTIM_WaveformCountStart_IT+0xdc>)
 8007fee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	4013      	ands	r3, r2
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d017      	beq.n	800802a <HAL_HRTIM_WaveformCountStart_IT+0xa2>
    {
      __HAL_HRTIM_TIMER_ENABLE_IT(hhrtim,
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681a      	ldr	r2, [r3, #0]
 8007ffe:	7bfb      	ldrb	r3, [r7, #15]
 8008000:	01db      	lsls	r3, r3, #7
 8008002:	4413      	add	r3, r2
 8008004:	338c      	adds	r3, #140	; 0x8c
 8008006:	6818      	ldr	r0, [r3, #0]
 8008008:	7bfa      	ldrb	r2, [r7, #15]
 800800a:	6879      	ldr	r1, [r7, #4]
 800800c:	4613      	mov	r3, r2
 800800e:	00db      	lsls	r3, r3, #3
 8008010:	1a9b      	subs	r3, r3, r2
 8008012:	009b      	lsls	r3, r3, #2
 8008014:	440b      	add	r3, r1
 8008016:	3320      	adds	r3, #32
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6819      	ldr	r1, [r3, #0]
 800801e:	7bfb      	ldrb	r3, [r7, #15]
 8008020:	4302      	orrs	r2, r0
 8008022:	01db      	lsls	r3, r3, #7
 8008024:	440b      	add	r3, r1
 8008026:	338c      	adds	r3, #140	; 0x8c
 8008028:	601a      	str	r2, [r3, #0]
       timer_idx++)
 800802a:	7bfb      	ldrb	r3, [r7, #15]
 800802c:	3301      	adds	r3, #1
 800802e:	73fb      	strb	r3, [r7, #15]
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
 8008030:	7bfb      	ldrb	r3, [r7, #15]
 8008032:	2b04      	cmp	r3, #4
 8008034:	d9d9      	bls.n	8007fea <HAL_HRTIM_WaveformCountStart_IT+0x62>
                                  hhrtim->TimerParam[timer_idx].InterruptRequests);
    }
  }

  /* Enable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	6819      	ldr	r1, [r3, #0]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	683a      	ldr	r2, [r7, #0]
 8008042:	430a      	orrs	r2, r1
 8008044:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2201      	movs	r2, #1
 800804a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2200      	movs	r2, #0
 8008052:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;}
 8008056:	2300      	movs	r3, #0
 8008058:	4618      	mov	r0, r3
 800805a:	3714      	adds	r7, #20
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr
 8008064:	2000002c 	.word	0x2000002c

08008068 <HAL_HRTIM_WaveformCountStop_IT>:
  * @note The counter of a timer is stopped only if all timer outputs are disabled
  * @note All enabled timer related interrupts are disabled.
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStop_IT(HRTIM_HandleTypeDef * hhrtim,
                                                   uint32_t Timers)
{
 8008068:	b480      	push	{r7}
 800806a:	b085      	sub	sp, #20
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	6039      	str	r1, [r7, #0]
  /* ++ WA */
  __IO uint32_t delai = (uint32_t)(0x17FU);
 8008072:	f240 137f 	movw	r3, #383	; 0x17f
 8008076:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800807e:	2b01      	cmp	r3, #1
 8008080:	d101      	bne.n	8008086 <HAL_HRTIM_WaveformCountStop_IT+0x1e>
 8008082:	2302      	movs	r3, #2
 8008084:	e065      	b.n	8008152 <HAL_HRTIM_WaveformCountStop_IT+0xea>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2201      	movs	r2, #1
 800808a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2202      	movs	r2, #2
 8008092:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Disable HRTIM interrupts (if required) */
  __HAL_HRTIM_DISABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f8d3 1390 	ldr.w	r1, [r3, #912]	; 0x390
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	43da      	mvns	r2, r3
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	400a      	ands	r2, r1
 80080aa:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390

  /* Disable master timer related interrupts (if required) */
  if ((Timers & HRTIM_TIMERID_MASTER) != 0U)
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d00a      	beq.n	80080ce <HAL_HRTIM_WaveformCountStop_IT+0x66>
  {
    /* Interrupts enable flag must be cleared one by one */
    __HAL_HRTIM_MASTER_DISABLE_IT(hhrtim, hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].InterruptRequests);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	68d9      	ldr	r1, [r3, #12]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80080c4:	43da      	mvns	r2, r3
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	400a      	ands	r2, r1
 80080cc:	60da      	str	r2, [r3, #12]
  }

  /* Disable timing unit related interrupts (if required) */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 80080ce:	2300      	movs	r3, #0
 80080d0:	73fb      	strb	r3, [r7, #15]
 80080d2:	e023      	b.n	800811c <HAL_HRTIM_WaveformCountStop_IT+0xb4>
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 80080d4:	7bfb      	ldrb	r3, [r7, #15]
 80080d6:	4a22      	ldr	r2, [pc, #136]	; (8008160 <HAL_HRTIM_WaveformCountStop_IT+0xf8>)
 80080d8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	4013      	ands	r3, r2
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d018      	beq.n	8008116 <HAL_HRTIM_WaveformCountStop_IT+0xae>
    {
      __HAL_HRTIM_TIMER_DISABLE_IT(hhrtim, timer_idx, hhrtim->TimerParam[timer_idx].InterruptRequests);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681a      	ldr	r2, [r3, #0]
 80080e8:	7bfb      	ldrb	r3, [r7, #15]
 80080ea:	01db      	lsls	r3, r3, #7
 80080ec:	4413      	add	r3, r2
 80080ee:	338c      	adds	r3, #140	; 0x8c
 80080f0:	6818      	ldr	r0, [r3, #0]
 80080f2:	7bfa      	ldrb	r2, [r7, #15]
 80080f4:	6879      	ldr	r1, [r7, #4]
 80080f6:	4613      	mov	r3, r2
 80080f8:	00db      	lsls	r3, r3, #3
 80080fa:	1a9b      	subs	r3, r3, r2
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	440b      	add	r3, r1
 8008100:	3320      	adds	r3, #32
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	43da      	mvns	r2, r3
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6819      	ldr	r1, [r3, #0]
 800810a:	7bfb      	ldrb	r3, [r7, #15]
 800810c:	4002      	ands	r2, r0
 800810e:	01db      	lsls	r3, r3, #7
 8008110:	440b      	add	r3, r1
 8008112:	338c      	adds	r3, #140	; 0x8c
 8008114:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8008116:	7bfb      	ldrb	r3, [r7, #15]
 8008118:	3301      	adds	r3, #1
 800811a:	73fb      	strb	r3, [r7, #15]
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
 800811c:	7bfb      	ldrb	r3, [r7, #15]
 800811e:	2b04      	cmp	r3, #4
 8008120:	d9d8      	bls.n	80080d4 <HAL_HRTIM_WaveformCountStop_IT+0x6c>
    }
  }

  /* ++ WA */
  do { delai--; } while (delai != 0U);
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	3b01      	subs	r3, #1
 8008126:	60bb      	str	r3, [r7, #8]
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d1f9      	bne.n	8008122 <HAL_HRTIM_WaveformCountStop_IT+0xba>
  /* -- WA */

  /* Disable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR &= ~(Timers);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	6819      	ldr	r1, [r3, #0]
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	43da      	mvns	r2, r3
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	400a      	ands	r2, r1
 800813e:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2201      	movs	r2, #1
 8008144:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2200      	movs	r2, #0
 800814c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8008150:	2300      	movs	r3, #0
}
 8008152:	4618      	mov	r0, r3
 8008154:	3714      	adds	r7, #20
 8008156:	46bd      	mov	sp, r7
 8008158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815c:	4770      	bx	lr
 800815e:	bf00      	nop
 8008160:	2000002c 	.word	0x2000002c

08008164 <HAL_HRTIM_IRQHandler>:
  *                   This parameter can be any value of HRTIM_Timer_Index
  * @retval None
  */
void HAL_HRTIM_IRQHandler(HRTIM_HandleTypeDef * hhrtim,
                          uint32_t TimerIdx)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b082      	sub	sp, #8
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	6039      	str	r1, [r7, #0]
  /* HRTIM interrupts handling */
  if (TimerIdx == HRTIM_TIMERINDEX_COMMON)
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	2bff      	cmp	r3, #255	; 0xff
 8008172:	d103      	bne.n	800817c <HAL_HRTIM_IRQHandler+0x18>
  {
    HRTIM_HRTIM_ISR(hhrtim);
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f000 fc29 	bl	80089cc <HRTIM_HRTIM_ISR>
  {
    /* Timing unit related interrupts handling */
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
  }

}
 800817a:	e00a      	b.n	8008192 <HAL_HRTIM_IRQHandler+0x2e>
  else if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	2b05      	cmp	r3, #5
 8008180:	d103      	bne.n	800818a <HAL_HRTIM_IRQHandler+0x26>
    HRTIM_Master_ISR(hhrtim);
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 fca0 	bl	8008ac8 <HRTIM_Master_ISR>
}
 8008188:	e003      	b.n	8008192 <HAL_HRTIM_IRQHandler+0x2e>
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
 800818a:	6839      	ldr	r1, [r7, #0]
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f000 fd45 	bl	8008c1c <HRTIM_Timer_ISR>
}
 8008192:	bf00      	nop
 8008194:	3708      	adds	r7, #8
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}

0800819a <HAL_HRTIM_Fault1Callback>:
  * @brief  Callback function invoked when a fault 1 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle  * @retval None
  * @retval None
  */
__weak void HAL_HRTIM_Fault1Callback(HRTIM_HandleTypeDef * hhrtim)
{
 800819a:	b480      	push	{r7}
 800819c:	b083      	sub	sp, #12
 800819e:	af00      	add	r7, sp, #0
 80081a0:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault1Callback could be implemented in the user file
   */
}
 80081a2:	bf00      	nop
 80081a4:	370c      	adds	r7, #12
 80081a6:	46bd      	mov	sp, r7
 80081a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ac:	4770      	bx	lr

080081ae <HAL_HRTIM_Fault2Callback>:
  * @brief  Callback function invoked when a fault 2 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault2Callback(HRTIM_HandleTypeDef * hhrtim)
{
 80081ae:	b480      	push	{r7}
 80081b0:	b083      	sub	sp, #12
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault2Callback could be implemented in the user file
   */
}
 80081b6:	bf00      	nop
 80081b8:	370c      	adds	r7, #12
 80081ba:	46bd      	mov	sp, r7
 80081bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c0:	4770      	bx	lr

080081c2 <HAL_HRTIM_Fault3Callback>:
  * @brief  Callback function invoked when a fault 3 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault3Callback(HRTIM_HandleTypeDef * hhrtim)
{
 80081c2:	b480      	push	{r7}
 80081c4:	b083      	sub	sp, #12
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault3Callback could be implemented in the user file
   */
}
 80081ca:	bf00      	nop
 80081cc:	370c      	adds	r7, #12
 80081ce:	46bd      	mov	sp, r7
 80081d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d4:	4770      	bx	lr

080081d6 <HAL_HRTIM_Fault4Callback>:
  * @brief  Callback function invoked when a fault 4 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault4Callback(HRTIM_HandleTypeDef * hhrtim)
{
 80081d6:	b480      	push	{r7}
 80081d8:	b083      	sub	sp, #12
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault4Callback could be implemented in the user file
   */
}
 80081de:	bf00      	nop
 80081e0:	370c      	adds	r7, #12
 80081e2:	46bd      	mov	sp, r7
 80081e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e8:	4770      	bx	lr

080081ea <HAL_HRTIM_Fault5Callback>:
  * @brief  Callback function invoked when a fault 5 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault5Callback(HRTIM_HandleTypeDef * hhrtim)
{
 80081ea:	b480      	push	{r7}
 80081ec:	b083      	sub	sp, #12
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault5Callback could be implemented in the user file
   */
}
 80081f2:	bf00      	nop
 80081f4:	370c      	adds	r7, #12
 80081f6:	46bd      	mov	sp, r7
 80081f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fc:	4770      	bx	lr

080081fe <HAL_HRTIM_SystemFaultCallback>:
  * @brief  Callback function invoked when a system fault interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SystemFaultCallback(HRTIM_HandleTypeDef * hhrtim)
{
 80081fe:	b480      	push	{r7}
 8008200:	b083      	sub	sp, #12
 8008202:	af00      	add	r7, sp, #0
 8008204:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SystemFaultCallback could be implemented in the user file
   */
}
 8008206:	bf00      	nop
 8008208:	370c      	adds	r7, #12
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr

08008212 <HAL_HRTIM_BurstModePeriodCallback>:
  * @brief  Callback function invoked when the end of the burst mode period is reached
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_BurstModePeriodCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8008212:	b480      	push	{r7}
 8008214:	b083      	sub	sp, #12
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_BurstModeCallback could be implemented in the user file
   */
}
 800821a:	bf00      	nop
 800821c:	370c      	adds	r7, #12
 800821e:	46bd      	mov	sp, r7
 8008220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008224:	4770      	bx	lr

08008226 <HAL_HRTIM_SynchronizationEventCallback>:
  * @brief  Callback function invoked when a synchronization input event is received
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SynchronizationEventCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8008226:	b480      	push	{r7}
 8008228:	b083      	sub	sp, #12
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SynchronizationEventCallback could be implemented in the user file
   */
}
 800822e:	bf00      	nop
 8008230:	370c      	adds	r7, #12
 8008232:	46bd      	mov	sp, r7
 8008234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008238:	4770      	bx	lr

0800823a <HAL_HRTIM_RegistersUpdateCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_RegistersUpdateCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800823a:	b480      	push	{r7}
 800823c:	b083      	sub	sp, #12
 800823e:	af00      	add	r7, sp, #0
 8008240:	6078      	str	r0, [r7, #4]
 8008242:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RegistersUpdateCallback could be implemented in the user file
   */
}
 8008244:	bf00      	nop
 8008246:	370c      	adds	r7, #12
 8008248:	46bd      	mov	sp, r7
 800824a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824e:	4770      	bx	lr

08008250 <HAL_HRTIM_Compare1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008250:	b480      	push	{r7}
 8008252:	b083      	sub	sp, #12
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare1EventCallback could be implemented in the user file
   */
}
 800825a:	bf00      	nop
 800825c:	370c      	adds	r7, #12
 800825e:	46bd      	mov	sp, r7
 8008260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008264:	4770      	bx	lr

08008266 <HAL_HRTIM_Compare4EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare4EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008266:	b480      	push	{r7}
 8008268:	b083      	sub	sp, #12
 800826a:	af00      	add	r7, sp, #0
 800826c:	6078      	str	r0, [r7, #4]
 800826e:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare4EventCallback could be implemented in the user file
   */
}
 8008270:	bf00      	nop
 8008272:	370c      	adds	r7, #12
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr

0800827c <HAL_HRTIM_Capture1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Capture1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800827c:	b480      	push	{r7}
 800827e:	b083      	sub	sp, #12
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture1EventCallback could be implemented in the user file
   */
}
 8008286:	bf00      	nop
 8008288:	370c      	adds	r7, #12
 800828a:	46bd      	mov	sp, r7
 800828c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008290:	4770      	bx	lr

08008292 <HAL_HRTIM_Capture2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Capture2EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008292:	b480      	push	{r7}
 8008294:	b083      	sub	sp, #12
 8008296:	af00      	add	r7, sp, #0
 8008298:	6078      	str	r0, [r7, #4]
 800829a:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture2EventCallback could be implemented in the user file
   */
}
 800829c:	bf00      	nop
 800829e:	370c      	adds	r7, #12
 80082a0:	46bd      	mov	sp, r7
 80082a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a6:	4770      	bx	lr

080082a8 <HAL_HRTIM_DelayedProtectionCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_DelayedProtectionCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b083      	sub	sp, #12
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
 80082b0:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_DelayedProtectionCallback could be implemented in the user file
   */
}
 80082b2:	bf00      	nop
 80082b4:	370c      	adds	r7, #12
 80082b6:	46bd      	mov	sp, r7
 80082b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082bc:	4770      	bx	lr

080082be <HAL_HRTIM_CounterResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_CounterResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80082be:	b480      	push	{r7}
 80082c0:	b083      	sub	sp, #12
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
 80082c6:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_CounterResetCallback could be implemented in the user file
   */
}
 80082c8:	bf00      	nop
 80082ca:	370c      	adds	r7, #12
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr

080082d4 <HAL_HRTIM_Output1SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output1SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b083      	sub	sp, #12
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1SetCallback could be implemented in the user file
   */
}
 80082de:	bf00      	nop
 80082e0:	370c      	adds	r7, #12
 80082e2:	46bd      	mov	sp, r7
 80082e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e8:	4770      	bx	lr

080082ea <HAL_HRTIM_Output1ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output1ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80082ea:	b480      	push	{r7}
 80082ec:	b083      	sub	sp, #12
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	6078      	str	r0, [r7, #4]
 80082f2:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1ResetCallback could be implemented in the user file
   */
}
 80082f4:	bf00      	nop
 80082f6:	370c      	adds	r7, #12
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr

08008300 <HAL_HRTIM_Output2SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output2SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008300:	b480      	push	{r7}
 8008302:	b083      	sub	sp, #12
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2SetCallback could be implemented in the user file
   */
}
 800830a:	bf00      	nop
 800830c:	370c      	adds	r7, #12
 800830e:	46bd      	mov	sp, r7
 8008310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008314:	4770      	bx	lr

08008316 <HAL_HRTIM_Output2ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output2ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008316:	b480      	push	{r7}
 8008318:	b083      	sub	sp, #12
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
 800831e:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2ResetCallback could be implemented in the user file
   */
}
 8008320:	bf00      	nop
 8008322:	370c      	adds	r7, #12
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr

0800832c <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 800832c:	b480      	push	{r7}
 800832e:	b085      	sub	sp, #20
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	f023 0307 	bic.w	r3, r3, #7
 8008344:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	68fa      	ldr	r2, [r7, #12]
 800834c:	4313      	orrs	r3, r2
 800834e:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	f023 0318 	bic.w	r3, r3, #24
 8008356:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	68db      	ldr	r3, [r3, #12]
 800835c:	68fa      	ldr	r2, [r7, #12]
 800835e:	4313      	orrs	r3, r2
 8008360:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	68fa      	ldr	r2, [r7, #12]
 8008368:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	683a      	ldr	r2, [r7, #0]
 8008370:	6812      	ldr	r2, [r2, #0]
 8008372:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	683a      	ldr	r2, [r7, #0]
 800837a:	6852      	ldr	r2, [r2, #4]
 800837c:	619a      	str	r2, [r3, #24]
}
 800837e:	bf00      	nop
 8008380:	3714      	adds	r7, #20
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr

0800838a <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 800838a:	b480      	push	{r7}
 800838c:	b087      	sub	sp, #28
 800838e:	af00      	add	r7, sp, #0
 8008390:	60f8      	str	r0, [r7, #12]
 8008392:	60b9      	str	r1, [r7, #8]
 8008394:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681a      	ldr	r2, [r3, #0]
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	3301      	adds	r3, #1
 800839e:	01db      	lsls	r3, r3, #7
 80083a0:	4413      	add	r3, r2
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	f023 0307 	bic.w	r3, r3, #7
 80083ac:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	689b      	ldr	r3, [r3, #8]
 80083b2:	697a      	ldr	r2, [r7, #20]
 80083b4:	4313      	orrs	r3, r2
 80083b6:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	f023 0318 	bic.w	r3, r3, #24
 80083be:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	68db      	ldr	r3, [r3, #12]
 80083c4:	697a      	ldr	r2, [r7, #20]
 80083c6:	4313      	orrs	r3, r2
 80083c8:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681a      	ldr	r2, [r3, #0]
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	3301      	adds	r3, #1
 80083d2:	01db      	lsls	r3, r3, #7
 80083d4:	4413      	add	r3, r2
 80083d6:	697a      	ldr	r2, [r7, #20]
 80083d8:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	6819      	ldr	r1, [r3, #0]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681a      	ldr	r2, [r3, #0]
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	01db      	lsls	r3, r3, #7
 80083e6:	440b      	add	r3, r1
 80083e8:	3394      	adds	r3, #148	; 0x94
 80083ea:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	6819      	ldr	r1, [r3, #0]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	685a      	ldr	r2, [r3, #4]
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	01db      	lsls	r3, r3, #7
 80083f8:	440b      	add	r3, r1
 80083fa:	3398      	adds	r3, #152	; 0x98
 80083fc:	601a      	str	r2, [r3, #0]
}
 80083fe:	bf00      	nop
 8008400:	371c      	adds	r7, #28
 8008402:	46bd      	mov	sp, r7
 8008404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008408:	4770      	bx	lr

0800840a <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 800840a:	b480      	push	{r7}
 800840c:	b085      	sub	sp, #20
 800840e:	af00      	add	r7, sp, #0
 8008410:	6078      	str	r0, [r7, #4]
 8008412:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8008424:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	f023 0320 	bic.w	r3, r3, #32
 800842c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	695b      	ldr	r3, [r3, #20]
 8008432:	68fa      	ldr	r2, [r7, #12]
 8008434:	4313      	orrs	r3, r2
 8008436:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800843e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	699b      	ldr	r3, [r3, #24]
 8008444:	68fa      	ldr	r2, [r7, #12]
 8008446:	4313      	orrs	r3, r2
 8008448:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008450:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	69db      	ldr	r3, [r3, #28]
 8008456:	68fa      	ldr	r2, [r7, #12]
 8008458:	4313      	orrs	r3, r2
 800845a:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008462:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	6a1b      	ldr	r3, [r3, #32]
 8008468:	68fa      	ldr	r2, [r7, #12]
 800846a:	4313      	orrs	r3, r2
 800846c:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8008474:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800847a:	68fa      	ldr	r2, [r7, #12]
 800847c:	4313      	orrs	r3, r2
 800847e:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8008486:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800848c:	009b      	lsls	r3, r3, #2
 800848e:	68fa      	ldr	r2, [r7, #12]
 8008490:	4313      	orrs	r3, r2
 8008492:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800849a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084a0:	68fa      	ldr	r2, [r7, #12]
 80084a2:	4313      	orrs	r3, r2
 80084a4:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084ac:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084b2:	68ba      	ldr	r2, [r7, #8]
 80084b4:	4313      	orrs	r3, r2
 80084b6:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	68fa      	ldr	r2, [r7, #12]
 80084be:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	68ba      	ldr	r2, [r7, #8]
 80084c6:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 80084ca:	bf00      	nop
 80084cc:	3714      	adds	r7, #20
 80084ce:	46bd      	mov	sp, r7
 80084d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d4:	4770      	bx	lr
	...

080084d8 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80084d8:	b480      	push	{r7}
 80084da:	b08b      	sub	sp, #44	; 0x2c
 80084dc:	af00      	add	r7, sp, #0
 80084de:	60f8      	str	r0, [r7, #12]
 80084e0:	60b9      	str	r1, [r7, #8]
 80084e2:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681a      	ldr	r2, [r3, #0]
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	3301      	adds	r3, #1
 80084ec:	01db      	lsls	r3, r3, #7
 80084ee:	4413      	add	r3, r2
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	68fa      	ldr	r2, [r7, #12]
 80084f4:	6811      	ldr	r1, [r2, #0]
 80084f6:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	3301      	adds	r3, #1
 80084fe:	01db      	lsls	r3, r3, #7
 8008500:	440b      	add	r3, r1
 8008502:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681a      	ldr	r2, [r3, #0]
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	3301      	adds	r3, #1
 800850c:	01db      	lsls	r3, r3, #7
 800850e:	4413      	add	r3, r2
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681a      	ldr	r2, [r3, #0]
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	01db      	lsls	r3, r3, #7
 800851c:	4413      	add	r3, r2
 800851e:	33e8      	adds	r3, #232	; 0xe8
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681a      	ldr	r2, [r3, #0]
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	01db      	lsls	r3, r3, #7
 800852c:	4413      	add	r3, r2
 800852e:	33e4      	adds	r3, #228	; 0xe4
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 800853c:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 800853e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008540:	f023 0320 	bic.w	r3, r3, #32
 8008544:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	695b      	ldr	r3, [r3, #20]
 800854a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800854c:	4313      	orrs	r3, r2
 800854e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8008550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008552:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008556:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	699b      	ldr	r3, [r3, #24]
 800855c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800855e:	4313      	orrs	r3, r2
 8008560:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8008562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008564:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008568:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	69db      	ldr	r3, [r3, #28]
 800856e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008570:	4313      	orrs	r3, r2
 8008572:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8008574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008576:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800857a:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6a1b      	ldr	r3, [r3, #32]
 8008580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008582:	4313      	orrs	r3, r2
 8008584:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8008586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008588:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800858c:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008594:	4313      	orrs	r3, r2
 8008596:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8008598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800859e:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085a6:	4313      	orrs	r3, r2
 80085a8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 80085aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80085b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085ba:	d103      	bne.n	80085c4 <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 80085bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085c2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 80085c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085ca:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085d2:	4313      	orrs	r3, r2
 80085d4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 80085d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80085dc:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085e4:	4313      	orrs	r3, r2
 80085e6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 80085e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ea:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 80085ee:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085f6:	4313      	orrs	r3, r2
 80085f8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 80085fa:	69bb      	ldr	r3, [r7, #24]
 80085fc:	f023 031f 	bic.w	r3, r3, #31
 8008600:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008606:	f003 031f 	and.w	r3, r3, #31
 800860a:	69ba      	ldr	r2, [r7, #24]
 800860c:	4313      	orrs	r3, r2
 800860e:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8008610:	69bb      	ldr	r3, [r7, #24]
 8008612:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008616:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800861c:	69ba      	ldr	r2, [r7, #24]
 800861e:	4313      	orrs	r3, r2
 8008620:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008626:	2b00      	cmp	r3, #0
 8008628:	d108      	bne.n	800863c <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 800862a:	6a3b      	ldr	r3, [r7, #32]
 800862c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008630:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008636:	6a3a      	ldr	r2, [r7, #32]
 8008638:	4313      	orrs	r3, r2
 800863a:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008640:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8008644:	d004      	beq.n	8008650 <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800864a:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 800864e:	d103      	bne.n	8008658 <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008654:	2b40      	cmp	r3, #64	; 0x40
 8008656:	d108      	bne.n	800866a <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8008658:	6a3b      	ldr	r3, [r7, #32]
 800865a:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 800865e:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008664:	6a3a      	ldr	r2, [r7, #32]
 8008666:	4313      	orrs	r3, r2
 8008668:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800866e:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	2b04      	cmp	r3, #4
 8008674:	d843      	bhi.n	80086fe <HRTIM_TimingUnitWaveform_Config+0x226>
 8008676:	a201      	add	r2, pc, #4	; (adr r2, 800867c <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 8008678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800867c:	08008691 	.word	0x08008691
 8008680:	080086a7 	.word	0x080086a7
 8008684:	080086bd 	.word	0x080086bd
 8008688:	080086d3 	.word	0x080086d3
 800868c:	080086e9 	.word	0x080086e9
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8008690:	69fb      	ldr	r3, [r7, #28]
 8008692:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008696:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800869c:	005b      	lsls	r3, r3, #1
 800869e:	69fa      	ldr	r2, [r7, #28]
 80086a0:	4313      	orrs	r3, r2
 80086a2:	61fb      	str	r3, [r7, #28]
      break;
 80086a4:	e02c      	b.n	8008700 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 80086a6:	69fb      	ldr	r3, [r7, #28]
 80086a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80086ac:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b2:	009b      	lsls	r3, r3, #2
 80086b4:	69fa      	ldr	r2, [r7, #28]
 80086b6:	4313      	orrs	r3, r2
 80086b8:	61fb      	str	r3, [r7, #28]
      break;
 80086ba:	e021      	b.n	8008700 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 80086bc:	69fb      	ldr	r3, [r7, #28]
 80086be:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80086c2:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086c8:	00db      	lsls	r3, r3, #3
 80086ca:	69fa      	ldr	r2, [r7, #28]
 80086cc:	4313      	orrs	r3, r2
 80086ce:	61fb      	str	r3, [r7, #28]
      break;
 80086d0:	e016      	b.n	8008700 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 80086d2:	69fb      	ldr	r3, [r7, #28]
 80086d4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80086d8:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086de:	011b      	lsls	r3, r3, #4
 80086e0:	69fa      	ldr	r2, [r7, #28]
 80086e2:	4313      	orrs	r3, r2
 80086e4:	61fb      	str	r3, [r7, #28]
      break;
 80086e6:	e00b      	b.n	8008700 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 80086e8:	69fb      	ldr	r3, [r7, #28]
 80086ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80086ee:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086f4:	015b      	lsls	r3, r3, #5
 80086f6:	69fa      	ldr	r2, [r7, #28]
 80086f8:	4313      	orrs	r3, r2
 80086fa:	61fb      	str	r3, [r7, #28]
      break;
 80086fc:	e000      	b.n	8008700 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  default:
    break;
 80086fe:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681a      	ldr	r2, [r3, #0]
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	3301      	adds	r3, #1
 8008708:	01db      	lsls	r3, r3, #7
 800870a:	4413      	add	r3, r2
 800870c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800870e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681a      	ldr	r2, [r3, #0]
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	01db      	lsls	r3, r3, #7
 8008718:	4413      	add	r3, r2
 800871a:	33e8      	adds	r3, #232	; 0xe8
 800871c:	69ba      	ldr	r2, [r7, #24]
 800871e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681a      	ldr	r2, [r3, #0]
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	01db      	lsls	r3, r3, #7
 8008728:	4413      	add	r3, r2
 800872a:	33e4      	adds	r3, #228	; 0xe4
 800872c:	6a3a      	ldr	r2, [r7, #32]
 800872e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681a      	ldr	r2, [r3, #0]
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	01db      	lsls	r3, r3, #7
 8008738:	4413      	add	r3, r2
 800873a:	33d4      	adds	r3, #212	; 0xd4
 800873c:	697a      	ldr	r2, [r7, #20]
 800873e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	69fa      	ldr	r2, [r7, #28]
 8008746:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 800874a:	bf00      	nop
 800874c:	372c      	adds	r7, #44	; 0x2c
 800874e:	46bd      	mov	sp, r7
 8008750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008754:	4770      	bx	lr
 8008756:	bf00      	nop

08008758 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8008758:	b480      	push	{r7}
 800875a:	b089      	sub	sp, #36	; 0x24
 800875c:	af00      	add	r7, sp, #0
 800875e:	60f8      	str	r0, [r7, #12]
 8008760:	60b9      	str	r1, [r7, #8]
 8008762:	607a      	str	r2, [r7, #4]
 8008764:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8008766:	2300      	movs	r3, #0
 8008768:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681a      	ldr	r2, [r3, #0]
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	01db      	lsls	r3, r3, #7
 8008772:	4413      	add	r3, r2
 8008774:	33e4      	adds	r3, #228	; 0xe4
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681a      	ldr	r2, [r3, #0]
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	01db      	lsls	r3, r3, #7
 8008782:	4413      	add	r3, r2
 8008784:	33b8      	adds	r3, #184	; 0xb8
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	617b      	str	r3, [r7, #20]

  switch (Output)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008790:	d04d      	beq.n	800882e <HRTIM_OutputConfig+0xd6>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008798:	d85e      	bhi.n	8008858 <HRTIM_OutputConfig+0x100>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087a0:	d032      	beq.n	8008808 <HRTIM_OutputConfig+0xb0>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087a8:	d856      	bhi.n	8008858 <HRTIM_OutputConfig+0x100>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2b80      	cmp	r3, #128	; 0x80
 80087ae:	d03e      	beq.n	800882e <HRTIM_OutputConfig+0xd6>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2b80      	cmp	r3, #128	; 0x80
 80087b4:	d850      	bhi.n	8008858 <HRTIM_OutputConfig+0x100>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2b40      	cmp	r3, #64	; 0x40
 80087ba:	d025      	beq.n	8008808 <HRTIM_OutputConfig+0xb0>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2b40      	cmp	r3, #64	; 0x40
 80087c0:	d84a      	bhi.n	8008858 <HRTIM_OutputConfig+0x100>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	d01f      	beq.n	8008808 <HRTIM_OutputConfig+0xb0>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d044      	beq.n	8008858 <HRTIM_OutputConfig+0x100>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2b20      	cmp	r3, #32
 80087d2:	d841      	bhi.n	8008858 <HRTIM_OutputConfig+0x100>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2b02      	cmp	r3, #2
 80087d8:	d33e      	bcc.n	8008858 <HRTIM_OutputConfig+0x100>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	3b02      	subs	r3, #2
 80087de:	2201      	movs	r2, #1
 80087e0:	409a      	lsls	r2, r3
 80087e2:	4b48      	ldr	r3, [pc, #288]	; (8008904 <HRTIM_OutputConfig+0x1ac>)
 80087e4:	4013      	ands	r3, r2
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	bf14      	ite	ne
 80087ea:	2301      	movne	r3, #1
 80087ec:	2300      	moveq	r3, #0
 80087ee:	b2db      	uxtb	r3, r3
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d11c      	bne.n	800882e <HRTIM_OutputConfig+0xd6>
 80087f4:	f244 0304 	movw	r3, #16388	; 0x4004
 80087f8:	4013      	ands	r3, r2
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	bf14      	ite	ne
 80087fe:	2301      	movne	r3, #1
 8008800:	2300      	moveq	r3, #0
 8008802:	b2db      	uxtb	r3, r3
 8008804:	2b00      	cmp	r3, #0
 8008806:	d027      	beq.n	8008858 <HRTIM_OutputConfig+0x100>
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	6819      	ldr	r1, [r3, #0]
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	685a      	ldr	r2, [r3, #4]
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	01db      	lsls	r3, r3, #7
 8008814:	440b      	add	r3, r1
 8008816:	33bc      	adds	r3, #188	; 0xbc
 8008818:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	6819      	ldr	r1, [r3, #0]
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	689a      	ldr	r2, [r3, #8]
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	01db      	lsls	r3, r3, #7
 8008826:	440b      	add	r3, r1
 8008828:	33c0      	adds	r3, #192	; 0xc0
 800882a:	601a      	str	r2, [r3, #0]
      break;
 800882c:	e015      	b.n	800885a <HRTIM_OutputConfig+0x102>
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	6819      	ldr	r1, [r3, #0]
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	685a      	ldr	r2, [r3, #4]
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	01db      	lsls	r3, r3, #7
 800883a:	440b      	add	r3, r1
 800883c:	33c4      	adds	r3, #196	; 0xc4
 800883e:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	6819      	ldr	r1, [r3, #0]
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	689a      	ldr	r2, [r3, #8]
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	01db      	lsls	r3, r3, #7
 800884c:	440b      	add	r3, r1
 800884e:	33c8      	adds	r3, #200	; 0xc8
 8008850:	601a      	str	r2, [r3, #0]
      shift = 16U;
 8008852:	2310      	movs	r3, #16
 8008854:	61bb      	str	r3, [r7, #24]
      break;
 8008856:	e000      	b.n	800885a <HRTIM_OutputConfig+0x102>
    }

  default:
    break;
 8008858:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 800885a:	22fe      	movs	r2, #254	; 0xfe
 800885c:	69bb      	ldr	r3, [r7, #24]
 800885e:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8008862:	43db      	mvns	r3, r3
 8008864:	69fa      	ldr	r2, [r7, #28]
 8008866:	4013      	ands	r3, r2
 8008868:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	681a      	ldr	r2, [r3, #0]
 800886e:	69bb      	ldr	r3, [r7, #24]
 8008870:	fa02 f303 	lsl.w	r3, r2, r3
 8008874:	69fa      	ldr	r2, [r7, #28]
 8008876:	4313      	orrs	r3, r2
 8008878:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	68da      	ldr	r2, [r3, #12]
 800887e:	69bb      	ldr	r3, [r7, #24]
 8008880:	fa02 f303 	lsl.w	r3, r2, r3
 8008884:	69fa      	ldr	r2, [r7, #28]
 8008886:	4313      	orrs	r3, r2
 8008888:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	691a      	ldr	r2, [r3, #16]
 800888e:	69bb      	ldr	r3, [r7, #24]
 8008890:	fa02 f303 	lsl.w	r3, r2, r3
 8008894:	69fa      	ldr	r2, [r7, #28]
 8008896:	4313      	orrs	r3, r2
 8008898:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	695a      	ldr	r2, [r3, #20]
 800889e:	69bb      	ldr	r3, [r7, #24]
 80088a0:	fa02 f303 	lsl.w	r3, r2, r3
 80088a4:	69fa      	ldr	r2, [r7, #28]
 80088a6:	4313      	orrs	r3, r2
 80088a8:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	699a      	ldr	r2, [r3, #24]
 80088ae:	69bb      	ldr	r3, [r7, #24]
 80088b0:	fa02 f303 	lsl.w	r3, r2, r3
 80088b4:	69fa      	ldr	r2, [r7, #28]
 80088b6:	4313      	orrs	r3, r2
 80088b8:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	691b      	ldr	r3, [r3, #16]
 80088be:	2b08      	cmp	r3, #8
 80088c0:	d111      	bne.n	80088e6 <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d10c      	bne.n	80088e6 <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d107      	bne.n	80088e6 <HRTIM_OutputConfig+0x18e>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	69da      	ldr	r2, [r3, #28]
 80088da:	69bb      	ldr	r3, [r7, #24]
 80088dc:	fa02 f303 	lsl.w	r3, r2, r3
 80088e0:	69fa      	ldr	r2, [r7, #28]
 80088e2:	4313      	orrs	r3, r2
 80088e4:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681a      	ldr	r2, [r3, #0]
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	01db      	lsls	r3, r3, #7
 80088ee:	4413      	add	r3, r2
 80088f0:	33e4      	adds	r3, #228	; 0xe4
 80088f2:	69fa      	ldr	r2, [r7, #28]
 80088f4:	601a      	str	r2, [r3, #0]
}
 80088f6:	bf00      	nop
 80088f8:	3724      	adds	r7, #36	; 0x24
 80088fa:	46bd      	mov	sp, r7
 80088fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008900:	4770      	bx	lr
 8008902:	bf00      	nop
 8008904:	40000041 	.word	0x40000041

08008908 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 8008908:	b480      	push	{r7}
 800890a:	b083      	sub	sp, #12
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
 8008910:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	2b05      	cmp	r3, #5
 8008916:	d851      	bhi.n	80089bc <HRTIM_ForceRegistersUpdate+0xb4>
 8008918:	a201      	add	r2, pc, #4	; (adr r2, 8008920 <HRTIM_ForceRegistersUpdate+0x18>)
 800891a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800891e:	bf00      	nop
 8008920:	0800894f 	.word	0x0800894f
 8008924:	08008965 	.word	0x08008965
 8008928:	0800897b 	.word	0x0800897b
 800892c:	08008991 	.word	0x08008991
 8008930:	080089a7 	.word	0x080089a7
 8008934:	08008939 	.word	0x08008939
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f042 0201 	orr.w	r2, r2, #1
 8008948:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800894c:	e037      	b.n	80089be <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f042 0202 	orr.w	r2, r2, #2
 800895e:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8008962:	e02c      	b.n	80089be <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f042 0204 	orr.w	r2, r2, #4
 8008974:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8008978:	e021      	b.n	80089be <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f042 0208 	orr.w	r2, r2, #8
 800898a:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800898e:	e016      	b.n	80089be <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f042 0210 	orr.w	r2, r2, #16
 80089a0:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80089a4:	e00b      	b.n	80089be <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f042 0220 	orr.w	r2, r2, #32
 80089b6:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80089ba:	e000      	b.n	80089be <HRTIM_ForceRegistersUpdate+0xb6>
    }

  default:
    break;
 80089bc:	bf00      	nop
  }
}
 80089be:	bf00      	nop
 80089c0:	370c      	adds	r7, #12
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr
 80089ca:	bf00      	nop

080089cc <HRTIM_HRTIM_ISR>:
  * @brief  HRTIM interrupts service routine
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
static void HRTIM_HRTIM_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b084      	sub	sp, #16
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 80089dc:	60fb      	str	r3, [r7, #12]
  uint32_t ierits   = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 80089e6:	60bb      	str	r3, [r7, #8]

  /* Fault 1 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT1) != (uint32_t)RESET)
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	f003 0301 	and.w	r3, r3, #1
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d00c      	beq.n	8008a0c <HRTIM_HRTIM_ISR+0x40>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT1) != (uint32_t)RESET)
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	f003 0301 	and.w	r3, r3, #1
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d007      	beq.n	8008a0c <HRTIM_HRTIM_ISR+0x40>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT1);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	2201      	movs	r2, #1
 8008a02:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault1Callback(hhrtim);
#else
      HAL_HRTIM_Fault1Callback(hhrtim);
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f7ff fbc7 	bl	800819a <HAL_HRTIM_Fault1Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 2 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT2) != (uint32_t)RESET)
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	f003 0302 	and.w	r3, r3, #2
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d00c      	beq.n	8008a30 <HRTIM_HRTIM_ISR+0x64>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT2) != (uint32_t)RESET)
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	f003 0302 	and.w	r3, r3, #2
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d007      	beq.n	8008a30 <HRTIM_HRTIM_ISR+0x64>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT2);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	2202      	movs	r2, #2
 8008a26:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault2Callback(hhrtim);
#else
      HAL_HRTIM_Fault2Callback(hhrtim);
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f7ff fbbf 	bl	80081ae <HAL_HRTIM_Fault2Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 3 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT3) != (uint32_t)RESET)
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f003 0304 	and.w	r3, r3, #4
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d00c      	beq.n	8008a54 <HRTIM_HRTIM_ISR+0x88>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT3) != (uint32_t)RESET)
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	f003 0304 	and.w	r3, r3, #4
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d007      	beq.n	8008a54 <HRTIM_HRTIM_ISR+0x88>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT3);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	2204      	movs	r2, #4
 8008a4a:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault3Callback(hhrtim);
#else
      HAL_HRTIM_Fault3Callback(hhrtim);
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f7ff fbb7 	bl	80081c2 <HAL_HRTIM_Fault3Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 4 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT4) != (uint32_t)RESET)
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	f003 0308 	and.w	r3, r3, #8
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d00c      	beq.n	8008a78 <HRTIM_HRTIM_ISR+0xac>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT4) != (uint32_t)RESET)
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	f003 0308 	and.w	r3, r3, #8
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d007      	beq.n	8008a78 <HRTIM_HRTIM_ISR+0xac>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT4);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	2208      	movs	r2, #8
 8008a6e:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault4Callback(hhrtim);
#else
      HAL_HRTIM_Fault4Callback(hhrtim);
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f7ff fbaf 	bl	80081d6 <HAL_HRTIM_Fault4Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 5 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT5) != (uint32_t)RESET)
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	f003 0310 	and.w	r3, r3, #16
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d00c      	beq.n	8008a9c <HRTIM_HRTIM_ISR+0xd0>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT5) != (uint32_t)RESET)
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	f003 0310 	and.w	r3, r3, #16
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d007      	beq.n	8008a9c <HRTIM_HRTIM_ISR+0xd0>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT5);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	2210      	movs	r2, #16
 8008a92:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 5 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault5Callback(hhrtim);
#else
      HAL_HRTIM_Fault5Callback(hhrtim);
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f7ff fba7 	bl	80081ea <HAL_HRTIM_Fault5Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* System fault event */
  if((uint32_t)(isrflags & HRTIM_FLAG_SYSFLT) != (uint32_t)RESET)
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	f003 0320 	and.w	r3, r3, #32
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d00c      	beq.n	8008ac0 <HRTIM_HRTIM_ISR+0xf4>
  {
    if((uint32_t)(ierits & HRTIM_IT_SYSFLT) != (uint32_t)RESET)
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	f003 0320 	and.w	r3, r3, #32
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d007      	beq.n	8008ac0 <HRTIM_HRTIM_ISR+0xf4>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_SYSFLT);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	2220      	movs	r2, #32
 8008ab6:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SystemFaultCallback(hhrtim);
#else
      HAL_HRTIM_SystemFaultCallback(hhrtim);
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f7ff fb9f 	bl	80081fe <HAL_HRTIM_SystemFaultCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8008ac0:	bf00      	nop
 8008ac2:	3710      	adds	r7, #16
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}

08008ac8 <HRTIM_Master_ISR>:
* @brief  Master timer interrupts service routine
* @param  hhrtim pointer to HAL HRTIM handle
* @retval None
*/
static void HRTIM_Master_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b086      	sub	sp, #24
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8008ad8:	617b      	str	r3, [r7, #20]
  uint32_t ierits    = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 8008ae2:	613b      	str	r3, [r7, #16]
  uint32_t misrflags = READ_REG(hhrtim->Instance->sMasterRegs.MISR);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	685b      	ldr	r3, [r3, #4]
 8008aea:	60fb      	str	r3, [r7, #12]
  uint32_t mdierits  = READ_REG(hhrtim->Instance->sMasterRegs.MDIER);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	68db      	ldr	r3, [r3, #12]
 8008af2:	60bb      	str	r3, [r7, #8]

  /* Burst mode period event */
  if((uint32_t)(isrflags & HRTIM_FLAG_BMPER) != (uint32_t)RESET)
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d00d      	beq.n	8008b1a <HRTIM_Master_ISR+0x52>
  {
    if((uint32_t)(ierits & HRTIM_IT_BMPER) != (uint32_t)RESET)
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d008      	beq.n	8008b1a <HRTIM_Master_ISR+0x52>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_BMPER);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008b10:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Burst mode period event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->BurstModePeriodCallback(hhrtim);
#else
      HAL_HRTIM_BurstModePeriodCallback(hhrtim);
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f7ff fb7c 	bl	8008212 <HAL_HRTIM_BurstModePeriodCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 1 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP1) != (uint32_t)RESET)
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	f003 0301 	and.w	r3, r3, #1
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d00c      	beq.n	8008b3e <HRTIM_Master_ISR+0x76>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP1) != (uint32_t)RESET)
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	f003 0301 	and.w	r3, r3, #1
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d007      	beq.n	8008b3e <HRTIM_Master_ISR+0x76>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP1);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	2201      	movs	r2, #1
 8008b34:	609a      	str	r2, [r3, #8]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8008b36:	2105      	movs	r1, #5
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f7ff fb89 	bl	8008250 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 2 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP2) != (uint32_t)RESET)
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	f003 0302 	and.w	r3, r3, #2
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d00c      	beq.n	8008b62 <HRTIM_Master_ISR+0x9a>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP2) != (uint32_t)RESET)
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	f003 0302 	and.w	r3, r3, #2
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d007      	beq.n	8008b62 <HRTIM_Master_ISR+0x9a>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP2);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	2202      	movs	r2, #2
 8008b58:	609a      	str	r2, [r3, #8]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8008b5a:	2105      	movs	r1, #5
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f7fa fd03 	bl	8003568 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 3 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP3) != (uint32_t)RESET)
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	f003 0304 	and.w	r3, r3, #4
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d00c      	beq.n	8008b86 <HRTIM_Master_ISR+0xbe>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP3) != (uint32_t)RESET)
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	f003 0304 	and.w	r3, r3, #4
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d007      	beq.n	8008b86 <HRTIM_Master_ISR+0xbe>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP3);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	2204      	movs	r2, #4
 8008b7c:	609a      	str	r2, [r3, #8]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8008b7e:	2105      	movs	r1, #5
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f7fa fcfd 	bl	8003580 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 4 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP4) != (uint32_t)RESET)
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	f003 0308 	and.w	r3, r3, #8
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d00c      	beq.n	8008baa <HRTIM_Master_ISR+0xe2>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP4) != (uint32_t)RESET)
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	f003 0308 	and.w	r3, r3, #8
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d007      	beq.n	8008baa <HRTIM_Master_ISR+0xe2>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP4);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	2208      	movs	r2, #8
 8008ba0:	609a      	str	r2, [r3, #8]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8008ba2:	2105      	movs	r1, #5
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f7ff fb5e 	bl	8008266 <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer repetition event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MREP) != (uint32_t)RESET)
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	f003 0310 	and.w	r3, r3, #16
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d00c      	beq.n	8008bce <HRTIM_Master_ISR+0x106>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MREP) != (uint32_t)RESET)
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	f003 0310 	and.w	r3, r3, #16
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d007      	beq.n	8008bce <HRTIM_Master_ISR+0x106>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MREP);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	2210      	movs	r2, #16
 8008bc4:	609a      	str	r2, [r3, #8]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8008bc6:	2105      	movs	r1, #5
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f7fa fd4d 	bl	8003668 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Synchronization input event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_SYNC) != (uint32_t)RESET)
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	f003 0320 	and.w	r3, r3, #32
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d00b      	beq.n	8008bf0 <HRTIM_Master_ISR+0x128>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_SYNC) != (uint32_t)RESET)
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	f003 0320 	and.w	r3, r3, #32
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d006      	beq.n	8008bf0 <HRTIM_Master_ISR+0x128>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_SYNC);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	2220      	movs	r2, #32
 8008be8:	609a      	str	r2, [r3, #8]

      /* Invoke synchronization event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SynchronizationEventCallback(hhrtim);
#else
      HAL_HRTIM_SynchronizationEventCallback(hhrtim);
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f7ff fb1b 	bl	8008226 <HAL_HRTIM_SynchronizationEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer registers update event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MUPD) != (uint32_t)RESET)
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d00c      	beq.n	8008c14 <HRTIM_Master_ISR+0x14c>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MUPD) != (uint32_t)RESET)
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d007      	beq.n	8008c14 <HRTIM_Master_ISR+0x14c>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MUPD);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	2240      	movs	r2, #64	; 0x40
 8008c0a:	609a      	str	r2, [r3, #8]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8008c0c:	2105      	movs	r1, #5
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f7ff fb13 	bl	800823a <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8008c14:	bf00      	nop
 8008c16:	3718      	adds	r7, #24
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <HRTIM_Timer_ISR>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
*/
static void HRTIM_Timer_ISR(HRTIM_HandleTypeDef * hhrtim,
                     uint32_t TimerIdx)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b084      	sub	sp, #16
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
 8008c24:	6039      	str	r1, [r7, #0]
  uint32_t tisrflags = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxISR);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681a      	ldr	r2, [r3, #0]
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	3301      	adds	r3, #1
 8008c2e:	01db      	lsls	r3, r3, #7
 8008c30:	4413      	add	r3, r2
 8008c32:	3304      	adds	r3, #4
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	60fb      	str	r3, [r7, #12]
  uint32_t tdierits  = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxDIER);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681a      	ldr	r2, [r3, #0]
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	01db      	lsls	r3, r3, #7
 8008c40:	4413      	add	r3, r2
 8008c42:	338c      	adds	r3, #140	; 0x8c
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	60bb      	str	r3, [r7, #8]

  /* Timer compare 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP1) != (uint32_t)RESET)
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	f003 0301 	and.w	r3, r3, #1
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d010      	beq.n	8008c74 <HRTIM_Timer_ISR+0x58>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP1) != (uint32_t)RESET)
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	f003 0301 	and.w	r3, r3, #1
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d00b      	beq.n	8008c74 <HRTIM_Timer_ISR+0x58>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP1);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681a      	ldr	r2, [r3, #0]
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	01db      	lsls	r3, r3, #7
 8008c64:	4413      	add	r3, r2
 8008c66:	3388      	adds	r3, #136	; 0x88
 8008c68:	2201      	movs	r2, #1
 8008c6a:	601a      	str	r2, [r3, #0]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, TimerIdx);
 8008c6c:	6839      	ldr	r1, [r7, #0]
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f7ff faee 	bl	8008250 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP2) != (uint32_t)RESET)
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f003 0302 	and.w	r3, r3, #2
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d010      	beq.n	8008ca0 <HRTIM_Timer_ISR+0x84>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP2) != (uint32_t)RESET)
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	f003 0302 	and.w	r3, r3, #2
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d00b      	beq.n	8008ca0 <HRTIM_Timer_ISR+0x84>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP2);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681a      	ldr	r2, [r3, #0]
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	01db      	lsls	r3, r3, #7
 8008c90:	4413      	add	r3, r2
 8008c92:	3388      	adds	r3, #136	; 0x88
 8008c94:	2202      	movs	r2, #2
 8008c96:	601a      	str	r2, [r3, #0]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, TimerIdx);
 8008c98:	6839      	ldr	r1, [r7, #0]
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f7fa fc64 	bl	8003568 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 3 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP3) != (uint32_t)RESET)
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	f003 0304 	and.w	r3, r3, #4
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d010      	beq.n	8008ccc <HRTIM_Timer_ISR+0xb0>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP3) != (uint32_t)RESET)
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	f003 0304 	and.w	r3, r3, #4
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d00b      	beq.n	8008ccc <HRTIM_Timer_ISR+0xb0>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP3);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681a      	ldr	r2, [r3, #0]
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	01db      	lsls	r3, r3, #7
 8008cbc:	4413      	add	r3, r2
 8008cbe:	3388      	adds	r3, #136	; 0x88
 8008cc0:	2204      	movs	r2, #4
 8008cc2:	601a      	str	r2, [r3, #0]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, TimerIdx);
 8008cc4:	6839      	ldr	r1, [r7, #0]
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f7fa fc5a 	bl	8003580 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 4 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP4) != (uint32_t)RESET)
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f003 0308 	and.w	r3, r3, #8
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d010      	beq.n	8008cf8 <HRTIM_Timer_ISR+0xdc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP4) != (uint32_t)RESET)
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	f003 0308 	and.w	r3, r3, #8
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d00b      	beq.n	8008cf8 <HRTIM_Timer_ISR+0xdc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP4);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681a      	ldr	r2, [r3, #0]
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	01db      	lsls	r3, r3, #7
 8008ce8:	4413      	add	r3, r2
 8008cea:	3388      	adds	r3, #136	; 0x88
 8008cec:	2208      	movs	r2, #8
 8008cee:	601a      	str	r2, [r3, #0]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, TimerIdx);
 8008cf0:	6839      	ldr	r1, [r7, #0]
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f7ff fab7 	bl	8008266 <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer repetition event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_REP) != (uint32_t)RESET)
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	f003 0310 	and.w	r3, r3, #16
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d010      	beq.n	8008d24 <HRTIM_Timer_ISR+0x108>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_REP) != (uint32_t)RESET)
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	f003 0310 	and.w	r3, r3, #16
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d00b      	beq.n	8008d24 <HRTIM_Timer_ISR+0x108>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_REP);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681a      	ldr	r2, [r3, #0]
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	01db      	lsls	r3, r3, #7
 8008d14:	4413      	add	r3, r2
 8008d16:	3388      	adds	r3, #136	; 0x88
 8008d18:	2210      	movs	r2, #16
 8008d1a:	601a      	str	r2, [r3, #0]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, TimerIdx);
 8008d1c:	6839      	ldr	r1, [r7, #0]
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f7fa fca2 	bl	8003668 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer registers update event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_UPD) != (uint32_t)RESET)
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d010      	beq.n	8008d50 <HRTIM_Timer_ISR+0x134>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_UPD) != (uint32_t)RESET)
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d00b      	beq.n	8008d50 <HRTIM_Timer_ISR+0x134>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_UPD);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681a      	ldr	r2, [r3, #0]
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	01db      	lsls	r3, r3, #7
 8008d40:	4413      	add	r3, r2
 8008d42:	3388      	adds	r3, #136	; 0x88
 8008d44:	2240      	movs	r2, #64	; 0x40
 8008d46:	601a      	str	r2, [r3, #0]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, TimerIdx);
 8008d48:	6839      	ldr	r1, [r7, #0]
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f7ff fa75 	bl	800823a <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT1) != (uint32_t)RESET)
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d010      	beq.n	8008d7c <HRTIM_Timer_ISR+0x160>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT1) != (uint32_t)RESET)
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d00b      	beq.n	8008d7c <HRTIM_Timer_ISR+0x160>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT1);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681a      	ldr	r2, [r3, #0]
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	01db      	lsls	r3, r3, #7
 8008d6c:	4413      	add	r3, r2
 8008d6e:	3388      	adds	r3, #136	; 0x88
 8008d70:	2280      	movs	r2, #128	; 0x80
 8008d72:	601a      	str	r2, [r3, #0]

      /* Invoke capture 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture1EventCallback(hhrtim, TimerIdx);
 8008d74:	6839      	ldr	r1, [r7, #0]
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f7ff fa80 	bl	800827c <HAL_HRTIM_Capture1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT2) != (uint32_t)RESET)
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d011      	beq.n	8008daa <HRTIM_Timer_ISR+0x18e>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT2) != (uint32_t)RESET)
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d00c      	beq.n	8008daa <HRTIM_Timer_ISR+0x18e>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT2);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681a      	ldr	r2, [r3, #0]
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	01db      	lsls	r3, r3, #7
 8008d98:	4413      	add	r3, r2
 8008d9a:	3388      	adds	r3, #136	; 0x88
 8008d9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008da0:	601a      	str	r2, [r3, #0]

      /* Invoke capture 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture2EventCallback(hhrtim, TimerIdx);
 8008da2:	6839      	ldr	r1, [r7, #0]
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f7ff fa74 	bl	8008292 <HAL_HRTIM_Capture2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET1) != (uint32_t)RESET)
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d011      	beq.n	8008dd8 <HRTIM_Timer_ISR+0x1bc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET1) != (uint32_t)RESET)
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d00c      	beq.n	8008dd8 <HRTIM_Timer_ISR+0x1bc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET1);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681a      	ldr	r2, [r3, #0]
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	01db      	lsls	r3, r3, #7
 8008dc6:	4413      	add	r3, r2
 8008dc8:	3388      	adds	r3, #136	; 0x88
 8008dca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008dce:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1SetCallback(hhrtim, TimerIdx);
 8008dd0:	6839      	ldr	r1, [r7, #0]
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f7ff fa7e 	bl	80082d4 <HAL_HRTIM_Output1SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST1) != (uint32_t)RESET)
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d011      	beq.n	8008e06 <HRTIM_Timer_ISR+0x1ea>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST1) != (uint32_t)RESET)
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d00c      	beq.n	8008e06 <HRTIM_Timer_ISR+0x1ea>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST1);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681a      	ldr	r2, [r3, #0]
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	01db      	lsls	r3, r3, #7
 8008df4:	4413      	add	r3, r2
 8008df6:	3388      	adds	r3, #136	; 0x88
 8008df8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008dfc:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1ResetCallback(hhrtim, TimerIdx);
 8008dfe:	6839      	ldr	r1, [r7, #0]
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f7ff fa72 	bl	80082ea <HAL_HRTIM_Output1ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET2) != (uint32_t)RESET)
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d011      	beq.n	8008e34 <HRTIM_Timer_ISR+0x218>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET2) != (uint32_t)RESET)
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d00c      	beq.n	8008e34 <HRTIM_Timer_ISR+0x218>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET2);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681a      	ldr	r2, [r3, #0]
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	01db      	lsls	r3, r3, #7
 8008e22:	4413      	add	r3, r2
 8008e24:	3388      	adds	r3, #136	; 0x88
 8008e26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008e2a:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2SetCallback(hhrtim, TimerIdx);
 8008e2c:	6839      	ldr	r1, [r7, #0]
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f7ff fa66 	bl	8008300 <HAL_HRTIM_Output2SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST2) != (uint32_t)RESET)
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d011      	beq.n	8008e62 <HRTIM_Timer_ISR+0x246>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST2) != (uint32_t)RESET)
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d00c      	beq.n	8008e62 <HRTIM_Timer_ISR+0x246>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST2);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681a      	ldr	r2, [r3, #0]
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	01db      	lsls	r3, r3, #7
 8008e50:	4413      	add	r3, r2
 8008e52:	3388      	adds	r3, #136	; 0x88
 8008e54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008e58:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2ResetCallback(hhrtim, TimerIdx);
 8008e5a:	6839      	ldr	r1, [r7, #0]
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f7ff fa5a 	bl	8008316 <HAL_HRTIM_Output2ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST) != (uint32_t)RESET)
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d011      	beq.n	8008e90 <HRTIM_Timer_ISR+0x274>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST) != (uint32_t)RESET)
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d00c      	beq.n	8008e90 <HRTIM_Timer_ISR+0x274>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681a      	ldr	r2, [r3, #0]
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	01db      	lsls	r3, r3, #7
 8008e7e:	4413      	add	r3, r2
 8008e80:	3388      	adds	r3, #136	; 0x88
 8008e82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008e86:	601a      	str	r2, [r3, #0]

      /* Invoke timer reset callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->CounterResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_CounterResetCallback(hhrtim, TimerIdx);
 8008e88:	6839      	ldr	r1, [r7, #0]
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f7ff fa17 	bl	80082be <HAL_HRTIM_CounterResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Delayed protection event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_DLYPRT) != (uint32_t)RESET)
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d011      	beq.n	8008ebe <HRTIM_Timer_ISR+0x2a2>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_DLYPRT) != (uint32_t)RESET)
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d00c      	beq.n	8008ebe <HRTIM_Timer_ISR+0x2a2>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_DLYPRT);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681a      	ldr	r2, [r3, #0]
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	01db      	lsls	r3, r3, #7
 8008eac:	4413      	add	r3, r2
 8008eae:	3388      	adds	r3, #136	; 0x88
 8008eb0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008eb4:	601a      	str	r2, [r3, #0]

      /* Invoke delayed protection callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DelayedProtectionCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_DelayedProtectionCallback(hhrtim, TimerIdx);
 8008eb6:	6839      	ldr	r1, [r7, #0]
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f7ff f9f5 	bl	80082a8 <HAL_HRTIM_DelayedProtectionCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8008ebe:	bf00      	nop
 8008ec0:	3710      	adds	r7, #16
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}
	...

08008ec8 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b084      	sub	sp, #16
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d101      	bne.n	8008eda <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	e097      	b.n	800900a <HAL_LPTIM_Init+0x142>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8008ee6:	b2db      	uxtb	r3, r3
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d106      	bne.n	8008efa <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f7fa f849 	bl	8002f8c <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2202      	movs	r2, #2
 8008efe:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	68db      	ldr	r3, [r3, #12]
 8008f08:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	685b      	ldr	r3, [r3, #4]
 8008f0e:	2b01      	cmp	r3, #1
 8008f10:	d004      	beq.n	8008f1c <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f16:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008f1a:	d103      	bne.n	8008f24 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	f023 031e 	bic.w	r3, r3, #30
 8008f22:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	695b      	ldr	r3, [r3, #20]
 8008f28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d003      	beq.n	8008f38 <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8008f30:	68fa      	ldr	r2, [r7, #12]
 8008f32:	4b38      	ldr	r3, [pc, #224]	; (8009014 <HAL_LPTIM_Init+0x14c>)
 8008f34:	4013      	ands	r3, r2
 8008f36:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8008f38:	68fa      	ldr	r2, [r7, #12]
 8008f3a:	4b37      	ldr	r3, [pc, #220]	; (8009018 <HAL_LPTIM_Init+0x150>)
 8008f3c:	4013      	ands	r3, r2
 8008f3e:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8008f48:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8008f4e:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8008f54:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8008f5a:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8008f5c:	68fa      	ldr	r2, [r7, #12]
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	685b      	ldr	r3, [r3, #4]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d107      	bne.n	8008f7a <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8008f72:	4313      	orrs	r3, r2
 8008f74:	68fa      	ldr	r2, [r7, #12]
 8008f76:	4313      	orrs	r3, r2
 8008f78:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	2b01      	cmp	r3, #1
 8008f80:	d004      	beq.n	8008f8c <HAL_LPTIM_Init+0xc4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f86:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008f8a:	d107      	bne.n	8008f9c <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8008f94:	4313      	orrs	r3, r2
 8008f96:	68fa      	ldr	r2, [r7, #12]
 8008f98:	4313      	orrs	r3, r2
 8008f9a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	695b      	ldr	r3, [r3, #20]
 8008fa0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d00a      	beq.n	8008fbe <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8008fb0:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8008fb6:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8008fb8:	68fa      	ldr	r2, [r7, #12]
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	68fa      	ldr	r2, [r7, #12]
 8008fc4:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	4a14      	ldr	r2, [pc, #80]	; (800901c <HAL_LPTIM_Init+0x154>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d004      	beq.n	8008fda <HAL_LPTIM_Init+0x112>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4a12      	ldr	r2, [pc, #72]	; (8009020 <HAL_LPTIM_Init+0x158>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d108      	bne.n	8008fec <HAL_LPTIM_Init+0x124>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	430a      	orrs	r2, r1
 8008fe8:	625a      	str	r2, [r3, #36]	; 0x24
 8008fea:	e009      	b.n	8009000 <HAL_LPTIM_Init+0x138>
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4a0c      	ldr	r2, [pc, #48]	; (8009024 <HAL_LPTIM_Init+0x15c>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d104      	bne.n	8009000 <HAL_LPTIM_Init+0x138>
    {
      /* Check LPTIM3 Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM3 Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	687a      	ldr	r2, [r7, #4]
 8008ffc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008ffe:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2201      	movs	r2, #1
 8009004:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8009008:	2300      	movs	r3, #0
}
 800900a:	4618      	mov	r0, r3
 800900c:	3710      	adds	r7, #16
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}
 8009012:	bf00      	nop
 8009014:	ffff1f3f 	.word	0xffff1f3f
 8009018:	ff19f1fe 	.word	0xff19f1fe
 800901c:	40002400 	.word	0x40002400
 8009020:	58002400 	.word	0x58002400
 8009024:	58002800 	.word	0x58002800

08009028 <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b082      	sub	sp, #8
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2202      	movs	r2, #2
 8009036:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	685b      	ldr	r3, [r3, #4]
 800903e:	2b01      	cmp	r3, #1
 8009040:	d00c      	beq.n	800905c <HAL_LPTIM_Counter_Start_IT+0x34>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009046:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800904a:	d107      	bne.n	800905c <HAL_LPTIM_Counter_Start_IT+0x34>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	68da      	ldr	r2, [r3, #12]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 800905a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	691a      	ldr	r2, [r3, #16]
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f042 0201 	orr.w	r2, r2, #1
 800906a:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	2210      	movs	r2, #16
 8009072:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	683a      	ldr	r2, [r7, #0]
 800907a:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800907c:	2110      	movs	r1, #16
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f000 f91e 	bl	80092c0 <LPTIM_WaitForFlag>
 8009084:	4603      	mov	r3, r0
 8009086:	2b03      	cmp	r3, #3
 8009088:	d101      	bne.n	800908e <HAL_LPTIM_Counter_Start_IT+0x66>
  {
    return HAL_TIMEOUT;
 800908a:	2303      	movs	r3, #3
 800908c:	e02f      	b.n	80090ee <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f000 f946 	bl	8009320 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f000 f905 	bl	80092a4 <HAL_LPTIM_GetState>
 800909a:	4603      	mov	r3, r0
 800909c:	2b03      	cmp	r3, #3
 800909e:	d101      	bne.n	80090a4 <HAL_LPTIM_Counter_Start_IT+0x7c>
  {
    return HAL_TIMEOUT;
 80090a0:	2303      	movs	r3, #3
 80090a2:	e024      	b.n	80090ee <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	689a      	ldr	r2, [r3, #8]
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f042 0210 	orr.w	r2, r2, #16
 80090b2:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	689a      	ldr	r2, [r3, #8]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f042 0202 	orr.w	r2, r2, #2
 80090c2:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	691a      	ldr	r2, [r3, #16]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f042 0201 	orr.w	r2, r2, #1
 80090d2:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	691a      	ldr	r2, [r3, #16]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f042 0204 	orr.w	r2, r2, #4
 80090e2:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2201      	movs	r2, #1
 80090e8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 80090ec:	2300      	movs	r3, #0
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3708      	adds	r7, #8
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}

080090f6 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 80090f6:	b580      	push	{r7, lr}
 80090f8:	b082      	sub	sp, #8
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f003 0301 	and.w	r3, r3, #1
 8009108:	2b01      	cmp	r3, #1
 800910a:	d10d      	bne.n	8009128 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	689b      	ldr	r3, [r3, #8]
 8009112:	f003 0301 	and.w	r3, r3, #1
 8009116:	2b01      	cmp	r3, #1
 8009118:	d106      	bne.n	8009128 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	2201      	movs	r2, #1
 8009120:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f000 f882 	bl	800922c <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f003 0302 	and.w	r3, r3, #2
 8009132:	2b02      	cmp	r3, #2
 8009134:	d10d      	bne.n	8009152 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	689b      	ldr	r3, [r3, #8]
 800913c:	f003 0302 	and.w	r3, r3, #2
 8009140:	2b02      	cmp	r3, #2
 8009142:	d106      	bne.n	8009152 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	2202      	movs	r2, #2
 800914a:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f7fa f9fd 	bl	800354c <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f003 0304 	and.w	r3, r3, #4
 800915c:	2b04      	cmp	r3, #4
 800915e:	d10d      	bne.n	800917c <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	689b      	ldr	r3, [r3, #8]
 8009166:	f003 0304 	and.w	r3, r3, #4
 800916a:	2b04      	cmp	r3, #4
 800916c:	d106      	bne.n	800917c <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	2204      	movs	r2, #4
 8009174:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f000 f862 	bl	8009240 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f003 0308 	and.w	r3, r3, #8
 8009186:	2b08      	cmp	r3, #8
 8009188:	d10d      	bne.n	80091a6 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	689b      	ldr	r3, [r3, #8]
 8009190:	f003 0308 	and.w	r3, r3, #8
 8009194:	2b08      	cmp	r3, #8
 8009196:	d106      	bne.n	80091a6 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	2208      	movs	r2, #8
 800919e:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f000 f857 	bl	8009254 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f003 0310 	and.w	r3, r3, #16
 80091b0:	2b10      	cmp	r3, #16
 80091b2:	d10d      	bne.n	80091d0 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	689b      	ldr	r3, [r3, #8]
 80091ba:	f003 0310 	and.w	r3, r3, #16
 80091be:	2b10      	cmp	r3, #16
 80091c0:	d106      	bne.n	80091d0 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	2210      	movs	r2, #16
 80091c8:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f000 f84c 	bl	8009268 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f003 0320 	and.w	r3, r3, #32
 80091da:	2b20      	cmp	r3, #32
 80091dc:	d10d      	bne.n	80091fa <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	689b      	ldr	r3, [r3, #8]
 80091e4:	f003 0320 	and.w	r3, r3, #32
 80091e8:	2b20      	cmp	r3, #32
 80091ea:	d106      	bne.n	80091fa <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	2220      	movs	r2, #32
 80091f2:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f000 f841 	bl	800927c <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009204:	2b40      	cmp	r3, #64	; 0x40
 8009206:	d10d      	bne.n	8009224 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	689b      	ldr	r3, [r3, #8]
 800920e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009212:	2b40      	cmp	r3, #64	; 0x40
 8009214:	d106      	bne.n	8009224 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	2240      	movs	r2, #64	; 0x40
 800921c:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f000 f836 	bl	8009290 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8009224:	bf00      	nop
 8009226:	3708      	adds	r7, #8
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}

0800922c <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 800922c:	b480      	push	{r7}
 800922e:	b083      	sub	sp, #12
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8009234:	bf00      	nop
 8009236:	370c      	adds	r7, #12
 8009238:	46bd      	mov	sp, r7
 800923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923e:	4770      	bx	lr

08009240 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8009240:	b480      	push	{r7}
 8009242:	b083      	sub	sp, #12
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8009248:	bf00      	nop
 800924a:	370c      	adds	r7, #12
 800924c:	46bd      	mov	sp, r7
 800924e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009252:	4770      	bx	lr

08009254 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8009254:	b480      	push	{r7}
 8009256:	b083      	sub	sp, #12
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 800925c:	bf00      	nop
 800925e:	370c      	adds	r7, #12
 8009260:	46bd      	mov	sp, r7
 8009262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009266:	4770      	bx	lr

08009268 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8009268:	b480      	push	{r7}
 800926a:	b083      	sub	sp, #12
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8009270:	bf00      	nop
 8009272:	370c      	adds	r7, #12
 8009274:	46bd      	mov	sp, r7
 8009276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927a:	4770      	bx	lr

0800927c <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 800927c:	b480      	push	{r7}
 800927e:	b083      	sub	sp, #12
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8009284:	bf00      	nop
 8009286:	370c      	adds	r7, #12
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr

08009290 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8009290:	b480      	push	{r7}
 8009292:	b083      	sub	sp, #12
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8009298:	bf00      	nop
 800929a:	370c      	adds	r7, #12
 800929c:	46bd      	mov	sp, r7
 800929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a2:	4770      	bx	lr

080092a4 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b083      	sub	sp, #12
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80092b2:	b2db      	uxtb	r3, r3
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	370c      	adds	r7, #12
 80092b8:	46bd      	mov	sp, r7
 80092ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092be:	4770      	bx	lr

080092c0 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 80092c0:	b480      	push	{r7}
 80092c2:	b085      	sub	sp, #20
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 80092ca:	2300      	movs	r3, #0
 80092cc:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 80092ce:	4b12      	ldr	r3, [pc, #72]	; (8009318 <LPTIM_WaitForFlag+0x58>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	4a12      	ldr	r2, [pc, #72]	; (800931c <LPTIM_WaitForFlag+0x5c>)
 80092d4:	fba2 2303 	umull	r2, r3, r2, r3
 80092d8:	0b9b      	lsrs	r3, r3, #14
 80092da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80092de:	fb02 f303 	mul.w	r3, r2, r3
 80092e2:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	3b01      	subs	r3, #1
 80092e8:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d101      	bne.n	80092f4 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 80092f0:	2303      	movs	r3, #3
 80092f2:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	681a      	ldr	r2, [r3, #0]
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	4013      	ands	r3, r2
 80092fe:	683a      	ldr	r2, [r7, #0]
 8009300:	429a      	cmp	r2, r3
 8009302:	d002      	beq.n	800930a <LPTIM_WaitForFlag+0x4a>
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d1ec      	bne.n	80092e4 <LPTIM_WaitForFlag+0x24>

  return result;
 800930a:	7bfb      	ldrb	r3, [r7, #15]
}
 800930c:	4618      	mov	r0, r3
 800930e:	3714      	adds	r7, #20
 8009310:	46bd      	mov	sp, r7
 8009312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009316:	4770      	bx	lr
 8009318:	20000010 	.word	0x20000010
 800931c:	d1b71759 	.word	0xd1b71759

08009320 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b08c      	sub	sp, #48	; 0x30
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8009328:	2300      	movs	r3, #0
 800932a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800932c:	f3ef 8310 	mrs	r3, PRIMASK
 8009330:	60fb      	str	r3, [r7, #12]
  return(result);
 8009332:	68fb      	ldr	r3, [r7, #12]
  uint32_t tmpARR;
  uint32_t primask_bit;
  uint32_t tmpCFGR2;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8009334:	62bb      	str	r3, [r7, #40]	; 0x28
 8009336:	2301      	movs	r3, #1
 8009338:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	f383 8810 	msr	PRIMASK, r3
}
 8009340:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	4a81      	ldr	r2, [pc, #516]	; (800954c <LPTIM_Disable+0x22c>)
 8009348:	4293      	cmp	r3, r2
 800934a:	d02d      	beq.n	80093a8 <LPTIM_Disable+0x88>
 800934c:	4a7f      	ldr	r2, [pc, #508]	; (800954c <LPTIM_Disable+0x22c>)
 800934e:	4293      	cmp	r3, r2
 8009350:	d830      	bhi.n	80093b4 <LPTIM_Disable+0x94>
 8009352:	4a7f      	ldr	r2, [pc, #508]	; (8009550 <LPTIM_Disable+0x230>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d021      	beq.n	800939c <LPTIM_Disable+0x7c>
 8009358:	4a7d      	ldr	r2, [pc, #500]	; (8009550 <LPTIM_Disable+0x230>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d82a      	bhi.n	80093b4 <LPTIM_Disable+0x94>
 800935e:	4a7d      	ldr	r2, [pc, #500]	; (8009554 <LPTIM_Disable+0x234>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d015      	beq.n	8009390 <LPTIM_Disable+0x70>
 8009364:	4a7b      	ldr	r2, [pc, #492]	; (8009554 <LPTIM_Disable+0x234>)
 8009366:	4293      	cmp	r3, r2
 8009368:	d824      	bhi.n	80093b4 <LPTIM_Disable+0x94>
 800936a:	4a7b      	ldr	r2, [pc, #492]	; (8009558 <LPTIM_Disable+0x238>)
 800936c:	4293      	cmp	r3, r2
 800936e:	d003      	beq.n	8009378 <LPTIM_Disable+0x58>
 8009370:	4a7a      	ldr	r2, [pc, #488]	; (800955c <LPTIM_Disable+0x23c>)
 8009372:	4293      	cmp	r3, r2
 8009374:	d006      	beq.n	8009384 <LPTIM_Disable+0x64>
    case LPTIM5_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
      break;
#endif /* LPTIM5 */
    default:
      break;
 8009376:	e01d      	b.n	80093b4 <LPTIM_Disable+0x94>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8009378:	4b79      	ldr	r3, [pc, #484]	; (8009560 <LPTIM_Disable+0x240>)
 800937a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800937c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009380:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8009382:	e018      	b.n	80093b6 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8009384:	4b76      	ldr	r3, [pc, #472]	; (8009560 <LPTIM_Disable+0x240>)
 8009386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009388:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800938c:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 800938e:	e012      	b.n	80093b6 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
 8009390:	4b73      	ldr	r3, [pc, #460]	; (8009560 <LPTIM_Disable+0x240>)
 8009392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009394:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009398:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 800939a:	e00c      	b.n	80093b6 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM4_SOURCE();
 800939c:	4b70      	ldr	r3, [pc, #448]	; (8009560 <LPTIM_Disable+0x240>)
 800939e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093a0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80093a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 80093a6:	e006      	b.n	80093b6 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
 80093a8:	4b6d      	ldr	r3, [pc, #436]	; (8009560 <LPTIM_Disable+0x240>)
 80093aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093ac:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80093b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 80093b2:	e000      	b.n	80093b6 <LPTIM_Disable+0x96>
      break;
 80093b4:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	689b      	ldr	r3, [r3, #8]
 80093bc:	627b      	str	r3, [r7, #36]	; 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	68db      	ldr	r3, [r3, #12]
 80093c4:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	695b      	ldr	r3, [r3, #20]
 80093cc:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	699b      	ldr	r3, [r3, #24]
 80093d4:	61bb      	str	r3, [r7, #24]
  tmpCFGR2 = hlptim->Instance->CFGR2;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093dc:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	4a5a      	ldr	r2, [pc, #360]	; (800954c <LPTIM_Disable+0x22c>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d059      	beq.n	800949c <LPTIM_Disable+0x17c>
 80093e8:	4a58      	ldr	r2, [pc, #352]	; (800954c <LPTIM_Disable+0x22c>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d867      	bhi.n	80094be <LPTIM_Disable+0x19e>
 80093ee:	4a58      	ldr	r2, [pc, #352]	; (8009550 <LPTIM_Disable+0x230>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d042      	beq.n	800947a <LPTIM_Disable+0x15a>
 80093f4:	4a56      	ldr	r2, [pc, #344]	; (8009550 <LPTIM_Disable+0x230>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d861      	bhi.n	80094be <LPTIM_Disable+0x19e>
 80093fa:	4a56      	ldr	r2, [pc, #344]	; (8009554 <LPTIM_Disable+0x234>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d02b      	beq.n	8009458 <LPTIM_Disable+0x138>
 8009400:	4a54      	ldr	r2, [pc, #336]	; (8009554 <LPTIM_Disable+0x234>)
 8009402:	4293      	cmp	r3, r2
 8009404:	d85b      	bhi.n	80094be <LPTIM_Disable+0x19e>
 8009406:	4a54      	ldr	r2, [pc, #336]	; (8009558 <LPTIM_Disable+0x238>)
 8009408:	4293      	cmp	r3, r2
 800940a:	d003      	beq.n	8009414 <LPTIM_Disable+0xf4>
 800940c:	4a53      	ldr	r2, [pc, #332]	; (800955c <LPTIM_Disable+0x23c>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d011      	beq.n	8009436 <LPTIM_Disable+0x116>
      __HAL_RCC_LPTIM5_FORCE_RESET();
      __HAL_RCC_LPTIM5_RELEASE_RESET();
      break;
#endif /* LPTIM5 */
    default:
      break;
 8009412:	e054      	b.n	80094be <LPTIM_Disable+0x19e>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8009414:	4b52      	ldr	r3, [pc, #328]	; (8009560 <LPTIM_Disable+0x240>)
 8009416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800941a:	4a51      	ldr	r2, [pc, #324]	; (8009560 <LPTIM_Disable+0x240>)
 800941c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009420:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8009424:	4b4e      	ldr	r3, [pc, #312]	; (8009560 <LPTIM_Disable+0x240>)
 8009426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800942a:	4a4d      	ldr	r2, [pc, #308]	; (8009560 <LPTIM_Disable+0x240>)
 800942c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009430:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      break;
 8009434:	e044      	b.n	80094c0 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8009436:	4b4a      	ldr	r3, [pc, #296]	; (8009560 <LPTIM_Disable+0x240>)
 8009438:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800943c:	4a48      	ldr	r2, [pc, #288]	; (8009560 <LPTIM_Disable+0x240>)
 800943e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009442:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8009446:	4b46      	ldr	r3, [pc, #280]	; (8009560 <LPTIM_Disable+0x240>)
 8009448:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800944c:	4a44      	ldr	r2, [pc, #272]	; (8009560 <LPTIM_Disable+0x240>)
 800944e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009452:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8009456:	e033      	b.n	80094c0 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM3_FORCE_RESET();
 8009458:	4b41      	ldr	r3, [pc, #260]	; (8009560 <LPTIM_Disable+0x240>)
 800945a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800945e:	4a40      	ldr	r2, [pc, #256]	; (8009560 <LPTIM_Disable+0x240>)
 8009460:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009464:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM3_RELEASE_RESET();
 8009468:	4b3d      	ldr	r3, [pc, #244]	; (8009560 <LPTIM_Disable+0x240>)
 800946a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800946e:	4a3c      	ldr	r2, [pc, #240]	; (8009560 <LPTIM_Disable+0x240>)
 8009470:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009474:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8009478:	e022      	b.n	80094c0 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM4_FORCE_RESET();
 800947a:	4b39      	ldr	r3, [pc, #228]	; (8009560 <LPTIM_Disable+0x240>)
 800947c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009480:	4a37      	ldr	r2, [pc, #220]	; (8009560 <LPTIM_Disable+0x240>)
 8009482:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009486:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM4_RELEASE_RESET();
 800948a:	4b35      	ldr	r3, [pc, #212]	; (8009560 <LPTIM_Disable+0x240>)
 800948c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009490:	4a33      	ldr	r2, [pc, #204]	; (8009560 <LPTIM_Disable+0x240>)
 8009492:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009496:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 800949a:	e011      	b.n	80094c0 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM5_FORCE_RESET();
 800949c:	4b30      	ldr	r3, [pc, #192]	; (8009560 <LPTIM_Disable+0x240>)
 800949e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80094a2:	4a2f      	ldr	r2, [pc, #188]	; (8009560 <LPTIM_Disable+0x240>)
 80094a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80094a8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM5_RELEASE_RESET();
 80094ac:	4b2c      	ldr	r3, [pc, #176]	; (8009560 <LPTIM_Disable+0x240>)
 80094ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80094b2:	4a2b      	ldr	r2, [pc, #172]	; (8009560 <LPTIM_Disable+0x240>)
 80094b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80094b8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 80094bc:	e000      	b.n	80094c0 <LPTIM_Disable+0x1a0>
      break;
 80094be:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 80094c0:	69fb      	ldr	r3, [r7, #28]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d103      	bne.n	80094ce <LPTIM_Disable+0x1ae>
 80094c6:	69bb      	ldr	r3, [r7, #24]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	f000 80d1 	beq.w	8009670 <LPTIM_Disable+0x350>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	4a1e      	ldr	r2, [pc, #120]	; (800954c <LPTIM_Disable+0x22c>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d031      	beq.n	800953c <LPTIM_Disable+0x21c>
 80094d8:	4a1c      	ldr	r2, [pc, #112]	; (800954c <LPTIM_Disable+0x22c>)
 80094da:	4293      	cmp	r3, r2
 80094dc:	d842      	bhi.n	8009564 <LPTIM_Disable+0x244>
 80094de:	4a1c      	ldr	r2, [pc, #112]	; (8009550 <LPTIM_Disable+0x230>)
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d024      	beq.n	800952e <LPTIM_Disable+0x20e>
 80094e4:	4a1a      	ldr	r2, [pc, #104]	; (8009550 <LPTIM_Disable+0x230>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d83c      	bhi.n	8009564 <LPTIM_Disable+0x244>
 80094ea:	4a1a      	ldr	r2, [pc, #104]	; (8009554 <LPTIM_Disable+0x234>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d017      	beq.n	8009520 <LPTIM_Disable+0x200>
 80094f0:	4a18      	ldr	r2, [pc, #96]	; (8009554 <LPTIM_Disable+0x234>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d836      	bhi.n	8009564 <LPTIM_Disable+0x244>
 80094f6:	4a18      	ldr	r2, [pc, #96]	; (8009558 <LPTIM_Disable+0x238>)
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d003      	beq.n	8009504 <LPTIM_Disable+0x1e4>
 80094fc:	4a17      	ldr	r2, [pc, #92]	; (800955c <LPTIM_Disable+0x23c>)
 80094fe:	4293      	cmp	r3, r2
 8009500:	d007      	beq.n	8009512 <LPTIM_Disable+0x1f2>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
        break;
#endif /* LPTIM5 */
      default:
        break;
 8009502:	e02f      	b.n	8009564 <LPTIM_Disable+0x244>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_D2PCLK1);
 8009504:	4b16      	ldr	r3, [pc, #88]	; (8009560 <LPTIM_Disable+0x240>)
 8009506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009508:	4a15      	ldr	r2, [pc, #84]	; (8009560 <LPTIM_Disable+0x240>)
 800950a:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800950e:	6553      	str	r3, [r2, #84]	; 0x54
        break;
 8009510:	e029      	b.n	8009566 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_D3PCLK1);
 8009512:	4b13      	ldr	r3, [pc, #76]	; (8009560 <LPTIM_Disable+0x240>)
 8009514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009516:	4a12      	ldr	r2, [pc, #72]	; (8009560 <LPTIM_Disable+0x240>)
 8009518:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800951c:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 800951e:	e022      	b.n	8009566 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_D3PCLK1);
 8009520:	4b0f      	ldr	r3, [pc, #60]	; (8009560 <LPTIM_Disable+0x240>)
 8009522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009524:	4a0e      	ldr	r2, [pc, #56]	; (8009560 <LPTIM_Disable+0x240>)
 8009526:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800952a:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 800952c:	e01b      	b.n	8009566 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM4_CONFIG(RCC_LPTIM4CLKSOURCE_D3PCLK1);
 800952e:	4b0c      	ldr	r3, [pc, #48]	; (8009560 <LPTIM_Disable+0x240>)
 8009530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009532:	4a0b      	ldr	r2, [pc, #44]	; (8009560 <LPTIM_Disable+0x240>)
 8009534:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8009538:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 800953a:	e014      	b.n	8009566 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
 800953c:	4b08      	ldr	r3, [pc, #32]	; (8009560 <LPTIM_Disable+0x240>)
 800953e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009540:	4a07      	ldr	r2, [pc, #28]	; (8009560 <LPTIM_Disable+0x240>)
 8009542:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8009546:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8009548:	e00d      	b.n	8009566 <LPTIM_Disable+0x246>
 800954a:	bf00      	nop
 800954c:	58003000 	.word	0x58003000
 8009550:	58002c00 	.word	0x58002c00
 8009554:	58002800 	.word	0x58002800
 8009558:	40002400 	.word	0x40002400
 800955c:	58002400 	.word	0x58002400
 8009560:	58024400 	.word	0x58024400
        break;
 8009564:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8009566:	69fb      	ldr	r3, [r7, #28]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d01a      	beq.n	80095a2 <LPTIM_Disable+0x282>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	691a      	ldr	r2, [r3, #16]
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f042 0201 	orr.w	r2, r2, #1
 800957a:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	69fa      	ldr	r2, [r7, #28]
 8009582:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8009584:	2108      	movs	r1, #8
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f7ff fe9a 	bl	80092c0 <LPTIM_WaitForFlag>
 800958c:	4603      	mov	r3, r0
 800958e:	2b03      	cmp	r3, #3
 8009590:	d103      	bne.n	800959a <LPTIM_Disable+0x27a>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2203      	movs	r2, #3
 8009596:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	2208      	movs	r2, #8
 80095a0:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 80095a2:	69bb      	ldr	r3, [r7, #24]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d01a      	beq.n	80095de <LPTIM_Disable+0x2be>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	691a      	ldr	r2, [r3, #16]
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f042 0201 	orr.w	r2, r2, #1
 80095b6:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	69ba      	ldr	r2, [r7, #24]
 80095be:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80095c0:	2110      	movs	r1, #16
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f7ff fe7c 	bl	80092c0 <LPTIM_WaitForFlag>
 80095c8:	4603      	mov	r3, r0
 80095ca:	2b03      	cmp	r3, #3
 80095cc:	d103      	bne.n	80095d6 <LPTIM_Disable+0x2b6>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2203      	movs	r2, #3
 80095d2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	2210      	movs	r2, #16
 80095dc:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	4a32      	ldr	r2, [pc, #200]	; (80096ac <LPTIM_Disable+0x38c>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d039      	beq.n	800965c <LPTIM_Disable+0x33c>
 80095e8:	4a30      	ldr	r2, [pc, #192]	; (80096ac <LPTIM_Disable+0x38c>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d83f      	bhi.n	800966e <LPTIM_Disable+0x34e>
 80095ee:	4a30      	ldr	r2, [pc, #192]	; (80096b0 <LPTIM_Disable+0x390>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d02a      	beq.n	800964a <LPTIM_Disable+0x32a>
 80095f4:	4a2e      	ldr	r2, [pc, #184]	; (80096b0 <LPTIM_Disable+0x390>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d839      	bhi.n	800966e <LPTIM_Disable+0x34e>
 80095fa:	4a2e      	ldr	r2, [pc, #184]	; (80096b4 <LPTIM_Disable+0x394>)
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d01b      	beq.n	8009638 <LPTIM_Disable+0x318>
 8009600:	4a2c      	ldr	r2, [pc, #176]	; (80096b4 <LPTIM_Disable+0x394>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d833      	bhi.n	800966e <LPTIM_Disable+0x34e>
 8009606:	4a2c      	ldr	r2, [pc, #176]	; (80096b8 <LPTIM_Disable+0x398>)
 8009608:	4293      	cmp	r3, r2
 800960a:	d003      	beq.n	8009614 <LPTIM_Disable+0x2f4>
 800960c:	4a2b      	ldr	r2, [pc, #172]	; (80096bc <LPTIM_Disable+0x39c>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d009      	beq.n	8009626 <LPTIM_Disable+0x306>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
        break;
#endif /* LPTIM5 */
      default:
        break;
 8009612:	e02c      	b.n	800966e <LPTIM_Disable+0x34e>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8009614:	4b2a      	ldr	r3, [pc, #168]	; (80096c0 <LPTIM_Disable+0x3a0>)
 8009616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009618:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800961c:	4928      	ldr	r1, [pc, #160]	; (80096c0 <LPTIM_Disable+0x3a0>)
 800961e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009620:	4313      	orrs	r3, r2
 8009622:	654b      	str	r3, [r1, #84]	; 0x54
        break;
 8009624:	e024      	b.n	8009670 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8009626:	4b26      	ldr	r3, [pc, #152]	; (80096c0 <LPTIM_Disable+0x3a0>)
 8009628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800962a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800962e:	4924      	ldr	r1, [pc, #144]	; (80096c0 <LPTIM_Disable+0x3a0>)
 8009630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009632:	4313      	orrs	r3, r2
 8009634:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8009636:	e01b      	b.n	8009670 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
 8009638:	4b21      	ldr	r3, [pc, #132]	; (80096c0 <LPTIM_Disable+0x3a0>)
 800963a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800963c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009640:	491f      	ldr	r1, [pc, #124]	; (80096c0 <LPTIM_Disable+0x3a0>)
 8009642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009644:	4313      	orrs	r3, r2
 8009646:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8009648:	e012      	b.n	8009670 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM4_CONFIG(tmpclksource);
 800964a:	4b1d      	ldr	r3, [pc, #116]	; (80096c0 <LPTIM_Disable+0x3a0>)
 800964c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800964e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009652:	491b      	ldr	r1, [pc, #108]	; (80096c0 <LPTIM_Disable+0x3a0>)
 8009654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009656:	4313      	orrs	r3, r2
 8009658:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 800965a:	e009      	b.n	8009670 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
 800965c:	4b18      	ldr	r3, [pc, #96]	; (80096c0 <LPTIM_Disable+0x3a0>)
 800965e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009660:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009664:	4916      	ldr	r1, [pc, #88]	; (80096c0 <LPTIM_Disable+0x3a0>)
 8009666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009668:	4313      	orrs	r3, r2
 800966a:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 800966c:	e000      	b.n	8009670 <LPTIM_Disable+0x350>
        break;
 800966e:	bf00      	nop
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	691a      	ldr	r2, [r3, #16]
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f022 0201 	bic.w	r2, r2, #1
 800967e:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009686:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	6a3a      	ldr	r2, [r7, #32]
 800968e:	60da      	str	r2, [r3, #12]
  hlptim->Instance->CFGR2 = tmpCFGR2;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	697a      	ldr	r2, [r7, #20]
 8009696:	625a      	str	r2, [r3, #36]	; 0x24
 8009698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800969a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	f383 8810 	msr	PRIMASK, r3
}
 80096a2:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80096a4:	bf00      	nop
 80096a6:	3730      	adds	r7, #48	; 0x30
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}
 80096ac:	58003000 	.word	0x58003000
 80096b0:	58002c00 	.word	0x58002c00
 80096b4:	58002800 	.word	0x58002800
 80096b8:	40002400 	.word	0x40002400
 80096bc:	58002400 	.word	0x58002400
 80096c0:	58024400 	.word	0x58024400

080096c4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 80096c4:	b480      	push	{r7}
 80096c6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 80096c8:	4b05      	ldr	r3, [pc, #20]	; (80096e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	4a04      	ldr	r2, [pc, #16]	; (80096e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80096ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80096d2:	6013      	str	r3, [r2, #0]
}
 80096d4:	bf00      	nop
 80096d6:	46bd      	mov	sp, r7
 80096d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096dc:	4770      	bx	lr
 80096de:	bf00      	nop
 80096e0:	58024800 	.word	0x58024800

080096e4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b084      	sub	sp, #16
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80096ec:	4b19      	ldr	r3, [pc, #100]	; (8009754 <HAL_PWREx_ConfigSupply+0x70>)
 80096ee:	68db      	ldr	r3, [r3, #12]
 80096f0:	f003 0304 	and.w	r3, r3, #4
 80096f4:	2b04      	cmp	r3, #4
 80096f6:	d00a      	beq.n	800970e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80096f8:	4b16      	ldr	r3, [pc, #88]	; (8009754 <HAL_PWREx_ConfigSupply+0x70>)
 80096fa:	68db      	ldr	r3, [r3, #12]
 80096fc:	f003 0307 	and.w	r3, r3, #7
 8009700:	687a      	ldr	r2, [r7, #4]
 8009702:	429a      	cmp	r2, r3
 8009704:	d001      	beq.n	800970a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009706:	2301      	movs	r3, #1
 8009708:	e01f      	b.n	800974a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800970a:	2300      	movs	r3, #0
 800970c:	e01d      	b.n	800974a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800970e:	4b11      	ldr	r3, [pc, #68]	; (8009754 <HAL_PWREx_ConfigSupply+0x70>)
 8009710:	68db      	ldr	r3, [r3, #12]
 8009712:	f023 0207 	bic.w	r2, r3, #7
 8009716:	490f      	ldr	r1, [pc, #60]	; (8009754 <HAL_PWREx_ConfigSupply+0x70>)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	4313      	orrs	r3, r2
 800971c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800971e:	f7fa f9bf 	bl	8003aa0 <HAL_GetTick>
 8009722:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009724:	e009      	b.n	800973a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009726:	f7fa f9bb 	bl	8003aa0 <HAL_GetTick>
 800972a:	4602      	mov	r2, r0
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	1ad3      	subs	r3, r2, r3
 8009730:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009734:	d901      	bls.n	800973a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009736:	2301      	movs	r3, #1
 8009738:	e007      	b.n	800974a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800973a:	4b06      	ldr	r3, [pc, #24]	; (8009754 <HAL_PWREx_ConfigSupply+0x70>)
 800973c:	685b      	ldr	r3, [r3, #4]
 800973e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009742:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009746:	d1ee      	bne.n	8009726 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009748:	2300      	movs	r3, #0
}
 800974a:	4618      	mov	r0, r3
 800974c:	3710      	adds	r7, #16
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}
 8009752:	bf00      	nop
 8009754:	58024800 	.word	0x58024800

08009758 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b08c      	sub	sp, #48	; 0x30
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d102      	bne.n	800976c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009766:	2301      	movs	r3, #1
 8009768:	f000 bc48 	b.w	8009ffc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f003 0301 	and.w	r3, r3, #1
 8009774:	2b00      	cmp	r3, #0
 8009776:	f000 8088 	beq.w	800988a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800977a:	4b99      	ldr	r3, [pc, #612]	; (80099e0 <HAL_RCC_OscConfig+0x288>)
 800977c:	691b      	ldr	r3, [r3, #16]
 800977e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009782:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009784:	4b96      	ldr	r3, [pc, #600]	; (80099e0 <HAL_RCC_OscConfig+0x288>)
 8009786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009788:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800978a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800978c:	2b10      	cmp	r3, #16
 800978e:	d007      	beq.n	80097a0 <HAL_RCC_OscConfig+0x48>
 8009790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009792:	2b18      	cmp	r3, #24
 8009794:	d111      	bne.n	80097ba <HAL_RCC_OscConfig+0x62>
 8009796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009798:	f003 0303 	and.w	r3, r3, #3
 800979c:	2b02      	cmp	r3, #2
 800979e:	d10c      	bne.n	80097ba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80097a0:	4b8f      	ldr	r3, [pc, #572]	; (80099e0 <HAL_RCC_OscConfig+0x288>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d06d      	beq.n	8009888 <HAL_RCC_OscConfig+0x130>
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	685b      	ldr	r3, [r3, #4]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d169      	bne.n	8009888 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80097b4:	2301      	movs	r3, #1
 80097b6:	f000 bc21 	b.w	8009ffc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	685b      	ldr	r3, [r3, #4]
 80097be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097c2:	d106      	bne.n	80097d2 <HAL_RCC_OscConfig+0x7a>
 80097c4:	4b86      	ldr	r3, [pc, #536]	; (80099e0 <HAL_RCC_OscConfig+0x288>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	4a85      	ldr	r2, [pc, #532]	; (80099e0 <HAL_RCC_OscConfig+0x288>)
 80097ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80097ce:	6013      	str	r3, [r2, #0]
 80097d0:	e02e      	b.n	8009830 <HAL_RCC_OscConfig+0xd8>
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	685b      	ldr	r3, [r3, #4]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d10c      	bne.n	80097f4 <HAL_RCC_OscConfig+0x9c>
 80097da:	4b81      	ldr	r3, [pc, #516]	; (80099e0 <HAL_RCC_OscConfig+0x288>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	4a80      	ldr	r2, [pc, #512]	; (80099e0 <HAL_RCC_OscConfig+0x288>)
 80097e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80097e4:	6013      	str	r3, [r2, #0]
 80097e6:	4b7e      	ldr	r3, [pc, #504]	; (80099e0 <HAL_RCC_OscConfig+0x288>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	4a7d      	ldr	r2, [pc, #500]	; (80099e0 <HAL_RCC_OscConfig+0x288>)
 80097ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80097f0:	6013      	str	r3, [r2, #0]
 80097f2:	e01d      	b.n	8009830 <HAL_RCC_OscConfig+0xd8>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	685b      	ldr	r3, [r3, #4]
 80097f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80097fc:	d10c      	bne.n	8009818 <HAL_RCC_OscConfig+0xc0>
 80097fe:	4b78      	ldr	r3, [pc, #480]	; (80099e0 <HAL_RCC_OscConfig+0x288>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4a77      	ldr	r2, [pc, #476]	; (80099e0 <HAL_RCC_OscConfig+0x288>)
 8009804:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009808:	6013      	str	r3, [r2, #0]
 800980a:	4b75      	ldr	r3, [pc, #468]	; (80099e0 <HAL_RCC_OscConfig+0x288>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	4a74      	ldr	r2, [pc, #464]	; (80099e0 <HAL_RCC_OscConfig+0x288>)
 8009810:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009814:	6013      	str	r3, [r2, #0]
 8009816:	e00b      	b.n	8009830 <HAL_RCC_OscConfig+0xd8>
 8009818:	4b71      	ldr	r3, [pc, #452]	; (80099e0 <HAL_RCC_OscConfig+0x288>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	4a70      	ldr	r2, [pc, #448]	; (80099e0 <HAL_RCC_OscConfig+0x288>)
 800981e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009822:	6013      	str	r3, [r2, #0]
 8009824:	4b6e      	ldr	r3, [pc, #440]	; (80099e0 <HAL_RCC_OscConfig+0x288>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4a6d      	ldr	r2, [pc, #436]	; (80099e0 <HAL_RCC_OscConfig+0x288>)
 800982a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800982e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d013      	beq.n	8009860 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009838:	f7fa f932 	bl	8003aa0 <HAL_GetTick>
 800983c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800983e:	e008      	b.n	8009852 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009840:	f7fa f92e 	bl	8003aa0 <HAL_GetTick>
 8009844:	4602      	mov	r2, r0
 8009846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009848:	1ad3      	subs	r3, r2, r3
 800984a:	2b64      	cmp	r3, #100	; 0x64
 800984c:	d901      	bls.n	8009852 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800984e:	2303      	movs	r3, #3
 8009850:	e3d4      	b.n	8009ffc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009852:	4b63      	ldr	r3, [pc, #396]	; (80099e0 <HAL_RCC_OscConfig+0x288>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800985a:	2b00      	cmp	r3, #0
 800985c:	d0f0      	beq.n	8009840 <HAL_RCC_OscConfig+0xe8>
 800985e:	e014      	b.n	800988a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009860:	f7fa f91e 	bl	8003aa0 <HAL_GetTick>
 8009864:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009866:	e008      	b.n	800987a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009868:	f7fa f91a 	bl	8003aa0 <HAL_GetTick>
 800986c:	4602      	mov	r2, r0
 800986e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009870:	1ad3      	subs	r3, r2, r3
 8009872:	2b64      	cmp	r3, #100	; 0x64
 8009874:	d901      	bls.n	800987a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8009876:	2303      	movs	r3, #3
 8009878:	e3c0      	b.n	8009ffc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800987a:	4b59      	ldr	r3, [pc, #356]	; (80099e0 <HAL_RCC_OscConfig+0x288>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009882:	2b00      	cmp	r3, #0
 8009884:	d1f0      	bne.n	8009868 <HAL_RCC_OscConfig+0x110>
 8009886:	e000      	b.n	800988a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009888:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f003 0302 	and.w	r3, r3, #2
 8009892:	2b00      	cmp	r3, #0
 8009894:	f000 80ca 	beq.w	8009a2c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009898:	4b51      	ldr	r3, [pc, #324]	; (80099e0 <HAL_RCC_OscConfig+0x288>)
 800989a:	691b      	ldr	r3, [r3, #16]
 800989c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80098a0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80098a2:	4b4f      	ldr	r3, [pc, #316]	; (80099e0 <HAL_RCC_OscConfig+0x288>)
 80098a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098a6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80098a8:	6a3b      	ldr	r3, [r7, #32]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d007      	beq.n	80098be <HAL_RCC_OscConfig+0x166>
 80098ae:	6a3b      	ldr	r3, [r7, #32]
 80098b0:	2b18      	cmp	r3, #24
 80098b2:	d156      	bne.n	8009962 <HAL_RCC_OscConfig+0x20a>
 80098b4:	69fb      	ldr	r3, [r7, #28]
 80098b6:	f003 0303 	and.w	r3, r3, #3
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d151      	bne.n	8009962 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80098be:	4b48      	ldr	r3, [pc, #288]	; (80099e0 <HAL_RCC_OscConfig+0x288>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f003 0304 	and.w	r3, r3, #4
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d005      	beq.n	80098d6 <HAL_RCC_OscConfig+0x17e>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	68db      	ldr	r3, [r3, #12]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d101      	bne.n	80098d6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80098d2:	2301      	movs	r3, #1
 80098d4:	e392      	b.n	8009ffc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80098d6:	4b42      	ldr	r3, [pc, #264]	; (80099e0 <HAL_RCC_OscConfig+0x288>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f023 0219 	bic.w	r2, r3, #25
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	68db      	ldr	r3, [r3, #12]
 80098e2:	493f      	ldr	r1, [pc, #252]	; (80099e0 <HAL_RCC_OscConfig+0x288>)
 80098e4:	4313      	orrs	r3, r2
 80098e6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098e8:	f7fa f8da 	bl	8003aa0 <HAL_GetTick>
 80098ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80098ee:	e008      	b.n	8009902 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80098f0:	f7fa f8d6 	bl	8003aa0 <HAL_GetTick>
 80098f4:	4602      	mov	r2, r0
 80098f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f8:	1ad3      	subs	r3, r2, r3
 80098fa:	2b02      	cmp	r3, #2
 80098fc:	d901      	bls.n	8009902 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80098fe:	2303      	movs	r3, #3
 8009900:	e37c      	b.n	8009ffc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009902:	4b37      	ldr	r3, [pc, #220]	; (80099e0 <HAL_RCC_OscConfig+0x288>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f003 0304 	and.w	r3, r3, #4
 800990a:	2b00      	cmp	r3, #0
 800990c:	d0f0      	beq.n	80098f0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800990e:	f7fa f8f7 	bl	8003b00 <HAL_GetREVID>
 8009912:	4603      	mov	r3, r0
 8009914:	f241 0203 	movw	r2, #4099	; 0x1003
 8009918:	4293      	cmp	r3, r2
 800991a:	d817      	bhi.n	800994c <HAL_RCC_OscConfig+0x1f4>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	691b      	ldr	r3, [r3, #16]
 8009920:	2b40      	cmp	r3, #64	; 0x40
 8009922:	d108      	bne.n	8009936 <HAL_RCC_OscConfig+0x1de>
 8009924:	4b2e      	ldr	r3, [pc, #184]	; (80099e0 <HAL_RCC_OscConfig+0x288>)
 8009926:	685b      	ldr	r3, [r3, #4]
 8009928:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800992c:	4a2c      	ldr	r2, [pc, #176]	; (80099e0 <HAL_RCC_OscConfig+0x288>)
 800992e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009932:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009934:	e07a      	b.n	8009a2c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009936:	4b2a      	ldr	r3, [pc, #168]	; (80099e0 <HAL_RCC_OscConfig+0x288>)
 8009938:	685b      	ldr	r3, [r3, #4]
 800993a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	691b      	ldr	r3, [r3, #16]
 8009942:	031b      	lsls	r3, r3, #12
 8009944:	4926      	ldr	r1, [pc, #152]	; (80099e0 <HAL_RCC_OscConfig+0x288>)
 8009946:	4313      	orrs	r3, r2
 8009948:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800994a:	e06f      	b.n	8009a2c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800994c:	4b24      	ldr	r3, [pc, #144]	; (80099e0 <HAL_RCC_OscConfig+0x288>)
 800994e:	685b      	ldr	r3, [r3, #4]
 8009950:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	691b      	ldr	r3, [r3, #16]
 8009958:	061b      	lsls	r3, r3, #24
 800995a:	4921      	ldr	r1, [pc, #132]	; (80099e0 <HAL_RCC_OscConfig+0x288>)
 800995c:	4313      	orrs	r3, r2
 800995e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009960:	e064      	b.n	8009a2c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	68db      	ldr	r3, [r3, #12]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d047      	beq.n	80099fa <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800996a:	4b1d      	ldr	r3, [pc, #116]	; (80099e0 <HAL_RCC_OscConfig+0x288>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f023 0219 	bic.w	r2, r3, #25
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	68db      	ldr	r3, [r3, #12]
 8009976:	491a      	ldr	r1, [pc, #104]	; (80099e0 <HAL_RCC_OscConfig+0x288>)
 8009978:	4313      	orrs	r3, r2
 800997a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800997c:	f7fa f890 	bl	8003aa0 <HAL_GetTick>
 8009980:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009982:	e008      	b.n	8009996 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009984:	f7fa f88c 	bl	8003aa0 <HAL_GetTick>
 8009988:	4602      	mov	r2, r0
 800998a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800998c:	1ad3      	subs	r3, r2, r3
 800998e:	2b02      	cmp	r3, #2
 8009990:	d901      	bls.n	8009996 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8009992:	2303      	movs	r3, #3
 8009994:	e332      	b.n	8009ffc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009996:	4b12      	ldr	r3, [pc, #72]	; (80099e0 <HAL_RCC_OscConfig+0x288>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f003 0304 	and.w	r3, r3, #4
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d0f0      	beq.n	8009984 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80099a2:	f7fa f8ad 	bl	8003b00 <HAL_GetREVID>
 80099a6:	4603      	mov	r3, r0
 80099a8:	f241 0203 	movw	r2, #4099	; 0x1003
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d819      	bhi.n	80099e4 <HAL_RCC_OscConfig+0x28c>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	691b      	ldr	r3, [r3, #16]
 80099b4:	2b40      	cmp	r3, #64	; 0x40
 80099b6:	d108      	bne.n	80099ca <HAL_RCC_OscConfig+0x272>
 80099b8:	4b09      	ldr	r3, [pc, #36]	; (80099e0 <HAL_RCC_OscConfig+0x288>)
 80099ba:	685b      	ldr	r3, [r3, #4]
 80099bc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80099c0:	4a07      	ldr	r2, [pc, #28]	; (80099e0 <HAL_RCC_OscConfig+0x288>)
 80099c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099c6:	6053      	str	r3, [r2, #4]
 80099c8:	e030      	b.n	8009a2c <HAL_RCC_OscConfig+0x2d4>
 80099ca:	4b05      	ldr	r3, [pc, #20]	; (80099e0 <HAL_RCC_OscConfig+0x288>)
 80099cc:	685b      	ldr	r3, [r3, #4]
 80099ce:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	691b      	ldr	r3, [r3, #16]
 80099d6:	031b      	lsls	r3, r3, #12
 80099d8:	4901      	ldr	r1, [pc, #4]	; (80099e0 <HAL_RCC_OscConfig+0x288>)
 80099da:	4313      	orrs	r3, r2
 80099dc:	604b      	str	r3, [r1, #4]
 80099de:	e025      	b.n	8009a2c <HAL_RCC_OscConfig+0x2d4>
 80099e0:	58024400 	.word	0x58024400
 80099e4:	4b9a      	ldr	r3, [pc, #616]	; (8009c50 <HAL_RCC_OscConfig+0x4f8>)
 80099e6:	685b      	ldr	r3, [r3, #4]
 80099e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	691b      	ldr	r3, [r3, #16]
 80099f0:	061b      	lsls	r3, r3, #24
 80099f2:	4997      	ldr	r1, [pc, #604]	; (8009c50 <HAL_RCC_OscConfig+0x4f8>)
 80099f4:	4313      	orrs	r3, r2
 80099f6:	604b      	str	r3, [r1, #4]
 80099f8:	e018      	b.n	8009a2c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80099fa:	4b95      	ldr	r3, [pc, #596]	; (8009c50 <HAL_RCC_OscConfig+0x4f8>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	4a94      	ldr	r2, [pc, #592]	; (8009c50 <HAL_RCC_OscConfig+0x4f8>)
 8009a00:	f023 0301 	bic.w	r3, r3, #1
 8009a04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a06:	f7fa f84b 	bl	8003aa0 <HAL_GetTick>
 8009a0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009a0c:	e008      	b.n	8009a20 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009a0e:	f7fa f847 	bl	8003aa0 <HAL_GetTick>
 8009a12:	4602      	mov	r2, r0
 8009a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a16:	1ad3      	subs	r3, r2, r3
 8009a18:	2b02      	cmp	r3, #2
 8009a1a:	d901      	bls.n	8009a20 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8009a1c:	2303      	movs	r3, #3
 8009a1e:	e2ed      	b.n	8009ffc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009a20:	4b8b      	ldr	r3, [pc, #556]	; (8009c50 <HAL_RCC_OscConfig+0x4f8>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f003 0304 	and.w	r3, r3, #4
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d1f0      	bne.n	8009a0e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f003 0310 	and.w	r3, r3, #16
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	f000 80a9 	beq.w	8009b8c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009a3a:	4b85      	ldr	r3, [pc, #532]	; (8009c50 <HAL_RCC_OscConfig+0x4f8>)
 8009a3c:	691b      	ldr	r3, [r3, #16]
 8009a3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a42:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009a44:	4b82      	ldr	r3, [pc, #520]	; (8009c50 <HAL_RCC_OscConfig+0x4f8>)
 8009a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a48:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009a4a:	69bb      	ldr	r3, [r7, #24]
 8009a4c:	2b08      	cmp	r3, #8
 8009a4e:	d007      	beq.n	8009a60 <HAL_RCC_OscConfig+0x308>
 8009a50:	69bb      	ldr	r3, [r7, #24]
 8009a52:	2b18      	cmp	r3, #24
 8009a54:	d13a      	bne.n	8009acc <HAL_RCC_OscConfig+0x374>
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	f003 0303 	and.w	r3, r3, #3
 8009a5c:	2b01      	cmp	r3, #1
 8009a5e:	d135      	bne.n	8009acc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009a60:	4b7b      	ldr	r3, [pc, #492]	; (8009c50 <HAL_RCC_OscConfig+0x4f8>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d005      	beq.n	8009a78 <HAL_RCC_OscConfig+0x320>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	69db      	ldr	r3, [r3, #28]
 8009a70:	2b80      	cmp	r3, #128	; 0x80
 8009a72:	d001      	beq.n	8009a78 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8009a74:	2301      	movs	r3, #1
 8009a76:	e2c1      	b.n	8009ffc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009a78:	f7fa f842 	bl	8003b00 <HAL_GetREVID>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	f241 0203 	movw	r2, #4099	; 0x1003
 8009a82:	4293      	cmp	r3, r2
 8009a84:	d817      	bhi.n	8009ab6 <HAL_RCC_OscConfig+0x35e>
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6a1b      	ldr	r3, [r3, #32]
 8009a8a:	2b20      	cmp	r3, #32
 8009a8c:	d108      	bne.n	8009aa0 <HAL_RCC_OscConfig+0x348>
 8009a8e:	4b70      	ldr	r3, [pc, #448]	; (8009c50 <HAL_RCC_OscConfig+0x4f8>)
 8009a90:	685b      	ldr	r3, [r3, #4]
 8009a92:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009a96:	4a6e      	ldr	r2, [pc, #440]	; (8009c50 <HAL_RCC_OscConfig+0x4f8>)
 8009a98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009a9c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009a9e:	e075      	b.n	8009b8c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009aa0:	4b6b      	ldr	r3, [pc, #428]	; (8009c50 <HAL_RCC_OscConfig+0x4f8>)
 8009aa2:	685b      	ldr	r3, [r3, #4]
 8009aa4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6a1b      	ldr	r3, [r3, #32]
 8009aac:	069b      	lsls	r3, r3, #26
 8009aae:	4968      	ldr	r1, [pc, #416]	; (8009c50 <HAL_RCC_OscConfig+0x4f8>)
 8009ab0:	4313      	orrs	r3, r2
 8009ab2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009ab4:	e06a      	b.n	8009b8c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009ab6:	4b66      	ldr	r3, [pc, #408]	; (8009c50 <HAL_RCC_OscConfig+0x4f8>)
 8009ab8:	68db      	ldr	r3, [r3, #12]
 8009aba:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6a1b      	ldr	r3, [r3, #32]
 8009ac2:	061b      	lsls	r3, r3, #24
 8009ac4:	4962      	ldr	r1, [pc, #392]	; (8009c50 <HAL_RCC_OscConfig+0x4f8>)
 8009ac6:	4313      	orrs	r3, r2
 8009ac8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009aca:	e05f      	b.n	8009b8c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	69db      	ldr	r3, [r3, #28]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d042      	beq.n	8009b5a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009ad4:	4b5e      	ldr	r3, [pc, #376]	; (8009c50 <HAL_RCC_OscConfig+0x4f8>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	4a5d      	ldr	r2, [pc, #372]	; (8009c50 <HAL_RCC_OscConfig+0x4f8>)
 8009ada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ade:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ae0:	f7f9 ffde 	bl	8003aa0 <HAL_GetTick>
 8009ae4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009ae6:	e008      	b.n	8009afa <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009ae8:	f7f9 ffda 	bl	8003aa0 <HAL_GetTick>
 8009aec:	4602      	mov	r2, r0
 8009aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af0:	1ad3      	subs	r3, r2, r3
 8009af2:	2b02      	cmp	r3, #2
 8009af4:	d901      	bls.n	8009afa <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8009af6:	2303      	movs	r3, #3
 8009af8:	e280      	b.n	8009ffc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009afa:	4b55      	ldr	r3, [pc, #340]	; (8009c50 <HAL_RCC_OscConfig+0x4f8>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d0f0      	beq.n	8009ae8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009b06:	f7f9 fffb 	bl	8003b00 <HAL_GetREVID>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	f241 0203 	movw	r2, #4099	; 0x1003
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d817      	bhi.n	8009b44 <HAL_RCC_OscConfig+0x3ec>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6a1b      	ldr	r3, [r3, #32]
 8009b18:	2b20      	cmp	r3, #32
 8009b1a:	d108      	bne.n	8009b2e <HAL_RCC_OscConfig+0x3d6>
 8009b1c:	4b4c      	ldr	r3, [pc, #304]	; (8009c50 <HAL_RCC_OscConfig+0x4f8>)
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009b24:	4a4a      	ldr	r2, [pc, #296]	; (8009c50 <HAL_RCC_OscConfig+0x4f8>)
 8009b26:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009b2a:	6053      	str	r3, [r2, #4]
 8009b2c:	e02e      	b.n	8009b8c <HAL_RCC_OscConfig+0x434>
 8009b2e:	4b48      	ldr	r3, [pc, #288]	; (8009c50 <HAL_RCC_OscConfig+0x4f8>)
 8009b30:	685b      	ldr	r3, [r3, #4]
 8009b32:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6a1b      	ldr	r3, [r3, #32]
 8009b3a:	069b      	lsls	r3, r3, #26
 8009b3c:	4944      	ldr	r1, [pc, #272]	; (8009c50 <HAL_RCC_OscConfig+0x4f8>)
 8009b3e:	4313      	orrs	r3, r2
 8009b40:	604b      	str	r3, [r1, #4]
 8009b42:	e023      	b.n	8009b8c <HAL_RCC_OscConfig+0x434>
 8009b44:	4b42      	ldr	r3, [pc, #264]	; (8009c50 <HAL_RCC_OscConfig+0x4f8>)
 8009b46:	68db      	ldr	r3, [r3, #12]
 8009b48:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6a1b      	ldr	r3, [r3, #32]
 8009b50:	061b      	lsls	r3, r3, #24
 8009b52:	493f      	ldr	r1, [pc, #252]	; (8009c50 <HAL_RCC_OscConfig+0x4f8>)
 8009b54:	4313      	orrs	r3, r2
 8009b56:	60cb      	str	r3, [r1, #12]
 8009b58:	e018      	b.n	8009b8c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009b5a:	4b3d      	ldr	r3, [pc, #244]	; (8009c50 <HAL_RCC_OscConfig+0x4f8>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	4a3c      	ldr	r2, [pc, #240]	; (8009c50 <HAL_RCC_OscConfig+0x4f8>)
 8009b60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b66:	f7f9 ff9b 	bl	8003aa0 <HAL_GetTick>
 8009b6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009b6c:	e008      	b.n	8009b80 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009b6e:	f7f9 ff97 	bl	8003aa0 <HAL_GetTick>
 8009b72:	4602      	mov	r2, r0
 8009b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b76:	1ad3      	subs	r3, r2, r3
 8009b78:	2b02      	cmp	r3, #2
 8009b7a:	d901      	bls.n	8009b80 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009b7c:	2303      	movs	r3, #3
 8009b7e:	e23d      	b.n	8009ffc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009b80:	4b33      	ldr	r3, [pc, #204]	; (8009c50 <HAL_RCC_OscConfig+0x4f8>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d1f0      	bne.n	8009b6e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f003 0308 	and.w	r3, r3, #8
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d036      	beq.n	8009c06 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	695b      	ldr	r3, [r3, #20]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d019      	beq.n	8009bd4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009ba0:	4b2b      	ldr	r3, [pc, #172]	; (8009c50 <HAL_RCC_OscConfig+0x4f8>)
 8009ba2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ba4:	4a2a      	ldr	r2, [pc, #168]	; (8009c50 <HAL_RCC_OscConfig+0x4f8>)
 8009ba6:	f043 0301 	orr.w	r3, r3, #1
 8009baa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009bac:	f7f9 ff78 	bl	8003aa0 <HAL_GetTick>
 8009bb0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009bb2:	e008      	b.n	8009bc6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009bb4:	f7f9 ff74 	bl	8003aa0 <HAL_GetTick>
 8009bb8:	4602      	mov	r2, r0
 8009bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bbc:	1ad3      	subs	r3, r2, r3
 8009bbe:	2b02      	cmp	r3, #2
 8009bc0:	d901      	bls.n	8009bc6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8009bc2:	2303      	movs	r3, #3
 8009bc4:	e21a      	b.n	8009ffc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009bc6:	4b22      	ldr	r3, [pc, #136]	; (8009c50 <HAL_RCC_OscConfig+0x4f8>)
 8009bc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bca:	f003 0302 	and.w	r3, r3, #2
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d0f0      	beq.n	8009bb4 <HAL_RCC_OscConfig+0x45c>
 8009bd2:	e018      	b.n	8009c06 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009bd4:	4b1e      	ldr	r3, [pc, #120]	; (8009c50 <HAL_RCC_OscConfig+0x4f8>)
 8009bd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bd8:	4a1d      	ldr	r2, [pc, #116]	; (8009c50 <HAL_RCC_OscConfig+0x4f8>)
 8009bda:	f023 0301 	bic.w	r3, r3, #1
 8009bde:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009be0:	f7f9 ff5e 	bl	8003aa0 <HAL_GetTick>
 8009be4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009be6:	e008      	b.n	8009bfa <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009be8:	f7f9 ff5a 	bl	8003aa0 <HAL_GetTick>
 8009bec:	4602      	mov	r2, r0
 8009bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf0:	1ad3      	subs	r3, r2, r3
 8009bf2:	2b02      	cmp	r3, #2
 8009bf4:	d901      	bls.n	8009bfa <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8009bf6:	2303      	movs	r3, #3
 8009bf8:	e200      	b.n	8009ffc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009bfa:	4b15      	ldr	r3, [pc, #84]	; (8009c50 <HAL_RCC_OscConfig+0x4f8>)
 8009bfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bfe:	f003 0302 	and.w	r3, r3, #2
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d1f0      	bne.n	8009be8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f003 0320 	and.w	r3, r3, #32
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d039      	beq.n	8009c86 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	699b      	ldr	r3, [r3, #24]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d01c      	beq.n	8009c54 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009c1a:	4b0d      	ldr	r3, [pc, #52]	; (8009c50 <HAL_RCC_OscConfig+0x4f8>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	4a0c      	ldr	r2, [pc, #48]	; (8009c50 <HAL_RCC_OscConfig+0x4f8>)
 8009c20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009c24:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009c26:	f7f9 ff3b 	bl	8003aa0 <HAL_GetTick>
 8009c2a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009c2c:	e008      	b.n	8009c40 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009c2e:	f7f9 ff37 	bl	8003aa0 <HAL_GetTick>
 8009c32:	4602      	mov	r2, r0
 8009c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c36:	1ad3      	subs	r3, r2, r3
 8009c38:	2b02      	cmp	r3, #2
 8009c3a:	d901      	bls.n	8009c40 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8009c3c:	2303      	movs	r3, #3
 8009c3e:	e1dd      	b.n	8009ffc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009c40:	4b03      	ldr	r3, [pc, #12]	; (8009c50 <HAL_RCC_OscConfig+0x4f8>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d0f0      	beq.n	8009c2e <HAL_RCC_OscConfig+0x4d6>
 8009c4c:	e01b      	b.n	8009c86 <HAL_RCC_OscConfig+0x52e>
 8009c4e:	bf00      	nop
 8009c50:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009c54:	4b9b      	ldr	r3, [pc, #620]	; (8009ec4 <HAL_RCC_OscConfig+0x76c>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	4a9a      	ldr	r2, [pc, #616]	; (8009ec4 <HAL_RCC_OscConfig+0x76c>)
 8009c5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c5e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009c60:	f7f9 ff1e 	bl	8003aa0 <HAL_GetTick>
 8009c64:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009c66:	e008      	b.n	8009c7a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009c68:	f7f9 ff1a 	bl	8003aa0 <HAL_GetTick>
 8009c6c:	4602      	mov	r2, r0
 8009c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c70:	1ad3      	subs	r3, r2, r3
 8009c72:	2b02      	cmp	r3, #2
 8009c74:	d901      	bls.n	8009c7a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8009c76:	2303      	movs	r3, #3
 8009c78:	e1c0      	b.n	8009ffc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009c7a:	4b92      	ldr	r3, [pc, #584]	; (8009ec4 <HAL_RCC_OscConfig+0x76c>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d1f0      	bne.n	8009c68 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f003 0304 	and.w	r3, r3, #4
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	f000 8081 	beq.w	8009d96 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009c94:	4b8c      	ldr	r3, [pc, #560]	; (8009ec8 <HAL_RCC_OscConfig+0x770>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	4a8b      	ldr	r2, [pc, #556]	; (8009ec8 <HAL_RCC_OscConfig+0x770>)
 8009c9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c9e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009ca0:	f7f9 fefe 	bl	8003aa0 <HAL_GetTick>
 8009ca4:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009ca6:	e008      	b.n	8009cba <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009ca8:	f7f9 fefa 	bl	8003aa0 <HAL_GetTick>
 8009cac:	4602      	mov	r2, r0
 8009cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb0:	1ad3      	subs	r3, r2, r3
 8009cb2:	2b64      	cmp	r3, #100	; 0x64
 8009cb4:	d901      	bls.n	8009cba <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8009cb6:	2303      	movs	r3, #3
 8009cb8:	e1a0      	b.n	8009ffc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009cba:	4b83      	ldr	r3, [pc, #524]	; (8009ec8 <HAL_RCC_OscConfig+0x770>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d0f0      	beq.n	8009ca8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	689b      	ldr	r3, [r3, #8]
 8009cca:	2b01      	cmp	r3, #1
 8009ccc:	d106      	bne.n	8009cdc <HAL_RCC_OscConfig+0x584>
 8009cce:	4b7d      	ldr	r3, [pc, #500]	; (8009ec4 <HAL_RCC_OscConfig+0x76c>)
 8009cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cd2:	4a7c      	ldr	r2, [pc, #496]	; (8009ec4 <HAL_RCC_OscConfig+0x76c>)
 8009cd4:	f043 0301 	orr.w	r3, r3, #1
 8009cd8:	6713      	str	r3, [r2, #112]	; 0x70
 8009cda:	e02d      	b.n	8009d38 <HAL_RCC_OscConfig+0x5e0>
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	689b      	ldr	r3, [r3, #8]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d10c      	bne.n	8009cfe <HAL_RCC_OscConfig+0x5a6>
 8009ce4:	4b77      	ldr	r3, [pc, #476]	; (8009ec4 <HAL_RCC_OscConfig+0x76c>)
 8009ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ce8:	4a76      	ldr	r2, [pc, #472]	; (8009ec4 <HAL_RCC_OscConfig+0x76c>)
 8009cea:	f023 0301 	bic.w	r3, r3, #1
 8009cee:	6713      	str	r3, [r2, #112]	; 0x70
 8009cf0:	4b74      	ldr	r3, [pc, #464]	; (8009ec4 <HAL_RCC_OscConfig+0x76c>)
 8009cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cf4:	4a73      	ldr	r2, [pc, #460]	; (8009ec4 <HAL_RCC_OscConfig+0x76c>)
 8009cf6:	f023 0304 	bic.w	r3, r3, #4
 8009cfa:	6713      	str	r3, [r2, #112]	; 0x70
 8009cfc:	e01c      	b.n	8009d38 <HAL_RCC_OscConfig+0x5e0>
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	689b      	ldr	r3, [r3, #8]
 8009d02:	2b05      	cmp	r3, #5
 8009d04:	d10c      	bne.n	8009d20 <HAL_RCC_OscConfig+0x5c8>
 8009d06:	4b6f      	ldr	r3, [pc, #444]	; (8009ec4 <HAL_RCC_OscConfig+0x76c>)
 8009d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d0a:	4a6e      	ldr	r2, [pc, #440]	; (8009ec4 <HAL_RCC_OscConfig+0x76c>)
 8009d0c:	f043 0304 	orr.w	r3, r3, #4
 8009d10:	6713      	str	r3, [r2, #112]	; 0x70
 8009d12:	4b6c      	ldr	r3, [pc, #432]	; (8009ec4 <HAL_RCC_OscConfig+0x76c>)
 8009d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d16:	4a6b      	ldr	r2, [pc, #428]	; (8009ec4 <HAL_RCC_OscConfig+0x76c>)
 8009d18:	f043 0301 	orr.w	r3, r3, #1
 8009d1c:	6713      	str	r3, [r2, #112]	; 0x70
 8009d1e:	e00b      	b.n	8009d38 <HAL_RCC_OscConfig+0x5e0>
 8009d20:	4b68      	ldr	r3, [pc, #416]	; (8009ec4 <HAL_RCC_OscConfig+0x76c>)
 8009d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d24:	4a67      	ldr	r2, [pc, #412]	; (8009ec4 <HAL_RCC_OscConfig+0x76c>)
 8009d26:	f023 0301 	bic.w	r3, r3, #1
 8009d2a:	6713      	str	r3, [r2, #112]	; 0x70
 8009d2c:	4b65      	ldr	r3, [pc, #404]	; (8009ec4 <HAL_RCC_OscConfig+0x76c>)
 8009d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d30:	4a64      	ldr	r2, [pc, #400]	; (8009ec4 <HAL_RCC_OscConfig+0x76c>)
 8009d32:	f023 0304 	bic.w	r3, r3, #4
 8009d36:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	689b      	ldr	r3, [r3, #8]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d015      	beq.n	8009d6c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d40:	f7f9 feae 	bl	8003aa0 <HAL_GetTick>
 8009d44:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009d46:	e00a      	b.n	8009d5e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009d48:	f7f9 feaa 	bl	8003aa0 <HAL_GetTick>
 8009d4c:	4602      	mov	r2, r0
 8009d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d50:	1ad3      	subs	r3, r2, r3
 8009d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d901      	bls.n	8009d5e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8009d5a:	2303      	movs	r3, #3
 8009d5c:	e14e      	b.n	8009ffc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009d5e:	4b59      	ldr	r3, [pc, #356]	; (8009ec4 <HAL_RCC_OscConfig+0x76c>)
 8009d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d62:	f003 0302 	and.w	r3, r3, #2
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d0ee      	beq.n	8009d48 <HAL_RCC_OscConfig+0x5f0>
 8009d6a:	e014      	b.n	8009d96 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d6c:	f7f9 fe98 	bl	8003aa0 <HAL_GetTick>
 8009d70:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009d72:	e00a      	b.n	8009d8a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009d74:	f7f9 fe94 	bl	8003aa0 <HAL_GetTick>
 8009d78:	4602      	mov	r2, r0
 8009d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d7c:	1ad3      	subs	r3, r2, r3
 8009d7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d901      	bls.n	8009d8a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8009d86:	2303      	movs	r3, #3
 8009d88:	e138      	b.n	8009ffc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009d8a:	4b4e      	ldr	r3, [pc, #312]	; (8009ec4 <HAL_RCC_OscConfig+0x76c>)
 8009d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d8e:	f003 0302 	and.w	r3, r3, #2
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d1ee      	bne.n	8009d74 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	f000 812d 	beq.w	8009ffa <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009da0:	4b48      	ldr	r3, [pc, #288]	; (8009ec4 <HAL_RCC_OscConfig+0x76c>)
 8009da2:	691b      	ldr	r3, [r3, #16]
 8009da4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009da8:	2b18      	cmp	r3, #24
 8009daa:	f000 80bd 	beq.w	8009f28 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009db2:	2b02      	cmp	r3, #2
 8009db4:	f040 809e 	bne.w	8009ef4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009db8:	4b42      	ldr	r3, [pc, #264]	; (8009ec4 <HAL_RCC_OscConfig+0x76c>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	4a41      	ldr	r2, [pc, #260]	; (8009ec4 <HAL_RCC_OscConfig+0x76c>)
 8009dbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009dc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009dc4:	f7f9 fe6c 	bl	8003aa0 <HAL_GetTick>
 8009dc8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009dca:	e008      	b.n	8009dde <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009dcc:	f7f9 fe68 	bl	8003aa0 <HAL_GetTick>
 8009dd0:	4602      	mov	r2, r0
 8009dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd4:	1ad3      	subs	r3, r2, r3
 8009dd6:	2b02      	cmp	r3, #2
 8009dd8:	d901      	bls.n	8009dde <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8009dda:	2303      	movs	r3, #3
 8009ddc:	e10e      	b.n	8009ffc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009dde:	4b39      	ldr	r3, [pc, #228]	; (8009ec4 <HAL_RCC_OscConfig+0x76c>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d1f0      	bne.n	8009dcc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009dea:	4b36      	ldr	r3, [pc, #216]	; (8009ec4 <HAL_RCC_OscConfig+0x76c>)
 8009dec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009dee:	4b37      	ldr	r3, [pc, #220]	; (8009ecc <HAL_RCC_OscConfig+0x774>)
 8009df0:	4013      	ands	r3, r2
 8009df2:	687a      	ldr	r2, [r7, #4]
 8009df4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009df6:	687a      	ldr	r2, [r7, #4]
 8009df8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009dfa:	0112      	lsls	r2, r2, #4
 8009dfc:	430a      	orrs	r2, r1
 8009dfe:	4931      	ldr	r1, [pc, #196]	; (8009ec4 <HAL_RCC_OscConfig+0x76c>)
 8009e00:	4313      	orrs	r3, r2
 8009e02:	628b      	str	r3, [r1, #40]	; 0x28
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e08:	3b01      	subs	r3, #1
 8009e0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e12:	3b01      	subs	r3, #1
 8009e14:	025b      	lsls	r3, r3, #9
 8009e16:	b29b      	uxth	r3, r3
 8009e18:	431a      	orrs	r2, r3
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e1e:	3b01      	subs	r3, #1
 8009e20:	041b      	lsls	r3, r3, #16
 8009e22:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009e26:	431a      	orrs	r2, r3
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e2c:	3b01      	subs	r3, #1
 8009e2e:	061b      	lsls	r3, r3, #24
 8009e30:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009e34:	4923      	ldr	r1, [pc, #140]	; (8009ec4 <HAL_RCC_OscConfig+0x76c>)
 8009e36:	4313      	orrs	r3, r2
 8009e38:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009e3a:	4b22      	ldr	r3, [pc, #136]	; (8009ec4 <HAL_RCC_OscConfig+0x76c>)
 8009e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e3e:	4a21      	ldr	r2, [pc, #132]	; (8009ec4 <HAL_RCC_OscConfig+0x76c>)
 8009e40:	f023 0301 	bic.w	r3, r3, #1
 8009e44:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009e46:	4b1f      	ldr	r3, [pc, #124]	; (8009ec4 <HAL_RCC_OscConfig+0x76c>)
 8009e48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e4a:	4b21      	ldr	r3, [pc, #132]	; (8009ed0 <HAL_RCC_OscConfig+0x778>)
 8009e4c:	4013      	ands	r3, r2
 8009e4e:	687a      	ldr	r2, [r7, #4]
 8009e50:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009e52:	00d2      	lsls	r2, r2, #3
 8009e54:	491b      	ldr	r1, [pc, #108]	; (8009ec4 <HAL_RCC_OscConfig+0x76c>)
 8009e56:	4313      	orrs	r3, r2
 8009e58:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009e5a:	4b1a      	ldr	r3, [pc, #104]	; (8009ec4 <HAL_RCC_OscConfig+0x76c>)
 8009e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e5e:	f023 020c 	bic.w	r2, r3, #12
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e66:	4917      	ldr	r1, [pc, #92]	; (8009ec4 <HAL_RCC_OscConfig+0x76c>)
 8009e68:	4313      	orrs	r3, r2
 8009e6a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009e6c:	4b15      	ldr	r3, [pc, #84]	; (8009ec4 <HAL_RCC_OscConfig+0x76c>)
 8009e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e70:	f023 0202 	bic.w	r2, r3, #2
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e78:	4912      	ldr	r1, [pc, #72]	; (8009ec4 <HAL_RCC_OscConfig+0x76c>)
 8009e7a:	4313      	orrs	r3, r2
 8009e7c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009e7e:	4b11      	ldr	r3, [pc, #68]	; (8009ec4 <HAL_RCC_OscConfig+0x76c>)
 8009e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e82:	4a10      	ldr	r2, [pc, #64]	; (8009ec4 <HAL_RCC_OscConfig+0x76c>)
 8009e84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e88:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e8a:	4b0e      	ldr	r3, [pc, #56]	; (8009ec4 <HAL_RCC_OscConfig+0x76c>)
 8009e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e8e:	4a0d      	ldr	r2, [pc, #52]	; (8009ec4 <HAL_RCC_OscConfig+0x76c>)
 8009e90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e94:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009e96:	4b0b      	ldr	r3, [pc, #44]	; (8009ec4 <HAL_RCC_OscConfig+0x76c>)
 8009e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e9a:	4a0a      	ldr	r2, [pc, #40]	; (8009ec4 <HAL_RCC_OscConfig+0x76c>)
 8009e9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009ea0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009ea2:	4b08      	ldr	r3, [pc, #32]	; (8009ec4 <HAL_RCC_OscConfig+0x76c>)
 8009ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ea6:	4a07      	ldr	r2, [pc, #28]	; (8009ec4 <HAL_RCC_OscConfig+0x76c>)
 8009ea8:	f043 0301 	orr.w	r3, r3, #1
 8009eac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009eae:	4b05      	ldr	r3, [pc, #20]	; (8009ec4 <HAL_RCC_OscConfig+0x76c>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	4a04      	ldr	r2, [pc, #16]	; (8009ec4 <HAL_RCC_OscConfig+0x76c>)
 8009eb4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009eb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009eba:	f7f9 fdf1 	bl	8003aa0 <HAL_GetTick>
 8009ebe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009ec0:	e011      	b.n	8009ee6 <HAL_RCC_OscConfig+0x78e>
 8009ec2:	bf00      	nop
 8009ec4:	58024400 	.word	0x58024400
 8009ec8:	58024800 	.word	0x58024800
 8009ecc:	fffffc0c 	.word	0xfffffc0c
 8009ed0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009ed4:	f7f9 fde4 	bl	8003aa0 <HAL_GetTick>
 8009ed8:	4602      	mov	r2, r0
 8009eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009edc:	1ad3      	subs	r3, r2, r3
 8009ede:	2b02      	cmp	r3, #2
 8009ee0:	d901      	bls.n	8009ee6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8009ee2:	2303      	movs	r3, #3
 8009ee4:	e08a      	b.n	8009ffc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009ee6:	4b47      	ldr	r3, [pc, #284]	; (800a004 <HAL_RCC_OscConfig+0x8ac>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d0f0      	beq.n	8009ed4 <HAL_RCC_OscConfig+0x77c>
 8009ef2:	e082      	b.n	8009ffa <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009ef4:	4b43      	ldr	r3, [pc, #268]	; (800a004 <HAL_RCC_OscConfig+0x8ac>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	4a42      	ldr	r2, [pc, #264]	; (800a004 <HAL_RCC_OscConfig+0x8ac>)
 8009efa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009efe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f00:	f7f9 fdce 	bl	8003aa0 <HAL_GetTick>
 8009f04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009f06:	e008      	b.n	8009f1a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009f08:	f7f9 fdca 	bl	8003aa0 <HAL_GetTick>
 8009f0c:	4602      	mov	r2, r0
 8009f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f10:	1ad3      	subs	r3, r2, r3
 8009f12:	2b02      	cmp	r3, #2
 8009f14:	d901      	bls.n	8009f1a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8009f16:	2303      	movs	r3, #3
 8009f18:	e070      	b.n	8009ffc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009f1a:	4b3a      	ldr	r3, [pc, #232]	; (800a004 <HAL_RCC_OscConfig+0x8ac>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d1f0      	bne.n	8009f08 <HAL_RCC_OscConfig+0x7b0>
 8009f26:	e068      	b.n	8009ffa <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009f28:	4b36      	ldr	r3, [pc, #216]	; (800a004 <HAL_RCC_OscConfig+0x8ac>)
 8009f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f2c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009f2e:	4b35      	ldr	r3, [pc, #212]	; (800a004 <HAL_RCC_OscConfig+0x8ac>)
 8009f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f32:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f38:	2b01      	cmp	r3, #1
 8009f3a:	d031      	beq.n	8009fa0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	f003 0203 	and.w	r2, r3, #3
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009f46:	429a      	cmp	r2, r3
 8009f48:	d12a      	bne.n	8009fa0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009f4a:	693b      	ldr	r3, [r7, #16]
 8009f4c:	091b      	lsrs	r3, r3, #4
 8009f4e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009f56:	429a      	cmp	r2, r3
 8009f58:	d122      	bne.n	8009fa0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f64:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009f66:	429a      	cmp	r2, r3
 8009f68:	d11a      	bne.n	8009fa0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	0a5b      	lsrs	r3, r3, #9
 8009f6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f76:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009f78:	429a      	cmp	r2, r3
 8009f7a:	d111      	bne.n	8009fa0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	0c1b      	lsrs	r3, r3, #16
 8009f80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f88:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009f8a:	429a      	cmp	r2, r3
 8009f8c:	d108      	bne.n	8009fa0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	0e1b      	lsrs	r3, r3, #24
 8009f92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f9a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009f9c:	429a      	cmp	r2, r3
 8009f9e:	d001      	beq.n	8009fa4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	e02b      	b.n	8009ffc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009fa4:	4b17      	ldr	r3, [pc, #92]	; (800a004 <HAL_RCC_OscConfig+0x8ac>)
 8009fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fa8:	08db      	lsrs	r3, r3, #3
 8009faa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009fae:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009fb4:	693a      	ldr	r2, [r7, #16]
 8009fb6:	429a      	cmp	r2, r3
 8009fb8:	d01f      	beq.n	8009ffa <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8009fba:	4b12      	ldr	r3, [pc, #72]	; (800a004 <HAL_RCC_OscConfig+0x8ac>)
 8009fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fbe:	4a11      	ldr	r2, [pc, #68]	; (800a004 <HAL_RCC_OscConfig+0x8ac>)
 8009fc0:	f023 0301 	bic.w	r3, r3, #1
 8009fc4:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009fc6:	f7f9 fd6b 	bl	8003aa0 <HAL_GetTick>
 8009fca:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009fcc:	bf00      	nop
 8009fce:	f7f9 fd67 	bl	8003aa0 <HAL_GetTick>
 8009fd2:	4602      	mov	r2, r0
 8009fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd6:	4293      	cmp	r3, r2
 8009fd8:	d0f9      	beq.n	8009fce <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009fda:	4b0a      	ldr	r3, [pc, #40]	; (800a004 <HAL_RCC_OscConfig+0x8ac>)
 8009fdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009fde:	4b0a      	ldr	r3, [pc, #40]	; (800a008 <HAL_RCC_OscConfig+0x8b0>)
 8009fe0:	4013      	ands	r3, r2
 8009fe2:	687a      	ldr	r2, [r7, #4]
 8009fe4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009fe6:	00d2      	lsls	r2, r2, #3
 8009fe8:	4906      	ldr	r1, [pc, #24]	; (800a004 <HAL_RCC_OscConfig+0x8ac>)
 8009fea:	4313      	orrs	r3, r2
 8009fec:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009fee:	4b05      	ldr	r3, [pc, #20]	; (800a004 <HAL_RCC_OscConfig+0x8ac>)
 8009ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ff2:	4a04      	ldr	r2, [pc, #16]	; (800a004 <HAL_RCC_OscConfig+0x8ac>)
 8009ff4:	f043 0301 	orr.w	r3, r3, #1
 8009ff8:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8009ffa:	2300      	movs	r3, #0
}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	3730      	adds	r7, #48	; 0x30
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}
 800a004:	58024400 	.word	0x58024400
 800a008:	ffff0007 	.word	0xffff0007

0800a00c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b086      	sub	sp, #24
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d101      	bne.n	800a020 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a01c:	2301      	movs	r3, #1
 800a01e:	e19c      	b.n	800a35a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a020:	4b8a      	ldr	r3, [pc, #552]	; (800a24c <HAL_RCC_ClockConfig+0x240>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f003 030f 	and.w	r3, r3, #15
 800a028:	683a      	ldr	r2, [r7, #0]
 800a02a:	429a      	cmp	r2, r3
 800a02c:	d910      	bls.n	800a050 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a02e:	4b87      	ldr	r3, [pc, #540]	; (800a24c <HAL_RCC_ClockConfig+0x240>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f023 020f 	bic.w	r2, r3, #15
 800a036:	4985      	ldr	r1, [pc, #532]	; (800a24c <HAL_RCC_ClockConfig+0x240>)
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	4313      	orrs	r3, r2
 800a03c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a03e:	4b83      	ldr	r3, [pc, #524]	; (800a24c <HAL_RCC_ClockConfig+0x240>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f003 030f 	and.w	r3, r3, #15
 800a046:	683a      	ldr	r2, [r7, #0]
 800a048:	429a      	cmp	r2, r3
 800a04a:	d001      	beq.n	800a050 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a04c:	2301      	movs	r3, #1
 800a04e:	e184      	b.n	800a35a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f003 0304 	and.w	r3, r3, #4
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d010      	beq.n	800a07e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	691a      	ldr	r2, [r3, #16]
 800a060:	4b7b      	ldr	r3, [pc, #492]	; (800a250 <HAL_RCC_ClockConfig+0x244>)
 800a062:	699b      	ldr	r3, [r3, #24]
 800a064:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a068:	429a      	cmp	r2, r3
 800a06a:	d908      	bls.n	800a07e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a06c:	4b78      	ldr	r3, [pc, #480]	; (800a250 <HAL_RCC_ClockConfig+0x244>)
 800a06e:	699b      	ldr	r3, [r3, #24]
 800a070:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	691b      	ldr	r3, [r3, #16]
 800a078:	4975      	ldr	r1, [pc, #468]	; (800a250 <HAL_RCC_ClockConfig+0x244>)
 800a07a:	4313      	orrs	r3, r2
 800a07c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	f003 0308 	and.w	r3, r3, #8
 800a086:	2b00      	cmp	r3, #0
 800a088:	d010      	beq.n	800a0ac <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	695a      	ldr	r2, [r3, #20]
 800a08e:	4b70      	ldr	r3, [pc, #448]	; (800a250 <HAL_RCC_ClockConfig+0x244>)
 800a090:	69db      	ldr	r3, [r3, #28]
 800a092:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a096:	429a      	cmp	r2, r3
 800a098:	d908      	bls.n	800a0ac <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a09a:	4b6d      	ldr	r3, [pc, #436]	; (800a250 <HAL_RCC_ClockConfig+0x244>)
 800a09c:	69db      	ldr	r3, [r3, #28]
 800a09e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	695b      	ldr	r3, [r3, #20]
 800a0a6:	496a      	ldr	r1, [pc, #424]	; (800a250 <HAL_RCC_ClockConfig+0x244>)
 800a0a8:	4313      	orrs	r3, r2
 800a0aa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f003 0310 	and.w	r3, r3, #16
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d010      	beq.n	800a0da <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	699a      	ldr	r2, [r3, #24]
 800a0bc:	4b64      	ldr	r3, [pc, #400]	; (800a250 <HAL_RCC_ClockConfig+0x244>)
 800a0be:	69db      	ldr	r3, [r3, #28]
 800a0c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	d908      	bls.n	800a0da <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a0c8:	4b61      	ldr	r3, [pc, #388]	; (800a250 <HAL_RCC_ClockConfig+0x244>)
 800a0ca:	69db      	ldr	r3, [r3, #28]
 800a0cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	699b      	ldr	r3, [r3, #24]
 800a0d4:	495e      	ldr	r1, [pc, #376]	; (800a250 <HAL_RCC_ClockConfig+0x244>)
 800a0d6:	4313      	orrs	r3, r2
 800a0d8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f003 0320 	and.w	r3, r3, #32
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d010      	beq.n	800a108 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	69da      	ldr	r2, [r3, #28]
 800a0ea:	4b59      	ldr	r3, [pc, #356]	; (800a250 <HAL_RCC_ClockConfig+0x244>)
 800a0ec:	6a1b      	ldr	r3, [r3, #32]
 800a0ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a0f2:	429a      	cmp	r2, r3
 800a0f4:	d908      	bls.n	800a108 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a0f6:	4b56      	ldr	r3, [pc, #344]	; (800a250 <HAL_RCC_ClockConfig+0x244>)
 800a0f8:	6a1b      	ldr	r3, [r3, #32]
 800a0fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	69db      	ldr	r3, [r3, #28]
 800a102:	4953      	ldr	r1, [pc, #332]	; (800a250 <HAL_RCC_ClockConfig+0x244>)
 800a104:	4313      	orrs	r3, r2
 800a106:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f003 0302 	and.w	r3, r3, #2
 800a110:	2b00      	cmp	r3, #0
 800a112:	d010      	beq.n	800a136 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	68da      	ldr	r2, [r3, #12]
 800a118:	4b4d      	ldr	r3, [pc, #308]	; (800a250 <HAL_RCC_ClockConfig+0x244>)
 800a11a:	699b      	ldr	r3, [r3, #24]
 800a11c:	f003 030f 	and.w	r3, r3, #15
 800a120:	429a      	cmp	r2, r3
 800a122:	d908      	bls.n	800a136 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a124:	4b4a      	ldr	r3, [pc, #296]	; (800a250 <HAL_RCC_ClockConfig+0x244>)
 800a126:	699b      	ldr	r3, [r3, #24]
 800a128:	f023 020f 	bic.w	r2, r3, #15
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	68db      	ldr	r3, [r3, #12]
 800a130:	4947      	ldr	r1, [pc, #284]	; (800a250 <HAL_RCC_ClockConfig+0x244>)
 800a132:	4313      	orrs	r3, r2
 800a134:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	f003 0301 	and.w	r3, r3, #1
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d055      	beq.n	800a1ee <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a142:	4b43      	ldr	r3, [pc, #268]	; (800a250 <HAL_RCC_ClockConfig+0x244>)
 800a144:	699b      	ldr	r3, [r3, #24]
 800a146:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	689b      	ldr	r3, [r3, #8]
 800a14e:	4940      	ldr	r1, [pc, #256]	; (800a250 <HAL_RCC_ClockConfig+0x244>)
 800a150:	4313      	orrs	r3, r2
 800a152:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	685b      	ldr	r3, [r3, #4]
 800a158:	2b02      	cmp	r3, #2
 800a15a:	d107      	bne.n	800a16c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a15c:	4b3c      	ldr	r3, [pc, #240]	; (800a250 <HAL_RCC_ClockConfig+0x244>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a164:	2b00      	cmp	r3, #0
 800a166:	d121      	bne.n	800a1ac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a168:	2301      	movs	r3, #1
 800a16a:	e0f6      	b.n	800a35a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	685b      	ldr	r3, [r3, #4]
 800a170:	2b03      	cmp	r3, #3
 800a172:	d107      	bne.n	800a184 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a174:	4b36      	ldr	r3, [pc, #216]	; (800a250 <HAL_RCC_ClockConfig+0x244>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d115      	bne.n	800a1ac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a180:	2301      	movs	r3, #1
 800a182:	e0ea      	b.n	800a35a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	685b      	ldr	r3, [r3, #4]
 800a188:	2b01      	cmp	r3, #1
 800a18a:	d107      	bne.n	800a19c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a18c:	4b30      	ldr	r3, [pc, #192]	; (800a250 <HAL_RCC_ClockConfig+0x244>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a194:	2b00      	cmp	r3, #0
 800a196:	d109      	bne.n	800a1ac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a198:	2301      	movs	r3, #1
 800a19a:	e0de      	b.n	800a35a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a19c:	4b2c      	ldr	r3, [pc, #176]	; (800a250 <HAL_RCC_ClockConfig+0x244>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f003 0304 	and.w	r3, r3, #4
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d101      	bne.n	800a1ac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	e0d6      	b.n	800a35a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a1ac:	4b28      	ldr	r3, [pc, #160]	; (800a250 <HAL_RCC_ClockConfig+0x244>)
 800a1ae:	691b      	ldr	r3, [r3, #16]
 800a1b0:	f023 0207 	bic.w	r2, r3, #7
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	685b      	ldr	r3, [r3, #4]
 800a1b8:	4925      	ldr	r1, [pc, #148]	; (800a250 <HAL_RCC_ClockConfig+0x244>)
 800a1ba:	4313      	orrs	r3, r2
 800a1bc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a1be:	f7f9 fc6f 	bl	8003aa0 <HAL_GetTick>
 800a1c2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a1c4:	e00a      	b.n	800a1dc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a1c6:	f7f9 fc6b 	bl	8003aa0 <HAL_GetTick>
 800a1ca:	4602      	mov	r2, r0
 800a1cc:	697b      	ldr	r3, [r7, #20]
 800a1ce:	1ad3      	subs	r3, r2, r3
 800a1d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1d4:	4293      	cmp	r3, r2
 800a1d6:	d901      	bls.n	800a1dc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a1d8:	2303      	movs	r3, #3
 800a1da:	e0be      	b.n	800a35a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a1dc:	4b1c      	ldr	r3, [pc, #112]	; (800a250 <HAL_RCC_ClockConfig+0x244>)
 800a1de:	691b      	ldr	r3, [r3, #16]
 800a1e0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	685b      	ldr	r3, [r3, #4]
 800a1e8:	00db      	lsls	r3, r3, #3
 800a1ea:	429a      	cmp	r2, r3
 800a1ec:	d1eb      	bne.n	800a1c6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f003 0302 	and.w	r3, r3, #2
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d010      	beq.n	800a21c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	68da      	ldr	r2, [r3, #12]
 800a1fe:	4b14      	ldr	r3, [pc, #80]	; (800a250 <HAL_RCC_ClockConfig+0x244>)
 800a200:	699b      	ldr	r3, [r3, #24]
 800a202:	f003 030f 	and.w	r3, r3, #15
 800a206:	429a      	cmp	r2, r3
 800a208:	d208      	bcs.n	800a21c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a20a:	4b11      	ldr	r3, [pc, #68]	; (800a250 <HAL_RCC_ClockConfig+0x244>)
 800a20c:	699b      	ldr	r3, [r3, #24]
 800a20e:	f023 020f 	bic.w	r2, r3, #15
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	68db      	ldr	r3, [r3, #12]
 800a216:	490e      	ldr	r1, [pc, #56]	; (800a250 <HAL_RCC_ClockConfig+0x244>)
 800a218:	4313      	orrs	r3, r2
 800a21a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a21c:	4b0b      	ldr	r3, [pc, #44]	; (800a24c <HAL_RCC_ClockConfig+0x240>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f003 030f 	and.w	r3, r3, #15
 800a224:	683a      	ldr	r2, [r7, #0]
 800a226:	429a      	cmp	r2, r3
 800a228:	d214      	bcs.n	800a254 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a22a:	4b08      	ldr	r3, [pc, #32]	; (800a24c <HAL_RCC_ClockConfig+0x240>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f023 020f 	bic.w	r2, r3, #15
 800a232:	4906      	ldr	r1, [pc, #24]	; (800a24c <HAL_RCC_ClockConfig+0x240>)
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	4313      	orrs	r3, r2
 800a238:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a23a:	4b04      	ldr	r3, [pc, #16]	; (800a24c <HAL_RCC_ClockConfig+0x240>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f003 030f 	and.w	r3, r3, #15
 800a242:	683a      	ldr	r2, [r7, #0]
 800a244:	429a      	cmp	r2, r3
 800a246:	d005      	beq.n	800a254 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a248:	2301      	movs	r3, #1
 800a24a:	e086      	b.n	800a35a <HAL_RCC_ClockConfig+0x34e>
 800a24c:	52002000 	.word	0x52002000
 800a250:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	f003 0304 	and.w	r3, r3, #4
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d010      	beq.n	800a282 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	691a      	ldr	r2, [r3, #16]
 800a264:	4b3f      	ldr	r3, [pc, #252]	; (800a364 <HAL_RCC_ClockConfig+0x358>)
 800a266:	699b      	ldr	r3, [r3, #24]
 800a268:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a26c:	429a      	cmp	r2, r3
 800a26e:	d208      	bcs.n	800a282 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a270:	4b3c      	ldr	r3, [pc, #240]	; (800a364 <HAL_RCC_ClockConfig+0x358>)
 800a272:	699b      	ldr	r3, [r3, #24]
 800a274:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	691b      	ldr	r3, [r3, #16]
 800a27c:	4939      	ldr	r1, [pc, #228]	; (800a364 <HAL_RCC_ClockConfig+0x358>)
 800a27e:	4313      	orrs	r3, r2
 800a280:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f003 0308 	and.w	r3, r3, #8
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d010      	beq.n	800a2b0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	695a      	ldr	r2, [r3, #20]
 800a292:	4b34      	ldr	r3, [pc, #208]	; (800a364 <HAL_RCC_ClockConfig+0x358>)
 800a294:	69db      	ldr	r3, [r3, #28]
 800a296:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a29a:	429a      	cmp	r2, r3
 800a29c:	d208      	bcs.n	800a2b0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a29e:	4b31      	ldr	r3, [pc, #196]	; (800a364 <HAL_RCC_ClockConfig+0x358>)
 800a2a0:	69db      	ldr	r3, [r3, #28]
 800a2a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	695b      	ldr	r3, [r3, #20]
 800a2aa:	492e      	ldr	r1, [pc, #184]	; (800a364 <HAL_RCC_ClockConfig+0x358>)
 800a2ac:	4313      	orrs	r3, r2
 800a2ae:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	f003 0310 	and.w	r3, r3, #16
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d010      	beq.n	800a2de <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	699a      	ldr	r2, [r3, #24]
 800a2c0:	4b28      	ldr	r3, [pc, #160]	; (800a364 <HAL_RCC_ClockConfig+0x358>)
 800a2c2:	69db      	ldr	r3, [r3, #28]
 800a2c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a2c8:	429a      	cmp	r2, r3
 800a2ca:	d208      	bcs.n	800a2de <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a2cc:	4b25      	ldr	r3, [pc, #148]	; (800a364 <HAL_RCC_ClockConfig+0x358>)
 800a2ce:	69db      	ldr	r3, [r3, #28]
 800a2d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	699b      	ldr	r3, [r3, #24]
 800a2d8:	4922      	ldr	r1, [pc, #136]	; (800a364 <HAL_RCC_ClockConfig+0x358>)
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f003 0320 	and.w	r3, r3, #32
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d010      	beq.n	800a30c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	69da      	ldr	r2, [r3, #28]
 800a2ee:	4b1d      	ldr	r3, [pc, #116]	; (800a364 <HAL_RCC_ClockConfig+0x358>)
 800a2f0:	6a1b      	ldr	r3, [r3, #32]
 800a2f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a2f6:	429a      	cmp	r2, r3
 800a2f8:	d208      	bcs.n	800a30c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a2fa:	4b1a      	ldr	r3, [pc, #104]	; (800a364 <HAL_RCC_ClockConfig+0x358>)
 800a2fc:	6a1b      	ldr	r3, [r3, #32]
 800a2fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	69db      	ldr	r3, [r3, #28]
 800a306:	4917      	ldr	r1, [pc, #92]	; (800a364 <HAL_RCC_ClockConfig+0x358>)
 800a308:	4313      	orrs	r3, r2
 800a30a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a30c:	f000 f844 	bl	800a398 <HAL_RCC_GetSysClockFreq>
 800a310:	4602      	mov	r2, r0
 800a312:	4b14      	ldr	r3, [pc, #80]	; (800a364 <HAL_RCC_ClockConfig+0x358>)
 800a314:	699b      	ldr	r3, [r3, #24]
 800a316:	0a1b      	lsrs	r3, r3, #8
 800a318:	f003 030f 	and.w	r3, r3, #15
 800a31c:	4912      	ldr	r1, [pc, #72]	; (800a368 <HAL_RCC_ClockConfig+0x35c>)
 800a31e:	5ccb      	ldrb	r3, [r1, r3]
 800a320:	f003 031f 	and.w	r3, r3, #31
 800a324:	fa22 f303 	lsr.w	r3, r2, r3
 800a328:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a32a:	4b0e      	ldr	r3, [pc, #56]	; (800a364 <HAL_RCC_ClockConfig+0x358>)
 800a32c:	699b      	ldr	r3, [r3, #24]
 800a32e:	f003 030f 	and.w	r3, r3, #15
 800a332:	4a0d      	ldr	r2, [pc, #52]	; (800a368 <HAL_RCC_ClockConfig+0x35c>)
 800a334:	5cd3      	ldrb	r3, [r2, r3]
 800a336:	f003 031f 	and.w	r3, r3, #31
 800a33a:	693a      	ldr	r2, [r7, #16]
 800a33c:	fa22 f303 	lsr.w	r3, r2, r3
 800a340:	4a0a      	ldr	r2, [pc, #40]	; (800a36c <HAL_RCC_ClockConfig+0x360>)
 800a342:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a344:	4a0a      	ldr	r2, [pc, #40]	; (800a370 <HAL_RCC_ClockConfig+0x364>)
 800a346:	693b      	ldr	r3, [r7, #16]
 800a348:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a34a:	4b0a      	ldr	r3, [pc, #40]	; (800a374 <HAL_RCC_ClockConfig+0x368>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	4618      	mov	r0, r3
 800a350:	f7f9 fb5c 	bl	8003a0c <HAL_InitTick>
 800a354:	4603      	mov	r3, r0
 800a356:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a358:	7bfb      	ldrb	r3, [r7, #15]
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	3718      	adds	r7, #24
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}
 800a362:	bf00      	nop
 800a364:	58024400 	.word	0x58024400
 800a368:	0801ee68 	.word	0x0801ee68
 800a36c:	20000014 	.word	0x20000014
 800a370:	20000010 	.word	0x20000010
 800a374:	20000024 	.word	0x20000024

0800a378 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800a378:	b480      	push	{r7}
 800a37a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 800a37c:	4b05      	ldr	r3, [pc, #20]	; (800a394 <HAL_RCC_EnableCSS+0x1c>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	4a04      	ldr	r2, [pc, #16]	; (800a394 <HAL_RCC_EnableCSS+0x1c>)
 800a382:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a386:	6013      	str	r3, [r2, #0]
}
 800a388:	bf00      	nop
 800a38a:	46bd      	mov	sp, r7
 800a38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a390:	4770      	bx	lr
 800a392:	bf00      	nop
 800a394:	58024400 	.word	0x58024400

0800a398 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a398:	b480      	push	{r7}
 800a39a:	b089      	sub	sp, #36	; 0x24
 800a39c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a39e:	4bb3      	ldr	r3, [pc, #716]	; (800a66c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a3a0:	691b      	ldr	r3, [r3, #16]
 800a3a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a3a6:	2b18      	cmp	r3, #24
 800a3a8:	f200 8155 	bhi.w	800a656 <HAL_RCC_GetSysClockFreq+0x2be>
 800a3ac:	a201      	add	r2, pc, #4	; (adr r2, 800a3b4 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a3ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3b2:	bf00      	nop
 800a3b4:	0800a419 	.word	0x0800a419
 800a3b8:	0800a657 	.word	0x0800a657
 800a3bc:	0800a657 	.word	0x0800a657
 800a3c0:	0800a657 	.word	0x0800a657
 800a3c4:	0800a657 	.word	0x0800a657
 800a3c8:	0800a657 	.word	0x0800a657
 800a3cc:	0800a657 	.word	0x0800a657
 800a3d0:	0800a657 	.word	0x0800a657
 800a3d4:	0800a43f 	.word	0x0800a43f
 800a3d8:	0800a657 	.word	0x0800a657
 800a3dc:	0800a657 	.word	0x0800a657
 800a3e0:	0800a657 	.word	0x0800a657
 800a3e4:	0800a657 	.word	0x0800a657
 800a3e8:	0800a657 	.word	0x0800a657
 800a3ec:	0800a657 	.word	0x0800a657
 800a3f0:	0800a657 	.word	0x0800a657
 800a3f4:	0800a445 	.word	0x0800a445
 800a3f8:	0800a657 	.word	0x0800a657
 800a3fc:	0800a657 	.word	0x0800a657
 800a400:	0800a657 	.word	0x0800a657
 800a404:	0800a657 	.word	0x0800a657
 800a408:	0800a657 	.word	0x0800a657
 800a40c:	0800a657 	.word	0x0800a657
 800a410:	0800a657 	.word	0x0800a657
 800a414:	0800a44b 	.word	0x0800a44b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a418:	4b94      	ldr	r3, [pc, #592]	; (800a66c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f003 0320 	and.w	r3, r3, #32
 800a420:	2b00      	cmp	r3, #0
 800a422:	d009      	beq.n	800a438 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a424:	4b91      	ldr	r3, [pc, #580]	; (800a66c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	08db      	lsrs	r3, r3, #3
 800a42a:	f003 0303 	and.w	r3, r3, #3
 800a42e:	4a90      	ldr	r2, [pc, #576]	; (800a670 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a430:	fa22 f303 	lsr.w	r3, r2, r3
 800a434:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a436:	e111      	b.n	800a65c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a438:	4b8d      	ldr	r3, [pc, #564]	; (800a670 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a43a:	61bb      	str	r3, [r7, #24]
      break;
 800a43c:	e10e      	b.n	800a65c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a43e:	4b8d      	ldr	r3, [pc, #564]	; (800a674 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a440:	61bb      	str	r3, [r7, #24]
      break;
 800a442:	e10b      	b.n	800a65c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a444:	4b8c      	ldr	r3, [pc, #560]	; (800a678 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a446:	61bb      	str	r3, [r7, #24]
      break;
 800a448:	e108      	b.n	800a65c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a44a:	4b88      	ldr	r3, [pc, #544]	; (800a66c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a44c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a44e:	f003 0303 	and.w	r3, r3, #3
 800a452:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a454:	4b85      	ldr	r3, [pc, #532]	; (800a66c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a458:	091b      	lsrs	r3, r3, #4
 800a45a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a45e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a460:	4b82      	ldr	r3, [pc, #520]	; (800a66c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a464:	f003 0301 	and.w	r3, r3, #1
 800a468:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a46a:	4b80      	ldr	r3, [pc, #512]	; (800a66c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a46c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a46e:	08db      	lsrs	r3, r3, #3
 800a470:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a474:	68fa      	ldr	r2, [r7, #12]
 800a476:	fb02 f303 	mul.w	r3, r2, r3
 800a47a:	ee07 3a90 	vmov	s15, r3
 800a47e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a482:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a486:	693b      	ldr	r3, [r7, #16]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	f000 80e1 	beq.w	800a650 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a48e:	697b      	ldr	r3, [r7, #20]
 800a490:	2b02      	cmp	r3, #2
 800a492:	f000 8083 	beq.w	800a59c <HAL_RCC_GetSysClockFreq+0x204>
 800a496:	697b      	ldr	r3, [r7, #20]
 800a498:	2b02      	cmp	r3, #2
 800a49a:	f200 80a1 	bhi.w	800a5e0 <HAL_RCC_GetSysClockFreq+0x248>
 800a49e:	697b      	ldr	r3, [r7, #20]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d003      	beq.n	800a4ac <HAL_RCC_GetSysClockFreq+0x114>
 800a4a4:	697b      	ldr	r3, [r7, #20]
 800a4a6:	2b01      	cmp	r3, #1
 800a4a8:	d056      	beq.n	800a558 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a4aa:	e099      	b.n	800a5e0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a4ac:	4b6f      	ldr	r3, [pc, #444]	; (800a66c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f003 0320 	and.w	r3, r3, #32
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d02d      	beq.n	800a514 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a4b8:	4b6c      	ldr	r3, [pc, #432]	; (800a66c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	08db      	lsrs	r3, r3, #3
 800a4be:	f003 0303 	and.w	r3, r3, #3
 800a4c2:	4a6b      	ldr	r2, [pc, #428]	; (800a670 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a4c4:	fa22 f303 	lsr.w	r3, r2, r3
 800a4c8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	ee07 3a90 	vmov	s15, r3
 800a4d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4d4:	693b      	ldr	r3, [r7, #16]
 800a4d6:	ee07 3a90 	vmov	s15, r3
 800a4da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4e2:	4b62      	ldr	r3, [pc, #392]	; (800a66c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a4e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4ea:	ee07 3a90 	vmov	s15, r3
 800a4ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4f2:	ed97 6a02 	vldr	s12, [r7, #8]
 800a4f6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a67c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a4fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a502:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a506:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a50a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a50e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a512:	e087      	b.n	800a624 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	ee07 3a90 	vmov	s15, r3
 800a51a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a51e:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a680 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a522:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a526:	4b51      	ldr	r3, [pc, #324]	; (800a66c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a52a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a52e:	ee07 3a90 	vmov	s15, r3
 800a532:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a536:	ed97 6a02 	vldr	s12, [r7, #8]
 800a53a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a67c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a53e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a542:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a546:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a54a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a54e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a552:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a556:	e065      	b.n	800a624 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a558:	693b      	ldr	r3, [r7, #16]
 800a55a:	ee07 3a90 	vmov	s15, r3
 800a55e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a562:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a684 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a566:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a56a:	4b40      	ldr	r3, [pc, #256]	; (800a66c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a56c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a56e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a572:	ee07 3a90 	vmov	s15, r3
 800a576:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a57a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a57e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a67c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a582:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a586:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a58a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a58e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a592:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a596:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a59a:	e043      	b.n	800a624 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a59c:	693b      	ldr	r3, [r7, #16]
 800a59e:	ee07 3a90 	vmov	s15, r3
 800a5a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5a6:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a688 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a5aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5ae:	4b2f      	ldr	r3, [pc, #188]	; (800a66c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5b6:	ee07 3a90 	vmov	s15, r3
 800a5ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5be:	ed97 6a02 	vldr	s12, [r7, #8]
 800a5c2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a67c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a5c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a5d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a5de:	e021      	b.n	800a624 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a5e0:	693b      	ldr	r3, [r7, #16]
 800a5e2:	ee07 3a90 	vmov	s15, r3
 800a5e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5ea:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a684 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a5ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5f2:	4b1e      	ldr	r3, [pc, #120]	; (800a66c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5fa:	ee07 3a90 	vmov	s15, r3
 800a5fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a602:	ed97 6a02 	vldr	s12, [r7, #8]
 800a606:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a67c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a60a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a60e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a612:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a616:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a61a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a61e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a622:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a624:	4b11      	ldr	r3, [pc, #68]	; (800a66c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a628:	0a5b      	lsrs	r3, r3, #9
 800a62a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a62e:	3301      	adds	r3, #1
 800a630:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	ee07 3a90 	vmov	s15, r3
 800a638:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a63c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a640:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a644:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a648:	ee17 3a90 	vmov	r3, s15
 800a64c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a64e:	e005      	b.n	800a65c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a650:	2300      	movs	r3, #0
 800a652:	61bb      	str	r3, [r7, #24]
      break;
 800a654:	e002      	b.n	800a65c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a656:	4b07      	ldr	r3, [pc, #28]	; (800a674 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a658:	61bb      	str	r3, [r7, #24]
      break;
 800a65a:	bf00      	nop
  }

  return sysclockfreq;
 800a65c:	69bb      	ldr	r3, [r7, #24]
}
 800a65e:	4618      	mov	r0, r3
 800a660:	3724      	adds	r7, #36	; 0x24
 800a662:	46bd      	mov	sp, r7
 800a664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a668:	4770      	bx	lr
 800a66a:	bf00      	nop
 800a66c:	58024400 	.word	0x58024400
 800a670:	03d09000 	.word	0x03d09000
 800a674:	003d0900 	.word	0x003d0900
 800a678:	00989680 	.word	0x00989680
 800a67c:	46000000 	.word	0x46000000
 800a680:	4c742400 	.word	0x4c742400
 800a684:	4a742400 	.word	0x4a742400
 800a688:	4b189680 	.word	0x4b189680

0800a68c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b082      	sub	sp, #8
 800a690:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a692:	f7ff fe81 	bl	800a398 <HAL_RCC_GetSysClockFreq>
 800a696:	4602      	mov	r2, r0
 800a698:	4b10      	ldr	r3, [pc, #64]	; (800a6dc <HAL_RCC_GetHCLKFreq+0x50>)
 800a69a:	699b      	ldr	r3, [r3, #24]
 800a69c:	0a1b      	lsrs	r3, r3, #8
 800a69e:	f003 030f 	and.w	r3, r3, #15
 800a6a2:	490f      	ldr	r1, [pc, #60]	; (800a6e0 <HAL_RCC_GetHCLKFreq+0x54>)
 800a6a4:	5ccb      	ldrb	r3, [r1, r3]
 800a6a6:	f003 031f 	and.w	r3, r3, #31
 800a6aa:	fa22 f303 	lsr.w	r3, r2, r3
 800a6ae:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a6b0:	4b0a      	ldr	r3, [pc, #40]	; (800a6dc <HAL_RCC_GetHCLKFreq+0x50>)
 800a6b2:	699b      	ldr	r3, [r3, #24]
 800a6b4:	f003 030f 	and.w	r3, r3, #15
 800a6b8:	4a09      	ldr	r2, [pc, #36]	; (800a6e0 <HAL_RCC_GetHCLKFreq+0x54>)
 800a6ba:	5cd3      	ldrb	r3, [r2, r3]
 800a6bc:	f003 031f 	and.w	r3, r3, #31
 800a6c0:	687a      	ldr	r2, [r7, #4]
 800a6c2:	fa22 f303 	lsr.w	r3, r2, r3
 800a6c6:	4a07      	ldr	r2, [pc, #28]	; (800a6e4 <HAL_RCC_GetHCLKFreq+0x58>)
 800a6c8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a6ca:	4a07      	ldr	r2, [pc, #28]	; (800a6e8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a6d0:	4b04      	ldr	r3, [pc, #16]	; (800a6e4 <HAL_RCC_GetHCLKFreq+0x58>)
 800a6d2:	681b      	ldr	r3, [r3, #0]
}
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	3708      	adds	r7, #8
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	bd80      	pop	{r7, pc}
 800a6dc:	58024400 	.word	0x58024400
 800a6e0:	0801ee68 	.word	0x0801ee68
 800a6e4:	20000014 	.word	0x20000014
 800a6e8:	20000010 	.word	0x20000010

0800a6ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a6f0:	f7ff ffcc 	bl	800a68c <HAL_RCC_GetHCLKFreq>
 800a6f4:	4602      	mov	r2, r0
 800a6f6:	4b06      	ldr	r3, [pc, #24]	; (800a710 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a6f8:	69db      	ldr	r3, [r3, #28]
 800a6fa:	091b      	lsrs	r3, r3, #4
 800a6fc:	f003 0307 	and.w	r3, r3, #7
 800a700:	4904      	ldr	r1, [pc, #16]	; (800a714 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a702:	5ccb      	ldrb	r3, [r1, r3]
 800a704:	f003 031f 	and.w	r3, r3, #31
 800a708:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	bd80      	pop	{r7, pc}
 800a710:	58024400 	.word	0x58024400
 800a714:	0801ee68 	.word	0x0801ee68

0800a718 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a71c:	f7ff ffb6 	bl	800a68c <HAL_RCC_GetHCLKFreq>
 800a720:	4602      	mov	r2, r0
 800a722:	4b06      	ldr	r3, [pc, #24]	; (800a73c <HAL_RCC_GetPCLK2Freq+0x24>)
 800a724:	69db      	ldr	r3, [r3, #28]
 800a726:	0a1b      	lsrs	r3, r3, #8
 800a728:	f003 0307 	and.w	r3, r3, #7
 800a72c:	4904      	ldr	r1, [pc, #16]	; (800a740 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a72e:	5ccb      	ldrb	r3, [r1, r3]
 800a730:	f003 031f 	and.w	r3, r3, #31
 800a734:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a738:	4618      	mov	r0, r3
 800a73a:	bd80      	pop	{r7, pc}
 800a73c:	58024400 	.word	0x58024400
 800a740:	0801ee68 	.word	0x0801ee68

0800a744 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 800a748:	4b07      	ldr	r3, [pc, #28]	; (800a768 <HAL_RCC_NMI_IRQHandler+0x24>)
 800a74a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a74c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a750:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a754:	d105      	bne.n	800a762 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800a756:	f000 f809 	bl	800a76c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800a75a:	4b03      	ldr	r3, [pc, #12]	; (800a768 <HAL_RCC_NMI_IRQHandler+0x24>)
 800a75c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a760:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 800a762:	bf00      	nop
 800a764:	bd80      	pop	{r7, pc}
 800a766:	bf00      	nop
 800a768:	58024400 	.word	0x58024400

0800a76c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800a76c:	b480      	push	{r7}
 800a76e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 800a770:	bf00      	nop
 800a772:	46bd      	mov	sp, r7
 800a774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a778:	4770      	bx	lr
	...

0800a77c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a77c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a780:	b0ca      	sub	sp, #296	; 0x128
 800a782:	af00      	add	r7, sp, #0
 800a784:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a788:	2300      	movs	r3, #0
 800a78a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a78e:	2300      	movs	r3, #0
 800a790:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a794:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a79c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800a7a0:	2500      	movs	r5, #0
 800a7a2:	ea54 0305 	orrs.w	r3, r4, r5
 800a7a6:	d049      	beq.n	800a83c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a7a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7ae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a7b2:	d02f      	beq.n	800a814 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a7b4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a7b8:	d828      	bhi.n	800a80c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a7ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a7be:	d01a      	beq.n	800a7f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a7c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a7c4:	d822      	bhi.n	800a80c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d003      	beq.n	800a7d2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a7ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a7ce:	d007      	beq.n	800a7e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a7d0:	e01c      	b.n	800a80c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a7d2:	4bb8      	ldr	r3, [pc, #736]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a7d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7d6:	4ab7      	ldr	r2, [pc, #732]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a7d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a7dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a7de:	e01a      	b.n	800a816 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a7e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7e4:	3308      	adds	r3, #8
 800a7e6:	2102      	movs	r1, #2
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	f002 fbb7 	bl	800cf5c <RCCEx_PLL2_Config>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a7f4:	e00f      	b.n	800a816 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a7f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7fa:	3328      	adds	r3, #40	; 0x28
 800a7fc:	2102      	movs	r1, #2
 800a7fe:	4618      	mov	r0, r3
 800a800:	f002 fc5e 	bl	800d0c0 <RCCEx_PLL3_Config>
 800a804:	4603      	mov	r3, r0
 800a806:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a80a:	e004      	b.n	800a816 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a80c:	2301      	movs	r3, #1
 800a80e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a812:	e000      	b.n	800a816 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800a814:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a816:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d10a      	bne.n	800a834 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a81e:	4ba5      	ldr	r3, [pc, #660]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a822:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a826:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a82a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a82c:	4aa1      	ldr	r2, [pc, #644]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a82e:	430b      	orrs	r3, r1
 800a830:	6513      	str	r3, [r2, #80]	; 0x50
 800a832:	e003      	b.n	800a83c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a834:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a838:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a83c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a844:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800a848:	f04f 0900 	mov.w	r9, #0
 800a84c:	ea58 0309 	orrs.w	r3, r8, r9
 800a850:	d047      	beq.n	800a8e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800a852:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a858:	2b04      	cmp	r3, #4
 800a85a:	d82a      	bhi.n	800a8b2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800a85c:	a201      	add	r2, pc, #4	; (adr r2, 800a864 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800a85e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a862:	bf00      	nop
 800a864:	0800a879 	.word	0x0800a879
 800a868:	0800a887 	.word	0x0800a887
 800a86c:	0800a89d 	.word	0x0800a89d
 800a870:	0800a8bb 	.word	0x0800a8bb
 800a874:	0800a8bb 	.word	0x0800a8bb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a878:	4b8e      	ldr	r3, [pc, #568]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a87a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a87c:	4a8d      	ldr	r2, [pc, #564]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a87e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a882:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a884:	e01a      	b.n	800a8bc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a886:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a88a:	3308      	adds	r3, #8
 800a88c:	2100      	movs	r1, #0
 800a88e:	4618      	mov	r0, r3
 800a890:	f002 fb64 	bl	800cf5c <RCCEx_PLL2_Config>
 800a894:	4603      	mov	r3, r0
 800a896:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a89a:	e00f      	b.n	800a8bc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a89c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8a0:	3328      	adds	r3, #40	; 0x28
 800a8a2:	2100      	movs	r1, #0
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f002 fc0b 	bl	800d0c0 <RCCEx_PLL3_Config>
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a8b0:	e004      	b.n	800a8bc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a8b8:	e000      	b.n	800a8bc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800a8ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d10a      	bne.n	800a8da <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a8c4:	4b7b      	ldr	r3, [pc, #492]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a8c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8c8:	f023 0107 	bic.w	r1, r3, #7
 800a8cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8d2:	4a78      	ldr	r2, [pc, #480]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a8d4:	430b      	orrs	r3, r1
 800a8d6:	6513      	str	r3, [r2, #80]	; 0x50
 800a8d8:	e003      	b.n	800a8e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a8de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800a8e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ea:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800a8ee:	f04f 0b00 	mov.w	fp, #0
 800a8f2:	ea5a 030b 	orrs.w	r3, sl, fp
 800a8f6:	d04c      	beq.n	800a992 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800a8f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a902:	d030      	beq.n	800a966 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800a904:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a908:	d829      	bhi.n	800a95e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800a90a:	2bc0      	cmp	r3, #192	; 0xc0
 800a90c:	d02d      	beq.n	800a96a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800a90e:	2bc0      	cmp	r3, #192	; 0xc0
 800a910:	d825      	bhi.n	800a95e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800a912:	2b80      	cmp	r3, #128	; 0x80
 800a914:	d018      	beq.n	800a948 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800a916:	2b80      	cmp	r3, #128	; 0x80
 800a918:	d821      	bhi.n	800a95e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d002      	beq.n	800a924 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800a91e:	2b40      	cmp	r3, #64	; 0x40
 800a920:	d007      	beq.n	800a932 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800a922:	e01c      	b.n	800a95e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a924:	4b63      	ldr	r3, [pc, #396]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a928:	4a62      	ldr	r2, [pc, #392]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a92a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a92e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800a930:	e01c      	b.n	800a96c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a932:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a936:	3308      	adds	r3, #8
 800a938:	2100      	movs	r1, #0
 800a93a:	4618      	mov	r0, r3
 800a93c:	f002 fb0e 	bl	800cf5c <RCCEx_PLL2_Config>
 800a940:	4603      	mov	r3, r0
 800a942:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800a946:	e011      	b.n	800a96c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a948:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a94c:	3328      	adds	r3, #40	; 0x28
 800a94e:	2100      	movs	r1, #0
 800a950:	4618      	mov	r0, r3
 800a952:	f002 fbb5 	bl	800d0c0 <RCCEx_PLL3_Config>
 800a956:	4603      	mov	r3, r0
 800a958:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800a95c:	e006      	b.n	800a96c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a95e:	2301      	movs	r3, #1
 800a960:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a964:	e002      	b.n	800a96c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800a966:	bf00      	nop
 800a968:	e000      	b.n	800a96c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800a96a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a96c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a970:	2b00      	cmp	r3, #0
 800a972:	d10a      	bne.n	800a98a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800a974:	4b4f      	ldr	r3, [pc, #316]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a978:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800a97c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a982:	4a4c      	ldr	r2, [pc, #304]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a984:	430b      	orrs	r3, r1
 800a986:	6513      	str	r3, [r2, #80]	; 0x50
 800a988:	e003      	b.n	800a992 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a98a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a98e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a992:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a99a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800a99e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800a9a8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800a9ac:	460b      	mov	r3, r1
 800a9ae:	4313      	orrs	r3, r2
 800a9b0:	d053      	beq.n	800aa5a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800a9b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a9ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a9be:	d035      	beq.n	800aa2c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800a9c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a9c4:	d82e      	bhi.n	800aa24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a9c6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a9ca:	d031      	beq.n	800aa30 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800a9cc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a9d0:	d828      	bhi.n	800aa24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a9d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a9d6:	d01a      	beq.n	800aa0e <HAL_RCCEx_PeriphCLKConfig+0x292>
 800a9d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a9dc:	d822      	bhi.n	800aa24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d003      	beq.n	800a9ea <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800a9e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a9e6:	d007      	beq.n	800a9f8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800a9e8:	e01c      	b.n	800aa24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9ea:	4b32      	ldr	r3, [pc, #200]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a9ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9ee:	4a31      	ldr	r2, [pc, #196]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a9f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a9f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a9f6:	e01c      	b.n	800aa32 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a9f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9fc:	3308      	adds	r3, #8
 800a9fe:	2100      	movs	r1, #0
 800aa00:	4618      	mov	r0, r3
 800aa02:	f002 faab 	bl	800cf5c <RCCEx_PLL2_Config>
 800aa06:	4603      	mov	r3, r0
 800aa08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800aa0c:	e011      	b.n	800aa32 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aa0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa12:	3328      	adds	r3, #40	; 0x28
 800aa14:	2100      	movs	r1, #0
 800aa16:	4618      	mov	r0, r3
 800aa18:	f002 fb52 	bl	800d0c0 <RCCEx_PLL3_Config>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aa22:	e006      	b.n	800aa32 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800aa24:	2301      	movs	r3, #1
 800aa26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aa2a:	e002      	b.n	800aa32 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800aa2c:	bf00      	nop
 800aa2e:	e000      	b.n	800aa32 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800aa30:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d10b      	bne.n	800aa52 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800aa3a:	4b1e      	ldr	r3, [pc, #120]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aa3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa3e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800aa42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa46:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800aa4a:	4a1a      	ldr	r2, [pc, #104]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aa4c:	430b      	orrs	r3, r1
 800aa4e:	6593      	str	r3, [r2, #88]	; 0x58
 800aa50:	e003      	b.n	800aa5a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa56:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800aa5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa62:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800aa66:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800aa70:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800aa74:	460b      	mov	r3, r1
 800aa76:	4313      	orrs	r3, r2
 800aa78:	d056      	beq.n	800ab28 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800aa7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa7e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800aa82:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aa86:	d038      	beq.n	800aafa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800aa88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aa8c:	d831      	bhi.n	800aaf2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800aa8e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800aa92:	d034      	beq.n	800aafe <HAL_RCCEx_PeriphCLKConfig+0x382>
 800aa94:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800aa98:	d82b      	bhi.n	800aaf2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800aa9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aa9e:	d01d      	beq.n	800aadc <HAL_RCCEx_PeriphCLKConfig+0x360>
 800aaa0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aaa4:	d825      	bhi.n	800aaf2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d006      	beq.n	800aab8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800aaaa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800aaae:	d00a      	beq.n	800aac6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800aab0:	e01f      	b.n	800aaf2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800aab2:	bf00      	nop
 800aab4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aab8:	4ba2      	ldr	r3, [pc, #648]	; (800ad44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aaba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aabc:	4aa1      	ldr	r2, [pc, #644]	; (800ad44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aabe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aac2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aac4:	e01c      	b.n	800ab00 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aaca:	3308      	adds	r3, #8
 800aacc:	2100      	movs	r1, #0
 800aace:	4618      	mov	r0, r3
 800aad0:	f002 fa44 	bl	800cf5c <RCCEx_PLL2_Config>
 800aad4:	4603      	mov	r3, r0
 800aad6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800aada:	e011      	b.n	800ab00 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aadc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aae0:	3328      	adds	r3, #40	; 0x28
 800aae2:	2100      	movs	r1, #0
 800aae4:	4618      	mov	r0, r3
 800aae6:	f002 faeb 	bl	800d0c0 <RCCEx_PLL3_Config>
 800aaea:	4603      	mov	r3, r0
 800aaec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aaf0:	e006      	b.n	800ab00 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800aaf2:	2301      	movs	r3, #1
 800aaf4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aaf8:	e002      	b.n	800ab00 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800aafa:	bf00      	nop
 800aafc:	e000      	b.n	800ab00 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800aafe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d10b      	bne.n	800ab20 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800ab08:	4b8e      	ldr	r3, [pc, #568]	; (800ad44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ab0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab0c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800ab10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab14:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ab18:	4a8a      	ldr	r2, [pc, #552]	; (800ad44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ab1a:	430b      	orrs	r3, r1
 800ab1c:	6593      	str	r3, [r2, #88]	; 0x58
 800ab1e:	e003      	b.n	800ab28 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab24:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800ab28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab30:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800ab34:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ab38:	2300      	movs	r3, #0
 800ab3a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ab3e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800ab42:	460b      	mov	r3, r1
 800ab44:	4313      	orrs	r3, r2
 800ab46:	d03a      	beq.n	800abbe <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800ab48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab4e:	2b30      	cmp	r3, #48	; 0x30
 800ab50:	d01f      	beq.n	800ab92 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800ab52:	2b30      	cmp	r3, #48	; 0x30
 800ab54:	d819      	bhi.n	800ab8a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800ab56:	2b20      	cmp	r3, #32
 800ab58:	d00c      	beq.n	800ab74 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800ab5a:	2b20      	cmp	r3, #32
 800ab5c:	d815      	bhi.n	800ab8a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d019      	beq.n	800ab96 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800ab62:	2b10      	cmp	r3, #16
 800ab64:	d111      	bne.n	800ab8a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab66:	4b77      	ldr	r3, [pc, #476]	; (800ad44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ab68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab6a:	4a76      	ldr	r2, [pc, #472]	; (800ad44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ab6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab70:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800ab72:	e011      	b.n	800ab98 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ab74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab78:	3308      	adds	r3, #8
 800ab7a:	2102      	movs	r1, #2
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	f002 f9ed 	bl	800cf5c <RCCEx_PLL2_Config>
 800ab82:	4603      	mov	r3, r0
 800ab84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800ab88:	e006      	b.n	800ab98 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ab8a:	2301      	movs	r3, #1
 800ab8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ab90:	e002      	b.n	800ab98 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800ab92:	bf00      	nop
 800ab94:	e000      	b.n	800ab98 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800ab96:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d10a      	bne.n	800abb6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800aba0:	4b68      	ldr	r3, [pc, #416]	; (800ad44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aba4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800aba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abae:	4a65      	ldr	r2, [pc, #404]	; (800ad44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800abb0:	430b      	orrs	r3, r1
 800abb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800abb4:	e003      	b.n	800abbe <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800abba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800abbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abc6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800abca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800abce:	2300      	movs	r3, #0
 800abd0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800abd4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800abd8:	460b      	mov	r3, r1
 800abda:	4313      	orrs	r3, r2
 800abdc:	d051      	beq.n	800ac82 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800abde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800abe4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800abe8:	d035      	beq.n	800ac56 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800abea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800abee:	d82e      	bhi.n	800ac4e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800abf0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800abf4:	d031      	beq.n	800ac5a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800abf6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800abfa:	d828      	bhi.n	800ac4e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800abfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac00:	d01a      	beq.n	800ac38 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800ac02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac06:	d822      	bhi.n	800ac4e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d003      	beq.n	800ac14 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800ac0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac10:	d007      	beq.n	800ac22 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800ac12:	e01c      	b.n	800ac4e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac14:	4b4b      	ldr	r3, [pc, #300]	; (800ad44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ac16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac18:	4a4a      	ldr	r2, [pc, #296]	; (800ad44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ac1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ac20:	e01c      	b.n	800ac5c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ac22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac26:	3308      	adds	r3, #8
 800ac28:	2100      	movs	r1, #0
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f002 f996 	bl	800cf5c <RCCEx_PLL2_Config>
 800ac30:	4603      	mov	r3, r0
 800ac32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ac36:	e011      	b.n	800ac5c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ac38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac3c:	3328      	adds	r3, #40	; 0x28
 800ac3e:	2100      	movs	r1, #0
 800ac40:	4618      	mov	r0, r3
 800ac42:	f002 fa3d 	bl	800d0c0 <RCCEx_PLL3_Config>
 800ac46:	4603      	mov	r3, r0
 800ac48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ac4c:	e006      	b.n	800ac5c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac4e:	2301      	movs	r3, #1
 800ac50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ac54:	e002      	b.n	800ac5c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800ac56:	bf00      	nop
 800ac58:	e000      	b.n	800ac5c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800ac5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d10a      	bne.n	800ac7a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ac64:	4b37      	ldr	r3, [pc, #220]	; (800ad44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ac66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac68:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800ac6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac72:	4a34      	ldr	r2, [pc, #208]	; (800ad44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ac74:	430b      	orrs	r3, r1
 800ac76:	6513      	str	r3, [r2, #80]	; 0x50
 800ac78:	e003      	b.n	800ac82 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac7e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800ac82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac8a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800ac8e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ac92:	2300      	movs	r3, #0
 800ac94:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ac98:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800ac9c:	460b      	mov	r3, r1
 800ac9e:	4313      	orrs	r3, r2
 800aca0:	d056      	beq.n	800ad50 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800aca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aca6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aca8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800acac:	d033      	beq.n	800ad16 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800acae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800acb2:	d82c      	bhi.n	800ad0e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800acb4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800acb8:	d02f      	beq.n	800ad1a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800acba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800acbe:	d826      	bhi.n	800ad0e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800acc0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800acc4:	d02b      	beq.n	800ad1e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800acc6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800acca:	d820      	bhi.n	800ad0e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800accc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800acd0:	d012      	beq.n	800acf8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800acd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800acd6:	d81a      	bhi.n	800ad0e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d022      	beq.n	800ad22 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800acdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ace0:	d115      	bne.n	800ad0e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ace2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ace6:	3308      	adds	r3, #8
 800ace8:	2101      	movs	r1, #1
 800acea:	4618      	mov	r0, r3
 800acec:	f002 f936 	bl	800cf5c <RCCEx_PLL2_Config>
 800acf0:	4603      	mov	r3, r0
 800acf2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800acf6:	e015      	b.n	800ad24 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800acf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acfc:	3328      	adds	r3, #40	; 0x28
 800acfe:	2101      	movs	r1, #1
 800ad00:	4618      	mov	r0, r3
 800ad02:	f002 f9dd 	bl	800d0c0 <RCCEx_PLL3_Config>
 800ad06:	4603      	mov	r3, r0
 800ad08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ad0c:	e00a      	b.n	800ad24 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad0e:	2301      	movs	r3, #1
 800ad10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ad14:	e006      	b.n	800ad24 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ad16:	bf00      	nop
 800ad18:	e004      	b.n	800ad24 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ad1a:	bf00      	nop
 800ad1c:	e002      	b.n	800ad24 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ad1e:	bf00      	nop
 800ad20:	e000      	b.n	800ad24 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ad22:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d10d      	bne.n	800ad48 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800ad2c:	4b05      	ldr	r3, [pc, #20]	; (800ad44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ad2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad30:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800ad34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad3a:	4a02      	ldr	r2, [pc, #8]	; (800ad44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ad3c:	430b      	orrs	r3, r1
 800ad3e:	6513      	str	r3, [r2, #80]	; 0x50
 800ad40:	e006      	b.n	800ad50 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800ad42:	bf00      	nop
 800ad44:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ad4c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ad50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad58:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800ad5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ad60:	2300      	movs	r3, #0
 800ad62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ad66:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800ad6a:	460b      	mov	r3, r1
 800ad6c:	4313      	orrs	r3, r2
 800ad6e:	d055      	beq.n	800ae1c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800ad70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad74:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ad78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ad7c:	d033      	beq.n	800ade6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800ad7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ad82:	d82c      	bhi.n	800adde <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ad84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad88:	d02f      	beq.n	800adea <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800ad8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad8e:	d826      	bhi.n	800adde <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ad90:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ad94:	d02b      	beq.n	800adee <HAL_RCCEx_PeriphCLKConfig+0x672>
 800ad96:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ad9a:	d820      	bhi.n	800adde <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ad9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ada0:	d012      	beq.n	800adc8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800ada2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ada6:	d81a      	bhi.n	800adde <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d022      	beq.n	800adf2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800adac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800adb0:	d115      	bne.n	800adde <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800adb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adb6:	3308      	adds	r3, #8
 800adb8:	2101      	movs	r1, #1
 800adba:	4618      	mov	r0, r3
 800adbc:	f002 f8ce 	bl	800cf5c <RCCEx_PLL2_Config>
 800adc0:	4603      	mov	r3, r0
 800adc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800adc6:	e015      	b.n	800adf4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800adc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adcc:	3328      	adds	r3, #40	; 0x28
 800adce:	2101      	movs	r1, #1
 800add0:	4618      	mov	r0, r3
 800add2:	f002 f975 	bl	800d0c0 <RCCEx_PLL3_Config>
 800add6:	4603      	mov	r3, r0
 800add8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800addc:	e00a      	b.n	800adf4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800adde:	2301      	movs	r3, #1
 800ade0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ade4:	e006      	b.n	800adf4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ade6:	bf00      	nop
 800ade8:	e004      	b.n	800adf4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800adea:	bf00      	nop
 800adec:	e002      	b.n	800adf4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800adee:	bf00      	nop
 800adf0:	e000      	b.n	800adf4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800adf2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800adf4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d10b      	bne.n	800ae14 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800adfc:	4ba3      	ldr	r3, [pc, #652]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800adfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae00:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800ae04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae08:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ae0c:	4a9f      	ldr	r2, [pc, #636]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ae0e:	430b      	orrs	r3, r1
 800ae10:	6593      	str	r3, [r2, #88]	; 0x58
 800ae12:	e003      	b.n	800ae1c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae18:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ae1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae24:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800ae28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ae32:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ae36:	460b      	mov	r3, r1
 800ae38:	4313      	orrs	r3, r2
 800ae3a:	d037      	beq.n	800aeac <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800ae3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae46:	d00e      	beq.n	800ae66 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800ae48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae4c:	d816      	bhi.n	800ae7c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d018      	beq.n	800ae84 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800ae52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ae56:	d111      	bne.n	800ae7c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae58:	4b8c      	ldr	r3, [pc, #560]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ae5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae5c:	4a8b      	ldr	r2, [pc, #556]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ae5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800ae64:	e00f      	b.n	800ae86 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ae66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae6a:	3308      	adds	r3, #8
 800ae6c:	2101      	movs	r1, #1
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f002 f874 	bl	800cf5c <RCCEx_PLL2_Config>
 800ae74:	4603      	mov	r3, r0
 800ae76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800ae7a:	e004      	b.n	800ae86 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ae7c:	2301      	movs	r3, #1
 800ae7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ae82:	e000      	b.n	800ae86 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800ae84:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d10a      	bne.n	800aea4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ae8e:	4b7f      	ldr	r3, [pc, #508]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ae90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae92:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800ae96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae9c:	4a7b      	ldr	r2, [pc, #492]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ae9e:	430b      	orrs	r3, r1
 800aea0:	6513      	str	r3, [r2, #80]	; 0x50
 800aea2:	e003      	b.n	800aeac <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aea4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aea8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800aeac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aeb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeb4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800aeb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800aebc:	2300      	movs	r3, #0
 800aebe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800aec2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800aec6:	460b      	mov	r3, r1
 800aec8:	4313      	orrs	r3, r2
 800aeca:	d039      	beq.n	800af40 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800aecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aed0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aed2:	2b03      	cmp	r3, #3
 800aed4:	d81c      	bhi.n	800af10 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800aed6:	a201      	add	r2, pc, #4	; (adr r2, 800aedc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800aed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aedc:	0800af19 	.word	0x0800af19
 800aee0:	0800aeed 	.word	0x0800aeed
 800aee4:	0800aefb 	.word	0x0800aefb
 800aee8:	0800af19 	.word	0x0800af19
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aeec:	4b67      	ldr	r3, [pc, #412]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aeee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aef0:	4a66      	ldr	r2, [pc, #408]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aef2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aef6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800aef8:	e00f      	b.n	800af1a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aefa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aefe:	3308      	adds	r3, #8
 800af00:	2102      	movs	r1, #2
 800af02:	4618      	mov	r0, r3
 800af04:	f002 f82a 	bl	800cf5c <RCCEx_PLL2_Config>
 800af08:	4603      	mov	r3, r0
 800af0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800af0e:	e004      	b.n	800af1a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800af10:	2301      	movs	r3, #1
 800af12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800af16:	e000      	b.n	800af1a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800af18:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d10a      	bne.n	800af38 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800af22:	4b5a      	ldr	r3, [pc, #360]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800af24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af26:	f023 0103 	bic.w	r1, r3, #3
 800af2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af30:	4a56      	ldr	r2, [pc, #344]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800af32:	430b      	orrs	r3, r1
 800af34:	64d3      	str	r3, [r2, #76]	; 0x4c
 800af36:	e003      	b.n	800af40 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af3c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800af40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af48:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800af4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800af50:	2300      	movs	r3, #0
 800af52:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800af56:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800af5a:	460b      	mov	r3, r1
 800af5c:	4313      	orrs	r3, r2
 800af5e:	f000 809f 	beq.w	800b0a0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800af62:	4b4b      	ldr	r3, [pc, #300]	; (800b090 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	4a4a      	ldr	r2, [pc, #296]	; (800b090 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800af68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af6c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800af6e:	f7f8 fd97 	bl	8003aa0 <HAL_GetTick>
 800af72:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800af76:	e00b      	b.n	800af90 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800af78:	f7f8 fd92 	bl	8003aa0 <HAL_GetTick>
 800af7c:	4602      	mov	r2, r0
 800af7e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800af82:	1ad3      	subs	r3, r2, r3
 800af84:	2b64      	cmp	r3, #100	; 0x64
 800af86:	d903      	bls.n	800af90 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800af88:	2303      	movs	r3, #3
 800af8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800af8e:	e005      	b.n	800af9c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800af90:	4b3f      	ldr	r3, [pc, #252]	; (800b090 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d0ed      	beq.n	800af78 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800af9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d179      	bne.n	800b098 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800afa4:	4b39      	ldr	r3, [pc, #228]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800afa6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800afa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800afb0:	4053      	eors	r3, r2
 800afb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d015      	beq.n	800afe6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800afba:	4b34      	ldr	r3, [pc, #208]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800afbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800afc2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800afc6:	4b31      	ldr	r3, [pc, #196]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800afc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afca:	4a30      	ldr	r2, [pc, #192]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800afcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800afd0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800afd2:	4b2e      	ldr	r3, [pc, #184]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800afd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afd6:	4a2d      	ldr	r2, [pc, #180]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800afd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800afdc:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800afde:	4a2b      	ldr	r2, [pc, #172]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800afe0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800afe4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800afe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800afee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aff2:	d118      	bne.n	800b026 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aff4:	f7f8 fd54 	bl	8003aa0 <HAL_GetTick>
 800aff8:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800affc:	e00d      	b.n	800b01a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800affe:	f7f8 fd4f 	bl	8003aa0 <HAL_GetTick>
 800b002:	4602      	mov	r2, r0
 800b004:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b008:	1ad2      	subs	r2, r2, r3
 800b00a:	f241 3388 	movw	r3, #5000	; 0x1388
 800b00e:	429a      	cmp	r2, r3
 800b010:	d903      	bls.n	800b01a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800b012:	2303      	movs	r3, #3
 800b014:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800b018:	e005      	b.n	800b026 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b01a:	4b1c      	ldr	r3, [pc, #112]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b01c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b01e:	f003 0302 	and.w	r3, r3, #2
 800b022:	2b00      	cmp	r3, #0
 800b024:	d0eb      	beq.n	800affe <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800b026:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d129      	bne.n	800b082 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b02e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b032:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b036:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b03a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b03e:	d10e      	bne.n	800b05e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800b040:	4b12      	ldr	r3, [pc, #72]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b042:	691b      	ldr	r3, [r3, #16]
 800b044:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b048:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b04c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b050:	091a      	lsrs	r2, r3, #4
 800b052:	4b10      	ldr	r3, [pc, #64]	; (800b094 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800b054:	4013      	ands	r3, r2
 800b056:	4a0d      	ldr	r2, [pc, #52]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b058:	430b      	orrs	r3, r1
 800b05a:	6113      	str	r3, [r2, #16]
 800b05c:	e005      	b.n	800b06a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800b05e:	4b0b      	ldr	r3, [pc, #44]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b060:	691b      	ldr	r3, [r3, #16]
 800b062:	4a0a      	ldr	r2, [pc, #40]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b064:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b068:	6113      	str	r3, [r2, #16]
 800b06a:	4b08      	ldr	r3, [pc, #32]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b06c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b06e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b072:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b076:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b07a:	4a04      	ldr	r2, [pc, #16]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b07c:	430b      	orrs	r3, r1
 800b07e:	6713      	str	r3, [r2, #112]	; 0x70
 800b080:	e00e      	b.n	800b0a0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b082:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b086:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800b08a:	e009      	b.n	800b0a0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800b08c:	58024400 	.word	0x58024400
 800b090:	58024800 	.word	0x58024800
 800b094:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b098:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b09c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b0a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0a8:	f002 0301 	and.w	r3, r2, #1
 800b0ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b0b6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b0ba:	460b      	mov	r3, r1
 800b0bc:	4313      	orrs	r3, r2
 800b0be:	f000 8089 	beq.w	800b1d4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b0c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b0c8:	2b28      	cmp	r3, #40	; 0x28
 800b0ca:	d86b      	bhi.n	800b1a4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800b0cc:	a201      	add	r2, pc, #4	; (adr r2, 800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b0ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0d2:	bf00      	nop
 800b0d4:	0800b1ad 	.word	0x0800b1ad
 800b0d8:	0800b1a5 	.word	0x0800b1a5
 800b0dc:	0800b1a5 	.word	0x0800b1a5
 800b0e0:	0800b1a5 	.word	0x0800b1a5
 800b0e4:	0800b1a5 	.word	0x0800b1a5
 800b0e8:	0800b1a5 	.word	0x0800b1a5
 800b0ec:	0800b1a5 	.word	0x0800b1a5
 800b0f0:	0800b1a5 	.word	0x0800b1a5
 800b0f4:	0800b179 	.word	0x0800b179
 800b0f8:	0800b1a5 	.word	0x0800b1a5
 800b0fc:	0800b1a5 	.word	0x0800b1a5
 800b100:	0800b1a5 	.word	0x0800b1a5
 800b104:	0800b1a5 	.word	0x0800b1a5
 800b108:	0800b1a5 	.word	0x0800b1a5
 800b10c:	0800b1a5 	.word	0x0800b1a5
 800b110:	0800b1a5 	.word	0x0800b1a5
 800b114:	0800b18f 	.word	0x0800b18f
 800b118:	0800b1a5 	.word	0x0800b1a5
 800b11c:	0800b1a5 	.word	0x0800b1a5
 800b120:	0800b1a5 	.word	0x0800b1a5
 800b124:	0800b1a5 	.word	0x0800b1a5
 800b128:	0800b1a5 	.word	0x0800b1a5
 800b12c:	0800b1a5 	.word	0x0800b1a5
 800b130:	0800b1a5 	.word	0x0800b1a5
 800b134:	0800b1ad 	.word	0x0800b1ad
 800b138:	0800b1a5 	.word	0x0800b1a5
 800b13c:	0800b1a5 	.word	0x0800b1a5
 800b140:	0800b1a5 	.word	0x0800b1a5
 800b144:	0800b1a5 	.word	0x0800b1a5
 800b148:	0800b1a5 	.word	0x0800b1a5
 800b14c:	0800b1a5 	.word	0x0800b1a5
 800b150:	0800b1a5 	.word	0x0800b1a5
 800b154:	0800b1ad 	.word	0x0800b1ad
 800b158:	0800b1a5 	.word	0x0800b1a5
 800b15c:	0800b1a5 	.word	0x0800b1a5
 800b160:	0800b1a5 	.word	0x0800b1a5
 800b164:	0800b1a5 	.word	0x0800b1a5
 800b168:	0800b1a5 	.word	0x0800b1a5
 800b16c:	0800b1a5 	.word	0x0800b1a5
 800b170:	0800b1a5 	.word	0x0800b1a5
 800b174:	0800b1ad 	.word	0x0800b1ad
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b178:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b17c:	3308      	adds	r3, #8
 800b17e:	2101      	movs	r1, #1
 800b180:	4618      	mov	r0, r3
 800b182:	f001 feeb 	bl	800cf5c <RCCEx_PLL2_Config>
 800b186:	4603      	mov	r3, r0
 800b188:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b18c:	e00f      	b.n	800b1ae <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b18e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b192:	3328      	adds	r3, #40	; 0x28
 800b194:	2101      	movs	r1, #1
 800b196:	4618      	mov	r0, r3
 800b198:	f001 ff92 	bl	800d0c0 <RCCEx_PLL3_Config>
 800b19c:	4603      	mov	r3, r0
 800b19e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b1a2:	e004      	b.n	800b1ae <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b1a4:	2301      	movs	r3, #1
 800b1a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b1aa:	e000      	b.n	800b1ae <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800b1ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d10a      	bne.n	800b1cc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b1b6:	4bbf      	ldr	r3, [pc, #764]	; (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b1b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1ba:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b1be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b1c4:	4abb      	ldr	r2, [pc, #748]	; (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b1c6:	430b      	orrs	r3, r1
 800b1c8:	6553      	str	r3, [r2, #84]	; 0x54
 800b1ca:	e003      	b.n	800b1d4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b1d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1dc:	f002 0302 	and.w	r3, r2, #2
 800b1e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b1ea:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b1ee:	460b      	mov	r3, r1
 800b1f0:	4313      	orrs	r3, r2
 800b1f2:	d041      	beq.n	800b278 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b1f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b1fa:	2b05      	cmp	r3, #5
 800b1fc:	d824      	bhi.n	800b248 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800b1fe:	a201      	add	r2, pc, #4	; (adr r2, 800b204 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800b200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b204:	0800b251 	.word	0x0800b251
 800b208:	0800b21d 	.word	0x0800b21d
 800b20c:	0800b233 	.word	0x0800b233
 800b210:	0800b251 	.word	0x0800b251
 800b214:	0800b251 	.word	0x0800b251
 800b218:	0800b251 	.word	0x0800b251
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b21c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b220:	3308      	adds	r3, #8
 800b222:	2101      	movs	r1, #1
 800b224:	4618      	mov	r0, r3
 800b226:	f001 fe99 	bl	800cf5c <RCCEx_PLL2_Config>
 800b22a:	4603      	mov	r3, r0
 800b22c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b230:	e00f      	b.n	800b252 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b232:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b236:	3328      	adds	r3, #40	; 0x28
 800b238:	2101      	movs	r1, #1
 800b23a:	4618      	mov	r0, r3
 800b23c:	f001 ff40 	bl	800d0c0 <RCCEx_PLL3_Config>
 800b240:	4603      	mov	r3, r0
 800b242:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b246:	e004      	b.n	800b252 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b248:	2301      	movs	r3, #1
 800b24a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b24e:	e000      	b.n	800b252 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800b250:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b252:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b256:	2b00      	cmp	r3, #0
 800b258:	d10a      	bne.n	800b270 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b25a:	4b96      	ldr	r3, [pc, #600]	; (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b25c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b25e:	f023 0107 	bic.w	r1, r3, #7
 800b262:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b266:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b268:	4a92      	ldr	r2, [pc, #584]	; (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b26a:	430b      	orrs	r3, r1
 800b26c:	6553      	str	r3, [r2, #84]	; 0x54
 800b26e:	e003      	b.n	800b278 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b270:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b274:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b278:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b280:	f002 0304 	and.w	r3, r2, #4
 800b284:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b288:	2300      	movs	r3, #0
 800b28a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b28e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b292:	460b      	mov	r3, r1
 800b294:	4313      	orrs	r3, r2
 800b296:	d044      	beq.n	800b322 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b298:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b29c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b2a0:	2b05      	cmp	r3, #5
 800b2a2:	d825      	bhi.n	800b2f0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800b2a4:	a201      	add	r2, pc, #4	; (adr r2, 800b2ac <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800b2a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2aa:	bf00      	nop
 800b2ac:	0800b2f9 	.word	0x0800b2f9
 800b2b0:	0800b2c5 	.word	0x0800b2c5
 800b2b4:	0800b2db 	.word	0x0800b2db
 800b2b8:	0800b2f9 	.word	0x0800b2f9
 800b2bc:	0800b2f9 	.word	0x0800b2f9
 800b2c0:	0800b2f9 	.word	0x0800b2f9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b2c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2c8:	3308      	adds	r3, #8
 800b2ca:	2101      	movs	r1, #1
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	f001 fe45 	bl	800cf5c <RCCEx_PLL2_Config>
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b2d8:	e00f      	b.n	800b2fa <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b2da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2de:	3328      	adds	r3, #40	; 0x28
 800b2e0:	2101      	movs	r1, #1
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	f001 feec 	bl	800d0c0 <RCCEx_PLL3_Config>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b2ee:	e004      	b.n	800b2fa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b2f0:	2301      	movs	r3, #1
 800b2f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b2f6:	e000      	b.n	800b2fa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800b2f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b2fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d10b      	bne.n	800b31a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b302:	4b6c      	ldr	r3, [pc, #432]	; (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b306:	f023 0107 	bic.w	r1, r3, #7
 800b30a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b30e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b312:	4a68      	ldr	r2, [pc, #416]	; (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b314:	430b      	orrs	r3, r1
 800b316:	6593      	str	r3, [r2, #88]	; 0x58
 800b318:	e003      	b.n	800b322 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b31a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b31e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b322:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b32a:	f002 0320 	and.w	r3, r2, #32
 800b32e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b332:	2300      	movs	r3, #0
 800b334:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b338:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b33c:	460b      	mov	r3, r1
 800b33e:	4313      	orrs	r3, r2
 800b340:	d055      	beq.n	800b3ee <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b342:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b34a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b34e:	d033      	beq.n	800b3b8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800b350:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b354:	d82c      	bhi.n	800b3b0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b356:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b35a:	d02f      	beq.n	800b3bc <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800b35c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b360:	d826      	bhi.n	800b3b0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b362:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b366:	d02b      	beq.n	800b3c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800b368:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b36c:	d820      	bhi.n	800b3b0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b36e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b372:	d012      	beq.n	800b39a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800b374:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b378:	d81a      	bhi.n	800b3b0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d022      	beq.n	800b3c4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800b37e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b382:	d115      	bne.n	800b3b0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b384:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b388:	3308      	adds	r3, #8
 800b38a:	2100      	movs	r1, #0
 800b38c:	4618      	mov	r0, r3
 800b38e:	f001 fde5 	bl	800cf5c <RCCEx_PLL2_Config>
 800b392:	4603      	mov	r3, r0
 800b394:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b398:	e015      	b.n	800b3c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b39a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b39e:	3328      	adds	r3, #40	; 0x28
 800b3a0:	2102      	movs	r1, #2
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	f001 fe8c 	bl	800d0c0 <RCCEx_PLL3_Config>
 800b3a8:	4603      	mov	r3, r0
 800b3aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b3ae:	e00a      	b.n	800b3c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b3b0:	2301      	movs	r3, #1
 800b3b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b3b6:	e006      	b.n	800b3c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b3b8:	bf00      	nop
 800b3ba:	e004      	b.n	800b3c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b3bc:	bf00      	nop
 800b3be:	e002      	b.n	800b3c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b3c0:	bf00      	nop
 800b3c2:	e000      	b.n	800b3c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b3c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d10b      	bne.n	800b3e6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b3ce:	4b39      	ldr	r3, [pc, #228]	; (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b3d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3d2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b3d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3de:	4a35      	ldr	r2, [pc, #212]	; (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b3e0:	430b      	orrs	r3, r1
 800b3e2:	6553      	str	r3, [r2, #84]	; 0x54
 800b3e4:	e003      	b.n	800b3ee <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b3ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b3ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3f6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b3fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b3fe:	2300      	movs	r3, #0
 800b400:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b404:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800b408:	460b      	mov	r3, r1
 800b40a:	4313      	orrs	r3, r2
 800b40c:	d058      	beq.n	800b4c0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b40e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b412:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b416:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b41a:	d033      	beq.n	800b484 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800b41c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b420:	d82c      	bhi.n	800b47c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b422:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b426:	d02f      	beq.n	800b488 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800b428:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b42c:	d826      	bhi.n	800b47c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b42e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b432:	d02b      	beq.n	800b48c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800b434:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b438:	d820      	bhi.n	800b47c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b43a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b43e:	d012      	beq.n	800b466 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800b440:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b444:	d81a      	bhi.n	800b47c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b446:	2b00      	cmp	r3, #0
 800b448:	d022      	beq.n	800b490 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800b44a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b44e:	d115      	bne.n	800b47c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b450:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b454:	3308      	adds	r3, #8
 800b456:	2100      	movs	r1, #0
 800b458:	4618      	mov	r0, r3
 800b45a:	f001 fd7f 	bl	800cf5c <RCCEx_PLL2_Config>
 800b45e:	4603      	mov	r3, r0
 800b460:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b464:	e015      	b.n	800b492 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b466:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b46a:	3328      	adds	r3, #40	; 0x28
 800b46c:	2102      	movs	r1, #2
 800b46e:	4618      	mov	r0, r3
 800b470:	f001 fe26 	bl	800d0c0 <RCCEx_PLL3_Config>
 800b474:	4603      	mov	r3, r0
 800b476:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b47a:	e00a      	b.n	800b492 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b47c:	2301      	movs	r3, #1
 800b47e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b482:	e006      	b.n	800b492 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b484:	bf00      	nop
 800b486:	e004      	b.n	800b492 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b488:	bf00      	nop
 800b48a:	e002      	b.n	800b492 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b48c:	bf00      	nop
 800b48e:	e000      	b.n	800b492 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b490:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b492:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b496:	2b00      	cmp	r3, #0
 800b498:	d10e      	bne.n	800b4b8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b49a:	4b06      	ldr	r3, [pc, #24]	; (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b49c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b49e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800b4a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b4aa:	4a02      	ldr	r2, [pc, #8]	; (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b4ac:	430b      	orrs	r3, r1
 800b4ae:	6593      	str	r3, [r2, #88]	; 0x58
 800b4b0:	e006      	b.n	800b4c0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800b4b2:	bf00      	nop
 800b4b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b4c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800b4cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b4d6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800b4da:	460b      	mov	r3, r1
 800b4dc:	4313      	orrs	r3, r2
 800b4de:	d055      	beq.n	800b58c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b4e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4e4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b4e8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b4ec:	d033      	beq.n	800b556 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800b4ee:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b4f2:	d82c      	bhi.n	800b54e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b4f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b4f8:	d02f      	beq.n	800b55a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800b4fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b4fe:	d826      	bhi.n	800b54e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b500:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b504:	d02b      	beq.n	800b55e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800b506:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b50a:	d820      	bhi.n	800b54e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b50c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b510:	d012      	beq.n	800b538 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800b512:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b516:	d81a      	bhi.n	800b54e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d022      	beq.n	800b562 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800b51c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b520:	d115      	bne.n	800b54e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b522:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b526:	3308      	adds	r3, #8
 800b528:	2100      	movs	r1, #0
 800b52a:	4618      	mov	r0, r3
 800b52c:	f001 fd16 	bl	800cf5c <RCCEx_PLL2_Config>
 800b530:	4603      	mov	r3, r0
 800b532:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b536:	e015      	b.n	800b564 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b538:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b53c:	3328      	adds	r3, #40	; 0x28
 800b53e:	2102      	movs	r1, #2
 800b540:	4618      	mov	r0, r3
 800b542:	f001 fdbd 	bl	800d0c0 <RCCEx_PLL3_Config>
 800b546:	4603      	mov	r3, r0
 800b548:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b54c:	e00a      	b.n	800b564 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b54e:	2301      	movs	r3, #1
 800b550:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b554:	e006      	b.n	800b564 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b556:	bf00      	nop
 800b558:	e004      	b.n	800b564 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b55a:	bf00      	nop
 800b55c:	e002      	b.n	800b564 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b55e:	bf00      	nop
 800b560:	e000      	b.n	800b564 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b562:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b564:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d10b      	bne.n	800b584 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b56c:	4ba1      	ldr	r3, [pc, #644]	; (800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b56e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b570:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800b574:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b578:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b57c:	4a9d      	ldr	r2, [pc, #628]	; (800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b57e:	430b      	orrs	r3, r1
 800b580:	6593      	str	r3, [r2, #88]	; 0x58
 800b582:	e003      	b.n	800b58c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b584:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b588:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b58c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b590:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b594:	f002 0308 	and.w	r3, r2, #8
 800b598:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b59c:	2300      	movs	r3, #0
 800b59e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b5a2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800b5a6:	460b      	mov	r3, r1
 800b5a8:	4313      	orrs	r3, r2
 800b5aa:	d01e      	beq.n	800b5ea <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800b5ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b5b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5b8:	d10c      	bne.n	800b5d4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b5ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5be:	3328      	adds	r3, #40	; 0x28
 800b5c0:	2102      	movs	r1, #2
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f001 fd7c 	bl	800d0c0 <RCCEx_PLL3_Config>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d002      	beq.n	800b5d4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800b5ce:	2301      	movs	r3, #1
 800b5d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b5d4:	4b87      	ldr	r3, [pc, #540]	; (800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b5d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5d8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b5dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b5e4:	4a83      	ldr	r2, [pc, #524]	; (800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b5e6:	430b      	orrs	r3, r1
 800b5e8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b5ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5f2:	f002 0310 	and.w	r3, r2, #16
 800b5f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b600:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800b604:	460b      	mov	r3, r1
 800b606:	4313      	orrs	r3, r2
 800b608:	d01e      	beq.n	800b648 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b60a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b60e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b612:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b616:	d10c      	bne.n	800b632 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b618:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b61c:	3328      	adds	r3, #40	; 0x28
 800b61e:	2102      	movs	r1, #2
 800b620:	4618      	mov	r0, r3
 800b622:	f001 fd4d 	bl	800d0c0 <RCCEx_PLL3_Config>
 800b626:	4603      	mov	r3, r0
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d002      	beq.n	800b632 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800b62c:	2301      	movs	r3, #1
 800b62e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b632:	4b70      	ldr	r3, [pc, #448]	; (800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b636:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b63a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b63e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b642:	4a6c      	ldr	r2, [pc, #432]	; (800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b644:	430b      	orrs	r3, r1
 800b646:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b648:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b650:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800b654:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b658:	2300      	movs	r3, #0
 800b65a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b65e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800b662:	460b      	mov	r3, r1
 800b664:	4313      	orrs	r3, r2
 800b666:	d03e      	beq.n	800b6e6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b668:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b66c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b670:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b674:	d022      	beq.n	800b6bc <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800b676:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b67a:	d81b      	bhi.n	800b6b4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d003      	beq.n	800b688 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800b680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b684:	d00b      	beq.n	800b69e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800b686:	e015      	b.n	800b6b4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b688:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b68c:	3308      	adds	r3, #8
 800b68e:	2100      	movs	r1, #0
 800b690:	4618      	mov	r0, r3
 800b692:	f001 fc63 	bl	800cf5c <RCCEx_PLL2_Config>
 800b696:	4603      	mov	r3, r0
 800b698:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b69c:	e00f      	b.n	800b6be <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b69e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6a2:	3328      	adds	r3, #40	; 0x28
 800b6a4:	2102      	movs	r1, #2
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	f001 fd0a 	bl	800d0c0 <RCCEx_PLL3_Config>
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b6b2:	e004      	b.n	800b6be <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b6b4:	2301      	movs	r3, #1
 800b6b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b6ba:	e000      	b.n	800b6be <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800b6bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d10b      	bne.n	800b6de <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b6c6:	4b4b      	ldr	r3, [pc, #300]	; (800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b6c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6ca:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800b6ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b6d6:	4a47      	ldr	r2, [pc, #284]	; (800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b6d8:	430b      	orrs	r3, r1
 800b6da:	6593      	str	r3, [r2, #88]	; 0x58
 800b6dc:	e003      	b.n	800b6e6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b6e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ee:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800b6f2:	67bb      	str	r3, [r7, #120]	; 0x78
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b6f8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800b6fc:	460b      	mov	r3, r1
 800b6fe:	4313      	orrs	r3, r2
 800b700:	d03b      	beq.n	800b77a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b702:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b70a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b70e:	d01f      	beq.n	800b750 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800b710:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b714:	d818      	bhi.n	800b748 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800b716:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b71a:	d003      	beq.n	800b724 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800b71c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b720:	d007      	beq.n	800b732 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800b722:	e011      	b.n	800b748 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b724:	4b33      	ldr	r3, [pc, #204]	; (800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b728:	4a32      	ldr	r2, [pc, #200]	; (800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b72a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b72e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b730:	e00f      	b.n	800b752 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b732:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b736:	3328      	adds	r3, #40	; 0x28
 800b738:	2101      	movs	r1, #1
 800b73a:	4618      	mov	r0, r3
 800b73c:	f001 fcc0 	bl	800d0c0 <RCCEx_PLL3_Config>
 800b740:	4603      	mov	r3, r0
 800b742:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800b746:	e004      	b.n	800b752 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b748:	2301      	movs	r3, #1
 800b74a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b74e:	e000      	b.n	800b752 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800b750:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b752:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b756:	2b00      	cmp	r3, #0
 800b758:	d10b      	bne.n	800b772 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b75a:	4b26      	ldr	r3, [pc, #152]	; (800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b75c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b75e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b762:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b76a:	4a22      	ldr	r2, [pc, #136]	; (800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b76c:	430b      	orrs	r3, r1
 800b76e:	6553      	str	r3, [r2, #84]	; 0x54
 800b770:	e003      	b.n	800b77a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b772:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b776:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b77a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b782:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800b786:	673b      	str	r3, [r7, #112]	; 0x70
 800b788:	2300      	movs	r3, #0
 800b78a:	677b      	str	r3, [r7, #116]	; 0x74
 800b78c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800b790:	460b      	mov	r3, r1
 800b792:	4313      	orrs	r3, r2
 800b794:	d034      	beq.n	800b800 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b796:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b79a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d003      	beq.n	800b7a8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800b7a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7a4:	d007      	beq.n	800b7b6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800b7a6:	e011      	b.n	800b7cc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7a8:	4b12      	ldr	r3, [pc, #72]	; (800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b7aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7ac:	4a11      	ldr	r2, [pc, #68]	; (800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b7ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b7b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b7b4:	e00e      	b.n	800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b7b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7ba:	3308      	adds	r3, #8
 800b7bc:	2102      	movs	r1, #2
 800b7be:	4618      	mov	r0, r3
 800b7c0:	f001 fbcc 	bl	800cf5c <RCCEx_PLL2_Config>
 800b7c4:	4603      	mov	r3, r0
 800b7c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b7ca:	e003      	b.n	800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800b7cc:	2301      	movs	r3, #1
 800b7ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b7d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d10d      	bne.n	800b7f8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b7dc:	4b05      	ldr	r3, [pc, #20]	; (800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b7de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b7e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7ea:	4a02      	ldr	r2, [pc, #8]	; (800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b7ec:	430b      	orrs	r3, r1
 800b7ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b7f0:	e006      	b.n	800b800 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800b7f2:	bf00      	nop
 800b7f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b7fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b800:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b808:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800b80c:	66bb      	str	r3, [r7, #104]	; 0x68
 800b80e:	2300      	movs	r3, #0
 800b810:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b812:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800b816:	460b      	mov	r3, r1
 800b818:	4313      	orrs	r3, r2
 800b81a:	d00c      	beq.n	800b836 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b81c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b820:	3328      	adds	r3, #40	; 0x28
 800b822:	2102      	movs	r1, #2
 800b824:	4618      	mov	r0, r3
 800b826:	f001 fc4b 	bl	800d0c0 <RCCEx_PLL3_Config>
 800b82a:	4603      	mov	r3, r0
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d002      	beq.n	800b836 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800b830:	2301      	movs	r3, #1
 800b832:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b836:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b83e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800b842:	663b      	str	r3, [r7, #96]	; 0x60
 800b844:	2300      	movs	r3, #0
 800b846:	667b      	str	r3, [r7, #100]	; 0x64
 800b848:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800b84c:	460b      	mov	r3, r1
 800b84e:	4313      	orrs	r3, r2
 800b850:	d038      	beq.n	800b8c4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800b852:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b856:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b85a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b85e:	d018      	beq.n	800b892 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800b860:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b864:	d811      	bhi.n	800b88a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800b866:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b86a:	d014      	beq.n	800b896 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800b86c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b870:	d80b      	bhi.n	800b88a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800b872:	2b00      	cmp	r3, #0
 800b874:	d011      	beq.n	800b89a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800b876:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b87a:	d106      	bne.n	800b88a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b87c:	4bc3      	ldr	r3, [pc, #780]	; (800bb8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b87e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b880:	4ac2      	ldr	r2, [pc, #776]	; (800bb8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b882:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b886:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800b888:	e008      	b.n	800b89c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b88a:	2301      	movs	r3, #1
 800b88c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b890:	e004      	b.n	800b89c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800b892:	bf00      	nop
 800b894:	e002      	b.n	800b89c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800b896:	bf00      	nop
 800b898:	e000      	b.n	800b89c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800b89a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b89c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d10b      	bne.n	800b8bc <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b8a4:	4bb9      	ldr	r3, [pc, #740]	; (800bb8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b8a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8a8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b8ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b8b4:	4ab5      	ldr	r2, [pc, #724]	; (800bb8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b8b6:	430b      	orrs	r3, r1
 800b8b8:	6553      	str	r3, [r2, #84]	; 0x54
 800b8ba:	e003      	b.n	800b8c4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b8c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b8c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8cc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800b8d0:	65bb      	str	r3, [r7, #88]	; 0x58
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b8d6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800b8da:	460b      	mov	r3, r1
 800b8dc:	4313      	orrs	r3, r2
 800b8de:	d009      	beq.n	800b8f4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b8e0:	4baa      	ldr	r3, [pc, #680]	; (800bb8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b8e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8e4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b8e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8ee:	4aa7      	ldr	r2, [pc, #668]	; (800bb8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b8f0:	430b      	orrs	r3, r1
 800b8f2:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800b8f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8fc:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800b900:	653b      	str	r3, [r7, #80]	; 0x50
 800b902:	2300      	movs	r3, #0
 800b904:	657b      	str	r3, [r7, #84]	; 0x54
 800b906:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800b90a:	460b      	mov	r3, r1
 800b90c:	4313      	orrs	r3, r2
 800b90e:	d00a      	beq.n	800b926 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800b910:	4b9e      	ldr	r3, [pc, #632]	; (800bb8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b912:	691b      	ldr	r3, [r3, #16]
 800b914:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800b918:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b91c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800b920:	4a9a      	ldr	r2, [pc, #616]	; (800bb8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b922:	430b      	orrs	r3, r1
 800b924:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b926:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b92e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800b932:	64bb      	str	r3, [r7, #72]	; 0x48
 800b934:	2300      	movs	r3, #0
 800b936:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b938:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800b93c:	460b      	mov	r3, r1
 800b93e:	4313      	orrs	r3, r2
 800b940:	d009      	beq.n	800b956 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b942:	4b92      	ldr	r3, [pc, #584]	; (800bb8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b944:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b946:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800b94a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b94e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b950:	4a8e      	ldr	r2, [pc, #568]	; (800bb8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b952:	430b      	orrs	r3, r1
 800b954:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b956:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b95a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b95e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800b962:	643b      	str	r3, [r7, #64]	; 0x40
 800b964:	2300      	movs	r3, #0
 800b966:	647b      	str	r3, [r7, #68]	; 0x44
 800b968:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800b96c:	460b      	mov	r3, r1
 800b96e:	4313      	orrs	r3, r2
 800b970:	d00e      	beq.n	800b990 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b972:	4b86      	ldr	r3, [pc, #536]	; (800bb8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b974:	691b      	ldr	r3, [r3, #16]
 800b976:	4a85      	ldr	r2, [pc, #532]	; (800bb8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b978:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b97c:	6113      	str	r3, [r2, #16]
 800b97e:	4b83      	ldr	r3, [pc, #524]	; (800bb8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b980:	6919      	ldr	r1, [r3, #16]
 800b982:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b986:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800b98a:	4a80      	ldr	r2, [pc, #512]	; (800bb8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b98c:	430b      	orrs	r3, r1
 800b98e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b990:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b994:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b998:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800b99c:	63bb      	str	r3, [r7, #56]	; 0x38
 800b99e:	2300      	movs	r3, #0
 800b9a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b9a2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800b9a6:	460b      	mov	r3, r1
 800b9a8:	4313      	orrs	r3, r2
 800b9aa:	d009      	beq.n	800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b9ac:	4b77      	ldr	r3, [pc, #476]	; (800bb8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b9ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9b0:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b9b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9ba:	4a74      	ldr	r2, [pc, #464]	; (800bb8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b9bc:	430b      	orrs	r3, r1
 800b9be:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b9c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9c8:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800b9cc:	633b      	str	r3, [r7, #48]	; 0x30
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	637b      	str	r3, [r7, #52]	; 0x34
 800b9d2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800b9d6:	460b      	mov	r3, r1
 800b9d8:	4313      	orrs	r3, r2
 800b9da:	d00a      	beq.n	800b9f2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b9dc:	4b6b      	ldr	r3, [pc, #428]	; (800bb8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b9de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9e0:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800b9e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b9ec:	4a67      	ldr	r2, [pc, #412]	; (800bb8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b9ee:	430b      	orrs	r3, r1
 800b9f0:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b9f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9fa:	2100      	movs	r1, #0
 800b9fc:	62b9      	str	r1, [r7, #40]	; 0x28
 800b9fe:	f003 0301 	and.w	r3, r3, #1
 800ba02:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ba04:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800ba08:	460b      	mov	r3, r1
 800ba0a:	4313      	orrs	r3, r2
 800ba0c:	d011      	beq.n	800ba32 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ba0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba12:	3308      	adds	r3, #8
 800ba14:	2100      	movs	r1, #0
 800ba16:	4618      	mov	r0, r3
 800ba18:	f001 faa0 	bl	800cf5c <RCCEx_PLL2_Config>
 800ba1c:	4603      	mov	r3, r0
 800ba1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ba22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d003      	beq.n	800ba32 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba2e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800ba32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba3a:	2100      	movs	r1, #0
 800ba3c:	6239      	str	r1, [r7, #32]
 800ba3e:	f003 0302 	and.w	r3, r3, #2
 800ba42:	627b      	str	r3, [r7, #36]	; 0x24
 800ba44:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800ba48:	460b      	mov	r3, r1
 800ba4a:	4313      	orrs	r3, r2
 800ba4c:	d011      	beq.n	800ba72 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ba4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba52:	3308      	adds	r3, #8
 800ba54:	2101      	movs	r1, #1
 800ba56:	4618      	mov	r0, r3
 800ba58:	f001 fa80 	bl	800cf5c <RCCEx_PLL2_Config>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ba62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d003      	beq.n	800ba72 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba6e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800ba72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba7a:	2100      	movs	r1, #0
 800ba7c:	61b9      	str	r1, [r7, #24]
 800ba7e:	f003 0304 	and.w	r3, r3, #4
 800ba82:	61fb      	str	r3, [r7, #28]
 800ba84:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ba88:	460b      	mov	r3, r1
 800ba8a:	4313      	orrs	r3, r2
 800ba8c:	d011      	beq.n	800bab2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ba8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba92:	3308      	adds	r3, #8
 800ba94:	2102      	movs	r1, #2
 800ba96:	4618      	mov	r0, r3
 800ba98:	f001 fa60 	bl	800cf5c <RCCEx_PLL2_Config>
 800ba9c:	4603      	mov	r3, r0
 800ba9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800baa2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d003      	beq.n	800bab2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800baaa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800baae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800bab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baba:	2100      	movs	r1, #0
 800babc:	6139      	str	r1, [r7, #16]
 800babe:	f003 0308 	and.w	r3, r3, #8
 800bac2:	617b      	str	r3, [r7, #20]
 800bac4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800bac8:	460b      	mov	r3, r1
 800baca:	4313      	orrs	r3, r2
 800bacc:	d011      	beq.n	800baf2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bace:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bad2:	3328      	adds	r3, #40	; 0x28
 800bad4:	2100      	movs	r1, #0
 800bad6:	4618      	mov	r0, r3
 800bad8:	f001 faf2 	bl	800d0c0 <RCCEx_PLL3_Config>
 800badc:	4603      	mov	r3, r0
 800bade:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800bae2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d003      	beq.n	800baf2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800baea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800baee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800baf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800baf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bafa:	2100      	movs	r1, #0
 800bafc:	60b9      	str	r1, [r7, #8]
 800bafe:	f003 0310 	and.w	r3, r3, #16
 800bb02:	60fb      	str	r3, [r7, #12]
 800bb04:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800bb08:	460b      	mov	r3, r1
 800bb0a:	4313      	orrs	r3, r2
 800bb0c:	d011      	beq.n	800bb32 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bb0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb12:	3328      	adds	r3, #40	; 0x28
 800bb14:	2101      	movs	r1, #1
 800bb16:	4618      	mov	r0, r3
 800bb18:	f001 fad2 	bl	800d0c0 <RCCEx_PLL3_Config>
 800bb1c:	4603      	mov	r3, r0
 800bb1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bb22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d003      	beq.n	800bb32 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb2e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800bb32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb3a:	2100      	movs	r1, #0
 800bb3c:	6039      	str	r1, [r7, #0]
 800bb3e:	f003 0320 	and.w	r3, r3, #32
 800bb42:	607b      	str	r3, [r7, #4]
 800bb44:	e9d7 1200 	ldrd	r1, r2, [r7]
 800bb48:	460b      	mov	r3, r1
 800bb4a:	4313      	orrs	r3, r2
 800bb4c:	d011      	beq.n	800bb72 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bb4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb52:	3328      	adds	r3, #40	; 0x28
 800bb54:	2102      	movs	r1, #2
 800bb56:	4618      	mov	r0, r3
 800bb58:	f001 fab2 	bl	800d0c0 <RCCEx_PLL3_Config>
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bb62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d003      	beq.n	800bb72 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb6e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800bb72:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d101      	bne.n	800bb7e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	e000      	b.n	800bb80 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800bb7e:	2301      	movs	r3, #1
}
 800bb80:	4618      	mov	r0, r3
 800bb82:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800bb86:	46bd      	mov	sp, r7
 800bb88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bb8c:	58024400 	.word	0x58024400

0800bb90 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b090      	sub	sp, #64	; 0x40
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800bb9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb9e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800bba2:	430b      	orrs	r3, r1
 800bba4:	f040 8094 	bne.w	800bcd0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800bba8:	4b9e      	ldr	r3, [pc, #632]	; (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bbaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbac:	f003 0307 	and.w	r3, r3, #7
 800bbb0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bbb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbb4:	2b04      	cmp	r3, #4
 800bbb6:	f200 8087 	bhi.w	800bcc8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800bbba:	a201      	add	r2, pc, #4	; (adr r2, 800bbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800bbbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbc0:	0800bbd5 	.word	0x0800bbd5
 800bbc4:	0800bbfd 	.word	0x0800bbfd
 800bbc8:	0800bc25 	.word	0x0800bc25
 800bbcc:	0800bcc1 	.word	0x0800bcc1
 800bbd0:	0800bc4d 	.word	0x0800bc4d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bbd4:	4b93      	ldr	r3, [pc, #588]	; (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bbdc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bbe0:	d108      	bne.n	800bbf4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bbe2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	f001 f810 	bl	800cc0c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bbec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bbf0:	f000 bd45 	b.w	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bbf8:	f000 bd41 	b.w	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bbfc:	4b89      	ldr	r3, [pc, #548]	; (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bc04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bc08:	d108      	bne.n	800bc1c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc0a:	f107 0318 	add.w	r3, r7, #24
 800bc0e:	4618      	mov	r0, r3
 800bc10:	f000 fd54 	bl	800c6bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bc14:	69bb      	ldr	r3, [r7, #24]
 800bc16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc18:	f000 bd31 	b.w	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc20:	f000 bd2d 	b.w	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bc24:	4b7f      	ldr	r3, [pc, #508]	; (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bc2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc30:	d108      	bne.n	800bc44 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc32:	f107 030c 	add.w	r3, r7, #12
 800bc36:	4618      	mov	r0, r3
 800bc38:	f000 fe94 	bl	800c964 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc40:	f000 bd1d 	b.w	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bc44:	2300      	movs	r3, #0
 800bc46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc48:	f000 bd19 	b.w	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bc4c:	4b75      	ldr	r3, [pc, #468]	; (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bc4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bc54:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bc56:	4b73      	ldr	r3, [pc, #460]	; (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	f003 0304 	and.w	r3, r3, #4
 800bc5e:	2b04      	cmp	r3, #4
 800bc60:	d10c      	bne.n	800bc7c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800bc62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d109      	bne.n	800bc7c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bc68:	4b6e      	ldr	r3, [pc, #440]	; (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	08db      	lsrs	r3, r3, #3
 800bc6e:	f003 0303 	and.w	r3, r3, #3
 800bc72:	4a6d      	ldr	r2, [pc, #436]	; (800be28 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bc74:	fa22 f303 	lsr.w	r3, r2, r3
 800bc78:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc7a:	e01f      	b.n	800bcbc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bc7c:	4b69      	ldr	r3, [pc, #420]	; (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc88:	d106      	bne.n	800bc98 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800bc8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bc90:	d102      	bne.n	800bc98 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bc92:	4b66      	ldr	r3, [pc, #408]	; (800be2c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800bc94:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc96:	e011      	b.n	800bcbc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bc98:	4b62      	ldr	r3, [pc, #392]	; (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bca0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bca4:	d106      	bne.n	800bcb4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800bca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bca8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bcac:	d102      	bne.n	800bcb4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bcae:	4b60      	ldr	r3, [pc, #384]	; (800be30 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800bcb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bcb2:	e003      	b.n	800bcbc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bcb8:	f000 bce1 	b.w	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bcbc:	f000 bcdf 	b.w	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bcc0:	4b5c      	ldr	r3, [pc, #368]	; (800be34 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800bcc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bcc4:	f000 bcdb 	b.w	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800bcc8:	2300      	movs	r3, #0
 800bcca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bccc:	f000 bcd7 	b.w	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800bcd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bcd4:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800bcd8:	430b      	orrs	r3, r1
 800bcda:	f040 80ad 	bne.w	800be38 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800bcde:	4b51      	ldr	r3, [pc, #324]	; (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bce0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bce2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800bce6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bcee:	d056      	beq.n	800bd9e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800bcf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bcf6:	f200 8090 	bhi.w	800be1a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800bcfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcfc:	2bc0      	cmp	r3, #192	; 0xc0
 800bcfe:	f000 8088 	beq.w	800be12 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800bd02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd04:	2bc0      	cmp	r3, #192	; 0xc0
 800bd06:	f200 8088 	bhi.w	800be1a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800bd0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd0c:	2b80      	cmp	r3, #128	; 0x80
 800bd0e:	d032      	beq.n	800bd76 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800bd10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd12:	2b80      	cmp	r3, #128	; 0x80
 800bd14:	f200 8081 	bhi.w	800be1a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800bd18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d003      	beq.n	800bd26 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800bd1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd20:	2b40      	cmp	r3, #64	; 0x40
 800bd22:	d014      	beq.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800bd24:	e079      	b.n	800be1a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bd26:	4b3f      	ldr	r3, [pc, #252]	; (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bd32:	d108      	bne.n	800bd46 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bd34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bd38:	4618      	mov	r0, r3
 800bd3a:	f000 ff67 	bl	800cc0c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bd3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd42:	f000 bc9c 	b.w	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bd46:	2300      	movs	r3, #0
 800bd48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd4a:	f000 bc98 	b.w	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bd4e:	4b35      	ldr	r3, [pc, #212]	; (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bd56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bd5a:	d108      	bne.n	800bd6e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd5c:	f107 0318 	add.w	r3, r7, #24
 800bd60:	4618      	mov	r0, r3
 800bd62:	f000 fcab 	bl	800c6bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bd66:	69bb      	ldr	r3, [r7, #24]
 800bd68:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd6a:	f000 bc88 	b.w	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bd6e:	2300      	movs	r3, #0
 800bd70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd72:	f000 bc84 	b.w	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bd76:	4b2b      	ldr	r3, [pc, #172]	; (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bd7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd82:	d108      	bne.n	800bd96 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bd84:	f107 030c 	add.w	r3, r7, #12
 800bd88:	4618      	mov	r0, r3
 800bd8a:	f000 fdeb 	bl	800c964 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd92:	f000 bc74 	b.w	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bd96:	2300      	movs	r3, #0
 800bd98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd9a:	f000 bc70 	b.w	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bd9e:	4b21      	ldr	r3, [pc, #132]	; (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bda0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bda2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bda6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bda8:	4b1e      	ldr	r3, [pc, #120]	; (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	f003 0304 	and.w	r3, r3, #4
 800bdb0:	2b04      	cmp	r3, #4
 800bdb2:	d10c      	bne.n	800bdce <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800bdb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d109      	bne.n	800bdce <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bdba:	4b1a      	ldr	r3, [pc, #104]	; (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	08db      	lsrs	r3, r3, #3
 800bdc0:	f003 0303 	and.w	r3, r3, #3
 800bdc4:	4a18      	ldr	r2, [pc, #96]	; (800be28 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bdc6:	fa22 f303 	lsr.w	r3, r2, r3
 800bdca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bdcc:	e01f      	b.n	800be0e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bdce:	4b15      	ldr	r3, [pc, #84]	; (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bdda:	d106      	bne.n	800bdea <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800bddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bde2:	d102      	bne.n	800bdea <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bde4:	4b11      	ldr	r3, [pc, #68]	; (800be2c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800bde6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bde8:	e011      	b.n	800be0e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bdea:	4b0e      	ldr	r3, [pc, #56]	; (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bdf2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bdf6:	d106      	bne.n	800be06 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800bdf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bdfe:	d102      	bne.n	800be06 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800be00:	4b0b      	ldr	r3, [pc, #44]	; (800be30 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800be02:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be04:	e003      	b.n	800be0e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800be06:	2300      	movs	r3, #0
 800be08:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800be0a:	f000 bc38 	b.w	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800be0e:	f000 bc36 	b.w	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800be12:	4b08      	ldr	r3, [pc, #32]	; (800be34 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800be14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be16:	f000 bc32 	b.w	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800be1a:	2300      	movs	r3, #0
 800be1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be1e:	f000 bc2e 	b.w	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800be22:	bf00      	nop
 800be24:	58024400 	.word	0x58024400
 800be28:	03d09000 	.word	0x03d09000
 800be2c:	003d0900 	.word	0x003d0900
 800be30:	00989680 	.word	0x00989680
 800be34:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800be38:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be3c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800be40:	430b      	orrs	r3, r1
 800be42:	f040 809c 	bne.w	800bf7e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800be46:	4b9e      	ldr	r3, [pc, #632]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800be48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be4a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800be4e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800be50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be52:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800be56:	d054      	beq.n	800bf02 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800be58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be5a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800be5e:	f200 808b 	bhi.w	800bf78 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800be62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be64:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800be68:	f000 8083 	beq.w	800bf72 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800be6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be6e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800be72:	f200 8081 	bhi.w	800bf78 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800be76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800be7c:	d02f      	beq.n	800bede <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800be7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800be84:	d878      	bhi.n	800bf78 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800be86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d004      	beq.n	800be96 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800be8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800be92:	d012      	beq.n	800beba <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800be94:	e070      	b.n	800bf78 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800be96:	4b8a      	ldr	r3, [pc, #552]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bea2:	d107      	bne.n	800beb4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bea4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bea8:	4618      	mov	r0, r3
 800beaa:	f000 feaf 	bl	800cc0c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800beae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800beb2:	e3e4      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800beb4:	2300      	movs	r3, #0
 800beb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800beb8:	e3e1      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800beba:	4b81      	ldr	r3, [pc, #516]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bec2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bec6:	d107      	bne.n	800bed8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bec8:	f107 0318 	add.w	r3, r7, #24
 800becc:	4618      	mov	r0, r3
 800bece:	f000 fbf5 	bl	800c6bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bed2:	69bb      	ldr	r3, [r7, #24]
 800bed4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bed6:	e3d2      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bed8:	2300      	movs	r3, #0
 800beda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bedc:	e3cf      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bede:	4b78      	ldr	r3, [pc, #480]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bee6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800beea:	d107      	bne.n	800befc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800beec:	f107 030c 	add.w	r3, r7, #12
 800bef0:	4618      	mov	r0, r3
 800bef2:	f000 fd37 	bl	800c964 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800befa:	e3c0      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800befc:	2300      	movs	r3, #0
 800befe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf00:	e3bd      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bf02:	4b6f      	ldr	r3, [pc, #444]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bf04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf06:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bf0a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bf0c:	4b6c      	ldr	r3, [pc, #432]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	f003 0304 	and.w	r3, r3, #4
 800bf14:	2b04      	cmp	r3, #4
 800bf16:	d10c      	bne.n	800bf32 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800bf18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d109      	bne.n	800bf32 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bf1e:	4b68      	ldr	r3, [pc, #416]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	08db      	lsrs	r3, r3, #3
 800bf24:	f003 0303 	and.w	r3, r3, #3
 800bf28:	4a66      	ldr	r2, [pc, #408]	; (800c0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800bf2a:	fa22 f303 	lsr.w	r3, r2, r3
 800bf2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf30:	e01e      	b.n	800bf70 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bf32:	4b63      	ldr	r3, [pc, #396]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf3e:	d106      	bne.n	800bf4e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800bf40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bf46:	d102      	bne.n	800bf4e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bf48:	4b5f      	ldr	r3, [pc, #380]	; (800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800bf4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf4c:	e010      	b.n	800bf70 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bf4e:	4b5c      	ldr	r3, [pc, #368]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bf5a:	d106      	bne.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800bf5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf62:	d102      	bne.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bf64:	4b59      	ldr	r3, [pc, #356]	; (800c0cc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800bf66:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf68:	e002      	b.n	800bf70 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bf6e:	e386      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bf70:	e385      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bf72:	4b57      	ldr	r3, [pc, #348]	; (800c0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800bf74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf76:	e382      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800bf78:	2300      	movs	r3, #0
 800bf7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf7c:	e37f      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800bf7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf82:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800bf86:	430b      	orrs	r3, r1
 800bf88:	f040 80a7 	bne.w	800c0da <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800bf8c:	4b4c      	ldr	r3, [pc, #304]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bf8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf90:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800bf94:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bf96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bf9c:	d055      	beq.n	800c04a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800bf9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfa0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bfa4:	f200 8096 	bhi.w	800c0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800bfa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfaa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bfae:	f000 8084 	beq.w	800c0ba <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800bfb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bfb8:	f200 808c 	bhi.w	800c0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800bfbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfbe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bfc2:	d030      	beq.n	800c026 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800bfc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfc6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bfca:	f200 8083 	bhi.w	800c0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800bfce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d004      	beq.n	800bfde <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800bfd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfd6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bfda:	d012      	beq.n	800c002 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800bfdc:	e07a      	b.n	800c0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bfde:	4b38      	ldr	r3, [pc, #224]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bfe6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bfea:	d107      	bne.n	800bffc <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bfec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bff0:	4618      	mov	r0, r3
 800bff2:	f000 fe0b 	bl	800cc0c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bff8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bffa:	e340      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bffc:	2300      	movs	r3, #0
 800bffe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c000:	e33d      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c002:	4b2f      	ldr	r3, [pc, #188]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c00a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c00e:	d107      	bne.n	800c020 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c010:	f107 0318 	add.w	r3, r7, #24
 800c014:	4618      	mov	r0, r3
 800c016:	f000 fb51 	bl	800c6bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c01a:	69bb      	ldr	r3, [r7, #24]
 800c01c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c01e:	e32e      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c020:	2300      	movs	r3, #0
 800c022:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c024:	e32b      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c026:	4b26      	ldr	r3, [pc, #152]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c02e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c032:	d107      	bne.n	800c044 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c034:	f107 030c 	add.w	r3, r7, #12
 800c038:	4618      	mov	r0, r3
 800c03a:	f000 fc93 	bl	800c964 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c042:	e31c      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c044:	2300      	movs	r3, #0
 800c046:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c048:	e319      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c04a:	4b1d      	ldr	r3, [pc, #116]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c04c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c04e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c052:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c054:	4b1a      	ldr	r3, [pc, #104]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	f003 0304 	and.w	r3, r3, #4
 800c05c:	2b04      	cmp	r3, #4
 800c05e:	d10c      	bne.n	800c07a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800c060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c062:	2b00      	cmp	r3, #0
 800c064:	d109      	bne.n	800c07a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c066:	4b16      	ldr	r3, [pc, #88]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	08db      	lsrs	r3, r3, #3
 800c06c:	f003 0303 	and.w	r3, r3, #3
 800c070:	4a14      	ldr	r2, [pc, #80]	; (800c0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c072:	fa22 f303 	lsr.w	r3, r2, r3
 800c076:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c078:	e01e      	b.n	800c0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c07a:	4b11      	ldr	r3, [pc, #68]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c082:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c086:	d106      	bne.n	800c096 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800c088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c08a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c08e:	d102      	bne.n	800c096 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c090:	4b0d      	ldr	r3, [pc, #52]	; (800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c092:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c094:	e010      	b.n	800c0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c096:	4b0a      	ldr	r3, [pc, #40]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c09e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c0a2:	d106      	bne.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800c0a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c0aa:	d102      	bne.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c0ac:	4b07      	ldr	r3, [pc, #28]	; (800c0cc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c0ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c0b0:	e002      	b.n	800c0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c0b6:	e2e2      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c0b8:	e2e1      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c0ba:	4b05      	ldr	r3, [pc, #20]	; (800c0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c0bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0be:	e2de      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c0c0:	58024400 	.word	0x58024400
 800c0c4:	03d09000 	.word	0x03d09000
 800c0c8:	003d0900 	.word	0x003d0900
 800c0cc:	00989680 	.word	0x00989680
 800c0d0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0d8:	e2d1      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c0da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c0de:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800c0e2:	430b      	orrs	r3, r1
 800c0e4:	f040 809c 	bne.w	800c220 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c0e8:	4b93      	ldr	r3, [pc, #588]	; (800c338 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c0ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0ec:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c0f0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c0f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c0f8:	d054      	beq.n	800c1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800c0fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c100:	f200 808b 	bhi.w	800c21a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c106:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c10a:	f000 8083 	beq.w	800c214 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800c10e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c110:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c114:	f200 8081 	bhi.w	800c21a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c11a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c11e:	d02f      	beq.n	800c180 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800c120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c122:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c126:	d878      	bhi.n	800c21a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d004      	beq.n	800c138 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800c12e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c130:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c134:	d012      	beq.n	800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800c136:	e070      	b.n	800c21a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c138:	4b7f      	ldr	r3, [pc, #508]	; (800c338 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c140:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c144:	d107      	bne.n	800c156 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c146:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c14a:	4618      	mov	r0, r3
 800c14c:	f000 fd5e 	bl	800cc0c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c152:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c154:	e293      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c156:	2300      	movs	r3, #0
 800c158:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c15a:	e290      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c15c:	4b76      	ldr	r3, [pc, #472]	; (800c338 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c164:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c168:	d107      	bne.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c16a:	f107 0318 	add.w	r3, r7, #24
 800c16e:	4618      	mov	r0, r3
 800c170:	f000 faa4 	bl	800c6bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c174:	69bb      	ldr	r3, [r7, #24]
 800c176:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c178:	e281      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c17a:	2300      	movs	r3, #0
 800c17c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c17e:	e27e      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c180:	4b6d      	ldr	r3, [pc, #436]	; (800c338 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c188:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c18c:	d107      	bne.n	800c19e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c18e:	f107 030c 	add.w	r3, r7, #12
 800c192:	4618      	mov	r0, r3
 800c194:	f000 fbe6 	bl	800c964 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c19c:	e26f      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c19e:	2300      	movs	r3, #0
 800c1a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1a2:	e26c      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c1a4:	4b64      	ldr	r3, [pc, #400]	; (800c338 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c1a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c1ac:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c1ae:	4b62      	ldr	r3, [pc, #392]	; (800c338 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	f003 0304 	and.w	r3, r3, #4
 800c1b6:	2b04      	cmp	r3, #4
 800c1b8:	d10c      	bne.n	800c1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800c1ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d109      	bne.n	800c1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c1c0:	4b5d      	ldr	r3, [pc, #372]	; (800c338 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	08db      	lsrs	r3, r3, #3
 800c1c6:	f003 0303 	and.w	r3, r3, #3
 800c1ca:	4a5c      	ldr	r2, [pc, #368]	; (800c33c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c1cc:	fa22 f303 	lsr.w	r3, r2, r3
 800c1d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1d2:	e01e      	b.n	800c212 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c1d4:	4b58      	ldr	r3, [pc, #352]	; (800c338 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c1e0:	d106      	bne.n	800c1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800c1e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c1e8:	d102      	bne.n	800c1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c1ea:	4b55      	ldr	r3, [pc, #340]	; (800c340 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c1ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1ee:	e010      	b.n	800c212 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c1f0:	4b51      	ldr	r3, [pc, #324]	; (800c338 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c1fc:	d106      	bne.n	800c20c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800c1fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c200:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c204:	d102      	bne.n	800c20c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c206:	4b4f      	ldr	r3, [pc, #316]	; (800c344 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c208:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c20a:	e002      	b.n	800c212 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c20c:	2300      	movs	r3, #0
 800c20e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c210:	e235      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c212:	e234      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c214:	4b4c      	ldr	r3, [pc, #304]	; (800c348 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800c216:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c218:	e231      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c21a:	2300      	movs	r3, #0
 800c21c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c21e:	e22e      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c220:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c224:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800c228:	430b      	orrs	r3, r1
 800c22a:	f040 808f 	bne.w	800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c22e:	4b42      	ldr	r3, [pc, #264]	; (800c338 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c230:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c232:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c236:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800c238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c23a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c23e:	d06b      	beq.n	800c318 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800c240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c242:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c246:	d874      	bhi.n	800c332 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c24a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c24e:	d056      	beq.n	800c2fe <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800c250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c252:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c256:	d86c      	bhi.n	800c332 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c25a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c25e:	d03b      	beq.n	800c2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800c260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c262:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c266:	d864      	bhi.n	800c332 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c26a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c26e:	d021      	beq.n	800c2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800c270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c272:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c276:	d85c      	bhi.n	800c332 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d004      	beq.n	800c288 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800c27e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c284:	d004      	beq.n	800c290 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800c286:	e054      	b.n	800c332 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c288:	f7fe fa30 	bl	800a6ec <HAL_RCC_GetPCLK1Freq>
 800c28c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c28e:	e1f6      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c290:	4b29      	ldr	r3, [pc, #164]	; (800c338 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c298:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c29c:	d107      	bne.n	800c2ae <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c29e:	f107 0318 	add.w	r3, r7, #24
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f000 fa0a 	bl	800c6bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c2a8:	69fb      	ldr	r3, [r7, #28]
 800c2aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2ac:	e1e7      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2b2:	e1e4      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c2b4:	4b20      	ldr	r3, [pc, #128]	; (800c338 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c2bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c2c0:	d107      	bne.n	800c2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c2c2:	f107 030c 	add.w	r3, r7, #12
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	f000 fb4c 	bl	800c964 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c2cc:	693b      	ldr	r3, [r7, #16]
 800c2ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2d0:	e1d5      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2d6:	e1d2      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c2d8:	4b17      	ldr	r3, [pc, #92]	; (800c338 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	f003 0304 	and.w	r3, r3, #4
 800c2e0:	2b04      	cmp	r3, #4
 800c2e2:	d109      	bne.n	800c2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c2e4:	4b14      	ldr	r3, [pc, #80]	; (800c338 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	08db      	lsrs	r3, r3, #3
 800c2ea:	f003 0303 	and.w	r3, r3, #3
 800c2ee:	4a13      	ldr	r2, [pc, #76]	; (800c33c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c2f0:	fa22 f303 	lsr.w	r3, r2, r3
 800c2f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2f6:	e1c2      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2fc:	e1bf      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c2fe:	4b0e      	ldr	r3, [pc, #56]	; (800c338 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c306:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c30a:	d102      	bne.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800c30c:	4b0c      	ldr	r3, [pc, #48]	; (800c340 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c30e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c310:	e1b5      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c312:	2300      	movs	r3, #0
 800c314:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c316:	e1b2      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c318:	4b07      	ldr	r3, [pc, #28]	; (800c338 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c320:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c324:	d102      	bne.n	800c32c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800c326:	4b07      	ldr	r3, [pc, #28]	; (800c344 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c328:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c32a:	e1a8      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c32c:	2300      	movs	r3, #0
 800c32e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c330:	e1a5      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c332:	2300      	movs	r3, #0
 800c334:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c336:	e1a2      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c338:	58024400 	.word	0x58024400
 800c33c:	03d09000 	.word	0x03d09000
 800c340:	003d0900 	.word	0x003d0900
 800c344:	00989680 	.word	0x00989680
 800c348:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c34c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c350:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800c354:	430b      	orrs	r3, r1
 800c356:	d173      	bne.n	800c440 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c358:	4b9c      	ldr	r3, [pc, #624]	; (800c5cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c35a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c35c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c360:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c364:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c368:	d02f      	beq.n	800c3ca <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800c36a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c36c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c370:	d863      	bhi.n	800c43a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800c372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c374:	2b00      	cmp	r3, #0
 800c376:	d004      	beq.n	800c382 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800c378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c37a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c37e:	d012      	beq.n	800c3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800c380:	e05b      	b.n	800c43a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c382:	4b92      	ldr	r3, [pc, #584]	; (800c5cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c38a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c38e:	d107      	bne.n	800c3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c390:	f107 0318 	add.w	r3, r7, #24
 800c394:	4618      	mov	r0, r3
 800c396:	f000 f991 	bl	800c6bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c39a:	69bb      	ldr	r3, [r7, #24]
 800c39c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c39e:	e16e      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3a4:	e16b      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c3a6:	4b89      	ldr	r3, [pc, #548]	; (800c5cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c3ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c3b2:	d107      	bne.n	800c3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c3b4:	f107 030c 	add.w	r3, r7, #12
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	f000 fad3 	bl	800c964 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c3be:	697b      	ldr	r3, [r7, #20]
 800c3c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3c2:	e15c      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3c8:	e159      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c3ca:	4b80      	ldr	r3, [pc, #512]	; (800c5cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c3cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c3ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c3d2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c3d4:	4b7d      	ldr	r3, [pc, #500]	; (800c5cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	f003 0304 	and.w	r3, r3, #4
 800c3dc:	2b04      	cmp	r3, #4
 800c3de:	d10c      	bne.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800c3e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d109      	bne.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c3e6:	4b79      	ldr	r3, [pc, #484]	; (800c5cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	08db      	lsrs	r3, r3, #3
 800c3ec:	f003 0303 	and.w	r3, r3, #3
 800c3f0:	4a77      	ldr	r2, [pc, #476]	; (800c5d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800c3f2:	fa22 f303 	lsr.w	r3, r2, r3
 800c3f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c3f8:	e01e      	b.n	800c438 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c3fa:	4b74      	ldr	r3, [pc, #464]	; (800c5cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c402:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c406:	d106      	bne.n	800c416 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800c408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c40a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c40e:	d102      	bne.n	800c416 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c410:	4b70      	ldr	r3, [pc, #448]	; (800c5d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800c412:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c414:	e010      	b.n	800c438 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c416:	4b6d      	ldr	r3, [pc, #436]	; (800c5cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c41e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c422:	d106      	bne.n	800c432 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800c424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c426:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c42a:	d102      	bne.n	800c432 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c42c:	4b6a      	ldr	r3, [pc, #424]	; (800c5d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800c42e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c430:	e002      	b.n	800c438 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c432:	2300      	movs	r3, #0
 800c434:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c436:	e122      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c438:	e121      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c43a:	2300      	movs	r3, #0
 800c43c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c43e:	e11e      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c440:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c444:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800c448:	430b      	orrs	r3, r1
 800c44a:	d133      	bne.n	800c4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c44c:	4b5f      	ldr	r3, [pc, #380]	; (800c5cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c44e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c450:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c454:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d004      	beq.n	800c466 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800c45c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c45e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c462:	d012      	beq.n	800c48a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800c464:	e023      	b.n	800c4ae <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c466:	4b59      	ldr	r3, [pc, #356]	; (800c5cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c46e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c472:	d107      	bne.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c474:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c478:	4618      	mov	r0, r3
 800c47a:	f000 fbc7 	bl	800cc0c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c47e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c480:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c482:	e0fc      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c484:	2300      	movs	r3, #0
 800c486:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c488:	e0f9      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c48a:	4b50      	ldr	r3, [pc, #320]	; (800c5cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c492:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c496:	d107      	bne.n	800c4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c498:	f107 0318 	add.w	r3, r7, #24
 800c49c:	4618      	mov	r0, r3
 800c49e:	f000 f90d 	bl	800c6bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c4a2:	6a3b      	ldr	r3, [r7, #32]
 800c4a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4a6:	e0ea      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4ac:	e0e7      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4b2:	e0e4      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c4b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4b8:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800c4bc:	430b      	orrs	r3, r1
 800c4be:	f040 808d 	bne.w	800c5dc <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c4c2:	4b42      	ldr	r3, [pc, #264]	; (800c5cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c4c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4c6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c4ca:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c4cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c4d2:	d06b      	beq.n	800c5ac <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800c4d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c4da:	d874      	bhi.n	800c5c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c4dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c4e2:	d056      	beq.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800c4e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c4ea:	d86c      	bhi.n	800c5c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c4ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c4f2:	d03b      	beq.n	800c56c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800c4f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c4fa:	d864      	bhi.n	800c5c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c4fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c502:	d021      	beq.n	800c548 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800c504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c506:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c50a:	d85c      	bhi.n	800c5c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c50c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d004      	beq.n	800c51c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800c512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c514:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c518:	d004      	beq.n	800c524 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800c51a:	e054      	b.n	800c5c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c51c:	f000 f8b8 	bl	800c690 <HAL_RCCEx_GetD3PCLK1Freq>
 800c520:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c522:	e0ac      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c524:	4b29      	ldr	r3, [pc, #164]	; (800c5cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c52c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c530:	d107      	bne.n	800c542 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c532:	f107 0318 	add.w	r3, r7, #24
 800c536:	4618      	mov	r0, r3
 800c538:	f000 f8c0 	bl	800c6bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c53c:	69fb      	ldr	r3, [r7, #28]
 800c53e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c540:	e09d      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c542:	2300      	movs	r3, #0
 800c544:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c546:	e09a      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c548:	4b20      	ldr	r3, [pc, #128]	; (800c5cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c550:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c554:	d107      	bne.n	800c566 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c556:	f107 030c 	add.w	r3, r7, #12
 800c55a:	4618      	mov	r0, r3
 800c55c:	f000 fa02 	bl	800c964 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c560:	693b      	ldr	r3, [r7, #16]
 800c562:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c564:	e08b      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c566:	2300      	movs	r3, #0
 800c568:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c56a:	e088      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c56c:	4b17      	ldr	r3, [pc, #92]	; (800c5cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	f003 0304 	and.w	r3, r3, #4
 800c574:	2b04      	cmp	r3, #4
 800c576:	d109      	bne.n	800c58c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c578:	4b14      	ldr	r3, [pc, #80]	; (800c5cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	08db      	lsrs	r3, r3, #3
 800c57e:	f003 0303 	and.w	r3, r3, #3
 800c582:	4a13      	ldr	r2, [pc, #76]	; (800c5d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800c584:	fa22 f303 	lsr.w	r3, r2, r3
 800c588:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c58a:	e078      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c58c:	2300      	movs	r3, #0
 800c58e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c590:	e075      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c592:	4b0e      	ldr	r3, [pc, #56]	; (800c5cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c59a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c59e:	d102      	bne.n	800c5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800c5a0:	4b0c      	ldr	r3, [pc, #48]	; (800c5d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800c5a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5a4:	e06b      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5aa:	e068      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c5ac:	4b07      	ldr	r3, [pc, #28]	; (800c5cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c5b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c5b8:	d102      	bne.n	800c5c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800c5ba:	4b07      	ldr	r3, [pc, #28]	; (800c5d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800c5bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5be:	e05e      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5c4:	e05b      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5ca:	e058      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c5cc:	58024400 	.word	0x58024400
 800c5d0:	03d09000 	.word	0x03d09000
 800c5d4:	003d0900 	.word	0x003d0900
 800c5d8:	00989680 	.word	0x00989680
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c5dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c5e0:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800c5e4:	430b      	orrs	r3, r1
 800c5e6:	d148      	bne.n	800c67a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c5e8:	4b27      	ldr	r3, [pc, #156]	; (800c688 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c5ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c5f0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c5f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c5f8:	d02a      	beq.n	800c650 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800c5fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c600:	d838      	bhi.n	800c674 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800c602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c604:	2b00      	cmp	r3, #0
 800c606:	d004      	beq.n	800c612 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800c608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c60a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c60e:	d00d      	beq.n	800c62c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800c610:	e030      	b.n	800c674 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c612:	4b1d      	ldr	r3, [pc, #116]	; (800c688 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c61a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c61e:	d102      	bne.n	800c626 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800c620:	4b1a      	ldr	r3, [pc, #104]	; (800c68c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800c622:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c624:	e02b      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c626:	2300      	movs	r3, #0
 800c628:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c62a:	e028      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c62c:	4b16      	ldr	r3, [pc, #88]	; (800c688 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c634:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c638:	d107      	bne.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c63a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c63e:	4618      	mov	r0, r3
 800c640:	f000 fae4 	bl	800cc0c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c646:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c648:	e019      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c64a:	2300      	movs	r3, #0
 800c64c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c64e:	e016      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c650:	4b0d      	ldr	r3, [pc, #52]	; (800c688 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c658:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c65c:	d107      	bne.n	800c66e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c65e:	f107 0318 	add.w	r3, r7, #24
 800c662:	4618      	mov	r0, r3
 800c664:	f000 f82a 	bl	800c6bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c668:	69fb      	ldr	r3, [r7, #28]
 800c66a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c66c:	e007      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c66e:	2300      	movs	r3, #0
 800c670:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c672:	e004      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c674:	2300      	movs	r3, #0
 800c676:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c678:	e001      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800c67a:	2300      	movs	r3, #0
 800c67c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800c67e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c680:	4618      	mov	r0, r3
 800c682:	3740      	adds	r7, #64	; 0x40
 800c684:	46bd      	mov	sp, r7
 800c686:	bd80      	pop	{r7, pc}
 800c688:	58024400 	.word	0x58024400
 800c68c:	00989680 	.word	0x00989680

0800c690 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c690:	b580      	push	{r7, lr}
 800c692:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c694:	f7fd fffa 	bl	800a68c <HAL_RCC_GetHCLKFreq>
 800c698:	4602      	mov	r2, r0
 800c69a:	4b06      	ldr	r3, [pc, #24]	; (800c6b4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c69c:	6a1b      	ldr	r3, [r3, #32]
 800c69e:	091b      	lsrs	r3, r3, #4
 800c6a0:	f003 0307 	and.w	r3, r3, #7
 800c6a4:	4904      	ldr	r1, [pc, #16]	; (800c6b8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c6a6:	5ccb      	ldrb	r3, [r1, r3]
 800c6a8:	f003 031f 	and.w	r3, r3, #31
 800c6ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	bd80      	pop	{r7, pc}
 800c6b4:	58024400 	.word	0x58024400
 800c6b8:	0801ee68 	.word	0x0801ee68

0800c6bc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c6bc:	b480      	push	{r7}
 800c6be:	b089      	sub	sp, #36	; 0x24
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c6c4:	4ba1      	ldr	r3, [pc, #644]	; (800c94c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c6c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6c8:	f003 0303 	and.w	r3, r3, #3
 800c6cc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c6ce:	4b9f      	ldr	r3, [pc, #636]	; (800c94c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c6d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6d2:	0b1b      	lsrs	r3, r3, #12
 800c6d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c6d8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c6da:	4b9c      	ldr	r3, [pc, #624]	; (800c94c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c6dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6de:	091b      	lsrs	r3, r3, #4
 800c6e0:	f003 0301 	and.w	r3, r3, #1
 800c6e4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c6e6:	4b99      	ldr	r3, [pc, #612]	; (800c94c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c6e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6ea:	08db      	lsrs	r3, r3, #3
 800c6ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c6f0:	693a      	ldr	r2, [r7, #16]
 800c6f2:	fb02 f303 	mul.w	r3, r2, r3
 800c6f6:	ee07 3a90 	vmov	s15, r3
 800c6fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6fe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c702:	697b      	ldr	r3, [r7, #20]
 800c704:	2b00      	cmp	r3, #0
 800c706:	f000 8111 	beq.w	800c92c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c70a:	69bb      	ldr	r3, [r7, #24]
 800c70c:	2b02      	cmp	r3, #2
 800c70e:	f000 8083 	beq.w	800c818 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c712:	69bb      	ldr	r3, [r7, #24]
 800c714:	2b02      	cmp	r3, #2
 800c716:	f200 80a1 	bhi.w	800c85c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c71a:	69bb      	ldr	r3, [r7, #24]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d003      	beq.n	800c728 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c720:	69bb      	ldr	r3, [r7, #24]
 800c722:	2b01      	cmp	r3, #1
 800c724:	d056      	beq.n	800c7d4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c726:	e099      	b.n	800c85c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c728:	4b88      	ldr	r3, [pc, #544]	; (800c94c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	f003 0320 	and.w	r3, r3, #32
 800c730:	2b00      	cmp	r3, #0
 800c732:	d02d      	beq.n	800c790 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c734:	4b85      	ldr	r3, [pc, #532]	; (800c94c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	08db      	lsrs	r3, r3, #3
 800c73a:	f003 0303 	and.w	r3, r3, #3
 800c73e:	4a84      	ldr	r2, [pc, #528]	; (800c950 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c740:	fa22 f303 	lsr.w	r3, r2, r3
 800c744:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c746:	68bb      	ldr	r3, [r7, #8]
 800c748:	ee07 3a90 	vmov	s15, r3
 800c74c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c750:	697b      	ldr	r3, [r7, #20]
 800c752:	ee07 3a90 	vmov	s15, r3
 800c756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c75a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c75e:	4b7b      	ldr	r3, [pc, #492]	; (800c94c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c766:	ee07 3a90 	vmov	s15, r3
 800c76a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c76e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c772:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c954 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c776:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c77a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c77e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c782:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c78a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c78e:	e087      	b.n	800c8a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c790:	697b      	ldr	r3, [r7, #20]
 800c792:	ee07 3a90 	vmov	s15, r3
 800c796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c79a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c958 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c79e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7a2:	4b6a      	ldr	r3, [pc, #424]	; (800c94c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c7a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7aa:	ee07 3a90 	vmov	s15, r3
 800c7ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7b2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c7b6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c954 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c7ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c7be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c7c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c7c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c7ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c7d2:	e065      	b.n	800c8a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c7d4:	697b      	ldr	r3, [r7, #20]
 800c7d6:	ee07 3a90 	vmov	s15, r3
 800c7da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7de:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c95c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c7e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7e6:	4b59      	ldr	r3, [pc, #356]	; (800c94c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c7e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7ee:	ee07 3a90 	vmov	s15, r3
 800c7f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7f6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c7fa:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c954 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c7fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c802:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c806:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c80a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c80e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c812:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c816:	e043      	b.n	800c8a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c818:	697b      	ldr	r3, [r7, #20]
 800c81a:	ee07 3a90 	vmov	s15, r3
 800c81e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c822:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c960 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c826:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c82a:	4b48      	ldr	r3, [pc, #288]	; (800c94c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c82c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c82e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c832:	ee07 3a90 	vmov	s15, r3
 800c836:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c83a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c83e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c954 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c842:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c846:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c84a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c84e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c852:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c856:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c85a:	e021      	b.n	800c8a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c85c:	697b      	ldr	r3, [r7, #20]
 800c85e:	ee07 3a90 	vmov	s15, r3
 800c862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c866:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c95c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c86a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c86e:	4b37      	ldr	r3, [pc, #220]	; (800c94c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c876:	ee07 3a90 	vmov	s15, r3
 800c87a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c87e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c882:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c954 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c886:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c88a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c88e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c892:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c89a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c89e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c8a0:	4b2a      	ldr	r3, [pc, #168]	; (800c94c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c8a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8a4:	0a5b      	lsrs	r3, r3, #9
 800c8a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8aa:	ee07 3a90 	vmov	s15, r3
 800c8ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c8b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c8ba:	edd7 6a07 	vldr	s13, [r7, #28]
 800c8be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c8c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c8c6:	ee17 2a90 	vmov	r2, s15
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800c8ce:	4b1f      	ldr	r3, [pc, #124]	; (800c94c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c8d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8d2:	0c1b      	lsrs	r3, r3, #16
 800c8d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8d8:	ee07 3a90 	vmov	s15, r3
 800c8dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c8e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c8e8:	edd7 6a07 	vldr	s13, [r7, #28]
 800c8ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c8f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c8f4:	ee17 2a90 	vmov	r2, s15
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800c8fc:	4b13      	ldr	r3, [pc, #76]	; (800c94c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c8fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c900:	0e1b      	lsrs	r3, r3, #24
 800c902:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c906:	ee07 3a90 	vmov	s15, r3
 800c90a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c90e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c912:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c916:	edd7 6a07 	vldr	s13, [r7, #28]
 800c91a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c91e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c922:	ee17 2a90 	vmov	r2, s15
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c92a:	e008      	b.n	800c93e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	2200      	movs	r2, #0
 800c930:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	2200      	movs	r2, #0
 800c936:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	2200      	movs	r2, #0
 800c93c:	609a      	str	r2, [r3, #8]
}
 800c93e:	bf00      	nop
 800c940:	3724      	adds	r7, #36	; 0x24
 800c942:	46bd      	mov	sp, r7
 800c944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c948:	4770      	bx	lr
 800c94a:	bf00      	nop
 800c94c:	58024400 	.word	0x58024400
 800c950:	03d09000 	.word	0x03d09000
 800c954:	46000000 	.word	0x46000000
 800c958:	4c742400 	.word	0x4c742400
 800c95c:	4a742400 	.word	0x4a742400
 800c960:	4b189680 	.word	0x4b189680

0800c964 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c964:	b480      	push	{r7}
 800c966:	b089      	sub	sp, #36	; 0x24
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c96c:	4ba1      	ldr	r3, [pc, #644]	; (800cbf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c96e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c970:	f003 0303 	and.w	r3, r3, #3
 800c974:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c976:	4b9f      	ldr	r3, [pc, #636]	; (800cbf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c97a:	0d1b      	lsrs	r3, r3, #20
 800c97c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c980:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c982:	4b9c      	ldr	r3, [pc, #624]	; (800cbf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c986:	0a1b      	lsrs	r3, r3, #8
 800c988:	f003 0301 	and.w	r3, r3, #1
 800c98c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c98e:	4b99      	ldr	r3, [pc, #612]	; (800cbf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c992:	08db      	lsrs	r3, r3, #3
 800c994:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c998:	693a      	ldr	r2, [r7, #16]
 800c99a:	fb02 f303 	mul.w	r3, r2, r3
 800c99e:	ee07 3a90 	vmov	s15, r3
 800c9a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c9aa:	697b      	ldr	r3, [r7, #20]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	f000 8111 	beq.w	800cbd4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c9b2:	69bb      	ldr	r3, [r7, #24]
 800c9b4:	2b02      	cmp	r3, #2
 800c9b6:	f000 8083 	beq.w	800cac0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c9ba:	69bb      	ldr	r3, [r7, #24]
 800c9bc:	2b02      	cmp	r3, #2
 800c9be:	f200 80a1 	bhi.w	800cb04 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c9c2:	69bb      	ldr	r3, [r7, #24]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d003      	beq.n	800c9d0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c9c8:	69bb      	ldr	r3, [r7, #24]
 800c9ca:	2b01      	cmp	r3, #1
 800c9cc:	d056      	beq.n	800ca7c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c9ce:	e099      	b.n	800cb04 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c9d0:	4b88      	ldr	r3, [pc, #544]	; (800cbf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	f003 0320 	and.w	r3, r3, #32
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d02d      	beq.n	800ca38 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c9dc:	4b85      	ldr	r3, [pc, #532]	; (800cbf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	08db      	lsrs	r3, r3, #3
 800c9e2:	f003 0303 	and.w	r3, r3, #3
 800c9e6:	4a84      	ldr	r2, [pc, #528]	; (800cbf8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c9e8:	fa22 f303 	lsr.w	r3, r2, r3
 800c9ec:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c9ee:	68bb      	ldr	r3, [r7, #8]
 800c9f0:	ee07 3a90 	vmov	s15, r3
 800c9f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9f8:	697b      	ldr	r3, [r7, #20]
 800c9fa:	ee07 3a90 	vmov	s15, r3
 800c9fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca06:	4b7b      	ldr	r3, [pc, #492]	; (800cbf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca0e:	ee07 3a90 	vmov	s15, r3
 800ca12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca16:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca1a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cbfc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ca1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca32:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ca36:	e087      	b.n	800cb48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ca38:	697b      	ldr	r3, [r7, #20]
 800ca3a:	ee07 3a90 	vmov	s15, r3
 800ca3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca42:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cc00 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ca46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca4a:	4b6a      	ldr	r3, [pc, #424]	; (800cbf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca52:	ee07 3a90 	vmov	s15, r3
 800ca56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca5a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca5e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cbfc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ca62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ca7a:	e065      	b.n	800cb48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ca7c:	697b      	ldr	r3, [r7, #20]
 800ca7e:	ee07 3a90 	vmov	s15, r3
 800ca82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca86:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cc04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ca8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca8e:	4b59      	ldr	r3, [pc, #356]	; (800cbf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca96:	ee07 3a90 	vmov	s15, r3
 800ca9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca9e:	ed97 6a03 	vldr	s12, [r7, #12]
 800caa2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cbfc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800caa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800caaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800caae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cab2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800caba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cabe:	e043      	b.n	800cb48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cac0:	697b      	ldr	r3, [r7, #20]
 800cac2:	ee07 3a90 	vmov	s15, r3
 800cac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800caca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cc08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800cace:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cad2:	4b48      	ldr	r3, [pc, #288]	; (800cbf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cada:	ee07 3a90 	vmov	s15, r3
 800cade:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cae2:	ed97 6a03 	vldr	s12, [r7, #12]
 800cae6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cbfc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800caea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800caee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800caf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800caf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cafa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cafe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb02:	e021      	b.n	800cb48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cb04:	697b      	ldr	r3, [r7, #20]
 800cb06:	ee07 3a90 	vmov	s15, r3
 800cb0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb0e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cc04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cb12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb16:	4b37      	ldr	r3, [pc, #220]	; (800cbf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb1e:	ee07 3a90 	vmov	s15, r3
 800cb22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb26:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb2a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cbfc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cb2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb46:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800cb48:	4b2a      	ldr	r3, [pc, #168]	; (800cbf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb4c:	0a5b      	lsrs	r3, r3, #9
 800cb4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb52:	ee07 3a90 	vmov	s15, r3
 800cb56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cb5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cb62:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb6e:	ee17 2a90 	vmov	r2, s15
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800cb76:	4b1f      	ldr	r3, [pc, #124]	; (800cbf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb7a:	0c1b      	lsrs	r3, r3, #16
 800cb7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb80:	ee07 3a90 	vmov	s15, r3
 800cb84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cb8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cb90:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb9c:	ee17 2a90 	vmov	r2, s15
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800cba4:	4b13      	ldr	r3, [pc, #76]	; (800cbf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cba8:	0e1b      	lsrs	r3, r3, #24
 800cbaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbae:	ee07 3a90 	vmov	s15, r3
 800cbb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cbba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cbbe:	edd7 6a07 	vldr	s13, [r7, #28]
 800cbc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cbc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cbca:	ee17 2a90 	vmov	r2, s15
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800cbd2:	e008      	b.n	800cbe6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	2200      	movs	r2, #0
 800cbde:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	609a      	str	r2, [r3, #8]
}
 800cbe6:	bf00      	nop
 800cbe8:	3724      	adds	r7, #36	; 0x24
 800cbea:	46bd      	mov	sp, r7
 800cbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf0:	4770      	bx	lr
 800cbf2:	bf00      	nop
 800cbf4:	58024400 	.word	0x58024400
 800cbf8:	03d09000 	.word	0x03d09000
 800cbfc:	46000000 	.word	0x46000000
 800cc00:	4c742400 	.word	0x4c742400
 800cc04:	4a742400 	.word	0x4a742400
 800cc08:	4b189680 	.word	0x4b189680

0800cc0c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800cc0c:	b480      	push	{r7}
 800cc0e:	b089      	sub	sp, #36	; 0x24
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cc14:	4ba0      	ldr	r3, [pc, #640]	; (800ce98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc18:	f003 0303 	and.w	r3, r3, #3
 800cc1c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800cc1e:	4b9e      	ldr	r3, [pc, #632]	; (800ce98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc22:	091b      	lsrs	r3, r3, #4
 800cc24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cc28:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800cc2a:	4b9b      	ldr	r3, [pc, #620]	; (800ce98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc2e:	f003 0301 	and.w	r3, r3, #1
 800cc32:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800cc34:	4b98      	ldr	r3, [pc, #608]	; (800ce98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc38:	08db      	lsrs	r3, r3, #3
 800cc3a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cc3e:	693a      	ldr	r2, [r7, #16]
 800cc40:	fb02 f303 	mul.w	r3, r2, r3
 800cc44:	ee07 3a90 	vmov	s15, r3
 800cc48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc4c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800cc50:	697b      	ldr	r3, [r7, #20]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	f000 8111 	beq.w	800ce7a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800cc58:	69bb      	ldr	r3, [r7, #24]
 800cc5a:	2b02      	cmp	r3, #2
 800cc5c:	f000 8083 	beq.w	800cd66 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800cc60:	69bb      	ldr	r3, [r7, #24]
 800cc62:	2b02      	cmp	r3, #2
 800cc64:	f200 80a1 	bhi.w	800cdaa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800cc68:	69bb      	ldr	r3, [r7, #24]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d003      	beq.n	800cc76 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800cc6e:	69bb      	ldr	r3, [r7, #24]
 800cc70:	2b01      	cmp	r3, #1
 800cc72:	d056      	beq.n	800cd22 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800cc74:	e099      	b.n	800cdaa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cc76:	4b88      	ldr	r3, [pc, #544]	; (800ce98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	f003 0320 	and.w	r3, r3, #32
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d02d      	beq.n	800ccde <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cc82:	4b85      	ldr	r3, [pc, #532]	; (800ce98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	08db      	lsrs	r3, r3, #3
 800cc88:	f003 0303 	and.w	r3, r3, #3
 800cc8c:	4a83      	ldr	r2, [pc, #524]	; (800ce9c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800cc8e:	fa22 f303 	lsr.w	r3, r2, r3
 800cc92:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cc94:	68bb      	ldr	r3, [r7, #8]
 800cc96:	ee07 3a90 	vmov	s15, r3
 800cc9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc9e:	697b      	ldr	r3, [r7, #20]
 800cca0:	ee07 3a90 	vmov	s15, r3
 800cca4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cca8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ccac:	4b7a      	ldr	r3, [pc, #488]	; (800ce98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ccae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccb4:	ee07 3a90 	vmov	s15, r3
 800ccb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ccbc:	ed97 6a03 	vldr	s12, [r7, #12]
 800ccc0:	eddf 5a77 	vldr	s11, [pc, #476]	; 800cea0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ccc4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ccc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cccc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ccd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ccd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ccd8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ccdc:	e087      	b.n	800cdee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ccde:	697b      	ldr	r3, [r7, #20]
 800cce0:	ee07 3a90 	vmov	s15, r3
 800cce4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cce8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800cea4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ccec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ccf0:	4b69      	ldr	r3, [pc, #420]	; (800ce98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ccf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccf8:	ee07 3a90 	vmov	s15, r3
 800ccfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd00:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd04:	eddf 5a66 	vldr	s11, [pc, #408]	; 800cea0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cd08:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd18:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd1c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd20:	e065      	b.n	800cdee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cd22:	697b      	ldr	r3, [r7, #20]
 800cd24:	ee07 3a90 	vmov	s15, r3
 800cd28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd2c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800cea8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800cd30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd34:	4b58      	ldr	r3, [pc, #352]	; (800ce98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cd36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd3c:	ee07 3a90 	vmov	s15, r3
 800cd40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd44:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd48:	eddf 5a55 	vldr	s11, [pc, #340]	; 800cea0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cd4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd60:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd64:	e043      	b.n	800cdee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cd66:	697b      	ldr	r3, [r7, #20]
 800cd68:	ee07 3a90 	vmov	s15, r3
 800cd6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd70:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800ceac <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800cd74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd78:	4b47      	ldr	r3, [pc, #284]	; (800ce98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cd7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd80:	ee07 3a90 	vmov	s15, r3
 800cd84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd88:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd8c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800cea0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cd90:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cda0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cda4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cda8:	e021      	b.n	800cdee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cdaa:	697b      	ldr	r3, [r7, #20]
 800cdac:	ee07 3a90 	vmov	s15, r3
 800cdb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdb4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800cea4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cdb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cdbc:	4b36      	ldr	r3, [pc, #216]	; (800ce98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cdbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdc4:	ee07 3a90 	vmov	s15, r3
 800cdc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cdcc:	ed97 6a03 	vldr	s12, [r7, #12]
 800cdd0:	eddf 5a33 	vldr	s11, [pc, #204]	; 800cea0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cdd4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cdd8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cddc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cde0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cde4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cde8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cdec:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800cdee:	4b2a      	ldr	r3, [pc, #168]	; (800ce98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cdf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdf2:	0a5b      	lsrs	r3, r3, #9
 800cdf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cdf8:	ee07 3a90 	vmov	s15, r3
 800cdfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ce04:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce08:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce14:	ee17 2a90 	vmov	r2, s15
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800ce1c:	4b1e      	ldr	r3, [pc, #120]	; (800ce98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ce1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce20:	0c1b      	lsrs	r3, r3, #16
 800ce22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce26:	ee07 3a90 	vmov	s15, r3
 800ce2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ce32:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce36:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce42:	ee17 2a90 	vmov	r2, s15
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800ce4a:	4b13      	ldr	r3, [pc, #76]	; (800ce98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ce4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce4e:	0e1b      	lsrs	r3, r3, #24
 800ce50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce54:	ee07 3a90 	vmov	s15, r3
 800ce58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ce60:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce64:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce70:	ee17 2a90 	vmov	r2, s15
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800ce78:	e008      	b.n	800ce8c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	2200      	movs	r2, #0
 800ce84:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	2200      	movs	r2, #0
 800ce8a:	609a      	str	r2, [r3, #8]
}
 800ce8c:	bf00      	nop
 800ce8e:	3724      	adds	r7, #36	; 0x24
 800ce90:	46bd      	mov	sp, r7
 800ce92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce96:	4770      	bx	lr
 800ce98:	58024400 	.word	0x58024400
 800ce9c:	03d09000 	.word	0x03d09000
 800cea0:	46000000 	.word	0x46000000
 800cea4:	4c742400 	.word	0x4c742400
 800cea8:	4a742400 	.word	0x4a742400
 800ceac:	4b189680 	.word	0x4b189680

0800ceb0 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b084      	sub	sp, #16
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 800ceb8:	4b26      	ldr	r3, [pc, #152]	; (800cf54 <HAL_RCCEx_CRSConfig+0xa4>)
 800ceba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cebe:	4a25      	ldr	r2, [pc, #148]	; (800cf54 <HAL_RCCEx_CRSConfig+0xa4>)
 800cec0:	f043 0302 	orr.w	r3, r3, #2
 800cec4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
 800cec8:	4b22      	ldr	r3, [pc, #136]	; (800cf54 <HAL_RCCEx_CRSConfig+0xa4>)
 800ceca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cece:	4a21      	ldr	r2, [pc, #132]	; (800cf54 <HAL_RCCEx_CRSConfig+0xa4>)
 800ced0:	f023 0302 	bic.w	r3, r3, #2
 800ced4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
 800ced8:	f7f6 fe12 	bl	8003b00 <HAL_GetREVID>
 800cedc:	4603      	mov	r3, r0
 800cede:	f241 0203 	movw	r2, #4099	; 0x1003
 800cee2:	4293      	cmp	r3, r2
 800cee4:	d80b      	bhi.n	800cefe <HAL_RCCEx_CRSConfig+0x4e>
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	685b      	ldr	r3, [r3, #4]
 800ceea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ceee:	d106      	bne.n	800cefe <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681a      	ldr	r2, [r3, #0]
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	689b      	ldr	r3, [r3, #8]
 800cef8:	4313      	orrs	r3, r2
 800cefa:	60fb      	str	r3, [r7, #12]
 800cefc:	e008      	b.n	800cf10 <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681a      	ldr	r2, [r3, #0]
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	685b      	ldr	r3, [r3, #4]
 800cf06:	431a      	orrs	r2, r3
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	689b      	ldr	r3, [r3, #8]
 800cf0c:	4313      	orrs	r3, r2
 800cf0e:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	68db      	ldr	r3, [r3, #12]
 800cf14:	68fa      	ldr	r2, [r7, #12]
 800cf16:	4313      	orrs	r3, r2
 800cf18:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	691b      	ldr	r3, [r3, #16]
 800cf1e:	041b      	lsls	r3, r3, #16
 800cf20:	68fa      	ldr	r2, [r7, #12]
 800cf22:	4313      	orrs	r3, r2
 800cf24:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 800cf26:	4a0c      	ldr	r2, [pc, #48]	; (800cf58 <HAL_RCCEx_CRSConfig+0xa8>)
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 800cf2c:	4b0a      	ldr	r3, [pc, #40]	; (800cf58 <HAL_RCCEx_CRSConfig+0xa8>)
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	695b      	ldr	r3, [r3, #20]
 800cf38:	021b      	lsls	r3, r3, #8
 800cf3a:	4907      	ldr	r1, [pc, #28]	; (800cf58 <HAL_RCCEx_CRSConfig+0xa8>)
 800cf3c:	4313      	orrs	r3, r2
 800cf3e:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 800cf40:	4b05      	ldr	r3, [pc, #20]	; (800cf58 <HAL_RCCEx_CRSConfig+0xa8>)
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	4a04      	ldr	r2, [pc, #16]	; (800cf58 <HAL_RCCEx_CRSConfig+0xa8>)
 800cf46:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800cf4a:	6013      	str	r3, [r2, #0]
}
 800cf4c:	bf00      	nop
 800cf4e:	3710      	adds	r7, #16
 800cf50:	46bd      	mov	sp, r7
 800cf52:	bd80      	pop	{r7, pc}
 800cf54:	58024400 	.word	0x58024400
 800cf58:	40008400 	.word	0x40008400

0800cf5c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b084      	sub	sp, #16
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	6078      	str	r0, [r7, #4]
 800cf64:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cf66:	2300      	movs	r3, #0
 800cf68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cf6a:	4b53      	ldr	r3, [pc, #332]	; (800d0b8 <RCCEx_PLL2_Config+0x15c>)
 800cf6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf6e:	f003 0303 	and.w	r3, r3, #3
 800cf72:	2b03      	cmp	r3, #3
 800cf74:	d101      	bne.n	800cf7a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800cf76:	2301      	movs	r3, #1
 800cf78:	e099      	b.n	800d0ae <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800cf7a:	4b4f      	ldr	r3, [pc, #316]	; (800d0b8 <RCCEx_PLL2_Config+0x15c>)
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	4a4e      	ldr	r2, [pc, #312]	; (800d0b8 <RCCEx_PLL2_Config+0x15c>)
 800cf80:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cf84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cf86:	f7f6 fd8b 	bl	8003aa0 <HAL_GetTick>
 800cf8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cf8c:	e008      	b.n	800cfa0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cf8e:	f7f6 fd87 	bl	8003aa0 <HAL_GetTick>
 800cf92:	4602      	mov	r2, r0
 800cf94:	68bb      	ldr	r3, [r7, #8]
 800cf96:	1ad3      	subs	r3, r2, r3
 800cf98:	2b02      	cmp	r3, #2
 800cf9a:	d901      	bls.n	800cfa0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cf9c:	2303      	movs	r3, #3
 800cf9e:	e086      	b.n	800d0ae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cfa0:	4b45      	ldr	r3, [pc, #276]	; (800d0b8 <RCCEx_PLL2_Config+0x15c>)
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d1f0      	bne.n	800cf8e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800cfac:	4b42      	ldr	r3, [pc, #264]	; (800d0b8 <RCCEx_PLL2_Config+0x15c>)
 800cfae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfb0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	031b      	lsls	r3, r3, #12
 800cfba:	493f      	ldr	r1, [pc, #252]	; (800d0b8 <RCCEx_PLL2_Config+0x15c>)
 800cfbc:	4313      	orrs	r3, r2
 800cfbe:	628b      	str	r3, [r1, #40]	; 0x28
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	685b      	ldr	r3, [r3, #4]
 800cfc4:	3b01      	subs	r3, #1
 800cfc6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	689b      	ldr	r3, [r3, #8]
 800cfce:	3b01      	subs	r3, #1
 800cfd0:	025b      	lsls	r3, r3, #9
 800cfd2:	b29b      	uxth	r3, r3
 800cfd4:	431a      	orrs	r2, r3
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	68db      	ldr	r3, [r3, #12]
 800cfda:	3b01      	subs	r3, #1
 800cfdc:	041b      	lsls	r3, r3, #16
 800cfde:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cfe2:	431a      	orrs	r2, r3
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	691b      	ldr	r3, [r3, #16]
 800cfe8:	3b01      	subs	r3, #1
 800cfea:	061b      	lsls	r3, r3, #24
 800cfec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cff0:	4931      	ldr	r1, [pc, #196]	; (800d0b8 <RCCEx_PLL2_Config+0x15c>)
 800cff2:	4313      	orrs	r3, r2
 800cff4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800cff6:	4b30      	ldr	r3, [pc, #192]	; (800d0b8 <RCCEx_PLL2_Config+0x15c>)
 800cff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cffa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	695b      	ldr	r3, [r3, #20]
 800d002:	492d      	ldr	r1, [pc, #180]	; (800d0b8 <RCCEx_PLL2_Config+0x15c>)
 800d004:	4313      	orrs	r3, r2
 800d006:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d008:	4b2b      	ldr	r3, [pc, #172]	; (800d0b8 <RCCEx_PLL2_Config+0x15c>)
 800d00a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d00c:	f023 0220 	bic.w	r2, r3, #32
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	699b      	ldr	r3, [r3, #24]
 800d014:	4928      	ldr	r1, [pc, #160]	; (800d0b8 <RCCEx_PLL2_Config+0x15c>)
 800d016:	4313      	orrs	r3, r2
 800d018:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d01a:	4b27      	ldr	r3, [pc, #156]	; (800d0b8 <RCCEx_PLL2_Config+0x15c>)
 800d01c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d01e:	4a26      	ldr	r2, [pc, #152]	; (800d0b8 <RCCEx_PLL2_Config+0x15c>)
 800d020:	f023 0310 	bic.w	r3, r3, #16
 800d024:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d026:	4b24      	ldr	r3, [pc, #144]	; (800d0b8 <RCCEx_PLL2_Config+0x15c>)
 800d028:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d02a:	4b24      	ldr	r3, [pc, #144]	; (800d0bc <RCCEx_PLL2_Config+0x160>)
 800d02c:	4013      	ands	r3, r2
 800d02e:	687a      	ldr	r2, [r7, #4]
 800d030:	69d2      	ldr	r2, [r2, #28]
 800d032:	00d2      	lsls	r2, r2, #3
 800d034:	4920      	ldr	r1, [pc, #128]	; (800d0b8 <RCCEx_PLL2_Config+0x15c>)
 800d036:	4313      	orrs	r3, r2
 800d038:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d03a:	4b1f      	ldr	r3, [pc, #124]	; (800d0b8 <RCCEx_PLL2_Config+0x15c>)
 800d03c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d03e:	4a1e      	ldr	r2, [pc, #120]	; (800d0b8 <RCCEx_PLL2_Config+0x15c>)
 800d040:	f043 0310 	orr.w	r3, r3, #16
 800d044:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d046:	683b      	ldr	r3, [r7, #0]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d106      	bne.n	800d05a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d04c:	4b1a      	ldr	r3, [pc, #104]	; (800d0b8 <RCCEx_PLL2_Config+0x15c>)
 800d04e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d050:	4a19      	ldr	r2, [pc, #100]	; (800d0b8 <RCCEx_PLL2_Config+0x15c>)
 800d052:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d056:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d058:	e00f      	b.n	800d07a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d05a:	683b      	ldr	r3, [r7, #0]
 800d05c:	2b01      	cmp	r3, #1
 800d05e:	d106      	bne.n	800d06e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d060:	4b15      	ldr	r3, [pc, #84]	; (800d0b8 <RCCEx_PLL2_Config+0x15c>)
 800d062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d064:	4a14      	ldr	r2, [pc, #80]	; (800d0b8 <RCCEx_PLL2_Config+0x15c>)
 800d066:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d06a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d06c:	e005      	b.n	800d07a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d06e:	4b12      	ldr	r3, [pc, #72]	; (800d0b8 <RCCEx_PLL2_Config+0x15c>)
 800d070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d072:	4a11      	ldr	r2, [pc, #68]	; (800d0b8 <RCCEx_PLL2_Config+0x15c>)
 800d074:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d078:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d07a:	4b0f      	ldr	r3, [pc, #60]	; (800d0b8 <RCCEx_PLL2_Config+0x15c>)
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	4a0e      	ldr	r2, [pc, #56]	; (800d0b8 <RCCEx_PLL2_Config+0x15c>)
 800d080:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d084:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d086:	f7f6 fd0b 	bl	8003aa0 <HAL_GetTick>
 800d08a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d08c:	e008      	b.n	800d0a0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d08e:	f7f6 fd07 	bl	8003aa0 <HAL_GetTick>
 800d092:	4602      	mov	r2, r0
 800d094:	68bb      	ldr	r3, [r7, #8]
 800d096:	1ad3      	subs	r3, r2, r3
 800d098:	2b02      	cmp	r3, #2
 800d09a:	d901      	bls.n	800d0a0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d09c:	2303      	movs	r3, #3
 800d09e:	e006      	b.n	800d0ae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d0a0:	4b05      	ldr	r3, [pc, #20]	; (800d0b8 <RCCEx_PLL2_Config+0x15c>)
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d0f0      	beq.n	800d08e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d0ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	3710      	adds	r7, #16
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	bd80      	pop	{r7, pc}
 800d0b6:	bf00      	nop
 800d0b8:	58024400 	.word	0x58024400
 800d0bc:	ffff0007 	.word	0xffff0007

0800d0c0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b084      	sub	sp, #16
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
 800d0c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d0ce:	4b53      	ldr	r3, [pc, #332]	; (800d21c <RCCEx_PLL3_Config+0x15c>)
 800d0d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0d2:	f003 0303 	and.w	r3, r3, #3
 800d0d6:	2b03      	cmp	r3, #3
 800d0d8:	d101      	bne.n	800d0de <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d0da:	2301      	movs	r3, #1
 800d0dc:	e099      	b.n	800d212 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d0de:	4b4f      	ldr	r3, [pc, #316]	; (800d21c <RCCEx_PLL3_Config+0x15c>)
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	4a4e      	ldr	r2, [pc, #312]	; (800d21c <RCCEx_PLL3_Config+0x15c>)
 800d0e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d0e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d0ea:	f7f6 fcd9 	bl	8003aa0 <HAL_GetTick>
 800d0ee:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d0f0:	e008      	b.n	800d104 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d0f2:	f7f6 fcd5 	bl	8003aa0 <HAL_GetTick>
 800d0f6:	4602      	mov	r2, r0
 800d0f8:	68bb      	ldr	r3, [r7, #8]
 800d0fa:	1ad3      	subs	r3, r2, r3
 800d0fc:	2b02      	cmp	r3, #2
 800d0fe:	d901      	bls.n	800d104 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d100:	2303      	movs	r3, #3
 800d102:	e086      	b.n	800d212 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d104:	4b45      	ldr	r3, [pc, #276]	; (800d21c <RCCEx_PLL3_Config+0x15c>)
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d1f0      	bne.n	800d0f2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d110:	4b42      	ldr	r3, [pc, #264]	; (800d21c <RCCEx_PLL3_Config+0x15c>)
 800d112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d114:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	051b      	lsls	r3, r3, #20
 800d11e:	493f      	ldr	r1, [pc, #252]	; (800d21c <RCCEx_PLL3_Config+0x15c>)
 800d120:	4313      	orrs	r3, r2
 800d122:	628b      	str	r3, [r1, #40]	; 0x28
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	685b      	ldr	r3, [r3, #4]
 800d128:	3b01      	subs	r3, #1
 800d12a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	689b      	ldr	r3, [r3, #8]
 800d132:	3b01      	subs	r3, #1
 800d134:	025b      	lsls	r3, r3, #9
 800d136:	b29b      	uxth	r3, r3
 800d138:	431a      	orrs	r2, r3
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	68db      	ldr	r3, [r3, #12]
 800d13e:	3b01      	subs	r3, #1
 800d140:	041b      	lsls	r3, r3, #16
 800d142:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d146:	431a      	orrs	r2, r3
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	691b      	ldr	r3, [r3, #16]
 800d14c:	3b01      	subs	r3, #1
 800d14e:	061b      	lsls	r3, r3, #24
 800d150:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d154:	4931      	ldr	r1, [pc, #196]	; (800d21c <RCCEx_PLL3_Config+0x15c>)
 800d156:	4313      	orrs	r3, r2
 800d158:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d15a:	4b30      	ldr	r3, [pc, #192]	; (800d21c <RCCEx_PLL3_Config+0x15c>)
 800d15c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d15e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	695b      	ldr	r3, [r3, #20]
 800d166:	492d      	ldr	r1, [pc, #180]	; (800d21c <RCCEx_PLL3_Config+0x15c>)
 800d168:	4313      	orrs	r3, r2
 800d16a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d16c:	4b2b      	ldr	r3, [pc, #172]	; (800d21c <RCCEx_PLL3_Config+0x15c>)
 800d16e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d170:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	699b      	ldr	r3, [r3, #24]
 800d178:	4928      	ldr	r1, [pc, #160]	; (800d21c <RCCEx_PLL3_Config+0x15c>)
 800d17a:	4313      	orrs	r3, r2
 800d17c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d17e:	4b27      	ldr	r3, [pc, #156]	; (800d21c <RCCEx_PLL3_Config+0x15c>)
 800d180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d182:	4a26      	ldr	r2, [pc, #152]	; (800d21c <RCCEx_PLL3_Config+0x15c>)
 800d184:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d188:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d18a:	4b24      	ldr	r3, [pc, #144]	; (800d21c <RCCEx_PLL3_Config+0x15c>)
 800d18c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d18e:	4b24      	ldr	r3, [pc, #144]	; (800d220 <RCCEx_PLL3_Config+0x160>)
 800d190:	4013      	ands	r3, r2
 800d192:	687a      	ldr	r2, [r7, #4]
 800d194:	69d2      	ldr	r2, [r2, #28]
 800d196:	00d2      	lsls	r2, r2, #3
 800d198:	4920      	ldr	r1, [pc, #128]	; (800d21c <RCCEx_PLL3_Config+0x15c>)
 800d19a:	4313      	orrs	r3, r2
 800d19c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d19e:	4b1f      	ldr	r3, [pc, #124]	; (800d21c <RCCEx_PLL3_Config+0x15c>)
 800d1a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1a2:	4a1e      	ldr	r2, [pc, #120]	; (800d21c <RCCEx_PLL3_Config+0x15c>)
 800d1a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d1a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d1aa:	683b      	ldr	r3, [r7, #0]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d106      	bne.n	800d1be <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d1b0:	4b1a      	ldr	r3, [pc, #104]	; (800d21c <RCCEx_PLL3_Config+0x15c>)
 800d1b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1b4:	4a19      	ldr	r2, [pc, #100]	; (800d21c <RCCEx_PLL3_Config+0x15c>)
 800d1b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d1ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d1bc:	e00f      	b.n	800d1de <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d1be:	683b      	ldr	r3, [r7, #0]
 800d1c0:	2b01      	cmp	r3, #1
 800d1c2:	d106      	bne.n	800d1d2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d1c4:	4b15      	ldr	r3, [pc, #84]	; (800d21c <RCCEx_PLL3_Config+0x15c>)
 800d1c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1c8:	4a14      	ldr	r2, [pc, #80]	; (800d21c <RCCEx_PLL3_Config+0x15c>)
 800d1ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d1ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d1d0:	e005      	b.n	800d1de <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d1d2:	4b12      	ldr	r3, [pc, #72]	; (800d21c <RCCEx_PLL3_Config+0x15c>)
 800d1d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1d6:	4a11      	ldr	r2, [pc, #68]	; (800d21c <RCCEx_PLL3_Config+0x15c>)
 800d1d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d1dc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d1de:	4b0f      	ldr	r3, [pc, #60]	; (800d21c <RCCEx_PLL3_Config+0x15c>)
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	4a0e      	ldr	r2, [pc, #56]	; (800d21c <RCCEx_PLL3_Config+0x15c>)
 800d1e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d1e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d1ea:	f7f6 fc59 	bl	8003aa0 <HAL_GetTick>
 800d1ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d1f0:	e008      	b.n	800d204 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d1f2:	f7f6 fc55 	bl	8003aa0 <HAL_GetTick>
 800d1f6:	4602      	mov	r2, r0
 800d1f8:	68bb      	ldr	r3, [r7, #8]
 800d1fa:	1ad3      	subs	r3, r2, r3
 800d1fc:	2b02      	cmp	r3, #2
 800d1fe:	d901      	bls.n	800d204 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d200:	2303      	movs	r3, #3
 800d202:	e006      	b.n	800d212 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d204:	4b05      	ldr	r3, [pc, #20]	; (800d21c <RCCEx_PLL3_Config+0x15c>)
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d0f0      	beq.n	800d1f2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d210:	7bfb      	ldrb	r3, [r7, #15]
}
 800d212:	4618      	mov	r0, r3
 800d214:	3710      	adds	r7, #16
 800d216:	46bd      	mov	sp, r7
 800d218:	bd80      	pop	{r7, pc}
 800d21a:	bf00      	nop
 800d21c:	58024400 	.word	0x58024400
 800d220:	ffff0007 	.word	0xffff0007

0800d224 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d224:	b580      	push	{r7, lr}
 800d226:	b082      	sub	sp, #8
 800d228:	af00      	add	r7, sp, #0
 800d22a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d101      	bne.n	800d236 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d232:	2301      	movs	r3, #1
 800d234:	e049      	b.n	800d2ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d23c:	b2db      	uxtb	r3, r3
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d106      	bne.n	800d250 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	2200      	movs	r2, #0
 800d246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d24a:	6878      	ldr	r0, [r7, #4]
 800d24c:	f7f5 fee2 	bl	8003014 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	2202      	movs	r2, #2
 800d254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681a      	ldr	r2, [r3, #0]
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	3304      	adds	r3, #4
 800d260:	4619      	mov	r1, r3
 800d262:	4610      	mov	r0, r2
 800d264:	f000 f92e 	bl	800d4c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	2201      	movs	r2, #1
 800d26c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	2201      	movs	r2, #1
 800d274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	2201      	movs	r2, #1
 800d27c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	2201      	movs	r2, #1
 800d284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	2201      	movs	r2, #1
 800d28c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	2201      	movs	r2, #1
 800d294:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	2201      	movs	r2, #1
 800d29c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	2201      	movs	r2, #1
 800d2a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	2201      	movs	r2, #1
 800d2ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	2201      	movs	r2, #1
 800d2b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	2201      	movs	r2, #1
 800d2bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	2201      	movs	r2, #1
 800d2c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d2c8:	2300      	movs	r3, #0
}
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	3708      	adds	r7, #8
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	bd80      	pop	{r7, pc}
	...

0800d2d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b084      	sub	sp, #16
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
 800d2dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d2de:	2300      	movs	r3, #0
 800d2e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d2e8:	2b01      	cmp	r3, #1
 800d2ea:	d101      	bne.n	800d2f0 <HAL_TIM_ConfigClockSource+0x1c>
 800d2ec:	2302      	movs	r3, #2
 800d2ee:	e0dc      	b.n	800d4aa <HAL_TIM_ConfigClockSource+0x1d6>
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	2201      	movs	r2, #1
 800d2f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	2202      	movs	r2, #2
 800d2fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	689b      	ldr	r3, [r3, #8]
 800d306:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d308:	68ba      	ldr	r2, [r7, #8]
 800d30a:	4b6a      	ldr	r3, [pc, #424]	; (800d4b4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800d30c:	4013      	ands	r3, r2
 800d30e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d310:	68bb      	ldr	r3, [r7, #8]
 800d312:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d316:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	68ba      	ldr	r2, [r7, #8]
 800d31e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	4a64      	ldr	r2, [pc, #400]	; (800d4b8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d326:	4293      	cmp	r3, r2
 800d328:	f000 80a9 	beq.w	800d47e <HAL_TIM_ConfigClockSource+0x1aa>
 800d32c:	4a62      	ldr	r2, [pc, #392]	; (800d4b8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d32e:	4293      	cmp	r3, r2
 800d330:	f200 80ae 	bhi.w	800d490 <HAL_TIM_ConfigClockSource+0x1bc>
 800d334:	4a61      	ldr	r2, [pc, #388]	; (800d4bc <HAL_TIM_ConfigClockSource+0x1e8>)
 800d336:	4293      	cmp	r3, r2
 800d338:	f000 80a1 	beq.w	800d47e <HAL_TIM_ConfigClockSource+0x1aa>
 800d33c:	4a5f      	ldr	r2, [pc, #380]	; (800d4bc <HAL_TIM_ConfigClockSource+0x1e8>)
 800d33e:	4293      	cmp	r3, r2
 800d340:	f200 80a6 	bhi.w	800d490 <HAL_TIM_ConfigClockSource+0x1bc>
 800d344:	4a5e      	ldr	r2, [pc, #376]	; (800d4c0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d346:	4293      	cmp	r3, r2
 800d348:	f000 8099 	beq.w	800d47e <HAL_TIM_ConfigClockSource+0x1aa>
 800d34c:	4a5c      	ldr	r2, [pc, #368]	; (800d4c0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d34e:	4293      	cmp	r3, r2
 800d350:	f200 809e 	bhi.w	800d490 <HAL_TIM_ConfigClockSource+0x1bc>
 800d354:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d358:	f000 8091 	beq.w	800d47e <HAL_TIM_ConfigClockSource+0x1aa>
 800d35c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d360:	f200 8096 	bhi.w	800d490 <HAL_TIM_ConfigClockSource+0x1bc>
 800d364:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d368:	f000 8089 	beq.w	800d47e <HAL_TIM_ConfigClockSource+0x1aa>
 800d36c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d370:	f200 808e 	bhi.w	800d490 <HAL_TIM_ConfigClockSource+0x1bc>
 800d374:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d378:	d03e      	beq.n	800d3f8 <HAL_TIM_ConfigClockSource+0x124>
 800d37a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d37e:	f200 8087 	bhi.w	800d490 <HAL_TIM_ConfigClockSource+0x1bc>
 800d382:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d386:	f000 8086 	beq.w	800d496 <HAL_TIM_ConfigClockSource+0x1c2>
 800d38a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d38e:	d87f      	bhi.n	800d490 <HAL_TIM_ConfigClockSource+0x1bc>
 800d390:	2b70      	cmp	r3, #112	; 0x70
 800d392:	d01a      	beq.n	800d3ca <HAL_TIM_ConfigClockSource+0xf6>
 800d394:	2b70      	cmp	r3, #112	; 0x70
 800d396:	d87b      	bhi.n	800d490 <HAL_TIM_ConfigClockSource+0x1bc>
 800d398:	2b60      	cmp	r3, #96	; 0x60
 800d39a:	d050      	beq.n	800d43e <HAL_TIM_ConfigClockSource+0x16a>
 800d39c:	2b60      	cmp	r3, #96	; 0x60
 800d39e:	d877      	bhi.n	800d490 <HAL_TIM_ConfigClockSource+0x1bc>
 800d3a0:	2b50      	cmp	r3, #80	; 0x50
 800d3a2:	d03c      	beq.n	800d41e <HAL_TIM_ConfigClockSource+0x14a>
 800d3a4:	2b50      	cmp	r3, #80	; 0x50
 800d3a6:	d873      	bhi.n	800d490 <HAL_TIM_ConfigClockSource+0x1bc>
 800d3a8:	2b40      	cmp	r3, #64	; 0x40
 800d3aa:	d058      	beq.n	800d45e <HAL_TIM_ConfigClockSource+0x18a>
 800d3ac:	2b40      	cmp	r3, #64	; 0x40
 800d3ae:	d86f      	bhi.n	800d490 <HAL_TIM_ConfigClockSource+0x1bc>
 800d3b0:	2b30      	cmp	r3, #48	; 0x30
 800d3b2:	d064      	beq.n	800d47e <HAL_TIM_ConfigClockSource+0x1aa>
 800d3b4:	2b30      	cmp	r3, #48	; 0x30
 800d3b6:	d86b      	bhi.n	800d490 <HAL_TIM_ConfigClockSource+0x1bc>
 800d3b8:	2b20      	cmp	r3, #32
 800d3ba:	d060      	beq.n	800d47e <HAL_TIM_ConfigClockSource+0x1aa>
 800d3bc:	2b20      	cmp	r3, #32
 800d3be:	d867      	bhi.n	800d490 <HAL_TIM_ConfigClockSource+0x1bc>
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d05c      	beq.n	800d47e <HAL_TIM_ConfigClockSource+0x1aa>
 800d3c4:	2b10      	cmp	r3, #16
 800d3c6:	d05a      	beq.n	800d47e <HAL_TIM_ConfigClockSource+0x1aa>
 800d3c8:	e062      	b.n	800d490 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d3ce:	683b      	ldr	r3, [r7, #0]
 800d3d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d3d2:	683b      	ldr	r3, [r7, #0]
 800d3d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d3d6:	683b      	ldr	r3, [r7, #0]
 800d3d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d3da:	f000 f98b 	bl	800d6f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	689b      	ldr	r3, [r3, #8]
 800d3e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d3e6:	68bb      	ldr	r3, [r7, #8]
 800d3e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d3ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	68ba      	ldr	r2, [r7, #8]
 800d3f4:	609a      	str	r2, [r3, #8]
      break;
 800d3f6:	e04f      	b.n	800d498 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d3fc:	683b      	ldr	r3, [r7, #0]
 800d3fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d400:	683b      	ldr	r3, [r7, #0]
 800d402:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d404:	683b      	ldr	r3, [r7, #0]
 800d406:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d408:	f000 f974 	bl	800d6f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	689a      	ldr	r2, [r3, #8]
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d41a:	609a      	str	r2, [r3, #8]
      break;
 800d41c:	e03c      	b.n	800d498 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d422:	683b      	ldr	r3, [r7, #0]
 800d424:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d426:	683b      	ldr	r3, [r7, #0]
 800d428:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d42a:	461a      	mov	r2, r3
 800d42c:	f000 f8e4 	bl	800d5f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	2150      	movs	r1, #80	; 0x50
 800d436:	4618      	mov	r0, r3
 800d438:	f000 f93e 	bl	800d6b8 <TIM_ITRx_SetConfig>
      break;
 800d43c:	e02c      	b.n	800d498 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d442:	683b      	ldr	r3, [r7, #0]
 800d444:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d446:	683b      	ldr	r3, [r7, #0]
 800d448:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d44a:	461a      	mov	r2, r3
 800d44c:	f000 f903 	bl	800d656 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	2160      	movs	r1, #96	; 0x60
 800d456:	4618      	mov	r0, r3
 800d458:	f000 f92e 	bl	800d6b8 <TIM_ITRx_SetConfig>
      break;
 800d45c:	e01c      	b.n	800d498 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d462:	683b      	ldr	r3, [r7, #0]
 800d464:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d466:	683b      	ldr	r3, [r7, #0]
 800d468:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d46a:	461a      	mov	r2, r3
 800d46c:	f000 f8c4 	bl	800d5f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	2140      	movs	r1, #64	; 0x40
 800d476:	4618      	mov	r0, r3
 800d478:	f000 f91e 	bl	800d6b8 <TIM_ITRx_SetConfig>
      break;
 800d47c:	e00c      	b.n	800d498 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	681a      	ldr	r2, [r3, #0]
 800d482:	683b      	ldr	r3, [r7, #0]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	4619      	mov	r1, r3
 800d488:	4610      	mov	r0, r2
 800d48a:	f000 f915 	bl	800d6b8 <TIM_ITRx_SetConfig>
      break;
 800d48e:	e003      	b.n	800d498 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800d490:	2301      	movs	r3, #1
 800d492:	73fb      	strb	r3, [r7, #15]
      break;
 800d494:	e000      	b.n	800d498 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800d496:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	2201      	movs	r2, #1
 800d49c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	2200      	movs	r2, #0
 800d4a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d4a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	3710      	adds	r7, #16
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	bd80      	pop	{r7, pc}
 800d4b2:	bf00      	nop
 800d4b4:	ffceff88 	.word	0xffceff88
 800d4b8:	00100040 	.word	0x00100040
 800d4bc:	00100030 	.word	0x00100030
 800d4c0:	00100020 	.word	0x00100020

0800d4c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d4c4:	b480      	push	{r7}
 800d4c6:	b085      	sub	sp, #20
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
 800d4cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	4a40      	ldr	r2, [pc, #256]	; (800d5d8 <TIM_Base_SetConfig+0x114>)
 800d4d8:	4293      	cmp	r3, r2
 800d4da:	d013      	beq.n	800d504 <TIM_Base_SetConfig+0x40>
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d4e2:	d00f      	beq.n	800d504 <TIM_Base_SetConfig+0x40>
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	4a3d      	ldr	r2, [pc, #244]	; (800d5dc <TIM_Base_SetConfig+0x118>)
 800d4e8:	4293      	cmp	r3, r2
 800d4ea:	d00b      	beq.n	800d504 <TIM_Base_SetConfig+0x40>
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	4a3c      	ldr	r2, [pc, #240]	; (800d5e0 <TIM_Base_SetConfig+0x11c>)
 800d4f0:	4293      	cmp	r3, r2
 800d4f2:	d007      	beq.n	800d504 <TIM_Base_SetConfig+0x40>
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	4a3b      	ldr	r2, [pc, #236]	; (800d5e4 <TIM_Base_SetConfig+0x120>)
 800d4f8:	4293      	cmp	r3, r2
 800d4fa:	d003      	beq.n	800d504 <TIM_Base_SetConfig+0x40>
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	4a3a      	ldr	r2, [pc, #232]	; (800d5e8 <TIM_Base_SetConfig+0x124>)
 800d500:	4293      	cmp	r3, r2
 800d502:	d108      	bne.n	800d516 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d50a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d50c:	683b      	ldr	r3, [r7, #0]
 800d50e:	685b      	ldr	r3, [r3, #4]
 800d510:	68fa      	ldr	r2, [r7, #12]
 800d512:	4313      	orrs	r3, r2
 800d514:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	4a2f      	ldr	r2, [pc, #188]	; (800d5d8 <TIM_Base_SetConfig+0x114>)
 800d51a:	4293      	cmp	r3, r2
 800d51c:	d01f      	beq.n	800d55e <TIM_Base_SetConfig+0x9a>
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d524:	d01b      	beq.n	800d55e <TIM_Base_SetConfig+0x9a>
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	4a2c      	ldr	r2, [pc, #176]	; (800d5dc <TIM_Base_SetConfig+0x118>)
 800d52a:	4293      	cmp	r3, r2
 800d52c:	d017      	beq.n	800d55e <TIM_Base_SetConfig+0x9a>
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	4a2b      	ldr	r2, [pc, #172]	; (800d5e0 <TIM_Base_SetConfig+0x11c>)
 800d532:	4293      	cmp	r3, r2
 800d534:	d013      	beq.n	800d55e <TIM_Base_SetConfig+0x9a>
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	4a2a      	ldr	r2, [pc, #168]	; (800d5e4 <TIM_Base_SetConfig+0x120>)
 800d53a:	4293      	cmp	r3, r2
 800d53c:	d00f      	beq.n	800d55e <TIM_Base_SetConfig+0x9a>
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	4a29      	ldr	r2, [pc, #164]	; (800d5e8 <TIM_Base_SetConfig+0x124>)
 800d542:	4293      	cmp	r3, r2
 800d544:	d00b      	beq.n	800d55e <TIM_Base_SetConfig+0x9a>
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	4a28      	ldr	r2, [pc, #160]	; (800d5ec <TIM_Base_SetConfig+0x128>)
 800d54a:	4293      	cmp	r3, r2
 800d54c:	d007      	beq.n	800d55e <TIM_Base_SetConfig+0x9a>
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	4a27      	ldr	r2, [pc, #156]	; (800d5f0 <TIM_Base_SetConfig+0x12c>)
 800d552:	4293      	cmp	r3, r2
 800d554:	d003      	beq.n	800d55e <TIM_Base_SetConfig+0x9a>
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	4a26      	ldr	r2, [pc, #152]	; (800d5f4 <TIM_Base_SetConfig+0x130>)
 800d55a:	4293      	cmp	r3, r2
 800d55c:	d108      	bne.n	800d570 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d564:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d566:	683b      	ldr	r3, [r7, #0]
 800d568:	68db      	ldr	r3, [r3, #12]
 800d56a:	68fa      	ldr	r2, [r7, #12]
 800d56c:	4313      	orrs	r3, r2
 800d56e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d576:	683b      	ldr	r3, [r7, #0]
 800d578:	695b      	ldr	r3, [r3, #20]
 800d57a:	4313      	orrs	r3, r2
 800d57c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	68fa      	ldr	r2, [r7, #12]
 800d582:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d584:	683b      	ldr	r3, [r7, #0]
 800d586:	689a      	ldr	r2, [r3, #8]
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d58c:	683b      	ldr	r3, [r7, #0]
 800d58e:	681a      	ldr	r2, [r3, #0]
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	4a10      	ldr	r2, [pc, #64]	; (800d5d8 <TIM_Base_SetConfig+0x114>)
 800d598:	4293      	cmp	r3, r2
 800d59a:	d00f      	beq.n	800d5bc <TIM_Base_SetConfig+0xf8>
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	4a12      	ldr	r2, [pc, #72]	; (800d5e8 <TIM_Base_SetConfig+0x124>)
 800d5a0:	4293      	cmp	r3, r2
 800d5a2:	d00b      	beq.n	800d5bc <TIM_Base_SetConfig+0xf8>
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	4a11      	ldr	r2, [pc, #68]	; (800d5ec <TIM_Base_SetConfig+0x128>)
 800d5a8:	4293      	cmp	r3, r2
 800d5aa:	d007      	beq.n	800d5bc <TIM_Base_SetConfig+0xf8>
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	4a10      	ldr	r2, [pc, #64]	; (800d5f0 <TIM_Base_SetConfig+0x12c>)
 800d5b0:	4293      	cmp	r3, r2
 800d5b2:	d003      	beq.n	800d5bc <TIM_Base_SetConfig+0xf8>
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	4a0f      	ldr	r2, [pc, #60]	; (800d5f4 <TIM_Base_SetConfig+0x130>)
 800d5b8:	4293      	cmp	r3, r2
 800d5ba:	d103      	bne.n	800d5c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d5bc:	683b      	ldr	r3, [r7, #0]
 800d5be:	691a      	ldr	r2, [r3, #16]
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	2201      	movs	r2, #1
 800d5c8:	615a      	str	r2, [r3, #20]
}
 800d5ca:	bf00      	nop
 800d5cc:	3714      	adds	r7, #20
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d4:	4770      	bx	lr
 800d5d6:	bf00      	nop
 800d5d8:	40010000 	.word	0x40010000
 800d5dc:	40000400 	.word	0x40000400
 800d5e0:	40000800 	.word	0x40000800
 800d5e4:	40000c00 	.word	0x40000c00
 800d5e8:	40010400 	.word	0x40010400
 800d5ec:	40014000 	.word	0x40014000
 800d5f0:	40014400 	.word	0x40014400
 800d5f4:	40014800 	.word	0x40014800

0800d5f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d5f8:	b480      	push	{r7}
 800d5fa:	b087      	sub	sp, #28
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	60f8      	str	r0, [r7, #12]
 800d600:	60b9      	str	r1, [r7, #8]
 800d602:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	6a1b      	ldr	r3, [r3, #32]
 800d608:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	6a1b      	ldr	r3, [r3, #32]
 800d60e:	f023 0201 	bic.w	r2, r3, #1
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	699b      	ldr	r3, [r3, #24]
 800d61a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d61c:	693b      	ldr	r3, [r7, #16]
 800d61e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d622:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	011b      	lsls	r3, r3, #4
 800d628:	693a      	ldr	r2, [r7, #16]
 800d62a:	4313      	orrs	r3, r2
 800d62c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d62e:	697b      	ldr	r3, [r7, #20]
 800d630:	f023 030a 	bic.w	r3, r3, #10
 800d634:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d636:	697a      	ldr	r2, [r7, #20]
 800d638:	68bb      	ldr	r3, [r7, #8]
 800d63a:	4313      	orrs	r3, r2
 800d63c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	693a      	ldr	r2, [r7, #16]
 800d642:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	697a      	ldr	r2, [r7, #20]
 800d648:	621a      	str	r2, [r3, #32]
}
 800d64a:	bf00      	nop
 800d64c:	371c      	adds	r7, #28
 800d64e:	46bd      	mov	sp, r7
 800d650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d654:	4770      	bx	lr

0800d656 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d656:	b480      	push	{r7}
 800d658:	b087      	sub	sp, #28
 800d65a:	af00      	add	r7, sp, #0
 800d65c:	60f8      	str	r0, [r7, #12]
 800d65e:	60b9      	str	r1, [r7, #8]
 800d660:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	6a1b      	ldr	r3, [r3, #32]
 800d666:	f023 0210 	bic.w	r2, r3, #16
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	699b      	ldr	r3, [r3, #24]
 800d672:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	6a1b      	ldr	r3, [r3, #32]
 800d678:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d67a:	697b      	ldr	r3, [r7, #20]
 800d67c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d680:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	031b      	lsls	r3, r3, #12
 800d686:	697a      	ldr	r2, [r7, #20]
 800d688:	4313      	orrs	r3, r2
 800d68a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d68c:	693b      	ldr	r3, [r7, #16]
 800d68e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d692:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d694:	68bb      	ldr	r3, [r7, #8]
 800d696:	011b      	lsls	r3, r3, #4
 800d698:	693a      	ldr	r2, [r7, #16]
 800d69a:	4313      	orrs	r3, r2
 800d69c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	697a      	ldr	r2, [r7, #20]
 800d6a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	693a      	ldr	r2, [r7, #16]
 800d6a8:	621a      	str	r2, [r3, #32]
}
 800d6aa:	bf00      	nop
 800d6ac:	371c      	adds	r7, #28
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b4:	4770      	bx	lr
	...

0800d6b8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d6b8:	b480      	push	{r7}
 800d6ba:	b085      	sub	sp, #20
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	6078      	str	r0, [r7, #4]
 800d6c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	689b      	ldr	r3, [r3, #8]
 800d6c6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d6c8:	68fa      	ldr	r2, [r7, #12]
 800d6ca:	4b09      	ldr	r3, [pc, #36]	; (800d6f0 <TIM_ITRx_SetConfig+0x38>)
 800d6cc:	4013      	ands	r3, r2
 800d6ce:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d6d0:	683a      	ldr	r2, [r7, #0]
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	4313      	orrs	r3, r2
 800d6d6:	f043 0307 	orr.w	r3, r3, #7
 800d6da:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	68fa      	ldr	r2, [r7, #12]
 800d6e0:	609a      	str	r2, [r3, #8]
}
 800d6e2:	bf00      	nop
 800d6e4:	3714      	adds	r7, #20
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ec:	4770      	bx	lr
 800d6ee:	bf00      	nop
 800d6f0:	ffcfff8f 	.word	0xffcfff8f

0800d6f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d6f4:	b480      	push	{r7}
 800d6f6:	b087      	sub	sp, #28
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	60f8      	str	r0, [r7, #12]
 800d6fc:	60b9      	str	r1, [r7, #8]
 800d6fe:	607a      	str	r2, [r7, #4]
 800d700:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	689b      	ldr	r3, [r3, #8]
 800d706:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d708:	697b      	ldr	r3, [r7, #20]
 800d70a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d70e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d710:	683b      	ldr	r3, [r7, #0]
 800d712:	021a      	lsls	r2, r3, #8
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	431a      	orrs	r2, r3
 800d718:	68bb      	ldr	r3, [r7, #8]
 800d71a:	4313      	orrs	r3, r2
 800d71c:	697a      	ldr	r2, [r7, #20]
 800d71e:	4313      	orrs	r3, r2
 800d720:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	697a      	ldr	r2, [r7, #20]
 800d726:	609a      	str	r2, [r3, #8]
}
 800d728:	bf00      	nop
 800d72a:	371c      	adds	r7, #28
 800d72c:	46bd      	mov	sp, r7
 800d72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d732:	4770      	bx	lr

0800d734 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d734:	b480      	push	{r7}
 800d736:	b085      	sub	sp, #20
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
 800d73c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d744:	2b01      	cmp	r3, #1
 800d746:	d101      	bne.n	800d74c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d748:	2302      	movs	r3, #2
 800d74a:	e06d      	b.n	800d828 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	2201      	movs	r2, #1
 800d750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	2202      	movs	r2, #2
 800d758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	685b      	ldr	r3, [r3, #4]
 800d762:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	689b      	ldr	r3, [r3, #8]
 800d76a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	4a30      	ldr	r2, [pc, #192]	; (800d834 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d772:	4293      	cmp	r3, r2
 800d774:	d004      	beq.n	800d780 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	4a2f      	ldr	r2, [pc, #188]	; (800d838 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d77c:	4293      	cmp	r3, r2
 800d77e:	d108      	bne.n	800d792 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d786:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d788:	683b      	ldr	r3, [r7, #0]
 800d78a:	685b      	ldr	r3, [r3, #4]
 800d78c:	68fa      	ldr	r2, [r7, #12]
 800d78e:	4313      	orrs	r3, r2
 800d790:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d798:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d79a:	683b      	ldr	r3, [r7, #0]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	68fa      	ldr	r2, [r7, #12]
 800d7a0:	4313      	orrs	r3, r2
 800d7a2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	68fa      	ldr	r2, [r7, #12]
 800d7aa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	4a20      	ldr	r2, [pc, #128]	; (800d834 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d7b2:	4293      	cmp	r3, r2
 800d7b4:	d022      	beq.n	800d7fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d7be:	d01d      	beq.n	800d7fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	4a1d      	ldr	r2, [pc, #116]	; (800d83c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d7c6:	4293      	cmp	r3, r2
 800d7c8:	d018      	beq.n	800d7fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	4a1c      	ldr	r2, [pc, #112]	; (800d840 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d7d0:	4293      	cmp	r3, r2
 800d7d2:	d013      	beq.n	800d7fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	4a1a      	ldr	r2, [pc, #104]	; (800d844 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d7da:	4293      	cmp	r3, r2
 800d7dc:	d00e      	beq.n	800d7fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	4a15      	ldr	r2, [pc, #84]	; (800d838 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d7e4:	4293      	cmp	r3, r2
 800d7e6:	d009      	beq.n	800d7fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	4a16      	ldr	r2, [pc, #88]	; (800d848 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d7ee:	4293      	cmp	r3, r2
 800d7f0:	d004      	beq.n	800d7fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	4a15      	ldr	r2, [pc, #84]	; (800d84c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d7f8:	4293      	cmp	r3, r2
 800d7fa:	d10c      	bne.n	800d816 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d7fc:	68bb      	ldr	r3, [r7, #8]
 800d7fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d802:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d804:	683b      	ldr	r3, [r7, #0]
 800d806:	689b      	ldr	r3, [r3, #8]
 800d808:	68ba      	ldr	r2, [r7, #8]
 800d80a:	4313      	orrs	r3, r2
 800d80c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	68ba      	ldr	r2, [r7, #8]
 800d814:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	2201      	movs	r2, #1
 800d81a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	2200      	movs	r2, #0
 800d822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d826:	2300      	movs	r3, #0
}
 800d828:	4618      	mov	r0, r3
 800d82a:	3714      	adds	r7, #20
 800d82c:	46bd      	mov	sp, r7
 800d82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d832:	4770      	bx	lr
 800d834:	40010000 	.word	0x40010000
 800d838:	40010400 	.word	0x40010400
 800d83c:	40000400 	.word	0x40000400
 800d840:	40000800 	.word	0x40000800
 800d844:	40000c00 	.word	0x40000c00
 800d848:	40001800 	.word	0x40001800
 800d84c:	40014000 	.word	0x40014000

0800d850 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b082      	sub	sp, #8
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d101      	bne.n	800d862 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d85e:	2301      	movs	r3, #1
 800d860:	e042      	b.n	800d8e8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d106      	bne.n	800d87a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	2200      	movs	r2, #0
 800d870:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d874:	6878      	ldr	r0, [r7, #4]
 800d876:	f7f5 fc33 	bl	80030e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	2224      	movs	r2, #36	; 0x24
 800d87e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	681a      	ldr	r2, [r3, #0]
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	f022 0201 	bic.w	r2, r2, #1
 800d890:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d892:	6878      	ldr	r0, [r7, #4]
 800d894:	f000 f8ba 	bl	800da0c <UART_SetConfig>
 800d898:	4603      	mov	r3, r0
 800d89a:	2b01      	cmp	r3, #1
 800d89c:	d101      	bne.n	800d8a2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800d89e:	2301      	movs	r3, #1
 800d8a0:	e022      	b.n	800d8e8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d002      	beq.n	800d8b0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800d8aa:	6878      	ldr	r0, [r7, #4]
 800d8ac:	f000 fe16 	bl	800e4dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	685a      	ldr	r2, [r3, #4]
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d8be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	689a      	ldr	r2, [r3, #8]
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d8ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	681a      	ldr	r2, [r3, #0]
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	f042 0201 	orr.w	r2, r2, #1
 800d8de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d8e0:	6878      	ldr	r0, [r7, #4]
 800d8e2:	f000 fe9d 	bl	800e620 <UART_CheckIdleState>
 800d8e6:	4603      	mov	r3, r0
}
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	3708      	adds	r7, #8
 800d8ec:	46bd      	mov	sp, r7
 800d8ee:	bd80      	pop	{r7, pc}

0800d8f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b08a      	sub	sp, #40	; 0x28
 800d8f4:	af02      	add	r7, sp, #8
 800d8f6:	60f8      	str	r0, [r7, #12]
 800d8f8:	60b9      	str	r1, [r7, #8]
 800d8fa:	603b      	str	r3, [r7, #0]
 800d8fc:	4613      	mov	r3, r2
 800d8fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d906:	2b20      	cmp	r3, #32
 800d908:	d17b      	bne.n	800da02 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800d90a:	68bb      	ldr	r3, [r7, #8]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d002      	beq.n	800d916 <HAL_UART_Transmit+0x26>
 800d910:	88fb      	ldrh	r3, [r7, #6]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d101      	bne.n	800d91a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800d916:	2301      	movs	r3, #1
 800d918:	e074      	b.n	800da04 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	2200      	movs	r2, #0
 800d91e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	2221      	movs	r2, #33	; 0x21
 800d926:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d92a:	f7f6 f8b9 	bl	8003aa0 <HAL_GetTick>
 800d92e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	88fa      	ldrh	r2, [r7, #6]
 800d934:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	88fa      	ldrh	r2, [r7, #6]
 800d93c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	689b      	ldr	r3, [r3, #8]
 800d944:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d948:	d108      	bne.n	800d95c <HAL_UART_Transmit+0x6c>
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	691b      	ldr	r3, [r3, #16]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d104      	bne.n	800d95c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800d952:	2300      	movs	r3, #0
 800d954:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d956:	68bb      	ldr	r3, [r7, #8]
 800d958:	61bb      	str	r3, [r7, #24]
 800d95a:	e003      	b.n	800d964 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800d95c:	68bb      	ldr	r3, [r7, #8]
 800d95e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d960:	2300      	movs	r3, #0
 800d962:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d964:	e030      	b.n	800d9c8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d966:	683b      	ldr	r3, [r7, #0]
 800d968:	9300      	str	r3, [sp, #0]
 800d96a:	697b      	ldr	r3, [r7, #20]
 800d96c:	2200      	movs	r2, #0
 800d96e:	2180      	movs	r1, #128	; 0x80
 800d970:	68f8      	ldr	r0, [r7, #12]
 800d972:	f000 feff 	bl	800e774 <UART_WaitOnFlagUntilTimeout>
 800d976:	4603      	mov	r3, r0
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d005      	beq.n	800d988 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	2220      	movs	r2, #32
 800d980:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800d984:	2303      	movs	r3, #3
 800d986:	e03d      	b.n	800da04 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800d988:	69fb      	ldr	r3, [r7, #28]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d10b      	bne.n	800d9a6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d98e:	69bb      	ldr	r3, [r7, #24]
 800d990:	881b      	ldrh	r3, [r3, #0]
 800d992:	461a      	mov	r2, r3
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d99c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d99e:	69bb      	ldr	r3, [r7, #24]
 800d9a0:	3302      	adds	r3, #2
 800d9a2:	61bb      	str	r3, [r7, #24]
 800d9a4:	e007      	b.n	800d9b6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d9a6:	69fb      	ldr	r3, [r7, #28]
 800d9a8:	781a      	ldrb	r2, [r3, #0]
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d9b0:	69fb      	ldr	r3, [r7, #28]
 800d9b2:	3301      	adds	r3, #1
 800d9b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d9bc:	b29b      	uxth	r3, r3
 800d9be:	3b01      	subs	r3, #1
 800d9c0:	b29a      	uxth	r2, r3
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d9ce:	b29b      	uxth	r3, r3
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d1c8      	bne.n	800d966 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d9d4:	683b      	ldr	r3, [r7, #0]
 800d9d6:	9300      	str	r3, [sp, #0]
 800d9d8:	697b      	ldr	r3, [r7, #20]
 800d9da:	2200      	movs	r2, #0
 800d9dc:	2140      	movs	r1, #64	; 0x40
 800d9de:	68f8      	ldr	r0, [r7, #12]
 800d9e0:	f000 fec8 	bl	800e774 <UART_WaitOnFlagUntilTimeout>
 800d9e4:	4603      	mov	r3, r0
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d005      	beq.n	800d9f6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	2220      	movs	r2, #32
 800d9ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800d9f2:	2303      	movs	r3, #3
 800d9f4:	e006      	b.n	800da04 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	2220      	movs	r2, #32
 800d9fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800d9fe:	2300      	movs	r3, #0
 800da00:	e000      	b.n	800da04 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800da02:	2302      	movs	r3, #2
  }
}
 800da04:	4618      	mov	r0, r3
 800da06:	3720      	adds	r7, #32
 800da08:	46bd      	mov	sp, r7
 800da0a:	bd80      	pop	{r7, pc}

0800da0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800da0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800da10:	b092      	sub	sp, #72	; 0x48
 800da12:	af00      	add	r7, sp, #0
 800da14:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800da16:	2300      	movs	r3, #0
 800da18:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800da1c:	697b      	ldr	r3, [r7, #20]
 800da1e:	689a      	ldr	r2, [r3, #8]
 800da20:	697b      	ldr	r3, [r7, #20]
 800da22:	691b      	ldr	r3, [r3, #16]
 800da24:	431a      	orrs	r2, r3
 800da26:	697b      	ldr	r3, [r7, #20]
 800da28:	695b      	ldr	r3, [r3, #20]
 800da2a:	431a      	orrs	r2, r3
 800da2c:	697b      	ldr	r3, [r7, #20]
 800da2e:	69db      	ldr	r3, [r3, #28]
 800da30:	4313      	orrs	r3, r2
 800da32:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800da34:	697b      	ldr	r3, [r7, #20]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	681a      	ldr	r2, [r3, #0]
 800da3a:	4bbe      	ldr	r3, [pc, #760]	; (800dd34 <UART_SetConfig+0x328>)
 800da3c:	4013      	ands	r3, r2
 800da3e:	697a      	ldr	r2, [r7, #20]
 800da40:	6812      	ldr	r2, [r2, #0]
 800da42:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800da44:	430b      	orrs	r3, r1
 800da46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800da48:	697b      	ldr	r3, [r7, #20]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	685b      	ldr	r3, [r3, #4]
 800da4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800da52:	697b      	ldr	r3, [r7, #20]
 800da54:	68da      	ldr	r2, [r3, #12]
 800da56:	697b      	ldr	r3, [r7, #20]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	430a      	orrs	r2, r1
 800da5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800da5e:	697b      	ldr	r3, [r7, #20]
 800da60:	699b      	ldr	r3, [r3, #24]
 800da62:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800da64:	697b      	ldr	r3, [r7, #20]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	4ab3      	ldr	r2, [pc, #716]	; (800dd38 <UART_SetConfig+0x32c>)
 800da6a:	4293      	cmp	r3, r2
 800da6c:	d004      	beq.n	800da78 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800da6e:	697b      	ldr	r3, [r7, #20]
 800da70:	6a1b      	ldr	r3, [r3, #32]
 800da72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800da74:	4313      	orrs	r3, r2
 800da76:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800da78:	697b      	ldr	r3, [r7, #20]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	689a      	ldr	r2, [r3, #8]
 800da7e:	4baf      	ldr	r3, [pc, #700]	; (800dd3c <UART_SetConfig+0x330>)
 800da80:	4013      	ands	r3, r2
 800da82:	697a      	ldr	r2, [r7, #20]
 800da84:	6812      	ldr	r2, [r2, #0]
 800da86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800da88:	430b      	orrs	r3, r1
 800da8a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800da8c:	697b      	ldr	r3, [r7, #20]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da92:	f023 010f 	bic.w	r1, r3, #15
 800da96:	697b      	ldr	r3, [r7, #20]
 800da98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800da9a:	697b      	ldr	r3, [r7, #20]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	430a      	orrs	r2, r1
 800daa0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800daa2:	697b      	ldr	r3, [r7, #20]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	4aa6      	ldr	r2, [pc, #664]	; (800dd40 <UART_SetConfig+0x334>)
 800daa8:	4293      	cmp	r3, r2
 800daaa:	d177      	bne.n	800db9c <UART_SetConfig+0x190>
 800daac:	4ba5      	ldr	r3, [pc, #660]	; (800dd44 <UART_SetConfig+0x338>)
 800daae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dab0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dab4:	2b28      	cmp	r3, #40	; 0x28
 800dab6:	d86d      	bhi.n	800db94 <UART_SetConfig+0x188>
 800dab8:	a201      	add	r2, pc, #4	; (adr r2, 800dac0 <UART_SetConfig+0xb4>)
 800daba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dabe:	bf00      	nop
 800dac0:	0800db65 	.word	0x0800db65
 800dac4:	0800db95 	.word	0x0800db95
 800dac8:	0800db95 	.word	0x0800db95
 800dacc:	0800db95 	.word	0x0800db95
 800dad0:	0800db95 	.word	0x0800db95
 800dad4:	0800db95 	.word	0x0800db95
 800dad8:	0800db95 	.word	0x0800db95
 800dadc:	0800db95 	.word	0x0800db95
 800dae0:	0800db6d 	.word	0x0800db6d
 800dae4:	0800db95 	.word	0x0800db95
 800dae8:	0800db95 	.word	0x0800db95
 800daec:	0800db95 	.word	0x0800db95
 800daf0:	0800db95 	.word	0x0800db95
 800daf4:	0800db95 	.word	0x0800db95
 800daf8:	0800db95 	.word	0x0800db95
 800dafc:	0800db95 	.word	0x0800db95
 800db00:	0800db75 	.word	0x0800db75
 800db04:	0800db95 	.word	0x0800db95
 800db08:	0800db95 	.word	0x0800db95
 800db0c:	0800db95 	.word	0x0800db95
 800db10:	0800db95 	.word	0x0800db95
 800db14:	0800db95 	.word	0x0800db95
 800db18:	0800db95 	.word	0x0800db95
 800db1c:	0800db95 	.word	0x0800db95
 800db20:	0800db7d 	.word	0x0800db7d
 800db24:	0800db95 	.word	0x0800db95
 800db28:	0800db95 	.word	0x0800db95
 800db2c:	0800db95 	.word	0x0800db95
 800db30:	0800db95 	.word	0x0800db95
 800db34:	0800db95 	.word	0x0800db95
 800db38:	0800db95 	.word	0x0800db95
 800db3c:	0800db95 	.word	0x0800db95
 800db40:	0800db85 	.word	0x0800db85
 800db44:	0800db95 	.word	0x0800db95
 800db48:	0800db95 	.word	0x0800db95
 800db4c:	0800db95 	.word	0x0800db95
 800db50:	0800db95 	.word	0x0800db95
 800db54:	0800db95 	.word	0x0800db95
 800db58:	0800db95 	.word	0x0800db95
 800db5c:	0800db95 	.word	0x0800db95
 800db60:	0800db8d 	.word	0x0800db8d
 800db64:	2301      	movs	r3, #1
 800db66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db6a:	e222      	b.n	800dfb2 <UART_SetConfig+0x5a6>
 800db6c:	2304      	movs	r3, #4
 800db6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db72:	e21e      	b.n	800dfb2 <UART_SetConfig+0x5a6>
 800db74:	2308      	movs	r3, #8
 800db76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db7a:	e21a      	b.n	800dfb2 <UART_SetConfig+0x5a6>
 800db7c:	2310      	movs	r3, #16
 800db7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db82:	e216      	b.n	800dfb2 <UART_SetConfig+0x5a6>
 800db84:	2320      	movs	r3, #32
 800db86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db8a:	e212      	b.n	800dfb2 <UART_SetConfig+0x5a6>
 800db8c:	2340      	movs	r3, #64	; 0x40
 800db8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db92:	e20e      	b.n	800dfb2 <UART_SetConfig+0x5a6>
 800db94:	2380      	movs	r3, #128	; 0x80
 800db96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db9a:	e20a      	b.n	800dfb2 <UART_SetConfig+0x5a6>
 800db9c:	697b      	ldr	r3, [r7, #20]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	4a69      	ldr	r2, [pc, #420]	; (800dd48 <UART_SetConfig+0x33c>)
 800dba2:	4293      	cmp	r3, r2
 800dba4:	d130      	bne.n	800dc08 <UART_SetConfig+0x1fc>
 800dba6:	4b67      	ldr	r3, [pc, #412]	; (800dd44 <UART_SetConfig+0x338>)
 800dba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dbaa:	f003 0307 	and.w	r3, r3, #7
 800dbae:	2b05      	cmp	r3, #5
 800dbb0:	d826      	bhi.n	800dc00 <UART_SetConfig+0x1f4>
 800dbb2:	a201      	add	r2, pc, #4	; (adr r2, 800dbb8 <UART_SetConfig+0x1ac>)
 800dbb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbb8:	0800dbd1 	.word	0x0800dbd1
 800dbbc:	0800dbd9 	.word	0x0800dbd9
 800dbc0:	0800dbe1 	.word	0x0800dbe1
 800dbc4:	0800dbe9 	.word	0x0800dbe9
 800dbc8:	0800dbf1 	.word	0x0800dbf1
 800dbcc:	0800dbf9 	.word	0x0800dbf9
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbd6:	e1ec      	b.n	800dfb2 <UART_SetConfig+0x5a6>
 800dbd8:	2304      	movs	r3, #4
 800dbda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbde:	e1e8      	b.n	800dfb2 <UART_SetConfig+0x5a6>
 800dbe0:	2308      	movs	r3, #8
 800dbe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbe6:	e1e4      	b.n	800dfb2 <UART_SetConfig+0x5a6>
 800dbe8:	2310      	movs	r3, #16
 800dbea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbee:	e1e0      	b.n	800dfb2 <UART_SetConfig+0x5a6>
 800dbf0:	2320      	movs	r3, #32
 800dbf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbf6:	e1dc      	b.n	800dfb2 <UART_SetConfig+0x5a6>
 800dbf8:	2340      	movs	r3, #64	; 0x40
 800dbfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbfe:	e1d8      	b.n	800dfb2 <UART_SetConfig+0x5a6>
 800dc00:	2380      	movs	r3, #128	; 0x80
 800dc02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc06:	e1d4      	b.n	800dfb2 <UART_SetConfig+0x5a6>
 800dc08:	697b      	ldr	r3, [r7, #20]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	4a4f      	ldr	r2, [pc, #316]	; (800dd4c <UART_SetConfig+0x340>)
 800dc0e:	4293      	cmp	r3, r2
 800dc10:	d130      	bne.n	800dc74 <UART_SetConfig+0x268>
 800dc12:	4b4c      	ldr	r3, [pc, #304]	; (800dd44 <UART_SetConfig+0x338>)
 800dc14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc16:	f003 0307 	and.w	r3, r3, #7
 800dc1a:	2b05      	cmp	r3, #5
 800dc1c:	d826      	bhi.n	800dc6c <UART_SetConfig+0x260>
 800dc1e:	a201      	add	r2, pc, #4	; (adr r2, 800dc24 <UART_SetConfig+0x218>)
 800dc20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc24:	0800dc3d 	.word	0x0800dc3d
 800dc28:	0800dc45 	.word	0x0800dc45
 800dc2c:	0800dc4d 	.word	0x0800dc4d
 800dc30:	0800dc55 	.word	0x0800dc55
 800dc34:	0800dc5d 	.word	0x0800dc5d
 800dc38:	0800dc65 	.word	0x0800dc65
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc42:	e1b6      	b.n	800dfb2 <UART_SetConfig+0x5a6>
 800dc44:	2304      	movs	r3, #4
 800dc46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc4a:	e1b2      	b.n	800dfb2 <UART_SetConfig+0x5a6>
 800dc4c:	2308      	movs	r3, #8
 800dc4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc52:	e1ae      	b.n	800dfb2 <UART_SetConfig+0x5a6>
 800dc54:	2310      	movs	r3, #16
 800dc56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc5a:	e1aa      	b.n	800dfb2 <UART_SetConfig+0x5a6>
 800dc5c:	2320      	movs	r3, #32
 800dc5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc62:	e1a6      	b.n	800dfb2 <UART_SetConfig+0x5a6>
 800dc64:	2340      	movs	r3, #64	; 0x40
 800dc66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc6a:	e1a2      	b.n	800dfb2 <UART_SetConfig+0x5a6>
 800dc6c:	2380      	movs	r3, #128	; 0x80
 800dc6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc72:	e19e      	b.n	800dfb2 <UART_SetConfig+0x5a6>
 800dc74:	697b      	ldr	r3, [r7, #20]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	4a35      	ldr	r2, [pc, #212]	; (800dd50 <UART_SetConfig+0x344>)
 800dc7a:	4293      	cmp	r3, r2
 800dc7c:	d130      	bne.n	800dce0 <UART_SetConfig+0x2d4>
 800dc7e:	4b31      	ldr	r3, [pc, #196]	; (800dd44 <UART_SetConfig+0x338>)
 800dc80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc82:	f003 0307 	and.w	r3, r3, #7
 800dc86:	2b05      	cmp	r3, #5
 800dc88:	d826      	bhi.n	800dcd8 <UART_SetConfig+0x2cc>
 800dc8a:	a201      	add	r2, pc, #4	; (adr r2, 800dc90 <UART_SetConfig+0x284>)
 800dc8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc90:	0800dca9 	.word	0x0800dca9
 800dc94:	0800dcb1 	.word	0x0800dcb1
 800dc98:	0800dcb9 	.word	0x0800dcb9
 800dc9c:	0800dcc1 	.word	0x0800dcc1
 800dca0:	0800dcc9 	.word	0x0800dcc9
 800dca4:	0800dcd1 	.word	0x0800dcd1
 800dca8:	2300      	movs	r3, #0
 800dcaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcae:	e180      	b.n	800dfb2 <UART_SetConfig+0x5a6>
 800dcb0:	2304      	movs	r3, #4
 800dcb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcb6:	e17c      	b.n	800dfb2 <UART_SetConfig+0x5a6>
 800dcb8:	2308      	movs	r3, #8
 800dcba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcbe:	e178      	b.n	800dfb2 <UART_SetConfig+0x5a6>
 800dcc0:	2310      	movs	r3, #16
 800dcc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcc6:	e174      	b.n	800dfb2 <UART_SetConfig+0x5a6>
 800dcc8:	2320      	movs	r3, #32
 800dcca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcce:	e170      	b.n	800dfb2 <UART_SetConfig+0x5a6>
 800dcd0:	2340      	movs	r3, #64	; 0x40
 800dcd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcd6:	e16c      	b.n	800dfb2 <UART_SetConfig+0x5a6>
 800dcd8:	2380      	movs	r3, #128	; 0x80
 800dcda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcde:	e168      	b.n	800dfb2 <UART_SetConfig+0x5a6>
 800dce0:	697b      	ldr	r3, [r7, #20]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	4a1b      	ldr	r2, [pc, #108]	; (800dd54 <UART_SetConfig+0x348>)
 800dce6:	4293      	cmp	r3, r2
 800dce8:	d142      	bne.n	800dd70 <UART_SetConfig+0x364>
 800dcea:	4b16      	ldr	r3, [pc, #88]	; (800dd44 <UART_SetConfig+0x338>)
 800dcec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dcee:	f003 0307 	and.w	r3, r3, #7
 800dcf2:	2b05      	cmp	r3, #5
 800dcf4:	d838      	bhi.n	800dd68 <UART_SetConfig+0x35c>
 800dcf6:	a201      	add	r2, pc, #4	; (adr r2, 800dcfc <UART_SetConfig+0x2f0>)
 800dcf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcfc:	0800dd15 	.word	0x0800dd15
 800dd00:	0800dd1d 	.word	0x0800dd1d
 800dd04:	0800dd25 	.word	0x0800dd25
 800dd08:	0800dd2d 	.word	0x0800dd2d
 800dd0c:	0800dd59 	.word	0x0800dd59
 800dd10:	0800dd61 	.word	0x0800dd61
 800dd14:	2300      	movs	r3, #0
 800dd16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd1a:	e14a      	b.n	800dfb2 <UART_SetConfig+0x5a6>
 800dd1c:	2304      	movs	r3, #4
 800dd1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd22:	e146      	b.n	800dfb2 <UART_SetConfig+0x5a6>
 800dd24:	2308      	movs	r3, #8
 800dd26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd2a:	e142      	b.n	800dfb2 <UART_SetConfig+0x5a6>
 800dd2c:	2310      	movs	r3, #16
 800dd2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd32:	e13e      	b.n	800dfb2 <UART_SetConfig+0x5a6>
 800dd34:	cfff69f3 	.word	0xcfff69f3
 800dd38:	58000c00 	.word	0x58000c00
 800dd3c:	11fff4ff 	.word	0x11fff4ff
 800dd40:	40011000 	.word	0x40011000
 800dd44:	58024400 	.word	0x58024400
 800dd48:	40004400 	.word	0x40004400
 800dd4c:	40004800 	.word	0x40004800
 800dd50:	40004c00 	.word	0x40004c00
 800dd54:	40005000 	.word	0x40005000
 800dd58:	2320      	movs	r3, #32
 800dd5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd5e:	e128      	b.n	800dfb2 <UART_SetConfig+0x5a6>
 800dd60:	2340      	movs	r3, #64	; 0x40
 800dd62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd66:	e124      	b.n	800dfb2 <UART_SetConfig+0x5a6>
 800dd68:	2380      	movs	r3, #128	; 0x80
 800dd6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd6e:	e120      	b.n	800dfb2 <UART_SetConfig+0x5a6>
 800dd70:	697b      	ldr	r3, [r7, #20]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	4acb      	ldr	r2, [pc, #812]	; (800e0a4 <UART_SetConfig+0x698>)
 800dd76:	4293      	cmp	r3, r2
 800dd78:	d176      	bne.n	800de68 <UART_SetConfig+0x45c>
 800dd7a:	4bcb      	ldr	r3, [pc, #812]	; (800e0a8 <UART_SetConfig+0x69c>)
 800dd7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dd82:	2b28      	cmp	r3, #40	; 0x28
 800dd84:	d86c      	bhi.n	800de60 <UART_SetConfig+0x454>
 800dd86:	a201      	add	r2, pc, #4	; (adr r2, 800dd8c <UART_SetConfig+0x380>)
 800dd88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd8c:	0800de31 	.word	0x0800de31
 800dd90:	0800de61 	.word	0x0800de61
 800dd94:	0800de61 	.word	0x0800de61
 800dd98:	0800de61 	.word	0x0800de61
 800dd9c:	0800de61 	.word	0x0800de61
 800dda0:	0800de61 	.word	0x0800de61
 800dda4:	0800de61 	.word	0x0800de61
 800dda8:	0800de61 	.word	0x0800de61
 800ddac:	0800de39 	.word	0x0800de39
 800ddb0:	0800de61 	.word	0x0800de61
 800ddb4:	0800de61 	.word	0x0800de61
 800ddb8:	0800de61 	.word	0x0800de61
 800ddbc:	0800de61 	.word	0x0800de61
 800ddc0:	0800de61 	.word	0x0800de61
 800ddc4:	0800de61 	.word	0x0800de61
 800ddc8:	0800de61 	.word	0x0800de61
 800ddcc:	0800de41 	.word	0x0800de41
 800ddd0:	0800de61 	.word	0x0800de61
 800ddd4:	0800de61 	.word	0x0800de61
 800ddd8:	0800de61 	.word	0x0800de61
 800dddc:	0800de61 	.word	0x0800de61
 800dde0:	0800de61 	.word	0x0800de61
 800dde4:	0800de61 	.word	0x0800de61
 800dde8:	0800de61 	.word	0x0800de61
 800ddec:	0800de49 	.word	0x0800de49
 800ddf0:	0800de61 	.word	0x0800de61
 800ddf4:	0800de61 	.word	0x0800de61
 800ddf8:	0800de61 	.word	0x0800de61
 800ddfc:	0800de61 	.word	0x0800de61
 800de00:	0800de61 	.word	0x0800de61
 800de04:	0800de61 	.word	0x0800de61
 800de08:	0800de61 	.word	0x0800de61
 800de0c:	0800de51 	.word	0x0800de51
 800de10:	0800de61 	.word	0x0800de61
 800de14:	0800de61 	.word	0x0800de61
 800de18:	0800de61 	.word	0x0800de61
 800de1c:	0800de61 	.word	0x0800de61
 800de20:	0800de61 	.word	0x0800de61
 800de24:	0800de61 	.word	0x0800de61
 800de28:	0800de61 	.word	0x0800de61
 800de2c:	0800de59 	.word	0x0800de59
 800de30:	2301      	movs	r3, #1
 800de32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de36:	e0bc      	b.n	800dfb2 <UART_SetConfig+0x5a6>
 800de38:	2304      	movs	r3, #4
 800de3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de3e:	e0b8      	b.n	800dfb2 <UART_SetConfig+0x5a6>
 800de40:	2308      	movs	r3, #8
 800de42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de46:	e0b4      	b.n	800dfb2 <UART_SetConfig+0x5a6>
 800de48:	2310      	movs	r3, #16
 800de4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de4e:	e0b0      	b.n	800dfb2 <UART_SetConfig+0x5a6>
 800de50:	2320      	movs	r3, #32
 800de52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de56:	e0ac      	b.n	800dfb2 <UART_SetConfig+0x5a6>
 800de58:	2340      	movs	r3, #64	; 0x40
 800de5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de5e:	e0a8      	b.n	800dfb2 <UART_SetConfig+0x5a6>
 800de60:	2380      	movs	r3, #128	; 0x80
 800de62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de66:	e0a4      	b.n	800dfb2 <UART_SetConfig+0x5a6>
 800de68:	697b      	ldr	r3, [r7, #20]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	4a8f      	ldr	r2, [pc, #572]	; (800e0ac <UART_SetConfig+0x6a0>)
 800de6e:	4293      	cmp	r3, r2
 800de70:	d130      	bne.n	800ded4 <UART_SetConfig+0x4c8>
 800de72:	4b8d      	ldr	r3, [pc, #564]	; (800e0a8 <UART_SetConfig+0x69c>)
 800de74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de76:	f003 0307 	and.w	r3, r3, #7
 800de7a:	2b05      	cmp	r3, #5
 800de7c:	d826      	bhi.n	800decc <UART_SetConfig+0x4c0>
 800de7e:	a201      	add	r2, pc, #4	; (adr r2, 800de84 <UART_SetConfig+0x478>)
 800de80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de84:	0800de9d 	.word	0x0800de9d
 800de88:	0800dea5 	.word	0x0800dea5
 800de8c:	0800dead 	.word	0x0800dead
 800de90:	0800deb5 	.word	0x0800deb5
 800de94:	0800debd 	.word	0x0800debd
 800de98:	0800dec5 	.word	0x0800dec5
 800de9c:	2300      	movs	r3, #0
 800de9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dea2:	e086      	b.n	800dfb2 <UART_SetConfig+0x5a6>
 800dea4:	2304      	movs	r3, #4
 800dea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deaa:	e082      	b.n	800dfb2 <UART_SetConfig+0x5a6>
 800deac:	2308      	movs	r3, #8
 800deae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deb2:	e07e      	b.n	800dfb2 <UART_SetConfig+0x5a6>
 800deb4:	2310      	movs	r3, #16
 800deb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deba:	e07a      	b.n	800dfb2 <UART_SetConfig+0x5a6>
 800debc:	2320      	movs	r3, #32
 800debe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dec2:	e076      	b.n	800dfb2 <UART_SetConfig+0x5a6>
 800dec4:	2340      	movs	r3, #64	; 0x40
 800dec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deca:	e072      	b.n	800dfb2 <UART_SetConfig+0x5a6>
 800decc:	2380      	movs	r3, #128	; 0x80
 800dece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ded2:	e06e      	b.n	800dfb2 <UART_SetConfig+0x5a6>
 800ded4:	697b      	ldr	r3, [r7, #20]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	4a75      	ldr	r2, [pc, #468]	; (800e0b0 <UART_SetConfig+0x6a4>)
 800deda:	4293      	cmp	r3, r2
 800dedc:	d130      	bne.n	800df40 <UART_SetConfig+0x534>
 800dede:	4b72      	ldr	r3, [pc, #456]	; (800e0a8 <UART_SetConfig+0x69c>)
 800dee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dee2:	f003 0307 	and.w	r3, r3, #7
 800dee6:	2b05      	cmp	r3, #5
 800dee8:	d826      	bhi.n	800df38 <UART_SetConfig+0x52c>
 800deea:	a201      	add	r2, pc, #4	; (adr r2, 800def0 <UART_SetConfig+0x4e4>)
 800deec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800def0:	0800df09 	.word	0x0800df09
 800def4:	0800df11 	.word	0x0800df11
 800def8:	0800df19 	.word	0x0800df19
 800defc:	0800df21 	.word	0x0800df21
 800df00:	0800df29 	.word	0x0800df29
 800df04:	0800df31 	.word	0x0800df31
 800df08:	2300      	movs	r3, #0
 800df0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df0e:	e050      	b.n	800dfb2 <UART_SetConfig+0x5a6>
 800df10:	2304      	movs	r3, #4
 800df12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df16:	e04c      	b.n	800dfb2 <UART_SetConfig+0x5a6>
 800df18:	2308      	movs	r3, #8
 800df1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df1e:	e048      	b.n	800dfb2 <UART_SetConfig+0x5a6>
 800df20:	2310      	movs	r3, #16
 800df22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df26:	e044      	b.n	800dfb2 <UART_SetConfig+0x5a6>
 800df28:	2320      	movs	r3, #32
 800df2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df2e:	e040      	b.n	800dfb2 <UART_SetConfig+0x5a6>
 800df30:	2340      	movs	r3, #64	; 0x40
 800df32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df36:	e03c      	b.n	800dfb2 <UART_SetConfig+0x5a6>
 800df38:	2380      	movs	r3, #128	; 0x80
 800df3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df3e:	e038      	b.n	800dfb2 <UART_SetConfig+0x5a6>
 800df40:	697b      	ldr	r3, [r7, #20]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	4a5b      	ldr	r2, [pc, #364]	; (800e0b4 <UART_SetConfig+0x6a8>)
 800df46:	4293      	cmp	r3, r2
 800df48:	d130      	bne.n	800dfac <UART_SetConfig+0x5a0>
 800df4a:	4b57      	ldr	r3, [pc, #348]	; (800e0a8 <UART_SetConfig+0x69c>)
 800df4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800df4e:	f003 0307 	and.w	r3, r3, #7
 800df52:	2b05      	cmp	r3, #5
 800df54:	d826      	bhi.n	800dfa4 <UART_SetConfig+0x598>
 800df56:	a201      	add	r2, pc, #4	; (adr r2, 800df5c <UART_SetConfig+0x550>)
 800df58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df5c:	0800df75 	.word	0x0800df75
 800df60:	0800df7d 	.word	0x0800df7d
 800df64:	0800df85 	.word	0x0800df85
 800df68:	0800df8d 	.word	0x0800df8d
 800df6c:	0800df95 	.word	0x0800df95
 800df70:	0800df9d 	.word	0x0800df9d
 800df74:	2302      	movs	r3, #2
 800df76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df7a:	e01a      	b.n	800dfb2 <UART_SetConfig+0x5a6>
 800df7c:	2304      	movs	r3, #4
 800df7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df82:	e016      	b.n	800dfb2 <UART_SetConfig+0x5a6>
 800df84:	2308      	movs	r3, #8
 800df86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df8a:	e012      	b.n	800dfb2 <UART_SetConfig+0x5a6>
 800df8c:	2310      	movs	r3, #16
 800df8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df92:	e00e      	b.n	800dfb2 <UART_SetConfig+0x5a6>
 800df94:	2320      	movs	r3, #32
 800df96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df9a:	e00a      	b.n	800dfb2 <UART_SetConfig+0x5a6>
 800df9c:	2340      	movs	r3, #64	; 0x40
 800df9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfa2:	e006      	b.n	800dfb2 <UART_SetConfig+0x5a6>
 800dfa4:	2380      	movs	r3, #128	; 0x80
 800dfa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfaa:	e002      	b.n	800dfb2 <UART_SetConfig+0x5a6>
 800dfac:	2380      	movs	r3, #128	; 0x80
 800dfae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800dfb2:	697b      	ldr	r3, [r7, #20]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	4a3f      	ldr	r2, [pc, #252]	; (800e0b4 <UART_SetConfig+0x6a8>)
 800dfb8:	4293      	cmp	r3, r2
 800dfba:	f040 80f8 	bne.w	800e1ae <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800dfbe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800dfc2:	2b20      	cmp	r3, #32
 800dfc4:	dc46      	bgt.n	800e054 <UART_SetConfig+0x648>
 800dfc6:	2b02      	cmp	r3, #2
 800dfc8:	f2c0 8082 	blt.w	800e0d0 <UART_SetConfig+0x6c4>
 800dfcc:	3b02      	subs	r3, #2
 800dfce:	2b1e      	cmp	r3, #30
 800dfd0:	d87e      	bhi.n	800e0d0 <UART_SetConfig+0x6c4>
 800dfd2:	a201      	add	r2, pc, #4	; (adr r2, 800dfd8 <UART_SetConfig+0x5cc>)
 800dfd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfd8:	0800e05b 	.word	0x0800e05b
 800dfdc:	0800e0d1 	.word	0x0800e0d1
 800dfe0:	0800e063 	.word	0x0800e063
 800dfe4:	0800e0d1 	.word	0x0800e0d1
 800dfe8:	0800e0d1 	.word	0x0800e0d1
 800dfec:	0800e0d1 	.word	0x0800e0d1
 800dff0:	0800e073 	.word	0x0800e073
 800dff4:	0800e0d1 	.word	0x0800e0d1
 800dff8:	0800e0d1 	.word	0x0800e0d1
 800dffc:	0800e0d1 	.word	0x0800e0d1
 800e000:	0800e0d1 	.word	0x0800e0d1
 800e004:	0800e0d1 	.word	0x0800e0d1
 800e008:	0800e0d1 	.word	0x0800e0d1
 800e00c:	0800e0d1 	.word	0x0800e0d1
 800e010:	0800e083 	.word	0x0800e083
 800e014:	0800e0d1 	.word	0x0800e0d1
 800e018:	0800e0d1 	.word	0x0800e0d1
 800e01c:	0800e0d1 	.word	0x0800e0d1
 800e020:	0800e0d1 	.word	0x0800e0d1
 800e024:	0800e0d1 	.word	0x0800e0d1
 800e028:	0800e0d1 	.word	0x0800e0d1
 800e02c:	0800e0d1 	.word	0x0800e0d1
 800e030:	0800e0d1 	.word	0x0800e0d1
 800e034:	0800e0d1 	.word	0x0800e0d1
 800e038:	0800e0d1 	.word	0x0800e0d1
 800e03c:	0800e0d1 	.word	0x0800e0d1
 800e040:	0800e0d1 	.word	0x0800e0d1
 800e044:	0800e0d1 	.word	0x0800e0d1
 800e048:	0800e0d1 	.word	0x0800e0d1
 800e04c:	0800e0d1 	.word	0x0800e0d1
 800e050:	0800e0c3 	.word	0x0800e0c3
 800e054:	2b40      	cmp	r3, #64	; 0x40
 800e056:	d037      	beq.n	800e0c8 <UART_SetConfig+0x6bc>
 800e058:	e03a      	b.n	800e0d0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e05a:	f7fe fb19 	bl	800c690 <HAL_RCCEx_GetD3PCLK1Freq>
 800e05e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e060:	e03c      	b.n	800e0dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e062:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e066:	4618      	mov	r0, r3
 800e068:	f7fe fb28 	bl	800c6bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e06c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e06e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e070:	e034      	b.n	800e0dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e072:	f107 0318 	add.w	r3, r7, #24
 800e076:	4618      	mov	r0, r3
 800e078:	f7fe fc74 	bl	800c964 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e07c:	69fb      	ldr	r3, [r7, #28]
 800e07e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e080:	e02c      	b.n	800e0dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e082:	4b09      	ldr	r3, [pc, #36]	; (800e0a8 <UART_SetConfig+0x69c>)
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	f003 0320 	and.w	r3, r3, #32
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d016      	beq.n	800e0bc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e08e:	4b06      	ldr	r3, [pc, #24]	; (800e0a8 <UART_SetConfig+0x69c>)
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	08db      	lsrs	r3, r3, #3
 800e094:	f003 0303 	and.w	r3, r3, #3
 800e098:	4a07      	ldr	r2, [pc, #28]	; (800e0b8 <UART_SetConfig+0x6ac>)
 800e09a:	fa22 f303 	lsr.w	r3, r2, r3
 800e09e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e0a0:	e01c      	b.n	800e0dc <UART_SetConfig+0x6d0>
 800e0a2:	bf00      	nop
 800e0a4:	40011400 	.word	0x40011400
 800e0a8:	58024400 	.word	0x58024400
 800e0ac:	40007800 	.word	0x40007800
 800e0b0:	40007c00 	.word	0x40007c00
 800e0b4:	58000c00 	.word	0x58000c00
 800e0b8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800e0bc:	4b9d      	ldr	r3, [pc, #628]	; (800e334 <UART_SetConfig+0x928>)
 800e0be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e0c0:	e00c      	b.n	800e0dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e0c2:	4b9d      	ldr	r3, [pc, #628]	; (800e338 <UART_SetConfig+0x92c>)
 800e0c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e0c6:	e009      	b.n	800e0dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e0c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e0cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e0ce:	e005      	b.n	800e0dc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800e0d0:	2300      	movs	r3, #0
 800e0d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e0d4:	2301      	movs	r3, #1
 800e0d6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e0da:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e0dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	f000 81de 	beq.w	800e4a0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e0e4:	697b      	ldr	r3, [r7, #20]
 800e0e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0e8:	4a94      	ldr	r2, [pc, #592]	; (800e33c <UART_SetConfig+0x930>)
 800e0ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e0ee:	461a      	mov	r2, r3
 800e0f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0f2:	fbb3 f3f2 	udiv	r3, r3, r2
 800e0f6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e0f8:	697b      	ldr	r3, [r7, #20]
 800e0fa:	685a      	ldr	r2, [r3, #4]
 800e0fc:	4613      	mov	r3, r2
 800e0fe:	005b      	lsls	r3, r3, #1
 800e100:	4413      	add	r3, r2
 800e102:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e104:	429a      	cmp	r2, r3
 800e106:	d305      	bcc.n	800e114 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e108:	697b      	ldr	r3, [r7, #20]
 800e10a:	685b      	ldr	r3, [r3, #4]
 800e10c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e10e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e110:	429a      	cmp	r2, r3
 800e112:	d903      	bls.n	800e11c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800e114:	2301      	movs	r3, #1
 800e116:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e11a:	e1c1      	b.n	800e4a0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e11c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e11e:	2200      	movs	r2, #0
 800e120:	60bb      	str	r3, [r7, #8]
 800e122:	60fa      	str	r2, [r7, #12]
 800e124:	697b      	ldr	r3, [r7, #20]
 800e126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e128:	4a84      	ldr	r2, [pc, #528]	; (800e33c <UART_SetConfig+0x930>)
 800e12a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e12e:	b29b      	uxth	r3, r3
 800e130:	2200      	movs	r2, #0
 800e132:	603b      	str	r3, [r7, #0]
 800e134:	607a      	str	r2, [r7, #4]
 800e136:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e13a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e13e:	f7f3 fbd7 	bl	80018f0 <__aeabi_uldivmod>
 800e142:	4602      	mov	r2, r0
 800e144:	460b      	mov	r3, r1
 800e146:	4610      	mov	r0, r2
 800e148:	4619      	mov	r1, r3
 800e14a:	f04f 0200 	mov.w	r2, #0
 800e14e:	f04f 0300 	mov.w	r3, #0
 800e152:	020b      	lsls	r3, r1, #8
 800e154:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e158:	0202      	lsls	r2, r0, #8
 800e15a:	6979      	ldr	r1, [r7, #20]
 800e15c:	6849      	ldr	r1, [r1, #4]
 800e15e:	0849      	lsrs	r1, r1, #1
 800e160:	2000      	movs	r0, #0
 800e162:	460c      	mov	r4, r1
 800e164:	4605      	mov	r5, r0
 800e166:	eb12 0804 	adds.w	r8, r2, r4
 800e16a:	eb43 0905 	adc.w	r9, r3, r5
 800e16e:	697b      	ldr	r3, [r7, #20]
 800e170:	685b      	ldr	r3, [r3, #4]
 800e172:	2200      	movs	r2, #0
 800e174:	469a      	mov	sl, r3
 800e176:	4693      	mov	fp, r2
 800e178:	4652      	mov	r2, sl
 800e17a:	465b      	mov	r3, fp
 800e17c:	4640      	mov	r0, r8
 800e17e:	4649      	mov	r1, r9
 800e180:	f7f3 fbb6 	bl	80018f0 <__aeabi_uldivmod>
 800e184:	4602      	mov	r2, r0
 800e186:	460b      	mov	r3, r1
 800e188:	4613      	mov	r3, r2
 800e18a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e18c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e18e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e192:	d308      	bcc.n	800e1a6 <UART_SetConfig+0x79a>
 800e194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e196:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e19a:	d204      	bcs.n	800e1a6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800e19c:	697b      	ldr	r3, [r7, #20]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e1a2:	60da      	str	r2, [r3, #12]
 800e1a4:	e17c      	b.n	800e4a0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800e1a6:	2301      	movs	r3, #1
 800e1a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e1ac:	e178      	b.n	800e4a0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e1ae:	697b      	ldr	r3, [r7, #20]
 800e1b0:	69db      	ldr	r3, [r3, #28]
 800e1b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e1b6:	f040 80c5 	bne.w	800e344 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800e1ba:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e1be:	2b20      	cmp	r3, #32
 800e1c0:	dc48      	bgt.n	800e254 <UART_SetConfig+0x848>
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	db7b      	blt.n	800e2be <UART_SetConfig+0x8b2>
 800e1c6:	2b20      	cmp	r3, #32
 800e1c8:	d879      	bhi.n	800e2be <UART_SetConfig+0x8b2>
 800e1ca:	a201      	add	r2, pc, #4	; (adr r2, 800e1d0 <UART_SetConfig+0x7c4>)
 800e1cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1d0:	0800e25b 	.word	0x0800e25b
 800e1d4:	0800e263 	.word	0x0800e263
 800e1d8:	0800e2bf 	.word	0x0800e2bf
 800e1dc:	0800e2bf 	.word	0x0800e2bf
 800e1e0:	0800e26b 	.word	0x0800e26b
 800e1e4:	0800e2bf 	.word	0x0800e2bf
 800e1e8:	0800e2bf 	.word	0x0800e2bf
 800e1ec:	0800e2bf 	.word	0x0800e2bf
 800e1f0:	0800e27b 	.word	0x0800e27b
 800e1f4:	0800e2bf 	.word	0x0800e2bf
 800e1f8:	0800e2bf 	.word	0x0800e2bf
 800e1fc:	0800e2bf 	.word	0x0800e2bf
 800e200:	0800e2bf 	.word	0x0800e2bf
 800e204:	0800e2bf 	.word	0x0800e2bf
 800e208:	0800e2bf 	.word	0x0800e2bf
 800e20c:	0800e2bf 	.word	0x0800e2bf
 800e210:	0800e28b 	.word	0x0800e28b
 800e214:	0800e2bf 	.word	0x0800e2bf
 800e218:	0800e2bf 	.word	0x0800e2bf
 800e21c:	0800e2bf 	.word	0x0800e2bf
 800e220:	0800e2bf 	.word	0x0800e2bf
 800e224:	0800e2bf 	.word	0x0800e2bf
 800e228:	0800e2bf 	.word	0x0800e2bf
 800e22c:	0800e2bf 	.word	0x0800e2bf
 800e230:	0800e2bf 	.word	0x0800e2bf
 800e234:	0800e2bf 	.word	0x0800e2bf
 800e238:	0800e2bf 	.word	0x0800e2bf
 800e23c:	0800e2bf 	.word	0x0800e2bf
 800e240:	0800e2bf 	.word	0x0800e2bf
 800e244:	0800e2bf 	.word	0x0800e2bf
 800e248:	0800e2bf 	.word	0x0800e2bf
 800e24c:	0800e2bf 	.word	0x0800e2bf
 800e250:	0800e2b1 	.word	0x0800e2b1
 800e254:	2b40      	cmp	r3, #64	; 0x40
 800e256:	d02e      	beq.n	800e2b6 <UART_SetConfig+0x8aa>
 800e258:	e031      	b.n	800e2be <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e25a:	f7fc fa47 	bl	800a6ec <HAL_RCC_GetPCLK1Freq>
 800e25e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e260:	e033      	b.n	800e2ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e262:	f7fc fa59 	bl	800a718 <HAL_RCC_GetPCLK2Freq>
 800e266:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e268:	e02f      	b.n	800e2ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e26a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e26e:	4618      	mov	r0, r3
 800e270:	f7fe fa24 	bl	800c6bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e276:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e278:	e027      	b.n	800e2ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e27a:	f107 0318 	add.w	r3, r7, #24
 800e27e:	4618      	mov	r0, r3
 800e280:	f7fe fb70 	bl	800c964 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e284:	69fb      	ldr	r3, [r7, #28]
 800e286:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e288:	e01f      	b.n	800e2ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e28a:	4b2d      	ldr	r3, [pc, #180]	; (800e340 <UART_SetConfig+0x934>)
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	f003 0320 	and.w	r3, r3, #32
 800e292:	2b00      	cmp	r3, #0
 800e294:	d009      	beq.n	800e2aa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e296:	4b2a      	ldr	r3, [pc, #168]	; (800e340 <UART_SetConfig+0x934>)
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	08db      	lsrs	r3, r3, #3
 800e29c:	f003 0303 	and.w	r3, r3, #3
 800e2a0:	4a24      	ldr	r2, [pc, #144]	; (800e334 <UART_SetConfig+0x928>)
 800e2a2:	fa22 f303 	lsr.w	r3, r2, r3
 800e2a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e2a8:	e00f      	b.n	800e2ca <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e2aa:	4b22      	ldr	r3, [pc, #136]	; (800e334 <UART_SetConfig+0x928>)
 800e2ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e2ae:	e00c      	b.n	800e2ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e2b0:	4b21      	ldr	r3, [pc, #132]	; (800e338 <UART_SetConfig+0x92c>)
 800e2b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e2b4:	e009      	b.n	800e2ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e2b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e2ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e2bc:	e005      	b.n	800e2ca <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e2be:	2300      	movs	r3, #0
 800e2c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e2c2:	2301      	movs	r3, #1
 800e2c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e2c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e2ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	f000 80e7 	beq.w	800e4a0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e2d2:	697b      	ldr	r3, [r7, #20]
 800e2d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2d6:	4a19      	ldr	r2, [pc, #100]	; (800e33c <UART_SetConfig+0x930>)
 800e2d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e2dc:	461a      	mov	r2, r3
 800e2de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2e0:	fbb3 f3f2 	udiv	r3, r3, r2
 800e2e4:	005a      	lsls	r2, r3, #1
 800e2e6:	697b      	ldr	r3, [r7, #20]
 800e2e8:	685b      	ldr	r3, [r3, #4]
 800e2ea:	085b      	lsrs	r3, r3, #1
 800e2ec:	441a      	add	r2, r3
 800e2ee:	697b      	ldr	r3, [r7, #20]
 800e2f0:	685b      	ldr	r3, [r3, #4]
 800e2f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800e2f6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e2f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2fa:	2b0f      	cmp	r3, #15
 800e2fc:	d916      	bls.n	800e32c <UART_SetConfig+0x920>
 800e2fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e304:	d212      	bcs.n	800e32c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e308:	b29b      	uxth	r3, r3
 800e30a:	f023 030f 	bic.w	r3, r3, #15
 800e30e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e312:	085b      	lsrs	r3, r3, #1
 800e314:	b29b      	uxth	r3, r3
 800e316:	f003 0307 	and.w	r3, r3, #7
 800e31a:	b29a      	uxth	r2, r3
 800e31c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e31e:	4313      	orrs	r3, r2
 800e320:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800e322:	697b      	ldr	r3, [r7, #20]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e328:	60da      	str	r2, [r3, #12]
 800e32a:	e0b9      	b.n	800e4a0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e32c:	2301      	movs	r3, #1
 800e32e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e332:	e0b5      	b.n	800e4a0 <UART_SetConfig+0xa94>
 800e334:	03d09000 	.word	0x03d09000
 800e338:	003d0900 	.word	0x003d0900
 800e33c:	0801ee78 	.word	0x0801ee78
 800e340:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800e344:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e348:	2b20      	cmp	r3, #32
 800e34a:	dc49      	bgt.n	800e3e0 <UART_SetConfig+0x9d4>
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	db7c      	blt.n	800e44a <UART_SetConfig+0xa3e>
 800e350:	2b20      	cmp	r3, #32
 800e352:	d87a      	bhi.n	800e44a <UART_SetConfig+0xa3e>
 800e354:	a201      	add	r2, pc, #4	; (adr r2, 800e35c <UART_SetConfig+0x950>)
 800e356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e35a:	bf00      	nop
 800e35c:	0800e3e7 	.word	0x0800e3e7
 800e360:	0800e3ef 	.word	0x0800e3ef
 800e364:	0800e44b 	.word	0x0800e44b
 800e368:	0800e44b 	.word	0x0800e44b
 800e36c:	0800e3f7 	.word	0x0800e3f7
 800e370:	0800e44b 	.word	0x0800e44b
 800e374:	0800e44b 	.word	0x0800e44b
 800e378:	0800e44b 	.word	0x0800e44b
 800e37c:	0800e407 	.word	0x0800e407
 800e380:	0800e44b 	.word	0x0800e44b
 800e384:	0800e44b 	.word	0x0800e44b
 800e388:	0800e44b 	.word	0x0800e44b
 800e38c:	0800e44b 	.word	0x0800e44b
 800e390:	0800e44b 	.word	0x0800e44b
 800e394:	0800e44b 	.word	0x0800e44b
 800e398:	0800e44b 	.word	0x0800e44b
 800e39c:	0800e417 	.word	0x0800e417
 800e3a0:	0800e44b 	.word	0x0800e44b
 800e3a4:	0800e44b 	.word	0x0800e44b
 800e3a8:	0800e44b 	.word	0x0800e44b
 800e3ac:	0800e44b 	.word	0x0800e44b
 800e3b0:	0800e44b 	.word	0x0800e44b
 800e3b4:	0800e44b 	.word	0x0800e44b
 800e3b8:	0800e44b 	.word	0x0800e44b
 800e3bc:	0800e44b 	.word	0x0800e44b
 800e3c0:	0800e44b 	.word	0x0800e44b
 800e3c4:	0800e44b 	.word	0x0800e44b
 800e3c8:	0800e44b 	.word	0x0800e44b
 800e3cc:	0800e44b 	.word	0x0800e44b
 800e3d0:	0800e44b 	.word	0x0800e44b
 800e3d4:	0800e44b 	.word	0x0800e44b
 800e3d8:	0800e44b 	.word	0x0800e44b
 800e3dc:	0800e43d 	.word	0x0800e43d
 800e3e0:	2b40      	cmp	r3, #64	; 0x40
 800e3e2:	d02e      	beq.n	800e442 <UART_SetConfig+0xa36>
 800e3e4:	e031      	b.n	800e44a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e3e6:	f7fc f981 	bl	800a6ec <HAL_RCC_GetPCLK1Freq>
 800e3ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e3ec:	e033      	b.n	800e456 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e3ee:	f7fc f993 	bl	800a718 <HAL_RCC_GetPCLK2Freq>
 800e3f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e3f4:	e02f      	b.n	800e456 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e3f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	f7fe f95e 	bl	800c6bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e402:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e404:	e027      	b.n	800e456 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e406:	f107 0318 	add.w	r3, r7, #24
 800e40a:	4618      	mov	r0, r3
 800e40c:	f7fe faaa 	bl	800c964 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e410:	69fb      	ldr	r3, [r7, #28]
 800e412:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e414:	e01f      	b.n	800e456 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e416:	4b2d      	ldr	r3, [pc, #180]	; (800e4cc <UART_SetConfig+0xac0>)
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	f003 0320 	and.w	r3, r3, #32
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d009      	beq.n	800e436 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e422:	4b2a      	ldr	r3, [pc, #168]	; (800e4cc <UART_SetConfig+0xac0>)
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	08db      	lsrs	r3, r3, #3
 800e428:	f003 0303 	and.w	r3, r3, #3
 800e42c:	4a28      	ldr	r2, [pc, #160]	; (800e4d0 <UART_SetConfig+0xac4>)
 800e42e:	fa22 f303 	lsr.w	r3, r2, r3
 800e432:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e434:	e00f      	b.n	800e456 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800e436:	4b26      	ldr	r3, [pc, #152]	; (800e4d0 <UART_SetConfig+0xac4>)
 800e438:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e43a:	e00c      	b.n	800e456 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e43c:	4b25      	ldr	r3, [pc, #148]	; (800e4d4 <UART_SetConfig+0xac8>)
 800e43e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e440:	e009      	b.n	800e456 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e442:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e446:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e448:	e005      	b.n	800e456 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800e44a:	2300      	movs	r3, #0
 800e44c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e44e:	2301      	movs	r3, #1
 800e450:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e454:	bf00      	nop
    }

    if (pclk != 0U)
 800e456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d021      	beq.n	800e4a0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e45c:	697b      	ldr	r3, [r7, #20]
 800e45e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e460:	4a1d      	ldr	r2, [pc, #116]	; (800e4d8 <UART_SetConfig+0xacc>)
 800e462:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e466:	461a      	mov	r2, r3
 800e468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e46a:	fbb3 f2f2 	udiv	r2, r3, r2
 800e46e:	697b      	ldr	r3, [r7, #20]
 800e470:	685b      	ldr	r3, [r3, #4]
 800e472:	085b      	lsrs	r3, r3, #1
 800e474:	441a      	add	r2, r3
 800e476:	697b      	ldr	r3, [r7, #20]
 800e478:	685b      	ldr	r3, [r3, #4]
 800e47a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e47e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e482:	2b0f      	cmp	r3, #15
 800e484:	d909      	bls.n	800e49a <UART_SetConfig+0xa8e>
 800e486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e488:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e48c:	d205      	bcs.n	800e49a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e48e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e490:	b29a      	uxth	r2, r3
 800e492:	697b      	ldr	r3, [r7, #20]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	60da      	str	r2, [r3, #12]
 800e498:	e002      	b.n	800e4a0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e49a:	2301      	movs	r3, #1
 800e49c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e4a0:	697b      	ldr	r3, [r7, #20]
 800e4a2:	2201      	movs	r2, #1
 800e4a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e4a8:	697b      	ldr	r3, [r7, #20]
 800e4aa:	2201      	movs	r2, #1
 800e4ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e4b0:	697b      	ldr	r3, [r7, #20]
 800e4b2:	2200      	movs	r2, #0
 800e4b4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800e4b6:	697b      	ldr	r3, [r7, #20]
 800e4b8:	2200      	movs	r2, #0
 800e4ba:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800e4bc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	3748      	adds	r7, #72	; 0x48
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e4ca:	bf00      	nop
 800e4cc:	58024400 	.word	0x58024400
 800e4d0:	03d09000 	.word	0x03d09000
 800e4d4:	003d0900 	.word	0x003d0900
 800e4d8:	0801ee78 	.word	0x0801ee78

0800e4dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e4dc:	b480      	push	{r7}
 800e4de:	b083      	sub	sp, #12
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4e8:	f003 0301 	and.w	r3, r3, #1
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d00a      	beq.n	800e506 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	685b      	ldr	r3, [r3, #4]
 800e4f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	430a      	orrs	r2, r1
 800e504:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e50a:	f003 0302 	and.w	r3, r3, #2
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d00a      	beq.n	800e528 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	685b      	ldr	r3, [r3, #4]
 800e518:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	430a      	orrs	r2, r1
 800e526:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e52c:	f003 0304 	and.w	r3, r3, #4
 800e530:	2b00      	cmp	r3, #0
 800e532:	d00a      	beq.n	800e54a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	685b      	ldr	r3, [r3, #4]
 800e53a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	430a      	orrs	r2, r1
 800e548:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e54e:	f003 0308 	and.w	r3, r3, #8
 800e552:	2b00      	cmp	r3, #0
 800e554:	d00a      	beq.n	800e56c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	685b      	ldr	r3, [r3, #4]
 800e55c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	430a      	orrs	r2, r1
 800e56a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e570:	f003 0310 	and.w	r3, r3, #16
 800e574:	2b00      	cmp	r3, #0
 800e576:	d00a      	beq.n	800e58e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	689b      	ldr	r3, [r3, #8]
 800e57e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	430a      	orrs	r2, r1
 800e58c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e592:	f003 0320 	and.w	r3, r3, #32
 800e596:	2b00      	cmp	r3, #0
 800e598:	d00a      	beq.n	800e5b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	689b      	ldr	r3, [r3, #8]
 800e5a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	430a      	orrs	r2, r1
 800e5ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d01a      	beq.n	800e5f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	685b      	ldr	r3, [r3, #4]
 800e5c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	430a      	orrs	r2, r1
 800e5d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e5d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e5da:	d10a      	bne.n	800e5f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	685b      	ldr	r3, [r3, #4]
 800e5e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	430a      	orrs	r2, r1
 800e5f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d00a      	beq.n	800e614 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	685b      	ldr	r3, [r3, #4]
 800e604:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	430a      	orrs	r2, r1
 800e612:	605a      	str	r2, [r3, #4]
  }
}
 800e614:	bf00      	nop
 800e616:	370c      	adds	r7, #12
 800e618:	46bd      	mov	sp, r7
 800e61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e61e:	4770      	bx	lr

0800e620 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e620:	b580      	push	{r7, lr}
 800e622:	b098      	sub	sp, #96	; 0x60
 800e624:	af02      	add	r7, sp, #8
 800e626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	2200      	movs	r2, #0
 800e62c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e630:	f7f5 fa36 	bl	8003aa0 <HAL_GetTick>
 800e634:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	f003 0308 	and.w	r3, r3, #8
 800e640:	2b08      	cmp	r3, #8
 800e642:	d12f      	bne.n	800e6a4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e644:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e648:	9300      	str	r3, [sp, #0]
 800e64a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e64c:	2200      	movs	r2, #0
 800e64e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e652:	6878      	ldr	r0, [r7, #4]
 800e654:	f000 f88e 	bl	800e774 <UART_WaitOnFlagUntilTimeout>
 800e658:	4603      	mov	r3, r0
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d022      	beq.n	800e6a4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e666:	e853 3f00 	ldrex	r3, [r3]
 800e66a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e66c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e66e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e672:	653b      	str	r3, [r7, #80]	; 0x50
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	461a      	mov	r2, r3
 800e67a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e67c:	647b      	str	r3, [r7, #68]	; 0x44
 800e67e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e680:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e682:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e684:	e841 2300 	strex	r3, r2, [r1]
 800e688:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e68a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d1e6      	bne.n	800e65e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	2220      	movs	r2, #32
 800e694:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	2200      	movs	r2, #0
 800e69c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e6a0:	2303      	movs	r3, #3
 800e6a2:	e063      	b.n	800e76c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	f003 0304 	and.w	r3, r3, #4
 800e6ae:	2b04      	cmp	r3, #4
 800e6b0:	d149      	bne.n	800e746 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e6b2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e6b6:	9300      	str	r3, [sp, #0]
 800e6b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e6ba:	2200      	movs	r2, #0
 800e6bc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e6c0:	6878      	ldr	r0, [r7, #4]
 800e6c2:	f000 f857 	bl	800e774 <UART_WaitOnFlagUntilTimeout>
 800e6c6:	4603      	mov	r3, r0
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d03c      	beq.n	800e746 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6d4:	e853 3f00 	ldrex	r3, [r3]
 800e6d8:	623b      	str	r3, [r7, #32]
   return(result);
 800e6da:	6a3b      	ldr	r3, [r7, #32]
 800e6dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e6e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	461a      	mov	r2, r3
 800e6e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e6ea:	633b      	str	r3, [r7, #48]	; 0x30
 800e6ec:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e6f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e6f2:	e841 2300 	strex	r3, r2, [r1]
 800e6f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e6f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d1e6      	bne.n	800e6cc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	3308      	adds	r3, #8
 800e704:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e706:	693b      	ldr	r3, [r7, #16]
 800e708:	e853 3f00 	ldrex	r3, [r3]
 800e70c:	60fb      	str	r3, [r7, #12]
   return(result);
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	f023 0301 	bic.w	r3, r3, #1
 800e714:	64bb      	str	r3, [r7, #72]	; 0x48
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	3308      	adds	r3, #8
 800e71c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e71e:	61fa      	str	r2, [r7, #28]
 800e720:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e722:	69b9      	ldr	r1, [r7, #24]
 800e724:	69fa      	ldr	r2, [r7, #28]
 800e726:	e841 2300 	strex	r3, r2, [r1]
 800e72a:	617b      	str	r3, [r7, #20]
   return(result);
 800e72c:	697b      	ldr	r3, [r7, #20]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d1e5      	bne.n	800e6fe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	2220      	movs	r2, #32
 800e736:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	2200      	movs	r2, #0
 800e73e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e742:	2303      	movs	r3, #3
 800e744:	e012      	b.n	800e76c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	2220      	movs	r2, #32
 800e74a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	2220      	movs	r2, #32
 800e752:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	2200      	movs	r2, #0
 800e75a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	2200      	movs	r2, #0
 800e760:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	2200      	movs	r2, #0
 800e766:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e76a:	2300      	movs	r3, #0
}
 800e76c:	4618      	mov	r0, r3
 800e76e:	3758      	adds	r7, #88	; 0x58
 800e770:	46bd      	mov	sp, r7
 800e772:	bd80      	pop	{r7, pc}

0800e774 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e774:	b580      	push	{r7, lr}
 800e776:	b084      	sub	sp, #16
 800e778:	af00      	add	r7, sp, #0
 800e77a:	60f8      	str	r0, [r7, #12]
 800e77c:	60b9      	str	r1, [r7, #8]
 800e77e:	603b      	str	r3, [r7, #0]
 800e780:	4613      	mov	r3, r2
 800e782:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e784:	e049      	b.n	800e81a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e786:	69bb      	ldr	r3, [r7, #24]
 800e788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e78c:	d045      	beq.n	800e81a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e78e:	f7f5 f987 	bl	8003aa0 <HAL_GetTick>
 800e792:	4602      	mov	r2, r0
 800e794:	683b      	ldr	r3, [r7, #0]
 800e796:	1ad3      	subs	r3, r2, r3
 800e798:	69ba      	ldr	r2, [r7, #24]
 800e79a:	429a      	cmp	r2, r3
 800e79c:	d302      	bcc.n	800e7a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800e79e:	69bb      	ldr	r3, [r7, #24]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d101      	bne.n	800e7a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e7a4:	2303      	movs	r3, #3
 800e7a6:	e048      	b.n	800e83a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	f003 0304 	and.w	r3, r3, #4
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d031      	beq.n	800e81a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	69db      	ldr	r3, [r3, #28]
 800e7bc:	f003 0308 	and.w	r3, r3, #8
 800e7c0:	2b08      	cmp	r3, #8
 800e7c2:	d110      	bne.n	800e7e6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	2208      	movs	r2, #8
 800e7ca:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800e7cc:	68f8      	ldr	r0, [r7, #12]
 800e7ce:	f000 f839 	bl	800e844 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	2208      	movs	r2, #8
 800e7d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	2200      	movs	r2, #0
 800e7de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800e7e2:	2301      	movs	r3, #1
 800e7e4:	e029      	b.n	800e83a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	69db      	ldr	r3, [r3, #28]
 800e7ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e7f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e7f4:	d111      	bne.n	800e81a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e7fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e800:	68f8      	ldr	r0, [r7, #12]
 800e802:	f000 f81f 	bl	800e844 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	2220      	movs	r2, #32
 800e80a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	2200      	movs	r2, #0
 800e812:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800e816:	2303      	movs	r3, #3
 800e818:	e00f      	b.n	800e83a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	69da      	ldr	r2, [r3, #28]
 800e820:	68bb      	ldr	r3, [r7, #8]
 800e822:	4013      	ands	r3, r2
 800e824:	68ba      	ldr	r2, [r7, #8]
 800e826:	429a      	cmp	r2, r3
 800e828:	bf0c      	ite	eq
 800e82a:	2301      	moveq	r3, #1
 800e82c:	2300      	movne	r3, #0
 800e82e:	b2db      	uxtb	r3, r3
 800e830:	461a      	mov	r2, r3
 800e832:	79fb      	ldrb	r3, [r7, #7]
 800e834:	429a      	cmp	r2, r3
 800e836:	d0a6      	beq.n	800e786 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e838:	2300      	movs	r3, #0
}
 800e83a:	4618      	mov	r0, r3
 800e83c:	3710      	adds	r7, #16
 800e83e:	46bd      	mov	sp, r7
 800e840:	bd80      	pop	{r7, pc}
	...

0800e844 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e844:	b480      	push	{r7}
 800e846:	b095      	sub	sp, #84	; 0x54
 800e848:	af00      	add	r7, sp, #0
 800e84a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e854:	e853 3f00 	ldrex	r3, [r3]
 800e858:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e85a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e85c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e860:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	461a      	mov	r2, r3
 800e868:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e86a:	643b      	str	r3, [r7, #64]	; 0x40
 800e86c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e86e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e870:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e872:	e841 2300 	strex	r3, r2, [r1]
 800e876:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d1e6      	bne.n	800e84c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	3308      	adds	r3, #8
 800e884:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e886:	6a3b      	ldr	r3, [r7, #32]
 800e888:	e853 3f00 	ldrex	r3, [r3]
 800e88c:	61fb      	str	r3, [r7, #28]
   return(result);
 800e88e:	69fa      	ldr	r2, [r7, #28]
 800e890:	4b1e      	ldr	r3, [pc, #120]	; (800e90c <UART_EndRxTransfer+0xc8>)
 800e892:	4013      	ands	r3, r2
 800e894:	64bb      	str	r3, [r7, #72]	; 0x48
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	3308      	adds	r3, #8
 800e89c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e89e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e8a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e8a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e8a6:	e841 2300 	strex	r3, r2, [r1]
 800e8aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d1e5      	bne.n	800e87e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8b6:	2b01      	cmp	r3, #1
 800e8b8:	d118      	bne.n	800e8ec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	e853 3f00 	ldrex	r3, [r3]
 800e8c6:	60bb      	str	r3, [r7, #8]
   return(result);
 800e8c8:	68bb      	ldr	r3, [r7, #8]
 800e8ca:	f023 0310 	bic.w	r3, r3, #16
 800e8ce:	647b      	str	r3, [r7, #68]	; 0x44
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	461a      	mov	r2, r3
 800e8d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e8d8:	61bb      	str	r3, [r7, #24]
 800e8da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8dc:	6979      	ldr	r1, [r7, #20]
 800e8de:	69ba      	ldr	r2, [r7, #24]
 800e8e0:	e841 2300 	strex	r3, r2, [r1]
 800e8e4:	613b      	str	r3, [r7, #16]
   return(result);
 800e8e6:	693b      	ldr	r3, [r7, #16]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d1e6      	bne.n	800e8ba <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	2220      	movs	r2, #32
 800e8f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	2200      	movs	r2, #0
 800e8f8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	2200      	movs	r2, #0
 800e8fe:	675a      	str	r2, [r3, #116]	; 0x74
}
 800e900:	bf00      	nop
 800e902:	3754      	adds	r7, #84	; 0x54
 800e904:	46bd      	mov	sp, r7
 800e906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e90a:	4770      	bx	lr
 800e90c:	effffffe 	.word	0xeffffffe

0800e910 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e910:	b480      	push	{r7}
 800e912:	b085      	sub	sp, #20
 800e914:	af00      	add	r7, sp, #0
 800e916:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e91e:	2b01      	cmp	r3, #1
 800e920:	d101      	bne.n	800e926 <HAL_UARTEx_DisableFifoMode+0x16>
 800e922:	2302      	movs	r3, #2
 800e924:	e027      	b.n	800e976 <HAL_UARTEx_DisableFifoMode+0x66>
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	2201      	movs	r2, #1
 800e92a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	2224      	movs	r2, #36	; 0x24
 800e932:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	681a      	ldr	r2, [r3, #0]
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	f022 0201 	bic.w	r2, r2, #1
 800e94c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e954:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	2200      	movs	r2, #0
 800e95a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	68fa      	ldr	r2, [r7, #12]
 800e962:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	2220      	movs	r2, #32
 800e968:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	2200      	movs	r2, #0
 800e970:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e974:	2300      	movs	r3, #0
}
 800e976:	4618      	mov	r0, r3
 800e978:	3714      	adds	r7, #20
 800e97a:	46bd      	mov	sp, r7
 800e97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e980:	4770      	bx	lr

0800e982 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e982:	b580      	push	{r7, lr}
 800e984:	b084      	sub	sp, #16
 800e986:	af00      	add	r7, sp, #0
 800e988:	6078      	str	r0, [r7, #4]
 800e98a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e992:	2b01      	cmp	r3, #1
 800e994:	d101      	bne.n	800e99a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e996:	2302      	movs	r3, #2
 800e998:	e02d      	b.n	800e9f6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	2201      	movs	r2, #1
 800e99e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	2224      	movs	r2, #36	; 0x24
 800e9a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	681a      	ldr	r2, [r3, #0]
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	f022 0201 	bic.w	r2, r2, #1
 800e9c0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	689b      	ldr	r3, [r3, #8]
 800e9c8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	683a      	ldr	r2, [r7, #0]
 800e9d2:	430a      	orrs	r2, r1
 800e9d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e9d6:	6878      	ldr	r0, [r7, #4]
 800e9d8:	f000 f850 	bl	800ea7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	68fa      	ldr	r2, [r7, #12]
 800e9e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	2220      	movs	r2, #32
 800e9e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	2200      	movs	r2, #0
 800e9f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e9f4:	2300      	movs	r3, #0
}
 800e9f6:	4618      	mov	r0, r3
 800e9f8:	3710      	adds	r7, #16
 800e9fa:	46bd      	mov	sp, r7
 800e9fc:	bd80      	pop	{r7, pc}

0800e9fe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e9fe:	b580      	push	{r7, lr}
 800ea00:	b084      	sub	sp, #16
 800ea02:	af00      	add	r7, sp, #0
 800ea04:	6078      	str	r0, [r7, #4]
 800ea06:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ea0e:	2b01      	cmp	r3, #1
 800ea10:	d101      	bne.n	800ea16 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ea12:	2302      	movs	r3, #2
 800ea14:	e02d      	b.n	800ea72 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	2201      	movs	r2, #1
 800ea1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	2224      	movs	r2, #36	; 0x24
 800ea22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	681a      	ldr	r2, [r3, #0]
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	f022 0201 	bic.w	r2, r2, #1
 800ea3c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	689b      	ldr	r3, [r3, #8]
 800ea44:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	683a      	ldr	r2, [r7, #0]
 800ea4e:	430a      	orrs	r2, r1
 800ea50:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ea52:	6878      	ldr	r0, [r7, #4]
 800ea54:	f000 f812 	bl	800ea7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	68fa      	ldr	r2, [r7, #12]
 800ea5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	2220      	movs	r2, #32
 800ea64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	2200      	movs	r2, #0
 800ea6c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ea70:	2300      	movs	r3, #0
}
 800ea72:	4618      	mov	r0, r3
 800ea74:	3710      	adds	r7, #16
 800ea76:	46bd      	mov	sp, r7
 800ea78:	bd80      	pop	{r7, pc}
	...

0800ea7c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ea7c:	b480      	push	{r7}
 800ea7e:	b085      	sub	sp, #20
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d108      	bne.n	800ea9e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	2201      	movs	r2, #1
 800ea90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	2201      	movs	r2, #1
 800ea98:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ea9c:	e031      	b.n	800eb02 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ea9e:	2310      	movs	r3, #16
 800eaa0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800eaa2:	2310      	movs	r3, #16
 800eaa4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	689b      	ldr	r3, [r3, #8]
 800eaac:	0e5b      	lsrs	r3, r3, #25
 800eaae:	b2db      	uxtb	r3, r3
 800eab0:	f003 0307 	and.w	r3, r3, #7
 800eab4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	689b      	ldr	r3, [r3, #8]
 800eabc:	0f5b      	lsrs	r3, r3, #29
 800eabe:	b2db      	uxtb	r3, r3
 800eac0:	f003 0307 	and.w	r3, r3, #7
 800eac4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800eac6:	7bbb      	ldrb	r3, [r7, #14]
 800eac8:	7b3a      	ldrb	r2, [r7, #12]
 800eaca:	4911      	ldr	r1, [pc, #68]	; (800eb10 <UARTEx_SetNbDataToProcess+0x94>)
 800eacc:	5c8a      	ldrb	r2, [r1, r2]
 800eace:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ead2:	7b3a      	ldrb	r2, [r7, #12]
 800ead4:	490f      	ldr	r1, [pc, #60]	; (800eb14 <UARTEx_SetNbDataToProcess+0x98>)
 800ead6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ead8:	fb93 f3f2 	sdiv	r3, r3, r2
 800eadc:	b29a      	uxth	r2, r3
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800eae4:	7bfb      	ldrb	r3, [r7, #15]
 800eae6:	7b7a      	ldrb	r2, [r7, #13]
 800eae8:	4909      	ldr	r1, [pc, #36]	; (800eb10 <UARTEx_SetNbDataToProcess+0x94>)
 800eaea:	5c8a      	ldrb	r2, [r1, r2]
 800eaec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800eaf0:	7b7a      	ldrb	r2, [r7, #13]
 800eaf2:	4908      	ldr	r1, [pc, #32]	; (800eb14 <UARTEx_SetNbDataToProcess+0x98>)
 800eaf4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800eaf6:	fb93 f3f2 	sdiv	r3, r3, r2
 800eafa:	b29a      	uxth	r2, r3
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800eb02:	bf00      	nop
 800eb04:	3714      	adds	r7, #20
 800eb06:	46bd      	mov	sp, r7
 800eb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb0c:	4770      	bx	lr
 800eb0e:	bf00      	nop
 800eb10:	0801ee90 	.word	0x0801ee90
 800eb14:	0801ee98 	.word	0x0801ee98

0800eb18 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b084      	sub	sp, #16
 800eb1c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800eb1e:	4b8d      	ldr	r3, [pc, #564]	; (800ed54 <MX_LWIP_Init+0x23c>)
 800eb20:	22c0      	movs	r2, #192	; 0xc0
 800eb22:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800eb24:	4b8b      	ldr	r3, [pc, #556]	; (800ed54 <MX_LWIP_Init+0x23c>)
 800eb26:	22a8      	movs	r2, #168	; 0xa8
 800eb28:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800eb2a:	4b8a      	ldr	r3, [pc, #552]	; (800ed54 <MX_LWIP_Init+0x23c>)
 800eb2c:	2201      	movs	r2, #1
 800eb2e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 800eb30:	4b88      	ldr	r3, [pc, #544]	; (800ed54 <MX_LWIP_Init+0x23c>)
 800eb32:	220a      	movs	r2, #10
 800eb34:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800eb36:	4b88      	ldr	r3, [pc, #544]	; (800ed58 <MX_LWIP_Init+0x240>)
 800eb38:	22ff      	movs	r2, #255	; 0xff
 800eb3a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800eb3c:	4b86      	ldr	r3, [pc, #536]	; (800ed58 <MX_LWIP_Init+0x240>)
 800eb3e:	22ff      	movs	r2, #255	; 0xff
 800eb40:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 0;
 800eb42:	4b85      	ldr	r3, [pc, #532]	; (800ed58 <MX_LWIP_Init+0x240>)
 800eb44:	2200      	movs	r2, #0
 800eb46:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800eb48:	4b83      	ldr	r3, [pc, #524]	; (800ed58 <MX_LWIP_Init+0x240>)
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800eb4e:	4b83      	ldr	r3, [pc, #524]	; (800ed5c <MX_LWIP_Init+0x244>)
 800eb50:	22c0      	movs	r2, #192	; 0xc0
 800eb52:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800eb54:	4b81      	ldr	r3, [pc, #516]	; (800ed5c <MX_LWIP_Init+0x244>)
 800eb56:	22a8      	movs	r2, #168	; 0xa8
 800eb58:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800eb5a:	4b80      	ldr	r3, [pc, #512]	; (800ed5c <MX_LWIP_Init+0x244>)
 800eb5c:	2201      	movs	r2, #1
 800eb5e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800eb60:	4b7e      	ldr	r3, [pc, #504]	; (800ed5c <MX_LWIP_Init+0x244>)
 800eb62:	2201      	movs	r2, #1
 800eb64:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800eb66:	f000 fddf 	bl	800f728 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800eb6a:	4b7a      	ldr	r3, [pc, #488]	; (800ed54 <MX_LWIP_Init+0x23c>)
 800eb6c:	781b      	ldrb	r3, [r3, #0]
 800eb6e:	061a      	lsls	r2, r3, #24
 800eb70:	4b78      	ldr	r3, [pc, #480]	; (800ed54 <MX_LWIP_Init+0x23c>)
 800eb72:	785b      	ldrb	r3, [r3, #1]
 800eb74:	041b      	lsls	r3, r3, #16
 800eb76:	431a      	orrs	r2, r3
 800eb78:	4b76      	ldr	r3, [pc, #472]	; (800ed54 <MX_LWIP_Init+0x23c>)
 800eb7a:	789b      	ldrb	r3, [r3, #2]
 800eb7c:	021b      	lsls	r3, r3, #8
 800eb7e:	4313      	orrs	r3, r2
 800eb80:	4a74      	ldr	r2, [pc, #464]	; (800ed54 <MX_LWIP_Init+0x23c>)
 800eb82:	78d2      	ldrb	r2, [r2, #3]
 800eb84:	4313      	orrs	r3, r2
 800eb86:	061a      	lsls	r2, r3, #24
 800eb88:	4b72      	ldr	r3, [pc, #456]	; (800ed54 <MX_LWIP_Init+0x23c>)
 800eb8a:	781b      	ldrb	r3, [r3, #0]
 800eb8c:	0619      	lsls	r1, r3, #24
 800eb8e:	4b71      	ldr	r3, [pc, #452]	; (800ed54 <MX_LWIP_Init+0x23c>)
 800eb90:	785b      	ldrb	r3, [r3, #1]
 800eb92:	041b      	lsls	r3, r3, #16
 800eb94:	4319      	orrs	r1, r3
 800eb96:	4b6f      	ldr	r3, [pc, #444]	; (800ed54 <MX_LWIP_Init+0x23c>)
 800eb98:	789b      	ldrb	r3, [r3, #2]
 800eb9a:	021b      	lsls	r3, r3, #8
 800eb9c:	430b      	orrs	r3, r1
 800eb9e:	496d      	ldr	r1, [pc, #436]	; (800ed54 <MX_LWIP_Init+0x23c>)
 800eba0:	78c9      	ldrb	r1, [r1, #3]
 800eba2:	430b      	orrs	r3, r1
 800eba4:	021b      	lsls	r3, r3, #8
 800eba6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ebaa:	431a      	orrs	r2, r3
 800ebac:	4b69      	ldr	r3, [pc, #420]	; (800ed54 <MX_LWIP_Init+0x23c>)
 800ebae:	781b      	ldrb	r3, [r3, #0]
 800ebb0:	0619      	lsls	r1, r3, #24
 800ebb2:	4b68      	ldr	r3, [pc, #416]	; (800ed54 <MX_LWIP_Init+0x23c>)
 800ebb4:	785b      	ldrb	r3, [r3, #1]
 800ebb6:	041b      	lsls	r3, r3, #16
 800ebb8:	4319      	orrs	r1, r3
 800ebba:	4b66      	ldr	r3, [pc, #408]	; (800ed54 <MX_LWIP_Init+0x23c>)
 800ebbc:	789b      	ldrb	r3, [r3, #2]
 800ebbe:	021b      	lsls	r3, r3, #8
 800ebc0:	430b      	orrs	r3, r1
 800ebc2:	4964      	ldr	r1, [pc, #400]	; (800ed54 <MX_LWIP_Init+0x23c>)
 800ebc4:	78c9      	ldrb	r1, [r1, #3]
 800ebc6:	430b      	orrs	r3, r1
 800ebc8:	0a1b      	lsrs	r3, r3, #8
 800ebca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ebce:	431a      	orrs	r2, r3
 800ebd0:	4b60      	ldr	r3, [pc, #384]	; (800ed54 <MX_LWIP_Init+0x23c>)
 800ebd2:	781b      	ldrb	r3, [r3, #0]
 800ebd4:	0619      	lsls	r1, r3, #24
 800ebd6:	4b5f      	ldr	r3, [pc, #380]	; (800ed54 <MX_LWIP_Init+0x23c>)
 800ebd8:	785b      	ldrb	r3, [r3, #1]
 800ebda:	041b      	lsls	r3, r3, #16
 800ebdc:	4319      	orrs	r1, r3
 800ebde:	4b5d      	ldr	r3, [pc, #372]	; (800ed54 <MX_LWIP_Init+0x23c>)
 800ebe0:	789b      	ldrb	r3, [r3, #2]
 800ebe2:	021b      	lsls	r3, r3, #8
 800ebe4:	430b      	orrs	r3, r1
 800ebe6:	495b      	ldr	r1, [pc, #364]	; (800ed54 <MX_LWIP_Init+0x23c>)
 800ebe8:	78c9      	ldrb	r1, [r1, #3]
 800ebea:	430b      	orrs	r3, r1
 800ebec:	0e1b      	lsrs	r3, r3, #24
 800ebee:	4313      	orrs	r3, r2
 800ebf0:	4a5b      	ldr	r2, [pc, #364]	; (800ed60 <MX_LWIP_Init+0x248>)
 800ebf2:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800ebf4:	4b58      	ldr	r3, [pc, #352]	; (800ed58 <MX_LWIP_Init+0x240>)
 800ebf6:	781b      	ldrb	r3, [r3, #0]
 800ebf8:	061a      	lsls	r2, r3, #24
 800ebfa:	4b57      	ldr	r3, [pc, #348]	; (800ed58 <MX_LWIP_Init+0x240>)
 800ebfc:	785b      	ldrb	r3, [r3, #1]
 800ebfe:	041b      	lsls	r3, r3, #16
 800ec00:	431a      	orrs	r2, r3
 800ec02:	4b55      	ldr	r3, [pc, #340]	; (800ed58 <MX_LWIP_Init+0x240>)
 800ec04:	789b      	ldrb	r3, [r3, #2]
 800ec06:	021b      	lsls	r3, r3, #8
 800ec08:	4313      	orrs	r3, r2
 800ec0a:	4a53      	ldr	r2, [pc, #332]	; (800ed58 <MX_LWIP_Init+0x240>)
 800ec0c:	78d2      	ldrb	r2, [r2, #3]
 800ec0e:	4313      	orrs	r3, r2
 800ec10:	061a      	lsls	r2, r3, #24
 800ec12:	4b51      	ldr	r3, [pc, #324]	; (800ed58 <MX_LWIP_Init+0x240>)
 800ec14:	781b      	ldrb	r3, [r3, #0]
 800ec16:	0619      	lsls	r1, r3, #24
 800ec18:	4b4f      	ldr	r3, [pc, #316]	; (800ed58 <MX_LWIP_Init+0x240>)
 800ec1a:	785b      	ldrb	r3, [r3, #1]
 800ec1c:	041b      	lsls	r3, r3, #16
 800ec1e:	4319      	orrs	r1, r3
 800ec20:	4b4d      	ldr	r3, [pc, #308]	; (800ed58 <MX_LWIP_Init+0x240>)
 800ec22:	789b      	ldrb	r3, [r3, #2]
 800ec24:	021b      	lsls	r3, r3, #8
 800ec26:	430b      	orrs	r3, r1
 800ec28:	494b      	ldr	r1, [pc, #300]	; (800ed58 <MX_LWIP_Init+0x240>)
 800ec2a:	78c9      	ldrb	r1, [r1, #3]
 800ec2c:	430b      	orrs	r3, r1
 800ec2e:	021b      	lsls	r3, r3, #8
 800ec30:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ec34:	431a      	orrs	r2, r3
 800ec36:	4b48      	ldr	r3, [pc, #288]	; (800ed58 <MX_LWIP_Init+0x240>)
 800ec38:	781b      	ldrb	r3, [r3, #0]
 800ec3a:	0619      	lsls	r1, r3, #24
 800ec3c:	4b46      	ldr	r3, [pc, #280]	; (800ed58 <MX_LWIP_Init+0x240>)
 800ec3e:	785b      	ldrb	r3, [r3, #1]
 800ec40:	041b      	lsls	r3, r3, #16
 800ec42:	4319      	orrs	r1, r3
 800ec44:	4b44      	ldr	r3, [pc, #272]	; (800ed58 <MX_LWIP_Init+0x240>)
 800ec46:	789b      	ldrb	r3, [r3, #2]
 800ec48:	021b      	lsls	r3, r3, #8
 800ec4a:	430b      	orrs	r3, r1
 800ec4c:	4942      	ldr	r1, [pc, #264]	; (800ed58 <MX_LWIP_Init+0x240>)
 800ec4e:	78c9      	ldrb	r1, [r1, #3]
 800ec50:	430b      	orrs	r3, r1
 800ec52:	0a1b      	lsrs	r3, r3, #8
 800ec54:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ec58:	431a      	orrs	r2, r3
 800ec5a:	4b3f      	ldr	r3, [pc, #252]	; (800ed58 <MX_LWIP_Init+0x240>)
 800ec5c:	781b      	ldrb	r3, [r3, #0]
 800ec5e:	0619      	lsls	r1, r3, #24
 800ec60:	4b3d      	ldr	r3, [pc, #244]	; (800ed58 <MX_LWIP_Init+0x240>)
 800ec62:	785b      	ldrb	r3, [r3, #1]
 800ec64:	041b      	lsls	r3, r3, #16
 800ec66:	4319      	orrs	r1, r3
 800ec68:	4b3b      	ldr	r3, [pc, #236]	; (800ed58 <MX_LWIP_Init+0x240>)
 800ec6a:	789b      	ldrb	r3, [r3, #2]
 800ec6c:	021b      	lsls	r3, r3, #8
 800ec6e:	430b      	orrs	r3, r1
 800ec70:	4939      	ldr	r1, [pc, #228]	; (800ed58 <MX_LWIP_Init+0x240>)
 800ec72:	78c9      	ldrb	r1, [r1, #3]
 800ec74:	430b      	orrs	r3, r1
 800ec76:	0e1b      	lsrs	r3, r3, #24
 800ec78:	4313      	orrs	r3, r2
 800ec7a:	4a3a      	ldr	r2, [pc, #232]	; (800ed64 <MX_LWIP_Init+0x24c>)
 800ec7c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800ec7e:	4b37      	ldr	r3, [pc, #220]	; (800ed5c <MX_LWIP_Init+0x244>)
 800ec80:	781b      	ldrb	r3, [r3, #0]
 800ec82:	061a      	lsls	r2, r3, #24
 800ec84:	4b35      	ldr	r3, [pc, #212]	; (800ed5c <MX_LWIP_Init+0x244>)
 800ec86:	785b      	ldrb	r3, [r3, #1]
 800ec88:	041b      	lsls	r3, r3, #16
 800ec8a:	431a      	orrs	r2, r3
 800ec8c:	4b33      	ldr	r3, [pc, #204]	; (800ed5c <MX_LWIP_Init+0x244>)
 800ec8e:	789b      	ldrb	r3, [r3, #2]
 800ec90:	021b      	lsls	r3, r3, #8
 800ec92:	4313      	orrs	r3, r2
 800ec94:	4a31      	ldr	r2, [pc, #196]	; (800ed5c <MX_LWIP_Init+0x244>)
 800ec96:	78d2      	ldrb	r2, [r2, #3]
 800ec98:	4313      	orrs	r3, r2
 800ec9a:	061a      	lsls	r2, r3, #24
 800ec9c:	4b2f      	ldr	r3, [pc, #188]	; (800ed5c <MX_LWIP_Init+0x244>)
 800ec9e:	781b      	ldrb	r3, [r3, #0]
 800eca0:	0619      	lsls	r1, r3, #24
 800eca2:	4b2e      	ldr	r3, [pc, #184]	; (800ed5c <MX_LWIP_Init+0x244>)
 800eca4:	785b      	ldrb	r3, [r3, #1]
 800eca6:	041b      	lsls	r3, r3, #16
 800eca8:	4319      	orrs	r1, r3
 800ecaa:	4b2c      	ldr	r3, [pc, #176]	; (800ed5c <MX_LWIP_Init+0x244>)
 800ecac:	789b      	ldrb	r3, [r3, #2]
 800ecae:	021b      	lsls	r3, r3, #8
 800ecb0:	430b      	orrs	r3, r1
 800ecb2:	492a      	ldr	r1, [pc, #168]	; (800ed5c <MX_LWIP_Init+0x244>)
 800ecb4:	78c9      	ldrb	r1, [r1, #3]
 800ecb6:	430b      	orrs	r3, r1
 800ecb8:	021b      	lsls	r3, r3, #8
 800ecba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ecbe:	431a      	orrs	r2, r3
 800ecc0:	4b26      	ldr	r3, [pc, #152]	; (800ed5c <MX_LWIP_Init+0x244>)
 800ecc2:	781b      	ldrb	r3, [r3, #0]
 800ecc4:	0619      	lsls	r1, r3, #24
 800ecc6:	4b25      	ldr	r3, [pc, #148]	; (800ed5c <MX_LWIP_Init+0x244>)
 800ecc8:	785b      	ldrb	r3, [r3, #1]
 800ecca:	041b      	lsls	r3, r3, #16
 800eccc:	4319      	orrs	r1, r3
 800ecce:	4b23      	ldr	r3, [pc, #140]	; (800ed5c <MX_LWIP_Init+0x244>)
 800ecd0:	789b      	ldrb	r3, [r3, #2]
 800ecd2:	021b      	lsls	r3, r3, #8
 800ecd4:	430b      	orrs	r3, r1
 800ecd6:	4921      	ldr	r1, [pc, #132]	; (800ed5c <MX_LWIP_Init+0x244>)
 800ecd8:	78c9      	ldrb	r1, [r1, #3]
 800ecda:	430b      	orrs	r3, r1
 800ecdc:	0a1b      	lsrs	r3, r3, #8
 800ecde:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ece2:	431a      	orrs	r2, r3
 800ece4:	4b1d      	ldr	r3, [pc, #116]	; (800ed5c <MX_LWIP_Init+0x244>)
 800ece6:	781b      	ldrb	r3, [r3, #0]
 800ece8:	0619      	lsls	r1, r3, #24
 800ecea:	4b1c      	ldr	r3, [pc, #112]	; (800ed5c <MX_LWIP_Init+0x244>)
 800ecec:	785b      	ldrb	r3, [r3, #1]
 800ecee:	041b      	lsls	r3, r3, #16
 800ecf0:	4319      	orrs	r1, r3
 800ecf2:	4b1a      	ldr	r3, [pc, #104]	; (800ed5c <MX_LWIP_Init+0x244>)
 800ecf4:	789b      	ldrb	r3, [r3, #2]
 800ecf6:	021b      	lsls	r3, r3, #8
 800ecf8:	430b      	orrs	r3, r1
 800ecfa:	4918      	ldr	r1, [pc, #96]	; (800ed5c <MX_LWIP_Init+0x244>)
 800ecfc:	78c9      	ldrb	r1, [r1, #3]
 800ecfe:	430b      	orrs	r3, r1
 800ed00:	0e1b      	lsrs	r3, r3, #24
 800ed02:	4313      	orrs	r3, r2
 800ed04:	4a18      	ldr	r2, [pc, #96]	; (800ed68 <MX_LWIP_Init+0x250>)
 800ed06:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800ed08:	4b18      	ldr	r3, [pc, #96]	; (800ed6c <MX_LWIP_Init+0x254>)
 800ed0a:	9302      	str	r3, [sp, #8]
 800ed0c:	4b18      	ldr	r3, [pc, #96]	; (800ed70 <MX_LWIP_Init+0x258>)
 800ed0e:	9301      	str	r3, [sp, #4]
 800ed10:	2300      	movs	r3, #0
 800ed12:	9300      	str	r3, [sp, #0]
 800ed14:	4b14      	ldr	r3, [pc, #80]	; (800ed68 <MX_LWIP_Init+0x250>)
 800ed16:	4a13      	ldr	r2, [pc, #76]	; (800ed64 <MX_LWIP_Init+0x24c>)
 800ed18:	4911      	ldr	r1, [pc, #68]	; (800ed60 <MX_LWIP_Init+0x248>)
 800ed1a:	4816      	ldr	r0, [pc, #88]	; (800ed74 <MX_LWIP_Init+0x25c>)
 800ed1c:	f001 f9da 	bl	80100d4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800ed20:	4814      	ldr	r0, [pc, #80]	; (800ed74 <MX_LWIP_Init+0x25c>)
 800ed22:	f001 fb89 	bl	8010438 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800ed26:	4b13      	ldr	r3, [pc, #76]	; (800ed74 <MX_LWIP_Init+0x25c>)
 800ed28:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ed2c:	089b      	lsrs	r3, r3, #2
 800ed2e:	f003 0301 	and.w	r3, r3, #1
 800ed32:	b2db      	uxtb	r3, r3
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d003      	beq.n	800ed40 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800ed38:	480e      	ldr	r0, [pc, #56]	; (800ed74 <MX_LWIP_Init+0x25c>)
 800ed3a:	f001 fb8d 	bl	8010458 <netif_set_up>
 800ed3e:	e002      	b.n	800ed46 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800ed40:	480c      	ldr	r0, [pc, #48]	; (800ed74 <MX_LWIP_Init+0x25c>)
 800ed42:	f001 fbf5 	bl	8010530 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800ed46:	490c      	ldr	r1, [pc, #48]	; (800ed78 <MX_LWIP_Init+0x260>)
 800ed48:	480a      	ldr	r0, [pc, #40]	; (800ed74 <MX_LWIP_Init+0x25c>)
 800ed4a:	f001 fc87 	bl	801065c <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800ed4e:	bf00      	nop
 800ed50:	46bd      	mov	sp, r7
 800ed52:	bd80      	pop	{r7, pc}
 800ed54:	2000064c 	.word	0x2000064c
 800ed58:	20000650 	.word	0x20000650
 800ed5c:	20000654 	.word	0x20000654
 800ed60:	20000640 	.word	0x20000640
 800ed64:	20000644 	.word	0x20000644
 800ed68:	20000648 	.word	0x20000648
 800ed6c:	08018f6d 	.word	0x08018f6d
 800ed70:	0800f035 	.word	0x0800f035
 800ed74:	2000060c 	.word	0x2000060c
 800ed78:	0800ed7d 	.word	0x0800ed7d

0800ed7c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800ed7c:	b480      	push	{r7}
 800ed7e:	b083      	sub	sp, #12
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800ed84:	bf00      	nop
 800ed86:	370c      	adds	r7, #12
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed8e:	4770      	bx	lr

0800ed90 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800ed90:	b580      	push	{r7, lr}
 800ed92:	b084      	sub	sp, #16
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800ed98:	2300      	movs	r3, #0
 800ed9a:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800ed9c:	4b3f      	ldr	r3, [pc, #252]	; (800ee9c <low_level_init+0x10c>)
 800ed9e:	4a40      	ldr	r2, [pc, #256]	; (800eea0 <low_level_init+0x110>)
 800eda0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800eda2:	2300      	movs	r3, #0
 800eda4:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800eda6:	2380      	movs	r3, #128	; 0x80
 800eda8:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800edaa:	23e1      	movs	r3, #225	; 0xe1
 800edac:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800edae:	2300      	movs	r3, #0
 800edb0:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800edb2:	2300      	movs	r3, #0
 800edb4:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800edb6:	2300      	movs	r3, #0
 800edb8:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800edba:	4a38      	ldr	r2, [pc, #224]	; (800ee9c <low_level_init+0x10c>)
 800edbc:	f107 0308 	add.w	r3, r7, #8
 800edc0:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800edc2:	4b36      	ldr	r3, [pc, #216]	; (800ee9c <low_level_init+0x10c>)
 800edc4:	2201      	movs	r2, #1
 800edc6:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800edc8:	4b34      	ldr	r3, [pc, #208]	; (800ee9c <low_level_init+0x10c>)
 800edca:	4a36      	ldr	r2, [pc, #216]	; (800eea4 <low_level_init+0x114>)
 800edcc:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800edce:	4b33      	ldr	r3, [pc, #204]	; (800ee9c <low_level_init+0x10c>)
 800edd0:	4a35      	ldr	r2, [pc, #212]	; (800eea8 <low_level_init+0x118>)
 800edd2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800edd4:	4b31      	ldr	r3, [pc, #196]	; (800ee9c <low_level_init+0x10c>)
 800edd6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800edda:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800eddc:	482f      	ldr	r0, [pc, #188]	; (800ee9c <low_level_init+0x10c>)
 800edde:	f7f6 ff8f 	bl	8005d00 <HAL_ETH_Init>
 800ede2:	4603      	mov	r3, r0
 800ede4:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800ede6:	2238      	movs	r2, #56	; 0x38
 800ede8:	2100      	movs	r1, #0
 800edea:	4830      	ldr	r0, [pc, #192]	; (800eeac <low_level_init+0x11c>)
 800edec:	f00b f826 	bl	8019e3c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800edf0:	4b2e      	ldr	r3, [pc, #184]	; (800eeac <low_level_init+0x11c>)
 800edf2:	2221      	movs	r2, #33	; 0x21
 800edf4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800edf6:	4b2d      	ldr	r3, [pc, #180]	; (800eeac <low_level_init+0x11c>)
 800edf8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800edfc:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800edfe:	4b2b      	ldr	r3, [pc, #172]	; (800eeac <low_level_init+0x11c>)
 800ee00:	2200      	movs	r2, #0
 800ee02:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800ee04:	482a      	ldr	r0, [pc, #168]	; (800eeb0 <low_level_init+0x120>)
 800ee06:	f001 f82d 	bl	800fe64 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	2206      	movs	r2, #6
 800ee0e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800ee12:	4b22      	ldr	r3, [pc, #136]	; (800ee9c <low_level_init+0x10c>)
 800ee14:	685b      	ldr	r3, [r3, #4]
 800ee16:	781a      	ldrb	r2, [r3, #0]
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800ee1e:	4b1f      	ldr	r3, [pc, #124]	; (800ee9c <low_level_init+0x10c>)
 800ee20:	685b      	ldr	r3, [r3, #4]
 800ee22:	785a      	ldrb	r2, [r3, #1]
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800ee2a:	4b1c      	ldr	r3, [pc, #112]	; (800ee9c <low_level_init+0x10c>)
 800ee2c:	685b      	ldr	r3, [r3, #4]
 800ee2e:	789a      	ldrb	r2, [r3, #2]
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800ee36:	4b19      	ldr	r3, [pc, #100]	; (800ee9c <low_level_init+0x10c>)
 800ee38:	685b      	ldr	r3, [r3, #4]
 800ee3a:	78da      	ldrb	r2, [r3, #3]
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800ee42:	4b16      	ldr	r3, [pc, #88]	; (800ee9c <low_level_init+0x10c>)
 800ee44:	685b      	ldr	r3, [r3, #4]
 800ee46:	791a      	ldrb	r2, [r3, #4]
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800ee4e:	4b13      	ldr	r3, [pc, #76]	; (800ee9c <low_level_init+0x10c>)
 800ee50:	685b      	ldr	r3, [r3, #4]
 800ee52:	795a      	ldrb	r2, [r3, #5]
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800ee60:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ee68:	f043 030a 	orr.w	r3, r3, #10
 800ee6c:	b2da      	uxtb	r2, r3
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800ee74:	490f      	ldr	r1, [pc, #60]	; (800eeb4 <low_level_init+0x124>)
 800ee76:	4810      	ldr	r0, [pc, #64]	; (800eeb8 <low_level_init+0x128>)
 800ee78:	f7f4 fc2b 	bl	80036d2 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800ee7c:	480e      	ldr	r0, [pc, #56]	; (800eeb8 <low_level_init+0x128>)
 800ee7e:	f7f4 fc5a 	bl	8003736 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800ee82:	7bfb      	ldrb	r3, [r7, #15]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d103      	bne.n	800ee90 <low_level_init+0x100>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800ee88:	6878      	ldr	r0, [r7, #4]
 800ee8a:	f000 fa3f 	bl	800f30c <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800ee8e:	e001      	b.n	800ee94 <low_level_init+0x104>
    Error_Handler();
 800ee90:	f7f3 fede 	bl	8002c50 <Error_Handler>
}
 800ee94:	bf00      	nop
 800ee96:	3710      	adds	r7, #16
 800ee98:	46bd      	mov	sp, r7
 800ee9a:	bd80      	pop	{r7, pc}
 800ee9c:	20000660 	.word	0x20000660
 800eea0:	40028000 	.word	0x40028000
 800eea4:	30040060 	.word	0x30040060
 800eea8:	30040000 	.word	0x30040000
 800eeac:	20000710 	.word	0x20000710
 800eeb0:	0801eea0 	.word	0x0801eea0
 800eeb4:	20000044 	.word	0x20000044
 800eeb8:	20000748 	.word	0x20000748

0800eebc <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800eebc:	b580      	push	{r7, lr}
 800eebe:	b092      	sub	sp, #72	; 0x48
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	6078      	str	r0, [r7, #4]
 800eec4:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800eec6:	2300      	movs	r3, #0
 800eec8:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800eeca:	2300      	movs	r3, #0
 800eecc:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800eece:	2300      	movs	r3, #0
 800eed0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800eed4:	f107 030c 	add.w	r3, r7, #12
 800eed8:	2230      	movs	r2, #48	; 0x30
 800eeda:	2100      	movs	r1, #0
 800eedc:	4618      	mov	r0, r3
 800eede:	f00a ffad 	bl	8019e3c <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800eee2:	f107 030c 	add.w	r3, r7, #12
 800eee6:	2230      	movs	r2, #48	; 0x30
 800eee8:	2100      	movs	r1, #0
 800eeea:	4618      	mov	r0, r3
 800eeec:	f00a ffa6 	bl	8019e3c <memset>

  for(q = p; q != NULL; q = q->next)
 800eef0:	683b      	ldr	r3, [r7, #0]
 800eef2:	643b      	str	r3, [r7, #64]	; 0x40
 800eef4:	e045      	b.n	800ef82 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800eef6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eef8:	2b03      	cmp	r3, #3
 800eefa:	d902      	bls.n	800ef02 <low_level_output+0x46>
      return ERR_IF;
 800eefc:	f06f 030b 	mvn.w	r3, #11
 800ef00:	e055      	b.n	800efae <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800ef02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef04:	6859      	ldr	r1, [r3, #4]
 800ef06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ef08:	4613      	mov	r3, r2
 800ef0a:	005b      	lsls	r3, r3, #1
 800ef0c:	4413      	add	r3, r2
 800ef0e:	009b      	lsls	r3, r3, #2
 800ef10:	3348      	adds	r3, #72	; 0x48
 800ef12:	443b      	add	r3, r7
 800ef14:	3b3c      	subs	r3, #60	; 0x3c
 800ef16:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800ef18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef1a:	895b      	ldrh	r3, [r3, #10]
 800ef1c:	4619      	mov	r1, r3
 800ef1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ef20:	4613      	mov	r3, r2
 800ef22:	005b      	lsls	r3, r3, #1
 800ef24:	4413      	add	r3, r2
 800ef26:	009b      	lsls	r3, r3, #2
 800ef28:	3348      	adds	r3, #72	; 0x48
 800ef2a:	443b      	add	r3, r7
 800ef2c:	3b38      	subs	r3, #56	; 0x38
 800ef2e:	6019      	str	r1, [r3, #0]

    if(i>0)
 800ef30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d011      	beq.n	800ef5a <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800ef36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef38:	1e5a      	subs	r2, r3, #1
 800ef3a:	f107 000c 	add.w	r0, r7, #12
 800ef3e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ef40:	460b      	mov	r3, r1
 800ef42:	005b      	lsls	r3, r3, #1
 800ef44:	440b      	add	r3, r1
 800ef46:	009b      	lsls	r3, r3, #2
 800ef48:	18c1      	adds	r1, r0, r3
 800ef4a:	4613      	mov	r3, r2
 800ef4c:	005b      	lsls	r3, r3, #1
 800ef4e:	4413      	add	r3, r2
 800ef50:	009b      	lsls	r3, r3, #2
 800ef52:	3348      	adds	r3, #72	; 0x48
 800ef54:	443b      	add	r3, r7
 800ef56:	3b34      	subs	r3, #52	; 0x34
 800ef58:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800ef5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d109      	bne.n	800ef76 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800ef62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ef64:	4613      	mov	r3, r2
 800ef66:	005b      	lsls	r3, r3, #1
 800ef68:	4413      	add	r3, r2
 800ef6a:	009b      	lsls	r3, r3, #2
 800ef6c:	3348      	adds	r3, #72	; 0x48
 800ef6e:	443b      	add	r3, r7
 800ef70:	3b34      	subs	r3, #52	; 0x34
 800ef72:	2200      	movs	r2, #0
 800ef74:	601a      	str	r2, [r3, #0]
    }

    i++;
 800ef76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef78:	3301      	adds	r3, #1
 800ef7a:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800ef7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	643b      	str	r3, [r7, #64]	; 0x40
 800ef82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d1b6      	bne.n	800eef6 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800ef88:	683b      	ldr	r3, [r7, #0]
 800ef8a:	891b      	ldrh	r3, [r3, #8]
 800ef8c:	461a      	mov	r2, r3
 800ef8e:	4b0a      	ldr	r3, [pc, #40]	; (800efb8 <low_level_output+0xfc>)
 800ef90:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800ef92:	4a09      	ldr	r2, [pc, #36]	; (800efb8 <low_level_output+0xfc>)
 800ef94:	f107 030c 	add.w	r3, r7, #12
 800ef98:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800ef9a:	4a07      	ldr	r2, [pc, #28]	; (800efb8 <low_level_output+0xfc>)
 800ef9c:	683b      	ldr	r3, [r7, #0]
 800ef9e:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800efa0:	2214      	movs	r2, #20
 800efa2:	4905      	ldr	r1, [pc, #20]	; (800efb8 <low_level_output+0xfc>)
 800efa4:	4805      	ldr	r0, [pc, #20]	; (800efbc <low_level_output+0x100>)
 800efa6:	f7f7 f843 	bl	8006030 <HAL_ETH_Transmit>

  return errval;
 800efaa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800efae:	4618      	mov	r0, r3
 800efb0:	3748      	adds	r7, #72	; 0x48
 800efb2:	46bd      	mov	sp, r7
 800efb4:	bd80      	pop	{r7, pc}
 800efb6:	bf00      	nop
 800efb8:	20000710 	.word	0x20000710
 800efbc:	20000660 	.word	0x20000660

0800efc0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800efc0:	b580      	push	{r7, lr}
 800efc2:	b084      	sub	sp, #16
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800efc8:	2300      	movs	r3, #0
 800efca:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800efcc:	4b07      	ldr	r3, [pc, #28]	; (800efec <low_level_input+0x2c>)
 800efce:	781b      	ldrb	r3, [r3, #0]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d105      	bne.n	800efe0 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800efd4:	f107 030c 	add.w	r3, r7, #12
 800efd8:	4619      	mov	r1, r3
 800efda:	4805      	ldr	r0, [pc, #20]	; (800eff0 <low_level_input+0x30>)
 800efdc:	f7f7 f8bf 	bl	800615e <HAL_ETH_ReadData>
  }

  return p;
 800efe0:	68fb      	ldr	r3, [r7, #12]
}
 800efe2:	4618      	mov	r0, r3
 800efe4:	3710      	adds	r7, #16
 800efe6:	46bd      	mov	sp, r7
 800efe8:	bd80      	pop	{r7, pc}
 800efea:	bf00      	nop
 800efec:	2000065c 	.word	0x2000065c
 800eff0:	20000660 	.word	0x20000660

0800eff4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800eff4:	b580      	push	{r7, lr}
 800eff6:	b084      	sub	sp, #16
 800eff8:	af00      	add	r7, sp, #0
 800effa:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800effc:	2300      	movs	r3, #0
 800effe:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 800f000:	6878      	ldr	r0, [r7, #4]
 800f002:	f7ff ffdd 	bl	800efc0 <low_level_input>
 800f006:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d00a      	beq.n	800f024 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	691b      	ldr	r3, [r3, #16]
 800f012:	6879      	ldr	r1, [r7, #4]
 800f014:	68f8      	ldr	r0, [r7, #12]
 800f016:	4798      	blx	r3
 800f018:	4603      	mov	r3, r0
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d002      	beq.n	800f024 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 800f01e:	68f8      	ldr	r0, [r7, #12]
 800f020:	f001 fe9c 	bl	8010d5c <pbuf_free>
      }
    }
  } while(p!=NULL);
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	2b00      	cmp	r3, #0
 800f028:	d1ea      	bne.n	800f000 <ethernetif_input+0xc>
}
 800f02a:	bf00      	nop
 800f02c:	bf00      	nop
 800f02e:	3710      	adds	r7, #16
 800f030:	46bd      	mov	sp, r7
 800f032:	bd80      	pop	{r7, pc}

0800f034 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800f034:	b580      	push	{r7, lr}
 800f036:	b082      	sub	sp, #8
 800f038:	af00      	add	r7, sp, #0
 800f03a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d106      	bne.n	800f050 <ethernetif_init+0x1c>
 800f042:	4b0e      	ldr	r3, [pc, #56]	; (800f07c <ethernetif_init+0x48>)
 800f044:	f240 1285 	movw	r2, #389	; 0x185
 800f048:	490d      	ldr	r1, [pc, #52]	; (800f080 <ethernetif_init+0x4c>)
 800f04a:	480e      	ldr	r0, [pc, #56]	; (800f084 <ethernetif_init+0x50>)
 800f04c:	f00a fda0 	bl	8019b90 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	2273      	movs	r2, #115	; 0x73
 800f054:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	2274      	movs	r2, #116	; 0x74
 800f05c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	4a09      	ldr	r2, [pc, #36]	; (800f088 <ethernetif_init+0x54>)
 800f064:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	4a08      	ldr	r2, [pc, #32]	; (800f08c <ethernetif_init+0x58>)
 800f06a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800f06c:	6878      	ldr	r0, [r7, #4]
 800f06e:	f7ff fe8f 	bl	800ed90 <low_level_init>

  return ERR_OK;
 800f072:	2300      	movs	r3, #0
}
 800f074:	4618      	mov	r0, r3
 800f076:	3708      	adds	r7, #8
 800f078:	46bd      	mov	sp, r7
 800f07a:	bd80      	pop	{r7, pc}
 800f07c:	0801c468 	.word	0x0801c468
 800f080:	0801c484 	.word	0x0801c484
 800f084:	0801c494 	.word	0x0801c494
 800f088:	080173d9 	.word	0x080173d9
 800f08c:	0800eebd 	.word	0x0800eebd

0800f090 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800f090:	b580      	push	{r7, lr}
 800f092:	b084      	sub	sp, #16
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800f09c:	68f9      	ldr	r1, [r7, #12]
 800f09e:	4807      	ldr	r0, [pc, #28]	; (800f0bc <pbuf_free_custom+0x2c>)
 800f0a0:	f000 ffc2 	bl	8010028 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800f0a4:	4b06      	ldr	r3, [pc, #24]	; (800f0c0 <pbuf_free_custom+0x30>)
 800f0a6:	781b      	ldrb	r3, [r3, #0]
 800f0a8:	2b01      	cmp	r3, #1
 800f0aa:	d102      	bne.n	800f0b2 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800f0ac:	4b04      	ldr	r3, [pc, #16]	; (800f0c0 <pbuf_free_custom+0x30>)
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	701a      	strb	r2, [r3, #0]
  }
}
 800f0b2:	bf00      	nop
 800f0b4:	3710      	adds	r7, #16
 800f0b6:	46bd      	mov	sp, r7
 800f0b8:	bd80      	pop	{r7, pc}
 800f0ba:	bf00      	nop
 800f0bc:	0801eea0 	.word	0x0801eea0
 800f0c0:	2000065c 	.word	0x2000065c

0800f0c4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800f0c4:	b580      	push	{r7, lr}
 800f0c6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800f0c8:	f7f4 fcea 	bl	8003aa0 <HAL_GetTick>
 800f0cc:	4603      	mov	r3, r0
}
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	bd80      	pop	{r7, pc}
	...

0800f0d4 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800f0d4:	b580      	push	{r7, lr}
 800f0d6:	b08e      	sub	sp, #56	; 0x38
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f0dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f0e0:	2200      	movs	r2, #0
 800f0e2:	601a      	str	r2, [r3, #0]
 800f0e4:	605a      	str	r2, [r3, #4]
 800f0e6:	609a      	str	r2, [r3, #8]
 800f0e8:	60da      	str	r2, [r3, #12]
 800f0ea:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	4a59      	ldr	r2, [pc, #356]	; (800f258 <HAL_ETH_MspInit+0x184>)
 800f0f2:	4293      	cmp	r3, r2
 800f0f4:	f040 80ab 	bne.w	800f24e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800f0f8:	4b58      	ldr	r3, [pc, #352]	; (800f25c <HAL_ETH_MspInit+0x188>)
 800f0fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f0fe:	4a57      	ldr	r2, [pc, #348]	; (800f25c <HAL_ETH_MspInit+0x188>)
 800f100:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f104:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800f108:	4b54      	ldr	r3, [pc, #336]	; (800f25c <HAL_ETH_MspInit+0x188>)
 800f10a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f10e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f112:	623b      	str	r3, [r7, #32]
 800f114:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800f116:	4b51      	ldr	r3, [pc, #324]	; (800f25c <HAL_ETH_MspInit+0x188>)
 800f118:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f11c:	4a4f      	ldr	r2, [pc, #316]	; (800f25c <HAL_ETH_MspInit+0x188>)
 800f11e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f122:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800f126:	4b4d      	ldr	r3, [pc, #308]	; (800f25c <HAL_ETH_MspInit+0x188>)
 800f128:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f12c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f130:	61fb      	str	r3, [r7, #28]
 800f132:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800f134:	4b49      	ldr	r3, [pc, #292]	; (800f25c <HAL_ETH_MspInit+0x188>)
 800f136:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f13a:	4a48      	ldr	r2, [pc, #288]	; (800f25c <HAL_ETH_MspInit+0x188>)
 800f13c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f140:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800f144:	4b45      	ldr	r3, [pc, #276]	; (800f25c <HAL_ETH_MspInit+0x188>)
 800f146:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f14a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f14e:	61bb      	str	r3, [r7, #24]
 800f150:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f152:	4b42      	ldr	r3, [pc, #264]	; (800f25c <HAL_ETH_MspInit+0x188>)
 800f154:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f158:	4a40      	ldr	r2, [pc, #256]	; (800f25c <HAL_ETH_MspInit+0x188>)
 800f15a:	f043 0304 	orr.w	r3, r3, #4
 800f15e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f162:	4b3e      	ldr	r3, [pc, #248]	; (800f25c <HAL_ETH_MspInit+0x188>)
 800f164:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f168:	f003 0304 	and.w	r3, r3, #4
 800f16c:	617b      	str	r3, [r7, #20]
 800f16e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f170:	4b3a      	ldr	r3, [pc, #232]	; (800f25c <HAL_ETH_MspInit+0x188>)
 800f172:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f176:	4a39      	ldr	r2, [pc, #228]	; (800f25c <HAL_ETH_MspInit+0x188>)
 800f178:	f043 0301 	orr.w	r3, r3, #1
 800f17c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f180:	4b36      	ldr	r3, [pc, #216]	; (800f25c <HAL_ETH_MspInit+0x188>)
 800f182:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f186:	f003 0301 	and.w	r3, r3, #1
 800f18a:	613b      	str	r3, [r7, #16]
 800f18c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f18e:	4b33      	ldr	r3, [pc, #204]	; (800f25c <HAL_ETH_MspInit+0x188>)
 800f190:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f194:	4a31      	ldr	r2, [pc, #196]	; (800f25c <HAL_ETH_MspInit+0x188>)
 800f196:	f043 0302 	orr.w	r3, r3, #2
 800f19a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f19e:	4b2f      	ldr	r3, [pc, #188]	; (800f25c <HAL_ETH_MspInit+0x188>)
 800f1a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f1a4:	f003 0302 	and.w	r3, r3, #2
 800f1a8:	60fb      	str	r3, [r7, #12]
 800f1aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800f1ac:	4b2b      	ldr	r3, [pc, #172]	; (800f25c <HAL_ETH_MspInit+0x188>)
 800f1ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f1b2:	4a2a      	ldr	r2, [pc, #168]	; (800f25c <HAL_ETH_MspInit+0x188>)
 800f1b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f1b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f1bc:	4b27      	ldr	r3, [pc, #156]	; (800f25c <HAL_ETH_MspInit+0x188>)
 800f1be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f1c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f1c6:	60bb      	str	r3, [r7, #8]
 800f1c8:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800f1ca:	2332      	movs	r3, #50	; 0x32
 800f1cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f1ce:	2302      	movs	r3, #2
 800f1d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f1d6:	2300      	movs	r3, #0
 800f1d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f1da:	230b      	movs	r3, #11
 800f1dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f1de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f1e2:	4619      	mov	r1, r3
 800f1e4:	481e      	ldr	r0, [pc, #120]	; (800f260 <HAL_ETH_MspInit+0x18c>)
 800f1e6:	f7f8 f94b 	bl	8007480 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800f1ea:	2386      	movs	r3, #134	; 0x86
 800f1ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f1ee:	2302      	movs	r3, #2
 800f1f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f1f6:	2300      	movs	r3, #0
 800f1f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f1fa:	230b      	movs	r3, #11
 800f1fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f1fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f202:	4619      	mov	r1, r3
 800f204:	4817      	ldr	r0, [pc, #92]	; (800f264 <HAL_ETH_MspInit+0x190>)
 800f206:	f7f8 f93b 	bl	8007480 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800f20a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f20e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f210:	2302      	movs	r3, #2
 800f212:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f214:	2300      	movs	r3, #0
 800f216:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f218:	2300      	movs	r3, #0
 800f21a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f21c:	230b      	movs	r3, #11
 800f21e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f220:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f224:	4619      	mov	r1, r3
 800f226:	4810      	ldr	r0, [pc, #64]	; (800f268 <HAL_ETH_MspInit+0x194>)
 800f228:	f7f8 f92a 	bl	8007480 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800f22c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800f230:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f232:	2302      	movs	r3, #2
 800f234:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f236:	2300      	movs	r3, #0
 800f238:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f23a:	2300      	movs	r3, #0
 800f23c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f23e:	230b      	movs	r3, #11
 800f240:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800f242:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f246:	4619      	mov	r1, r3
 800f248:	4808      	ldr	r0, [pc, #32]	; (800f26c <HAL_ETH_MspInit+0x198>)
 800f24a:	f7f8 f919 	bl	8007480 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800f24e:	bf00      	nop
 800f250:	3738      	adds	r7, #56	; 0x38
 800f252:	46bd      	mov	sp, r7
 800f254:	bd80      	pop	{r7, pc}
 800f256:	bf00      	nop
 800f258:	40028000 	.word	0x40028000
 800f25c:	58024400 	.word	0x58024400
 800f260:	58020800 	.word	0x58020800
 800f264:	58020000 	.word	0x58020000
 800f268:	58020400 	.word	0x58020400
 800f26c:	58021800 	.word	0x58021800

0800f270 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800f270:	b580      	push	{r7, lr}
 800f272:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800f274:	4802      	ldr	r0, [pc, #8]	; (800f280 <ETH_PHY_IO_Init+0x10>)
 800f276:	f7f7 fb37 	bl	80068e8 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800f27a:	2300      	movs	r3, #0
}
 800f27c:	4618      	mov	r0, r3
 800f27e:	bd80      	pop	{r7, pc}
 800f280:	20000660 	.word	0x20000660

0800f284 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800f284:	b480      	push	{r7}
 800f286:	af00      	add	r7, sp, #0
  return 0;
 800f288:	2300      	movs	r3, #0
}
 800f28a:	4618      	mov	r0, r3
 800f28c:	46bd      	mov	sp, r7
 800f28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f292:	4770      	bx	lr

0800f294 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800f294:	b580      	push	{r7, lr}
 800f296:	b084      	sub	sp, #16
 800f298:	af00      	add	r7, sp, #0
 800f29a:	60f8      	str	r0, [r7, #12]
 800f29c:	60b9      	str	r1, [r7, #8]
 800f29e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	68ba      	ldr	r2, [r7, #8]
 800f2a4:	68f9      	ldr	r1, [r7, #12]
 800f2a6:	4807      	ldr	r0, [pc, #28]	; (800f2c4 <ETH_PHY_IO_ReadReg+0x30>)
 800f2a8:	f7f7 f887 	bl	80063ba <HAL_ETH_ReadPHYRegister>
 800f2ac:	4603      	mov	r3, r0
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d002      	beq.n	800f2b8 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800f2b2:	f04f 33ff 	mov.w	r3, #4294967295
 800f2b6:	e000      	b.n	800f2ba <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800f2b8:	2300      	movs	r3, #0
}
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	3710      	adds	r7, #16
 800f2be:	46bd      	mov	sp, r7
 800f2c0:	bd80      	pop	{r7, pc}
 800f2c2:	bf00      	nop
 800f2c4:	20000660 	.word	0x20000660

0800f2c8 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800f2c8:	b580      	push	{r7, lr}
 800f2ca:	b084      	sub	sp, #16
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	60f8      	str	r0, [r7, #12]
 800f2d0:	60b9      	str	r1, [r7, #8]
 800f2d2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	68ba      	ldr	r2, [r7, #8]
 800f2d8:	68f9      	ldr	r1, [r7, #12]
 800f2da:	4807      	ldr	r0, [pc, #28]	; (800f2f8 <ETH_PHY_IO_WriteReg+0x30>)
 800f2dc:	f7f7 f8c2 	bl	8006464 <HAL_ETH_WritePHYRegister>
 800f2e0:	4603      	mov	r3, r0
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d002      	beq.n	800f2ec <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800f2e6:	f04f 33ff 	mov.w	r3, #4294967295
 800f2ea:	e000      	b.n	800f2ee <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800f2ec:	2300      	movs	r3, #0
}
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	3710      	adds	r7, #16
 800f2f2:	46bd      	mov	sp, r7
 800f2f4:	bd80      	pop	{r7, pc}
 800f2f6:	bf00      	nop
 800f2f8:	20000660 	.word	0x20000660

0800f2fc <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800f2fc:	b580      	push	{r7, lr}
 800f2fe:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800f300:	f7f4 fbce 	bl	8003aa0 <HAL_GetTick>
 800f304:	4603      	mov	r3, r0
}
 800f306:	4618      	mov	r0, r3
 800f308:	bd80      	pop	{r7, pc}
	...

0800f30c <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800f30c:	b580      	push	{r7, lr}
 800f30e:	b0a0      	sub	sp, #128	; 0x80
 800f310:	af00      	add	r7, sp, #0
 800f312:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800f314:	f107 030c 	add.w	r3, r7, #12
 800f318:	2264      	movs	r2, #100	; 0x64
 800f31a:	2100      	movs	r1, #0
 800f31c:	4618      	mov	r0, r3
 800f31e:	f00a fd8d 	bl	8019e3c <memset>
  int32_t PHYLinkState = 0;
 800f322:	2300      	movs	r3, #0
 800f324:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800f326:	2300      	movs	r3, #0
 800f328:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f32a:	2300      	movs	r3, #0
 800f32c:	67bb      	str	r3, [r7, #120]	; 0x78
 800f32e:	2300      	movs	r3, #0
 800f330:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800f332:	483a      	ldr	r0, [pc, #232]	; (800f41c <ethernet_link_check_state+0x110>)
 800f334:	f7f4 faa7 	bl	8003886 <LAN8742_GetLinkState>
 800f338:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f340:	089b      	lsrs	r3, r3, #2
 800f342:	f003 0301 	and.w	r3, r3, #1
 800f346:	b2db      	uxtb	r3, r3
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d00c      	beq.n	800f366 <ethernet_link_check_state+0x5a>
 800f34c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f34e:	2b01      	cmp	r3, #1
 800f350:	dc09      	bgt.n	800f366 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800f352:	4833      	ldr	r0, [pc, #204]	; (800f420 <ethernet_link_check_state+0x114>)
 800f354:	f7f6 fe1c 	bl	8005f90 <HAL_ETH_Stop>
    netif_set_down(netif);
 800f358:	6878      	ldr	r0, [r7, #4]
 800f35a:	f001 f8e9 	bl	8010530 <netif_set_down>
    netif_set_link_down(netif);
 800f35e:	6878      	ldr	r0, [r7, #4]
 800f360:	f001 f94c 	bl	80105fc <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800f364:	e055      	b.n	800f412 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f36c:	f003 0304 	and.w	r3, r3, #4
 800f370:	2b00      	cmp	r3, #0
 800f372:	d14e      	bne.n	800f412 <ethernet_link_check_state+0x106>
 800f374:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f376:	2b01      	cmp	r3, #1
 800f378:	dd4b      	ble.n	800f412 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800f37a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f37c:	3b02      	subs	r3, #2
 800f37e:	2b03      	cmp	r3, #3
 800f380:	d82a      	bhi.n	800f3d8 <ethernet_link_check_state+0xcc>
 800f382:	a201      	add	r2, pc, #4	; (adr r2, 800f388 <ethernet_link_check_state+0x7c>)
 800f384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f388:	0800f399 	.word	0x0800f399
 800f38c:	0800f3ab 	.word	0x0800f3ab
 800f390:	0800f3bb 	.word	0x0800f3bb
 800f394:	0800f3cb 	.word	0x0800f3cb
      duplex = ETH_FULLDUPLEX_MODE;
 800f398:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f39c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800f39e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f3a2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800f3a4:	2301      	movs	r3, #1
 800f3a6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800f3a8:	e017      	b.n	800f3da <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800f3aa:	2300      	movs	r3, #0
 800f3ac:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800f3ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f3b2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800f3b4:	2301      	movs	r3, #1
 800f3b6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800f3b8:	e00f      	b.n	800f3da <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800f3ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f3be:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800f3c0:	2300      	movs	r3, #0
 800f3c2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800f3c4:	2301      	movs	r3, #1
 800f3c6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800f3c8:	e007      	b.n	800f3da <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800f3ca:	2300      	movs	r3, #0
 800f3cc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800f3ce:	2300      	movs	r3, #0
 800f3d0:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800f3d2:	2301      	movs	r3, #1
 800f3d4:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800f3d6:	e000      	b.n	800f3da <ethernet_link_check_state+0xce>
      break;
 800f3d8:	bf00      	nop
    if(linkchanged)
 800f3da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d018      	beq.n	800f412 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800f3e0:	f107 030c 	add.w	r3, r7, #12
 800f3e4:	4619      	mov	r1, r3
 800f3e6:	480e      	ldr	r0, [pc, #56]	; (800f420 <ethernet_link_check_state+0x114>)
 800f3e8:	f7f7 f890 	bl	800650c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800f3ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f3ee:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 800f3f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f3f2:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800f3f4:	f107 030c 	add.w	r3, r7, #12
 800f3f8:	4619      	mov	r1, r3
 800f3fa:	4809      	ldr	r0, [pc, #36]	; (800f420 <ethernet_link_check_state+0x114>)
 800f3fc:	f7f7 fa5a 	bl	80068b4 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800f400:	4807      	ldr	r0, [pc, #28]	; (800f420 <ethernet_link_check_state+0x114>)
 800f402:	f7f6 fd63 	bl	8005ecc <HAL_ETH_Start>
      netif_set_up(netif);
 800f406:	6878      	ldr	r0, [r7, #4]
 800f408:	f001 f826 	bl	8010458 <netif_set_up>
      netif_set_link_up(netif);
 800f40c:	6878      	ldr	r0, [r7, #4]
 800f40e:	f001 f8c1 	bl	8010594 <netif_set_link_up>
}
 800f412:	bf00      	nop
 800f414:	3780      	adds	r7, #128	; 0x80
 800f416:	46bd      	mov	sp, r7
 800f418:	bd80      	pop	{r7, pc}
 800f41a:	bf00      	nop
 800f41c:	20000748 	.word	0x20000748
 800f420:	20000660 	.word	0x20000660

0800f424 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800f424:	b580      	push	{r7, lr}
 800f426:	b086      	sub	sp, #24
 800f428:	af02      	add	r7, sp, #8
 800f42a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800f42c:	4812      	ldr	r0, [pc, #72]	; (800f478 <HAL_ETH_RxAllocateCallback+0x54>)
 800f42e:	f000 fd8d 	bl	800ff4c <memp_malloc_pool>
 800f432:	60f8      	str	r0, [r7, #12]
  if (p)
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	2b00      	cmp	r3, #0
 800f438:	d014      	beq.n	800f464 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	f103 0220 	add.w	r2, r3, #32
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	4a0d      	ldr	r2, [pc, #52]	; (800f47c <HAL_ETH_RxAllocateCallback+0x58>)
 800f448:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800f452:	9201      	str	r2, [sp, #4]
 800f454:	9300      	str	r3, [sp, #0]
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	2241      	movs	r2, #65	; 0x41
 800f45a:	2100      	movs	r1, #0
 800f45c:	2000      	movs	r0, #0
 800f45e:	f001 fac5 	bl	80109ec <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800f462:	e005      	b.n	800f470 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800f464:	4b06      	ldr	r3, [pc, #24]	; (800f480 <HAL_ETH_RxAllocateCallback+0x5c>)
 800f466:	2201      	movs	r2, #1
 800f468:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	2200      	movs	r2, #0
 800f46e:	601a      	str	r2, [r3, #0]
}
 800f470:	bf00      	nop
 800f472:	3710      	adds	r7, #16
 800f474:	46bd      	mov	sp, r7
 800f476:	bd80      	pop	{r7, pc}
 800f478:	0801eea0 	.word	0x0801eea0
 800f47c:	0800f091 	.word	0x0800f091
 800f480:	2000065c 	.word	0x2000065c

0800f484 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800f484:	b480      	push	{r7}
 800f486:	b08d      	sub	sp, #52	; 0x34
 800f488:	af00      	add	r7, sp, #0
 800f48a:	60f8      	str	r0, [r7, #12]
 800f48c:	60b9      	str	r1, [r7, #8]
 800f48e:	607a      	str	r2, [r7, #4]
 800f490:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800f496:	68bb      	ldr	r3, [r7, #8]
 800f498:	627b      	str	r3, [r7, #36]	; 0x24
  struct pbuf *p = NULL;
 800f49a:	2300      	movs	r3, #0
 800f49c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	3b20      	subs	r3, #32
 800f4a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  p->next = NULL;
 800f4a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4a6:	2200      	movs	r2, #0
 800f4a8:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800f4aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4ac:	2200      	movs	r2, #0
 800f4ae:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800f4b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4b2:	887a      	ldrh	r2, [r7, #2]
 800f4b4:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800f4b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d103      	bne.n	800f4c6 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800f4be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f4c2:	601a      	str	r2, [r3, #0]
 800f4c4:	e003      	b.n	800f4ce <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800f4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f4cc:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800f4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f4d2:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800f4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f4da:	e009      	b.n	800f4f0 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800f4dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4de:	891a      	ldrh	r2, [r3, #8]
 800f4e0:	887b      	ldrh	r3, [r7, #2]
 800f4e2:	4413      	add	r3, r2
 800f4e4:	b29a      	uxth	r2, r3
 800f4e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4e8:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800f4ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f4f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d1f2      	bne.n	800f4dc <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800f4f6:	887b      	ldrh	r3, [r7, #2]
 800f4f8:	687a      	ldr	r2, [r7, #4]
 800f4fa:	623a      	str	r2, [r7, #32]
 800f4fc:	61fb      	str	r3, [r7, #28]
    if ( dsize > 0 ) { 
 800f4fe:	69fb      	ldr	r3, [r7, #28]
 800f500:	2b00      	cmp	r3, #0
 800f502:	dd1d      	ble.n	800f540 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800f504:	6a3b      	ldr	r3, [r7, #32]
 800f506:	f003 021f 	and.w	r2, r3, #31
 800f50a:	69fb      	ldr	r3, [r7, #28]
 800f50c:	4413      	add	r3, r2
 800f50e:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800f510:	6a3b      	ldr	r3, [r7, #32]
 800f512:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800f514:	f3bf 8f4f 	dsb	sy
}
 800f518:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800f51a:	4a0d      	ldr	r2, [pc, #52]	; (800f550 <HAL_ETH_RxLinkCallback+0xcc>)
 800f51c:	697b      	ldr	r3, [r7, #20]
 800f51e:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800f522:	697b      	ldr	r3, [r7, #20]
 800f524:	3320      	adds	r3, #32
 800f526:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800f528:	69bb      	ldr	r3, [r7, #24]
 800f52a:	3b20      	subs	r3, #32
 800f52c:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 800f52e:	69bb      	ldr	r3, [r7, #24]
 800f530:	2b00      	cmp	r3, #0
 800f532:	dcf2      	bgt.n	800f51a <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 800f534:	f3bf 8f4f 	dsb	sy
}
 800f538:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800f53a:	f3bf 8f6f 	isb	sy
}
 800f53e:	bf00      	nop
}
 800f540:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 800f542:	bf00      	nop
 800f544:	3734      	adds	r7, #52	; 0x34
 800f546:	46bd      	mov	sp, r7
 800f548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f54c:	4770      	bx	lr
 800f54e:	bf00      	nop
 800f550:	e000ed00 	.word	0xe000ed00

0800f554 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800f554:	b480      	push	{r7}
 800f556:	b083      	sub	sp, #12
 800f558:	af00      	add	r7, sp, #0
 800f55a:	4603      	mov	r3, r0
 800f55c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800f55e:	88fb      	ldrh	r3, [r7, #6]
 800f560:	021b      	lsls	r3, r3, #8
 800f562:	b21a      	sxth	r2, r3
 800f564:	88fb      	ldrh	r3, [r7, #6]
 800f566:	0a1b      	lsrs	r3, r3, #8
 800f568:	b29b      	uxth	r3, r3
 800f56a:	b21b      	sxth	r3, r3
 800f56c:	4313      	orrs	r3, r2
 800f56e:	b21b      	sxth	r3, r3
 800f570:	b29b      	uxth	r3, r3
}
 800f572:	4618      	mov	r0, r3
 800f574:	370c      	adds	r7, #12
 800f576:	46bd      	mov	sp, r7
 800f578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57c:	4770      	bx	lr

0800f57e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800f57e:	b480      	push	{r7}
 800f580:	b083      	sub	sp, #12
 800f582:	af00      	add	r7, sp, #0
 800f584:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	061a      	lsls	r2, r3, #24
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	021b      	lsls	r3, r3, #8
 800f58e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f592:	431a      	orrs	r2, r3
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	0a1b      	lsrs	r3, r3, #8
 800f598:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f59c:	431a      	orrs	r2, r3
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	0e1b      	lsrs	r3, r3, #24
 800f5a2:	4313      	orrs	r3, r2
}
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	370c      	adds	r7, #12
 800f5a8:	46bd      	mov	sp, r7
 800f5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ae:	4770      	bx	lr

0800f5b0 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800f5b0:	b480      	push	{r7}
 800f5b2:	b089      	sub	sp, #36	; 0x24
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	6078      	str	r0, [r7, #4]
 800f5b8:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800f5be:	2300      	movs	r3, #0
 800f5c0:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800f5c2:	2300      	movs	r3, #0
 800f5c4:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800f5c6:	69fb      	ldr	r3, [r7, #28]
 800f5c8:	f003 0301 	and.w	r3, r3, #1
 800f5cc:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800f5ce:	693b      	ldr	r3, [r7, #16]
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d00d      	beq.n	800f5f0 <lwip_standard_chksum+0x40>
 800f5d4:	683b      	ldr	r3, [r7, #0]
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	dd0a      	ble.n	800f5f0 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800f5da:	69fa      	ldr	r2, [r7, #28]
 800f5dc:	1c53      	adds	r3, r2, #1
 800f5de:	61fb      	str	r3, [r7, #28]
 800f5e0:	f107 030e 	add.w	r3, r7, #14
 800f5e4:	3301      	adds	r3, #1
 800f5e6:	7812      	ldrb	r2, [r2, #0]
 800f5e8:	701a      	strb	r2, [r3, #0]
    len--;
 800f5ea:	683b      	ldr	r3, [r7, #0]
 800f5ec:	3b01      	subs	r3, #1
 800f5ee:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800f5f0:	69fb      	ldr	r3, [r7, #28]
 800f5f2:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800f5f4:	e00a      	b.n	800f60c <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800f5f6:	69bb      	ldr	r3, [r7, #24]
 800f5f8:	1c9a      	adds	r2, r3, #2
 800f5fa:	61ba      	str	r2, [r7, #24]
 800f5fc:	881b      	ldrh	r3, [r3, #0]
 800f5fe:	461a      	mov	r2, r3
 800f600:	697b      	ldr	r3, [r7, #20]
 800f602:	4413      	add	r3, r2
 800f604:	617b      	str	r3, [r7, #20]
    len -= 2;
 800f606:	683b      	ldr	r3, [r7, #0]
 800f608:	3b02      	subs	r3, #2
 800f60a:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800f60c:	683b      	ldr	r3, [r7, #0]
 800f60e:	2b01      	cmp	r3, #1
 800f610:	dcf1      	bgt.n	800f5f6 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800f612:	683b      	ldr	r3, [r7, #0]
 800f614:	2b00      	cmp	r3, #0
 800f616:	dd04      	ble.n	800f622 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800f618:	f107 030e 	add.w	r3, r7, #14
 800f61c:	69ba      	ldr	r2, [r7, #24]
 800f61e:	7812      	ldrb	r2, [r2, #0]
 800f620:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800f622:	89fb      	ldrh	r3, [r7, #14]
 800f624:	461a      	mov	r2, r3
 800f626:	697b      	ldr	r3, [r7, #20]
 800f628:	4413      	add	r3, r2
 800f62a:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800f62c:	697b      	ldr	r3, [r7, #20]
 800f62e:	0c1a      	lsrs	r2, r3, #16
 800f630:	697b      	ldr	r3, [r7, #20]
 800f632:	b29b      	uxth	r3, r3
 800f634:	4413      	add	r3, r2
 800f636:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800f638:	697b      	ldr	r3, [r7, #20]
 800f63a:	0c1a      	lsrs	r2, r3, #16
 800f63c:	697b      	ldr	r3, [r7, #20]
 800f63e:	b29b      	uxth	r3, r3
 800f640:	4413      	add	r3, r2
 800f642:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800f644:	693b      	ldr	r3, [r7, #16]
 800f646:	2b00      	cmp	r3, #0
 800f648:	d007      	beq.n	800f65a <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800f64a:	697b      	ldr	r3, [r7, #20]
 800f64c:	021b      	lsls	r3, r3, #8
 800f64e:	b29a      	uxth	r2, r3
 800f650:	697b      	ldr	r3, [r7, #20]
 800f652:	0a1b      	lsrs	r3, r3, #8
 800f654:	b2db      	uxtb	r3, r3
 800f656:	4313      	orrs	r3, r2
 800f658:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800f65a:	697b      	ldr	r3, [r7, #20]
 800f65c:	b29b      	uxth	r3, r3
}
 800f65e:	4618      	mov	r0, r3
 800f660:	3724      	adds	r7, #36	; 0x24
 800f662:	46bd      	mov	sp, r7
 800f664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f668:	4770      	bx	lr

0800f66a <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800f66a:	b580      	push	{r7, lr}
 800f66c:	b082      	sub	sp, #8
 800f66e:	af00      	add	r7, sp, #0
 800f670:	6078      	str	r0, [r7, #4]
 800f672:	460b      	mov	r3, r1
 800f674:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800f676:	887b      	ldrh	r3, [r7, #2]
 800f678:	4619      	mov	r1, r3
 800f67a:	6878      	ldr	r0, [r7, #4]
 800f67c:	f7ff ff98 	bl	800f5b0 <lwip_standard_chksum>
 800f680:	4603      	mov	r3, r0
 800f682:	43db      	mvns	r3, r3
 800f684:	b29b      	uxth	r3, r3
}
 800f686:	4618      	mov	r0, r3
 800f688:	3708      	adds	r7, #8
 800f68a:	46bd      	mov	sp, r7
 800f68c:	bd80      	pop	{r7, pc}

0800f68e <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800f68e:	b580      	push	{r7, lr}
 800f690:	b086      	sub	sp, #24
 800f692:	af00      	add	r7, sp, #0
 800f694:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800f696:	2300      	movs	r3, #0
 800f698:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800f69a:	2300      	movs	r3, #0
 800f69c:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	613b      	str	r3, [r7, #16]
 800f6a2:	e02b      	b.n	800f6fc <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800f6a4:	693b      	ldr	r3, [r7, #16]
 800f6a6:	685a      	ldr	r2, [r3, #4]
 800f6a8:	693b      	ldr	r3, [r7, #16]
 800f6aa:	895b      	ldrh	r3, [r3, #10]
 800f6ac:	4619      	mov	r1, r3
 800f6ae:	4610      	mov	r0, r2
 800f6b0:	f7ff ff7e 	bl	800f5b0 <lwip_standard_chksum>
 800f6b4:	4603      	mov	r3, r0
 800f6b6:	461a      	mov	r2, r3
 800f6b8:	697b      	ldr	r3, [r7, #20]
 800f6ba:	4413      	add	r3, r2
 800f6bc:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800f6be:	697b      	ldr	r3, [r7, #20]
 800f6c0:	0c1a      	lsrs	r2, r3, #16
 800f6c2:	697b      	ldr	r3, [r7, #20]
 800f6c4:	b29b      	uxth	r3, r3
 800f6c6:	4413      	add	r3, r2
 800f6c8:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800f6ca:	693b      	ldr	r3, [r7, #16]
 800f6cc:	895b      	ldrh	r3, [r3, #10]
 800f6ce:	f003 0301 	and.w	r3, r3, #1
 800f6d2:	b29b      	uxth	r3, r3
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d00e      	beq.n	800f6f6 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	bf0c      	ite	eq
 800f6de:	2301      	moveq	r3, #1
 800f6e0:	2300      	movne	r3, #0
 800f6e2:	b2db      	uxtb	r3, r3
 800f6e4:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800f6e6:	697b      	ldr	r3, [r7, #20]
 800f6e8:	021b      	lsls	r3, r3, #8
 800f6ea:	b29a      	uxth	r2, r3
 800f6ec:	697b      	ldr	r3, [r7, #20]
 800f6ee:	0a1b      	lsrs	r3, r3, #8
 800f6f0:	b2db      	uxtb	r3, r3
 800f6f2:	4313      	orrs	r3, r2
 800f6f4:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800f6f6:	693b      	ldr	r3, [r7, #16]
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	613b      	str	r3, [r7, #16]
 800f6fc:	693b      	ldr	r3, [r7, #16]
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d1d0      	bne.n	800f6a4 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	2b00      	cmp	r3, #0
 800f706:	d007      	beq.n	800f718 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800f708:	697b      	ldr	r3, [r7, #20]
 800f70a:	021b      	lsls	r3, r3, #8
 800f70c:	b29a      	uxth	r2, r3
 800f70e:	697b      	ldr	r3, [r7, #20]
 800f710:	0a1b      	lsrs	r3, r3, #8
 800f712:	b2db      	uxtb	r3, r3
 800f714:	4313      	orrs	r3, r2
 800f716:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800f718:	697b      	ldr	r3, [r7, #20]
 800f71a:	b29b      	uxth	r3, r3
 800f71c:	43db      	mvns	r3, r3
 800f71e:	b29b      	uxth	r3, r3
}
 800f720:	4618      	mov	r0, r3
 800f722:	3718      	adds	r7, #24
 800f724:	46bd      	mov	sp, r7
 800f726:	bd80      	pop	{r7, pc}

0800f728 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800f728:	b580      	push	{r7, lr}
 800f72a:	b082      	sub	sp, #8
 800f72c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800f72e:	2300      	movs	r3, #0
 800f730:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800f732:	f000 f8d3 	bl	800f8dc <mem_init>
  memp_init();
 800f736:	f000 fbc5 	bl	800fec4 <memp_init>
  pbuf_init();
  netif_init();
 800f73a:	f000 fcc3 	bl	80100c4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800f73e:	f007 f845 	bl	80167cc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800f742:	f001 fd99 	bl	8011278 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800f746:	f006 ffb7 	bl	80166b8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800f74a:	bf00      	nop
 800f74c:	3708      	adds	r7, #8
 800f74e:	46bd      	mov	sp, r7
 800f750:	bd80      	pop	{r7, pc}
	...

0800f754 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800f754:	b480      	push	{r7}
 800f756:	b083      	sub	sp, #12
 800f758:	af00      	add	r7, sp, #0
 800f75a:	6078      	str	r0, [r7, #4]
  return (struct mem *)(void *)&ram[ptr];
 800f75c:	4b04      	ldr	r3, [pc, #16]	; (800f770 <ptr_to_mem+0x1c>)
 800f75e:	681a      	ldr	r2, [r3, #0]
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	4413      	add	r3, r2
}
 800f764:	4618      	mov	r0, r3
 800f766:	370c      	adds	r7, #12
 800f768:	46bd      	mov	sp, r7
 800f76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f76e:	4770      	bx	lr
 800f770:	20000780 	.word	0x20000780

0800f774 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800f774:	b480      	push	{r7}
 800f776:	b083      	sub	sp, #12
 800f778:	af00      	add	r7, sp, #0
 800f77a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800f77c:	4b04      	ldr	r3, [pc, #16]	; (800f790 <mem_to_ptr+0x1c>)
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	687a      	ldr	r2, [r7, #4]
 800f782:	1ad3      	subs	r3, r2, r3
}
 800f784:	4618      	mov	r0, r3
 800f786:	370c      	adds	r7, #12
 800f788:	46bd      	mov	sp, r7
 800f78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f78e:	4770      	bx	lr
 800f790:	20000780 	.word	0x20000780

0800f794 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800f794:	b590      	push	{r4, r7, lr}
 800f796:	b085      	sub	sp, #20
 800f798:	af00      	add	r7, sp, #0
 800f79a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800f79c:	4b45      	ldr	r3, [pc, #276]	; (800f8b4 <plug_holes+0x120>)
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	687a      	ldr	r2, [r7, #4]
 800f7a2:	429a      	cmp	r2, r3
 800f7a4:	d206      	bcs.n	800f7b4 <plug_holes+0x20>
 800f7a6:	4b44      	ldr	r3, [pc, #272]	; (800f8b8 <plug_holes+0x124>)
 800f7a8:	f240 12df 	movw	r2, #479	; 0x1df
 800f7ac:	4943      	ldr	r1, [pc, #268]	; (800f8bc <plug_holes+0x128>)
 800f7ae:	4844      	ldr	r0, [pc, #272]	; (800f8c0 <plug_holes+0x12c>)
 800f7b0:	f00a f9ee 	bl	8019b90 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800f7b4:	4b43      	ldr	r3, [pc, #268]	; (800f8c4 <plug_holes+0x130>)
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	687a      	ldr	r2, [r7, #4]
 800f7ba:	429a      	cmp	r2, r3
 800f7bc:	d306      	bcc.n	800f7cc <plug_holes+0x38>
 800f7be:	4b3e      	ldr	r3, [pc, #248]	; (800f8b8 <plug_holes+0x124>)
 800f7c0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800f7c4:	4940      	ldr	r1, [pc, #256]	; (800f8c8 <plug_holes+0x134>)
 800f7c6:	483e      	ldr	r0, [pc, #248]	; (800f8c0 <plug_holes+0x12c>)
 800f7c8:	f00a f9e2 	bl	8019b90 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	7a1b      	ldrb	r3, [r3, #8]
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d006      	beq.n	800f7e2 <plug_holes+0x4e>
 800f7d4:	4b38      	ldr	r3, [pc, #224]	; (800f8b8 <plug_holes+0x124>)
 800f7d6:	f240 12e1 	movw	r2, #481	; 0x1e1
 800f7da:	493c      	ldr	r1, [pc, #240]	; (800f8cc <plug_holes+0x138>)
 800f7dc:	4838      	ldr	r0, [pc, #224]	; (800f8c0 <plug_holes+0x12c>)
 800f7de:	f00a f9d7 	bl	8019b90 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	4a3a      	ldr	r2, [pc, #232]	; (800f8d0 <plug_holes+0x13c>)
 800f7e8:	4293      	cmp	r3, r2
 800f7ea:	d906      	bls.n	800f7fa <plug_holes+0x66>
 800f7ec:	4b32      	ldr	r3, [pc, #200]	; (800f8b8 <plug_holes+0x124>)
 800f7ee:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800f7f2:	4938      	ldr	r1, [pc, #224]	; (800f8d4 <plug_holes+0x140>)
 800f7f4:	4832      	ldr	r0, [pc, #200]	; (800f8c0 <plug_holes+0x12c>)
 800f7f6:	f00a f9cb 	bl	8019b90 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	4618      	mov	r0, r3
 800f800:	f7ff ffa8 	bl	800f754 <ptr_to_mem>
 800f804:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800f806:	687a      	ldr	r2, [r7, #4]
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	429a      	cmp	r2, r3
 800f80c:	d024      	beq.n	800f858 <plug_holes+0xc4>
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	7a1b      	ldrb	r3, [r3, #8]
 800f812:	2b00      	cmp	r3, #0
 800f814:	d120      	bne.n	800f858 <plug_holes+0xc4>
 800f816:	4b2b      	ldr	r3, [pc, #172]	; (800f8c4 <plug_holes+0x130>)
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	68fa      	ldr	r2, [r7, #12]
 800f81c:	429a      	cmp	r2, r3
 800f81e:	d01b      	beq.n	800f858 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800f820:	4b2d      	ldr	r3, [pc, #180]	; (800f8d8 <plug_holes+0x144>)
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	68fa      	ldr	r2, [r7, #12]
 800f826:	429a      	cmp	r2, r3
 800f828:	d102      	bne.n	800f830 <plug_holes+0x9c>
      lfree = mem;
 800f82a:	4a2b      	ldr	r2, [pc, #172]	; (800f8d8 <plug_holes+0x144>)
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	681a      	ldr	r2, [r3, #0]
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	601a      	str	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	4a24      	ldr	r2, [pc, #144]	; (800f8d0 <plug_holes+0x13c>)
 800f83e:	4293      	cmp	r3, r2
 800f840:	d00a      	beq.n	800f858 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	4618      	mov	r0, r3
 800f848:	f7ff ff84 	bl	800f754 <ptr_to_mem>
 800f84c:	4604      	mov	r4, r0
 800f84e:	6878      	ldr	r0, [r7, #4]
 800f850:	f7ff ff90 	bl	800f774 <mem_to_ptr>
 800f854:	4603      	mov	r3, r0
 800f856:	6063      	str	r3, [r4, #4]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	685b      	ldr	r3, [r3, #4]
 800f85c:	4618      	mov	r0, r3
 800f85e:	f7ff ff79 	bl	800f754 <ptr_to_mem>
 800f862:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800f864:	68ba      	ldr	r2, [r7, #8]
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	429a      	cmp	r2, r3
 800f86a:	d01f      	beq.n	800f8ac <plug_holes+0x118>
 800f86c:	68bb      	ldr	r3, [r7, #8]
 800f86e:	7a1b      	ldrb	r3, [r3, #8]
 800f870:	2b00      	cmp	r3, #0
 800f872:	d11b      	bne.n	800f8ac <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800f874:	4b18      	ldr	r3, [pc, #96]	; (800f8d8 <plug_holes+0x144>)
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	687a      	ldr	r2, [r7, #4]
 800f87a:	429a      	cmp	r2, r3
 800f87c:	d102      	bne.n	800f884 <plug_holes+0xf0>
      lfree = pmem;
 800f87e:	4a16      	ldr	r2, [pc, #88]	; (800f8d8 <plug_holes+0x144>)
 800f880:	68bb      	ldr	r3, [r7, #8]
 800f882:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	681a      	ldr	r2, [r3, #0]
 800f888:	68bb      	ldr	r3, [r7, #8]
 800f88a:	601a      	str	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	4a0f      	ldr	r2, [pc, #60]	; (800f8d0 <plug_holes+0x13c>)
 800f892:	4293      	cmp	r3, r2
 800f894:	d00a      	beq.n	800f8ac <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	4618      	mov	r0, r3
 800f89c:	f7ff ff5a 	bl	800f754 <ptr_to_mem>
 800f8a0:	4604      	mov	r4, r0
 800f8a2:	68b8      	ldr	r0, [r7, #8]
 800f8a4:	f7ff ff66 	bl	800f774 <mem_to_ptr>
 800f8a8:	4603      	mov	r3, r0
 800f8aa:	6063      	str	r3, [r4, #4]
    }
  }
}
 800f8ac:	bf00      	nop
 800f8ae:	3714      	adds	r7, #20
 800f8b0:	46bd      	mov	sp, r7
 800f8b2:	bd90      	pop	{r4, r7, pc}
 800f8b4:	20000780 	.word	0x20000780
 800f8b8:	0801c4bc 	.word	0x0801c4bc
 800f8bc:	0801c4ec 	.word	0x0801c4ec
 800f8c0:	0801c504 	.word	0x0801c504
 800f8c4:	20000784 	.word	0x20000784
 800f8c8:	0801c52c 	.word	0x0801c52c
 800f8cc:	0801c548 	.word	0x0801c548
 800f8d0:	0001ffe8 	.word	0x0001ffe8
 800f8d4:	0801c564 	.word	0x0801c564
 800f8d8:	20000788 	.word	0x20000788

0800f8dc <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	b082      	sub	sp, #8
 800f8e0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800f8e2:	4b14      	ldr	r3, [pc, #80]	; (800f934 <mem_init+0x58>)
 800f8e4:	4a14      	ldr	r2, [pc, #80]	; (800f938 <mem_init+0x5c>)
 800f8e6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800f8e8:	4b12      	ldr	r3, [pc, #72]	; (800f934 <mem_init+0x58>)
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	4a12      	ldr	r2, [pc, #72]	; (800f93c <mem_init+0x60>)
 800f8f2:	601a      	str	r2, [r3, #0]
  mem->prev = 0;
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	2200      	movs	r2, #0
 800f8f8:	605a      	str	r2, [r3, #4]
  mem->used = 0;
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	2200      	movs	r2, #0
 800f8fe:	721a      	strb	r2, [r3, #8]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800f900:	480e      	ldr	r0, [pc, #56]	; (800f93c <mem_init+0x60>)
 800f902:	f7ff ff27 	bl	800f754 <ptr_to_mem>
 800f906:	4603      	mov	r3, r0
 800f908:	4a0d      	ldr	r2, [pc, #52]	; (800f940 <mem_init+0x64>)
 800f90a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800f90c:	4b0c      	ldr	r3, [pc, #48]	; (800f940 <mem_init+0x64>)
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	2201      	movs	r2, #1
 800f912:	721a      	strb	r2, [r3, #8]
  ram_end->next = MEM_SIZE_ALIGNED;
 800f914:	4b0a      	ldr	r3, [pc, #40]	; (800f940 <mem_init+0x64>)
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	4a08      	ldr	r2, [pc, #32]	; (800f93c <mem_init+0x60>)
 800f91a:	601a      	str	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800f91c:	4b08      	ldr	r3, [pc, #32]	; (800f940 <mem_init+0x64>)
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	4a06      	ldr	r2, [pc, #24]	; (800f93c <mem_init+0x60>)
 800f922:	605a      	str	r2, [r3, #4]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800f924:	4b03      	ldr	r3, [pc, #12]	; (800f934 <mem_init+0x58>)
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	4a06      	ldr	r2, [pc, #24]	; (800f944 <mem_init+0x68>)
 800f92a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800f92c:	bf00      	nop
 800f92e:	3708      	adds	r7, #8
 800f930:	46bd      	mov	sp, r7
 800f932:	bd80      	pop	{r7, pc}
 800f934:	20000780 	.word	0x20000780
 800f938:	30020000 	.word	0x30020000
 800f93c:	0001ffe8 	.word	0x0001ffe8
 800f940:	20000784 	.word	0x20000784
 800f944:	20000788 	.word	0x20000788

0800f948 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800f948:	b580      	push	{r7, lr}
 800f94a:	b086      	sub	sp, #24
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800f950:	6878      	ldr	r0, [r7, #4]
 800f952:	f7ff ff0f 	bl	800f774 <mem_to_ptr>
 800f956:	6178      	str	r0, [r7, #20]
  nmem = ptr_to_mem(mem->next);
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	4618      	mov	r0, r3
 800f95e:	f7ff fef9 	bl	800f754 <ptr_to_mem>
 800f962:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	685b      	ldr	r3, [r3, #4]
 800f968:	4618      	mov	r0, r3
 800f96a:	f7ff fef3 	bl	800f754 <ptr_to_mem>
 800f96e:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	4a11      	ldr	r2, [pc, #68]	; (800f9bc <mem_link_valid+0x74>)
 800f976:	4293      	cmp	r3, r2
 800f978:	d818      	bhi.n	800f9ac <mem_link_valid+0x64>
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	685b      	ldr	r3, [r3, #4]
 800f97e:	4a0f      	ldr	r2, [pc, #60]	; (800f9bc <mem_link_valid+0x74>)
 800f980:	4293      	cmp	r3, r2
 800f982:	d813      	bhi.n	800f9ac <mem_link_valid+0x64>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	685b      	ldr	r3, [r3, #4]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800f988:	697a      	ldr	r2, [r7, #20]
 800f98a:	429a      	cmp	r2, r3
 800f98c:	d004      	beq.n	800f998 <mem_link_valid+0x50>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	697a      	ldr	r2, [r7, #20]
 800f994:	429a      	cmp	r2, r3
 800f996:	d109      	bne.n	800f9ac <mem_link_valid+0x64>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800f998:	4b09      	ldr	r3, [pc, #36]	; (800f9c0 <mem_link_valid+0x78>)
 800f99a:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f99c:	693a      	ldr	r2, [r7, #16]
 800f99e:	429a      	cmp	r2, r3
 800f9a0:	d006      	beq.n	800f9b0 <mem_link_valid+0x68>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800f9a2:	693b      	ldr	r3, [r7, #16]
 800f9a4:	685b      	ldr	r3, [r3, #4]
 800f9a6:	697a      	ldr	r2, [r7, #20]
 800f9a8:	429a      	cmp	r2, r3
 800f9aa:	d001      	beq.n	800f9b0 <mem_link_valid+0x68>
    return 0;
 800f9ac:	2300      	movs	r3, #0
 800f9ae:	e000      	b.n	800f9b2 <mem_link_valid+0x6a>
  }
  return 1;
 800f9b0:	2301      	movs	r3, #1
}
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	3718      	adds	r7, #24
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	bd80      	pop	{r7, pc}
 800f9ba:	bf00      	nop
 800f9bc:	0001ffe8 	.word	0x0001ffe8
 800f9c0:	20000784 	.word	0x20000784

0800f9c4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800f9c4:	b580      	push	{r7, lr}
 800f9c6:	b084      	sub	sp, #16
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d04c      	beq.n	800fa6c <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	f003 0303 	and.w	r3, r3, #3
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d007      	beq.n	800f9ec <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800f9dc:	4b25      	ldr	r3, [pc, #148]	; (800fa74 <mem_free+0xb0>)
 800f9de:	f240 2273 	movw	r2, #627	; 0x273
 800f9e2:	4925      	ldr	r1, [pc, #148]	; (800fa78 <mem_free+0xb4>)
 800f9e4:	4825      	ldr	r0, [pc, #148]	; (800fa7c <mem_free+0xb8>)
 800f9e6:	f00a f8d3 	bl	8019b90 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800f9ea:	e040      	b.n	800fa6e <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	3b0c      	subs	r3, #12
 800f9f0:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800f9f2:	4b23      	ldr	r3, [pc, #140]	; (800fa80 <mem_free+0xbc>)
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	68fa      	ldr	r2, [r7, #12]
 800f9f8:	429a      	cmp	r2, r3
 800f9fa:	d306      	bcc.n	800fa0a <mem_free+0x46>
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	f103 020c 	add.w	r2, r3, #12
 800fa02:	4b20      	ldr	r3, [pc, #128]	; (800fa84 <mem_free+0xc0>)
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	429a      	cmp	r2, r3
 800fa08:	d907      	bls.n	800fa1a <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800fa0a:	4b1a      	ldr	r3, [pc, #104]	; (800fa74 <mem_free+0xb0>)
 800fa0c:	f240 227f 	movw	r2, #639	; 0x27f
 800fa10:	491d      	ldr	r1, [pc, #116]	; (800fa88 <mem_free+0xc4>)
 800fa12:	481a      	ldr	r0, [pc, #104]	; (800fa7c <mem_free+0xb8>)
 800fa14:	f00a f8bc 	bl	8019b90 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800fa18:	e029      	b.n	800fa6e <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	7a1b      	ldrb	r3, [r3, #8]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d107      	bne.n	800fa32 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800fa22:	4b14      	ldr	r3, [pc, #80]	; (800fa74 <mem_free+0xb0>)
 800fa24:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800fa28:	4918      	ldr	r1, [pc, #96]	; (800fa8c <mem_free+0xc8>)
 800fa2a:	4814      	ldr	r0, [pc, #80]	; (800fa7c <mem_free+0xb8>)
 800fa2c:	f00a f8b0 	bl	8019b90 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800fa30:	e01d      	b.n	800fa6e <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800fa32:	68f8      	ldr	r0, [r7, #12]
 800fa34:	f7ff ff88 	bl	800f948 <mem_link_valid>
 800fa38:	4603      	mov	r3, r0
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d107      	bne.n	800fa4e <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800fa3e:	4b0d      	ldr	r3, [pc, #52]	; (800fa74 <mem_free+0xb0>)
 800fa40:	f240 2295 	movw	r2, #661	; 0x295
 800fa44:	4912      	ldr	r1, [pc, #72]	; (800fa90 <mem_free+0xcc>)
 800fa46:	480d      	ldr	r0, [pc, #52]	; (800fa7c <mem_free+0xb8>)
 800fa48:	f00a f8a2 	bl	8019b90 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800fa4c:	e00f      	b.n	800fa6e <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	2200      	movs	r2, #0
 800fa52:	721a      	strb	r2, [r3, #8]

  if (mem < lfree) {
 800fa54:	4b0f      	ldr	r3, [pc, #60]	; (800fa94 <mem_free+0xd0>)
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	68fa      	ldr	r2, [r7, #12]
 800fa5a:	429a      	cmp	r2, r3
 800fa5c:	d202      	bcs.n	800fa64 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800fa5e:	4a0d      	ldr	r2, [pc, #52]	; (800fa94 <mem_free+0xd0>)
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800fa64:	68f8      	ldr	r0, [r7, #12]
 800fa66:	f7ff fe95 	bl	800f794 <plug_holes>
 800fa6a:	e000      	b.n	800fa6e <mem_free+0xaa>
    return;
 800fa6c:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800fa6e:	3710      	adds	r7, #16
 800fa70:	46bd      	mov	sp, r7
 800fa72:	bd80      	pop	{r7, pc}
 800fa74:	0801c4bc 	.word	0x0801c4bc
 800fa78:	0801c590 	.word	0x0801c590
 800fa7c:	0801c504 	.word	0x0801c504
 800fa80:	20000780 	.word	0x20000780
 800fa84:	20000784 	.word	0x20000784
 800fa88:	0801c5b4 	.word	0x0801c5b4
 800fa8c:	0801c5d0 	.word	0x0801c5d0
 800fa90:	0801c5f8 	.word	0x0801c5f8
 800fa94:	20000788 	.word	0x20000788

0800fa98 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800fa98:	b580      	push	{r7, lr}
 800fa9a:	b08a      	sub	sp, #40	; 0x28
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	6078      	str	r0, [r7, #4]
 800faa0:	6039      	str	r1, [r7, #0]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800faa2:	683b      	ldr	r3, [r7, #0]
 800faa4:	3303      	adds	r3, #3
 800faa6:	f023 0303 	bic.w	r3, r3, #3
 800faaa:	627b      	str	r3, [r7, #36]	; 0x24
  if (newsize < MIN_SIZE_ALIGNED) {
 800faac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faae:	2b0b      	cmp	r3, #11
 800fab0:	d801      	bhi.n	800fab6 <mem_trim+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800fab2:	230c      	movs	r3, #12
 800fab4:	627b      	str	r3, [r7, #36]	; 0x24
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800fab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fab8:	4a68      	ldr	r2, [pc, #416]	; (800fc5c <mem_trim+0x1c4>)
 800faba:	4293      	cmp	r3, r2
 800fabc:	d803      	bhi.n	800fac6 <mem_trim+0x2e>
 800fabe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fac0:	683b      	ldr	r3, [r7, #0]
 800fac2:	429a      	cmp	r2, r3
 800fac4:	d201      	bcs.n	800faca <mem_trim+0x32>
    return NULL;
 800fac6:	2300      	movs	r3, #0
 800fac8:	e0c4      	b.n	800fc54 <mem_trim+0x1bc>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800faca:	4b65      	ldr	r3, [pc, #404]	; (800fc60 <mem_trim+0x1c8>)
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	687a      	ldr	r2, [r7, #4]
 800fad0:	429a      	cmp	r2, r3
 800fad2:	d304      	bcc.n	800fade <mem_trim+0x46>
 800fad4:	4b63      	ldr	r3, [pc, #396]	; (800fc64 <mem_trim+0x1cc>)
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	687a      	ldr	r2, [r7, #4]
 800fada:	429a      	cmp	r2, r3
 800fadc:	d306      	bcc.n	800faec <mem_trim+0x54>
 800fade:	4b62      	ldr	r3, [pc, #392]	; (800fc68 <mem_trim+0x1d0>)
 800fae0:	f240 22d1 	movw	r2, #721	; 0x2d1
 800fae4:	4961      	ldr	r1, [pc, #388]	; (800fc6c <mem_trim+0x1d4>)
 800fae6:	4862      	ldr	r0, [pc, #392]	; (800fc70 <mem_trim+0x1d8>)
 800fae8:	f00a f852 	bl	8019b90 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800faec:	4b5c      	ldr	r3, [pc, #368]	; (800fc60 <mem_trim+0x1c8>)
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	687a      	ldr	r2, [r7, #4]
 800faf2:	429a      	cmp	r2, r3
 800faf4:	d304      	bcc.n	800fb00 <mem_trim+0x68>
 800faf6:	4b5b      	ldr	r3, [pc, #364]	; (800fc64 <mem_trim+0x1cc>)
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	687a      	ldr	r2, [r7, #4]
 800fafc:	429a      	cmp	r2, r3
 800fafe:	d301      	bcc.n	800fb04 <mem_trim+0x6c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	e0a7      	b.n	800fc54 <mem_trim+0x1bc>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	3b0c      	subs	r3, #12
 800fb08:	623b      	str	r3, [r7, #32]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800fb0a:	6a38      	ldr	r0, [r7, #32]
 800fb0c:	f7ff fe32 	bl	800f774 <mem_to_ptr>
 800fb10:	61f8      	str	r0, [r7, #28]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800fb12:	6a3b      	ldr	r3, [r7, #32]
 800fb14:	681a      	ldr	r2, [r3, #0]
 800fb16:	69fb      	ldr	r3, [r7, #28]
 800fb18:	1ad3      	subs	r3, r2, r3
 800fb1a:	3b0c      	subs	r3, #12
 800fb1c:	61bb      	str	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800fb1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb20:	69bb      	ldr	r3, [r7, #24]
 800fb22:	429a      	cmp	r2, r3
 800fb24:	d906      	bls.n	800fb34 <mem_trim+0x9c>
 800fb26:	4b50      	ldr	r3, [pc, #320]	; (800fc68 <mem_trim+0x1d0>)
 800fb28:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800fb2c:	4951      	ldr	r1, [pc, #324]	; (800fc74 <mem_trim+0x1dc>)
 800fb2e:	4850      	ldr	r0, [pc, #320]	; (800fc70 <mem_trim+0x1d8>)
 800fb30:	f00a f82e 	bl	8019b90 <iprintf>
  if (newsize > size) {
 800fb34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb36:	69bb      	ldr	r3, [r7, #24]
 800fb38:	429a      	cmp	r2, r3
 800fb3a:	d901      	bls.n	800fb40 <mem_trim+0xa8>
    /* not supported */
    return NULL;
 800fb3c:	2300      	movs	r3, #0
 800fb3e:	e089      	b.n	800fc54 <mem_trim+0x1bc>
  }
  if (newsize == size) {
 800fb40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb42:	69bb      	ldr	r3, [r7, #24]
 800fb44:	429a      	cmp	r2, r3
 800fb46:	d101      	bne.n	800fb4c <mem_trim+0xb4>
    /* No change in size, simply return */
    return rmem;
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	e083      	b.n	800fc54 <mem_trim+0x1bc>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800fb4c:	6a3b      	ldr	r3, [r7, #32]
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	4618      	mov	r0, r3
 800fb52:	f7ff fdff 	bl	800f754 <ptr_to_mem>
 800fb56:	6178      	str	r0, [r7, #20]
  if (mem2->used == 0) {
 800fb58:	697b      	ldr	r3, [r7, #20]
 800fb5a:	7a1b      	ldrb	r3, [r3, #8]
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d13c      	bne.n	800fbda <mem_trim+0x142>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800fb60:	6a3b      	ldr	r3, [r7, #32]
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	4a3d      	ldr	r2, [pc, #244]	; (800fc5c <mem_trim+0x1c4>)
 800fb66:	4293      	cmp	r3, r2
 800fb68:	d106      	bne.n	800fb78 <mem_trim+0xe0>
 800fb6a:	4b3f      	ldr	r3, [pc, #252]	; (800fc68 <mem_trim+0x1d0>)
 800fb6c:	f240 22f5 	movw	r2, #757	; 0x2f5
 800fb70:	4941      	ldr	r1, [pc, #260]	; (800fc78 <mem_trim+0x1e0>)
 800fb72:	483f      	ldr	r0, [pc, #252]	; (800fc70 <mem_trim+0x1d8>)
 800fb74:	f00a f80c 	bl	8019b90 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800fb78:	697b      	ldr	r3, [r7, #20]
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	60fb      	str	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800fb7e:	69fa      	ldr	r2, [r7, #28]
 800fb80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb82:	4413      	add	r3, r2
 800fb84:	330c      	adds	r3, #12
 800fb86:	613b      	str	r3, [r7, #16]
    if (lfree == mem2) {
 800fb88:	4b3c      	ldr	r3, [pc, #240]	; (800fc7c <mem_trim+0x1e4>)
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	697a      	ldr	r2, [r7, #20]
 800fb8e:	429a      	cmp	r2, r3
 800fb90:	d105      	bne.n	800fb9e <mem_trim+0x106>
      lfree = ptr_to_mem(ptr2);
 800fb92:	6938      	ldr	r0, [r7, #16]
 800fb94:	f7ff fdde 	bl	800f754 <ptr_to_mem>
 800fb98:	4603      	mov	r3, r0
 800fb9a:	4a38      	ldr	r2, [pc, #224]	; (800fc7c <mem_trim+0x1e4>)
 800fb9c:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800fb9e:	6938      	ldr	r0, [r7, #16]
 800fba0:	f7ff fdd8 	bl	800f754 <ptr_to_mem>
 800fba4:	6178      	str	r0, [r7, #20]
    mem2->used = 0;
 800fba6:	697b      	ldr	r3, [r7, #20]
 800fba8:	2200      	movs	r2, #0
 800fbaa:	721a      	strb	r2, [r3, #8]
    /* restore the next pointer */
    mem2->next = next;
 800fbac:	697b      	ldr	r3, [r7, #20]
 800fbae:	68fa      	ldr	r2, [r7, #12]
 800fbb0:	601a      	str	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800fbb2:	697b      	ldr	r3, [r7, #20]
 800fbb4:	69fa      	ldr	r2, [r7, #28]
 800fbb6:	605a      	str	r2, [r3, #4]
    /* link mem to it */
    mem->next = ptr2;
 800fbb8:	6a3b      	ldr	r3, [r7, #32]
 800fbba:	693a      	ldr	r2, [r7, #16]
 800fbbc:	601a      	str	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800fbbe:	697b      	ldr	r3, [r7, #20]
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	4a26      	ldr	r2, [pc, #152]	; (800fc5c <mem_trim+0x1c4>)
 800fbc4:	4293      	cmp	r3, r2
 800fbc6:	d044      	beq.n	800fc52 <mem_trim+0x1ba>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800fbc8:	697b      	ldr	r3, [r7, #20]
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	4618      	mov	r0, r3
 800fbce:	f7ff fdc1 	bl	800f754 <ptr_to_mem>
 800fbd2:	4602      	mov	r2, r0
 800fbd4:	693b      	ldr	r3, [r7, #16]
 800fbd6:	6053      	str	r3, [r2, #4]
 800fbd8:	e03b      	b.n	800fc52 <mem_trim+0x1ba>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800fbda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbdc:	3318      	adds	r3, #24
 800fbde:	69ba      	ldr	r2, [r7, #24]
 800fbe0:	429a      	cmp	r2, r3
 800fbe2:	d336      	bcc.n	800fc52 <mem_trim+0x1ba>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800fbe4:	69fa      	ldr	r2, [r7, #28]
 800fbe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbe8:	4413      	add	r3, r2
 800fbea:	330c      	adds	r3, #12
 800fbec:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800fbee:	6a3b      	ldr	r3, [r7, #32]
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	4a1a      	ldr	r2, [pc, #104]	; (800fc5c <mem_trim+0x1c4>)
 800fbf4:	4293      	cmp	r3, r2
 800fbf6:	d106      	bne.n	800fc06 <mem_trim+0x16e>
 800fbf8:	4b1b      	ldr	r3, [pc, #108]	; (800fc68 <mem_trim+0x1d0>)
 800fbfa:	f240 3216 	movw	r2, #790	; 0x316
 800fbfe:	491e      	ldr	r1, [pc, #120]	; (800fc78 <mem_trim+0x1e0>)
 800fc00:	481b      	ldr	r0, [pc, #108]	; (800fc70 <mem_trim+0x1d8>)
 800fc02:	f009 ffc5 	bl	8019b90 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800fc06:	6938      	ldr	r0, [r7, #16]
 800fc08:	f7ff fda4 	bl	800f754 <ptr_to_mem>
 800fc0c:	6178      	str	r0, [r7, #20]
    if (mem2 < lfree) {
 800fc0e:	4b1b      	ldr	r3, [pc, #108]	; (800fc7c <mem_trim+0x1e4>)
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	697a      	ldr	r2, [r7, #20]
 800fc14:	429a      	cmp	r2, r3
 800fc16:	d202      	bcs.n	800fc1e <mem_trim+0x186>
      lfree = mem2;
 800fc18:	4a18      	ldr	r2, [pc, #96]	; (800fc7c <mem_trim+0x1e4>)
 800fc1a:	697b      	ldr	r3, [r7, #20]
 800fc1c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800fc1e:	697b      	ldr	r3, [r7, #20]
 800fc20:	2200      	movs	r2, #0
 800fc22:	721a      	strb	r2, [r3, #8]
    mem2->next = mem->next;
 800fc24:	6a3b      	ldr	r3, [r7, #32]
 800fc26:	681a      	ldr	r2, [r3, #0]
 800fc28:	697b      	ldr	r3, [r7, #20]
 800fc2a:	601a      	str	r2, [r3, #0]
    mem2->prev = ptr;
 800fc2c:	697b      	ldr	r3, [r7, #20]
 800fc2e:	69fa      	ldr	r2, [r7, #28]
 800fc30:	605a      	str	r2, [r3, #4]
    mem->next = ptr2;
 800fc32:	6a3b      	ldr	r3, [r7, #32]
 800fc34:	693a      	ldr	r2, [r7, #16]
 800fc36:	601a      	str	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800fc38:	697b      	ldr	r3, [r7, #20]
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	4a07      	ldr	r2, [pc, #28]	; (800fc5c <mem_trim+0x1c4>)
 800fc3e:	4293      	cmp	r3, r2
 800fc40:	d007      	beq.n	800fc52 <mem_trim+0x1ba>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800fc42:	697b      	ldr	r3, [r7, #20]
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	4618      	mov	r0, r3
 800fc48:	f7ff fd84 	bl	800f754 <ptr_to_mem>
 800fc4c:	4602      	mov	r2, r0
 800fc4e:	693b      	ldr	r3, [r7, #16]
 800fc50:	6053      	str	r3, [r2, #4]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800fc52:	687b      	ldr	r3, [r7, #4]
}
 800fc54:	4618      	mov	r0, r3
 800fc56:	3728      	adds	r7, #40	; 0x28
 800fc58:	46bd      	mov	sp, r7
 800fc5a:	bd80      	pop	{r7, pc}
 800fc5c:	0001ffe8 	.word	0x0001ffe8
 800fc60:	20000780 	.word	0x20000780
 800fc64:	20000784 	.word	0x20000784
 800fc68:	0801c4bc 	.word	0x0801c4bc
 800fc6c:	0801c62c 	.word	0x0801c62c
 800fc70:	0801c504 	.word	0x0801c504
 800fc74:	0801c644 	.word	0x0801c644
 800fc78:	0801c664 	.word	0x0801c664
 800fc7c:	20000788 	.word	0x20000788

0800fc80 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800fc80:	b580      	push	{r7, lr}
 800fc82:	b088      	sub	sp, #32
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	6078      	str	r0, [r7, #4]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d101      	bne.n	800fc92 <mem_malloc+0x12>
    return NULL;
 800fc8e:	2300      	movs	r3, #0
 800fc90:	e0d0      	b.n	800fe34 <mem_malloc+0x1b4>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	3303      	adds	r3, #3
 800fc96:	f023 0303 	bic.w	r3, r3, #3
 800fc9a:	61bb      	str	r3, [r7, #24]
  if (size < MIN_SIZE_ALIGNED) {
 800fc9c:	69bb      	ldr	r3, [r7, #24]
 800fc9e:	2b0b      	cmp	r3, #11
 800fca0:	d801      	bhi.n	800fca6 <mem_malloc+0x26>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800fca2:	230c      	movs	r3, #12
 800fca4:	61bb      	str	r3, [r7, #24]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800fca6:	69bb      	ldr	r3, [r7, #24]
 800fca8:	4a64      	ldr	r2, [pc, #400]	; (800fe3c <mem_malloc+0x1bc>)
 800fcaa:	4293      	cmp	r3, r2
 800fcac:	d803      	bhi.n	800fcb6 <mem_malloc+0x36>
 800fcae:	69ba      	ldr	r2, [r7, #24]
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	429a      	cmp	r2, r3
 800fcb4:	d201      	bcs.n	800fcba <mem_malloc+0x3a>
    return NULL;
 800fcb6:	2300      	movs	r3, #0
 800fcb8:	e0bc      	b.n	800fe34 <mem_malloc+0x1b4>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800fcba:	4b61      	ldr	r3, [pc, #388]	; (800fe40 <mem_malloc+0x1c0>)
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	4618      	mov	r0, r3
 800fcc0:	f7ff fd58 	bl	800f774 <mem_to_ptr>
 800fcc4:	61f8      	str	r0, [r7, #28]
 800fcc6:	e0ad      	b.n	800fe24 <mem_malloc+0x1a4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800fcc8:	69f8      	ldr	r0, [r7, #28]
 800fcca:	f7ff fd43 	bl	800f754 <ptr_to_mem>
 800fcce:	6138      	str	r0, [r7, #16]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800fcd0:	693b      	ldr	r3, [r7, #16]
 800fcd2:	7a1b      	ldrb	r3, [r3, #8]
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	f040 809f 	bne.w	800fe18 <mem_malloc+0x198>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800fcda:	693b      	ldr	r3, [r7, #16]
 800fcdc:	681a      	ldr	r2, [r3, #0]
 800fcde:	69fb      	ldr	r3, [r7, #28]
 800fce0:	1ad3      	subs	r3, r2, r3
 800fce2:	3b0c      	subs	r3, #12
      if ((!mem->used) &&
 800fce4:	69ba      	ldr	r2, [r7, #24]
 800fce6:	429a      	cmp	r2, r3
 800fce8:	f200 8096 	bhi.w	800fe18 <mem_malloc+0x198>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800fcec:	693b      	ldr	r3, [r7, #16]
 800fcee:	681a      	ldr	r2, [r3, #0]
 800fcf0:	69fb      	ldr	r3, [r7, #28]
 800fcf2:	1ad3      	subs	r3, r2, r3
 800fcf4:	f1a3 020c 	sub.w	r2, r3, #12
 800fcf8:	69bb      	ldr	r3, [r7, #24]
 800fcfa:	3318      	adds	r3, #24
 800fcfc:	429a      	cmp	r2, r3
 800fcfe:	d331      	bcc.n	800fd64 <mem_malloc+0xe4>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800fd00:	69fa      	ldr	r2, [r7, #28]
 800fd02:	69bb      	ldr	r3, [r7, #24]
 800fd04:	4413      	add	r3, r2
 800fd06:	330c      	adds	r3, #12
 800fd08:	60fb      	str	r3, [r7, #12]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	4a4b      	ldr	r2, [pc, #300]	; (800fe3c <mem_malloc+0x1bc>)
 800fd0e:	4293      	cmp	r3, r2
 800fd10:	d106      	bne.n	800fd20 <mem_malloc+0xa0>
 800fd12:	4b4c      	ldr	r3, [pc, #304]	; (800fe44 <mem_malloc+0x1c4>)
 800fd14:	f240 3287 	movw	r2, #903	; 0x387
 800fd18:	494b      	ldr	r1, [pc, #300]	; (800fe48 <mem_malloc+0x1c8>)
 800fd1a:	484c      	ldr	r0, [pc, #304]	; (800fe4c <mem_malloc+0x1cc>)
 800fd1c:	f009 ff38 	bl	8019b90 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800fd20:	68f8      	ldr	r0, [r7, #12]
 800fd22:	f7ff fd17 	bl	800f754 <ptr_to_mem>
 800fd26:	60b8      	str	r0, [r7, #8]
          mem2->used = 0;
 800fd28:	68bb      	ldr	r3, [r7, #8]
 800fd2a:	2200      	movs	r2, #0
 800fd2c:	721a      	strb	r2, [r3, #8]
          mem2->next = mem->next;
 800fd2e:	693b      	ldr	r3, [r7, #16]
 800fd30:	681a      	ldr	r2, [r3, #0]
 800fd32:	68bb      	ldr	r3, [r7, #8]
 800fd34:	601a      	str	r2, [r3, #0]
          mem2->prev = ptr;
 800fd36:	68bb      	ldr	r3, [r7, #8]
 800fd38:	69fa      	ldr	r2, [r7, #28]
 800fd3a:	605a      	str	r2, [r3, #4]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800fd3c:	693b      	ldr	r3, [r7, #16]
 800fd3e:	68fa      	ldr	r2, [r7, #12]
 800fd40:	601a      	str	r2, [r3, #0]
          mem->used = 1;
 800fd42:	693b      	ldr	r3, [r7, #16]
 800fd44:	2201      	movs	r2, #1
 800fd46:	721a      	strb	r2, [r3, #8]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800fd48:	68bb      	ldr	r3, [r7, #8]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	4a3b      	ldr	r2, [pc, #236]	; (800fe3c <mem_malloc+0x1bc>)
 800fd4e:	4293      	cmp	r3, r2
 800fd50:	d00b      	beq.n	800fd6a <mem_malloc+0xea>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800fd52:	68bb      	ldr	r3, [r7, #8]
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	4618      	mov	r0, r3
 800fd58:	f7ff fcfc 	bl	800f754 <ptr_to_mem>
 800fd5c:	4602      	mov	r2, r0
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	6053      	str	r3, [r2, #4]
 800fd62:	e002      	b.n	800fd6a <mem_malloc+0xea>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800fd64:	693b      	ldr	r3, [r7, #16]
 800fd66:	2201      	movs	r2, #1
 800fd68:	721a      	strb	r2, [r3, #8]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800fd6a:	4b35      	ldr	r3, [pc, #212]	; (800fe40 <mem_malloc+0x1c0>)
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	693a      	ldr	r2, [r7, #16]
 800fd70:	429a      	cmp	r2, r3
 800fd72:	d127      	bne.n	800fdc4 <mem_malloc+0x144>
          struct mem *cur = lfree;
 800fd74:	4b32      	ldr	r3, [pc, #200]	; (800fe40 <mem_malloc+0x1c0>)
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	617b      	str	r3, [r7, #20]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800fd7a:	e005      	b.n	800fd88 <mem_malloc+0x108>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800fd7c:	697b      	ldr	r3, [r7, #20]
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	4618      	mov	r0, r3
 800fd82:	f7ff fce7 	bl	800f754 <ptr_to_mem>
 800fd86:	6178      	str	r0, [r7, #20]
          while (cur->used && cur != ram_end) {
 800fd88:	697b      	ldr	r3, [r7, #20]
 800fd8a:	7a1b      	ldrb	r3, [r3, #8]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d004      	beq.n	800fd9a <mem_malloc+0x11a>
 800fd90:	4b2f      	ldr	r3, [pc, #188]	; (800fe50 <mem_malloc+0x1d0>)
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	697a      	ldr	r2, [r7, #20]
 800fd96:	429a      	cmp	r2, r3
 800fd98:	d1f0      	bne.n	800fd7c <mem_malloc+0xfc>
          }
          lfree = cur;
 800fd9a:	4a29      	ldr	r2, [pc, #164]	; (800fe40 <mem_malloc+0x1c0>)
 800fd9c:	697b      	ldr	r3, [r7, #20]
 800fd9e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800fda0:	4b27      	ldr	r3, [pc, #156]	; (800fe40 <mem_malloc+0x1c0>)
 800fda2:	681a      	ldr	r2, [r3, #0]
 800fda4:	4b2a      	ldr	r3, [pc, #168]	; (800fe50 <mem_malloc+0x1d0>)
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	429a      	cmp	r2, r3
 800fdaa:	d00b      	beq.n	800fdc4 <mem_malloc+0x144>
 800fdac:	4b24      	ldr	r3, [pc, #144]	; (800fe40 <mem_malloc+0x1c0>)
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	7a1b      	ldrb	r3, [r3, #8]
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d006      	beq.n	800fdc4 <mem_malloc+0x144>
 800fdb6:	4b23      	ldr	r3, [pc, #140]	; (800fe44 <mem_malloc+0x1c4>)
 800fdb8:	f240 32b5 	movw	r2, #949	; 0x3b5
 800fdbc:	4925      	ldr	r1, [pc, #148]	; (800fe54 <mem_malloc+0x1d4>)
 800fdbe:	4823      	ldr	r0, [pc, #140]	; (800fe4c <mem_malloc+0x1cc>)
 800fdc0:	f009 fee6 	bl	8019b90 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800fdc4:	693a      	ldr	r2, [r7, #16]
 800fdc6:	69bb      	ldr	r3, [r7, #24]
 800fdc8:	4413      	add	r3, r2
 800fdca:	330c      	adds	r3, #12
 800fdcc:	4a20      	ldr	r2, [pc, #128]	; (800fe50 <mem_malloc+0x1d0>)
 800fdce:	6812      	ldr	r2, [r2, #0]
 800fdd0:	4293      	cmp	r3, r2
 800fdd2:	d906      	bls.n	800fde2 <mem_malloc+0x162>
 800fdd4:	4b1b      	ldr	r3, [pc, #108]	; (800fe44 <mem_malloc+0x1c4>)
 800fdd6:	f240 32b9 	movw	r2, #953	; 0x3b9
 800fdda:	491f      	ldr	r1, [pc, #124]	; (800fe58 <mem_malloc+0x1d8>)
 800fddc:	481b      	ldr	r0, [pc, #108]	; (800fe4c <mem_malloc+0x1cc>)
 800fdde:	f009 fed7 	bl	8019b90 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800fde2:	693b      	ldr	r3, [r7, #16]
 800fde4:	f003 0303 	and.w	r3, r3, #3
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d006      	beq.n	800fdfa <mem_malloc+0x17a>
 800fdec:	4b15      	ldr	r3, [pc, #84]	; (800fe44 <mem_malloc+0x1c4>)
 800fdee:	f240 32bb 	movw	r2, #955	; 0x3bb
 800fdf2:	491a      	ldr	r1, [pc, #104]	; (800fe5c <mem_malloc+0x1dc>)
 800fdf4:	4815      	ldr	r0, [pc, #84]	; (800fe4c <mem_malloc+0x1cc>)
 800fdf6:	f009 fecb 	bl	8019b90 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800fdfa:	693b      	ldr	r3, [r7, #16]
 800fdfc:	f003 0303 	and.w	r3, r3, #3
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d006      	beq.n	800fe12 <mem_malloc+0x192>
 800fe04:	4b0f      	ldr	r3, [pc, #60]	; (800fe44 <mem_malloc+0x1c4>)
 800fe06:	f240 32bd 	movw	r2, #957	; 0x3bd
 800fe0a:	4915      	ldr	r1, [pc, #84]	; (800fe60 <mem_malloc+0x1e0>)
 800fe0c:	480f      	ldr	r0, [pc, #60]	; (800fe4c <mem_malloc+0x1cc>)
 800fe0e:	f009 febf 	bl	8019b90 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800fe12:	693b      	ldr	r3, [r7, #16]
 800fe14:	330c      	adds	r3, #12
 800fe16:	e00d      	b.n	800fe34 <mem_malloc+0x1b4>
         ptr = ptr_to_mem(ptr)->next) {
 800fe18:	69f8      	ldr	r0, [r7, #28]
 800fe1a:	f7ff fc9b 	bl	800f754 <ptr_to_mem>
 800fe1e:	4603      	mov	r3, r0
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	61fb      	str	r3, [r7, #28]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800fe24:	69ba      	ldr	r2, [r7, #24]
 800fe26:	4b05      	ldr	r3, [pc, #20]	; (800fe3c <mem_malloc+0x1bc>)
 800fe28:	1a9b      	subs	r3, r3, r2
 800fe2a:	69fa      	ldr	r2, [r7, #28]
 800fe2c:	429a      	cmp	r2, r3
 800fe2e:	f4ff af4b 	bcc.w	800fcc8 <mem_malloc+0x48>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800fe32:	2300      	movs	r3, #0
}
 800fe34:	4618      	mov	r0, r3
 800fe36:	3720      	adds	r7, #32
 800fe38:	46bd      	mov	sp, r7
 800fe3a:	bd80      	pop	{r7, pc}
 800fe3c:	0001ffe8 	.word	0x0001ffe8
 800fe40:	20000788 	.word	0x20000788
 800fe44:	0801c4bc 	.word	0x0801c4bc
 800fe48:	0801c664 	.word	0x0801c664
 800fe4c:	0801c504 	.word	0x0801c504
 800fe50:	20000784 	.word	0x20000784
 800fe54:	0801c678 	.word	0x0801c678
 800fe58:	0801c694 	.word	0x0801c694
 800fe5c:	0801c6c4 	.word	0x0801c6c4
 800fe60:	0801c6f4 	.word	0x0801c6f4

0800fe64 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800fe64:	b480      	push	{r7}
 800fe66:	b085      	sub	sp, #20
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	689b      	ldr	r3, [r3, #8]
 800fe70:	2200      	movs	r2, #0
 800fe72:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	685b      	ldr	r3, [r3, #4]
 800fe78:	3303      	adds	r3, #3
 800fe7a:	f023 0303 	bic.w	r3, r3, #3
 800fe7e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800fe80:	2300      	movs	r3, #0
 800fe82:	60fb      	str	r3, [r7, #12]
 800fe84:	e011      	b.n	800feaa <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	689b      	ldr	r3, [r3, #8]
 800fe8a:	681a      	ldr	r2, [r3, #0]
 800fe8c:	68bb      	ldr	r3, [r7, #8]
 800fe8e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	689b      	ldr	r3, [r3, #8]
 800fe94:	68ba      	ldr	r2, [r7, #8]
 800fe96:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	881b      	ldrh	r3, [r3, #0]
 800fe9c:	461a      	mov	r2, r3
 800fe9e:	68bb      	ldr	r3, [r7, #8]
 800fea0:	4413      	add	r3, r2
 800fea2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	3301      	adds	r3, #1
 800fea8:	60fb      	str	r3, [r7, #12]
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	885b      	ldrh	r3, [r3, #2]
 800feae:	461a      	mov	r2, r3
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	4293      	cmp	r3, r2
 800feb4:	dbe7      	blt.n	800fe86 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800feb6:	bf00      	nop
 800feb8:	bf00      	nop
 800feba:	3714      	adds	r7, #20
 800febc:	46bd      	mov	sp, r7
 800febe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec2:	4770      	bx	lr

0800fec4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800fec4:	b580      	push	{r7, lr}
 800fec6:	b082      	sub	sp, #8
 800fec8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800feca:	2300      	movs	r3, #0
 800fecc:	80fb      	strh	r3, [r7, #6]
 800fece:	e009      	b.n	800fee4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800fed0:	88fb      	ldrh	r3, [r7, #6]
 800fed2:	4a08      	ldr	r2, [pc, #32]	; (800fef4 <memp_init+0x30>)
 800fed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fed8:	4618      	mov	r0, r3
 800feda:	f7ff ffc3 	bl	800fe64 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800fede:	88fb      	ldrh	r3, [r7, #6]
 800fee0:	3301      	adds	r3, #1
 800fee2:	80fb      	strh	r3, [r7, #6]
 800fee4:	88fb      	ldrh	r3, [r7, #6]
 800fee6:	2b08      	cmp	r3, #8
 800fee8:	d9f2      	bls.n	800fed0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800feea:	bf00      	nop
 800feec:	bf00      	nop
 800feee:	3708      	adds	r7, #8
 800fef0:	46bd      	mov	sp, r7
 800fef2:	bd80      	pop	{r7, pc}
 800fef4:	0801ef18 	.word	0x0801ef18

0800fef8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800fef8:	b580      	push	{r7, lr}
 800fefa:	b084      	sub	sp, #16
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	689b      	ldr	r3, [r3, #8]
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d012      	beq.n	800ff34 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	689b      	ldr	r3, [r3, #8]
 800ff12:	68fa      	ldr	r2, [r7, #12]
 800ff14:	6812      	ldr	r2, [r2, #0]
 800ff16:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	f003 0303 	and.w	r3, r3, #3
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d006      	beq.n	800ff30 <do_memp_malloc_pool+0x38>
 800ff22:	4b07      	ldr	r3, [pc, #28]	; (800ff40 <do_memp_malloc_pool+0x48>)
 800ff24:	f44f 728c 	mov.w	r2, #280	; 0x118
 800ff28:	4906      	ldr	r1, [pc, #24]	; (800ff44 <do_memp_malloc_pool+0x4c>)
 800ff2a:	4807      	ldr	r0, [pc, #28]	; (800ff48 <do_memp_malloc_pool+0x50>)
 800ff2c:	f009 fe30 	bl	8019b90 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	e000      	b.n	800ff36 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800ff34:	2300      	movs	r3, #0
}
 800ff36:	4618      	mov	r0, r3
 800ff38:	3710      	adds	r7, #16
 800ff3a:	46bd      	mov	sp, r7
 800ff3c:	bd80      	pop	{r7, pc}
 800ff3e:	bf00      	nop
 800ff40:	0801c718 	.word	0x0801c718
 800ff44:	0801c748 	.word	0x0801c748
 800ff48:	0801c76c 	.word	0x0801c76c

0800ff4c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	b082      	sub	sp, #8
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d106      	bne.n	800ff68 <memp_malloc_pool+0x1c>
 800ff5a:	4b0a      	ldr	r3, [pc, #40]	; (800ff84 <memp_malloc_pool+0x38>)
 800ff5c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800ff60:	4909      	ldr	r1, [pc, #36]	; (800ff88 <memp_malloc_pool+0x3c>)
 800ff62:	480a      	ldr	r0, [pc, #40]	; (800ff8c <memp_malloc_pool+0x40>)
 800ff64:	f009 fe14 	bl	8019b90 <iprintf>
  if (desc == NULL) {
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d101      	bne.n	800ff72 <memp_malloc_pool+0x26>
    return NULL;
 800ff6e:	2300      	movs	r3, #0
 800ff70:	e003      	b.n	800ff7a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800ff72:	6878      	ldr	r0, [r7, #4]
 800ff74:	f7ff ffc0 	bl	800fef8 <do_memp_malloc_pool>
 800ff78:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800ff7a:	4618      	mov	r0, r3
 800ff7c:	3708      	adds	r7, #8
 800ff7e:	46bd      	mov	sp, r7
 800ff80:	bd80      	pop	{r7, pc}
 800ff82:	bf00      	nop
 800ff84:	0801c718 	.word	0x0801c718
 800ff88:	0801c794 	.word	0x0801c794
 800ff8c:	0801c76c 	.word	0x0801c76c

0800ff90 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800ff90:	b580      	push	{r7, lr}
 800ff92:	b084      	sub	sp, #16
 800ff94:	af00      	add	r7, sp, #0
 800ff96:	4603      	mov	r3, r0
 800ff98:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800ff9a:	79fb      	ldrb	r3, [r7, #7]
 800ff9c:	2b08      	cmp	r3, #8
 800ff9e:	d908      	bls.n	800ffb2 <memp_malloc+0x22>
 800ffa0:	4b0a      	ldr	r3, [pc, #40]	; (800ffcc <memp_malloc+0x3c>)
 800ffa2:	f240 1257 	movw	r2, #343	; 0x157
 800ffa6:	490a      	ldr	r1, [pc, #40]	; (800ffd0 <memp_malloc+0x40>)
 800ffa8:	480a      	ldr	r0, [pc, #40]	; (800ffd4 <memp_malloc+0x44>)
 800ffaa:	f009 fdf1 	bl	8019b90 <iprintf>
 800ffae:	2300      	movs	r3, #0
 800ffb0:	e008      	b.n	800ffc4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800ffb2:	79fb      	ldrb	r3, [r7, #7]
 800ffb4:	4a08      	ldr	r2, [pc, #32]	; (800ffd8 <memp_malloc+0x48>)
 800ffb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ffba:	4618      	mov	r0, r3
 800ffbc:	f7ff ff9c 	bl	800fef8 <do_memp_malloc_pool>
 800ffc0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800ffc2:	68fb      	ldr	r3, [r7, #12]
}
 800ffc4:	4618      	mov	r0, r3
 800ffc6:	3710      	adds	r7, #16
 800ffc8:	46bd      	mov	sp, r7
 800ffca:	bd80      	pop	{r7, pc}
 800ffcc:	0801c718 	.word	0x0801c718
 800ffd0:	0801c7a8 	.word	0x0801c7a8
 800ffd4:	0801c76c 	.word	0x0801c76c
 800ffd8:	0801ef18 	.word	0x0801ef18

0800ffdc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800ffdc:	b580      	push	{r7, lr}
 800ffde:	b084      	sub	sp, #16
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	6078      	str	r0, [r7, #4]
 800ffe4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800ffe6:	683b      	ldr	r3, [r7, #0]
 800ffe8:	f003 0303 	and.w	r3, r3, #3
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d006      	beq.n	800fffe <do_memp_free_pool+0x22>
 800fff0:	4b0a      	ldr	r3, [pc, #40]	; (801001c <do_memp_free_pool+0x40>)
 800fff2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800fff6:	490a      	ldr	r1, [pc, #40]	; (8010020 <do_memp_free_pool+0x44>)
 800fff8:	480a      	ldr	r0, [pc, #40]	; (8010024 <do_memp_free_pool+0x48>)
 800fffa:	f009 fdc9 	bl	8019b90 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800fffe:	683b      	ldr	r3, [r7, #0]
 8010000:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	689b      	ldr	r3, [r3, #8]
 8010006:	681a      	ldr	r2, [r3, #0]
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	689b      	ldr	r3, [r3, #8]
 8010010:	68fa      	ldr	r2, [r7, #12]
 8010012:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8010014:	bf00      	nop
 8010016:	3710      	adds	r7, #16
 8010018:	46bd      	mov	sp, r7
 801001a:	bd80      	pop	{r7, pc}
 801001c:	0801c718 	.word	0x0801c718
 8010020:	0801c7c8 	.word	0x0801c7c8
 8010024:	0801c76c 	.word	0x0801c76c

08010028 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8010028:	b580      	push	{r7, lr}
 801002a:	b082      	sub	sp, #8
 801002c:	af00      	add	r7, sp, #0
 801002e:	6078      	str	r0, [r7, #4]
 8010030:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	2b00      	cmp	r3, #0
 8010036:	d106      	bne.n	8010046 <memp_free_pool+0x1e>
 8010038:	4b0a      	ldr	r3, [pc, #40]	; (8010064 <memp_free_pool+0x3c>)
 801003a:	f240 1295 	movw	r2, #405	; 0x195
 801003e:	490a      	ldr	r1, [pc, #40]	; (8010068 <memp_free_pool+0x40>)
 8010040:	480a      	ldr	r0, [pc, #40]	; (801006c <memp_free_pool+0x44>)
 8010042:	f009 fda5 	bl	8019b90 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	2b00      	cmp	r3, #0
 801004a:	d007      	beq.n	801005c <memp_free_pool+0x34>
 801004c:	683b      	ldr	r3, [r7, #0]
 801004e:	2b00      	cmp	r3, #0
 8010050:	d004      	beq.n	801005c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8010052:	6839      	ldr	r1, [r7, #0]
 8010054:	6878      	ldr	r0, [r7, #4]
 8010056:	f7ff ffc1 	bl	800ffdc <do_memp_free_pool>
 801005a:	e000      	b.n	801005e <memp_free_pool+0x36>
    return;
 801005c:	bf00      	nop
}
 801005e:	3708      	adds	r7, #8
 8010060:	46bd      	mov	sp, r7
 8010062:	bd80      	pop	{r7, pc}
 8010064:	0801c718 	.word	0x0801c718
 8010068:	0801c794 	.word	0x0801c794
 801006c:	0801c76c 	.word	0x0801c76c

08010070 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8010070:	b580      	push	{r7, lr}
 8010072:	b082      	sub	sp, #8
 8010074:	af00      	add	r7, sp, #0
 8010076:	4603      	mov	r3, r0
 8010078:	6039      	str	r1, [r7, #0]
 801007a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 801007c:	79fb      	ldrb	r3, [r7, #7]
 801007e:	2b08      	cmp	r3, #8
 8010080:	d907      	bls.n	8010092 <memp_free+0x22>
 8010082:	4b0c      	ldr	r3, [pc, #48]	; (80100b4 <memp_free+0x44>)
 8010084:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8010088:	490b      	ldr	r1, [pc, #44]	; (80100b8 <memp_free+0x48>)
 801008a:	480c      	ldr	r0, [pc, #48]	; (80100bc <memp_free+0x4c>)
 801008c:	f009 fd80 	bl	8019b90 <iprintf>
 8010090:	e00c      	b.n	80100ac <memp_free+0x3c>

  if (mem == NULL) {
 8010092:	683b      	ldr	r3, [r7, #0]
 8010094:	2b00      	cmp	r3, #0
 8010096:	d008      	beq.n	80100aa <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8010098:	79fb      	ldrb	r3, [r7, #7]
 801009a:	4a09      	ldr	r2, [pc, #36]	; (80100c0 <memp_free+0x50>)
 801009c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80100a0:	6839      	ldr	r1, [r7, #0]
 80100a2:	4618      	mov	r0, r3
 80100a4:	f7ff ff9a 	bl	800ffdc <do_memp_free_pool>
 80100a8:	e000      	b.n	80100ac <memp_free+0x3c>
    return;
 80100aa:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80100ac:	3708      	adds	r7, #8
 80100ae:	46bd      	mov	sp, r7
 80100b0:	bd80      	pop	{r7, pc}
 80100b2:	bf00      	nop
 80100b4:	0801c718 	.word	0x0801c718
 80100b8:	0801c7e8 	.word	0x0801c7e8
 80100bc:	0801c76c 	.word	0x0801c76c
 80100c0:	0801ef18 	.word	0x0801ef18

080100c4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80100c4:	b480      	push	{r7}
 80100c6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80100c8:	bf00      	nop
 80100ca:	46bd      	mov	sp, r7
 80100cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100d0:	4770      	bx	lr
	...

080100d4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80100d4:	b580      	push	{r7, lr}
 80100d6:	b086      	sub	sp, #24
 80100d8:	af00      	add	r7, sp, #0
 80100da:	60f8      	str	r0, [r7, #12]
 80100dc:	60b9      	str	r1, [r7, #8]
 80100de:	607a      	str	r2, [r7, #4]
 80100e0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d108      	bne.n	80100fa <netif_add+0x26>
 80100e8:	4b57      	ldr	r3, [pc, #348]	; (8010248 <netif_add+0x174>)
 80100ea:	f240 1227 	movw	r2, #295	; 0x127
 80100ee:	4957      	ldr	r1, [pc, #348]	; (801024c <netif_add+0x178>)
 80100f0:	4857      	ldr	r0, [pc, #348]	; (8010250 <netif_add+0x17c>)
 80100f2:	f009 fd4d 	bl	8019b90 <iprintf>
 80100f6:	2300      	movs	r3, #0
 80100f8:	e0a2      	b.n	8010240 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80100fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d108      	bne.n	8010112 <netif_add+0x3e>
 8010100:	4b51      	ldr	r3, [pc, #324]	; (8010248 <netif_add+0x174>)
 8010102:	f44f 7294 	mov.w	r2, #296	; 0x128
 8010106:	4953      	ldr	r1, [pc, #332]	; (8010254 <netif_add+0x180>)
 8010108:	4851      	ldr	r0, [pc, #324]	; (8010250 <netif_add+0x17c>)
 801010a:	f009 fd41 	bl	8019b90 <iprintf>
 801010e:	2300      	movs	r3, #0
 8010110:	e096      	b.n	8010240 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8010112:	68bb      	ldr	r3, [r7, #8]
 8010114:	2b00      	cmp	r3, #0
 8010116:	d101      	bne.n	801011c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8010118:	4b4f      	ldr	r3, [pc, #316]	; (8010258 <netif_add+0x184>)
 801011a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	2b00      	cmp	r3, #0
 8010120:	d101      	bne.n	8010126 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8010122:	4b4d      	ldr	r3, [pc, #308]	; (8010258 <netif_add+0x184>)
 8010124:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8010126:	683b      	ldr	r3, [r7, #0]
 8010128:	2b00      	cmp	r3, #0
 801012a:	d101      	bne.n	8010130 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 801012c:	4b4a      	ldr	r3, [pc, #296]	; (8010258 <netif_add+0x184>)
 801012e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	2200      	movs	r2, #0
 8010134:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	2200      	movs	r2, #0
 801013a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	2200      	movs	r2, #0
 8010140:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	4a45      	ldr	r2, [pc, #276]	; (801025c <netif_add+0x188>)
 8010146:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	2200      	movs	r2, #0
 801014c:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	2200      	movs	r2, #0
 8010152:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	2200      	movs	r2, #0
 801015a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	6a3a      	ldr	r2, [r7, #32]
 8010160:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8010162:	4b3f      	ldr	r3, [pc, #252]	; (8010260 <netif_add+0x18c>)
 8010164:	781a      	ldrb	r2, [r3, #0]
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010170:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8010172:	683b      	ldr	r3, [r7, #0]
 8010174:	687a      	ldr	r2, [r7, #4]
 8010176:	68b9      	ldr	r1, [r7, #8]
 8010178:	68f8      	ldr	r0, [r7, #12]
 801017a:	f000 f913 	bl	80103a4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 801017e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010180:	68f8      	ldr	r0, [r7, #12]
 8010182:	4798      	blx	r3
 8010184:	4603      	mov	r3, r0
 8010186:	2b00      	cmp	r3, #0
 8010188:	d001      	beq.n	801018e <netif_add+0xba>
    return NULL;
 801018a:	2300      	movs	r3, #0
 801018c:	e058      	b.n	8010240 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010194:	2bff      	cmp	r3, #255	; 0xff
 8010196:	d103      	bne.n	80101a0 <netif_add+0xcc>
        netif->num = 0;
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	2200      	movs	r2, #0
 801019c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 80101a0:	2300      	movs	r3, #0
 80101a2:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80101a4:	4b2f      	ldr	r3, [pc, #188]	; (8010264 <netif_add+0x190>)
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	617b      	str	r3, [r7, #20]
 80101aa:	e02b      	b.n	8010204 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80101ac:	697a      	ldr	r2, [r7, #20]
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	429a      	cmp	r2, r3
 80101b2:	d106      	bne.n	80101c2 <netif_add+0xee>
 80101b4:	4b24      	ldr	r3, [pc, #144]	; (8010248 <netif_add+0x174>)
 80101b6:	f240 128b 	movw	r2, #395	; 0x18b
 80101ba:	492b      	ldr	r1, [pc, #172]	; (8010268 <netif_add+0x194>)
 80101bc:	4824      	ldr	r0, [pc, #144]	; (8010250 <netif_add+0x17c>)
 80101be:	f009 fce7 	bl	8019b90 <iprintf>
        num_netifs++;
 80101c2:	693b      	ldr	r3, [r7, #16]
 80101c4:	3301      	adds	r3, #1
 80101c6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80101c8:	693b      	ldr	r3, [r7, #16]
 80101ca:	2bff      	cmp	r3, #255	; 0xff
 80101cc:	dd06      	ble.n	80101dc <netif_add+0x108>
 80101ce:	4b1e      	ldr	r3, [pc, #120]	; (8010248 <netif_add+0x174>)
 80101d0:	f240 128d 	movw	r2, #397	; 0x18d
 80101d4:	4925      	ldr	r1, [pc, #148]	; (801026c <netif_add+0x198>)
 80101d6:	481e      	ldr	r0, [pc, #120]	; (8010250 <netif_add+0x17c>)
 80101d8:	f009 fcda 	bl	8019b90 <iprintf>
        if (netif2->num == netif->num) {
 80101dc:	697b      	ldr	r3, [r7, #20]
 80101de:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80101e2:	68fb      	ldr	r3, [r7, #12]
 80101e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80101e8:	429a      	cmp	r2, r3
 80101ea:	d108      	bne.n	80101fe <netif_add+0x12a>
          netif->num++;
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80101f2:	3301      	adds	r3, #1
 80101f4:	b2da      	uxtb	r2, r3
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 80101fc:	e005      	b.n	801020a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80101fe:	697b      	ldr	r3, [r7, #20]
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	617b      	str	r3, [r7, #20]
 8010204:	697b      	ldr	r3, [r7, #20]
 8010206:	2b00      	cmp	r3, #0
 8010208:	d1d0      	bne.n	80101ac <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 801020a:	697b      	ldr	r3, [r7, #20]
 801020c:	2b00      	cmp	r3, #0
 801020e:	d1be      	bne.n	801018e <netif_add+0xba>
  }
  if (netif->num == 254) {
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010216:	2bfe      	cmp	r3, #254	; 0xfe
 8010218:	d103      	bne.n	8010222 <netif_add+0x14e>
    netif_num = 0;
 801021a:	4b11      	ldr	r3, [pc, #68]	; (8010260 <netif_add+0x18c>)
 801021c:	2200      	movs	r2, #0
 801021e:	701a      	strb	r2, [r3, #0]
 8010220:	e006      	b.n	8010230 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010228:	3301      	adds	r3, #1
 801022a:	b2da      	uxtb	r2, r3
 801022c:	4b0c      	ldr	r3, [pc, #48]	; (8010260 <netif_add+0x18c>)
 801022e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8010230:	4b0c      	ldr	r3, [pc, #48]	; (8010264 <netif_add+0x190>)
 8010232:	681a      	ldr	r2, [r3, #0]
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8010238:	4a0a      	ldr	r2, [pc, #40]	; (8010264 <netif_add+0x190>)
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 801023e:	68fb      	ldr	r3, [r7, #12]
}
 8010240:	4618      	mov	r0, r3
 8010242:	3718      	adds	r7, #24
 8010244:	46bd      	mov	sp, r7
 8010246:	bd80      	pop	{r7, pc}
 8010248:	0801c804 	.word	0x0801c804
 801024c:	0801c898 	.word	0x0801c898
 8010250:	0801c854 	.word	0x0801c854
 8010254:	0801c8b4 	.word	0x0801c8b4
 8010258:	0801ef7c 	.word	0x0801ef7c
 801025c:	0801067f 	.word	0x0801067f
 8010260:	20007040 	.word	0x20007040
 8010264:	20007038 	.word	0x20007038
 8010268:	0801c8d8 	.word	0x0801c8d8
 801026c:	0801c8ec 	.word	0x0801c8ec

08010270 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010270:	b580      	push	{r7, lr}
 8010272:	b082      	sub	sp, #8
 8010274:	af00      	add	r7, sp, #0
 8010276:	6078      	str	r0, [r7, #4]
 8010278:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801027a:	6839      	ldr	r1, [r7, #0]
 801027c:	6878      	ldr	r0, [r7, #4]
 801027e:	f002 fb47 	bl	8012910 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8010282:	6839      	ldr	r1, [r7, #0]
 8010284:	6878      	ldr	r0, [r7, #4]
 8010286:	f006 fc2b 	bl	8016ae0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 801028a:	bf00      	nop
 801028c:	3708      	adds	r7, #8
 801028e:	46bd      	mov	sp, r7
 8010290:	bd80      	pop	{r7, pc}
	...

08010294 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8010294:	b580      	push	{r7, lr}
 8010296:	b086      	sub	sp, #24
 8010298:	af00      	add	r7, sp, #0
 801029a:	60f8      	str	r0, [r7, #12]
 801029c:	60b9      	str	r1, [r7, #8]
 801029e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80102a0:	68bb      	ldr	r3, [r7, #8]
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d106      	bne.n	80102b4 <netif_do_set_ipaddr+0x20>
 80102a6:	4b1d      	ldr	r3, [pc, #116]	; (801031c <netif_do_set_ipaddr+0x88>)
 80102a8:	f240 12cb 	movw	r2, #459	; 0x1cb
 80102ac:	491c      	ldr	r1, [pc, #112]	; (8010320 <netif_do_set_ipaddr+0x8c>)
 80102ae:	481d      	ldr	r0, [pc, #116]	; (8010324 <netif_do_set_ipaddr+0x90>)
 80102b0:	f009 fc6e 	bl	8019b90 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d106      	bne.n	80102c8 <netif_do_set_ipaddr+0x34>
 80102ba:	4b18      	ldr	r3, [pc, #96]	; (801031c <netif_do_set_ipaddr+0x88>)
 80102bc:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80102c0:	4917      	ldr	r1, [pc, #92]	; (8010320 <netif_do_set_ipaddr+0x8c>)
 80102c2:	4818      	ldr	r0, [pc, #96]	; (8010324 <netif_do_set_ipaddr+0x90>)
 80102c4:	f009 fc64 	bl	8019b90 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80102c8:	68bb      	ldr	r3, [r7, #8]
 80102ca:	681a      	ldr	r2, [r3, #0]
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	3304      	adds	r3, #4
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	429a      	cmp	r2, r3
 80102d4:	d01c      	beq.n	8010310 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80102d6:	68bb      	ldr	r3, [r7, #8]
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	3304      	adds	r3, #4
 80102e0:	681a      	ldr	r2, [r3, #0]
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80102e6:	f107 0314 	add.w	r3, r7, #20
 80102ea:	4619      	mov	r1, r3
 80102ec:	6878      	ldr	r0, [r7, #4]
 80102ee:	f7ff ffbf 	bl	8010270 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80102f2:	68bb      	ldr	r3, [r7, #8]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d002      	beq.n	80102fe <netif_do_set_ipaddr+0x6a>
 80102f8:	68bb      	ldr	r3, [r7, #8]
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	e000      	b.n	8010300 <netif_do_set_ipaddr+0x6c>
 80102fe:	2300      	movs	r3, #0
 8010300:	68fa      	ldr	r2, [r7, #12]
 8010302:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8010304:	2101      	movs	r1, #1
 8010306:	68f8      	ldr	r0, [r7, #12]
 8010308:	f000 f8d2 	bl	80104b0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 801030c:	2301      	movs	r3, #1
 801030e:	e000      	b.n	8010312 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8010310:	2300      	movs	r3, #0
}
 8010312:	4618      	mov	r0, r3
 8010314:	3718      	adds	r7, #24
 8010316:	46bd      	mov	sp, r7
 8010318:	bd80      	pop	{r7, pc}
 801031a:	bf00      	nop
 801031c:	0801c804 	.word	0x0801c804
 8010320:	0801c91c 	.word	0x0801c91c
 8010324:	0801c854 	.word	0x0801c854

08010328 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8010328:	b480      	push	{r7}
 801032a:	b085      	sub	sp, #20
 801032c:	af00      	add	r7, sp, #0
 801032e:	60f8      	str	r0, [r7, #12]
 8010330:	60b9      	str	r1, [r7, #8]
 8010332:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8010334:	68bb      	ldr	r3, [r7, #8]
 8010336:	681a      	ldr	r2, [r3, #0]
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	3308      	adds	r3, #8
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	429a      	cmp	r2, r3
 8010340:	d00a      	beq.n	8010358 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8010342:	68bb      	ldr	r3, [r7, #8]
 8010344:	2b00      	cmp	r3, #0
 8010346:	d002      	beq.n	801034e <netif_do_set_netmask+0x26>
 8010348:	68bb      	ldr	r3, [r7, #8]
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	e000      	b.n	8010350 <netif_do_set_netmask+0x28>
 801034e:	2300      	movs	r3, #0
 8010350:	68fa      	ldr	r2, [r7, #12]
 8010352:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8010354:	2301      	movs	r3, #1
 8010356:	e000      	b.n	801035a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8010358:	2300      	movs	r3, #0
}
 801035a:	4618      	mov	r0, r3
 801035c:	3714      	adds	r7, #20
 801035e:	46bd      	mov	sp, r7
 8010360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010364:	4770      	bx	lr

08010366 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8010366:	b480      	push	{r7}
 8010368:	b085      	sub	sp, #20
 801036a:	af00      	add	r7, sp, #0
 801036c:	60f8      	str	r0, [r7, #12]
 801036e:	60b9      	str	r1, [r7, #8]
 8010370:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8010372:	68bb      	ldr	r3, [r7, #8]
 8010374:	681a      	ldr	r2, [r3, #0]
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	330c      	adds	r3, #12
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	429a      	cmp	r2, r3
 801037e:	d00a      	beq.n	8010396 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8010380:	68bb      	ldr	r3, [r7, #8]
 8010382:	2b00      	cmp	r3, #0
 8010384:	d002      	beq.n	801038c <netif_do_set_gw+0x26>
 8010386:	68bb      	ldr	r3, [r7, #8]
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	e000      	b.n	801038e <netif_do_set_gw+0x28>
 801038c:	2300      	movs	r3, #0
 801038e:	68fa      	ldr	r2, [r7, #12]
 8010390:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8010392:	2301      	movs	r3, #1
 8010394:	e000      	b.n	8010398 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8010396:	2300      	movs	r3, #0
}
 8010398:	4618      	mov	r0, r3
 801039a:	3714      	adds	r7, #20
 801039c:	46bd      	mov	sp, r7
 801039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a2:	4770      	bx	lr

080103a4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80103a4:	b580      	push	{r7, lr}
 80103a6:	b088      	sub	sp, #32
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	60f8      	str	r0, [r7, #12]
 80103ac:	60b9      	str	r1, [r7, #8]
 80103ae:	607a      	str	r2, [r7, #4]
 80103b0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80103b2:	2300      	movs	r3, #0
 80103b4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80103b6:	2300      	movs	r3, #0
 80103b8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80103ba:	68bb      	ldr	r3, [r7, #8]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d101      	bne.n	80103c4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80103c0:	4b1c      	ldr	r3, [pc, #112]	; (8010434 <netif_set_addr+0x90>)
 80103c2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d101      	bne.n	80103ce <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80103ca:	4b1a      	ldr	r3, [pc, #104]	; (8010434 <netif_set_addr+0x90>)
 80103cc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80103ce:	683b      	ldr	r3, [r7, #0]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d101      	bne.n	80103d8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80103d4:	4b17      	ldr	r3, [pc, #92]	; (8010434 <netif_set_addr+0x90>)
 80103d6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80103d8:	68bb      	ldr	r3, [r7, #8]
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d003      	beq.n	80103e6 <netif_set_addr+0x42>
 80103de:	68bb      	ldr	r3, [r7, #8]
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d101      	bne.n	80103ea <netif_set_addr+0x46>
 80103e6:	2301      	movs	r3, #1
 80103e8:	e000      	b.n	80103ec <netif_set_addr+0x48>
 80103ea:	2300      	movs	r3, #0
 80103ec:	617b      	str	r3, [r7, #20]
  if (remove) {
 80103ee:	697b      	ldr	r3, [r7, #20]
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d006      	beq.n	8010402 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80103f4:	f107 0310 	add.w	r3, r7, #16
 80103f8:	461a      	mov	r2, r3
 80103fa:	68b9      	ldr	r1, [r7, #8]
 80103fc:	68f8      	ldr	r0, [r7, #12]
 80103fe:	f7ff ff49 	bl	8010294 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8010402:	69fa      	ldr	r2, [r7, #28]
 8010404:	6879      	ldr	r1, [r7, #4]
 8010406:	68f8      	ldr	r0, [r7, #12]
 8010408:	f7ff ff8e 	bl	8010328 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 801040c:	69ba      	ldr	r2, [r7, #24]
 801040e:	6839      	ldr	r1, [r7, #0]
 8010410:	68f8      	ldr	r0, [r7, #12]
 8010412:	f7ff ffa8 	bl	8010366 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8010416:	697b      	ldr	r3, [r7, #20]
 8010418:	2b00      	cmp	r3, #0
 801041a:	d106      	bne.n	801042a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801041c:	f107 0310 	add.w	r3, r7, #16
 8010420:	461a      	mov	r2, r3
 8010422:	68b9      	ldr	r1, [r7, #8]
 8010424:	68f8      	ldr	r0, [r7, #12]
 8010426:	f7ff ff35 	bl	8010294 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 801042a:	bf00      	nop
 801042c:	3720      	adds	r7, #32
 801042e:	46bd      	mov	sp, r7
 8010430:	bd80      	pop	{r7, pc}
 8010432:	bf00      	nop
 8010434:	0801ef7c 	.word	0x0801ef7c

08010438 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8010438:	b480      	push	{r7}
 801043a:	b083      	sub	sp, #12
 801043c:	af00      	add	r7, sp, #0
 801043e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8010440:	4a04      	ldr	r2, [pc, #16]	; (8010454 <netif_set_default+0x1c>)
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8010446:	bf00      	nop
 8010448:	370c      	adds	r7, #12
 801044a:	46bd      	mov	sp, r7
 801044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010450:	4770      	bx	lr
 8010452:	bf00      	nop
 8010454:	2000703c 	.word	0x2000703c

08010458 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8010458:	b580      	push	{r7, lr}
 801045a:	b082      	sub	sp, #8
 801045c:	af00      	add	r7, sp, #0
 801045e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	2b00      	cmp	r3, #0
 8010464:	d107      	bne.n	8010476 <netif_set_up+0x1e>
 8010466:	4b0f      	ldr	r3, [pc, #60]	; (80104a4 <netif_set_up+0x4c>)
 8010468:	f44f 7254 	mov.w	r2, #848	; 0x350
 801046c:	490e      	ldr	r1, [pc, #56]	; (80104a8 <netif_set_up+0x50>)
 801046e:	480f      	ldr	r0, [pc, #60]	; (80104ac <netif_set_up+0x54>)
 8010470:	f009 fb8e 	bl	8019b90 <iprintf>
 8010474:	e013      	b.n	801049e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801047c:	f003 0301 	and.w	r3, r3, #1
 8010480:	2b00      	cmp	r3, #0
 8010482:	d10c      	bne.n	801049e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801048a:	f043 0301 	orr.w	r3, r3, #1
 801048e:	b2da      	uxtb	r2, r3
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8010496:	2103      	movs	r1, #3
 8010498:	6878      	ldr	r0, [r7, #4]
 801049a:	f000 f809 	bl	80104b0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 801049e:	3708      	adds	r7, #8
 80104a0:	46bd      	mov	sp, r7
 80104a2:	bd80      	pop	{r7, pc}
 80104a4:	0801c804 	.word	0x0801c804
 80104a8:	0801c98c 	.word	0x0801c98c
 80104ac:	0801c854 	.word	0x0801c854

080104b0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80104b0:	b580      	push	{r7, lr}
 80104b2:	b082      	sub	sp, #8
 80104b4:	af00      	add	r7, sp, #0
 80104b6:	6078      	str	r0, [r7, #4]
 80104b8:	460b      	mov	r3, r1
 80104ba:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d106      	bne.n	80104d0 <netif_issue_reports+0x20>
 80104c2:	4b18      	ldr	r3, [pc, #96]	; (8010524 <netif_issue_reports+0x74>)
 80104c4:	f240 326d 	movw	r2, #877	; 0x36d
 80104c8:	4917      	ldr	r1, [pc, #92]	; (8010528 <netif_issue_reports+0x78>)
 80104ca:	4818      	ldr	r0, [pc, #96]	; (801052c <netif_issue_reports+0x7c>)
 80104cc:	f009 fb60 	bl	8019b90 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80104d6:	f003 0304 	and.w	r3, r3, #4
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d01e      	beq.n	801051c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80104e4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d017      	beq.n	801051c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80104ec:	78fb      	ldrb	r3, [r7, #3]
 80104ee:	f003 0301 	and.w	r3, r3, #1
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d013      	beq.n	801051e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	3304      	adds	r3, #4
 80104fa:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d00e      	beq.n	801051e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010506:	f003 0308 	and.w	r3, r3, #8
 801050a:	2b00      	cmp	r3, #0
 801050c:	d007      	beq.n	801051e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	3304      	adds	r3, #4
 8010512:	4619      	mov	r1, r3
 8010514:	6878      	ldr	r0, [r7, #4]
 8010516:	f007 fa4d 	bl	80179b4 <etharp_request>
 801051a:	e000      	b.n	801051e <netif_issue_reports+0x6e>
    return;
 801051c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 801051e:	3708      	adds	r7, #8
 8010520:	46bd      	mov	sp, r7
 8010522:	bd80      	pop	{r7, pc}
 8010524:	0801c804 	.word	0x0801c804
 8010528:	0801c9a8 	.word	0x0801c9a8
 801052c:	0801c854 	.word	0x0801c854

08010530 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8010530:	b580      	push	{r7, lr}
 8010532:	b082      	sub	sp, #8
 8010534:	af00      	add	r7, sp, #0
 8010536:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	2b00      	cmp	r3, #0
 801053c:	d107      	bne.n	801054e <netif_set_down+0x1e>
 801053e:	4b12      	ldr	r3, [pc, #72]	; (8010588 <netif_set_down+0x58>)
 8010540:	f240 329b 	movw	r2, #923	; 0x39b
 8010544:	4911      	ldr	r1, [pc, #68]	; (801058c <netif_set_down+0x5c>)
 8010546:	4812      	ldr	r0, [pc, #72]	; (8010590 <netif_set_down+0x60>)
 8010548:	f009 fb22 	bl	8019b90 <iprintf>
 801054c:	e019      	b.n	8010582 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010554:	f003 0301 	and.w	r3, r3, #1
 8010558:	2b00      	cmp	r3, #0
 801055a:	d012      	beq.n	8010582 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010562:	f023 0301 	bic.w	r3, r3, #1
 8010566:	b2da      	uxtb	r2, r3
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010574:	f003 0308 	and.w	r3, r3, #8
 8010578:	2b00      	cmp	r3, #0
 801057a:	d002      	beq.n	8010582 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 801057c:	6878      	ldr	r0, [r7, #4]
 801057e:	f006 fdd7 	bl	8017130 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8010582:	3708      	adds	r7, #8
 8010584:	46bd      	mov	sp, r7
 8010586:	bd80      	pop	{r7, pc}
 8010588:	0801c804 	.word	0x0801c804
 801058c:	0801c9cc 	.word	0x0801c9cc
 8010590:	0801c854 	.word	0x0801c854

08010594 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8010594:	b580      	push	{r7, lr}
 8010596:	b082      	sub	sp, #8
 8010598:	af00      	add	r7, sp, #0
 801059a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d107      	bne.n	80105b2 <netif_set_link_up+0x1e>
 80105a2:	4b13      	ldr	r3, [pc, #76]	; (80105f0 <netif_set_link_up+0x5c>)
 80105a4:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80105a8:	4912      	ldr	r1, [pc, #72]	; (80105f4 <netif_set_link_up+0x60>)
 80105aa:	4813      	ldr	r0, [pc, #76]	; (80105f8 <netif_set_link_up+0x64>)
 80105ac:	f009 faf0 	bl	8019b90 <iprintf>
 80105b0:	e01b      	b.n	80105ea <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80105b8:	f003 0304 	and.w	r3, r3, #4
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d114      	bne.n	80105ea <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80105c6:	f043 0304 	orr.w	r3, r3, #4
 80105ca:	b2da      	uxtb	r2, r3
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80105d2:	2103      	movs	r1, #3
 80105d4:	6878      	ldr	r0, [r7, #4]
 80105d6:	f7ff ff6b 	bl	80104b0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	69db      	ldr	r3, [r3, #28]
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d003      	beq.n	80105ea <netif_set_link_up+0x56>
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	69db      	ldr	r3, [r3, #28]
 80105e6:	6878      	ldr	r0, [r7, #4]
 80105e8:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80105ea:	3708      	adds	r7, #8
 80105ec:	46bd      	mov	sp, r7
 80105ee:	bd80      	pop	{r7, pc}
 80105f0:	0801c804 	.word	0x0801c804
 80105f4:	0801c9ec 	.word	0x0801c9ec
 80105f8:	0801c854 	.word	0x0801c854

080105fc <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80105fc:	b580      	push	{r7, lr}
 80105fe:	b082      	sub	sp, #8
 8010600:	af00      	add	r7, sp, #0
 8010602:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	2b00      	cmp	r3, #0
 8010608:	d107      	bne.n	801061a <netif_set_link_down+0x1e>
 801060a:	4b11      	ldr	r3, [pc, #68]	; (8010650 <netif_set_link_down+0x54>)
 801060c:	f240 4206 	movw	r2, #1030	; 0x406
 8010610:	4910      	ldr	r1, [pc, #64]	; (8010654 <netif_set_link_down+0x58>)
 8010612:	4811      	ldr	r0, [pc, #68]	; (8010658 <netif_set_link_down+0x5c>)
 8010614:	f009 fabc 	bl	8019b90 <iprintf>
 8010618:	e017      	b.n	801064a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010620:	f003 0304 	and.w	r3, r3, #4
 8010624:	2b00      	cmp	r3, #0
 8010626:	d010      	beq.n	801064a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801062e:	f023 0304 	bic.w	r3, r3, #4
 8010632:	b2da      	uxtb	r2, r3
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	69db      	ldr	r3, [r3, #28]
 801063e:	2b00      	cmp	r3, #0
 8010640:	d003      	beq.n	801064a <netif_set_link_down+0x4e>
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	69db      	ldr	r3, [r3, #28]
 8010646:	6878      	ldr	r0, [r7, #4]
 8010648:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801064a:	3708      	adds	r7, #8
 801064c:	46bd      	mov	sp, r7
 801064e:	bd80      	pop	{r7, pc}
 8010650:	0801c804 	.word	0x0801c804
 8010654:	0801ca10 	.word	0x0801ca10
 8010658:	0801c854 	.word	0x0801c854

0801065c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 801065c:	b480      	push	{r7}
 801065e:	b083      	sub	sp, #12
 8010660:	af00      	add	r7, sp, #0
 8010662:	6078      	str	r0, [r7, #4]
 8010664:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	2b00      	cmp	r3, #0
 801066a:	d002      	beq.n	8010672 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	683a      	ldr	r2, [r7, #0]
 8010670:	61da      	str	r2, [r3, #28]
  }
}
 8010672:	bf00      	nop
 8010674:	370c      	adds	r7, #12
 8010676:	46bd      	mov	sp, r7
 8010678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801067c:	4770      	bx	lr

0801067e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 801067e:	b480      	push	{r7}
 8010680:	b085      	sub	sp, #20
 8010682:	af00      	add	r7, sp, #0
 8010684:	60f8      	str	r0, [r7, #12]
 8010686:	60b9      	str	r1, [r7, #8]
 8010688:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 801068a:	f06f 030b 	mvn.w	r3, #11
}
 801068e:	4618      	mov	r0, r3
 8010690:	3714      	adds	r7, #20
 8010692:	46bd      	mov	sp, r7
 8010694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010698:	4770      	bx	lr
	...

0801069c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 801069c:	b480      	push	{r7}
 801069e:	b085      	sub	sp, #20
 80106a0:	af00      	add	r7, sp, #0
 80106a2:	4603      	mov	r3, r0
 80106a4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80106a6:	79fb      	ldrb	r3, [r7, #7]
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d013      	beq.n	80106d4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80106ac:	4b0d      	ldr	r3, [pc, #52]	; (80106e4 <netif_get_by_index+0x48>)
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	60fb      	str	r3, [r7, #12]
 80106b2:	e00c      	b.n	80106ce <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80106ba:	3301      	adds	r3, #1
 80106bc:	b2db      	uxtb	r3, r3
 80106be:	79fa      	ldrb	r2, [r7, #7]
 80106c0:	429a      	cmp	r2, r3
 80106c2:	d101      	bne.n	80106c8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	e006      	b.n	80106d6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	60fb      	str	r3, [r7, #12]
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d1ef      	bne.n	80106b4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80106d4:	2300      	movs	r3, #0
}
 80106d6:	4618      	mov	r0, r3
 80106d8:	3714      	adds	r7, #20
 80106da:	46bd      	mov	sp, r7
 80106dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e0:	4770      	bx	lr
 80106e2:	bf00      	nop
 80106e4:	20007038 	.word	0x20007038

080106e8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80106e8:	b580      	push	{r7, lr}
 80106ea:	b082      	sub	sp, #8
 80106ec:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80106ee:	4b0c      	ldr	r3, [pc, #48]	; (8010720 <pbuf_free_ooseq+0x38>)
 80106f0:	2200      	movs	r2, #0
 80106f2:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80106f4:	4b0b      	ldr	r3, [pc, #44]	; (8010724 <pbuf_free_ooseq+0x3c>)
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	607b      	str	r3, [r7, #4]
 80106fa:	e00a      	b.n	8010712 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010700:	2b00      	cmp	r3, #0
 8010702:	d003      	beq.n	801070c <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8010704:	6878      	ldr	r0, [r7, #4]
 8010706:	f002 f941 	bl	801298c <tcp_free_ooseq>
      return;
 801070a:	e005      	b.n	8010718 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	68db      	ldr	r3, [r3, #12]
 8010710:	607b      	str	r3, [r7, #4]
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	2b00      	cmp	r3, #0
 8010716:	d1f1      	bne.n	80106fc <pbuf_free_ooseq+0x14>
    }
  }
}
 8010718:	3708      	adds	r7, #8
 801071a:	46bd      	mov	sp, r7
 801071c:	bd80      	pop	{r7, pc}
 801071e:	bf00      	nop
 8010720:	20007041 	.word	0x20007041
 8010724:	20007050 	.word	0x20007050

08010728 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8010728:	b480      	push	{r7}
 801072a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 801072c:	4b03      	ldr	r3, [pc, #12]	; (801073c <pbuf_pool_is_empty+0x14>)
 801072e:	2201      	movs	r2, #1
 8010730:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8010732:	bf00      	nop
 8010734:	46bd      	mov	sp, r7
 8010736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801073a:	4770      	bx	lr
 801073c:	20007041 	.word	0x20007041

08010740 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8010740:	b480      	push	{r7}
 8010742:	b085      	sub	sp, #20
 8010744:	af00      	add	r7, sp, #0
 8010746:	60f8      	str	r0, [r7, #12]
 8010748:	60b9      	str	r1, [r7, #8]
 801074a:	4611      	mov	r1, r2
 801074c:	461a      	mov	r2, r3
 801074e:	460b      	mov	r3, r1
 8010750:	80fb      	strh	r3, [r7, #6]
 8010752:	4613      	mov	r3, r2
 8010754:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	2200      	movs	r2, #0
 801075a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	68ba      	ldr	r2, [r7, #8]
 8010760:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	88fa      	ldrh	r2, [r7, #6]
 8010766:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	88ba      	ldrh	r2, [r7, #4]
 801076c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 801076e:	8b3b      	ldrh	r3, [r7, #24]
 8010770:	b2da      	uxtb	r2, r3
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	7f3a      	ldrb	r2, [r7, #28]
 801077a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	2201      	movs	r2, #1
 8010780:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	2200      	movs	r2, #0
 8010786:	73da      	strb	r2, [r3, #15]
}
 8010788:	bf00      	nop
 801078a:	3714      	adds	r7, #20
 801078c:	46bd      	mov	sp, r7
 801078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010792:	4770      	bx	lr

08010794 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8010794:	b580      	push	{r7, lr}
 8010796:	b08c      	sub	sp, #48	; 0x30
 8010798:	af02      	add	r7, sp, #8
 801079a:	4603      	mov	r3, r0
 801079c:	71fb      	strb	r3, [r7, #7]
 801079e:	460b      	mov	r3, r1
 80107a0:	80bb      	strh	r3, [r7, #4]
 80107a2:	4613      	mov	r3, r2
 80107a4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80107a6:	79fb      	ldrb	r3, [r7, #7]
 80107a8:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80107aa:	887b      	ldrh	r3, [r7, #2]
 80107ac:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80107b0:	f000 8082 	beq.w	80108b8 <pbuf_alloc+0x124>
 80107b4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80107b8:	f300 80c9 	bgt.w	801094e <pbuf_alloc+0x1ba>
 80107bc:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80107c0:	d010      	beq.n	80107e4 <pbuf_alloc+0x50>
 80107c2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80107c6:	f300 80c2 	bgt.w	801094e <pbuf_alloc+0x1ba>
 80107ca:	2b01      	cmp	r3, #1
 80107cc:	d002      	beq.n	80107d4 <pbuf_alloc+0x40>
 80107ce:	2b41      	cmp	r3, #65	; 0x41
 80107d0:	f040 80bd 	bne.w	801094e <pbuf_alloc+0x1ba>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80107d4:	887a      	ldrh	r2, [r7, #2]
 80107d6:	88bb      	ldrh	r3, [r7, #4]
 80107d8:	4619      	mov	r1, r3
 80107da:	2000      	movs	r0, #0
 80107dc:	f000 f8d2 	bl	8010984 <pbuf_alloc_reference>
 80107e0:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80107e2:	e0be      	b.n	8010962 <pbuf_alloc+0x1ce>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80107e4:	2300      	movs	r3, #0
 80107e6:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80107e8:	2300      	movs	r3, #0
 80107ea:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80107ec:	88bb      	ldrh	r3, [r7, #4]
 80107ee:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80107f0:	2008      	movs	r0, #8
 80107f2:	f7ff fbcd 	bl	800ff90 <memp_malloc>
 80107f6:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80107f8:	693b      	ldr	r3, [r7, #16]
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d109      	bne.n	8010812 <pbuf_alloc+0x7e>
          PBUF_POOL_IS_EMPTY();
 80107fe:	f7ff ff93 	bl	8010728 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8010802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010804:	2b00      	cmp	r3, #0
 8010806:	d002      	beq.n	801080e <pbuf_alloc+0x7a>
            pbuf_free(p);
 8010808:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801080a:	f000 faa7 	bl	8010d5c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 801080e:	2300      	movs	r3, #0
 8010810:	e0a8      	b.n	8010964 <pbuf_alloc+0x1d0>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8010812:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010814:	3303      	adds	r3, #3
 8010816:	b29b      	uxth	r3, r3
 8010818:	f023 0303 	bic.w	r3, r3, #3
 801081c:	b29a      	uxth	r2, r3
 801081e:	f240 53ec 	movw	r3, #1516	; 0x5ec
 8010822:	1a9b      	subs	r3, r3, r2
 8010824:	b29b      	uxth	r3, r3
 8010826:	8b7a      	ldrh	r2, [r7, #26]
 8010828:	4293      	cmp	r3, r2
 801082a:	bf28      	it	cs
 801082c:	4613      	movcs	r3, r2
 801082e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8010830:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010832:	3310      	adds	r3, #16
 8010834:	693a      	ldr	r2, [r7, #16]
 8010836:	4413      	add	r3, r2
 8010838:	3303      	adds	r3, #3
 801083a:	f023 0303 	bic.w	r3, r3, #3
 801083e:	4618      	mov	r0, r3
 8010840:	89f9      	ldrh	r1, [r7, #14]
 8010842:	8b7a      	ldrh	r2, [r7, #26]
 8010844:	2300      	movs	r3, #0
 8010846:	9301      	str	r3, [sp, #4]
 8010848:	887b      	ldrh	r3, [r7, #2]
 801084a:	9300      	str	r3, [sp, #0]
 801084c:	460b      	mov	r3, r1
 801084e:	4601      	mov	r1, r0
 8010850:	6938      	ldr	r0, [r7, #16]
 8010852:	f7ff ff75 	bl	8010740 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8010856:	693b      	ldr	r3, [r7, #16]
 8010858:	685b      	ldr	r3, [r3, #4]
 801085a:	f003 0303 	and.w	r3, r3, #3
 801085e:	2b00      	cmp	r3, #0
 8010860:	d006      	beq.n	8010870 <pbuf_alloc+0xdc>
 8010862:	4b42      	ldr	r3, [pc, #264]	; (801096c <pbuf_alloc+0x1d8>)
 8010864:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010868:	4941      	ldr	r1, [pc, #260]	; (8010970 <pbuf_alloc+0x1dc>)
 801086a:	4842      	ldr	r0, [pc, #264]	; (8010974 <pbuf_alloc+0x1e0>)
 801086c:	f009 f990 	bl	8019b90 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8010870:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010872:	3303      	adds	r3, #3
 8010874:	f023 0303 	bic.w	r3, r3, #3
 8010878:	f240 52ec 	movw	r2, #1516	; 0x5ec
 801087c:	4293      	cmp	r3, r2
 801087e:	d106      	bne.n	801088e <pbuf_alloc+0xfa>
 8010880:	4b3a      	ldr	r3, [pc, #232]	; (801096c <pbuf_alloc+0x1d8>)
 8010882:	f44f 7281 	mov.w	r2, #258	; 0x102
 8010886:	493c      	ldr	r1, [pc, #240]	; (8010978 <pbuf_alloc+0x1e4>)
 8010888:	483a      	ldr	r0, [pc, #232]	; (8010974 <pbuf_alloc+0x1e0>)
 801088a:	f009 f981 	bl	8019b90 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 801088e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010890:	2b00      	cmp	r3, #0
 8010892:	d102      	bne.n	801089a <pbuf_alloc+0x106>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8010894:	693b      	ldr	r3, [r7, #16]
 8010896:	627b      	str	r3, [r7, #36]	; 0x24
 8010898:	e002      	b.n	80108a0 <pbuf_alloc+0x10c>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 801089a:	69fb      	ldr	r3, [r7, #28]
 801089c:	693a      	ldr	r2, [r7, #16]
 801089e:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80108a0:	693b      	ldr	r3, [r7, #16]
 80108a2:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80108a4:	8b7a      	ldrh	r2, [r7, #26]
 80108a6:	89fb      	ldrh	r3, [r7, #14]
 80108a8:	1ad3      	subs	r3, r2, r3
 80108aa:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80108ac:	2300      	movs	r3, #0
 80108ae:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80108b0:	8b7b      	ldrh	r3, [r7, #26]
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d19c      	bne.n	80107f0 <pbuf_alloc+0x5c>
      break;
 80108b6:	e054      	b.n	8010962 <pbuf_alloc+0x1ce>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80108b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80108ba:	3303      	adds	r3, #3
 80108bc:	b29b      	uxth	r3, r3
 80108be:	f023 0303 	bic.w	r3, r3, #3
 80108c2:	b29a      	uxth	r2, r3
 80108c4:	88bb      	ldrh	r3, [r7, #4]
 80108c6:	3303      	adds	r3, #3
 80108c8:	b29b      	uxth	r3, r3
 80108ca:	f023 0303 	bic.w	r3, r3, #3
 80108ce:	b29b      	uxth	r3, r3
 80108d0:	4413      	add	r3, r2
 80108d2:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80108d4:	8b3b      	ldrh	r3, [r7, #24]
 80108d6:	3310      	adds	r3, #16
 80108d8:	617b      	str	r3, [r7, #20]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80108da:	8b3a      	ldrh	r2, [r7, #24]
 80108dc:	88bb      	ldrh	r3, [r7, #4]
 80108de:	3303      	adds	r3, #3
 80108e0:	f023 0303 	bic.w	r3, r3, #3
 80108e4:	429a      	cmp	r2, r3
 80108e6:	d306      	bcc.n	80108f6 <pbuf_alloc+0x162>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80108e8:	88bb      	ldrh	r3, [r7, #4]
 80108ea:	3303      	adds	r3, #3
 80108ec:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80108f0:	697a      	ldr	r2, [r7, #20]
 80108f2:	429a      	cmp	r2, r3
 80108f4:	d201      	bcs.n	80108fa <pbuf_alloc+0x166>
        return NULL;
 80108f6:	2300      	movs	r3, #0
 80108f8:	e034      	b.n	8010964 <pbuf_alloc+0x1d0>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80108fa:	6978      	ldr	r0, [r7, #20]
 80108fc:	f7ff f9c0 	bl	800fc80 <mem_malloc>
 8010900:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8010902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010904:	2b00      	cmp	r3, #0
 8010906:	d101      	bne.n	801090c <pbuf_alloc+0x178>
        return NULL;
 8010908:	2300      	movs	r3, #0
 801090a:	e02b      	b.n	8010964 <pbuf_alloc+0x1d0>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801090c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801090e:	3310      	adds	r3, #16
 8010910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010912:	4413      	add	r3, r2
 8010914:	3303      	adds	r3, #3
 8010916:	f023 0303 	bic.w	r3, r3, #3
 801091a:	4618      	mov	r0, r3
 801091c:	88b9      	ldrh	r1, [r7, #4]
 801091e:	88ba      	ldrh	r2, [r7, #4]
 8010920:	2300      	movs	r3, #0
 8010922:	9301      	str	r3, [sp, #4]
 8010924:	887b      	ldrh	r3, [r7, #2]
 8010926:	9300      	str	r3, [sp, #0]
 8010928:	460b      	mov	r3, r1
 801092a:	4601      	mov	r1, r0
 801092c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801092e:	f7ff ff07 	bl	8010740 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8010932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010934:	685b      	ldr	r3, [r3, #4]
 8010936:	f003 0303 	and.w	r3, r3, #3
 801093a:	2b00      	cmp	r3, #0
 801093c:	d010      	beq.n	8010960 <pbuf_alloc+0x1cc>
 801093e:	4b0b      	ldr	r3, [pc, #44]	; (801096c <pbuf_alloc+0x1d8>)
 8010940:	f44f 7291 	mov.w	r2, #290	; 0x122
 8010944:	490d      	ldr	r1, [pc, #52]	; (801097c <pbuf_alloc+0x1e8>)
 8010946:	480b      	ldr	r0, [pc, #44]	; (8010974 <pbuf_alloc+0x1e0>)
 8010948:	f009 f922 	bl	8019b90 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 801094c:	e008      	b.n	8010960 <pbuf_alloc+0x1cc>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801094e:	4b07      	ldr	r3, [pc, #28]	; (801096c <pbuf_alloc+0x1d8>)
 8010950:	f240 1227 	movw	r2, #295	; 0x127
 8010954:	490a      	ldr	r1, [pc, #40]	; (8010980 <pbuf_alloc+0x1ec>)
 8010956:	4807      	ldr	r0, [pc, #28]	; (8010974 <pbuf_alloc+0x1e0>)
 8010958:	f009 f91a 	bl	8019b90 <iprintf>
      return NULL;
 801095c:	2300      	movs	r3, #0
 801095e:	e001      	b.n	8010964 <pbuf_alloc+0x1d0>
      break;
 8010960:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8010962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010964:	4618      	mov	r0, r3
 8010966:	3728      	adds	r7, #40	; 0x28
 8010968:	46bd      	mov	sp, r7
 801096a:	bd80      	pop	{r7, pc}
 801096c:	0801ca34 	.word	0x0801ca34
 8010970:	0801ca64 	.word	0x0801ca64
 8010974:	0801ca94 	.word	0x0801ca94
 8010978:	0801cabc 	.word	0x0801cabc
 801097c:	0801caf0 	.word	0x0801caf0
 8010980:	0801cb1c 	.word	0x0801cb1c

08010984 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8010984:	b580      	push	{r7, lr}
 8010986:	b086      	sub	sp, #24
 8010988:	af02      	add	r7, sp, #8
 801098a:	6078      	str	r0, [r7, #4]
 801098c:	460b      	mov	r3, r1
 801098e:	807b      	strh	r3, [r7, #2]
 8010990:	4613      	mov	r3, r2
 8010992:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8010994:	883b      	ldrh	r3, [r7, #0]
 8010996:	2b41      	cmp	r3, #65	; 0x41
 8010998:	d009      	beq.n	80109ae <pbuf_alloc_reference+0x2a>
 801099a:	883b      	ldrh	r3, [r7, #0]
 801099c:	2b01      	cmp	r3, #1
 801099e:	d006      	beq.n	80109ae <pbuf_alloc_reference+0x2a>
 80109a0:	4b0f      	ldr	r3, [pc, #60]	; (80109e0 <pbuf_alloc_reference+0x5c>)
 80109a2:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80109a6:	490f      	ldr	r1, [pc, #60]	; (80109e4 <pbuf_alloc_reference+0x60>)
 80109a8:	480f      	ldr	r0, [pc, #60]	; (80109e8 <pbuf_alloc_reference+0x64>)
 80109aa:	f009 f8f1 	bl	8019b90 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80109ae:	2007      	movs	r0, #7
 80109b0:	f7ff faee 	bl	800ff90 <memp_malloc>
 80109b4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d101      	bne.n	80109c0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80109bc:	2300      	movs	r3, #0
 80109be:	e00b      	b.n	80109d8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80109c0:	8879      	ldrh	r1, [r7, #2]
 80109c2:	887a      	ldrh	r2, [r7, #2]
 80109c4:	2300      	movs	r3, #0
 80109c6:	9301      	str	r3, [sp, #4]
 80109c8:	883b      	ldrh	r3, [r7, #0]
 80109ca:	9300      	str	r3, [sp, #0]
 80109cc:	460b      	mov	r3, r1
 80109ce:	6879      	ldr	r1, [r7, #4]
 80109d0:	68f8      	ldr	r0, [r7, #12]
 80109d2:	f7ff feb5 	bl	8010740 <pbuf_init_alloced_pbuf>
  return p;
 80109d6:	68fb      	ldr	r3, [r7, #12]
}
 80109d8:	4618      	mov	r0, r3
 80109da:	3710      	adds	r7, #16
 80109dc:	46bd      	mov	sp, r7
 80109de:	bd80      	pop	{r7, pc}
 80109e0:	0801ca34 	.word	0x0801ca34
 80109e4:	0801cb38 	.word	0x0801cb38
 80109e8:	0801ca94 	.word	0x0801ca94

080109ec <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80109ec:	b580      	push	{r7, lr}
 80109ee:	b088      	sub	sp, #32
 80109f0:	af02      	add	r7, sp, #8
 80109f2:	607b      	str	r3, [r7, #4]
 80109f4:	4603      	mov	r3, r0
 80109f6:	73fb      	strb	r3, [r7, #15]
 80109f8:	460b      	mov	r3, r1
 80109fa:	81bb      	strh	r3, [r7, #12]
 80109fc:	4613      	mov	r3, r2
 80109fe:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8010a00:	7bfb      	ldrb	r3, [r7, #15]
 8010a02:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8010a04:	8a7b      	ldrh	r3, [r7, #18]
 8010a06:	3303      	adds	r3, #3
 8010a08:	f023 0203 	bic.w	r2, r3, #3
 8010a0c:	89bb      	ldrh	r3, [r7, #12]
 8010a0e:	441a      	add	r2, r3
 8010a10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010a12:	429a      	cmp	r2, r3
 8010a14:	d901      	bls.n	8010a1a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8010a16:	2300      	movs	r3, #0
 8010a18:	e018      	b.n	8010a4c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8010a1a:	6a3b      	ldr	r3, [r7, #32]
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d007      	beq.n	8010a30 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8010a20:	8a7b      	ldrh	r3, [r7, #18]
 8010a22:	3303      	adds	r3, #3
 8010a24:	f023 0303 	bic.w	r3, r3, #3
 8010a28:	6a3a      	ldr	r2, [r7, #32]
 8010a2a:	4413      	add	r3, r2
 8010a2c:	617b      	str	r3, [r7, #20]
 8010a2e:	e001      	b.n	8010a34 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8010a30:	2300      	movs	r3, #0
 8010a32:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8010a34:	6878      	ldr	r0, [r7, #4]
 8010a36:	89b9      	ldrh	r1, [r7, #12]
 8010a38:	89ba      	ldrh	r2, [r7, #12]
 8010a3a:	2302      	movs	r3, #2
 8010a3c:	9301      	str	r3, [sp, #4]
 8010a3e:	897b      	ldrh	r3, [r7, #10]
 8010a40:	9300      	str	r3, [sp, #0]
 8010a42:	460b      	mov	r3, r1
 8010a44:	6979      	ldr	r1, [r7, #20]
 8010a46:	f7ff fe7b 	bl	8010740 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8010a4a:	687b      	ldr	r3, [r7, #4]
}
 8010a4c:	4618      	mov	r0, r3
 8010a4e:	3718      	adds	r7, #24
 8010a50:	46bd      	mov	sp, r7
 8010a52:	bd80      	pop	{r7, pc}

08010a54 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8010a54:	b580      	push	{r7, lr}
 8010a56:	b084      	sub	sp, #16
 8010a58:	af00      	add	r7, sp, #0
 8010a5a:	6078      	str	r0, [r7, #4]
 8010a5c:	460b      	mov	r3, r1
 8010a5e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d106      	bne.n	8010a74 <pbuf_realloc+0x20>
 8010a66:	4b39      	ldr	r3, [pc, #228]	; (8010b4c <pbuf_realloc+0xf8>)
 8010a68:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8010a6c:	4938      	ldr	r1, [pc, #224]	; (8010b50 <pbuf_realloc+0xfc>)
 8010a6e:	4839      	ldr	r0, [pc, #228]	; (8010b54 <pbuf_realloc+0x100>)
 8010a70:	f009 f88e 	bl	8019b90 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	891b      	ldrh	r3, [r3, #8]
 8010a78:	887a      	ldrh	r2, [r7, #2]
 8010a7a:	429a      	cmp	r2, r3
 8010a7c:	d261      	bcs.n	8010b42 <pbuf_realloc+0xee>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	891a      	ldrh	r2, [r3, #8]
 8010a82:	887b      	ldrh	r3, [r7, #2]
 8010a84:	1ad3      	subs	r3, r2, r3
 8010a86:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8010a88:	887b      	ldrh	r3, [r7, #2]
 8010a8a:	817b      	strh	r3, [r7, #10]
  q = p;
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8010a90:	e018      	b.n	8010ac4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	895b      	ldrh	r3, [r3, #10]
 8010a96:	897a      	ldrh	r2, [r7, #10]
 8010a98:	1ad3      	subs	r3, r2, r3
 8010a9a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	891a      	ldrh	r2, [r3, #8]
 8010aa0:	893b      	ldrh	r3, [r7, #8]
 8010aa2:	1ad3      	subs	r3, r2, r3
 8010aa4:	b29a      	uxth	r2, r3
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d106      	bne.n	8010ac4 <pbuf_realloc+0x70>
 8010ab6:	4b25      	ldr	r3, [pc, #148]	; (8010b4c <pbuf_realloc+0xf8>)
 8010ab8:	f240 12af 	movw	r2, #431	; 0x1af
 8010abc:	4926      	ldr	r1, [pc, #152]	; (8010b58 <pbuf_realloc+0x104>)
 8010abe:	4825      	ldr	r0, [pc, #148]	; (8010b54 <pbuf_realloc+0x100>)
 8010ac0:	f009 f866 	bl	8019b90 <iprintf>
  while (rem_len > q->len) {
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	895b      	ldrh	r3, [r3, #10]
 8010ac8:	897a      	ldrh	r2, [r7, #10]
 8010aca:	429a      	cmp	r2, r3
 8010acc:	d8e1      	bhi.n	8010a92 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	7b1b      	ldrb	r3, [r3, #12]
 8010ad2:	f003 030f 	and.w	r3, r3, #15
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d11f      	bne.n	8010b1a <pbuf_realloc+0xc6>
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	895b      	ldrh	r3, [r3, #10]
 8010ade:	897a      	ldrh	r2, [r7, #10]
 8010ae0:	429a      	cmp	r2, r3
 8010ae2:	d01a      	beq.n	8010b1a <pbuf_realloc+0xc6>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	7b5b      	ldrb	r3, [r3, #13]
 8010ae8:	f003 0302 	and.w	r3, r3, #2
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d114      	bne.n	8010b1a <pbuf_realloc+0xc6>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	685a      	ldr	r2, [r3, #4]
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	1ad2      	subs	r2, r2, r3
 8010af8:	897b      	ldrh	r3, [r7, #10]
 8010afa:	4413      	add	r3, r2
 8010afc:	4619      	mov	r1, r3
 8010afe:	68f8      	ldr	r0, [r7, #12]
 8010b00:	f7fe ffca 	bl	800fa98 <mem_trim>
 8010b04:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d106      	bne.n	8010b1a <pbuf_realloc+0xc6>
 8010b0c:	4b0f      	ldr	r3, [pc, #60]	; (8010b4c <pbuf_realloc+0xf8>)
 8010b0e:	f240 12bd 	movw	r2, #445	; 0x1bd
 8010b12:	4912      	ldr	r1, [pc, #72]	; (8010b5c <pbuf_realloc+0x108>)
 8010b14:	480f      	ldr	r0, [pc, #60]	; (8010b54 <pbuf_realloc+0x100>)
 8010b16:	f009 f83b 	bl	8019b90 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	897a      	ldrh	r2, [r7, #10]
 8010b1e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	895a      	ldrh	r2, [r3, #10]
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d004      	beq.n	8010b3a <pbuf_realloc+0xe6>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	4618      	mov	r0, r3
 8010b36:	f000 f911 	bl	8010d5c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	2200      	movs	r2, #0
 8010b3e:	601a      	str	r2, [r3, #0]
 8010b40:	e000      	b.n	8010b44 <pbuf_realloc+0xf0>
    return;
 8010b42:	bf00      	nop

}
 8010b44:	3710      	adds	r7, #16
 8010b46:	46bd      	mov	sp, r7
 8010b48:	bd80      	pop	{r7, pc}
 8010b4a:	bf00      	nop
 8010b4c:	0801ca34 	.word	0x0801ca34
 8010b50:	0801cb4c 	.word	0x0801cb4c
 8010b54:	0801ca94 	.word	0x0801ca94
 8010b58:	0801cb64 	.word	0x0801cb64
 8010b5c:	0801cb7c 	.word	0x0801cb7c

08010b60 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8010b60:	b580      	push	{r7, lr}
 8010b62:	b086      	sub	sp, #24
 8010b64:	af00      	add	r7, sp, #0
 8010b66:	60f8      	str	r0, [r7, #12]
 8010b68:	60b9      	str	r1, [r7, #8]
 8010b6a:	4613      	mov	r3, r2
 8010b6c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d106      	bne.n	8010b82 <pbuf_add_header_impl+0x22>
 8010b74:	4b2b      	ldr	r3, [pc, #172]	; (8010c24 <pbuf_add_header_impl+0xc4>)
 8010b76:	f240 12df 	movw	r2, #479	; 0x1df
 8010b7a:	492b      	ldr	r1, [pc, #172]	; (8010c28 <pbuf_add_header_impl+0xc8>)
 8010b7c:	482b      	ldr	r0, [pc, #172]	; (8010c2c <pbuf_add_header_impl+0xcc>)
 8010b7e:	f009 f807 	bl	8019b90 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d003      	beq.n	8010b90 <pbuf_add_header_impl+0x30>
 8010b88:	68bb      	ldr	r3, [r7, #8]
 8010b8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010b8e:	d301      	bcc.n	8010b94 <pbuf_add_header_impl+0x34>
    return 1;
 8010b90:	2301      	movs	r3, #1
 8010b92:	e043      	b.n	8010c1c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8010b94:	68bb      	ldr	r3, [r7, #8]
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d101      	bne.n	8010b9e <pbuf_add_header_impl+0x3e>
    return 0;
 8010b9a:	2300      	movs	r3, #0
 8010b9c:	e03e      	b.n	8010c1c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8010b9e:	68bb      	ldr	r3, [r7, #8]
 8010ba0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	891a      	ldrh	r2, [r3, #8]
 8010ba6:	8a7b      	ldrh	r3, [r7, #18]
 8010ba8:	4413      	add	r3, r2
 8010baa:	b29b      	uxth	r3, r3
 8010bac:	8a7a      	ldrh	r2, [r7, #18]
 8010bae:	429a      	cmp	r2, r3
 8010bb0:	d901      	bls.n	8010bb6 <pbuf_add_header_impl+0x56>
    return 1;
 8010bb2:	2301      	movs	r3, #1
 8010bb4:	e032      	b.n	8010c1c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	7b1b      	ldrb	r3, [r3, #12]
 8010bba:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8010bbc:	8a3b      	ldrh	r3, [r7, #16]
 8010bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d00c      	beq.n	8010be0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	685a      	ldr	r2, [r3, #4]
 8010bca:	68bb      	ldr	r3, [r7, #8]
 8010bcc:	425b      	negs	r3, r3
 8010bce:	4413      	add	r3, r2
 8010bd0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	3310      	adds	r3, #16
 8010bd6:	697a      	ldr	r2, [r7, #20]
 8010bd8:	429a      	cmp	r2, r3
 8010bda:	d20d      	bcs.n	8010bf8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8010bdc:	2301      	movs	r3, #1
 8010bde:	e01d      	b.n	8010c1c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8010be0:	79fb      	ldrb	r3, [r7, #7]
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d006      	beq.n	8010bf4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	685a      	ldr	r2, [r3, #4]
 8010bea:	68bb      	ldr	r3, [r7, #8]
 8010bec:	425b      	negs	r3, r3
 8010bee:	4413      	add	r3, r2
 8010bf0:	617b      	str	r3, [r7, #20]
 8010bf2:	e001      	b.n	8010bf8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8010bf4:	2301      	movs	r3, #1
 8010bf6:	e011      	b.n	8010c1c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	697a      	ldr	r2, [r7, #20]
 8010bfc:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	895a      	ldrh	r2, [r3, #10]
 8010c02:	8a7b      	ldrh	r3, [r7, #18]
 8010c04:	4413      	add	r3, r2
 8010c06:	b29a      	uxth	r2, r3
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	891a      	ldrh	r2, [r3, #8]
 8010c10:	8a7b      	ldrh	r3, [r7, #18]
 8010c12:	4413      	add	r3, r2
 8010c14:	b29a      	uxth	r2, r3
 8010c16:	68fb      	ldr	r3, [r7, #12]
 8010c18:	811a      	strh	r2, [r3, #8]


  return 0;
 8010c1a:	2300      	movs	r3, #0
}
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	3718      	adds	r7, #24
 8010c20:	46bd      	mov	sp, r7
 8010c22:	bd80      	pop	{r7, pc}
 8010c24:	0801ca34 	.word	0x0801ca34
 8010c28:	0801cb98 	.word	0x0801cb98
 8010c2c:	0801ca94 	.word	0x0801ca94

08010c30 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8010c30:	b580      	push	{r7, lr}
 8010c32:	b082      	sub	sp, #8
 8010c34:	af00      	add	r7, sp, #0
 8010c36:	6078      	str	r0, [r7, #4]
 8010c38:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8010c3a:	2200      	movs	r2, #0
 8010c3c:	6839      	ldr	r1, [r7, #0]
 8010c3e:	6878      	ldr	r0, [r7, #4]
 8010c40:	f7ff ff8e 	bl	8010b60 <pbuf_add_header_impl>
 8010c44:	4603      	mov	r3, r0
}
 8010c46:	4618      	mov	r0, r3
 8010c48:	3708      	adds	r7, #8
 8010c4a:	46bd      	mov	sp, r7
 8010c4c:	bd80      	pop	{r7, pc}
	...

08010c50 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8010c50:	b580      	push	{r7, lr}
 8010c52:	b084      	sub	sp, #16
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	6078      	str	r0, [r7, #4]
 8010c58:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d106      	bne.n	8010c6e <pbuf_remove_header+0x1e>
 8010c60:	4b20      	ldr	r3, [pc, #128]	; (8010ce4 <pbuf_remove_header+0x94>)
 8010c62:	f240 224b 	movw	r2, #587	; 0x24b
 8010c66:	4920      	ldr	r1, [pc, #128]	; (8010ce8 <pbuf_remove_header+0x98>)
 8010c68:	4820      	ldr	r0, [pc, #128]	; (8010cec <pbuf_remove_header+0x9c>)
 8010c6a:	f008 ff91 	bl	8019b90 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d003      	beq.n	8010c7c <pbuf_remove_header+0x2c>
 8010c74:	683b      	ldr	r3, [r7, #0]
 8010c76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010c7a:	d301      	bcc.n	8010c80 <pbuf_remove_header+0x30>
    return 1;
 8010c7c:	2301      	movs	r3, #1
 8010c7e:	e02c      	b.n	8010cda <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8010c80:	683b      	ldr	r3, [r7, #0]
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d101      	bne.n	8010c8a <pbuf_remove_header+0x3a>
    return 0;
 8010c86:	2300      	movs	r3, #0
 8010c88:	e027      	b.n	8010cda <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8010c8a:	683b      	ldr	r3, [r7, #0]
 8010c8c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	895b      	ldrh	r3, [r3, #10]
 8010c92:	89fa      	ldrh	r2, [r7, #14]
 8010c94:	429a      	cmp	r2, r3
 8010c96:	d908      	bls.n	8010caa <pbuf_remove_header+0x5a>
 8010c98:	4b12      	ldr	r3, [pc, #72]	; (8010ce4 <pbuf_remove_header+0x94>)
 8010c9a:	f240 2255 	movw	r2, #597	; 0x255
 8010c9e:	4914      	ldr	r1, [pc, #80]	; (8010cf0 <pbuf_remove_header+0xa0>)
 8010ca0:	4812      	ldr	r0, [pc, #72]	; (8010cec <pbuf_remove_header+0x9c>)
 8010ca2:	f008 ff75 	bl	8019b90 <iprintf>
 8010ca6:	2301      	movs	r3, #1
 8010ca8:	e017      	b.n	8010cda <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	685b      	ldr	r3, [r3, #4]
 8010cae:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	685a      	ldr	r2, [r3, #4]
 8010cb4:	683b      	ldr	r3, [r7, #0]
 8010cb6:	441a      	add	r2, r3
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	895a      	ldrh	r2, [r3, #10]
 8010cc0:	89fb      	ldrh	r3, [r7, #14]
 8010cc2:	1ad3      	subs	r3, r2, r3
 8010cc4:	b29a      	uxth	r2, r3
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	891a      	ldrh	r2, [r3, #8]
 8010cce:	89fb      	ldrh	r3, [r7, #14]
 8010cd0:	1ad3      	subs	r3, r2, r3
 8010cd2:	b29a      	uxth	r2, r3
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8010cd8:	2300      	movs	r3, #0
}
 8010cda:	4618      	mov	r0, r3
 8010cdc:	3710      	adds	r7, #16
 8010cde:	46bd      	mov	sp, r7
 8010ce0:	bd80      	pop	{r7, pc}
 8010ce2:	bf00      	nop
 8010ce4:	0801ca34 	.word	0x0801ca34
 8010ce8:	0801cb98 	.word	0x0801cb98
 8010cec:	0801ca94 	.word	0x0801ca94
 8010cf0:	0801cba4 	.word	0x0801cba4

08010cf4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8010cf4:	b580      	push	{r7, lr}
 8010cf6:	b082      	sub	sp, #8
 8010cf8:	af00      	add	r7, sp, #0
 8010cfa:	6078      	str	r0, [r7, #4]
 8010cfc:	460b      	mov	r3, r1
 8010cfe:	807b      	strh	r3, [r7, #2]
 8010d00:	4613      	mov	r3, r2
 8010d02:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8010d04:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	da08      	bge.n	8010d1e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8010d0c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010d10:	425b      	negs	r3, r3
 8010d12:	4619      	mov	r1, r3
 8010d14:	6878      	ldr	r0, [r7, #4]
 8010d16:	f7ff ff9b 	bl	8010c50 <pbuf_remove_header>
 8010d1a:	4603      	mov	r3, r0
 8010d1c:	e007      	b.n	8010d2e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8010d1e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010d22:	787a      	ldrb	r2, [r7, #1]
 8010d24:	4619      	mov	r1, r3
 8010d26:	6878      	ldr	r0, [r7, #4]
 8010d28:	f7ff ff1a 	bl	8010b60 <pbuf_add_header_impl>
 8010d2c:	4603      	mov	r3, r0
  }
}
 8010d2e:	4618      	mov	r0, r3
 8010d30:	3708      	adds	r7, #8
 8010d32:	46bd      	mov	sp, r7
 8010d34:	bd80      	pop	{r7, pc}

08010d36 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8010d36:	b580      	push	{r7, lr}
 8010d38:	b082      	sub	sp, #8
 8010d3a:	af00      	add	r7, sp, #0
 8010d3c:	6078      	str	r0, [r7, #4]
 8010d3e:	460b      	mov	r3, r1
 8010d40:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8010d42:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010d46:	2201      	movs	r2, #1
 8010d48:	4619      	mov	r1, r3
 8010d4a:	6878      	ldr	r0, [r7, #4]
 8010d4c:	f7ff ffd2 	bl	8010cf4 <pbuf_header_impl>
 8010d50:	4603      	mov	r3, r0
}
 8010d52:	4618      	mov	r0, r3
 8010d54:	3708      	adds	r7, #8
 8010d56:	46bd      	mov	sp, r7
 8010d58:	bd80      	pop	{r7, pc}
	...

08010d5c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8010d5c:	b580      	push	{r7, lr}
 8010d5e:	b086      	sub	sp, #24
 8010d60:	af00      	add	r7, sp, #0
 8010d62:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d10b      	bne.n	8010d82 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d106      	bne.n	8010d7e <pbuf_free+0x22>
 8010d70:	4b38      	ldr	r3, [pc, #224]	; (8010e54 <pbuf_free+0xf8>)
 8010d72:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8010d76:	4938      	ldr	r1, [pc, #224]	; (8010e58 <pbuf_free+0xfc>)
 8010d78:	4838      	ldr	r0, [pc, #224]	; (8010e5c <pbuf_free+0x100>)
 8010d7a:	f008 ff09 	bl	8019b90 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8010d7e:	2300      	movs	r3, #0
 8010d80:	e063      	b.n	8010e4a <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8010d82:	2300      	movs	r3, #0
 8010d84:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8010d86:	e05c      	b.n	8010e42 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	7b9b      	ldrb	r3, [r3, #14]
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d106      	bne.n	8010d9e <pbuf_free+0x42>
 8010d90:	4b30      	ldr	r3, [pc, #192]	; (8010e54 <pbuf_free+0xf8>)
 8010d92:	f240 22f1 	movw	r2, #753	; 0x2f1
 8010d96:	4932      	ldr	r1, [pc, #200]	; (8010e60 <pbuf_free+0x104>)
 8010d98:	4830      	ldr	r0, [pc, #192]	; (8010e5c <pbuf_free+0x100>)
 8010d9a:	f008 fef9 	bl	8019b90 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	7b9b      	ldrb	r3, [r3, #14]
 8010da2:	3b01      	subs	r3, #1
 8010da4:	b2da      	uxtb	r2, r3
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	739a      	strb	r2, [r3, #14]
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	7b9b      	ldrb	r3, [r3, #14]
 8010dae:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8010db0:	7dbb      	ldrb	r3, [r7, #22]
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d143      	bne.n	8010e3e <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	7b1b      	ldrb	r3, [r3, #12]
 8010dc0:	f003 030f 	and.w	r3, r3, #15
 8010dc4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	7b5b      	ldrb	r3, [r3, #13]
 8010dca:	f003 0302 	and.w	r3, r3, #2
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d011      	beq.n	8010df6 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8010dd6:	68bb      	ldr	r3, [r7, #8]
 8010dd8:	691b      	ldr	r3, [r3, #16]
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d106      	bne.n	8010dec <pbuf_free+0x90>
 8010dde:	4b1d      	ldr	r3, [pc, #116]	; (8010e54 <pbuf_free+0xf8>)
 8010de0:	f240 22ff 	movw	r2, #767	; 0x2ff
 8010de4:	491f      	ldr	r1, [pc, #124]	; (8010e64 <pbuf_free+0x108>)
 8010de6:	481d      	ldr	r0, [pc, #116]	; (8010e5c <pbuf_free+0x100>)
 8010de8:	f008 fed2 	bl	8019b90 <iprintf>
        pc->custom_free_function(p);
 8010dec:	68bb      	ldr	r3, [r7, #8]
 8010dee:	691b      	ldr	r3, [r3, #16]
 8010df0:	6878      	ldr	r0, [r7, #4]
 8010df2:	4798      	blx	r3
 8010df4:	e01d      	b.n	8010e32 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8010df6:	7bfb      	ldrb	r3, [r7, #15]
 8010df8:	2b02      	cmp	r3, #2
 8010dfa:	d104      	bne.n	8010e06 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8010dfc:	6879      	ldr	r1, [r7, #4]
 8010dfe:	2008      	movs	r0, #8
 8010e00:	f7ff f936 	bl	8010070 <memp_free>
 8010e04:	e015      	b.n	8010e32 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8010e06:	7bfb      	ldrb	r3, [r7, #15]
 8010e08:	2b01      	cmp	r3, #1
 8010e0a:	d104      	bne.n	8010e16 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8010e0c:	6879      	ldr	r1, [r7, #4]
 8010e0e:	2007      	movs	r0, #7
 8010e10:	f7ff f92e 	bl	8010070 <memp_free>
 8010e14:	e00d      	b.n	8010e32 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8010e16:	7bfb      	ldrb	r3, [r7, #15]
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d103      	bne.n	8010e24 <pbuf_free+0xc8>
          mem_free(p);
 8010e1c:	6878      	ldr	r0, [r7, #4]
 8010e1e:	f7fe fdd1 	bl	800f9c4 <mem_free>
 8010e22:	e006      	b.n	8010e32 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8010e24:	4b0b      	ldr	r3, [pc, #44]	; (8010e54 <pbuf_free+0xf8>)
 8010e26:	f240 320f 	movw	r2, #783	; 0x30f
 8010e2a:	490f      	ldr	r1, [pc, #60]	; (8010e68 <pbuf_free+0x10c>)
 8010e2c:	480b      	ldr	r0, [pc, #44]	; (8010e5c <pbuf_free+0x100>)
 8010e2e:	f008 feaf 	bl	8019b90 <iprintf>
        }
      }
      count++;
 8010e32:	7dfb      	ldrb	r3, [r7, #23]
 8010e34:	3301      	adds	r3, #1
 8010e36:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8010e38:	693b      	ldr	r3, [r7, #16]
 8010e3a:	607b      	str	r3, [r7, #4]
 8010e3c:	e001      	b.n	8010e42 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8010e3e:	2300      	movs	r3, #0
 8010e40:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d19f      	bne.n	8010d88 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8010e48:	7dfb      	ldrb	r3, [r7, #23]
}
 8010e4a:	4618      	mov	r0, r3
 8010e4c:	3718      	adds	r7, #24
 8010e4e:	46bd      	mov	sp, r7
 8010e50:	bd80      	pop	{r7, pc}
 8010e52:	bf00      	nop
 8010e54:	0801ca34 	.word	0x0801ca34
 8010e58:	0801cb98 	.word	0x0801cb98
 8010e5c:	0801ca94 	.word	0x0801ca94
 8010e60:	0801cbc4 	.word	0x0801cbc4
 8010e64:	0801cbdc 	.word	0x0801cbdc
 8010e68:	0801cc00 	.word	0x0801cc00

08010e6c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8010e6c:	b480      	push	{r7}
 8010e6e:	b085      	sub	sp, #20
 8010e70:	af00      	add	r7, sp, #0
 8010e72:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8010e74:	2300      	movs	r3, #0
 8010e76:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8010e78:	e005      	b.n	8010e86 <pbuf_clen+0x1a>
    ++len;
 8010e7a:	89fb      	ldrh	r3, [r7, #14]
 8010e7c:	3301      	adds	r3, #1
 8010e7e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d1f6      	bne.n	8010e7a <pbuf_clen+0xe>
  }
  return len;
 8010e8c:	89fb      	ldrh	r3, [r7, #14]
}
 8010e8e:	4618      	mov	r0, r3
 8010e90:	3714      	adds	r7, #20
 8010e92:	46bd      	mov	sp, r7
 8010e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e98:	4770      	bx	lr
	...

08010e9c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8010e9c:	b580      	push	{r7, lr}
 8010e9e:	b082      	sub	sp, #8
 8010ea0:	af00      	add	r7, sp, #0
 8010ea2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d010      	beq.n	8010ecc <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	7b9b      	ldrb	r3, [r3, #14]
 8010eae:	3301      	adds	r3, #1
 8010eb0:	b2da      	uxtb	r2, r3
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	7b9b      	ldrb	r3, [r3, #14]
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d106      	bne.n	8010ecc <pbuf_ref+0x30>
 8010ebe:	4b05      	ldr	r3, [pc, #20]	; (8010ed4 <pbuf_ref+0x38>)
 8010ec0:	f240 3242 	movw	r2, #834	; 0x342
 8010ec4:	4904      	ldr	r1, [pc, #16]	; (8010ed8 <pbuf_ref+0x3c>)
 8010ec6:	4805      	ldr	r0, [pc, #20]	; (8010edc <pbuf_ref+0x40>)
 8010ec8:	f008 fe62 	bl	8019b90 <iprintf>
  }
}
 8010ecc:	bf00      	nop
 8010ece:	3708      	adds	r7, #8
 8010ed0:	46bd      	mov	sp, r7
 8010ed2:	bd80      	pop	{r7, pc}
 8010ed4:	0801ca34 	.word	0x0801ca34
 8010ed8:	0801cc14 	.word	0x0801cc14
 8010edc:	0801ca94 	.word	0x0801ca94

08010ee0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8010ee0:	b580      	push	{r7, lr}
 8010ee2:	b084      	sub	sp, #16
 8010ee4:	af00      	add	r7, sp, #0
 8010ee6:	6078      	str	r0, [r7, #4]
 8010ee8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d002      	beq.n	8010ef6 <pbuf_cat+0x16>
 8010ef0:	683b      	ldr	r3, [r7, #0]
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d107      	bne.n	8010f06 <pbuf_cat+0x26>
 8010ef6:	4b20      	ldr	r3, [pc, #128]	; (8010f78 <pbuf_cat+0x98>)
 8010ef8:	f240 3259 	movw	r2, #857	; 0x359
 8010efc:	491f      	ldr	r1, [pc, #124]	; (8010f7c <pbuf_cat+0x9c>)
 8010efe:	4820      	ldr	r0, [pc, #128]	; (8010f80 <pbuf_cat+0xa0>)
 8010f00:	f008 fe46 	bl	8019b90 <iprintf>
 8010f04:	e034      	b.n	8010f70 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	60fb      	str	r3, [r7, #12]
 8010f0a:	e00a      	b.n	8010f22 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	891a      	ldrh	r2, [r3, #8]
 8010f10:	683b      	ldr	r3, [r7, #0]
 8010f12:	891b      	ldrh	r3, [r3, #8]
 8010f14:	4413      	add	r3, r2
 8010f16:	b29a      	uxth	r2, r3
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	60fb      	str	r3, [r7, #12]
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d1f0      	bne.n	8010f0c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8010f2a:	68fb      	ldr	r3, [r7, #12]
 8010f2c:	891a      	ldrh	r2, [r3, #8]
 8010f2e:	68fb      	ldr	r3, [r7, #12]
 8010f30:	895b      	ldrh	r3, [r3, #10]
 8010f32:	429a      	cmp	r2, r3
 8010f34:	d006      	beq.n	8010f44 <pbuf_cat+0x64>
 8010f36:	4b10      	ldr	r3, [pc, #64]	; (8010f78 <pbuf_cat+0x98>)
 8010f38:	f240 3262 	movw	r2, #866	; 0x362
 8010f3c:	4911      	ldr	r1, [pc, #68]	; (8010f84 <pbuf_cat+0xa4>)
 8010f3e:	4810      	ldr	r0, [pc, #64]	; (8010f80 <pbuf_cat+0xa0>)
 8010f40:	f008 fe26 	bl	8019b90 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8010f44:	68fb      	ldr	r3, [r7, #12]
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d006      	beq.n	8010f5a <pbuf_cat+0x7a>
 8010f4c:	4b0a      	ldr	r3, [pc, #40]	; (8010f78 <pbuf_cat+0x98>)
 8010f4e:	f240 3263 	movw	r2, #867	; 0x363
 8010f52:	490d      	ldr	r1, [pc, #52]	; (8010f88 <pbuf_cat+0xa8>)
 8010f54:	480a      	ldr	r0, [pc, #40]	; (8010f80 <pbuf_cat+0xa0>)
 8010f56:	f008 fe1b 	bl	8019b90 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	891a      	ldrh	r2, [r3, #8]
 8010f5e:	683b      	ldr	r3, [r7, #0]
 8010f60:	891b      	ldrh	r3, [r3, #8]
 8010f62:	4413      	add	r3, r2
 8010f64:	b29a      	uxth	r2, r3
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8010f6a:	68fb      	ldr	r3, [r7, #12]
 8010f6c:	683a      	ldr	r2, [r7, #0]
 8010f6e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8010f70:	3710      	adds	r7, #16
 8010f72:	46bd      	mov	sp, r7
 8010f74:	bd80      	pop	{r7, pc}
 8010f76:	bf00      	nop
 8010f78:	0801ca34 	.word	0x0801ca34
 8010f7c:	0801cc28 	.word	0x0801cc28
 8010f80:	0801ca94 	.word	0x0801ca94
 8010f84:	0801cc60 	.word	0x0801cc60
 8010f88:	0801cc90 	.word	0x0801cc90

08010f8c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8010f8c:	b580      	push	{r7, lr}
 8010f8e:	b086      	sub	sp, #24
 8010f90:	af00      	add	r7, sp, #0
 8010f92:	6078      	str	r0, [r7, #4]
 8010f94:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8010f96:	2300      	movs	r3, #0
 8010f98:	617b      	str	r3, [r7, #20]
 8010f9a:	2300      	movs	r3, #0
 8010f9c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d008      	beq.n	8010fb6 <pbuf_copy+0x2a>
 8010fa4:	683b      	ldr	r3, [r7, #0]
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d005      	beq.n	8010fb6 <pbuf_copy+0x2a>
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	891a      	ldrh	r2, [r3, #8]
 8010fae:	683b      	ldr	r3, [r7, #0]
 8010fb0:	891b      	ldrh	r3, [r3, #8]
 8010fb2:	429a      	cmp	r2, r3
 8010fb4:	d209      	bcs.n	8010fca <pbuf_copy+0x3e>
 8010fb6:	4b57      	ldr	r3, [pc, #348]	; (8011114 <pbuf_copy+0x188>)
 8010fb8:	f240 32c9 	movw	r2, #969	; 0x3c9
 8010fbc:	4956      	ldr	r1, [pc, #344]	; (8011118 <pbuf_copy+0x18c>)
 8010fbe:	4857      	ldr	r0, [pc, #348]	; (801111c <pbuf_copy+0x190>)
 8010fc0:	f008 fde6 	bl	8019b90 <iprintf>
 8010fc4:	f06f 030f 	mvn.w	r3, #15
 8010fc8:	e09f      	b.n	801110a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	895b      	ldrh	r3, [r3, #10]
 8010fce:	461a      	mov	r2, r3
 8010fd0:	697b      	ldr	r3, [r7, #20]
 8010fd2:	1ad2      	subs	r2, r2, r3
 8010fd4:	683b      	ldr	r3, [r7, #0]
 8010fd6:	895b      	ldrh	r3, [r3, #10]
 8010fd8:	4619      	mov	r1, r3
 8010fda:	693b      	ldr	r3, [r7, #16]
 8010fdc:	1acb      	subs	r3, r1, r3
 8010fde:	429a      	cmp	r2, r3
 8010fe0:	d306      	bcc.n	8010ff0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8010fe2:	683b      	ldr	r3, [r7, #0]
 8010fe4:	895b      	ldrh	r3, [r3, #10]
 8010fe6:	461a      	mov	r2, r3
 8010fe8:	693b      	ldr	r3, [r7, #16]
 8010fea:	1ad3      	subs	r3, r2, r3
 8010fec:	60fb      	str	r3, [r7, #12]
 8010fee:	e005      	b.n	8010ffc <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	895b      	ldrh	r3, [r3, #10]
 8010ff4:	461a      	mov	r2, r3
 8010ff6:	697b      	ldr	r3, [r7, #20]
 8010ff8:	1ad3      	subs	r3, r2, r3
 8010ffa:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	685a      	ldr	r2, [r3, #4]
 8011000:	697b      	ldr	r3, [r7, #20]
 8011002:	18d0      	adds	r0, r2, r3
 8011004:	683b      	ldr	r3, [r7, #0]
 8011006:	685a      	ldr	r2, [r3, #4]
 8011008:	693b      	ldr	r3, [r7, #16]
 801100a:	4413      	add	r3, r2
 801100c:	68fa      	ldr	r2, [r7, #12]
 801100e:	4619      	mov	r1, r3
 8011010:	f008 ff8d 	bl	8019f2e <memcpy>
    offset_to += len;
 8011014:	697a      	ldr	r2, [r7, #20]
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	4413      	add	r3, r2
 801101a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 801101c:	693a      	ldr	r2, [r7, #16]
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	4413      	add	r3, r2
 8011022:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	895b      	ldrh	r3, [r3, #10]
 8011028:	461a      	mov	r2, r3
 801102a:	697b      	ldr	r3, [r7, #20]
 801102c:	4293      	cmp	r3, r2
 801102e:	d906      	bls.n	801103e <pbuf_copy+0xb2>
 8011030:	4b38      	ldr	r3, [pc, #224]	; (8011114 <pbuf_copy+0x188>)
 8011032:	f240 32d9 	movw	r2, #985	; 0x3d9
 8011036:	493a      	ldr	r1, [pc, #232]	; (8011120 <pbuf_copy+0x194>)
 8011038:	4838      	ldr	r0, [pc, #224]	; (801111c <pbuf_copy+0x190>)
 801103a:	f008 fda9 	bl	8019b90 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801103e:	683b      	ldr	r3, [r7, #0]
 8011040:	895b      	ldrh	r3, [r3, #10]
 8011042:	461a      	mov	r2, r3
 8011044:	693b      	ldr	r3, [r7, #16]
 8011046:	4293      	cmp	r3, r2
 8011048:	d906      	bls.n	8011058 <pbuf_copy+0xcc>
 801104a:	4b32      	ldr	r3, [pc, #200]	; (8011114 <pbuf_copy+0x188>)
 801104c:	f240 32da 	movw	r2, #986	; 0x3da
 8011050:	4934      	ldr	r1, [pc, #208]	; (8011124 <pbuf_copy+0x198>)
 8011052:	4832      	ldr	r0, [pc, #200]	; (801111c <pbuf_copy+0x190>)
 8011054:	f008 fd9c 	bl	8019b90 <iprintf>
    if (offset_from >= p_from->len) {
 8011058:	683b      	ldr	r3, [r7, #0]
 801105a:	895b      	ldrh	r3, [r3, #10]
 801105c:	461a      	mov	r2, r3
 801105e:	693b      	ldr	r3, [r7, #16]
 8011060:	4293      	cmp	r3, r2
 8011062:	d304      	bcc.n	801106e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8011064:	2300      	movs	r3, #0
 8011066:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8011068:	683b      	ldr	r3, [r7, #0]
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	895b      	ldrh	r3, [r3, #10]
 8011072:	461a      	mov	r2, r3
 8011074:	697b      	ldr	r3, [r7, #20]
 8011076:	4293      	cmp	r3, r2
 8011078:	d114      	bne.n	80110a4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801107a:	2300      	movs	r3, #0
 801107c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	2b00      	cmp	r3, #0
 8011088:	d10c      	bne.n	80110a4 <pbuf_copy+0x118>
 801108a:	683b      	ldr	r3, [r7, #0]
 801108c:	2b00      	cmp	r3, #0
 801108e:	d009      	beq.n	80110a4 <pbuf_copy+0x118>
 8011090:	4b20      	ldr	r3, [pc, #128]	; (8011114 <pbuf_copy+0x188>)
 8011092:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8011096:	4924      	ldr	r1, [pc, #144]	; (8011128 <pbuf_copy+0x19c>)
 8011098:	4820      	ldr	r0, [pc, #128]	; (801111c <pbuf_copy+0x190>)
 801109a:	f008 fd79 	bl	8019b90 <iprintf>
 801109e:	f06f 030f 	mvn.w	r3, #15
 80110a2:	e032      	b.n	801110a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80110a4:	683b      	ldr	r3, [r7, #0]
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d013      	beq.n	80110d2 <pbuf_copy+0x146>
 80110aa:	683b      	ldr	r3, [r7, #0]
 80110ac:	895a      	ldrh	r2, [r3, #10]
 80110ae:	683b      	ldr	r3, [r7, #0]
 80110b0:	891b      	ldrh	r3, [r3, #8]
 80110b2:	429a      	cmp	r2, r3
 80110b4:	d10d      	bne.n	80110d2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80110b6:	683b      	ldr	r3, [r7, #0]
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d009      	beq.n	80110d2 <pbuf_copy+0x146>
 80110be:	4b15      	ldr	r3, [pc, #84]	; (8011114 <pbuf_copy+0x188>)
 80110c0:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80110c4:	4919      	ldr	r1, [pc, #100]	; (801112c <pbuf_copy+0x1a0>)
 80110c6:	4815      	ldr	r0, [pc, #84]	; (801111c <pbuf_copy+0x190>)
 80110c8:	f008 fd62 	bl	8019b90 <iprintf>
 80110cc:	f06f 0305 	mvn.w	r3, #5
 80110d0:	e01b      	b.n	801110a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d013      	beq.n	8011100 <pbuf_copy+0x174>
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	895a      	ldrh	r2, [r3, #10]
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	891b      	ldrh	r3, [r3, #8]
 80110e0:	429a      	cmp	r2, r3
 80110e2:	d10d      	bne.n	8011100 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d009      	beq.n	8011100 <pbuf_copy+0x174>
 80110ec:	4b09      	ldr	r3, [pc, #36]	; (8011114 <pbuf_copy+0x188>)
 80110ee:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80110f2:	490e      	ldr	r1, [pc, #56]	; (801112c <pbuf_copy+0x1a0>)
 80110f4:	4809      	ldr	r0, [pc, #36]	; (801111c <pbuf_copy+0x190>)
 80110f6:	f008 fd4b 	bl	8019b90 <iprintf>
 80110fa:	f06f 0305 	mvn.w	r3, #5
 80110fe:	e004      	b.n	801110a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8011100:	683b      	ldr	r3, [r7, #0]
 8011102:	2b00      	cmp	r3, #0
 8011104:	f47f af61 	bne.w	8010fca <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8011108:	2300      	movs	r3, #0
}
 801110a:	4618      	mov	r0, r3
 801110c:	3718      	adds	r7, #24
 801110e:	46bd      	mov	sp, r7
 8011110:	bd80      	pop	{r7, pc}
 8011112:	bf00      	nop
 8011114:	0801ca34 	.word	0x0801ca34
 8011118:	0801ccdc 	.word	0x0801ccdc
 801111c:	0801ca94 	.word	0x0801ca94
 8011120:	0801cd0c 	.word	0x0801cd0c
 8011124:	0801cd24 	.word	0x0801cd24
 8011128:	0801cd40 	.word	0x0801cd40
 801112c:	0801cd50 	.word	0x0801cd50

08011130 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8011130:	b580      	push	{r7, lr}
 8011132:	b088      	sub	sp, #32
 8011134:	af00      	add	r7, sp, #0
 8011136:	60f8      	str	r0, [r7, #12]
 8011138:	60b9      	str	r1, [r7, #8]
 801113a:	4611      	mov	r1, r2
 801113c:	461a      	mov	r2, r3
 801113e:	460b      	mov	r3, r1
 8011140:	80fb      	strh	r3, [r7, #6]
 8011142:	4613      	mov	r3, r2
 8011144:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8011146:	2300      	movs	r3, #0
 8011148:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801114a:	2300      	movs	r3, #0
 801114c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	2b00      	cmp	r3, #0
 8011152:	d108      	bne.n	8011166 <pbuf_copy_partial+0x36>
 8011154:	4b2b      	ldr	r3, [pc, #172]	; (8011204 <pbuf_copy_partial+0xd4>)
 8011156:	f240 420a 	movw	r2, #1034	; 0x40a
 801115a:	492b      	ldr	r1, [pc, #172]	; (8011208 <pbuf_copy_partial+0xd8>)
 801115c:	482b      	ldr	r0, [pc, #172]	; (801120c <pbuf_copy_partial+0xdc>)
 801115e:	f008 fd17 	bl	8019b90 <iprintf>
 8011162:	2300      	movs	r3, #0
 8011164:	e04a      	b.n	80111fc <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8011166:	68bb      	ldr	r3, [r7, #8]
 8011168:	2b00      	cmp	r3, #0
 801116a:	d108      	bne.n	801117e <pbuf_copy_partial+0x4e>
 801116c:	4b25      	ldr	r3, [pc, #148]	; (8011204 <pbuf_copy_partial+0xd4>)
 801116e:	f240 420b 	movw	r2, #1035	; 0x40b
 8011172:	4927      	ldr	r1, [pc, #156]	; (8011210 <pbuf_copy_partial+0xe0>)
 8011174:	4825      	ldr	r0, [pc, #148]	; (801120c <pbuf_copy_partial+0xdc>)
 8011176:	f008 fd0b 	bl	8019b90 <iprintf>
 801117a:	2300      	movs	r3, #0
 801117c:	e03e      	b.n	80111fc <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	61fb      	str	r3, [r7, #28]
 8011182:	e034      	b.n	80111ee <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8011184:	88bb      	ldrh	r3, [r7, #4]
 8011186:	2b00      	cmp	r3, #0
 8011188:	d00a      	beq.n	80111a0 <pbuf_copy_partial+0x70>
 801118a:	69fb      	ldr	r3, [r7, #28]
 801118c:	895b      	ldrh	r3, [r3, #10]
 801118e:	88ba      	ldrh	r2, [r7, #4]
 8011190:	429a      	cmp	r2, r3
 8011192:	d305      	bcc.n	80111a0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8011194:	69fb      	ldr	r3, [r7, #28]
 8011196:	895b      	ldrh	r3, [r3, #10]
 8011198:	88ba      	ldrh	r2, [r7, #4]
 801119a:	1ad3      	subs	r3, r2, r3
 801119c:	80bb      	strh	r3, [r7, #4]
 801119e:	e023      	b.n	80111e8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80111a0:	69fb      	ldr	r3, [r7, #28]
 80111a2:	895a      	ldrh	r2, [r3, #10]
 80111a4:	88bb      	ldrh	r3, [r7, #4]
 80111a6:	1ad3      	subs	r3, r2, r3
 80111a8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80111aa:	8b3a      	ldrh	r2, [r7, #24]
 80111ac:	88fb      	ldrh	r3, [r7, #6]
 80111ae:	429a      	cmp	r2, r3
 80111b0:	d901      	bls.n	80111b6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80111b2:	88fb      	ldrh	r3, [r7, #6]
 80111b4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80111b6:	8b7b      	ldrh	r3, [r7, #26]
 80111b8:	68ba      	ldr	r2, [r7, #8]
 80111ba:	18d0      	adds	r0, r2, r3
 80111bc:	69fb      	ldr	r3, [r7, #28]
 80111be:	685a      	ldr	r2, [r3, #4]
 80111c0:	88bb      	ldrh	r3, [r7, #4]
 80111c2:	4413      	add	r3, r2
 80111c4:	8b3a      	ldrh	r2, [r7, #24]
 80111c6:	4619      	mov	r1, r3
 80111c8:	f008 feb1 	bl	8019f2e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80111cc:	8afa      	ldrh	r2, [r7, #22]
 80111ce:	8b3b      	ldrh	r3, [r7, #24]
 80111d0:	4413      	add	r3, r2
 80111d2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80111d4:	8b7a      	ldrh	r2, [r7, #26]
 80111d6:	8b3b      	ldrh	r3, [r7, #24]
 80111d8:	4413      	add	r3, r2
 80111da:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80111dc:	88fa      	ldrh	r2, [r7, #6]
 80111de:	8b3b      	ldrh	r3, [r7, #24]
 80111e0:	1ad3      	subs	r3, r2, r3
 80111e2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80111e4:	2300      	movs	r3, #0
 80111e6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80111e8:	69fb      	ldr	r3, [r7, #28]
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	61fb      	str	r3, [r7, #28]
 80111ee:	88fb      	ldrh	r3, [r7, #6]
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d002      	beq.n	80111fa <pbuf_copy_partial+0xca>
 80111f4:	69fb      	ldr	r3, [r7, #28]
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d1c4      	bne.n	8011184 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80111fa:	8afb      	ldrh	r3, [r7, #22]
}
 80111fc:	4618      	mov	r0, r3
 80111fe:	3720      	adds	r7, #32
 8011200:	46bd      	mov	sp, r7
 8011202:	bd80      	pop	{r7, pc}
 8011204:	0801ca34 	.word	0x0801ca34
 8011208:	0801cd7c 	.word	0x0801cd7c
 801120c:	0801ca94 	.word	0x0801ca94
 8011210:	0801cd9c 	.word	0x0801cd9c

08011214 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8011214:	b580      	push	{r7, lr}
 8011216:	b084      	sub	sp, #16
 8011218:	af00      	add	r7, sp, #0
 801121a:	4603      	mov	r3, r0
 801121c:	603a      	str	r2, [r7, #0]
 801121e:	71fb      	strb	r3, [r7, #7]
 8011220:	460b      	mov	r3, r1
 8011222:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8011224:	683b      	ldr	r3, [r7, #0]
 8011226:	8919      	ldrh	r1, [r3, #8]
 8011228:	88ba      	ldrh	r2, [r7, #4]
 801122a:	79fb      	ldrb	r3, [r7, #7]
 801122c:	4618      	mov	r0, r3
 801122e:	f7ff fab1 	bl	8010794 <pbuf_alloc>
 8011232:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	2b00      	cmp	r3, #0
 8011238:	d101      	bne.n	801123e <pbuf_clone+0x2a>
    return NULL;
 801123a:	2300      	movs	r3, #0
 801123c:	e011      	b.n	8011262 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 801123e:	6839      	ldr	r1, [r7, #0]
 8011240:	68f8      	ldr	r0, [r7, #12]
 8011242:	f7ff fea3 	bl	8010f8c <pbuf_copy>
 8011246:	4603      	mov	r3, r0
 8011248:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801124a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801124e:	2b00      	cmp	r3, #0
 8011250:	d006      	beq.n	8011260 <pbuf_clone+0x4c>
 8011252:	4b06      	ldr	r3, [pc, #24]	; (801126c <pbuf_clone+0x58>)
 8011254:	f240 5224 	movw	r2, #1316	; 0x524
 8011258:	4905      	ldr	r1, [pc, #20]	; (8011270 <pbuf_clone+0x5c>)
 801125a:	4806      	ldr	r0, [pc, #24]	; (8011274 <pbuf_clone+0x60>)
 801125c:	f008 fc98 	bl	8019b90 <iprintf>
  return q;
 8011260:	68fb      	ldr	r3, [r7, #12]
}
 8011262:	4618      	mov	r0, r3
 8011264:	3710      	adds	r7, #16
 8011266:	46bd      	mov	sp, r7
 8011268:	bd80      	pop	{r7, pc}
 801126a:	bf00      	nop
 801126c:	0801ca34 	.word	0x0801ca34
 8011270:	0801cea8 	.word	0x0801cea8
 8011274:	0801ca94 	.word	0x0801ca94

08011278 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8011278:	b580      	push	{r7, lr}
 801127a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801127c:	f007 ff4c 	bl	8019118 <rand>
 8011280:	4603      	mov	r3, r0
 8011282:	b29b      	uxth	r3, r3
 8011284:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011288:	b29b      	uxth	r3, r3
 801128a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801128e:	b29a      	uxth	r2, r3
 8011290:	4b01      	ldr	r3, [pc, #4]	; (8011298 <tcp_init+0x20>)
 8011292:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011294:	bf00      	nop
 8011296:	bd80      	pop	{r7, pc}
 8011298:	20000058 	.word	0x20000058

0801129c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 801129c:	b580      	push	{r7, lr}
 801129e:	b082      	sub	sp, #8
 80112a0:	af00      	add	r7, sp, #0
 80112a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	7d1b      	ldrb	r3, [r3, #20]
 80112a8:	2b01      	cmp	r3, #1
 80112aa:	d105      	bne.n	80112b8 <tcp_free+0x1c>
 80112ac:	4b06      	ldr	r3, [pc, #24]	; (80112c8 <tcp_free+0x2c>)
 80112ae:	22d4      	movs	r2, #212	; 0xd4
 80112b0:	4906      	ldr	r1, [pc, #24]	; (80112cc <tcp_free+0x30>)
 80112b2:	4807      	ldr	r0, [pc, #28]	; (80112d0 <tcp_free+0x34>)
 80112b4:	f008 fc6c 	bl	8019b90 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80112b8:	6879      	ldr	r1, [r7, #4]
 80112ba:	2001      	movs	r0, #1
 80112bc:	f7fe fed8 	bl	8010070 <memp_free>
}
 80112c0:	bf00      	nop
 80112c2:	3708      	adds	r7, #8
 80112c4:	46bd      	mov	sp, r7
 80112c6:	bd80      	pop	{r7, pc}
 80112c8:	0801cf34 	.word	0x0801cf34
 80112cc:	0801cf64 	.word	0x0801cf64
 80112d0:	0801cf78 	.word	0x0801cf78

080112d4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80112d4:	b580      	push	{r7, lr}
 80112d6:	b082      	sub	sp, #8
 80112d8:	af00      	add	r7, sp, #0
 80112da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	7d1b      	ldrb	r3, [r3, #20]
 80112e0:	2b01      	cmp	r3, #1
 80112e2:	d105      	bne.n	80112f0 <tcp_free_listen+0x1c>
 80112e4:	4b06      	ldr	r3, [pc, #24]	; (8011300 <tcp_free_listen+0x2c>)
 80112e6:	22df      	movs	r2, #223	; 0xdf
 80112e8:	4906      	ldr	r1, [pc, #24]	; (8011304 <tcp_free_listen+0x30>)
 80112ea:	4807      	ldr	r0, [pc, #28]	; (8011308 <tcp_free_listen+0x34>)
 80112ec:	f008 fc50 	bl	8019b90 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80112f0:	6879      	ldr	r1, [r7, #4]
 80112f2:	2002      	movs	r0, #2
 80112f4:	f7fe febc 	bl	8010070 <memp_free>
}
 80112f8:	bf00      	nop
 80112fa:	3708      	adds	r7, #8
 80112fc:	46bd      	mov	sp, r7
 80112fe:	bd80      	pop	{r7, pc}
 8011300:	0801cf34 	.word	0x0801cf34
 8011304:	0801cfa0 	.word	0x0801cfa0
 8011308:	0801cf78 	.word	0x0801cf78

0801130c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 801130c:	b580      	push	{r7, lr}
 801130e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8011310:	f000 fea4 	bl	801205c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8011314:	4b07      	ldr	r3, [pc, #28]	; (8011334 <tcp_tmr+0x28>)
 8011316:	781b      	ldrb	r3, [r3, #0]
 8011318:	3301      	adds	r3, #1
 801131a:	b2da      	uxtb	r2, r3
 801131c:	4b05      	ldr	r3, [pc, #20]	; (8011334 <tcp_tmr+0x28>)
 801131e:	701a      	strb	r2, [r3, #0]
 8011320:	4b04      	ldr	r3, [pc, #16]	; (8011334 <tcp_tmr+0x28>)
 8011322:	781b      	ldrb	r3, [r3, #0]
 8011324:	f003 0301 	and.w	r3, r3, #1
 8011328:	2b00      	cmp	r3, #0
 801132a:	d001      	beq.n	8011330 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 801132c:	f000 fb56 	bl	80119dc <tcp_slowtmr>
  }
}
 8011330:	bf00      	nop
 8011332:	bd80      	pop	{r7, pc}
 8011334:	20007059 	.word	0x20007059

08011338 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8011338:	b580      	push	{r7, lr}
 801133a:	b084      	sub	sp, #16
 801133c:	af00      	add	r7, sp, #0
 801133e:	6078      	str	r0, [r7, #4]
 8011340:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8011342:	683b      	ldr	r3, [r7, #0]
 8011344:	2b00      	cmp	r3, #0
 8011346:	d105      	bne.n	8011354 <tcp_remove_listener+0x1c>
 8011348:	4b0d      	ldr	r3, [pc, #52]	; (8011380 <tcp_remove_listener+0x48>)
 801134a:	22ff      	movs	r2, #255	; 0xff
 801134c:	490d      	ldr	r1, [pc, #52]	; (8011384 <tcp_remove_listener+0x4c>)
 801134e:	480e      	ldr	r0, [pc, #56]	; (8011388 <tcp_remove_listener+0x50>)
 8011350:	f008 fc1e 	bl	8019b90 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	60fb      	str	r3, [r7, #12]
 8011358:	e00a      	b.n	8011370 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801135e:	683a      	ldr	r2, [r7, #0]
 8011360:	429a      	cmp	r2, r3
 8011362:	d102      	bne.n	801136a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	2200      	movs	r2, #0
 8011368:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	68db      	ldr	r3, [r3, #12]
 801136e:	60fb      	str	r3, [r7, #12]
 8011370:	68fb      	ldr	r3, [r7, #12]
 8011372:	2b00      	cmp	r3, #0
 8011374:	d1f1      	bne.n	801135a <tcp_remove_listener+0x22>
    }
  }
}
 8011376:	bf00      	nop
 8011378:	bf00      	nop
 801137a:	3710      	adds	r7, #16
 801137c:	46bd      	mov	sp, r7
 801137e:	bd80      	pop	{r7, pc}
 8011380:	0801cf34 	.word	0x0801cf34
 8011384:	0801cfbc 	.word	0x0801cfbc
 8011388:	0801cf78 	.word	0x0801cf78

0801138c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 801138c:	b580      	push	{r7, lr}
 801138e:	b084      	sub	sp, #16
 8011390:	af00      	add	r7, sp, #0
 8011392:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d106      	bne.n	80113a8 <tcp_listen_closed+0x1c>
 801139a:	4b14      	ldr	r3, [pc, #80]	; (80113ec <tcp_listen_closed+0x60>)
 801139c:	f240 1211 	movw	r2, #273	; 0x111
 80113a0:	4913      	ldr	r1, [pc, #76]	; (80113f0 <tcp_listen_closed+0x64>)
 80113a2:	4814      	ldr	r0, [pc, #80]	; (80113f4 <tcp_listen_closed+0x68>)
 80113a4:	f008 fbf4 	bl	8019b90 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	7d1b      	ldrb	r3, [r3, #20]
 80113ac:	2b01      	cmp	r3, #1
 80113ae:	d006      	beq.n	80113be <tcp_listen_closed+0x32>
 80113b0:	4b0e      	ldr	r3, [pc, #56]	; (80113ec <tcp_listen_closed+0x60>)
 80113b2:	f44f 7289 	mov.w	r2, #274	; 0x112
 80113b6:	4910      	ldr	r1, [pc, #64]	; (80113f8 <tcp_listen_closed+0x6c>)
 80113b8:	480e      	ldr	r0, [pc, #56]	; (80113f4 <tcp_listen_closed+0x68>)
 80113ba:	f008 fbe9 	bl	8019b90 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80113be:	2301      	movs	r3, #1
 80113c0:	60fb      	str	r3, [r7, #12]
 80113c2:	e00b      	b.n	80113dc <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80113c4:	4a0d      	ldr	r2, [pc, #52]	; (80113fc <tcp_listen_closed+0x70>)
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	6879      	ldr	r1, [r7, #4]
 80113d0:	4618      	mov	r0, r3
 80113d2:	f7ff ffb1 	bl	8011338 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80113d6:	68fb      	ldr	r3, [r7, #12]
 80113d8:	3301      	adds	r3, #1
 80113da:	60fb      	str	r3, [r7, #12]
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	2b03      	cmp	r3, #3
 80113e0:	d9f0      	bls.n	80113c4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80113e2:	bf00      	nop
 80113e4:	bf00      	nop
 80113e6:	3710      	adds	r7, #16
 80113e8:	46bd      	mov	sp, r7
 80113ea:	bd80      	pop	{r7, pc}
 80113ec:	0801cf34 	.word	0x0801cf34
 80113f0:	0801cfe4 	.word	0x0801cfe4
 80113f4:	0801cf78 	.word	0x0801cf78
 80113f8:	0801cff0 	.word	0x0801cff0
 80113fc:	0801ef54 	.word	0x0801ef54

08011400 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8011400:	b5b0      	push	{r4, r5, r7, lr}
 8011402:	b088      	sub	sp, #32
 8011404:	af04      	add	r7, sp, #16
 8011406:	6078      	str	r0, [r7, #4]
 8011408:	460b      	mov	r3, r1
 801140a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	2b00      	cmp	r3, #0
 8011410:	d106      	bne.n	8011420 <tcp_close_shutdown+0x20>
 8011412:	4b63      	ldr	r3, [pc, #396]	; (80115a0 <tcp_close_shutdown+0x1a0>)
 8011414:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8011418:	4962      	ldr	r1, [pc, #392]	; (80115a4 <tcp_close_shutdown+0x1a4>)
 801141a:	4863      	ldr	r0, [pc, #396]	; (80115a8 <tcp_close_shutdown+0x1a8>)
 801141c:	f008 fbb8 	bl	8019b90 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8011420:	78fb      	ldrb	r3, [r7, #3]
 8011422:	2b00      	cmp	r3, #0
 8011424:	d067      	beq.n	80114f6 <tcp_close_shutdown+0xf6>
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	7d1b      	ldrb	r3, [r3, #20]
 801142a:	2b04      	cmp	r3, #4
 801142c:	d003      	beq.n	8011436 <tcp_close_shutdown+0x36>
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	7d1b      	ldrb	r3, [r3, #20]
 8011432:	2b07      	cmp	r3, #7
 8011434:	d15f      	bne.n	80114f6 <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801143a:	2b00      	cmp	r3, #0
 801143c:	d105      	bne.n	801144a <tcp_close_shutdown+0x4a>
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011442:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8011446:	4293      	cmp	r3, r2
 8011448:	d055      	beq.n	80114f6 <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	8b5b      	ldrh	r3, [r3, #26]
 801144e:	f003 0310 	and.w	r3, r3, #16
 8011452:	2b00      	cmp	r3, #0
 8011454:	d106      	bne.n	8011464 <tcp_close_shutdown+0x64>
 8011456:	4b52      	ldr	r3, [pc, #328]	; (80115a0 <tcp_close_shutdown+0x1a0>)
 8011458:	f44f 72b2 	mov.w	r2, #356	; 0x164
 801145c:	4953      	ldr	r1, [pc, #332]	; (80115ac <tcp_close_shutdown+0x1ac>)
 801145e:	4852      	ldr	r0, [pc, #328]	; (80115a8 <tcp_close_shutdown+0x1a8>)
 8011460:	f008 fb96 	bl	8019b90 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801146c:	687d      	ldr	r5, [r7, #4]
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	3304      	adds	r3, #4
 8011472:	687a      	ldr	r2, [r7, #4]
 8011474:	8ad2      	ldrh	r2, [r2, #22]
 8011476:	6879      	ldr	r1, [r7, #4]
 8011478:	8b09      	ldrh	r1, [r1, #24]
 801147a:	9102      	str	r1, [sp, #8]
 801147c:	9201      	str	r2, [sp, #4]
 801147e:	9300      	str	r3, [sp, #0]
 8011480:	462b      	mov	r3, r5
 8011482:	4622      	mov	r2, r4
 8011484:	4601      	mov	r1, r0
 8011486:	6878      	ldr	r0, [r7, #4]
 8011488:	f004 fe94 	bl	80161b4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 801148c:	6878      	ldr	r0, [r7, #4]
 801148e:	f001 f8c9 	bl	8012624 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8011492:	4b47      	ldr	r3, [pc, #284]	; (80115b0 <tcp_close_shutdown+0x1b0>)
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	687a      	ldr	r2, [r7, #4]
 8011498:	429a      	cmp	r2, r3
 801149a:	d105      	bne.n	80114a8 <tcp_close_shutdown+0xa8>
 801149c:	4b44      	ldr	r3, [pc, #272]	; (80115b0 <tcp_close_shutdown+0x1b0>)
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	68db      	ldr	r3, [r3, #12]
 80114a2:	4a43      	ldr	r2, [pc, #268]	; (80115b0 <tcp_close_shutdown+0x1b0>)
 80114a4:	6013      	str	r3, [r2, #0]
 80114a6:	e013      	b.n	80114d0 <tcp_close_shutdown+0xd0>
 80114a8:	4b41      	ldr	r3, [pc, #260]	; (80115b0 <tcp_close_shutdown+0x1b0>)
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	60fb      	str	r3, [r7, #12]
 80114ae:	e00c      	b.n	80114ca <tcp_close_shutdown+0xca>
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	68db      	ldr	r3, [r3, #12]
 80114b4:	687a      	ldr	r2, [r7, #4]
 80114b6:	429a      	cmp	r2, r3
 80114b8:	d104      	bne.n	80114c4 <tcp_close_shutdown+0xc4>
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	68da      	ldr	r2, [r3, #12]
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	60da      	str	r2, [r3, #12]
 80114c2:	e005      	b.n	80114d0 <tcp_close_shutdown+0xd0>
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	68db      	ldr	r3, [r3, #12]
 80114c8:	60fb      	str	r3, [r7, #12]
 80114ca:	68fb      	ldr	r3, [r7, #12]
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d1ef      	bne.n	80114b0 <tcp_close_shutdown+0xb0>
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	2200      	movs	r2, #0
 80114d4:	60da      	str	r2, [r3, #12]
 80114d6:	4b37      	ldr	r3, [pc, #220]	; (80115b4 <tcp_close_shutdown+0x1b4>)
 80114d8:	2201      	movs	r2, #1
 80114da:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80114dc:	4b36      	ldr	r3, [pc, #216]	; (80115b8 <tcp_close_shutdown+0x1b8>)
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	687a      	ldr	r2, [r7, #4]
 80114e2:	429a      	cmp	r2, r3
 80114e4:	d102      	bne.n	80114ec <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80114e6:	f003 fd61 	bl	8014fac <tcp_trigger_input_pcb_close>
 80114ea:	e002      	b.n	80114f2 <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 80114ec:	6878      	ldr	r0, [r7, #4]
 80114ee:	f7ff fed5 	bl	801129c <tcp_free>
      }
      return ERR_OK;
 80114f2:	2300      	movs	r3, #0
 80114f4:	e050      	b.n	8011598 <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	7d1b      	ldrb	r3, [r3, #20]
 80114fa:	2b02      	cmp	r3, #2
 80114fc:	d03b      	beq.n	8011576 <tcp_close_shutdown+0x176>
 80114fe:	2b02      	cmp	r3, #2
 8011500:	dc44      	bgt.n	801158c <tcp_close_shutdown+0x18c>
 8011502:	2b00      	cmp	r3, #0
 8011504:	d002      	beq.n	801150c <tcp_close_shutdown+0x10c>
 8011506:	2b01      	cmp	r3, #1
 8011508:	d02a      	beq.n	8011560 <tcp_close_shutdown+0x160>
 801150a:	e03f      	b.n	801158c <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	8adb      	ldrh	r3, [r3, #22]
 8011510:	2b00      	cmp	r3, #0
 8011512:	d021      	beq.n	8011558 <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8011514:	4b29      	ldr	r3, [pc, #164]	; (80115bc <tcp_close_shutdown+0x1bc>)
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	687a      	ldr	r2, [r7, #4]
 801151a:	429a      	cmp	r2, r3
 801151c:	d105      	bne.n	801152a <tcp_close_shutdown+0x12a>
 801151e:	4b27      	ldr	r3, [pc, #156]	; (80115bc <tcp_close_shutdown+0x1bc>)
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	68db      	ldr	r3, [r3, #12]
 8011524:	4a25      	ldr	r2, [pc, #148]	; (80115bc <tcp_close_shutdown+0x1bc>)
 8011526:	6013      	str	r3, [r2, #0]
 8011528:	e013      	b.n	8011552 <tcp_close_shutdown+0x152>
 801152a:	4b24      	ldr	r3, [pc, #144]	; (80115bc <tcp_close_shutdown+0x1bc>)
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	60bb      	str	r3, [r7, #8]
 8011530:	e00c      	b.n	801154c <tcp_close_shutdown+0x14c>
 8011532:	68bb      	ldr	r3, [r7, #8]
 8011534:	68db      	ldr	r3, [r3, #12]
 8011536:	687a      	ldr	r2, [r7, #4]
 8011538:	429a      	cmp	r2, r3
 801153a:	d104      	bne.n	8011546 <tcp_close_shutdown+0x146>
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	68da      	ldr	r2, [r3, #12]
 8011540:	68bb      	ldr	r3, [r7, #8]
 8011542:	60da      	str	r2, [r3, #12]
 8011544:	e005      	b.n	8011552 <tcp_close_shutdown+0x152>
 8011546:	68bb      	ldr	r3, [r7, #8]
 8011548:	68db      	ldr	r3, [r3, #12]
 801154a:	60bb      	str	r3, [r7, #8]
 801154c:	68bb      	ldr	r3, [r7, #8]
 801154e:	2b00      	cmp	r3, #0
 8011550:	d1ef      	bne.n	8011532 <tcp_close_shutdown+0x132>
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	2200      	movs	r2, #0
 8011556:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8011558:	6878      	ldr	r0, [r7, #4]
 801155a:	f7ff fe9f 	bl	801129c <tcp_free>
      break;
 801155e:	e01a      	b.n	8011596 <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 8011560:	6878      	ldr	r0, [r7, #4]
 8011562:	f7ff ff13 	bl	801138c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8011566:	6879      	ldr	r1, [r7, #4]
 8011568:	4815      	ldr	r0, [pc, #84]	; (80115c0 <tcp_close_shutdown+0x1c0>)
 801156a:	f001 f8ab 	bl	80126c4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 801156e:	6878      	ldr	r0, [r7, #4]
 8011570:	f7ff feb0 	bl	80112d4 <tcp_free_listen>
      break;
 8011574:	e00f      	b.n	8011596 <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8011576:	6879      	ldr	r1, [r7, #4]
 8011578:	480d      	ldr	r0, [pc, #52]	; (80115b0 <tcp_close_shutdown+0x1b0>)
 801157a:	f001 f8a3 	bl	80126c4 <tcp_pcb_remove>
 801157e:	4b0d      	ldr	r3, [pc, #52]	; (80115b4 <tcp_close_shutdown+0x1b4>)
 8011580:	2201      	movs	r2, #1
 8011582:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8011584:	6878      	ldr	r0, [r7, #4]
 8011586:	f7ff fe89 	bl	801129c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 801158a:	e004      	b.n	8011596 <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 801158c:	6878      	ldr	r0, [r7, #4]
 801158e:	f000 f819 	bl	80115c4 <tcp_close_shutdown_fin>
 8011592:	4603      	mov	r3, r0
 8011594:	e000      	b.n	8011598 <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 8011596:	2300      	movs	r3, #0
}
 8011598:	4618      	mov	r0, r3
 801159a:	3710      	adds	r7, #16
 801159c:	46bd      	mov	sp, r7
 801159e:	bdb0      	pop	{r4, r5, r7, pc}
 80115a0:	0801cf34 	.word	0x0801cf34
 80115a4:	0801d008 	.word	0x0801d008
 80115a8:	0801cf78 	.word	0x0801cf78
 80115ac:	0801d028 	.word	0x0801d028
 80115b0:	20007050 	.word	0x20007050
 80115b4:	20007058 	.word	0x20007058
 80115b8:	20007090 	.word	0x20007090
 80115bc:	20007048 	.word	0x20007048
 80115c0:	2000704c 	.word	0x2000704c

080115c4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80115c4:	b580      	push	{r7, lr}
 80115c6:	b084      	sub	sp, #16
 80115c8:	af00      	add	r7, sp, #0
 80115ca:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d106      	bne.n	80115e0 <tcp_close_shutdown_fin+0x1c>
 80115d2:	4b2e      	ldr	r3, [pc, #184]	; (801168c <tcp_close_shutdown_fin+0xc8>)
 80115d4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80115d8:	492d      	ldr	r1, [pc, #180]	; (8011690 <tcp_close_shutdown_fin+0xcc>)
 80115da:	482e      	ldr	r0, [pc, #184]	; (8011694 <tcp_close_shutdown_fin+0xd0>)
 80115dc:	f008 fad8 	bl	8019b90 <iprintf>

  switch (pcb->state) {
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	7d1b      	ldrb	r3, [r3, #20]
 80115e4:	2b07      	cmp	r3, #7
 80115e6:	d020      	beq.n	801162a <tcp_close_shutdown_fin+0x66>
 80115e8:	2b07      	cmp	r3, #7
 80115ea:	dc2b      	bgt.n	8011644 <tcp_close_shutdown_fin+0x80>
 80115ec:	2b03      	cmp	r3, #3
 80115ee:	d002      	beq.n	80115f6 <tcp_close_shutdown_fin+0x32>
 80115f0:	2b04      	cmp	r3, #4
 80115f2:	d00d      	beq.n	8011610 <tcp_close_shutdown_fin+0x4c>
 80115f4:	e026      	b.n	8011644 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80115f6:	6878      	ldr	r0, [r7, #4]
 80115f8:	f003 feea 	bl	80153d0 <tcp_send_fin>
 80115fc:	4603      	mov	r3, r0
 80115fe:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011600:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011604:	2b00      	cmp	r3, #0
 8011606:	d11f      	bne.n	8011648 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	2205      	movs	r2, #5
 801160c:	751a      	strb	r2, [r3, #20]
      }
      break;
 801160e:	e01b      	b.n	8011648 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8011610:	6878      	ldr	r0, [r7, #4]
 8011612:	f003 fedd 	bl	80153d0 <tcp_send_fin>
 8011616:	4603      	mov	r3, r0
 8011618:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801161a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801161e:	2b00      	cmp	r3, #0
 8011620:	d114      	bne.n	801164c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	2205      	movs	r2, #5
 8011626:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011628:	e010      	b.n	801164c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 801162a:	6878      	ldr	r0, [r7, #4]
 801162c:	f003 fed0 	bl	80153d0 <tcp_send_fin>
 8011630:	4603      	mov	r3, r0
 8011632:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011634:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011638:	2b00      	cmp	r3, #0
 801163a:	d109      	bne.n	8011650 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	2209      	movs	r2, #9
 8011640:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011642:	e005      	b.n	8011650 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8011644:	2300      	movs	r3, #0
 8011646:	e01c      	b.n	8011682 <tcp_close_shutdown_fin+0xbe>
      break;
 8011648:	bf00      	nop
 801164a:	e002      	b.n	8011652 <tcp_close_shutdown_fin+0x8e>
      break;
 801164c:	bf00      	nop
 801164e:	e000      	b.n	8011652 <tcp_close_shutdown_fin+0x8e>
      break;
 8011650:	bf00      	nop
  }

  if (err == ERR_OK) {
 8011652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011656:	2b00      	cmp	r3, #0
 8011658:	d103      	bne.n	8011662 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 801165a:	6878      	ldr	r0, [r7, #4]
 801165c:	f003 fff6 	bl	801564c <tcp_output>
 8011660:	e00d      	b.n	801167e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8011662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011666:	f1b3 3fff 	cmp.w	r3, #4294967295
 801166a:	d108      	bne.n	801167e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	8b5b      	ldrh	r3, [r3, #26]
 8011670:	f043 0308 	orr.w	r3, r3, #8
 8011674:	b29a      	uxth	r2, r3
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 801167a:	2300      	movs	r3, #0
 801167c:	e001      	b.n	8011682 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 801167e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011682:	4618      	mov	r0, r3
 8011684:	3710      	adds	r7, #16
 8011686:	46bd      	mov	sp, r7
 8011688:	bd80      	pop	{r7, pc}
 801168a:	bf00      	nop
 801168c:	0801cf34 	.word	0x0801cf34
 8011690:	0801cfe4 	.word	0x0801cfe4
 8011694:	0801cf78 	.word	0x0801cf78

08011698 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8011698:	b580      	push	{r7, lr}
 801169a:	b082      	sub	sp, #8
 801169c:	af00      	add	r7, sp, #0
 801169e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d109      	bne.n	80116ba <tcp_close+0x22>
 80116a6:	4b0f      	ldr	r3, [pc, #60]	; (80116e4 <tcp_close+0x4c>)
 80116a8:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80116ac:	490e      	ldr	r1, [pc, #56]	; (80116e8 <tcp_close+0x50>)
 80116ae:	480f      	ldr	r0, [pc, #60]	; (80116ec <tcp_close+0x54>)
 80116b0:	f008 fa6e 	bl	8019b90 <iprintf>
 80116b4:	f06f 030f 	mvn.w	r3, #15
 80116b8:	e00f      	b.n	80116da <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	7d1b      	ldrb	r3, [r3, #20]
 80116be:	2b01      	cmp	r3, #1
 80116c0:	d006      	beq.n	80116d0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	8b5b      	ldrh	r3, [r3, #26]
 80116c6:	f043 0310 	orr.w	r3, r3, #16
 80116ca:	b29a      	uxth	r2, r3
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80116d0:	2101      	movs	r1, #1
 80116d2:	6878      	ldr	r0, [r7, #4]
 80116d4:	f7ff fe94 	bl	8011400 <tcp_close_shutdown>
 80116d8:	4603      	mov	r3, r0
}
 80116da:	4618      	mov	r0, r3
 80116dc:	3708      	adds	r7, #8
 80116de:	46bd      	mov	sp, r7
 80116e0:	bd80      	pop	{r7, pc}
 80116e2:	bf00      	nop
 80116e4:	0801cf34 	.word	0x0801cf34
 80116e8:	0801d044 	.word	0x0801d044
 80116ec:	0801cf78 	.word	0x0801cf78

080116f0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80116f0:	b580      	push	{r7, lr}
 80116f2:	b08e      	sub	sp, #56	; 0x38
 80116f4:	af04      	add	r7, sp, #16
 80116f6:	6078      	str	r0, [r7, #4]
 80116f8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d107      	bne.n	8011710 <tcp_abandon+0x20>
 8011700:	4b52      	ldr	r3, [pc, #328]	; (801184c <tcp_abandon+0x15c>)
 8011702:	f240 223d 	movw	r2, #573	; 0x23d
 8011706:	4952      	ldr	r1, [pc, #328]	; (8011850 <tcp_abandon+0x160>)
 8011708:	4852      	ldr	r0, [pc, #328]	; (8011854 <tcp_abandon+0x164>)
 801170a:	f008 fa41 	bl	8019b90 <iprintf>
 801170e:	e099      	b.n	8011844 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	7d1b      	ldrb	r3, [r3, #20]
 8011714:	2b01      	cmp	r3, #1
 8011716:	d106      	bne.n	8011726 <tcp_abandon+0x36>
 8011718:	4b4c      	ldr	r3, [pc, #304]	; (801184c <tcp_abandon+0x15c>)
 801171a:	f44f 7210 	mov.w	r2, #576	; 0x240
 801171e:	494e      	ldr	r1, [pc, #312]	; (8011858 <tcp_abandon+0x168>)
 8011720:	484c      	ldr	r0, [pc, #304]	; (8011854 <tcp_abandon+0x164>)
 8011722:	f008 fa35 	bl	8019b90 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	7d1b      	ldrb	r3, [r3, #20]
 801172a:	2b0a      	cmp	r3, #10
 801172c:	d107      	bne.n	801173e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801172e:	6879      	ldr	r1, [r7, #4]
 8011730:	484a      	ldr	r0, [pc, #296]	; (801185c <tcp_abandon+0x16c>)
 8011732:	f000 ffc7 	bl	80126c4 <tcp_pcb_remove>
    tcp_free(pcb);
 8011736:	6878      	ldr	r0, [r7, #4]
 8011738:	f7ff fdb0 	bl	801129c <tcp_free>
 801173c:	e082      	b.n	8011844 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 801173e:	2300      	movs	r3, #0
 8011740:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8011742:	2300      	movs	r3, #0
 8011744:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801174a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011750:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011758:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	691b      	ldr	r3, [r3, #16]
 801175e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	7d1b      	ldrb	r3, [r3, #20]
 8011764:	2b00      	cmp	r3, #0
 8011766:	d126      	bne.n	80117b6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	8adb      	ldrh	r3, [r3, #22]
 801176c:	2b00      	cmp	r3, #0
 801176e:	d02e      	beq.n	80117ce <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8011770:	4b3b      	ldr	r3, [pc, #236]	; (8011860 <tcp_abandon+0x170>)
 8011772:	681b      	ldr	r3, [r3, #0]
 8011774:	687a      	ldr	r2, [r7, #4]
 8011776:	429a      	cmp	r2, r3
 8011778:	d105      	bne.n	8011786 <tcp_abandon+0x96>
 801177a:	4b39      	ldr	r3, [pc, #228]	; (8011860 <tcp_abandon+0x170>)
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	68db      	ldr	r3, [r3, #12]
 8011780:	4a37      	ldr	r2, [pc, #220]	; (8011860 <tcp_abandon+0x170>)
 8011782:	6013      	str	r3, [r2, #0]
 8011784:	e013      	b.n	80117ae <tcp_abandon+0xbe>
 8011786:	4b36      	ldr	r3, [pc, #216]	; (8011860 <tcp_abandon+0x170>)
 8011788:	681b      	ldr	r3, [r3, #0]
 801178a:	61fb      	str	r3, [r7, #28]
 801178c:	e00c      	b.n	80117a8 <tcp_abandon+0xb8>
 801178e:	69fb      	ldr	r3, [r7, #28]
 8011790:	68db      	ldr	r3, [r3, #12]
 8011792:	687a      	ldr	r2, [r7, #4]
 8011794:	429a      	cmp	r2, r3
 8011796:	d104      	bne.n	80117a2 <tcp_abandon+0xb2>
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	68da      	ldr	r2, [r3, #12]
 801179c:	69fb      	ldr	r3, [r7, #28]
 801179e:	60da      	str	r2, [r3, #12]
 80117a0:	e005      	b.n	80117ae <tcp_abandon+0xbe>
 80117a2:	69fb      	ldr	r3, [r7, #28]
 80117a4:	68db      	ldr	r3, [r3, #12]
 80117a6:	61fb      	str	r3, [r7, #28]
 80117a8:	69fb      	ldr	r3, [r7, #28]
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d1ef      	bne.n	801178e <tcp_abandon+0x9e>
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	2200      	movs	r2, #0
 80117b2:	60da      	str	r2, [r3, #12]
 80117b4:	e00b      	b.n	80117ce <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80117b6:	683b      	ldr	r3, [r7, #0]
 80117b8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	8adb      	ldrh	r3, [r3, #22]
 80117be:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80117c0:	6879      	ldr	r1, [r7, #4]
 80117c2:	4828      	ldr	r0, [pc, #160]	; (8011864 <tcp_abandon+0x174>)
 80117c4:	f000 ff7e 	bl	80126c4 <tcp_pcb_remove>
 80117c8:	4b27      	ldr	r3, [pc, #156]	; (8011868 <tcp_abandon+0x178>)
 80117ca:	2201      	movs	r2, #1
 80117cc:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d004      	beq.n	80117e0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80117da:	4618      	mov	r0, r3
 80117dc:	f000 fd20 	bl	8012220 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d004      	beq.n	80117f2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80117ec:	4618      	mov	r0, r3
 80117ee:	f000 fd17 	bl	8012220 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d004      	beq.n	8011804 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80117fe:	4618      	mov	r0, r3
 8011800:	f000 fd0e 	bl	8012220 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8011804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011806:	2b00      	cmp	r3, #0
 8011808:	d00e      	beq.n	8011828 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801180a:	6879      	ldr	r1, [r7, #4]
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	3304      	adds	r3, #4
 8011810:	687a      	ldr	r2, [r7, #4]
 8011812:	8b12      	ldrh	r2, [r2, #24]
 8011814:	9202      	str	r2, [sp, #8]
 8011816:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011818:	9201      	str	r2, [sp, #4]
 801181a:	9300      	str	r3, [sp, #0]
 801181c:	460b      	mov	r3, r1
 801181e:	697a      	ldr	r2, [r7, #20]
 8011820:	69b9      	ldr	r1, [r7, #24]
 8011822:	6878      	ldr	r0, [r7, #4]
 8011824:	f004 fcc6 	bl	80161b4 <tcp_rst>
    }
    last_state = pcb->state;
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	7d1b      	ldrb	r3, [r3, #20]
 801182c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801182e:	6878      	ldr	r0, [r7, #4]
 8011830:	f7ff fd34 	bl	801129c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8011834:	693b      	ldr	r3, [r7, #16]
 8011836:	2b00      	cmp	r3, #0
 8011838:	d004      	beq.n	8011844 <tcp_abandon+0x154>
 801183a:	693b      	ldr	r3, [r7, #16]
 801183c:	f06f 010c 	mvn.w	r1, #12
 8011840:	68f8      	ldr	r0, [r7, #12]
 8011842:	4798      	blx	r3
  }
}
 8011844:	3728      	adds	r7, #40	; 0x28
 8011846:	46bd      	mov	sp, r7
 8011848:	bd80      	pop	{r7, pc}
 801184a:	bf00      	nop
 801184c:	0801cf34 	.word	0x0801cf34
 8011850:	0801d078 	.word	0x0801d078
 8011854:	0801cf78 	.word	0x0801cf78
 8011858:	0801d094 	.word	0x0801d094
 801185c:	20007054 	.word	0x20007054
 8011860:	20007048 	.word	0x20007048
 8011864:	20007050 	.word	0x20007050
 8011868:	20007058 	.word	0x20007058

0801186c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 801186c:	b580      	push	{r7, lr}
 801186e:	b082      	sub	sp, #8
 8011870:	af00      	add	r7, sp, #0
 8011872:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8011874:	2101      	movs	r1, #1
 8011876:	6878      	ldr	r0, [r7, #4]
 8011878:	f7ff ff3a 	bl	80116f0 <tcp_abandon>
}
 801187c:	bf00      	nop
 801187e:	3708      	adds	r7, #8
 8011880:	46bd      	mov	sp, r7
 8011882:	bd80      	pop	{r7, pc}

08011884 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8011884:	b580      	push	{r7, lr}
 8011886:	b084      	sub	sp, #16
 8011888:	af00      	add	r7, sp, #0
 801188a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	2b00      	cmp	r3, #0
 8011890:	d106      	bne.n	80118a0 <tcp_update_rcv_ann_wnd+0x1c>
 8011892:	4b25      	ldr	r3, [pc, #148]	; (8011928 <tcp_update_rcv_ann_wnd+0xa4>)
 8011894:	f240 32a6 	movw	r2, #934	; 0x3a6
 8011898:	4924      	ldr	r1, [pc, #144]	; (801192c <tcp_update_rcv_ann_wnd+0xa8>)
 801189a:	4825      	ldr	r0, [pc, #148]	; (8011930 <tcp_update_rcv_ann_wnd+0xac>)
 801189c:	f008 f978 	bl	8019b90 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118a4:	687a      	ldr	r2, [r7, #4]
 80118a6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80118a8:	4413      	add	r3, r2
 80118aa:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118b0:	687a      	ldr	r2, [r7, #4]
 80118b2:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80118b4:	f640 3168 	movw	r1, #2920	; 0xb68
 80118b8:	428a      	cmp	r2, r1
 80118ba:	bf28      	it	cs
 80118bc:	460a      	movcs	r2, r1
 80118be:	b292      	uxth	r2, r2
 80118c0:	4413      	add	r3, r2
 80118c2:	68fa      	ldr	r2, [r7, #12]
 80118c4:	1ad3      	subs	r3, r2, r3
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	db08      	blt.n	80118dc <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118d6:	68fa      	ldr	r2, [r7, #12]
 80118d8:	1ad3      	subs	r3, r2, r3
 80118da:	e020      	b.n	801191e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118e4:	1ad3      	subs	r3, r2, r3
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	dd03      	ble.n	80118f2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	2200      	movs	r2, #0
 80118ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80118f0:	e014      	b.n	801191c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118fa:	1ad3      	subs	r3, r2, r3
 80118fc:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80118fe:	68bb      	ldr	r3, [r7, #8]
 8011900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011904:	d306      	bcc.n	8011914 <tcp_update_rcv_ann_wnd+0x90>
 8011906:	4b08      	ldr	r3, [pc, #32]	; (8011928 <tcp_update_rcv_ann_wnd+0xa4>)
 8011908:	f240 32b6 	movw	r2, #950	; 0x3b6
 801190c:	4909      	ldr	r1, [pc, #36]	; (8011934 <tcp_update_rcv_ann_wnd+0xb0>)
 801190e:	4808      	ldr	r0, [pc, #32]	; (8011930 <tcp_update_rcv_ann_wnd+0xac>)
 8011910:	f008 f93e 	bl	8019b90 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8011914:	68bb      	ldr	r3, [r7, #8]
 8011916:	b29a      	uxth	r2, r3
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 801191c:	2300      	movs	r3, #0
  }
}
 801191e:	4618      	mov	r0, r3
 8011920:	3710      	adds	r7, #16
 8011922:	46bd      	mov	sp, r7
 8011924:	bd80      	pop	{r7, pc}
 8011926:	bf00      	nop
 8011928:	0801cf34 	.word	0x0801cf34
 801192c:	0801d190 	.word	0x0801d190
 8011930:	0801cf78 	.word	0x0801cf78
 8011934:	0801d1b4 	.word	0x0801d1b4

08011938 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8011938:	b580      	push	{r7, lr}
 801193a:	b084      	sub	sp, #16
 801193c:	af00      	add	r7, sp, #0
 801193e:	6078      	str	r0, [r7, #4]
 8011940:	460b      	mov	r3, r1
 8011942:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	2b00      	cmp	r3, #0
 8011948:	d107      	bne.n	801195a <tcp_recved+0x22>
 801194a:	4b20      	ldr	r3, [pc, #128]	; (80119cc <tcp_recved+0x94>)
 801194c:	f240 32cf 	movw	r2, #975	; 0x3cf
 8011950:	491f      	ldr	r1, [pc, #124]	; (80119d0 <tcp_recved+0x98>)
 8011952:	4820      	ldr	r0, [pc, #128]	; (80119d4 <tcp_recved+0x9c>)
 8011954:	f008 f91c 	bl	8019b90 <iprintf>
 8011958:	e034      	b.n	80119c4 <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	7d1b      	ldrb	r3, [r3, #20]
 801195e:	2b01      	cmp	r3, #1
 8011960:	d106      	bne.n	8011970 <tcp_recved+0x38>
 8011962:	4b1a      	ldr	r3, [pc, #104]	; (80119cc <tcp_recved+0x94>)
 8011964:	f240 32d2 	movw	r2, #978	; 0x3d2
 8011968:	491b      	ldr	r1, [pc, #108]	; (80119d8 <tcp_recved+0xa0>)
 801196a:	481a      	ldr	r0, [pc, #104]	; (80119d4 <tcp_recved+0x9c>)
 801196c:	f008 f910 	bl	8019b90 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011974:	887b      	ldrh	r3, [r7, #2]
 8011976:	4413      	add	r3, r2
 8011978:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801197a:	89fb      	ldrh	r3, [r7, #14]
 801197c:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8011980:	4293      	cmp	r3, r2
 8011982:	d804      	bhi.n	801198e <tcp_recved+0x56>
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011988:	89fa      	ldrh	r2, [r7, #14]
 801198a:	429a      	cmp	r2, r3
 801198c:	d204      	bcs.n	8011998 <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8011994:	851a      	strh	r2, [r3, #40]	; 0x28
 8011996:	e002      	b.n	801199e <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	89fa      	ldrh	r2, [r7, #14]
 801199c:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 801199e:	6878      	ldr	r0, [r7, #4]
 80119a0:	f7ff ff70 	bl	8011884 <tcp_update_rcv_ann_wnd>
 80119a4:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80119a6:	68bb      	ldr	r3, [r7, #8]
 80119a8:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80119ac:	4293      	cmp	r3, r2
 80119ae:	d909      	bls.n	80119c4 <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	8b5b      	ldrh	r3, [r3, #26]
 80119b4:	f043 0302 	orr.w	r3, r3, #2
 80119b8:	b29a      	uxth	r2, r3
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80119be:	6878      	ldr	r0, [r7, #4]
 80119c0:	f003 fe44 	bl	801564c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80119c4:	3710      	adds	r7, #16
 80119c6:	46bd      	mov	sp, r7
 80119c8:	bd80      	pop	{r7, pc}
 80119ca:	bf00      	nop
 80119cc:	0801cf34 	.word	0x0801cf34
 80119d0:	0801d1d0 	.word	0x0801d1d0
 80119d4:	0801cf78 	.word	0x0801cf78
 80119d8:	0801d1e8 	.word	0x0801d1e8

080119dc <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80119dc:	b5b0      	push	{r4, r5, r7, lr}
 80119de:	b090      	sub	sp, #64	; 0x40
 80119e0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80119e2:	2300      	movs	r3, #0
 80119e4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80119e8:	4b94      	ldr	r3, [pc, #592]	; (8011c3c <tcp_slowtmr+0x260>)
 80119ea:	681b      	ldr	r3, [r3, #0]
 80119ec:	3301      	adds	r3, #1
 80119ee:	4a93      	ldr	r2, [pc, #588]	; (8011c3c <tcp_slowtmr+0x260>)
 80119f0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80119f2:	4b93      	ldr	r3, [pc, #588]	; (8011c40 <tcp_slowtmr+0x264>)
 80119f4:	781b      	ldrb	r3, [r3, #0]
 80119f6:	3301      	adds	r3, #1
 80119f8:	b2da      	uxtb	r2, r3
 80119fa:	4b91      	ldr	r3, [pc, #580]	; (8011c40 <tcp_slowtmr+0x264>)
 80119fc:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80119fe:	2300      	movs	r3, #0
 8011a00:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8011a02:	4b90      	ldr	r3, [pc, #576]	; (8011c44 <tcp_slowtmr+0x268>)
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8011a08:	e29d      	b.n	8011f46 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8011a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a0c:	7d1b      	ldrb	r3, [r3, #20]
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d106      	bne.n	8011a20 <tcp_slowtmr+0x44>
 8011a12:	4b8d      	ldr	r3, [pc, #564]	; (8011c48 <tcp_slowtmr+0x26c>)
 8011a14:	f240 42be 	movw	r2, #1214	; 0x4be
 8011a18:	498c      	ldr	r1, [pc, #560]	; (8011c4c <tcp_slowtmr+0x270>)
 8011a1a:	488d      	ldr	r0, [pc, #564]	; (8011c50 <tcp_slowtmr+0x274>)
 8011a1c:	f008 f8b8 	bl	8019b90 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8011a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a22:	7d1b      	ldrb	r3, [r3, #20]
 8011a24:	2b01      	cmp	r3, #1
 8011a26:	d106      	bne.n	8011a36 <tcp_slowtmr+0x5a>
 8011a28:	4b87      	ldr	r3, [pc, #540]	; (8011c48 <tcp_slowtmr+0x26c>)
 8011a2a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8011a2e:	4989      	ldr	r1, [pc, #548]	; (8011c54 <tcp_slowtmr+0x278>)
 8011a30:	4887      	ldr	r0, [pc, #540]	; (8011c50 <tcp_slowtmr+0x274>)
 8011a32:	f008 f8ad 	bl	8019b90 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8011a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a38:	7d1b      	ldrb	r3, [r3, #20]
 8011a3a:	2b0a      	cmp	r3, #10
 8011a3c:	d106      	bne.n	8011a4c <tcp_slowtmr+0x70>
 8011a3e:	4b82      	ldr	r3, [pc, #520]	; (8011c48 <tcp_slowtmr+0x26c>)
 8011a40:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8011a44:	4984      	ldr	r1, [pc, #528]	; (8011c58 <tcp_slowtmr+0x27c>)
 8011a46:	4882      	ldr	r0, [pc, #520]	; (8011c50 <tcp_slowtmr+0x274>)
 8011a48:	f008 f8a2 	bl	8019b90 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8011a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a4e:	7f9a      	ldrb	r2, [r3, #30]
 8011a50:	4b7b      	ldr	r3, [pc, #492]	; (8011c40 <tcp_slowtmr+0x264>)
 8011a52:	781b      	ldrb	r3, [r3, #0]
 8011a54:	429a      	cmp	r2, r3
 8011a56:	d105      	bne.n	8011a64 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8011a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a5a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8011a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a5e:	68db      	ldr	r3, [r3, #12]
 8011a60:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8011a62:	e270      	b.n	8011f46 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8011a64:	4b76      	ldr	r3, [pc, #472]	; (8011c40 <tcp_slowtmr+0x264>)
 8011a66:	781a      	ldrb	r2, [r3, #0]
 8011a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a6a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8011a6c:	2300      	movs	r3, #0
 8011a6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8011a72:	2300      	movs	r3, #0
 8011a74:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8011a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a7a:	7d1b      	ldrb	r3, [r3, #20]
 8011a7c:	2b02      	cmp	r3, #2
 8011a7e:	d10a      	bne.n	8011a96 <tcp_slowtmr+0xba>
 8011a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a82:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011a86:	2b05      	cmp	r3, #5
 8011a88:	d905      	bls.n	8011a96 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8011a8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011a8e:	3301      	adds	r3, #1
 8011a90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011a94:	e11e      	b.n	8011cd4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8011a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a98:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011a9c:	2b0b      	cmp	r3, #11
 8011a9e:	d905      	bls.n	8011aac <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8011aa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011aa4:	3301      	adds	r3, #1
 8011aa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011aaa:	e113      	b.n	8011cd4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8011aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011aae:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	d075      	beq.n	8011ba2 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8011ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d006      	beq.n	8011acc <tcp_slowtmr+0xf0>
 8011abe:	4b62      	ldr	r3, [pc, #392]	; (8011c48 <tcp_slowtmr+0x26c>)
 8011ac0:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8011ac4:	4965      	ldr	r1, [pc, #404]	; (8011c5c <tcp_slowtmr+0x280>)
 8011ac6:	4862      	ldr	r0, [pc, #392]	; (8011c50 <tcp_slowtmr+0x274>)
 8011ac8:	f008 f862 	bl	8019b90 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8011acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ace:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d106      	bne.n	8011ae2 <tcp_slowtmr+0x106>
 8011ad4:	4b5c      	ldr	r3, [pc, #368]	; (8011c48 <tcp_slowtmr+0x26c>)
 8011ad6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8011ada:	4961      	ldr	r1, [pc, #388]	; (8011c60 <tcp_slowtmr+0x284>)
 8011adc:	485c      	ldr	r0, [pc, #368]	; (8011c50 <tcp_slowtmr+0x274>)
 8011ade:	f008 f857 	bl	8019b90 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8011ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ae4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011ae8:	2b0b      	cmp	r3, #11
 8011aea:	d905      	bls.n	8011af8 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8011aec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011af0:	3301      	adds	r3, #1
 8011af2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011af6:	e0ed      	b.n	8011cd4 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8011af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011afa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011afe:	3b01      	subs	r3, #1
 8011b00:	4a58      	ldr	r2, [pc, #352]	; (8011c64 <tcp_slowtmr+0x288>)
 8011b02:	5cd3      	ldrb	r3, [r2, r3]
 8011b04:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8011b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b08:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011b0c:	7c7a      	ldrb	r2, [r7, #17]
 8011b0e:	429a      	cmp	r2, r3
 8011b10:	d907      	bls.n	8011b22 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8011b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b14:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011b18:	3301      	adds	r3, #1
 8011b1a:	b2da      	uxtb	r2, r3
 8011b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b1e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8011b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b24:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011b28:	7c7a      	ldrb	r2, [r7, #17]
 8011b2a:	429a      	cmp	r2, r3
 8011b2c:	f200 80d2 	bhi.w	8011cd4 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8011b30:	2301      	movs	r3, #1
 8011b32:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8011b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b36:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d108      	bne.n	8011b50 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8011b3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011b40:	f004 fc2c 	bl	801639c <tcp_zero_window_probe>
 8011b44:	4603      	mov	r3, r0
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d014      	beq.n	8011b74 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8011b4a:	2300      	movs	r3, #0
 8011b4c:	623b      	str	r3, [r7, #32]
 8011b4e:	e011      	b.n	8011b74 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8011b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011b56:	4619      	mov	r1, r3
 8011b58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011b5a:	f003 faf1 	bl	8015140 <tcp_split_unsent_seg>
 8011b5e:	4603      	mov	r3, r0
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d107      	bne.n	8011b74 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8011b64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011b66:	f003 fd71 	bl	801564c <tcp_output>
 8011b6a:	4603      	mov	r3, r0
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d101      	bne.n	8011b74 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8011b70:	2300      	movs	r3, #0
 8011b72:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8011b74:	6a3b      	ldr	r3, [r7, #32]
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	f000 80ac 	beq.w	8011cd4 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8011b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b7e:	2200      	movs	r2, #0
 8011b80:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8011b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b86:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011b8a:	2b06      	cmp	r3, #6
 8011b8c:	f200 80a2 	bhi.w	8011cd4 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8011b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b92:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011b96:	3301      	adds	r3, #1
 8011b98:	b2da      	uxtb	r2, r3
 8011b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b9c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8011ba0:	e098      	b.n	8011cd4 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8011ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ba4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	db0f      	blt.n	8011bcc <tcp_slowtmr+0x1f0>
 8011bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bae:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011bb2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8011bb6:	4293      	cmp	r3, r2
 8011bb8:	d008      	beq.n	8011bcc <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8011bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bbc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011bc0:	b29b      	uxth	r3, r3
 8011bc2:	3301      	adds	r3, #1
 8011bc4:	b29b      	uxth	r3, r3
 8011bc6:	b21a      	sxth	r2, r3
 8011bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bca:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8011bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bce:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8011bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bd4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8011bd8:	429a      	cmp	r2, r3
 8011bda:	db7b      	blt.n	8011cd4 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8011bdc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011bde:	f004 f829 	bl	8015c34 <tcp_rexmit_rto_prepare>
 8011be2:	4603      	mov	r3, r0
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d007      	beq.n	8011bf8 <tcp_slowtmr+0x21c>
 8011be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d171      	bne.n	8011cd4 <tcp_slowtmr+0x2f8>
 8011bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d06d      	beq.n	8011cd4 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8011bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bfa:	7d1b      	ldrb	r3, [r3, #20]
 8011bfc:	2b02      	cmp	r3, #2
 8011bfe:	d03a      	beq.n	8011c76 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8011c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011c06:	2b0c      	cmp	r3, #12
 8011c08:	bf28      	it	cs
 8011c0a:	230c      	movcs	r3, #12
 8011c0c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8011c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c10:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011c14:	10db      	asrs	r3, r3, #3
 8011c16:	b21b      	sxth	r3, r3
 8011c18:	461a      	mov	r2, r3
 8011c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c1c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011c20:	4413      	add	r3, r2
 8011c22:	7efa      	ldrb	r2, [r7, #27]
 8011c24:	4910      	ldr	r1, [pc, #64]	; (8011c68 <tcp_slowtmr+0x28c>)
 8011c26:	5c8a      	ldrb	r2, [r1, r2]
 8011c28:	4093      	lsls	r3, r2
 8011c2a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8011c2c:	697b      	ldr	r3, [r7, #20]
 8011c2e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8011c32:	4293      	cmp	r3, r2
 8011c34:	dc1a      	bgt.n	8011c6c <tcp_slowtmr+0x290>
 8011c36:	697b      	ldr	r3, [r7, #20]
 8011c38:	b21a      	sxth	r2, r3
 8011c3a:	e019      	b.n	8011c70 <tcp_slowtmr+0x294>
 8011c3c:	20007044 	.word	0x20007044
 8011c40:	2000705a 	.word	0x2000705a
 8011c44:	20007050 	.word	0x20007050
 8011c48:	0801cf34 	.word	0x0801cf34
 8011c4c:	0801d278 	.word	0x0801d278
 8011c50:	0801cf78 	.word	0x0801cf78
 8011c54:	0801d2a4 	.word	0x0801d2a4
 8011c58:	0801d2d0 	.word	0x0801d2d0
 8011c5c:	0801d300 	.word	0x0801d300
 8011c60:	0801d334 	.word	0x0801d334
 8011c64:	0801ef4c 	.word	0x0801ef4c
 8011c68:	0801ef3c 	.word	0x0801ef3c
 8011c6c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8011c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c72:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8011c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c78:	2200      	movs	r2, #0
 8011c7a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8011c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c7e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c84:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011c88:	4293      	cmp	r3, r2
 8011c8a:	bf28      	it	cs
 8011c8c:	4613      	movcs	r3, r2
 8011c8e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8011c90:	8a7b      	ldrh	r3, [r7, #18]
 8011c92:	085b      	lsrs	r3, r3, #1
 8011c94:	b29a      	uxth	r2, r3
 8011c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c98:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8011c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c9e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ca4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011ca6:	005b      	lsls	r3, r3, #1
 8011ca8:	b29b      	uxth	r3, r3
 8011caa:	429a      	cmp	r2, r3
 8011cac:	d206      	bcs.n	8011cbc <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8011cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cb0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011cb2:	005b      	lsls	r3, r3, #1
 8011cb4:	b29a      	uxth	r2, r3
 8011cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cb8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8011cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cbe:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8011cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cc2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8011cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cc8:	2200      	movs	r2, #0
 8011cca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8011cce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011cd0:	f004 f820 	bl	8015d14 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8011cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cd6:	7d1b      	ldrb	r3, [r3, #20]
 8011cd8:	2b06      	cmp	r3, #6
 8011cda:	d111      	bne.n	8011d00 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8011cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cde:	8b5b      	ldrh	r3, [r3, #26]
 8011ce0:	f003 0310 	and.w	r3, r3, #16
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d00b      	beq.n	8011d00 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011ce8:	4b9c      	ldr	r3, [pc, #624]	; (8011f5c <tcp_slowtmr+0x580>)
 8011cea:	681a      	ldr	r2, [r3, #0]
 8011cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cee:	6a1b      	ldr	r3, [r3, #32]
 8011cf0:	1ad3      	subs	r3, r2, r3
 8011cf2:	2b28      	cmp	r3, #40	; 0x28
 8011cf4:	d904      	bls.n	8011d00 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8011cf6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011cfa:	3301      	adds	r3, #1
 8011cfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d02:	7a5b      	ldrb	r3, [r3, #9]
 8011d04:	f003 0308 	and.w	r3, r3, #8
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d04a      	beq.n	8011da2 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8011d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d0e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011d10:	2b04      	cmp	r3, #4
 8011d12:	d003      	beq.n	8011d1c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8011d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d16:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8011d18:	2b07      	cmp	r3, #7
 8011d1a:	d142      	bne.n	8011da2 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011d1c:	4b8f      	ldr	r3, [pc, #572]	; (8011f5c <tcp_slowtmr+0x580>)
 8011d1e:	681a      	ldr	r2, [r3, #0]
 8011d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d22:	6a1b      	ldr	r3, [r3, #32]
 8011d24:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8011d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d28:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8011d2c:	4b8c      	ldr	r3, [pc, #560]	; (8011f60 <tcp_slowtmr+0x584>)
 8011d2e:	440b      	add	r3, r1
 8011d30:	498c      	ldr	r1, [pc, #560]	; (8011f64 <tcp_slowtmr+0x588>)
 8011d32:	fba1 1303 	umull	r1, r3, r1, r3
 8011d36:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011d38:	429a      	cmp	r2, r3
 8011d3a:	d90a      	bls.n	8011d52 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8011d3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011d40:	3301      	adds	r3, #1
 8011d42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8011d46:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011d4a:	3301      	adds	r3, #1
 8011d4c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8011d50:	e027      	b.n	8011da2 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011d52:	4b82      	ldr	r3, [pc, #520]	; (8011f5c <tcp_slowtmr+0x580>)
 8011d54:	681a      	ldr	r2, [r3, #0]
 8011d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d58:	6a1b      	ldr	r3, [r3, #32]
 8011d5a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8011d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d5e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8011d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d64:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8011d68:	4618      	mov	r0, r3
 8011d6a:	4b7f      	ldr	r3, [pc, #508]	; (8011f68 <tcp_slowtmr+0x58c>)
 8011d6c:	fb00 f303 	mul.w	r3, r0, r3
 8011d70:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8011d72:	497c      	ldr	r1, [pc, #496]	; (8011f64 <tcp_slowtmr+0x588>)
 8011d74:	fba1 1303 	umull	r1, r3, r1, r3
 8011d78:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011d7a:	429a      	cmp	r2, r3
 8011d7c:	d911      	bls.n	8011da2 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8011d7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011d80:	f004 facc 	bl	801631c <tcp_keepalive>
 8011d84:	4603      	mov	r3, r0
 8011d86:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8011d8a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d107      	bne.n	8011da2 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8011d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d94:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8011d98:	3301      	adds	r3, #1
 8011d9a:	b2da      	uxtb	r2, r3
 8011d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d9e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8011da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011da4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d011      	beq.n	8011dce <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8011daa:	4b6c      	ldr	r3, [pc, #432]	; (8011f5c <tcp_slowtmr+0x580>)
 8011dac:	681a      	ldr	r2, [r3, #0]
 8011dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011db0:	6a1b      	ldr	r3, [r3, #32]
 8011db2:	1ad2      	subs	r2, r2, r3
 8011db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011db6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8011dba:	4619      	mov	r1, r3
 8011dbc:	460b      	mov	r3, r1
 8011dbe:	005b      	lsls	r3, r3, #1
 8011dc0:	440b      	add	r3, r1
 8011dc2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8011dc4:	429a      	cmp	r2, r3
 8011dc6:	d302      	bcc.n	8011dce <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8011dc8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011dca:	f000 fddf 	bl	801298c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8011dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dd0:	7d1b      	ldrb	r3, [r3, #20]
 8011dd2:	2b03      	cmp	r3, #3
 8011dd4:	d10b      	bne.n	8011dee <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011dd6:	4b61      	ldr	r3, [pc, #388]	; (8011f5c <tcp_slowtmr+0x580>)
 8011dd8:	681a      	ldr	r2, [r3, #0]
 8011dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ddc:	6a1b      	ldr	r3, [r3, #32]
 8011dde:	1ad3      	subs	r3, r2, r3
 8011de0:	2b28      	cmp	r3, #40	; 0x28
 8011de2:	d904      	bls.n	8011dee <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8011de4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011de8:	3301      	adds	r3, #1
 8011dea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8011dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011df0:	7d1b      	ldrb	r3, [r3, #20]
 8011df2:	2b09      	cmp	r3, #9
 8011df4:	d10b      	bne.n	8011e0e <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011df6:	4b59      	ldr	r3, [pc, #356]	; (8011f5c <tcp_slowtmr+0x580>)
 8011df8:	681a      	ldr	r2, [r3, #0]
 8011dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dfc:	6a1b      	ldr	r3, [r3, #32]
 8011dfe:	1ad3      	subs	r3, r2, r3
 8011e00:	2bf0      	cmp	r3, #240	; 0xf0
 8011e02:	d904      	bls.n	8011e0e <tcp_slowtmr+0x432>
        ++pcb_remove;
 8011e04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011e08:	3301      	adds	r3, #1
 8011e0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011e0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d060      	beq.n	8011ed8 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8011e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011e1c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8011e1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011e20:	f000 fc00 	bl	8012624 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8011e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d010      	beq.n	8011e4c <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8011e2a:	4b50      	ldr	r3, [pc, #320]	; (8011f6c <tcp_slowtmr+0x590>)
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011e30:	429a      	cmp	r2, r3
 8011e32:	d106      	bne.n	8011e42 <tcp_slowtmr+0x466>
 8011e34:	4b4e      	ldr	r3, [pc, #312]	; (8011f70 <tcp_slowtmr+0x594>)
 8011e36:	f240 526d 	movw	r2, #1389	; 0x56d
 8011e3a:	494e      	ldr	r1, [pc, #312]	; (8011f74 <tcp_slowtmr+0x598>)
 8011e3c:	484e      	ldr	r0, [pc, #312]	; (8011f78 <tcp_slowtmr+0x59c>)
 8011e3e:	f007 fea7 	bl	8019b90 <iprintf>
        prev->next = pcb->next;
 8011e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e44:	68da      	ldr	r2, [r3, #12]
 8011e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e48:	60da      	str	r2, [r3, #12]
 8011e4a:	e00f      	b.n	8011e6c <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8011e4c:	4b47      	ldr	r3, [pc, #284]	; (8011f6c <tcp_slowtmr+0x590>)
 8011e4e:	681b      	ldr	r3, [r3, #0]
 8011e50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011e52:	429a      	cmp	r2, r3
 8011e54:	d006      	beq.n	8011e64 <tcp_slowtmr+0x488>
 8011e56:	4b46      	ldr	r3, [pc, #280]	; (8011f70 <tcp_slowtmr+0x594>)
 8011e58:	f240 5271 	movw	r2, #1393	; 0x571
 8011e5c:	4947      	ldr	r1, [pc, #284]	; (8011f7c <tcp_slowtmr+0x5a0>)
 8011e5e:	4846      	ldr	r0, [pc, #280]	; (8011f78 <tcp_slowtmr+0x59c>)
 8011e60:	f007 fe96 	bl	8019b90 <iprintf>
        tcp_active_pcbs = pcb->next;
 8011e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e66:	68db      	ldr	r3, [r3, #12]
 8011e68:	4a40      	ldr	r2, [pc, #256]	; (8011f6c <tcp_slowtmr+0x590>)
 8011e6a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8011e6c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d013      	beq.n	8011e9c <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e76:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8011e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e7a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8011e7c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8011e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e80:	3304      	adds	r3, #4
 8011e82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011e84:	8ad2      	ldrh	r2, [r2, #22]
 8011e86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011e88:	8b09      	ldrh	r1, [r1, #24]
 8011e8a:	9102      	str	r1, [sp, #8]
 8011e8c:	9201      	str	r2, [sp, #4]
 8011e8e:	9300      	str	r3, [sp, #0]
 8011e90:	462b      	mov	r3, r5
 8011e92:	4622      	mov	r2, r4
 8011e94:	4601      	mov	r1, r0
 8011e96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011e98:	f004 f98c 	bl	80161b4 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8011e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e9e:	691b      	ldr	r3, [r3, #16]
 8011ea0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8011ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ea4:	7d1b      	ldrb	r3, [r3, #20]
 8011ea6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8011ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011eaa:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8011eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011eae:	68db      	ldr	r3, [r3, #12]
 8011eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8011eb2:	6838      	ldr	r0, [r7, #0]
 8011eb4:	f7ff f9f2 	bl	801129c <tcp_free>

      tcp_active_pcbs_changed = 0;
 8011eb8:	4b31      	ldr	r3, [pc, #196]	; (8011f80 <tcp_slowtmr+0x5a4>)
 8011eba:	2200      	movs	r2, #0
 8011ebc:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8011ebe:	68fb      	ldr	r3, [r7, #12]
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d004      	beq.n	8011ece <tcp_slowtmr+0x4f2>
 8011ec4:	68fb      	ldr	r3, [r7, #12]
 8011ec6:	f06f 010c 	mvn.w	r1, #12
 8011eca:	68b8      	ldr	r0, [r7, #8]
 8011ecc:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8011ece:	4b2c      	ldr	r3, [pc, #176]	; (8011f80 <tcp_slowtmr+0x5a4>)
 8011ed0:	781b      	ldrb	r3, [r3, #0]
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d037      	beq.n	8011f46 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8011ed6:	e592      	b.n	80119fe <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8011ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011eda:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8011edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ede:	68db      	ldr	r3, [r3, #12]
 8011ee0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8011ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ee4:	7f1b      	ldrb	r3, [r3, #28]
 8011ee6:	3301      	adds	r3, #1
 8011ee8:	b2da      	uxtb	r2, r3
 8011eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011eec:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8011eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ef0:	7f1a      	ldrb	r2, [r3, #28]
 8011ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ef4:	7f5b      	ldrb	r3, [r3, #29]
 8011ef6:	429a      	cmp	r2, r3
 8011ef8:	d325      	bcc.n	8011f46 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8011efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011efc:	2200      	movs	r2, #0
 8011efe:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8011f00:	4b1f      	ldr	r3, [pc, #124]	; (8011f80 <tcp_slowtmr+0x5a4>)
 8011f02:	2200      	movs	r2, #0
 8011f04:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8011f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d00b      	beq.n	8011f28 <tcp_slowtmr+0x54c>
 8011f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011f16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011f18:	6912      	ldr	r2, [r2, #16]
 8011f1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011f1c:	4610      	mov	r0, r2
 8011f1e:	4798      	blx	r3
 8011f20:	4603      	mov	r3, r0
 8011f22:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8011f26:	e002      	b.n	8011f2e <tcp_slowtmr+0x552>
 8011f28:	2300      	movs	r3, #0
 8011f2a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8011f2e:	4b14      	ldr	r3, [pc, #80]	; (8011f80 <tcp_slowtmr+0x5a4>)
 8011f30:	781b      	ldrb	r3, [r3, #0]
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d000      	beq.n	8011f38 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8011f36:	e562      	b.n	80119fe <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8011f38:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d102      	bne.n	8011f46 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8011f40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011f42:	f003 fb83 	bl	801564c <tcp_output>
  while (pcb != NULL) {
 8011f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	f47f ad5e 	bne.w	8011a0a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8011f4e:	2300      	movs	r3, #0
 8011f50:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8011f52:	4b0c      	ldr	r3, [pc, #48]	; (8011f84 <tcp_slowtmr+0x5a8>)
 8011f54:	681b      	ldr	r3, [r3, #0]
 8011f56:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8011f58:	e069      	b.n	801202e <tcp_slowtmr+0x652>
 8011f5a:	bf00      	nop
 8011f5c:	20007044 	.word	0x20007044
 8011f60:	000a4cb8 	.word	0x000a4cb8
 8011f64:	10624dd3 	.word	0x10624dd3
 8011f68:	000124f8 	.word	0x000124f8
 8011f6c:	20007050 	.word	0x20007050
 8011f70:	0801cf34 	.word	0x0801cf34
 8011f74:	0801d36c 	.word	0x0801d36c
 8011f78:	0801cf78 	.word	0x0801cf78
 8011f7c:	0801d398 	.word	0x0801d398
 8011f80:	20007058 	.word	0x20007058
 8011f84:	20007054 	.word	0x20007054
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f8a:	7d1b      	ldrb	r3, [r3, #20]
 8011f8c:	2b0a      	cmp	r3, #10
 8011f8e:	d006      	beq.n	8011f9e <tcp_slowtmr+0x5c2>
 8011f90:	4b2b      	ldr	r3, [pc, #172]	; (8012040 <tcp_slowtmr+0x664>)
 8011f92:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8011f96:	492b      	ldr	r1, [pc, #172]	; (8012044 <tcp_slowtmr+0x668>)
 8011f98:	482b      	ldr	r0, [pc, #172]	; (8012048 <tcp_slowtmr+0x66c>)
 8011f9a:	f007 fdf9 	bl	8019b90 <iprintf>
    pcb_remove = 0;
 8011f9e:	2300      	movs	r3, #0
 8011fa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011fa4:	4b29      	ldr	r3, [pc, #164]	; (801204c <tcp_slowtmr+0x670>)
 8011fa6:	681a      	ldr	r2, [r3, #0]
 8011fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011faa:	6a1b      	ldr	r3, [r3, #32]
 8011fac:	1ad3      	subs	r3, r2, r3
 8011fae:	2bf0      	cmp	r3, #240	; 0xf0
 8011fb0:	d904      	bls.n	8011fbc <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8011fb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011fb6:	3301      	adds	r3, #1
 8011fb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011fbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d02f      	beq.n	8012024 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8011fc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011fc6:	f000 fb2d 	bl	8012624 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8011fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d010      	beq.n	8011ff2 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8011fd0:	4b1f      	ldr	r3, [pc, #124]	; (8012050 <tcp_slowtmr+0x674>)
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011fd6:	429a      	cmp	r2, r3
 8011fd8:	d106      	bne.n	8011fe8 <tcp_slowtmr+0x60c>
 8011fda:	4b19      	ldr	r3, [pc, #100]	; (8012040 <tcp_slowtmr+0x664>)
 8011fdc:	f240 52af 	movw	r2, #1455	; 0x5af
 8011fe0:	491c      	ldr	r1, [pc, #112]	; (8012054 <tcp_slowtmr+0x678>)
 8011fe2:	4819      	ldr	r0, [pc, #100]	; (8012048 <tcp_slowtmr+0x66c>)
 8011fe4:	f007 fdd4 	bl	8019b90 <iprintf>
        prev->next = pcb->next;
 8011fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fea:	68da      	ldr	r2, [r3, #12]
 8011fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fee:	60da      	str	r2, [r3, #12]
 8011ff0:	e00f      	b.n	8012012 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8011ff2:	4b17      	ldr	r3, [pc, #92]	; (8012050 <tcp_slowtmr+0x674>)
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011ff8:	429a      	cmp	r2, r3
 8011ffa:	d006      	beq.n	801200a <tcp_slowtmr+0x62e>
 8011ffc:	4b10      	ldr	r3, [pc, #64]	; (8012040 <tcp_slowtmr+0x664>)
 8011ffe:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8012002:	4915      	ldr	r1, [pc, #84]	; (8012058 <tcp_slowtmr+0x67c>)
 8012004:	4810      	ldr	r0, [pc, #64]	; (8012048 <tcp_slowtmr+0x66c>)
 8012006:	f007 fdc3 	bl	8019b90 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801200a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801200c:	68db      	ldr	r3, [r3, #12]
 801200e:	4a10      	ldr	r2, [pc, #64]	; (8012050 <tcp_slowtmr+0x674>)
 8012010:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8012012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012014:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8012016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012018:	68db      	ldr	r3, [r3, #12]
 801201a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801201c:	69f8      	ldr	r0, [r7, #28]
 801201e:	f7ff f93d 	bl	801129c <tcp_free>
 8012022:	e004      	b.n	801202e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8012024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012026:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8012028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801202a:	68db      	ldr	r3, [r3, #12]
 801202c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801202e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012030:	2b00      	cmp	r3, #0
 8012032:	d1a9      	bne.n	8011f88 <tcp_slowtmr+0x5ac>
    }
  }
}
 8012034:	bf00      	nop
 8012036:	bf00      	nop
 8012038:	3730      	adds	r7, #48	; 0x30
 801203a:	46bd      	mov	sp, r7
 801203c:	bdb0      	pop	{r4, r5, r7, pc}
 801203e:	bf00      	nop
 8012040:	0801cf34 	.word	0x0801cf34
 8012044:	0801d3c4 	.word	0x0801d3c4
 8012048:	0801cf78 	.word	0x0801cf78
 801204c:	20007044 	.word	0x20007044
 8012050:	20007054 	.word	0x20007054
 8012054:	0801d3f4 	.word	0x0801d3f4
 8012058:	0801d41c 	.word	0x0801d41c

0801205c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 801205c:	b580      	push	{r7, lr}
 801205e:	b082      	sub	sp, #8
 8012060:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8012062:	4b2d      	ldr	r3, [pc, #180]	; (8012118 <tcp_fasttmr+0xbc>)
 8012064:	781b      	ldrb	r3, [r3, #0]
 8012066:	3301      	adds	r3, #1
 8012068:	b2da      	uxtb	r2, r3
 801206a:	4b2b      	ldr	r3, [pc, #172]	; (8012118 <tcp_fasttmr+0xbc>)
 801206c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801206e:	4b2b      	ldr	r3, [pc, #172]	; (801211c <tcp_fasttmr+0xc0>)
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8012074:	e048      	b.n	8012108 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	7f9a      	ldrb	r2, [r3, #30]
 801207a:	4b27      	ldr	r3, [pc, #156]	; (8012118 <tcp_fasttmr+0xbc>)
 801207c:	781b      	ldrb	r3, [r3, #0]
 801207e:	429a      	cmp	r2, r3
 8012080:	d03f      	beq.n	8012102 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8012082:	4b25      	ldr	r3, [pc, #148]	; (8012118 <tcp_fasttmr+0xbc>)
 8012084:	781a      	ldrb	r2, [r3, #0]
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	8b5b      	ldrh	r3, [r3, #26]
 801208e:	f003 0301 	and.w	r3, r3, #1
 8012092:	2b00      	cmp	r3, #0
 8012094:	d010      	beq.n	80120b8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	8b5b      	ldrh	r3, [r3, #26]
 801209a:	f043 0302 	orr.w	r3, r3, #2
 801209e:	b29a      	uxth	r2, r3
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80120a4:	6878      	ldr	r0, [r7, #4]
 80120a6:	f003 fad1 	bl	801564c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	8b5b      	ldrh	r3, [r3, #26]
 80120ae:	f023 0303 	bic.w	r3, r3, #3
 80120b2:	b29a      	uxth	r2, r3
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	8b5b      	ldrh	r3, [r3, #26]
 80120bc:	f003 0308 	and.w	r3, r3, #8
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d009      	beq.n	80120d8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	8b5b      	ldrh	r3, [r3, #26]
 80120c8:	f023 0308 	bic.w	r3, r3, #8
 80120cc:	b29a      	uxth	r2, r3
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80120d2:	6878      	ldr	r0, [r7, #4]
 80120d4:	f7ff fa76 	bl	80115c4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	68db      	ldr	r3, [r3, #12]
 80120dc:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d00a      	beq.n	80120fc <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80120e6:	4b0e      	ldr	r3, [pc, #56]	; (8012120 <tcp_fasttmr+0xc4>)
 80120e8:	2200      	movs	r2, #0
 80120ea:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80120ec:	6878      	ldr	r0, [r7, #4]
 80120ee:	f000 f819 	bl	8012124 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80120f2:	4b0b      	ldr	r3, [pc, #44]	; (8012120 <tcp_fasttmr+0xc4>)
 80120f4:	781b      	ldrb	r3, [r3, #0]
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d000      	beq.n	80120fc <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80120fa:	e7b8      	b.n	801206e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80120fc:	683b      	ldr	r3, [r7, #0]
 80120fe:	607b      	str	r3, [r7, #4]
 8012100:	e002      	b.n	8012108 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	68db      	ldr	r3, [r3, #12]
 8012106:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	2b00      	cmp	r3, #0
 801210c:	d1b3      	bne.n	8012076 <tcp_fasttmr+0x1a>
    }
  }
}
 801210e:	bf00      	nop
 8012110:	bf00      	nop
 8012112:	3708      	adds	r7, #8
 8012114:	46bd      	mov	sp, r7
 8012116:	bd80      	pop	{r7, pc}
 8012118:	2000705a 	.word	0x2000705a
 801211c:	20007050 	.word	0x20007050
 8012120:	20007058 	.word	0x20007058

08012124 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8012124:	b590      	push	{r4, r7, lr}
 8012126:	b085      	sub	sp, #20
 8012128:	af00      	add	r7, sp, #0
 801212a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	2b00      	cmp	r3, #0
 8012130:	d109      	bne.n	8012146 <tcp_process_refused_data+0x22>
 8012132:	4b38      	ldr	r3, [pc, #224]	; (8012214 <tcp_process_refused_data+0xf0>)
 8012134:	f240 6209 	movw	r2, #1545	; 0x609
 8012138:	4937      	ldr	r1, [pc, #220]	; (8012218 <tcp_process_refused_data+0xf4>)
 801213a:	4838      	ldr	r0, [pc, #224]	; (801221c <tcp_process_refused_data+0xf8>)
 801213c:	f007 fd28 	bl	8019b90 <iprintf>
 8012140:	f06f 030f 	mvn.w	r3, #15
 8012144:	e061      	b.n	801220a <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801214a:	7b5b      	ldrb	r3, [r3, #13]
 801214c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012152:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	2200      	movs	r2, #0
 8012158:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012160:	2b00      	cmp	r3, #0
 8012162:	d00b      	beq.n	801217c <tcp_process_refused_data+0x58>
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	6918      	ldr	r0, [r3, #16]
 801216e:	2300      	movs	r3, #0
 8012170:	68ba      	ldr	r2, [r7, #8]
 8012172:	6879      	ldr	r1, [r7, #4]
 8012174:	47a0      	blx	r4
 8012176:	4603      	mov	r3, r0
 8012178:	73fb      	strb	r3, [r7, #15]
 801217a:	e007      	b.n	801218c <tcp_process_refused_data+0x68>
 801217c:	2300      	movs	r3, #0
 801217e:	68ba      	ldr	r2, [r7, #8]
 8012180:	6879      	ldr	r1, [r7, #4]
 8012182:	2000      	movs	r0, #0
 8012184:	f000 f8a6 	bl	80122d4 <tcp_recv_null>
 8012188:	4603      	mov	r3, r0
 801218a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801218c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012190:	2b00      	cmp	r3, #0
 8012192:	d12b      	bne.n	80121ec <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8012194:	7bbb      	ldrb	r3, [r7, #14]
 8012196:	f003 0320 	and.w	r3, r3, #32
 801219a:	2b00      	cmp	r3, #0
 801219c:	d034      	beq.n	8012208 <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80121a2:	f241 62d0 	movw	r2, #5840	; 0x16d0
 80121a6:	4293      	cmp	r3, r2
 80121a8:	d005      	beq.n	80121b6 <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80121ae:	3301      	adds	r3, #1
 80121b0:	b29a      	uxth	r2, r3
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d00b      	beq.n	80121d8 <tcp_process_refused_data+0xb4>
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	6918      	ldr	r0, [r3, #16]
 80121ca:	2300      	movs	r3, #0
 80121cc:	2200      	movs	r2, #0
 80121ce:	6879      	ldr	r1, [r7, #4]
 80121d0:	47a0      	blx	r4
 80121d2:	4603      	mov	r3, r0
 80121d4:	73fb      	strb	r3, [r7, #15]
 80121d6:	e001      	b.n	80121dc <tcp_process_refused_data+0xb8>
 80121d8:	2300      	movs	r3, #0
 80121da:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80121dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80121e0:	f113 0f0d 	cmn.w	r3, #13
 80121e4:	d110      	bne.n	8012208 <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 80121e6:	f06f 030c 	mvn.w	r3, #12
 80121ea:	e00e      	b.n	801220a <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 80121ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80121f0:	f113 0f0d 	cmn.w	r3, #13
 80121f4:	d102      	bne.n	80121fc <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80121f6:	f06f 030c 	mvn.w	r3, #12
 80121fa:	e006      	b.n	801220a <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	68ba      	ldr	r2, [r7, #8]
 8012200:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8012202:	f06f 0304 	mvn.w	r3, #4
 8012206:	e000      	b.n	801220a <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 8012208:	2300      	movs	r3, #0
}
 801220a:	4618      	mov	r0, r3
 801220c:	3714      	adds	r7, #20
 801220e:	46bd      	mov	sp, r7
 8012210:	bd90      	pop	{r4, r7, pc}
 8012212:	bf00      	nop
 8012214:	0801cf34 	.word	0x0801cf34
 8012218:	0801d444 	.word	0x0801d444
 801221c:	0801cf78 	.word	0x0801cf78

08012220 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8012220:	b580      	push	{r7, lr}
 8012222:	b084      	sub	sp, #16
 8012224:	af00      	add	r7, sp, #0
 8012226:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8012228:	e007      	b.n	801223a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	681b      	ldr	r3, [r3, #0]
 801222e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8012230:	6878      	ldr	r0, [r7, #4]
 8012232:	f000 f80a 	bl	801224a <tcp_seg_free>
    seg = next;
 8012236:	68fb      	ldr	r3, [r7, #12]
 8012238:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	2b00      	cmp	r3, #0
 801223e:	d1f4      	bne.n	801222a <tcp_segs_free+0xa>
  }
}
 8012240:	bf00      	nop
 8012242:	bf00      	nop
 8012244:	3710      	adds	r7, #16
 8012246:	46bd      	mov	sp, r7
 8012248:	bd80      	pop	{r7, pc}

0801224a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801224a:	b580      	push	{r7, lr}
 801224c:	b082      	sub	sp, #8
 801224e:	af00      	add	r7, sp, #0
 8012250:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	2b00      	cmp	r3, #0
 8012256:	d00c      	beq.n	8012272 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	685b      	ldr	r3, [r3, #4]
 801225c:	2b00      	cmp	r3, #0
 801225e:	d004      	beq.n	801226a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	685b      	ldr	r3, [r3, #4]
 8012264:	4618      	mov	r0, r3
 8012266:	f7fe fd79 	bl	8010d5c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801226a:	6879      	ldr	r1, [r7, #4]
 801226c:	2003      	movs	r0, #3
 801226e:	f7fd feff 	bl	8010070 <memp_free>
  }
}
 8012272:	bf00      	nop
 8012274:	3708      	adds	r7, #8
 8012276:	46bd      	mov	sp, r7
 8012278:	bd80      	pop	{r7, pc}
	...

0801227c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 801227c:	b580      	push	{r7, lr}
 801227e:	b084      	sub	sp, #16
 8012280:	af00      	add	r7, sp, #0
 8012282:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	2b00      	cmp	r3, #0
 8012288:	d106      	bne.n	8012298 <tcp_seg_copy+0x1c>
 801228a:	4b0f      	ldr	r3, [pc, #60]	; (80122c8 <tcp_seg_copy+0x4c>)
 801228c:	f240 6282 	movw	r2, #1666	; 0x682
 8012290:	490e      	ldr	r1, [pc, #56]	; (80122cc <tcp_seg_copy+0x50>)
 8012292:	480f      	ldr	r0, [pc, #60]	; (80122d0 <tcp_seg_copy+0x54>)
 8012294:	f007 fc7c 	bl	8019b90 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8012298:	2003      	movs	r0, #3
 801229a:	f7fd fe79 	bl	800ff90 <memp_malloc>
 801229e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80122a0:	68fb      	ldr	r3, [r7, #12]
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d101      	bne.n	80122aa <tcp_seg_copy+0x2e>
    return NULL;
 80122a6:	2300      	movs	r3, #0
 80122a8:	e00a      	b.n	80122c0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80122aa:	2210      	movs	r2, #16
 80122ac:	6879      	ldr	r1, [r7, #4]
 80122ae:	68f8      	ldr	r0, [r7, #12]
 80122b0:	f007 fe3d 	bl	8019f2e <memcpy>
  pbuf_ref(cseg->p);
 80122b4:	68fb      	ldr	r3, [r7, #12]
 80122b6:	685b      	ldr	r3, [r3, #4]
 80122b8:	4618      	mov	r0, r3
 80122ba:	f7fe fdef 	bl	8010e9c <pbuf_ref>
  return cseg;
 80122be:	68fb      	ldr	r3, [r7, #12]
}
 80122c0:	4618      	mov	r0, r3
 80122c2:	3710      	adds	r7, #16
 80122c4:	46bd      	mov	sp, r7
 80122c6:	bd80      	pop	{r7, pc}
 80122c8:	0801cf34 	.word	0x0801cf34
 80122cc:	0801d488 	.word	0x0801d488
 80122d0:	0801cf78 	.word	0x0801cf78

080122d4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80122d4:	b580      	push	{r7, lr}
 80122d6:	b084      	sub	sp, #16
 80122d8:	af00      	add	r7, sp, #0
 80122da:	60f8      	str	r0, [r7, #12]
 80122dc:	60b9      	str	r1, [r7, #8]
 80122de:	607a      	str	r2, [r7, #4]
 80122e0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80122e2:	68bb      	ldr	r3, [r7, #8]
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d109      	bne.n	80122fc <tcp_recv_null+0x28>
 80122e8:	4b12      	ldr	r3, [pc, #72]	; (8012334 <tcp_recv_null+0x60>)
 80122ea:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80122ee:	4912      	ldr	r1, [pc, #72]	; (8012338 <tcp_recv_null+0x64>)
 80122f0:	4812      	ldr	r0, [pc, #72]	; (801233c <tcp_recv_null+0x68>)
 80122f2:	f007 fc4d 	bl	8019b90 <iprintf>
 80122f6:	f06f 030f 	mvn.w	r3, #15
 80122fa:	e016      	b.n	801232a <tcp_recv_null+0x56>

  if (p != NULL) {
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d009      	beq.n	8012316 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	891b      	ldrh	r3, [r3, #8]
 8012306:	4619      	mov	r1, r3
 8012308:	68b8      	ldr	r0, [r7, #8]
 801230a:	f7ff fb15 	bl	8011938 <tcp_recved>
    pbuf_free(p);
 801230e:	6878      	ldr	r0, [r7, #4]
 8012310:	f7fe fd24 	bl	8010d5c <pbuf_free>
 8012314:	e008      	b.n	8012328 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8012316:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801231a:	2b00      	cmp	r3, #0
 801231c:	d104      	bne.n	8012328 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801231e:	68b8      	ldr	r0, [r7, #8]
 8012320:	f7ff f9ba 	bl	8011698 <tcp_close>
 8012324:	4603      	mov	r3, r0
 8012326:	e000      	b.n	801232a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8012328:	2300      	movs	r3, #0
}
 801232a:	4618      	mov	r0, r3
 801232c:	3710      	adds	r7, #16
 801232e:	46bd      	mov	sp, r7
 8012330:	bd80      	pop	{r7, pc}
 8012332:	bf00      	nop
 8012334:	0801cf34 	.word	0x0801cf34
 8012338:	0801d4a4 	.word	0x0801d4a4
 801233c:	0801cf78 	.word	0x0801cf78

08012340 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8012340:	b580      	push	{r7, lr}
 8012342:	b086      	sub	sp, #24
 8012344:	af00      	add	r7, sp, #0
 8012346:	4603      	mov	r3, r0
 8012348:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801234a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801234e:	2b00      	cmp	r3, #0
 8012350:	db01      	blt.n	8012356 <tcp_kill_prio+0x16>
 8012352:	79fb      	ldrb	r3, [r7, #7]
 8012354:	e000      	b.n	8012358 <tcp_kill_prio+0x18>
 8012356:	237f      	movs	r3, #127	; 0x7f
 8012358:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801235a:	7afb      	ldrb	r3, [r7, #11]
 801235c:	2b00      	cmp	r3, #0
 801235e:	d034      	beq.n	80123ca <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8012360:	7afb      	ldrb	r3, [r7, #11]
 8012362:	3b01      	subs	r3, #1
 8012364:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8012366:	2300      	movs	r3, #0
 8012368:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801236a:	2300      	movs	r3, #0
 801236c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801236e:	4b19      	ldr	r3, [pc, #100]	; (80123d4 <tcp_kill_prio+0x94>)
 8012370:	681b      	ldr	r3, [r3, #0]
 8012372:	617b      	str	r3, [r7, #20]
 8012374:	e01f      	b.n	80123b6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8012376:	697b      	ldr	r3, [r7, #20]
 8012378:	7d5b      	ldrb	r3, [r3, #21]
 801237a:	7afa      	ldrb	r2, [r7, #11]
 801237c:	429a      	cmp	r2, r3
 801237e:	d80c      	bhi.n	801239a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8012380:	697b      	ldr	r3, [r7, #20]
 8012382:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8012384:	7afa      	ldrb	r2, [r7, #11]
 8012386:	429a      	cmp	r2, r3
 8012388:	d112      	bne.n	80123b0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801238a:	4b13      	ldr	r3, [pc, #76]	; (80123d8 <tcp_kill_prio+0x98>)
 801238c:	681a      	ldr	r2, [r3, #0]
 801238e:	697b      	ldr	r3, [r7, #20]
 8012390:	6a1b      	ldr	r3, [r3, #32]
 8012392:	1ad3      	subs	r3, r2, r3
 8012394:	68fa      	ldr	r2, [r7, #12]
 8012396:	429a      	cmp	r2, r3
 8012398:	d80a      	bhi.n	80123b0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801239a:	4b0f      	ldr	r3, [pc, #60]	; (80123d8 <tcp_kill_prio+0x98>)
 801239c:	681a      	ldr	r2, [r3, #0]
 801239e:	697b      	ldr	r3, [r7, #20]
 80123a0:	6a1b      	ldr	r3, [r3, #32]
 80123a2:	1ad3      	subs	r3, r2, r3
 80123a4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80123a6:	697b      	ldr	r3, [r7, #20]
 80123a8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80123aa:	697b      	ldr	r3, [r7, #20]
 80123ac:	7d5b      	ldrb	r3, [r3, #21]
 80123ae:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80123b0:	697b      	ldr	r3, [r7, #20]
 80123b2:	68db      	ldr	r3, [r3, #12]
 80123b4:	617b      	str	r3, [r7, #20]
 80123b6:	697b      	ldr	r3, [r7, #20]
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d1dc      	bne.n	8012376 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80123bc:	693b      	ldr	r3, [r7, #16]
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d004      	beq.n	80123cc <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80123c2:	6938      	ldr	r0, [r7, #16]
 80123c4:	f7ff fa52 	bl	801186c <tcp_abort>
 80123c8:	e000      	b.n	80123cc <tcp_kill_prio+0x8c>
    return;
 80123ca:	bf00      	nop
  }
}
 80123cc:	3718      	adds	r7, #24
 80123ce:	46bd      	mov	sp, r7
 80123d0:	bd80      	pop	{r7, pc}
 80123d2:	bf00      	nop
 80123d4:	20007050 	.word	0x20007050
 80123d8:	20007044 	.word	0x20007044

080123dc <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80123dc:	b580      	push	{r7, lr}
 80123de:	b086      	sub	sp, #24
 80123e0:	af00      	add	r7, sp, #0
 80123e2:	4603      	mov	r3, r0
 80123e4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80123e6:	79fb      	ldrb	r3, [r7, #7]
 80123e8:	2b08      	cmp	r3, #8
 80123ea:	d009      	beq.n	8012400 <tcp_kill_state+0x24>
 80123ec:	79fb      	ldrb	r3, [r7, #7]
 80123ee:	2b09      	cmp	r3, #9
 80123f0:	d006      	beq.n	8012400 <tcp_kill_state+0x24>
 80123f2:	4b1a      	ldr	r3, [pc, #104]	; (801245c <tcp_kill_state+0x80>)
 80123f4:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80123f8:	4919      	ldr	r1, [pc, #100]	; (8012460 <tcp_kill_state+0x84>)
 80123fa:	481a      	ldr	r0, [pc, #104]	; (8012464 <tcp_kill_state+0x88>)
 80123fc:	f007 fbc8 	bl	8019b90 <iprintf>

  inactivity = 0;
 8012400:	2300      	movs	r3, #0
 8012402:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8012404:	2300      	movs	r3, #0
 8012406:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012408:	4b17      	ldr	r3, [pc, #92]	; (8012468 <tcp_kill_state+0x8c>)
 801240a:	681b      	ldr	r3, [r3, #0]
 801240c:	617b      	str	r3, [r7, #20]
 801240e:	e017      	b.n	8012440 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8012410:	697b      	ldr	r3, [r7, #20]
 8012412:	7d1b      	ldrb	r3, [r3, #20]
 8012414:	79fa      	ldrb	r2, [r7, #7]
 8012416:	429a      	cmp	r2, r3
 8012418:	d10f      	bne.n	801243a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801241a:	4b14      	ldr	r3, [pc, #80]	; (801246c <tcp_kill_state+0x90>)
 801241c:	681a      	ldr	r2, [r3, #0]
 801241e:	697b      	ldr	r3, [r7, #20]
 8012420:	6a1b      	ldr	r3, [r3, #32]
 8012422:	1ad3      	subs	r3, r2, r3
 8012424:	68fa      	ldr	r2, [r7, #12]
 8012426:	429a      	cmp	r2, r3
 8012428:	d807      	bhi.n	801243a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801242a:	4b10      	ldr	r3, [pc, #64]	; (801246c <tcp_kill_state+0x90>)
 801242c:	681a      	ldr	r2, [r3, #0]
 801242e:	697b      	ldr	r3, [r7, #20]
 8012430:	6a1b      	ldr	r3, [r3, #32]
 8012432:	1ad3      	subs	r3, r2, r3
 8012434:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8012436:	697b      	ldr	r3, [r7, #20]
 8012438:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801243a:	697b      	ldr	r3, [r7, #20]
 801243c:	68db      	ldr	r3, [r3, #12]
 801243e:	617b      	str	r3, [r7, #20]
 8012440:	697b      	ldr	r3, [r7, #20]
 8012442:	2b00      	cmp	r3, #0
 8012444:	d1e4      	bne.n	8012410 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8012446:	693b      	ldr	r3, [r7, #16]
 8012448:	2b00      	cmp	r3, #0
 801244a:	d003      	beq.n	8012454 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 801244c:	2100      	movs	r1, #0
 801244e:	6938      	ldr	r0, [r7, #16]
 8012450:	f7ff f94e 	bl	80116f0 <tcp_abandon>
  }
}
 8012454:	bf00      	nop
 8012456:	3718      	adds	r7, #24
 8012458:	46bd      	mov	sp, r7
 801245a:	bd80      	pop	{r7, pc}
 801245c:	0801cf34 	.word	0x0801cf34
 8012460:	0801d4c0 	.word	0x0801d4c0
 8012464:	0801cf78 	.word	0x0801cf78
 8012468:	20007050 	.word	0x20007050
 801246c:	20007044 	.word	0x20007044

08012470 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8012470:	b580      	push	{r7, lr}
 8012472:	b084      	sub	sp, #16
 8012474:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8012476:	2300      	movs	r3, #0
 8012478:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801247a:	2300      	movs	r3, #0
 801247c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801247e:	4b12      	ldr	r3, [pc, #72]	; (80124c8 <tcp_kill_timewait+0x58>)
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	60fb      	str	r3, [r7, #12]
 8012484:	e012      	b.n	80124ac <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8012486:	4b11      	ldr	r3, [pc, #68]	; (80124cc <tcp_kill_timewait+0x5c>)
 8012488:	681a      	ldr	r2, [r3, #0]
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	6a1b      	ldr	r3, [r3, #32]
 801248e:	1ad3      	subs	r3, r2, r3
 8012490:	687a      	ldr	r2, [r7, #4]
 8012492:	429a      	cmp	r2, r3
 8012494:	d807      	bhi.n	80124a6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8012496:	4b0d      	ldr	r3, [pc, #52]	; (80124cc <tcp_kill_timewait+0x5c>)
 8012498:	681a      	ldr	r2, [r3, #0]
 801249a:	68fb      	ldr	r3, [r7, #12]
 801249c:	6a1b      	ldr	r3, [r3, #32]
 801249e:	1ad3      	subs	r3, r2, r3
 80124a0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80124a2:	68fb      	ldr	r3, [r7, #12]
 80124a4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	68db      	ldr	r3, [r3, #12]
 80124aa:	60fb      	str	r3, [r7, #12]
 80124ac:	68fb      	ldr	r3, [r7, #12]
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d1e9      	bne.n	8012486 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80124b2:	68bb      	ldr	r3, [r7, #8]
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d002      	beq.n	80124be <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80124b8:	68b8      	ldr	r0, [r7, #8]
 80124ba:	f7ff f9d7 	bl	801186c <tcp_abort>
  }
}
 80124be:	bf00      	nop
 80124c0:	3710      	adds	r7, #16
 80124c2:	46bd      	mov	sp, r7
 80124c4:	bd80      	pop	{r7, pc}
 80124c6:	bf00      	nop
 80124c8:	20007054 	.word	0x20007054
 80124cc:	20007044 	.word	0x20007044

080124d0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80124d0:	b580      	push	{r7, lr}
 80124d2:	b082      	sub	sp, #8
 80124d4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80124d6:	4b10      	ldr	r3, [pc, #64]	; (8012518 <tcp_handle_closepend+0x48>)
 80124d8:	681b      	ldr	r3, [r3, #0]
 80124da:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80124dc:	e014      	b.n	8012508 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	68db      	ldr	r3, [r3, #12]
 80124e2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	8b5b      	ldrh	r3, [r3, #26]
 80124e8:	f003 0308 	and.w	r3, r3, #8
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d009      	beq.n	8012504 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	8b5b      	ldrh	r3, [r3, #26]
 80124f4:	f023 0308 	bic.w	r3, r3, #8
 80124f8:	b29a      	uxth	r2, r3
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80124fe:	6878      	ldr	r0, [r7, #4]
 8012500:	f7ff f860 	bl	80115c4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8012504:	683b      	ldr	r3, [r7, #0]
 8012506:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	2b00      	cmp	r3, #0
 801250c:	d1e7      	bne.n	80124de <tcp_handle_closepend+0xe>
  }
}
 801250e:	bf00      	nop
 8012510:	bf00      	nop
 8012512:	3708      	adds	r7, #8
 8012514:	46bd      	mov	sp, r7
 8012516:	bd80      	pop	{r7, pc}
 8012518:	20007050 	.word	0x20007050

0801251c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 801251c:	b580      	push	{r7, lr}
 801251e:	b084      	sub	sp, #16
 8012520:	af00      	add	r7, sp, #0
 8012522:	4603      	mov	r3, r0
 8012524:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012526:	2001      	movs	r0, #1
 8012528:	f7fd fd32 	bl	800ff90 <memp_malloc>
 801252c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	2b00      	cmp	r3, #0
 8012532:	d126      	bne.n	8012582 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8012534:	f7ff ffcc 	bl	80124d0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8012538:	f7ff ff9a 	bl	8012470 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801253c:	2001      	movs	r0, #1
 801253e:	f7fd fd27 	bl	800ff90 <memp_malloc>
 8012542:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8012544:	68fb      	ldr	r3, [r7, #12]
 8012546:	2b00      	cmp	r3, #0
 8012548:	d11b      	bne.n	8012582 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801254a:	2009      	movs	r0, #9
 801254c:	f7ff ff46 	bl	80123dc <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012550:	2001      	movs	r0, #1
 8012552:	f7fd fd1d 	bl	800ff90 <memp_malloc>
 8012556:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8012558:	68fb      	ldr	r3, [r7, #12]
 801255a:	2b00      	cmp	r3, #0
 801255c:	d111      	bne.n	8012582 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801255e:	2008      	movs	r0, #8
 8012560:	f7ff ff3c 	bl	80123dc <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012564:	2001      	movs	r0, #1
 8012566:	f7fd fd13 	bl	800ff90 <memp_malloc>
 801256a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 801256c:	68fb      	ldr	r3, [r7, #12]
 801256e:	2b00      	cmp	r3, #0
 8012570:	d107      	bne.n	8012582 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8012572:	79fb      	ldrb	r3, [r7, #7]
 8012574:	4618      	mov	r0, r3
 8012576:	f7ff fee3 	bl	8012340 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801257a:	2001      	movs	r0, #1
 801257c:	f7fd fd08 	bl	800ff90 <memp_malloc>
 8012580:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8012582:	68fb      	ldr	r3, [r7, #12]
 8012584:	2b00      	cmp	r3, #0
 8012586:	d03f      	beq.n	8012608 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8012588:	229c      	movs	r2, #156	; 0x9c
 801258a:	2100      	movs	r1, #0
 801258c:	68f8      	ldr	r0, [r7, #12]
 801258e:	f007 fc55 	bl	8019e3c <memset>
    pcb->prio = prio;
 8012592:	68fb      	ldr	r3, [r7, #12]
 8012594:	79fa      	ldrb	r2, [r7, #7]
 8012596:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	f241 62d0 	movw	r2, #5840	; 0x16d0
 801259e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80125a2:	68fb      	ldr	r3, [r7, #12]
 80125a4:	f241 62d0 	movw	r2, #5840	; 0x16d0
 80125a8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80125aa:	68fb      	ldr	r3, [r7, #12]
 80125ac:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80125ae:	68fb      	ldr	r3, [r7, #12]
 80125b0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	22ff      	movs	r2, #255	; 0xff
 80125b6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80125b8:	68fb      	ldr	r3, [r7, #12]
 80125ba:	f44f 7206 	mov.w	r2, #536	; 0x218
 80125be:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80125c0:	68fb      	ldr	r3, [r7, #12]
 80125c2:	2206      	movs	r2, #6
 80125c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80125c8:	68fb      	ldr	r3, [r7, #12]
 80125ca:	2206      	movs	r2, #6
 80125cc:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80125ce:	68fb      	ldr	r3, [r7, #12]
 80125d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80125d4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80125d6:	68fb      	ldr	r3, [r7, #12]
 80125d8:	2201      	movs	r2, #1
 80125da:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80125de:	4b0d      	ldr	r3, [pc, #52]	; (8012614 <tcp_alloc+0xf8>)
 80125e0:	681a      	ldr	r2, [r3, #0]
 80125e2:	68fb      	ldr	r3, [r7, #12]
 80125e4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80125e6:	4b0c      	ldr	r3, [pc, #48]	; (8012618 <tcp_alloc+0xfc>)
 80125e8:	781a      	ldrb	r2, [r3, #0]
 80125ea:	68fb      	ldr	r3, [r7, #12]
 80125ec:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80125ee:	68fb      	ldr	r3, [r7, #12]
 80125f0:	f241 62d0 	movw	r2, #5840	; 0x16d0
 80125f4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80125f8:	68fb      	ldr	r3, [r7, #12]
 80125fa:	4a08      	ldr	r2, [pc, #32]	; (801261c <tcp_alloc+0x100>)
 80125fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8012600:	68fb      	ldr	r3, [r7, #12]
 8012602:	4a07      	ldr	r2, [pc, #28]	; (8012620 <tcp_alloc+0x104>)
 8012604:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8012608:	68fb      	ldr	r3, [r7, #12]
}
 801260a:	4618      	mov	r0, r3
 801260c:	3710      	adds	r7, #16
 801260e:	46bd      	mov	sp, r7
 8012610:	bd80      	pop	{r7, pc}
 8012612:	bf00      	nop
 8012614:	20007044 	.word	0x20007044
 8012618:	2000705a 	.word	0x2000705a
 801261c:	080122d5 	.word	0x080122d5
 8012620:	006ddd00 	.word	0x006ddd00

08012624 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8012624:	b580      	push	{r7, lr}
 8012626:	b082      	sub	sp, #8
 8012628:	af00      	add	r7, sp, #0
 801262a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	2b00      	cmp	r3, #0
 8012630:	d107      	bne.n	8012642 <tcp_pcb_purge+0x1e>
 8012632:	4b21      	ldr	r3, [pc, #132]	; (80126b8 <tcp_pcb_purge+0x94>)
 8012634:	f640 0251 	movw	r2, #2129	; 0x851
 8012638:	4920      	ldr	r1, [pc, #128]	; (80126bc <tcp_pcb_purge+0x98>)
 801263a:	4821      	ldr	r0, [pc, #132]	; (80126c0 <tcp_pcb_purge+0x9c>)
 801263c:	f007 faa8 	bl	8019b90 <iprintf>
 8012640:	e037      	b.n	80126b2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	7d1b      	ldrb	r3, [r3, #20]
 8012646:	2b00      	cmp	r3, #0
 8012648:	d033      	beq.n	80126b2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801264e:	2b0a      	cmp	r3, #10
 8012650:	d02f      	beq.n	80126b2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8012656:	2b01      	cmp	r3, #1
 8012658:	d02b      	beq.n	80126b2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801265e:	2b00      	cmp	r3, #0
 8012660:	d007      	beq.n	8012672 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012666:	4618      	mov	r0, r3
 8012668:	f7fe fb78 	bl	8010d5c <pbuf_free>
      pcb->refused_data = NULL;
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	2200      	movs	r2, #0
 8012670:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012676:	2b00      	cmp	r3, #0
 8012678:	d002      	beq.n	8012680 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801267a:	6878      	ldr	r0, [r7, #4]
 801267c:	f000 f986 	bl	801298c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012686:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801268c:	4618      	mov	r0, r3
 801268e:	f7ff fdc7 	bl	8012220 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012696:	4618      	mov	r0, r3
 8012698:	f7ff fdc2 	bl	8012220 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	2200      	movs	r2, #0
 80126a0:	66da      	str	r2, [r3, #108]	; 0x6c
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	2200      	movs	r2, #0
 80126ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80126b2:	3708      	adds	r7, #8
 80126b4:	46bd      	mov	sp, r7
 80126b6:	bd80      	pop	{r7, pc}
 80126b8:	0801cf34 	.word	0x0801cf34
 80126bc:	0801d580 	.word	0x0801d580
 80126c0:	0801cf78 	.word	0x0801cf78

080126c4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80126c4:	b580      	push	{r7, lr}
 80126c6:	b084      	sub	sp, #16
 80126c8:	af00      	add	r7, sp, #0
 80126ca:	6078      	str	r0, [r7, #4]
 80126cc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80126ce:	683b      	ldr	r3, [r7, #0]
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d106      	bne.n	80126e2 <tcp_pcb_remove+0x1e>
 80126d4:	4b3e      	ldr	r3, [pc, #248]	; (80127d0 <tcp_pcb_remove+0x10c>)
 80126d6:	f640 0283 	movw	r2, #2179	; 0x883
 80126da:	493e      	ldr	r1, [pc, #248]	; (80127d4 <tcp_pcb_remove+0x110>)
 80126dc:	483e      	ldr	r0, [pc, #248]	; (80127d8 <tcp_pcb_remove+0x114>)
 80126de:	f007 fa57 	bl	8019b90 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d106      	bne.n	80126f6 <tcp_pcb_remove+0x32>
 80126e8:	4b39      	ldr	r3, [pc, #228]	; (80127d0 <tcp_pcb_remove+0x10c>)
 80126ea:	f640 0284 	movw	r2, #2180	; 0x884
 80126ee:	493b      	ldr	r1, [pc, #236]	; (80127dc <tcp_pcb_remove+0x118>)
 80126f0:	4839      	ldr	r0, [pc, #228]	; (80127d8 <tcp_pcb_remove+0x114>)
 80126f2:	f007 fa4d 	bl	8019b90 <iprintf>

  TCP_RMV(pcblist, pcb);
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	681b      	ldr	r3, [r3, #0]
 80126fa:	683a      	ldr	r2, [r7, #0]
 80126fc:	429a      	cmp	r2, r3
 80126fe:	d105      	bne.n	801270c <tcp_pcb_remove+0x48>
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	681b      	ldr	r3, [r3, #0]
 8012704:	68da      	ldr	r2, [r3, #12]
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	601a      	str	r2, [r3, #0]
 801270a:	e013      	b.n	8012734 <tcp_pcb_remove+0x70>
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	681b      	ldr	r3, [r3, #0]
 8012710:	60fb      	str	r3, [r7, #12]
 8012712:	e00c      	b.n	801272e <tcp_pcb_remove+0x6a>
 8012714:	68fb      	ldr	r3, [r7, #12]
 8012716:	68db      	ldr	r3, [r3, #12]
 8012718:	683a      	ldr	r2, [r7, #0]
 801271a:	429a      	cmp	r2, r3
 801271c:	d104      	bne.n	8012728 <tcp_pcb_remove+0x64>
 801271e:	683b      	ldr	r3, [r7, #0]
 8012720:	68da      	ldr	r2, [r3, #12]
 8012722:	68fb      	ldr	r3, [r7, #12]
 8012724:	60da      	str	r2, [r3, #12]
 8012726:	e005      	b.n	8012734 <tcp_pcb_remove+0x70>
 8012728:	68fb      	ldr	r3, [r7, #12]
 801272a:	68db      	ldr	r3, [r3, #12]
 801272c:	60fb      	str	r3, [r7, #12]
 801272e:	68fb      	ldr	r3, [r7, #12]
 8012730:	2b00      	cmp	r3, #0
 8012732:	d1ef      	bne.n	8012714 <tcp_pcb_remove+0x50>
 8012734:	683b      	ldr	r3, [r7, #0]
 8012736:	2200      	movs	r2, #0
 8012738:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801273a:	6838      	ldr	r0, [r7, #0]
 801273c:	f7ff ff72 	bl	8012624 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8012740:	683b      	ldr	r3, [r7, #0]
 8012742:	7d1b      	ldrb	r3, [r3, #20]
 8012744:	2b0a      	cmp	r3, #10
 8012746:	d013      	beq.n	8012770 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8012748:	683b      	ldr	r3, [r7, #0]
 801274a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 801274c:	2b01      	cmp	r3, #1
 801274e:	d00f      	beq.n	8012770 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8012750:	683b      	ldr	r3, [r7, #0]
 8012752:	8b5b      	ldrh	r3, [r3, #26]
 8012754:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8012758:	2b00      	cmp	r3, #0
 801275a:	d009      	beq.n	8012770 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 801275c:	683b      	ldr	r3, [r7, #0]
 801275e:	8b5b      	ldrh	r3, [r3, #26]
 8012760:	f043 0302 	orr.w	r3, r3, #2
 8012764:	b29a      	uxth	r2, r3
 8012766:	683b      	ldr	r3, [r7, #0]
 8012768:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801276a:	6838      	ldr	r0, [r7, #0]
 801276c:	f002 ff6e 	bl	801564c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8012770:	683b      	ldr	r3, [r7, #0]
 8012772:	7d1b      	ldrb	r3, [r3, #20]
 8012774:	2b01      	cmp	r3, #1
 8012776:	d020      	beq.n	80127ba <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8012778:	683b      	ldr	r3, [r7, #0]
 801277a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801277c:	2b00      	cmp	r3, #0
 801277e:	d006      	beq.n	801278e <tcp_pcb_remove+0xca>
 8012780:	4b13      	ldr	r3, [pc, #76]	; (80127d0 <tcp_pcb_remove+0x10c>)
 8012782:	f640 0293 	movw	r2, #2195	; 0x893
 8012786:	4916      	ldr	r1, [pc, #88]	; (80127e0 <tcp_pcb_remove+0x11c>)
 8012788:	4813      	ldr	r0, [pc, #76]	; (80127d8 <tcp_pcb_remove+0x114>)
 801278a:	f007 fa01 	bl	8019b90 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801278e:	683b      	ldr	r3, [r7, #0]
 8012790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012792:	2b00      	cmp	r3, #0
 8012794:	d006      	beq.n	80127a4 <tcp_pcb_remove+0xe0>
 8012796:	4b0e      	ldr	r3, [pc, #56]	; (80127d0 <tcp_pcb_remove+0x10c>)
 8012798:	f640 0294 	movw	r2, #2196	; 0x894
 801279c:	4911      	ldr	r1, [pc, #68]	; (80127e4 <tcp_pcb_remove+0x120>)
 801279e:	480e      	ldr	r0, [pc, #56]	; (80127d8 <tcp_pcb_remove+0x114>)
 80127a0:	f007 f9f6 	bl	8019b90 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80127a4:	683b      	ldr	r3, [r7, #0]
 80127a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d006      	beq.n	80127ba <tcp_pcb_remove+0xf6>
 80127ac:	4b08      	ldr	r3, [pc, #32]	; (80127d0 <tcp_pcb_remove+0x10c>)
 80127ae:	f640 0296 	movw	r2, #2198	; 0x896
 80127b2:	490d      	ldr	r1, [pc, #52]	; (80127e8 <tcp_pcb_remove+0x124>)
 80127b4:	4808      	ldr	r0, [pc, #32]	; (80127d8 <tcp_pcb_remove+0x114>)
 80127b6:	f007 f9eb 	bl	8019b90 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80127ba:	683b      	ldr	r3, [r7, #0]
 80127bc:	2200      	movs	r2, #0
 80127be:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80127c0:	683b      	ldr	r3, [r7, #0]
 80127c2:	2200      	movs	r2, #0
 80127c4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80127c6:	bf00      	nop
 80127c8:	3710      	adds	r7, #16
 80127ca:	46bd      	mov	sp, r7
 80127cc:	bd80      	pop	{r7, pc}
 80127ce:	bf00      	nop
 80127d0:	0801cf34 	.word	0x0801cf34
 80127d4:	0801d59c 	.word	0x0801d59c
 80127d8:	0801cf78 	.word	0x0801cf78
 80127dc:	0801d5b8 	.word	0x0801d5b8
 80127e0:	0801d5d8 	.word	0x0801d5d8
 80127e4:	0801d5f0 	.word	0x0801d5f0
 80127e8:	0801d60c 	.word	0x0801d60c

080127ec <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80127ec:	b580      	push	{r7, lr}
 80127ee:	b082      	sub	sp, #8
 80127f0:	af00      	add	r7, sp, #0
 80127f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d106      	bne.n	8012808 <tcp_next_iss+0x1c>
 80127fa:	4b0a      	ldr	r3, [pc, #40]	; (8012824 <tcp_next_iss+0x38>)
 80127fc:	f640 02af 	movw	r2, #2223	; 0x8af
 8012800:	4909      	ldr	r1, [pc, #36]	; (8012828 <tcp_next_iss+0x3c>)
 8012802:	480a      	ldr	r0, [pc, #40]	; (801282c <tcp_next_iss+0x40>)
 8012804:	f007 f9c4 	bl	8019b90 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8012808:	4b09      	ldr	r3, [pc, #36]	; (8012830 <tcp_next_iss+0x44>)
 801280a:	681a      	ldr	r2, [r3, #0]
 801280c:	4b09      	ldr	r3, [pc, #36]	; (8012834 <tcp_next_iss+0x48>)
 801280e:	681b      	ldr	r3, [r3, #0]
 8012810:	4413      	add	r3, r2
 8012812:	4a07      	ldr	r2, [pc, #28]	; (8012830 <tcp_next_iss+0x44>)
 8012814:	6013      	str	r3, [r2, #0]
  return iss;
 8012816:	4b06      	ldr	r3, [pc, #24]	; (8012830 <tcp_next_iss+0x44>)
 8012818:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801281a:	4618      	mov	r0, r3
 801281c:	3708      	adds	r7, #8
 801281e:	46bd      	mov	sp, r7
 8012820:	bd80      	pop	{r7, pc}
 8012822:	bf00      	nop
 8012824:	0801cf34 	.word	0x0801cf34
 8012828:	0801d624 	.word	0x0801d624
 801282c:	0801cf78 	.word	0x0801cf78
 8012830:	2000005c 	.word	0x2000005c
 8012834:	20007044 	.word	0x20007044

08012838 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8012838:	b580      	push	{r7, lr}
 801283a:	b086      	sub	sp, #24
 801283c:	af00      	add	r7, sp, #0
 801283e:	4603      	mov	r3, r0
 8012840:	60b9      	str	r1, [r7, #8]
 8012842:	607a      	str	r2, [r7, #4]
 8012844:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	2b00      	cmp	r3, #0
 801284a:	d106      	bne.n	801285a <tcp_eff_send_mss_netif+0x22>
 801284c:	4b14      	ldr	r3, [pc, #80]	; (80128a0 <tcp_eff_send_mss_netif+0x68>)
 801284e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8012852:	4914      	ldr	r1, [pc, #80]	; (80128a4 <tcp_eff_send_mss_netif+0x6c>)
 8012854:	4814      	ldr	r0, [pc, #80]	; (80128a8 <tcp_eff_send_mss_netif+0x70>)
 8012856:	f007 f99b 	bl	8019b90 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801285a:	68bb      	ldr	r3, [r7, #8]
 801285c:	2b00      	cmp	r3, #0
 801285e:	d101      	bne.n	8012864 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8012860:	89fb      	ldrh	r3, [r7, #14]
 8012862:	e019      	b.n	8012898 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8012864:	68bb      	ldr	r3, [r7, #8]
 8012866:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012868:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801286a:	8afb      	ldrh	r3, [r7, #22]
 801286c:	2b00      	cmp	r3, #0
 801286e:	d012      	beq.n	8012896 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8012870:	2328      	movs	r3, #40	; 0x28
 8012872:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8012874:	8afa      	ldrh	r2, [r7, #22]
 8012876:	8abb      	ldrh	r3, [r7, #20]
 8012878:	429a      	cmp	r2, r3
 801287a:	d904      	bls.n	8012886 <tcp_eff_send_mss_netif+0x4e>
 801287c:	8afa      	ldrh	r2, [r7, #22]
 801287e:	8abb      	ldrh	r3, [r7, #20]
 8012880:	1ad3      	subs	r3, r2, r3
 8012882:	b29b      	uxth	r3, r3
 8012884:	e000      	b.n	8012888 <tcp_eff_send_mss_netif+0x50>
 8012886:	2300      	movs	r3, #0
 8012888:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801288a:	8a7a      	ldrh	r2, [r7, #18]
 801288c:	89fb      	ldrh	r3, [r7, #14]
 801288e:	4293      	cmp	r3, r2
 8012890:	bf28      	it	cs
 8012892:	4613      	movcs	r3, r2
 8012894:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8012896:	89fb      	ldrh	r3, [r7, #14]
}
 8012898:	4618      	mov	r0, r3
 801289a:	3718      	adds	r7, #24
 801289c:	46bd      	mov	sp, r7
 801289e:	bd80      	pop	{r7, pc}
 80128a0:	0801cf34 	.word	0x0801cf34
 80128a4:	0801d640 	.word	0x0801d640
 80128a8:	0801cf78 	.word	0x0801cf78

080128ac <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80128ac:	b580      	push	{r7, lr}
 80128ae:	b084      	sub	sp, #16
 80128b0:	af00      	add	r7, sp, #0
 80128b2:	6078      	str	r0, [r7, #4]
 80128b4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80128b6:	683b      	ldr	r3, [r7, #0]
 80128b8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d119      	bne.n	80128f4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80128c0:	4b10      	ldr	r3, [pc, #64]	; (8012904 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80128c2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80128c6:	4910      	ldr	r1, [pc, #64]	; (8012908 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80128c8:	4810      	ldr	r0, [pc, #64]	; (801290c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80128ca:	f007 f961 	bl	8019b90 <iprintf>

  while (pcb != NULL) {
 80128ce:	e011      	b.n	80128f4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80128d0:	68fb      	ldr	r3, [r7, #12]
 80128d2:	681a      	ldr	r2, [r3, #0]
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	681b      	ldr	r3, [r3, #0]
 80128d8:	429a      	cmp	r2, r3
 80128da:	d108      	bne.n	80128ee <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80128dc:	68fb      	ldr	r3, [r7, #12]
 80128de:	68db      	ldr	r3, [r3, #12]
 80128e0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80128e2:	68f8      	ldr	r0, [r7, #12]
 80128e4:	f7fe ffc2 	bl	801186c <tcp_abort>
      pcb = next;
 80128e8:	68bb      	ldr	r3, [r7, #8]
 80128ea:	60fb      	str	r3, [r7, #12]
 80128ec:	e002      	b.n	80128f4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80128ee:	68fb      	ldr	r3, [r7, #12]
 80128f0:	68db      	ldr	r3, [r3, #12]
 80128f2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80128f4:	68fb      	ldr	r3, [r7, #12]
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d1ea      	bne.n	80128d0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80128fa:	bf00      	nop
 80128fc:	bf00      	nop
 80128fe:	3710      	adds	r7, #16
 8012900:	46bd      	mov	sp, r7
 8012902:	bd80      	pop	{r7, pc}
 8012904:	0801cf34 	.word	0x0801cf34
 8012908:	0801d668 	.word	0x0801d668
 801290c:	0801cf78 	.word	0x0801cf78

08012910 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012910:	b580      	push	{r7, lr}
 8012912:	b084      	sub	sp, #16
 8012914:	af00      	add	r7, sp, #0
 8012916:	6078      	str	r0, [r7, #4]
 8012918:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	2b00      	cmp	r3, #0
 801291e:	d02a      	beq.n	8012976 <tcp_netif_ip_addr_changed+0x66>
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	681b      	ldr	r3, [r3, #0]
 8012924:	2b00      	cmp	r3, #0
 8012926:	d026      	beq.n	8012976 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8012928:	4b15      	ldr	r3, [pc, #84]	; (8012980 <tcp_netif_ip_addr_changed+0x70>)
 801292a:	681b      	ldr	r3, [r3, #0]
 801292c:	4619      	mov	r1, r3
 801292e:	6878      	ldr	r0, [r7, #4]
 8012930:	f7ff ffbc 	bl	80128ac <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8012934:	4b13      	ldr	r3, [pc, #76]	; (8012984 <tcp_netif_ip_addr_changed+0x74>)
 8012936:	681b      	ldr	r3, [r3, #0]
 8012938:	4619      	mov	r1, r3
 801293a:	6878      	ldr	r0, [r7, #4]
 801293c:	f7ff ffb6 	bl	80128ac <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8012940:	683b      	ldr	r3, [r7, #0]
 8012942:	2b00      	cmp	r3, #0
 8012944:	d017      	beq.n	8012976 <tcp_netif_ip_addr_changed+0x66>
 8012946:	683b      	ldr	r3, [r7, #0]
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	2b00      	cmp	r3, #0
 801294c:	d013      	beq.n	8012976 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801294e:	4b0e      	ldr	r3, [pc, #56]	; (8012988 <tcp_netif_ip_addr_changed+0x78>)
 8012950:	681b      	ldr	r3, [r3, #0]
 8012952:	60fb      	str	r3, [r7, #12]
 8012954:	e00c      	b.n	8012970 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8012956:	68fb      	ldr	r3, [r7, #12]
 8012958:	681a      	ldr	r2, [r3, #0]
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	429a      	cmp	r2, r3
 8012960:	d103      	bne.n	801296a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8012962:	683b      	ldr	r3, [r7, #0]
 8012964:	681a      	ldr	r2, [r3, #0]
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801296a:	68fb      	ldr	r3, [r7, #12]
 801296c:	68db      	ldr	r3, [r3, #12]
 801296e:	60fb      	str	r3, [r7, #12]
 8012970:	68fb      	ldr	r3, [r7, #12]
 8012972:	2b00      	cmp	r3, #0
 8012974:	d1ef      	bne.n	8012956 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8012976:	bf00      	nop
 8012978:	3710      	adds	r7, #16
 801297a:	46bd      	mov	sp, r7
 801297c:	bd80      	pop	{r7, pc}
 801297e:	bf00      	nop
 8012980:	20007050 	.word	0x20007050
 8012984:	20007048 	.word	0x20007048
 8012988:	2000704c 	.word	0x2000704c

0801298c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 801298c:	b580      	push	{r7, lr}
 801298e:	b082      	sub	sp, #8
 8012990:	af00      	add	r7, sp, #0
 8012992:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012998:	2b00      	cmp	r3, #0
 801299a:	d007      	beq.n	80129ac <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80129a0:	4618      	mov	r0, r3
 80129a2:	f7ff fc3d 	bl	8012220 <tcp_segs_free>
    pcb->ooseq = NULL;
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	2200      	movs	r2, #0
 80129aa:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80129ac:	bf00      	nop
 80129ae:	3708      	adds	r7, #8
 80129b0:	46bd      	mov	sp, r7
 80129b2:	bd80      	pop	{r7, pc}

080129b4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80129b4:	b590      	push	{r4, r7, lr}
 80129b6:	b08d      	sub	sp, #52	; 0x34
 80129b8:	af04      	add	r7, sp, #16
 80129ba:	6078      	str	r0, [r7, #4]
 80129bc:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d105      	bne.n	80129d0 <tcp_input+0x1c>
 80129c4:	4b9b      	ldr	r3, [pc, #620]	; (8012c34 <tcp_input+0x280>)
 80129c6:	2283      	movs	r2, #131	; 0x83
 80129c8:	499b      	ldr	r1, [pc, #620]	; (8012c38 <tcp_input+0x284>)
 80129ca:	489c      	ldr	r0, [pc, #624]	; (8012c3c <tcp_input+0x288>)
 80129cc:	f007 f8e0 	bl	8019b90 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	685b      	ldr	r3, [r3, #4]
 80129d4:	4a9a      	ldr	r2, [pc, #616]	; (8012c40 <tcp_input+0x28c>)
 80129d6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	895b      	ldrh	r3, [r3, #10]
 80129dc:	2b13      	cmp	r3, #19
 80129de:	f240 83d1 	bls.w	8013184 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80129e2:	4b98      	ldr	r3, [pc, #608]	; (8012c44 <tcp_input+0x290>)
 80129e4:	695b      	ldr	r3, [r3, #20]
 80129e6:	4a97      	ldr	r2, [pc, #604]	; (8012c44 <tcp_input+0x290>)
 80129e8:	6812      	ldr	r2, [r2, #0]
 80129ea:	4611      	mov	r1, r2
 80129ec:	4618      	mov	r0, r3
 80129ee:	f005 fc3d 	bl	801826c <ip4_addr_isbroadcast_u32>
 80129f2:	4603      	mov	r3, r0
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	f040 83c7 	bne.w	8013188 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80129fa:	4b92      	ldr	r3, [pc, #584]	; (8012c44 <tcp_input+0x290>)
 80129fc:	695b      	ldr	r3, [r3, #20]
 80129fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8012a02:	2be0      	cmp	r3, #224	; 0xe0
 8012a04:	f000 83c0 	beq.w	8013188 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8012a08:	4b8d      	ldr	r3, [pc, #564]	; (8012c40 <tcp_input+0x28c>)
 8012a0a:	681b      	ldr	r3, [r3, #0]
 8012a0c:	899b      	ldrh	r3, [r3, #12]
 8012a0e:	b29b      	uxth	r3, r3
 8012a10:	4618      	mov	r0, r3
 8012a12:	f7fc fd9f 	bl	800f554 <lwip_htons>
 8012a16:	4603      	mov	r3, r0
 8012a18:	0b1b      	lsrs	r3, r3, #12
 8012a1a:	b29b      	uxth	r3, r3
 8012a1c:	b2db      	uxtb	r3, r3
 8012a1e:	009b      	lsls	r3, r3, #2
 8012a20:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8012a22:	7cbb      	ldrb	r3, [r7, #18]
 8012a24:	2b13      	cmp	r3, #19
 8012a26:	f240 83b1 	bls.w	801318c <tcp_input+0x7d8>
 8012a2a:	7cbb      	ldrb	r3, [r7, #18]
 8012a2c:	b29a      	uxth	r2, r3
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	891b      	ldrh	r3, [r3, #8]
 8012a32:	429a      	cmp	r2, r3
 8012a34:	f200 83aa 	bhi.w	801318c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8012a38:	7cbb      	ldrb	r3, [r7, #18]
 8012a3a:	b29b      	uxth	r3, r3
 8012a3c:	3b14      	subs	r3, #20
 8012a3e:	b29a      	uxth	r2, r3
 8012a40:	4b81      	ldr	r3, [pc, #516]	; (8012c48 <tcp_input+0x294>)
 8012a42:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8012a44:	4b81      	ldr	r3, [pc, #516]	; (8012c4c <tcp_input+0x298>)
 8012a46:	2200      	movs	r2, #0
 8012a48:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	895a      	ldrh	r2, [r3, #10]
 8012a4e:	7cbb      	ldrb	r3, [r7, #18]
 8012a50:	b29b      	uxth	r3, r3
 8012a52:	429a      	cmp	r2, r3
 8012a54:	d309      	bcc.n	8012a6a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8012a56:	4b7c      	ldr	r3, [pc, #496]	; (8012c48 <tcp_input+0x294>)
 8012a58:	881a      	ldrh	r2, [r3, #0]
 8012a5a:	4b7d      	ldr	r3, [pc, #500]	; (8012c50 <tcp_input+0x29c>)
 8012a5c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8012a5e:	7cbb      	ldrb	r3, [r7, #18]
 8012a60:	4619      	mov	r1, r3
 8012a62:	6878      	ldr	r0, [r7, #4]
 8012a64:	f7fe f8f4 	bl	8010c50 <pbuf_remove_header>
 8012a68:	e04e      	b.n	8012b08 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	681b      	ldr	r3, [r3, #0]
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d105      	bne.n	8012a7e <tcp_input+0xca>
 8012a72:	4b70      	ldr	r3, [pc, #448]	; (8012c34 <tcp_input+0x280>)
 8012a74:	22c2      	movs	r2, #194	; 0xc2
 8012a76:	4977      	ldr	r1, [pc, #476]	; (8012c54 <tcp_input+0x2a0>)
 8012a78:	4870      	ldr	r0, [pc, #448]	; (8012c3c <tcp_input+0x288>)
 8012a7a:	f007 f889 	bl	8019b90 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8012a7e:	2114      	movs	r1, #20
 8012a80:	6878      	ldr	r0, [r7, #4]
 8012a82:	f7fe f8e5 	bl	8010c50 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	895a      	ldrh	r2, [r3, #10]
 8012a8a:	4b71      	ldr	r3, [pc, #452]	; (8012c50 <tcp_input+0x29c>)
 8012a8c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8012a8e:	4b6e      	ldr	r3, [pc, #440]	; (8012c48 <tcp_input+0x294>)
 8012a90:	881a      	ldrh	r2, [r3, #0]
 8012a92:	4b6f      	ldr	r3, [pc, #444]	; (8012c50 <tcp_input+0x29c>)
 8012a94:	881b      	ldrh	r3, [r3, #0]
 8012a96:	1ad3      	subs	r3, r2, r3
 8012a98:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8012a9a:	4b6d      	ldr	r3, [pc, #436]	; (8012c50 <tcp_input+0x29c>)
 8012a9c:	881b      	ldrh	r3, [r3, #0]
 8012a9e:	4619      	mov	r1, r3
 8012aa0:	6878      	ldr	r0, [r7, #4]
 8012aa2:	f7fe f8d5 	bl	8010c50 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	681b      	ldr	r3, [r3, #0]
 8012aaa:	895b      	ldrh	r3, [r3, #10]
 8012aac:	8a3a      	ldrh	r2, [r7, #16]
 8012aae:	429a      	cmp	r2, r3
 8012ab0:	f200 836e 	bhi.w	8013190 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	681b      	ldr	r3, [r3, #0]
 8012ab8:	685b      	ldr	r3, [r3, #4]
 8012aba:	4a64      	ldr	r2, [pc, #400]	; (8012c4c <tcp_input+0x298>)
 8012abc:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	681b      	ldr	r3, [r3, #0]
 8012ac2:	8a3a      	ldrh	r2, [r7, #16]
 8012ac4:	4611      	mov	r1, r2
 8012ac6:	4618      	mov	r0, r3
 8012ac8:	f7fe f8c2 	bl	8010c50 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	891a      	ldrh	r2, [r3, #8]
 8012ad0:	8a3b      	ldrh	r3, [r7, #16]
 8012ad2:	1ad3      	subs	r3, r2, r3
 8012ad4:	b29a      	uxth	r2, r3
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	895b      	ldrh	r3, [r3, #10]
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d005      	beq.n	8012aee <tcp_input+0x13a>
 8012ae2:	4b54      	ldr	r3, [pc, #336]	; (8012c34 <tcp_input+0x280>)
 8012ae4:	22df      	movs	r2, #223	; 0xdf
 8012ae6:	495c      	ldr	r1, [pc, #368]	; (8012c58 <tcp_input+0x2a4>)
 8012ae8:	4854      	ldr	r0, [pc, #336]	; (8012c3c <tcp_input+0x288>)
 8012aea:	f007 f851 	bl	8019b90 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	891a      	ldrh	r2, [r3, #8]
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	681b      	ldr	r3, [r3, #0]
 8012af6:	891b      	ldrh	r3, [r3, #8]
 8012af8:	429a      	cmp	r2, r3
 8012afa:	d005      	beq.n	8012b08 <tcp_input+0x154>
 8012afc:	4b4d      	ldr	r3, [pc, #308]	; (8012c34 <tcp_input+0x280>)
 8012afe:	22e0      	movs	r2, #224	; 0xe0
 8012b00:	4956      	ldr	r1, [pc, #344]	; (8012c5c <tcp_input+0x2a8>)
 8012b02:	484e      	ldr	r0, [pc, #312]	; (8012c3c <tcp_input+0x288>)
 8012b04:	f007 f844 	bl	8019b90 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8012b08:	4b4d      	ldr	r3, [pc, #308]	; (8012c40 <tcp_input+0x28c>)
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	881b      	ldrh	r3, [r3, #0]
 8012b0e:	b29b      	uxth	r3, r3
 8012b10:	4a4b      	ldr	r2, [pc, #300]	; (8012c40 <tcp_input+0x28c>)
 8012b12:	6814      	ldr	r4, [r2, #0]
 8012b14:	4618      	mov	r0, r3
 8012b16:	f7fc fd1d 	bl	800f554 <lwip_htons>
 8012b1a:	4603      	mov	r3, r0
 8012b1c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8012b1e:	4b48      	ldr	r3, [pc, #288]	; (8012c40 <tcp_input+0x28c>)
 8012b20:	681b      	ldr	r3, [r3, #0]
 8012b22:	885b      	ldrh	r3, [r3, #2]
 8012b24:	b29b      	uxth	r3, r3
 8012b26:	4a46      	ldr	r2, [pc, #280]	; (8012c40 <tcp_input+0x28c>)
 8012b28:	6814      	ldr	r4, [r2, #0]
 8012b2a:	4618      	mov	r0, r3
 8012b2c:	f7fc fd12 	bl	800f554 <lwip_htons>
 8012b30:	4603      	mov	r3, r0
 8012b32:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8012b34:	4b42      	ldr	r3, [pc, #264]	; (8012c40 <tcp_input+0x28c>)
 8012b36:	681b      	ldr	r3, [r3, #0]
 8012b38:	685b      	ldr	r3, [r3, #4]
 8012b3a:	4a41      	ldr	r2, [pc, #260]	; (8012c40 <tcp_input+0x28c>)
 8012b3c:	6814      	ldr	r4, [r2, #0]
 8012b3e:	4618      	mov	r0, r3
 8012b40:	f7fc fd1d 	bl	800f57e <lwip_htonl>
 8012b44:	4603      	mov	r3, r0
 8012b46:	6063      	str	r3, [r4, #4]
 8012b48:	6863      	ldr	r3, [r4, #4]
 8012b4a:	4a45      	ldr	r2, [pc, #276]	; (8012c60 <tcp_input+0x2ac>)
 8012b4c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8012b4e:	4b3c      	ldr	r3, [pc, #240]	; (8012c40 <tcp_input+0x28c>)
 8012b50:	681b      	ldr	r3, [r3, #0]
 8012b52:	689b      	ldr	r3, [r3, #8]
 8012b54:	4a3a      	ldr	r2, [pc, #232]	; (8012c40 <tcp_input+0x28c>)
 8012b56:	6814      	ldr	r4, [r2, #0]
 8012b58:	4618      	mov	r0, r3
 8012b5a:	f7fc fd10 	bl	800f57e <lwip_htonl>
 8012b5e:	4603      	mov	r3, r0
 8012b60:	60a3      	str	r3, [r4, #8]
 8012b62:	68a3      	ldr	r3, [r4, #8]
 8012b64:	4a3f      	ldr	r2, [pc, #252]	; (8012c64 <tcp_input+0x2b0>)
 8012b66:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8012b68:	4b35      	ldr	r3, [pc, #212]	; (8012c40 <tcp_input+0x28c>)
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	89db      	ldrh	r3, [r3, #14]
 8012b6e:	b29b      	uxth	r3, r3
 8012b70:	4a33      	ldr	r2, [pc, #204]	; (8012c40 <tcp_input+0x28c>)
 8012b72:	6814      	ldr	r4, [r2, #0]
 8012b74:	4618      	mov	r0, r3
 8012b76:	f7fc fced 	bl	800f554 <lwip_htons>
 8012b7a:	4603      	mov	r3, r0
 8012b7c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8012b7e:	4b30      	ldr	r3, [pc, #192]	; (8012c40 <tcp_input+0x28c>)
 8012b80:	681b      	ldr	r3, [r3, #0]
 8012b82:	899b      	ldrh	r3, [r3, #12]
 8012b84:	b29b      	uxth	r3, r3
 8012b86:	4618      	mov	r0, r3
 8012b88:	f7fc fce4 	bl	800f554 <lwip_htons>
 8012b8c:	4603      	mov	r3, r0
 8012b8e:	b2db      	uxtb	r3, r3
 8012b90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012b94:	b2da      	uxtb	r2, r3
 8012b96:	4b34      	ldr	r3, [pc, #208]	; (8012c68 <tcp_input+0x2b4>)
 8012b98:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	891a      	ldrh	r2, [r3, #8]
 8012b9e:	4b33      	ldr	r3, [pc, #204]	; (8012c6c <tcp_input+0x2b8>)
 8012ba0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8012ba2:	4b31      	ldr	r3, [pc, #196]	; (8012c68 <tcp_input+0x2b4>)
 8012ba4:	781b      	ldrb	r3, [r3, #0]
 8012ba6:	f003 0303 	and.w	r3, r3, #3
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	d00c      	beq.n	8012bc8 <tcp_input+0x214>
    tcplen++;
 8012bae:	4b2f      	ldr	r3, [pc, #188]	; (8012c6c <tcp_input+0x2b8>)
 8012bb0:	881b      	ldrh	r3, [r3, #0]
 8012bb2:	3301      	adds	r3, #1
 8012bb4:	b29a      	uxth	r2, r3
 8012bb6:	4b2d      	ldr	r3, [pc, #180]	; (8012c6c <tcp_input+0x2b8>)
 8012bb8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	891a      	ldrh	r2, [r3, #8]
 8012bbe:	4b2b      	ldr	r3, [pc, #172]	; (8012c6c <tcp_input+0x2b8>)
 8012bc0:	881b      	ldrh	r3, [r3, #0]
 8012bc2:	429a      	cmp	r2, r3
 8012bc4:	f200 82e6 	bhi.w	8013194 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8012bc8:	2300      	movs	r3, #0
 8012bca:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012bcc:	4b28      	ldr	r3, [pc, #160]	; (8012c70 <tcp_input+0x2bc>)
 8012bce:	681b      	ldr	r3, [r3, #0]
 8012bd0:	61fb      	str	r3, [r7, #28]
 8012bd2:	e09d      	b.n	8012d10 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8012bd4:	69fb      	ldr	r3, [r7, #28]
 8012bd6:	7d1b      	ldrb	r3, [r3, #20]
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d105      	bne.n	8012be8 <tcp_input+0x234>
 8012bdc:	4b15      	ldr	r3, [pc, #84]	; (8012c34 <tcp_input+0x280>)
 8012bde:	22fb      	movs	r2, #251	; 0xfb
 8012be0:	4924      	ldr	r1, [pc, #144]	; (8012c74 <tcp_input+0x2c0>)
 8012be2:	4816      	ldr	r0, [pc, #88]	; (8012c3c <tcp_input+0x288>)
 8012be4:	f006 ffd4 	bl	8019b90 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8012be8:	69fb      	ldr	r3, [r7, #28]
 8012bea:	7d1b      	ldrb	r3, [r3, #20]
 8012bec:	2b0a      	cmp	r3, #10
 8012bee:	d105      	bne.n	8012bfc <tcp_input+0x248>
 8012bf0:	4b10      	ldr	r3, [pc, #64]	; (8012c34 <tcp_input+0x280>)
 8012bf2:	22fc      	movs	r2, #252	; 0xfc
 8012bf4:	4920      	ldr	r1, [pc, #128]	; (8012c78 <tcp_input+0x2c4>)
 8012bf6:	4811      	ldr	r0, [pc, #68]	; (8012c3c <tcp_input+0x288>)
 8012bf8:	f006 ffca 	bl	8019b90 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8012bfc:	69fb      	ldr	r3, [r7, #28]
 8012bfe:	7d1b      	ldrb	r3, [r3, #20]
 8012c00:	2b01      	cmp	r3, #1
 8012c02:	d105      	bne.n	8012c10 <tcp_input+0x25c>
 8012c04:	4b0b      	ldr	r3, [pc, #44]	; (8012c34 <tcp_input+0x280>)
 8012c06:	22fd      	movs	r2, #253	; 0xfd
 8012c08:	491c      	ldr	r1, [pc, #112]	; (8012c7c <tcp_input+0x2c8>)
 8012c0a:	480c      	ldr	r0, [pc, #48]	; (8012c3c <tcp_input+0x288>)
 8012c0c:	f006 ffc0 	bl	8019b90 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012c10:	69fb      	ldr	r3, [r7, #28]
 8012c12:	7a1b      	ldrb	r3, [r3, #8]
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d033      	beq.n	8012c80 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012c18:	69fb      	ldr	r3, [r7, #28]
 8012c1a:	7a1a      	ldrb	r2, [r3, #8]
 8012c1c:	4b09      	ldr	r3, [pc, #36]	; (8012c44 <tcp_input+0x290>)
 8012c1e:	685b      	ldr	r3, [r3, #4]
 8012c20:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012c24:	3301      	adds	r3, #1
 8012c26:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012c28:	429a      	cmp	r2, r3
 8012c2a:	d029      	beq.n	8012c80 <tcp_input+0x2cc>
      prev = pcb;
 8012c2c:	69fb      	ldr	r3, [r7, #28]
 8012c2e:	61bb      	str	r3, [r7, #24]
      continue;
 8012c30:	e06b      	b.n	8012d0a <tcp_input+0x356>
 8012c32:	bf00      	nop
 8012c34:	0801d69c 	.word	0x0801d69c
 8012c38:	0801d6d0 	.word	0x0801d6d0
 8012c3c:	0801d6e8 	.word	0x0801d6e8
 8012c40:	2000706c 	.word	0x2000706c
 8012c44:	20000768 	.word	0x20000768
 8012c48:	20007070 	.word	0x20007070
 8012c4c:	20007074 	.word	0x20007074
 8012c50:	20007072 	.word	0x20007072
 8012c54:	0801d710 	.word	0x0801d710
 8012c58:	0801d720 	.word	0x0801d720
 8012c5c:	0801d72c 	.word	0x0801d72c
 8012c60:	2000707c 	.word	0x2000707c
 8012c64:	20007080 	.word	0x20007080
 8012c68:	20007088 	.word	0x20007088
 8012c6c:	20007086 	.word	0x20007086
 8012c70:	20007050 	.word	0x20007050
 8012c74:	0801d74c 	.word	0x0801d74c
 8012c78:	0801d774 	.word	0x0801d774
 8012c7c:	0801d7a0 	.word	0x0801d7a0
    }

    if (pcb->remote_port == tcphdr->src &&
 8012c80:	69fb      	ldr	r3, [r7, #28]
 8012c82:	8b1a      	ldrh	r2, [r3, #24]
 8012c84:	4b72      	ldr	r3, [pc, #456]	; (8012e50 <tcp_input+0x49c>)
 8012c86:	681b      	ldr	r3, [r3, #0]
 8012c88:	881b      	ldrh	r3, [r3, #0]
 8012c8a:	b29b      	uxth	r3, r3
 8012c8c:	429a      	cmp	r2, r3
 8012c8e:	d13a      	bne.n	8012d06 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8012c90:	69fb      	ldr	r3, [r7, #28]
 8012c92:	8ada      	ldrh	r2, [r3, #22]
 8012c94:	4b6e      	ldr	r3, [pc, #440]	; (8012e50 <tcp_input+0x49c>)
 8012c96:	681b      	ldr	r3, [r3, #0]
 8012c98:	885b      	ldrh	r3, [r3, #2]
 8012c9a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8012c9c:	429a      	cmp	r2, r3
 8012c9e:	d132      	bne.n	8012d06 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012ca0:	69fb      	ldr	r3, [r7, #28]
 8012ca2:	685a      	ldr	r2, [r3, #4]
 8012ca4:	4b6b      	ldr	r3, [pc, #428]	; (8012e54 <tcp_input+0x4a0>)
 8012ca6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8012ca8:	429a      	cmp	r2, r3
 8012caa:	d12c      	bne.n	8012d06 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012cac:	69fb      	ldr	r3, [r7, #28]
 8012cae:	681a      	ldr	r2, [r3, #0]
 8012cb0:	4b68      	ldr	r3, [pc, #416]	; (8012e54 <tcp_input+0x4a0>)
 8012cb2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012cb4:	429a      	cmp	r2, r3
 8012cb6:	d126      	bne.n	8012d06 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8012cb8:	69fb      	ldr	r3, [r7, #28]
 8012cba:	68db      	ldr	r3, [r3, #12]
 8012cbc:	69fa      	ldr	r2, [r7, #28]
 8012cbe:	429a      	cmp	r2, r3
 8012cc0:	d106      	bne.n	8012cd0 <tcp_input+0x31c>
 8012cc2:	4b65      	ldr	r3, [pc, #404]	; (8012e58 <tcp_input+0x4a4>)
 8012cc4:	f240 120d 	movw	r2, #269	; 0x10d
 8012cc8:	4964      	ldr	r1, [pc, #400]	; (8012e5c <tcp_input+0x4a8>)
 8012cca:	4865      	ldr	r0, [pc, #404]	; (8012e60 <tcp_input+0x4ac>)
 8012ccc:	f006 ff60 	bl	8019b90 <iprintf>
      if (prev != NULL) {
 8012cd0:	69bb      	ldr	r3, [r7, #24]
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d00a      	beq.n	8012cec <tcp_input+0x338>
        prev->next = pcb->next;
 8012cd6:	69fb      	ldr	r3, [r7, #28]
 8012cd8:	68da      	ldr	r2, [r3, #12]
 8012cda:	69bb      	ldr	r3, [r7, #24]
 8012cdc:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8012cde:	4b61      	ldr	r3, [pc, #388]	; (8012e64 <tcp_input+0x4b0>)
 8012ce0:	681a      	ldr	r2, [r3, #0]
 8012ce2:	69fb      	ldr	r3, [r7, #28]
 8012ce4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8012ce6:	4a5f      	ldr	r2, [pc, #380]	; (8012e64 <tcp_input+0x4b0>)
 8012ce8:	69fb      	ldr	r3, [r7, #28]
 8012cea:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8012cec:	69fb      	ldr	r3, [r7, #28]
 8012cee:	68db      	ldr	r3, [r3, #12]
 8012cf0:	69fa      	ldr	r2, [r7, #28]
 8012cf2:	429a      	cmp	r2, r3
 8012cf4:	d111      	bne.n	8012d1a <tcp_input+0x366>
 8012cf6:	4b58      	ldr	r3, [pc, #352]	; (8012e58 <tcp_input+0x4a4>)
 8012cf8:	f240 1215 	movw	r2, #277	; 0x115
 8012cfc:	495a      	ldr	r1, [pc, #360]	; (8012e68 <tcp_input+0x4b4>)
 8012cfe:	4858      	ldr	r0, [pc, #352]	; (8012e60 <tcp_input+0x4ac>)
 8012d00:	f006 ff46 	bl	8019b90 <iprintf>
      break;
 8012d04:	e009      	b.n	8012d1a <tcp_input+0x366>
    }
    prev = pcb;
 8012d06:	69fb      	ldr	r3, [r7, #28]
 8012d08:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012d0a:	69fb      	ldr	r3, [r7, #28]
 8012d0c:	68db      	ldr	r3, [r3, #12]
 8012d0e:	61fb      	str	r3, [r7, #28]
 8012d10:	69fb      	ldr	r3, [r7, #28]
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	f47f af5e 	bne.w	8012bd4 <tcp_input+0x220>
 8012d18:	e000      	b.n	8012d1c <tcp_input+0x368>
      break;
 8012d1a:	bf00      	nop
  }

  if (pcb == NULL) {
 8012d1c:	69fb      	ldr	r3, [r7, #28]
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	f040 80aa 	bne.w	8012e78 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012d24:	4b51      	ldr	r3, [pc, #324]	; (8012e6c <tcp_input+0x4b8>)
 8012d26:	681b      	ldr	r3, [r3, #0]
 8012d28:	61fb      	str	r3, [r7, #28]
 8012d2a:	e03f      	b.n	8012dac <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012d2c:	69fb      	ldr	r3, [r7, #28]
 8012d2e:	7d1b      	ldrb	r3, [r3, #20]
 8012d30:	2b0a      	cmp	r3, #10
 8012d32:	d006      	beq.n	8012d42 <tcp_input+0x38e>
 8012d34:	4b48      	ldr	r3, [pc, #288]	; (8012e58 <tcp_input+0x4a4>)
 8012d36:	f240 121f 	movw	r2, #287	; 0x11f
 8012d3a:	494d      	ldr	r1, [pc, #308]	; (8012e70 <tcp_input+0x4bc>)
 8012d3c:	4848      	ldr	r0, [pc, #288]	; (8012e60 <tcp_input+0x4ac>)
 8012d3e:	f006 ff27 	bl	8019b90 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012d42:	69fb      	ldr	r3, [r7, #28]
 8012d44:	7a1b      	ldrb	r3, [r3, #8]
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	d009      	beq.n	8012d5e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012d4a:	69fb      	ldr	r3, [r7, #28]
 8012d4c:	7a1a      	ldrb	r2, [r3, #8]
 8012d4e:	4b41      	ldr	r3, [pc, #260]	; (8012e54 <tcp_input+0x4a0>)
 8012d50:	685b      	ldr	r3, [r3, #4]
 8012d52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012d56:	3301      	adds	r3, #1
 8012d58:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012d5a:	429a      	cmp	r2, r3
 8012d5c:	d122      	bne.n	8012da4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8012d5e:	69fb      	ldr	r3, [r7, #28]
 8012d60:	8b1a      	ldrh	r2, [r3, #24]
 8012d62:	4b3b      	ldr	r3, [pc, #236]	; (8012e50 <tcp_input+0x49c>)
 8012d64:	681b      	ldr	r3, [r3, #0]
 8012d66:	881b      	ldrh	r3, [r3, #0]
 8012d68:	b29b      	uxth	r3, r3
 8012d6a:	429a      	cmp	r2, r3
 8012d6c:	d11b      	bne.n	8012da6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8012d6e:	69fb      	ldr	r3, [r7, #28]
 8012d70:	8ada      	ldrh	r2, [r3, #22]
 8012d72:	4b37      	ldr	r3, [pc, #220]	; (8012e50 <tcp_input+0x49c>)
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	885b      	ldrh	r3, [r3, #2]
 8012d78:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8012d7a:	429a      	cmp	r2, r3
 8012d7c:	d113      	bne.n	8012da6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012d7e:	69fb      	ldr	r3, [r7, #28]
 8012d80:	685a      	ldr	r2, [r3, #4]
 8012d82:	4b34      	ldr	r3, [pc, #208]	; (8012e54 <tcp_input+0x4a0>)
 8012d84:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8012d86:	429a      	cmp	r2, r3
 8012d88:	d10d      	bne.n	8012da6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012d8a:	69fb      	ldr	r3, [r7, #28]
 8012d8c:	681a      	ldr	r2, [r3, #0]
 8012d8e:	4b31      	ldr	r3, [pc, #196]	; (8012e54 <tcp_input+0x4a0>)
 8012d90:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012d92:	429a      	cmp	r2, r3
 8012d94:	d107      	bne.n	8012da6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8012d96:	69f8      	ldr	r0, [r7, #28]
 8012d98:	f000 fb56 	bl	8013448 <tcp_timewait_input>
        }
        pbuf_free(p);
 8012d9c:	6878      	ldr	r0, [r7, #4]
 8012d9e:	f7fd ffdd 	bl	8010d5c <pbuf_free>
        return;
 8012da2:	e1fd      	b.n	80131a0 <tcp_input+0x7ec>
        continue;
 8012da4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012da6:	69fb      	ldr	r3, [r7, #28]
 8012da8:	68db      	ldr	r3, [r3, #12]
 8012daa:	61fb      	str	r3, [r7, #28]
 8012dac:	69fb      	ldr	r3, [r7, #28]
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d1bc      	bne.n	8012d2c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8012db2:	2300      	movs	r3, #0
 8012db4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012db6:	4b2f      	ldr	r3, [pc, #188]	; (8012e74 <tcp_input+0x4c0>)
 8012db8:	681b      	ldr	r3, [r3, #0]
 8012dba:	617b      	str	r3, [r7, #20]
 8012dbc:	e02a      	b.n	8012e14 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8012dbe:	697b      	ldr	r3, [r7, #20]
 8012dc0:	7a1b      	ldrb	r3, [r3, #8]
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d00c      	beq.n	8012de0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012dc6:	697b      	ldr	r3, [r7, #20]
 8012dc8:	7a1a      	ldrb	r2, [r3, #8]
 8012dca:	4b22      	ldr	r3, [pc, #136]	; (8012e54 <tcp_input+0x4a0>)
 8012dcc:	685b      	ldr	r3, [r3, #4]
 8012dce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012dd2:	3301      	adds	r3, #1
 8012dd4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8012dd6:	429a      	cmp	r2, r3
 8012dd8:	d002      	beq.n	8012de0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8012dda:	697b      	ldr	r3, [r7, #20]
 8012ddc:	61bb      	str	r3, [r7, #24]
        continue;
 8012dde:	e016      	b.n	8012e0e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8012de0:	697b      	ldr	r3, [r7, #20]
 8012de2:	8ada      	ldrh	r2, [r3, #22]
 8012de4:	4b1a      	ldr	r3, [pc, #104]	; (8012e50 <tcp_input+0x49c>)
 8012de6:	681b      	ldr	r3, [r3, #0]
 8012de8:	885b      	ldrh	r3, [r3, #2]
 8012dea:	b29b      	uxth	r3, r3
 8012dec:	429a      	cmp	r2, r3
 8012dee:	d10c      	bne.n	8012e0a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8012df0:	697b      	ldr	r3, [r7, #20]
 8012df2:	681a      	ldr	r2, [r3, #0]
 8012df4:	4b17      	ldr	r3, [pc, #92]	; (8012e54 <tcp_input+0x4a0>)
 8012df6:	695b      	ldr	r3, [r3, #20]
 8012df8:	429a      	cmp	r2, r3
 8012dfa:	d00f      	beq.n	8012e1c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8012dfc:	697b      	ldr	r3, [r7, #20]
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d00d      	beq.n	8012e1e <tcp_input+0x46a>
 8012e02:	697b      	ldr	r3, [r7, #20]
 8012e04:	681b      	ldr	r3, [r3, #0]
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	d009      	beq.n	8012e1e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8012e0a:	697b      	ldr	r3, [r7, #20]
 8012e0c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012e0e:	697b      	ldr	r3, [r7, #20]
 8012e10:	68db      	ldr	r3, [r3, #12]
 8012e12:	617b      	str	r3, [r7, #20]
 8012e14:	697b      	ldr	r3, [r7, #20]
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d1d1      	bne.n	8012dbe <tcp_input+0x40a>
 8012e1a:	e000      	b.n	8012e1e <tcp_input+0x46a>
            break;
 8012e1c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8012e1e:	697b      	ldr	r3, [r7, #20]
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d029      	beq.n	8012e78 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8012e24:	69bb      	ldr	r3, [r7, #24]
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d00a      	beq.n	8012e40 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8012e2a:	697b      	ldr	r3, [r7, #20]
 8012e2c:	68da      	ldr	r2, [r3, #12]
 8012e2e:	69bb      	ldr	r3, [r7, #24]
 8012e30:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8012e32:	4b10      	ldr	r3, [pc, #64]	; (8012e74 <tcp_input+0x4c0>)
 8012e34:	681a      	ldr	r2, [r3, #0]
 8012e36:	697b      	ldr	r3, [r7, #20]
 8012e38:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8012e3a:	4a0e      	ldr	r2, [pc, #56]	; (8012e74 <tcp_input+0x4c0>)
 8012e3c:	697b      	ldr	r3, [r7, #20]
 8012e3e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8012e40:	6978      	ldr	r0, [r7, #20]
 8012e42:	f000 fa03 	bl	801324c <tcp_listen_input>
      }
      pbuf_free(p);
 8012e46:	6878      	ldr	r0, [r7, #4]
 8012e48:	f7fd ff88 	bl	8010d5c <pbuf_free>
      return;
 8012e4c:	e1a8      	b.n	80131a0 <tcp_input+0x7ec>
 8012e4e:	bf00      	nop
 8012e50:	2000706c 	.word	0x2000706c
 8012e54:	20000768 	.word	0x20000768
 8012e58:	0801d69c 	.word	0x0801d69c
 8012e5c:	0801d7c8 	.word	0x0801d7c8
 8012e60:	0801d6e8 	.word	0x0801d6e8
 8012e64:	20007050 	.word	0x20007050
 8012e68:	0801d7f4 	.word	0x0801d7f4
 8012e6c:	20007054 	.word	0x20007054
 8012e70:	0801d820 	.word	0x0801d820
 8012e74:	2000704c 	.word	0x2000704c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8012e78:	69fb      	ldr	r3, [r7, #28]
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	f000 8158 	beq.w	8013130 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8012e80:	4b95      	ldr	r3, [pc, #596]	; (80130d8 <tcp_input+0x724>)
 8012e82:	2200      	movs	r2, #0
 8012e84:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	891a      	ldrh	r2, [r3, #8]
 8012e8a:	4b93      	ldr	r3, [pc, #588]	; (80130d8 <tcp_input+0x724>)
 8012e8c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8012e8e:	4a92      	ldr	r2, [pc, #584]	; (80130d8 <tcp_input+0x724>)
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8012e94:	4b91      	ldr	r3, [pc, #580]	; (80130dc <tcp_input+0x728>)
 8012e96:	681b      	ldr	r3, [r3, #0]
 8012e98:	4a8f      	ldr	r2, [pc, #572]	; (80130d8 <tcp_input+0x724>)
 8012e9a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8012e9c:	4b90      	ldr	r3, [pc, #576]	; (80130e0 <tcp_input+0x72c>)
 8012e9e:	2200      	movs	r2, #0
 8012ea0:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8012ea2:	4b90      	ldr	r3, [pc, #576]	; (80130e4 <tcp_input+0x730>)
 8012ea4:	2200      	movs	r2, #0
 8012ea6:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8012ea8:	4b8f      	ldr	r3, [pc, #572]	; (80130e8 <tcp_input+0x734>)
 8012eaa:	2200      	movs	r2, #0
 8012eac:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8012eae:	4b8f      	ldr	r3, [pc, #572]	; (80130ec <tcp_input+0x738>)
 8012eb0:	781b      	ldrb	r3, [r3, #0]
 8012eb2:	f003 0308 	and.w	r3, r3, #8
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d006      	beq.n	8012ec8 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	7b5b      	ldrb	r3, [r3, #13]
 8012ebe:	f043 0301 	orr.w	r3, r3, #1
 8012ec2:	b2da      	uxtb	r2, r3
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8012ec8:	69fb      	ldr	r3, [r7, #28]
 8012eca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d017      	beq.n	8012f00 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012ed0:	69f8      	ldr	r0, [r7, #28]
 8012ed2:	f7ff f927 	bl	8012124 <tcp_process_refused_data>
 8012ed6:	4603      	mov	r3, r0
 8012ed8:	f113 0f0d 	cmn.w	r3, #13
 8012edc:	d007      	beq.n	8012eee <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012ede:	69fb      	ldr	r3, [r7, #28]
 8012ee0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d00c      	beq.n	8012f00 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012ee6:	4b82      	ldr	r3, [pc, #520]	; (80130f0 <tcp_input+0x73c>)
 8012ee8:	881b      	ldrh	r3, [r3, #0]
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d008      	beq.n	8012f00 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8012eee:	69fb      	ldr	r3, [r7, #28]
 8012ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	f040 80e4 	bne.w	80130c0 <tcp_input+0x70c>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8012ef8:	69f8      	ldr	r0, [r7, #28]
 8012efa:	f003 f9ad 	bl	8016258 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8012efe:	e0df      	b.n	80130c0 <tcp_input+0x70c>
      }
    }
    tcp_input_pcb = pcb;
 8012f00:	4a7c      	ldr	r2, [pc, #496]	; (80130f4 <tcp_input+0x740>)
 8012f02:	69fb      	ldr	r3, [r7, #28]
 8012f04:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8012f06:	69f8      	ldr	r0, [r7, #28]
 8012f08:	f000 fb18 	bl	801353c <tcp_process>
 8012f0c:	4603      	mov	r3, r0
 8012f0e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8012f10:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012f14:	f113 0f0d 	cmn.w	r3, #13
 8012f18:	f000 80d4 	beq.w	80130c4 <tcp_input+0x710>
      if (recv_flags & TF_RESET) {
 8012f1c:	4b71      	ldr	r3, [pc, #452]	; (80130e4 <tcp_input+0x730>)
 8012f1e:	781b      	ldrb	r3, [r3, #0]
 8012f20:	f003 0308 	and.w	r3, r3, #8
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d015      	beq.n	8012f54 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8012f28:	69fb      	ldr	r3, [r7, #28]
 8012f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d008      	beq.n	8012f44 <tcp_input+0x590>
 8012f32:	69fb      	ldr	r3, [r7, #28]
 8012f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012f38:	69fa      	ldr	r2, [r7, #28]
 8012f3a:	6912      	ldr	r2, [r2, #16]
 8012f3c:	f06f 010d 	mvn.w	r1, #13
 8012f40:	4610      	mov	r0, r2
 8012f42:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8012f44:	69f9      	ldr	r1, [r7, #28]
 8012f46:	486c      	ldr	r0, [pc, #432]	; (80130f8 <tcp_input+0x744>)
 8012f48:	f7ff fbbc 	bl	80126c4 <tcp_pcb_remove>
        tcp_free(pcb);
 8012f4c:	69f8      	ldr	r0, [r7, #28]
 8012f4e:	f7fe f9a5 	bl	801129c <tcp_free>
 8012f52:	e0da      	b.n	801310a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8012f54:	2300      	movs	r3, #0
 8012f56:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8012f58:	4b63      	ldr	r3, [pc, #396]	; (80130e8 <tcp_input+0x734>)
 8012f5a:	881b      	ldrh	r3, [r3, #0]
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d01d      	beq.n	8012f9c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8012f60:	4b61      	ldr	r3, [pc, #388]	; (80130e8 <tcp_input+0x734>)
 8012f62:	881b      	ldrh	r3, [r3, #0]
 8012f64:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8012f66:	69fb      	ldr	r3, [r7, #28]
 8012f68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d00a      	beq.n	8012f86 <tcp_input+0x5d2>
 8012f70:	69fb      	ldr	r3, [r7, #28]
 8012f72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012f76:	69fa      	ldr	r2, [r7, #28]
 8012f78:	6910      	ldr	r0, [r2, #16]
 8012f7a:	89fa      	ldrh	r2, [r7, #14]
 8012f7c:	69f9      	ldr	r1, [r7, #28]
 8012f7e:	4798      	blx	r3
 8012f80:	4603      	mov	r3, r0
 8012f82:	74fb      	strb	r3, [r7, #19]
 8012f84:	e001      	b.n	8012f8a <tcp_input+0x5d6>
 8012f86:	2300      	movs	r3, #0
 8012f88:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012f8a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012f8e:	f113 0f0d 	cmn.w	r3, #13
 8012f92:	f000 8099 	beq.w	80130c8 <tcp_input+0x714>
              goto aborted;
            }
          }
          recv_acked = 0;
 8012f96:	4b54      	ldr	r3, [pc, #336]	; (80130e8 <tcp_input+0x734>)
 8012f98:	2200      	movs	r2, #0
 8012f9a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8012f9c:	69f8      	ldr	r0, [r7, #28]
 8012f9e:	f000 f915 	bl	80131cc <tcp_input_delayed_close>
 8012fa2:	4603      	mov	r3, r0
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	f040 8091 	bne.w	80130cc <tcp_input+0x718>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8012faa:	4b4d      	ldr	r3, [pc, #308]	; (80130e0 <tcp_input+0x72c>)
 8012fac:	681b      	ldr	r3, [r3, #0]
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d041      	beq.n	8013036 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8012fb2:	69fb      	ldr	r3, [r7, #28]
 8012fb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d006      	beq.n	8012fc8 <tcp_input+0x614>
 8012fba:	4b50      	ldr	r3, [pc, #320]	; (80130fc <tcp_input+0x748>)
 8012fbc:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8012fc0:	494f      	ldr	r1, [pc, #316]	; (8013100 <tcp_input+0x74c>)
 8012fc2:	4850      	ldr	r0, [pc, #320]	; (8013104 <tcp_input+0x750>)
 8012fc4:	f006 fde4 	bl	8019b90 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8012fc8:	69fb      	ldr	r3, [r7, #28]
 8012fca:	8b5b      	ldrh	r3, [r3, #26]
 8012fcc:	f003 0310 	and.w	r3, r3, #16
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d008      	beq.n	8012fe6 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8012fd4:	4b42      	ldr	r3, [pc, #264]	; (80130e0 <tcp_input+0x72c>)
 8012fd6:	681b      	ldr	r3, [r3, #0]
 8012fd8:	4618      	mov	r0, r3
 8012fda:	f7fd febf 	bl	8010d5c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8012fde:	69f8      	ldr	r0, [r7, #28]
 8012fe0:	f7fe fc44 	bl	801186c <tcp_abort>
            goto aborted;
 8012fe4:	e091      	b.n	801310a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8012fe6:	69fb      	ldr	r3, [r7, #28]
 8012fe8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d00c      	beq.n	801300a <tcp_input+0x656>
 8012ff0:	69fb      	ldr	r3, [r7, #28]
 8012ff2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012ff6:	69fb      	ldr	r3, [r7, #28]
 8012ff8:	6918      	ldr	r0, [r3, #16]
 8012ffa:	4b39      	ldr	r3, [pc, #228]	; (80130e0 <tcp_input+0x72c>)
 8012ffc:	681a      	ldr	r2, [r3, #0]
 8012ffe:	2300      	movs	r3, #0
 8013000:	69f9      	ldr	r1, [r7, #28]
 8013002:	47a0      	blx	r4
 8013004:	4603      	mov	r3, r0
 8013006:	74fb      	strb	r3, [r7, #19]
 8013008:	e008      	b.n	801301c <tcp_input+0x668>
 801300a:	4b35      	ldr	r3, [pc, #212]	; (80130e0 <tcp_input+0x72c>)
 801300c:	681a      	ldr	r2, [r3, #0]
 801300e:	2300      	movs	r3, #0
 8013010:	69f9      	ldr	r1, [r7, #28]
 8013012:	2000      	movs	r0, #0
 8013014:	f7ff f95e 	bl	80122d4 <tcp_recv_null>
 8013018:	4603      	mov	r3, r0
 801301a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801301c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013020:	f113 0f0d 	cmn.w	r3, #13
 8013024:	d054      	beq.n	80130d0 <tcp_input+0x71c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8013026:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801302a:	2b00      	cmp	r3, #0
 801302c:	d003      	beq.n	8013036 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801302e:	4b2c      	ldr	r3, [pc, #176]	; (80130e0 <tcp_input+0x72c>)
 8013030:	681a      	ldr	r2, [r3, #0]
 8013032:	69fb      	ldr	r3, [r7, #28]
 8013034:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8013036:	4b2b      	ldr	r3, [pc, #172]	; (80130e4 <tcp_input+0x730>)
 8013038:	781b      	ldrb	r3, [r3, #0]
 801303a:	f003 0320 	and.w	r3, r3, #32
 801303e:	2b00      	cmp	r3, #0
 8013040:	d031      	beq.n	80130a6 <tcp_input+0x6f2>
          if (pcb->refused_data != NULL) {
 8013042:	69fb      	ldr	r3, [r7, #28]
 8013044:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013046:	2b00      	cmp	r3, #0
 8013048:	d009      	beq.n	801305e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801304a:	69fb      	ldr	r3, [r7, #28]
 801304c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801304e:	7b5a      	ldrb	r2, [r3, #13]
 8013050:	69fb      	ldr	r3, [r7, #28]
 8013052:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013054:	f042 0220 	orr.w	r2, r2, #32
 8013058:	b2d2      	uxtb	r2, r2
 801305a:	735a      	strb	r2, [r3, #13]
 801305c:	e023      	b.n	80130a6 <tcp_input+0x6f2>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801305e:	69fb      	ldr	r3, [r7, #28]
 8013060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013062:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8013066:	4293      	cmp	r3, r2
 8013068:	d005      	beq.n	8013076 <tcp_input+0x6c2>
              pcb->rcv_wnd++;
 801306a:	69fb      	ldr	r3, [r7, #28]
 801306c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801306e:	3301      	adds	r3, #1
 8013070:	b29a      	uxth	r2, r3
 8013072:	69fb      	ldr	r3, [r7, #28]
 8013074:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8013076:	69fb      	ldr	r3, [r7, #28]
 8013078:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801307c:	2b00      	cmp	r3, #0
 801307e:	d00b      	beq.n	8013098 <tcp_input+0x6e4>
 8013080:	69fb      	ldr	r3, [r7, #28]
 8013082:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8013086:	69fb      	ldr	r3, [r7, #28]
 8013088:	6918      	ldr	r0, [r3, #16]
 801308a:	2300      	movs	r3, #0
 801308c:	2200      	movs	r2, #0
 801308e:	69f9      	ldr	r1, [r7, #28]
 8013090:	47a0      	blx	r4
 8013092:	4603      	mov	r3, r0
 8013094:	74fb      	strb	r3, [r7, #19]
 8013096:	e001      	b.n	801309c <tcp_input+0x6e8>
 8013098:	2300      	movs	r3, #0
 801309a:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801309c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80130a0:	f113 0f0d 	cmn.w	r3, #13
 80130a4:	d016      	beq.n	80130d4 <tcp_input+0x720>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80130a6:	4b13      	ldr	r3, [pc, #76]	; (80130f4 <tcp_input+0x740>)
 80130a8:	2200      	movs	r2, #0
 80130aa:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80130ac:	69f8      	ldr	r0, [r7, #28]
 80130ae:	f000 f88d 	bl	80131cc <tcp_input_delayed_close>
 80130b2:	4603      	mov	r3, r0
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d127      	bne.n	8013108 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80130b8:	69f8      	ldr	r0, [r7, #28]
 80130ba:	f002 fac7 	bl	801564c <tcp_output>
 80130be:	e024      	b.n	801310a <tcp_input+0x756>
        goto aborted;
 80130c0:	bf00      	nop
 80130c2:	e022      	b.n	801310a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80130c4:	bf00      	nop
 80130c6:	e020      	b.n	801310a <tcp_input+0x756>
              goto aborted;
 80130c8:	bf00      	nop
 80130ca:	e01e      	b.n	801310a <tcp_input+0x756>
          goto aborted;
 80130cc:	bf00      	nop
 80130ce:	e01c      	b.n	801310a <tcp_input+0x756>
            goto aborted;
 80130d0:	bf00      	nop
 80130d2:	e01a      	b.n	801310a <tcp_input+0x756>
              goto aborted;
 80130d4:	bf00      	nop
 80130d6:	e018      	b.n	801310a <tcp_input+0x756>
 80130d8:	2000705c 	.word	0x2000705c
 80130dc:	2000706c 	.word	0x2000706c
 80130e0:	2000708c 	.word	0x2000708c
 80130e4:	20007089 	.word	0x20007089
 80130e8:	20007084 	.word	0x20007084
 80130ec:	20007088 	.word	0x20007088
 80130f0:	20007086 	.word	0x20007086
 80130f4:	20007090 	.word	0x20007090
 80130f8:	20007050 	.word	0x20007050
 80130fc:	0801d69c 	.word	0x0801d69c
 8013100:	0801d850 	.word	0x0801d850
 8013104:	0801d6e8 	.word	0x0801d6e8
          goto aborted;
 8013108:	bf00      	nop
    tcp_input_pcb = NULL;
 801310a:	4b27      	ldr	r3, [pc, #156]	; (80131a8 <tcp_input+0x7f4>)
 801310c:	2200      	movs	r2, #0
 801310e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8013110:	4b26      	ldr	r3, [pc, #152]	; (80131ac <tcp_input+0x7f8>)
 8013112:	2200      	movs	r2, #0
 8013114:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8013116:	4b26      	ldr	r3, [pc, #152]	; (80131b0 <tcp_input+0x7fc>)
 8013118:	685b      	ldr	r3, [r3, #4]
 801311a:	2b00      	cmp	r3, #0
 801311c:	d03f      	beq.n	801319e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 801311e:	4b24      	ldr	r3, [pc, #144]	; (80131b0 <tcp_input+0x7fc>)
 8013120:	685b      	ldr	r3, [r3, #4]
 8013122:	4618      	mov	r0, r3
 8013124:	f7fd fe1a 	bl	8010d5c <pbuf_free>
      inseg.p = NULL;
 8013128:	4b21      	ldr	r3, [pc, #132]	; (80131b0 <tcp_input+0x7fc>)
 801312a:	2200      	movs	r2, #0
 801312c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801312e:	e036      	b.n	801319e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8013130:	4b20      	ldr	r3, [pc, #128]	; (80131b4 <tcp_input+0x800>)
 8013132:	681b      	ldr	r3, [r3, #0]
 8013134:	899b      	ldrh	r3, [r3, #12]
 8013136:	b29b      	uxth	r3, r3
 8013138:	4618      	mov	r0, r3
 801313a:	f7fc fa0b 	bl	800f554 <lwip_htons>
 801313e:	4603      	mov	r3, r0
 8013140:	b2db      	uxtb	r3, r3
 8013142:	f003 0304 	and.w	r3, r3, #4
 8013146:	2b00      	cmp	r3, #0
 8013148:	d118      	bne.n	801317c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801314a:	4b1b      	ldr	r3, [pc, #108]	; (80131b8 <tcp_input+0x804>)
 801314c:	6819      	ldr	r1, [r3, #0]
 801314e:	4b1b      	ldr	r3, [pc, #108]	; (80131bc <tcp_input+0x808>)
 8013150:	881b      	ldrh	r3, [r3, #0]
 8013152:	461a      	mov	r2, r3
 8013154:	4b1a      	ldr	r3, [pc, #104]	; (80131c0 <tcp_input+0x80c>)
 8013156:	681b      	ldr	r3, [r3, #0]
 8013158:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801315a:	4b16      	ldr	r3, [pc, #88]	; (80131b4 <tcp_input+0x800>)
 801315c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801315e:	885b      	ldrh	r3, [r3, #2]
 8013160:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013162:	4a14      	ldr	r2, [pc, #80]	; (80131b4 <tcp_input+0x800>)
 8013164:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013166:	8812      	ldrh	r2, [r2, #0]
 8013168:	b292      	uxth	r2, r2
 801316a:	9202      	str	r2, [sp, #8]
 801316c:	9301      	str	r3, [sp, #4]
 801316e:	4b15      	ldr	r3, [pc, #84]	; (80131c4 <tcp_input+0x810>)
 8013170:	9300      	str	r3, [sp, #0]
 8013172:	4b15      	ldr	r3, [pc, #84]	; (80131c8 <tcp_input+0x814>)
 8013174:	4602      	mov	r2, r0
 8013176:	2000      	movs	r0, #0
 8013178:	f003 f81c 	bl	80161b4 <tcp_rst>
    pbuf_free(p);
 801317c:	6878      	ldr	r0, [r7, #4]
 801317e:	f7fd fded 	bl	8010d5c <pbuf_free>
  return;
 8013182:	e00c      	b.n	801319e <tcp_input+0x7ea>
    goto dropped;
 8013184:	bf00      	nop
 8013186:	e006      	b.n	8013196 <tcp_input+0x7e2>
    goto dropped;
 8013188:	bf00      	nop
 801318a:	e004      	b.n	8013196 <tcp_input+0x7e2>
    goto dropped;
 801318c:	bf00      	nop
 801318e:	e002      	b.n	8013196 <tcp_input+0x7e2>
      goto dropped;
 8013190:	bf00      	nop
 8013192:	e000      	b.n	8013196 <tcp_input+0x7e2>
      goto dropped;
 8013194:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8013196:	6878      	ldr	r0, [r7, #4]
 8013198:	f7fd fde0 	bl	8010d5c <pbuf_free>
 801319c:	e000      	b.n	80131a0 <tcp_input+0x7ec>
  return;
 801319e:	bf00      	nop
}
 80131a0:	3724      	adds	r7, #36	; 0x24
 80131a2:	46bd      	mov	sp, r7
 80131a4:	bd90      	pop	{r4, r7, pc}
 80131a6:	bf00      	nop
 80131a8:	20007090 	.word	0x20007090
 80131ac:	2000708c 	.word	0x2000708c
 80131b0:	2000705c 	.word	0x2000705c
 80131b4:	2000706c 	.word	0x2000706c
 80131b8:	20007080 	.word	0x20007080
 80131bc:	20007086 	.word	0x20007086
 80131c0:	2000707c 	.word	0x2000707c
 80131c4:	20000778 	.word	0x20000778
 80131c8:	2000077c 	.word	0x2000077c

080131cc <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80131cc:	b580      	push	{r7, lr}
 80131ce:	b082      	sub	sp, #8
 80131d0:	af00      	add	r7, sp, #0
 80131d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d106      	bne.n	80131e8 <tcp_input_delayed_close+0x1c>
 80131da:	4b17      	ldr	r3, [pc, #92]	; (8013238 <tcp_input_delayed_close+0x6c>)
 80131dc:	f240 225a 	movw	r2, #602	; 0x25a
 80131e0:	4916      	ldr	r1, [pc, #88]	; (801323c <tcp_input_delayed_close+0x70>)
 80131e2:	4817      	ldr	r0, [pc, #92]	; (8013240 <tcp_input_delayed_close+0x74>)
 80131e4:	f006 fcd4 	bl	8019b90 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80131e8:	4b16      	ldr	r3, [pc, #88]	; (8013244 <tcp_input_delayed_close+0x78>)
 80131ea:	781b      	ldrb	r3, [r3, #0]
 80131ec:	f003 0310 	and.w	r3, r3, #16
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	d01c      	beq.n	801322e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	8b5b      	ldrh	r3, [r3, #26]
 80131f8:	f003 0310 	and.w	r3, r3, #16
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d10d      	bne.n	801321c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013206:	2b00      	cmp	r3, #0
 8013208:	d008      	beq.n	801321c <tcp_input_delayed_close+0x50>
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013210:	687a      	ldr	r2, [r7, #4]
 8013212:	6912      	ldr	r2, [r2, #16]
 8013214:	f06f 010e 	mvn.w	r1, #14
 8013218:	4610      	mov	r0, r2
 801321a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801321c:	6879      	ldr	r1, [r7, #4]
 801321e:	480a      	ldr	r0, [pc, #40]	; (8013248 <tcp_input_delayed_close+0x7c>)
 8013220:	f7ff fa50 	bl	80126c4 <tcp_pcb_remove>
    tcp_free(pcb);
 8013224:	6878      	ldr	r0, [r7, #4]
 8013226:	f7fe f839 	bl	801129c <tcp_free>
    return 1;
 801322a:	2301      	movs	r3, #1
 801322c:	e000      	b.n	8013230 <tcp_input_delayed_close+0x64>
  }
  return 0;
 801322e:	2300      	movs	r3, #0
}
 8013230:	4618      	mov	r0, r3
 8013232:	3708      	adds	r7, #8
 8013234:	46bd      	mov	sp, r7
 8013236:	bd80      	pop	{r7, pc}
 8013238:	0801d69c 	.word	0x0801d69c
 801323c:	0801d86c 	.word	0x0801d86c
 8013240:	0801d6e8 	.word	0x0801d6e8
 8013244:	20007089 	.word	0x20007089
 8013248:	20007050 	.word	0x20007050

0801324c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801324c:	b590      	push	{r4, r7, lr}
 801324e:	b08b      	sub	sp, #44	; 0x2c
 8013250:	af04      	add	r7, sp, #16
 8013252:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8013254:	4b6f      	ldr	r3, [pc, #444]	; (8013414 <tcp_listen_input+0x1c8>)
 8013256:	781b      	ldrb	r3, [r3, #0]
 8013258:	f003 0304 	and.w	r3, r3, #4
 801325c:	2b00      	cmp	r3, #0
 801325e:	f040 80d2 	bne.w	8013406 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	2b00      	cmp	r3, #0
 8013266:	d106      	bne.n	8013276 <tcp_listen_input+0x2a>
 8013268:	4b6b      	ldr	r3, [pc, #428]	; (8013418 <tcp_listen_input+0x1cc>)
 801326a:	f240 2281 	movw	r2, #641	; 0x281
 801326e:	496b      	ldr	r1, [pc, #428]	; (801341c <tcp_listen_input+0x1d0>)
 8013270:	486b      	ldr	r0, [pc, #428]	; (8013420 <tcp_listen_input+0x1d4>)
 8013272:	f006 fc8d 	bl	8019b90 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8013276:	4b67      	ldr	r3, [pc, #412]	; (8013414 <tcp_listen_input+0x1c8>)
 8013278:	781b      	ldrb	r3, [r3, #0]
 801327a:	f003 0310 	and.w	r3, r3, #16
 801327e:	2b00      	cmp	r3, #0
 8013280:	d019      	beq.n	80132b6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013282:	4b68      	ldr	r3, [pc, #416]	; (8013424 <tcp_listen_input+0x1d8>)
 8013284:	6819      	ldr	r1, [r3, #0]
 8013286:	4b68      	ldr	r3, [pc, #416]	; (8013428 <tcp_listen_input+0x1dc>)
 8013288:	881b      	ldrh	r3, [r3, #0]
 801328a:	461a      	mov	r2, r3
 801328c:	4b67      	ldr	r3, [pc, #412]	; (801342c <tcp_listen_input+0x1e0>)
 801328e:	681b      	ldr	r3, [r3, #0]
 8013290:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013292:	4b67      	ldr	r3, [pc, #412]	; (8013430 <tcp_listen_input+0x1e4>)
 8013294:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013296:	885b      	ldrh	r3, [r3, #2]
 8013298:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801329a:	4a65      	ldr	r2, [pc, #404]	; (8013430 <tcp_listen_input+0x1e4>)
 801329c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801329e:	8812      	ldrh	r2, [r2, #0]
 80132a0:	b292      	uxth	r2, r2
 80132a2:	9202      	str	r2, [sp, #8]
 80132a4:	9301      	str	r3, [sp, #4]
 80132a6:	4b63      	ldr	r3, [pc, #396]	; (8013434 <tcp_listen_input+0x1e8>)
 80132a8:	9300      	str	r3, [sp, #0]
 80132aa:	4b63      	ldr	r3, [pc, #396]	; (8013438 <tcp_listen_input+0x1ec>)
 80132ac:	4602      	mov	r2, r0
 80132ae:	6878      	ldr	r0, [r7, #4]
 80132b0:	f002 ff80 	bl	80161b4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80132b4:	e0a9      	b.n	801340a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80132b6:	4b57      	ldr	r3, [pc, #348]	; (8013414 <tcp_listen_input+0x1c8>)
 80132b8:	781b      	ldrb	r3, [r3, #0]
 80132ba:	f003 0302 	and.w	r3, r3, #2
 80132be:	2b00      	cmp	r3, #0
 80132c0:	f000 80a3 	beq.w	801340a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	7d5b      	ldrb	r3, [r3, #21]
 80132c8:	4618      	mov	r0, r3
 80132ca:	f7ff f927 	bl	801251c <tcp_alloc>
 80132ce:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80132d0:	697b      	ldr	r3, [r7, #20]
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d111      	bne.n	80132fa <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	699b      	ldr	r3, [r3, #24]
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d00a      	beq.n	80132f4 <tcp_listen_input+0xa8>
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	699b      	ldr	r3, [r3, #24]
 80132e2:	687a      	ldr	r2, [r7, #4]
 80132e4:	6910      	ldr	r0, [r2, #16]
 80132e6:	f04f 32ff 	mov.w	r2, #4294967295
 80132ea:	2100      	movs	r1, #0
 80132ec:	4798      	blx	r3
 80132ee:	4603      	mov	r3, r0
 80132f0:	73bb      	strb	r3, [r7, #14]
      return;
 80132f2:	e08b      	b.n	801340c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80132f4:	23f0      	movs	r3, #240	; 0xf0
 80132f6:	73bb      	strb	r3, [r7, #14]
      return;
 80132f8:	e088      	b.n	801340c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80132fa:	4b50      	ldr	r3, [pc, #320]	; (801343c <tcp_listen_input+0x1f0>)
 80132fc:	695a      	ldr	r2, [r3, #20]
 80132fe:	697b      	ldr	r3, [r7, #20]
 8013300:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8013302:	4b4e      	ldr	r3, [pc, #312]	; (801343c <tcp_listen_input+0x1f0>)
 8013304:	691a      	ldr	r2, [r3, #16]
 8013306:	697b      	ldr	r3, [r7, #20]
 8013308:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	8ada      	ldrh	r2, [r3, #22]
 801330e:	697b      	ldr	r3, [r7, #20]
 8013310:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8013312:	4b47      	ldr	r3, [pc, #284]	; (8013430 <tcp_listen_input+0x1e4>)
 8013314:	681b      	ldr	r3, [r3, #0]
 8013316:	881b      	ldrh	r3, [r3, #0]
 8013318:	b29a      	uxth	r2, r3
 801331a:	697b      	ldr	r3, [r7, #20]
 801331c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801331e:	697b      	ldr	r3, [r7, #20]
 8013320:	2203      	movs	r2, #3
 8013322:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8013324:	4b41      	ldr	r3, [pc, #260]	; (801342c <tcp_listen_input+0x1e0>)
 8013326:	681b      	ldr	r3, [r3, #0]
 8013328:	1c5a      	adds	r2, r3, #1
 801332a:	697b      	ldr	r3, [r7, #20]
 801332c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801332e:	697b      	ldr	r3, [r7, #20]
 8013330:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013332:	697b      	ldr	r3, [r7, #20]
 8013334:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8013336:	6978      	ldr	r0, [r7, #20]
 8013338:	f7ff fa58 	bl	80127ec <tcp_next_iss>
 801333c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801333e:	697b      	ldr	r3, [r7, #20]
 8013340:	693a      	ldr	r2, [r7, #16]
 8013342:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8013344:	697b      	ldr	r3, [r7, #20]
 8013346:	693a      	ldr	r2, [r7, #16]
 8013348:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801334a:	697b      	ldr	r3, [r7, #20]
 801334c:	693a      	ldr	r2, [r7, #16]
 801334e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8013350:	697b      	ldr	r3, [r7, #20]
 8013352:	693a      	ldr	r2, [r7, #16]
 8013354:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8013356:	4b35      	ldr	r3, [pc, #212]	; (801342c <tcp_listen_input+0x1e0>)
 8013358:	681b      	ldr	r3, [r3, #0]
 801335a:	1e5a      	subs	r2, r3, #1
 801335c:	697b      	ldr	r3, [r7, #20]
 801335e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	691a      	ldr	r2, [r3, #16]
 8013364:	697b      	ldr	r3, [r7, #20]
 8013366:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8013368:	697b      	ldr	r3, [r7, #20]
 801336a:	687a      	ldr	r2, [r7, #4]
 801336c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	7a5b      	ldrb	r3, [r3, #9]
 8013372:	f003 030c 	and.w	r3, r3, #12
 8013376:	b2da      	uxtb	r2, r3
 8013378:	697b      	ldr	r3, [r7, #20]
 801337a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	7a1a      	ldrb	r2, [r3, #8]
 8013380:	697b      	ldr	r3, [r7, #20]
 8013382:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8013384:	4b2e      	ldr	r3, [pc, #184]	; (8013440 <tcp_listen_input+0x1f4>)
 8013386:	681a      	ldr	r2, [r3, #0]
 8013388:	697b      	ldr	r3, [r7, #20]
 801338a:	60da      	str	r2, [r3, #12]
 801338c:	4a2c      	ldr	r2, [pc, #176]	; (8013440 <tcp_listen_input+0x1f4>)
 801338e:	697b      	ldr	r3, [r7, #20]
 8013390:	6013      	str	r3, [r2, #0]
 8013392:	f003 f8d1 	bl	8016538 <tcp_timer_needed>
 8013396:	4b2b      	ldr	r3, [pc, #172]	; (8013444 <tcp_listen_input+0x1f8>)
 8013398:	2201      	movs	r2, #1
 801339a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801339c:	6978      	ldr	r0, [r7, #20]
 801339e:	f001 fd8f 	bl	8014ec0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80133a2:	4b23      	ldr	r3, [pc, #140]	; (8013430 <tcp_listen_input+0x1e4>)
 80133a4:	681b      	ldr	r3, [r3, #0]
 80133a6:	89db      	ldrh	r3, [r3, #14]
 80133a8:	b29a      	uxth	r2, r3
 80133aa:	697b      	ldr	r3, [r7, #20]
 80133ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80133b0:	697b      	ldr	r3, [r7, #20]
 80133b2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80133b6:	697b      	ldr	r3, [r7, #20]
 80133b8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80133bc:	697b      	ldr	r3, [r7, #20]
 80133be:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80133c0:	697b      	ldr	r3, [r7, #20]
 80133c2:	3304      	adds	r3, #4
 80133c4:	4618      	mov	r0, r3
 80133c6:	f004 fcbb 	bl	8017d40 <ip4_route>
 80133ca:	4601      	mov	r1, r0
 80133cc:	697b      	ldr	r3, [r7, #20]
 80133ce:	3304      	adds	r3, #4
 80133d0:	461a      	mov	r2, r3
 80133d2:	4620      	mov	r0, r4
 80133d4:	f7ff fa30 	bl	8012838 <tcp_eff_send_mss_netif>
 80133d8:	4603      	mov	r3, r0
 80133da:	461a      	mov	r2, r3
 80133dc:	697b      	ldr	r3, [r7, #20]
 80133de:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80133e0:	2112      	movs	r1, #18
 80133e2:	6978      	ldr	r0, [r7, #20]
 80133e4:	f002 f844 	bl	8015470 <tcp_enqueue_flags>
 80133e8:	4603      	mov	r3, r0
 80133ea:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80133ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d004      	beq.n	80133fe <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80133f4:	2100      	movs	r1, #0
 80133f6:	6978      	ldr	r0, [r7, #20]
 80133f8:	f7fe f97a 	bl	80116f0 <tcp_abandon>
      return;
 80133fc:	e006      	b.n	801340c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80133fe:	6978      	ldr	r0, [r7, #20]
 8013400:	f002 f924 	bl	801564c <tcp_output>
  return;
 8013404:	e001      	b.n	801340a <tcp_listen_input+0x1be>
    return;
 8013406:	bf00      	nop
 8013408:	e000      	b.n	801340c <tcp_listen_input+0x1c0>
  return;
 801340a:	bf00      	nop
}
 801340c:	371c      	adds	r7, #28
 801340e:	46bd      	mov	sp, r7
 8013410:	bd90      	pop	{r4, r7, pc}
 8013412:	bf00      	nop
 8013414:	20007088 	.word	0x20007088
 8013418:	0801d69c 	.word	0x0801d69c
 801341c:	0801d894 	.word	0x0801d894
 8013420:	0801d6e8 	.word	0x0801d6e8
 8013424:	20007080 	.word	0x20007080
 8013428:	20007086 	.word	0x20007086
 801342c:	2000707c 	.word	0x2000707c
 8013430:	2000706c 	.word	0x2000706c
 8013434:	20000778 	.word	0x20000778
 8013438:	2000077c 	.word	0x2000077c
 801343c:	20000768 	.word	0x20000768
 8013440:	20007050 	.word	0x20007050
 8013444:	20007058 	.word	0x20007058

08013448 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8013448:	b580      	push	{r7, lr}
 801344a:	b086      	sub	sp, #24
 801344c:	af04      	add	r7, sp, #16
 801344e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8013450:	4b2f      	ldr	r3, [pc, #188]	; (8013510 <tcp_timewait_input+0xc8>)
 8013452:	781b      	ldrb	r3, [r3, #0]
 8013454:	f003 0304 	and.w	r3, r3, #4
 8013458:	2b00      	cmp	r3, #0
 801345a:	d153      	bne.n	8013504 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	2b00      	cmp	r3, #0
 8013460:	d106      	bne.n	8013470 <tcp_timewait_input+0x28>
 8013462:	4b2c      	ldr	r3, [pc, #176]	; (8013514 <tcp_timewait_input+0xcc>)
 8013464:	f240 22ee 	movw	r2, #750	; 0x2ee
 8013468:	492b      	ldr	r1, [pc, #172]	; (8013518 <tcp_timewait_input+0xd0>)
 801346a:	482c      	ldr	r0, [pc, #176]	; (801351c <tcp_timewait_input+0xd4>)
 801346c:	f006 fb90 	bl	8019b90 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8013470:	4b27      	ldr	r3, [pc, #156]	; (8013510 <tcp_timewait_input+0xc8>)
 8013472:	781b      	ldrb	r3, [r3, #0]
 8013474:	f003 0302 	and.w	r3, r3, #2
 8013478:	2b00      	cmp	r3, #0
 801347a:	d02a      	beq.n	80134d2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801347c:	4b28      	ldr	r3, [pc, #160]	; (8013520 <tcp_timewait_input+0xd8>)
 801347e:	681a      	ldr	r2, [r3, #0]
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013484:	1ad3      	subs	r3, r2, r3
 8013486:	2b00      	cmp	r3, #0
 8013488:	db2d      	blt.n	80134e6 <tcp_timewait_input+0x9e>
 801348a:	4b25      	ldr	r3, [pc, #148]	; (8013520 <tcp_timewait_input+0xd8>)
 801348c:	681a      	ldr	r2, [r3, #0]
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013492:	6879      	ldr	r1, [r7, #4]
 8013494:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013496:	440b      	add	r3, r1
 8013498:	1ad3      	subs	r3, r2, r3
 801349a:	2b00      	cmp	r3, #0
 801349c:	dc23      	bgt.n	80134e6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801349e:	4b21      	ldr	r3, [pc, #132]	; (8013524 <tcp_timewait_input+0xdc>)
 80134a0:	6819      	ldr	r1, [r3, #0]
 80134a2:	4b21      	ldr	r3, [pc, #132]	; (8013528 <tcp_timewait_input+0xe0>)
 80134a4:	881b      	ldrh	r3, [r3, #0]
 80134a6:	461a      	mov	r2, r3
 80134a8:	4b1d      	ldr	r3, [pc, #116]	; (8013520 <tcp_timewait_input+0xd8>)
 80134aa:	681b      	ldr	r3, [r3, #0]
 80134ac:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80134ae:	4b1f      	ldr	r3, [pc, #124]	; (801352c <tcp_timewait_input+0xe4>)
 80134b0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80134b2:	885b      	ldrh	r3, [r3, #2]
 80134b4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80134b6:	4a1d      	ldr	r2, [pc, #116]	; (801352c <tcp_timewait_input+0xe4>)
 80134b8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80134ba:	8812      	ldrh	r2, [r2, #0]
 80134bc:	b292      	uxth	r2, r2
 80134be:	9202      	str	r2, [sp, #8]
 80134c0:	9301      	str	r3, [sp, #4]
 80134c2:	4b1b      	ldr	r3, [pc, #108]	; (8013530 <tcp_timewait_input+0xe8>)
 80134c4:	9300      	str	r3, [sp, #0]
 80134c6:	4b1b      	ldr	r3, [pc, #108]	; (8013534 <tcp_timewait_input+0xec>)
 80134c8:	4602      	mov	r2, r0
 80134ca:	6878      	ldr	r0, [r7, #4]
 80134cc:	f002 fe72 	bl	80161b4 <tcp_rst>
      return;
 80134d0:	e01b      	b.n	801350a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80134d2:	4b0f      	ldr	r3, [pc, #60]	; (8013510 <tcp_timewait_input+0xc8>)
 80134d4:	781b      	ldrb	r3, [r3, #0]
 80134d6:	f003 0301 	and.w	r3, r3, #1
 80134da:	2b00      	cmp	r3, #0
 80134dc:	d003      	beq.n	80134e6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80134de:	4b16      	ldr	r3, [pc, #88]	; (8013538 <tcp_timewait_input+0xf0>)
 80134e0:	681a      	ldr	r2, [r3, #0]
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80134e6:	4b10      	ldr	r3, [pc, #64]	; (8013528 <tcp_timewait_input+0xe0>)
 80134e8:	881b      	ldrh	r3, [r3, #0]
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d00c      	beq.n	8013508 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	8b5b      	ldrh	r3, [r3, #26]
 80134f2:	f043 0302 	orr.w	r3, r3, #2
 80134f6:	b29a      	uxth	r2, r3
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80134fc:	6878      	ldr	r0, [r7, #4]
 80134fe:	f002 f8a5 	bl	801564c <tcp_output>
  }
  return;
 8013502:	e001      	b.n	8013508 <tcp_timewait_input+0xc0>
    return;
 8013504:	bf00      	nop
 8013506:	e000      	b.n	801350a <tcp_timewait_input+0xc2>
  return;
 8013508:	bf00      	nop
}
 801350a:	3708      	adds	r7, #8
 801350c:	46bd      	mov	sp, r7
 801350e:	bd80      	pop	{r7, pc}
 8013510:	20007088 	.word	0x20007088
 8013514:	0801d69c 	.word	0x0801d69c
 8013518:	0801d8b4 	.word	0x0801d8b4
 801351c:	0801d6e8 	.word	0x0801d6e8
 8013520:	2000707c 	.word	0x2000707c
 8013524:	20007080 	.word	0x20007080
 8013528:	20007086 	.word	0x20007086
 801352c:	2000706c 	.word	0x2000706c
 8013530:	20000778 	.word	0x20000778
 8013534:	2000077c 	.word	0x2000077c
 8013538:	20007044 	.word	0x20007044

0801353c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801353c:	b590      	push	{r4, r7, lr}
 801353e:	b08d      	sub	sp, #52	; 0x34
 8013540:	af04      	add	r7, sp, #16
 8013542:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8013544:	2300      	movs	r3, #0
 8013546:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8013548:	2300      	movs	r3, #0
 801354a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	2b00      	cmp	r3, #0
 8013550:	d106      	bne.n	8013560 <tcp_process+0x24>
 8013552:	4b9d      	ldr	r3, [pc, #628]	; (80137c8 <tcp_process+0x28c>)
 8013554:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8013558:	499c      	ldr	r1, [pc, #624]	; (80137cc <tcp_process+0x290>)
 801355a:	489d      	ldr	r0, [pc, #628]	; (80137d0 <tcp_process+0x294>)
 801355c:	f006 fb18 	bl	8019b90 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8013560:	4b9c      	ldr	r3, [pc, #624]	; (80137d4 <tcp_process+0x298>)
 8013562:	781b      	ldrb	r3, [r3, #0]
 8013564:	f003 0304 	and.w	r3, r3, #4
 8013568:	2b00      	cmp	r3, #0
 801356a:	d04e      	beq.n	801360a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	7d1b      	ldrb	r3, [r3, #20]
 8013570:	2b02      	cmp	r3, #2
 8013572:	d108      	bne.n	8013586 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013578:	4b97      	ldr	r3, [pc, #604]	; (80137d8 <tcp_process+0x29c>)
 801357a:	681b      	ldr	r3, [r3, #0]
 801357c:	429a      	cmp	r2, r3
 801357e:	d123      	bne.n	80135c8 <tcp_process+0x8c>
        acceptable = 1;
 8013580:	2301      	movs	r3, #1
 8013582:	76fb      	strb	r3, [r7, #27]
 8013584:	e020      	b.n	80135c8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801358a:	4b94      	ldr	r3, [pc, #592]	; (80137dc <tcp_process+0x2a0>)
 801358c:	681b      	ldr	r3, [r3, #0]
 801358e:	429a      	cmp	r2, r3
 8013590:	d102      	bne.n	8013598 <tcp_process+0x5c>
        acceptable = 1;
 8013592:	2301      	movs	r3, #1
 8013594:	76fb      	strb	r3, [r7, #27]
 8013596:	e017      	b.n	80135c8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013598:	4b90      	ldr	r3, [pc, #576]	; (80137dc <tcp_process+0x2a0>)
 801359a:	681a      	ldr	r2, [r3, #0]
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135a0:	1ad3      	subs	r3, r2, r3
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	db10      	blt.n	80135c8 <tcp_process+0x8c>
 80135a6:	4b8d      	ldr	r3, [pc, #564]	; (80137dc <tcp_process+0x2a0>)
 80135a8:	681a      	ldr	r2, [r3, #0]
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135ae:	6879      	ldr	r1, [r7, #4]
 80135b0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80135b2:	440b      	add	r3, r1
 80135b4:	1ad3      	subs	r3, r2, r3
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	dc06      	bgt.n	80135c8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	8b5b      	ldrh	r3, [r3, #26]
 80135be:	f043 0302 	orr.w	r3, r3, #2
 80135c2:	b29a      	uxth	r2, r3
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80135c8:	7efb      	ldrb	r3, [r7, #27]
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d01b      	beq.n	8013606 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	7d1b      	ldrb	r3, [r3, #20]
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	d106      	bne.n	80135e4 <tcp_process+0xa8>
 80135d6:	4b7c      	ldr	r3, [pc, #496]	; (80137c8 <tcp_process+0x28c>)
 80135d8:	f44f 724e 	mov.w	r2, #824	; 0x338
 80135dc:	4980      	ldr	r1, [pc, #512]	; (80137e0 <tcp_process+0x2a4>)
 80135de:	487c      	ldr	r0, [pc, #496]	; (80137d0 <tcp_process+0x294>)
 80135e0:	f006 fad6 	bl	8019b90 <iprintf>
      recv_flags |= TF_RESET;
 80135e4:	4b7f      	ldr	r3, [pc, #508]	; (80137e4 <tcp_process+0x2a8>)
 80135e6:	781b      	ldrb	r3, [r3, #0]
 80135e8:	f043 0308 	orr.w	r3, r3, #8
 80135ec:	b2da      	uxtb	r2, r3
 80135ee:	4b7d      	ldr	r3, [pc, #500]	; (80137e4 <tcp_process+0x2a8>)
 80135f0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	8b5b      	ldrh	r3, [r3, #26]
 80135f6:	f023 0301 	bic.w	r3, r3, #1
 80135fa:	b29a      	uxth	r2, r3
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8013600:	f06f 030d 	mvn.w	r3, #13
 8013604:	e37a      	b.n	8013cfc <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8013606:	2300      	movs	r3, #0
 8013608:	e378      	b.n	8013cfc <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801360a:	4b72      	ldr	r3, [pc, #456]	; (80137d4 <tcp_process+0x298>)
 801360c:	781b      	ldrb	r3, [r3, #0]
 801360e:	f003 0302 	and.w	r3, r3, #2
 8013612:	2b00      	cmp	r3, #0
 8013614:	d010      	beq.n	8013638 <tcp_process+0xfc>
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	7d1b      	ldrb	r3, [r3, #20]
 801361a:	2b02      	cmp	r3, #2
 801361c:	d00c      	beq.n	8013638 <tcp_process+0xfc>
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	7d1b      	ldrb	r3, [r3, #20]
 8013622:	2b03      	cmp	r3, #3
 8013624:	d008      	beq.n	8013638 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	8b5b      	ldrh	r3, [r3, #26]
 801362a:	f043 0302 	orr.w	r3, r3, #2
 801362e:	b29a      	uxth	r2, r3
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8013634:	2300      	movs	r3, #0
 8013636:	e361      	b.n	8013cfc <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	8b5b      	ldrh	r3, [r3, #26]
 801363c:	f003 0310 	and.w	r3, r3, #16
 8013640:	2b00      	cmp	r3, #0
 8013642:	d103      	bne.n	801364c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8013644:	4b68      	ldr	r3, [pc, #416]	; (80137e8 <tcp_process+0x2ac>)
 8013646:	681a      	ldr	r2, [r3, #0]
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	2200      	movs	r2, #0
 8013650:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	2200      	movs	r2, #0
 8013658:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 801365c:	6878      	ldr	r0, [r7, #4]
 801365e:	f001 fc2f 	bl	8014ec0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	7d1b      	ldrb	r3, [r3, #20]
 8013666:	3b02      	subs	r3, #2
 8013668:	2b07      	cmp	r3, #7
 801366a:	f200 8337 	bhi.w	8013cdc <tcp_process+0x7a0>
 801366e:	a201      	add	r2, pc, #4	; (adr r2, 8013674 <tcp_process+0x138>)
 8013670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013674:	08013695 	.word	0x08013695
 8013678:	080138c5 	.word	0x080138c5
 801367c:	08013a3d 	.word	0x08013a3d
 8013680:	08013a67 	.word	0x08013a67
 8013684:	08013b8b 	.word	0x08013b8b
 8013688:	08013a3d 	.word	0x08013a3d
 801368c:	08013c17 	.word	0x08013c17
 8013690:	08013ca7 	.word	0x08013ca7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8013694:	4b4f      	ldr	r3, [pc, #316]	; (80137d4 <tcp_process+0x298>)
 8013696:	781b      	ldrb	r3, [r3, #0]
 8013698:	f003 0310 	and.w	r3, r3, #16
 801369c:	2b00      	cmp	r3, #0
 801369e:	f000 80e4 	beq.w	801386a <tcp_process+0x32e>
 80136a2:	4b4c      	ldr	r3, [pc, #304]	; (80137d4 <tcp_process+0x298>)
 80136a4:	781b      	ldrb	r3, [r3, #0]
 80136a6:	f003 0302 	and.w	r3, r3, #2
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	f000 80dd 	beq.w	801386a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80136b4:	1c5a      	adds	r2, r3, #1
 80136b6:	4b48      	ldr	r3, [pc, #288]	; (80137d8 <tcp_process+0x29c>)
 80136b8:	681b      	ldr	r3, [r3, #0]
 80136ba:	429a      	cmp	r2, r3
 80136bc:	f040 80d5 	bne.w	801386a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80136c0:	4b46      	ldr	r3, [pc, #280]	; (80137dc <tcp_process+0x2a0>)
 80136c2:	681b      	ldr	r3, [r3, #0]
 80136c4:	1c5a      	adds	r2, r3, #1
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80136d2:	4b41      	ldr	r3, [pc, #260]	; (80137d8 <tcp_process+0x29c>)
 80136d4:	681a      	ldr	r2, [r3, #0]
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80136da:	4b44      	ldr	r3, [pc, #272]	; (80137ec <tcp_process+0x2b0>)
 80136dc:	681b      	ldr	r3, [r3, #0]
 80136de:	89db      	ldrh	r3, [r3, #14]
 80136e0:	b29a      	uxth	r2, r3
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80136f4:	4b39      	ldr	r3, [pc, #228]	; (80137dc <tcp_process+0x2a0>)
 80136f6:	681b      	ldr	r3, [r3, #0]
 80136f8:	1e5a      	subs	r2, r3, #1
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	2204      	movs	r2, #4
 8013702:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	3304      	adds	r3, #4
 801370c:	4618      	mov	r0, r3
 801370e:	f004 fb17 	bl	8017d40 <ip4_route>
 8013712:	4601      	mov	r1, r0
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	3304      	adds	r3, #4
 8013718:	461a      	mov	r2, r3
 801371a:	4620      	mov	r0, r4
 801371c:	f7ff f88c 	bl	8012838 <tcp_eff_send_mss_netif>
 8013720:	4603      	mov	r3, r0
 8013722:	461a      	mov	r2, r3
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801372c:	009a      	lsls	r2, r3, #2
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013732:	005b      	lsls	r3, r3, #1
 8013734:	f241 111c 	movw	r1, #4380	; 0x111c
 8013738:	428b      	cmp	r3, r1
 801373a:	bf38      	it	cc
 801373c:	460b      	movcc	r3, r1
 801373e:	429a      	cmp	r2, r3
 8013740:	d204      	bcs.n	801374c <tcp_process+0x210>
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013746:	009b      	lsls	r3, r3, #2
 8013748:	b29b      	uxth	r3, r3
 801374a:	e00d      	b.n	8013768 <tcp_process+0x22c>
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013750:	005b      	lsls	r3, r3, #1
 8013752:	f241 121c 	movw	r2, #4380	; 0x111c
 8013756:	4293      	cmp	r3, r2
 8013758:	d904      	bls.n	8013764 <tcp_process+0x228>
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801375e:	005b      	lsls	r3, r3, #1
 8013760:	b29b      	uxth	r3, r3
 8013762:	e001      	b.n	8013768 <tcp_process+0x22c>
 8013764:	f241 131c 	movw	r3, #4380	; 0x111c
 8013768:	687a      	ldr	r2, [r7, #4]
 801376a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013774:	2b00      	cmp	r3, #0
 8013776:	d106      	bne.n	8013786 <tcp_process+0x24a>
 8013778:	4b13      	ldr	r3, [pc, #76]	; (80137c8 <tcp_process+0x28c>)
 801377a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801377e:	491c      	ldr	r1, [pc, #112]	; (80137f0 <tcp_process+0x2b4>)
 8013780:	4813      	ldr	r0, [pc, #76]	; (80137d0 <tcp_process+0x294>)
 8013782:	f006 fa05 	bl	8019b90 <iprintf>
        --pcb->snd_queuelen;
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801378c:	3b01      	subs	r3, #1
 801378e:	b29a      	uxth	r2, r3
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801379a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801379c:	69fb      	ldr	r3, [r7, #28]
 801379e:	2b00      	cmp	r3, #0
 80137a0:	d12a      	bne.n	80137f8 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80137a6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80137a8:	69fb      	ldr	r3, [r7, #28]
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d106      	bne.n	80137bc <tcp_process+0x280>
 80137ae:	4b06      	ldr	r3, [pc, #24]	; (80137c8 <tcp_process+0x28c>)
 80137b0:	f44f 725d 	mov.w	r2, #884	; 0x374
 80137b4:	490f      	ldr	r1, [pc, #60]	; (80137f4 <tcp_process+0x2b8>)
 80137b6:	4806      	ldr	r0, [pc, #24]	; (80137d0 <tcp_process+0x294>)
 80137b8:	f006 f9ea 	bl	8019b90 <iprintf>
          pcb->unsent = rseg->next;
 80137bc:	69fb      	ldr	r3, [r7, #28]
 80137be:	681a      	ldr	r2, [r3, #0]
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	66da      	str	r2, [r3, #108]	; 0x6c
 80137c4:	e01c      	b.n	8013800 <tcp_process+0x2c4>
 80137c6:	bf00      	nop
 80137c8:	0801d69c 	.word	0x0801d69c
 80137cc:	0801d8d4 	.word	0x0801d8d4
 80137d0:	0801d6e8 	.word	0x0801d6e8
 80137d4:	20007088 	.word	0x20007088
 80137d8:	20007080 	.word	0x20007080
 80137dc:	2000707c 	.word	0x2000707c
 80137e0:	0801d8f0 	.word	0x0801d8f0
 80137e4:	20007089 	.word	0x20007089
 80137e8:	20007044 	.word	0x20007044
 80137ec:	2000706c 	.word	0x2000706c
 80137f0:	0801d910 	.word	0x0801d910
 80137f4:	0801d928 	.word	0x0801d928
        } else {
          pcb->unacked = rseg->next;
 80137f8:	69fb      	ldr	r3, [r7, #28]
 80137fa:	681a      	ldr	r2, [r3, #0]
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8013800:	69f8      	ldr	r0, [r7, #28]
 8013802:	f7fe fd22 	bl	801224a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801380a:	2b00      	cmp	r3, #0
 801380c:	d104      	bne.n	8013818 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013814:	861a      	strh	r2, [r3, #48]	; 0x30
 8013816:	e006      	b.n	8013826 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	2200      	movs	r2, #0
 801381c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	2200      	movs	r2, #0
 8013822:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801382c:	2b00      	cmp	r3, #0
 801382e:	d00a      	beq.n	8013846 <tcp_process+0x30a>
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013836:	687a      	ldr	r2, [r7, #4]
 8013838:	6910      	ldr	r0, [r2, #16]
 801383a:	2200      	movs	r2, #0
 801383c:	6879      	ldr	r1, [r7, #4]
 801383e:	4798      	blx	r3
 8013840:	4603      	mov	r3, r0
 8013842:	76bb      	strb	r3, [r7, #26]
 8013844:	e001      	b.n	801384a <tcp_process+0x30e>
 8013846:	2300      	movs	r3, #0
 8013848:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801384a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801384e:	f113 0f0d 	cmn.w	r3, #13
 8013852:	d102      	bne.n	801385a <tcp_process+0x31e>
          return ERR_ABRT;
 8013854:	f06f 030c 	mvn.w	r3, #12
 8013858:	e250      	b.n	8013cfc <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	8b5b      	ldrh	r3, [r3, #26]
 801385e:	f043 0302 	orr.w	r3, r3, #2
 8013862:	b29a      	uxth	r2, r3
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8013868:	e23a      	b.n	8013ce0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801386a:	4b98      	ldr	r3, [pc, #608]	; (8013acc <tcp_process+0x590>)
 801386c:	781b      	ldrb	r3, [r3, #0]
 801386e:	f003 0310 	and.w	r3, r3, #16
 8013872:	2b00      	cmp	r3, #0
 8013874:	f000 8234 	beq.w	8013ce0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013878:	4b95      	ldr	r3, [pc, #596]	; (8013ad0 <tcp_process+0x594>)
 801387a:	6819      	ldr	r1, [r3, #0]
 801387c:	4b95      	ldr	r3, [pc, #596]	; (8013ad4 <tcp_process+0x598>)
 801387e:	881b      	ldrh	r3, [r3, #0]
 8013880:	461a      	mov	r2, r3
 8013882:	4b95      	ldr	r3, [pc, #596]	; (8013ad8 <tcp_process+0x59c>)
 8013884:	681b      	ldr	r3, [r3, #0]
 8013886:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013888:	4b94      	ldr	r3, [pc, #592]	; (8013adc <tcp_process+0x5a0>)
 801388a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801388c:	885b      	ldrh	r3, [r3, #2]
 801388e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013890:	4a92      	ldr	r2, [pc, #584]	; (8013adc <tcp_process+0x5a0>)
 8013892:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013894:	8812      	ldrh	r2, [r2, #0]
 8013896:	b292      	uxth	r2, r2
 8013898:	9202      	str	r2, [sp, #8]
 801389a:	9301      	str	r3, [sp, #4]
 801389c:	4b90      	ldr	r3, [pc, #576]	; (8013ae0 <tcp_process+0x5a4>)
 801389e:	9300      	str	r3, [sp, #0]
 80138a0:	4b90      	ldr	r3, [pc, #576]	; (8013ae4 <tcp_process+0x5a8>)
 80138a2:	4602      	mov	r2, r0
 80138a4:	6878      	ldr	r0, [r7, #4]
 80138a6:	f002 fc85 	bl	80161b4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80138b0:	2b05      	cmp	r3, #5
 80138b2:	f200 8215 	bhi.w	8013ce0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	2200      	movs	r2, #0
 80138ba:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80138bc:	6878      	ldr	r0, [r7, #4]
 80138be:	f002 fa51 	bl	8015d64 <tcp_rexmit_rto>
      break;
 80138c2:	e20d      	b.n	8013ce0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80138c4:	4b81      	ldr	r3, [pc, #516]	; (8013acc <tcp_process+0x590>)
 80138c6:	781b      	ldrb	r3, [r3, #0]
 80138c8:	f003 0310 	and.w	r3, r3, #16
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	f000 80a1 	beq.w	8013a14 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80138d2:	4b7f      	ldr	r3, [pc, #508]	; (8013ad0 <tcp_process+0x594>)
 80138d4:	681a      	ldr	r2, [r3, #0]
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80138da:	1ad3      	subs	r3, r2, r3
 80138dc:	3b01      	subs	r3, #1
 80138de:	2b00      	cmp	r3, #0
 80138e0:	db7e      	blt.n	80139e0 <tcp_process+0x4a4>
 80138e2:	4b7b      	ldr	r3, [pc, #492]	; (8013ad0 <tcp_process+0x594>)
 80138e4:	681a      	ldr	r2, [r3, #0]
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80138ea:	1ad3      	subs	r3, r2, r3
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	dc77      	bgt.n	80139e0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	2204      	movs	r2, #4
 80138f4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	d102      	bne.n	8013904 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80138fe:	23fa      	movs	r3, #250	; 0xfa
 8013900:	76bb      	strb	r3, [r7, #26]
 8013902:	e01d      	b.n	8013940 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013908:	699b      	ldr	r3, [r3, #24]
 801390a:	2b00      	cmp	r3, #0
 801390c:	d106      	bne.n	801391c <tcp_process+0x3e0>
 801390e:	4b76      	ldr	r3, [pc, #472]	; (8013ae8 <tcp_process+0x5ac>)
 8013910:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8013914:	4975      	ldr	r1, [pc, #468]	; (8013aec <tcp_process+0x5b0>)
 8013916:	4876      	ldr	r0, [pc, #472]	; (8013af0 <tcp_process+0x5b4>)
 8013918:	f006 f93a 	bl	8019b90 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013920:	699b      	ldr	r3, [r3, #24]
 8013922:	2b00      	cmp	r3, #0
 8013924:	d00a      	beq.n	801393c <tcp_process+0x400>
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801392a:	699b      	ldr	r3, [r3, #24]
 801392c:	687a      	ldr	r2, [r7, #4]
 801392e:	6910      	ldr	r0, [r2, #16]
 8013930:	2200      	movs	r2, #0
 8013932:	6879      	ldr	r1, [r7, #4]
 8013934:	4798      	blx	r3
 8013936:	4603      	mov	r3, r0
 8013938:	76bb      	strb	r3, [r7, #26]
 801393a:	e001      	b.n	8013940 <tcp_process+0x404>
 801393c:	23f0      	movs	r3, #240	; 0xf0
 801393e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8013940:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013944:	2b00      	cmp	r3, #0
 8013946:	d00a      	beq.n	801395e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8013948:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801394c:	f113 0f0d 	cmn.w	r3, #13
 8013950:	d002      	beq.n	8013958 <tcp_process+0x41c>
              tcp_abort(pcb);
 8013952:	6878      	ldr	r0, [r7, #4]
 8013954:	f7fd ff8a 	bl	801186c <tcp_abort>
            }
            return ERR_ABRT;
 8013958:	f06f 030c 	mvn.w	r3, #12
 801395c:	e1ce      	b.n	8013cfc <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801395e:	6878      	ldr	r0, [r7, #4]
 8013960:	f000 fae0 	bl	8013f24 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8013964:	4b63      	ldr	r3, [pc, #396]	; (8013af4 <tcp_process+0x5b8>)
 8013966:	881b      	ldrh	r3, [r3, #0]
 8013968:	2b00      	cmp	r3, #0
 801396a:	d005      	beq.n	8013978 <tcp_process+0x43c>
            recv_acked--;
 801396c:	4b61      	ldr	r3, [pc, #388]	; (8013af4 <tcp_process+0x5b8>)
 801396e:	881b      	ldrh	r3, [r3, #0]
 8013970:	3b01      	subs	r3, #1
 8013972:	b29a      	uxth	r2, r3
 8013974:	4b5f      	ldr	r3, [pc, #380]	; (8013af4 <tcp_process+0x5b8>)
 8013976:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801397c:	009a      	lsls	r2, r3, #2
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013982:	005b      	lsls	r3, r3, #1
 8013984:	f241 111c 	movw	r1, #4380	; 0x111c
 8013988:	428b      	cmp	r3, r1
 801398a:	bf38      	it	cc
 801398c:	460b      	movcc	r3, r1
 801398e:	429a      	cmp	r2, r3
 8013990:	d204      	bcs.n	801399c <tcp_process+0x460>
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013996:	009b      	lsls	r3, r3, #2
 8013998:	b29b      	uxth	r3, r3
 801399a:	e00d      	b.n	80139b8 <tcp_process+0x47c>
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80139a0:	005b      	lsls	r3, r3, #1
 80139a2:	f241 121c 	movw	r2, #4380	; 0x111c
 80139a6:	4293      	cmp	r3, r2
 80139a8:	d904      	bls.n	80139b4 <tcp_process+0x478>
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80139ae:	005b      	lsls	r3, r3, #1
 80139b0:	b29b      	uxth	r3, r3
 80139b2:	e001      	b.n	80139b8 <tcp_process+0x47c>
 80139b4:	f241 131c 	movw	r3, #4380	; 0x111c
 80139b8:	687a      	ldr	r2, [r7, #4]
 80139ba:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80139be:	4b4e      	ldr	r3, [pc, #312]	; (8013af8 <tcp_process+0x5bc>)
 80139c0:	781b      	ldrb	r3, [r3, #0]
 80139c2:	f003 0320 	and.w	r3, r3, #32
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	d037      	beq.n	8013a3a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	8b5b      	ldrh	r3, [r3, #26]
 80139ce:	f043 0302 	orr.w	r3, r3, #2
 80139d2:	b29a      	uxth	r2, r3
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	2207      	movs	r2, #7
 80139dc:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80139de:	e02c      	b.n	8013a3a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80139e0:	4b3b      	ldr	r3, [pc, #236]	; (8013ad0 <tcp_process+0x594>)
 80139e2:	6819      	ldr	r1, [r3, #0]
 80139e4:	4b3b      	ldr	r3, [pc, #236]	; (8013ad4 <tcp_process+0x598>)
 80139e6:	881b      	ldrh	r3, [r3, #0]
 80139e8:	461a      	mov	r2, r3
 80139ea:	4b3b      	ldr	r3, [pc, #236]	; (8013ad8 <tcp_process+0x59c>)
 80139ec:	681b      	ldr	r3, [r3, #0]
 80139ee:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80139f0:	4b3a      	ldr	r3, [pc, #232]	; (8013adc <tcp_process+0x5a0>)
 80139f2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80139f4:	885b      	ldrh	r3, [r3, #2]
 80139f6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80139f8:	4a38      	ldr	r2, [pc, #224]	; (8013adc <tcp_process+0x5a0>)
 80139fa:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80139fc:	8812      	ldrh	r2, [r2, #0]
 80139fe:	b292      	uxth	r2, r2
 8013a00:	9202      	str	r2, [sp, #8]
 8013a02:	9301      	str	r3, [sp, #4]
 8013a04:	4b36      	ldr	r3, [pc, #216]	; (8013ae0 <tcp_process+0x5a4>)
 8013a06:	9300      	str	r3, [sp, #0]
 8013a08:	4b36      	ldr	r3, [pc, #216]	; (8013ae4 <tcp_process+0x5a8>)
 8013a0a:	4602      	mov	r2, r0
 8013a0c:	6878      	ldr	r0, [r7, #4]
 8013a0e:	f002 fbd1 	bl	80161b4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8013a12:	e167      	b.n	8013ce4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8013a14:	4b2d      	ldr	r3, [pc, #180]	; (8013acc <tcp_process+0x590>)
 8013a16:	781b      	ldrb	r3, [r3, #0]
 8013a18:	f003 0302 	and.w	r3, r3, #2
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	f000 8161 	beq.w	8013ce4 <tcp_process+0x7a8>
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a26:	1e5a      	subs	r2, r3, #1
 8013a28:	4b2b      	ldr	r3, [pc, #172]	; (8013ad8 <tcp_process+0x59c>)
 8013a2a:	681b      	ldr	r3, [r3, #0]
 8013a2c:	429a      	cmp	r2, r3
 8013a2e:	f040 8159 	bne.w	8013ce4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8013a32:	6878      	ldr	r0, [r7, #4]
 8013a34:	f002 f9b8 	bl	8015da8 <tcp_rexmit>
      break;
 8013a38:	e154      	b.n	8013ce4 <tcp_process+0x7a8>
 8013a3a:	e153      	b.n	8013ce4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8013a3c:	6878      	ldr	r0, [r7, #4]
 8013a3e:	f000 fa71 	bl	8013f24 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8013a42:	4b2d      	ldr	r3, [pc, #180]	; (8013af8 <tcp_process+0x5bc>)
 8013a44:	781b      	ldrb	r3, [r3, #0]
 8013a46:	f003 0320 	and.w	r3, r3, #32
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	f000 814c 	beq.w	8013ce8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	8b5b      	ldrh	r3, [r3, #26]
 8013a54:	f043 0302 	orr.w	r3, r3, #2
 8013a58:	b29a      	uxth	r2, r3
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	2207      	movs	r2, #7
 8013a62:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013a64:	e140      	b.n	8013ce8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8013a66:	6878      	ldr	r0, [r7, #4]
 8013a68:	f000 fa5c 	bl	8013f24 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8013a6c:	4b22      	ldr	r3, [pc, #136]	; (8013af8 <tcp_process+0x5bc>)
 8013a6e:	781b      	ldrb	r3, [r3, #0]
 8013a70:	f003 0320 	and.w	r3, r3, #32
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d071      	beq.n	8013b5c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013a78:	4b14      	ldr	r3, [pc, #80]	; (8013acc <tcp_process+0x590>)
 8013a7a:	781b      	ldrb	r3, [r3, #0]
 8013a7c:	f003 0310 	and.w	r3, r3, #16
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d060      	beq.n	8013b46 <tcp_process+0x60a>
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013a88:	4b11      	ldr	r3, [pc, #68]	; (8013ad0 <tcp_process+0x594>)
 8013a8a:	681b      	ldr	r3, [r3, #0]
 8013a8c:	429a      	cmp	r2, r3
 8013a8e:	d15a      	bne.n	8013b46 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	d156      	bne.n	8013b46 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	8b5b      	ldrh	r3, [r3, #26]
 8013a9c:	f043 0302 	orr.w	r3, r3, #2
 8013aa0:	b29a      	uxth	r2, r3
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8013aa6:	6878      	ldr	r0, [r7, #4]
 8013aa8:	f7fe fdbc 	bl	8012624 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8013aac:	4b13      	ldr	r3, [pc, #76]	; (8013afc <tcp_process+0x5c0>)
 8013aae:	681b      	ldr	r3, [r3, #0]
 8013ab0:	687a      	ldr	r2, [r7, #4]
 8013ab2:	429a      	cmp	r2, r3
 8013ab4:	d105      	bne.n	8013ac2 <tcp_process+0x586>
 8013ab6:	4b11      	ldr	r3, [pc, #68]	; (8013afc <tcp_process+0x5c0>)
 8013ab8:	681b      	ldr	r3, [r3, #0]
 8013aba:	68db      	ldr	r3, [r3, #12]
 8013abc:	4a0f      	ldr	r2, [pc, #60]	; (8013afc <tcp_process+0x5c0>)
 8013abe:	6013      	str	r3, [r2, #0]
 8013ac0:	e02e      	b.n	8013b20 <tcp_process+0x5e4>
 8013ac2:	4b0e      	ldr	r3, [pc, #56]	; (8013afc <tcp_process+0x5c0>)
 8013ac4:	681b      	ldr	r3, [r3, #0]
 8013ac6:	617b      	str	r3, [r7, #20]
 8013ac8:	e027      	b.n	8013b1a <tcp_process+0x5de>
 8013aca:	bf00      	nop
 8013acc:	20007088 	.word	0x20007088
 8013ad0:	20007080 	.word	0x20007080
 8013ad4:	20007086 	.word	0x20007086
 8013ad8:	2000707c 	.word	0x2000707c
 8013adc:	2000706c 	.word	0x2000706c
 8013ae0:	20000778 	.word	0x20000778
 8013ae4:	2000077c 	.word	0x2000077c
 8013ae8:	0801d69c 	.word	0x0801d69c
 8013aec:	0801d93c 	.word	0x0801d93c
 8013af0:	0801d6e8 	.word	0x0801d6e8
 8013af4:	20007084 	.word	0x20007084
 8013af8:	20007089 	.word	0x20007089
 8013afc:	20007050 	.word	0x20007050
 8013b00:	697b      	ldr	r3, [r7, #20]
 8013b02:	68db      	ldr	r3, [r3, #12]
 8013b04:	687a      	ldr	r2, [r7, #4]
 8013b06:	429a      	cmp	r2, r3
 8013b08:	d104      	bne.n	8013b14 <tcp_process+0x5d8>
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	68da      	ldr	r2, [r3, #12]
 8013b0e:	697b      	ldr	r3, [r7, #20]
 8013b10:	60da      	str	r2, [r3, #12]
 8013b12:	e005      	b.n	8013b20 <tcp_process+0x5e4>
 8013b14:	697b      	ldr	r3, [r7, #20]
 8013b16:	68db      	ldr	r3, [r3, #12]
 8013b18:	617b      	str	r3, [r7, #20]
 8013b1a:	697b      	ldr	r3, [r7, #20]
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	d1ef      	bne.n	8013b00 <tcp_process+0x5c4>
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	2200      	movs	r2, #0
 8013b24:	60da      	str	r2, [r3, #12]
 8013b26:	4b77      	ldr	r3, [pc, #476]	; (8013d04 <tcp_process+0x7c8>)
 8013b28:	2201      	movs	r2, #1
 8013b2a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	220a      	movs	r2, #10
 8013b30:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8013b32:	4b75      	ldr	r3, [pc, #468]	; (8013d08 <tcp_process+0x7cc>)
 8013b34:	681a      	ldr	r2, [r3, #0]
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	60da      	str	r2, [r3, #12]
 8013b3a:	4a73      	ldr	r2, [pc, #460]	; (8013d08 <tcp_process+0x7cc>)
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	6013      	str	r3, [r2, #0]
 8013b40:	f002 fcfa 	bl	8016538 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8013b44:	e0d2      	b.n	8013cec <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	8b5b      	ldrh	r3, [r3, #26]
 8013b4a:	f043 0302 	orr.w	r3, r3, #2
 8013b4e:	b29a      	uxth	r2, r3
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	2208      	movs	r2, #8
 8013b58:	751a      	strb	r2, [r3, #20]
      break;
 8013b5a:	e0c7      	b.n	8013cec <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013b5c:	4b6b      	ldr	r3, [pc, #428]	; (8013d0c <tcp_process+0x7d0>)
 8013b5e:	781b      	ldrb	r3, [r3, #0]
 8013b60:	f003 0310 	and.w	r3, r3, #16
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	f000 80c1 	beq.w	8013cec <tcp_process+0x7b0>
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013b6e:	4b68      	ldr	r3, [pc, #416]	; (8013d10 <tcp_process+0x7d4>)
 8013b70:	681b      	ldr	r3, [r3, #0]
 8013b72:	429a      	cmp	r2, r3
 8013b74:	f040 80ba 	bne.w	8013cec <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	f040 80b5 	bne.w	8013cec <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	2206      	movs	r2, #6
 8013b86:	751a      	strb	r2, [r3, #20]
      break;
 8013b88:	e0b0      	b.n	8013cec <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8013b8a:	6878      	ldr	r0, [r7, #4]
 8013b8c:	f000 f9ca 	bl	8013f24 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8013b90:	4b60      	ldr	r3, [pc, #384]	; (8013d14 <tcp_process+0x7d8>)
 8013b92:	781b      	ldrb	r3, [r3, #0]
 8013b94:	f003 0320 	and.w	r3, r3, #32
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	f000 80a9 	beq.w	8013cf0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	8b5b      	ldrh	r3, [r3, #26]
 8013ba2:	f043 0302 	orr.w	r3, r3, #2
 8013ba6:	b29a      	uxth	r2, r3
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8013bac:	6878      	ldr	r0, [r7, #4]
 8013bae:	f7fe fd39 	bl	8012624 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8013bb2:	4b59      	ldr	r3, [pc, #356]	; (8013d18 <tcp_process+0x7dc>)
 8013bb4:	681b      	ldr	r3, [r3, #0]
 8013bb6:	687a      	ldr	r2, [r7, #4]
 8013bb8:	429a      	cmp	r2, r3
 8013bba:	d105      	bne.n	8013bc8 <tcp_process+0x68c>
 8013bbc:	4b56      	ldr	r3, [pc, #344]	; (8013d18 <tcp_process+0x7dc>)
 8013bbe:	681b      	ldr	r3, [r3, #0]
 8013bc0:	68db      	ldr	r3, [r3, #12]
 8013bc2:	4a55      	ldr	r2, [pc, #340]	; (8013d18 <tcp_process+0x7dc>)
 8013bc4:	6013      	str	r3, [r2, #0]
 8013bc6:	e013      	b.n	8013bf0 <tcp_process+0x6b4>
 8013bc8:	4b53      	ldr	r3, [pc, #332]	; (8013d18 <tcp_process+0x7dc>)
 8013bca:	681b      	ldr	r3, [r3, #0]
 8013bcc:	613b      	str	r3, [r7, #16]
 8013bce:	e00c      	b.n	8013bea <tcp_process+0x6ae>
 8013bd0:	693b      	ldr	r3, [r7, #16]
 8013bd2:	68db      	ldr	r3, [r3, #12]
 8013bd4:	687a      	ldr	r2, [r7, #4]
 8013bd6:	429a      	cmp	r2, r3
 8013bd8:	d104      	bne.n	8013be4 <tcp_process+0x6a8>
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	68da      	ldr	r2, [r3, #12]
 8013bde:	693b      	ldr	r3, [r7, #16]
 8013be0:	60da      	str	r2, [r3, #12]
 8013be2:	e005      	b.n	8013bf0 <tcp_process+0x6b4>
 8013be4:	693b      	ldr	r3, [r7, #16]
 8013be6:	68db      	ldr	r3, [r3, #12]
 8013be8:	613b      	str	r3, [r7, #16]
 8013bea:	693b      	ldr	r3, [r7, #16]
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	d1ef      	bne.n	8013bd0 <tcp_process+0x694>
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	2200      	movs	r2, #0
 8013bf4:	60da      	str	r2, [r3, #12]
 8013bf6:	4b43      	ldr	r3, [pc, #268]	; (8013d04 <tcp_process+0x7c8>)
 8013bf8:	2201      	movs	r2, #1
 8013bfa:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	220a      	movs	r2, #10
 8013c00:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8013c02:	4b41      	ldr	r3, [pc, #260]	; (8013d08 <tcp_process+0x7cc>)
 8013c04:	681a      	ldr	r2, [r3, #0]
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	60da      	str	r2, [r3, #12]
 8013c0a:	4a3f      	ldr	r2, [pc, #252]	; (8013d08 <tcp_process+0x7cc>)
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	6013      	str	r3, [r2, #0]
 8013c10:	f002 fc92 	bl	8016538 <tcp_timer_needed>
      }
      break;
 8013c14:	e06c      	b.n	8013cf0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8013c16:	6878      	ldr	r0, [r7, #4]
 8013c18:	f000 f984 	bl	8013f24 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013c1c:	4b3b      	ldr	r3, [pc, #236]	; (8013d0c <tcp_process+0x7d0>)
 8013c1e:	781b      	ldrb	r3, [r3, #0]
 8013c20:	f003 0310 	and.w	r3, r3, #16
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d065      	beq.n	8013cf4 <tcp_process+0x7b8>
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013c2c:	4b38      	ldr	r3, [pc, #224]	; (8013d10 <tcp_process+0x7d4>)
 8013c2e:	681b      	ldr	r3, [r3, #0]
 8013c30:	429a      	cmp	r2, r3
 8013c32:	d15f      	bne.n	8013cf4 <tcp_process+0x7b8>
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	d15b      	bne.n	8013cf4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8013c3c:	6878      	ldr	r0, [r7, #4]
 8013c3e:	f7fe fcf1 	bl	8012624 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8013c42:	4b35      	ldr	r3, [pc, #212]	; (8013d18 <tcp_process+0x7dc>)
 8013c44:	681b      	ldr	r3, [r3, #0]
 8013c46:	687a      	ldr	r2, [r7, #4]
 8013c48:	429a      	cmp	r2, r3
 8013c4a:	d105      	bne.n	8013c58 <tcp_process+0x71c>
 8013c4c:	4b32      	ldr	r3, [pc, #200]	; (8013d18 <tcp_process+0x7dc>)
 8013c4e:	681b      	ldr	r3, [r3, #0]
 8013c50:	68db      	ldr	r3, [r3, #12]
 8013c52:	4a31      	ldr	r2, [pc, #196]	; (8013d18 <tcp_process+0x7dc>)
 8013c54:	6013      	str	r3, [r2, #0]
 8013c56:	e013      	b.n	8013c80 <tcp_process+0x744>
 8013c58:	4b2f      	ldr	r3, [pc, #188]	; (8013d18 <tcp_process+0x7dc>)
 8013c5a:	681b      	ldr	r3, [r3, #0]
 8013c5c:	60fb      	str	r3, [r7, #12]
 8013c5e:	e00c      	b.n	8013c7a <tcp_process+0x73e>
 8013c60:	68fb      	ldr	r3, [r7, #12]
 8013c62:	68db      	ldr	r3, [r3, #12]
 8013c64:	687a      	ldr	r2, [r7, #4]
 8013c66:	429a      	cmp	r2, r3
 8013c68:	d104      	bne.n	8013c74 <tcp_process+0x738>
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	68da      	ldr	r2, [r3, #12]
 8013c6e:	68fb      	ldr	r3, [r7, #12]
 8013c70:	60da      	str	r2, [r3, #12]
 8013c72:	e005      	b.n	8013c80 <tcp_process+0x744>
 8013c74:	68fb      	ldr	r3, [r7, #12]
 8013c76:	68db      	ldr	r3, [r3, #12]
 8013c78:	60fb      	str	r3, [r7, #12]
 8013c7a:	68fb      	ldr	r3, [r7, #12]
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d1ef      	bne.n	8013c60 <tcp_process+0x724>
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	2200      	movs	r2, #0
 8013c84:	60da      	str	r2, [r3, #12]
 8013c86:	4b1f      	ldr	r3, [pc, #124]	; (8013d04 <tcp_process+0x7c8>)
 8013c88:	2201      	movs	r2, #1
 8013c8a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	220a      	movs	r2, #10
 8013c90:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8013c92:	4b1d      	ldr	r3, [pc, #116]	; (8013d08 <tcp_process+0x7cc>)
 8013c94:	681a      	ldr	r2, [r3, #0]
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	60da      	str	r2, [r3, #12]
 8013c9a:	4a1b      	ldr	r2, [pc, #108]	; (8013d08 <tcp_process+0x7cc>)
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	6013      	str	r3, [r2, #0]
 8013ca0:	f002 fc4a 	bl	8016538 <tcp_timer_needed>
      }
      break;
 8013ca4:	e026      	b.n	8013cf4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8013ca6:	6878      	ldr	r0, [r7, #4]
 8013ca8:	f000 f93c 	bl	8013f24 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013cac:	4b17      	ldr	r3, [pc, #92]	; (8013d0c <tcp_process+0x7d0>)
 8013cae:	781b      	ldrb	r3, [r3, #0]
 8013cb0:	f003 0310 	and.w	r3, r3, #16
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	d01f      	beq.n	8013cf8 <tcp_process+0x7bc>
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013cbc:	4b14      	ldr	r3, [pc, #80]	; (8013d10 <tcp_process+0x7d4>)
 8013cbe:	681b      	ldr	r3, [r3, #0]
 8013cc0:	429a      	cmp	r2, r3
 8013cc2:	d119      	bne.n	8013cf8 <tcp_process+0x7bc>
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	d115      	bne.n	8013cf8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8013ccc:	4b11      	ldr	r3, [pc, #68]	; (8013d14 <tcp_process+0x7d8>)
 8013cce:	781b      	ldrb	r3, [r3, #0]
 8013cd0:	f043 0310 	orr.w	r3, r3, #16
 8013cd4:	b2da      	uxtb	r2, r3
 8013cd6:	4b0f      	ldr	r3, [pc, #60]	; (8013d14 <tcp_process+0x7d8>)
 8013cd8:	701a      	strb	r2, [r3, #0]
      }
      break;
 8013cda:	e00d      	b.n	8013cf8 <tcp_process+0x7bc>
    default:
      break;
 8013cdc:	bf00      	nop
 8013cde:	e00c      	b.n	8013cfa <tcp_process+0x7be>
      break;
 8013ce0:	bf00      	nop
 8013ce2:	e00a      	b.n	8013cfa <tcp_process+0x7be>
      break;
 8013ce4:	bf00      	nop
 8013ce6:	e008      	b.n	8013cfa <tcp_process+0x7be>
      break;
 8013ce8:	bf00      	nop
 8013cea:	e006      	b.n	8013cfa <tcp_process+0x7be>
      break;
 8013cec:	bf00      	nop
 8013cee:	e004      	b.n	8013cfa <tcp_process+0x7be>
      break;
 8013cf0:	bf00      	nop
 8013cf2:	e002      	b.n	8013cfa <tcp_process+0x7be>
      break;
 8013cf4:	bf00      	nop
 8013cf6:	e000      	b.n	8013cfa <tcp_process+0x7be>
      break;
 8013cf8:	bf00      	nop
  }
  return ERR_OK;
 8013cfa:	2300      	movs	r3, #0
}
 8013cfc:	4618      	mov	r0, r3
 8013cfe:	3724      	adds	r7, #36	; 0x24
 8013d00:	46bd      	mov	sp, r7
 8013d02:	bd90      	pop	{r4, r7, pc}
 8013d04:	20007058 	.word	0x20007058
 8013d08:	20007054 	.word	0x20007054
 8013d0c:	20007088 	.word	0x20007088
 8013d10:	20007080 	.word	0x20007080
 8013d14:	20007089 	.word	0x20007089
 8013d18:	20007050 	.word	0x20007050

08013d1c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8013d1c:	b590      	push	{r4, r7, lr}
 8013d1e:	b085      	sub	sp, #20
 8013d20:	af00      	add	r7, sp, #0
 8013d22:	6078      	str	r0, [r7, #4]
 8013d24:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	d106      	bne.n	8013d3a <tcp_oos_insert_segment+0x1e>
 8013d2c:	4b3b      	ldr	r3, [pc, #236]	; (8013e1c <tcp_oos_insert_segment+0x100>)
 8013d2e:	f240 421f 	movw	r2, #1055	; 0x41f
 8013d32:	493b      	ldr	r1, [pc, #236]	; (8013e20 <tcp_oos_insert_segment+0x104>)
 8013d34:	483b      	ldr	r0, [pc, #236]	; (8013e24 <tcp_oos_insert_segment+0x108>)
 8013d36:	f005 ff2b 	bl	8019b90 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	68db      	ldr	r3, [r3, #12]
 8013d3e:	899b      	ldrh	r3, [r3, #12]
 8013d40:	b29b      	uxth	r3, r3
 8013d42:	4618      	mov	r0, r3
 8013d44:	f7fb fc06 	bl	800f554 <lwip_htons>
 8013d48:	4603      	mov	r3, r0
 8013d4a:	b2db      	uxtb	r3, r3
 8013d4c:	f003 0301 	and.w	r3, r3, #1
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d028      	beq.n	8013da6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8013d54:	6838      	ldr	r0, [r7, #0]
 8013d56:	f7fe fa63 	bl	8012220 <tcp_segs_free>
    next = NULL;
 8013d5a:	2300      	movs	r3, #0
 8013d5c:	603b      	str	r3, [r7, #0]
 8013d5e:	e056      	b.n	8013e0e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8013d60:	683b      	ldr	r3, [r7, #0]
 8013d62:	68db      	ldr	r3, [r3, #12]
 8013d64:	899b      	ldrh	r3, [r3, #12]
 8013d66:	b29b      	uxth	r3, r3
 8013d68:	4618      	mov	r0, r3
 8013d6a:	f7fb fbf3 	bl	800f554 <lwip_htons>
 8013d6e:	4603      	mov	r3, r0
 8013d70:	b2db      	uxtb	r3, r3
 8013d72:	f003 0301 	and.w	r3, r3, #1
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d00d      	beq.n	8013d96 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	68db      	ldr	r3, [r3, #12]
 8013d7e:	899b      	ldrh	r3, [r3, #12]
 8013d80:	b29c      	uxth	r4, r3
 8013d82:	2001      	movs	r0, #1
 8013d84:	f7fb fbe6 	bl	800f554 <lwip_htons>
 8013d88:	4603      	mov	r3, r0
 8013d8a:	461a      	mov	r2, r3
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	68db      	ldr	r3, [r3, #12]
 8013d90:	4322      	orrs	r2, r4
 8013d92:	b292      	uxth	r2, r2
 8013d94:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8013d96:	683b      	ldr	r3, [r7, #0]
 8013d98:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8013d9a:	683b      	ldr	r3, [r7, #0]
 8013d9c:	681b      	ldr	r3, [r3, #0]
 8013d9e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8013da0:	68f8      	ldr	r0, [r7, #12]
 8013da2:	f7fe fa52 	bl	801224a <tcp_seg_free>
    while (next &&
 8013da6:	683b      	ldr	r3, [r7, #0]
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d00e      	beq.n	8013dca <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	891b      	ldrh	r3, [r3, #8]
 8013db0:	461a      	mov	r2, r3
 8013db2:	4b1d      	ldr	r3, [pc, #116]	; (8013e28 <tcp_oos_insert_segment+0x10c>)
 8013db4:	681b      	ldr	r3, [r3, #0]
 8013db6:	441a      	add	r2, r3
 8013db8:	683b      	ldr	r3, [r7, #0]
 8013dba:	68db      	ldr	r3, [r3, #12]
 8013dbc:	685b      	ldr	r3, [r3, #4]
 8013dbe:	6839      	ldr	r1, [r7, #0]
 8013dc0:	8909      	ldrh	r1, [r1, #8]
 8013dc2:	440b      	add	r3, r1
 8013dc4:	1ad3      	subs	r3, r2, r3
    while (next &&
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	daca      	bge.n	8013d60 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8013dca:	683b      	ldr	r3, [r7, #0]
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d01e      	beq.n	8013e0e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	891b      	ldrh	r3, [r3, #8]
 8013dd4:	461a      	mov	r2, r3
 8013dd6:	4b14      	ldr	r3, [pc, #80]	; (8013e28 <tcp_oos_insert_segment+0x10c>)
 8013dd8:	681b      	ldr	r3, [r3, #0]
 8013dda:	441a      	add	r2, r3
 8013ddc:	683b      	ldr	r3, [r7, #0]
 8013dde:	68db      	ldr	r3, [r3, #12]
 8013de0:	685b      	ldr	r3, [r3, #4]
 8013de2:	1ad3      	subs	r3, r2, r3
    if (next &&
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	dd12      	ble.n	8013e0e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8013de8:	683b      	ldr	r3, [r7, #0]
 8013dea:	68db      	ldr	r3, [r3, #12]
 8013dec:	685b      	ldr	r3, [r3, #4]
 8013dee:	b29a      	uxth	r2, r3
 8013df0:	4b0d      	ldr	r3, [pc, #52]	; (8013e28 <tcp_oos_insert_segment+0x10c>)
 8013df2:	681b      	ldr	r3, [r3, #0]
 8013df4:	b29b      	uxth	r3, r3
 8013df6:	1ad3      	subs	r3, r2, r3
 8013df8:	b29a      	uxth	r2, r3
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	685a      	ldr	r2, [r3, #4]
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	891b      	ldrh	r3, [r3, #8]
 8013e06:	4619      	mov	r1, r3
 8013e08:	4610      	mov	r0, r2
 8013e0a:	f7fc fe23 	bl	8010a54 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	683a      	ldr	r2, [r7, #0]
 8013e12:	601a      	str	r2, [r3, #0]
}
 8013e14:	bf00      	nop
 8013e16:	3714      	adds	r7, #20
 8013e18:	46bd      	mov	sp, r7
 8013e1a:	bd90      	pop	{r4, r7, pc}
 8013e1c:	0801d69c 	.word	0x0801d69c
 8013e20:	0801d95c 	.word	0x0801d95c
 8013e24:	0801d6e8 	.word	0x0801d6e8
 8013e28:	2000707c 	.word	0x2000707c

08013e2c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8013e2c:	b5b0      	push	{r4, r5, r7, lr}
 8013e2e:	b086      	sub	sp, #24
 8013e30:	af00      	add	r7, sp, #0
 8013e32:	60f8      	str	r0, [r7, #12]
 8013e34:	60b9      	str	r1, [r7, #8]
 8013e36:	607a      	str	r2, [r7, #4]
 8013e38:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8013e3a:	e03e      	b.n	8013eba <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8013e3c:	68bb      	ldr	r3, [r7, #8]
 8013e3e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8013e40:	68bb      	ldr	r3, [r7, #8]
 8013e42:	681b      	ldr	r3, [r3, #0]
 8013e44:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8013e46:	697b      	ldr	r3, [r7, #20]
 8013e48:	685b      	ldr	r3, [r3, #4]
 8013e4a:	4618      	mov	r0, r3
 8013e4c:	f7fd f80e 	bl	8010e6c <pbuf_clen>
 8013e50:	4603      	mov	r3, r0
 8013e52:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8013e54:	68fb      	ldr	r3, [r7, #12]
 8013e56:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013e5a:	8a7a      	ldrh	r2, [r7, #18]
 8013e5c:	429a      	cmp	r2, r3
 8013e5e:	d906      	bls.n	8013e6e <tcp_free_acked_segments+0x42>
 8013e60:	4b2a      	ldr	r3, [pc, #168]	; (8013f0c <tcp_free_acked_segments+0xe0>)
 8013e62:	f240 4257 	movw	r2, #1111	; 0x457
 8013e66:	492a      	ldr	r1, [pc, #168]	; (8013f10 <tcp_free_acked_segments+0xe4>)
 8013e68:	482a      	ldr	r0, [pc, #168]	; (8013f14 <tcp_free_acked_segments+0xe8>)
 8013e6a:	f005 fe91 	bl	8019b90 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8013e6e:	68fb      	ldr	r3, [r7, #12]
 8013e70:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8013e74:	8a7b      	ldrh	r3, [r7, #18]
 8013e76:	1ad3      	subs	r3, r2, r3
 8013e78:	b29a      	uxth	r2, r3
 8013e7a:	68fb      	ldr	r3, [r7, #12]
 8013e7c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8013e80:	697b      	ldr	r3, [r7, #20]
 8013e82:	891a      	ldrh	r2, [r3, #8]
 8013e84:	4b24      	ldr	r3, [pc, #144]	; (8013f18 <tcp_free_acked_segments+0xec>)
 8013e86:	881b      	ldrh	r3, [r3, #0]
 8013e88:	4413      	add	r3, r2
 8013e8a:	b29a      	uxth	r2, r3
 8013e8c:	4b22      	ldr	r3, [pc, #136]	; (8013f18 <tcp_free_acked_segments+0xec>)
 8013e8e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8013e90:	6978      	ldr	r0, [r7, #20]
 8013e92:	f7fe f9da 	bl	801224a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8013e96:	68fb      	ldr	r3, [r7, #12]
 8013e98:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	d00c      	beq.n	8013eba <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8013ea0:	68bb      	ldr	r3, [r7, #8]
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	d109      	bne.n	8013eba <tcp_free_acked_segments+0x8e>
 8013ea6:	683b      	ldr	r3, [r7, #0]
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	d106      	bne.n	8013eba <tcp_free_acked_segments+0x8e>
 8013eac:	4b17      	ldr	r3, [pc, #92]	; (8013f0c <tcp_free_acked_segments+0xe0>)
 8013eae:	f240 4261 	movw	r2, #1121	; 0x461
 8013eb2:	491a      	ldr	r1, [pc, #104]	; (8013f1c <tcp_free_acked_segments+0xf0>)
 8013eb4:	4817      	ldr	r0, [pc, #92]	; (8013f14 <tcp_free_acked_segments+0xe8>)
 8013eb6:	f005 fe6b 	bl	8019b90 <iprintf>
  while (seg_list != NULL &&
 8013eba:	68bb      	ldr	r3, [r7, #8]
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d020      	beq.n	8013f02 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8013ec0:	68bb      	ldr	r3, [r7, #8]
 8013ec2:	68db      	ldr	r3, [r3, #12]
 8013ec4:	685b      	ldr	r3, [r3, #4]
 8013ec6:	4618      	mov	r0, r3
 8013ec8:	f7fb fb59 	bl	800f57e <lwip_htonl>
 8013ecc:	4604      	mov	r4, r0
 8013ece:	68bb      	ldr	r3, [r7, #8]
 8013ed0:	891b      	ldrh	r3, [r3, #8]
 8013ed2:	461d      	mov	r5, r3
 8013ed4:	68bb      	ldr	r3, [r7, #8]
 8013ed6:	68db      	ldr	r3, [r3, #12]
 8013ed8:	899b      	ldrh	r3, [r3, #12]
 8013eda:	b29b      	uxth	r3, r3
 8013edc:	4618      	mov	r0, r3
 8013ede:	f7fb fb39 	bl	800f554 <lwip_htons>
 8013ee2:	4603      	mov	r3, r0
 8013ee4:	b2db      	uxtb	r3, r3
 8013ee6:	f003 0303 	and.w	r3, r3, #3
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	d001      	beq.n	8013ef2 <tcp_free_acked_segments+0xc6>
 8013eee:	2301      	movs	r3, #1
 8013ef0:	e000      	b.n	8013ef4 <tcp_free_acked_segments+0xc8>
 8013ef2:	2300      	movs	r3, #0
 8013ef4:	442b      	add	r3, r5
 8013ef6:	18e2      	adds	r2, r4, r3
 8013ef8:	4b09      	ldr	r3, [pc, #36]	; (8013f20 <tcp_free_acked_segments+0xf4>)
 8013efa:	681b      	ldr	r3, [r3, #0]
 8013efc:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	dd9c      	ble.n	8013e3c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8013f02:	68bb      	ldr	r3, [r7, #8]
}
 8013f04:	4618      	mov	r0, r3
 8013f06:	3718      	adds	r7, #24
 8013f08:	46bd      	mov	sp, r7
 8013f0a:	bdb0      	pop	{r4, r5, r7, pc}
 8013f0c:	0801d69c 	.word	0x0801d69c
 8013f10:	0801d984 	.word	0x0801d984
 8013f14:	0801d6e8 	.word	0x0801d6e8
 8013f18:	20007084 	.word	0x20007084
 8013f1c:	0801d9ac 	.word	0x0801d9ac
 8013f20:	20007080 	.word	0x20007080

08013f24 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8013f24:	b5b0      	push	{r4, r5, r7, lr}
 8013f26:	b094      	sub	sp, #80	; 0x50
 8013f28:	af00      	add	r7, sp, #0
 8013f2a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8013f2c:	2300      	movs	r3, #0
 8013f2e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d106      	bne.n	8013f44 <tcp_receive+0x20>
 8013f36:	4b91      	ldr	r3, [pc, #580]	; (801417c <tcp_receive+0x258>)
 8013f38:	f240 427b 	movw	r2, #1147	; 0x47b
 8013f3c:	4990      	ldr	r1, [pc, #576]	; (8014180 <tcp_receive+0x25c>)
 8013f3e:	4891      	ldr	r0, [pc, #580]	; (8014184 <tcp_receive+0x260>)
 8013f40:	f005 fe26 	bl	8019b90 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	7d1b      	ldrb	r3, [r3, #20]
 8013f48:	2b03      	cmp	r3, #3
 8013f4a:	d806      	bhi.n	8013f5a <tcp_receive+0x36>
 8013f4c:	4b8b      	ldr	r3, [pc, #556]	; (801417c <tcp_receive+0x258>)
 8013f4e:	f240 427c 	movw	r2, #1148	; 0x47c
 8013f52:	498d      	ldr	r1, [pc, #564]	; (8014188 <tcp_receive+0x264>)
 8013f54:	488b      	ldr	r0, [pc, #556]	; (8014184 <tcp_receive+0x260>)
 8013f56:	f005 fe1b 	bl	8019b90 <iprintf>

  if (flags & TCP_ACK) {
 8013f5a:	4b8c      	ldr	r3, [pc, #560]	; (801418c <tcp_receive+0x268>)
 8013f5c:	781b      	ldrb	r3, [r3, #0]
 8013f5e:	f003 0310 	and.w	r3, r3, #16
 8013f62:	2b00      	cmp	r3, #0
 8013f64:	f000 8264 	beq.w	8014430 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013f6e:	461a      	mov	r2, r3
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013f74:	4413      	add	r3, r2
 8013f76:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013f7c:	4b84      	ldr	r3, [pc, #528]	; (8014190 <tcp_receive+0x26c>)
 8013f7e:	681b      	ldr	r3, [r3, #0]
 8013f80:	1ad3      	subs	r3, r2, r3
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	db1b      	blt.n	8013fbe <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013f8a:	4b81      	ldr	r3, [pc, #516]	; (8014190 <tcp_receive+0x26c>)
 8013f8c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8013f8e:	429a      	cmp	r2, r3
 8013f90:	d106      	bne.n	8013fa0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8013f96:	4b7f      	ldr	r3, [pc, #508]	; (8014194 <tcp_receive+0x270>)
 8013f98:	681b      	ldr	r3, [r3, #0]
 8013f9a:	1ad3      	subs	r3, r2, r3
 8013f9c:	2b00      	cmp	r3, #0
 8013f9e:	db0e      	blt.n	8013fbe <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8013fa4:	4b7b      	ldr	r3, [pc, #492]	; (8014194 <tcp_receive+0x270>)
 8013fa6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013fa8:	429a      	cmp	r2, r3
 8013faa:	d125      	bne.n	8013ff8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013fac:	4b7a      	ldr	r3, [pc, #488]	; (8014198 <tcp_receive+0x274>)
 8013fae:	681b      	ldr	r3, [r3, #0]
 8013fb0:	89db      	ldrh	r3, [r3, #14]
 8013fb2:	b29a      	uxth	r2, r3
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013fba:	429a      	cmp	r2, r3
 8013fbc:	d91c      	bls.n	8013ff8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8013fbe:	4b76      	ldr	r3, [pc, #472]	; (8014198 <tcp_receive+0x274>)
 8013fc0:	681b      	ldr	r3, [r3, #0]
 8013fc2:	89db      	ldrh	r3, [r3, #14]
 8013fc4:	b29a      	uxth	r2, r3
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013fd8:	429a      	cmp	r2, r3
 8013fda:	d205      	bcs.n	8013fe8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8013fe8:	4b69      	ldr	r3, [pc, #420]	; (8014190 <tcp_receive+0x26c>)
 8013fea:	681a      	ldr	r2, [r3, #0]
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8013ff0:	4b68      	ldr	r3, [pc, #416]	; (8014194 <tcp_receive+0x270>)
 8013ff2:	681a      	ldr	r2, [r3, #0]
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8013ff8:	4b66      	ldr	r3, [pc, #408]	; (8014194 <tcp_receive+0x270>)
 8013ffa:	681a      	ldr	r2, [r3, #0]
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014000:	1ad3      	subs	r3, r2, r3
 8014002:	2b00      	cmp	r3, #0
 8014004:	dc58      	bgt.n	80140b8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8014006:	4b65      	ldr	r3, [pc, #404]	; (801419c <tcp_receive+0x278>)
 8014008:	881b      	ldrh	r3, [r3, #0]
 801400a:	2b00      	cmp	r3, #0
 801400c:	d14b      	bne.n	80140a6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014012:	687a      	ldr	r2, [r7, #4]
 8014014:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8014018:	4413      	add	r3, r2
 801401a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801401c:	429a      	cmp	r2, r3
 801401e:	d142      	bne.n	80140a6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014026:	2b00      	cmp	r3, #0
 8014028:	db3d      	blt.n	80140a6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801402e:	4b59      	ldr	r3, [pc, #356]	; (8014194 <tcp_receive+0x270>)
 8014030:	681b      	ldr	r3, [r3, #0]
 8014032:	429a      	cmp	r2, r3
 8014034:	d137      	bne.n	80140a6 <tcp_receive+0x182>
              found_dupack = 1;
 8014036:	2301      	movs	r3, #1
 8014038:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014040:	2bff      	cmp	r3, #255	; 0xff
 8014042:	d007      	beq.n	8014054 <tcp_receive+0x130>
                ++pcb->dupacks;
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801404a:	3301      	adds	r3, #1
 801404c:	b2da      	uxtb	r2, r3
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801405a:	2b03      	cmp	r3, #3
 801405c:	d91b      	bls.n	8014096 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014068:	4413      	add	r3, r2
 801406a:	b29a      	uxth	r2, r3
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014072:	429a      	cmp	r2, r3
 8014074:	d30a      	bcc.n	801408c <tcp_receive+0x168>
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014080:	4413      	add	r3, r2
 8014082:	b29a      	uxth	r2, r3
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801408a:	e004      	b.n	8014096 <tcp_receive+0x172>
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014092:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801409c:	2b02      	cmp	r3, #2
 801409e:	d902      	bls.n	80140a6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80140a0:	6878      	ldr	r0, [r7, #4]
 80140a2:	f001 feed 	bl	8015e80 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80140a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	f040 8161 	bne.w	8014370 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	2200      	movs	r2, #0
 80140b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80140b6:	e15b      	b.n	8014370 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80140b8:	4b36      	ldr	r3, [pc, #216]	; (8014194 <tcp_receive+0x270>)
 80140ba:	681a      	ldr	r2, [r3, #0]
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80140c0:	1ad3      	subs	r3, r2, r3
 80140c2:	3b01      	subs	r3, #1
 80140c4:	2b00      	cmp	r3, #0
 80140c6:	f2c0 814e 	blt.w	8014366 <tcp_receive+0x442>
 80140ca:	4b32      	ldr	r3, [pc, #200]	; (8014194 <tcp_receive+0x270>)
 80140cc:	681a      	ldr	r2, [r3, #0]
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80140d2:	1ad3      	subs	r3, r2, r3
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	f300 8146 	bgt.w	8014366 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	8b5b      	ldrh	r3, [r3, #26]
 80140de:	f003 0304 	and.w	r3, r3, #4
 80140e2:	2b00      	cmp	r3, #0
 80140e4:	d010      	beq.n	8014108 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	8b5b      	ldrh	r3, [r3, #26]
 80140ea:	f023 0304 	bic.w	r3, r3, #4
 80140ee:	b29a      	uxth	r2, r3
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	2200      	movs	r2, #0
 8014104:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	2200      	movs	r2, #0
 801410c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014116:	10db      	asrs	r3, r3, #3
 8014118:	b21b      	sxth	r3, r3
 801411a:	b29a      	uxth	r2, r3
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014122:	b29b      	uxth	r3, r3
 8014124:	4413      	add	r3, r2
 8014126:	b29b      	uxth	r3, r3
 8014128:	b21a      	sxth	r2, r3
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8014130:	4b18      	ldr	r3, [pc, #96]	; (8014194 <tcp_receive+0x270>)
 8014132:	681b      	ldr	r3, [r3, #0]
 8014134:	b29a      	uxth	r2, r3
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801413a:	b29b      	uxth	r3, r3
 801413c:	1ad3      	subs	r3, r2, r3
 801413e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	2200      	movs	r2, #0
 8014144:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8014148:	4b12      	ldr	r3, [pc, #72]	; (8014194 <tcp_receive+0x270>)
 801414a:	681a      	ldr	r2, [r3, #0]
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	7d1b      	ldrb	r3, [r3, #20]
 8014154:	2b03      	cmp	r3, #3
 8014156:	f240 8097 	bls.w	8014288 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8014166:	429a      	cmp	r2, r3
 8014168:	d245      	bcs.n	80141f6 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	8b5b      	ldrh	r3, [r3, #26]
 801416e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014172:	2b00      	cmp	r3, #0
 8014174:	d014      	beq.n	80141a0 <tcp_receive+0x27c>
 8014176:	2301      	movs	r3, #1
 8014178:	e013      	b.n	80141a2 <tcp_receive+0x27e>
 801417a:	bf00      	nop
 801417c:	0801d69c 	.word	0x0801d69c
 8014180:	0801d9cc 	.word	0x0801d9cc
 8014184:	0801d6e8 	.word	0x0801d6e8
 8014188:	0801d9e8 	.word	0x0801d9e8
 801418c:	20007088 	.word	0x20007088
 8014190:	2000707c 	.word	0x2000707c
 8014194:	20007080 	.word	0x20007080
 8014198:	2000706c 	.word	0x2000706c
 801419c:	20007086 	.word	0x20007086
 80141a0:	2302      	movs	r3, #2
 80141a2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80141a6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80141aa:	b29a      	uxth	r2, r3
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80141b0:	fb12 f303 	smulbb	r3, r2, r3
 80141b4:	b29b      	uxth	r3, r3
 80141b6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80141b8:	4293      	cmp	r3, r2
 80141ba:	bf28      	it	cs
 80141bc:	4613      	movcs	r3, r2
 80141be:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80141c6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80141c8:	4413      	add	r3, r2
 80141ca:	b29a      	uxth	r2, r3
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80141d2:	429a      	cmp	r2, r3
 80141d4:	d309      	bcc.n	80141ea <tcp_receive+0x2c6>
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80141dc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80141de:	4413      	add	r3, r2
 80141e0:	b29a      	uxth	r2, r3
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80141e8:	e04e      	b.n	8014288 <tcp_receive+0x364>
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80141f0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80141f4:	e048      	b.n	8014288 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80141fc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80141fe:	4413      	add	r3, r2
 8014200:	b29a      	uxth	r2, r3
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014208:	429a      	cmp	r2, r3
 801420a:	d309      	bcc.n	8014220 <tcp_receive+0x2fc>
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014212:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014214:	4413      	add	r3, r2
 8014216:	b29a      	uxth	r2, r3
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801421e:	e004      	b.n	801422a <tcp_receive+0x306>
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014226:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014236:	429a      	cmp	r2, r3
 8014238:	d326      	bcc.n	8014288 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014246:	1ad3      	subs	r3, r2, r3
 8014248:	b29a      	uxth	r2, r3
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801425a:	4413      	add	r3, r2
 801425c:	b29a      	uxth	r2, r3
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014264:	429a      	cmp	r2, r3
 8014266:	d30a      	bcc.n	801427e <tcp_receive+0x35a>
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014272:	4413      	add	r3, r2
 8014274:	b29a      	uxth	r2, r3
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801427c:	e004      	b.n	8014288 <tcp_receive+0x364>
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014284:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014290:	4a98      	ldr	r2, [pc, #608]	; (80144f4 <tcp_receive+0x5d0>)
 8014292:	6878      	ldr	r0, [r7, #4]
 8014294:	f7ff fdca 	bl	8013e2c <tcp_free_acked_segments>
 8014298:	4602      	mov	r2, r0
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80142a6:	4a94      	ldr	r2, [pc, #592]	; (80144f8 <tcp_receive+0x5d4>)
 80142a8:	6878      	ldr	r0, [r7, #4]
 80142aa:	f7ff fdbf 	bl	8013e2c <tcp_free_acked_segments>
 80142ae:	4602      	mov	r2, r0
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	d104      	bne.n	80142c6 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80142c2:	861a      	strh	r2, [r3, #48]	; 0x30
 80142c4:	e002      	b.n	80142cc <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80142c6:	687b      	ldr	r3, [r7, #4]
 80142c8:	2200      	movs	r2, #0
 80142ca:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	2200      	movs	r2, #0
 80142d0:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	d103      	bne.n	80142e2 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	2200      	movs	r2, #0
 80142de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80142e8:	4b84      	ldr	r3, [pc, #528]	; (80144fc <tcp_receive+0x5d8>)
 80142ea:	881b      	ldrh	r3, [r3, #0]
 80142ec:	4413      	add	r3, r2
 80142ee:	b29a      	uxth	r2, r3
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	8b5b      	ldrh	r3, [r3, #26]
 80142fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80142fe:	2b00      	cmp	r3, #0
 8014300:	d035      	beq.n	801436e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014306:	2b00      	cmp	r3, #0
 8014308:	d118      	bne.n	801433c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801430e:	2b00      	cmp	r3, #0
 8014310:	d00c      	beq.n	801432c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801431a:	68db      	ldr	r3, [r3, #12]
 801431c:	685b      	ldr	r3, [r3, #4]
 801431e:	4618      	mov	r0, r3
 8014320:	f7fb f92d 	bl	800f57e <lwip_htonl>
 8014324:	4603      	mov	r3, r0
 8014326:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8014328:	2b00      	cmp	r3, #0
 801432a:	dc20      	bgt.n	801436e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	8b5b      	ldrh	r3, [r3, #26]
 8014330:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014334:	b29a      	uxth	r2, r3
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801433a:	e018      	b.n	801436e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014344:	68db      	ldr	r3, [r3, #12]
 8014346:	685b      	ldr	r3, [r3, #4]
 8014348:	4618      	mov	r0, r3
 801434a:	f7fb f918 	bl	800f57e <lwip_htonl>
 801434e:	4603      	mov	r3, r0
 8014350:	1ae3      	subs	r3, r4, r3
 8014352:	2b00      	cmp	r3, #0
 8014354:	dc0b      	bgt.n	801436e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	8b5b      	ldrh	r3, [r3, #26]
 801435a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801435e:	b29a      	uxth	r2, r3
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014364:	e003      	b.n	801436e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8014366:	6878      	ldr	r0, [r7, #4]
 8014368:	f001 ff76 	bl	8016258 <tcp_send_empty_ack>
 801436c:	e000      	b.n	8014370 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801436e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014374:	2b00      	cmp	r3, #0
 8014376:	d05b      	beq.n	8014430 <tcp_receive+0x50c>
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801437c:	4b60      	ldr	r3, [pc, #384]	; (8014500 <tcp_receive+0x5dc>)
 801437e:	681b      	ldr	r3, [r3, #0]
 8014380:	1ad3      	subs	r3, r2, r3
 8014382:	2b00      	cmp	r3, #0
 8014384:	da54      	bge.n	8014430 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8014386:	4b5f      	ldr	r3, [pc, #380]	; (8014504 <tcp_receive+0x5e0>)
 8014388:	681b      	ldr	r3, [r3, #0]
 801438a:	b29a      	uxth	r2, r3
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014390:	b29b      	uxth	r3, r3
 8014392:	1ad3      	subs	r3, r2, r3
 8014394:	b29b      	uxth	r3, r3
 8014396:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801439a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80143a4:	10db      	asrs	r3, r3, #3
 80143a6:	b21b      	sxth	r3, r3
 80143a8:	b29b      	uxth	r3, r3
 80143aa:	1ad3      	subs	r3, r2, r3
 80143ac:	b29b      	uxth	r3, r3
 80143ae:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80143b2:	687b      	ldr	r3, [r7, #4]
 80143b4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80143b8:	b29a      	uxth	r2, r3
 80143ba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80143be:	4413      	add	r3, r2
 80143c0:	b29b      	uxth	r3, r3
 80143c2:	b21a      	sxth	r2, r3
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80143c8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	da05      	bge.n	80143dc <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80143d0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80143d4:	425b      	negs	r3, r3
 80143d6:	b29b      	uxth	r3, r3
 80143d8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80143dc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80143e6:	109b      	asrs	r3, r3, #2
 80143e8:	b21b      	sxth	r3, r3
 80143ea:	b29b      	uxth	r3, r3
 80143ec:	1ad3      	subs	r3, r2, r3
 80143ee:	b29b      	uxth	r3, r3
 80143f0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80143fa:	b29a      	uxth	r2, r3
 80143fc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8014400:	4413      	add	r3, r2
 8014402:	b29b      	uxth	r3, r3
 8014404:	b21a      	sxth	r2, r3
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014410:	10db      	asrs	r3, r3, #3
 8014412:	b21b      	sxth	r3, r3
 8014414:	b29a      	uxth	r2, r3
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801441c:	b29b      	uxth	r3, r3
 801441e:	4413      	add	r3, r2
 8014420:	b29b      	uxth	r3, r3
 8014422:	b21a      	sxth	r2, r3
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	2200      	movs	r2, #0
 801442e:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8014430:	4b35      	ldr	r3, [pc, #212]	; (8014508 <tcp_receive+0x5e4>)
 8014432:	881b      	ldrh	r3, [r3, #0]
 8014434:	2b00      	cmp	r3, #0
 8014436:	f000 84e2 	beq.w	8014dfe <tcp_receive+0xeda>
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	7d1b      	ldrb	r3, [r3, #20]
 801443e:	2b06      	cmp	r3, #6
 8014440:	f200 84dd 	bhi.w	8014dfe <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014448:	4b30      	ldr	r3, [pc, #192]	; (801450c <tcp_receive+0x5e8>)
 801444a:	681b      	ldr	r3, [r3, #0]
 801444c:	1ad3      	subs	r3, r2, r3
 801444e:	3b01      	subs	r3, #1
 8014450:	2b00      	cmp	r3, #0
 8014452:	f2c0 808f 	blt.w	8014574 <tcp_receive+0x650>
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801445a:	4b2b      	ldr	r3, [pc, #172]	; (8014508 <tcp_receive+0x5e4>)
 801445c:	881b      	ldrh	r3, [r3, #0]
 801445e:	4619      	mov	r1, r3
 8014460:	4b2a      	ldr	r3, [pc, #168]	; (801450c <tcp_receive+0x5e8>)
 8014462:	681b      	ldr	r3, [r3, #0]
 8014464:	440b      	add	r3, r1
 8014466:	1ad3      	subs	r3, r2, r3
 8014468:	3301      	adds	r3, #1
 801446a:	2b00      	cmp	r3, #0
 801446c:	f300 8082 	bgt.w	8014574 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8014470:	4b27      	ldr	r3, [pc, #156]	; (8014510 <tcp_receive+0x5ec>)
 8014472:	685b      	ldr	r3, [r3, #4]
 8014474:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801447a:	4b24      	ldr	r3, [pc, #144]	; (801450c <tcp_receive+0x5e8>)
 801447c:	681b      	ldr	r3, [r3, #0]
 801447e:	1ad3      	subs	r3, r2, r3
 8014480:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8014482:	4b23      	ldr	r3, [pc, #140]	; (8014510 <tcp_receive+0x5ec>)
 8014484:	685b      	ldr	r3, [r3, #4]
 8014486:	2b00      	cmp	r3, #0
 8014488:	d106      	bne.n	8014498 <tcp_receive+0x574>
 801448a:	4b22      	ldr	r3, [pc, #136]	; (8014514 <tcp_receive+0x5f0>)
 801448c:	f240 5294 	movw	r2, #1428	; 0x594
 8014490:	4921      	ldr	r1, [pc, #132]	; (8014518 <tcp_receive+0x5f4>)
 8014492:	4822      	ldr	r0, [pc, #136]	; (801451c <tcp_receive+0x5f8>)
 8014494:	f005 fb7c 	bl	8019b90 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8014498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801449a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801449e:	4293      	cmp	r3, r2
 80144a0:	d906      	bls.n	80144b0 <tcp_receive+0x58c>
 80144a2:	4b1c      	ldr	r3, [pc, #112]	; (8014514 <tcp_receive+0x5f0>)
 80144a4:	f240 5295 	movw	r2, #1429	; 0x595
 80144a8:	491d      	ldr	r1, [pc, #116]	; (8014520 <tcp_receive+0x5fc>)
 80144aa:	481c      	ldr	r0, [pc, #112]	; (801451c <tcp_receive+0x5f8>)
 80144ac:	f005 fb70 	bl	8019b90 <iprintf>
      off = (u16_t)off32;
 80144b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144b2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80144b6:	4b16      	ldr	r3, [pc, #88]	; (8014510 <tcp_receive+0x5ec>)
 80144b8:	685b      	ldr	r3, [r3, #4]
 80144ba:	891b      	ldrh	r3, [r3, #8]
 80144bc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80144c0:	429a      	cmp	r2, r3
 80144c2:	d906      	bls.n	80144d2 <tcp_receive+0x5ae>
 80144c4:	4b13      	ldr	r3, [pc, #76]	; (8014514 <tcp_receive+0x5f0>)
 80144c6:	f240 5297 	movw	r2, #1431	; 0x597
 80144ca:	4916      	ldr	r1, [pc, #88]	; (8014524 <tcp_receive+0x600>)
 80144cc:	4813      	ldr	r0, [pc, #76]	; (801451c <tcp_receive+0x5f8>)
 80144ce:	f005 fb5f 	bl	8019b90 <iprintf>
      inseg.len -= off;
 80144d2:	4b0f      	ldr	r3, [pc, #60]	; (8014510 <tcp_receive+0x5ec>)
 80144d4:	891a      	ldrh	r2, [r3, #8]
 80144d6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80144da:	1ad3      	subs	r3, r2, r3
 80144dc:	b29a      	uxth	r2, r3
 80144de:	4b0c      	ldr	r3, [pc, #48]	; (8014510 <tcp_receive+0x5ec>)
 80144e0:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80144e2:	4b0b      	ldr	r3, [pc, #44]	; (8014510 <tcp_receive+0x5ec>)
 80144e4:	685b      	ldr	r3, [r3, #4]
 80144e6:	891a      	ldrh	r2, [r3, #8]
 80144e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80144ec:	1ad3      	subs	r3, r2, r3
 80144ee:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80144f0:	e02a      	b.n	8014548 <tcp_receive+0x624>
 80144f2:	bf00      	nop
 80144f4:	0801da04 	.word	0x0801da04
 80144f8:	0801da0c 	.word	0x0801da0c
 80144fc:	20007084 	.word	0x20007084
 8014500:	20007080 	.word	0x20007080
 8014504:	20007044 	.word	0x20007044
 8014508:	20007086 	.word	0x20007086
 801450c:	2000707c 	.word	0x2000707c
 8014510:	2000705c 	.word	0x2000705c
 8014514:	0801d69c 	.word	0x0801d69c
 8014518:	0801da14 	.word	0x0801da14
 801451c:	0801d6e8 	.word	0x0801d6e8
 8014520:	0801da24 	.word	0x0801da24
 8014524:	0801da34 	.word	0x0801da34
        off -= p->len;
 8014528:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801452a:	895b      	ldrh	r3, [r3, #10]
 801452c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014530:	1ad3      	subs	r3, r2, r3
 8014532:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8014536:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014538:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801453a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801453c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801453e:	2200      	movs	r2, #0
 8014540:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8014542:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014544:	681b      	ldr	r3, [r3, #0]
 8014546:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8014548:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801454a:	895b      	ldrh	r3, [r3, #10]
 801454c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014550:	429a      	cmp	r2, r3
 8014552:	d8e9      	bhi.n	8014528 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8014554:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014558:	4619      	mov	r1, r3
 801455a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801455c:	f7fc fb78 	bl	8010c50 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014564:	4a91      	ldr	r2, [pc, #580]	; (80147ac <tcp_receive+0x888>)
 8014566:	6013      	str	r3, [r2, #0]
 8014568:	4b91      	ldr	r3, [pc, #580]	; (80147b0 <tcp_receive+0x88c>)
 801456a:	68db      	ldr	r3, [r3, #12]
 801456c:	4a8f      	ldr	r2, [pc, #572]	; (80147ac <tcp_receive+0x888>)
 801456e:	6812      	ldr	r2, [r2, #0]
 8014570:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8014572:	e00d      	b.n	8014590 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8014574:	4b8d      	ldr	r3, [pc, #564]	; (80147ac <tcp_receive+0x888>)
 8014576:	681a      	ldr	r2, [r3, #0]
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801457c:	1ad3      	subs	r3, r2, r3
 801457e:	2b00      	cmp	r3, #0
 8014580:	da06      	bge.n	8014590 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	8b5b      	ldrh	r3, [r3, #26]
 8014586:	f043 0302 	orr.w	r3, r3, #2
 801458a:	b29a      	uxth	r2, r3
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014590:	4b86      	ldr	r3, [pc, #536]	; (80147ac <tcp_receive+0x888>)
 8014592:	681a      	ldr	r2, [r3, #0]
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014598:	1ad3      	subs	r3, r2, r3
 801459a:	2b00      	cmp	r3, #0
 801459c:	f2c0 842a 	blt.w	8014df4 <tcp_receive+0xed0>
 80145a0:	4b82      	ldr	r3, [pc, #520]	; (80147ac <tcp_receive+0x888>)
 80145a2:	681a      	ldr	r2, [r3, #0]
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145a8:	6879      	ldr	r1, [r7, #4]
 80145aa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80145ac:	440b      	add	r3, r1
 80145ae:	1ad3      	subs	r3, r2, r3
 80145b0:	3301      	adds	r3, #1
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	f300 841e 	bgt.w	8014df4 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80145bc:	4b7b      	ldr	r3, [pc, #492]	; (80147ac <tcp_receive+0x888>)
 80145be:	681b      	ldr	r3, [r3, #0]
 80145c0:	429a      	cmp	r2, r3
 80145c2:	f040 829a 	bne.w	8014afa <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80145c6:	4b7a      	ldr	r3, [pc, #488]	; (80147b0 <tcp_receive+0x88c>)
 80145c8:	891c      	ldrh	r4, [r3, #8]
 80145ca:	4b79      	ldr	r3, [pc, #484]	; (80147b0 <tcp_receive+0x88c>)
 80145cc:	68db      	ldr	r3, [r3, #12]
 80145ce:	899b      	ldrh	r3, [r3, #12]
 80145d0:	b29b      	uxth	r3, r3
 80145d2:	4618      	mov	r0, r3
 80145d4:	f7fa ffbe 	bl	800f554 <lwip_htons>
 80145d8:	4603      	mov	r3, r0
 80145da:	b2db      	uxtb	r3, r3
 80145dc:	f003 0303 	and.w	r3, r3, #3
 80145e0:	2b00      	cmp	r3, #0
 80145e2:	d001      	beq.n	80145e8 <tcp_receive+0x6c4>
 80145e4:	2301      	movs	r3, #1
 80145e6:	e000      	b.n	80145ea <tcp_receive+0x6c6>
 80145e8:	2300      	movs	r3, #0
 80145ea:	4423      	add	r3, r4
 80145ec:	b29a      	uxth	r2, r3
 80145ee:	4b71      	ldr	r3, [pc, #452]	; (80147b4 <tcp_receive+0x890>)
 80145f0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80145f6:	4b6f      	ldr	r3, [pc, #444]	; (80147b4 <tcp_receive+0x890>)
 80145f8:	881b      	ldrh	r3, [r3, #0]
 80145fa:	429a      	cmp	r2, r3
 80145fc:	d275      	bcs.n	80146ea <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80145fe:	4b6c      	ldr	r3, [pc, #432]	; (80147b0 <tcp_receive+0x88c>)
 8014600:	68db      	ldr	r3, [r3, #12]
 8014602:	899b      	ldrh	r3, [r3, #12]
 8014604:	b29b      	uxth	r3, r3
 8014606:	4618      	mov	r0, r3
 8014608:	f7fa ffa4 	bl	800f554 <lwip_htons>
 801460c:	4603      	mov	r3, r0
 801460e:	b2db      	uxtb	r3, r3
 8014610:	f003 0301 	and.w	r3, r3, #1
 8014614:	2b00      	cmp	r3, #0
 8014616:	d01f      	beq.n	8014658 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8014618:	4b65      	ldr	r3, [pc, #404]	; (80147b0 <tcp_receive+0x88c>)
 801461a:	68db      	ldr	r3, [r3, #12]
 801461c:	899b      	ldrh	r3, [r3, #12]
 801461e:	b29b      	uxth	r3, r3
 8014620:	b21b      	sxth	r3, r3
 8014622:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014626:	b21c      	sxth	r4, r3
 8014628:	4b61      	ldr	r3, [pc, #388]	; (80147b0 <tcp_receive+0x88c>)
 801462a:	68db      	ldr	r3, [r3, #12]
 801462c:	899b      	ldrh	r3, [r3, #12]
 801462e:	b29b      	uxth	r3, r3
 8014630:	4618      	mov	r0, r3
 8014632:	f7fa ff8f 	bl	800f554 <lwip_htons>
 8014636:	4603      	mov	r3, r0
 8014638:	b2db      	uxtb	r3, r3
 801463a:	b29b      	uxth	r3, r3
 801463c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8014640:	b29b      	uxth	r3, r3
 8014642:	4618      	mov	r0, r3
 8014644:	f7fa ff86 	bl	800f554 <lwip_htons>
 8014648:	4603      	mov	r3, r0
 801464a:	b21b      	sxth	r3, r3
 801464c:	4323      	orrs	r3, r4
 801464e:	b21a      	sxth	r2, r3
 8014650:	4b57      	ldr	r3, [pc, #348]	; (80147b0 <tcp_receive+0x88c>)
 8014652:	68db      	ldr	r3, [r3, #12]
 8014654:	b292      	uxth	r2, r2
 8014656:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801465c:	4b54      	ldr	r3, [pc, #336]	; (80147b0 <tcp_receive+0x88c>)
 801465e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8014660:	4b53      	ldr	r3, [pc, #332]	; (80147b0 <tcp_receive+0x88c>)
 8014662:	68db      	ldr	r3, [r3, #12]
 8014664:	899b      	ldrh	r3, [r3, #12]
 8014666:	b29b      	uxth	r3, r3
 8014668:	4618      	mov	r0, r3
 801466a:	f7fa ff73 	bl	800f554 <lwip_htons>
 801466e:	4603      	mov	r3, r0
 8014670:	b2db      	uxtb	r3, r3
 8014672:	f003 0302 	and.w	r3, r3, #2
 8014676:	2b00      	cmp	r3, #0
 8014678:	d005      	beq.n	8014686 <tcp_receive+0x762>
            inseg.len -= 1;
 801467a:	4b4d      	ldr	r3, [pc, #308]	; (80147b0 <tcp_receive+0x88c>)
 801467c:	891b      	ldrh	r3, [r3, #8]
 801467e:	3b01      	subs	r3, #1
 8014680:	b29a      	uxth	r2, r3
 8014682:	4b4b      	ldr	r3, [pc, #300]	; (80147b0 <tcp_receive+0x88c>)
 8014684:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8014686:	4b4a      	ldr	r3, [pc, #296]	; (80147b0 <tcp_receive+0x88c>)
 8014688:	685b      	ldr	r3, [r3, #4]
 801468a:	4a49      	ldr	r2, [pc, #292]	; (80147b0 <tcp_receive+0x88c>)
 801468c:	8912      	ldrh	r2, [r2, #8]
 801468e:	4611      	mov	r1, r2
 8014690:	4618      	mov	r0, r3
 8014692:	f7fc f9df 	bl	8010a54 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8014696:	4b46      	ldr	r3, [pc, #280]	; (80147b0 <tcp_receive+0x88c>)
 8014698:	891c      	ldrh	r4, [r3, #8]
 801469a:	4b45      	ldr	r3, [pc, #276]	; (80147b0 <tcp_receive+0x88c>)
 801469c:	68db      	ldr	r3, [r3, #12]
 801469e:	899b      	ldrh	r3, [r3, #12]
 80146a0:	b29b      	uxth	r3, r3
 80146a2:	4618      	mov	r0, r3
 80146a4:	f7fa ff56 	bl	800f554 <lwip_htons>
 80146a8:	4603      	mov	r3, r0
 80146aa:	b2db      	uxtb	r3, r3
 80146ac:	f003 0303 	and.w	r3, r3, #3
 80146b0:	2b00      	cmp	r3, #0
 80146b2:	d001      	beq.n	80146b8 <tcp_receive+0x794>
 80146b4:	2301      	movs	r3, #1
 80146b6:	e000      	b.n	80146ba <tcp_receive+0x796>
 80146b8:	2300      	movs	r3, #0
 80146ba:	4423      	add	r3, r4
 80146bc:	b29a      	uxth	r2, r3
 80146be:	4b3d      	ldr	r3, [pc, #244]	; (80147b4 <tcp_receive+0x890>)
 80146c0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80146c2:	4b3c      	ldr	r3, [pc, #240]	; (80147b4 <tcp_receive+0x890>)
 80146c4:	881b      	ldrh	r3, [r3, #0]
 80146c6:	461a      	mov	r2, r3
 80146c8:	4b38      	ldr	r3, [pc, #224]	; (80147ac <tcp_receive+0x888>)
 80146ca:	681b      	ldr	r3, [r3, #0]
 80146cc:	441a      	add	r2, r3
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146d2:	6879      	ldr	r1, [r7, #4]
 80146d4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80146d6:	440b      	add	r3, r1
 80146d8:	429a      	cmp	r2, r3
 80146da:	d006      	beq.n	80146ea <tcp_receive+0x7c6>
 80146dc:	4b36      	ldr	r3, [pc, #216]	; (80147b8 <tcp_receive+0x894>)
 80146de:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80146e2:	4936      	ldr	r1, [pc, #216]	; (80147bc <tcp_receive+0x898>)
 80146e4:	4836      	ldr	r0, [pc, #216]	; (80147c0 <tcp_receive+0x89c>)
 80146e6:	f005 fa53 	bl	8019b90 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	f000 80e7 	beq.w	80148c2 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80146f4:	4b2e      	ldr	r3, [pc, #184]	; (80147b0 <tcp_receive+0x88c>)
 80146f6:	68db      	ldr	r3, [r3, #12]
 80146f8:	899b      	ldrh	r3, [r3, #12]
 80146fa:	b29b      	uxth	r3, r3
 80146fc:	4618      	mov	r0, r3
 80146fe:	f7fa ff29 	bl	800f554 <lwip_htons>
 8014702:	4603      	mov	r3, r0
 8014704:	b2db      	uxtb	r3, r3
 8014706:	f003 0301 	and.w	r3, r3, #1
 801470a:	2b00      	cmp	r3, #0
 801470c:	d010      	beq.n	8014730 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801470e:	e00a      	b.n	8014726 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014714:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801471a:	681a      	ldr	r2, [r3, #0]
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8014720:	68f8      	ldr	r0, [r7, #12]
 8014722:	f7fd fd92 	bl	801224a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801472a:	2b00      	cmp	r3, #0
 801472c:	d1f0      	bne.n	8014710 <tcp_receive+0x7ec>
 801472e:	e0c8      	b.n	80148c2 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014734:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8014736:	e052      	b.n	80147de <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8014738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801473a:	68db      	ldr	r3, [r3, #12]
 801473c:	899b      	ldrh	r3, [r3, #12]
 801473e:	b29b      	uxth	r3, r3
 8014740:	4618      	mov	r0, r3
 8014742:	f7fa ff07 	bl	800f554 <lwip_htons>
 8014746:	4603      	mov	r3, r0
 8014748:	b2db      	uxtb	r3, r3
 801474a:	f003 0301 	and.w	r3, r3, #1
 801474e:	2b00      	cmp	r3, #0
 8014750:	d03d      	beq.n	80147ce <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8014752:	4b17      	ldr	r3, [pc, #92]	; (80147b0 <tcp_receive+0x88c>)
 8014754:	68db      	ldr	r3, [r3, #12]
 8014756:	899b      	ldrh	r3, [r3, #12]
 8014758:	b29b      	uxth	r3, r3
 801475a:	4618      	mov	r0, r3
 801475c:	f7fa fefa 	bl	800f554 <lwip_htons>
 8014760:	4603      	mov	r3, r0
 8014762:	b2db      	uxtb	r3, r3
 8014764:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8014768:	2b00      	cmp	r3, #0
 801476a:	d130      	bne.n	80147ce <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801476c:	4b10      	ldr	r3, [pc, #64]	; (80147b0 <tcp_receive+0x88c>)
 801476e:	68db      	ldr	r3, [r3, #12]
 8014770:	899b      	ldrh	r3, [r3, #12]
 8014772:	b29c      	uxth	r4, r3
 8014774:	2001      	movs	r0, #1
 8014776:	f7fa feed 	bl	800f554 <lwip_htons>
 801477a:	4603      	mov	r3, r0
 801477c:	461a      	mov	r2, r3
 801477e:	4b0c      	ldr	r3, [pc, #48]	; (80147b0 <tcp_receive+0x88c>)
 8014780:	68db      	ldr	r3, [r3, #12]
 8014782:	4322      	orrs	r2, r4
 8014784:	b292      	uxth	r2, r2
 8014786:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8014788:	4b09      	ldr	r3, [pc, #36]	; (80147b0 <tcp_receive+0x88c>)
 801478a:	891c      	ldrh	r4, [r3, #8]
 801478c:	4b08      	ldr	r3, [pc, #32]	; (80147b0 <tcp_receive+0x88c>)
 801478e:	68db      	ldr	r3, [r3, #12]
 8014790:	899b      	ldrh	r3, [r3, #12]
 8014792:	b29b      	uxth	r3, r3
 8014794:	4618      	mov	r0, r3
 8014796:	f7fa fedd 	bl	800f554 <lwip_htons>
 801479a:	4603      	mov	r3, r0
 801479c:	b2db      	uxtb	r3, r3
 801479e:	f003 0303 	and.w	r3, r3, #3
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	d00e      	beq.n	80147c4 <tcp_receive+0x8a0>
 80147a6:	2301      	movs	r3, #1
 80147a8:	e00d      	b.n	80147c6 <tcp_receive+0x8a2>
 80147aa:	bf00      	nop
 80147ac:	2000707c 	.word	0x2000707c
 80147b0:	2000705c 	.word	0x2000705c
 80147b4:	20007086 	.word	0x20007086
 80147b8:	0801d69c 	.word	0x0801d69c
 80147bc:	0801da44 	.word	0x0801da44
 80147c0:	0801d6e8 	.word	0x0801d6e8
 80147c4:	2300      	movs	r3, #0
 80147c6:	4423      	add	r3, r4
 80147c8:	b29a      	uxth	r2, r3
 80147ca:	4b98      	ldr	r3, [pc, #608]	; (8014a2c <tcp_receive+0xb08>)
 80147cc:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80147ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80147d0:	613b      	str	r3, [r7, #16]
              next = next->next;
 80147d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80147d4:	681b      	ldr	r3, [r3, #0]
 80147d6:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80147d8:	6938      	ldr	r0, [r7, #16]
 80147da:	f7fd fd36 	bl	801224a <tcp_seg_free>
            while (next &&
 80147de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	d00e      	beq.n	8014802 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80147e4:	4b91      	ldr	r3, [pc, #580]	; (8014a2c <tcp_receive+0xb08>)
 80147e6:	881b      	ldrh	r3, [r3, #0]
 80147e8:	461a      	mov	r2, r3
 80147ea:	4b91      	ldr	r3, [pc, #580]	; (8014a30 <tcp_receive+0xb0c>)
 80147ec:	681b      	ldr	r3, [r3, #0]
 80147ee:	441a      	add	r2, r3
 80147f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80147f2:	68db      	ldr	r3, [r3, #12]
 80147f4:	685b      	ldr	r3, [r3, #4]
 80147f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80147f8:	8909      	ldrh	r1, [r1, #8]
 80147fa:	440b      	add	r3, r1
 80147fc:	1ad3      	subs	r3, r2, r3
            while (next &&
 80147fe:	2b00      	cmp	r3, #0
 8014800:	da9a      	bge.n	8014738 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8014802:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014804:	2b00      	cmp	r3, #0
 8014806:	d059      	beq.n	80148bc <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8014808:	4b88      	ldr	r3, [pc, #544]	; (8014a2c <tcp_receive+0xb08>)
 801480a:	881b      	ldrh	r3, [r3, #0]
 801480c:	461a      	mov	r2, r3
 801480e:	4b88      	ldr	r3, [pc, #544]	; (8014a30 <tcp_receive+0xb0c>)
 8014810:	681b      	ldr	r3, [r3, #0]
 8014812:	441a      	add	r2, r3
 8014814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014816:	68db      	ldr	r3, [r3, #12]
 8014818:	685b      	ldr	r3, [r3, #4]
 801481a:	1ad3      	subs	r3, r2, r3
            if (next &&
 801481c:	2b00      	cmp	r3, #0
 801481e:	dd4d      	ble.n	80148bc <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8014820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014822:	68db      	ldr	r3, [r3, #12]
 8014824:	685b      	ldr	r3, [r3, #4]
 8014826:	b29a      	uxth	r2, r3
 8014828:	4b81      	ldr	r3, [pc, #516]	; (8014a30 <tcp_receive+0xb0c>)
 801482a:	681b      	ldr	r3, [r3, #0]
 801482c:	b29b      	uxth	r3, r3
 801482e:	1ad3      	subs	r3, r2, r3
 8014830:	b29a      	uxth	r2, r3
 8014832:	4b80      	ldr	r3, [pc, #512]	; (8014a34 <tcp_receive+0xb10>)
 8014834:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8014836:	4b7f      	ldr	r3, [pc, #508]	; (8014a34 <tcp_receive+0xb10>)
 8014838:	68db      	ldr	r3, [r3, #12]
 801483a:	899b      	ldrh	r3, [r3, #12]
 801483c:	b29b      	uxth	r3, r3
 801483e:	4618      	mov	r0, r3
 8014840:	f7fa fe88 	bl	800f554 <lwip_htons>
 8014844:	4603      	mov	r3, r0
 8014846:	b2db      	uxtb	r3, r3
 8014848:	f003 0302 	and.w	r3, r3, #2
 801484c:	2b00      	cmp	r3, #0
 801484e:	d005      	beq.n	801485c <tcp_receive+0x938>
                inseg.len -= 1;
 8014850:	4b78      	ldr	r3, [pc, #480]	; (8014a34 <tcp_receive+0xb10>)
 8014852:	891b      	ldrh	r3, [r3, #8]
 8014854:	3b01      	subs	r3, #1
 8014856:	b29a      	uxth	r2, r3
 8014858:	4b76      	ldr	r3, [pc, #472]	; (8014a34 <tcp_receive+0xb10>)
 801485a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801485c:	4b75      	ldr	r3, [pc, #468]	; (8014a34 <tcp_receive+0xb10>)
 801485e:	685b      	ldr	r3, [r3, #4]
 8014860:	4a74      	ldr	r2, [pc, #464]	; (8014a34 <tcp_receive+0xb10>)
 8014862:	8912      	ldrh	r2, [r2, #8]
 8014864:	4611      	mov	r1, r2
 8014866:	4618      	mov	r0, r3
 8014868:	f7fc f8f4 	bl	8010a54 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801486c:	4b71      	ldr	r3, [pc, #452]	; (8014a34 <tcp_receive+0xb10>)
 801486e:	891c      	ldrh	r4, [r3, #8]
 8014870:	4b70      	ldr	r3, [pc, #448]	; (8014a34 <tcp_receive+0xb10>)
 8014872:	68db      	ldr	r3, [r3, #12]
 8014874:	899b      	ldrh	r3, [r3, #12]
 8014876:	b29b      	uxth	r3, r3
 8014878:	4618      	mov	r0, r3
 801487a:	f7fa fe6b 	bl	800f554 <lwip_htons>
 801487e:	4603      	mov	r3, r0
 8014880:	b2db      	uxtb	r3, r3
 8014882:	f003 0303 	and.w	r3, r3, #3
 8014886:	2b00      	cmp	r3, #0
 8014888:	d001      	beq.n	801488e <tcp_receive+0x96a>
 801488a:	2301      	movs	r3, #1
 801488c:	e000      	b.n	8014890 <tcp_receive+0x96c>
 801488e:	2300      	movs	r3, #0
 8014890:	4423      	add	r3, r4
 8014892:	b29a      	uxth	r2, r3
 8014894:	4b65      	ldr	r3, [pc, #404]	; (8014a2c <tcp_receive+0xb08>)
 8014896:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8014898:	4b64      	ldr	r3, [pc, #400]	; (8014a2c <tcp_receive+0xb08>)
 801489a:	881b      	ldrh	r3, [r3, #0]
 801489c:	461a      	mov	r2, r3
 801489e:	4b64      	ldr	r3, [pc, #400]	; (8014a30 <tcp_receive+0xb0c>)
 80148a0:	681b      	ldr	r3, [r3, #0]
 80148a2:	441a      	add	r2, r3
 80148a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80148a6:	68db      	ldr	r3, [r3, #12]
 80148a8:	685b      	ldr	r3, [r3, #4]
 80148aa:	429a      	cmp	r2, r3
 80148ac:	d006      	beq.n	80148bc <tcp_receive+0x998>
 80148ae:	4b62      	ldr	r3, [pc, #392]	; (8014a38 <tcp_receive+0xb14>)
 80148b0:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80148b4:	4961      	ldr	r1, [pc, #388]	; (8014a3c <tcp_receive+0xb18>)
 80148b6:	4862      	ldr	r0, [pc, #392]	; (8014a40 <tcp_receive+0xb1c>)
 80148b8:	f005 f96a 	bl	8019b90 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80148c0:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80148c2:	4b5a      	ldr	r3, [pc, #360]	; (8014a2c <tcp_receive+0xb08>)
 80148c4:	881b      	ldrh	r3, [r3, #0]
 80148c6:	461a      	mov	r2, r3
 80148c8:	4b59      	ldr	r3, [pc, #356]	; (8014a30 <tcp_receive+0xb0c>)
 80148ca:	681b      	ldr	r3, [r3, #0]
 80148cc:	441a      	add	r2, r3
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80148d6:	4b55      	ldr	r3, [pc, #340]	; (8014a2c <tcp_receive+0xb08>)
 80148d8:	881b      	ldrh	r3, [r3, #0]
 80148da:	429a      	cmp	r2, r3
 80148dc:	d206      	bcs.n	80148ec <tcp_receive+0x9c8>
 80148de:	4b56      	ldr	r3, [pc, #344]	; (8014a38 <tcp_receive+0xb14>)
 80148e0:	f240 6207 	movw	r2, #1543	; 0x607
 80148e4:	4957      	ldr	r1, [pc, #348]	; (8014a44 <tcp_receive+0xb20>)
 80148e6:	4856      	ldr	r0, [pc, #344]	; (8014a40 <tcp_receive+0xb1c>)
 80148e8:	f005 f952 	bl	8019b90 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80148f0:	4b4e      	ldr	r3, [pc, #312]	; (8014a2c <tcp_receive+0xb08>)
 80148f2:	881b      	ldrh	r3, [r3, #0]
 80148f4:	1ad3      	subs	r3, r2, r3
 80148f6:	b29a      	uxth	r2, r3
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80148fc:	6878      	ldr	r0, [r7, #4]
 80148fe:	f7fc ffc1 	bl	8011884 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8014902:	4b4c      	ldr	r3, [pc, #304]	; (8014a34 <tcp_receive+0xb10>)
 8014904:	685b      	ldr	r3, [r3, #4]
 8014906:	891b      	ldrh	r3, [r3, #8]
 8014908:	2b00      	cmp	r3, #0
 801490a:	d006      	beq.n	801491a <tcp_receive+0x9f6>
          recv_data = inseg.p;
 801490c:	4b49      	ldr	r3, [pc, #292]	; (8014a34 <tcp_receive+0xb10>)
 801490e:	685b      	ldr	r3, [r3, #4]
 8014910:	4a4d      	ldr	r2, [pc, #308]	; (8014a48 <tcp_receive+0xb24>)
 8014912:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8014914:	4b47      	ldr	r3, [pc, #284]	; (8014a34 <tcp_receive+0xb10>)
 8014916:	2200      	movs	r2, #0
 8014918:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801491a:	4b46      	ldr	r3, [pc, #280]	; (8014a34 <tcp_receive+0xb10>)
 801491c:	68db      	ldr	r3, [r3, #12]
 801491e:	899b      	ldrh	r3, [r3, #12]
 8014920:	b29b      	uxth	r3, r3
 8014922:	4618      	mov	r0, r3
 8014924:	f7fa fe16 	bl	800f554 <lwip_htons>
 8014928:	4603      	mov	r3, r0
 801492a:	b2db      	uxtb	r3, r3
 801492c:	f003 0301 	and.w	r3, r3, #1
 8014930:	2b00      	cmp	r3, #0
 8014932:	f000 80b8 	beq.w	8014aa6 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8014936:	4b45      	ldr	r3, [pc, #276]	; (8014a4c <tcp_receive+0xb28>)
 8014938:	781b      	ldrb	r3, [r3, #0]
 801493a:	f043 0320 	orr.w	r3, r3, #32
 801493e:	b2da      	uxtb	r2, r3
 8014940:	4b42      	ldr	r3, [pc, #264]	; (8014a4c <tcp_receive+0xb28>)
 8014942:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8014944:	e0af      	b.n	8014aa6 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801494a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014950:	68db      	ldr	r3, [r3, #12]
 8014952:	685b      	ldr	r3, [r3, #4]
 8014954:	4a36      	ldr	r2, [pc, #216]	; (8014a30 <tcp_receive+0xb0c>)
 8014956:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8014958:	68bb      	ldr	r3, [r7, #8]
 801495a:	891b      	ldrh	r3, [r3, #8]
 801495c:	461c      	mov	r4, r3
 801495e:	68bb      	ldr	r3, [r7, #8]
 8014960:	68db      	ldr	r3, [r3, #12]
 8014962:	899b      	ldrh	r3, [r3, #12]
 8014964:	b29b      	uxth	r3, r3
 8014966:	4618      	mov	r0, r3
 8014968:	f7fa fdf4 	bl	800f554 <lwip_htons>
 801496c:	4603      	mov	r3, r0
 801496e:	b2db      	uxtb	r3, r3
 8014970:	f003 0303 	and.w	r3, r3, #3
 8014974:	2b00      	cmp	r3, #0
 8014976:	d001      	beq.n	801497c <tcp_receive+0xa58>
 8014978:	2301      	movs	r3, #1
 801497a:	e000      	b.n	801497e <tcp_receive+0xa5a>
 801497c:	2300      	movs	r3, #0
 801497e:	191a      	adds	r2, r3, r4
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014984:	441a      	add	r2, r3
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801498e:	461c      	mov	r4, r3
 8014990:	68bb      	ldr	r3, [r7, #8]
 8014992:	891b      	ldrh	r3, [r3, #8]
 8014994:	461d      	mov	r5, r3
 8014996:	68bb      	ldr	r3, [r7, #8]
 8014998:	68db      	ldr	r3, [r3, #12]
 801499a:	899b      	ldrh	r3, [r3, #12]
 801499c:	b29b      	uxth	r3, r3
 801499e:	4618      	mov	r0, r3
 80149a0:	f7fa fdd8 	bl	800f554 <lwip_htons>
 80149a4:	4603      	mov	r3, r0
 80149a6:	b2db      	uxtb	r3, r3
 80149a8:	f003 0303 	and.w	r3, r3, #3
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	d001      	beq.n	80149b4 <tcp_receive+0xa90>
 80149b0:	2301      	movs	r3, #1
 80149b2:	e000      	b.n	80149b6 <tcp_receive+0xa92>
 80149b4:	2300      	movs	r3, #0
 80149b6:	442b      	add	r3, r5
 80149b8:	429c      	cmp	r4, r3
 80149ba:	d206      	bcs.n	80149ca <tcp_receive+0xaa6>
 80149bc:	4b1e      	ldr	r3, [pc, #120]	; (8014a38 <tcp_receive+0xb14>)
 80149be:	f240 622b 	movw	r2, #1579	; 0x62b
 80149c2:	4923      	ldr	r1, [pc, #140]	; (8014a50 <tcp_receive+0xb2c>)
 80149c4:	481e      	ldr	r0, [pc, #120]	; (8014a40 <tcp_receive+0xb1c>)
 80149c6:	f005 f8e3 	bl	8019b90 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80149ca:	68bb      	ldr	r3, [r7, #8]
 80149cc:	891b      	ldrh	r3, [r3, #8]
 80149ce:	461c      	mov	r4, r3
 80149d0:	68bb      	ldr	r3, [r7, #8]
 80149d2:	68db      	ldr	r3, [r3, #12]
 80149d4:	899b      	ldrh	r3, [r3, #12]
 80149d6:	b29b      	uxth	r3, r3
 80149d8:	4618      	mov	r0, r3
 80149da:	f7fa fdbb 	bl	800f554 <lwip_htons>
 80149de:	4603      	mov	r3, r0
 80149e0:	b2db      	uxtb	r3, r3
 80149e2:	f003 0303 	and.w	r3, r3, #3
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	d001      	beq.n	80149ee <tcp_receive+0xaca>
 80149ea:	2301      	movs	r3, #1
 80149ec:	e000      	b.n	80149f0 <tcp_receive+0xacc>
 80149ee:	2300      	movs	r3, #0
 80149f0:	1919      	adds	r1, r3, r4
 80149f2:	687b      	ldr	r3, [r7, #4]
 80149f4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80149f6:	b28b      	uxth	r3, r1
 80149f8:	1ad3      	subs	r3, r2, r3
 80149fa:	b29a      	uxth	r2, r3
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8014a00:	6878      	ldr	r0, [r7, #4]
 8014a02:	f7fc ff3f 	bl	8011884 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8014a06:	68bb      	ldr	r3, [r7, #8]
 8014a08:	685b      	ldr	r3, [r3, #4]
 8014a0a:	891b      	ldrh	r3, [r3, #8]
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	d028      	beq.n	8014a62 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8014a10:	4b0d      	ldr	r3, [pc, #52]	; (8014a48 <tcp_receive+0xb24>)
 8014a12:	681b      	ldr	r3, [r3, #0]
 8014a14:	2b00      	cmp	r3, #0
 8014a16:	d01d      	beq.n	8014a54 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8014a18:	4b0b      	ldr	r3, [pc, #44]	; (8014a48 <tcp_receive+0xb24>)
 8014a1a:	681a      	ldr	r2, [r3, #0]
 8014a1c:	68bb      	ldr	r3, [r7, #8]
 8014a1e:	685b      	ldr	r3, [r3, #4]
 8014a20:	4619      	mov	r1, r3
 8014a22:	4610      	mov	r0, r2
 8014a24:	f7fc fa5c 	bl	8010ee0 <pbuf_cat>
 8014a28:	e018      	b.n	8014a5c <tcp_receive+0xb38>
 8014a2a:	bf00      	nop
 8014a2c:	20007086 	.word	0x20007086
 8014a30:	2000707c 	.word	0x2000707c
 8014a34:	2000705c 	.word	0x2000705c
 8014a38:	0801d69c 	.word	0x0801d69c
 8014a3c:	0801da7c 	.word	0x0801da7c
 8014a40:	0801d6e8 	.word	0x0801d6e8
 8014a44:	0801dab8 	.word	0x0801dab8
 8014a48:	2000708c 	.word	0x2000708c
 8014a4c:	20007089 	.word	0x20007089
 8014a50:	0801dad8 	.word	0x0801dad8
            } else {
              recv_data = cseg->p;
 8014a54:	68bb      	ldr	r3, [r7, #8]
 8014a56:	685b      	ldr	r3, [r3, #4]
 8014a58:	4a70      	ldr	r2, [pc, #448]	; (8014c1c <tcp_receive+0xcf8>)
 8014a5a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8014a5c:	68bb      	ldr	r3, [r7, #8]
 8014a5e:	2200      	movs	r2, #0
 8014a60:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8014a62:	68bb      	ldr	r3, [r7, #8]
 8014a64:	68db      	ldr	r3, [r3, #12]
 8014a66:	899b      	ldrh	r3, [r3, #12]
 8014a68:	b29b      	uxth	r3, r3
 8014a6a:	4618      	mov	r0, r3
 8014a6c:	f7fa fd72 	bl	800f554 <lwip_htons>
 8014a70:	4603      	mov	r3, r0
 8014a72:	b2db      	uxtb	r3, r3
 8014a74:	f003 0301 	and.w	r3, r3, #1
 8014a78:	2b00      	cmp	r3, #0
 8014a7a:	d00d      	beq.n	8014a98 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8014a7c:	4b68      	ldr	r3, [pc, #416]	; (8014c20 <tcp_receive+0xcfc>)
 8014a7e:	781b      	ldrb	r3, [r3, #0]
 8014a80:	f043 0320 	orr.w	r3, r3, #32
 8014a84:	b2da      	uxtb	r2, r3
 8014a86:	4b66      	ldr	r3, [pc, #408]	; (8014c20 <tcp_receive+0xcfc>)
 8014a88:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	7d1b      	ldrb	r3, [r3, #20]
 8014a8e:	2b04      	cmp	r3, #4
 8014a90:	d102      	bne.n	8014a98 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	2207      	movs	r2, #7
 8014a96:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8014a98:	68bb      	ldr	r3, [r7, #8]
 8014a9a:	681a      	ldr	r2, [r3, #0]
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8014aa0:	68b8      	ldr	r0, [r7, #8]
 8014aa2:	f7fd fbd2 	bl	801224a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014aaa:	2b00      	cmp	r3, #0
 8014aac:	d008      	beq.n	8014ac0 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014ab2:	68db      	ldr	r3, [r3, #12]
 8014ab4:	685a      	ldr	r2, [r3, #4]
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8014aba:	429a      	cmp	r2, r3
 8014abc:	f43f af43 	beq.w	8014946 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	8b5b      	ldrh	r3, [r3, #26]
 8014ac4:	f003 0301 	and.w	r3, r3, #1
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	d00e      	beq.n	8014aea <tcp_receive+0xbc6>
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	8b5b      	ldrh	r3, [r3, #26]
 8014ad0:	f023 0301 	bic.w	r3, r3, #1
 8014ad4:	b29a      	uxth	r2, r3
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	835a      	strh	r2, [r3, #26]
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	8b5b      	ldrh	r3, [r3, #26]
 8014ade:	f043 0302 	orr.w	r3, r3, #2
 8014ae2:	b29a      	uxth	r2, r3
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014ae8:	e188      	b.n	8014dfc <tcp_receive+0xed8>
        tcp_ack(pcb);
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	8b5b      	ldrh	r3, [r3, #26]
 8014aee:	f043 0301 	orr.w	r3, r3, #1
 8014af2:	b29a      	uxth	r2, r3
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014af8:	e180      	b.n	8014dfc <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	d106      	bne.n	8014b10 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8014b02:	4848      	ldr	r0, [pc, #288]	; (8014c24 <tcp_receive+0xd00>)
 8014b04:	f7fd fbba 	bl	801227c <tcp_seg_copy>
 8014b08:	4602      	mov	r2, r0
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	675a      	str	r2, [r3, #116]	; 0x74
 8014b0e:	e16d      	b.n	8014dec <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8014b10:	2300      	movs	r3, #0
 8014b12:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014b18:	63bb      	str	r3, [r7, #56]	; 0x38
 8014b1a:	e157      	b.n	8014dcc <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8014b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b1e:	68db      	ldr	r3, [r3, #12]
 8014b20:	685a      	ldr	r2, [r3, #4]
 8014b22:	4b41      	ldr	r3, [pc, #260]	; (8014c28 <tcp_receive+0xd04>)
 8014b24:	681b      	ldr	r3, [r3, #0]
 8014b26:	429a      	cmp	r2, r3
 8014b28:	d11d      	bne.n	8014b66 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8014b2a:	4b3e      	ldr	r3, [pc, #248]	; (8014c24 <tcp_receive+0xd00>)
 8014b2c:	891a      	ldrh	r2, [r3, #8]
 8014b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b30:	891b      	ldrh	r3, [r3, #8]
 8014b32:	429a      	cmp	r2, r3
 8014b34:	f240 814f 	bls.w	8014dd6 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014b38:	483a      	ldr	r0, [pc, #232]	; (8014c24 <tcp_receive+0xd00>)
 8014b3a:	f7fd fb9f 	bl	801227c <tcp_seg_copy>
 8014b3e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8014b40:	697b      	ldr	r3, [r7, #20]
 8014b42:	2b00      	cmp	r3, #0
 8014b44:	f000 8149 	beq.w	8014dda <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8014b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014b4a:	2b00      	cmp	r3, #0
 8014b4c:	d003      	beq.n	8014b56 <tcp_receive+0xc32>
                    prev->next = cseg;
 8014b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014b50:	697a      	ldr	r2, [r7, #20]
 8014b52:	601a      	str	r2, [r3, #0]
 8014b54:	e002      	b.n	8014b5c <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	697a      	ldr	r2, [r7, #20]
 8014b5a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8014b5c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014b5e:	6978      	ldr	r0, [r7, #20]
 8014b60:	f7ff f8dc 	bl	8013d1c <tcp_oos_insert_segment>
                }
                break;
 8014b64:	e139      	b.n	8014dda <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8014b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014b68:	2b00      	cmp	r3, #0
 8014b6a:	d117      	bne.n	8014b9c <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8014b6c:	4b2e      	ldr	r3, [pc, #184]	; (8014c28 <tcp_receive+0xd04>)
 8014b6e:	681a      	ldr	r2, [r3, #0]
 8014b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b72:	68db      	ldr	r3, [r3, #12]
 8014b74:	685b      	ldr	r3, [r3, #4]
 8014b76:	1ad3      	subs	r3, r2, r3
 8014b78:	2b00      	cmp	r3, #0
 8014b7a:	da57      	bge.n	8014c2c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014b7c:	4829      	ldr	r0, [pc, #164]	; (8014c24 <tcp_receive+0xd00>)
 8014b7e:	f7fd fb7d 	bl	801227c <tcp_seg_copy>
 8014b82:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8014b84:	69bb      	ldr	r3, [r7, #24]
 8014b86:	2b00      	cmp	r3, #0
 8014b88:	f000 8129 	beq.w	8014dde <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	69ba      	ldr	r2, [r7, #24]
 8014b90:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8014b92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014b94:	69b8      	ldr	r0, [r7, #24]
 8014b96:	f7ff f8c1 	bl	8013d1c <tcp_oos_insert_segment>
                  }
                  break;
 8014b9a:	e120      	b.n	8014dde <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8014b9c:	4b22      	ldr	r3, [pc, #136]	; (8014c28 <tcp_receive+0xd04>)
 8014b9e:	681a      	ldr	r2, [r3, #0]
 8014ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ba2:	68db      	ldr	r3, [r3, #12]
 8014ba4:	685b      	ldr	r3, [r3, #4]
 8014ba6:	1ad3      	subs	r3, r2, r3
 8014ba8:	3b01      	subs	r3, #1
 8014baa:	2b00      	cmp	r3, #0
 8014bac:	db3e      	blt.n	8014c2c <tcp_receive+0xd08>
 8014bae:	4b1e      	ldr	r3, [pc, #120]	; (8014c28 <tcp_receive+0xd04>)
 8014bb0:	681a      	ldr	r2, [r3, #0]
 8014bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bb4:	68db      	ldr	r3, [r3, #12]
 8014bb6:	685b      	ldr	r3, [r3, #4]
 8014bb8:	1ad3      	subs	r3, r2, r3
 8014bba:	3301      	adds	r3, #1
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	dc35      	bgt.n	8014c2c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014bc0:	4818      	ldr	r0, [pc, #96]	; (8014c24 <tcp_receive+0xd00>)
 8014bc2:	f7fd fb5b 	bl	801227c <tcp_seg_copy>
 8014bc6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8014bc8:	69fb      	ldr	r3, [r7, #28]
 8014bca:	2b00      	cmp	r3, #0
 8014bcc:	f000 8109 	beq.w	8014de2 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8014bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014bd2:	68db      	ldr	r3, [r3, #12]
 8014bd4:	685b      	ldr	r3, [r3, #4]
 8014bd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014bd8:	8912      	ldrh	r2, [r2, #8]
 8014bda:	441a      	add	r2, r3
 8014bdc:	4b12      	ldr	r3, [pc, #72]	; (8014c28 <tcp_receive+0xd04>)
 8014bde:	681b      	ldr	r3, [r3, #0]
 8014be0:	1ad3      	subs	r3, r2, r3
 8014be2:	2b00      	cmp	r3, #0
 8014be4:	dd12      	ble.n	8014c0c <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8014be6:	4b10      	ldr	r3, [pc, #64]	; (8014c28 <tcp_receive+0xd04>)
 8014be8:	681b      	ldr	r3, [r3, #0]
 8014bea:	b29a      	uxth	r2, r3
 8014bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014bee:	68db      	ldr	r3, [r3, #12]
 8014bf0:	685b      	ldr	r3, [r3, #4]
 8014bf2:	b29b      	uxth	r3, r3
 8014bf4:	1ad3      	subs	r3, r2, r3
 8014bf6:	b29a      	uxth	r2, r3
 8014bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014bfa:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8014bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014bfe:	685a      	ldr	r2, [r3, #4]
 8014c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c02:	891b      	ldrh	r3, [r3, #8]
 8014c04:	4619      	mov	r1, r3
 8014c06:	4610      	mov	r0, r2
 8014c08:	f7fb ff24 	bl	8010a54 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8014c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c0e:	69fa      	ldr	r2, [r7, #28]
 8014c10:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8014c12:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014c14:	69f8      	ldr	r0, [r7, #28]
 8014c16:	f7ff f881 	bl	8013d1c <tcp_oos_insert_segment>
                  }
                  break;
 8014c1a:	e0e2      	b.n	8014de2 <tcp_receive+0xebe>
 8014c1c:	2000708c 	.word	0x2000708c
 8014c20:	20007089 	.word	0x20007089
 8014c24:	2000705c 	.word	0x2000705c
 8014c28:	2000707c 	.word	0x2000707c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8014c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c2e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8014c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c32:	681b      	ldr	r3, [r3, #0]
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	f040 80c6 	bne.w	8014dc6 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8014c3a:	4b80      	ldr	r3, [pc, #512]	; (8014e3c <tcp_receive+0xf18>)
 8014c3c:	681a      	ldr	r2, [r3, #0]
 8014c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c40:	68db      	ldr	r3, [r3, #12]
 8014c42:	685b      	ldr	r3, [r3, #4]
 8014c44:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8014c46:	2b00      	cmp	r3, #0
 8014c48:	f340 80bd 	ble.w	8014dc6 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8014c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c4e:	68db      	ldr	r3, [r3, #12]
 8014c50:	899b      	ldrh	r3, [r3, #12]
 8014c52:	b29b      	uxth	r3, r3
 8014c54:	4618      	mov	r0, r3
 8014c56:	f7fa fc7d 	bl	800f554 <lwip_htons>
 8014c5a:	4603      	mov	r3, r0
 8014c5c:	b2db      	uxtb	r3, r3
 8014c5e:	f003 0301 	and.w	r3, r3, #1
 8014c62:	2b00      	cmp	r3, #0
 8014c64:	f040 80bf 	bne.w	8014de6 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8014c68:	4875      	ldr	r0, [pc, #468]	; (8014e40 <tcp_receive+0xf1c>)
 8014c6a:	f7fd fb07 	bl	801227c <tcp_seg_copy>
 8014c6e:	4602      	mov	r2, r0
 8014c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c72:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8014c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c76:	681b      	ldr	r3, [r3, #0]
 8014c78:	2b00      	cmp	r3, #0
 8014c7a:	f000 80b6 	beq.w	8014dea <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8014c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c80:	68db      	ldr	r3, [r3, #12]
 8014c82:	685b      	ldr	r3, [r3, #4]
 8014c84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014c86:	8912      	ldrh	r2, [r2, #8]
 8014c88:	441a      	add	r2, r3
 8014c8a:	4b6c      	ldr	r3, [pc, #432]	; (8014e3c <tcp_receive+0xf18>)
 8014c8c:	681b      	ldr	r3, [r3, #0]
 8014c8e:	1ad3      	subs	r3, r2, r3
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	dd12      	ble.n	8014cba <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8014c94:	4b69      	ldr	r3, [pc, #420]	; (8014e3c <tcp_receive+0xf18>)
 8014c96:	681b      	ldr	r3, [r3, #0]
 8014c98:	b29a      	uxth	r2, r3
 8014c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c9c:	68db      	ldr	r3, [r3, #12]
 8014c9e:	685b      	ldr	r3, [r3, #4]
 8014ca0:	b29b      	uxth	r3, r3
 8014ca2:	1ad3      	subs	r3, r2, r3
 8014ca4:	b29a      	uxth	r2, r3
 8014ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ca8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8014caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014cac:	685a      	ldr	r2, [r3, #4]
 8014cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014cb0:	891b      	ldrh	r3, [r3, #8]
 8014cb2:	4619      	mov	r1, r3
 8014cb4:	4610      	mov	r0, r2
 8014cb6:	f7fb fecd 	bl	8010a54 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8014cba:	4b62      	ldr	r3, [pc, #392]	; (8014e44 <tcp_receive+0xf20>)
 8014cbc:	881b      	ldrh	r3, [r3, #0]
 8014cbe:	461a      	mov	r2, r3
 8014cc0:	4b5e      	ldr	r3, [pc, #376]	; (8014e3c <tcp_receive+0xf18>)
 8014cc2:	681b      	ldr	r3, [r3, #0]
 8014cc4:	441a      	add	r2, r3
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014cca:	6879      	ldr	r1, [r7, #4]
 8014ccc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014cce:	440b      	add	r3, r1
 8014cd0:	1ad3      	subs	r3, r2, r3
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	f340 8089 	ble.w	8014dea <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8014cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014cda:	681b      	ldr	r3, [r3, #0]
 8014cdc:	68db      	ldr	r3, [r3, #12]
 8014cde:	899b      	ldrh	r3, [r3, #12]
 8014ce0:	b29b      	uxth	r3, r3
 8014ce2:	4618      	mov	r0, r3
 8014ce4:	f7fa fc36 	bl	800f554 <lwip_htons>
 8014ce8:	4603      	mov	r3, r0
 8014cea:	b2db      	uxtb	r3, r3
 8014cec:	f003 0301 	and.w	r3, r3, #1
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	d022      	beq.n	8014d3a <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8014cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014cf6:	681b      	ldr	r3, [r3, #0]
 8014cf8:	68db      	ldr	r3, [r3, #12]
 8014cfa:	899b      	ldrh	r3, [r3, #12]
 8014cfc:	b29b      	uxth	r3, r3
 8014cfe:	b21b      	sxth	r3, r3
 8014d00:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014d04:	b21c      	sxth	r4, r3
 8014d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d08:	681b      	ldr	r3, [r3, #0]
 8014d0a:	68db      	ldr	r3, [r3, #12]
 8014d0c:	899b      	ldrh	r3, [r3, #12]
 8014d0e:	b29b      	uxth	r3, r3
 8014d10:	4618      	mov	r0, r3
 8014d12:	f7fa fc1f 	bl	800f554 <lwip_htons>
 8014d16:	4603      	mov	r3, r0
 8014d18:	b2db      	uxtb	r3, r3
 8014d1a:	b29b      	uxth	r3, r3
 8014d1c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8014d20:	b29b      	uxth	r3, r3
 8014d22:	4618      	mov	r0, r3
 8014d24:	f7fa fc16 	bl	800f554 <lwip_htons>
 8014d28:	4603      	mov	r3, r0
 8014d2a:	b21b      	sxth	r3, r3
 8014d2c:	4323      	orrs	r3, r4
 8014d2e:	b21a      	sxth	r2, r3
 8014d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d32:	681b      	ldr	r3, [r3, #0]
 8014d34:	68db      	ldr	r3, [r3, #12]
 8014d36:	b292      	uxth	r2, r2
 8014d38:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d3e:	b29a      	uxth	r2, r3
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014d44:	4413      	add	r3, r2
 8014d46:	b299      	uxth	r1, r3
 8014d48:	4b3c      	ldr	r3, [pc, #240]	; (8014e3c <tcp_receive+0xf18>)
 8014d4a:	681b      	ldr	r3, [r3, #0]
 8014d4c:	b29a      	uxth	r2, r3
 8014d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d50:	681b      	ldr	r3, [r3, #0]
 8014d52:	1a8a      	subs	r2, r1, r2
 8014d54:	b292      	uxth	r2, r2
 8014d56:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8014d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d5a:	681b      	ldr	r3, [r3, #0]
 8014d5c:	685a      	ldr	r2, [r3, #4]
 8014d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d60:	681b      	ldr	r3, [r3, #0]
 8014d62:	891b      	ldrh	r3, [r3, #8]
 8014d64:	4619      	mov	r1, r3
 8014d66:	4610      	mov	r0, r2
 8014d68:	f7fb fe74 	bl	8010a54 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8014d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d6e:	681b      	ldr	r3, [r3, #0]
 8014d70:	891c      	ldrh	r4, [r3, #8]
 8014d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d74:	681b      	ldr	r3, [r3, #0]
 8014d76:	68db      	ldr	r3, [r3, #12]
 8014d78:	899b      	ldrh	r3, [r3, #12]
 8014d7a:	b29b      	uxth	r3, r3
 8014d7c:	4618      	mov	r0, r3
 8014d7e:	f7fa fbe9 	bl	800f554 <lwip_htons>
 8014d82:	4603      	mov	r3, r0
 8014d84:	b2db      	uxtb	r3, r3
 8014d86:	f003 0303 	and.w	r3, r3, #3
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d001      	beq.n	8014d92 <tcp_receive+0xe6e>
 8014d8e:	2301      	movs	r3, #1
 8014d90:	e000      	b.n	8014d94 <tcp_receive+0xe70>
 8014d92:	2300      	movs	r3, #0
 8014d94:	4423      	add	r3, r4
 8014d96:	b29a      	uxth	r2, r3
 8014d98:	4b2a      	ldr	r3, [pc, #168]	; (8014e44 <tcp_receive+0xf20>)
 8014d9a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8014d9c:	4b29      	ldr	r3, [pc, #164]	; (8014e44 <tcp_receive+0xf20>)
 8014d9e:	881b      	ldrh	r3, [r3, #0]
 8014da0:	461a      	mov	r2, r3
 8014da2:	4b26      	ldr	r3, [pc, #152]	; (8014e3c <tcp_receive+0xf18>)
 8014da4:	681b      	ldr	r3, [r3, #0]
 8014da6:	441a      	add	r2, r3
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014dac:	6879      	ldr	r1, [r7, #4]
 8014dae:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014db0:	440b      	add	r3, r1
 8014db2:	429a      	cmp	r2, r3
 8014db4:	d019      	beq.n	8014dea <tcp_receive+0xec6>
 8014db6:	4b24      	ldr	r3, [pc, #144]	; (8014e48 <tcp_receive+0xf24>)
 8014db8:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8014dbc:	4923      	ldr	r1, [pc, #140]	; (8014e4c <tcp_receive+0xf28>)
 8014dbe:	4824      	ldr	r0, [pc, #144]	; (8014e50 <tcp_receive+0xf2c>)
 8014dc0:	f004 fee6 	bl	8019b90 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8014dc4:	e011      	b.n	8014dea <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014dc8:	681b      	ldr	r3, [r3, #0]
 8014dca:	63bb      	str	r3, [r7, #56]	; 0x38
 8014dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	f47f aea4 	bne.w	8014b1c <tcp_receive+0xbf8>
 8014dd4:	e00a      	b.n	8014dec <tcp_receive+0xec8>
                break;
 8014dd6:	bf00      	nop
 8014dd8:	e008      	b.n	8014dec <tcp_receive+0xec8>
                break;
 8014dda:	bf00      	nop
 8014ddc:	e006      	b.n	8014dec <tcp_receive+0xec8>
                  break;
 8014dde:	bf00      	nop
 8014de0:	e004      	b.n	8014dec <tcp_receive+0xec8>
                  break;
 8014de2:	bf00      	nop
 8014de4:	e002      	b.n	8014dec <tcp_receive+0xec8>
                  break;
 8014de6:	bf00      	nop
 8014de8:	e000      	b.n	8014dec <tcp_receive+0xec8>
                break;
 8014dea:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8014dec:	6878      	ldr	r0, [r7, #4]
 8014dee:	f001 fa33 	bl	8016258 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8014df2:	e003      	b.n	8014dfc <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8014df4:	6878      	ldr	r0, [r7, #4]
 8014df6:	f001 fa2f 	bl	8016258 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014dfa:	e01a      	b.n	8014e32 <tcp_receive+0xf0e>
 8014dfc:	e019      	b.n	8014e32 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8014dfe:	4b0f      	ldr	r3, [pc, #60]	; (8014e3c <tcp_receive+0xf18>)
 8014e00:	681a      	ldr	r2, [r3, #0]
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e06:	1ad3      	subs	r3, r2, r3
 8014e08:	2b00      	cmp	r3, #0
 8014e0a:	db0a      	blt.n	8014e22 <tcp_receive+0xefe>
 8014e0c:	4b0b      	ldr	r3, [pc, #44]	; (8014e3c <tcp_receive+0xf18>)
 8014e0e:	681a      	ldr	r2, [r3, #0]
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e14:	6879      	ldr	r1, [r7, #4]
 8014e16:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014e18:	440b      	add	r3, r1
 8014e1a:	1ad3      	subs	r3, r2, r3
 8014e1c:	3301      	adds	r3, #1
 8014e1e:	2b00      	cmp	r3, #0
 8014e20:	dd07      	ble.n	8014e32 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	8b5b      	ldrh	r3, [r3, #26]
 8014e26:	f043 0302 	orr.w	r3, r3, #2
 8014e2a:	b29a      	uxth	r2, r3
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8014e30:	e7ff      	b.n	8014e32 <tcp_receive+0xf0e>
 8014e32:	bf00      	nop
 8014e34:	3750      	adds	r7, #80	; 0x50
 8014e36:	46bd      	mov	sp, r7
 8014e38:	bdb0      	pop	{r4, r5, r7, pc}
 8014e3a:	bf00      	nop
 8014e3c:	2000707c 	.word	0x2000707c
 8014e40:	2000705c 	.word	0x2000705c
 8014e44:	20007086 	.word	0x20007086
 8014e48:	0801d69c 	.word	0x0801d69c
 8014e4c:	0801da44 	.word	0x0801da44
 8014e50:	0801d6e8 	.word	0x0801d6e8

08014e54 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8014e54:	b480      	push	{r7}
 8014e56:	b083      	sub	sp, #12
 8014e58:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8014e5a:	4b15      	ldr	r3, [pc, #84]	; (8014eb0 <tcp_get_next_optbyte+0x5c>)
 8014e5c:	881b      	ldrh	r3, [r3, #0]
 8014e5e:	1c5a      	adds	r2, r3, #1
 8014e60:	b291      	uxth	r1, r2
 8014e62:	4a13      	ldr	r2, [pc, #76]	; (8014eb0 <tcp_get_next_optbyte+0x5c>)
 8014e64:	8011      	strh	r1, [r2, #0]
 8014e66:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8014e68:	4b12      	ldr	r3, [pc, #72]	; (8014eb4 <tcp_get_next_optbyte+0x60>)
 8014e6a:	681b      	ldr	r3, [r3, #0]
 8014e6c:	2b00      	cmp	r3, #0
 8014e6e:	d004      	beq.n	8014e7a <tcp_get_next_optbyte+0x26>
 8014e70:	4b11      	ldr	r3, [pc, #68]	; (8014eb8 <tcp_get_next_optbyte+0x64>)
 8014e72:	881b      	ldrh	r3, [r3, #0]
 8014e74:	88fa      	ldrh	r2, [r7, #6]
 8014e76:	429a      	cmp	r2, r3
 8014e78:	d208      	bcs.n	8014e8c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8014e7a:	4b10      	ldr	r3, [pc, #64]	; (8014ebc <tcp_get_next_optbyte+0x68>)
 8014e7c:	681b      	ldr	r3, [r3, #0]
 8014e7e:	3314      	adds	r3, #20
 8014e80:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8014e82:	88fb      	ldrh	r3, [r7, #6]
 8014e84:	683a      	ldr	r2, [r7, #0]
 8014e86:	4413      	add	r3, r2
 8014e88:	781b      	ldrb	r3, [r3, #0]
 8014e8a:	e00b      	b.n	8014ea4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8014e8c:	88fb      	ldrh	r3, [r7, #6]
 8014e8e:	b2da      	uxtb	r2, r3
 8014e90:	4b09      	ldr	r3, [pc, #36]	; (8014eb8 <tcp_get_next_optbyte+0x64>)
 8014e92:	881b      	ldrh	r3, [r3, #0]
 8014e94:	b2db      	uxtb	r3, r3
 8014e96:	1ad3      	subs	r3, r2, r3
 8014e98:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8014e9a:	4b06      	ldr	r3, [pc, #24]	; (8014eb4 <tcp_get_next_optbyte+0x60>)
 8014e9c:	681a      	ldr	r2, [r3, #0]
 8014e9e:	797b      	ldrb	r3, [r7, #5]
 8014ea0:	4413      	add	r3, r2
 8014ea2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014ea4:	4618      	mov	r0, r3
 8014ea6:	370c      	adds	r7, #12
 8014ea8:	46bd      	mov	sp, r7
 8014eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eae:	4770      	bx	lr
 8014eb0:	20007078 	.word	0x20007078
 8014eb4:	20007074 	.word	0x20007074
 8014eb8:	20007072 	.word	0x20007072
 8014ebc:	2000706c 	.word	0x2000706c

08014ec0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8014ec0:	b580      	push	{r7, lr}
 8014ec2:	b084      	sub	sp, #16
 8014ec4:	af00      	add	r7, sp, #0
 8014ec6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	d106      	bne.n	8014edc <tcp_parseopt+0x1c>
 8014ece:	4b32      	ldr	r3, [pc, #200]	; (8014f98 <tcp_parseopt+0xd8>)
 8014ed0:	f240 727d 	movw	r2, #1917	; 0x77d
 8014ed4:	4931      	ldr	r1, [pc, #196]	; (8014f9c <tcp_parseopt+0xdc>)
 8014ed6:	4832      	ldr	r0, [pc, #200]	; (8014fa0 <tcp_parseopt+0xe0>)
 8014ed8:	f004 fe5a 	bl	8019b90 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8014edc:	4b31      	ldr	r3, [pc, #196]	; (8014fa4 <tcp_parseopt+0xe4>)
 8014ede:	881b      	ldrh	r3, [r3, #0]
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	d056      	beq.n	8014f92 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014ee4:	4b30      	ldr	r3, [pc, #192]	; (8014fa8 <tcp_parseopt+0xe8>)
 8014ee6:	2200      	movs	r2, #0
 8014ee8:	801a      	strh	r2, [r3, #0]
 8014eea:	e046      	b.n	8014f7a <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8014eec:	f7ff ffb2 	bl	8014e54 <tcp_get_next_optbyte>
 8014ef0:	4603      	mov	r3, r0
 8014ef2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8014ef4:	7bfb      	ldrb	r3, [r7, #15]
 8014ef6:	2b02      	cmp	r3, #2
 8014ef8:	d006      	beq.n	8014f08 <tcp_parseopt+0x48>
 8014efa:	2b02      	cmp	r3, #2
 8014efc:	dc2c      	bgt.n	8014f58 <tcp_parseopt+0x98>
 8014efe:	2b00      	cmp	r3, #0
 8014f00:	d042      	beq.n	8014f88 <tcp_parseopt+0xc8>
 8014f02:	2b01      	cmp	r3, #1
 8014f04:	d128      	bne.n	8014f58 <tcp_parseopt+0x98>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8014f06:	e038      	b.n	8014f7a <tcp_parseopt+0xba>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8014f08:	f7ff ffa4 	bl	8014e54 <tcp_get_next_optbyte>
 8014f0c:	4603      	mov	r3, r0
 8014f0e:	2b04      	cmp	r3, #4
 8014f10:	d13c      	bne.n	8014f8c <tcp_parseopt+0xcc>
 8014f12:	4b25      	ldr	r3, [pc, #148]	; (8014fa8 <tcp_parseopt+0xe8>)
 8014f14:	881b      	ldrh	r3, [r3, #0]
 8014f16:	3301      	adds	r3, #1
 8014f18:	4a22      	ldr	r2, [pc, #136]	; (8014fa4 <tcp_parseopt+0xe4>)
 8014f1a:	8812      	ldrh	r2, [r2, #0]
 8014f1c:	4293      	cmp	r3, r2
 8014f1e:	da35      	bge.n	8014f8c <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8014f20:	f7ff ff98 	bl	8014e54 <tcp_get_next_optbyte>
 8014f24:	4603      	mov	r3, r0
 8014f26:	b29b      	uxth	r3, r3
 8014f28:	021b      	lsls	r3, r3, #8
 8014f2a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8014f2c:	f7ff ff92 	bl	8014e54 <tcp_get_next_optbyte>
 8014f30:	4603      	mov	r3, r0
 8014f32:	b29a      	uxth	r2, r3
 8014f34:	89bb      	ldrh	r3, [r7, #12]
 8014f36:	4313      	orrs	r3, r2
 8014f38:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8014f3a:	89bb      	ldrh	r3, [r7, #12]
 8014f3c:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8014f40:	4293      	cmp	r3, r2
 8014f42:	d804      	bhi.n	8014f4e <tcp_parseopt+0x8e>
 8014f44:	89bb      	ldrh	r3, [r7, #12]
 8014f46:	2b00      	cmp	r3, #0
 8014f48:	d001      	beq.n	8014f4e <tcp_parseopt+0x8e>
 8014f4a:	89ba      	ldrh	r2, [r7, #12]
 8014f4c:	e001      	b.n	8014f52 <tcp_parseopt+0x92>
 8014f4e:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8014f56:	e010      	b.n	8014f7a <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8014f58:	f7ff ff7c 	bl	8014e54 <tcp_get_next_optbyte>
 8014f5c:	4603      	mov	r3, r0
 8014f5e:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8014f60:	7afb      	ldrb	r3, [r7, #11]
 8014f62:	2b01      	cmp	r3, #1
 8014f64:	d914      	bls.n	8014f90 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8014f66:	7afb      	ldrb	r3, [r7, #11]
 8014f68:	b29a      	uxth	r2, r3
 8014f6a:	4b0f      	ldr	r3, [pc, #60]	; (8014fa8 <tcp_parseopt+0xe8>)
 8014f6c:	881b      	ldrh	r3, [r3, #0]
 8014f6e:	4413      	add	r3, r2
 8014f70:	b29b      	uxth	r3, r3
 8014f72:	3b02      	subs	r3, #2
 8014f74:	b29a      	uxth	r2, r3
 8014f76:	4b0c      	ldr	r3, [pc, #48]	; (8014fa8 <tcp_parseopt+0xe8>)
 8014f78:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014f7a:	4b0b      	ldr	r3, [pc, #44]	; (8014fa8 <tcp_parseopt+0xe8>)
 8014f7c:	881a      	ldrh	r2, [r3, #0]
 8014f7e:	4b09      	ldr	r3, [pc, #36]	; (8014fa4 <tcp_parseopt+0xe4>)
 8014f80:	881b      	ldrh	r3, [r3, #0]
 8014f82:	429a      	cmp	r2, r3
 8014f84:	d3b2      	bcc.n	8014eec <tcp_parseopt+0x2c>
 8014f86:	e004      	b.n	8014f92 <tcp_parseopt+0xd2>
          return;
 8014f88:	bf00      	nop
 8014f8a:	e002      	b.n	8014f92 <tcp_parseopt+0xd2>
            return;
 8014f8c:	bf00      	nop
 8014f8e:	e000      	b.n	8014f92 <tcp_parseopt+0xd2>
            return;
 8014f90:	bf00      	nop
      }
    }
  }
}
 8014f92:	3710      	adds	r7, #16
 8014f94:	46bd      	mov	sp, r7
 8014f96:	bd80      	pop	{r7, pc}
 8014f98:	0801d69c 	.word	0x0801d69c
 8014f9c:	0801db00 	.word	0x0801db00
 8014fa0:	0801d6e8 	.word	0x0801d6e8
 8014fa4:	20007070 	.word	0x20007070
 8014fa8:	20007078 	.word	0x20007078

08014fac <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8014fac:	b480      	push	{r7}
 8014fae:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8014fb0:	4b05      	ldr	r3, [pc, #20]	; (8014fc8 <tcp_trigger_input_pcb_close+0x1c>)
 8014fb2:	781b      	ldrb	r3, [r3, #0]
 8014fb4:	f043 0310 	orr.w	r3, r3, #16
 8014fb8:	b2da      	uxtb	r2, r3
 8014fba:	4b03      	ldr	r3, [pc, #12]	; (8014fc8 <tcp_trigger_input_pcb_close+0x1c>)
 8014fbc:	701a      	strb	r2, [r3, #0]
}
 8014fbe:	bf00      	nop
 8014fc0:	46bd      	mov	sp, r7
 8014fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fc6:	4770      	bx	lr
 8014fc8:	20007089 	.word	0x20007089

08014fcc <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8014fcc:	b580      	push	{r7, lr}
 8014fce:	b084      	sub	sp, #16
 8014fd0:	af00      	add	r7, sp, #0
 8014fd2:	60f8      	str	r0, [r7, #12]
 8014fd4:	60b9      	str	r1, [r7, #8]
 8014fd6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8014fd8:	68fb      	ldr	r3, [r7, #12]
 8014fda:	2b00      	cmp	r3, #0
 8014fdc:	d00a      	beq.n	8014ff4 <tcp_route+0x28>
 8014fde:	68fb      	ldr	r3, [r7, #12]
 8014fe0:	7a1b      	ldrb	r3, [r3, #8]
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	d006      	beq.n	8014ff4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8014fe6:	68fb      	ldr	r3, [r7, #12]
 8014fe8:	7a1b      	ldrb	r3, [r3, #8]
 8014fea:	4618      	mov	r0, r3
 8014fec:	f7fb fb56 	bl	801069c <netif_get_by_index>
 8014ff0:	4603      	mov	r3, r0
 8014ff2:	e003      	b.n	8014ffc <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8014ff4:	6878      	ldr	r0, [r7, #4]
 8014ff6:	f002 fea3 	bl	8017d40 <ip4_route>
 8014ffa:	4603      	mov	r3, r0
  }
}
 8014ffc:	4618      	mov	r0, r3
 8014ffe:	3710      	adds	r7, #16
 8015000:	46bd      	mov	sp, r7
 8015002:	bd80      	pop	{r7, pc}

08015004 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8015004:	b590      	push	{r4, r7, lr}
 8015006:	b087      	sub	sp, #28
 8015008:	af00      	add	r7, sp, #0
 801500a:	60f8      	str	r0, [r7, #12]
 801500c:	60b9      	str	r1, [r7, #8]
 801500e:	603b      	str	r3, [r7, #0]
 8015010:	4613      	mov	r3, r2
 8015012:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8015014:	68fb      	ldr	r3, [r7, #12]
 8015016:	2b00      	cmp	r3, #0
 8015018:	d105      	bne.n	8015026 <tcp_create_segment+0x22>
 801501a:	4b44      	ldr	r3, [pc, #272]	; (801512c <tcp_create_segment+0x128>)
 801501c:	22a3      	movs	r2, #163	; 0xa3
 801501e:	4944      	ldr	r1, [pc, #272]	; (8015130 <tcp_create_segment+0x12c>)
 8015020:	4844      	ldr	r0, [pc, #272]	; (8015134 <tcp_create_segment+0x130>)
 8015022:	f004 fdb5 	bl	8019b90 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8015026:	68bb      	ldr	r3, [r7, #8]
 8015028:	2b00      	cmp	r3, #0
 801502a:	d105      	bne.n	8015038 <tcp_create_segment+0x34>
 801502c:	4b3f      	ldr	r3, [pc, #252]	; (801512c <tcp_create_segment+0x128>)
 801502e:	22a4      	movs	r2, #164	; 0xa4
 8015030:	4941      	ldr	r1, [pc, #260]	; (8015138 <tcp_create_segment+0x134>)
 8015032:	4840      	ldr	r0, [pc, #256]	; (8015134 <tcp_create_segment+0x130>)
 8015034:	f004 fdac 	bl	8019b90 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015038:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801503c:	009b      	lsls	r3, r3, #2
 801503e:	b2db      	uxtb	r3, r3
 8015040:	f003 0304 	and.w	r3, r3, #4
 8015044:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8015046:	2003      	movs	r0, #3
 8015048:	f7fa ffa2 	bl	800ff90 <memp_malloc>
 801504c:	6138      	str	r0, [r7, #16]
 801504e:	693b      	ldr	r3, [r7, #16]
 8015050:	2b00      	cmp	r3, #0
 8015052:	d104      	bne.n	801505e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8015054:	68b8      	ldr	r0, [r7, #8]
 8015056:	f7fb fe81 	bl	8010d5c <pbuf_free>
    return NULL;
 801505a:	2300      	movs	r3, #0
 801505c:	e061      	b.n	8015122 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801505e:	693b      	ldr	r3, [r7, #16]
 8015060:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015064:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8015066:	693b      	ldr	r3, [r7, #16]
 8015068:	2200      	movs	r2, #0
 801506a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801506c:	693b      	ldr	r3, [r7, #16]
 801506e:	68ba      	ldr	r2, [r7, #8]
 8015070:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8015072:	68bb      	ldr	r3, [r7, #8]
 8015074:	891a      	ldrh	r2, [r3, #8]
 8015076:	7dfb      	ldrb	r3, [r7, #23]
 8015078:	b29b      	uxth	r3, r3
 801507a:	429a      	cmp	r2, r3
 801507c:	d205      	bcs.n	801508a <tcp_create_segment+0x86>
 801507e:	4b2b      	ldr	r3, [pc, #172]	; (801512c <tcp_create_segment+0x128>)
 8015080:	22b0      	movs	r2, #176	; 0xb0
 8015082:	492e      	ldr	r1, [pc, #184]	; (801513c <tcp_create_segment+0x138>)
 8015084:	482b      	ldr	r0, [pc, #172]	; (8015134 <tcp_create_segment+0x130>)
 8015086:	f004 fd83 	bl	8019b90 <iprintf>
  seg->len = p->tot_len - optlen;
 801508a:	68bb      	ldr	r3, [r7, #8]
 801508c:	891a      	ldrh	r2, [r3, #8]
 801508e:	7dfb      	ldrb	r3, [r7, #23]
 8015090:	b29b      	uxth	r3, r3
 8015092:	1ad3      	subs	r3, r2, r3
 8015094:	b29a      	uxth	r2, r3
 8015096:	693b      	ldr	r3, [r7, #16]
 8015098:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801509a:	2114      	movs	r1, #20
 801509c:	68b8      	ldr	r0, [r7, #8]
 801509e:	f7fb fdc7 	bl	8010c30 <pbuf_add_header>
 80150a2:	4603      	mov	r3, r0
 80150a4:	2b00      	cmp	r3, #0
 80150a6:	d004      	beq.n	80150b2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80150a8:	6938      	ldr	r0, [r7, #16]
 80150aa:	f7fd f8ce 	bl	801224a <tcp_seg_free>
    return NULL;
 80150ae:	2300      	movs	r3, #0
 80150b0:	e037      	b.n	8015122 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80150b2:	693b      	ldr	r3, [r7, #16]
 80150b4:	685b      	ldr	r3, [r3, #4]
 80150b6:	685a      	ldr	r2, [r3, #4]
 80150b8:	693b      	ldr	r3, [r7, #16]
 80150ba:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80150bc:	68fb      	ldr	r3, [r7, #12]
 80150be:	8ada      	ldrh	r2, [r3, #22]
 80150c0:	693b      	ldr	r3, [r7, #16]
 80150c2:	68dc      	ldr	r4, [r3, #12]
 80150c4:	4610      	mov	r0, r2
 80150c6:	f7fa fa45 	bl	800f554 <lwip_htons>
 80150ca:	4603      	mov	r3, r0
 80150cc:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80150ce:	68fb      	ldr	r3, [r7, #12]
 80150d0:	8b1a      	ldrh	r2, [r3, #24]
 80150d2:	693b      	ldr	r3, [r7, #16]
 80150d4:	68dc      	ldr	r4, [r3, #12]
 80150d6:	4610      	mov	r0, r2
 80150d8:	f7fa fa3c 	bl	800f554 <lwip_htons>
 80150dc:	4603      	mov	r3, r0
 80150de:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80150e0:	693b      	ldr	r3, [r7, #16]
 80150e2:	68dc      	ldr	r4, [r3, #12]
 80150e4:	6838      	ldr	r0, [r7, #0]
 80150e6:	f7fa fa4a 	bl	800f57e <lwip_htonl>
 80150ea:	4603      	mov	r3, r0
 80150ec:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80150ee:	7dfb      	ldrb	r3, [r7, #23]
 80150f0:	089b      	lsrs	r3, r3, #2
 80150f2:	b2db      	uxtb	r3, r3
 80150f4:	b29b      	uxth	r3, r3
 80150f6:	3305      	adds	r3, #5
 80150f8:	b29b      	uxth	r3, r3
 80150fa:	031b      	lsls	r3, r3, #12
 80150fc:	b29a      	uxth	r2, r3
 80150fe:	79fb      	ldrb	r3, [r7, #7]
 8015100:	b29b      	uxth	r3, r3
 8015102:	4313      	orrs	r3, r2
 8015104:	b29a      	uxth	r2, r3
 8015106:	693b      	ldr	r3, [r7, #16]
 8015108:	68dc      	ldr	r4, [r3, #12]
 801510a:	4610      	mov	r0, r2
 801510c:	f7fa fa22 	bl	800f554 <lwip_htons>
 8015110:	4603      	mov	r3, r0
 8015112:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8015114:	693b      	ldr	r3, [r7, #16]
 8015116:	68db      	ldr	r3, [r3, #12]
 8015118:	2200      	movs	r2, #0
 801511a:	749a      	strb	r2, [r3, #18]
 801511c:	2200      	movs	r2, #0
 801511e:	74da      	strb	r2, [r3, #19]
  return seg;
 8015120:	693b      	ldr	r3, [r7, #16]
}
 8015122:	4618      	mov	r0, r3
 8015124:	371c      	adds	r7, #28
 8015126:	46bd      	mov	sp, r7
 8015128:	bd90      	pop	{r4, r7, pc}
 801512a:	bf00      	nop
 801512c:	0801db1c 	.word	0x0801db1c
 8015130:	0801db50 	.word	0x0801db50
 8015134:	0801db70 	.word	0x0801db70
 8015138:	0801db98 	.word	0x0801db98
 801513c:	0801dbbc 	.word	0x0801dbbc

08015140 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8015140:	b590      	push	{r4, r7, lr}
 8015142:	b08b      	sub	sp, #44	; 0x2c
 8015144:	af02      	add	r7, sp, #8
 8015146:	6078      	str	r0, [r7, #4]
 8015148:	460b      	mov	r3, r1
 801514a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801514c:	2300      	movs	r3, #0
 801514e:	61fb      	str	r3, [r7, #28]
 8015150:	2300      	movs	r3, #0
 8015152:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8015154:	2300      	movs	r3, #0
 8015156:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	2b00      	cmp	r3, #0
 801515c:	d106      	bne.n	801516c <tcp_split_unsent_seg+0x2c>
 801515e:	4b95      	ldr	r3, [pc, #596]	; (80153b4 <tcp_split_unsent_seg+0x274>)
 8015160:	f240 324b 	movw	r2, #843	; 0x34b
 8015164:	4994      	ldr	r1, [pc, #592]	; (80153b8 <tcp_split_unsent_seg+0x278>)
 8015166:	4895      	ldr	r0, [pc, #596]	; (80153bc <tcp_split_unsent_seg+0x27c>)
 8015168:	f004 fd12 	bl	8019b90 <iprintf>

  useg = pcb->unsent;
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015170:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8015172:	697b      	ldr	r3, [r7, #20]
 8015174:	2b00      	cmp	r3, #0
 8015176:	d102      	bne.n	801517e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8015178:	f04f 33ff 	mov.w	r3, #4294967295
 801517c:	e116      	b.n	80153ac <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801517e:	887b      	ldrh	r3, [r7, #2]
 8015180:	2b00      	cmp	r3, #0
 8015182:	d109      	bne.n	8015198 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8015184:	4b8b      	ldr	r3, [pc, #556]	; (80153b4 <tcp_split_unsent_seg+0x274>)
 8015186:	f240 3253 	movw	r2, #851	; 0x353
 801518a:	498d      	ldr	r1, [pc, #564]	; (80153c0 <tcp_split_unsent_seg+0x280>)
 801518c:	488b      	ldr	r0, [pc, #556]	; (80153bc <tcp_split_unsent_seg+0x27c>)
 801518e:	f004 fcff 	bl	8019b90 <iprintf>
    return ERR_VAL;
 8015192:	f06f 0305 	mvn.w	r3, #5
 8015196:	e109      	b.n	80153ac <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8015198:	697b      	ldr	r3, [r7, #20]
 801519a:	891b      	ldrh	r3, [r3, #8]
 801519c:	887a      	ldrh	r2, [r7, #2]
 801519e:	429a      	cmp	r2, r3
 80151a0:	d301      	bcc.n	80151a6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80151a2:	2300      	movs	r3, #0
 80151a4:	e102      	b.n	80153ac <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80151a6:	687b      	ldr	r3, [r7, #4]
 80151a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80151aa:	887a      	ldrh	r2, [r7, #2]
 80151ac:	429a      	cmp	r2, r3
 80151ae:	d906      	bls.n	80151be <tcp_split_unsent_seg+0x7e>
 80151b0:	4b80      	ldr	r3, [pc, #512]	; (80153b4 <tcp_split_unsent_seg+0x274>)
 80151b2:	f240 325b 	movw	r2, #859	; 0x35b
 80151b6:	4983      	ldr	r1, [pc, #524]	; (80153c4 <tcp_split_unsent_seg+0x284>)
 80151b8:	4880      	ldr	r0, [pc, #512]	; (80153bc <tcp_split_unsent_seg+0x27c>)
 80151ba:	f004 fce9 	bl	8019b90 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80151be:	697b      	ldr	r3, [r7, #20]
 80151c0:	891b      	ldrh	r3, [r3, #8]
 80151c2:	2b00      	cmp	r3, #0
 80151c4:	d106      	bne.n	80151d4 <tcp_split_unsent_seg+0x94>
 80151c6:	4b7b      	ldr	r3, [pc, #492]	; (80153b4 <tcp_split_unsent_seg+0x274>)
 80151c8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80151cc:	497e      	ldr	r1, [pc, #504]	; (80153c8 <tcp_split_unsent_seg+0x288>)
 80151ce:	487b      	ldr	r0, [pc, #492]	; (80153bc <tcp_split_unsent_seg+0x27c>)
 80151d0:	f004 fcde 	bl	8019b90 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80151d4:	697b      	ldr	r3, [r7, #20]
 80151d6:	7a9b      	ldrb	r3, [r3, #10]
 80151d8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80151da:	7bfb      	ldrb	r3, [r7, #15]
 80151dc:	009b      	lsls	r3, r3, #2
 80151de:	b2db      	uxtb	r3, r3
 80151e0:	f003 0304 	and.w	r3, r3, #4
 80151e4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80151e6:	697b      	ldr	r3, [r7, #20]
 80151e8:	891a      	ldrh	r2, [r3, #8]
 80151ea:	887b      	ldrh	r3, [r7, #2]
 80151ec:	1ad3      	subs	r3, r2, r3
 80151ee:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80151f0:	7bbb      	ldrb	r3, [r7, #14]
 80151f2:	b29a      	uxth	r2, r3
 80151f4:	89bb      	ldrh	r3, [r7, #12]
 80151f6:	4413      	add	r3, r2
 80151f8:	b29b      	uxth	r3, r3
 80151fa:	f44f 7220 	mov.w	r2, #640	; 0x280
 80151fe:	4619      	mov	r1, r3
 8015200:	2036      	movs	r0, #54	; 0x36
 8015202:	f7fb fac7 	bl	8010794 <pbuf_alloc>
 8015206:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015208:	693b      	ldr	r3, [r7, #16]
 801520a:	2b00      	cmp	r3, #0
 801520c:	f000 80b7 	beq.w	801537e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8015210:	697b      	ldr	r3, [r7, #20]
 8015212:	685b      	ldr	r3, [r3, #4]
 8015214:	891a      	ldrh	r2, [r3, #8]
 8015216:	697b      	ldr	r3, [r7, #20]
 8015218:	891b      	ldrh	r3, [r3, #8]
 801521a:	1ad3      	subs	r3, r2, r3
 801521c:	b29a      	uxth	r2, r3
 801521e:	887b      	ldrh	r3, [r7, #2]
 8015220:	4413      	add	r3, r2
 8015222:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8015224:	697b      	ldr	r3, [r7, #20]
 8015226:	6858      	ldr	r0, [r3, #4]
 8015228:	693b      	ldr	r3, [r7, #16]
 801522a:	685a      	ldr	r2, [r3, #4]
 801522c:	7bbb      	ldrb	r3, [r7, #14]
 801522e:	18d1      	adds	r1, r2, r3
 8015230:	897b      	ldrh	r3, [r7, #10]
 8015232:	89ba      	ldrh	r2, [r7, #12]
 8015234:	f7fb ff7c 	bl	8011130 <pbuf_copy_partial>
 8015238:	4603      	mov	r3, r0
 801523a:	461a      	mov	r2, r3
 801523c:	89bb      	ldrh	r3, [r7, #12]
 801523e:	4293      	cmp	r3, r2
 8015240:	f040 809f 	bne.w	8015382 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8015244:	697b      	ldr	r3, [r7, #20]
 8015246:	68db      	ldr	r3, [r3, #12]
 8015248:	899b      	ldrh	r3, [r3, #12]
 801524a:	b29b      	uxth	r3, r3
 801524c:	4618      	mov	r0, r3
 801524e:	f7fa f981 	bl	800f554 <lwip_htons>
 8015252:	4603      	mov	r3, r0
 8015254:	b2db      	uxtb	r3, r3
 8015256:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801525a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801525c:	2300      	movs	r3, #0
 801525e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8015260:	7efb      	ldrb	r3, [r7, #27]
 8015262:	f003 0308 	and.w	r3, r3, #8
 8015266:	2b00      	cmp	r3, #0
 8015268:	d007      	beq.n	801527a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801526a:	7efb      	ldrb	r3, [r7, #27]
 801526c:	f023 0308 	bic.w	r3, r3, #8
 8015270:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8015272:	7ebb      	ldrb	r3, [r7, #26]
 8015274:	f043 0308 	orr.w	r3, r3, #8
 8015278:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801527a:	7efb      	ldrb	r3, [r7, #27]
 801527c:	f003 0301 	and.w	r3, r3, #1
 8015280:	2b00      	cmp	r3, #0
 8015282:	d007      	beq.n	8015294 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8015284:	7efb      	ldrb	r3, [r7, #27]
 8015286:	f023 0301 	bic.w	r3, r3, #1
 801528a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801528c:	7ebb      	ldrb	r3, [r7, #26]
 801528e:	f043 0301 	orr.w	r3, r3, #1
 8015292:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8015294:	697b      	ldr	r3, [r7, #20]
 8015296:	68db      	ldr	r3, [r3, #12]
 8015298:	685b      	ldr	r3, [r3, #4]
 801529a:	4618      	mov	r0, r3
 801529c:	f7fa f96f 	bl	800f57e <lwip_htonl>
 80152a0:	4602      	mov	r2, r0
 80152a2:	887b      	ldrh	r3, [r7, #2]
 80152a4:	18d1      	adds	r1, r2, r3
 80152a6:	7eba      	ldrb	r2, [r7, #26]
 80152a8:	7bfb      	ldrb	r3, [r7, #15]
 80152aa:	9300      	str	r3, [sp, #0]
 80152ac:	460b      	mov	r3, r1
 80152ae:	6939      	ldr	r1, [r7, #16]
 80152b0:	6878      	ldr	r0, [r7, #4]
 80152b2:	f7ff fea7 	bl	8015004 <tcp_create_segment>
 80152b6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80152b8:	69fb      	ldr	r3, [r7, #28]
 80152ba:	2b00      	cmp	r3, #0
 80152bc:	d063      	beq.n	8015386 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80152be:	697b      	ldr	r3, [r7, #20]
 80152c0:	685b      	ldr	r3, [r3, #4]
 80152c2:	4618      	mov	r0, r3
 80152c4:	f7fb fdd2 	bl	8010e6c <pbuf_clen>
 80152c8:	4603      	mov	r3, r0
 80152ca:	461a      	mov	r2, r3
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80152d2:	1a9b      	subs	r3, r3, r2
 80152d4:	b29a      	uxth	r2, r3
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80152dc:	697b      	ldr	r3, [r7, #20]
 80152de:	6858      	ldr	r0, [r3, #4]
 80152e0:	697b      	ldr	r3, [r7, #20]
 80152e2:	685b      	ldr	r3, [r3, #4]
 80152e4:	891a      	ldrh	r2, [r3, #8]
 80152e6:	89bb      	ldrh	r3, [r7, #12]
 80152e8:	1ad3      	subs	r3, r2, r3
 80152ea:	b29b      	uxth	r3, r3
 80152ec:	4619      	mov	r1, r3
 80152ee:	f7fb fbb1 	bl	8010a54 <pbuf_realloc>
  useg->len -= remainder;
 80152f2:	697b      	ldr	r3, [r7, #20]
 80152f4:	891a      	ldrh	r2, [r3, #8]
 80152f6:	89bb      	ldrh	r3, [r7, #12]
 80152f8:	1ad3      	subs	r3, r2, r3
 80152fa:	b29a      	uxth	r2, r3
 80152fc:	697b      	ldr	r3, [r7, #20]
 80152fe:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8015300:	697b      	ldr	r3, [r7, #20]
 8015302:	68db      	ldr	r3, [r3, #12]
 8015304:	899b      	ldrh	r3, [r3, #12]
 8015306:	b29c      	uxth	r4, r3
 8015308:	7efb      	ldrb	r3, [r7, #27]
 801530a:	b29b      	uxth	r3, r3
 801530c:	4618      	mov	r0, r3
 801530e:	f7fa f921 	bl	800f554 <lwip_htons>
 8015312:	4603      	mov	r3, r0
 8015314:	461a      	mov	r2, r3
 8015316:	697b      	ldr	r3, [r7, #20]
 8015318:	68db      	ldr	r3, [r3, #12]
 801531a:	4322      	orrs	r2, r4
 801531c:	b292      	uxth	r2, r2
 801531e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8015320:	697b      	ldr	r3, [r7, #20]
 8015322:	685b      	ldr	r3, [r3, #4]
 8015324:	4618      	mov	r0, r3
 8015326:	f7fb fda1 	bl	8010e6c <pbuf_clen>
 801532a:	4603      	mov	r3, r0
 801532c:	461a      	mov	r2, r3
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015334:	4413      	add	r3, r2
 8015336:	b29a      	uxth	r2, r3
 8015338:	687b      	ldr	r3, [r7, #4]
 801533a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801533e:	69fb      	ldr	r3, [r7, #28]
 8015340:	685b      	ldr	r3, [r3, #4]
 8015342:	4618      	mov	r0, r3
 8015344:	f7fb fd92 	bl	8010e6c <pbuf_clen>
 8015348:	4603      	mov	r3, r0
 801534a:	461a      	mov	r2, r3
 801534c:	687b      	ldr	r3, [r7, #4]
 801534e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015352:	4413      	add	r3, r2
 8015354:	b29a      	uxth	r2, r3
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801535c:	697b      	ldr	r3, [r7, #20]
 801535e:	681a      	ldr	r2, [r3, #0]
 8015360:	69fb      	ldr	r3, [r7, #28]
 8015362:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8015364:	697b      	ldr	r3, [r7, #20]
 8015366:	69fa      	ldr	r2, [r7, #28]
 8015368:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801536a:	69fb      	ldr	r3, [r7, #28]
 801536c:	681b      	ldr	r3, [r3, #0]
 801536e:	2b00      	cmp	r3, #0
 8015370:	d103      	bne.n	801537a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	2200      	movs	r2, #0
 8015376:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801537a:	2300      	movs	r3, #0
 801537c:	e016      	b.n	80153ac <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801537e:	bf00      	nop
 8015380:	e002      	b.n	8015388 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8015382:	bf00      	nop
 8015384:	e000      	b.n	8015388 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8015386:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8015388:	69fb      	ldr	r3, [r7, #28]
 801538a:	2b00      	cmp	r3, #0
 801538c:	d006      	beq.n	801539c <tcp_split_unsent_seg+0x25c>
 801538e:	4b09      	ldr	r3, [pc, #36]	; (80153b4 <tcp_split_unsent_seg+0x274>)
 8015390:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8015394:	490d      	ldr	r1, [pc, #52]	; (80153cc <tcp_split_unsent_seg+0x28c>)
 8015396:	4809      	ldr	r0, [pc, #36]	; (80153bc <tcp_split_unsent_seg+0x27c>)
 8015398:	f004 fbfa 	bl	8019b90 <iprintf>
  if (p != NULL) {
 801539c:	693b      	ldr	r3, [r7, #16]
 801539e:	2b00      	cmp	r3, #0
 80153a0:	d002      	beq.n	80153a8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80153a2:	6938      	ldr	r0, [r7, #16]
 80153a4:	f7fb fcda 	bl	8010d5c <pbuf_free>
  }

  return ERR_MEM;
 80153a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80153ac:	4618      	mov	r0, r3
 80153ae:	3724      	adds	r7, #36	; 0x24
 80153b0:	46bd      	mov	sp, r7
 80153b2:	bd90      	pop	{r4, r7, pc}
 80153b4:	0801db1c 	.word	0x0801db1c
 80153b8:	0801deb0 	.word	0x0801deb0
 80153bc:	0801db70 	.word	0x0801db70
 80153c0:	0801ded4 	.word	0x0801ded4
 80153c4:	0801def8 	.word	0x0801def8
 80153c8:	0801df08 	.word	0x0801df08
 80153cc:	0801df18 	.word	0x0801df18

080153d0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80153d0:	b590      	push	{r4, r7, lr}
 80153d2:	b085      	sub	sp, #20
 80153d4:	af00      	add	r7, sp, #0
 80153d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	2b00      	cmp	r3, #0
 80153dc:	d106      	bne.n	80153ec <tcp_send_fin+0x1c>
 80153de:	4b21      	ldr	r3, [pc, #132]	; (8015464 <tcp_send_fin+0x94>)
 80153e0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80153e4:	4920      	ldr	r1, [pc, #128]	; (8015468 <tcp_send_fin+0x98>)
 80153e6:	4821      	ldr	r0, [pc, #132]	; (801546c <tcp_send_fin+0x9c>)
 80153e8:	f004 fbd2 	bl	8019b90 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80153f0:	2b00      	cmp	r3, #0
 80153f2:	d02e      	beq.n	8015452 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80153f8:	60fb      	str	r3, [r7, #12]
 80153fa:	e002      	b.n	8015402 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80153fc:	68fb      	ldr	r3, [r7, #12]
 80153fe:	681b      	ldr	r3, [r3, #0]
 8015400:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015402:	68fb      	ldr	r3, [r7, #12]
 8015404:	681b      	ldr	r3, [r3, #0]
 8015406:	2b00      	cmp	r3, #0
 8015408:	d1f8      	bne.n	80153fc <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801540a:	68fb      	ldr	r3, [r7, #12]
 801540c:	68db      	ldr	r3, [r3, #12]
 801540e:	899b      	ldrh	r3, [r3, #12]
 8015410:	b29b      	uxth	r3, r3
 8015412:	4618      	mov	r0, r3
 8015414:	f7fa f89e 	bl	800f554 <lwip_htons>
 8015418:	4603      	mov	r3, r0
 801541a:	b2db      	uxtb	r3, r3
 801541c:	f003 0307 	and.w	r3, r3, #7
 8015420:	2b00      	cmp	r3, #0
 8015422:	d116      	bne.n	8015452 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8015424:	68fb      	ldr	r3, [r7, #12]
 8015426:	68db      	ldr	r3, [r3, #12]
 8015428:	899b      	ldrh	r3, [r3, #12]
 801542a:	b29c      	uxth	r4, r3
 801542c:	2001      	movs	r0, #1
 801542e:	f7fa f891 	bl	800f554 <lwip_htons>
 8015432:	4603      	mov	r3, r0
 8015434:	461a      	mov	r2, r3
 8015436:	68fb      	ldr	r3, [r7, #12]
 8015438:	68db      	ldr	r3, [r3, #12]
 801543a:	4322      	orrs	r2, r4
 801543c:	b292      	uxth	r2, r2
 801543e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	8b5b      	ldrh	r3, [r3, #26]
 8015444:	f043 0320 	orr.w	r3, r3, #32
 8015448:	b29a      	uxth	r2, r3
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801544e:	2300      	movs	r3, #0
 8015450:	e004      	b.n	801545c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8015452:	2101      	movs	r1, #1
 8015454:	6878      	ldr	r0, [r7, #4]
 8015456:	f000 f80b 	bl	8015470 <tcp_enqueue_flags>
 801545a:	4603      	mov	r3, r0
}
 801545c:	4618      	mov	r0, r3
 801545e:	3714      	adds	r7, #20
 8015460:	46bd      	mov	sp, r7
 8015462:	bd90      	pop	{r4, r7, pc}
 8015464:	0801db1c 	.word	0x0801db1c
 8015468:	0801df24 	.word	0x0801df24
 801546c:	0801db70 	.word	0x0801db70

08015470 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8015470:	b580      	push	{r7, lr}
 8015472:	b08a      	sub	sp, #40	; 0x28
 8015474:	af02      	add	r7, sp, #8
 8015476:	6078      	str	r0, [r7, #4]
 8015478:	460b      	mov	r3, r1
 801547a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801547c:	2300      	movs	r3, #0
 801547e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8015480:	2300      	movs	r3, #0
 8015482:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8015484:	78fb      	ldrb	r3, [r7, #3]
 8015486:	f003 0303 	and.w	r3, r3, #3
 801548a:	2b00      	cmp	r3, #0
 801548c:	d106      	bne.n	801549c <tcp_enqueue_flags+0x2c>
 801548e:	4b67      	ldr	r3, [pc, #412]	; (801562c <tcp_enqueue_flags+0x1bc>)
 8015490:	f240 4211 	movw	r2, #1041	; 0x411
 8015494:	4966      	ldr	r1, [pc, #408]	; (8015630 <tcp_enqueue_flags+0x1c0>)
 8015496:	4867      	ldr	r0, [pc, #412]	; (8015634 <tcp_enqueue_flags+0x1c4>)
 8015498:	f004 fb7a 	bl	8019b90 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	2b00      	cmp	r3, #0
 80154a0:	d106      	bne.n	80154b0 <tcp_enqueue_flags+0x40>
 80154a2:	4b62      	ldr	r3, [pc, #392]	; (801562c <tcp_enqueue_flags+0x1bc>)
 80154a4:	f240 4213 	movw	r2, #1043	; 0x413
 80154a8:	4963      	ldr	r1, [pc, #396]	; (8015638 <tcp_enqueue_flags+0x1c8>)
 80154aa:	4862      	ldr	r0, [pc, #392]	; (8015634 <tcp_enqueue_flags+0x1c4>)
 80154ac:	f004 fb70 	bl	8019b90 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80154b0:	78fb      	ldrb	r3, [r7, #3]
 80154b2:	f003 0302 	and.w	r3, r3, #2
 80154b6:	2b00      	cmp	r3, #0
 80154b8:	d001      	beq.n	80154be <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80154ba:	2301      	movs	r3, #1
 80154bc:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80154be:	7ffb      	ldrb	r3, [r7, #31]
 80154c0:	009b      	lsls	r3, r3, #2
 80154c2:	b2db      	uxtb	r3, r3
 80154c4:	f003 0304 	and.w	r3, r3, #4
 80154c8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80154ca:	7dfb      	ldrb	r3, [r7, #23]
 80154cc:	b29b      	uxth	r3, r3
 80154ce:	f44f 7220 	mov.w	r2, #640	; 0x280
 80154d2:	4619      	mov	r1, r3
 80154d4:	2036      	movs	r0, #54	; 0x36
 80154d6:	f7fb f95d 	bl	8010794 <pbuf_alloc>
 80154da:	6138      	str	r0, [r7, #16]
 80154dc:	693b      	ldr	r3, [r7, #16]
 80154de:	2b00      	cmp	r3, #0
 80154e0:	d109      	bne.n	80154f6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	8b5b      	ldrh	r3, [r3, #26]
 80154e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80154ea:	b29a      	uxth	r2, r3
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80154f0:	f04f 33ff 	mov.w	r3, #4294967295
 80154f4:	e095      	b.n	8015622 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80154f6:	693b      	ldr	r3, [r7, #16]
 80154f8:	895a      	ldrh	r2, [r3, #10]
 80154fa:	7dfb      	ldrb	r3, [r7, #23]
 80154fc:	b29b      	uxth	r3, r3
 80154fe:	429a      	cmp	r2, r3
 8015500:	d206      	bcs.n	8015510 <tcp_enqueue_flags+0xa0>
 8015502:	4b4a      	ldr	r3, [pc, #296]	; (801562c <tcp_enqueue_flags+0x1bc>)
 8015504:	f240 4239 	movw	r2, #1081	; 0x439
 8015508:	494c      	ldr	r1, [pc, #304]	; (801563c <tcp_enqueue_flags+0x1cc>)
 801550a:	484a      	ldr	r0, [pc, #296]	; (8015634 <tcp_enqueue_flags+0x1c4>)
 801550c:	f004 fb40 	bl	8019b90 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8015514:	78fa      	ldrb	r2, [r7, #3]
 8015516:	7ffb      	ldrb	r3, [r7, #31]
 8015518:	9300      	str	r3, [sp, #0]
 801551a:	460b      	mov	r3, r1
 801551c:	6939      	ldr	r1, [r7, #16]
 801551e:	6878      	ldr	r0, [r7, #4]
 8015520:	f7ff fd70 	bl	8015004 <tcp_create_segment>
 8015524:	60f8      	str	r0, [r7, #12]
 8015526:	68fb      	ldr	r3, [r7, #12]
 8015528:	2b00      	cmp	r3, #0
 801552a:	d109      	bne.n	8015540 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	8b5b      	ldrh	r3, [r3, #26]
 8015530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015534:	b29a      	uxth	r2, r3
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801553a:	f04f 33ff 	mov.w	r3, #4294967295
 801553e:	e070      	b.n	8015622 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8015540:	68fb      	ldr	r3, [r7, #12]
 8015542:	68db      	ldr	r3, [r3, #12]
 8015544:	f003 0303 	and.w	r3, r3, #3
 8015548:	2b00      	cmp	r3, #0
 801554a:	d006      	beq.n	801555a <tcp_enqueue_flags+0xea>
 801554c:	4b37      	ldr	r3, [pc, #220]	; (801562c <tcp_enqueue_flags+0x1bc>)
 801554e:	f240 4242 	movw	r2, #1090	; 0x442
 8015552:	493b      	ldr	r1, [pc, #236]	; (8015640 <tcp_enqueue_flags+0x1d0>)
 8015554:	4837      	ldr	r0, [pc, #220]	; (8015634 <tcp_enqueue_flags+0x1c4>)
 8015556:	f004 fb1b 	bl	8019b90 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801555a:	68fb      	ldr	r3, [r7, #12]
 801555c:	891b      	ldrh	r3, [r3, #8]
 801555e:	2b00      	cmp	r3, #0
 8015560:	d006      	beq.n	8015570 <tcp_enqueue_flags+0x100>
 8015562:	4b32      	ldr	r3, [pc, #200]	; (801562c <tcp_enqueue_flags+0x1bc>)
 8015564:	f240 4243 	movw	r2, #1091	; 0x443
 8015568:	4936      	ldr	r1, [pc, #216]	; (8015644 <tcp_enqueue_flags+0x1d4>)
 801556a:	4832      	ldr	r0, [pc, #200]	; (8015634 <tcp_enqueue_flags+0x1c4>)
 801556c:	f004 fb10 	bl	8019b90 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8015570:	687b      	ldr	r3, [r7, #4]
 8015572:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015574:	2b00      	cmp	r3, #0
 8015576:	d103      	bne.n	8015580 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	68fa      	ldr	r2, [r7, #12]
 801557c:	66da      	str	r2, [r3, #108]	; 0x6c
 801557e:	e00d      	b.n	801559c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015584:	61bb      	str	r3, [r7, #24]
 8015586:	e002      	b.n	801558e <tcp_enqueue_flags+0x11e>
 8015588:	69bb      	ldr	r3, [r7, #24]
 801558a:	681b      	ldr	r3, [r3, #0]
 801558c:	61bb      	str	r3, [r7, #24]
 801558e:	69bb      	ldr	r3, [r7, #24]
 8015590:	681b      	ldr	r3, [r3, #0]
 8015592:	2b00      	cmp	r3, #0
 8015594:	d1f8      	bne.n	8015588 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8015596:	69bb      	ldr	r3, [r7, #24]
 8015598:	68fa      	ldr	r2, [r7, #12]
 801559a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	2200      	movs	r2, #0
 80155a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80155a4:	78fb      	ldrb	r3, [r7, #3]
 80155a6:	f003 0302 	and.w	r3, r3, #2
 80155aa:	2b00      	cmp	r3, #0
 80155ac:	d104      	bne.n	80155b8 <tcp_enqueue_flags+0x148>
 80155ae:	78fb      	ldrb	r3, [r7, #3]
 80155b0:	f003 0301 	and.w	r3, r3, #1
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	d004      	beq.n	80155c2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80155b8:	687b      	ldr	r3, [r7, #4]
 80155ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80155bc:	1c5a      	adds	r2, r3, #1
 80155be:	687b      	ldr	r3, [r7, #4]
 80155c0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80155c2:	78fb      	ldrb	r3, [r7, #3]
 80155c4:	f003 0301 	and.w	r3, r3, #1
 80155c8:	2b00      	cmp	r3, #0
 80155ca:	d006      	beq.n	80155da <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	8b5b      	ldrh	r3, [r3, #26]
 80155d0:	f043 0320 	orr.w	r3, r3, #32
 80155d4:	b29a      	uxth	r2, r3
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80155da:	68fb      	ldr	r3, [r7, #12]
 80155dc:	685b      	ldr	r3, [r3, #4]
 80155de:	4618      	mov	r0, r3
 80155e0:	f7fb fc44 	bl	8010e6c <pbuf_clen>
 80155e4:	4603      	mov	r3, r0
 80155e6:	461a      	mov	r2, r3
 80155e8:	687b      	ldr	r3, [r7, #4]
 80155ea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80155ee:	4413      	add	r3, r2
 80155f0:	b29a      	uxth	r2, r3
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80155fe:	2b00      	cmp	r3, #0
 8015600:	d00e      	beq.n	8015620 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015606:	2b00      	cmp	r3, #0
 8015608:	d10a      	bne.n	8015620 <tcp_enqueue_flags+0x1b0>
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801560e:	2b00      	cmp	r3, #0
 8015610:	d106      	bne.n	8015620 <tcp_enqueue_flags+0x1b0>
 8015612:	4b06      	ldr	r3, [pc, #24]	; (801562c <tcp_enqueue_flags+0x1bc>)
 8015614:	f240 4265 	movw	r2, #1125	; 0x465
 8015618:	490b      	ldr	r1, [pc, #44]	; (8015648 <tcp_enqueue_flags+0x1d8>)
 801561a:	4806      	ldr	r0, [pc, #24]	; (8015634 <tcp_enqueue_flags+0x1c4>)
 801561c:	f004 fab8 	bl	8019b90 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8015620:	2300      	movs	r3, #0
}
 8015622:	4618      	mov	r0, r3
 8015624:	3720      	adds	r7, #32
 8015626:	46bd      	mov	sp, r7
 8015628:	bd80      	pop	{r7, pc}
 801562a:	bf00      	nop
 801562c:	0801db1c 	.word	0x0801db1c
 8015630:	0801df40 	.word	0x0801df40
 8015634:	0801db70 	.word	0x0801db70
 8015638:	0801df98 	.word	0x0801df98
 801563c:	0801dfb8 	.word	0x0801dfb8
 8015640:	0801dff4 	.word	0x0801dff4
 8015644:	0801e00c 	.word	0x0801e00c
 8015648:	0801e038 	.word	0x0801e038

0801564c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801564c:	b5b0      	push	{r4, r5, r7, lr}
 801564e:	b08a      	sub	sp, #40	; 0x28
 8015650:	af00      	add	r7, sp, #0
 8015652:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8015654:	687b      	ldr	r3, [r7, #4]
 8015656:	2b00      	cmp	r3, #0
 8015658:	d106      	bne.n	8015668 <tcp_output+0x1c>
 801565a:	4b8a      	ldr	r3, [pc, #552]	; (8015884 <tcp_output+0x238>)
 801565c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8015660:	4989      	ldr	r1, [pc, #548]	; (8015888 <tcp_output+0x23c>)
 8015662:	488a      	ldr	r0, [pc, #552]	; (801588c <tcp_output+0x240>)
 8015664:	f004 fa94 	bl	8019b90 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	7d1b      	ldrb	r3, [r3, #20]
 801566c:	2b01      	cmp	r3, #1
 801566e:	d106      	bne.n	801567e <tcp_output+0x32>
 8015670:	4b84      	ldr	r3, [pc, #528]	; (8015884 <tcp_output+0x238>)
 8015672:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8015676:	4986      	ldr	r1, [pc, #536]	; (8015890 <tcp_output+0x244>)
 8015678:	4884      	ldr	r0, [pc, #528]	; (801588c <tcp_output+0x240>)
 801567a:	f004 fa89 	bl	8019b90 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801567e:	4b85      	ldr	r3, [pc, #532]	; (8015894 <tcp_output+0x248>)
 8015680:	681b      	ldr	r3, [r3, #0]
 8015682:	687a      	ldr	r2, [r7, #4]
 8015684:	429a      	cmp	r2, r3
 8015686:	d101      	bne.n	801568c <tcp_output+0x40>
    return ERR_OK;
 8015688:	2300      	movs	r3, #0
 801568a:	e1ce      	b.n	8015a2a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015698:	4293      	cmp	r3, r2
 801569a:	bf28      	it	cs
 801569c:	4613      	movcs	r3, r2
 801569e:	b29b      	uxth	r3, r3
 80156a0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80156a6:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80156a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156aa:	2b00      	cmp	r3, #0
 80156ac:	d10b      	bne.n	80156c6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	8b5b      	ldrh	r3, [r3, #26]
 80156b2:	f003 0302 	and.w	r3, r3, #2
 80156b6:	2b00      	cmp	r3, #0
 80156b8:	f000 81aa 	beq.w	8015a10 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80156bc:	6878      	ldr	r0, [r7, #4]
 80156be:	f000 fdcb 	bl	8016258 <tcp_send_empty_ack>
 80156c2:	4603      	mov	r3, r0
 80156c4:	e1b1      	b.n	8015a2a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80156c6:	6879      	ldr	r1, [r7, #4]
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	3304      	adds	r3, #4
 80156cc:	461a      	mov	r2, r3
 80156ce:	6878      	ldr	r0, [r7, #4]
 80156d0:	f7ff fc7c 	bl	8014fcc <tcp_route>
 80156d4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80156d6:	697b      	ldr	r3, [r7, #20]
 80156d8:	2b00      	cmp	r3, #0
 80156da:	d102      	bne.n	80156e2 <tcp_output+0x96>
    return ERR_RTE;
 80156dc:	f06f 0303 	mvn.w	r3, #3
 80156e0:	e1a3      	b.n	8015a2a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	2b00      	cmp	r3, #0
 80156e6:	d003      	beq.n	80156f0 <tcp_output+0xa4>
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	681b      	ldr	r3, [r3, #0]
 80156ec:	2b00      	cmp	r3, #0
 80156ee:	d111      	bne.n	8015714 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80156f0:	697b      	ldr	r3, [r7, #20]
 80156f2:	2b00      	cmp	r3, #0
 80156f4:	d002      	beq.n	80156fc <tcp_output+0xb0>
 80156f6:	697b      	ldr	r3, [r7, #20]
 80156f8:	3304      	adds	r3, #4
 80156fa:	e000      	b.n	80156fe <tcp_output+0xb2>
 80156fc:	2300      	movs	r3, #0
 80156fe:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8015700:	693b      	ldr	r3, [r7, #16]
 8015702:	2b00      	cmp	r3, #0
 8015704:	d102      	bne.n	801570c <tcp_output+0xc0>
      return ERR_RTE;
 8015706:	f06f 0303 	mvn.w	r3, #3
 801570a:	e18e      	b.n	8015a2a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801570c:	693b      	ldr	r3, [r7, #16]
 801570e:	681a      	ldr	r2, [r3, #0]
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8015714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015716:	68db      	ldr	r3, [r3, #12]
 8015718:	685b      	ldr	r3, [r3, #4]
 801571a:	4618      	mov	r0, r3
 801571c:	f7f9 ff2f 	bl	800f57e <lwip_htonl>
 8015720:	4602      	mov	r2, r0
 8015722:	687b      	ldr	r3, [r7, #4]
 8015724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015726:	1ad3      	subs	r3, r2, r3
 8015728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801572a:	8912      	ldrh	r2, [r2, #8]
 801572c:	4413      	add	r3, r2
 801572e:	69ba      	ldr	r2, [r7, #24]
 8015730:	429a      	cmp	r2, r3
 8015732:	d227      	bcs.n	8015784 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801573a:	461a      	mov	r2, r3
 801573c:	69bb      	ldr	r3, [r7, #24]
 801573e:	4293      	cmp	r3, r2
 8015740:	d114      	bne.n	801576c <tcp_output+0x120>
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015746:	2b00      	cmp	r3, #0
 8015748:	d110      	bne.n	801576c <tcp_output+0x120>
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8015750:	2b00      	cmp	r3, #0
 8015752:	d10b      	bne.n	801576c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	2200      	movs	r2, #0
 8015758:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801575c:	687b      	ldr	r3, [r7, #4]
 801575e:	2201      	movs	r2, #1
 8015760:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	2200      	movs	r2, #0
 8015768:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801576c:	687b      	ldr	r3, [r7, #4]
 801576e:	8b5b      	ldrh	r3, [r3, #26]
 8015770:	f003 0302 	and.w	r3, r3, #2
 8015774:	2b00      	cmp	r3, #0
 8015776:	f000 814d 	beq.w	8015a14 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801577a:	6878      	ldr	r0, [r7, #4]
 801577c:	f000 fd6c 	bl	8016258 <tcp_send_empty_ack>
 8015780:	4603      	mov	r3, r0
 8015782:	e152      	b.n	8015a2a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	2200      	movs	r2, #0
 8015788:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015790:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8015792:	6a3b      	ldr	r3, [r7, #32]
 8015794:	2b00      	cmp	r3, #0
 8015796:	f000 811c 	beq.w	80159d2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801579a:	e002      	b.n	80157a2 <tcp_output+0x156>
 801579c:	6a3b      	ldr	r3, [r7, #32]
 801579e:	681b      	ldr	r3, [r3, #0]
 80157a0:	623b      	str	r3, [r7, #32]
 80157a2:	6a3b      	ldr	r3, [r7, #32]
 80157a4:	681b      	ldr	r3, [r3, #0]
 80157a6:	2b00      	cmp	r3, #0
 80157a8:	d1f8      	bne.n	801579c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80157aa:	e112      	b.n	80159d2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80157ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157ae:	68db      	ldr	r3, [r3, #12]
 80157b0:	899b      	ldrh	r3, [r3, #12]
 80157b2:	b29b      	uxth	r3, r3
 80157b4:	4618      	mov	r0, r3
 80157b6:	f7f9 fecd 	bl	800f554 <lwip_htons>
 80157ba:	4603      	mov	r3, r0
 80157bc:	b2db      	uxtb	r3, r3
 80157be:	f003 0304 	and.w	r3, r3, #4
 80157c2:	2b00      	cmp	r3, #0
 80157c4:	d006      	beq.n	80157d4 <tcp_output+0x188>
 80157c6:	4b2f      	ldr	r3, [pc, #188]	; (8015884 <tcp_output+0x238>)
 80157c8:	f240 5236 	movw	r2, #1334	; 0x536
 80157cc:	4932      	ldr	r1, [pc, #200]	; (8015898 <tcp_output+0x24c>)
 80157ce:	482f      	ldr	r0, [pc, #188]	; (801588c <tcp_output+0x240>)
 80157d0:	f004 f9de 	bl	8019b90 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80157d8:	2b00      	cmp	r3, #0
 80157da:	d01f      	beq.n	801581c <tcp_output+0x1d0>
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	8b5b      	ldrh	r3, [r3, #26]
 80157e0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80157e4:	2b00      	cmp	r3, #0
 80157e6:	d119      	bne.n	801581c <tcp_output+0x1d0>
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80157ec:	2b00      	cmp	r3, #0
 80157ee:	d00b      	beq.n	8015808 <tcp_output+0x1bc>
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80157f4:	681b      	ldr	r3, [r3, #0]
 80157f6:	2b00      	cmp	r3, #0
 80157f8:	d110      	bne.n	801581c <tcp_output+0x1d0>
 80157fa:	687b      	ldr	r3, [r7, #4]
 80157fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80157fe:	891a      	ldrh	r2, [r3, #8]
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015804:	429a      	cmp	r2, r3
 8015806:	d209      	bcs.n	801581c <tcp_output+0x1d0>
 8015808:	687b      	ldr	r3, [r7, #4]
 801580a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801580e:	2b00      	cmp	r3, #0
 8015810:	d004      	beq.n	801581c <tcp_output+0x1d0>
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015818:	2b0f      	cmp	r3, #15
 801581a:	d901      	bls.n	8015820 <tcp_output+0x1d4>
 801581c:	2301      	movs	r3, #1
 801581e:	e000      	b.n	8015822 <tcp_output+0x1d6>
 8015820:	2300      	movs	r3, #0
 8015822:	2b00      	cmp	r3, #0
 8015824:	d106      	bne.n	8015834 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	8b5b      	ldrh	r3, [r3, #26]
 801582a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801582e:	2b00      	cmp	r3, #0
 8015830:	f000 80e4 	beq.w	80159fc <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	7d1b      	ldrb	r3, [r3, #20]
 8015838:	2b02      	cmp	r3, #2
 801583a:	d00d      	beq.n	8015858 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801583c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801583e:	68db      	ldr	r3, [r3, #12]
 8015840:	899b      	ldrh	r3, [r3, #12]
 8015842:	b29c      	uxth	r4, r3
 8015844:	2010      	movs	r0, #16
 8015846:	f7f9 fe85 	bl	800f554 <lwip_htons>
 801584a:	4603      	mov	r3, r0
 801584c:	461a      	mov	r2, r3
 801584e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015850:	68db      	ldr	r3, [r3, #12]
 8015852:	4322      	orrs	r2, r4
 8015854:	b292      	uxth	r2, r2
 8015856:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8015858:	697a      	ldr	r2, [r7, #20]
 801585a:	6879      	ldr	r1, [r7, #4]
 801585c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801585e:	f000 f909 	bl	8015a74 <tcp_output_segment>
 8015862:	4603      	mov	r3, r0
 8015864:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8015866:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801586a:	2b00      	cmp	r3, #0
 801586c:	d016      	beq.n	801589c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801586e:	687b      	ldr	r3, [r7, #4]
 8015870:	8b5b      	ldrh	r3, [r3, #26]
 8015872:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015876:	b29a      	uxth	r2, r3
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	835a      	strh	r2, [r3, #26]
      return err;
 801587c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015880:	e0d3      	b.n	8015a2a <tcp_output+0x3de>
 8015882:	bf00      	nop
 8015884:	0801db1c 	.word	0x0801db1c
 8015888:	0801e060 	.word	0x0801e060
 801588c:	0801db70 	.word	0x0801db70
 8015890:	0801e078 	.word	0x0801e078
 8015894:	20007090 	.word	0x20007090
 8015898:	0801e0a0 	.word	0x0801e0a0
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801589c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801589e:	681a      	ldr	r2, [r3, #0]
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	7d1b      	ldrb	r3, [r3, #20]
 80158a8:	2b02      	cmp	r3, #2
 80158aa:	d006      	beq.n	80158ba <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	8b5b      	ldrh	r3, [r3, #26]
 80158b0:	f023 0303 	bic.w	r3, r3, #3
 80158b4:	b29a      	uxth	r2, r3
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80158ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158bc:	68db      	ldr	r3, [r3, #12]
 80158be:	685b      	ldr	r3, [r3, #4]
 80158c0:	4618      	mov	r0, r3
 80158c2:	f7f9 fe5c 	bl	800f57e <lwip_htonl>
 80158c6:	4604      	mov	r4, r0
 80158c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158ca:	891b      	ldrh	r3, [r3, #8]
 80158cc:	461d      	mov	r5, r3
 80158ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158d0:	68db      	ldr	r3, [r3, #12]
 80158d2:	899b      	ldrh	r3, [r3, #12]
 80158d4:	b29b      	uxth	r3, r3
 80158d6:	4618      	mov	r0, r3
 80158d8:	f7f9 fe3c 	bl	800f554 <lwip_htons>
 80158dc:	4603      	mov	r3, r0
 80158de:	b2db      	uxtb	r3, r3
 80158e0:	f003 0303 	and.w	r3, r3, #3
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	d001      	beq.n	80158ec <tcp_output+0x2a0>
 80158e8:	2301      	movs	r3, #1
 80158ea:	e000      	b.n	80158ee <tcp_output+0x2a2>
 80158ec:	2300      	movs	r3, #0
 80158ee:	442b      	add	r3, r5
 80158f0:	4423      	add	r3, r4
 80158f2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80158f4:	687b      	ldr	r3, [r7, #4]
 80158f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80158f8:	68bb      	ldr	r3, [r7, #8]
 80158fa:	1ad3      	subs	r3, r2, r3
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	da02      	bge.n	8015906 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	68ba      	ldr	r2, [r7, #8]
 8015904:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8015906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015908:	891b      	ldrh	r3, [r3, #8]
 801590a:	461c      	mov	r4, r3
 801590c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801590e:	68db      	ldr	r3, [r3, #12]
 8015910:	899b      	ldrh	r3, [r3, #12]
 8015912:	b29b      	uxth	r3, r3
 8015914:	4618      	mov	r0, r3
 8015916:	f7f9 fe1d 	bl	800f554 <lwip_htons>
 801591a:	4603      	mov	r3, r0
 801591c:	b2db      	uxtb	r3, r3
 801591e:	f003 0303 	and.w	r3, r3, #3
 8015922:	2b00      	cmp	r3, #0
 8015924:	d001      	beq.n	801592a <tcp_output+0x2de>
 8015926:	2301      	movs	r3, #1
 8015928:	e000      	b.n	801592c <tcp_output+0x2e0>
 801592a:	2300      	movs	r3, #0
 801592c:	4423      	add	r3, r4
 801592e:	2b00      	cmp	r3, #0
 8015930:	d049      	beq.n	80159c6 <tcp_output+0x37a>
      seg->next = NULL;
 8015932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015934:	2200      	movs	r2, #0
 8015936:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801593c:	2b00      	cmp	r3, #0
 801593e:	d105      	bne.n	801594c <tcp_output+0x300>
        pcb->unacked = seg;
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015944:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8015946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015948:	623b      	str	r3, [r7, #32]
 801594a:	e03f      	b.n	80159cc <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801594c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801594e:	68db      	ldr	r3, [r3, #12]
 8015950:	685b      	ldr	r3, [r3, #4]
 8015952:	4618      	mov	r0, r3
 8015954:	f7f9 fe13 	bl	800f57e <lwip_htonl>
 8015958:	4604      	mov	r4, r0
 801595a:	6a3b      	ldr	r3, [r7, #32]
 801595c:	68db      	ldr	r3, [r3, #12]
 801595e:	685b      	ldr	r3, [r3, #4]
 8015960:	4618      	mov	r0, r3
 8015962:	f7f9 fe0c 	bl	800f57e <lwip_htonl>
 8015966:	4603      	mov	r3, r0
 8015968:	1ae3      	subs	r3, r4, r3
 801596a:	2b00      	cmp	r3, #0
 801596c:	da24      	bge.n	80159b8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	3370      	adds	r3, #112	; 0x70
 8015972:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015974:	e002      	b.n	801597c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8015976:	69fb      	ldr	r3, [r7, #28]
 8015978:	681b      	ldr	r3, [r3, #0]
 801597a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801597c:	69fb      	ldr	r3, [r7, #28]
 801597e:	681b      	ldr	r3, [r3, #0]
 8015980:	2b00      	cmp	r3, #0
 8015982:	d011      	beq.n	80159a8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015984:	69fb      	ldr	r3, [r7, #28]
 8015986:	681b      	ldr	r3, [r3, #0]
 8015988:	68db      	ldr	r3, [r3, #12]
 801598a:	685b      	ldr	r3, [r3, #4]
 801598c:	4618      	mov	r0, r3
 801598e:	f7f9 fdf6 	bl	800f57e <lwip_htonl>
 8015992:	4604      	mov	r4, r0
 8015994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015996:	68db      	ldr	r3, [r3, #12]
 8015998:	685b      	ldr	r3, [r3, #4]
 801599a:	4618      	mov	r0, r3
 801599c:	f7f9 fdef 	bl	800f57e <lwip_htonl>
 80159a0:	4603      	mov	r3, r0
 80159a2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80159a4:	2b00      	cmp	r3, #0
 80159a6:	dbe6      	blt.n	8015976 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80159a8:	69fb      	ldr	r3, [r7, #28]
 80159aa:	681a      	ldr	r2, [r3, #0]
 80159ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159ae:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80159b0:	69fb      	ldr	r3, [r7, #28]
 80159b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80159b4:	601a      	str	r2, [r3, #0]
 80159b6:	e009      	b.n	80159cc <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80159b8:	6a3b      	ldr	r3, [r7, #32]
 80159ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80159bc:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80159be:	6a3b      	ldr	r3, [r7, #32]
 80159c0:	681b      	ldr	r3, [r3, #0]
 80159c2:	623b      	str	r3, [r7, #32]
 80159c4:	e002      	b.n	80159cc <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80159c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80159c8:	f7fc fc3f 	bl	801224a <tcp_seg_free>
    }
    seg = pcb->unsent;
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80159d0:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80159d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159d4:	2b00      	cmp	r3, #0
 80159d6:	d012      	beq.n	80159fe <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80159d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159da:	68db      	ldr	r3, [r3, #12]
 80159dc:	685b      	ldr	r3, [r3, #4]
 80159de:	4618      	mov	r0, r3
 80159e0:	f7f9 fdcd 	bl	800f57e <lwip_htonl>
 80159e4:	4602      	mov	r2, r0
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80159ea:	1ad3      	subs	r3, r2, r3
 80159ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80159ee:	8912      	ldrh	r2, [r2, #8]
 80159f0:	4413      	add	r3, r2
  while (seg != NULL &&
 80159f2:	69ba      	ldr	r2, [r7, #24]
 80159f4:	429a      	cmp	r2, r3
 80159f6:	f4bf aed9 	bcs.w	80157ac <tcp_output+0x160>
 80159fa:	e000      	b.n	80159fe <tcp_output+0x3b2>
      break;
 80159fc:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80159fe:	687b      	ldr	r3, [r7, #4]
 8015a00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015a02:	2b00      	cmp	r3, #0
 8015a04:	d108      	bne.n	8015a18 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	2200      	movs	r2, #0
 8015a0a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8015a0e:	e004      	b.n	8015a1a <tcp_output+0x3ce>
    goto output_done;
 8015a10:	bf00      	nop
 8015a12:	e002      	b.n	8015a1a <tcp_output+0x3ce>
    goto output_done;
 8015a14:	bf00      	nop
 8015a16:	e000      	b.n	8015a1a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8015a18:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	8b5b      	ldrh	r3, [r3, #26]
 8015a1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015a22:	b29a      	uxth	r2, r3
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8015a28:	2300      	movs	r3, #0
}
 8015a2a:	4618      	mov	r0, r3
 8015a2c:	3728      	adds	r7, #40	; 0x28
 8015a2e:	46bd      	mov	sp, r7
 8015a30:	bdb0      	pop	{r4, r5, r7, pc}
 8015a32:	bf00      	nop

08015a34 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8015a34:	b580      	push	{r7, lr}
 8015a36:	b082      	sub	sp, #8
 8015a38:	af00      	add	r7, sp, #0
 8015a3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	2b00      	cmp	r3, #0
 8015a40:	d106      	bne.n	8015a50 <tcp_output_segment_busy+0x1c>
 8015a42:	4b09      	ldr	r3, [pc, #36]	; (8015a68 <tcp_output_segment_busy+0x34>)
 8015a44:	f240 529a 	movw	r2, #1434	; 0x59a
 8015a48:	4908      	ldr	r1, [pc, #32]	; (8015a6c <tcp_output_segment_busy+0x38>)
 8015a4a:	4809      	ldr	r0, [pc, #36]	; (8015a70 <tcp_output_segment_busy+0x3c>)
 8015a4c:	f004 f8a0 	bl	8019b90 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	685b      	ldr	r3, [r3, #4]
 8015a54:	7b9b      	ldrb	r3, [r3, #14]
 8015a56:	2b01      	cmp	r3, #1
 8015a58:	d001      	beq.n	8015a5e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8015a5a:	2301      	movs	r3, #1
 8015a5c:	e000      	b.n	8015a60 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8015a5e:	2300      	movs	r3, #0
}
 8015a60:	4618      	mov	r0, r3
 8015a62:	3708      	adds	r7, #8
 8015a64:	46bd      	mov	sp, r7
 8015a66:	bd80      	pop	{r7, pc}
 8015a68:	0801db1c 	.word	0x0801db1c
 8015a6c:	0801e0b8 	.word	0x0801e0b8
 8015a70:	0801db70 	.word	0x0801db70

08015a74 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8015a74:	b5b0      	push	{r4, r5, r7, lr}
 8015a76:	b08c      	sub	sp, #48	; 0x30
 8015a78:	af04      	add	r7, sp, #16
 8015a7a:	60f8      	str	r0, [r7, #12]
 8015a7c:	60b9      	str	r1, [r7, #8]
 8015a7e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8015a80:	68fb      	ldr	r3, [r7, #12]
 8015a82:	2b00      	cmp	r3, #0
 8015a84:	d106      	bne.n	8015a94 <tcp_output_segment+0x20>
 8015a86:	4b64      	ldr	r3, [pc, #400]	; (8015c18 <tcp_output_segment+0x1a4>)
 8015a88:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8015a8c:	4963      	ldr	r1, [pc, #396]	; (8015c1c <tcp_output_segment+0x1a8>)
 8015a8e:	4864      	ldr	r0, [pc, #400]	; (8015c20 <tcp_output_segment+0x1ac>)
 8015a90:	f004 f87e 	bl	8019b90 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8015a94:	68bb      	ldr	r3, [r7, #8]
 8015a96:	2b00      	cmp	r3, #0
 8015a98:	d106      	bne.n	8015aa8 <tcp_output_segment+0x34>
 8015a9a:	4b5f      	ldr	r3, [pc, #380]	; (8015c18 <tcp_output_segment+0x1a4>)
 8015a9c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8015aa0:	4960      	ldr	r1, [pc, #384]	; (8015c24 <tcp_output_segment+0x1b0>)
 8015aa2:	485f      	ldr	r0, [pc, #380]	; (8015c20 <tcp_output_segment+0x1ac>)
 8015aa4:	f004 f874 	bl	8019b90 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	d106      	bne.n	8015abc <tcp_output_segment+0x48>
 8015aae:	4b5a      	ldr	r3, [pc, #360]	; (8015c18 <tcp_output_segment+0x1a4>)
 8015ab0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8015ab4:	495c      	ldr	r1, [pc, #368]	; (8015c28 <tcp_output_segment+0x1b4>)
 8015ab6:	485a      	ldr	r0, [pc, #360]	; (8015c20 <tcp_output_segment+0x1ac>)
 8015ab8:	f004 f86a 	bl	8019b90 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8015abc:	68f8      	ldr	r0, [r7, #12]
 8015abe:	f7ff ffb9 	bl	8015a34 <tcp_output_segment_busy>
 8015ac2:	4603      	mov	r3, r0
 8015ac4:	2b00      	cmp	r3, #0
 8015ac6:	d001      	beq.n	8015acc <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8015ac8:	2300      	movs	r3, #0
 8015aca:	e0a1      	b.n	8015c10 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8015acc:	68bb      	ldr	r3, [r7, #8]
 8015ace:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015ad0:	68fb      	ldr	r3, [r7, #12]
 8015ad2:	68dc      	ldr	r4, [r3, #12]
 8015ad4:	4610      	mov	r0, r2
 8015ad6:	f7f9 fd52 	bl	800f57e <lwip_htonl>
 8015ada:	4603      	mov	r3, r0
 8015adc:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8015ade:	68bb      	ldr	r3, [r7, #8]
 8015ae0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8015ae2:	68fb      	ldr	r3, [r7, #12]
 8015ae4:	68dc      	ldr	r4, [r3, #12]
 8015ae6:	4610      	mov	r0, r2
 8015ae8:	f7f9 fd34 	bl	800f554 <lwip_htons>
 8015aec:	4603      	mov	r3, r0
 8015aee:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015af0:	68bb      	ldr	r3, [r7, #8]
 8015af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015af4:	68ba      	ldr	r2, [r7, #8]
 8015af6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8015af8:	441a      	add	r2, r3
 8015afa:	68bb      	ldr	r3, [r7, #8]
 8015afc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8015afe:	68fb      	ldr	r3, [r7, #12]
 8015b00:	68db      	ldr	r3, [r3, #12]
 8015b02:	3314      	adds	r3, #20
 8015b04:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8015b06:	68fb      	ldr	r3, [r7, #12]
 8015b08:	7a9b      	ldrb	r3, [r3, #10]
 8015b0a:	f003 0301 	and.w	r3, r3, #1
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	d015      	beq.n	8015b3e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8015b12:	68bb      	ldr	r3, [r7, #8]
 8015b14:	3304      	adds	r3, #4
 8015b16:	461a      	mov	r2, r3
 8015b18:	6879      	ldr	r1, [r7, #4]
 8015b1a:	f240 50b4 	movw	r0, #1460	; 0x5b4
 8015b1e:	f7fc fe8b 	bl	8012838 <tcp_eff_send_mss_netif>
 8015b22:	4603      	mov	r3, r0
 8015b24:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8015b26:	8b7b      	ldrh	r3, [r7, #26]
 8015b28:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8015b2c:	4618      	mov	r0, r3
 8015b2e:	f7f9 fd26 	bl	800f57e <lwip_htonl>
 8015b32:	4602      	mov	r2, r0
 8015b34:	69fb      	ldr	r3, [r7, #28]
 8015b36:	601a      	str	r2, [r3, #0]
    opts += 1;
 8015b38:	69fb      	ldr	r3, [r7, #28]
 8015b3a:	3304      	adds	r3, #4
 8015b3c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8015b3e:	68bb      	ldr	r3, [r7, #8]
 8015b40:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8015b44:	2b00      	cmp	r3, #0
 8015b46:	da02      	bge.n	8015b4e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8015b48:	68bb      	ldr	r3, [r7, #8]
 8015b4a:	2200      	movs	r2, #0
 8015b4c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8015b4e:	68bb      	ldr	r3, [r7, #8]
 8015b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015b52:	2b00      	cmp	r3, #0
 8015b54:	d10c      	bne.n	8015b70 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8015b56:	4b35      	ldr	r3, [pc, #212]	; (8015c2c <tcp_output_segment+0x1b8>)
 8015b58:	681a      	ldr	r2, [r3, #0]
 8015b5a:	68bb      	ldr	r3, [r7, #8]
 8015b5c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8015b5e:	68fb      	ldr	r3, [r7, #12]
 8015b60:	68db      	ldr	r3, [r3, #12]
 8015b62:	685b      	ldr	r3, [r3, #4]
 8015b64:	4618      	mov	r0, r3
 8015b66:	f7f9 fd0a 	bl	800f57e <lwip_htonl>
 8015b6a:	4602      	mov	r2, r0
 8015b6c:	68bb      	ldr	r3, [r7, #8]
 8015b6e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8015b70:	68fb      	ldr	r3, [r7, #12]
 8015b72:	68da      	ldr	r2, [r3, #12]
 8015b74:	68fb      	ldr	r3, [r7, #12]
 8015b76:	685b      	ldr	r3, [r3, #4]
 8015b78:	685b      	ldr	r3, [r3, #4]
 8015b7a:	1ad3      	subs	r3, r2, r3
 8015b7c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8015b7e:	68fb      	ldr	r3, [r7, #12]
 8015b80:	685b      	ldr	r3, [r3, #4]
 8015b82:	8959      	ldrh	r1, [r3, #10]
 8015b84:	68fb      	ldr	r3, [r7, #12]
 8015b86:	685b      	ldr	r3, [r3, #4]
 8015b88:	8b3a      	ldrh	r2, [r7, #24]
 8015b8a:	1a8a      	subs	r2, r1, r2
 8015b8c:	b292      	uxth	r2, r2
 8015b8e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8015b90:	68fb      	ldr	r3, [r7, #12]
 8015b92:	685b      	ldr	r3, [r3, #4]
 8015b94:	8919      	ldrh	r1, [r3, #8]
 8015b96:	68fb      	ldr	r3, [r7, #12]
 8015b98:	685b      	ldr	r3, [r3, #4]
 8015b9a:	8b3a      	ldrh	r2, [r7, #24]
 8015b9c:	1a8a      	subs	r2, r1, r2
 8015b9e:	b292      	uxth	r2, r2
 8015ba0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8015ba2:	68fb      	ldr	r3, [r7, #12]
 8015ba4:	685b      	ldr	r3, [r3, #4]
 8015ba6:	68fa      	ldr	r2, [r7, #12]
 8015ba8:	68d2      	ldr	r2, [r2, #12]
 8015baa:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8015bac:	68fb      	ldr	r3, [r7, #12]
 8015bae:	68db      	ldr	r3, [r3, #12]
 8015bb0:	2200      	movs	r2, #0
 8015bb2:	741a      	strb	r2, [r3, #16]
 8015bb4:	2200      	movs	r2, #0
 8015bb6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8015bb8:	68fb      	ldr	r3, [r7, #12]
 8015bba:	68da      	ldr	r2, [r3, #12]
 8015bbc:	68fb      	ldr	r3, [r7, #12]
 8015bbe:	7a9b      	ldrb	r3, [r3, #10]
 8015bc0:	f003 0301 	and.w	r3, r3, #1
 8015bc4:	2b00      	cmp	r3, #0
 8015bc6:	d001      	beq.n	8015bcc <tcp_output_segment+0x158>
 8015bc8:	2318      	movs	r3, #24
 8015bca:	e000      	b.n	8015bce <tcp_output_segment+0x15a>
 8015bcc:	2314      	movs	r3, #20
 8015bce:	4413      	add	r3, r2
 8015bd0:	69fa      	ldr	r2, [r7, #28]
 8015bd2:	429a      	cmp	r2, r3
 8015bd4:	d006      	beq.n	8015be4 <tcp_output_segment+0x170>
 8015bd6:	4b10      	ldr	r3, [pc, #64]	; (8015c18 <tcp_output_segment+0x1a4>)
 8015bd8:	f240 621c 	movw	r2, #1564	; 0x61c
 8015bdc:	4914      	ldr	r1, [pc, #80]	; (8015c30 <tcp_output_segment+0x1bc>)
 8015bde:	4810      	ldr	r0, [pc, #64]	; (8015c20 <tcp_output_segment+0x1ac>)
 8015be0:	f003 ffd6 	bl	8019b90 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8015be4:	68fb      	ldr	r3, [r7, #12]
 8015be6:	6858      	ldr	r0, [r3, #4]
 8015be8:	68b9      	ldr	r1, [r7, #8]
 8015bea:	68bb      	ldr	r3, [r7, #8]
 8015bec:	1d1c      	adds	r4, r3, #4
 8015bee:	68bb      	ldr	r3, [r7, #8]
 8015bf0:	7add      	ldrb	r5, [r3, #11]
 8015bf2:	68bb      	ldr	r3, [r7, #8]
 8015bf4:	7a9b      	ldrb	r3, [r3, #10]
 8015bf6:	687a      	ldr	r2, [r7, #4]
 8015bf8:	9202      	str	r2, [sp, #8]
 8015bfa:	2206      	movs	r2, #6
 8015bfc:	9201      	str	r2, [sp, #4]
 8015bfe:	9300      	str	r3, [sp, #0]
 8015c00:	462b      	mov	r3, r5
 8015c02:	4622      	mov	r2, r4
 8015c04:	f002 fa5a 	bl	80180bc <ip4_output_if>
 8015c08:	4603      	mov	r3, r0
 8015c0a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8015c0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015c10:	4618      	mov	r0, r3
 8015c12:	3720      	adds	r7, #32
 8015c14:	46bd      	mov	sp, r7
 8015c16:	bdb0      	pop	{r4, r5, r7, pc}
 8015c18:	0801db1c 	.word	0x0801db1c
 8015c1c:	0801e0e0 	.word	0x0801e0e0
 8015c20:	0801db70 	.word	0x0801db70
 8015c24:	0801e100 	.word	0x0801e100
 8015c28:	0801e120 	.word	0x0801e120
 8015c2c:	20007044 	.word	0x20007044
 8015c30:	0801e144 	.word	0x0801e144

08015c34 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8015c34:	b5b0      	push	{r4, r5, r7, lr}
 8015c36:	b084      	sub	sp, #16
 8015c38:	af00      	add	r7, sp, #0
 8015c3a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	2b00      	cmp	r3, #0
 8015c40:	d106      	bne.n	8015c50 <tcp_rexmit_rto_prepare+0x1c>
 8015c42:	4b31      	ldr	r3, [pc, #196]	; (8015d08 <tcp_rexmit_rto_prepare+0xd4>)
 8015c44:	f240 6263 	movw	r2, #1635	; 0x663
 8015c48:	4930      	ldr	r1, [pc, #192]	; (8015d0c <tcp_rexmit_rto_prepare+0xd8>)
 8015c4a:	4831      	ldr	r0, [pc, #196]	; (8015d10 <tcp_rexmit_rto_prepare+0xdc>)
 8015c4c:	f003 ffa0 	bl	8019b90 <iprintf>

  if (pcb->unacked == NULL) {
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015c54:	2b00      	cmp	r3, #0
 8015c56:	d102      	bne.n	8015c5e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8015c58:	f06f 0305 	mvn.w	r3, #5
 8015c5c:	e050      	b.n	8015d00 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015c62:	60fb      	str	r3, [r7, #12]
 8015c64:	e00b      	b.n	8015c7e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8015c66:	68f8      	ldr	r0, [r7, #12]
 8015c68:	f7ff fee4 	bl	8015a34 <tcp_output_segment_busy>
 8015c6c:	4603      	mov	r3, r0
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	d002      	beq.n	8015c78 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8015c72:	f06f 0305 	mvn.w	r3, #5
 8015c76:	e043      	b.n	8015d00 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8015c78:	68fb      	ldr	r3, [r7, #12]
 8015c7a:	681b      	ldr	r3, [r3, #0]
 8015c7c:	60fb      	str	r3, [r7, #12]
 8015c7e:	68fb      	ldr	r3, [r7, #12]
 8015c80:	681b      	ldr	r3, [r3, #0]
 8015c82:	2b00      	cmp	r3, #0
 8015c84:	d1ef      	bne.n	8015c66 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8015c86:	68f8      	ldr	r0, [r7, #12]
 8015c88:	f7ff fed4 	bl	8015a34 <tcp_output_segment_busy>
 8015c8c:	4603      	mov	r3, r0
 8015c8e:	2b00      	cmp	r3, #0
 8015c90:	d002      	beq.n	8015c98 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8015c92:	f06f 0305 	mvn.w	r3, #5
 8015c96:	e033      	b.n	8015d00 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8015c9c:	68fb      	ldr	r3, [r7, #12]
 8015c9e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	2200      	movs	r2, #0
 8015cac:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8015cae:	687b      	ldr	r3, [r7, #4]
 8015cb0:	8b5b      	ldrh	r3, [r3, #26]
 8015cb2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8015cb6:	b29a      	uxth	r2, r3
 8015cb8:	687b      	ldr	r3, [r7, #4]
 8015cba:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8015cbc:	68fb      	ldr	r3, [r7, #12]
 8015cbe:	68db      	ldr	r3, [r3, #12]
 8015cc0:	685b      	ldr	r3, [r3, #4]
 8015cc2:	4618      	mov	r0, r3
 8015cc4:	f7f9 fc5b 	bl	800f57e <lwip_htonl>
 8015cc8:	4604      	mov	r4, r0
 8015cca:	68fb      	ldr	r3, [r7, #12]
 8015ccc:	891b      	ldrh	r3, [r3, #8]
 8015cce:	461d      	mov	r5, r3
 8015cd0:	68fb      	ldr	r3, [r7, #12]
 8015cd2:	68db      	ldr	r3, [r3, #12]
 8015cd4:	899b      	ldrh	r3, [r3, #12]
 8015cd6:	b29b      	uxth	r3, r3
 8015cd8:	4618      	mov	r0, r3
 8015cda:	f7f9 fc3b 	bl	800f554 <lwip_htons>
 8015cde:	4603      	mov	r3, r0
 8015ce0:	b2db      	uxtb	r3, r3
 8015ce2:	f003 0303 	and.w	r3, r3, #3
 8015ce6:	2b00      	cmp	r3, #0
 8015ce8:	d001      	beq.n	8015cee <tcp_rexmit_rto_prepare+0xba>
 8015cea:	2301      	movs	r3, #1
 8015cec:	e000      	b.n	8015cf0 <tcp_rexmit_rto_prepare+0xbc>
 8015cee:	2300      	movs	r3, #0
 8015cf0:	442b      	add	r3, r5
 8015cf2:	18e2      	adds	r2, r4, r3
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	2200      	movs	r2, #0
 8015cfc:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8015cfe:	2300      	movs	r3, #0
}
 8015d00:	4618      	mov	r0, r3
 8015d02:	3710      	adds	r7, #16
 8015d04:	46bd      	mov	sp, r7
 8015d06:	bdb0      	pop	{r4, r5, r7, pc}
 8015d08:	0801db1c 	.word	0x0801db1c
 8015d0c:	0801e158 	.word	0x0801e158
 8015d10:	0801db70 	.word	0x0801db70

08015d14 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8015d14:	b580      	push	{r7, lr}
 8015d16:	b082      	sub	sp, #8
 8015d18:	af00      	add	r7, sp, #0
 8015d1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	d106      	bne.n	8015d30 <tcp_rexmit_rto_commit+0x1c>
 8015d22:	4b0d      	ldr	r3, [pc, #52]	; (8015d58 <tcp_rexmit_rto_commit+0x44>)
 8015d24:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8015d28:	490c      	ldr	r1, [pc, #48]	; (8015d5c <tcp_rexmit_rto_commit+0x48>)
 8015d2a:	480d      	ldr	r0, [pc, #52]	; (8015d60 <tcp_rexmit_rto_commit+0x4c>)
 8015d2c:	f003 ff30 	bl	8019b90 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015d36:	2bff      	cmp	r3, #255	; 0xff
 8015d38:	d007      	beq.n	8015d4a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015d40:	3301      	adds	r3, #1
 8015d42:	b2da      	uxtb	r2, r3
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8015d4a:	6878      	ldr	r0, [r7, #4]
 8015d4c:	f7ff fc7e 	bl	801564c <tcp_output>
}
 8015d50:	bf00      	nop
 8015d52:	3708      	adds	r7, #8
 8015d54:	46bd      	mov	sp, r7
 8015d56:	bd80      	pop	{r7, pc}
 8015d58:	0801db1c 	.word	0x0801db1c
 8015d5c:	0801e17c 	.word	0x0801e17c
 8015d60:	0801db70 	.word	0x0801db70

08015d64 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8015d64:	b580      	push	{r7, lr}
 8015d66:	b082      	sub	sp, #8
 8015d68:	af00      	add	r7, sp, #0
 8015d6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	2b00      	cmp	r3, #0
 8015d70:	d106      	bne.n	8015d80 <tcp_rexmit_rto+0x1c>
 8015d72:	4b0a      	ldr	r3, [pc, #40]	; (8015d9c <tcp_rexmit_rto+0x38>)
 8015d74:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8015d78:	4909      	ldr	r1, [pc, #36]	; (8015da0 <tcp_rexmit_rto+0x3c>)
 8015d7a:	480a      	ldr	r0, [pc, #40]	; (8015da4 <tcp_rexmit_rto+0x40>)
 8015d7c:	f003 ff08 	bl	8019b90 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8015d80:	6878      	ldr	r0, [r7, #4]
 8015d82:	f7ff ff57 	bl	8015c34 <tcp_rexmit_rto_prepare>
 8015d86:	4603      	mov	r3, r0
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	d102      	bne.n	8015d92 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8015d8c:	6878      	ldr	r0, [r7, #4]
 8015d8e:	f7ff ffc1 	bl	8015d14 <tcp_rexmit_rto_commit>
  }
}
 8015d92:	bf00      	nop
 8015d94:	3708      	adds	r7, #8
 8015d96:	46bd      	mov	sp, r7
 8015d98:	bd80      	pop	{r7, pc}
 8015d9a:	bf00      	nop
 8015d9c:	0801db1c 	.word	0x0801db1c
 8015da0:	0801e1a0 	.word	0x0801e1a0
 8015da4:	0801db70 	.word	0x0801db70

08015da8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8015da8:	b590      	push	{r4, r7, lr}
 8015daa:	b085      	sub	sp, #20
 8015dac:	af00      	add	r7, sp, #0
 8015dae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8015db0:	687b      	ldr	r3, [r7, #4]
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	d106      	bne.n	8015dc4 <tcp_rexmit+0x1c>
 8015db6:	4b2f      	ldr	r3, [pc, #188]	; (8015e74 <tcp_rexmit+0xcc>)
 8015db8:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8015dbc:	492e      	ldr	r1, [pc, #184]	; (8015e78 <tcp_rexmit+0xd0>)
 8015dbe:	482f      	ldr	r0, [pc, #188]	; (8015e7c <tcp_rexmit+0xd4>)
 8015dc0:	f003 fee6 	bl	8019b90 <iprintf>

  if (pcb->unacked == NULL) {
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015dc8:	2b00      	cmp	r3, #0
 8015dca:	d102      	bne.n	8015dd2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8015dcc:	f06f 0305 	mvn.w	r3, #5
 8015dd0:	e04c      	b.n	8015e6c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015dd6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8015dd8:	68b8      	ldr	r0, [r7, #8]
 8015dda:	f7ff fe2b 	bl	8015a34 <tcp_output_segment_busy>
 8015dde:	4603      	mov	r3, r0
 8015de0:	2b00      	cmp	r3, #0
 8015de2:	d002      	beq.n	8015dea <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8015de4:	f06f 0305 	mvn.w	r3, #5
 8015de8:	e040      	b.n	8015e6c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8015dea:	68bb      	ldr	r3, [r7, #8]
 8015dec:	681a      	ldr	r2, [r3, #0]
 8015dee:	687b      	ldr	r3, [r7, #4]
 8015df0:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8015df2:	687b      	ldr	r3, [r7, #4]
 8015df4:	336c      	adds	r3, #108	; 0x6c
 8015df6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015df8:	e002      	b.n	8015e00 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8015dfa:	68fb      	ldr	r3, [r7, #12]
 8015dfc:	681b      	ldr	r3, [r3, #0]
 8015dfe:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015e00:	68fb      	ldr	r3, [r7, #12]
 8015e02:	681b      	ldr	r3, [r3, #0]
 8015e04:	2b00      	cmp	r3, #0
 8015e06:	d011      	beq.n	8015e2c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015e08:	68fb      	ldr	r3, [r7, #12]
 8015e0a:	681b      	ldr	r3, [r3, #0]
 8015e0c:	68db      	ldr	r3, [r3, #12]
 8015e0e:	685b      	ldr	r3, [r3, #4]
 8015e10:	4618      	mov	r0, r3
 8015e12:	f7f9 fbb4 	bl	800f57e <lwip_htonl>
 8015e16:	4604      	mov	r4, r0
 8015e18:	68bb      	ldr	r3, [r7, #8]
 8015e1a:	68db      	ldr	r3, [r3, #12]
 8015e1c:	685b      	ldr	r3, [r3, #4]
 8015e1e:	4618      	mov	r0, r3
 8015e20:	f7f9 fbad 	bl	800f57e <lwip_htonl>
 8015e24:	4603      	mov	r3, r0
 8015e26:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	dbe6      	blt.n	8015dfa <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8015e2c:	68fb      	ldr	r3, [r7, #12]
 8015e2e:	681a      	ldr	r2, [r3, #0]
 8015e30:	68bb      	ldr	r3, [r7, #8]
 8015e32:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8015e34:	68fb      	ldr	r3, [r7, #12]
 8015e36:	68ba      	ldr	r2, [r7, #8]
 8015e38:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8015e3a:	68bb      	ldr	r3, [r7, #8]
 8015e3c:	681b      	ldr	r3, [r3, #0]
 8015e3e:	2b00      	cmp	r3, #0
 8015e40:	d103      	bne.n	8015e4a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	2200      	movs	r2, #0
 8015e46:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015e50:	2bff      	cmp	r3, #255	; 0xff
 8015e52:	d007      	beq.n	8015e64 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015e5a:	3301      	adds	r3, #1
 8015e5c:	b2da      	uxtb	r2, r3
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8015e64:	687b      	ldr	r3, [r7, #4]
 8015e66:	2200      	movs	r2, #0
 8015e68:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8015e6a:	2300      	movs	r3, #0
}
 8015e6c:	4618      	mov	r0, r3
 8015e6e:	3714      	adds	r7, #20
 8015e70:	46bd      	mov	sp, r7
 8015e72:	bd90      	pop	{r4, r7, pc}
 8015e74:	0801db1c 	.word	0x0801db1c
 8015e78:	0801e1bc 	.word	0x0801e1bc
 8015e7c:	0801db70 	.word	0x0801db70

08015e80 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8015e80:	b580      	push	{r7, lr}
 8015e82:	b082      	sub	sp, #8
 8015e84:	af00      	add	r7, sp, #0
 8015e86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	d106      	bne.n	8015e9c <tcp_rexmit_fast+0x1c>
 8015e8e:	4b2a      	ldr	r3, [pc, #168]	; (8015f38 <tcp_rexmit_fast+0xb8>)
 8015e90:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8015e94:	4929      	ldr	r1, [pc, #164]	; (8015f3c <tcp_rexmit_fast+0xbc>)
 8015e96:	482a      	ldr	r0, [pc, #168]	; (8015f40 <tcp_rexmit_fast+0xc0>)
 8015e98:	f003 fe7a 	bl	8019b90 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015ea0:	2b00      	cmp	r3, #0
 8015ea2:	d045      	beq.n	8015f30 <tcp_rexmit_fast+0xb0>
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	8b5b      	ldrh	r3, [r3, #26]
 8015ea8:	f003 0304 	and.w	r3, r3, #4
 8015eac:	2b00      	cmp	r3, #0
 8015eae:	d13f      	bne.n	8015f30 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8015eb0:	6878      	ldr	r0, [r7, #4]
 8015eb2:	f7ff ff79 	bl	8015da8 <tcp_rexmit>
 8015eb6:	4603      	mov	r3, r0
 8015eb8:	2b00      	cmp	r3, #0
 8015eba:	d139      	bne.n	8015f30 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8015ebc:	687b      	ldr	r3, [r7, #4]
 8015ebe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015ec8:	4293      	cmp	r3, r2
 8015eca:	bf28      	it	cs
 8015ecc:	4613      	movcs	r3, r2
 8015ece:	b29b      	uxth	r3, r3
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	da00      	bge.n	8015ed6 <tcp_rexmit_fast+0x56>
 8015ed4:	3301      	adds	r3, #1
 8015ed6:	105b      	asrs	r3, r3, #1
 8015ed8:	b29a      	uxth	r2, r3
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8015ee6:	461a      	mov	r2, r3
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015eec:	005b      	lsls	r3, r3, #1
 8015eee:	429a      	cmp	r2, r3
 8015ef0:	d206      	bcs.n	8015f00 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015ef6:	005b      	lsls	r3, r3, #1
 8015ef8:	b29a      	uxth	r2, r3
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8015f06:	687b      	ldr	r3, [r7, #4]
 8015f08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015f0a:	4619      	mov	r1, r3
 8015f0c:	0049      	lsls	r1, r1, #1
 8015f0e:	440b      	add	r3, r1
 8015f10:	b29b      	uxth	r3, r3
 8015f12:	4413      	add	r3, r2
 8015f14:	b29a      	uxth	r2, r3
 8015f16:	687b      	ldr	r3, [r7, #4]
 8015f18:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	8b5b      	ldrh	r3, [r3, #26]
 8015f20:	f043 0304 	orr.w	r3, r3, #4
 8015f24:	b29a      	uxth	r2, r3
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	2200      	movs	r2, #0
 8015f2e:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8015f30:	bf00      	nop
 8015f32:	3708      	adds	r7, #8
 8015f34:	46bd      	mov	sp, r7
 8015f36:	bd80      	pop	{r7, pc}
 8015f38:	0801db1c 	.word	0x0801db1c
 8015f3c:	0801e1d4 	.word	0x0801e1d4
 8015f40:	0801db70 	.word	0x0801db70

08015f44 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8015f44:	b580      	push	{r7, lr}
 8015f46:	b086      	sub	sp, #24
 8015f48:	af00      	add	r7, sp, #0
 8015f4a:	60f8      	str	r0, [r7, #12]
 8015f4c:	607b      	str	r3, [r7, #4]
 8015f4e:	460b      	mov	r3, r1
 8015f50:	817b      	strh	r3, [r7, #10]
 8015f52:	4613      	mov	r3, r2
 8015f54:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8015f56:	897a      	ldrh	r2, [r7, #10]
 8015f58:	893b      	ldrh	r3, [r7, #8]
 8015f5a:	4413      	add	r3, r2
 8015f5c:	b29b      	uxth	r3, r3
 8015f5e:	3314      	adds	r3, #20
 8015f60:	b29b      	uxth	r3, r3
 8015f62:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015f66:	4619      	mov	r1, r3
 8015f68:	2022      	movs	r0, #34	; 0x22
 8015f6a:	f7fa fc13 	bl	8010794 <pbuf_alloc>
 8015f6e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8015f70:	697b      	ldr	r3, [r7, #20]
 8015f72:	2b00      	cmp	r3, #0
 8015f74:	d04d      	beq.n	8016012 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8015f76:	897b      	ldrh	r3, [r7, #10]
 8015f78:	3313      	adds	r3, #19
 8015f7a:	697a      	ldr	r2, [r7, #20]
 8015f7c:	8952      	ldrh	r2, [r2, #10]
 8015f7e:	4293      	cmp	r3, r2
 8015f80:	db06      	blt.n	8015f90 <tcp_output_alloc_header_common+0x4c>
 8015f82:	4b26      	ldr	r3, [pc, #152]	; (801601c <tcp_output_alloc_header_common+0xd8>)
 8015f84:	f240 7223 	movw	r2, #1827	; 0x723
 8015f88:	4925      	ldr	r1, [pc, #148]	; (8016020 <tcp_output_alloc_header_common+0xdc>)
 8015f8a:	4826      	ldr	r0, [pc, #152]	; (8016024 <tcp_output_alloc_header_common+0xe0>)
 8015f8c:	f003 fe00 	bl	8019b90 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8015f90:	697b      	ldr	r3, [r7, #20]
 8015f92:	685b      	ldr	r3, [r3, #4]
 8015f94:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8015f96:	8c3b      	ldrh	r3, [r7, #32]
 8015f98:	4618      	mov	r0, r3
 8015f9a:	f7f9 fadb 	bl	800f554 <lwip_htons>
 8015f9e:	4603      	mov	r3, r0
 8015fa0:	461a      	mov	r2, r3
 8015fa2:	693b      	ldr	r3, [r7, #16]
 8015fa4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8015fa6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015fa8:	4618      	mov	r0, r3
 8015faa:	f7f9 fad3 	bl	800f554 <lwip_htons>
 8015fae:	4603      	mov	r3, r0
 8015fb0:	461a      	mov	r2, r3
 8015fb2:	693b      	ldr	r3, [r7, #16]
 8015fb4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8015fb6:	693b      	ldr	r3, [r7, #16]
 8015fb8:	687a      	ldr	r2, [r7, #4]
 8015fba:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8015fbc:	68f8      	ldr	r0, [r7, #12]
 8015fbe:	f7f9 fade 	bl	800f57e <lwip_htonl>
 8015fc2:	4602      	mov	r2, r0
 8015fc4:	693b      	ldr	r3, [r7, #16]
 8015fc6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8015fc8:	897b      	ldrh	r3, [r7, #10]
 8015fca:	089b      	lsrs	r3, r3, #2
 8015fcc:	b29b      	uxth	r3, r3
 8015fce:	3305      	adds	r3, #5
 8015fd0:	b29b      	uxth	r3, r3
 8015fd2:	031b      	lsls	r3, r3, #12
 8015fd4:	b29a      	uxth	r2, r3
 8015fd6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015fda:	b29b      	uxth	r3, r3
 8015fdc:	4313      	orrs	r3, r2
 8015fde:	b29b      	uxth	r3, r3
 8015fe0:	4618      	mov	r0, r3
 8015fe2:	f7f9 fab7 	bl	800f554 <lwip_htons>
 8015fe6:	4603      	mov	r3, r0
 8015fe8:	461a      	mov	r2, r3
 8015fea:	693b      	ldr	r3, [r7, #16]
 8015fec:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8015fee:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8015ff0:	4618      	mov	r0, r3
 8015ff2:	f7f9 faaf 	bl	800f554 <lwip_htons>
 8015ff6:	4603      	mov	r3, r0
 8015ff8:	461a      	mov	r2, r3
 8015ffa:	693b      	ldr	r3, [r7, #16]
 8015ffc:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8015ffe:	693b      	ldr	r3, [r7, #16]
 8016000:	2200      	movs	r2, #0
 8016002:	741a      	strb	r2, [r3, #16]
 8016004:	2200      	movs	r2, #0
 8016006:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8016008:	693b      	ldr	r3, [r7, #16]
 801600a:	2200      	movs	r2, #0
 801600c:	749a      	strb	r2, [r3, #18]
 801600e:	2200      	movs	r2, #0
 8016010:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8016012:	697b      	ldr	r3, [r7, #20]
}
 8016014:	4618      	mov	r0, r3
 8016016:	3718      	adds	r7, #24
 8016018:	46bd      	mov	sp, r7
 801601a:	bd80      	pop	{r7, pc}
 801601c:	0801db1c 	.word	0x0801db1c
 8016020:	0801e1f4 	.word	0x0801e1f4
 8016024:	0801db70 	.word	0x0801db70

08016028 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8016028:	b5b0      	push	{r4, r5, r7, lr}
 801602a:	b08a      	sub	sp, #40	; 0x28
 801602c:	af04      	add	r7, sp, #16
 801602e:	60f8      	str	r0, [r7, #12]
 8016030:	607b      	str	r3, [r7, #4]
 8016032:	460b      	mov	r3, r1
 8016034:	817b      	strh	r3, [r7, #10]
 8016036:	4613      	mov	r3, r2
 8016038:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801603a:	68fb      	ldr	r3, [r7, #12]
 801603c:	2b00      	cmp	r3, #0
 801603e:	d106      	bne.n	801604e <tcp_output_alloc_header+0x26>
 8016040:	4b15      	ldr	r3, [pc, #84]	; (8016098 <tcp_output_alloc_header+0x70>)
 8016042:	f240 7242 	movw	r2, #1858	; 0x742
 8016046:	4915      	ldr	r1, [pc, #84]	; (801609c <tcp_output_alloc_header+0x74>)
 8016048:	4815      	ldr	r0, [pc, #84]	; (80160a0 <tcp_output_alloc_header+0x78>)
 801604a:	f003 fda1 	bl	8019b90 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801604e:	68fb      	ldr	r3, [r7, #12]
 8016050:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8016052:	68fb      	ldr	r3, [r7, #12]
 8016054:	8adb      	ldrh	r3, [r3, #22]
 8016056:	68fa      	ldr	r2, [r7, #12]
 8016058:	8b12      	ldrh	r2, [r2, #24]
 801605a:	68f9      	ldr	r1, [r7, #12]
 801605c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801605e:	893d      	ldrh	r5, [r7, #8]
 8016060:	897c      	ldrh	r4, [r7, #10]
 8016062:	9103      	str	r1, [sp, #12]
 8016064:	2110      	movs	r1, #16
 8016066:	9102      	str	r1, [sp, #8]
 8016068:	9201      	str	r2, [sp, #4]
 801606a:	9300      	str	r3, [sp, #0]
 801606c:	687b      	ldr	r3, [r7, #4]
 801606e:	462a      	mov	r2, r5
 8016070:	4621      	mov	r1, r4
 8016072:	f7ff ff67 	bl	8015f44 <tcp_output_alloc_header_common>
 8016076:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8016078:	697b      	ldr	r3, [r7, #20]
 801607a:	2b00      	cmp	r3, #0
 801607c:	d006      	beq.n	801608c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801607e:	68fb      	ldr	r3, [r7, #12]
 8016080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016082:	68fa      	ldr	r2, [r7, #12]
 8016084:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8016086:	441a      	add	r2, r3
 8016088:	68fb      	ldr	r3, [r7, #12]
 801608a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801608c:	697b      	ldr	r3, [r7, #20]
}
 801608e:	4618      	mov	r0, r3
 8016090:	3718      	adds	r7, #24
 8016092:	46bd      	mov	sp, r7
 8016094:	bdb0      	pop	{r4, r5, r7, pc}
 8016096:	bf00      	nop
 8016098:	0801db1c 	.word	0x0801db1c
 801609c:	0801e224 	.word	0x0801e224
 80160a0:	0801db70 	.word	0x0801db70

080160a4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80160a4:	b580      	push	{r7, lr}
 80160a6:	b088      	sub	sp, #32
 80160a8:	af00      	add	r7, sp, #0
 80160aa:	60f8      	str	r0, [r7, #12]
 80160ac:	60b9      	str	r1, [r7, #8]
 80160ae:	4611      	mov	r1, r2
 80160b0:	461a      	mov	r2, r3
 80160b2:	460b      	mov	r3, r1
 80160b4:	71fb      	strb	r3, [r7, #7]
 80160b6:	4613      	mov	r3, r2
 80160b8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80160ba:	2300      	movs	r3, #0
 80160bc:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80160be:	68bb      	ldr	r3, [r7, #8]
 80160c0:	2b00      	cmp	r3, #0
 80160c2:	d106      	bne.n	80160d2 <tcp_output_fill_options+0x2e>
 80160c4:	4b12      	ldr	r3, [pc, #72]	; (8016110 <tcp_output_fill_options+0x6c>)
 80160c6:	f240 7256 	movw	r2, #1878	; 0x756
 80160ca:	4912      	ldr	r1, [pc, #72]	; (8016114 <tcp_output_fill_options+0x70>)
 80160cc:	4812      	ldr	r0, [pc, #72]	; (8016118 <tcp_output_fill_options+0x74>)
 80160ce:	f003 fd5f 	bl	8019b90 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80160d2:	68bb      	ldr	r3, [r7, #8]
 80160d4:	685b      	ldr	r3, [r3, #4]
 80160d6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80160d8:	69bb      	ldr	r3, [r7, #24]
 80160da:	3314      	adds	r3, #20
 80160dc:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80160de:	8bfb      	ldrh	r3, [r7, #30]
 80160e0:	009b      	lsls	r3, r3, #2
 80160e2:	461a      	mov	r2, r3
 80160e4:	79fb      	ldrb	r3, [r7, #7]
 80160e6:	009b      	lsls	r3, r3, #2
 80160e8:	f003 0304 	and.w	r3, r3, #4
 80160ec:	4413      	add	r3, r2
 80160ee:	3314      	adds	r3, #20
 80160f0:	69ba      	ldr	r2, [r7, #24]
 80160f2:	4413      	add	r3, r2
 80160f4:	697a      	ldr	r2, [r7, #20]
 80160f6:	429a      	cmp	r2, r3
 80160f8:	d006      	beq.n	8016108 <tcp_output_fill_options+0x64>
 80160fa:	4b05      	ldr	r3, [pc, #20]	; (8016110 <tcp_output_fill_options+0x6c>)
 80160fc:	f240 7275 	movw	r2, #1909	; 0x775
 8016100:	4906      	ldr	r1, [pc, #24]	; (801611c <tcp_output_fill_options+0x78>)
 8016102:	4805      	ldr	r0, [pc, #20]	; (8016118 <tcp_output_fill_options+0x74>)
 8016104:	f003 fd44 	bl	8019b90 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8016108:	bf00      	nop
 801610a:	3720      	adds	r7, #32
 801610c:	46bd      	mov	sp, r7
 801610e:	bd80      	pop	{r7, pc}
 8016110:	0801db1c 	.word	0x0801db1c
 8016114:	0801e24c 	.word	0x0801e24c
 8016118:	0801db70 	.word	0x0801db70
 801611c:	0801e144 	.word	0x0801e144

08016120 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8016120:	b580      	push	{r7, lr}
 8016122:	b08a      	sub	sp, #40	; 0x28
 8016124:	af04      	add	r7, sp, #16
 8016126:	60f8      	str	r0, [r7, #12]
 8016128:	60b9      	str	r1, [r7, #8]
 801612a:	607a      	str	r2, [r7, #4]
 801612c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801612e:	68bb      	ldr	r3, [r7, #8]
 8016130:	2b00      	cmp	r3, #0
 8016132:	d106      	bne.n	8016142 <tcp_output_control_segment+0x22>
 8016134:	4b1c      	ldr	r3, [pc, #112]	; (80161a8 <tcp_output_control_segment+0x88>)
 8016136:	f240 7287 	movw	r2, #1927	; 0x787
 801613a:	491c      	ldr	r1, [pc, #112]	; (80161ac <tcp_output_control_segment+0x8c>)
 801613c:	481c      	ldr	r0, [pc, #112]	; (80161b0 <tcp_output_control_segment+0x90>)
 801613e:	f003 fd27 	bl	8019b90 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8016142:	683a      	ldr	r2, [r7, #0]
 8016144:	6879      	ldr	r1, [r7, #4]
 8016146:	68f8      	ldr	r0, [r7, #12]
 8016148:	f7fe ff40 	bl	8014fcc <tcp_route>
 801614c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801614e:	693b      	ldr	r3, [r7, #16]
 8016150:	2b00      	cmp	r3, #0
 8016152:	d102      	bne.n	801615a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8016154:	23fc      	movs	r3, #252	; 0xfc
 8016156:	75fb      	strb	r3, [r7, #23]
 8016158:	e01c      	b.n	8016194 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801615a:	68fb      	ldr	r3, [r7, #12]
 801615c:	2b00      	cmp	r3, #0
 801615e:	d006      	beq.n	801616e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8016160:	68fb      	ldr	r3, [r7, #12]
 8016162:	7adb      	ldrb	r3, [r3, #11]
 8016164:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8016166:	68fb      	ldr	r3, [r7, #12]
 8016168:	7a9b      	ldrb	r3, [r3, #10]
 801616a:	757b      	strb	r3, [r7, #21]
 801616c:	e003      	b.n	8016176 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801616e:	23ff      	movs	r3, #255	; 0xff
 8016170:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8016172:	2300      	movs	r3, #0
 8016174:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8016176:	7dba      	ldrb	r2, [r7, #22]
 8016178:	693b      	ldr	r3, [r7, #16]
 801617a:	9302      	str	r3, [sp, #8]
 801617c:	2306      	movs	r3, #6
 801617e:	9301      	str	r3, [sp, #4]
 8016180:	7d7b      	ldrb	r3, [r7, #21]
 8016182:	9300      	str	r3, [sp, #0]
 8016184:	4613      	mov	r3, r2
 8016186:	683a      	ldr	r2, [r7, #0]
 8016188:	6879      	ldr	r1, [r7, #4]
 801618a:	68b8      	ldr	r0, [r7, #8]
 801618c:	f001 ff96 	bl	80180bc <ip4_output_if>
 8016190:	4603      	mov	r3, r0
 8016192:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8016194:	68b8      	ldr	r0, [r7, #8]
 8016196:	f7fa fde1 	bl	8010d5c <pbuf_free>
  return err;
 801619a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801619e:	4618      	mov	r0, r3
 80161a0:	3718      	adds	r7, #24
 80161a2:	46bd      	mov	sp, r7
 80161a4:	bd80      	pop	{r7, pc}
 80161a6:	bf00      	nop
 80161a8:	0801db1c 	.word	0x0801db1c
 80161ac:	0801e274 	.word	0x0801e274
 80161b0:	0801db70 	.word	0x0801db70

080161b4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80161b4:	b590      	push	{r4, r7, lr}
 80161b6:	b08b      	sub	sp, #44	; 0x2c
 80161b8:	af04      	add	r7, sp, #16
 80161ba:	60f8      	str	r0, [r7, #12]
 80161bc:	60b9      	str	r1, [r7, #8]
 80161be:	607a      	str	r2, [r7, #4]
 80161c0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80161c2:	683b      	ldr	r3, [r7, #0]
 80161c4:	2b00      	cmp	r3, #0
 80161c6:	d106      	bne.n	80161d6 <tcp_rst+0x22>
 80161c8:	4b1f      	ldr	r3, [pc, #124]	; (8016248 <tcp_rst+0x94>)
 80161ca:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80161ce:	491f      	ldr	r1, [pc, #124]	; (801624c <tcp_rst+0x98>)
 80161d0:	481f      	ldr	r0, [pc, #124]	; (8016250 <tcp_rst+0x9c>)
 80161d2:	f003 fcdd 	bl	8019b90 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80161d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161d8:	2b00      	cmp	r3, #0
 80161da:	d106      	bne.n	80161ea <tcp_rst+0x36>
 80161dc:	4b1a      	ldr	r3, [pc, #104]	; (8016248 <tcp_rst+0x94>)
 80161de:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80161e2:	491c      	ldr	r1, [pc, #112]	; (8016254 <tcp_rst+0xa0>)
 80161e4:	481a      	ldr	r0, [pc, #104]	; (8016250 <tcp_rst+0x9c>)
 80161e6:	f003 fcd3 	bl	8019b90 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80161ea:	2300      	movs	r3, #0
 80161ec:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80161ee:	f24d 0316 	movw	r3, #53270	; 0xd016
 80161f2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80161f4:	7dfb      	ldrb	r3, [r7, #23]
 80161f6:	b29c      	uxth	r4, r3
 80161f8:	68b8      	ldr	r0, [r7, #8]
 80161fa:	f7f9 f9c0 	bl	800f57e <lwip_htonl>
 80161fe:	4602      	mov	r2, r0
 8016200:	8abb      	ldrh	r3, [r7, #20]
 8016202:	9303      	str	r3, [sp, #12]
 8016204:	2314      	movs	r3, #20
 8016206:	9302      	str	r3, [sp, #8]
 8016208:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801620a:	9301      	str	r3, [sp, #4]
 801620c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801620e:	9300      	str	r3, [sp, #0]
 8016210:	4613      	mov	r3, r2
 8016212:	2200      	movs	r2, #0
 8016214:	4621      	mov	r1, r4
 8016216:	6878      	ldr	r0, [r7, #4]
 8016218:	f7ff fe94 	bl	8015f44 <tcp_output_alloc_header_common>
 801621c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801621e:	693b      	ldr	r3, [r7, #16]
 8016220:	2b00      	cmp	r3, #0
 8016222:	d00c      	beq.n	801623e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8016224:	7dfb      	ldrb	r3, [r7, #23]
 8016226:	2200      	movs	r2, #0
 8016228:	6939      	ldr	r1, [r7, #16]
 801622a:	68f8      	ldr	r0, [r7, #12]
 801622c:	f7ff ff3a 	bl	80160a4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8016230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016232:	683a      	ldr	r2, [r7, #0]
 8016234:	6939      	ldr	r1, [r7, #16]
 8016236:	68f8      	ldr	r0, [r7, #12]
 8016238:	f7ff ff72 	bl	8016120 <tcp_output_control_segment>
 801623c:	e000      	b.n	8016240 <tcp_rst+0x8c>
    return;
 801623e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8016240:	371c      	adds	r7, #28
 8016242:	46bd      	mov	sp, r7
 8016244:	bd90      	pop	{r4, r7, pc}
 8016246:	bf00      	nop
 8016248:	0801db1c 	.word	0x0801db1c
 801624c:	0801e2a0 	.word	0x0801e2a0
 8016250:	0801db70 	.word	0x0801db70
 8016254:	0801e2bc 	.word	0x0801e2bc

08016258 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8016258:	b590      	push	{r4, r7, lr}
 801625a:	b087      	sub	sp, #28
 801625c:	af00      	add	r7, sp, #0
 801625e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8016260:	2300      	movs	r3, #0
 8016262:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8016264:	2300      	movs	r3, #0
 8016266:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8016268:	687b      	ldr	r3, [r7, #4]
 801626a:	2b00      	cmp	r3, #0
 801626c:	d106      	bne.n	801627c <tcp_send_empty_ack+0x24>
 801626e:	4b28      	ldr	r3, [pc, #160]	; (8016310 <tcp_send_empty_ack+0xb8>)
 8016270:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8016274:	4927      	ldr	r1, [pc, #156]	; (8016314 <tcp_send_empty_ack+0xbc>)
 8016276:	4828      	ldr	r0, [pc, #160]	; (8016318 <tcp_send_empty_ack+0xc0>)
 8016278:	f003 fc8a 	bl	8019b90 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801627c:	7dfb      	ldrb	r3, [r7, #23]
 801627e:	009b      	lsls	r3, r3, #2
 8016280:	b2db      	uxtb	r3, r3
 8016282:	f003 0304 	and.w	r3, r3, #4
 8016286:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8016288:	7d7b      	ldrb	r3, [r7, #21]
 801628a:	b29c      	uxth	r4, r3
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016290:	4618      	mov	r0, r3
 8016292:	f7f9 f974 	bl	800f57e <lwip_htonl>
 8016296:	4603      	mov	r3, r0
 8016298:	2200      	movs	r2, #0
 801629a:	4621      	mov	r1, r4
 801629c:	6878      	ldr	r0, [r7, #4]
 801629e:	f7ff fec3 	bl	8016028 <tcp_output_alloc_header>
 80162a2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80162a4:	693b      	ldr	r3, [r7, #16]
 80162a6:	2b00      	cmp	r3, #0
 80162a8:	d109      	bne.n	80162be <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80162aa:	687b      	ldr	r3, [r7, #4]
 80162ac:	8b5b      	ldrh	r3, [r3, #26]
 80162ae:	f043 0303 	orr.w	r3, r3, #3
 80162b2:	b29a      	uxth	r2, r3
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80162b8:	f06f 0301 	mvn.w	r3, #1
 80162bc:	e023      	b.n	8016306 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80162be:	7dbb      	ldrb	r3, [r7, #22]
 80162c0:	7dfa      	ldrb	r2, [r7, #23]
 80162c2:	6939      	ldr	r1, [r7, #16]
 80162c4:	6878      	ldr	r0, [r7, #4]
 80162c6:	f7ff feed 	bl	80160a4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80162ca:	687a      	ldr	r2, [r7, #4]
 80162cc:	687b      	ldr	r3, [r7, #4]
 80162ce:	3304      	adds	r3, #4
 80162d0:	6939      	ldr	r1, [r7, #16]
 80162d2:	6878      	ldr	r0, [r7, #4]
 80162d4:	f7ff ff24 	bl	8016120 <tcp_output_control_segment>
 80162d8:	4603      	mov	r3, r0
 80162da:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80162dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80162e0:	2b00      	cmp	r3, #0
 80162e2:	d007      	beq.n	80162f4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80162e4:	687b      	ldr	r3, [r7, #4]
 80162e6:	8b5b      	ldrh	r3, [r3, #26]
 80162e8:	f043 0303 	orr.w	r3, r3, #3
 80162ec:	b29a      	uxth	r2, r3
 80162ee:	687b      	ldr	r3, [r7, #4]
 80162f0:	835a      	strh	r2, [r3, #26]
 80162f2:	e006      	b.n	8016302 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	8b5b      	ldrh	r3, [r3, #26]
 80162f8:	f023 0303 	bic.w	r3, r3, #3
 80162fc:	b29a      	uxth	r2, r3
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8016302:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016306:	4618      	mov	r0, r3
 8016308:	371c      	adds	r7, #28
 801630a:	46bd      	mov	sp, r7
 801630c:	bd90      	pop	{r4, r7, pc}
 801630e:	bf00      	nop
 8016310:	0801db1c 	.word	0x0801db1c
 8016314:	0801e2d8 	.word	0x0801e2d8
 8016318:	0801db70 	.word	0x0801db70

0801631c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801631c:	b590      	push	{r4, r7, lr}
 801631e:	b087      	sub	sp, #28
 8016320:	af00      	add	r7, sp, #0
 8016322:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016324:	2300      	movs	r3, #0
 8016326:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	2b00      	cmp	r3, #0
 801632c:	d106      	bne.n	801633c <tcp_keepalive+0x20>
 801632e:	4b18      	ldr	r3, [pc, #96]	; (8016390 <tcp_keepalive+0x74>)
 8016330:	f640 0224 	movw	r2, #2084	; 0x824
 8016334:	4917      	ldr	r1, [pc, #92]	; (8016394 <tcp_keepalive+0x78>)
 8016336:	4818      	ldr	r0, [pc, #96]	; (8016398 <tcp_keepalive+0x7c>)
 8016338:	f003 fc2a 	bl	8019b90 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801633c:	7dfb      	ldrb	r3, [r7, #23]
 801633e:	b29c      	uxth	r4, r3
 8016340:	687b      	ldr	r3, [r7, #4]
 8016342:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016344:	3b01      	subs	r3, #1
 8016346:	4618      	mov	r0, r3
 8016348:	f7f9 f919 	bl	800f57e <lwip_htonl>
 801634c:	4603      	mov	r3, r0
 801634e:	2200      	movs	r2, #0
 8016350:	4621      	mov	r1, r4
 8016352:	6878      	ldr	r0, [r7, #4]
 8016354:	f7ff fe68 	bl	8016028 <tcp_output_alloc_header>
 8016358:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801635a:	693b      	ldr	r3, [r7, #16]
 801635c:	2b00      	cmp	r3, #0
 801635e:	d102      	bne.n	8016366 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8016360:	f04f 33ff 	mov.w	r3, #4294967295
 8016364:	e010      	b.n	8016388 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8016366:	7dfb      	ldrb	r3, [r7, #23]
 8016368:	2200      	movs	r2, #0
 801636a:	6939      	ldr	r1, [r7, #16]
 801636c:	6878      	ldr	r0, [r7, #4]
 801636e:	f7ff fe99 	bl	80160a4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8016372:	687a      	ldr	r2, [r7, #4]
 8016374:	687b      	ldr	r3, [r7, #4]
 8016376:	3304      	adds	r3, #4
 8016378:	6939      	ldr	r1, [r7, #16]
 801637a:	6878      	ldr	r0, [r7, #4]
 801637c:	f7ff fed0 	bl	8016120 <tcp_output_control_segment>
 8016380:	4603      	mov	r3, r0
 8016382:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8016384:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016388:	4618      	mov	r0, r3
 801638a:	371c      	adds	r7, #28
 801638c:	46bd      	mov	sp, r7
 801638e:	bd90      	pop	{r4, r7, pc}
 8016390:	0801db1c 	.word	0x0801db1c
 8016394:	0801e2f8 	.word	0x0801e2f8
 8016398:	0801db70 	.word	0x0801db70

0801639c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801639c:	b590      	push	{r4, r7, lr}
 801639e:	b08b      	sub	sp, #44	; 0x2c
 80163a0:	af00      	add	r7, sp, #0
 80163a2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80163a4:	2300      	movs	r3, #0
 80163a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	2b00      	cmp	r3, #0
 80163ae:	d106      	bne.n	80163be <tcp_zero_window_probe+0x22>
 80163b0:	4b4c      	ldr	r3, [pc, #304]	; (80164e4 <tcp_zero_window_probe+0x148>)
 80163b2:	f640 024f 	movw	r2, #2127	; 0x84f
 80163b6:	494c      	ldr	r1, [pc, #304]	; (80164e8 <tcp_zero_window_probe+0x14c>)
 80163b8:	484c      	ldr	r0, [pc, #304]	; (80164ec <tcp_zero_window_probe+0x150>)
 80163ba:	f003 fbe9 	bl	8019b90 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80163be:	687b      	ldr	r3, [r7, #4]
 80163c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80163c2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80163c4:	6a3b      	ldr	r3, [r7, #32]
 80163c6:	2b00      	cmp	r3, #0
 80163c8:	d101      	bne.n	80163ce <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80163ca:	2300      	movs	r3, #0
 80163cc:	e086      	b.n	80164dc <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80163d4:	2bff      	cmp	r3, #255	; 0xff
 80163d6:	d007      	beq.n	80163e8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80163de:	3301      	adds	r3, #1
 80163e0:	b2da      	uxtb	r2, r3
 80163e2:	687b      	ldr	r3, [r7, #4]
 80163e4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80163e8:	6a3b      	ldr	r3, [r7, #32]
 80163ea:	68db      	ldr	r3, [r3, #12]
 80163ec:	899b      	ldrh	r3, [r3, #12]
 80163ee:	b29b      	uxth	r3, r3
 80163f0:	4618      	mov	r0, r3
 80163f2:	f7f9 f8af 	bl	800f554 <lwip_htons>
 80163f6:	4603      	mov	r3, r0
 80163f8:	b2db      	uxtb	r3, r3
 80163fa:	f003 0301 	and.w	r3, r3, #1
 80163fe:	2b00      	cmp	r3, #0
 8016400:	d005      	beq.n	801640e <tcp_zero_window_probe+0x72>
 8016402:	6a3b      	ldr	r3, [r7, #32]
 8016404:	891b      	ldrh	r3, [r3, #8]
 8016406:	2b00      	cmp	r3, #0
 8016408:	d101      	bne.n	801640e <tcp_zero_window_probe+0x72>
 801640a:	2301      	movs	r3, #1
 801640c:	e000      	b.n	8016410 <tcp_zero_window_probe+0x74>
 801640e:	2300      	movs	r3, #0
 8016410:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8016412:	7ffb      	ldrb	r3, [r7, #31]
 8016414:	2b00      	cmp	r3, #0
 8016416:	bf0c      	ite	eq
 8016418:	2301      	moveq	r3, #1
 801641a:	2300      	movne	r3, #0
 801641c:	b2db      	uxtb	r3, r3
 801641e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8016420:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016424:	b299      	uxth	r1, r3
 8016426:	6a3b      	ldr	r3, [r7, #32]
 8016428:	68db      	ldr	r3, [r3, #12]
 801642a:	685b      	ldr	r3, [r3, #4]
 801642c:	8bba      	ldrh	r2, [r7, #28]
 801642e:	6878      	ldr	r0, [r7, #4]
 8016430:	f7ff fdfa 	bl	8016028 <tcp_output_alloc_header>
 8016434:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8016436:	69bb      	ldr	r3, [r7, #24]
 8016438:	2b00      	cmp	r3, #0
 801643a:	d102      	bne.n	8016442 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801643c:	f04f 33ff 	mov.w	r3, #4294967295
 8016440:	e04c      	b.n	80164dc <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8016442:	69bb      	ldr	r3, [r7, #24]
 8016444:	685b      	ldr	r3, [r3, #4]
 8016446:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8016448:	7ffb      	ldrb	r3, [r7, #31]
 801644a:	2b00      	cmp	r3, #0
 801644c:	d011      	beq.n	8016472 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801644e:	697b      	ldr	r3, [r7, #20]
 8016450:	899b      	ldrh	r3, [r3, #12]
 8016452:	b29b      	uxth	r3, r3
 8016454:	b21b      	sxth	r3, r3
 8016456:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801645a:	b21c      	sxth	r4, r3
 801645c:	2011      	movs	r0, #17
 801645e:	f7f9 f879 	bl	800f554 <lwip_htons>
 8016462:	4603      	mov	r3, r0
 8016464:	b21b      	sxth	r3, r3
 8016466:	4323      	orrs	r3, r4
 8016468:	b21b      	sxth	r3, r3
 801646a:	b29a      	uxth	r2, r3
 801646c:	697b      	ldr	r3, [r7, #20]
 801646e:	819a      	strh	r2, [r3, #12]
 8016470:	e010      	b.n	8016494 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8016472:	69bb      	ldr	r3, [r7, #24]
 8016474:	685b      	ldr	r3, [r3, #4]
 8016476:	3314      	adds	r3, #20
 8016478:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801647a:	6a3b      	ldr	r3, [r7, #32]
 801647c:	6858      	ldr	r0, [r3, #4]
 801647e:	6a3b      	ldr	r3, [r7, #32]
 8016480:	685b      	ldr	r3, [r3, #4]
 8016482:	891a      	ldrh	r2, [r3, #8]
 8016484:	6a3b      	ldr	r3, [r7, #32]
 8016486:	891b      	ldrh	r3, [r3, #8]
 8016488:	1ad3      	subs	r3, r2, r3
 801648a:	b29b      	uxth	r3, r3
 801648c:	2201      	movs	r2, #1
 801648e:	6939      	ldr	r1, [r7, #16]
 8016490:	f7fa fe4e 	bl	8011130 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8016494:	6a3b      	ldr	r3, [r7, #32]
 8016496:	68db      	ldr	r3, [r3, #12]
 8016498:	685b      	ldr	r3, [r3, #4]
 801649a:	4618      	mov	r0, r3
 801649c:	f7f9 f86f 	bl	800f57e <lwip_htonl>
 80164a0:	4603      	mov	r3, r0
 80164a2:	3301      	adds	r3, #1
 80164a4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80164a6:	687b      	ldr	r3, [r7, #4]
 80164a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80164aa:	68fb      	ldr	r3, [r7, #12]
 80164ac:	1ad3      	subs	r3, r2, r3
 80164ae:	2b00      	cmp	r3, #0
 80164b0:	da02      	bge.n	80164b8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80164b2:	687b      	ldr	r3, [r7, #4]
 80164b4:	68fa      	ldr	r2, [r7, #12]
 80164b6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80164b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80164bc:	2200      	movs	r2, #0
 80164be:	69b9      	ldr	r1, [r7, #24]
 80164c0:	6878      	ldr	r0, [r7, #4]
 80164c2:	f7ff fdef 	bl	80160a4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80164c6:	687a      	ldr	r2, [r7, #4]
 80164c8:	687b      	ldr	r3, [r7, #4]
 80164ca:	3304      	adds	r3, #4
 80164cc:	69b9      	ldr	r1, [r7, #24]
 80164ce:	6878      	ldr	r0, [r7, #4]
 80164d0:	f7ff fe26 	bl	8016120 <tcp_output_control_segment>
 80164d4:	4603      	mov	r3, r0
 80164d6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80164d8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80164dc:	4618      	mov	r0, r3
 80164de:	372c      	adds	r7, #44	; 0x2c
 80164e0:	46bd      	mov	sp, r7
 80164e2:	bd90      	pop	{r4, r7, pc}
 80164e4:	0801db1c 	.word	0x0801db1c
 80164e8:	0801e314 	.word	0x0801e314
 80164ec:	0801db70 	.word	0x0801db70

080164f0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80164f0:	b580      	push	{r7, lr}
 80164f2:	b082      	sub	sp, #8
 80164f4:	af00      	add	r7, sp, #0
 80164f6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80164f8:	f7fa ff08 	bl	801130c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80164fc:	4b0a      	ldr	r3, [pc, #40]	; (8016528 <tcpip_tcp_timer+0x38>)
 80164fe:	681b      	ldr	r3, [r3, #0]
 8016500:	2b00      	cmp	r3, #0
 8016502:	d103      	bne.n	801650c <tcpip_tcp_timer+0x1c>
 8016504:	4b09      	ldr	r3, [pc, #36]	; (801652c <tcpip_tcp_timer+0x3c>)
 8016506:	681b      	ldr	r3, [r3, #0]
 8016508:	2b00      	cmp	r3, #0
 801650a:	d005      	beq.n	8016518 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801650c:	2200      	movs	r2, #0
 801650e:	4908      	ldr	r1, [pc, #32]	; (8016530 <tcpip_tcp_timer+0x40>)
 8016510:	20fa      	movs	r0, #250	; 0xfa
 8016512:	f000 f8f3 	bl	80166fc <sys_timeout>
 8016516:	e003      	b.n	8016520 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8016518:	4b06      	ldr	r3, [pc, #24]	; (8016534 <tcpip_tcp_timer+0x44>)
 801651a:	2200      	movs	r2, #0
 801651c:	601a      	str	r2, [r3, #0]
  }
}
 801651e:	bf00      	nop
 8016520:	bf00      	nop
 8016522:	3708      	adds	r7, #8
 8016524:	46bd      	mov	sp, r7
 8016526:	bd80      	pop	{r7, pc}
 8016528:	20007050 	.word	0x20007050
 801652c:	20007054 	.word	0x20007054
 8016530:	080164f1 	.word	0x080164f1
 8016534:	2000709c 	.word	0x2000709c

08016538 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8016538:	b580      	push	{r7, lr}
 801653a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801653c:	4b0a      	ldr	r3, [pc, #40]	; (8016568 <tcp_timer_needed+0x30>)
 801653e:	681b      	ldr	r3, [r3, #0]
 8016540:	2b00      	cmp	r3, #0
 8016542:	d10f      	bne.n	8016564 <tcp_timer_needed+0x2c>
 8016544:	4b09      	ldr	r3, [pc, #36]	; (801656c <tcp_timer_needed+0x34>)
 8016546:	681b      	ldr	r3, [r3, #0]
 8016548:	2b00      	cmp	r3, #0
 801654a:	d103      	bne.n	8016554 <tcp_timer_needed+0x1c>
 801654c:	4b08      	ldr	r3, [pc, #32]	; (8016570 <tcp_timer_needed+0x38>)
 801654e:	681b      	ldr	r3, [r3, #0]
 8016550:	2b00      	cmp	r3, #0
 8016552:	d007      	beq.n	8016564 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8016554:	4b04      	ldr	r3, [pc, #16]	; (8016568 <tcp_timer_needed+0x30>)
 8016556:	2201      	movs	r2, #1
 8016558:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801655a:	2200      	movs	r2, #0
 801655c:	4905      	ldr	r1, [pc, #20]	; (8016574 <tcp_timer_needed+0x3c>)
 801655e:	20fa      	movs	r0, #250	; 0xfa
 8016560:	f000 f8cc 	bl	80166fc <sys_timeout>
  }
}
 8016564:	bf00      	nop
 8016566:	bd80      	pop	{r7, pc}
 8016568:	2000709c 	.word	0x2000709c
 801656c:	20007050 	.word	0x20007050
 8016570:	20007054 	.word	0x20007054
 8016574:	080164f1 	.word	0x080164f1

08016578 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8016578:	b580      	push	{r7, lr}
 801657a:	b086      	sub	sp, #24
 801657c:	af00      	add	r7, sp, #0
 801657e:	60f8      	str	r0, [r7, #12]
 8016580:	60b9      	str	r1, [r7, #8]
 8016582:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8016584:	2006      	movs	r0, #6
 8016586:	f7f9 fd03 	bl	800ff90 <memp_malloc>
 801658a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801658c:	693b      	ldr	r3, [r7, #16]
 801658e:	2b00      	cmp	r3, #0
 8016590:	d109      	bne.n	80165a6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8016592:	693b      	ldr	r3, [r7, #16]
 8016594:	2b00      	cmp	r3, #0
 8016596:	d151      	bne.n	801663c <sys_timeout_abs+0xc4>
 8016598:	4b2a      	ldr	r3, [pc, #168]	; (8016644 <sys_timeout_abs+0xcc>)
 801659a:	22be      	movs	r2, #190	; 0xbe
 801659c:	492a      	ldr	r1, [pc, #168]	; (8016648 <sys_timeout_abs+0xd0>)
 801659e:	482b      	ldr	r0, [pc, #172]	; (801664c <sys_timeout_abs+0xd4>)
 80165a0:	f003 faf6 	bl	8019b90 <iprintf>
    return;
 80165a4:	e04a      	b.n	801663c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80165a6:	693b      	ldr	r3, [r7, #16]
 80165a8:	2200      	movs	r2, #0
 80165aa:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80165ac:	693b      	ldr	r3, [r7, #16]
 80165ae:	68ba      	ldr	r2, [r7, #8]
 80165b0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80165b2:	693b      	ldr	r3, [r7, #16]
 80165b4:	687a      	ldr	r2, [r7, #4]
 80165b6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80165b8:	693b      	ldr	r3, [r7, #16]
 80165ba:	68fa      	ldr	r2, [r7, #12]
 80165bc:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80165be:	4b24      	ldr	r3, [pc, #144]	; (8016650 <sys_timeout_abs+0xd8>)
 80165c0:	681b      	ldr	r3, [r3, #0]
 80165c2:	2b00      	cmp	r3, #0
 80165c4:	d103      	bne.n	80165ce <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80165c6:	4a22      	ldr	r2, [pc, #136]	; (8016650 <sys_timeout_abs+0xd8>)
 80165c8:	693b      	ldr	r3, [r7, #16]
 80165ca:	6013      	str	r3, [r2, #0]
    return;
 80165cc:	e037      	b.n	801663e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80165ce:	693b      	ldr	r3, [r7, #16]
 80165d0:	685a      	ldr	r2, [r3, #4]
 80165d2:	4b1f      	ldr	r3, [pc, #124]	; (8016650 <sys_timeout_abs+0xd8>)
 80165d4:	681b      	ldr	r3, [r3, #0]
 80165d6:	685b      	ldr	r3, [r3, #4]
 80165d8:	1ad3      	subs	r3, r2, r3
 80165da:	0fdb      	lsrs	r3, r3, #31
 80165dc:	f003 0301 	and.w	r3, r3, #1
 80165e0:	b2db      	uxtb	r3, r3
 80165e2:	2b00      	cmp	r3, #0
 80165e4:	d007      	beq.n	80165f6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80165e6:	4b1a      	ldr	r3, [pc, #104]	; (8016650 <sys_timeout_abs+0xd8>)
 80165e8:	681a      	ldr	r2, [r3, #0]
 80165ea:	693b      	ldr	r3, [r7, #16]
 80165ec:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80165ee:	4a18      	ldr	r2, [pc, #96]	; (8016650 <sys_timeout_abs+0xd8>)
 80165f0:	693b      	ldr	r3, [r7, #16]
 80165f2:	6013      	str	r3, [r2, #0]
 80165f4:	e023      	b.n	801663e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80165f6:	4b16      	ldr	r3, [pc, #88]	; (8016650 <sys_timeout_abs+0xd8>)
 80165f8:	681b      	ldr	r3, [r3, #0]
 80165fa:	617b      	str	r3, [r7, #20]
 80165fc:	e01a      	b.n	8016634 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80165fe:	697b      	ldr	r3, [r7, #20]
 8016600:	681b      	ldr	r3, [r3, #0]
 8016602:	2b00      	cmp	r3, #0
 8016604:	d00b      	beq.n	801661e <sys_timeout_abs+0xa6>
 8016606:	693b      	ldr	r3, [r7, #16]
 8016608:	685a      	ldr	r2, [r3, #4]
 801660a:	697b      	ldr	r3, [r7, #20]
 801660c:	681b      	ldr	r3, [r3, #0]
 801660e:	685b      	ldr	r3, [r3, #4]
 8016610:	1ad3      	subs	r3, r2, r3
 8016612:	0fdb      	lsrs	r3, r3, #31
 8016614:	f003 0301 	and.w	r3, r3, #1
 8016618:	b2db      	uxtb	r3, r3
 801661a:	2b00      	cmp	r3, #0
 801661c:	d007      	beq.n	801662e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801661e:	697b      	ldr	r3, [r7, #20]
 8016620:	681a      	ldr	r2, [r3, #0]
 8016622:	693b      	ldr	r3, [r7, #16]
 8016624:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8016626:	697b      	ldr	r3, [r7, #20]
 8016628:	693a      	ldr	r2, [r7, #16]
 801662a:	601a      	str	r2, [r3, #0]
        break;
 801662c:	e007      	b.n	801663e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801662e:	697b      	ldr	r3, [r7, #20]
 8016630:	681b      	ldr	r3, [r3, #0]
 8016632:	617b      	str	r3, [r7, #20]
 8016634:	697b      	ldr	r3, [r7, #20]
 8016636:	2b00      	cmp	r3, #0
 8016638:	d1e1      	bne.n	80165fe <sys_timeout_abs+0x86>
 801663a:	e000      	b.n	801663e <sys_timeout_abs+0xc6>
    return;
 801663c:	bf00      	nop
      }
    }
  }
}
 801663e:	3718      	adds	r7, #24
 8016640:	46bd      	mov	sp, r7
 8016642:	bd80      	pop	{r7, pc}
 8016644:	0801e338 	.word	0x0801e338
 8016648:	0801e36c 	.word	0x0801e36c
 801664c:	0801e3ac 	.word	0x0801e3ac
 8016650:	20007094 	.word	0x20007094

08016654 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8016654:	b580      	push	{r7, lr}
 8016656:	b086      	sub	sp, #24
 8016658:	af00      	add	r7, sp, #0
 801665a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8016660:	697b      	ldr	r3, [r7, #20]
 8016662:	685b      	ldr	r3, [r3, #4]
 8016664:	4798      	blx	r3

  now = sys_now();
 8016666:	f7f8 fd2d 	bl	800f0c4 <sys_now>
 801666a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801666c:	697b      	ldr	r3, [r7, #20]
 801666e:	681a      	ldr	r2, [r3, #0]
 8016670:	4b0f      	ldr	r3, [pc, #60]	; (80166b0 <lwip_cyclic_timer+0x5c>)
 8016672:	681b      	ldr	r3, [r3, #0]
 8016674:	4413      	add	r3, r2
 8016676:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8016678:	68fa      	ldr	r2, [r7, #12]
 801667a:	693b      	ldr	r3, [r7, #16]
 801667c:	1ad3      	subs	r3, r2, r3
 801667e:	0fdb      	lsrs	r3, r3, #31
 8016680:	f003 0301 	and.w	r3, r3, #1
 8016684:	b2db      	uxtb	r3, r3
 8016686:	2b00      	cmp	r3, #0
 8016688:	d009      	beq.n	801669e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801668a:	697b      	ldr	r3, [r7, #20]
 801668c:	681a      	ldr	r2, [r3, #0]
 801668e:	693b      	ldr	r3, [r7, #16]
 8016690:	4413      	add	r3, r2
 8016692:	687a      	ldr	r2, [r7, #4]
 8016694:	4907      	ldr	r1, [pc, #28]	; (80166b4 <lwip_cyclic_timer+0x60>)
 8016696:	4618      	mov	r0, r3
 8016698:	f7ff ff6e 	bl	8016578 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801669c:	e004      	b.n	80166a8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801669e:	687a      	ldr	r2, [r7, #4]
 80166a0:	4904      	ldr	r1, [pc, #16]	; (80166b4 <lwip_cyclic_timer+0x60>)
 80166a2:	68f8      	ldr	r0, [r7, #12]
 80166a4:	f7ff ff68 	bl	8016578 <sys_timeout_abs>
}
 80166a8:	bf00      	nop
 80166aa:	3718      	adds	r7, #24
 80166ac:	46bd      	mov	sp, r7
 80166ae:	bd80      	pop	{r7, pc}
 80166b0:	20007098 	.word	0x20007098
 80166b4:	08016655 	.word	0x08016655

080166b8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80166b8:	b580      	push	{r7, lr}
 80166ba:	b082      	sub	sp, #8
 80166bc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80166be:	2301      	movs	r3, #1
 80166c0:	607b      	str	r3, [r7, #4]
 80166c2:	e00e      	b.n	80166e2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80166c4:	4a0b      	ldr	r2, [pc, #44]	; (80166f4 <sys_timeouts_init+0x3c>)
 80166c6:	687b      	ldr	r3, [r7, #4]
 80166c8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	00db      	lsls	r3, r3, #3
 80166d0:	4a08      	ldr	r2, [pc, #32]	; (80166f4 <sys_timeouts_init+0x3c>)
 80166d2:	4413      	add	r3, r2
 80166d4:	461a      	mov	r2, r3
 80166d6:	4908      	ldr	r1, [pc, #32]	; (80166f8 <sys_timeouts_init+0x40>)
 80166d8:	f000 f810 	bl	80166fc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80166dc:	687b      	ldr	r3, [r7, #4]
 80166de:	3301      	adds	r3, #1
 80166e0:	607b      	str	r3, [r7, #4]
 80166e2:	687b      	ldr	r3, [r7, #4]
 80166e4:	2b02      	cmp	r3, #2
 80166e6:	d9ed      	bls.n	80166c4 <sys_timeouts_init+0xc>
  }
}
 80166e8:	bf00      	nop
 80166ea:	bf00      	nop
 80166ec:	3708      	adds	r7, #8
 80166ee:	46bd      	mov	sp, r7
 80166f0:	bd80      	pop	{r7, pc}
 80166f2:	bf00      	nop
 80166f4:	0801ef64 	.word	0x0801ef64
 80166f8:	08016655 	.word	0x08016655

080166fc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80166fc:	b580      	push	{r7, lr}
 80166fe:	b086      	sub	sp, #24
 8016700:	af00      	add	r7, sp, #0
 8016702:	60f8      	str	r0, [r7, #12]
 8016704:	60b9      	str	r1, [r7, #8]
 8016706:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8016708:	68fb      	ldr	r3, [r7, #12]
 801670a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801670e:	d306      	bcc.n	801671e <sys_timeout+0x22>
 8016710:	4b0a      	ldr	r3, [pc, #40]	; (801673c <sys_timeout+0x40>)
 8016712:	f240 1229 	movw	r2, #297	; 0x129
 8016716:	490a      	ldr	r1, [pc, #40]	; (8016740 <sys_timeout+0x44>)
 8016718:	480a      	ldr	r0, [pc, #40]	; (8016744 <sys_timeout+0x48>)
 801671a:	f003 fa39 	bl	8019b90 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801671e:	f7f8 fcd1 	bl	800f0c4 <sys_now>
 8016722:	4602      	mov	r2, r0
 8016724:	68fb      	ldr	r3, [r7, #12]
 8016726:	4413      	add	r3, r2
 8016728:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801672a:	687a      	ldr	r2, [r7, #4]
 801672c:	68b9      	ldr	r1, [r7, #8]
 801672e:	6978      	ldr	r0, [r7, #20]
 8016730:	f7ff ff22 	bl	8016578 <sys_timeout_abs>
#endif
}
 8016734:	bf00      	nop
 8016736:	3718      	adds	r7, #24
 8016738:	46bd      	mov	sp, r7
 801673a:	bd80      	pop	{r7, pc}
 801673c:	0801e338 	.word	0x0801e338
 8016740:	0801e3d4 	.word	0x0801e3d4
 8016744:	0801e3ac 	.word	0x0801e3ac

08016748 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8016748:	b580      	push	{r7, lr}
 801674a:	b084      	sub	sp, #16
 801674c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801674e:	f7f8 fcb9 	bl	800f0c4 <sys_now>
 8016752:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8016754:	4b1a      	ldr	r3, [pc, #104]	; (80167c0 <sys_check_timeouts+0x78>)
 8016756:	781b      	ldrb	r3, [r3, #0]
 8016758:	b2db      	uxtb	r3, r3
 801675a:	2b00      	cmp	r3, #0
 801675c:	d001      	beq.n	8016762 <sys_check_timeouts+0x1a>
 801675e:	f7f9 ffc3 	bl	80106e8 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8016762:	4b18      	ldr	r3, [pc, #96]	; (80167c4 <sys_check_timeouts+0x7c>)
 8016764:	681b      	ldr	r3, [r3, #0]
 8016766:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8016768:	68bb      	ldr	r3, [r7, #8]
 801676a:	2b00      	cmp	r3, #0
 801676c:	d022      	beq.n	80167b4 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801676e:	68bb      	ldr	r3, [r7, #8]
 8016770:	685b      	ldr	r3, [r3, #4]
 8016772:	68fa      	ldr	r2, [r7, #12]
 8016774:	1ad3      	subs	r3, r2, r3
 8016776:	0fdb      	lsrs	r3, r3, #31
 8016778:	f003 0301 	and.w	r3, r3, #1
 801677c:	b2db      	uxtb	r3, r3
 801677e:	2b00      	cmp	r3, #0
 8016780:	d11a      	bne.n	80167b8 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8016782:	68bb      	ldr	r3, [r7, #8]
 8016784:	681b      	ldr	r3, [r3, #0]
 8016786:	4a0f      	ldr	r2, [pc, #60]	; (80167c4 <sys_check_timeouts+0x7c>)
 8016788:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801678a:	68bb      	ldr	r3, [r7, #8]
 801678c:	689b      	ldr	r3, [r3, #8]
 801678e:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8016790:	68bb      	ldr	r3, [r7, #8]
 8016792:	68db      	ldr	r3, [r3, #12]
 8016794:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8016796:	68bb      	ldr	r3, [r7, #8]
 8016798:	685b      	ldr	r3, [r3, #4]
 801679a:	4a0b      	ldr	r2, [pc, #44]	; (80167c8 <sys_check_timeouts+0x80>)
 801679c:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801679e:	68b9      	ldr	r1, [r7, #8]
 80167a0:	2006      	movs	r0, #6
 80167a2:	f7f9 fc65 	bl	8010070 <memp_free>
    if (handler != NULL) {
 80167a6:	687b      	ldr	r3, [r7, #4]
 80167a8:	2b00      	cmp	r3, #0
 80167aa:	d0d3      	beq.n	8016754 <sys_check_timeouts+0xc>
      handler(arg);
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	6838      	ldr	r0, [r7, #0]
 80167b0:	4798      	blx	r3
  do {
 80167b2:	e7cf      	b.n	8016754 <sys_check_timeouts+0xc>
      return;
 80167b4:	bf00      	nop
 80167b6:	e000      	b.n	80167ba <sys_check_timeouts+0x72>
      return;
 80167b8:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80167ba:	3710      	adds	r7, #16
 80167bc:	46bd      	mov	sp, r7
 80167be:	bd80      	pop	{r7, pc}
 80167c0:	20007041 	.word	0x20007041
 80167c4:	20007094 	.word	0x20007094
 80167c8:	20007098 	.word	0x20007098

080167cc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80167cc:	b580      	push	{r7, lr}
 80167ce:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80167d0:	f002 fca2 	bl	8019118 <rand>
 80167d4:	4603      	mov	r3, r0
 80167d6:	b29b      	uxth	r3, r3
 80167d8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80167dc:	b29b      	uxth	r3, r3
 80167de:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80167e2:	b29a      	uxth	r2, r3
 80167e4:	4b01      	ldr	r3, [pc, #4]	; (80167ec <udp_init+0x20>)
 80167e6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80167e8:	bf00      	nop
 80167ea:	bd80      	pop	{r7, pc}
 80167ec:	20000060 	.word	0x20000060

080167f0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80167f0:	b580      	push	{r7, lr}
 80167f2:	b084      	sub	sp, #16
 80167f4:	af00      	add	r7, sp, #0
 80167f6:	60f8      	str	r0, [r7, #12]
 80167f8:	60b9      	str	r1, [r7, #8]
 80167fa:	4613      	mov	r3, r2
 80167fc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80167fe:	68fb      	ldr	r3, [r7, #12]
 8016800:	2b00      	cmp	r3, #0
 8016802:	d105      	bne.n	8016810 <udp_input_local_match+0x20>
 8016804:	4b27      	ldr	r3, [pc, #156]	; (80168a4 <udp_input_local_match+0xb4>)
 8016806:	2287      	movs	r2, #135	; 0x87
 8016808:	4927      	ldr	r1, [pc, #156]	; (80168a8 <udp_input_local_match+0xb8>)
 801680a:	4828      	ldr	r0, [pc, #160]	; (80168ac <udp_input_local_match+0xbc>)
 801680c:	f003 f9c0 	bl	8019b90 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8016810:	68bb      	ldr	r3, [r7, #8]
 8016812:	2b00      	cmp	r3, #0
 8016814:	d105      	bne.n	8016822 <udp_input_local_match+0x32>
 8016816:	4b23      	ldr	r3, [pc, #140]	; (80168a4 <udp_input_local_match+0xb4>)
 8016818:	2288      	movs	r2, #136	; 0x88
 801681a:	4925      	ldr	r1, [pc, #148]	; (80168b0 <udp_input_local_match+0xc0>)
 801681c:	4823      	ldr	r0, [pc, #140]	; (80168ac <udp_input_local_match+0xbc>)
 801681e:	f003 f9b7 	bl	8019b90 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016822:	68fb      	ldr	r3, [r7, #12]
 8016824:	7a1b      	ldrb	r3, [r3, #8]
 8016826:	2b00      	cmp	r3, #0
 8016828:	d00b      	beq.n	8016842 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801682a:	68fb      	ldr	r3, [r7, #12]
 801682c:	7a1a      	ldrb	r2, [r3, #8]
 801682e:	4b21      	ldr	r3, [pc, #132]	; (80168b4 <udp_input_local_match+0xc4>)
 8016830:	685b      	ldr	r3, [r3, #4]
 8016832:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016836:	3301      	adds	r3, #1
 8016838:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801683a:	429a      	cmp	r2, r3
 801683c:	d001      	beq.n	8016842 <udp_input_local_match+0x52>
    return 0;
 801683e:	2300      	movs	r3, #0
 8016840:	e02b      	b.n	801689a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8016842:	79fb      	ldrb	r3, [r7, #7]
 8016844:	2b00      	cmp	r3, #0
 8016846:	d018      	beq.n	801687a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016848:	68fb      	ldr	r3, [r7, #12]
 801684a:	2b00      	cmp	r3, #0
 801684c:	d013      	beq.n	8016876 <udp_input_local_match+0x86>
 801684e:	68fb      	ldr	r3, [r7, #12]
 8016850:	681b      	ldr	r3, [r3, #0]
 8016852:	2b00      	cmp	r3, #0
 8016854:	d00f      	beq.n	8016876 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016856:	4b17      	ldr	r3, [pc, #92]	; (80168b4 <udp_input_local_match+0xc4>)
 8016858:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801685a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801685e:	d00a      	beq.n	8016876 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8016860:	68fb      	ldr	r3, [r7, #12]
 8016862:	681a      	ldr	r2, [r3, #0]
 8016864:	4b13      	ldr	r3, [pc, #76]	; (80168b4 <udp_input_local_match+0xc4>)
 8016866:	695b      	ldr	r3, [r3, #20]
 8016868:	405a      	eors	r2, r3
 801686a:	68bb      	ldr	r3, [r7, #8]
 801686c:	3308      	adds	r3, #8
 801686e:	681b      	ldr	r3, [r3, #0]
 8016870:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016872:	2b00      	cmp	r3, #0
 8016874:	d110      	bne.n	8016898 <udp_input_local_match+0xa8>
          return 1;
 8016876:	2301      	movs	r3, #1
 8016878:	e00f      	b.n	801689a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801687a:	68fb      	ldr	r3, [r7, #12]
 801687c:	2b00      	cmp	r3, #0
 801687e:	d009      	beq.n	8016894 <udp_input_local_match+0xa4>
 8016880:	68fb      	ldr	r3, [r7, #12]
 8016882:	681b      	ldr	r3, [r3, #0]
 8016884:	2b00      	cmp	r3, #0
 8016886:	d005      	beq.n	8016894 <udp_input_local_match+0xa4>
 8016888:	68fb      	ldr	r3, [r7, #12]
 801688a:	681a      	ldr	r2, [r3, #0]
 801688c:	4b09      	ldr	r3, [pc, #36]	; (80168b4 <udp_input_local_match+0xc4>)
 801688e:	695b      	ldr	r3, [r3, #20]
 8016890:	429a      	cmp	r2, r3
 8016892:	d101      	bne.n	8016898 <udp_input_local_match+0xa8>
        return 1;
 8016894:	2301      	movs	r3, #1
 8016896:	e000      	b.n	801689a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8016898:	2300      	movs	r3, #0
}
 801689a:	4618      	mov	r0, r3
 801689c:	3710      	adds	r7, #16
 801689e:	46bd      	mov	sp, r7
 80168a0:	bd80      	pop	{r7, pc}
 80168a2:	bf00      	nop
 80168a4:	0801e420 	.word	0x0801e420
 80168a8:	0801e450 	.word	0x0801e450
 80168ac:	0801e474 	.word	0x0801e474
 80168b0:	0801e49c 	.word	0x0801e49c
 80168b4:	20000768 	.word	0x20000768

080168b8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80168b8:	b590      	push	{r4, r7, lr}
 80168ba:	b08d      	sub	sp, #52	; 0x34
 80168bc:	af02      	add	r7, sp, #8
 80168be:	6078      	str	r0, [r7, #4]
 80168c0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80168c2:	2300      	movs	r3, #0
 80168c4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80168c6:	687b      	ldr	r3, [r7, #4]
 80168c8:	2b00      	cmp	r3, #0
 80168ca:	d105      	bne.n	80168d8 <udp_input+0x20>
 80168cc:	4b7c      	ldr	r3, [pc, #496]	; (8016ac0 <udp_input+0x208>)
 80168ce:	22cf      	movs	r2, #207	; 0xcf
 80168d0:	497c      	ldr	r1, [pc, #496]	; (8016ac4 <udp_input+0x20c>)
 80168d2:	487d      	ldr	r0, [pc, #500]	; (8016ac8 <udp_input+0x210>)
 80168d4:	f003 f95c 	bl	8019b90 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80168d8:	683b      	ldr	r3, [r7, #0]
 80168da:	2b00      	cmp	r3, #0
 80168dc:	d105      	bne.n	80168ea <udp_input+0x32>
 80168de:	4b78      	ldr	r3, [pc, #480]	; (8016ac0 <udp_input+0x208>)
 80168e0:	22d0      	movs	r2, #208	; 0xd0
 80168e2:	497a      	ldr	r1, [pc, #488]	; (8016acc <udp_input+0x214>)
 80168e4:	4878      	ldr	r0, [pc, #480]	; (8016ac8 <udp_input+0x210>)
 80168e6:	f003 f953 	bl	8019b90 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80168ea:	687b      	ldr	r3, [r7, #4]
 80168ec:	895b      	ldrh	r3, [r3, #10]
 80168ee:	2b07      	cmp	r3, #7
 80168f0:	d803      	bhi.n	80168fa <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80168f2:	6878      	ldr	r0, [r7, #4]
 80168f4:	f7fa fa32 	bl	8010d5c <pbuf_free>
    goto end;
 80168f8:	e0de      	b.n	8016ab8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80168fa:	687b      	ldr	r3, [r7, #4]
 80168fc:	685b      	ldr	r3, [r3, #4]
 80168fe:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8016900:	4b73      	ldr	r3, [pc, #460]	; (8016ad0 <udp_input+0x218>)
 8016902:	695b      	ldr	r3, [r3, #20]
 8016904:	4a72      	ldr	r2, [pc, #456]	; (8016ad0 <udp_input+0x218>)
 8016906:	6812      	ldr	r2, [r2, #0]
 8016908:	4611      	mov	r1, r2
 801690a:	4618      	mov	r0, r3
 801690c:	f001 fcae 	bl	801826c <ip4_addr_isbroadcast_u32>
 8016910:	4603      	mov	r3, r0
 8016912:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8016914:	697b      	ldr	r3, [r7, #20]
 8016916:	881b      	ldrh	r3, [r3, #0]
 8016918:	b29b      	uxth	r3, r3
 801691a:	4618      	mov	r0, r3
 801691c:	f7f8 fe1a 	bl	800f554 <lwip_htons>
 8016920:	4603      	mov	r3, r0
 8016922:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8016924:	697b      	ldr	r3, [r7, #20]
 8016926:	885b      	ldrh	r3, [r3, #2]
 8016928:	b29b      	uxth	r3, r3
 801692a:	4618      	mov	r0, r3
 801692c:	f7f8 fe12 	bl	800f554 <lwip_htons>
 8016930:	4603      	mov	r3, r0
 8016932:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8016934:	2300      	movs	r3, #0
 8016936:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8016938:	2300      	movs	r3, #0
 801693a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801693c:	2300      	movs	r3, #0
 801693e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016940:	4b64      	ldr	r3, [pc, #400]	; (8016ad4 <udp_input+0x21c>)
 8016942:	681b      	ldr	r3, [r3, #0]
 8016944:	627b      	str	r3, [r7, #36]	; 0x24
 8016946:	e054      	b.n	80169f2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8016948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801694a:	8a5b      	ldrh	r3, [r3, #18]
 801694c:	89fa      	ldrh	r2, [r7, #14]
 801694e:	429a      	cmp	r2, r3
 8016950:	d14a      	bne.n	80169e8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8016952:	7cfb      	ldrb	r3, [r7, #19]
 8016954:	461a      	mov	r2, r3
 8016956:	6839      	ldr	r1, [r7, #0]
 8016958:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801695a:	f7ff ff49 	bl	80167f0 <udp_input_local_match>
 801695e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8016960:	2b00      	cmp	r3, #0
 8016962:	d041      	beq.n	80169e8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8016964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016966:	7c1b      	ldrb	r3, [r3, #16]
 8016968:	f003 0304 	and.w	r3, r3, #4
 801696c:	2b00      	cmp	r3, #0
 801696e:	d11d      	bne.n	80169ac <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8016970:	69fb      	ldr	r3, [r7, #28]
 8016972:	2b00      	cmp	r3, #0
 8016974:	d102      	bne.n	801697c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8016976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016978:	61fb      	str	r3, [r7, #28]
 801697a:	e017      	b.n	80169ac <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801697c:	7cfb      	ldrb	r3, [r7, #19]
 801697e:	2b00      	cmp	r3, #0
 8016980:	d014      	beq.n	80169ac <udp_input+0xf4>
 8016982:	4b53      	ldr	r3, [pc, #332]	; (8016ad0 <udp_input+0x218>)
 8016984:	695b      	ldr	r3, [r3, #20]
 8016986:	f1b3 3fff 	cmp.w	r3, #4294967295
 801698a:	d10f      	bne.n	80169ac <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801698c:	69fb      	ldr	r3, [r7, #28]
 801698e:	681a      	ldr	r2, [r3, #0]
 8016990:	683b      	ldr	r3, [r7, #0]
 8016992:	3304      	adds	r3, #4
 8016994:	681b      	ldr	r3, [r3, #0]
 8016996:	429a      	cmp	r2, r3
 8016998:	d008      	beq.n	80169ac <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801699a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801699c:	681a      	ldr	r2, [r3, #0]
 801699e:	683b      	ldr	r3, [r7, #0]
 80169a0:	3304      	adds	r3, #4
 80169a2:	681b      	ldr	r3, [r3, #0]
 80169a4:	429a      	cmp	r2, r3
 80169a6:	d101      	bne.n	80169ac <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80169a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169aa:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80169ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169ae:	8a9b      	ldrh	r3, [r3, #20]
 80169b0:	8a3a      	ldrh	r2, [r7, #16]
 80169b2:	429a      	cmp	r2, r3
 80169b4:	d118      	bne.n	80169e8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80169b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169b8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80169ba:	2b00      	cmp	r3, #0
 80169bc:	d005      	beq.n	80169ca <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80169be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169c0:	685a      	ldr	r2, [r3, #4]
 80169c2:	4b43      	ldr	r3, [pc, #268]	; (8016ad0 <udp_input+0x218>)
 80169c4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80169c6:	429a      	cmp	r2, r3
 80169c8:	d10e      	bne.n	80169e8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80169ca:	6a3b      	ldr	r3, [r7, #32]
 80169cc:	2b00      	cmp	r3, #0
 80169ce:	d014      	beq.n	80169fa <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80169d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169d2:	68da      	ldr	r2, [r3, #12]
 80169d4:	6a3b      	ldr	r3, [r7, #32]
 80169d6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80169d8:	4b3e      	ldr	r3, [pc, #248]	; (8016ad4 <udp_input+0x21c>)
 80169da:	681a      	ldr	r2, [r3, #0]
 80169dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169de:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80169e0:	4a3c      	ldr	r2, [pc, #240]	; (8016ad4 <udp_input+0x21c>)
 80169e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169e4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80169e6:	e008      	b.n	80169fa <udp_input+0x142>
      }
    }

    prev = pcb;
 80169e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169ea:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80169ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169ee:	68db      	ldr	r3, [r3, #12]
 80169f0:	627b      	str	r3, [r7, #36]	; 0x24
 80169f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169f4:	2b00      	cmp	r3, #0
 80169f6:	d1a7      	bne.n	8016948 <udp_input+0x90>
 80169f8:	e000      	b.n	80169fc <udp_input+0x144>
        break;
 80169fa:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80169fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169fe:	2b00      	cmp	r3, #0
 8016a00:	d101      	bne.n	8016a06 <udp_input+0x14e>
    pcb = uncon_pcb;
 8016a02:	69fb      	ldr	r3, [r7, #28]
 8016a04:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8016a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a08:	2b00      	cmp	r3, #0
 8016a0a:	d002      	beq.n	8016a12 <udp_input+0x15a>
    for_us = 1;
 8016a0c:	2301      	movs	r3, #1
 8016a0e:	76fb      	strb	r3, [r7, #27]
 8016a10:	e00a      	b.n	8016a28 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8016a12:	683b      	ldr	r3, [r7, #0]
 8016a14:	3304      	adds	r3, #4
 8016a16:	681a      	ldr	r2, [r3, #0]
 8016a18:	4b2d      	ldr	r3, [pc, #180]	; (8016ad0 <udp_input+0x218>)
 8016a1a:	695b      	ldr	r3, [r3, #20]
 8016a1c:	429a      	cmp	r2, r3
 8016a1e:	bf0c      	ite	eq
 8016a20:	2301      	moveq	r3, #1
 8016a22:	2300      	movne	r3, #0
 8016a24:	b2db      	uxtb	r3, r3
 8016a26:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8016a28:	7efb      	ldrb	r3, [r7, #27]
 8016a2a:	2b00      	cmp	r3, #0
 8016a2c:	d041      	beq.n	8016ab2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8016a2e:	2108      	movs	r1, #8
 8016a30:	6878      	ldr	r0, [r7, #4]
 8016a32:	f7fa f90d 	bl	8010c50 <pbuf_remove_header>
 8016a36:	4603      	mov	r3, r0
 8016a38:	2b00      	cmp	r3, #0
 8016a3a:	d00a      	beq.n	8016a52 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8016a3c:	4b20      	ldr	r3, [pc, #128]	; (8016ac0 <udp_input+0x208>)
 8016a3e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8016a42:	4925      	ldr	r1, [pc, #148]	; (8016ad8 <udp_input+0x220>)
 8016a44:	4820      	ldr	r0, [pc, #128]	; (8016ac8 <udp_input+0x210>)
 8016a46:	f003 f8a3 	bl	8019b90 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8016a4a:	6878      	ldr	r0, [r7, #4]
 8016a4c:	f7fa f986 	bl	8010d5c <pbuf_free>
      goto end;
 8016a50:	e032      	b.n	8016ab8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8016a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a54:	2b00      	cmp	r3, #0
 8016a56:	d012      	beq.n	8016a7e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8016a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a5a:	699b      	ldr	r3, [r3, #24]
 8016a5c:	2b00      	cmp	r3, #0
 8016a5e:	d00a      	beq.n	8016a76 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8016a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a62:	699c      	ldr	r4, [r3, #24]
 8016a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a66:	69d8      	ldr	r0, [r3, #28]
 8016a68:	8a3b      	ldrh	r3, [r7, #16]
 8016a6a:	9300      	str	r3, [sp, #0]
 8016a6c:	4b1b      	ldr	r3, [pc, #108]	; (8016adc <udp_input+0x224>)
 8016a6e:	687a      	ldr	r2, [r7, #4]
 8016a70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016a72:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8016a74:	e021      	b.n	8016aba <udp_input+0x202>
        pbuf_free(p);
 8016a76:	6878      	ldr	r0, [r7, #4]
 8016a78:	f7fa f970 	bl	8010d5c <pbuf_free>
        goto end;
 8016a7c:	e01c      	b.n	8016ab8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8016a7e:	7cfb      	ldrb	r3, [r7, #19]
 8016a80:	2b00      	cmp	r3, #0
 8016a82:	d112      	bne.n	8016aaa <udp_input+0x1f2>
 8016a84:	4b12      	ldr	r3, [pc, #72]	; (8016ad0 <udp_input+0x218>)
 8016a86:	695b      	ldr	r3, [r3, #20]
 8016a88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016a8c:	2be0      	cmp	r3, #224	; 0xe0
 8016a8e:	d00c      	beq.n	8016aaa <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8016a90:	4b0f      	ldr	r3, [pc, #60]	; (8016ad0 <udp_input+0x218>)
 8016a92:	899b      	ldrh	r3, [r3, #12]
 8016a94:	3308      	adds	r3, #8
 8016a96:	b29b      	uxth	r3, r3
 8016a98:	b21b      	sxth	r3, r3
 8016a9a:	4619      	mov	r1, r3
 8016a9c:	6878      	ldr	r0, [r7, #4]
 8016a9e:	f7fa f94a 	bl	8010d36 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8016aa2:	2103      	movs	r1, #3
 8016aa4:	6878      	ldr	r0, [r7, #4]
 8016aa6:	f001 f8b7 	bl	8017c18 <icmp_dest_unreach>
      pbuf_free(p);
 8016aaa:	6878      	ldr	r0, [r7, #4]
 8016aac:	f7fa f956 	bl	8010d5c <pbuf_free>
  return;
 8016ab0:	e003      	b.n	8016aba <udp_input+0x202>
    pbuf_free(p);
 8016ab2:	6878      	ldr	r0, [r7, #4]
 8016ab4:	f7fa f952 	bl	8010d5c <pbuf_free>
  return;
 8016ab8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8016aba:	372c      	adds	r7, #44	; 0x2c
 8016abc:	46bd      	mov	sp, r7
 8016abe:	bd90      	pop	{r4, r7, pc}
 8016ac0:	0801e420 	.word	0x0801e420
 8016ac4:	0801e4c4 	.word	0x0801e4c4
 8016ac8:	0801e474 	.word	0x0801e474
 8016acc:	0801e4dc 	.word	0x0801e4dc
 8016ad0:	20000768 	.word	0x20000768
 8016ad4:	200070a0 	.word	0x200070a0
 8016ad8:	0801e4f8 	.word	0x0801e4f8
 8016adc:	20000778 	.word	0x20000778

08016ae0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8016ae0:	b480      	push	{r7}
 8016ae2:	b085      	sub	sp, #20
 8016ae4:	af00      	add	r7, sp, #0
 8016ae6:	6078      	str	r0, [r7, #4]
 8016ae8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8016aea:	687b      	ldr	r3, [r7, #4]
 8016aec:	2b00      	cmp	r3, #0
 8016aee:	d01e      	beq.n	8016b2e <udp_netif_ip_addr_changed+0x4e>
 8016af0:	687b      	ldr	r3, [r7, #4]
 8016af2:	681b      	ldr	r3, [r3, #0]
 8016af4:	2b00      	cmp	r3, #0
 8016af6:	d01a      	beq.n	8016b2e <udp_netif_ip_addr_changed+0x4e>
 8016af8:	683b      	ldr	r3, [r7, #0]
 8016afa:	2b00      	cmp	r3, #0
 8016afc:	d017      	beq.n	8016b2e <udp_netif_ip_addr_changed+0x4e>
 8016afe:	683b      	ldr	r3, [r7, #0]
 8016b00:	681b      	ldr	r3, [r3, #0]
 8016b02:	2b00      	cmp	r3, #0
 8016b04:	d013      	beq.n	8016b2e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8016b06:	4b0d      	ldr	r3, [pc, #52]	; (8016b3c <udp_netif_ip_addr_changed+0x5c>)
 8016b08:	681b      	ldr	r3, [r3, #0]
 8016b0a:	60fb      	str	r3, [r7, #12]
 8016b0c:	e00c      	b.n	8016b28 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8016b0e:	68fb      	ldr	r3, [r7, #12]
 8016b10:	681a      	ldr	r2, [r3, #0]
 8016b12:	687b      	ldr	r3, [r7, #4]
 8016b14:	681b      	ldr	r3, [r3, #0]
 8016b16:	429a      	cmp	r2, r3
 8016b18:	d103      	bne.n	8016b22 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8016b1a:	683b      	ldr	r3, [r7, #0]
 8016b1c:	681a      	ldr	r2, [r3, #0]
 8016b1e:	68fb      	ldr	r3, [r7, #12]
 8016b20:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8016b22:	68fb      	ldr	r3, [r7, #12]
 8016b24:	68db      	ldr	r3, [r3, #12]
 8016b26:	60fb      	str	r3, [r7, #12]
 8016b28:	68fb      	ldr	r3, [r7, #12]
 8016b2a:	2b00      	cmp	r3, #0
 8016b2c:	d1ef      	bne.n	8016b0e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8016b2e:	bf00      	nop
 8016b30:	3714      	adds	r7, #20
 8016b32:	46bd      	mov	sp, r7
 8016b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b38:	4770      	bx	lr
 8016b3a:	bf00      	nop
 8016b3c:	200070a0 	.word	0x200070a0

08016b40 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8016b40:	b580      	push	{r7, lr}
 8016b42:	b082      	sub	sp, #8
 8016b44:	af00      	add	r7, sp, #0
 8016b46:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8016b48:	4915      	ldr	r1, [pc, #84]	; (8016ba0 <etharp_free_entry+0x60>)
 8016b4a:	687a      	ldr	r2, [r7, #4]
 8016b4c:	4613      	mov	r3, r2
 8016b4e:	005b      	lsls	r3, r3, #1
 8016b50:	4413      	add	r3, r2
 8016b52:	00db      	lsls	r3, r3, #3
 8016b54:	440b      	add	r3, r1
 8016b56:	681b      	ldr	r3, [r3, #0]
 8016b58:	2b00      	cmp	r3, #0
 8016b5a:	d013      	beq.n	8016b84 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8016b5c:	4910      	ldr	r1, [pc, #64]	; (8016ba0 <etharp_free_entry+0x60>)
 8016b5e:	687a      	ldr	r2, [r7, #4]
 8016b60:	4613      	mov	r3, r2
 8016b62:	005b      	lsls	r3, r3, #1
 8016b64:	4413      	add	r3, r2
 8016b66:	00db      	lsls	r3, r3, #3
 8016b68:	440b      	add	r3, r1
 8016b6a:	681b      	ldr	r3, [r3, #0]
 8016b6c:	4618      	mov	r0, r3
 8016b6e:	f7fa f8f5 	bl	8010d5c <pbuf_free>
    arp_table[i].q = NULL;
 8016b72:	490b      	ldr	r1, [pc, #44]	; (8016ba0 <etharp_free_entry+0x60>)
 8016b74:	687a      	ldr	r2, [r7, #4]
 8016b76:	4613      	mov	r3, r2
 8016b78:	005b      	lsls	r3, r3, #1
 8016b7a:	4413      	add	r3, r2
 8016b7c:	00db      	lsls	r3, r3, #3
 8016b7e:	440b      	add	r3, r1
 8016b80:	2200      	movs	r2, #0
 8016b82:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8016b84:	4906      	ldr	r1, [pc, #24]	; (8016ba0 <etharp_free_entry+0x60>)
 8016b86:	687a      	ldr	r2, [r7, #4]
 8016b88:	4613      	mov	r3, r2
 8016b8a:	005b      	lsls	r3, r3, #1
 8016b8c:	4413      	add	r3, r2
 8016b8e:	00db      	lsls	r3, r3, #3
 8016b90:	440b      	add	r3, r1
 8016b92:	3314      	adds	r3, #20
 8016b94:	2200      	movs	r2, #0
 8016b96:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8016b98:	bf00      	nop
 8016b9a:	3708      	adds	r7, #8
 8016b9c:	46bd      	mov	sp, r7
 8016b9e:	bd80      	pop	{r7, pc}
 8016ba0:	200070a4 	.word	0x200070a4

08016ba4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8016ba4:	b580      	push	{r7, lr}
 8016ba6:	b082      	sub	sp, #8
 8016ba8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016baa:	2300      	movs	r3, #0
 8016bac:	607b      	str	r3, [r7, #4]
 8016bae:	e096      	b.n	8016cde <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8016bb0:	494f      	ldr	r1, [pc, #316]	; (8016cf0 <etharp_tmr+0x14c>)
 8016bb2:	687a      	ldr	r2, [r7, #4]
 8016bb4:	4613      	mov	r3, r2
 8016bb6:	005b      	lsls	r3, r3, #1
 8016bb8:	4413      	add	r3, r2
 8016bba:	00db      	lsls	r3, r3, #3
 8016bbc:	440b      	add	r3, r1
 8016bbe:	3314      	adds	r3, #20
 8016bc0:	781b      	ldrb	r3, [r3, #0]
 8016bc2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8016bc4:	78fb      	ldrb	r3, [r7, #3]
 8016bc6:	2b00      	cmp	r3, #0
 8016bc8:	f000 8086 	beq.w	8016cd8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8016bcc:	4948      	ldr	r1, [pc, #288]	; (8016cf0 <etharp_tmr+0x14c>)
 8016bce:	687a      	ldr	r2, [r7, #4]
 8016bd0:	4613      	mov	r3, r2
 8016bd2:	005b      	lsls	r3, r3, #1
 8016bd4:	4413      	add	r3, r2
 8016bd6:	00db      	lsls	r3, r3, #3
 8016bd8:	440b      	add	r3, r1
 8016bda:	3312      	adds	r3, #18
 8016bdc:	881b      	ldrh	r3, [r3, #0]
 8016bde:	3301      	adds	r3, #1
 8016be0:	b298      	uxth	r0, r3
 8016be2:	4943      	ldr	r1, [pc, #268]	; (8016cf0 <etharp_tmr+0x14c>)
 8016be4:	687a      	ldr	r2, [r7, #4]
 8016be6:	4613      	mov	r3, r2
 8016be8:	005b      	lsls	r3, r3, #1
 8016bea:	4413      	add	r3, r2
 8016bec:	00db      	lsls	r3, r3, #3
 8016bee:	440b      	add	r3, r1
 8016bf0:	3312      	adds	r3, #18
 8016bf2:	4602      	mov	r2, r0
 8016bf4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016bf6:	493e      	ldr	r1, [pc, #248]	; (8016cf0 <etharp_tmr+0x14c>)
 8016bf8:	687a      	ldr	r2, [r7, #4]
 8016bfa:	4613      	mov	r3, r2
 8016bfc:	005b      	lsls	r3, r3, #1
 8016bfe:	4413      	add	r3, r2
 8016c00:	00db      	lsls	r3, r3, #3
 8016c02:	440b      	add	r3, r1
 8016c04:	3312      	adds	r3, #18
 8016c06:	881b      	ldrh	r3, [r3, #0]
 8016c08:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8016c0c:	d215      	bcs.n	8016c3a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016c0e:	4938      	ldr	r1, [pc, #224]	; (8016cf0 <etharp_tmr+0x14c>)
 8016c10:	687a      	ldr	r2, [r7, #4]
 8016c12:	4613      	mov	r3, r2
 8016c14:	005b      	lsls	r3, r3, #1
 8016c16:	4413      	add	r3, r2
 8016c18:	00db      	lsls	r3, r3, #3
 8016c1a:	440b      	add	r3, r1
 8016c1c:	3314      	adds	r3, #20
 8016c1e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016c20:	2b01      	cmp	r3, #1
 8016c22:	d10e      	bne.n	8016c42 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8016c24:	4932      	ldr	r1, [pc, #200]	; (8016cf0 <etharp_tmr+0x14c>)
 8016c26:	687a      	ldr	r2, [r7, #4]
 8016c28:	4613      	mov	r3, r2
 8016c2a:	005b      	lsls	r3, r3, #1
 8016c2c:	4413      	add	r3, r2
 8016c2e:	00db      	lsls	r3, r3, #3
 8016c30:	440b      	add	r3, r1
 8016c32:	3312      	adds	r3, #18
 8016c34:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016c36:	2b04      	cmp	r3, #4
 8016c38:	d903      	bls.n	8016c42 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8016c3a:	6878      	ldr	r0, [r7, #4]
 8016c3c:	f7ff ff80 	bl	8016b40 <etharp_free_entry>
 8016c40:	e04a      	b.n	8016cd8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8016c42:	492b      	ldr	r1, [pc, #172]	; (8016cf0 <etharp_tmr+0x14c>)
 8016c44:	687a      	ldr	r2, [r7, #4]
 8016c46:	4613      	mov	r3, r2
 8016c48:	005b      	lsls	r3, r3, #1
 8016c4a:	4413      	add	r3, r2
 8016c4c:	00db      	lsls	r3, r3, #3
 8016c4e:	440b      	add	r3, r1
 8016c50:	3314      	adds	r3, #20
 8016c52:	781b      	ldrb	r3, [r3, #0]
 8016c54:	2b03      	cmp	r3, #3
 8016c56:	d10a      	bne.n	8016c6e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8016c58:	4925      	ldr	r1, [pc, #148]	; (8016cf0 <etharp_tmr+0x14c>)
 8016c5a:	687a      	ldr	r2, [r7, #4]
 8016c5c:	4613      	mov	r3, r2
 8016c5e:	005b      	lsls	r3, r3, #1
 8016c60:	4413      	add	r3, r2
 8016c62:	00db      	lsls	r3, r3, #3
 8016c64:	440b      	add	r3, r1
 8016c66:	3314      	adds	r3, #20
 8016c68:	2204      	movs	r2, #4
 8016c6a:	701a      	strb	r2, [r3, #0]
 8016c6c:	e034      	b.n	8016cd8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8016c6e:	4920      	ldr	r1, [pc, #128]	; (8016cf0 <etharp_tmr+0x14c>)
 8016c70:	687a      	ldr	r2, [r7, #4]
 8016c72:	4613      	mov	r3, r2
 8016c74:	005b      	lsls	r3, r3, #1
 8016c76:	4413      	add	r3, r2
 8016c78:	00db      	lsls	r3, r3, #3
 8016c7a:	440b      	add	r3, r1
 8016c7c:	3314      	adds	r3, #20
 8016c7e:	781b      	ldrb	r3, [r3, #0]
 8016c80:	2b04      	cmp	r3, #4
 8016c82:	d10a      	bne.n	8016c9a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8016c84:	491a      	ldr	r1, [pc, #104]	; (8016cf0 <etharp_tmr+0x14c>)
 8016c86:	687a      	ldr	r2, [r7, #4]
 8016c88:	4613      	mov	r3, r2
 8016c8a:	005b      	lsls	r3, r3, #1
 8016c8c:	4413      	add	r3, r2
 8016c8e:	00db      	lsls	r3, r3, #3
 8016c90:	440b      	add	r3, r1
 8016c92:	3314      	adds	r3, #20
 8016c94:	2202      	movs	r2, #2
 8016c96:	701a      	strb	r2, [r3, #0]
 8016c98:	e01e      	b.n	8016cd8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016c9a:	4915      	ldr	r1, [pc, #84]	; (8016cf0 <etharp_tmr+0x14c>)
 8016c9c:	687a      	ldr	r2, [r7, #4]
 8016c9e:	4613      	mov	r3, r2
 8016ca0:	005b      	lsls	r3, r3, #1
 8016ca2:	4413      	add	r3, r2
 8016ca4:	00db      	lsls	r3, r3, #3
 8016ca6:	440b      	add	r3, r1
 8016ca8:	3314      	adds	r3, #20
 8016caa:	781b      	ldrb	r3, [r3, #0]
 8016cac:	2b01      	cmp	r3, #1
 8016cae:	d113      	bne.n	8016cd8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8016cb0:	490f      	ldr	r1, [pc, #60]	; (8016cf0 <etharp_tmr+0x14c>)
 8016cb2:	687a      	ldr	r2, [r7, #4]
 8016cb4:	4613      	mov	r3, r2
 8016cb6:	005b      	lsls	r3, r3, #1
 8016cb8:	4413      	add	r3, r2
 8016cba:	00db      	lsls	r3, r3, #3
 8016cbc:	440b      	add	r3, r1
 8016cbe:	3308      	adds	r3, #8
 8016cc0:	6818      	ldr	r0, [r3, #0]
 8016cc2:	687a      	ldr	r2, [r7, #4]
 8016cc4:	4613      	mov	r3, r2
 8016cc6:	005b      	lsls	r3, r3, #1
 8016cc8:	4413      	add	r3, r2
 8016cca:	00db      	lsls	r3, r3, #3
 8016ccc:	4a08      	ldr	r2, [pc, #32]	; (8016cf0 <etharp_tmr+0x14c>)
 8016cce:	4413      	add	r3, r2
 8016cd0:	3304      	adds	r3, #4
 8016cd2:	4619      	mov	r1, r3
 8016cd4:	f000 fe6e 	bl	80179b4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016cd8:	687b      	ldr	r3, [r7, #4]
 8016cda:	3301      	adds	r3, #1
 8016cdc:	607b      	str	r3, [r7, #4]
 8016cde:	687b      	ldr	r3, [r7, #4]
 8016ce0:	2b09      	cmp	r3, #9
 8016ce2:	f77f af65 	ble.w	8016bb0 <etharp_tmr+0xc>
      }
    }
  }
}
 8016ce6:	bf00      	nop
 8016ce8:	bf00      	nop
 8016cea:	3708      	adds	r7, #8
 8016cec:	46bd      	mov	sp, r7
 8016cee:	bd80      	pop	{r7, pc}
 8016cf0:	200070a4 	.word	0x200070a4

08016cf4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8016cf4:	b580      	push	{r7, lr}
 8016cf6:	b08a      	sub	sp, #40	; 0x28
 8016cf8:	af00      	add	r7, sp, #0
 8016cfa:	60f8      	str	r0, [r7, #12]
 8016cfc:	460b      	mov	r3, r1
 8016cfe:	607a      	str	r2, [r7, #4]
 8016d00:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8016d02:	230a      	movs	r3, #10
 8016d04:	84fb      	strh	r3, [r7, #38]	; 0x26
 8016d06:	230a      	movs	r3, #10
 8016d08:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8016d0a:	230a      	movs	r3, #10
 8016d0c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8016d0e:	2300      	movs	r3, #0
 8016d10:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8016d12:	230a      	movs	r3, #10
 8016d14:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8016d16:	2300      	movs	r3, #0
 8016d18:	83bb      	strh	r3, [r7, #28]
 8016d1a:	2300      	movs	r3, #0
 8016d1c:	837b      	strh	r3, [r7, #26]
 8016d1e:	2300      	movs	r3, #0
 8016d20:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016d22:	2300      	movs	r3, #0
 8016d24:	843b      	strh	r3, [r7, #32]
 8016d26:	e0ae      	b.n	8016e86 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8016d28:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016d2c:	49a6      	ldr	r1, [pc, #664]	; (8016fc8 <etharp_find_entry+0x2d4>)
 8016d2e:	4613      	mov	r3, r2
 8016d30:	005b      	lsls	r3, r3, #1
 8016d32:	4413      	add	r3, r2
 8016d34:	00db      	lsls	r3, r3, #3
 8016d36:	440b      	add	r3, r1
 8016d38:	3314      	adds	r3, #20
 8016d3a:	781b      	ldrb	r3, [r3, #0]
 8016d3c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8016d3e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016d42:	2b0a      	cmp	r3, #10
 8016d44:	d105      	bne.n	8016d52 <etharp_find_entry+0x5e>
 8016d46:	7dfb      	ldrb	r3, [r7, #23]
 8016d48:	2b00      	cmp	r3, #0
 8016d4a:	d102      	bne.n	8016d52 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8016d4c:	8c3b      	ldrh	r3, [r7, #32]
 8016d4e:	847b      	strh	r3, [r7, #34]	; 0x22
 8016d50:	e095      	b.n	8016e7e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8016d52:	7dfb      	ldrb	r3, [r7, #23]
 8016d54:	2b00      	cmp	r3, #0
 8016d56:	f000 8092 	beq.w	8016e7e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8016d5a:	7dfb      	ldrb	r3, [r7, #23]
 8016d5c:	2b01      	cmp	r3, #1
 8016d5e:	d009      	beq.n	8016d74 <etharp_find_entry+0x80>
 8016d60:	7dfb      	ldrb	r3, [r7, #23]
 8016d62:	2b01      	cmp	r3, #1
 8016d64:	d806      	bhi.n	8016d74 <etharp_find_entry+0x80>
 8016d66:	4b99      	ldr	r3, [pc, #612]	; (8016fcc <etharp_find_entry+0x2d8>)
 8016d68:	f240 1223 	movw	r2, #291	; 0x123
 8016d6c:	4998      	ldr	r1, [pc, #608]	; (8016fd0 <etharp_find_entry+0x2dc>)
 8016d6e:	4899      	ldr	r0, [pc, #612]	; (8016fd4 <etharp_find_entry+0x2e0>)
 8016d70:	f002 ff0e 	bl	8019b90 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8016d74:	68fb      	ldr	r3, [r7, #12]
 8016d76:	2b00      	cmp	r3, #0
 8016d78:	d020      	beq.n	8016dbc <etharp_find_entry+0xc8>
 8016d7a:	68fb      	ldr	r3, [r7, #12]
 8016d7c:	6819      	ldr	r1, [r3, #0]
 8016d7e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016d82:	4891      	ldr	r0, [pc, #580]	; (8016fc8 <etharp_find_entry+0x2d4>)
 8016d84:	4613      	mov	r3, r2
 8016d86:	005b      	lsls	r3, r3, #1
 8016d88:	4413      	add	r3, r2
 8016d8a:	00db      	lsls	r3, r3, #3
 8016d8c:	4403      	add	r3, r0
 8016d8e:	3304      	adds	r3, #4
 8016d90:	681b      	ldr	r3, [r3, #0]
 8016d92:	4299      	cmp	r1, r3
 8016d94:	d112      	bne.n	8016dbc <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8016d96:	687b      	ldr	r3, [r7, #4]
 8016d98:	2b00      	cmp	r3, #0
 8016d9a:	d00c      	beq.n	8016db6 <etharp_find_entry+0xc2>
 8016d9c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016da0:	4989      	ldr	r1, [pc, #548]	; (8016fc8 <etharp_find_entry+0x2d4>)
 8016da2:	4613      	mov	r3, r2
 8016da4:	005b      	lsls	r3, r3, #1
 8016da6:	4413      	add	r3, r2
 8016da8:	00db      	lsls	r3, r3, #3
 8016daa:	440b      	add	r3, r1
 8016dac:	3308      	adds	r3, #8
 8016dae:	681b      	ldr	r3, [r3, #0]
 8016db0:	687a      	ldr	r2, [r7, #4]
 8016db2:	429a      	cmp	r2, r3
 8016db4:	d102      	bne.n	8016dbc <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8016db6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016dba:	e100      	b.n	8016fbe <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8016dbc:	7dfb      	ldrb	r3, [r7, #23]
 8016dbe:	2b01      	cmp	r3, #1
 8016dc0:	d140      	bne.n	8016e44 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8016dc2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016dc6:	4980      	ldr	r1, [pc, #512]	; (8016fc8 <etharp_find_entry+0x2d4>)
 8016dc8:	4613      	mov	r3, r2
 8016dca:	005b      	lsls	r3, r3, #1
 8016dcc:	4413      	add	r3, r2
 8016dce:	00db      	lsls	r3, r3, #3
 8016dd0:	440b      	add	r3, r1
 8016dd2:	681b      	ldr	r3, [r3, #0]
 8016dd4:	2b00      	cmp	r3, #0
 8016dd6:	d01a      	beq.n	8016e0e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8016dd8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016ddc:	497a      	ldr	r1, [pc, #488]	; (8016fc8 <etharp_find_entry+0x2d4>)
 8016dde:	4613      	mov	r3, r2
 8016de0:	005b      	lsls	r3, r3, #1
 8016de2:	4413      	add	r3, r2
 8016de4:	00db      	lsls	r3, r3, #3
 8016de6:	440b      	add	r3, r1
 8016de8:	3312      	adds	r3, #18
 8016dea:	881b      	ldrh	r3, [r3, #0]
 8016dec:	8bba      	ldrh	r2, [r7, #28]
 8016dee:	429a      	cmp	r2, r3
 8016df0:	d845      	bhi.n	8016e7e <etharp_find_entry+0x18a>
            old_queue = i;
 8016df2:	8c3b      	ldrh	r3, [r7, #32]
 8016df4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8016df6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016dfa:	4973      	ldr	r1, [pc, #460]	; (8016fc8 <etharp_find_entry+0x2d4>)
 8016dfc:	4613      	mov	r3, r2
 8016dfe:	005b      	lsls	r3, r3, #1
 8016e00:	4413      	add	r3, r2
 8016e02:	00db      	lsls	r3, r3, #3
 8016e04:	440b      	add	r3, r1
 8016e06:	3312      	adds	r3, #18
 8016e08:	881b      	ldrh	r3, [r3, #0]
 8016e0a:	83bb      	strh	r3, [r7, #28]
 8016e0c:	e037      	b.n	8016e7e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8016e0e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016e12:	496d      	ldr	r1, [pc, #436]	; (8016fc8 <etharp_find_entry+0x2d4>)
 8016e14:	4613      	mov	r3, r2
 8016e16:	005b      	lsls	r3, r3, #1
 8016e18:	4413      	add	r3, r2
 8016e1a:	00db      	lsls	r3, r3, #3
 8016e1c:	440b      	add	r3, r1
 8016e1e:	3312      	adds	r3, #18
 8016e20:	881b      	ldrh	r3, [r3, #0]
 8016e22:	8b7a      	ldrh	r2, [r7, #26]
 8016e24:	429a      	cmp	r2, r3
 8016e26:	d82a      	bhi.n	8016e7e <etharp_find_entry+0x18a>
            old_pending = i;
 8016e28:	8c3b      	ldrh	r3, [r7, #32]
 8016e2a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8016e2c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016e30:	4965      	ldr	r1, [pc, #404]	; (8016fc8 <etharp_find_entry+0x2d4>)
 8016e32:	4613      	mov	r3, r2
 8016e34:	005b      	lsls	r3, r3, #1
 8016e36:	4413      	add	r3, r2
 8016e38:	00db      	lsls	r3, r3, #3
 8016e3a:	440b      	add	r3, r1
 8016e3c:	3312      	adds	r3, #18
 8016e3e:	881b      	ldrh	r3, [r3, #0]
 8016e40:	837b      	strh	r3, [r7, #26]
 8016e42:	e01c      	b.n	8016e7e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8016e44:	7dfb      	ldrb	r3, [r7, #23]
 8016e46:	2b01      	cmp	r3, #1
 8016e48:	d919      	bls.n	8016e7e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8016e4a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016e4e:	495e      	ldr	r1, [pc, #376]	; (8016fc8 <etharp_find_entry+0x2d4>)
 8016e50:	4613      	mov	r3, r2
 8016e52:	005b      	lsls	r3, r3, #1
 8016e54:	4413      	add	r3, r2
 8016e56:	00db      	lsls	r3, r3, #3
 8016e58:	440b      	add	r3, r1
 8016e5a:	3312      	adds	r3, #18
 8016e5c:	881b      	ldrh	r3, [r3, #0]
 8016e5e:	8b3a      	ldrh	r2, [r7, #24]
 8016e60:	429a      	cmp	r2, r3
 8016e62:	d80c      	bhi.n	8016e7e <etharp_find_entry+0x18a>
            old_stable = i;
 8016e64:	8c3b      	ldrh	r3, [r7, #32]
 8016e66:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8016e68:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016e6c:	4956      	ldr	r1, [pc, #344]	; (8016fc8 <etharp_find_entry+0x2d4>)
 8016e6e:	4613      	mov	r3, r2
 8016e70:	005b      	lsls	r3, r3, #1
 8016e72:	4413      	add	r3, r2
 8016e74:	00db      	lsls	r3, r3, #3
 8016e76:	440b      	add	r3, r1
 8016e78:	3312      	adds	r3, #18
 8016e7a:	881b      	ldrh	r3, [r3, #0]
 8016e7c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016e7e:	8c3b      	ldrh	r3, [r7, #32]
 8016e80:	3301      	adds	r3, #1
 8016e82:	b29b      	uxth	r3, r3
 8016e84:	843b      	strh	r3, [r7, #32]
 8016e86:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016e8a:	2b09      	cmp	r3, #9
 8016e8c:	f77f af4c 	ble.w	8016d28 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8016e90:	7afb      	ldrb	r3, [r7, #11]
 8016e92:	f003 0302 	and.w	r3, r3, #2
 8016e96:	2b00      	cmp	r3, #0
 8016e98:	d108      	bne.n	8016eac <etharp_find_entry+0x1b8>
 8016e9a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016e9e:	2b0a      	cmp	r3, #10
 8016ea0:	d107      	bne.n	8016eb2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8016ea2:	7afb      	ldrb	r3, [r7, #11]
 8016ea4:	f003 0301 	and.w	r3, r3, #1
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	d102      	bne.n	8016eb2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8016eac:	f04f 33ff 	mov.w	r3, #4294967295
 8016eb0:	e085      	b.n	8016fbe <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8016eb2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016eb6:	2b09      	cmp	r3, #9
 8016eb8:	dc02      	bgt.n	8016ec0 <etharp_find_entry+0x1cc>
    i = empty;
 8016eba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016ebc:	843b      	strh	r3, [r7, #32]
 8016ebe:	e039      	b.n	8016f34 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8016ec0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8016ec4:	2b09      	cmp	r3, #9
 8016ec6:	dc14      	bgt.n	8016ef2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8016ec8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016eca:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8016ecc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016ed0:	493d      	ldr	r1, [pc, #244]	; (8016fc8 <etharp_find_entry+0x2d4>)
 8016ed2:	4613      	mov	r3, r2
 8016ed4:	005b      	lsls	r3, r3, #1
 8016ed6:	4413      	add	r3, r2
 8016ed8:	00db      	lsls	r3, r3, #3
 8016eda:	440b      	add	r3, r1
 8016edc:	681b      	ldr	r3, [r3, #0]
 8016ede:	2b00      	cmp	r3, #0
 8016ee0:	d018      	beq.n	8016f14 <etharp_find_entry+0x220>
 8016ee2:	4b3a      	ldr	r3, [pc, #232]	; (8016fcc <etharp_find_entry+0x2d8>)
 8016ee4:	f240 126d 	movw	r2, #365	; 0x16d
 8016ee8:	493b      	ldr	r1, [pc, #236]	; (8016fd8 <etharp_find_entry+0x2e4>)
 8016eea:	483a      	ldr	r0, [pc, #232]	; (8016fd4 <etharp_find_entry+0x2e0>)
 8016eec:	f002 fe50 	bl	8019b90 <iprintf>
 8016ef0:	e010      	b.n	8016f14 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8016ef2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8016ef6:	2b09      	cmp	r3, #9
 8016ef8:	dc02      	bgt.n	8016f00 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8016efa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016efc:	843b      	strh	r3, [r7, #32]
 8016efe:	e009      	b.n	8016f14 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8016f00:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8016f04:	2b09      	cmp	r3, #9
 8016f06:	dc02      	bgt.n	8016f0e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8016f08:	8bfb      	ldrh	r3, [r7, #30]
 8016f0a:	843b      	strh	r3, [r7, #32]
 8016f0c:	e002      	b.n	8016f14 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8016f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8016f12:	e054      	b.n	8016fbe <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016f14:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016f18:	2b09      	cmp	r3, #9
 8016f1a:	dd06      	ble.n	8016f2a <etharp_find_entry+0x236>
 8016f1c:	4b2b      	ldr	r3, [pc, #172]	; (8016fcc <etharp_find_entry+0x2d8>)
 8016f1e:	f240 127f 	movw	r2, #383	; 0x17f
 8016f22:	492e      	ldr	r1, [pc, #184]	; (8016fdc <etharp_find_entry+0x2e8>)
 8016f24:	482b      	ldr	r0, [pc, #172]	; (8016fd4 <etharp_find_entry+0x2e0>)
 8016f26:	f002 fe33 	bl	8019b90 <iprintf>
    etharp_free_entry(i);
 8016f2a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016f2e:	4618      	mov	r0, r3
 8016f30:	f7ff fe06 	bl	8016b40 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016f34:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016f38:	2b09      	cmp	r3, #9
 8016f3a:	dd06      	ble.n	8016f4a <etharp_find_entry+0x256>
 8016f3c:	4b23      	ldr	r3, [pc, #140]	; (8016fcc <etharp_find_entry+0x2d8>)
 8016f3e:	f240 1283 	movw	r2, #387	; 0x183
 8016f42:	4926      	ldr	r1, [pc, #152]	; (8016fdc <etharp_find_entry+0x2e8>)
 8016f44:	4823      	ldr	r0, [pc, #140]	; (8016fd4 <etharp_find_entry+0x2e0>)
 8016f46:	f002 fe23 	bl	8019b90 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8016f4a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016f4e:	491e      	ldr	r1, [pc, #120]	; (8016fc8 <etharp_find_entry+0x2d4>)
 8016f50:	4613      	mov	r3, r2
 8016f52:	005b      	lsls	r3, r3, #1
 8016f54:	4413      	add	r3, r2
 8016f56:	00db      	lsls	r3, r3, #3
 8016f58:	440b      	add	r3, r1
 8016f5a:	3314      	adds	r3, #20
 8016f5c:	781b      	ldrb	r3, [r3, #0]
 8016f5e:	2b00      	cmp	r3, #0
 8016f60:	d006      	beq.n	8016f70 <etharp_find_entry+0x27c>
 8016f62:	4b1a      	ldr	r3, [pc, #104]	; (8016fcc <etharp_find_entry+0x2d8>)
 8016f64:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8016f68:	491d      	ldr	r1, [pc, #116]	; (8016fe0 <etharp_find_entry+0x2ec>)
 8016f6a:	481a      	ldr	r0, [pc, #104]	; (8016fd4 <etharp_find_entry+0x2e0>)
 8016f6c:	f002 fe10 	bl	8019b90 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8016f70:	68fb      	ldr	r3, [r7, #12]
 8016f72:	2b00      	cmp	r3, #0
 8016f74:	d00b      	beq.n	8016f8e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8016f76:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016f7a:	68fb      	ldr	r3, [r7, #12]
 8016f7c:	6819      	ldr	r1, [r3, #0]
 8016f7e:	4812      	ldr	r0, [pc, #72]	; (8016fc8 <etharp_find_entry+0x2d4>)
 8016f80:	4613      	mov	r3, r2
 8016f82:	005b      	lsls	r3, r3, #1
 8016f84:	4413      	add	r3, r2
 8016f86:	00db      	lsls	r3, r3, #3
 8016f88:	4403      	add	r3, r0
 8016f8a:	3304      	adds	r3, #4
 8016f8c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8016f8e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016f92:	490d      	ldr	r1, [pc, #52]	; (8016fc8 <etharp_find_entry+0x2d4>)
 8016f94:	4613      	mov	r3, r2
 8016f96:	005b      	lsls	r3, r3, #1
 8016f98:	4413      	add	r3, r2
 8016f9a:	00db      	lsls	r3, r3, #3
 8016f9c:	440b      	add	r3, r1
 8016f9e:	3312      	adds	r3, #18
 8016fa0:	2200      	movs	r2, #0
 8016fa2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8016fa4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016fa8:	4907      	ldr	r1, [pc, #28]	; (8016fc8 <etharp_find_entry+0x2d4>)
 8016faa:	4613      	mov	r3, r2
 8016fac:	005b      	lsls	r3, r3, #1
 8016fae:	4413      	add	r3, r2
 8016fb0:	00db      	lsls	r3, r3, #3
 8016fb2:	440b      	add	r3, r1
 8016fb4:	3308      	adds	r3, #8
 8016fb6:	687a      	ldr	r2, [r7, #4]
 8016fb8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8016fba:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8016fbe:	4618      	mov	r0, r3
 8016fc0:	3728      	adds	r7, #40	; 0x28
 8016fc2:	46bd      	mov	sp, r7
 8016fc4:	bd80      	pop	{r7, pc}
 8016fc6:	bf00      	nop
 8016fc8:	200070a4 	.word	0x200070a4
 8016fcc:	0801e784 	.word	0x0801e784
 8016fd0:	0801e7bc 	.word	0x0801e7bc
 8016fd4:	0801e7fc 	.word	0x0801e7fc
 8016fd8:	0801e824 	.word	0x0801e824
 8016fdc:	0801e83c 	.word	0x0801e83c
 8016fe0:	0801e850 	.word	0x0801e850

08016fe4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8016fe4:	b580      	push	{r7, lr}
 8016fe6:	b088      	sub	sp, #32
 8016fe8:	af02      	add	r7, sp, #8
 8016fea:	60f8      	str	r0, [r7, #12]
 8016fec:	60b9      	str	r1, [r7, #8]
 8016fee:	607a      	str	r2, [r7, #4]
 8016ff0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8016ff2:	68fb      	ldr	r3, [r7, #12]
 8016ff4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016ff8:	2b06      	cmp	r3, #6
 8016ffa:	d006      	beq.n	801700a <etharp_update_arp_entry+0x26>
 8016ffc:	4b48      	ldr	r3, [pc, #288]	; (8017120 <etharp_update_arp_entry+0x13c>)
 8016ffe:	f240 12a9 	movw	r2, #425	; 0x1a9
 8017002:	4948      	ldr	r1, [pc, #288]	; (8017124 <etharp_update_arp_entry+0x140>)
 8017004:	4848      	ldr	r0, [pc, #288]	; (8017128 <etharp_update_arp_entry+0x144>)
 8017006:	f002 fdc3 	bl	8019b90 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801700a:	68bb      	ldr	r3, [r7, #8]
 801700c:	2b00      	cmp	r3, #0
 801700e:	d012      	beq.n	8017036 <etharp_update_arp_entry+0x52>
 8017010:	68bb      	ldr	r3, [r7, #8]
 8017012:	681b      	ldr	r3, [r3, #0]
 8017014:	2b00      	cmp	r3, #0
 8017016:	d00e      	beq.n	8017036 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8017018:	68bb      	ldr	r3, [r7, #8]
 801701a:	681b      	ldr	r3, [r3, #0]
 801701c:	68f9      	ldr	r1, [r7, #12]
 801701e:	4618      	mov	r0, r3
 8017020:	f001 f924 	bl	801826c <ip4_addr_isbroadcast_u32>
 8017024:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8017026:	2b00      	cmp	r3, #0
 8017028:	d105      	bne.n	8017036 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801702a:	68bb      	ldr	r3, [r7, #8]
 801702c:	681b      	ldr	r3, [r3, #0]
 801702e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8017032:	2be0      	cmp	r3, #224	; 0xe0
 8017034:	d102      	bne.n	801703c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8017036:	f06f 030f 	mvn.w	r3, #15
 801703a:	e06c      	b.n	8017116 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801703c:	78fb      	ldrb	r3, [r7, #3]
 801703e:	68fa      	ldr	r2, [r7, #12]
 8017040:	4619      	mov	r1, r3
 8017042:	68b8      	ldr	r0, [r7, #8]
 8017044:	f7ff fe56 	bl	8016cf4 <etharp_find_entry>
 8017048:	4603      	mov	r3, r0
 801704a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801704c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8017050:	2b00      	cmp	r3, #0
 8017052:	da02      	bge.n	801705a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8017054:	8afb      	ldrh	r3, [r7, #22]
 8017056:	b25b      	sxtb	r3, r3
 8017058:	e05d      	b.n	8017116 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801705a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801705e:	4933      	ldr	r1, [pc, #204]	; (801712c <etharp_update_arp_entry+0x148>)
 8017060:	4613      	mov	r3, r2
 8017062:	005b      	lsls	r3, r3, #1
 8017064:	4413      	add	r3, r2
 8017066:	00db      	lsls	r3, r3, #3
 8017068:	440b      	add	r3, r1
 801706a:	3314      	adds	r3, #20
 801706c:	2202      	movs	r2, #2
 801706e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8017070:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017074:	492d      	ldr	r1, [pc, #180]	; (801712c <etharp_update_arp_entry+0x148>)
 8017076:	4613      	mov	r3, r2
 8017078:	005b      	lsls	r3, r3, #1
 801707a:	4413      	add	r3, r2
 801707c:	00db      	lsls	r3, r3, #3
 801707e:	440b      	add	r3, r1
 8017080:	3308      	adds	r3, #8
 8017082:	68fa      	ldr	r2, [r7, #12]
 8017084:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8017086:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801708a:	4613      	mov	r3, r2
 801708c:	005b      	lsls	r3, r3, #1
 801708e:	4413      	add	r3, r2
 8017090:	00db      	lsls	r3, r3, #3
 8017092:	3308      	adds	r3, #8
 8017094:	4a25      	ldr	r2, [pc, #148]	; (801712c <etharp_update_arp_entry+0x148>)
 8017096:	4413      	add	r3, r2
 8017098:	3304      	adds	r3, #4
 801709a:	2206      	movs	r2, #6
 801709c:	6879      	ldr	r1, [r7, #4]
 801709e:	4618      	mov	r0, r3
 80170a0:	f002 ff45 	bl	8019f2e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80170a4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80170a8:	4920      	ldr	r1, [pc, #128]	; (801712c <etharp_update_arp_entry+0x148>)
 80170aa:	4613      	mov	r3, r2
 80170ac:	005b      	lsls	r3, r3, #1
 80170ae:	4413      	add	r3, r2
 80170b0:	00db      	lsls	r3, r3, #3
 80170b2:	440b      	add	r3, r1
 80170b4:	3312      	adds	r3, #18
 80170b6:	2200      	movs	r2, #0
 80170b8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80170ba:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80170be:	491b      	ldr	r1, [pc, #108]	; (801712c <etharp_update_arp_entry+0x148>)
 80170c0:	4613      	mov	r3, r2
 80170c2:	005b      	lsls	r3, r3, #1
 80170c4:	4413      	add	r3, r2
 80170c6:	00db      	lsls	r3, r3, #3
 80170c8:	440b      	add	r3, r1
 80170ca:	681b      	ldr	r3, [r3, #0]
 80170cc:	2b00      	cmp	r3, #0
 80170ce:	d021      	beq.n	8017114 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80170d0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80170d4:	4915      	ldr	r1, [pc, #84]	; (801712c <etharp_update_arp_entry+0x148>)
 80170d6:	4613      	mov	r3, r2
 80170d8:	005b      	lsls	r3, r3, #1
 80170da:	4413      	add	r3, r2
 80170dc:	00db      	lsls	r3, r3, #3
 80170de:	440b      	add	r3, r1
 80170e0:	681b      	ldr	r3, [r3, #0]
 80170e2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80170e4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80170e8:	4910      	ldr	r1, [pc, #64]	; (801712c <etharp_update_arp_entry+0x148>)
 80170ea:	4613      	mov	r3, r2
 80170ec:	005b      	lsls	r3, r3, #1
 80170ee:	4413      	add	r3, r2
 80170f0:	00db      	lsls	r3, r3, #3
 80170f2:	440b      	add	r3, r1
 80170f4:	2200      	movs	r2, #0
 80170f6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80170f8:	68fb      	ldr	r3, [r7, #12]
 80170fa:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80170fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017102:	9300      	str	r3, [sp, #0]
 8017104:	687b      	ldr	r3, [r7, #4]
 8017106:	6939      	ldr	r1, [r7, #16]
 8017108:	68f8      	ldr	r0, [r7, #12]
 801710a:	f001 ffbd 	bl	8019088 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801710e:	6938      	ldr	r0, [r7, #16]
 8017110:	f7f9 fe24 	bl	8010d5c <pbuf_free>
  }
  return ERR_OK;
 8017114:	2300      	movs	r3, #0
}
 8017116:	4618      	mov	r0, r3
 8017118:	3718      	adds	r7, #24
 801711a:	46bd      	mov	sp, r7
 801711c:	bd80      	pop	{r7, pc}
 801711e:	bf00      	nop
 8017120:	0801e784 	.word	0x0801e784
 8017124:	0801e87c 	.word	0x0801e87c
 8017128:	0801e7fc 	.word	0x0801e7fc
 801712c:	200070a4 	.word	0x200070a4

08017130 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8017130:	b580      	push	{r7, lr}
 8017132:	b084      	sub	sp, #16
 8017134:	af00      	add	r7, sp, #0
 8017136:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017138:	2300      	movs	r3, #0
 801713a:	60fb      	str	r3, [r7, #12]
 801713c:	e01e      	b.n	801717c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801713e:	4913      	ldr	r1, [pc, #76]	; (801718c <etharp_cleanup_netif+0x5c>)
 8017140:	68fa      	ldr	r2, [r7, #12]
 8017142:	4613      	mov	r3, r2
 8017144:	005b      	lsls	r3, r3, #1
 8017146:	4413      	add	r3, r2
 8017148:	00db      	lsls	r3, r3, #3
 801714a:	440b      	add	r3, r1
 801714c:	3314      	adds	r3, #20
 801714e:	781b      	ldrb	r3, [r3, #0]
 8017150:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8017152:	7afb      	ldrb	r3, [r7, #11]
 8017154:	2b00      	cmp	r3, #0
 8017156:	d00e      	beq.n	8017176 <etharp_cleanup_netif+0x46>
 8017158:	490c      	ldr	r1, [pc, #48]	; (801718c <etharp_cleanup_netif+0x5c>)
 801715a:	68fa      	ldr	r2, [r7, #12]
 801715c:	4613      	mov	r3, r2
 801715e:	005b      	lsls	r3, r3, #1
 8017160:	4413      	add	r3, r2
 8017162:	00db      	lsls	r3, r3, #3
 8017164:	440b      	add	r3, r1
 8017166:	3308      	adds	r3, #8
 8017168:	681b      	ldr	r3, [r3, #0]
 801716a:	687a      	ldr	r2, [r7, #4]
 801716c:	429a      	cmp	r2, r3
 801716e:	d102      	bne.n	8017176 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8017170:	68f8      	ldr	r0, [r7, #12]
 8017172:	f7ff fce5 	bl	8016b40 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017176:	68fb      	ldr	r3, [r7, #12]
 8017178:	3301      	adds	r3, #1
 801717a:	60fb      	str	r3, [r7, #12]
 801717c:	68fb      	ldr	r3, [r7, #12]
 801717e:	2b09      	cmp	r3, #9
 8017180:	dddd      	ble.n	801713e <etharp_cleanup_netif+0xe>
    }
  }
}
 8017182:	bf00      	nop
 8017184:	bf00      	nop
 8017186:	3710      	adds	r7, #16
 8017188:	46bd      	mov	sp, r7
 801718a:	bd80      	pop	{r7, pc}
 801718c:	200070a4 	.word	0x200070a4

08017190 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8017190:	b5b0      	push	{r4, r5, r7, lr}
 8017192:	b08a      	sub	sp, #40	; 0x28
 8017194:	af04      	add	r7, sp, #16
 8017196:	6078      	str	r0, [r7, #4]
 8017198:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801719a:	683b      	ldr	r3, [r7, #0]
 801719c:	2b00      	cmp	r3, #0
 801719e:	d107      	bne.n	80171b0 <etharp_input+0x20>
 80171a0:	4b3d      	ldr	r3, [pc, #244]	; (8017298 <etharp_input+0x108>)
 80171a2:	f240 228a 	movw	r2, #650	; 0x28a
 80171a6:	493d      	ldr	r1, [pc, #244]	; (801729c <etharp_input+0x10c>)
 80171a8:	483d      	ldr	r0, [pc, #244]	; (80172a0 <etharp_input+0x110>)
 80171aa:	f002 fcf1 	bl	8019b90 <iprintf>
 80171ae:	e06f      	b.n	8017290 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80171b0:	687b      	ldr	r3, [r7, #4]
 80171b2:	685b      	ldr	r3, [r3, #4]
 80171b4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80171b6:	693b      	ldr	r3, [r7, #16]
 80171b8:	881b      	ldrh	r3, [r3, #0]
 80171ba:	b29b      	uxth	r3, r3
 80171bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80171c0:	d10c      	bne.n	80171dc <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80171c2:	693b      	ldr	r3, [r7, #16]
 80171c4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80171c6:	2b06      	cmp	r3, #6
 80171c8:	d108      	bne.n	80171dc <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80171ca:	693b      	ldr	r3, [r7, #16]
 80171cc:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80171ce:	2b04      	cmp	r3, #4
 80171d0:	d104      	bne.n	80171dc <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80171d2:	693b      	ldr	r3, [r7, #16]
 80171d4:	885b      	ldrh	r3, [r3, #2]
 80171d6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80171d8:	2b08      	cmp	r3, #8
 80171da:	d003      	beq.n	80171e4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80171dc:	6878      	ldr	r0, [r7, #4]
 80171de:	f7f9 fdbd 	bl	8010d5c <pbuf_free>
    return;
 80171e2:	e055      	b.n	8017290 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80171e4:	693b      	ldr	r3, [r7, #16]
 80171e6:	330e      	adds	r3, #14
 80171e8:	681b      	ldr	r3, [r3, #0]
 80171ea:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80171ec:	693b      	ldr	r3, [r7, #16]
 80171ee:	3318      	adds	r3, #24
 80171f0:	681b      	ldr	r3, [r3, #0]
 80171f2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80171f4:	683b      	ldr	r3, [r7, #0]
 80171f6:	3304      	adds	r3, #4
 80171f8:	681b      	ldr	r3, [r3, #0]
 80171fa:	2b00      	cmp	r3, #0
 80171fc:	d102      	bne.n	8017204 <etharp_input+0x74>
    for_us = 0;
 80171fe:	2300      	movs	r3, #0
 8017200:	75fb      	strb	r3, [r7, #23]
 8017202:	e009      	b.n	8017218 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8017204:	68ba      	ldr	r2, [r7, #8]
 8017206:	683b      	ldr	r3, [r7, #0]
 8017208:	3304      	adds	r3, #4
 801720a:	681b      	ldr	r3, [r3, #0]
 801720c:	429a      	cmp	r2, r3
 801720e:	bf0c      	ite	eq
 8017210:	2301      	moveq	r3, #1
 8017212:	2300      	movne	r3, #0
 8017214:	b2db      	uxtb	r3, r3
 8017216:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8017218:	693b      	ldr	r3, [r7, #16]
 801721a:	f103 0208 	add.w	r2, r3, #8
 801721e:	7dfb      	ldrb	r3, [r7, #23]
 8017220:	2b00      	cmp	r3, #0
 8017222:	d001      	beq.n	8017228 <etharp_input+0x98>
 8017224:	2301      	movs	r3, #1
 8017226:	e000      	b.n	801722a <etharp_input+0x9a>
 8017228:	2302      	movs	r3, #2
 801722a:	f107 010c 	add.w	r1, r7, #12
 801722e:	6838      	ldr	r0, [r7, #0]
 8017230:	f7ff fed8 	bl	8016fe4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8017234:	693b      	ldr	r3, [r7, #16]
 8017236:	88db      	ldrh	r3, [r3, #6]
 8017238:	b29b      	uxth	r3, r3
 801723a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801723e:	d003      	beq.n	8017248 <etharp_input+0xb8>
 8017240:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017244:	d01e      	beq.n	8017284 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8017246:	e020      	b.n	801728a <etharp_input+0xfa>
      if (for_us) {
 8017248:	7dfb      	ldrb	r3, [r7, #23]
 801724a:	2b00      	cmp	r3, #0
 801724c:	d01c      	beq.n	8017288 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801724e:	683b      	ldr	r3, [r7, #0]
 8017250:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8017254:	693b      	ldr	r3, [r7, #16]
 8017256:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801725a:	683b      	ldr	r3, [r7, #0]
 801725c:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8017260:	683b      	ldr	r3, [r7, #0]
 8017262:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8017264:	693a      	ldr	r2, [r7, #16]
 8017266:	3208      	adds	r2, #8
        etharp_raw(netif,
 8017268:	2102      	movs	r1, #2
 801726a:	9103      	str	r1, [sp, #12]
 801726c:	f107 010c 	add.w	r1, r7, #12
 8017270:	9102      	str	r1, [sp, #8]
 8017272:	9201      	str	r2, [sp, #4]
 8017274:	9300      	str	r3, [sp, #0]
 8017276:	462b      	mov	r3, r5
 8017278:	4622      	mov	r2, r4
 801727a:	4601      	mov	r1, r0
 801727c:	6838      	ldr	r0, [r7, #0]
 801727e:	f000 faeb 	bl	8017858 <etharp_raw>
      break;
 8017282:	e001      	b.n	8017288 <etharp_input+0xf8>
      break;
 8017284:	bf00      	nop
 8017286:	e000      	b.n	801728a <etharp_input+0xfa>
      break;
 8017288:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801728a:	6878      	ldr	r0, [r7, #4]
 801728c:	f7f9 fd66 	bl	8010d5c <pbuf_free>
}
 8017290:	3718      	adds	r7, #24
 8017292:	46bd      	mov	sp, r7
 8017294:	bdb0      	pop	{r4, r5, r7, pc}
 8017296:	bf00      	nop
 8017298:	0801e784 	.word	0x0801e784
 801729c:	0801e8d4 	.word	0x0801e8d4
 80172a0:	0801e7fc 	.word	0x0801e7fc

080172a4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80172a4:	b580      	push	{r7, lr}
 80172a6:	b086      	sub	sp, #24
 80172a8:	af02      	add	r7, sp, #8
 80172aa:	60f8      	str	r0, [r7, #12]
 80172ac:	60b9      	str	r1, [r7, #8]
 80172ae:	4613      	mov	r3, r2
 80172b0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80172b2:	79fa      	ldrb	r2, [r7, #7]
 80172b4:	4944      	ldr	r1, [pc, #272]	; (80173c8 <etharp_output_to_arp_index+0x124>)
 80172b6:	4613      	mov	r3, r2
 80172b8:	005b      	lsls	r3, r3, #1
 80172ba:	4413      	add	r3, r2
 80172bc:	00db      	lsls	r3, r3, #3
 80172be:	440b      	add	r3, r1
 80172c0:	3314      	adds	r3, #20
 80172c2:	781b      	ldrb	r3, [r3, #0]
 80172c4:	2b01      	cmp	r3, #1
 80172c6:	d806      	bhi.n	80172d6 <etharp_output_to_arp_index+0x32>
 80172c8:	4b40      	ldr	r3, [pc, #256]	; (80173cc <etharp_output_to_arp_index+0x128>)
 80172ca:	f240 22ee 	movw	r2, #750	; 0x2ee
 80172ce:	4940      	ldr	r1, [pc, #256]	; (80173d0 <etharp_output_to_arp_index+0x12c>)
 80172d0:	4840      	ldr	r0, [pc, #256]	; (80173d4 <etharp_output_to_arp_index+0x130>)
 80172d2:	f002 fc5d 	bl	8019b90 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80172d6:	79fa      	ldrb	r2, [r7, #7]
 80172d8:	493b      	ldr	r1, [pc, #236]	; (80173c8 <etharp_output_to_arp_index+0x124>)
 80172da:	4613      	mov	r3, r2
 80172dc:	005b      	lsls	r3, r3, #1
 80172de:	4413      	add	r3, r2
 80172e0:	00db      	lsls	r3, r3, #3
 80172e2:	440b      	add	r3, r1
 80172e4:	3314      	adds	r3, #20
 80172e6:	781b      	ldrb	r3, [r3, #0]
 80172e8:	2b02      	cmp	r3, #2
 80172ea:	d153      	bne.n	8017394 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80172ec:	79fa      	ldrb	r2, [r7, #7]
 80172ee:	4936      	ldr	r1, [pc, #216]	; (80173c8 <etharp_output_to_arp_index+0x124>)
 80172f0:	4613      	mov	r3, r2
 80172f2:	005b      	lsls	r3, r3, #1
 80172f4:	4413      	add	r3, r2
 80172f6:	00db      	lsls	r3, r3, #3
 80172f8:	440b      	add	r3, r1
 80172fa:	3312      	adds	r3, #18
 80172fc:	881b      	ldrh	r3, [r3, #0]
 80172fe:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8017302:	d919      	bls.n	8017338 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8017304:	79fa      	ldrb	r2, [r7, #7]
 8017306:	4613      	mov	r3, r2
 8017308:	005b      	lsls	r3, r3, #1
 801730a:	4413      	add	r3, r2
 801730c:	00db      	lsls	r3, r3, #3
 801730e:	4a2e      	ldr	r2, [pc, #184]	; (80173c8 <etharp_output_to_arp_index+0x124>)
 8017310:	4413      	add	r3, r2
 8017312:	3304      	adds	r3, #4
 8017314:	4619      	mov	r1, r3
 8017316:	68f8      	ldr	r0, [r7, #12]
 8017318:	f000 fb4c 	bl	80179b4 <etharp_request>
 801731c:	4603      	mov	r3, r0
 801731e:	2b00      	cmp	r3, #0
 8017320:	d138      	bne.n	8017394 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8017322:	79fa      	ldrb	r2, [r7, #7]
 8017324:	4928      	ldr	r1, [pc, #160]	; (80173c8 <etharp_output_to_arp_index+0x124>)
 8017326:	4613      	mov	r3, r2
 8017328:	005b      	lsls	r3, r3, #1
 801732a:	4413      	add	r3, r2
 801732c:	00db      	lsls	r3, r3, #3
 801732e:	440b      	add	r3, r1
 8017330:	3314      	adds	r3, #20
 8017332:	2203      	movs	r2, #3
 8017334:	701a      	strb	r2, [r3, #0]
 8017336:	e02d      	b.n	8017394 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8017338:	79fa      	ldrb	r2, [r7, #7]
 801733a:	4923      	ldr	r1, [pc, #140]	; (80173c8 <etharp_output_to_arp_index+0x124>)
 801733c:	4613      	mov	r3, r2
 801733e:	005b      	lsls	r3, r3, #1
 8017340:	4413      	add	r3, r2
 8017342:	00db      	lsls	r3, r3, #3
 8017344:	440b      	add	r3, r1
 8017346:	3312      	adds	r3, #18
 8017348:	881b      	ldrh	r3, [r3, #0]
 801734a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801734e:	d321      	bcc.n	8017394 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8017350:	79fa      	ldrb	r2, [r7, #7]
 8017352:	4613      	mov	r3, r2
 8017354:	005b      	lsls	r3, r3, #1
 8017356:	4413      	add	r3, r2
 8017358:	00db      	lsls	r3, r3, #3
 801735a:	4a1b      	ldr	r2, [pc, #108]	; (80173c8 <etharp_output_to_arp_index+0x124>)
 801735c:	4413      	add	r3, r2
 801735e:	1d19      	adds	r1, r3, #4
 8017360:	79fa      	ldrb	r2, [r7, #7]
 8017362:	4613      	mov	r3, r2
 8017364:	005b      	lsls	r3, r3, #1
 8017366:	4413      	add	r3, r2
 8017368:	00db      	lsls	r3, r3, #3
 801736a:	3308      	adds	r3, #8
 801736c:	4a16      	ldr	r2, [pc, #88]	; (80173c8 <etharp_output_to_arp_index+0x124>)
 801736e:	4413      	add	r3, r2
 8017370:	3304      	adds	r3, #4
 8017372:	461a      	mov	r2, r3
 8017374:	68f8      	ldr	r0, [r7, #12]
 8017376:	f000 fafb 	bl	8017970 <etharp_request_dst>
 801737a:	4603      	mov	r3, r0
 801737c:	2b00      	cmp	r3, #0
 801737e:	d109      	bne.n	8017394 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8017380:	79fa      	ldrb	r2, [r7, #7]
 8017382:	4911      	ldr	r1, [pc, #68]	; (80173c8 <etharp_output_to_arp_index+0x124>)
 8017384:	4613      	mov	r3, r2
 8017386:	005b      	lsls	r3, r3, #1
 8017388:	4413      	add	r3, r2
 801738a:	00db      	lsls	r3, r3, #3
 801738c:	440b      	add	r3, r1
 801738e:	3314      	adds	r3, #20
 8017390:	2203      	movs	r2, #3
 8017392:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8017394:	68fb      	ldr	r3, [r7, #12]
 8017396:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801739a:	79fa      	ldrb	r2, [r7, #7]
 801739c:	4613      	mov	r3, r2
 801739e:	005b      	lsls	r3, r3, #1
 80173a0:	4413      	add	r3, r2
 80173a2:	00db      	lsls	r3, r3, #3
 80173a4:	3308      	adds	r3, #8
 80173a6:	4a08      	ldr	r2, [pc, #32]	; (80173c8 <etharp_output_to_arp_index+0x124>)
 80173a8:	4413      	add	r3, r2
 80173aa:	3304      	adds	r3, #4
 80173ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80173b0:	9200      	str	r2, [sp, #0]
 80173b2:	460a      	mov	r2, r1
 80173b4:	68b9      	ldr	r1, [r7, #8]
 80173b6:	68f8      	ldr	r0, [r7, #12]
 80173b8:	f001 fe66 	bl	8019088 <ethernet_output>
 80173bc:	4603      	mov	r3, r0
}
 80173be:	4618      	mov	r0, r3
 80173c0:	3710      	adds	r7, #16
 80173c2:	46bd      	mov	sp, r7
 80173c4:	bd80      	pop	{r7, pc}
 80173c6:	bf00      	nop
 80173c8:	200070a4 	.word	0x200070a4
 80173cc:	0801e784 	.word	0x0801e784
 80173d0:	0801e8f4 	.word	0x0801e8f4
 80173d4:	0801e7fc 	.word	0x0801e7fc

080173d8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80173d8:	b580      	push	{r7, lr}
 80173da:	b08a      	sub	sp, #40	; 0x28
 80173dc:	af02      	add	r7, sp, #8
 80173de:	60f8      	str	r0, [r7, #12]
 80173e0:	60b9      	str	r1, [r7, #8]
 80173e2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80173e4:	687b      	ldr	r3, [r7, #4]
 80173e6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80173e8:	68fb      	ldr	r3, [r7, #12]
 80173ea:	2b00      	cmp	r3, #0
 80173ec:	d106      	bne.n	80173fc <etharp_output+0x24>
 80173ee:	4b73      	ldr	r3, [pc, #460]	; (80175bc <etharp_output+0x1e4>)
 80173f0:	f240 321e 	movw	r2, #798	; 0x31e
 80173f4:	4972      	ldr	r1, [pc, #456]	; (80175c0 <etharp_output+0x1e8>)
 80173f6:	4873      	ldr	r0, [pc, #460]	; (80175c4 <etharp_output+0x1ec>)
 80173f8:	f002 fbca 	bl	8019b90 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80173fc:	68bb      	ldr	r3, [r7, #8]
 80173fe:	2b00      	cmp	r3, #0
 8017400:	d106      	bne.n	8017410 <etharp_output+0x38>
 8017402:	4b6e      	ldr	r3, [pc, #440]	; (80175bc <etharp_output+0x1e4>)
 8017404:	f240 321f 	movw	r2, #799	; 0x31f
 8017408:	496f      	ldr	r1, [pc, #444]	; (80175c8 <etharp_output+0x1f0>)
 801740a:	486e      	ldr	r0, [pc, #440]	; (80175c4 <etharp_output+0x1ec>)
 801740c:	f002 fbc0 	bl	8019b90 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8017410:	687b      	ldr	r3, [r7, #4]
 8017412:	2b00      	cmp	r3, #0
 8017414:	d106      	bne.n	8017424 <etharp_output+0x4c>
 8017416:	4b69      	ldr	r3, [pc, #420]	; (80175bc <etharp_output+0x1e4>)
 8017418:	f44f 7248 	mov.w	r2, #800	; 0x320
 801741c:	496b      	ldr	r1, [pc, #428]	; (80175cc <etharp_output+0x1f4>)
 801741e:	4869      	ldr	r0, [pc, #420]	; (80175c4 <etharp_output+0x1ec>)
 8017420:	f002 fbb6 	bl	8019b90 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8017424:	687b      	ldr	r3, [r7, #4]
 8017426:	681b      	ldr	r3, [r3, #0]
 8017428:	68f9      	ldr	r1, [r7, #12]
 801742a:	4618      	mov	r0, r3
 801742c:	f000 ff1e 	bl	801826c <ip4_addr_isbroadcast_u32>
 8017430:	4603      	mov	r3, r0
 8017432:	2b00      	cmp	r3, #0
 8017434:	d002      	beq.n	801743c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8017436:	4b66      	ldr	r3, [pc, #408]	; (80175d0 <etharp_output+0x1f8>)
 8017438:	61fb      	str	r3, [r7, #28]
 801743a:	e0af      	b.n	801759c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801743c:	687b      	ldr	r3, [r7, #4]
 801743e:	681b      	ldr	r3, [r3, #0]
 8017440:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017444:	2be0      	cmp	r3, #224	; 0xe0
 8017446:	d118      	bne.n	801747a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8017448:	2301      	movs	r3, #1
 801744a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801744c:	2300      	movs	r3, #0
 801744e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8017450:	235e      	movs	r3, #94	; 0x5e
 8017452:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8017454:	687b      	ldr	r3, [r7, #4]
 8017456:	3301      	adds	r3, #1
 8017458:	781b      	ldrb	r3, [r3, #0]
 801745a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801745e:	b2db      	uxtb	r3, r3
 8017460:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8017462:	687b      	ldr	r3, [r7, #4]
 8017464:	3302      	adds	r3, #2
 8017466:	781b      	ldrb	r3, [r3, #0]
 8017468:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801746a:	687b      	ldr	r3, [r7, #4]
 801746c:	3303      	adds	r3, #3
 801746e:	781b      	ldrb	r3, [r3, #0]
 8017470:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8017472:	f107 0310 	add.w	r3, r7, #16
 8017476:	61fb      	str	r3, [r7, #28]
 8017478:	e090      	b.n	801759c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801747a:	687b      	ldr	r3, [r7, #4]
 801747c:	681a      	ldr	r2, [r3, #0]
 801747e:	68fb      	ldr	r3, [r7, #12]
 8017480:	3304      	adds	r3, #4
 8017482:	681b      	ldr	r3, [r3, #0]
 8017484:	405a      	eors	r2, r3
 8017486:	68fb      	ldr	r3, [r7, #12]
 8017488:	3308      	adds	r3, #8
 801748a:	681b      	ldr	r3, [r3, #0]
 801748c:	4013      	ands	r3, r2
 801748e:	2b00      	cmp	r3, #0
 8017490:	d012      	beq.n	80174b8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8017492:	687b      	ldr	r3, [r7, #4]
 8017494:	681b      	ldr	r3, [r3, #0]
 8017496:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8017498:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801749c:	4293      	cmp	r3, r2
 801749e:	d00b      	beq.n	80174b8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80174a0:	68fb      	ldr	r3, [r7, #12]
 80174a2:	330c      	adds	r3, #12
 80174a4:	681b      	ldr	r3, [r3, #0]
 80174a6:	2b00      	cmp	r3, #0
 80174a8:	d003      	beq.n	80174b2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80174aa:	68fb      	ldr	r3, [r7, #12]
 80174ac:	330c      	adds	r3, #12
 80174ae:	61bb      	str	r3, [r7, #24]
 80174b0:	e002      	b.n	80174b8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80174b2:	f06f 0303 	mvn.w	r3, #3
 80174b6:	e07d      	b.n	80175b4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80174b8:	4b46      	ldr	r3, [pc, #280]	; (80175d4 <etharp_output+0x1fc>)
 80174ba:	781b      	ldrb	r3, [r3, #0]
 80174bc:	4619      	mov	r1, r3
 80174be:	4a46      	ldr	r2, [pc, #280]	; (80175d8 <etharp_output+0x200>)
 80174c0:	460b      	mov	r3, r1
 80174c2:	005b      	lsls	r3, r3, #1
 80174c4:	440b      	add	r3, r1
 80174c6:	00db      	lsls	r3, r3, #3
 80174c8:	4413      	add	r3, r2
 80174ca:	3314      	adds	r3, #20
 80174cc:	781b      	ldrb	r3, [r3, #0]
 80174ce:	2b01      	cmp	r3, #1
 80174d0:	d925      	bls.n	801751e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80174d2:	4b40      	ldr	r3, [pc, #256]	; (80175d4 <etharp_output+0x1fc>)
 80174d4:	781b      	ldrb	r3, [r3, #0]
 80174d6:	4619      	mov	r1, r3
 80174d8:	4a3f      	ldr	r2, [pc, #252]	; (80175d8 <etharp_output+0x200>)
 80174da:	460b      	mov	r3, r1
 80174dc:	005b      	lsls	r3, r3, #1
 80174de:	440b      	add	r3, r1
 80174e0:	00db      	lsls	r3, r3, #3
 80174e2:	4413      	add	r3, r2
 80174e4:	3308      	adds	r3, #8
 80174e6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80174e8:	68fa      	ldr	r2, [r7, #12]
 80174ea:	429a      	cmp	r2, r3
 80174ec:	d117      	bne.n	801751e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80174ee:	69bb      	ldr	r3, [r7, #24]
 80174f0:	681a      	ldr	r2, [r3, #0]
 80174f2:	4b38      	ldr	r3, [pc, #224]	; (80175d4 <etharp_output+0x1fc>)
 80174f4:	781b      	ldrb	r3, [r3, #0]
 80174f6:	4618      	mov	r0, r3
 80174f8:	4937      	ldr	r1, [pc, #220]	; (80175d8 <etharp_output+0x200>)
 80174fa:	4603      	mov	r3, r0
 80174fc:	005b      	lsls	r3, r3, #1
 80174fe:	4403      	add	r3, r0
 8017500:	00db      	lsls	r3, r3, #3
 8017502:	440b      	add	r3, r1
 8017504:	3304      	adds	r3, #4
 8017506:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8017508:	429a      	cmp	r2, r3
 801750a:	d108      	bne.n	801751e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801750c:	4b31      	ldr	r3, [pc, #196]	; (80175d4 <etharp_output+0x1fc>)
 801750e:	781b      	ldrb	r3, [r3, #0]
 8017510:	461a      	mov	r2, r3
 8017512:	68b9      	ldr	r1, [r7, #8]
 8017514:	68f8      	ldr	r0, [r7, #12]
 8017516:	f7ff fec5 	bl	80172a4 <etharp_output_to_arp_index>
 801751a:	4603      	mov	r3, r0
 801751c:	e04a      	b.n	80175b4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801751e:	2300      	movs	r3, #0
 8017520:	75fb      	strb	r3, [r7, #23]
 8017522:	e031      	b.n	8017588 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8017524:	7dfa      	ldrb	r2, [r7, #23]
 8017526:	492c      	ldr	r1, [pc, #176]	; (80175d8 <etharp_output+0x200>)
 8017528:	4613      	mov	r3, r2
 801752a:	005b      	lsls	r3, r3, #1
 801752c:	4413      	add	r3, r2
 801752e:	00db      	lsls	r3, r3, #3
 8017530:	440b      	add	r3, r1
 8017532:	3314      	adds	r3, #20
 8017534:	781b      	ldrb	r3, [r3, #0]
 8017536:	2b01      	cmp	r3, #1
 8017538:	d923      	bls.n	8017582 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801753a:	7dfa      	ldrb	r2, [r7, #23]
 801753c:	4926      	ldr	r1, [pc, #152]	; (80175d8 <etharp_output+0x200>)
 801753e:	4613      	mov	r3, r2
 8017540:	005b      	lsls	r3, r3, #1
 8017542:	4413      	add	r3, r2
 8017544:	00db      	lsls	r3, r3, #3
 8017546:	440b      	add	r3, r1
 8017548:	3308      	adds	r3, #8
 801754a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801754c:	68fa      	ldr	r2, [r7, #12]
 801754e:	429a      	cmp	r2, r3
 8017550:	d117      	bne.n	8017582 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8017552:	69bb      	ldr	r3, [r7, #24]
 8017554:	6819      	ldr	r1, [r3, #0]
 8017556:	7dfa      	ldrb	r2, [r7, #23]
 8017558:	481f      	ldr	r0, [pc, #124]	; (80175d8 <etharp_output+0x200>)
 801755a:	4613      	mov	r3, r2
 801755c:	005b      	lsls	r3, r3, #1
 801755e:	4413      	add	r3, r2
 8017560:	00db      	lsls	r3, r3, #3
 8017562:	4403      	add	r3, r0
 8017564:	3304      	adds	r3, #4
 8017566:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8017568:	4299      	cmp	r1, r3
 801756a:	d10a      	bne.n	8017582 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801756c:	4a19      	ldr	r2, [pc, #100]	; (80175d4 <etharp_output+0x1fc>)
 801756e:	7dfb      	ldrb	r3, [r7, #23]
 8017570:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8017572:	7dfb      	ldrb	r3, [r7, #23]
 8017574:	461a      	mov	r2, r3
 8017576:	68b9      	ldr	r1, [r7, #8]
 8017578:	68f8      	ldr	r0, [r7, #12]
 801757a:	f7ff fe93 	bl	80172a4 <etharp_output_to_arp_index>
 801757e:	4603      	mov	r3, r0
 8017580:	e018      	b.n	80175b4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8017582:	7dfb      	ldrb	r3, [r7, #23]
 8017584:	3301      	adds	r3, #1
 8017586:	75fb      	strb	r3, [r7, #23]
 8017588:	7dfb      	ldrb	r3, [r7, #23]
 801758a:	2b09      	cmp	r3, #9
 801758c:	d9ca      	bls.n	8017524 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801758e:	68ba      	ldr	r2, [r7, #8]
 8017590:	69b9      	ldr	r1, [r7, #24]
 8017592:	68f8      	ldr	r0, [r7, #12]
 8017594:	f000 f822 	bl	80175dc <etharp_query>
 8017598:	4603      	mov	r3, r0
 801759a:	e00b      	b.n	80175b4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801759c:	68fb      	ldr	r3, [r7, #12]
 801759e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80175a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80175a6:	9300      	str	r3, [sp, #0]
 80175a8:	69fb      	ldr	r3, [r7, #28]
 80175aa:	68b9      	ldr	r1, [r7, #8]
 80175ac:	68f8      	ldr	r0, [r7, #12]
 80175ae:	f001 fd6b 	bl	8019088 <ethernet_output>
 80175b2:	4603      	mov	r3, r0
}
 80175b4:	4618      	mov	r0, r3
 80175b6:	3720      	adds	r7, #32
 80175b8:	46bd      	mov	sp, r7
 80175ba:	bd80      	pop	{r7, pc}
 80175bc:	0801e784 	.word	0x0801e784
 80175c0:	0801e8d4 	.word	0x0801e8d4
 80175c4:	0801e7fc 	.word	0x0801e7fc
 80175c8:	0801e924 	.word	0x0801e924
 80175cc:	0801e8c4 	.word	0x0801e8c4
 80175d0:	0801ef80 	.word	0x0801ef80
 80175d4:	20007194 	.word	0x20007194
 80175d8:	200070a4 	.word	0x200070a4

080175dc <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80175dc:	b580      	push	{r7, lr}
 80175de:	b08c      	sub	sp, #48	; 0x30
 80175e0:	af02      	add	r7, sp, #8
 80175e2:	60f8      	str	r0, [r7, #12]
 80175e4:	60b9      	str	r1, [r7, #8]
 80175e6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80175e8:	68fb      	ldr	r3, [r7, #12]
 80175ea:	3326      	adds	r3, #38	; 0x26
 80175ec:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80175ee:	23ff      	movs	r3, #255	; 0xff
 80175f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80175f4:	2300      	movs	r3, #0
 80175f6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80175f8:	68bb      	ldr	r3, [r7, #8]
 80175fa:	681b      	ldr	r3, [r3, #0]
 80175fc:	68f9      	ldr	r1, [r7, #12]
 80175fe:	4618      	mov	r0, r3
 8017600:	f000 fe34 	bl	801826c <ip4_addr_isbroadcast_u32>
 8017604:	4603      	mov	r3, r0
 8017606:	2b00      	cmp	r3, #0
 8017608:	d10c      	bne.n	8017624 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801760a:	68bb      	ldr	r3, [r7, #8]
 801760c:	681b      	ldr	r3, [r3, #0]
 801760e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8017612:	2be0      	cmp	r3, #224	; 0xe0
 8017614:	d006      	beq.n	8017624 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8017616:	68bb      	ldr	r3, [r7, #8]
 8017618:	2b00      	cmp	r3, #0
 801761a:	d003      	beq.n	8017624 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801761c:	68bb      	ldr	r3, [r7, #8]
 801761e:	681b      	ldr	r3, [r3, #0]
 8017620:	2b00      	cmp	r3, #0
 8017622:	d102      	bne.n	801762a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8017624:	f06f 030f 	mvn.w	r3, #15
 8017628:	e101      	b.n	801782e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801762a:	68fa      	ldr	r2, [r7, #12]
 801762c:	2101      	movs	r1, #1
 801762e:	68b8      	ldr	r0, [r7, #8]
 8017630:	f7ff fb60 	bl	8016cf4 <etharp_find_entry>
 8017634:	4603      	mov	r3, r0
 8017636:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8017638:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801763c:	2b00      	cmp	r3, #0
 801763e:	da02      	bge.n	8017646 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8017640:	8a7b      	ldrh	r3, [r7, #18]
 8017642:	b25b      	sxtb	r3, r3
 8017644:	e0f3      	b.n	801782e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8017646:	8a7b      	ldrh	r3, [r7, #18]
 8017648:	2b7e      	cmp	r3, #126	; 0x7e
 801764a:	d906      	bls.n	801765a <etharp_query+0x7e>
 801764c:	4b7a      	ldr	r3, [pc, #488]	; (8017838 <etharp_query+0x25c>)
 801764e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8017652:	497a      	ldr	r1, [pc, #488]	; (801783c <etharp_query+0x260>)
 8017654:	487a      	ldr	r0, [pc, #488]	; (8017840 <etharp_query+0x264>)
 8017656:	f002 fa9b 	bl	8019b90 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801765a:	8a7b      	ldrh	r3, [r7, #18]
 801765c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801765e:	7c7a      	ldrb	r2, [r7, #17]
 8017660:	4978      	ldr	r1, [pc, #480]	; (8017844 <etharp_query+0x268>)
 8017662:	4613      	mov	r3, r2
 8017664:	005b      	lsls	r3, r3, #1
 8017666:	4413      	add	r3, r2
 8017668:	00db      	lsls	r3, r3, #3
 801766a:	440b      	add	r3, r1
 801766c:	3314      	adds	r3, #20
 801766e:	781b      	ldrb	r3, [r3, #0]
 8017670:	2b00      	cmp	r3, #0
 8017672:	d115      	bne.n	80176a0 <etharp_query+0xc4>
    is_new_entry = 1;
 8017674:	2301      	movs	r3, #1
 8017676:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8017678:	7c7a      	ldrb	r2, [r7, #17]
 801767a:	4972      	ldr	r1, [pc, #456]	; (8017844 <etharp_query+0x268>)
 801767c:	4613      	mov	r3, r2
 801767e:	005b      	lsls	r3, r3, #1
 8017680:	4413      	add	r3, r2
 8017682:	00db      	lsls	r3, r3, #3
 8017684:	440b      	add	r3, r1
 8017686:	3314      	adds	r3, #20
 8017688:	2201      	movs	r2, #1
 801768a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801768c:	7c7a      	ldrb	r2, [r7, #17]
 801768e:	496d      	ldr	r1, [pc, #436]	; (8017844 <etharp_query+0x268>)
 8017690:	4613      	mov	r3, r2
 8017692:	005b      	lsls	r3, r3, #1
 8017694:	4413      	add	r3, r2
 8017696:	00db      	lsls	r3, r3, #3
 8017698:	440b      	add	r3, r1
 801769a:	3308      	adds	r3, #8
 801769c:	68fa      	ldr	r2, [r7, #12]
 801769e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80176a0:	7c7a      	ldrb	r2, [r7, #17]
 80176a2:	4968      	ldr	r1, [pc, #416]	; (8017844 <etharp_query+0x268>)
 80176a4:	4613      	mov	r3, r2
 80176a6:	005b      	lsls	r3, r3, #1
 80176a8:	4413      	add	r3, r2
 80176aa:	00db      	lsls	r3, r3, #3
 80176ac:	440b      	add	r3, r1
 80176ae:	3314      	adds	r3, #20
 80176b0:	781b      	ldrb	r3, [r3, #0]
 80176b2:	2b01      	cmp	r3, #1
 80176b4:	d011      	beq.n	80176da <etharp_query+0xfe>
 80176b6:	7c7a      	ldrb	r2, [r7, #17]
 80176b8:	4962      	ldr	r1, [pc, #392]	; (8017844 <etharp_query+0x268>)
 80176ba:	4613      	mov	r3, r2
 80176bc:	005b      	lsls	r3, r3, #1
 80176be:	4413      	add	r3, r2
 80176c0:	00db      	lsls	r3, r3, #3
 80176c2:	440b      	add	r3, r1
 80176c4:	3314      	adds	r3, #20
 80176c6:	781b      	ldrb	r3, [r3, #0]
 80176c8:	2b01      	cmp	r3, #1
 80176ca:	d806      	bhi.n	80176da <etharp_query+0xfe>
 80176cc:	4b5a      	ldr	r3, [pc, #360]	; (8017838 <etharp_query+0x25c>)
 80176ce:	f240 32cd 	movw	r2, #973	; 0x3cd
 80176d2:	495d      	ldr	r1, [pc, #372]	; (8017848 <etharp_query+0x26c>)
 80176d4:	485a      	ldr	r0, [pc, #360]	; (8017840 <etharp_query+0x264>)
 80176d6:	f002 fa5b 	bl	8019b90 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80176da:	6a3b      	ldr	r3, [r7, #32]
 80176dc:	2b00      	cmp	r3, #0
 80176de:	d102      	bne.n	80176e6 <etharp_query+0x10a>
 80176e0:	687b      	ldr	r3, [r7, #4]
 80176e2:	2b00      	cmp	r3, #0
 80176e4:	d10c      	bne.n	8017700 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80176e6:	68b9      	ldr	r1, [r7, #8]
 80176e8:	68f8      	ldr	r0, [r7, #12]
 80176ea:	f000 f963 	bl	80179b4 <etharp_request>
 80176ee:	4603      	mov	r3, r0
 80176f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80176f4:	687b      	ldr	r3, [r7, #4]
 80176f6:	2b00      	cmp	r3, #0
 80176f8:	d102      	bne.n	8017700 <etharp_query+0x124>
      return result;
 80176fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80176fe:	e096      	b.n	801782e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8017700:	687b      	ldr	r3, [r7, #4]
 8017702:	2b00      	cmp	r3, #0
 8017704:	d106      	bne.n	8017714 <etharp_query+0x138>
 8017706:	4b4c      	ldr	r3, [pc, #304]	; (8017838 <etharp_query+0x25c>)
 8017708:	f240 32e1 	movw	r2, #993	; 0x3e1
 801770c:	494f      	ldr	r1, [pc, #316]	; (801784c <etharp_query+0x270>)
 801770e:	484c      	ldr	r0, [pc, #304]	; (8017840 <etharp_query+0x264>)
 8017710:	f002 fa3e 	bl	8019b90 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8017714:	7c7a      	ldrb	r2, [r7, #17]
 8017716:	494b      	ldr	r1, [pc, #300]	; (8017844 <etharp_query+0x268>)
 8017718:	4613      	mov	r3, r2
 801771a:	005b      	lsls	r3, r3, #1
 801771c:	4413      	add	r3, r2
 801771e:	00db      	lsls	r3, r3, #3
 8017720:	440b      	add	r3, r1
 8017722:	3314      	adds	r3, #20
 8017724:	781b      	ldrb	r3, [r3, #0]
 8017726:	2b01      	cmp	r3, #1
 8017728:	d917      	bls.n	801775a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801772a:	4a49      	ldr	r2, [pc, #292]	; (8017850 <etharp_query+0x274>)
 801772c:	7c7b      	ldrb	r3, [r7, #17]
 801772e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8017730:	7c7a      	ldrb	r2, [r7, #17]
 8017732:	4613      	mov	r3, r2
 8017734:	005b      	lsls	r3, r3, #1
 8017736:	4413      	add	r3, r2
 8017738:	00db      	lsls	r3, r3, #3
 801773a:	3308      	adds	r3, #8
 801773c:	4a41      	ldr	r2, [pc, #260]	; (8017844 <etharp_query+0x268>)
 801773e:	4413      	add	r3, r2
 8017740:	3304      	adds	r3, #4
 8017742:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017746:	9200      	str	r2, [sp, #0]
 8017748:	697a      	ldr	r2, [r7, #20]
 801774a:	6879      	ldr	r1, [r7, #4]
 801774c:	68f8      	ldr	r0, [r7, #12]
 801774e:	f001 fc9b 	bl	8019088 <ethernet_output>
 8017752:	4603      	mov	r3, r0
 8017754:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017758:	e067      	b.n	801782a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801775a:	7c7a      	ldrb	r2, [r7, #17]
 801775c:	4939      	ldr	r1, [pc, #228]	; (8017844 <etharp_query+0x268>)
 801775e:	4613      	mov	r3, r2
 8017760:	005b      	lsls	r3, r3, #1
 8017762:	4413      	add	r3, r2
 8017764:	00db      	lsls	r3, r3, #3
 8017766:	440b      	add	r3, r1
 8017768:	3314      	adds	r3, #20
 801776a:	781b      	ldrb	r3, [r3, #0]
 801776c:	2b01      	cmp	r3, #1
 801776e:	d15c      	bne.n	801782a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8017770:	2300      	movs	r3, #0
 8017772:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8017774:	687b      	ldr	r3, [r7, #4]
 8017776:	61fb      	str	r3, [r7, #28]
    while (p) {
 8017778:	e01c      	b.n	80177b4 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801777a:	69fb      	ldr	r3, [r7, #28]
 801777c:	895a      	ldrh	r2, [r3, #10]
 801777e:	69fb      	ldr	r3, [r7, #28]
 8017780:	891b      	ldrh	r3, [r3, #8]
 8017782:	429a      	cmp	r2, r3
 8017784:	d10a      	bne.n	801779c <etharp_query+0x1c0>
 8017786:	69fb      	ldr	r3, [r7, #28]
 8017788:	681b      	ldr	r3, [r3, #0]
 801778a:	2b00      	cmp	r3, #0
 801778c:	d006      	beq.n	801779c <etharp_query+0x1c0>
 801778e:	4b2a      	ldr	r3, [pc, #168]	; (8017838 <etharp_query+0x25c>)
 8017790:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8017794:	492f      	ldr	r1, [pc, #188]	; (8017854 <etharp_query+0x278>)
 8017796:	482a      	ldr	r0, [pc, #168]	; (8017840 <etharp_query+0x264>)
 8017798:	f002 f9fa 	bl	8019b90 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801779c:	69fb      	ldr	r3, [r7, #28]
 801779e:	7b1b      	ldrb	r3, [r3, #12]
 80177a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80177a4:	2b00      	cmp	r3, #0
 80177a6:	d002      	beq.n	80177ae <etharp_query+0x1d2>
        copy_needed = 1;
 80177a8:	2301      	movs	r3, #1
 80177aa:	61bb      	str	r3, [r7, #24]
        break;
 80177ac:	e005      	b.n	80177ba <etharp_query+0x1de>
      }
      p = p->next;
 80177ae:	69fb      	ldr	r3, [r7, #28]
 80177b0:	681b      	ldr	r3, [r3, #0]
 80177b2:	61fb      	str	r3, [r7, #28]
    while (p) {
 80177b4:	69fb      	ldr	r3, [r7, #28]
 80177b6:	2b00      	cmp	r3, #0
 80177b8:	d1df      	bne.n	801777a <etharp_query+0x19e>
    }
    if (copy_needed) {
 80177ba:	69bb      	ldr	r3, [r7, #24]
 80177bc:	2b00      	cmp	r3, #0
 80177be:	d007      	beq.n	80177d0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80177c0:	687a      	ldr	r2, [r7, #4]
 80177c2:	f44f 7120 	mov.w	r1, #640	; 0x280
 80177c6:	200e      	movs	r0, #14
 80177c8:	f7f9 fd24 	bl	8011214 <pbuf_clone>
 80177cc:	61f8      	str	r0, [r7, #28]
 80177ce:	e004      	b.n	80177da <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80177d0:	687b      	ldr	r3, [r7, #4]
 80177d2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80177d4:	69f8      	ldr	r0, [r7, #28]
 80177d6:	f7f9 fb61 	bl	8010e9c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80177da:	69fb      	ldr	r3, [r7, #28]
 80177dc:	2b00      	cmp	r3, #0
 80177de:	d021      	beq.n	8017824 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80177e0:	7c7a      	ldrb	r2, [r7, #17]
 80177e2:	4918      	ldr	r1, [pc, #96]	; (8017844 <etharp_query+0x268>)
 80177e4:	4613      	mov	r3, r2
 80177e6:	005b      	lsls	r3, r3, #1
 80177e8:	4413      	add	r3, r2
 80177ea:	00db      	lsls	r3, r3, #3
 80177ec:	440b      	add	r3, r1
 80177ee:	681b      	ldr	r3, [r3, #0]
 80177f0:	2b00      	cmp	r3, #0
 80177f2:	d00a      	beq.n	801780a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80177f4:	7c7a      	ldrb	r2, [r7, #17]
 80177f6:	4913      	ldr	r1, [pc, #76]	; (8017844 <etharp_query+0x268>)
 80177f8:	4613      	mov	r3, r2
 80177fa:	005b      	lsls	r3, r3, #1
 80177fc:	4413      	add	r3, r2
 80177fe:	00db      	lsls	r3, r3, #3
 8017800:	440b      	add	r3, r1
 8017802:	681b      	ldr	r3, [r3, #0]
 8017804:	4618      	mov	r0, r3
 8017806:	f7f9 faa9 	bl	8010d5c <pbuf_free>
      }
      arp_table[i].q = p;
 801780a:	7c7a      	ldrb	r2, [r7, #17]
 801780c:	490d      	ldr	r1, [pc, #52]	; (8017844 <etharp_query+0x268>)
 801780e:	4613      	mov	r3, r2
 8017810:	005b      	lsls	r3, r3, #1
 8017812:	4413      	add	r3, r2
 8017814:	00db      	lsls	r3, r3, #3
 8017816:	440b      	add	r3, r1
 8017818:	69fa      	ldr	r2, [r7, #28]
 801781a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801781c:	2300      	movs	r3, #0
 801781e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017822:	e002      	b.n	801782a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8017824:	23ff      	movs	r3, #255	; 0xff
 8017826:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801782a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801782e:	4618      	mov	r0, r3
 8017830:	3728      	adds	r7, #40	; 0x28
 8017832:	46bd      	mov	sp, r7
 8017834:	bd80      	pop	{r7, pc}
 8017836:	bf00      	nop
 8017838:	0801e784 	.word	0x0801e784
 801783c:	0801e930 	.word	0x0801e930
 8017840:	0801e7fc 	.word	0x0801e7fc
 8017844:	200070a4 	.word	0x200070a4
 8017848:	0801e940 	.word	0x0801e940
 801784c:	0801e924 	.word	0x0801e924
 8017850:	20007194 	.word	0x20007194
 8017854:	0801e968 	.word	0x0801e968

08017858 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8017858:	b580      	push	{r7, lr}
 801785a:	b08a      	sub	sp, #40	; 0x28
 801785c:	af02      	add	r7, sp, #8
 801785e:	60f8      	str	r0, [r7, #12]
 8017860:	60b9      	str	r1, [r7, #8]
 8017862:	607a      	str	r2, [r7, #4]
 8017864:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8017866:	2300      	movs	r3, #0
 8017868:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801786a:	68fb      	ldr	r3, [r7, #12]
 801786c:	2b00      	cmp	r3, #0
 801786e:	d106      	bne.n	801787e <etharp_raw+0x26>
 8017870:	4b3a      	ldr	r3, [pc, #232]	; (801795c <etharp_raw+0x104>)
 8017872:	f240 4257 	movw	r2, #1111	; 0x457
 8017876:	493a      	ldr	r1, [pc, #232]	; (8017960 <etharp_raw+0x108>)
 8017878:	483a      	ldr	r0, [pc, #232]	; (8017964 <etharp_raw+0x10c>)
 801787a:	f002 f989 	bl	8019b90 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801787e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017882:	211c      	movs	r1, #28
 8017884:	200e      	movs	r0, #14
 8017886:	f7f8 ff85 	bl	8010794 <pbuf_alloc>
 801788a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801788c:	69bb      	ldr	r3, [r7, #24]
 801788e:	2b00      	cmp	r3, #0
 8017890:	d102      	bne.n	8017898 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8017892:	f04f 33ff 	mov.w	r3, #4294967295
 8017896:	e05d      	b.n	8017954 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8017898:	69bb      	ldr	r3, [r7, #24]
 801789a:	895b      	ldrh	r3, [r3, #10]
 801789c:	2b1b      	cmp	r3, #27
 801789e:	d806      	bhi.n	80178ae <etharp_raw+0x56>
 80178a0:	4b2e      	ldr	r3, [pc, #184]	; (801795c <etharp_raw+0x104>)
 80178a2:	f240 4262 	movw	r2, #1122	; 0x462
 80178a6:	4930      	ldr	r1, [pc, #192]	; (8017968 <etharp_raw+0x110>)
 80178a8:	482e      	ldr	r0, [pc, #184]	; (8017964 <etharp_raw+0x10c>)
 80178aa:	f002 f971 	bl	8019b90 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80178ae:	69bb      	ldr	r3, [r7, #24]
 80178b0:	685b      	ldr	r3, [r3, #4]
 80178b2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80178b4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80178b6:	4618      	mov	r0, r3
 80178b8:	f7f7 fe4c 	bl	800f554 <lwip_htons>
 80178bc:	4603      	mov	r3, r0
 80178be:	461a      	mov	r2, r3
 80178c0:	697b      	ldr	r3, [r7, #20]
 80178c2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80178c4:	68fb      	ldr	r3, [r7, #12]
 80178c6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80178ca:	2b06      	cmp	r3, #6
 80178cc:	d006      	beq.n	80178dc <etharp_raw+0x84>
 80178ce:	4b23      	ldr	r3, [pc, #140]	; (801795c <etharp_raw+0x104>)
 80178d0:	f240 4269 	movw	r2, #1129	; 0x469
 80178d4:	4925      	ldr	r1, [pc, #148]	; (801796c <etharp_raw+0x114>)
 80178d6:	4823      	ldr	r0, [pc, #140]	; (8017964 <etharp_raw+0x10c>)
 80178d8:	f002 f95a 	bl	8019b90 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80178dc:	697b      	ldr	r3, [r7, #20]
 80178de:	3308      	adds	r3, #8
 80178e0:	2206      	movs	r2, #6
 80178e2:	6839      	ldr	r1, [r7, #0]
 80178e4:	4618      	mov	r0, r3
 80178e6:	f002 fb22 	bl	8019f2e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80178ea:	697b      	ldr	r3, [r7, #20]
 80178ec:	3312      	adds	r3, #18
 80178ee:	2206      	movs	r2, #6
 80178f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80178f2:	4618      	mov	r0, r3
 80178f4:	f002 fb1b 	bl	8019f2e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80178f8:	697b      	ldr	r3, [r7, #20]
 80178fa:	330e      	adds	r3, #14
 80178fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80178fe:	6812      	ldr	r2, [r2, #0]
 8017900:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8017902:	697b      	ldr	r3, [r7, #20]
 8017904:	3318      	adds	r3, #24
 8017906:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017908:	6812      	ldr	r2, [r2, #0]
 801790a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801790c:	697b      	ldr	r3, [r7, #20]
 801790e:	2200      	movs	r2, #0
 8017910:	701a      	strb	r2, [r3, #0]
 8017912:	2200      	movs	r2, #0
 8017914:	f042 0201 	orr.w	r2, r2, #1
 8017918:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801791a:	697b      	ldr	r3, [r7, #20]
 801791c:	2200      	movs	r2, #0
 801791e:	f042 0208 	orr.w	r2, r2, #8
 8017922:	709a      	strb	r2, [r3, #2]
 8017924:	2200      	movs	r2, #0
 8017926:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8017928:	697b      	ldr	r3, [r7, #20]
 801792a:	2206      	movs	r2, #6
 801792c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801792e:	697b      	ldr	r3, [r7, #20]
 8017930:	2204      	movs	r2, #4
 8017932:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8017934:	f640 0306 	movw	r3, #2054	; 0x806
 8017938:	9300      	str	r3, [sp, #0]
 801793a:	687b      	ldr	r3, [r7, #4]
 801793c:	68ba      	ldr	r2, [r7, #8]
 801793e:	69b9      	ldr	r1, [r7, #24]
 8017940:	68f8      	ldr	r0, [r7, #12]
 8017942:	f001 fba1 	bl	8019088 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8017946:	69b8      	ldr	r0, [r7, #24]
 8017948:	f7f9 fa08 	bl	8010d5c <pbuf_free>
  p = NULL;
 801794c:	2300      	movs	r3, #0
 801794e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8017950:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8017954:	4618      	mov	r0, r3
 8017956:	3720      	adds	r7, #32
 8017958:	46bd      	mov	sp, r7
 801795a:	bd80      	pop	{r7, pc}
 801795c:	0801e784 	.word	0x0801e784
 8017960:	0801e8d4 	.word	0x0801e8d4
 8017964:	0801e7fc 	.word	0x0801e7fc
 8017968:	0801e984 	.word	0x0801e984
 801796c:	0801e9b8 	.word	0x0801e9b8

08017970 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8017970:	b580      	push	{r7, lr}
 8017972:	b088      	sub	sp, #32
 8017974:	af04      	add	r7, sp, #16
 8017976:	60f8      	str	r0, [r7, #12]
 8017978:	60b9      	str	r1, [r7, #8]
 801797a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801797c:	68fb      	ldr	r3, [r7, #12]
 801797e:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8017982:	68fb      	ldr	r3, [r7, #12]
 8017984:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8017988:	68fb      	ldr	r3, [r7, #12]
 801798a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801798c:	2201      	movs	r2, #1
 801798e:	9203      	str	r2, [sp, #12]
 8017990:	68ba      	ldr	r2, [r7, #8]
 8017992:	9202      	str	r2, [sp, #8]
 8017994:	4a06      	ldr	r2, [pc, #24]	; (80179b0 <etharp_request_dst+0x40>)
 8017996:	9201      	str	r2, [sp, #4]
 8017998:	9300      	str	r3, [sp, #0]
 801799a:	4603      	mov	r3, r0
 801799c:	687a      	ldr	r2, [r7, #4]
 801799e:	68f8      	ldr	r0, [r7, #12]
 80179a0:	f7ff ff5a 	bl	8017858 <etharp_raw>
 80179a4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80179a6:	4618      	mov	r0, r3
 80179a8:	3710      	adds	r7, #16
 80179aa:	46bd      	mov	sp, r7
 80179ac:	bd80      	pop	{r7, pc}
 80179ae:	bf00      	nop
 80179b0:	0801ef88 	.word	0x0801ef88

080179b4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80179b4:	b580      	push	{r7, lr}
 80179b6:	b082      	sub	sp, #8
 80179b8:	af00      	add	r7, sp, #0
 80179ba:	6078      	str	r0, [r7, #4]
 80179bc:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80179be:	4a05      	ldr	r2, [pc, #20]	; (80179d4 <etharp_request+0x20>)
 80179c0:	6839      	ldr	r1, [r7, #0]
 80179c2:	6878      	ldr	r0, [r7, #4]
 80179c4:	f7ff ffd4 	bl	8017970 <etharp_request_dst>
 80179c8:	4603      	mov	r3, r0
}
 80179ca:	4618      	mov	r0, r3
 80179cc:	3708      	adds	r7, #8
 80179ce:	46bd      	mov	sp, r7
 80179d0:	bd80      	pop	{r7, pc}
 80179d2:	bf00      	nop
 80179d4:	0801ef80 	.word	0x0801ef80

080179d8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80179d8:	b580      	push	{r7, lr}
 80179da:	b08e      	sub	sp, #56	; 0x38
 80179dc:	af04      	add	r7, sp, #16
 80179de:	6078      	str	r0, [r7, #4]
 80179e0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80179e2:	4b87      	ldr	r3, [pc, #540]	; (8017c00 <icmp_input+0x228>)
 80179e4:	689b      	ldr	r3, [r3, #8]
 80179e6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80179e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179ea:	781b      	ldrb	r3, [r3, #0]
 80179ec:	f003 030f 	and.w	r3, r3, #15
 80179f0:	b2db      	uxtb	r3, r3
 80179f2:	009b      	lsls	r3, r3, #2
 80179f4:	b2db      	uxtb	r3, r3
 80179f6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80179f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80179fa:	2b13      	cmp	r3, #19
 80179fc:	f240 80e8 	bls.w	8017bd0 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8017a00:	687b      	ldr	r3, [r7, #4]
 8017a02:	895b      	ldrh	r3, [r3, #10]
 8017a04:	2b03      	cmp	r3, #3
 8017a06:	f240 80e5 	bls.w	8017bd4 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8017a0a:	687b      	ldr	r3, [r7, #4]
 8017a0c:	685b      	ldr	r3, [r3, #4]
 8017a0e:	781b      	ldrb	r3, [r3, #0]
 8017a10:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8017a14:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8017a18:	2b00      	cmp	r3, #0
 8017a1a:	f000 80d2 	beq.w	8017bc2 <icmp_input+0x1ea>
 8017a1e:	2b08      	cmp	r3, #8
 8017a20:	f040 80d2 	bne.w	8017bc8 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8017a24:	4b77      	ldr	r3, [pc, #476]	; (8017c04 <icmp_input+0x22c>)
 8017a26:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017a28:	4b75      	ldr	r3, [pc, #468]	; (8017c00 <icmp_input+0x228>)
 8017a2a:	695b      	ldr	r3, [r3, #20]
 8017a2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017a30:	2be0      	cmp	r3, #224	; 0xe0
 8017a32:	f000 80d6 	beq.w	8017be2 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8017a36:	4b72      	ldr	r3, [pc, #456]	; (8017c00 <icmp_input+0x228>)
 8017a38:	695b      	ldr	r3, [r3, #20]
 8017a3a:	4a71      	ldr	r2, [pc, #452]	; (8017c00 <icmp_input+0x228>)
 8017a3c:	6812      	ldr	r2, [r2, #0]
 8017a3e:	4611      	mov	r1, r2
 8017a40:	4618      	mov	r0, r3
 8017a42:	f000 fc13 	bl	801826c <ip4_addr_isbroadcast_u32>
 8017a46:	4603      	mov	r3, r0
 8017a48:	2b00      	cmp	r3, #0
 8017a4a:	f040 80cc 	bne.w	8017be6 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8017a4e:	687b      	ldr	r3, [r7, #4]
 8017a50:	891b      	ldrh	r3, [r3, #8]
 8017a52:	2b07      	cmp	r3, #7
 8017a54:	f240 80c0 	bls.w	8017bd8 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8017a58:	6878      	ldr	r0, [r7, #4]
 8017a5a:	f7f7 fe18 	bl	800f68e <inet_chksum_pbuf>
 8017a5e:	4603      	mov	r3, r0
 8017a60:	2b00      	cmp	r3, #0
 8017a62:	d003      	beq.n	8017a6c <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8017a64:	6878      	ldr	r0, [r7, #4]
 8017a66:	f7f9 f979 	bl	8010d5c <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8017a6a:	e0c5      	b.n	8017bf8 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017a6c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017a6e:	330e      	adds	r3, #14
 8017a70:	4619      	mov	r1, r3
 8017a72:	6878      	ldr	r0, [r7, #4]
 8017a74:	f7f9 f8dc 	bl	8010c30 <pbuf_add_header>
 8017a78:	4603      	mov	r3, r0
 8017a7a:	2b00      	cmp	r3, #0
 8017a7c:	d04b      	beq.n	8017b16 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8017a7e:	687b      	ldr	r3, [r7, #4]
 8017a80:	891a      	ldrh	r2, [r3, #8]
 8017a82:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017a84:	4413      	add	r3, r2
 8017a86:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8017a88:	687b      	ldr	r3, [r7, #4]
 8017a8a:	891b      	ldrh	r3, [r3, #8]
 8017a8c:	8b7a      	ldrh	r2, [r7, #26]
 8017a8e:	429a      	cmp	r2, r3
 8017a90:	f0c0 80ab 	bcc.w	8017bea <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8017a94:	8b7b      	ldrh	r3, [r7, #26]
 8017a96:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017a9a:	4619      	mov	r1, r3
 8017a9c:	200e      	movs	r0, #14
 8017a9e:	f7f8 fe79 	bl	8010794 <pbuf_alloc>
 8017aa2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8017aa4:	697b      	ldr	r3, [r7, #20]
 8017aa6:	2b00      	cmp	r3, #0
 8017aa8:	f000 80a1 	beq.w	8017bee <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8017aac:	697b      	ldr	r3, [r7, #20]
 8017aae:	895b      	ldrh	r3, [r3, #10]
 8017ab0:	461a      	mov	r2, r3
 8017ab2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017ab4:	3308      	adds	r3, #8
 8017ab6:	429a      	cmp	r2, r3
 8017ab8:	d203      	bcs.n	8017ac2 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8017aba:	6978      	ldr	r0, [r7, #20]
 8017abc:	f7f9 f94e 	bl	8010d5c <pbuf_free>
          goto icmperr;
 8017ac0:	e096      	b.n	8017bf0 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8017ac2:	697b      	ldr	r3, [r7, #20]
 8017ac4:	685b      	ldr	r3, [r3, #4]
 8017ac6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8017ac8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017aca:	4618      	mov	r0, r3
 8017acc:	f002 fa2f 	bl	8019f2e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8017ad0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017ad2:	4619      	mov	r1, r3
 8017ad4:	6978      	ldr	r0, [r7, #20]
 8017ad6:	f7f9 f8bb 	bl	8010c50 <pbuf_remove_header>
 8017ada:	4603      	mov	r3, r0
 8017adc:	2b00      	cmp	r3, #0
 8017ade:	d009      	beq.n	8017af4 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8017ae0:	4b49      	ldr	r3, [pc, #292]	; (8017c08 <icmp_input+0x230>)
 8017ae2:	22b6      	movs	r2, #182	; 0xb6
 8017ae4:	4949      	ldr	r1, [pc, #292]	; (8017c0c <icmp_input+0x234>)
 8017ae6:	484a      	ldr	r0, [pc, #296]	; (8017c10 <icmp_input+0x238>)
 8017ae8:	f002 f852 	bl	8019b90 <iprintf>
          pbuf_free(r);
 8017aec:	6978      	ldr	r0, [r7, #20]
 8017aee:	f7f9 f935 	bl	8010d5c <pbuf_free>
          goto icmperr;
 8017af2:	e07d      	b.n	8017bf0 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8017af4:	6879      	ldr	r1, [r7, #4]
 8017af6:	6978      	ldr	r0, [r7, #20]
 8017af8:	f7f9 fa48 	bl	8010f8c <pbuf_copy>
 8017afc:	4603      	mov	r3, r0
 8017afe:	2b00      	cmp	r3, #0
 8017b00:	d003      	beq.n	8017b0a <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8017b02:	6978      	ldr	r0, [r7, #20]
 8017b04:	f7f9 f92a 	bl	8010d5c <pbuf_free>
          goto icmperr;
 8017b08:	e072      	b.n	8017bf0 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8017b0a:	6878      	ldr	r0, [r7, #4]
 8017b0c:	f7f9 f926 	bl	8010d5c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8017b10:	697b      	ldr	r3, [r7, #20]
 8017b12:	607b      	str	r3, [r7, #4]
 8017b14:	e00f      	b.n	8017b36 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017b16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017b18:	330e      	adds	r3, #14
 8017b1a:	4619      	mov	r1, r3
 8017b1c:	6878      	ldr	r0, [r7, #4]
 8017b1e:	f7f9 f897 	bl	8010c50 <pbuf_remove_header>
 8017b22:	4603      	mov	r3, r0
 8017b24:	2b00      	cmp	r3, #0
 8017b26:	d006      	beq.n	8017b36 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8017b28:	4b37      	ldr	r3, [pc, #220]	; (8017c08 <icmp_input+0x230>)
 8017b2a:	22c7      	movs	r2, #199	; 0xc7
 8017b2c:	4939      	ldr	r1, [pc, #228]	; (8017c14 <icmp_input+0x23c>)
 8017b2e:	4838      	ldr	r0, [pc, #224]	; (8017c10 <icmp_input+0x238>)
 8017b30:	f002 f82e 	bl	8019b90 <iprintf>
          goto icmperr;
 8017b34:	e05c      	b.n	8017bf0 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8017b36:	687b      	ldr	r3, [r7, #4]
 8017b38:	685b      	ldr	r3, [r3, #4]
 8017b3a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8017b3c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017b3e:	4619      	mov	r1, r3
 8017b40:	6878      	ldr	r0, [r7, #4]
 8017b42:	f7f9 f875 	bl	8010c30 <pbuf_add_header>
 8017b46:	4603      	mov	r3, r0
 8017b48:	2b00      	cmp	r3, #0
 8017b4a:	d13c      	bne.n	8017bc6 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8017b4c:	687b      	ldr	r3, [r7, #4]
 8017b4e:	685b      	ldr	r3, [r3, #4]
 8017b50:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8017b52:	69fb      	ldr	r3, [r7, #28]
 8017b54:	681a      	ldr	r2, [r3, #0]
 8017b56:	68fb      	ldr	r3, [r7, #12]
 8017b58:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8017b5a:	4b29      	ldr	r3, [pc, #164]	; (8017c00 <icmp_input+0x228>)
 8017b5c:	691a      	ldr	r2, [r3, #16]
 8017b5e:	68fb      	ldr	r3, [r7, #12]
 8017b60:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8017b62:	693b      	ldr	r3, [r7, #16]
 8017b64:	2200      	movs	r2, #0
 8017b66:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8017b68:	693b      	ldr	r3, [r7, #16]
 8017b6a:	885b      	ldrh	r3, [r3, #2]
 8017b6c:	b29b      	uxth	r3, r3
 8017b6e:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8017b72:	4293      	cmp	r3, r2
 8017b74:	d907      	bls.n	8017b86 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8017b76:	693b      	ldr	r3, [r7, #16]
 8017b78:	885b      	ldrh	r3, [r3, #2]
 8017b7a:	b29b      	uxth	r3, r3
 8017b7c:	3309      	adds	r3, #9
 8017b7e:	b29a      	uxth	r2, r3
 8017b80:	693b      	ldr	r3, [r7, #16]
 8017b82:	805a      	strh	r2, [r3, #2]
 8017b84:	e006      	b.n	8017b94 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8017b86:	693b      	ldr	r3, [r7, #16]
 8017b88:	885b      	ldrh	r3, [r3, #2]
 8017b8a:	b29b      	uxth	r3, r3
 8017b8c:	3308      	adds	r3, #8
 8017b8e:	b29a      	uxth	r2, r3
 8017b90:	693b      	ldr	r3, [r7, #16]
 8017b92:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8017b94:	68fb      	ldr	r3, [r7, #12]
 8017b96:	22ff      	movs	r2, #255	; 0xff
 8017b98:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8017b9a:	68fb      	ldr	r3, [r7, #12]
 8017b9c:	2200      	movs	r2, #0
 8017b9e:	729a      	strb	r2, [r3, #10]
 8017ba0:	2200      	movs	r2, #0
 8017ba2:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8017ba4:	683b      	ldr	r3, [r7, #0]
 8017ba6:	9302      	str	r3, [sp, #8]
 8017ba8:	2301      	movs	r3, #1
 8017baa:	9301      	str	r3, [sp, #4]
 8017bac:	2300      	movs	r3, #0
 8017bae:	9300      	str	r3, [sp, #0]
 8017bb0:	23ff      	movs	r3, #255	; 0xff
 8017bb2:	2200      	movs	r2, #0
 8017bb4:	69f9      	ldr	r1, [r7, #28]
 8017bb6:	6878      	ldr	r0, [r7, #4]
 8017bb8:	f000 fa80 	bl	80180bc <ip4_output_if>
 8017bbc:	4603      	mov	r3, r0
 8017bbe:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8017bc0:	e001      	b.n	8017bc6 <icmp_input+0x1ee>
      break;
 8017bc2:	bf00      	nop
 8017bc4:	e000      	b.n	8017bc8 <icmp_input+0x1f0>
      break;
 8017bc6:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8017bc8:	6878      	ldr	r0, [r7, #4]
 8017bca:	f7f9 f8c7 	bl	8010d5c <pbuf_free>
  return;
 8017bce:	e013      	b.n	8017bf8 <icmp_input+0x220>
    goto lenerr;
 8017bd0:	bf00      	nop
 8017bd2:	e002      	b.n	8017bda <icmp_input+0x202>
    goto lenerr;
 8017bd4:	bf00      	nop
 8017bd6:	e000      	b.n	8017bda <icmp_input+0x202>
        goto lenerr;
 8017bd8:	bf00      	nop
lenerr:
  pbuf_free(p);
 8017bda:	6878      	ldr	r0, [r7, #4]
 8017bdc:	f7f9 f8be 	bl	8010d5c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017be0:	e00a      	b.n	8017bf8 <icmp_input+0x220>
        goto icmperr;
 8017be2:	bf00      	nop
 8017be4:	e004      	b.n	8017bf0 <icmp_input+0x218>
        goto icmperr;
 8017be6:	bf00      	nop
 8017be8:	e002      	b.n	8017bf0 <icmp_input+0x218>
          goto icmperr;
 8017bea:	bf00      	nop
 8017bec:	e000      	b.n	8017bf0 <icmp_input+0x218>
          goto icmperr;
 8017bee:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8017bf0:	6878      	ldr	r0, [r7, #4]
 8017bf2:	f7f9 f8b3 	bl	8010d5c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017bf6:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8017bf8:	3728      	adds	r7, #40	; 0x28
 8017bfa:	46bd      	mov	sp, r7
 8017bfc:	bd80      	pop	{r7, pc}
 8017bfe:	bf00      	nop
 8017c00:	20000768 	.word	0x20000768
 8017c04:	2000077c 	.word	0x2000077c
 8017c08:	0801e9fc 	.word	0x0801e9fc
 8017c0c:	0801ea34 	.word	0x0801ea34
 8017c10:	0801ea6c 	.word	0x0801ea6c
 8017c14:	0801ea94 	.word	0x0801ea94

08017c18 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8017c18:	b580      	push	{r7, lr}
 8017c1a:	b082      	sub	sp, #8
 8017c1c:	af00      	add	r7, sp, #0
 8017c1e:	6078      	str	r0, [r7, #4]
 8017c20:	460b      	mov	r3, r1
 8017c22:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8017c24:	78fb      	ldrb	r3, [r7, #3]
 8017c26:	461a      	mov	r2, r3
 8017c28:	2103      	movs	r1, #3
 8017c2a:	6878      	ldr	r0, [r7, #4]
 8017c2c:	f000 f814 	bl	8017c58 <icmp_send_response>
}
 8017c30:	bf00      	nop
 8017c32:	3708      	adds	r7, #8
 8017c34:	46bd      	mov	sp, r7
 8017c36:	bd80      	pop	{r7, pc}

08017c38 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8017c38:	b580      	push	{r7, lr}
 8017c3a:	b082      	sub	sp, #8
 8017c3c:	af00      	add	r7, sp, #0
 8017c3e:	6078      	str	r0, [r7, #4]
 8017c40:	460b      	mov	r3, r1
 8017c42:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8017c44:	78fb      	ldrb	r3, [r7, #3]
 8017c46:	461a      	mov	r2, r3
 8017c48:	210b      	movs	r1, #11
 8017c4a:	6878      	ldr	r0, [r7, #4]
 8017c4c:	f000 f804 	bl	8017c58 <icmp_send_response>
}
 8017c50:	bf00      	nop
 8017c52:	3708      	adds	r7, #8
 8017c54:	46bd      	mov	sp, r7
 8017c56:	bd80      	pop	{r7, pc}

08017c58 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8017c58:	b580      	push	{r7, lr}
 8017c5a:	b08c      	sub	sp, #48	; 0x30
 8017c5c:	af04      	add	r7, sp, #16
 8017c5e:	6078      	str	r0, [r7, #4]
 8017c60:	460b      	mov	r3, r1
 8017c62:	70fb      	strb	r3, [r7, #3]
 8017c64:	4613      	mov	r3, r2
 8017c66:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8017c68:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017c6c:	2124      	movs	r1, #36	; 0x24
 8017c6e:	2022      	movs	r0, #34	; 0x22
 8017c70:	f7f8 fd90 	bl	8010794 <pbuf_alloc>
 8017c74:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8017c76:	69fb      	ldr	r3, [r7, #28]
 8017c78:	2b00      	cmp	r3, #0
 8017c7a:	d056      	beq.n	8017d2a <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8017c7c:	69fb      	ldr	r3, [r7, #28]
 8017c7e:	895b      	ldrh	r3, [r3, #10]
 8017c80:	2b23      	cmp	r3, #35	; 0x23
 8017c82:	d806      	bhi.n	8017c92 <icmp_send_response+0x3a>
 8017c84:	4b2b      	ldr	r3, [pc, #172]	; (8017d34 <icmp_send_response+0xdc>)
 8017c86:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8017c8a:	492b      	ldr	r1, [pc, #172]	; (8017d38 <icmp_send_response+0xe0>)
 8017c8c:	482b      	ldr	r0, [pc, #172]	; (8017d3c <icmp_send_response+0xe4>)
 8017c8e:	f001 ff7f 	bl	8019b90 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8017c92:	687b      	ldr	r3, [r7, #4]
 8017c94:	685b      	ldr	r3, [r3, #4]
 8017c96:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8017c98:	69fb      	ldr	r3, [r7, #28]
 8017c9a:	685b      	ldr	r3, [r3, #4]
 8017c9c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8017c9e:	697b      	ldr	r3, [r7, #20]
 8017ca0:	78fa      	ldrb	r2, [r7, #3]
 8017ca2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8017ca4:	697b      	ldr	r3, [r7, #20]
 8017ca6:	78ba      	ldrb	r2, [r7, #2]
 8017ca8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8017caa:	697b      	ldr	r3, [r7, #20]
 8017cac:	2200      	movs	r2, #0
 8017cae:	711a      	strb	r2, [r3, #4]
 8017cb0:	2200      	movs	r2, #0
 8017cb2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8017cb4:	697b      	ldr	r3, [r7, #20]
 8017cb6:	2200      	movs	r2, #0
 8017cb8:	719a      	strb	r2, [r3, #6]
 8017cba:	2200      	movs	r2, #0
 8017cbc:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8017cbe:	69fb      	ldr	r3, [r7, #28]
 8017cc0:	685b      	ldr	r3, [r3, #4]
 8017cc2:	f103 0008 	add.w	r0, r3, #8
 8017cc6:	687b      	ldr	r3, [r7, #4]
 8017cc8:	685b      	ldr	r3, [r3, #4]
 8017cca:	221c      	movs	r2, #28
 8017ccc:	4619      	mov	r1, r3
 8017cce:	f002 f92e 	bl	8019f2e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8017cd2:	69bb      	ldr	r3, [r7, #24]
 8017cd4:	68db      	ldr	r3, [r3, #12]
 8017cd6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8017cd8:	f107 030c 	add.w	r3, r7, #12
 8017cdc:	4618      	mov	r0, r3
 8017cde:	f000 f82f 	bl	8017d40 <ip4_route>
 8017ce2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8017ce4:	693b      	ldr	r3, [r7, #16]
 8017ce6:	2b00      	cmp	r3, #0
 8017ce8:	d01b      	beq.n	8017d22 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8017cea:	697b      	ldr	r3, [r7, #20]
 8017cec:	2200      	movs	r2, #0
 8017cee:	709a      	strb	r2, [r3, #2]
 8017cf0:	2200      	movs	r2, #0
 8017cf2:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8017cf4:	69fb      	ldr	r3, [r7, #28]
 8017cf6:	895b      	ldrh	r3, [r3, #10]
 8017cf8:	4619      	mov	r1, r3
 8017cfa:	6978      	ldr	r0, [r7, #20]
 8017cfc:	f7f7 fcb5 	bl	800f66a <inet_chksum>
 8017d00:	4603      	mov	r3, r0
 8017d02:	461a      	mov	r2, r3
 8017d04:	697b      	ldr	r3, [r7, #20]
 8017d06:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8017d08:	f107 020c 	add.w	r2, r7, #12
 8017d0c:	693b      	ldr	r3, [r7, #16]
 8017d0e:	9302      	str	r3, [sp, #8]
 8017d10:	2301      	movs	r3, #1
 8017d12:	9301      	str	r3, [sp, #4]
 8017d14:	2300      	movs	r3, #0
 8017d16:	9300      	str	r3, [sp, #0]
 8017d18:	23ff      	movs	r3, #255	; 0xff
 8017d1a:	2100      	movs	r1, #0
 8017d1c:	69f8      	ldr	r0, [r7, #28]
 8017d1e:	f000 f9cd 	bl	80180bc <ip4_output_if>
  }
  pbuf_free(q);
 8017d22:	69f8      	ldr	r0, [r7, #28]
 8017d24:	f7f9 f81a 	bl	8010d5c <pbuf_free>
 8017d28:	e000      	b.n	8017d2c <icmp_send_response+0xd4>
    return;
 8017d2a:	bf00      	nop
}
 8017d2c:	3720      	adds	r7, #32
 8017d2e:	46bd      	mov	sp, r7
 8017d30:	bd80      	pop	{r7, pc}
 8017d32:	bf00      	nop
 8017d34:	0801e9fc 	.word	0x0801e9fc
 8017d38:	0801eac8 	.word	0x0801eac8
 8017d3c:	0801ea6c 	.word	0x0801ea6c

08017d40 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8017d40:	b480      	push	{r7}
 8017d42:	b085      	sub	sp, #20
 8017d44:	af00      	add	r7, sp, #0
 8017d46:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8017d48:	4b33      	ldr	r3, [pc, #204]	; (8017e18 <ip4_route+0xd8>)
 8017d4a:	681b      	ldr	r3, [r3, #0]
 8017d4c:	60fb      	str	r3, [r7, #12]
 8017d4e:	e036      	b.n	8017dbe <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017d50:	68fb      	ldr	r3, [r7, #12]
 8017d52:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017d56:	f003 0301 	and.w	r3, r3, #1
 8017d5a:	b2db      	uxtb	r3, r3
 8017d5c:	2b00      	cmp	r3, #0
 8017d5e:	d02b      	beq.n	8017db8 <ip4_route+0x78>
 8017d60:	68fb      	ldr	r3, [r7, #12]
 8017d62:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017d66:	089b      	lsrs	r3, r3, #2
 8017d68:	f003 0301 	and.w	r3, r3, #1
 8017d6c:	b2db      	uxtb	r3, r3
 8017d6e:	2b00      	cmp	r3, #0
 8017d70:	d022      	beq.n	8017db8 <ip4_route+0x78>
 8017d72:	68fb      	ldr	r3, [r7, #12]
 8017d74:	3304      	adds	r3, #4
 8017d76:	681b      	ldr	r3, [r3, #0]
 8017d78:	2b00      	cmp	r3, #0
 8017d7a:	d01d      	beq.n	8017db8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8017d7c:	687b      	ldr	r3, [r7, #4]
 8017d7e:	681a      	ldr	r2, [r3, #0]
 8017d80:	68fb      	ldr	r3, [r7, #12]
 8017d82:	3304      	adds	r3, #4
 8017d84:	681b      	ldr	r3, [r3, #0]
 8017d86:	405a      	eors	r2, r3
 8017d88:	68fb      	ldr	r3, [r7, #12]
 8017d8a:	3308      	adds	r3, #8
 8017d8c:	681b      	ldr	r3, [r3, #0]
 8017d8e:	4013      	ands	r3, r2
 8017d90:	2b00      	cmp	r3, #0
 8017d92:	d101      	bne.n	8017d98 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8017d94:	68fb      	ldr	r3, [r7, #12]
 8017d96:	e038      	b.n	8017e0a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8017d98:	68fb      	ldr	r3, [r7, #12]
 8017d9a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017d9e:	f003 0302 	and.w	r3, r3, #2
 8017da2:	2b00      	cmp	r3, #0
 8017da4:	d108      	bne.n	8017db8 <ip4_route+0x78>
 8017da6:	687b      	ldr	r3, [r7, #4]
 8017da8:	681a      	ldr	r2, [r3, #0]
 8017daa:	68fb      	ldr	r3, [r7, #12]
 8017dac:	330c      	adds	r3, #12
 8017dae:	681b      	ldr	r3, [r3, #0]
 8017db0:	429a      	cmp	r2, r3
 8017db2:	d101      	bne.n	8017db8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8017db4:	68fb      	ldr	r3, [r7, #12]
 8017db6:	e028      	b.n	8017e0a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8017db8:	68fb      	ldr	r3, [r7, #12]
 8017dba:	681b      	ldr	r3, [r3, #0]
 8017dbc:	60fb      	str	r3, [r7, #12]
 8017dbe:	68fb      	ldr	r3, [r7, #12]
 8017dc0:	2b00      	cmp	r3, #0
 8017dc2:	d1c5      	bne.n	8017d50 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017dc4:	4b15      	ldr	r3, [pc, #84]	; (8017e1c <ip4_route+0xdc>)
 8017dc6:	681b      	ldr	r3, [r3, #0]
 8017dc8:	2b00      	cmp	r3, #0
 8017dca:	d01a      	beq.n	8017e02 <ip4_route+0xc2>
 8017dcc:	4b13      	ldr	r3, [pc, #76]	; (8017e1c <ip4_route+0xdc>)
 8017dce:	681b      	ldr	r3, [r3, #0]
 8017dd0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017dd4:	f003 0301 	and.w	r3, r3, #1
 8017dd8:	2b00      	cmp	r3, #0
 8017dda:	d012      	beq.n	8017e02 <ip4_route+0xc2>
 8017ddc:	4b0f      	ldr	r3, [pc, #60]	; (8017e1c <ip4_route+0xdc>)
 8017dde:	681b      	ldr	r3, [r3, #0]
 8017de0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017de4:	f003 0304 	and.w	r3, r3, #4
 8017de8:	2b00      	cmp	r3, #0
 8017dea:	d00a      	beq.n	8017e02 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017dec:	4b0b      	ldr	r3, [pc, #44]	; (8017e1c <ip4_route+0xdc>)
 8017dee:	681b      	ldr	r3, [r3, #0]
 8017df0:	3304      	adds	r3, #4
 8017df2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017df4:	2b00      	cmp	r3, #0
 8017df6:	d004      	beq.n	8017e02 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017df8:	687b      	ldr	r3, [r7, #4]
 8017dfa:	681b      	ldr	r3, [r3, #0]
 8017dfc:	b2db      	uxtb	r3, r3
 8017dfe:	2b7f      	cmp	r3, #127	; 0x7f
 8017e00:	d101      	bne.n	8017e06 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8017e02:	2300      	movs	r3, #0
 8017e04:	e001      	b.n	8017e0a <ip4_route+0xca>
  }

  return netif_default;
 8017e06:	4b05      	ldr	r3, [pc, #20]	; (8017e1c <ip4_route+0xdc>)
 8017e08:	681b      	ldr	r3, [r3, #0]
}
 8017e0a:	4618      	mov	r0, r3
 8017e0c:	3714      	adds	r7, #20
 8017e0e:	46bd      	mov	sp, r7
 8017e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e14:	4770      	bx	lr
 8017e16:	bf00      	nop
 8017e18:	20007038 	.word	0x20007038
 8017e1c:	2000703c 	.word	0x2000703c

08017e20 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8017e20:	b580      	push	{r7, lr}
 8017e22:	b082      	sub	sp, #8
 8017e24:	af00      	add	r7, sp, #0
 8017e26:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8017e28:	687b      	ldr	r3, [r7, #4]
 8017e2a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017e2e:	f003 0301 	and.w	r3, r3, #1
 8017e32:	b2db      	uxtb	r3, r3
 8017e34:	2b00      	cmp	r3, #0
 8017e36:	d016      	beq.n	8017e66 <ip4_input_accept+0x46>
 8017e38:	687b      	ldr	r3, [r7, #4]
 8017e3a:	3304      	adds	r3, #4
 8017e3c:	681b      	ldr	r3, [r3, #0]
 8017e3e:	2b00      	cmp	r3, #0
 8017e40:	d011      	beq.n	8017e66 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017e42:	4b0b      	ldr	r3, [pc, #44]	; (8017e70 <ip4_input_accept+0x50>)
 8017e44:	695a      	ldr	r2, [r3, #20]
 8017e46:	687b      	ldr	r3, [r7, #4]
 8017e48:	3304      	adds	r3, #4
 8017e4a:	681b      	ldr	r3, [r3, #0]
 8017e4c:	429a      	cmp	r2, r3
 8017e4e:	d008      	beq.n	8017e62 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8017e50:	4b07      	ldr	r3, [pc, #28]	; (8017e70 <ip4_input_accept+0x50>)
 8017e52:	695b      	ldr	r3, [r3, #20]
 8017e54:	6879      	ldr	r1, [r7, #4]
 8017e56:	4618      	mov	r0, r3
 8017e58:	f000 fa08 	bl	801826c <ip4_addr_isbroadcast_u32>
 8017e5c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017e5e:	2b00      	cmp	r3, #0
 8017e60:	d001      	beq.n	8017e66 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8017e62:	2301      	movs	r3, #1
 8017e64:	e000      	b.n	8017e68 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8017e66:	2300      	movs	r3, #0
}
 8017e68:	4618      	mov	r0, r3
 8017e6a:	3708      	adds	r7, #8
 8017e6c:	46bd      	mov	sp, r7
 8017e6e:	bd80      	pop	{r7, pc}
 8017e70:	20000768 	.word	0x20000768

08017e74 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8017e74:	b580      	push	{r7, lr}
 8017e76:	b086      	sub	sp, #24
 8017e78:	af00      	add	r7, sp, #0
 8017e7a:	6078      	str	r0, [r7, #4]
 8017e7c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8017e7e:	687b      	ldr	r3, [r7, #4]
 8017e80:	685b      	ldr	r3, [r3, #4]
 8017e82:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8017e84:	697b      	ldr	r3, [r7, #20]
 8017e86:	781b      	ldrb	r3, [r3, #0]
 8017e88:	091b      	lsrs	r3, r3, #4
 8017e8a:	b2db      	uxtb	r3, r3
 8017e8c:	2b04      	cmp	r3, #4
 8017e8e:	d004      	beq.n	8017e9a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8017e90:	6878      	ldr	r0, [r7, #4]
 8017e92:	f7f8 ff63 	bl	8010d5c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8017e96:	2300      	movs	r3, #0
 8017e98:	e107      	b.n	80180aa <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8017e9a:	697b      	ldr	r3, [r7, #20]
 8017e9c:	781b      	ldrb	r3, [r3, #0]
 8017e9e:	f003 030f 	and.w	r3, r3, #15
 8017ea2:	b2db      	uxtb	r3, r3
 8017ea4:	009b      	lsls	r3, r3, #2
 8017ea6:	b2db      	uxtb	r3, r3
 8017ea8:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8017eaa:	697b      	ldr	r3, [r7, #20]
 8017eac:	885b      	ldrh	r3, [r3, #2]
 8017eae:	b29b      	uxth	r3, r3
 8017eb0:	4618      	mov	r0, r3
 8017eb2:	f7f7 fb4f 	bl	800f554 <lwip_htons>
 8017eb6:	4603      	mov	r3, r0
 8017eb8:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8017eba:	687b      	ldr	r3, [r7, #4]
 8017ebc:	891b      	ldrh	r3, [r3, #8]
 8017ebe:	89ba      	ldrh	r2, [r7, #12]
 8017ec0:	429a      	cmp	r2, r3
 8017ec2:	d204      	bcs.n	8017ece <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8017ec4:	89bb      	ldrh	r3, [r7, #12]
 8017ec6:	4619      	mov	r1, r3
 8017ec8:	6878      	ldr	r0, [r7, #4]
 8017eca:	f7f8 fdc3 	bl	8010a54 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8017ece:	687b      	ldr	r3, [r7, #4]
 8017ed0:	895b      	ldrh	r3, [r3, #10]
 8017ed2:	89fa      	ldrh	r2, [r7, #14]
 8017ed4:	429a      	cmp	r2, r3
 8017ed6:	d807      	bhi.n	8017ee8 <ip4_input+0x74>
 8017ed8:	687b      	ldr	r3, [r7, #4]
 8017eda:	891b      	ldrh	r3, [r3, #8]
 8017edc:	89ba      	ldrh	r2, [r7, #12]
 8017ede:	429a      	cmp	r2, r3
 8017ee0:	d802      	bhi.n	8017ee8 <ip4_input+0x74>
 8017ee2:	89fb      	ldrh	r3, [r7, #14]
 8017ee4:	2b13      	cmp	r3, #19
 8017ee6:	d804      	bhi.n	8017ef2 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8017ee8:	6878      	ldr	r0, [r7, #4]
 8017eea:	f7f8 ff37 	bl	8010d5c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8017eee:	2300      	movs	r3, #0
 8017ef0:	e0db      	b.n	80180aa <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8017ef2:	697b      	ldr	r3, [r7, #20]
 8017ef4:	691b      	ldr	r3, [r3, #16]
 8017ef6:	4a6f      	ldr	r2, [pc, #444]	; (80180b4 <ip4_input+0x240>)
 8017ef8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8017efa:	697b      	ldr	r3, [r7, #20]
 8017efc:	68db      	ldr	r3, [r3, #12]
 8017efe:	4a6d      	ldr	r2, [pc, #436]	; (80180b4 <ip4_input+0x240>)
 8017f00:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017f02:	4b6c      	ldr	r3, [pc, #432]	; (80180b4 <ip4_input+0x240>)
 8017f04:	695b      	ldr	r3, [r3, #20]
 8017f06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017f0a:	2be0      	cmp	r3, #224	; 0xe0
 8017f0c:	d112      	bne.n	8017f34 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8017f0e:	683b      	ldr	r3, [r7, #0]
 8017f10:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017f14:	f003 0301 	and.w	r3, r3, #1
 8017f18:	b2db      	uxtb	r3, r3
 8017f1a:	2b00      	cmp	r3, #0
 8017f1c:	d007      	beq.n	8017f2e <ip4_input+0xba>
 8017f1e:	683b      	ldr	r3, [r7, #0]
 8017f20:	3304      	adds	r3, #4
 8017f22:	681b      	ldr	r3, [r3, #0]
 8017f24:	2b00      	cmp	r3, #0
 8017f26:	d002      	beq.n	8017f2e <ip4_input+0xba>
      netif = inp;
 8017f28:	683b      	ldr	r3, [r7, #0]
 8017f2a:	613b      	str	r3, [r7, #16]
 8017f2c:	e02a      	b.n	8017f84 <ip4_input+0x110>
    } else {
      netif = NULL;
 8017f2e:	2300      	movs	r3, #0
 8017f30:	613b      	str	r3, [r7, #16]
 8017f32:	e027      	b.n	8017f84 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8017f34:	6838      	ldr	r0, [r7, #0]
 8017f36:	f7ff ff73 	bl	8017e20 <ip4_input_accept>
 8017f3a:	4603      	mov	r3, r0
 8017f3c:	2b00      	cmp	r3, #0
 8017f3e:	d002      	beq.n	8017f46 <ip4_input+0xd2>
      netif = inp;
 8017f40:	683b      	ldr	r3, [r7, #0]
 8017f42:	613b      	str	r3, [r7, #16]
 8017f44:	e01e      	b.n	8017f84 <ip4_input+0x110>
    } else {
      netif = NULL;
 8017f46:	2300      	movs	r3, #0
 8017f48:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8017f4a:	4b5a      	ldr	r3, [pc, #360]	; (80180b4 <ip4_input+0x240>)
 8017f4c:	695b      	ldr	r3, [r3, #20]
 8017f4e:	b2db      	uxtb	r3, r3
 8017f50:	2b7f      	cmp	r3, #127	; 0x7f
 8017f52:	d017      	beq.n	8017f84 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8017f54:	4b58      	ldr	r3, [pc, #352]	; (80180b8 <ip4_input+0x244>)
 8017f56:	681b      	ldr	r3, [r3, #0]
 8017f58:	613b      	str	r3, [r7, #16]
 8017f5a:	e00e      	b.n	8017f7a <ip4_input+0x106>
          if (netif == inp) {
 8017f5c:	693a      	ldr	r2, [r7, #16]
 8017f5e:	683b      	ldr	r3, [r7, #0]
 8017f60:	429a      	cmp	r2, r3
 8017f62:	d006      	beq.n	8017f72 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8017f64:	6938      	ldr	r0, [r7, #16]
 8017f66:	f7ff ff5b 	bl	8017e20 <ip4_input_accept>
 8017f6a:	4603      	mov	r3, r0
 8017f6c:	2b00      	cmp	r3, #0
 8017f6e:	d108      	bne.n	8017f82 <ip4_input+0x10e>
 8017f70:	e000      	b.n	8017f74 <ip4_input+0x100>
            continue;
 8017f72:	bf00      	nop
        NETIF_FOREACH(netif) {
 8017f74:	693b      	ldr	r3, [r7, #16]
 8017f76:	681b      	ldr	r3, [r3, #0]
 8017f78:	613b      	str	r3, [r7, #16]
 8017f7a:	693b      	ldr	r3, [r7, #16]
 8017f7c:	2b00      	cmp	r3, #0
 8017f7e:	d1ed      	bne.n	8017f5c <ip4_input+0xe8>
 8017f80:	e000      	b.n	8017f84 <ip4_input+0x110>
            break;
 8017f82:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017f84:	4b4b      	ldr	r3, [pc, #300]	; (80180b4 <ip4_input+0x240>)
 8017f86:	691b      	ldr	r3, [r3, #16]
 8017f88:	6839      	ldr	r1, [r7, #0]
 8017f8a:	4618      	mov	r0, r3
 8017f8c:	f000 f96e 	bl	801826c <ip4_addr_isbroadcast_u32>
 8017f90:	4603      	mov	r3, r0
 8017f92:	2b00      	cmp	r3, #0
 8017f94:	d105      	bne.n	8017fa2 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8017f96:	4b47      	ldr	r3, [pc, #284]	; (80180b4 <ip4_input+0x240>)
 8017f98:	691b      	ldr	r3, [r3, #16]
 8017f9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017f9e:	2be0      	cmp	r3, #224	; 0xe0
 8017fa0:	d104      	bne.n	8017fac <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8017fa2:	6878      	ldr	r0, [r7, #4]
 8017fa4:	f7f8 feda 	bl	8010d5c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8017fa8:	2300      	movs	r3, #0
 8017faa:	e07e      	b.n	80180aa <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8017fac:	693b      	ldr	r3, [r7, #16]
 8017fae:	2b00      	cmp	r3, #0
 8017fb0:	d104      	bne.n	8017fbc <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8017fb2:	6878      	ldr	r0, [r7, #4]
 8017fb4:	f7f8 fed2 	bl	8010d5c <pbuf_free>
    return ERR_OK;
 8017fb8:	2300      	movs	r3, #0
 8017fba:	e076      	b.n	80180aa <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8017fbc:	697b      	ldr	r3, [r7, #20]
 8017fbe:	88db      	ldrh	r3, [r3, #6]
 8017fc0:	b29b      	uxth	r3, r3
 8017fc2:	461a      	mov	r2, r3
 8017fc4:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8017fc8:	4013      	ands	r3, r2
 8017fca:	2b00      	cmp	r3, #0
 8017fcc:	d00b      	beq.n	8017fe6 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8017fce:	6878      	ldr	r0, [r7, #4]
 8017fd0:	f000 fc92 	bl	80188f8 <ip4_reass>
 8017fd4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8017fd6:	687b      	ldr	r3, [r7, #4]
 8017fd8:	2b00      	cmp	r3, #0
 8017fda:	d101      	bne.n	8017fe0 <ip4_input+0x16c>
      return ERR_OK;
 8017fdc:	2300      	movs	r3, #0
 8017fde:	e064      	b.n	80180aa <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8017fe0:	687b      	ldr	r3, [r7, #4]
 8017fe2:	685b      	ldr	r3, [r3, #4]
 8017fe4:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8017fe6:	4a33      	ldr	r2, [pc, #204]	; (80180b4 <ip4_input+0x240>)
 8017fe8:	693b      	ldr	r3, [r7, #16]
 8017fea:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8017fec:	4a31      	ldr	r2, [pc, #196]	; (80180b4 <ip4_input+0x240>)
 8017fee:	683b      	ldr	r3, [r7, #0]
 8017ff0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8017ff2:	4a30      	ldr	r2, [pc, #192]	; (80180b4 <ip4_input+0x240>)
 8017ff4:	697b      	ldr	r3, [r7, #20]
 8017ff6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8017ff8:	697b      	ldr	r3, [r7, #20]
 8017ffa:	781b      	ldrb	r3, [r3, #0]
 8017ffc:	f003 030f 	and.w	r3, r3, #15
 8018000:	b2db      	uxtb	r3, r3
 8018002:	009b      	lsls	r3, r3, #2
 8018004:	b2db      	uxtb	r3, r3
 8018006:	b29a      	uxth	r2, r3
 8018008:	4b2a      	ldr	r3, [pc, #168]	; (80180b4 <ip4_input+0x240>)
 801800a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801800c:	89fb      	ldrh	r3, [r7, #14]
 801800e:	4619      	mov	r1, r3
 8018010:	6878      	ldr	r0, [r7, #4]
 8018012:	f7f8 fe1d 	bl	8010c50 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8018016:	697b      	ldr	r3, [r7, #20]
 8018018:	7a5b      	ldrb	r3, [r3, #9]
 801801a:	2b11      	cmp	r3, #17
 801801c:	d006      	beq.n	801802c <ip4_input+0x1b8>
 801801e:	2b11      	cmp	r3, #17
 8018020:	dc13      	bgt.n	801804a <ip4_input+0x1d6>
 8018022:	2b01      	cmp	r3, #1
 8018024:	d00c      	beq.n	8018040 <ip4_input+0x1cc>
 8018026:	2b06      	cmp	r3, #6
 8018028:	d005      	beq.n	8018036 <ip4_input+0x1c2>
 801802a:	e00e      	b.n	801804a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801802c:	6839      	ldr	r1, [r7, #0]
 801802e:	6878      	ldr	r0, [r7, #4]
 8018030:	f7fe fc42 	bl	80168b8 <udp_input>
        break;
 8018034:	e026      	b.n	8018084 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8018036:	6839      	ldr	r1, [r7, #0]
 8018038:	6878      	ldr	r0, [r7, #4]
 801803a:	f7fa fcbb 	bl	80129b4 <tcp_input>
        break;
 801803e:	e021      	b.n	8018084 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8018040:	6839      	ldr	r1, [r7, #0]
 8018042:	6878      	ldr	r0, [r7, #4]
 8018044:	f7ff fcc8 	bl	80179d8 <icmp_input>
        break;
 8018048:	e01c      	b.n	8018084 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801804a:	4b1a      	ldr	r3, [pc, #104]	; (80180b4 <ip4_input+0x240>)
 801804c:	695b      	ldr	r3, [r3, #20]
 801804e:	6939      	ldr	r1, [r7, #16]
 8018050:	4618      	mov	r0, r3
 8018052:	f000 f90b 	bl	801826c <ip4_addr_isbroadcast_u32>
 8018056:	4603      	mov	r3, r0
 8018058:	2b00      	cmp	r3, #0
 801805a:	d10f      	bne.n	801807c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801805c:	4b15      	ldr	r3, [pc, #84]	; (80180b4 <ip4_input+0x240>)
 801805e:	695b      	ldr	r3, [r3, #20]
 8018060:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8018064:	2be0      	cmp	r3, #224	; 0xe0
 8018066:	d009      	beq.n	801807c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8018068:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801806c:	4619      	mov	r1, r3
 801806e:	6878      	ldr	r0, [r7, #4]
 8018070:	f7f8 fe61 	bl	8010d36 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8018074:	2102      	movs	r1, #2
 8018076:	6878      	ldr	r0, [r7, #4]
 8018078:	f7ff fdce 	bl	8017c18 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801807c:	6878      	ldr	r0, [r7, #4]
 801807e:	f7f8 fe6d 	bl	8010d5c <pbuf_free>
        break;
 8018082:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8018084:	4b0b      	ldr	r3, [pc, #44]	; (80180b4 <ip4_input+0x240>)
 8018086:	2200      	movs	r2, #0
 8018088:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801808a:	4b0a      	ldr	r3, [pc, #40]	; (80180b4 <ip4_input+0x240>)
 801808c:	2200      	movs	r2, #0
 801808e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8018090:	4b08      	ldr	r3, [pc, #32]	; (80180b4 <ip4_input+0x240>)
 8018092:	2200      	movs	r2, #0
 8018094:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8018096:	4b07      	ldr	r3, [pc, #28]	; (80180b4 <ip4_input+0x240>)
 8018098:	2200      	movs	r2, #0
 801809a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801809c:	4b05      	ldr	r3, [pc, #20]	; (80180b4 <ip4_input+0x240>)
 801809e:	2200      	movs	r2, #0
 80180a0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80180a2:	4b04      	ldr	r3, [pc, #16]	; (80180b4 <ip4_input+0x240>)
 80180a4:	2200      	movs	r2, #0
 80180a6:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80180a8:	2300      	movs	r3, #0
}
 80180aa:	4618      	mov	r0, r3
 80180ac:	3718      	adds	r7, #24
 80180ae:	46bd      	mov	sp, r7
 80180b0:	bd80      	pop	{r7, pc}
 80180b2:	bf00      	nop
 80180b4:	20000768 	.word	0x20000768
 80180b8:	20007038 	.word	0x20007038

080180bc <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80180bc:	b580      	push	{r7, lr}
 80180be:	b08a      	sub	sp, #40	; 0x28
 80180c0:	af04      	add	r7, sp, #16
 80180c2:	60f8      	str	r0, [r7, #12]
 80180c4:	60b9      	str	r1, [r7, #8]
 80180c6:	607a      	str	r2, [r7, #4]
 80180c8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80180ca:	68bb      	ldr	r3, [r7, #8]
 80180cc:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80180ce:	687b      	ldr	r3, [r7, #4]
 80180d0:	2b00      	cmp	r3, #0
 80180d2:	d009      	beq.n	80180e8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80180d4:	68bb      	ldr	r3, [r7, #8]
 80180d6:	2b00      	cmp	r3, #0
 80180d8:	d003      	beq.n	80180e2 <ip4_output_if+0x26>
 80180da:	68bb      	ldr	r3, [r7, #8]
 80180dc:	681b      	ldr	r3, [r3, #0]
 80180de:	2b00      	cmp	r3, #0
 80180e0:	d102      	bne.n	80180e8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80180e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180e4:	3304      	adds	r3, #4
 80180e6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80180e8:	78fa      	ldrb	r2, [r7, #3]
 80180ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180ec:	9302      	str	r3, [sp, #8]
 80180ee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80180f2:	9301      	str	r3, [sp, #4]
 80180f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80180f8:	9300      	str	r3, [sp, #0]
 80180fa:	4613      	mov	r3, r2
 80180fc:	687a      	ldr	r2, [r7, #4]
 80180fe:	6979      	ldr	r1, [r7, #20]
 8018100:	68f8      	ldr	r0, [r7, #12]
 8018102:	f000 f805 	bl	8018110 <ip4_output_if_src>
 8018106:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8018108:	4618      	mov	r0, r3
 801810a:	3718      	adds	r7, #24
 801810c:	46bd      	mov	sp, r7
 801810e:	bd80      	pop	{r7, pc}

08018110 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8018110:	b580      	push	{r7, lr}
 8018112:	b088      	sub	sp, #32
 8018114:	af00      	add	r7, sp, #0
 8018116:	60f8      	str	r0, [r7, #12]
 8018118:	60b9      	str	r1, [r7, #8]
 801811a:	607a      	str	r2, [r7, #4]
 801811c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801811e:	68fb      	ldr	r3, [r7, #12]
 8018120:	7b9b      	ldrb	r3, [r3, #14]
 8018122:	2b01      	cmp	r3, #1
 8018124:	d006      	beq.n	8018134 <ip4_output_if_src+0x24>
 8018126:	4b4b      	ldr	r3, [pc, #300]	; (8018254 <ip4_output_if_src+0x144>)
 8018128:	f44f 7255 	mov.w	r2, #852	; 0x354
 801812c:	494a      	ldr	r1, [pc, #296]	; (8018258 <ip4_output_if_src+0x148>)
 801812e:	484b      	ldr	r0, [pc, #300]	; (801825c <ip4_output_if_src+0x14c>)
 8018130:	f001 fd2e 	bl	8019b90 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8018134:	687b      	ldr	r3, [r7, #4]
 8018136:	2b00      	cmp	r3, #0
 8018138:	d060      	beq.n	80181fc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801813a:	2314      	movs	r3, #20
 801813c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801813e:	2114      	movs	r1, #20
 8018140:	68f8      	ldr	r0, [r7, #12]
 8018142:	f7f8 fd75 	bl	8010c30 <pbuf_add_header>
 8018146:	4603      	mov	r3, r0
 8018148:	2b00      	cmp	r3, #0
 801814a:	d002      	beq.n	8018152 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801814c:	f06f 0301 	mvn.w	r3, #1
 8018150:	e07c      	b.n	801824c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8018152:	68fb      	ldr	r3, [r7, #12]
 8018154:	685b      	ldr	r3, [r3, #4]
 8018156:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8018158:	68fb      	ldr	r3, [r7, #12]
 801815a:	895b      	ldrh	r3, [r3, #10]
 801815c:	2b13      	cmp	r3, #19
 801815e:	d806      	bhi.n	801816e <ip4_output_if_src+0x5e>
 8018160:	4b3c      	ldr	r3, [pc, #240]	; (8018254 <ip4_output_if_src+0x144>)
 8018162:	f44f 7262 	mov.w	r2, #904	; 0x388
 8018166:	493e      	ldr	r1, [pc, #248]	; (8018260 <ip4_output_if_src+0x150>)
 8018168:	483c      	ldr	r0, [pc, #240]	; (801825c <ip4_output_if_src+0x14c>)
 801816a:	f001 fd11 	bl	8019b90 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801816e:	69fb      	ldr	r3, [r7, #28]
 8018170:	78fa      	ldrb	r2, [r7, #3]
 8018172:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8018174:	69fb      	ldr	r3, [r7, #28]
 8018176:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801817a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801817c:	687b      	ldr	r3, [r7, #4]
 801817e:	681a      	ldr	r2, [r3, #0]
 8018180:	69fb      	ldr	r3, [r7, #28]
 8018182:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8018184:	8b7b      	ldrh	r3, [r7, #26]
 8018186:	089b      	lsrs	r3, r3, #2
 8018188:	b29b      	uxth	r3, r3
 801818a:	b2db      	uxtb	r3, r3
 801818c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018190:	b2da      	uxtb	r2, r3
 8018192:	69fb      	ldr	r3, [r7, #28]
 8018194:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8018196:	69fb      	ldr	r3, [r7, #28]
 8018198:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801819c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801819e:	68fb      	ldr	r3, [r7, #12]
 80181a0:	891b      	ldrh	r3, [r3, #8]
 80181a2:	4618      	mov	r0, r3
 80181a4:	f7f7 f9d6 	bl	800f554 <lwip_htons>
 80181a8:	4603      	mov	r3, r0
 80181aa:	461a      	mov	r2, r3
 80181ac:	69fb      	ldr	r3, [r7, #28]
 80181ae:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80181b0:	69fb      	ldr	r3, [r7, #28]
 80181b2:	2200      	movs	r2, #0
 80181b4:	719a      	strb	r2, [r3, #6]
 80181b6:	2200      	movs	r2, #0
 80181b8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80181ba:	4b2a      	ldr	r3, [pc, #168]	; (8018264 <ip4_output_if_src+0x154>)
 80181bc:	881b      	ldrh	r3, [r3, #0]
 80181be:	4618      	mov	r0, r3
 80181c0:	f7f7 f9c8 	bl	800f554 <lwip_htons>
 80181c4:	4603      	mov	r3, r0
 80181c6:	461a      	mov	r2, r3
 80181c8:	69fb      	ldr	r3, [r7, #28]
 80181ca:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80181cc:	4b25      	ldr	r3, [pc, #148]	; (8018264 <ip4_output_if_src+0x154>)
 80181ce:	881b      	ldrh	r3, [r3, #0]
 80181d0:	3301      	adds	r3, #1
 80181d2:	b29a      	uxth	r2, r3
 80181d4:	4b23      	ldr	r3, [pc, #140]	; (8018264 <ip4_output_if_src+0x154>)
 80181d6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80181d8:	68bb      	ldr	r3, [r7, #8]
 80181da:	2b00      	cmp	r3, #0
 80181dc:	d104      	bne.n	80181e8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80181de:	4b22      	ldr	r3, [pc, #136]	; (8018268 <ip4_output_if_src+0x158>)
 80181e0:	681a      	ldr	r2, [r3, #0]
 80181e2:	69fb      	ldr	r3, [r7, #28]
 80181e4:	60da      	str	r2, [r3, #12]
 80181e6:	e003      	b.n	80181f0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80181e8:	68bb      	ldr	r3, [r7, #8]
 80181ea:	681a      	ldr	r2, [r3, #0]
 80181ec:	69fb      	ldr	r3, [r7, #28]
 80181ee:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80181f0:	69fb      	ldr	r3, [r7, #28]
 80181f2:	2200      	movs	r2, #0
 80181f4:	729a      	strb	r2, [r3, #10]
 80181f6:	2200      	movs	r2, #0
 80181f8:	72da      	strb	r2, [r3, #11]
 80181fa:	e00f      	b.n	801821c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80181fc:	68fb      	ldr	r3, [r7, #12]
 80181fe:	895b      	ldrh	r3, [r3, #10]
 8018200:	2b13      	cmp	r3, #19
 8018202:	d802      	bhi.n	801820a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8018204:	f06f 0301 	mvn.w	r3, #1
 8018208:	e020      	b.n	801824c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801820a:	68fb      	ldr	r3, [r7, #12]
 801820c:	685b      	ldr	r3, [r3, #4]
 801820e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8018210:	69fb      	ldr	r3, [r7, #28]
 8018212:	691b      	ldr	r3, [r3, #16]
 8018214:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8018216:	f107 0314 	add.w	r3, r7, #20
 801821a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801821c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801821e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8018220:	2b00      	cmp	r3, #0
 8018222:	d00c      	beq.n	801823e <ip4_output_if_src+0x12e>
 8018224:	68fb      	ldr	r3, [r7, #12]
 8018226:	891a      	ldrh	r2, [r3, #8]
 8018228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801822a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801822c:	429a      	cmp	r2, r3
 801822e:	d906      	bls.n	801823e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8018230:	687a      	ldr	r2, [r7, #4]
 8018232:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8018234:	68f8      	ldr	r0, [r7, #12]
 8018236:	f000 fd53 	bl	8018ce0 <ip4_frag>
 801823a:	4603      	mov	r3, r0
 801823c:	e006      	b.n	801824c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801823e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018240:	695b      	ldr	r3, [r3, #20]
 8018242:	687a      	ldr	r2, [r7, #4]
 8018244:	68f9      	ldr	r1, [r7, #12]
 8018246:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018248:	4798      	blx	r3
 801824a:	4603      	mov	r3, r0
}
 801824c:	4618      	mov	r0, r3
 801824e:	3720      	adds	r7, #32
 8018250:	46bd      	mov	sp, r7
 8018252:	bd80      	pop	{r7, pc}
 8018254:	0801eaf4 	.word	0x0801eaf4
 8018258:	0801eb28 	.word	0x0801eb28
 801825c:	0801eb34 	.word	0x0801eb34
 8018260:	0801eb5c 	.word	0x0801eb5c
 8018264:	20007196 	.word	0x20007196
 8018268:	0801ef7c 	.word	0x0801ef7c

0801826c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801826c:	b480      	push	{r7}
 801826e:	b085      	sub	sp, #20
 8018270:	af00      	add	r7, sp, #0
 8018272:	6078      	str	r0, [r7, #4]
 8018274:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8018276:	687b      	ldr	r3, [r7, #4]
 8018278:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801827a:	687b      	ldr	r3, [r7, #4]
 801827c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018280:	d002      	beq.n	8018288 <ip4_addr_isbroadcast_u32+0x1c>
 8018282:	687b      	ldr	r3, [r7, #4]
 8018284:	2b00      	cmp	r3, #0
 8018286:	d101      	bne.n	801828c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8018288:	2301      	movs	r3, #1
 801828a:	e02a      	b.n	80182e2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801828c:	683b      	ldr	r3, [r7, #0]
 801828e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018292:	f003 0302 	and.w	r3, r3, #2
 8018296:	2b00      	cmp	r3, #0
 8018298:	d101      	bne.n	801829e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801829a:	2300      	movs	r3, #0
 801829c:	e021      	b.n	80182e2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801829e:	683b      	ldr	r3, [r7, #0]
 80182a0:	3304      	adds	r3, #4
 80182a2:	681b      	ldr	r3, [r3, #0]
 80182a4:	687a      	ldr	r2, [r7, #4]
 80182a6:	429a      	cmp	r2, r3
 80182a8:	d101      	bne.n	80182ae <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80182aa:	2300      	movs	r3, #0
 80182ac:	e019      	b.n	80182e2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80182ae:	68fa      	ldr	r2, [r7, #12]
 80182b0:	683b      	ldr	r3, [r7, #0]
 80182b2:	3304      	adds	r3, #4
 80182b4:	681b      	ldr	r3, [r3, #0]
 80182b6:	405a      	eors	r2, r3
 80182b8:	683b      	ldr	r3, [r7, #0]
 80182ba:	3308      	adds	r3, #8
 80182bc:	681b      	ldr	r3, [r3, #0]
 80182be:	4013      	ands	r3, r2
 80182c0:	2b00      	cmp	r3, #0
 80182c2:	d10d      	bne.n	80182e0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80182c4:	683b      	ldr	r3, [r7, #0]
 80182c6:	3308      	adds	r3, #8
 80182c8:	681b      	ldr	r3, [r3, #0]
 80182ca:	43da      	mvns	r2, r3
 80182cc:	687b      	ldr	r3, [r7, #4]
 80182ce:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80182d0:	683b      	ldr	r3, [r7, #0]
 80182d2:	3308      	adds	r3, #8
 80182d4:	681b      	ldr	r3, [r3, #0]
 80182d6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80182d8:	429a      	cmp	r2, r3
 80182da:	d101      	bne.n	80182e0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80182dc:	2301      	movs	r3, #1
 80182de:	e000      	b.n	80182e2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80182e0:	2300      	movs	r3, #0
  }
}
 80182e2:	4618      	mov	r0, r3
 80182e4:	3714      	adds	r7, #20
 80182e6:	46bd      	mov	sp, r7
 80182e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182ec:	4770      	bx	lr
	...

080182f0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80182f0:	b580      	push	{r7, lr}
 80182f2:	b084      	sub	sp, #16
 80182f4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80182f6:	2300      	movs	r3, #0
 80182f8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80182fa:	4b12      	ldr	r3, [pc, #72]	; (8018344 <ip_reass_tmr+0x54>)
 80182fc:	681b      	ldr	r3, [r3, #0]
 80182fe:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8018300:	e018      	b.n	8018334 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8018302:	68fb      	ldr	r3, [r7, #12]
 8018304:	7fdb      	ldrb	r3, [r3, #31]
 8018306:	2b00      	cmp	r3, #0
 8018308:	d00b      	beq.n	8018322 <ip_reass_tmr+0x32>
      r->timer--;
 801830a:	68fb      	ldr	r3, [r7, #12]
 801830c:	7fdb      	ldrb	r3, [r3, #31]
 801830e:	3b01      	subs	r3, #1
 8018310:	b2da      	uxtb	r2, r3
 8018312:	68fb      	ldr	r3, [r7, #12]
 8018314:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8018316:	68fb      	ldr	r3, [r7, #12]
 8018318:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801831a:	68fb      	ldr	r3, [r7, #12]
 801831c:	681b      	ldr	r3, [r3, #0]
 801831e:	60fb      	str	r3, [r7, #12]
 8018320:	e008      	b.n	8018334 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8018322:	68fb      	ldr	r3, [r7, #12]
 8018324:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8018326:	68fb      	ldr	r3, [r7, #12]
 8018328:	681b      	ldr	r3, [r3, #0]
 801832a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801832c:	68b9      	ldr	r1, [r7, #8]
 801832e:	6878      	ldr	r0, [r7, #4]
 8018330:	f000 f80a 	bl	8018348 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8018334:	68fb      	ldr	r3, [r7, #12]
 8018336:	2b00      	cmp	r3, #0
 8018338:	d1e3      	bne.n	8018302 <ip_reass_tmr+0x12>
    }
  }
}
 801833a:	bf00      	nop
 801833c:	bf00      	nop
 801833e:	3710      	adds	r7, #16
 8018340:	46bd      	mov	sp, r7
 8018342:	bd80      	pop	{r7, pc}
 8018344:	20007198 	.word	0x20007198

08018348 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8018348:	b580      	push	{r7, lr}
 801834a:	b088      	sub	sp, #32
 801834c:	af00      	add	r7, sp, #0
 801834e:	6078      	str	r0, [r7, #4]
 8018350:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8018352:	2300      	movs	r3, #0
 8018354:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8018356:	683a      	ldr	r2, [r7, #0]
 8018358:	687b      	ldr	r3, [r7, #4]
 801835a:	429a      	cmp	r2, r3
 801835c:	d105      	bne.n	801836a <ip_reass_free_complete_datagram+0x22>
 801835e:	4b45      	ldr	r3, [pc, #276]	; (8018474 <ip_reass_free_complete_datagram+0x12c>)
 8018360:	22ab      	movs	r2, #171	; 0xab
 8018362:	4945      	ldr	r1, [pc, #276]	; (8018478 <ip_reass_free_complete_datagram+0x130>)
 8018364:	4845      	ldr	r0, [pc, #276]	; (801847c <ip_reass_free_complete_datagram+0x134>)
 8018366:	f001 fc13 	bl	8019b90 <iprintf>
  if (prev != NULL) {
 801836a:	683b      	ldr	r3, [r7, #0]
 801836c:	2b00      	cmp	r3, #0
 801836e:	d00a      	beq.n	8018386 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8018370:	683b      	ldr	r3, [r7, #0]
 8018372:	681b      	ldr	r3, [r3, #0]
 8018374:	687a      	ldr	r2, [r7, #4]
 8018376:	429a      	cmp	r2, r3
 8018378:	d005      	beq.n	8018386 <ip_reass_free_complete_datagram+0x3e>
 801837a:	4b3e      	ldr	r3, [pc, #248]	; (8018474 <ip_reass_free_complete_datagram+0x12c>)
 801837c:	22ad      	movs	r2, #173	; 0xad
 801837e:	4940      	ldr	r1, [pc, #256]	; (8018480 <ip_reass_free_complete_datagram+0x138>)
 8018380:	483e      	ldr	r0, [pc, #248]	; (801847c <ip_reass_free_complete_datagram+0x134>)
 8018382:	f001 fc05 	bl	8019b90 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8018386:	687b      	ldr	r3, [r7, #4]
 8018388:	685b      	ldr	r3, [r3, #4]
 801838a:	685b      	ldr	r3, [r3, #4]
 801838c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801838e:	697b      	ldr	r3, [r7, #20]
 8018390:	889b      	ldrh	r3, [r3, #4]
 8018392:	b29b      	uxth	r3, r3
 8018394:	2b00      	cmp	r3, #0
 8018396:	d12a      	bne.n	80183ee <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8018398:	687b      	ldr	r3, [r7, #4]
 801839a:	685b      	ldr	r3, [r3, #4]
 801839c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801839e:	697b      	ldr	r3, [r7, #20]
 80183a0:	681a      	ldr	r2, [r3, #0]
 80183a2:	687b      	ldr	r3, [r7, #4]
 80183a4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80183a6:	69bb      	ldr	r3, [r7, #24]
 80183a8:	6858      	ldr	r0, [r3, #4]
 80183aa:	687b      	ldr	r3, [r7, #4]
 80183ac:	3308      	adds	r3, #8
 80183ae:	2214      	movs	r2, #20
 80183b0:	4619      	mov	r1, r3
 80183b2:	f001 fdbc 	bl	8019f2e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80183b6:	2101      	movs	r1, #1
 80183b8:	69b8      	ldr	r0, [r7, #24]
 80183ba:	f7ff fc3d 	bl	8017c38 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80183be:	69b8      	ldr	r0, [r7, #24]
 80183c0:	f7f8 fd54 	bl	8010e6c <pbuf_clen>
 80183c4:	4603      	mov	r3, r0
 80183c6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80183c8:	8bfa      	ldrh	r2, [r7, #30]
 80183ca:	8a7b      	ldrh	r3, [r7, #18]
 80183cc:	4413      	add	r3, r2
 80183ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80183d2:	db05      	blt.n	80183e0 <ip_reass_free_complete_datagram+0x98>
 80183d4:	4b27      	ldr	r3, [pc, #156]	; (8018474 <ip_reass_free_complete_datagram+0x12c>)
 80183d6:	22bc      	movs	r2, #188	; 0xbc
 80183d8:	492a      	ldr	r1, [pc, #168]	; (8018484 <ip_reass_free_complete_datagram+0x13c>)
 80183da:	4828      	ldr	r0, [pc, #160]	; (801847c <ip_reass_free_complete_datagram+0x134>)
 80183dc:	f001 fbd8 	bl	8019b90 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80183e0:	8bfa      	ldrh	r2, [r7, #30]
 80183e2:	8a7b      	ldrh	r3, [r7, #18]
 80183e4:	4413      	add	r3, r2
 80183e6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80183e8:	69b8      	ldr	r0, [r7, #24]
 80183ea:	f7f8 fcb7 	bl	8010d5c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80183ee:	687b      	ldr	r3, [r7, #4]
 80183f0:	685b      	ldr	r3, [r3, #4]
 80183f2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80183f4:	e01f      	b.n	8018436 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80183f6:	69bb      	ldr	r3, [r7, #24]
 80183f8:	685b      	ldr	r3, [r3, #4]
 80183fa:	617b      	str	r3, [r7, #20]
    pcur = p;
 80183fc:	69bb      	ldr	r3, [r7, #24]
 80183fe:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8018400:	697b      	ldr	r3, [r7, #20]
 8018402:	681b      	ldr	r3, [r3, #0]
 8018404:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8018406:	68f8      	ldr	r0, [r7, #12]
 8018408:	f7f8 fd30 	bl	8010e6c <pbuf_clen>
 801840c:	4603      	mov	r3, r0
 801840e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8018410:	8bfa      	ldrh	r2, [r7, #30]
 8018412:	8a7b      	ldrh	r3, [r7, #18]
 8018414:	4413      	add	r3, r2
 8018416:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801841a:	db05      	blt.n	8018428 <ip_reass_free_complete_datagram+0xe0>
 801841c:	4b15      	ldr	r3, [pc, #84]	; (8018474 <ip_reass_free_complete_datagram+0x12c>)
 801841e:	22cc      	movs	r2, #204	; 0xcc
 8018420:	4918      	ldr	r1, [pc, #96]	; (8018484 <ip_reass_free_complete_datagram+0x13c>)
 8018422:	4816      	ldr	r0, [pc, #88]	; (801847c <ip_reass_free_complete_datagram+0x134>)
 8018424:	f001 fbb4 	bl	8019b90 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8018428:	8bfa      	ldrh	r2, [r7, #30]
 801842a:	8a7b      	ldrh	r3, [r7, #18]
 801842c:	4413      	add	r3, r2
 801842e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8018430:	68f8      	ldr	r0, [r7, #12]
 8018432:	f7f8 fc93 	bl	8010d5c <pbuf_free>
  while (p != NULL) {
 8018436:	69bb      	ldr	r3, [r7, #24]
 8018438:	2b00      	cmp	r3, #0
 801843a:	d1dc      	bne.n	80183f6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801843c:	6839      	ldr	r1, [r7, #0]
 801843e:	6878      	ldr	r0, [r7, #4]
 8018440:	f000 f8c2 	bl	80185c8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8018444:	4b10      	ldr	r3, [pc, #64]	; (8018488 <ip_reass_free_complete_datagram+0x140>)
 8018446:	881b      	ldrh	r3, [r3, #0]
 8018448:	8bfa      	ldrh	r2, [r7, #30]
 801844a:	429a      	cmp	r2, r3
 801844c:	d905      	bls.n	801845a <ip_reass_free_complete_datagram+0x112>
 801844e:	4b09      	ldr	r3, [pc, #36]	; (8018474 <ip_reass_free_complete_datagram+0x12c>)
 8018450:	22d2      	movs	r2, #210	; 0xd2
 8018452:	490e      	ldr	r1, [pc, #56]	; (801848c <ip_reass_free_complete_datagram+0x144>)
 8018454:	4809      	ldr	r0, [pc, #36]	; (801847c <ip_reass_free_complete_datagram+0x134>)
 8018456:	f001 fb9b 	bl	8019b90 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801845a:	4b0b      	ldr	r3, [pc, #44]	; (8018488 <ip_reass_free_complete_datagram+0x140>)
 801845c:	881a      	ldrh	r2, [r3, #0]
 801845e:	8bfb      	ldrh	r3, [r7, #30]
 8018460:	1ad3      	subs	r3, r2, r3
 8018462:	b29a      	uxth	r2, r3
 8018464:	4b08      	ldr	r3, [pc, #32]	; (8018488 <ip_reass_free_complete_datagram+0x140>)
 8018466:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8018468:	8bfb      	ldrh	r3, [r7, #30]
}
 801846a:	4618      	mov	r0, r3
 801846c:	3720      	adds	r7, #32
 801846e:	46bd      	mov	sp, r7
 8018470:	bd80      	pop	{r7, pc}
 8018472:	bf00      	nop
 8018474:	0801eb8c 	.word	0x0801eb8c
 8018478:	0801ebc8 	.word	0x0801ebc8
 801847c:	0801ebd4 	.word	0x0801ebd4
 8018480:	0801ebfc 	.word	0x0801ebfc
 8018484:	0801ec10 	.word	0x0801ec10
 8018488:	2000719c 	.word	0x2000719c
 801848c:	0801ec30 	.word	0x0801ec30

08018490 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8018490:	b580      	push	{r7, lr}
 8018492:	b08a      	sub	sp, #40	; 0x28
 8018494:	af00      	add	r7, sp, #0
 8018496:	6078      	str	r0, [r7, #4]
 8018498:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801849a:	2300      	movs	r3, #0
 801849c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801849e:	2300      	movs	r3, #0
 80184a0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80184a2:	2300      	movs	r3, #0
 80184a4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80184a6:	2300      	movs	r3, #0
 80184a8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80184aa:	2300      	movs	r3, #0
 80184ac:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80184ae:	4b28      	ldr	r3, [pc, #160]	; (8018550 <ip_reass_remove_oldest_datagram+0xc0>)
 80184b0:	681b      	ldr	r3, [r3, #0]
 80184b2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80184b4:	e030      	b.n	8018518 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80184b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184b8:	695a      	ldr	r2, [r3, #20]
 80184ba:	687b      	ldr	r3, [r7, #4]
 80184bc:	68db      	ldr	r3, [r3, #12]
 80184be:	429a      	cmp	r2, r3
 80184c0:	d10c      	bne.n	80184dc <ip_reass_remove_oldest_datagram+0x4c>
 80184c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184c4:	699a      	ldr	r2, [r3, #24]
 80184c6:	687b      	ldr	r3, [r7, #4]
 80184c8:	691b      	ldr	r3, [r3, #16]
 80184ca:	429a      	cmp	r2, r3
 80184cc:	d106      	bne.n	80184dc <ip_reass_remove_oldest_datagram+0x4c>
 80184ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184d0:	899a      	ldrh	r2, [r3, #12]
 80184d2:	687b      	ldr	r3, [r7, #4]
 80184d4:	889b      	ldrh	r3, [r3, #4]
 80184d6:	b29b      	uxth	r3, r3
 80184d8:	429a      	cmp	r2, r3
 80184da:	d014      	beq.n	8018506 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80184dc:	693b      	ldr	r3, [r7, #16]
 80184de:	3301      	adds	r3, #1
 80184e0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80184e2:	6a3b      	ldr	r3, [r7, #32]
 80184e4:	2b00      	cmp	r3, #0
 80184e6:	d104      	bne.n	80184f2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80184e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184ea:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80184ec:	69fb      	ldr	r3, [r7, #28]
 80184ee:	61bb      	str	r3, [r7, #24]
 80184f0:	e009      	b.n	8018506 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80184f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184f4:	7fda      	ldrb	r2, [r3, #31]
 80184f6:	6a3b      	ldr	r3, [r7, #32]
 80184f8:	7fdb      	ldrb	r3, [r3, #31]
 80184fa:	429a      	cmp	r2, r3
 80184fc:	d803      	bhi.n	8018506 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80184fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018500:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8018502:	69fb      	ldr	r3, [r7, #28]
 8018504:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8018506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018508:	681b      	ldr	r3, [r3, #0]
 801850a:	2b00      	cmp	r3, #0
 801850c:	d001      	beq.n	8018512 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801850e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018510:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8018512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018514:	681b      	ldr	r3, [r3, #0]
 8018516:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8018518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801851a:	2b00      	cmp	r3, #0
 801851c:	d1cb      	bne.n	80184b6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801851e:	6a3b      	ldr	r3, [r7, #32]
 8018520:	2b00      	cmp	r3, #0
 8018522:	d008      	beq.n	8018536 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8018524:	69b9      	ldr	r1, [r7, #24]
 8018526:	6a38      	ldr	r0, [r7, #32]
 8018528:	f7ff ff0e 	bl	8018348 <ip_reass_free_complete_datagram>
 801852c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801852e:	697a      	ldr	r2, [r7, #20]
 8018530:	68fb      	ldr	r3, [r7, #12]
 8018532:	4413      	add	r3, r2
 8018534:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8018536:	697a      	ldr	r2, [r7, #20]
 8018538:	683b      	ldr	r3, [r7, #0]
 801853a:	429a      	cmp	r2, r3
 801853c:	da02      	bge.n	8018544 <ip_reass_remove_oldest_datagram+0xb4>
 801853e:	693b      	ldr	r3, [r7, #16]
 8018540:	2b01      	cmp	r3, #1
 8018542:	dcac      	bgt.n	801849e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8018544:	697b      	ldr	r3, [r7, #20]
}
 8018546:	4618      	mov	r0, r3
 8018548:	3728      	adds	r7, #40	; 0x28
 801854a:	46bd      	mov	sp, r7
 801854c:	bd80      	pop	{r7, pc}
 801854e:	bf00      	nop
 8018550:	20007198 	.word	0x20007198

08018554 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8018554:	b580      	push	{r7, lr}
 8018556:	b084      	sub	sp, #16
 8018558:	af00      	add	r7, sp, #0
 801855a:	6078      	str	r0, [r7, #4]
 801855c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801855e:	2004      	movs	r0, #4
 8018560:	f7f7 fd16 	bl	800ff90 <memp_malloc>
 8018564:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8018566:	68fb      	ldr	r3, [r7, #12]
 8018568:	2b00      	cmp	r3, #0
 801856a:	d110      	bne.n	801858e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801856c:	6839      	ldr	r1, [r7, #0]
 801856e:	6878      	ldr	r0, [r7, #4]
 8018570:	f7ff ff8e 	bl	8018490 <ip_reass_remove_oldest_datagram>
 8018574:	4602      	mov	r2, r0
 8018576:	683b      	ldr	r3, [r7, #0]
 8018578:	4293      	cmp	r3, r2
 801857a:	dc03      	bgt.n	8018584 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801857c:	2004      	movs	r0, #4
 801857e:	f7f7 fd07 	bl	800ff90 <memp_malloc>
 8018582:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8018584:	68fb      	ldr	r3, [r7, #12]
 8018586:	2b00      	cmp	r3, #0
 8018588:	d101      	bne.n	801858e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801858a:	2300      	movs	r3, #0
 801858c:	e016      	b.n	80185bc <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801858e:	2220      	movs	r2, #32
 8018590:	2100      	movs	r1, #0
 8018592:	68f8      	ldr	r0, [r7, #12]
 8018594:	f001 fc52 	bl	8019e3c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8018598:	68fb      	ldr	r3, [r7, #12]
 801859a:	220f      	movs	r2, #15
 801859c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801859e:	4b09      	ldr	r3, [pc, #36]	; (80185c4 <ip_reass_enqueue_new_datagram+0x70>)
 80185a0:	681a      	ldr	r2, [r3, #0]
 80185a2:	68fb      	ldr	r3, [r7, #12]
 80185a4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80185a6:	4a07      	ldr	r2, [pc, #28]	; (80185c4 <ip_reass_enqueue_new_datagram+0x70>)
 80185a8:	68fb      	ldr	r3, [r7, #12]
 80185aa:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80185ac:	68fb      	ldr	r3, [r7, #12]
 80185ae:	3308      	adds	r3, #8
 80185b0:	2214      	movs	r2, #20
 80185b2:	6879      	ldr	r1, [r7, #4]
 80185b4:	4618      	mov	r0, r3
 80185b6:	f001 fcba 	bl	8019f2e <memcpy>
  return ipr;
 80185ba:	68fb      	ldr	r3, [r7, #12]
}
 80185bc:	4618      	mov	r0, r3
 80185be:	3710      	adds	r7, #16
 80185c0:	46bd      	mov	sp, r7
 80185c2:	bd80      	pop	{r7, pc}
 80185c4:	20007198 	.word	0x20007198

080185c8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80185c8:	b580      	push	{r7, lr}
 80185ca:	b082      	sub	sp, #8
 80185cc:	af00      	add	r7, sp, #0
 80185ce:	6078      	str	r0, [r7, #4]
 80185d0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80185d2:	4b10      	ldr	r3, [pc, #64]	; (8018614 <ip_reass_dequeue_datagram+0x4c>)
 80185d4:	681b      	ldr	r3, [r3, #0]
 80185d6:	687a      	ldr	r2, [r7, #4]
 80185d8:	429a      	cmp	r2, r3
 80185da:	d104      	bne.n	80185e6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80185dc:	687b      	ldr	r3, [r7, #4]
 80185de:	681b      	ldr	r3, [r3, #0]
 80185e0:	4a0c      	ldr	r2, [pc, #48]	; (8018614 <ip_reass_dequeue_datagram+0x4c>)
 80185e2:	6013      	str	r3, [r2, #0]
 80185e4:	e00d      	b.n	8018602 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80185e6:	683b      	ldr	r3, [r7, #0]
 80185e8:	2b00      	cmp	r3, #0
 80185ea:	d106      	bne.n	80185fa <ip_reass_dequeue_datagram+0x32>
 80185ec:	4b0a      	ldr	r3, [pc, #40]	; (8018618 <ip_reass_dequeue_datagram+0x50>)
 80185ee:	f240 1245 	movw	r2, #325	; 0x145
 80185f2:	490a      	ldr	r1, [pc, #40]	; (801861c <ip_reass_dequeue_datagram+0x54>)
 80185f4:	480a      	ldr	r0, [pc, #40]	; (8018620 <ip_reass_dequeue_datagram+0x58>)
 80185f6:	f001 facb 	bl	8019b90 <iprintf>
    prev->next = ipr->next;
 80185fa:	687b      	ldr	r3, [r7, #4]
 80185fc:	681a      	ldr	r2, [r3, #0]
 80185fe:	683b      	ldr	r3, [r7, #0]
 8018600:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8018602:	6879      	ldr	r1, [r7, #4]
 8018604:	2004      	movs	r0, #4
 8018606:	f7f7 fd33 	bl	8010070 <memp_free>
}
 801860a:	bf00      	nop
 801860c:	3708      	adds	r7, #8
 801860e:	46bd      	mov	sp, r7
 8018610:	bd80      	pop	{r7, pc}
 8018612:	bf00      	nop
 8018614:	20007198 	.word	0x20007198
 8018618:	0801eb8c 	.word	0x0801eb8c
 801861c:	0801ec54 	.word	0x0801ec54
 8018620:	0801ebd4 	.word	0x0801ebd4

08018624 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8018624:	b580      	push	{r7, lr}
 8018626:	b08c      	sub	sp, #48	; 0x30
 8018628:	af00      	add	r7, sp, #0
 801862a:	60f8      	str	r0, [r7, #12]
 801862c:	60b9      	str	r1, [r7, #8]
 801862e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8018630:	2300      	movs	r3, #0
 8018632:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8018634:	2301      	movs	r3, #1
 8018636:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8018638:	68bb      	ldr	r3, [r7, #8]
 801863a:	685b      	ldr	r3, [r3, #4]
 801863c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801863e:	69fb      	ldr	r3, [r7, #28]
 8018640:	885b      	ldrh	r3, [r3, #2]
 8018642:	b29b      	uxth	r3, r3
 8018644:	4618      	mov	r0, r3
 8018646:	f7f6 ff85 	bl	800f554 <lwip_htons>
 801864a:	4603      	mov	r3, r0
 801864c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801864e:	69fb      	ldr	r3, [r7, #28]
 8018650:	781b      	ldrb	r3, [r3, #0]
 8018652:	f003 030f 	and.w	r3, r3, #15
 8018656:	b2db      	uxtb	r3, r3
 8018658:	009b      	lsls	r3, r3, #2
 801865a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801865c:	7e7b      	ldrb	r3, [r7, #25]
 801865e:	b29b      	uxth	r3, r3
 8018660:	8b7a      	ldrh	r2, [r7, #26]
 8018662:	429a      	cmp	r2, r3
 8018664:	d202      	bcs.n	801866c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018666:	f04f 33ff 	mov.w	r3, #4294967295
 801866a:	e135      	b.n	80188d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801866c:	7e7b      	ldrb	r3, [r7, #25]
 801866e:	b29b      	uxth	r3, r3
 8018670:	8b7a      	ldrh	r2, [r7, #26]
 8018672:	1ad3      	subs	r3, r2, r3
 8018674:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8018676:	69fb      	ldr	r3, [r7, #28]
 8018678:	88db      	ldrh	r3, [r3, #6]
 801867a:	b29b      	uxth	r3, r3
 801867c:	4618      	mov	r0, r3
 801867e:	f7f6 ff69 	bl	800f554 <lwip_htons>
 8018682:	4603      	mov	r3, r0
 8018684:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018688:	b29b      	uxth	r3, r3
 801868a:	00db      	lsls	r3, r3, #3
 801868c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801868e:	68bb      	ldr	r3, [r7, #8]
 8018690:	685b      	ldr	r3, [r3, #4]
 8018692:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8018694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018696:	2200      	movs	r2, #0
 8018698:	701a      	strb	r2, [r3, #0]
 801869a:	2200      	movs	r2, #0
 801869c:	705a      	strb	r2, [r3, #1]
 801869e:	2200      	movs	r2, #0
 80186a0:	709a      	strb	r2, [r3, #2]
 80186a2:	2200      	movs	r2, #0
 80186a4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80186a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186a8:	8afa      	ldrh	r2, [r7, #22]
 80186aa:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80186ac:	8afa      	ldrh	r2, [r7, #22]
 80186ae:	8b7b      	ldrh	r3, [r7, #26]
 80186b0:	4413      	add	r3, r2
 80186b2:	b29a      	uxth	r2, r3
 80186b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186b6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80186b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186ba:	88db      	ldrh	r3, [r3, #6]
 80186bc:	b29b      	uxth	r3, r3
 80186be:	8afa      	ldrh	r2, [r7, #22]
 80186c0:	429a      	cmp	r2, r3
 80186c2:	d902      	bls.n	80186ca <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80186c4:	f04f 33ff 	mov.w	r3, #4294967295
 80186c8:	e106      	b.n	80188d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80186ca:	68fb      	ldr	r3, [r7, #12]
 80186cc:	685b      	ldr	r3, [r3, #4]
 80186ce:	627b      	str	r3, [r7, #36]	; 0x24
 80186d0:	e068      	b.n	80187a4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80186d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186d4:	685b      	ldr	r3, [r3, #4]
 80186d6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80186d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186da:	889b      	ldrh	r3, [r3, #4]
 80186dc:	b29a      	uxth	r2, r3
 80186de:	693b      	ldr	r3, [r7, #16]
 80186e0:	889b      	ldrh	r3, [r3, #4]
 80186e2:	b29b      	uxth	r3, r3
 80186e4:	429a      	cmp	r2, r3
 80186e6:	d235      	bcs.n	8018754 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80186e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80186ec:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80186ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186f0:	2b00      	cmp	r3, #0
 80186f2:	d020      	beq.n	8018736 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80186f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186f6:	889b      	ldrh	r3, [r3, #4]
 80186f8:	b29a      	uxth	r2, r3
 80186fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186fc:	88db      	ldrh	r3, [r3, #6]
 80186fe:	b29b      	uxth	r3, r3
 8018700:	429a      	cmp	r2, r3
 8018702:	d307      	bcc.n	8018714 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8018704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018706:	88db      	ldrh	r3, [r3, #6]
 8018708:	b29a      	uxth	r2, r3
 801870a:	693b      	ldr	r3, [r7, #16]
 801870c:	889b      	ldrh	r3, [r3, #4]
 801870e:	b29b      	uxth	r3, r3
 8018710:	429a      	cmp	r2, r3
 8018712:	d902      	bls.n	801871a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018714:	f04f 33ff 	mov.w	r3, #4294967295
 8018718:	e0de      	b.n	80188d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801871a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801871c:	68ba      	ldr	r2, [r7, #8]
 801871e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8018720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018722:	88db      	ldrh	r3, [r3, #6]
 8018724:	b29a      	uxth	r2, r3
 8018726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018728:	889b      	ldrh	r3, [r3, #4]
 801872a:	b29b      	uxth	r3, r3
 801872c:	429a      	cmp	r2, r3
 801872e:	d03d      	beq.n	80187ac <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8018730:	2300      	movs	r3, #0
 8018732:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8018734:	e03a      	b.n	80187ac <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8018736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018738:	88db      	ldrh	r3, [r3, #6]
 801873a:	b29a      	uxth	r2, r3
 801873c:	693b      	ldr	r3, [r7, #16]
 801873e:	889b      	ldrh	r3, [r3, #4]
 8018740:	b29b      	uxth	r3, r3
 8018742:	429a      	cmp	r2, r3
 8018744:	d902      	bls.n	801874c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018746:	f04f 33ff 	mov.w	r3, #4294967295
 801874a:	e0c5      	b.n	80188d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801874c:	68fb      	ldr	r3, [r7, #12]
 801874e:	68ba      	ldr	r2, [r7, #8]
 8018750:	605a      	str	r2, [r3, #4]
      break;
 8018752:	e02b      	b.n	80187ac <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8018754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018756:	889b      	ldrh	r3, [r3, #4]
 8018758:	b29a      	uxth	r2, r3
 801875a:	693b      	ldr	r3, [r7, #16]
 801875c:	889b      	ldrh	r3, [r3, #4]
 801875e:	b29b      	uxth	r3, r3
 8018760:	429a      	cmp	r2, r3
 8018762:	d102      	bne.n	801876a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018764:	f04f 33ff 	mov.w	r3, #4294967295
 8018768:	e0b6      	b.n	80188d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801876a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801876c:	889b      	ldrh	r3, [r3, #4]
 801876e:	b29a      	uxth	r2, r3
 8018770:	693b      	ldr	r3, [r7, #16]
 8018772:	88db      	ldrh	r3, [r3, #6]
 8018774:	b29b      	uxth	r3, r3
 8018776:	429a      	cmp	r2, r3
 8018778:	d202      	bcs.n	8018780 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801877a:	f04f 33ff 	mov.w	r3, #4294967295
 801877e:	e0ab      	b.n	80188d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8018780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018782:	2b00      	cmp	r3, #0
 8018784:	d009      	beq.n	801879a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8018786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018788:	88db      	ldrh	r3, [r3, #6]
 801878a:	b29a      	uxth	r2, r3
 801878c:	693b      	ldr	r3, [r7, #16]
 801878e:	889b      	ldrh	r3, [r3, #4]
 8018790:	b29b      	uxth	r3, r3
 8018792:	429a      	cmp	r2, r3
 8018794:	d001      	beq.n	801879a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8018796:	2300      	movs	r3, #0
 8018798:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801879a:	693b      	ldr	r3, [r7, #16]
 801879c:	681b      	ldr	r3, [r3, #0]
 801879e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80187a0:	693b      	ldr	r3, [r7, #16]
 80187a2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80187a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187a6:	2b00      	cmp	r3, #0
 80187a8:	d193      	bne.n	80186d2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80187aa:	e000      	b.n	80187ae <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80187ac:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80187ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187b0:	2b00      	cmp	r3, #0
 80187b2:	d12d      	bne.n	8018810 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80187b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187b6:	2b00      	cmp	r3, #0
 80187b8:	d01c      	beq.n	80187f4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80187ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187bc:	88db      	ldrh	r3, [r3, #6]
 80187be:	b29a      	uxth	r2, r3
 80187c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187c2:	889b      	ldrh	r3, [r3, #4]
 80187c4:	b29b      	uxth	r3, r3
 80187c6:	429a      	cmp	r2, r3
 80187c8:	d906      	bls.n	80187d8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80187ca:	4b45      	ldr	r3, [pc, #276]	; (80188e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80187cc:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80187d0:	4944      	ldr	r1, [pc, #272]	; (80188e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80187d2:	4845      	ldr	r0, [pc, #276]	; (80188e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80187d4:	f001 f9dc 	bl	8019b90 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80187d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187da:	68ba      	ldr	r2, [r7, #8]
 80187dc:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80187de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187e0:	88db      	ldrh	r3, [r3, #6]
 80187e2:	b29a      	uxth	r2, r3
 80187e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187e6:	889b      	ldrh	r3, [r3, #4]
 80187e8:	b29b      	uxth	r3, r3
 80187ea:	429a      	cmp	r2, r3
 80187ec:	d010      	beq.n	8018810 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80187ee:	2300      	movs	r3, #0
 80187f0:	623b      	str	r3, [r7, #32]
 80187f2:	e00d      	b.n	8018810 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80187f4:	68fb      	ldr	r3, [r7, #12]
 80187f6:	685b      	ldr	r3, [r3, #4]
 80187f8:	2b00      	cmp	r3, #0
 80187fa:	d006      	beq.n	801880a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80187fc:	4b38      	ldr	r3, [pc, #224]	; (80188e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80187fe:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8018802:	493a      	ldr	r1, [pc, #232]	; (80188ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8018804:	4838      	ldr	r0, [pc, #224]	; (80188e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018806:	f001 f9c3 	bl	8019b90 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801880a:	68fb      	ldr	r3, [r7, #12]
 801880c:	68ba      	ldr	r2, [r7, #8]
 801880e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8018810:	687b      	ldr	r3, [r7, #4]
 8018812:	2b00      	cmp	r3, #0
 8018814:	d105      	bne.n	8018822 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8018816:	68fb      	ldr	r3, [r7, #12]
 8018818:	7f9b      	ldrb	r3, [r3, #30]
 801881a:	f003 0301 	and.w	r3, r3, #1
 801881e:	2b00      	cmp	r3, #0
 8018820:	d059      	beq.n	80188d6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8018822:	6a3b      	ldr	r3, [r7, #32]
 8018824:	2b00      	cmp	r3, #0
 8018826:	d04f      	beq.n	80188c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8018828:	68fb      	ldr	r3, [r7, #12]
 801882a:	685b      	ldr	r3, [r3, #4]
 801882c:	2b00      	cmp	r3, #0
 801882e:	d006      	beq.n	801883e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8018830:	68fb      	ldr	r3, [r7, #12]
 8018832:	685b      	ldr	r3, [r3, #4]
 8018834:	685b      	ldr	r3, [r3, #4]
 8018836:	889b      	ldrh	r3, [r3, #4]
 8018838:	b29b      	uxth	r3, r3
 801883a:	2b00      	cmp	r3, #0
 801883c:	d002      	beq.n	8018844 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801883e:	2300      	movs	r3, #0
 8018840:	623b      	str	r3, [r7, #32]
 8018842:	e041      	b.n	80188c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8018844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018846:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8018848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801884a:	681b      	ldr	r3, [r3, #0]
 801884c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801884e:	e012      	b.n	8018876 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8018850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018852:	685b      	ldr	r3, [r3, #4]
 8018854:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8018856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018858:	88db      	ldrh	r3, [r3, #6]
 801885a:	b29a      	uxth	r2, r3
 801885c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801885e:	889b      	ldrh	r3, [r3, #4]
 8018860:	b29b      	uxth	r3, r3
 8018862:	429a      	cmp	r2, r3
 8018864:	d002      	beq.n	801886c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8018866:	2300      	movs	r3, #0
 8018868:	623b      	str	r3, [r7, #32]
            break;
 801886a:	e007      	b.n	801887c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801886c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801886e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8018870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018872:	681b      	ldr	r3, [r3, #0]
 8018874:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8018876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018878:	2b00      	cmp	r3, #0
 801887a:	d1e9      	bne.n	8018850 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801887c:	6a3b      	ldr	r3, [r7, #32]
 801887e:	2b00      	cmp	r3, #0
 8018880:	d022      	beq.n	80188c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8018882:	68fb      	ldr	r3, [r7, #12]
 8018884:	685b      	ldr	r3, [r3, #4]
 8018886:	2b00      	cmp	r3, #0
 8018888:	d106      	bne.n	8018898 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801888a:	4b15      	ldr	r3, [pc, #84]	; (80188e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801888c:	f240 12df 	movw	r2, #479	; 0x1df
 8018890:	4917      	ldr	r1, [pc, #92]	; (80188f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018892:	4815      	ldr	r0, [pc, #84]	; (80188e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018894:	f001 f97c 	bl	8019b90 <iprintf>
          LWIP_ASSERT("sanity check",
 8018898:	68fb      	ldr	r3, [r7, #12]
 801889a:	685b      	ldr	r3, [r3, #4]
 801889c:	685b      	ldr	r3, [r3, #4]
 801889e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80188a0:	429a      	cmp	r2, r3
 80188a2:	d106      	bne.n	80188b2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80188a4:	4b0e      	ldr	r3, [pc, #56]	; (80188e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80188a6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80188aa:	4911      	ldr	r1, [pc, #68]	; (80188f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80188ac:	480e      	ldr	r0, [pc, #56]	; (80188e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80188ae:	f001 f96f 	bl	8019b90 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80188b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80188b4:	681b      	ldr	r3, [r3, #0]
 80188b6:	2b00      	cmp	r3, #0
 80188b8:	d006      	beq.n	80188c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80188ba:	4b09      	ldr	r3, [pc, #36]	; (80188e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80188bc:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80188c0:	490c      	ldr	r1, [pc, #48]	; (80188f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80188c2:	4809      	ldr	r0, [pc, #36]	; (80188e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80188c4:	f001 f964 	bl	8019b90 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80188c8:	6a3b      	ldr	r3, [r7, #32]
 80188ca:	2b00      	cmp	r3, #0
 80188cc:	bf14      	ite	ne
 80188ce:	2301      	movne	r3, #1
 80188d0:	2300      	moveq	r3, #0
 80188d2:	b2db      	uxtb	r3, r3
 80188d4:	e000      	b.n	80188d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80188d6:	2300      	movs	r3, #0
}
 80188d8:	4618      	mov	r0, r3
 80188da:	3730      	adds	r7, #48	; 0x30
 80188dc:	46bd      	mov	sp, r7
 80188de:	bd80      	pop	{r7, pc}
 80188e0:	0801eb8c 	.word	0x0801eb8c
 80188e4:	0801ec70 	.word	0x0801ec70
 80188e8:	0801ebd4 	.word	0x0801ebd4
 80188ec:	0801ec90 	.word	0x0801ec90
 80188f0:	0801ecc8 	.word	0x0801ecc8
 80188f4:	0801ecd8 	.word	0x0801ecd8

080188f8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80188f8:	b580      	push	{r7, lr}
 80188fa:	b08e      	sub	sp, #56	; 0x38
 80188fc:	af00      	add	r7, sp, #0
 80188fe:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8018900:	687b      	ldr	r3, [r7, #4]
 8018902:	685b      	ldr	r3, [r3, #4]
 8018904:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8018906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018908:	781b      	ldrb	r3, [r3, #0]
 801890a:	f003 030f 	and.w	r3, r3, #15
 801890e:	b2db      	uxtb	r3, r3
 8018910:	009b      	lsls	r3, r3, #2
 8018912:	b2db      	uxtb	r3, r3
 8018914:	2b14      	cmp	r3, #20
 8018916:	f040 8171 	bne.w	8018bfc <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801891a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801891c:	88db      	ldrh	r3, [r3, #6]
 801891e:	b29b      	uxth	r3, r3
 8018920:	4618      	mov	r0, r3
 8018922:	f7f6 fe17 	bl	800f554 <lwip_htons>
 8018926:	4603      	mov	r3, r0
 8018928:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801892c:	b29b      	uxth	r3, r3
 801892e:	00db      	lsls	r3, r3, #3
 8018930:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8018932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018934:	885b      	ldrh	r3, [r3, #2]
 8018936:	b29b      	uxth	r3, r3
 8018938:	4618      	mov	r0, r3
 801893a:	f7f6 fe0b 	bl	800f554 <lwip_htons>
 801893e:	4603      	mov	r3, r0
 8018940:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8018942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018944:	781b      	ldrb	r3, [r3, #0]
 8018946:	f003 030f 	and.w	r3, r3, #15
 801894a:	b2db      	uxtb	r3, r3
 801894c:	009b      	lsls	r3, r3, #2
 801894e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8018952:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018956:	b29b      	uxth	r3, r3
 8018958:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801895a:	429a      	cmp	r2, r3
 801895c:	f0c0 8150 	bcc.w	8018c00 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8018960:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018964:	b29b      	uxth	r3, r3
 8018966:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018968:	1ad3      	subs	r3, r2, r3
 801896a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801896c:	6878      	ldr	r0, [r7, #4]
 801896e:	f7f8 fa7d 	bl	8010e6c <pbuf_clen>
 8018972:	4603      	mov	r3, r0
 8018974:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8018976:	4b8c      	ldr	r3, [pc, #560]	; (8018ba8 <ip4_reass+0x2b0>)
 8018978:	881b      	ldrh	r3, [r3, #0]
 801897a:	461a      	mov	r2, r3
 801897c:	8c3b      	ldrh	r3, [r7, #32]
 801897e:	4413      	add	r3, r2
 8018980:	2b0a      	cmp	r3, #10
 8018982:	dd10      	ble.n	80189a6 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018984:	8c3b      	ldrh	r3, [r7, #32]
 8018986:	4619      	mov	r1, r3
 8018988:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801898a:	f7ff fd81 	bl	8018490 <ip_reass_remove_oldest_datagram>
 801898e:	4603      	mov	r3, r0
 8018990:	2b00      	cmp	r3, #0
 8018992:	f000 8137 	beq.w	8018c04 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8018996:	4b84      	ldr	r3, [pc, #528]	; (8018ba8 <ip4_reass+0x2b0>)
 8018998:	881b      	ldrh	r3, [r3, #0]
 801899a:	461a      	mov	r2, r3
 801899c:	8c3b      	ldrh	r3, [r7, #32]
 801899e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80189a0:	2b0a      	cmp	r3, #10
 80189a2:	f300 812f 	bgt.w	8018c04 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80189a6:	4b81      	ldr	r3, [pc, #516]	; (8018bac <ip4_reass+0x2b4>)
 80189a8:	681b      	ldr	r3, [r3, #0]
 80189aa:	633b      	str	r3, [r7, #48]	; 0x30
 80189ac:	e015      	b.n	80189da <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80189ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189b0:	695a      	ldr	r2, [r3, #20]
 80189b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189b4:	68db      	ldr	r3, [r3, #12]
 80189b6:	429a      	cmp	r2, r3
 80189b8:	d10c      	bne.n	80189d4 <ip4_reass+0xdc>
 80189ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189bc:	699a      	ldr	r2, [r3, #24]
 80189be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189c0:	691b      	ldr	r3, [r3, #16]
 80189c2:	429a      	cmp	r2, r3
 80189c4:	d106      	bne.n	80189d4 <ip4_reass+0xdc>
 80189c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189c8:	899a      	ldrh	r2, [r3, #12]
 80189ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189cc:	889b      	ldrh	r3, [r3, #4]
 80189ce:	b29b      	uxth	r3, r3
 80189d0:	429a      	cmp	r2, r3
 80189d2:	d006      	beq.n	80189e2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80189d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189d6:	681b      	ldr	r3, [r3, #0]
 80189d8:	633b      	str	r3, [r7, #48]	; 0x30
 80189da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189dc:	2b00      	cmp	r3, #0
 80189de:	d1e6      	bne.n	80189ae <ip4_reass+0xb6>
 80189e0:	e000      	b.n	80189e4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80189e2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80189e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189e6:	2b00      	cmp	r3, #0
 80189e8:	d109      	bne.n	80189fe <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80189ea:	8c3b      	ldrh	r3, [r7, #32]
 80189ec:	4619      	mov	r1, r3
 80189ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80189f0:	f7ff fdb0 	bl	8018554 <ip_reass_enqueue_new_datagram>
 80189f4:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80189f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189f8:	2b00      	cmp	r3, #0
 80189fa:	d11c      	bne.n	8018a36 <ip4_reass+0x13e>
      goto nullreturn;
 80189fc:	e105      	b.n	8018c0a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80189fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a00:	88db      	ldrh	r3, [r3, #6]
 8018a02:	b29b      	uxth	r3, r3
 8018a04:	4618      	mov	r0, r3
 8018a06:	f7f6 fda5 	bl	800f554 <lwip_htons>
 8018a0a:	4603      	mov	r3, r0
 8018a0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018a10:	2b00      	cmp	r3, #0
 8018a12:	d110      	bne.n	8018a36 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8018a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a16:	89db      	ldrh	r3, [r3, #14]
 8018a18:	4618      	mov	r0, r3
 8018a1a:	f7f6 fd9b 	bl	800f554 <lwip_htons>
 8018a1e:	4603      	mov	r3, r0
 8018a20:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018a24:	2b00      	cmp	r3, #0
 8018a26:	d006      	beq.n	8018a36 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8018a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a2a:	3308      	adds	r3, #8
 8018a2c:	2214      	movs	r2, #20
 8018a2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018a30:	4618      	mov	r0, r3
 8018a32:	f001 fa7c 	bl	8019f2e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8018a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a38:	88db      	ldrh	r3, [r3, #6]
 8018a3a:	b29b      	uxth	r3, r3
 8018a3c:	f003 0320 	and.w	r3, r3, #32
 8018a40:	2b00      	cmp	r3, #0
 8018a42:	bf0c      	ite	eq
 8018a44:	2301      	moveq	r3, #1
 8018a46:	2300      	movne	r3, #0
 8018a48:	b2db      	uxtb	r3, r3
 8018a4a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8018a4c:	69fb      	ldr	r3, [r7, #28]
 8018a4e:	2b00      	cmp	r3, #0
 8018a50:	d00e      	beq.n	8018a70 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8018a52:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018a54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018a56:	4413      	add	r3, r2
 8018a58:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8018a5a:	8b7a      	ldrh	r2, [r7, #26]
 8018a5c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018a5e:	429a      	cmp	r2, r3
 8018a60:	f0c0 80a0 	bcc.w	8018ba4 <ip4_reass+0x2ac>
 8018a64:	8b7b      	ldrh	r3, [r7, #26]
 8018a66:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8018a6a:	4293      	cmp	r3, r2
 8018a6c:	f200 809a 	bhi.w	8018ba4 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8018a70:	69fa      	ldr	r2, [r7, #28]
 8018a72:	6879      	ldr	r1, [r7, #4]
 8018a74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018a76:	f7ff fdd5 	bl	8018624 <ip_reass_chain_frag_into_datagram_and_validate>
 8018a7a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8018a7c:	697b      	ldr	r3, [r7, #20]
 8018a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018a82:	f000 809b 	beq.w	8018bbc <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8018a86:	4b48      	ldr	r3, [pc, #288]	; (8018ba8 <ip4_reass+0x2b0>)
 8018a88:	881a      	ldrh	r2, [r3, #0]
 8018a8a:	8c3b      	ldrh	r3, [r7, #32]
 8018a8c:	4413      	add	r3, r2
 8018a8e:	b29a      	uxth	r2, r3
 8018a90:	4b45      	ldr	r3, [pc, #276]	; (8018ba8 <ip4_reass+0x2b0>)
 8018a92:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8018a94:	69fb      	ldr	r3, [r7, #28]
 8018a96:	2b00      	cmp	r3, #0
 8018a98:	d00d      	beq.n	8018ab6 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8018a9a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018a9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018a9e:	4413      	add	r3, r2
 8018aa0:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8018aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018aa4:	8a7a      	ldrh	r2, [r7, #18]
 8018aa6:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8018aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018aaa:	7f9b      	ldrb	r3, [r3, #30]
 8018aac:	f043 0301 	orr.w	r3, r3, #1
 8018ab0:	b2da      	uxtb	r2, r3
 8018ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ab4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8018ab6:	697b      	ldr	r3, [r7, #20]
 8018ab8:	2b01      	cmp	r3, #1
 8018aba:	d171      	bne.n	8018ba0 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8018abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018abe:	8b9b      	ldrh	r3, [r3, #28]
 8018ac0:	3314      	adds	r3, #20
 8018ac2:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8018ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ac6:	685b      	ldr	r3, [r3, #4]
 8018ac8:	685b      	ldr	r3, [r3, #4]
 8018aca:	681b      	ldr	r3, [r3, #0]
 8018acc:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8018ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ad0:	685b      	ldr	r3, [r3, #4]
 8018ad2:	685b      	ldr	r3, [r3, #4]
 8018ad4:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8018ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ad8:	3308      	adds	r3, #8
 8018ada:	2214      	movs	r2, #20
 8018adc:	4619      	mov	r1, r3
 8018ade:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018ae0:	f001 fa25 	bl	8019f2e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8018ae4:	8a3b      	ldrh	r3, [r7, #16]
 8018ae6:	4618      	mov	r0, r3
 8018ae8:	f7f6 fd34 	bl	800f554 <lwip_htons>
 8018aec:	4603      	mov	r3, r0
 8018aee:	461a      	mov	r2, r3
 8018af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018af2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8018af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018af6:	2200      	movs	r2, #0
 8018af8:	719a      	strb	r2, [r3, #6]
 8018afa:	2200      	movs	r2, #0
 8018afc:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8018afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b00:	2200      	movs	r2, #0
 8018b02:	729a      	strb	r2, [r3, #10]
 8018b04:	2200      	movs	r2, #0
 8018b06:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8018b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b0a:	685b      	ldr	r3, [r3, #4]
 8018b0c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8018b0e:	e00d      	b.n	8018b2c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8018b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018b12:	685b      	ldr	r3, [r3, #4]
 8018b14:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8018b16:	2114      	movs	r1, #20
 8018b18:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8018b1a:	f7f8 f899 	bl	8010c50 <pbuf_remove_header>
      pbuf_cat(p, r);
 8018b1e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018b20:	6878      	ldr	r0, [r7, #4]
 8018b22:	f7f8 f9dd 	bl	8010ee0 <pbuf_cat>
      r = iprh->next_pbuf;
 8018b26:	68fb      	ldr	r3, [r7, #12]
 8018b28:	681b      	ldr	r3, [r3, #0]
 8018b2a:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8018b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018b2e:	2b00      	cmp	r3, #0
 8018b30:	d1ee      	bne.n	8018b10 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8018b32:	4b1e      	ldr	r3, [pc, #120]	; (8018bac <ip4_reass+0x2b4>)
 8018b34:	681b      	ldr	r3, [r3, #0]
 8018b36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018b38:	429a      	cmp	r2, r3
 8018b3a:	d102      	bne.n	8018b42 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8018b3c:	2300      	movs	r3, #0
 8018b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018b40:	e010      	b.n	8018b64 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018b42:	4b1a      	ldr	r3, [pc, #104]	; (8018bac <ip4_reass+0x2b4>)
 8018b44:	681b      	ldr	r3, [r3, #0]
 8018b46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018b48:	e007      	b.n	8018b5a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8018b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b4c:	681b      	ldr	r3, [r3, #0]
 8018b4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018b50:	429a      	cmp	r2, r3
 8018b52:	d006      	beq.n	8018b62 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b56:	681b      	ldr	r3, [r3, #0]
 8018b58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b5c:	2b00      	cmp	r3, #0
 8018b5e:	d1f4      	bne.n	8018b4a <ip4_reass+0x252>
 8018b60:	e000      	b.n	8018b64 <ip4_reass+0x26c>
          break;
 8018b62:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8018b64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018b66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018b68:	f7ff fd2e 	bl	80185c8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8018b6c:	6878      	ldr	r0, [r7, #4]
 8018b6e:	f7f8 f97d 	bl	8010e6c <pbuf_clen>
 8018b72:	4603      	mov	r3, r0
 8018b74:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8018b76:	4b0c      	ldr	r3, [pc, #48]	; (8018ba8 <ip4_reass+0x2b0>)
 8018b78:	881b      	ldrh	r3, [r3, #0]
 8018b7a:	8c3a      	ldrh	r2, [r7, #32]
 8018b7c:	429a      	cmp	r2, r3
 8018b7e:	d906      	bls.n	8018b8e <ip4_reass+0x296>
 8018b80:	4b0b      	ldr	r3, [pc, #44]	; (8018bb0 <ip4_reass+0x2b8>)
 8018b82:	f240 229b 	movw	r2, #667	; 0x29b
 8018b86:	490b      	ldr	r1, [pc, #44]	; (8018bb4 <ip4_reass+0x2bc>)
 8018b88:	480b      	ldr	r0, [pc, #44]	; (8018bb8 <ip4_reass+0x2c0>)
 8018b8a:	f001 f801 	bl	8019b90 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8018b8e:	4b06      	ldr	r3, [pc, #24]	; (8018ba8 <ip4_reass+0x2b0>)
 8018b90:	881a      	ldrh	r2, [r3, #0]
 8018b92:	8c3b      	ldrh	r3, [r7, #32]
 8018b94:	1ad3      	subs	r3, r2, r3
 8018b96:	b29a      	uxth	r2, r3
 8018b98:	4b03      	ldr	r3, [pc, #12]	; (8018ba8 <ip4_reass+0x2b0>)
 8018b9a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8018b9c:	687b      	ldr	r3, [r7, #4]
 8018b9e:	e038      	b.n	8018c12 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8018ba0:	2300      	movs	r3, #0
 8018ba2:	e036      	b.n	8018c12 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8018ba4:	bf00      	nop
 8018ba6:	e00a      	b.n	8018bbe <ip4_reass+0x2c6>
 8018ba8:	2000719c 	.word	0x2000719c
 8018bac:	20007198 	.word	0x20007198
 8018bb0:	0801eb8c 	.word	0x0801eb8c
 8018bb4:	0801ecfc 	.word	0x0801ecfc
 8018bb8:	0801ebd4 	.word	0x0801ebd4
    goto nullreturn_ipr;
 8018bbc:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8018bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018bc0:	2b00      	cmp	r3, #0
 8018bc2:	d106      	bne.n	8018bd2 <ip4_reass+0x2da>
 8018bc4:	4b15      	ldr	r3, [pc, #84]	; (8018c1c <ip4_reass+0x324>)
 8018bc6:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8018bca:	4915      	ldr	r1, [pc, #84]	; (8018c20 <ip4_reass+0x328>)
 8018bcc:	4815      	ldr	r0, [pc, #84]	; (8018c24 <ip4_reass+0x32c>)
 8018bce:	f000 ffdf 	bl	8019b90 <iprintf>
  if (ipr->p == NULL) {
 8018bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018bd4:	685b      	ldr	r3, [r3, #4]
 8018bd6:	2b00      	cmp	r3, #0
 8018bd8:	d116      	bne.n	8018c08 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8018bda:	4b13      	ldr	r3, [pc, #76]	; (8018c28 <ip4_reass+0x330>)
 8018bdc:	681b      	ldr	r3, [r3, #0]
 8018bde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018be0:	429a      	cmp	r2, r3
 8018be2:	d006      	beq.n	8018bf2 <ip4_reass+0x2fa>
 8018be4:	4b0d      	ldr	r3, [pc, #52]	; (8018c1c <ip4_reass+0x324>)
 8018be6:	f240 22ab 	movw	r2, #683	; 0x2ab
 8018bea:	4910      	ldr	r1, [pc, #64]	; (8018c2c <ip4_reass+0x334>)
 8018bec:	480d      	ldr	r0, [pc, #52]	; (8018c24 <ip4_reass+0x32c>)
 8018bee:	f000 ffcf 	bl	8019b90 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8018bf2:	2100      	movs	r1, #0
 8018bf4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018bf6:	f7ff fce7 	bl	80185c8 <ip_reass_dequeue_datagram>
 8018bfa:	e006      	b.n	8018c0a <ip4_reass+0x312>
    goto nullreturn;
 8018bfc:	bf00      	nop
 8018bfe:	e004      	b.n	8018c0a <ip4_reass+0x312>
    goto nullreturn;
 8018c00:	bf00      	nop
 8018c02:	e002      	b.n	8018c0a <ip4_reass+0x312>
      goto nullreturn;
 8018c04:	bf00      	nop
 8018c06:	e000      	b.n	8018c0a <ip4_reass+0x312>
  }

nullreturn:
 8018c08:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8018c0a:	6878      	ldr	r0, [r7, #4]
 8018c0c:	f7f8 f8a6 	bl	8010d5c <pbuf_free>
  return NULL;
 8018c10:	2300      	movs	r3, #0
}
 8018c12:	4618      	mov	r0, r3
 8018c14:	3738      	adds	r7, #56	; 0x38
 8018c16:	46bd      	mov	sp, r7
 8018c18:	bd80      	pop	{r7, pc}
 8018c1a:	bf00      	nop
 8018c1c:	0801eb8c 	.word	0x0801eb8c
 8018c20:	0801ed18 	.word	0x0801ed18
 8018c24:	0801ebd4 	.word	0x0801ebd4
 8018c28:	20007198 	.word	0x20007198
 8018c2c:	0801ed24 	.word	0x0801ed24

08018c30 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8018c30:	b580      	push	{r7, lr}
 8018c32:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8018c34:	2005      	movs	r0, #5
 8018c36:	f7f7 f9ab 	bl	800ff90 <memp_malloc>
 8018c3a:	4603      	mov	r3, r0
}
 8018c3c:	4618      	mov	r0, r3
 8018c3e:	bd80      	pop	{r7, pc}

08018c40 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8018c40:	b580      	push	{r7, lr}
 8018c42:	b082      	sub	sp, #8
 8018c44:	af00      	add	r7, sp, #0
 8018c46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8018c48:	687b      	ldr	r3, [r7, #4]
 8018c4a:	2b00      	cmp	r3, #0
 8018c4c:	d106      	bne.n	8018c5c <ip_frag_free_pbuf_custom_ref+0x1c>
 8018c4e:	4b07      	ldr	r3, [pc, #28]	; (8018c6c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8018c50:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8018c54:	4906      	ldr	r1, [pc, #24]	; (8018c70 <ip_frag_free_pbuf_custom_ref+0x30>)
 8018c56:	4807      	ldr	r0, [pc, #28]	; (8018c74 <ip_frag_free_pbuf_custom_ref+0x34>)
 8018c58:	f000 ff9a 	bl	8019b90 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8018c5c:	6879      	ldr	r1, [r7, #4]
 8018c5e:	2005      	movs	r0, #5
 8018c60:	f7f7 fa06 	bl	8010070 <memp_free>
}
 8018c64:	bf00      	nop
 8018c66:	3708      	adds	r7, #8
 8018c68:	46bd      	mov	sp, r7
 8018c6a:	bd80      	pop	{r7, pc}
 8018c6c:	0801eb8c 	.word	0x0801eb8c
 8018c70:	0801ed44 	.word	0x0801ed44
 8018c74:	0801ebd4 	.word	0x0801ebd4

08018c78 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8018c78:	b580      	push	{r7, lr}
 8018c7a:	b084      	sub	sp, #16
 8018c7c:	af00      	add	r7, sp, #0
 8018c7e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8018c80:	687b      	ldr	r3, [r7, #4]
 8018c82:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8018c84:	68fb      	ldr	r3, [r7, #12]
 8018c86:	2b00      	cmp	r3, #0
 8018c88:	d106      	bne.n	8018c98 <ipfrag_free_pbuf_custom+0x20>
 8018c8a:	4b11      	ldr	r3, [pc, #68]	; (8018cd0 <ipfrag_free_pbuf_custom+0x58>)
 8018c8c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8018c90:	4910      	ldr	r1, [pc, #64]	; (8018cd4 <ipfrag_free_pbuf_custom+0x5c>)
 8018c92:	4811      	ldr	r0, [pc, #68]	; (8018cd8 <ipfrag_free_pbuf_custom+0x60>)
 8018c94:	f000 ff7c 	bl	8019b90 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8018c98:	68fa      	ldr	r2, [r7, #12]
 8018c9a:	687b      	ldr	r3, [r7, #4]
 8018c9c:	429a      	cmp	r2, r3
 8018c9e:	d006      	beq.n	8018cae <ipfrag_free_pbuf_custom+0x36>
 8018ca0:	4b0b      	ldr	r3, [pc, #44]	; (8018cd0 <ipfrag_free_pbuf_custom+0x58>)
 8018ca2:	f240 22cf 	movw	r2, #719	; 0x2cf
 8018ca6:	490d      	ldr	r1, [pc, #52]	; (8018cdc <ipfrag_free_pbuf_custom+0x64>)
 8018ca8:	480b      	ldr	r0, [pc, #44]	; (8018cd8 <ipfrag_free_pbuf_custom+0x60>)
 8018caa:	f000 ff71 	bl	8019b90 <iprintf>
  if (pcr->original != NULL) {
 8018cae:	68fb      	ldr	r3, [r7, #12]
 8018cb0:	695b      	ldr	r3, [r3, #20]
 8018cb2:	2b00      	cmp	r3, #0
 8018cb4:	d004      	beq.n	8018cc0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8018cb6:	68fb      	ldr	r3, [r7, #12]
 8018cb8:	695b      	ldr	r3, [r3, #20]
 8018cba:	4618      	mov	r0, r3
 8018cbc:	f7f8 f84e 	bl	8010d5c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8018cc0:	68f8      	ldr	r0, [r7, #12]
 8018cc2:	f7ff ffbd 	bl	8018c40 <ip_frag_free_pbuf_custom_ref>
}
 8018cc6:	bf00      	nop
 8018cc8:	3710      	adds	r7, #16
 8018cca:	46bd      	mov	sp, r7
 8018ccc:	bd80      	pop	{r7, pc}
 8018cce:	bf00      	nop
 8018cd0:	0801eb8c 	.word	0x0801eb8c
 8018cd4:	0801ed50 	.word	0x0801ed50
 8018cd8:	0801ebd4 	.word	0x0801ebd4
 8018cdc:	0801ed5c 	.word	0x0801ed5c

08018ce0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8018ce0:	b580      	push	{r7, lr}
 8018ce2:	b094      	sub	sp, #80	; 0x50
 8018ce4:	af02      	add	r7, sp, #8
 8018ce6:	60f8      	str	r0, [r7, #12]
 8018ce8:	60b9      	str	r1, [r7, #8]
 8018cea:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8018cec:	2300      	movs	r3, #0
 8018cee:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8018cf2:	68bb      	ldr	r3, [r7, #8]
 8018cf4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8018cf6:	3b14      	subs	r3, #20
 8018cf8:	2b00      	cmp	r3, #0
 8018cfa:	da00      	bge.n	8018cfe <ip4_frag+0x1e>
 8018cfc:	3307      	adds	r3, #7
 8018cfe:	10db      	asrs	r3, r3, #3
 8018d00:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8018d02:	2314      	movs	r3, #20
 8018d04:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8018d06:	68fb      	ldr	r3, [r7, #12]
 8018d08:	685b      	ldr	r3, [r3, #4]
 8018d0a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8018d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018d0e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8018d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d12:	781b      	ldrb	r3, [r3, #0]
 8018d14:	f003 030f 	and.w	r3, r3, #15
 8018d18:	b2db      	uxtb	r3, r3
 8018d1a:	009b      	lsls	r3, r3, #2
 8018d1c:	b2db      	uxtb	r3, r3
 8018d1e:	2b14      	cmp	r3, #20
 8018d20:	d002      	beq.n	8018d28 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8018d22:	f06f 0305 	mvn.w	r3, #5
 8018d26:	e110      	b.n	8018f4a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8018d28:	68fb      	ldr	r3, [r7, #12]
 8018d2a:	895b      	ldrh	r3, [r3, #10]
 8018d2c:	2b13      	cmp	r3, #19
 8018d2e:	d809      	bhi.n	8018d44 <ip4_frag+0x64>
 8018d30:	4b88      	ldr	r3, [pc, #544]	; (8018f54 <ip4_frag+0x274>)
 8018d32:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8018d36:	4988      	ldr	r1, [pc, #544]	; (8018f58 <ip4_frag+0x278>)
 8018d38:	4888      	ldr	r0, [pc, #544]	; (8018f5c <ip4_frag+0x27c>)
 8018d3a:	f000 ff29 	bl	8019b90 <iprintf>
 8018d3e:	f06f 0305 	mvn.w	r3, #5
 8018d42:	e102      	b.n	8018f4a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8018d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d46:	88db      	ldrh	r3, [r3, #6]
 8018d48:	b29b      	uxth	r3, r3
 8018d4a:	4618      	mov	r0, r3
 8018d4c:	f7f6 fc02 	bl	800f554 <lwip_htons>
 8018d50:	4603      	mov	r3, r0
 8018d52:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8018d54:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018d56:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018d5a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8018d5e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018d60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8018d64:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8018d66:	68fb      	ldr	r3, [r7, #12]
 8018d68:	891b      	ldrh	r3, [r3, #8]
 8018d6a:	3b14      	subs	r3, #20
 8018d6c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8018d70:	e0e1      	b.n	8018f36 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8018d72:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018d74:	00db      	lsls	r3, r3, #3
 8018d76:	b29b      	uxth	r3, r3
 8018d78:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018d7c:	4293      	cmp	r3, r2
 8018d7e:	bf28      	it	cs
 8018d80:	4613      	movcs	r3, r2
 8018d82:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8018d84:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018d88:	2114      	movs	r1, #20
 8018d8a:	200e      	movs	r0, #14
 8018d8c:	f7f7 fd02 	bl	8010794 <pbuf_alloc>
 8018d90:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8018d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d94:	2b00      	cmp	r3, #0
 8018d96:	f000 80d5 	beq.w	8018f44 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8018d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d9c:	895b      	ldrh	r3, [r3, #10]
 8018d9e:	2b13      	cmp	r3, #19
 8018da0:	d806      	bhi.n	8018db0 <ip4_frag+0xd0>
 8018da2:	4b6c      	ldr	r3, [pc, #432]	; (8018f54 <ip4_frag+0x274>)
 8018da4:	f44f 7249 	mov.w	r2, #804	; 0x324
 8018da8:	496d      	ldr	r1, [pc, #436]	; (8018f60 <ip4_frag+0x280>)
 8018daa:	486c      	ldr	r0, [pc, #432]	; (8018f5c <ip4_frag+0x27c>)
 8018dac:	f000 fef0 	bl	8019b90 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8018db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018db2:	685b      	ldr	r3, [r3, #4]
 8018db4:	2214      	movs	r2, #20
 8018db6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018db8:	4618      	mov	r0, r3
 8018dba:	f001 f8b8 	bl	8019f2e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8018dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018dc0:	685b      	ldr	r3, [r3, #4]
 8018dc2:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8018dc4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018dc6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8018dca:	e064      	b.n	8018e96 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8018dcc:	68fb      	ldr	r3, [r7, #12]
 8018dce:	895a      	ldrh	r2, [r3, #10]
 8018dd0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018dd2:	1ad3      	subs	r3, r2, r3
 8018dd4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8018dd6:	68fb      	ldr	r3, [r7, #12]
 8018dd8:	895b      	ldrh	r3, [r3, #10]
 8018dda:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018ddc:	429a      	cmp	r2, r3
 8018dde:	d906      	bls.n	8018dee <ip4_frag+0x10e>
 8018de0:	4b5c      	ldr	r3, [pc, #368]	; (8018f54 <ip4_frag+0x274>)
 8018de2:	f240 322d 	movw	r2, #813	; 0x32d
 8018de6:	495f      	ldr	r1, [pc, #380]	; (8018f64 <ip4_frag+0x284>)
 8018de8:	485c      	ldr	r0, [pc, #368]	; (8018f5c <ip4_frag+0x27c>)
 8018dea:	f000 fed1 	bl	8019b90 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8018dee:	8bfa      	ldrh	r2, [r7, #30]
 8018df0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018df4:	4293      	cmp	r3, r2
 8018df6:	bf28      	it	cs
 8018df8:	4613      	movcs	r3, r2
 8018dfa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8018dfe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018e02:	2b00      	cmp	r3, #0
 8018e04:	d105      	bne.n	8018e12 <ip4_frag+0x132>
        poff = 0;
 8018e06:	2300      	movs	r3, #0
 8018e08:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8018e0a:	68fb      	ldr	r3, [r7, #12]
 8018e0c:	681b      	ldr	r3, [r3, #0]
 8018e0e:	60fb      	str	r3, [r7, #12]
        continue;
 8018e10:	e041      	b.n	8018e96 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8018e12:	f7ff ff0d 	bl	8018c30 <ip_frag_alloc_pbuf_custom_ref>
 8018e16:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8018e18:	69bb      	ldr	r3, [r7, #24]
 8018e1a:	2b00      	cmp	r3, #0
 8018e1c:	d103      	bne.n	8018e26 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8018e1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018e20:	f7f7 ff9c 	bl	8010d5c <pbuf_free>
        goto memerr;
 8018e24:	e08f      	b.n	8018f46 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018e26:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8018e28:	68fb      	ldr	r3, [r7, #12]
 8018e2a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018e2c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018e2e:	4413      	add	r3, r2
 8018e30:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8018e34:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8018e38:	9201      	str	r2, [sp, #4]
 8018e3a:	9300      	str	r3, [sp, #0]
 8018e3c:	4603      	mov	r3, r0
 8018e3e:	2241      	movs	r2, #65	; 0x41
 8018e40:	2000      	movs	r0, #0
 8018e42:	f7f7 fdd3 	bl	80109ec <pbuf_alloced_custom>
 8018e46:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8018e48:	697b      	ldr	r3, [r7, #20]
 8018e4a:	2b00      	cmp	r3, #0
 8018e4c:	d106      	bne.n	8018e5c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8018e4e:	69b8      	ldr	r0, [r7, #24]
 8018e50:	f7ff fef6 	bl	8018c40 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8018e54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018e56:	f7f7 ff81 	bl	8010d5c <pbuf_free>
        goto memerr;
 8018e5a:	e074      	b.n	8018f46 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8018e5c:	68f8      	ldr	r0, [r7, #12]
 8018e5e:	f7f8 f81d 	bl	8010e9c <pbuf_ref>
      pcr->original = p;
 8018e62:	69bb      	ldr	r3, [r7, #24]
 8018e64:	68fa      	ldr	r2, [r7, #12]
 8018e66:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8018e68:	69bb      	ldr	r3, [r7, #24]
 8018e6a:	4a3f      	ldr	r2, [pc, #252]	; (8018f68 <ip4_frag+0x288>)
 8018e6c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8018e6e:	6979      	ldr	r1, [r7, #20]
 8018e70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018e72:	f7f8 f835 	bl	8010ee0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8018e76:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8018e7a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018e7e:	1ad3      	subs	r3, r2, r3
 8018e80:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8018e84:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018e88:	2b00      	cmp	r3, #0
 8018e8a:	d004      	beq.n	8018e96 <ip4_frag+0x1b6>
        poff = 0;
 8018e8c:	2300      	movs	r3, #0
 8018e8e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8018e90:	68fb      	ldr	r3, [r7, #12]
 8018e92:	681b      	ldr	r3, [r3, #0]
 8018e94:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8018e96:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018e9a:	2b00      	cmp	r3, #0
 8018e9c:	d196      	bne.n	8018dcc <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8018e9e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018ea0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018ea4:	4413      	add	r3, r2
 8018ea6:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8018ea8:	68bb      	ldr	r3, [r7, #8]
 8018eaa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8018eac:	f1a3 0213 	sub.w	r2, r3, #19
 8018eb0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018eb4:	429a      	cmp	r2, r3
 8018eb6:	bfcc      	ite	gt
 8018eb8:	2301      	movgt	r3, #1
 8018eba:	2300      	movle	r3, #0
 8018ebc:	b2db      	uxtb	r3, r3
 8018ebe:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8018ec0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8018ec4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018ec8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8018eca:	6a3b      	ldr	r3, [r7, #32]
 8018ecc:	2b00      	cmp	r3, #0
 8018ece:	d002      	beq.n	8018ed6 <ip4_frag+0x1f6>
 8018ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ed2:	2b00      	cmp	r3, #0
 8018ed4:	d003      	beq.n	8018ede <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8018ed6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018ed8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8018edc:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8018ede:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018ee0:	4618      	mov	r0, r3
 8018ee2:	f7f6 fb37 	bl	800f554 <lwip_htons>
 8018ee6:	4603      	mov	r3, r0
 8018ee8:	461a      	mov	r2, r3
 8018eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018eec:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8018eee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018ef0:	3314      	adds	r3, #20
 8018ef2:	b29b      	uxth	r3, r3
 8018ef4:	4618      	mov	r0, r3
 8018ef6:	f7f6 fb2d 	bl	800f554 <lwip_htons>
 8018efa:	4603      	mov	r3, r0
 8018efc:	461a      	mov	r2, r3
 8018efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f00:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8018f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f04:	2200      	movs	r2, #0
 8018f06:	729a      	strb	r2, [r3, #10]
 8018f08:	2200      	movs	r2, #0
 8018f0a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8018f0c:	68bb      	ldr	r3, [r7, #8]
 8018f0e:	695b      	ldr	r3, [r3, #20]
 8018f10:	687a      	ldr	r2, [r7, #4]
 8018f12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018f14:	68b8      	ldr	r0, [r7, #8]
 8018f16:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8018f18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018f1a:	f7f7 ff1f 	bl	8010d5c <pbuf_free>
    left = (u16_t)(left - fragsize);
 8018f1e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018f22:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018f24:	1ad3      	subs	r3, r2, r3
 8018f26:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8018f2a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8018f2e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018f30:	4413      	add	r3, r2
 8018f32:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8018f36:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018f3a:	2b00      	cmp	r3, #0
 8018f3c:	f47f af19 	bne.w	8018d72 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8018f40:	2300      	movs	r3, #0
 8018f42:	e002      	b.n	8018f4a <ip4_frag+0x26a>
      goto memerr;
 8018f44:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8018f46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018f4a:	4618      	mov	r0, r3
 8018f4c:	3748      	adds	r7, #72	; 0x48
 8018f4e:	46bd      	mov	sp, r7
 8018f50:	bd80      	pop	{r7, pc}
 8018f52:	bf00      	nop
 8018f54:	0801eb8c 	.word	0x0801eb8c
 8018f58:	0801ed68 	.word	0x0801ed68
 8018f5c:	0801ebd4 	.word	0x0801ebd4
 8018f60:	0801ed84 	.word	0x0801ed84
 8018f64:	0801eda4 	.word	0x0801eda4
 8018f68:	08018c79 	.word	0x08018c79

08018f6c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8018f6c:	b580      	push	{r7, lr}
 8018f6e:	b086      	sub	sp, #24
 8018f70:	af00      	add	r7, sp, #0
 8018f72:	6078      	str	r0, [r7, #4]
 8018f74:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8018f76:	230e      	movs	r3, #14
 8018f78:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8018f7a:	687b      	ldr	r3, [r7, #4]
 8018f7c:	895b      	ldrh	r3, [r3, #10]
 8018f7e:	2b0e      	cmp	r3, #14
 8018f80:	d96e      	bls.n	8019060 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8018f82:	687b      	ldr	r3, [r7, #4]
 8018f84:	7bdb      	ldrb	r3, [r3, #15]
 8018f86:	2b00      	cmp	r3, #0
 8018f88:	d106      	bne.n	8018f98 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8018f8a:	683b      	ldr	r3, [r7, #0]
 8018f8c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018f90:	3301      	adds	r3, #1
 8018f92:	b2da      	uxtb	r2, r3
 8018f94:	687b      	ldr	r3, [r7, #4]
 8018f96:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8018f98:	687b      	ldr	r3, [r7, #4]
 8018f9a:	685b      	ldr	r3, [r3, #4]
 8018f9c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8018f9e:	693b      	ldr	r3, [r7, #16]
 8018fa0:	7b1a      	ldrb	r2, [r3, #12]
 8018fa2:	7b5b      	ldrb	r3, [r3, #13]
 8018fa4:	021b      	lsls	r3, r3, #8
 8018fa6:	4313      	orrs	r3, r2
 8018fa8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8018faa:	693b      	ldr	r3, [r7, #16]
 8018fac:	781b      	ldrb	r3, [r3, #0]
 8018fae:	f003 0301 	and.w	r3, r3, #1
 8018fb2:	2b00      	cmp	r3, #0
 8018fb4:	d023      	beq.n	8018ffe <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8018fb6:	693b      	ldr	r3, [r7, #16]
 8018fb8:	781b      	ldrb	r3, [r3, #0]
 8018fba:	2b01      	cmp	r3, #1
 8018fbc:	d10f      	bne.n	8018fde <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018fbe:	693b      	ldr	r3, [r7, #16]
 8018fc0:	785b      	ldrb	r3, [r3, #1]
 8018fc2:	2b00      	cmp	r3, #0
 8018fc4:	d11b      	bne.n	8018ffe <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8018fc6:	693b      	ldr	r3, [r7, #16]
 8018fc8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018fca:	2b5e      	cmp	r3, #94	; 0x5e
 8018fcc:	d117      	bne.n	8018ffe <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8018fce:	687b      	ldr	r3, [r7, #4]
 8018fd0:	7b5b      	ldrb	r3, [r3, #13]
 8018fd2:	f043 0310 	orr.w	r3, r3, #16
 8018fd6:	b2da      	uxtb	r2, r3
 8018fd8:	687b      	ldr	r3, [r7, #4]
 8018fda:	735a      	strb	r2, [r3, #13]
 8018fdc:	e00f      	b.n	8018ffe <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8018fde:	693b      	ldr	r3, [r7, #16]
 8018fe0:	2206      	movs	r2, #6
 8018fe2:	4928      	ldr	r1, [pc, #160]	; (8019084 <ethernet_input+0x118>)
 8018fe4:	4618      	mov	r0, r3
 8018fe6:	f000 ff19 	bl	8019e1c <memcmp>
 8018fea:	4603      	mov	r3, r0
 8018fec:	2b00      	cmp	r3, #0
 8018fee:	d106      	bne.n	8018ffe <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8018ff0:	687b      	ldr	r3, [r7, #4]
 8018ff2:	7b5b      	ldrb	r3, [r3, #13]
 8018ff4:	f043 0308 	orr.w	r3, r3, #8
 8018ff8:	b2da      	uxtb	r2, r3
 8018ffa:	687b      	ldr	r3, [r7, #4]
 8018ffc:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8018ffe:	89fb      	ldrh	r3, [r7, #14]
 8019000:	2b08      	cmp	r3, #8
 8019002:	d003      	beq.n	801900c <ethernet_input+0xa0>
 8019004:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8019008:	d014      	beq.n	8019034 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801900a:	e032      	b.n	8019072 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801900c:	683b      	ldr	r3, [r7, #0]
 801900e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019012:	f003 0308 	and.w	r3, r3, #8
 8019016:	2b00      	cmp	r3, #0
 8019018:	d024      	beq.n	8019064 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801901a:	8afb      	ldrh	r3, [r7, #22]
 801901c:	4619      	mov	r1, r3
 801901e:	6878      	ldr	r0, [r7, #4]
 8019020:	f7f7 fe16 	bl	8010c50 <pbuf_remove_header>
 8019024:	4603      	mov	r3, r0
 8019026:	2b00      	cmp	r3, #0
 8019028:	d11e      	bne.n	8019068 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801902a:	6839      	ldr	r1, [r7, #0]
 801902c:	6878      	ldr	r0, [r7, #4]
 801902e:	f7fe ff21 	bl	8017e74 <ip4_input>
      break;
 8019032:	e013      	b.n	801905c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8019034:	683b      	ldr	r3, [r7, #0]
 8019036:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801903a:	f003 0308 	and.w	r3, r3, #8
 801903e:	2b00      	cmp	r3, #0
 8019040:	d014      	beq.n	801906c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8019042:	8afb      	ldrh	r3, [r7, #22]
 8019044:	4619      	mov	r1, r3
 8019046:	6878      	ldr	r0, [r7, #4]
 8019048:	f7f7 fe02 	bl	8010c50 <pbuf_remove_header>
 801904c:	4603      	mov	r3, r0
 801904e:	2b00      	cmp	r3, #0
 8019050:	d10e      	bne.n	8019070 <ethernet_input+0x104>
        etharp_input(p, netif);
 8019052:	6839      	ldr	r1, [r7, #0]
 8019054:	6878      	ldr	r0, [r7, #4]
 8019056:	f7fe f89b 	bl	8017190 <etharp_input>
      break;
 801905a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801905c:	2300      	movs	r3, #0
 801905e:	e00c      	b.n	801907a <ethernet_input+0x10e>
    goto free_and_return;
 8019060:	bf00      	nop
 8019062:	e006      	b.n	8019072 <ethernet_input+0x106>
        goto free_and_return;
 8019064:	bf00      	nop
 8019066:	e004      	b.n	8019072 <ethernet_input+0x106>
        goto free_and_return;
 8019068:	bf00      	nop
 801906a:	e002      	b.n	8019072 <ethernet_input+0x106>
        goto free_and_return;
 801906c:	bf00      	nop
 801906e:	e000      	b.n	8019072 <ethernet_input+0x106>
        goto free_and_return;
 8019070:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8019072:	6878      	ldr	r0, [r7, #4]
 8019074:	f7f7 fe72 	bl	8010d5c <pbuf_free>
  return ERR_OK;
 8019078:	2300      	movs	r3, #0
}
 801907a:	4618      	mov	r0, r3
 801907c:	3718      	adds	r7, #24
 801907e:	46bd      	mov	sp, r7
 8019080:	bd80      	pop	{r7, pc}
 8019082:	bf00      	nop
 8019084:	0801ef80 	.word	0x0801ef80

08019088 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8019088:	b580      	push	{r7, lr}
 801908a:	b086      	sub	sp, #24
 801908c:	af00      	add	r7, sp, #0
 801908e:	60f8      	str	r0, [r7, #12]
 8019090:	60b9      	str	r1, [r7, #8]
 8019092:	607a      	str	r2, [r7, #4]
 8019094:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8019096:	8c3b      	ldrh	r3, [r7, #32]
 8019098:	4618      	mov	r0, r3
 801909a:	f7f6 fa5b 	bl	800f554 <lwip_htons>
 801909e:	4603      	mov	r3, r0
 80190a0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80190a2:	210e      	movs	r1, #14
 80190a4:	68b8      	ldr	r0, [r7, #8]
 80190a6:	f7f7 fdc3 	bl	8010c30 <pbuf_add_header>
 80190aa:	4603      	mov	r3, r0
 80190ac:	2b00      	cmp	r3, #0
 80190ae:	d125      	bne.n	80190fc <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80190b0:	68bb      	ldr	r3, [r7, #8]
 80190b2:	685b      	ldr	r3, [r3, #4]
 80190b4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80190b6:	693b      	ldr	r3, [r7, #16]
 80190b8:	8afa      	ldrh	r2, [r7, #22]
 80190ba:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80190bc:	693b      	ldr	r3, [r7, #16]
 80190be:	2206      	movs	r2, #6
 80190c0:	6839      	ldr	r1, [r7, #0]
 80190c2:	4618      	mov	r0, r3
 80190c4:	f000 ff33 	bl	8019f2e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80190c8:	693b      	ldr	r3, [r7, #16]
 80190ca:	3306      	adds	r3, #6
 80190cc:	2206      	movs	r2, #6
 80190ce:	6879      	ldr	r1, [r7, #4]
 80190d0:	4618      	mov	r0, r3
 80190d2:	f000 ff2c 	bl	8019f2e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80190d6:	68fb      	ldr	r3, [r7, #12]
 80190d8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80190dc:	2b06      	cmp	r3, #6
 80190de:	d006      	beq.n	80190ee <ethernet_output+0x66>
 80190e0:	4b0a      	ldr	r3, [pc, #40]	; (801910c <ethernet_output+0x84>)
 80190e2:	f44f 7299 	mov.w	r2, #306	; 0x132
 80190e6:	490a      	ldr	r1, [pc, #40]	; (8019110 <ethernet_output+0x88>)
 80190e8:	480a      	ldr	r0, [pc, #40]	; (8019114 <ethernet_output+0x8c>)
 80190ea:	f000 fd51 	bl	8019b90 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80190ee:	68fb      	ldr	r3, [r7, #12]
 80190f0:	699b      	ldr	r3, [r3, #24]
 80190f2:	68b9      	ldr	r1, [r7, #8]
 80190f4:	68f8      	ldr	r0, [r7, #12]
 80190f6:	4798      	blx	r3
 80190f8:	4603      	mov	r3, r0
 80190fa:	e002      	b.n	8019102 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80190fc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80190fe:	f06f 0301 	mvn.w	r3, #1
}
 8019102:	4618      	mov	r0, r3
 8019104:	3718      	adds	r7, #24
 8019106:	46bd      	mov	sp, r7
 8019108:	bd80      	pop	{r7, pc}
 801910a:	bf00      	nop
 801910c:	0801edb4 	.word	0x0801edb4
 8019110:	0801edec 	.word	0x0801edec
 8019114:	0801ee20 	.word	0x0801ee20

08019118 <rand>:
 8019118:	4b16      	ldr	r3, [pc, #88]	; (8019174 <rand+0x5c>)
 801911a:	b510      	push	{r4, lr}
 801911c:	681c      	ldr	r4, [r3, #0]
 801911e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8019120:	b9b3      	cbnz	r3, 8019150 <rand+0x38>
 8019122:	2018      	movs	r0, #24
 8019124:	f001 fd70 	bl	801ac08 <malloc>
 8019128:	4602      	mov	r2, r0
 801912a:	6320      	str	r0, [r4, #48]	; 0x30
 801912c:	b920      	cbnz	r0, 8019138 <rand+0x20>
 801912e:	4b12      	ldr	r3, [pc, #72]	; (8019178 <rand+0x60>)
 8019130:	4812      	ldr	r0, [pc, #72]	; (801917c <rand+0x64>)
 8019132:	2152      	movs	r1, #82	; 0x52
 8019134:	f000 ff0a 	bl	8019f4c <__assert_func>
 8019138:	4911      	ldr	r1, [pc, #68]	; (8019180 <rand+0x68>)
 801913a:	4b12      	ldr	r3, [pc, #72]	; (8019184 <rand+0x6c>)
 801913c:	e9c0 1300 	strd	r1, r3, [r0]
 8019140:	4b11      	ldr	r3, [pc, #68]	; (8019188 <rand+0x70>)
 8019142:	6083      	str	r3, [r0, #8]
 8019144:	230b      	movs	r3, #11
 8019146:	8183      	strh	r3, [r0, #12]
 8019148:	2100      	movs	r1, #0
 801914a:	2001      	movs	r0, #1
 801914c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8019150:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8019152:	480e      	ldr	r0, [pc, #56]	; (801918c <rand+0x74>)
 8019154:	690b      	ldr	r3, [r1, #16]
 8019156:	694c      	ldr	r4, [r1, #20]
 8019158:	4a0d      	ldr	r2, [pc, #52]	; (8019190 <rand+0x78>)
 801915a:	4358      	muls	r0, r3
 801915c:	fb02 0004 	mla	r0, r2, r4, r0
 8019160:	fba3 3202 	umull	r3, r2, r3, r2
 8019164:	3301      	adds	r3, #1
 8019166:	eb40 0002 	adc.w	r0, r0, r2
 801916a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801916e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8019172:	bd10      	pop	{r4, pc}
 8019174:	200000bc 	.word	0x200000bc
 8019178:	0801ef8e 	.word	0x0801ef8e
 801917c:	0801efa5 	.word	0x0801efa5
 8019180:	abcd330e 	.word	0xabcd330e
 8019184:	e66d1234 	.word	0xe66d1234
 8019188:	0005deec 	.word	0x0005deec
 801918c:	5851f42d 	.word	0x5851f42d
 8019190:	4c957f2d 	.word	0x4c957f2d

08019194 <__cvt>:
 8019194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019196:	ed2d 8b02 	vpush	{d8}
 801919a:	eeb0 8b40 	vmov.f64	d8, d0
 801919e:	b085      	sub	sp, #20
 80191a0:	4617      	mov	r7, r2
 80191a2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80191a4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80191a6:	ee18 2a90 	vmov	r2, s17
 80191aa:	f025 0520 	bic.w	r5, r5, #32
 80191ae:	2a00      	cmp	r2, #0
 80191b0:	bfb6      	itet	lt
 80191b2:	222d      	movlt	r2, #45	; 0x2d
 80191b4:	2200      	movge	r2, #0
 80191b6:	eeb1 8b40 	vneglt.f64	d8, d0
 80191ba:	2d46      	cmp	r5, #70	; 0x46
 80191bc:	460c      	mov	r4, r1
 80191be:	701a      	strb	r2, [r3, #0]
 80191c0:	d004      	beq.n	80191cc <__cvt+0x38>
 80191c2:	2d45      	cmp	r5, #69	; 0x45
 80191c4:	d100      	bne.n	80191c8 <__cvt+0x34>
 80191c6:	3401      	adds	r4, #1
 80191c8:	2102      	movs	r1, #2
 80191ca:	e000      	b.n	80191ce <__cvt+0x3a>
 80191cc:	2103      	movs	r1, #3
 80191ce:	ab03      	add	r3, sp, #12
 80191d0:	9301      	str	r3, [sp, #4]
 80191d2:	ab02      	add	r3, sp, #8
 80191d4:	9300      	str	r3, [sp, #0]
 80191d6:	4622      	mov	r2, r4
 80191d8:	4633      	mov	r3, r6
 80191da:	eeb0 0b48 	vmov.f64	d0, d8
 80191de:	f000 ff5b 	bl	801a098 <_dtoa_r>
 80191e2:	2d47      	cmp	r5, #71	; 0x47
 80191e4:	d101      	bne.n	80191ea <__cvt+0x56>
 80191e6:	07fb      	lsls	r3, r7, #31
 80191e8:	d51a      	bpl.n	8019220 <__cvt+0x8c>
 80191ea:	2d46      	cmp	r5, #70	; 0x46
 80191ec:	eb00 0204 	add.w	r2, r0, r4
 80191f0:	d10c      	bne.n	801920c <__cvt+0x78>
 80191f2:	7803      	ldrb	r3, [r0, #0]
 80191f4:	2b30      	cmp	r3, #48	; 0x30
 80191f6:	d107      	bne.n	8019208 <__cvt+0x74>
 80191f8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80191fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019200:	bf1c      	itt	ne
 8019202:	f1c4 0401 	rsbne	r4, r4, #1
 8019206:	6034      	strne	r4, [r6, #0]
 8019208:	6833      	ldr	r3, [r6, #0]
 801920a:	441a      	add	r2, r3
 801920c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8019210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019214:	bf08      	it	eq
 8019216:	9203      	streq	r2, [sp, #12]
 8019218:	2130      	movs	r1, #48	; 0x30
 801921a:	9b03      	ldr	r3, [sp, #12]
 801921c:	4293      	cmp	r3, r2
 801921e:	d307      	bcc.n	8019230 <__cvt+0x9c>
 8019220:	9b03      	ldr	r3, [sp, #12]
 8019222:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019224:	1a1b      	subs	r3, r3, r0
 8019226:	6013      	str	r3, [r2, #0]
 8019228:	b005      	add	sp, #20
 801922a:	ecbd 8b02 	vpop	{d8}
 801922e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019230:	1c5c      	adds	r4, r3, #1
 8019232:	9403      	str	r4, [sp, #12]
 8019234:	7019      	strb	r1, [r3, #0]
 8019236:	e7f0      	b.n	801921a <__cvt+0x86>

08019238 <__exponent>:
 8019238:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801923a:	4603      	mov	r3, r0
 801923c:	2900      	cmp	r1, #0
 801923e:	bfb8      	it	lt
 8019240:	4249      	neglt	r1, r1
 8019242:	f803 2b02 	strb.w	r2, [r3], #2
 8019246:	bfb4      	ite	lt
 8019248:	222d      	movlt	r2, #45	; 0x2d
 801924a:	222b      	movge	r2, #43	; 0x2b
 801924c:	2909      	cmp	r1, #9
 801924e:	7042      	strb	r2, [r0, #1]
 8019250:	dd2a      	ble.n	80192a8 <__exponent+0x70>
 8019252:	f10d 0207 	add.w	r2, sp, #7
 8019256:	4617      	mov	r7, r2
 8019258:	260a      	movs	r6, #10
 801925a:	4694      	mov	ip, r2
 801925c:	fb91 f5f6 	sdiv	r5, r1, r6
 8019260:	fb06 1415 	mls	r4, r6, r5, r1
 8019264:	3430      	adds	r4, #48	; 0x30
 8019266:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801926a:	460c      	mov	r4, r1
 801926c:	2c63      	cmp	r4, #99	; 0x63
 801926e:	f102 32ff 	add.w	r2, r2, #4294967295
 8019272:	4629      	mov	r1, r5
 8019274:	dcf1      	bgt.n	801925a <__exponent+0x22>
 8019276:	3130      	adds	r1, #48	; 0x30
 8019278:	f1ac 0402 	sub.w	r4, ip, #2
 801927c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8019280:	1c41      	adds	r1, r0, #1
 8019282:	4622      	mov	r2, r4
 8019284:	42ba      	cmp	r2, r7
 8019286:	d30a      	bcc.n	801929e <__exponent+0x66>
 8019288:	f10d 0209 	add.w	r2, sp, #9
 801928c:	eba2 020c 	sub.w	r2, r2, ip
 8019290:	42bc      	cmp	r4, r7
 8019292:	bf88      	it	hi
 8019294:	2200      	movhi	r2, #0
 8019296:	4413      	add	r3, r2
 8019298:	1a18      	subs	r0, r3, r0
 801929a:	b003      	add	sp, #12
 801929c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801929e:	f812 5b01 	ldrb.w	r5, [r2], #1
 80192a2:	f801 5f01 	strb.w	r5, [r1, #1]!
 80192a6:	e7ed      	b.n	8019284 <__exponent+0x4c>
 80192a8:	2330      	movs	r3, #48	; 0x30
 80192aa:	3130      	adds	r1, #48	; 0x30
 80192ac:	7083      	strb	r3, [r0, #2]
 80192ae:	70c1      	strb	r1, [r0, #3]
 80192b0:	1d03      	adds	r3, r0, #4
 80192b2:	e7f1      	b.n	8019298 <__exponent+0x60>
 80192b4:	0000      	movs	r0, r0
	...

080192b8 <_printf_float>:
 80192b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80192bc:	b08b      	sub	sp, #44	; 0x2c
 80192be:	460c      	mov	r4, r1
 80192c0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80192c4:	4616      	mov	r6, r2
 80192c6:	461f      	mov	r7, r3
 80192c8:	4605      	mov	r5, r0
 80192ca:	f000 fdbf 	bl	8019e4c <_localeconv_r>
 80192ce:	f8d0 b000 	ldr.w	fp, [r0]
 80192d2:	4658      	mov	r0, fp
 80192d4:	f7e8 fb04 	bl	80018e0 <strlen>
 80192d8:	2300      	movs	r3, #0
 80192da:	9308      	str	r3, [sp, #32]
 80192dc:	f8d8 3000 	ldr.w	r3, [r8]
 80192e0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80192e4:	6822      	ldr	r2, [r4, #0]
 80192e6:	3307      	adds	r3, #7
 80192e8:	f023 0307 	bic.w	r3, r3, #7
 80192ec:	f103 0108 	add.w	r1, r3, #8
 80192f0:	f8c8 1000 	str.w	r1, [r8]
 80192f4:	ed93 0b00 	vldr	d0, [r3]
 80192f8:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8019558 <_printf_float+0x2a0>
 80192fc:	eeb0 7bc0 	vabs.f64	d7, d0
 8019300:	eeb4 7b46 	vcmp.f64	d7, d6
 8019304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019308:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 801930c:	4682      	mov	sl, r0
 801930e:	dd24      	ble.n	801935a <_printf_float+0xa2>
 8019310:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8019314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019318:	d502      	bpl.n	8019320 <_printf_float+0x68>
 801931a:	232d      	movs	r3, #45	; 0x2d
 801931c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019320:	498f      	ldr	r1, [pc, #572]	; (8019560 <_printf_float+0x2a8>)
 8019322:	4b90      	ldr	r3, [pc, #576]	; (8019564 <_printf_float+0x2ac>)
 8019324:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8019328:	bf94      	ite	ls
 801932a:	4688      	movls	r8, r1
 801932c:	4698      	movhi	r8, r3
 801932e:	2303      	movs	r3, #3
 8019330:	6123      	str	r3, [r4, #16]
 8019332:	f022 0204 	bic.w	r2, r2, #4
 8019336:	2300      	movs	r3, #0
 8019338:	6022      	str	r2, [r4, #0]
 801933a:	9304      	str	r3, [sp, #16]
 801933c:	9700      	str	r7, [sp, #0]
 801933e:	4633      	mov	r3, r6
 8019340:	aa09      	add	r2, sp, #36	; 0x24
 8019342:	4621      	mov	r1, r4
 8019344:	4628      	mov	r0, r5
 8019346:	f000 f9d1 	bl	80196ec <_printf_common>
 801934a:	3001      	adds	r0, #1
 801934c:	f040 808a 	bne.w	8019464 <_printf_float+0x1ac>
 8019350:	f04f 30ff 	mov.w	r0, #4294967295
 8019354:	b00b      	add	sp, #44	; 0x2c
 8019356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801935a:	eeb4 0b40 	vcmp.f64	d0, d0
 801935e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019362:	d709      	bvc.n	8019378 <_printf_float+0xc0>
 8019364:	ee10 3a90 	vmov	r3, s1
 8019368:	2b00      	cmp	r3, #0
 801936a:	bfbc      	itt	lt
 801936c:	232d      	movlt	r3, #45	; 0x2d
 801936e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8019372:	497d      	ldr	r1, [pc, #500]	; (8019568 <_printf_float+0x2b0>)
 8019374:	4b7d      	ldr	r3, [pc, #500]	; (801956c <_printf_float+0x2b4>)
 8019376:	e7d5      	b.n	8019324 <_printf_float+0x6c>
 8019378:	6863      	ldr	r3, [r4, #4]
 801937a:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801937e:	9104      	str	r1, [sp, #16]
 8019380:	1c59      	adds	r1, r3, #1
 8019382:	d13c      	bne.n	80193fe <_printf_float+0x146>
 8019384:	2306      	movs	r3, #6
 8019386:	6063      	str	r3, [r4, #4]
 8019388:	2300      	movs	r3, #0
 801938a:	9303      	str	r3, [sp, #12]
 801938c:	ab08      	add	r3, sp, #32
 801938e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8019392:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8019396:	ab07      	add	r3, sp, #28
 8019398:	6861      	ldr	r1, [r4, #4]
 801939a:	9300      	str	r3, [sp, #0]
 801939c:	6022      	str	r2, [r4, #0]
 801939e:	f10d 031b 	add.w	r3, sp, #27
 80193a2:	4628      	mov	r0, r5
 80193a4:	f7ff fef6 	bl	8019194 <__cvt>
 80193a8:	9b04      	ldr	r3, [sp, #16]
 80193aa:	9907      	ldr	r1, [sp, #28]
 80193ac:	2b47      	cmp	r3, #71	; 0x47
 80193ae:	4680      	mov	r8, r0
 80193b0:	d108      	bne.n	80193c4 <_printf_float+0x10c>
 80193b2:	1cc8      	adds	r0, r1, #3
 80193b4:	db02      	blt.n	80193bc <_printf_float+0x104>
 80193b6:	6863      	ldr	r3, [r4, #4]
 80193b8:	4299      	cmp	r1, r3
 80193ba:	dd41      	ble.n	8019440 <_printf_float+0x188>
 80193bc:	f1a9 0902 	sub.w	r9, r9, #2
 80193c0:	fa5f f989 	uxtb.w	r9, r9
 80193c4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80193c8:	d820      	bhi.n	801940c <_printf_float+0x154>
 80193ca:	3901      	subs	r1, #1
 80193cc:	464a      	mov	r2, r9
 80193ce:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80193d2:	9107      	str	r1, [sp, #28]
 80193d4:	f7ff ff30 	bl	8019238 <__exponent>
 80193d8:	9a08      	ldr	r2, [sp, #32]
 80193da:	9004      	str	r0, [sp, #16]
 80193dc:	1813      	adds	r3, r2, r0
 80193de:	2a01      	cmp	r2, #1
 80193e0:	6123      	str	r3, [r4, #16]
 80193e2:	dc02      	bgt.n	80193ea <_printf_float+0x132>
 80193e4:	6822      	ldr	r2, [r4, #0]
 80193e6:	07d2      	lsls	r2, r2, #31
 80193e8:	d501      	bpl.n	80193ee <_printf_float+0x136>
 80193ea:	3301      	adds	r3, #1
 80193ec:	6123      	str	r3, [r4, #16]
 80193ee:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80193f2:	2b00      	cmp	r3, #0
 80193f4:	d0a2      	beq.n	801933c <_printf_float+0x84>
 80193f6:	232d      	movs	r3, #45	; 0x2d
 80193f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80193fc:	e79e      	b.n	801933c <_printf_float+0x84>
 80193fe:	9904      	ldr	r1, [sp, #16]
 8019400:	2947      	cmp	r1, #71	; 0x47
 8019402:	d1c1      	bne.n	8019388 <_printf_float+0xd0>
 8019404:	2b00      	cmp	r3, #0
 8019406:	d1bf      	bne.n	8019388 <_printf_float+0xd0>
 8019408:	2301      	movs	r3, #1
 801940a:	e7bc      	b.n	8019386 <_printf_float+0xce>
 801940c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8019410:	d118      	bne.n	8019444 <_printf_float+0x18c>
 8019412:	2900      	cmp	r1, #0
 8019414:	6863      	ldr	r3, [r4, #4]
 8019416:	dd0b      	ble.n	8019430 <_printf_float+0x178>
 8019418:	6121      	str	r1, [r4, #16]
 801941a:	b913      	cbnz	r3, 8019422 <_printf_float+0x16a>
 801941c:	6822      	ldr	r2, [r4, #0]
 801941e:	07d0      	lsls	r0, r2, #31
 8019420:	d502      	bpl.n	8019428 <_printf_float+0x170>
 8019422:	3301      	adds	r3, #1
 8019424:	440b      	add	r3, r1
 8019426:	6123      	str	r3, [r4, #16]
 8019428:	2300      	movs	r3, #0
 801942a:	65a1      	str	r1, [r4, #88]	; 0x58
 801942c:	9304      	str	r3, [sp, #16]
 801942e:	e7de      	b.n	80193ee <_printf_float+0x136>
 8019430:	b913      	cbnz	r3, 8019438 <_printf_float+0x180>
 8019432:	6822      	ldr	r2, [r4, #0]
 8019434:	07d2      	lsls	r2, r2, #31
 8019436:	d501      	bpl.n	801943c <_printf_float+0x184>
 8019438:	3302      	adds	r3, #2
 801943a:	e7f4      	b.n	8019426 <_printf_float+0x16e>
 801943c:	2301      	movs	r3, #1
 801943e:	e7f2      	b.n	8019426 <_printf_float+0x16e>
 8019440:	f04f 0967 	mov.w	r9, #103	; 0x67
 8019444:	9b08      	ldr	r3, [sp, #32]
 8019446:	4299      	cmp	r1, r3
 8019448:	db05      	blt.n	8019456 <_printf_float+0x19e>
 801944a:	6823      	ldr	r3, [r4, #0]
 801944c:	6121      	str	r1, [r4, #16]
 801944e:	07d8      	lsls	r0, r3, #31
 8019450:	d5ea      	bpl.n	8019428 <_printf_float+0x170>
 8019452:	1c4b      	adds	r3, r1, #1
 8019454:	e7e7      	b.n	8019426 <_printf_float+0x16e>
 8019456:	2900      	cmp	r1, #0
 8019458:	bfd4      	ite	le
 801945a:	f1c1 0202 	rsble	r2, r1, #2
 801945e:	2201      	movgt	r2, #1
 8019460:	4413      	add	r3, r2
 8019462:	e7e0      	b.n	8019426 <_printf_float+0x16e>
 8019464:	6823      	ldr	r3, [r4, #0]
 8019466:	055a      	lsls	r2, r3, #21
 8019468:	d407      	bmi.n	801947a <_printf_float+0x1c2>
 801946a:	6923      	ldr	r3, [r4, #16]
 801946c:	4642      	mov	r2, r8
 801946e:	4631      	mov	r1, r6
 8019470:	4628      	mov	r0, r5
 8019472:	47b8      	blx	r7
 8019474:	3001      	adds	r0, #1
 8019476:	d12a      	bne.n	80194ce <_printf_float+0x216>
 8019478:	e76a      	b.n	8019350 <_printf_float+0x98>
 801947a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801947e:	f240 80e0 	bls.w	8019642 <_printf_float+0x38a>
 8019482:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8019486:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801948a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801948e:	d133      	bne.n	80194f8 <_printf_float+0x240>
 8019490:	4a37      	ldr	r2, [pc, #220]	; (8019570 <_printf_float+0x2b8>)
 8019492:	2301      	movs	r3, #1
 8019494:	4631      	mov	r1, r6
 8019496:	4628      	mov	r0, r5
 8019498:	47b8      	blx	r7
 801949a:	3001      	adds	r0, #1
 801949c:	f43f af58 	beq.w	8019350 <_printf_float+0x98>
 80194a0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80194a4:	429a      	cmp	r2, r3
 80194a6:	db02      	blt.n	80194ae <_printf_float+0x1f6>
 80194a8:	6823      	ldr	r3, [r4, #0]
 80194aa:	07d8      	lsls	r0, r3, #31
 80194ac:	d50f      	bpl.n	80194ce <_printf_float+0x216>
 80194ae:	4653      	mov	r3, sl
 80194b0:	465a      	mov	r2, fp
 80194b2:	4631      	mov	r1, r6
 80194b4:	4628      	mov	r0, r5
 80194b6:	47b8      	blx	r7
 80194b8:	3001      	adds	r0, #1
 80194ba:	f43f af49 	beq.w	8019350 <_printf_float+0x98>
 80194be:	f04f 0800 	mov.w	r8, #0
 80194c2:	f104 091a 	add.w	r9, r4, #26
 80194c6:	9b08      	ldr	r3, [sp, #32]
 80194c8:	3b01      	subs	r3, #1
 80194ca:	4543      	cmp	r3, r8
 80194cc:	dc09      	bgt.n	80194e2 <_printf_float+0x22a>
 80194ce:	6823      	ldr	r3, [r4, #0]
 80194d0:	079b      	lsls	r3, r3, #30
 80194d2:	f100 8106 	bmi.w	80196e2 <_printf_float+0x42a>
 80194d6:	68e0      	ldr	r0, [r4, #12]
 80194d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80194da:	4298      	cmp	r0, r3
 80194dc:	bfb8      	it	lt
 80194de:	4618      	movlt	r0, r3
 80194e0:	e738      	b.n	8019354 <_printf_float+0x9c>
 80194e2:	2301      	movs	r3, #1
 80194e4:	464a      	mov	r2, r9
 80194e6:	4631      	mov	r1, r6
 80194e8:	4628      	mov	r0, r5
 80194ea:	47b8      	blx	r7
 80194ec:	3001      	adds	r0, #1
 80194ee:	f43f af2f 	beq.w	8019350 <_printf_float+0x98>
 80194f2:	f108 0801 	add.w	r8, r8, #1
 80194f6:	e7e6      	b.n	80194c6 <_printf_float+0x20e>
 80194f8:	9b07      	ldr	r3, [sp, #28]
 80194fa:	2b00      	cmp	r3, #0
 80194fc:	dc3a      	bgt.n	8019574 <_printf_float+0x2bc>
 80194fe:	4a1c      	ldr	r2, [pc, #112]	; (8019570 <_printf_float+0x2b8>)
 8019500:	2301      	movs	r3, #1
 8019502:	4631      	mov	r1, r6
 8019504:	4628      	mov	r0, r5
 8019506:	47b8      	blx	r7
 8019508:	3001      	adds	r0, #1
 801950a:	f43f af21 	beq.w	8019350 <_printf_float+0x98>
 801950e:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8019512:	4313      	orrs	r3, r2
 8019514:	d102      	bne.n	801951c <_printf_float+0x264>
 8019516:	6823      	ldr	r3, [r4, #0]
 8019518:	07d9      	lsls	r1, r3, #31
 801951a:	d5d8      	bpl.n	80194ce <_printf_float+0x216>
 801951c:	4653      	mov	r3, sl
 801951e:	465a      	mov	r2, fp
 8019520:	4631      	mov	r1, r6
 8019522:	4628      	mov	r0, r5
 8019524:	47b8      	blx	r7
 8019526:	3001      	adds	r0, #1
 8019528:	f43f af12 	beq.w	8019350 <_printf_float+0x98>
 801952c:	f04f 0900 	mov.w	r9, #0
 8019530:	f104 0a1a 	add.w	sl, r4, #26
 8019534:	9b07      	ldr	r3, [sp, #28]
 8019536:	425b      	negs	r3, r3
 8019538:	454b      	cmp	r3, r9
 801953a:	dc01      	bgt.n	8019540 <_printf_float+0x288>
 801953c:	9b08      	ldr	r3, [sp, #32]
 801953e:	e795      	b.n	801946c <_printf_float+0x1b4>
 8019540:	2301      	movs	r3, #1
 8019542:	4652      	mov	r2, sl
 8019544:	4631      	mov	r1, r6
 8019546:	4628      	mov	r0, r5
 8019548:	47b8      	blx	r7
 801954a:	3001      	adds	r0, #1
 801954c:	f43f af00 	beq.w	8019350 <_printf_float+0x98>
 8019550:	f109 0901 	add.w	r9, r9, #1
 8019554:	e7ee      	b.n	8019534 <_printf_float+0x27c>
 8019556:	bf00      	nop
 8019558:	ffffffff 	.word	0xffffffff
 801955c:	7fefffff 	.word	0x7fefffff
 8019560:	0801f0fe 	.word	0x0801f0fe
 8019564:	0801f102 	.word	0x0801f102
 8019568:	0801f106 	.word	0x0801f106
 801956c:	0801f10a 	.word	0x0801f10a
 8019570:	0801f10e 	.word	0x0801f10e
 8019574:	9a08      	ldr	r2, [sp, #32]
 8019576:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019578:	429a      	cmp	r2, r3
 801957a:	bfa8      	it	ge
 801957c:	461a      	movge	r2, r3
 801957e:	2a00      	cmp	r2, #0
 8019580:	4691      	mov	r9, r2
 8019582:	dc38      	bgt.n	80195f6 <_printf_float+0x33e>
 8019584:	2300      	movs	r3, #0
 8019586:	9305      	str	r3, [sp, #20]
 8019588:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801958c:	f104 021a 	add.w	r2, r4, #26
 8019590:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019592:	9905      	ldr	r1, [sp, #20]
 8019594:	9304      	str	r3, [sp, #16]
 8019596:	eba3 0309 	sub.w	r3, r3, r9
 801959a:	428b      	cmp	r3, r1
 801959c:	dc33      	bgt.n	8019606 <_printf_float+0x34e>
 801959e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80195a2:	429a      	cmp	r2, r3
 80195a4:	db3c      	blt.n	8019620 <_printf_float+0x368>
 80195a6:	6823      	ldr	r3, [r4, #0]
 80195a8:	07da      	lsls	r2, r3, #31
 80195aa:	d439      	bmi.n	8019620 <_printf_float+0x368>
 80195ac:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80195b0:	eba2 0903 	sub.w	r9, r2, r3
 80195b4:	9b04      	ldr	r3, [sp, #16]
 80195b6:	1ad2      	subs	r2, r2, r3
 80195b8:	4591      	cmp	r9, r2
 80195ba:	bfa8      	it	ge
 80195bc:	4691      	movge	r9, r2
 80195be:	f1b9 0f00 	cmp.w	r9, #0
 80195c2:	dc35      	bgt.n	8019630 <_printf_float+0x378>
 80195c4:	f04f 0800 	mov.w	r8, #0
 80195c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80195cc:	f104 0a1a 	add.w	sl, r4, #26
 80195d0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80195d4:	1a9b      	subs	r3, r3, r2
 80195d6:	eba3 0309 	sub.w	r3, r3, r9
 80195da:	4543      	cmp	r3, r8
 80195dc:	f77f af77 	ble.w	80194ce <_printf_float+0x216>
 80195e0:	2301      	movs	r3, #1
 80195e2:	4652      	mov	r2, sl
 80195e4:	4631      	mov	r1, r6
 80195e6:	4628      	mov	r0, r5
 80195e8:	47b8      	blx	r7
 80195ea:	3001      	adds	r0, #1
 80195ec:	f43f aeb0 	beq.w	8019350 <_printf_float+0x98>
 80195f0:	f108 0801 	add.w	r8, r8, #1
 80195f4:	e7ec      	b.n	80195d0 <_printf_float+0x318>
 80195f6:	4613      	mov	r3, r2
 80195f8:	4631      	mov	r1, r6
 80195fa:	4642      	mov	r2, r8
 80195fc:	4628      	mov	r0, r5
 80195fe:	47b8      	blx	r7
 8019600:	3001      	adds	r0, #1
 8019602:	d1bf      	bne.n	8019584 <_printf_float+0x2cc>
 8019604:	e6a4      	b.n	8019350 <_printf_float+0x98>
 8019606:	2301      	movs	r3, #1
 8019608:	4631      	mov	r1, r6
 801960a:	4628      	mov	r0, r5
 801960c:	9204      	str	r2, [sp, #16]
 801960e:	47b8      	blx	r7
 8019610:	3001      	adds	r0, #1
 8019612:	f43f ae9d 	beq.w	8019350 <_printf_float+0x98>
 8019616:	9b05      	ldr	r3, [sp, #20]
 8019618:	9a04      	ldr	r2, [sp, #16]
 801961a:	3301      	adds	r3, #1
 801961c:	9305      	str	r3, [sp, #20]
 801961e:	e7b7      	b.n	8019590 <_printf_float+0x2d8>
 8019620:	4653      	mov	r3, sl
 8019622:	465a      	mov	r2, fp
 8019624:	4631      	mov	r1, r6
 8019626:	4628      	mov	r0, r5
 8019628:	47b8      	blx	r7
 801962a:	3001      	adds	r0, #1
 801962c:	d1be      	bne.n	80195ac <_printf_float+0x2f4>
 801962e:	e68f      	b.n	8019350 <_printf_float+0x98>
 8019630:	9a04      	ldr	r2, [sp, #16]
 8019632:	464b      	mov	r3, r9
 8019634:	4442      	add	r2, r8
 8019636:	4631      	mov	r1, r6
 8019638:	4628      	mov	r0, r5
 801963a:	47b8      	blx	r7
 801963c:	3001      	adds	r0, #1
 801963e:	d1c1      	bne.n	80195c4 <_printf_float+0x30c>
 8019640:	e686      	b.n	8019350 <_printf_float+0x98>
 8019642:	9a08      	ldr	r2, [sp, #32]
 8019644:	2a01      	cmp	r2, #1
 8019646:	dc01      	bgt.n	801964c <_printf_float+0x394>
 8019648:	07db      	lsls	r3, r3, #31
 801964a:	d537      	bpl.n	80196bc <_printf_float+0x404>
 801964c:	2301      	movs	r3, #1
 801964e:	4642      	mov	r2, r8
 8019650:	4631      	mov	r1, r6
 8019652:	4628      	mov	r0, r5
 8019654:	47b8      	blx	r7
 8019656:	3001      	adds	r0, #1
 8019658:	f43f ae7a 	beq.w	8019350 <_printf_float+0x98>
 801965c:	4653      	mov	r3, sl
 801965e:	465a      	mov	r2, fp
 8019660:	4631      	mov	r1, r6
 8019662:	4628      	mov	r0, r5
 8019664:	47b8      	blx	r7
 8019666:	3001      	adds	r0, #1
 8019668:	f43f ae72 	beq.w	8019350 <_printf_float+0x98>
 801966c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8019670:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8019674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019678:	9b08      	ldr	r3, [sp, #32]
 801967a:	d01a      	beq.n	80196b2 <_printf_float+0x3fa>
 801967c:	3b01      	subs	r3, #1
 801967e:	f108 0201 	add.w	r2, r8, #1
 8019682:	4631      	mov	r1, r6
 8019684:	4628      	mov	r0, r5
 8019686:	47b8      	blx	r7
 8019688:	3001      	adds	r0, #1
 801968a:	d10e      	bne.n	80196aa <_printf_float+0x3f2>
 801968c:	e660      	b.n	8019350 <_printf_float+0x98>
 801968e:	2301      	movs	r3, #1
 8019690:	464a      	mov	r2, r9
 8019692:	4631      	mov	r1, r6
 8019694:	4628      	mov	r0, r5
 8019696:	47b8      	blx	r7
 8019698:	3001      	adds	r0, #1
 801969a:	f43f ae59 	beq.w	8019350 <_printf_float+0x98>
 801969e:	f108 0801 	add.w	r8, r8, #1
 80196a2:	9b08      	ldr	r3, [sp, #32]
 80196a4:	3b01      	subs	r3, #1
 80196a6:	4543      	cmp	r3, r8
 80196a8:	dcf1      	bgt.n	801968e <_printf_float+0x3d6>
 80196aa:	9b04      	ldr	r3, [sp, #16]
 80196ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80196b0:	e6dd      	b.n	801946e <_printf_float+0x1b6>
 80196b2:	f04f 0800 	mov.w	r8, #0
 80196b6:	f104 091a 	add.w	r9, r4, #26
 80196ba:	e7f2      	b.n	80196a2 <_printf_float+0x3ea>
 80196bc:	2301      	movs	r3, #1
 80196be:	4642      	mov	r2, r8
 80196c0:	e7df      	b.n	8019682 <_printf_float+0x3ca>
 80196c2:	2301      	movs	r3, #1
 80196c4:	464a      	mov	r2, r9
 80196c6:	4631      	mov	r1, r6
 80196c8:	4628      	mov	r0, r5
 80196ca:	47b8      	blx	r7
 80196cc:	3001      	adds	r0, #1
 80196ce:	f43f ae3f 	beq.w	8019350 <_printf_float+0x98>
 80196d2:	f108 0801 	add.w	r8, r8, #1
 80196d6:	68e3      	ldr	r3, [r4, #12]
 80196d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80196da:	1a5b      	subs	r3, r3, r1
 80196dc:	4543      	cmp	r3, r8
 80196de:	dcf0      	bgt.n	80196c2 <_printf_float+0x40a>
 80196e0:	e6f9      	b.n	80194d6 <_printf_float+0x21e>
 80196e2:	f04f 0800 	mov.w	r8, #0
 80196e6:	f104 0919 	add.w	r9, r4, #25
 80196ea:	e7f4      	b.n	80196d6 <_printf_float+0x41e>

080196ec <_printf_common>:
 80196ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80196f0:	4616      	mov	r6, r2
 80196f2:	4699      	mov	r9, r3
 80196f4:	688a      	ldr	r2, [r1, #8]
 80196f6:	690b      	ldr	r3, [r1, #16]
 80196f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80196fc:	4293      	cmp	r3, r2
 80196fe:	bfb8      	it	lt
 8019700:	4613      	movlt	r3, r2
 8019702:	6033      	str	r3, [r6, #0]
 8019704:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019708:	4607      	mov	r7, r0
 801970a:	460c      	mov	r4, r1
 801970c:	b10a      	cbz	r2, 8019712 <_printf_common+0x26>
 801970e:	3301      	adds	r3, #1
 8019710:	6033      	str	r3, [r6, #0]
 8019712:	6823      	ldr	r3, [r4, #0]
 8019714:	0699      	lsls	r1, r3, #26
 8019716:	bf42      	ittt	mi
 8019718:	6833      	ldrmi	r3, [r6, #0]
 801971a:	3302      	addmi	r3, #2
 801971c:	6033      	strmi	r3, [r6, #0]
 801971e:	6825      	ldr	r5, [r4, #0]
 8019720:	f015 0506 	ands.w	r5, r5, #6
 8019724:	d106      	bne.n	8019734 <_printf_common+0x48>
 8019726:	f104 0a19 	add.w	sl, r4, #25
 801972a:	68e3      	ldr	r3, [r4, #12]
 801972c:	6832      	ldr	r2, [r6, #0]
 801972e:	1a9b      	subs	r3, r3, r2
 8019730:	42ab      	cmp	r3, r5
 8019732:	dc26      	bgt.n	8019782 <_printf_common+0x96>
 8019734:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019738:	1e13      	subs	r3, r2, #0
 801973a:	6822      	ldr	r2, [r4, #0]
 801973c:	bf18      	it	ne
 801973e:	2301      	movne	r3, #1
 8019740:	0692      	lsls	r2, r2, #26
 8019742:	d42b      	bmi.n	801979c <_printf_common+0xb0>
 8019744:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019748:	4649      	mov	r1, r9
 801974a:	4638      	mov	r0, r7
 801974c:	47c0      	blx	r8
 801974e:	3001      	adds	r0, #1
 8019750:	d01e      	beq.n	8019790 <_printf_common+0xa4>
 8019752:	6823      	ldr	r3, [r4, #0]
 8019754:	6922      	ldr	r2, [r4, #16]
 8019756:	f003 0306 	and.w	r3, r3, #6
 801975a:	2b04      	cmp	r3, #4
 801975c:	bf02      	ittt	eq
 801975e:	68e5      	ldreq	r5, [r4, #12]
 8019760:	6833      	ldreq	r3, [r6, #0]
 8019762:	1aed      	subeq	r5, r5, r3
 8019764:	68a3      	ldr	r3, [r4, #8]
 8019766:	bf0c      	ite	eq
 8019768:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801976c:	2500      	movne	r5, #0
 801976e:	4293      	cmp	r3, r2
 8019770:	bfc4      	itt	gt
 8019772:	1a9b      	subgt	r3, r3, r2
 8019774:	18ed      	addgt	r5, r5, r3
 8019776:	2600      	movs	r6, #0
 8019778:	341a      	adds	r4, #26
 801977a:	42b5      	cmp	r5, r6
 801977c:	d11a      	bne.n	80197b4 <_printf_common+0xc8>
 801977e:	2000      	movs	r0, #0
 8019780:	e008      	b.n	8019794 <_printf_common+0xa8>
 8019782:	2301      	movs	r3, #1
 8019784:	4652      	mov	r2, sl
 8019786:	4649      	mov	r1, r9
 8019788:	4638      	mov	r0, r7
 801978a:	47c0      	blx	r8
 801978c:	3001      	adds	r0, #1
 801978e:	d103      	bne.n	8019798 <_printf_common+0xac>
 8019790:	f04f 30ff 	mov.w	r0, #4294967295
 8019794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019798:	3501      	adds	r5, #1
 801979a:	e7c6      	b.n	801972a <_printf_common+0x3e>
 801979c:	18e1      	adds	r1, r4, r3
 801979e:	1c5a      	adds	r2, r3, #1
 80197a0:	2030      	movs	r0, #48	; 0x30
 80197a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80197a6:	4422      	add	r2, r4
 80197a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80197ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80197b0:	3302      	adds	r3, #2
 80197b2:	e7c7      	b.n	8019744 <_printf_common+0x58>
 80197b4:	2301      	movs	r3, #1
 80197b6:	4622      	mov	r2, r4
 80197b8:	4649      	mov	r1, r9
 80197ba:	4638      	mov	r0, r7
 80197bc:	47c0      	blx	r8
 80197be:	3001      	adds	r0, #1
 80197c0:	d0e6      	beq.n	8019790 <_printf_common+0xa4>
 80197c2:	3601      	adds	r6, #1
 80197c4:	e7d9      	b.n	801977a <_printf_common+0x8e>
	...

080197c8 <_printf_i>:
 80197c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80197cc:	7e0f      	ldrb	r7, [r1, #24]
 80197ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80197d0:	2f78      	cmp	r7, #120	; 0x78
 80197d2:	4691      	mov	r9, r2
 80197d4:	4680      	mov	r8, r0
 80197d6:	460c      	mov	r4, r1
 80197d8:	469a      	mov	sl, r3
 80197da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80197de:	d807      	bhi.n	80197f0 <_printf_i+0x28>
 80197e0:	2f62      	cmp	r7, #98	; 0x62
 80197e2:	d80a      	bhi.n	80197fa <_printf_i+0x32>
 80197e4:	2f00      	cmp	r7, #0
 80197e6:	f000 80d4 	beq.w	8019992 <_printf_i+0x1ca>
 80197ea:	2f58      	cmp	r7, #88	; 0x58
 80197ec:	f000 80c0 	beq.w	8019970 <_printf_i+0x1a8>
 80197f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80197f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80197f8:	e03a      	b.n	8019870 <_printf_i+0xa8>
 80197fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80197fe:	2b15      	cmp	r3, #21
 8019800:	d8f6      	bhi.n	80197f0 <_printf_i+0x28>
 8019802:	a101      	add	r1, pc, #4	; (adr r1, 8019808 <_printf_i+0x40>)
 8019804:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019808:	08019861 	.word	0x08019861
 801980c:	08019875 	.word	0x08019875
 8019810:	080197f1 	.word	0x080197f1
 8019814:	080197f1 	.word	0x080197f1
 8019818:	080197f1 	.word	0x080197f1
 801981c:	080197f1 	.word	0x080197f1
 8019820:	08019875 	.word	0x08019875
 8019824:	080197f1 	.word	0x080197f1
 8019828:	080197f1 	.word	0x080197f1
 801982c:	080197f1 	.word	0x080197f1
 8019830:	080197f1 	.word	0x080197f1
 8019834:	08019979 	.word	0x08019979
 8019838:	080198a1 	.word	0x080198a1
 801983c:	08019933 	.word	0x08019933
 8019840:	080197f1 	.word	0x080197f1
 8019844:	080197f1 	.word	0x080197f1
 8019848:	0801999b 	.word	0x0801999b
 801984c:	080197f1 	.word	0x080197f1
 8019850:	080198a1 	.word	0x080198a1
 8019854:	080197f1 	.word	0x080197f1
 8019858:	080197f1 	.word	0x080197f1
 801985c:	0801993b 	.word	0x0801993b
 8019860:	682b      	ldr	r3, [r5, #0]
 8019862:	1d1a      	adds	r2, r3, #4
 8019864:	681b      	ldr	r3, [r3, #0]
 8019866:	602a      	str	r2, [r5, #0]
 8019868:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801986c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019870:	2301      	movs	r3, #1
 8019872:	e09f      	b.n	80199b4 <_printf_i+0x1ec>
 8019874:	6820      	ldr	r0, [r4, #0]
 8019876:	682b      	ldr	r3, [r5, #0]
 8019878:	0607      	lsls	r7, r0, #24
 801987a:	f103 0104 	add.w	r1, r3, #4
 801987e:	6029      	str	r1, [r5, #0]
 8019880:	d501      	bpl.n	8019886 <_printf_i+0xbe>
 8019882:	681e      	ldr	r6, [r3, #0]
 8019884:	e003      	b.n	801988e <_printf_i+0xc6>
 8019886:	0646      	lsls	r6, r0, #25
 8019888:	d5fb      	bpl.n	8019882 <_printf_i+0xba>
 801988a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801988e:	2e00      	cmp	r6, #0
 8019890:	da03      	bge.n	801989a <_printf_i+0xd2>
 8019892:	232d      	movs	r3, #45	; 0x2d
 8019894:	4276      	negs	r6, r6
 8019896:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801989a:	485a      	ldr	r0, [pc, #360]	; (8019a04 <_printf_i+0x23c>)
 801989c:	230a      	movs	r3, #10
 801989e:	e012      	b.n	80198c6 <_printf_i+0xfe>
 80198a0:	682b      	ldr	r3, [r5, #0]
 80198a2:	6820      	ldr	r0, [r4, #0]
 80198a4:	1d19      	adds	r1, r3, #4
 80198a6:	6029      	str	r1, [r5, #0]
 80198a8:	0605      	lsls	r5, r0, #24
 80198aa:	d501      	bpl.n	80198b0 <_printf_i+0xe8>
 80198ac:	681e      	ldr	r6, [r3, #0]
 80198ae:	e002      	b.n	80198b6 <_printf_i+0xee>
 80198b0:	0641      	lsls	r1, r0, #25
 80198b2:	d5fb      	bpl.n	80198ac <_printf_i+0xe4>
 80198b4:	881e      	ldrh	r6, [r3, #0]
 80198b6:	4853      	ldr	r0, [pc, #332]	; (8019a04 <_printf_i+0x23c>)
 80198b8:	2f6f      	cmp	r7, #111	; 0x6f
 80198ba:	bf0c      	ite	eq
 80198bc:	2308      	moveq	r3, #8
 80198be:	230a      	movne	r3, #10
 80198c0:	2100      	movs	r1, #0
 80198c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80198c6:	6865      	ldr	r5, [r4, #4]
 80198c8:	60a5      	str	r5, [r4, #8]
 80198ca:	2d00      	cmp	r5, #0
 80198cc:	bfa2      	ittt	ge
 80198ce:	6821      	ldrge	r1, [r4, #0]
 80198d0:	f021 0104 	bicge.w	r1, r1, #4
 80198d4:	6021      	strge	r1, [r4, #0]
 80198d6:	b90e      	cbnz	r6, 80198dc <_printf_i+0x114>
 80198d8:	2d00      	cmp	r5, #0
 80198da:	d04b      	beq.n	8019974 <_printf_i+0x1ac>
 80198dc:	4615      	mov	r5, r2
 80198de:	fbb6 f1f3 	udiv	r1, r6, r3
 80198e2:	fb03 6711 	mls	r7, r3, r1, r6
 80198e6:	5dc7      	ldrb	r7, [r0, r7]
 80198e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80198ec:	4637      	mov	r7, r6
 80198ee:	42bb      	cmp	r3, r7
 80198f0:	460e      	mov	r6, r1
 80198f2:	d9f4      	bls.n	80198de <_printf_i+0x116>
 80198f4:	2b08      	cmp	r3, #8
 80198f6:	d10b      	bne.n	8019910 <_printf_i+0x148>
 80198f8:	6823      	ldr	r3, [r4, #0]
 80198fa:	07de      	lsls	r6, r3, #31
 80198fc:	d508      	bpl.n	8019910 <_printf_i+0x148>
 80198fe:	6923      	ldr	r3, [r4, #16]
 8019900:	6861      	ldr	r1, [r4, #4]
 8019902:	4299      	cmp	r1, r3
 8019904:	bfde      	ittt	le
 8019906:	2330      	movle	r3, #48	; 0x30
 8019908:	f805 3c01 	strble.w	r3, [r5, #-1]
 801990c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8019910:	1b52      	subs	r2, r2, r5
 8019912:	6122      	str	r2, [r4, #16]
 8019914:	f8cd a000 	str.w	sl, [sp]
 8019918:	464b      	mov	r3, r9
 801991a:	aa03      	add	r2, sp, #12
 801991c:	4621      	mov	r1, r4
 801991e:	4640      	mov	r0, r8
 8019920:	f7ff fee4 	bl	80196ec <_printf_common>
 8019924:	3001      	adds	r0, #1
 8019926:	d14a      	bne.n	80199be <_printf_i+0x1f6>
 8019928:	f04f 30ff 	mov.w	r0, #4294967295
 801992c:	b004      	add	sp, #16
 801992e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019932:	6823      	ldr	r3, [r4, #0]
 8019934:	f043 0320 	orr.w	r3, r3, #32
 8019938:	6023      	str	r3, [r4, #0]
 801993a:	4833      	ldr	r0, [pc, #204]	; (8019a08 <_printf_i+0x240>)
 801993c:	2778      	movs	r7, #120	; 0x78
 801993e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8019942:	6823      	ldr	r3, [r4, #0]
 8019944:	6829      	ldr	r1, [r5, #0]
 8019946:	061f      	lsls	r7, r3, #24
 8019948:	f851 6b04 	ldr.w	r6, [r1], #4
 801994c:	d402      	bmi.n	8019954 <_printf_i+0x18c>
 801994e:	065f      	lsls	r7, r3, #25
 8019950:	bf48      	it	mi
 8019952:	b2b6      	uxthmi	r6, r6
 8019954:	07df      	lsls	r7, r3, #31
 8019956:	bf48      	it	mi
 8019958:	f043 0320 	orrmi.w	r3, r3, #32
 801995c:	6029      	str	r1, [r5, #0]
 801995e:	bf48      	it	mi
 8019960:	6023      	strmi	r3, [r4, #0]
 8019962:	b91e      	cbnz	r6, 801996c <_printf_i+0x1a4>
 8019964:	6823      	ldr	r3, [r4, #0]
 8019966:	f023 0320 	bic.w	r3, r3, #32
 801996a:	6023      	str	r3, [r4, #0]
 801996c:	2310      	movs	r3, #16
 801996e:	e7a7      	b.n	80198c0 <_printf_i+0xf8>
 8019970:	4824      	ldr	r0, [pc, #144]	; (8019a04 <_printf_i+0x23c>)
 8019972:	e7e4      	b.n	801993e <_printf_i+0x176>
 8019974:	4615      	mov	r5, r2
 8019976:	e7bd      	b.n	80198f4 <_printf_i+0x12c>
 8019978:	682b      	ldr	r3, [r5, #0]
 801997a:	6826      	ldr	r6, [r4, #0]
 801997c:	6961      	ldr	r1, [r4, #20]
 801997e:	1d18      	adds	r0, r3, #4
 8019980:	6028      	str	r0, [r5, #0]
 8019982:	0635      	lsls	r5, r6, #24
 8019984:	681b      	ldr	r3, [r3, #0]
 8019986:	d501      	bpl.n	801998c <_printf_i+0x1c4>
 8019988:	6019      	str	r1, [r3, #0]
 801998a:	e002      	b.n	8019992 <_printf_i+0x1ca>
 801998c:	0670      	lsls	r0, r6, #25
 801998e:	d5fb      	bpl.n	8019988 <_printf_i+0x1c0>
 8019990:	8019      	strh	r1, [r3, #0]
 8019992:	2300      	movs	r3, #0
 8019994:	6123      	str	r3, [r4, #16]
 8019996:	4615      	mov	r5, r2
 8019998:	e7bc      	b.n	8019914 <_printf_i+0x14c>
 801999a:	682b      	ldr	r3, [r5, #0]
 801999c:	1d1a      	adds	r2, r3, #4
 801999e:	602a      	str	r2, [r5, #0]
 80199a0:	681d      	ldr	r5, [r3, #0]
 80199a2:	6862      	ldr	r2, [r4, #4]
 80199a4:	2100      	movs	r1, #0
 80199a6:	4628      	mov	r0, r5
 80199a8:	f7e7 ff4a 	bl	8001840 <memchr>
 80199ac:	b108      	cbz	r0, 80199b2 <_printf_i+0x1ea>
 80199ae:	1b40      	subs	r0, r0, r5
 80199b0:	6060      	str	r0, [r4, #4]
 80199b2:	6863      	ldr	r3, [r4, #4]
 80199b4:	6123      	str	r3, [r4, #16]
 80199b6:	2300      	movs	r3, #0
 80199b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80199bc:	e7aa      	b.n	8019914 <_printf_i+0x14c>
 80199be:	6923      	ldr	r3, [r4, #16]
 80199c0:	462a      	mov	r2, r5
 80199c2:	4649      	mov	r1, r9
 80199c4:	4640      	mov	r0, r8
 80199c6:	47d0      	blx	sl
 80199c8:	3001      	adds	r0, #1
 80199ca:	d0ad      	beq.n	8019928 <_printf_i+0x160>
 80199cc:	6823      	ldr	r3, [r4, #0]
 80199ce:	079b      	lsls	r3, r3, #30
 80199d0:	d413      	bmi.n	80199fa <_printf_i+0x232>
 80199d2:	68e0      	ldr	r0, [r4, #12]
 80199d4:	9b03      	ldr	r3, [sp, #12]
 80199d6:	4298      	cmp	r0, r3
 80199d8:	bfb8      	it	lt
 80199da:	4618      	movlt	r0, r3
 80199dc:	e7a6      	b.n	801992c <_printf_i+0x164>
 80199de:	2301      	movs	r3, #1
 80199e0:	4632      	mov	r2, r6
 80199e2:	4649      	mov	r1, r9
 80199e4:	4640      	mov	r0, r8
 80199e6:	47d0      	blx	sl
 80199e8:	3001      	adds	r0, #1
 80199ea:	d09d      	beq.n	8019928 <_printf_i+0x160>
 80199ec:	3501      	adds	r5, #1
 80199ee:	68e3      	ldr	r3, [r4, #12]
 80199f0:	9903      	ldr	r1, [sp, #12]
 80199f2:	1a5b      	subs	r3, r3, r1
 80199f4:	42ab      	cmp	r3, r5
 80199f6:	dcf2      	bgt.n	80199de <_printf_i+0x216>
 80199f8:	e7eb      	b.n	80199d2 <_printf_i+0x20a>
 80199fa:	2500      	movs	r5, #0
 80199fc:	f104 0619 	add.w	r6, r4, #25
 8019a00:	e7f5      	b.n	80199ee <_printf_i+0x226>
 8019a02:	bf00      	nop
 8019a04:	0801f110 	.word	0x0801f110
 8019a08:	0801f121 	.word	0x0801f121

08019a0c <std>:
 8019a0c:	2300      	movs	r3, #0
 8019a0e:	b510      	push	{r4, lr}
 8019a10:	4604      	mov	r4, r0
 8019a12:	e9c0 3300 	strd	r3, r3, [r0]
 8019a16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019a1a:	6083      	str	r3, [r0, #8]
 8019a1c:	8181      	strh	r1, [r0, #12]
 8019a1e:	6643      	str	r3, [r0, #100]	; 0x64
 8019a20:	81c2      	strh	r2, [r0, #14]
 8019a22:	6183      	str	r3, [r0, #24]
 8019a24:	4619      	mov	r1, r3
 8019a26:	2208      	movs	r2, #8
 8019a28:	305c      	adds	r0, #92	; 0x5c
 8019a2a:	f000 fa07 	bl	8019e3c <memset>
 8019a2e:	4b0d      	ldr	r3, [pc, #52]	; (8019a64 <std+0x58>)
 8019a30:	6263      	str	r3, [r4, #36]	; 0x24
 8019a32:	4b0d      	ldr	r3, [pc, #52]	; (8019a68 <std+0x5c>)
 8019a34:	62a3      	str	r3, [r4, #40]	; 0x28
 8019a36:	4b0d      	ldr	r3, [pc, #52]	; (8019a6c <std+0x60>)
 8019a38:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019a3a:	4b0d      	ldr	r3, [pc, #52]	; (8019a70 <std+0x64>)
 8019a3c:	6323      	str	r3, [r4, #48]	; 0x30
 8019a3e:	4b0d      	ldr	r3, [pc, #52]	; (8019a74 <std+0x68>)
 8019a40:	6224      	str	r4, [r4, #32]
 8019a42:	429c      	cmp	r4, r3
 8019a44:	d006      	beq.n	8019a54 <std+0x48>
 8019a46:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8019a4a:	4294      	cmp	r4, r2
 8019a4c:	d002      	beq.n	8019a54 <std+0x48>
 8019a4e:	33d0      	adds	r3, #208	; 0xd0
 8019a50:	429c      	cmp	r4, r3
 8019a52:	d105      	bne.n	8019a60 <std+0x54>
 8019a54:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019a58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019a5c:	f000 ba64 	b.w	8019f28 <__retarget_lock_init_recursive>
 8019a60:	bd10      	pop	{r4, pc}
 8019a62:	bf00      	nop
 8019a64:	08019c6d 	.word	0x08019c6d
 8019a68:	08019c8f 	.word	0x08019c8f
 8019a6c:	08019cc7 	.word	0x08019cc7
 8019a70:	08019ceb 	.word	0x08019ceb
 8019a74:	200071a0 	.word	0x200071a0

08019a78 <stdio_exit_handler>:
 8019a78:	4a02      	ldr	r2, [pc, #8]	; (8019a84 <stdio_exit_handler+0xc>)
 8019a7a:	4903      	ldr	r1, [pc, #12]	; (8019a88 <stdio_exit_handler+0x10>)
 8019a7c:	4803      	ldr	r0, [pc, #12]	; (8019a8c <stdio_exit_handler+0x14>)
 8019a7e:	f000 b869 	b.w	8019b54 <_fwalk_sglue>
 8019a82:	bf00      	nop
 8019a84:	20000064 	.word	0x20000064
 8019a88:	0801b7fd 	.word	0x0801b7fd
 8019a8c:	20000070 	.word	0x20000070

08019a90 <cleanup_stdio>:
 8019a90:	6841      	ldr	r1, [r0, #4]
 8019a92:	4b0c      	ldr	r3, [pc, #48]	; (8019ac4 <cleanup_stdio+0x34>)
 8019a94:	4299      	cmp	r1, r3
 8019a96:	b510      	push	{r4, lr}
 8019a98:	4604      	mov	r4, r0
 8019a9a:	d001      	beq.n	8019aa0 <cleanup_stdio+0x10>
 8019a9c:	f001 feae 	bl	801b7fc <_fflush_r>
 8019aa0:	68a1      	ldr	r1, [r4, #8]
 8019aa2:	4b09      	ldr	r3, [pc, #36]	; (8019ac8 <cleanup_stdio+0x38>)
 8019aa4:	4299      	cmp	r1, r3
 8019aa6:	d002      	beq.n	8019aae <cleanup_stdio+0x1e>
 8019aa8:	4620      	mov	r0, r4
 8019aaa:	f001 fea7 	bl	801b7fc <_fflush_r>
 8019aae:	68e1      	ldr	r1, [r4, #12]
 8019ab0:	4b06      	ldr	r3, [pc, #24]	; (8019acc <cleanup_stdio+0x3c>)
 8019ab2:	4299      	cmp	r1, r3
 8019ab4:	d004      	beq.n	8019ac0 <cleanup_stdio+0x30>
 8019ab6:	4620      	mov	r0, r4
 8019ab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019abc:	f001 be9e 	b.w	801b7fc <_fflush_r>
 8019ac0:	bd10      	pop	{r4, pc}
 8019ac2:	bf00      	nop
 8019ac4:	200071a0 	.word	0x200071a0
 8019ac8:	20007208 	.word	0x20007208
 8019acc:	20007270 	.word	0x20007270

08019ad0 <global_stdio_init.part.0>:
 8019ad0:	b510      	push	{r4, lr}
 8019ad2:	4b0b      	ldr	r3, [pc, #44]	; (8019b00 <global_stdio_init.part.0+0x30>)
 8019ad4:	4c0b      	ldr	r4, [pc, #44]	; (8019b04 <global_stdio_init.part.0+0x34>)
 8019ad6:	4a0c      	ldr	r2, [pc, #48]	; (8019b08 <global_stdio_init.part.0+0x38>)
 8019ad8:	601a      	str	r2, [r3, #0]
 8019ada:	4620      	mov	r0, r4
 8019adc:	2200      	movs	r2, #0
 8019ade:	2104      	movs	r1, #4
 8019ae0:	f7ff ff94 	bl	8019a0c <std>
 8019ae4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8019ae8:	2201      	movs	r2, #1
 8019aea:	2109      	movs	r1, #9
 8019aec:	f7ff ff8e 	bl	8019a0c <std>
 8019af0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8019af4:	2202      	movs	r2, #2
 8019af6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019afa:	2112      	movs	r1, #18
 8019afc:	f7ff bf86 	b.w	8019a0c <std>
 8019b00:	200072d8 	.word	0x200072d8
 8019b04:	200071a0 	.word	0x200071a0
 8019b08:	08019a79 	.word	0x08019a79

08019b0c <__sfp_lock_acquire>:
 8019b0c:	4801      	ldr	r0, [pc, #4]	; (8019b14 <__sfp_lock_acquire+0x8>)
 8019b0e:	f000 ba0c 	b.w	8019f2a <__retarget_lock_acquire_recursive>
 8019b12:	bf00      	nop
 8019b14:	200072e1 	.word	0x200072e1

08019b18 <__sfp_lock_release>:
 8019b18:	4801      	ldr	r0, [pc, #4]	; (8019b20 <__sfp_lock_release+0x8>)
 8019b1a:	f000 ba07 	b.w	8019f2c <__retarget_lock_release_recursive>
 8019b1e:	bf00      	nop
 8019b20:	200072e1 	.word	0x200072e1

08019b24 <__sinit>:
 8019b24:	b510      	push	{r4, lr}
 8019b26:	4604      	mov	r4, r0
 8019b28:	f7ff fff0 	bl	8019b0c <__sfp_lock_acquire>
 8019b2c:	6a23      	ldr	r3, [r4, #32]
 8019b2e:	b11b      	cbz	r3, 8019b38 <__sinit+0x14>
 8019b30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019b34:	f7ff bff0 	b.w	8019b18 <__sfp_lock_release>
 8019b38:	4b04      	ldr	r3, [pc, #16]	; (8019b4c <__sinit+0x28>)
 8019b3a:	6223      	str	r3, [r4, #32]
 8019b3c:	4b04      	ldr	r3, [pc, #16]	; (8019b50 <__sinit+0x2c>)
 8019b3e:	681b      	ldr	r3, [r3, #0]
 8019b40:	2b00      	cmp	r3, #0
 8019b42:	d1f5      	bne.n	8019b30 <__sinit+0xc>
 8019b44:	f7ff ffc4 	bl	8019ad0 <global_stdio_init.part.0>
 8019b48:	e7f2      	b.n	8019b30 <__sinit+0xc>
 8019b4a:	bf00      	nop
 8019b4c:	08019a91 	.word	0x08019a91
 8019b50:	200072d8 	.word	0x200072d8

08019b54 <_fwalk_sglue>:
 8019b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019b58:	4607      	mov	r7, r0
 8019b5a:	4688      	mov	r8, r1
 8019b5c:	4614      	mov	r4, r2
 8019b5e:	2600      	movs	r6, #0
 8019b60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019b64:	f1b9 0901 	subs.w	r9, r9, #1
 8019b68:	d505      	bpl.n	8019b76 <_fwalk_sglue+0x22>
 8019b6a:	6824      	ldr	r4, [r4, #0]
 8019b6c:	2c00      	cmp	r4, #0
 8019b6e:	d1f7      	bne.n	8019b60 <_fwalk_sglue+0xc>
 8019b70:	4630      	mov	r0, r6
 8019b72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019b76:	89ab      	ldrh	r3, [r5, #12]
 8019b78:	2b01      	cmp	r3, #1
 8019b7a:	d907      	bls.n	8019b8c <_fwalk_sglue+0x38>
 8019b7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019b80:	3301      	adds	r3, #1
 8019b82:	d003      	beq.n	8019b8c <_fwalk_sglue+0x38>
 8019b84:	4629      	mov	r1, r5
 8019b86:	4638      	mov	r0, r7
 8019b88:	47c0      	blx	r8
 8019b8a:	4306      	orrs	r6, r0
 8019b8c:	3568      	adds	r5, #104	; 0x68
 8019b8e:	e7e9      	b.n	8019b64 <_fwalk_sglue+0x10>

08019b90 <iprintf>:
 8019b90:	b40f      	push	{r0, r1, r2, r3}
 8019b92:	b507      	push	{r0, r1, r2, lr}
 8019b94:	4906      	ldr	r1, [pc, #24]	; (8019bb0 <iprintf+0x20>)
 8019b96:	ab04      	add	r3, sp, #16
 8019b98:	6808      	ldr	r0, [r1, #0]
 8019b9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8019b9e:	6881      	ldr	r1, [r0, #8]
 8019ba0:	9301      	str	r3, [sp, #4]
 8019ba2:	f001 fc8b 	bl	801b4bc <_vfiprintf_r>
 8019ba6:	b003      	add	sp, #12
 8019ba8:	f85d eb04 	ldr.w	lr, [sp], #4
 8019bac:	b004      	add	sp, #16
 8019bae:	4770      	bx	lr
 8019bb0:	200000bc 	.word	0x200000bc

08019bb4 <_puts_r>:
 8019bb4:	6a03      	ldr	r3, [r0, #32]
 8019bb6:	b570      	push	{r4, r5, r6, lr}
 8019bb8:	6884      	ldr	r4, [r0, #8]
 8019bba:	4605      	mov	r5, r0
 8019bbc:	460e      	mov	r6, r1
 8019bbe:	b90b      	cbnz	r3, 8019bc4 <_puts_r+0x10>
 8019bc0:	f7ff ffb0 	bl	8019b24 <__sinit>
 8019bc4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019bc6:	07db      	lsls	r3, r3, #31
 8019bc8:	d405      	bmi.n	8019bd6 <_puts_r+0x22>
 8019bca:	89a3      	ldrh	r3, [r4, #12]
 8019bcc:	0598      	lsls	r0, r3, #22
 8019bce:	d402      	bmi.n	8019bd6 <_puts_r+0x22>
 8019bd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019bd2:	f000 f9aa 	bl	8019f2a <__retarget_lock_acquire_recursive>
 8019bd6:	89a3      	ldrh	r3, [r4, #12]
 8019bd8:	0719      	lsls	r1, r3, #28
 8019bda:	d513      	bpl.n	8019c04 <_puts_r+0x50>
 8019bdc:	6923      	ldr	r3, [r4, #16]
 8019bde:	b18b      	cbz	r3, 8019c04 <_puts_r+0x50>
 8019be0:	3e01      	subs	r6, #1
 8019be2:	68a3      	ldr	r3, [r4, #8]
 8019be4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8019be8:	3b01      	subs	r3, #1
 8019bea:	60a3      	str	r3, [r4, #8]
 8019bec:	b9e9      	cbnz	r1, 8019c2a <_puts_r+0x76>
 8019bee:	2b00      	cmp	r3, #0
 8019bf0:	da2e      	bge.n	8019c50 <_puts_r+0x9c>
 8019bf2:	4622      	mov	r2, r4
 8019bf4:	210a      	movs	r1, #10
 8019bf6:	4628      	mov	r0, r5
 8019bf8:	f000 f87b 	bl	8019cf2 <__swbuf_r>
 8019bfc:	3001      	adds	r0, #1
 8019bfe:	d007      	beq.n	8019c10 <_puts_r+0x5c>
 8019c00:	250a      	movs	r5, #10
 8019c02:	e007      	b.n	8019c14 <_puts_r+0x60>
 8019c04:	4621      	mov	r1, r4
 8019c06:	4628      	mov	r0, r5
 8019c08:	f000 f8b0 	bl	8019d6c <__swsetup_r>
 8019c0c:	2800      	cmp	r0, #0
 8019c0e:	d0e7      	beq.n	8019be0 <_puts_r+0x2c>
 8019c10:	f04f 35ff 	mov.w	r5, #4294967295
 8019c14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019c16:	07da      	lsls	r2, r3, #31
 8019c18:	d405      	bmi.n	8019c26 <_puts_r+0x72>
 8019c1a:	89a3      	ldrh	r3, [r4, #12]
 8019c1c:	059b      	lsls	r3, r3, #22
 8019c1e:	d402      	bmi.n	8019c26 <_puts_r+0x72>
 8019c20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019c22:	f000 f983 	bl	8019f2c <__retarget_lock_release_recursive>
 8019c26:	4628      	mov	r0, r5
 8019c28:	bd70      	pop	{r4, r5, r6, pc}
 8019c2a:	2b00      	cmp	r3, #0
 8019c2c:	da04      	bge.n	8019c38 <_puts_r+0x84>
 8019c2e:	69a2      	ldr	r2, [r4, #24]
 8019c30:	429a      	cmp	r2, r3
 8019c32:	dc06      	bgt.n	8019c42 <_puts_r+0x8e>
 8019c34:	290a      	cmp	r1, #10
 8019c36:	d004      	beq.n	8019c42 <_puts_r+0x8e>
 8019c38:	6823      	ldr	r3, [r4, #0]
 8019c3a:	1c5a      	adds	r2, r3, #1
 8019c3c:	6022      	str	r2, [r4, #0]
 8019c3e:	7019      	strb	r1, [r3, #0]
 8019c40:	e7cf      	b.n	8019be2 <_puts_r+0x2e>
 8019c42:	4622      	mov	r2, r4
 8019c44:	4628      	mov	r0, r5
 8019c46:	f000 f854 	bl	8019cf2 <__swbuf_r>
 8019c4a:	3001      	adds	r0, #1
 8019c4c:	d1c9      	bne.n	8019be2 <_puts_r+0x2e>
 8019c4e:	e7df      	b.n	8019c10 <_puts_r+0x5c>
 8019c50:	6823      	ldr	r3, [r4, #0]
 8019c52:	250a      	movs	r5, #10
 8019c54:	1c5a      	adds	r2, r3, #1
 8019c56:	6022      	str	r2, [r4, #0]
 8019c58:	701d      	strb	r5, [r3, #0]
 8019c5a:	e7db      	b.n	8019c14 <_puts_r+0x60>

08019c5c <puts>:
 8019c5c:	4b02      	ldr	r3, [pc, #8]	; (8019c68 <puts+0xc>)
 8019c5e:	4601      	mov	r1, r0
 8019c60:	6818      	ldr	r0, [r3, #0]
 8019c62:	f7ff bfa7 	b.w	8019bb4 <_puts_r>
 8019c66:	bf00      	nop
 8019c68:	200000bc 	.word	0x200000bc

08019c6c <__sread>:
 8019c6c:	b510      	push	{r4, lr}
 8019c6e:	460c      	mov	r4, r1
 8019c70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019c74:	f000 f910 	bl	8019e98 <_read_r>
 8019c78:	2800      	cmp	r0, #0
 8019c7a:	bfab      	itete	ge
 8019c7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8019c7e:	89a3      	ldrhlt	r3, [r4, #12]
 8019c80:	181b      	addge	r3, r3, r0
 8019c82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8019c86:	bfac      	ite	ge
 8019c88:	6563      	strge	r3, [r4, #84]	; 0x54
 8019c8a:	81a3      	strhlt	r3, [r4, #12]
 8019c8c:	bd10      	pop	{r4, pc}

08019c8e <__swrite>:
 8019c8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019c92:	461f      	mov	r7, r3
 8019c94:	898b      	ldrh	r3, [r1, #12]
 8019c96:	05db      	lsls	r3, r3, #23
 8019c98:	4605      	mov	r5, r0
 8019c9a:	460c      	mov	r4, r1
 8019c9c:	4616      	mov	r6, r2
 8019c9e:	d505      	bpl.n	8019cac <__swrite+0x1e>
 8019ca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019ca4:	2302      	movs	r3, #2
 8019ca6:	2200      	movs	r2, #0
 8019ca8:	f000 f8e4 	bl	8019e74 <_lseek_r>
 8019cac:	89a3      	ldrh	r3, [r4, #12]
 8019cae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019cb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019cb6:	81a3      	strh	r3, [r4, #12]
 8019cb8:	4632      	mov	r2, r6
 8019cba:	463b      	mov	r3, r7
 8019cbc:	4628      	mov	r0, r5
 8019cbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019cc2:	f000 b8fb 	b.w	8019ebc <_write_r>

08019cc6 <__sseek>:
 8019cc6:	b510      	push	{r4, lr}
 8019cc8:	460c      	mov	r4, r1
 8019cca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019cce:	f000 f8d1 	bl	8019e74 <_lseek_r>
 8019cd2:	1c43      	adds	r3, r0, #1
 8019cd4:	89a3      	ldrh	r3, [r4, #12]
 8019cd6:	bf15      	itete	ne
 8019cd8:	6560      	strne	r0, [r4, #84]	; 0x54
 8019cda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8019cde:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8019ce2:	81a3      	strheq	r3, [r4, #12]
 8019ce4:	bf18      	it	ne
 8019ce6:	81a3      	strhne	r3, [r4, #12]
 8019ce8:	bd10      	pop	{r4, pc}

08019cea <__sclose>:
 8019cea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019cee:	f000 b8b1 	b.w	8019e54 <_close_r>

08019cf2 <__swbuf_r>:
 8019cf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019cf4:	460e      	mov	r6, r1
 8019cf6:	4614      	mov	r4, r2
 8019cf8:	4605      	mov	r5, r0
 8019cfa:	b118      	cbz	r0, 8019d04 <__swbuf_r+0x12>
 8019cfc:	6a03      	ldr	r3, [r0, #32]
 8019cfe:	b90b      	cbnz	r3, 8019d04 <__swbuf_r+0x12>
 8019d00:	f7ff ff10 	bl	8019b24 <__sinit>
 8019d04:	69a3      	ldr	r3, [r4, #24]
 8019d06:	60a3      	str	r3, [r4, #8]
 8019d08:	89a3      	ldrh	r3, [r4, #12]
 8019d0a:	071a      	lsls	r2, r3, #28
 8019d0c:	d525      	bpl.n	8019d5a <__swbuf_r+0x68>
 8019d0e:	6923      	ldr	r3, [r4, #16]
 8019d10:	b31b      	cbz	r3, 8019d5a <__swbuf_r+0x68>
 8019d12:	6823      	ldr	r3, [r4, #0]
 8019d14:	6922      	ldr	r2, [r4, #16]
 8019d16:	1a98      	subs	r0, r3, r2
 8019d18:	6963      	ldr	r3, [r4, #20]
 8019d1a:	b2f6      	uxtb	r6, r6
 8019d1c:	4283      	cmp	r3, r0
 8019d1e:	4637      	mov	r7, r6
 8019d20:	dc04      	bgt.n	8019d2c <__swbuf_r+0x3a>
 8019d22:	4621      	mov	r1, r4
 8019d24:	4628      	mov	r0, r5
 8019d26:	f001 fd69 	bl	801b7fc <_fflush_r>
 8019d2a:	b9e0      	cbnz	r0, 8019d66 <__swbuf_r+0x74>
 8019d2c:	68a3      	ldr	r3, [r4, #8]
 8019d2e:	3b01      	subs	r3, #1
 8019d30:	60a3      	str	r3, [r4, #8]
 8019d32:	6823      	ldr	r3, [r4, #0]
 8019d34:	1c5a      	adds	r2, r3, #1
 8019d36:	6022      	str	r2, [r4, #0]
 8019d38:	701e      	strb	r6, [r3, #0]
 8019d3a:	6962      	ldr	r2, [r4, #20]
 8019d3c:	1c43      	adds	r3, r0, #1
 8019d3e:	429a      	cmp	r2, r3
 8019d40:	d004      	beq.n	8019d4c <__swbuf_r+0x5a>
 8019d42:	89a3      	ldrh	r3, [r4, #12]
 8019d44:	07db      	lsls	r3, r3, #31
 8019d46:	d506      	bpl.n	8019d56 <__swbuf_r+0x64>
 8019d48:	2e0a      	cmp	r6, #10
 8019d4a:	d104      	bne.n	8019d56 <__swbuf_r+0x64>
 8019d4c:	4621      	mov	r1, r4
 8019d4e:	4628      	mov	r0, r5
 8019d50:	f001 fd54 	bl	801b7fc <_fflush_r>
 8019d54:	b938      	cbnz	r0, 8019d66 <__swbuf_r+0x74>
 8019d56:	4638      	mov	r0, r7
 8019d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019d5a:	4621      	mov	r1, r4
 8019d5c:	4628      	mov	r0, r5
 8019d5e:	f000 f805 	bl	8019d6c <__swsetup_r>
 8019d62:	2800      	cmp	r0, #0
 8019d64:	d0d5      	beq.n	8019d12 <__swbuf_r+0x20>
 8019d66:	f04f 37ff 	mov.w	r7, #4294967295
 8019d6a:	e7f4      	b.n	8019d56 <__swbuf_r+0x64>

08019d6c <__swsetup_r>:
 8019d6c:	b538      	push	{r3, r4, r5, lr}
 8019d6e:	4b2a      	ldr	r3, [pc, #168]	; (8019e18 <__swsetup_r+0xac>)
 8019d70:	4605      	mov	r5, r0
 8019d72:	6818      	ldr	r0, [r3, #0]
 8019d74:	460c      	mov	r4, r1
 8019d76:	b118      	cbz	r0, 8019d80 <__swsetup_r+0x14>
 8019d78:	6a03      	ldr	r3, [r0, #32]
 8019d7a:	b90b      	cbnz	r3, 8019d80 <__swsetup_r+0x14>
 8019d7c:	f7ff fed2 	bl	8019b24 <__sinit>
 8019d80:	89a3      	ldrh	r3, [r4, #12]
 8019d82:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019d86:	0718      	lsls	r0, r3, #28
 8019d88:	d422      	bmi.n	8019dd0 <__swsetup_r+0x64>
 8019d8a:	06d9      	lsls	r1, r3, #27
 8019d8c:	d407      	bmi.n	8019d9e <__swsetup_r+0x32>
 8019d8e:	2309      	movs	r3, #9
 8019d90:	602b      	str	r3, [r5, #0]
 8019d92:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019d96:	81a3      	strh	r3, [r4, #12]
 8019d98:	f04f 30ff 	mov.w	r0, #4294967295
 8019d9c:	e034      	b.n	8019e08 <__swsetup_r+0x9c>
 8019d9e:	0758      	lsls	r0, r3, #29
 8019da0:	d512      	bpl.n	8019dc8 <__swsetup_r+0x5c>
 8019da2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019da4:	b141      	cbz	r1, 8019db8 <__swsetup_r+0x4c>
 8019da6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019daa:	4299      	cmp	r1, r3
 8019dac:	d002      	beq.n	8019db4 <__swsetup_r+0x48>
 8019dae:	4628      	mov	r0, r5
 8019db0:	f000 fede 	bl	801ab70 <_free_r>
 8019db4:	2300      	movs	r3, #0
 8019db6:	6363      	str	r3, [r4, #52]	; 0x34
 8019db8:	89a3      	ldrh	r3, [r4, #12]
 8019dba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019dbe:	81a3      	strh	r3, [r4, #12]
 8019dc0:	2300      	movs	r3, #0
 8019dc2:	6063      	str	r3, [r4, #4]
 8019dc4:	6923      	ldr	r3, [r4, #16]
 8019dc6:	6023      	str	r3, [r4, #0]
 8019dc8:	89a3      	ldrh	r3, [r4, #12]
 8019dca:	f043 0308 	orr.w	r3, r3, #8
 8019dce:	81a3      	strh	r3, [r4, #12]
 8019dd0:	6923      	ldr	r3, [r4, #16]
 8019dd2:	b94b      	cbnz	r3, 8019de8 <__swsetup_r+0x7c>
 8019dd4:	89a3      	ldrh	r3, [r4, #12]
 8019dd6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019dda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019dde:	d003      	beq.n	8019de8 <__swsetup_r+0x7c>
 8019de0:	4621      	mov	r1, r4
 8019de2:	4628      	mov	r0, r5
 8019de4:	f001 fd6a 	bl	801b8bc <__smakebuf_r>
 8019de8:	89a0      	ldrh	r0, [r4, #12]
 8019dea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019dee:	f010 0301 	ands.w	r3, r0, #1
 8019df2:	d00a      	beq.n	8019e0a <__swsetup_r+0x9e>
 8019df4:	2300      	movs	r3, #0
 8019df6:	60a3      	str	r3, [r4, #8]
 8019df8:	6963      	ldr	r3, [r4, #20]
 8019dfa:	425b      	negs	r3, r3
 8019dfc:	61a3      	str	r3, [r4, #24]
 8019dfe:	6923      	ldr	r3, [r4, #16]
 8019e00:	b943      	cbnz	r3, 8019e14 <__swsetup_r+0xa8>
 8019e02:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019e06:	d1c4      	bne.n	8019d92 <__swsetup_r+0x26>
 8019e08:	bd38      	pop	{r3, r4, r5, pc}
 8019e0a:	0781      	lsls	r1, r0, #30
 8019e0c:	bf58      	it	pl
 8019e0e:	6963      	ldrpl	r3, [r4, #20]
 8019e10:	60a3      	str	r3, [r4, #8]
 8019e12:	e7f4      	b.n	8019dfe <__swsetup_r+0x92>
 8019e14:	2000      	movs	r0, #0
 8019e16:	e7f7      	b.n	8019e08 <__swsetup_r+0x9c>
 8019e18:	200000bc 	.word	0x200000bc

08019e1c <memcmp>:
 8019e1c:	b510      	push	{r4, lr}
 8019e1e:	3901      	subs	r1, #1
 8019e20:	4402      	add	r2, r0
 8019e22:	4290      	cmp	r0, r2
 8019e24:	d101      	bne.n	8019e2a <memcmp+0xe>
 8019e26:	2000      	movs	r0, #0
 8019e28:	e005      	b.n	8019e36 <memcmp+0x1a>
 8019e2a:	7803      	ldrb	r3, [r0, #0]
 8019e2c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8019e30:	42a3      	cmp	r3, r4
 8019e32:	d001      	beq.n	8019e38 <memcmp+0x1c>
 8019e34:	1b18      	subs	r0, r3, r4
 8019e36:	bd10      	pop	{r4, pc}
 8019e38:	3001      	adds	r0, #1
 8019e3a:	e7f2      	b.n	8019e22 <memcmp+0x6>

08019e3c <memset>:
 8019e3c:	4402      	add	r2, r0
 8019e3e:	4603      	mov	r3, r0
 8019e40:	4293      	cmp	r3, r2
 8019e42:	d100      	bne.n	8019e46 <memset+0xa>
 8019e44:	4770      	bx	lr
 8019e46:	f803 1b01 	strb.w	r1, [r3], #1
 8019e4a:	e7f9      	b.n	8019e40 <memset+0x4>

08019e4c <_localeconv_r>:
 8019e4c:	4800      	ldr	r0, [pc, #0]	; (8019e50 <_localeconv_r+0x4>)
 8019e4e:	4770      	bx	lr
 8019e50:	200001b0 	.word	0x200001b0

08019e54 <_close_r>:
 8019e54:	b538      	push	{r3, r4, r5, lr}
 8019e56:	4d06      	ldr	r5, [pc, #24]	; (8019e70 <_close_r+0x1c>)
 8019e58:	2300      	movs	r3, #0
 8019e5a:	4604      	mov	r4, r0
 8019e5c:	4608      	mov	r0, r1
 8019e5e:	602b      	str	r3, [r5, #0]
 8019e60:	f7e9 fa6f 	bl	8003342 <_close>
 8019e64:	1c43      	adds	r3, r0, #1
 8019e66:	d102      	bne.n	8019e6e <_close_r+0x1a>
 8019e68:	682b      	ldr	r3, [r5, #0]
 8019e6a:	b103      	cbz	r3, 8019e6e <_close_r+0x1a>
 8019e6c:	6023      	str	r3, [r4, #0]
 8019e6e:	bd38      	pop	{r3, r4, r5, pc}
 8019e70:	200072dc 	.word	0x200072dc

08019e74 <_lseek_r>:
 8019e74:	b538      	push	{r3, r4, r5, lr}
 8019e76:	4d07      	ldr	r5, [pc, #28]	; (8019e94 <_lseek_r+0x20>)
 8019e78:	4604      	mov	r4, r0
 8019e7a:	4608      	mov	r0, r1
 8019e7c:	4611      	mov	r1, r2
 8019e7e:	2200      	movs	r2, #0
 8019e80:	602a      	str	r2, [r5, #0]
 8019e82:	461a      	mov	r2, r3
 8019e84:	f7e9 fa84 	bl	8003390 <_lseek>
 8019e88:	1c43      	adds	r3, r0, #1
 8019e8a:	d102      	bne.n	8019e92 <_lseek_r+0x1e>
 8019e8c:	682b      	ldr	r3, [r5, #0]
 8019e8e:	b103      	cbz	r3, 8019e92 <_lseek_r+0x1e>
 8019e90:	6023      	str	r3, [r4, #0]
 8019e92:	bd38      	pop	{r3, r4, r5, pc}
 8019e94:	200072dc 	.word	0x200072dc

08019e98 <_read_r>:
 8019e98:	b538      	push	{r3, r4, r5, lr}
 8019e9a:	4d07      	ldr	r5, [pc, #28]	; (8019eb8 <_read_r+0x20>)
 8019e9c:	4604      	mov	r4, r0
 8019e9e:	4608      	mov	r0, r1
 8019ea0:	4611      	mov	r1, r2
 8019ea2:	2200      	movs	r2, #0
 8019ea4:	602a      	str	r2, [r5, #0]
 8019ea6:	461a      	mov	r2, r3
 8019ea8:	f7e9 fa12 	bl	80032d0 <_read>
 8019eac:	1c43      	adds	r3, r0, #1
 8019eae:	d102      	bne.n	8019eb6 <_read_r+0x1e>
 8019eb0:	682b      	ldr	r3, [r5, #0]
 8019eb2:	b103      	cbz	r3, 8019eb6 <_read_r+0x1e>
 8019eb4:	6023      	str	r3, [r4, #0]
 8019eb6:	bd38      	pop	{r3, r4, r5, pc}
 8019eb8:	200072dc 	.word	0x200072dc

08019ebc <_write_r>:
 8019ebc:	b538      	push	{r3, r4, r5, lr}
 8019ebe:	4d07      	ldr	r5, [pc, #28]	; (8019edc <_write_r+0x20>)
 8019ec0:	4604      	mov	r4, r0
 8019ec2:	4608      	mov	r0, r1
 8019ec4:	4611      	mov	r1, r2
 8019ec6:	2200      	movs	r2, #0
 8019ec8:	602a      	str	r2, [r5, #0]
 8019eca:	461a      	mov	r2, r3
 8019ecc:	f7e9 fa1d 	bl	800330a <_write>
 8019ed0:	1c43      	adds	r3, r0, #1
 8019ed2:	d102      	bne.n	8019eda <_write_r+0x1e>
 8019ed4:	682b      	ldr	r3, [r5, #0]
 8019ed6:	b103      	cbz	r3, 8019eda <_write_r+0x1e>
 8019ed8:	6023      	str	r3, [r4, #0]
 8019eda:	bd38      	pop	{r3, r4, r5, pc}
 8019edc:	200072dc 	.word	0x200072dc

08019ee0 <__libc_init_array>:
 8019ee0:	b570      	push	{r4, r5, r6, lr}
 8019ee2:	4d0d      	ldr	r5, [pc, #52]	; (8019f18 <__libc_init_array+0x38>)
 8019ee4:	4c0d      	ldr	r4, [pc, #52]	; (8019f1c <__libc_init_array+0x3c>)
 8019ee6:	1b64      	subs	r4, r4, r5
 8019ee8:	10a4      	asrs	r4, r4, #2
 8019eea:	2600      	movs	r6, #0
 8019eec:	42a6      	cmp	r6, r4
 8019eee:	d109      	bne.n	8019f04 <__libc_init_array+0x24>
 8019ef0:	4d0b      	ldr	r5, [pc, #44]	; (8019f20 <__libc_init_array+0x40>)
 8019ef2:	4c0c      	ldr	r4, [pc, #48]	; (8019f24 <__libc_init_array+0x44>)
 8019ef4:	f001 fdd0 	bl	801ba98 <_init>
 8019ef8:	1b64      	subs	r4, r4, r5
 8019efa:	10a4      	asrs	r4, r4, #2
 8019efc:	2600      	movs	r6, #0
 8019efe:	42a6      	cmp	r6, r4
 8019f00:	d105      	bne.n	8019f0e <__libc_init_array+0x2e>
 8019f02:	bd70      	pop	{r4, r5, r6, pc}
 8019f04:	f855 3b04 	ldr.w	r3, [r5], #4
 8019f08:	4798      	blx	r3
 8019f0a:	3601      	adds	r6, #1
 8019f0c:	e7ee      	b.n	8019eec <__libc_init_array+0xc>
 8019f0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8019f12:	4798      	blx	r3
 8019f14:	3601      	adds	r6, #1
 8019f16:	e7f2      	b.n	8019efe <__libc_init_array+0x1e>
 8019f18:	0801f360 	.word	0x0801f360
 8019f1c:	0801f360 	.word	0x0801f360
 8019f20:	0801f360 	.word	0x0801f360
 8019f24:	0801f364 	.word	0x0801f364

08019f28 <__retarget_lock_init_recursive>:
 8019f28:	4770      	bx	lr

08019f2a <__retarget_lock_acquire_recursive>:
 8019f2a:	4770      	bx	lr

08019f2c <__retarget_lock_release_recursive>:
 8019f2c:	4770      	bx	lr

08019f2e <memcpy>:
 8019f2e:	440a      	add	r2, r1
 8019f30:	4291      	cmp	r1, r2
 8019f32:	f100 33ff 	add.w	r3, r0, #4294967295
 8019f36:	d100      	bne.n	8019f3a <memcpy+0xc>
 8019f38:	4770      	bx	lr
 8019f3a:	b510      	push	{r4, lr}
 8019f3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019f40:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019f44:	4291      	cmp	r1, r2
 8019f46:	d1f9      	bne.n	8019f3c <memcpy+0xe>
 8019f48:	bd10      	pop	{r4, pc}
	...

08019f4c <__assert_func>:
 8019f4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019f4e:	4614      	mov	r4, r2
 8019f50:	461a      	mov	r2, r3
 8019f52:	4b09      	ldr	r3, [pc, #36]	; (8019f78 <__assert_func+0x2c>)
 8019f54:	681b      	ldr	r3, [r3, #0]
 8019f56:	4605      	mov	r5, r0
 8019f58:	68d8      	ldr	r0, [r3, #12]
 8019f5a:	b14c      	cbz	r4, 8019f70 <__assert_func+0x24>
 8019f5c:	4b07      	ldr	r3, [pc, #28]	; (8019f7c <__assert_func+0x30>)
 8019f5e:	9100      	str	r1, [sp, #0]
 8019f60:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019f64:	4906      	ldr	r1, [pc, #24]	; (8019f80 <__assert_func+0x34>)
 8019f66:	462b      	mov	r3, r5
 8019f68:	f001 fc70 	bl	801b84c <fiprintf>
 8019f6c:	f001 fd14 	bl	801b998 <abort>
 8019f70:	4b04      	ldr	r3, [pc, #16]	; (8019f84 <__assert_func+0x38>)
 8019f72:	461c      	mov	r4, r3
 8019f74:	e7f3      	b.n	8019f5e <__assert_func+0x12>
 8019f76:	bf00      	nop
 8019f78:	200000bc 	.word	0x200000bc
 8019f7c:	0801f132 	.word	0x0801f132
 8019f80:	0801f13f 	.word	0x0801f13f
 8019f84:	0801f16d 	.word	0x0801f16d

08019f88 <quorem>:
 8019f88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f8c:	6903      	ldr	r3, [r0, #16]
 8019f8e:	690c      	ldr	r4, [r1, #16]
 8019f90:	42a3      	cmp	r3, r4
 8019f92:	4607      	mov	r7, r0
 8019f94:	db7e      	blt.n	801a094 <quorem+0x10c>
 8019f96:	3c01      	subs	r4, #1
 8019f98:	f101 0814 	add.w	r8, r1, #20
 8019f9c:	f100 0514 	add.w	r5, r0, #20
 8019fa0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8019fa4:	9301      	str	r3, [sp, #4]
 8019fa6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8019faa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8019fae:	3301      	adds	r3, #1
 8019fb0:	429a      	cmp	r2, r3
 8019fb2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8019fb6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8019fba:	fbb2 f6f3 	udiv	r6, r2, r3
 8019fbe:	d331      	bcc.n	801a024 <quorem+0x9c>
 8019fc0:	f04f 0e00 	mov.w	lr, #0
 8019fc4:	4640      	mov	r0, r8
 8019fc6:	46ac      	mov	ip, r5
 8019fc8:	46f2      	mov	sl, lr
 8019fca:	f850 2b04 	ldr.w	r2, [r0], #4
 8019fce:	b293      	uxth	r3, r2
 8019fd0:	fb06 e303 	mla	r3, r6, r3, lr
 8019fd4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8019fd8:	0c1a      	lsrs	r2, r3, #16
 8019fda:	b29b      	uxth	r3, r3
 8019fdc:	ebaa 0303 	sub.w	r3, sl, r3
 8019fe0:	f8dc a000 	ldr.w	sl, [ip]
 8019fe4:	fa13 f38a 	uxtah	r3, r3, sl
 8019fe8:	fb06 220e 	mla	r2, r6, lr, r2
 8019fec:	9300      	str	r3, [sp, #0]
 8019fee:	9b00      	ldr	r3, [sp, #0]
 8019ff0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8019ff4:	b292      	uxth	r2, r2
 8019ff6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8019ffa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8019ffe:	f8bd 3000 	ldrh.w	r3, [sp]
 801a002:	4581      	cmp	r9, r0
 801a004:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a008:	f84c 3b04 	str.w	r3, [ip], #4
 801a00c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801a010:	d2db      	bcs.n	8019fca <quorem+0x42>
 801a012:	f855 300b 	ldr.w	r3, [r5, fp]
 801a016:	b92b      	cbnz	r3, 801a024 <quorem+0x9c>
 801a018:	9b01      	ldr	r3, [sp, #4]
 801a01a:	3b04      	subs	r3, #4
 801a01c:	429d      	cmp	r5, r3
 801a01e:	461a      	mov	r2, r3
 801a020:	d32c      	bcc.n	801a07c <quorem+0xf4>
 801a022:	613c      	str	r4, [r7, #16]
 801a024:	4638      	mov	r0, r7
 801a026:	f001 f91f 	bl	801b268 <__mcmp>
 801a02a:	2800      	cmp	r0, #0
 801a02c:	db22      	blt.n	801a074 <quorem+0xec>
 801a02e:	3601      	adds	r6, #1
 801a030:	4629      	mov	r1, r5
 801a032:	2000      	movs	r0, #0
 801a034:	f858 2b04 	ldr.w	r2, [r8], #4
 801a038:	f8d1 c000 	ldr.w	ip, [r1]
 801a03c:	b293      	uxth	r3, r2
 801a03e:	1ac3      	subs	r3, r0, r3
 801a040:	0c12      	lsrs	r2, r2, #16
 801a042:	fa13 f38c 	uxtah	r3, r3, ip
 801a046:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801a04a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801a04e:	b29b      	uxth	r3, r3
 801a050:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a054:	45c1      	cmp	r9, r8
 801a056:	f841 3b04 	str.w	r3, [r1], #4
 801a05a:	ea4f 4022 	mov.w	r0, r2, asr #16
 801a05e:	d2e9      	bcs.n	801a034 <quorem+0xac>
 801a060:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a064:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a068:	b922      	cbnz	r2, 801a074 <quorem+0xec>
 801a06a:	3b04      	subs	r3, #4
 801a06c:	429d      	cmp	r5, r3
 801a06e:	461a      	mov	r2, r3
 801a070:	d30a      	bcc.n	801a088 <quorem+0x100>
 801a072:	613c      	str	r4, [r7, #16]
 801a074:	4630      	mov	r0, r6
 801a076:	b003      	add	sp, #12
 801a078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a07c:	6812      	ldr	r2, [r2, #0]
 801a07e:	3b04      	subs	r3, #4
 801a080:	2a00      	cmp	r2, #0
 801a082:	d1ce      	bne.n	801a022 <quorem+0x9a>
 801a084:	3c01      	subs	r4, #1
 801a086:	e7c9      	b.n	801a01c <quorem+0x94>
 801a088:	6812      	ldr	r2, [r2, #0]
 801a08a:	3b04      	subs	r3, #4
 801a08c:	2a00      	cmp	r2, #0
 801a08e:	d1f0      	bne.n	801a072 <quorem+0xea>
 801a090:	3c01      	subs	r4, #1
 801a092:	e7eb      	b.n	801a06c <quorem+0xe4>
 801a094:	2000      	movs	r0, #0
 801a096:	e7ee      	b.n	801a076 <quorem+0xee>

0801a098 <_dtoa_r>:
 801a098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a09c:	ed2d 8b02 	vpush	{d8}
 801a0a0:	69c5      	ldr	r5, [r0, #28]
 801a0a2:	b091      	sub	sp, #68	; 0x44
 801a0a4:	ed8d 0b02 	vstr	d0, [sp, #8]
 801a0a8:	ec59 8b10 	vmov	r8, r9, d0
 801a0ac:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801a0ae:	9106      	str	r1, [sp, #24]
 801a0b0:	4606      	mov	r6, r0
 801a0b2:	9208      	str	r2, [sp, #32]
 801a0b4:	930c      	str	r3, [sp, #48]	; 0x30
 801a0b6:	b975      	cbnz	r5, 801a0d6 <_dtoa_r+0x3e>
 801a0b8:	2010      	movs	r0, #16
 801a0ba:	f000 fda5 	bl	801ac08 <malloc>
 801a0be:	4602      	mov	r2, r0
 801a0c0:	61f0      	str	r0, [r6, #28]
 801a0c2:	b920      	cbnz	r0, 801a0ce <_dtoa_r+0x36>
 801a0c4:	4ba6      	ldr	r3, [pc, #664]	; (801a360 <_dtoa_r+0x2c8>)
 801a0c6:	21ef      	movs	r1, #239	; 0xef
 801a0c8:	48a6      	ldr	r0, [pc, #664]	; (801a364 <_dtoa_r+0x2cc>)
 801a0ca:	f7ff ff3f 	bl	8019f4c <__assert_func>
 801a0ce:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801a0d2:	6005      	str	r5, [r0, #0]
 801a0d4:	60c5      	str	r5, [r0, #12]
 801a0d6:	69f3      	ldr	r3, [r6, #28]
 801a0d8:	6819      	ldr	r1, [r3, #0]
 801a0da:	b151      	cbz	r1, 801a0f2 <_dtoa_r+0x5a>
 801a0dc:	685a      	ldr	r2, [r3, #4]
 801a0de:	604a      	str	r2, [r1, #4]
 801a0e0:	2301      	movs	r3, #1
 801a0e2:	4093      	lsls	r3, r2
 801a0e4:	608b      	str	r3, [r1, #8]
 801a0e6:	4630      	mov	r0, r6
 801a0e8:	f000 fe82 	bl	801adf0 <_Bfree>
 801a0ec:	69f3      	ldr	r3, [r6, #28]
 801a0ee:	2200      	movs	r2, #0
 801a0f0:	601a      	str	r2, [r3, #0]
 801a0f2:	f1b9 0300 	subs.w	r3, r9, #0
 801a0f6:	bfbb      	ittet	lt
 801a0f8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801a0fc:	9303      	strlt	r3, [sp, #12]
 801a0fe:	2300      	movge	r3, #0
 801a100:	2201      	movlt	r2, #1
 801a102:	bfac      	ite	ge
 801a104:	6023      	strge	r3, [r4, #0]
 801a106:	6022      	strlt	r2, [r4, #0]
 801a108:	4b97      	ldr	r3, [pc, #604]	; (801a368 <_dtoa_r+0x2d0>)
 801a10a:	9c03      	ldr	r4, [sp, #12]
 801a10c:	43a3      	bics	r3, r4
 801a10e:	d11c      	bne.n	801a14a <_dtoa_r+0xb2>
 801a110:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a112:	f242 730f 	movw	r3, #9999	; 0x270f
 801a116:	6013      	str	r3, [r2, #0]
 801a118:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801a11c:	ea53 0308 	orrs.w	r3, r3, r8
 801a120:	f000 84fb 	beq.w	801ab1a <_dtoa_r+0xa82>
 801a124:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a126:	b963      	cbnz	r3, 801a142 <_dtoa_r+0xaa>
 801a128:	4b90      	ldr	r3, [pc, #576]	; (801a36c <_dtoa_r+0x2d4>)
 801a12a:	e020      	b.n	801a16e <_dtoa_r+0xd6>
 801a12c:	4b90      	ldr	r3, [pc, #576]	; (801a370 <_dtoa_r+0x2d8>)
 801a12e:	9301      	str	r3, [sp, #4]
 801a130:	3308      	adds	r3, #8
 801a132:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801a134:	6013      	str	r3, [r2, #0]
 801a136:	9801      	ldr	r0, [sp, #4]
 801a138:	b011      	add	sp, #68	; 0x44
 801a13a:	ecbd 8b02 	vpop	{d8}
 801a13e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a142:	4b8a      	ldr	r3, [pc, #552]	; (801a36c <_dtoa_r+0x2d4>)
 801a144:	9301      	str	r3, [sp, #4]
 801a146:	3303      	adds	r3, #3
 801a148:	e7f3      	b.n	801a132 <_dtoa_r+0x9a>
 801a14a:	ed9d 8b02 	vldr	d8, [sp, #8]
 801a14e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801a152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a156:	d10c      	bne.n	801a172 <_dtoa_r+0xda>
 801a158:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a15a:	2301      	movs	r3, #1
 801a15c:	6013      	str	r3, [r2, #0]
 801a15e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a160:	2b00      	cmp	r3, #0
 801a162:	f000 84d7 	beq.w	801ab14 <_dtoa_r+0xa7c>
 801a166:	4b83      	ldr	r3, [pc, #524]	; (801a374 <_dtoa_r+0x2dc>)
 801a168:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801a16a:	6013      	str	r3, [r2, #0]
 801a16c:	3b01      	subs	r3, #1
 801a16e:	9301      	str	r3, [sp, #4]
 801a170:	e7e1      	b.n	801a136 <_dtoa_r+0x9e>
 801a172:	aa0e      	add	r2, sp, #56	; 0x38
 801a174:	a90f      	add	r1, sp, #60	; 0x3c
 801a176:	4630      	mov	r0, r6
 801a178:	eeb0 0b48 	vmov.f64	d0, d8
 801a17c:	f001 f91a 	bl	801b3b4 <__d2b>
 801a180:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801a184:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a186:	4605      	mov	r5, r0
 801a188:	2b00      	cmp	r3, #0
 801a18a:	d046      	beq.n	801a21a <_dtoa_r+0x182>
 801a18c:	eeb0 7b48 	vmov.f64	d7, d8
 801a190:	ee18 1a90 	vmov	r1, s17
 801a194:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801a198:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 801a19c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801a1a0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801a1a4:	2000      	movs	r0, #0
 801a1a6:	ee07 1a90 	vmov	s15, r1
 801a1aa:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 801a1ae:	ed9f 5b66 	vldr	d5, [pc, #408]	; 801a348 <_dtoa_r+0x2b0>
 801a1b2:	ee37 7b46 	vsub.f64	d7, d7, d6
 801a1b6:	ed9f 6b66 	vldr	d6, [pc, #408]	; 801a350 <_dtoa_r+0x2b8>
 801a1ba:	eea7 6b05 	vfma.f64	d6, d7, d5
 801a1be:	ed9f 5b66 	vldr	d5, [pc, #408]	; 801a358 <_dtoa_r+0x2c0>
 801a1c2:	ee07 3a90 	vmov	s15, r3
 801a1c6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801a1ca:	eeb0 7b46 	vmov.f64	d7, d6
 801a1ce:	eea4 7b05 	vfma.f64	d7, d4, d5
 801a1d2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801a1d6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801a1da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a1de:	ee16 ba90 	vmov	fp, s13
 801a1e2:	9009      	str	r0, [sp, #36]	; 0x24
 801a1e4:	d508      	bpl.n	801a1f8 <_dtoa_r+0x160>
 801a1e6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801a1ea:	eeb4 6b47 	vcmp.f64	d6, d7
 801a1ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a1f2:	bf18      	it	ne
 801a1f4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 801a1f8:	f1bb 0f16 	cmp.w	fp, #22
 801a1fc:	d82b      	bhi.n	801a256 <_dtoa_r+0x1be>
 801a1fe:	495e      	ldr	r1, [pc, #376]	; (801a378 <_dtoa_r+0x2e0>)
 801a200:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 801a204:	ed91 7b00 	vldr	d7, [r1]
 801a208:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801a20c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a210:	d501      	bpl.n	801a216 <_dtoa_r+0x17e>
 801a212:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a216:	2100      	movs	r1, #0
 801a218:	e01e      	b.n	801a258 <_dtoa_r+0x1c0>
 801a21a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a21c:	4413      	add	r3, r2
 801a21e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 801a222:	2920      	cmp	r1, #32
 801a224:	bfc1      	itttt	gt
 801a226:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 801a22a:	408c      	lslgt	r4, r1
 801a22c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 801a230:	fa28 f101 	lsrgt.w	r1, r8, r1
 801a234:	bfd6      	itet	le
 801a236:	f1c1 0120 	rsble	r1, r1, #32
 801a23a:	4321      	orrgt	r1, r4
 801a23c:	fa08 f101 	lslle.w	r1, r8, r1
 801a240:	ee07 1a90 	vmov	s15, r1
 801a244:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801a248:	3b01      	subs	r3, #1
 801a24a:	ee17 1a90 	vmov	r1, s15
 801a24e:	2001      	movs	r0, #1
 801a250:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 801a254:	e7a7      	b.n	801a1a6 <_dtoa_r+0x10e>
 801a256:	2101      	movs	r1, #1
 801a258:	1ad2      	subs	r2, r2, r3
 801a25a:	1e53      	subs	r3, r2, #1
 801a25c:	9305      	str	r3, [sp, #20]
 801a25e:	bf45      	ittet	mi
 801a260:	f1c2 0301 	rsbmi	r3, r2, #1
 801a264:	9304      	strmi	r3, [sp, #16]
 801a266:	2300      	movpl	r3, #0
 801a268:	2300      	movmi	r3, #0
 801a26a:	bf4c      	ite	mi
 801a26c:	9305      	strmi	r3, [sp, #20]
 801a26e:	9304      	strpl	r3, [sp, #16]
 801a270:	f1bb 0f00 	cmp.w	fp, #0
 801a274:	910b      	str	r1, [sp, #44]	; 0x2c
 801a276:	db18      	blt.n	801a2aa <_dtoa_r+0x212>
 801a278:	9b05      	ldr	r3, [sp, #20]
 801a27a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801a27e:	445b      	add	r3, fp
 801a280:	9305      	str	r3, [sp, #20]
 801a282:	2300      	movs	r3, #0
 801a284:	9a06      	ldr	r2, [sp, #24]
 801a286:	2a09      	cmp	r2, #9
 801a288:	d848      	bhi.n	801a31c <_dtoa_r+0x284>
 801a28a:	2a05      	cmp	r2, #5
 801a28c:	bfc4      	itt	gt
 801a28e:	3a04      	subgt	r2, #4
 801a290:	9206      	strgt	r2, [sp, #24]
 801a292:	9a06      	ldr	r2, [sp, #24]
 801a294:	f1a2 0202 	sub.w	r2, r2, #2
 801a298:	bfcc      	ite	gt
 801a29a:	2400      	movgt	r4, #0
 801a29c:	2401      	movle	r4, #1
 801a29e:	2a03      	cmp	r2, #3
 801a2a0:	d847      	bhi.n	801a332 <_dtoa_r+0x29a>
 801a2a2:	e8df f002 	tbb	[pc, r2]
 801a2a6:	2d0b      	.short	0x2d0b
 801a2a8:	392b      	.short	0x392b
 801a2aa:	9b04      	ldr	r3, [sp, #16]
 801a2ac:	2200      	movs	r2, #0
 801a2ae:	eba3 030b 	sub.w	r3, r3, fp
 801a2b2:	9304      	str	r3, [sp, #16]
 801a2b4:	920a      	str	r2, [sp, #40]	; 0x28
 801a2b6:	f1cb 0300 	rsb	r3, fp, #0
 801a2ba:	e7e3      	b.n	801a284 <_dtoa_r+0x1ec>
 801a2bc:	2200      	movs	r2, #0
 801a2be:	9207      	str	r2, [sp, #28]
 801a2c0:	9a08      	ldr	r2, [sp, #32]
 801a2c2:	2a00      	cmp	r2, #0
 801a2c4:	dc38      	bgt.n	801a338 <_dtoa_r+0x2a0>
 801a2c6:	f04f 0a01 	mov.w	sl, #1
 801a2ca:	46d1      	mov	r9, sl
 801a2cc:	4652      	mov	r2, sl
 801a2ce:	f8cd a020 	str.w	sl, [sp, #32]
 801a2d2:	69f7      	ldr	r7, [r6, #28]
 801a2d4:	2100      	movs	r1, #0
 801a2d6:	2004      	movs	r0, #4
 801a2d8:	f100 0c14 	add.w	ip, r0, #20
 801a2dc:	4594      	cmp	ip, r2
 801a2de:	d930      	bls.n	801a342 <_dtoa_r+0x2aa>
 801a2e0:	6079      	str	r1, [r7, #4]
 801a2e2:	4630      	mov	r0, r6
 801a2e4:	930d      	str	r3, [sp, #52]	; 0x34
 801a2e6:	f000 fd43 	bl	801ad70 <_Balloc>
 801a2ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a2ec:	9001      	str	r0, [sp, #4]
 801a2ee:	4602      	mov	r2, r0
 801a2f0:	2800      	cmp	r0, #0
 801a2f2:	d145      	bne.n	801a380 <_dtoa_r+0x2e8>
 801a2f4:	4b21      	ldr	r3, [pc, #132]	; (801a37c <_dtoa_r+0x2e4>)
 801a2f6:	f240 11af 	movw	r1, #431	; 0x1af
 801a2fa:	e6e5      	b.n	801a0c8 <_dtoa_r+0x30>
 801a2fc:	2201      	movs	r2, #1
 801a2fe:	e7de      	b.n	801a2be <_dtoa_r+0x226>
 801a300:	2200      	movs	r2, #0
 801a302:	9207      	str	r2, [sp, #28]
 801a304:	9a08      	ldr	r2, [sp, #32]
 801a306:	eb0b 0a02 	add.w	sl, fp, r2
 801a30a:	f10a 0901 	add.w	r9, sl, #1
 801a30e:	464a      	mov	r2, r9
 801a310:	2a01      	cmp	r2, #1
 801a312:	bfb8      	it	lt
 801a314:	2201      	movlt	r2, #1
 801a316:	e7dc      	b.n	801a2d2 <_dtoa_r+0x23a>
 801a318:	2201      	movs	r2, #1
 801a31a:	e7f2      	b.n	801a302 <_dtoa_r+0x26a>
 801a31c:	2401      	movs	r4, #1
 801a31e:	2200      	movs	r2, #0
 801a320:	e9cd 2406 	strd	r2, r4, [sp, #24]
 801a324:	f04f 3aff 	mov.w	sl, #4294967295
 801a328:	2100      	movs	r1, #0
 801a32a:	46d1      	mov	r9, sl
 801a32c:	2212      	movs	r2, #18
 801a32e:	9108      	str	r1, [sp, #32]
 801a330:	e7cf      	b.n	801a2d2 <_dtoa_r+0x23a>
 801a332:	2201      	movs	r2, #1
 801a334:	9207      	str	r2, [sp, #28]
 801a336:	e7f5      	b.n	801a324 <_dtoa_r+0x28c>
 801a338:	f8dd a020 	ldr.w	sl, [sp, #32]
 801a33c:	46d1      	mov	r9, sl
 801a33e:	4652      	mov	r2, sl
 801a340:	e7c7      	b.n	801a2d2 <_dtoa_r+0x23a>
 801a342:	3101      	adds	r1, #1
 801a344:	0040      	lsls	r0, r0, #1
 801a346:	e7c7      	b.n	801a2d8 <_dtoa_r+0x240>
 801a348:	636f4361 	.word	0x636f4361
 801a34c:	3fd287a7 	.word	0x3fd287a7
 801a350:	8b60c8b3 	.word	0x8b60c8b3
 801a354:	3fc68a28 	.word	0x3fc68a28
 801a358:	509f79fb 	.word	0x509f79fb
 801a35c:	3fd34413 	.word	0x3fd34413
 801a360:	0801ef8e 	.word	0x0801ef8e
 801a364:	0801f17b 	.word	0x0801f17b
 801a368:	7ff00000 	.word	0x7ff00000
 801a36c:	0801f177 	.word	0x0801f177
 801a370:	0801f16e 	.word	0x0801f16e
 801a374:	0801f10f 	.word	0x0801f10f
 801a378:	0801f268 	.word	0x0801f268
 801a37c:	0801f1d3 	.word	0x0801f1d3
 801a380:	69f2      	ldr	r2, [r6, #28]
 801a382:	9901      	ldr	r1, [sp, #4]
 801a384:	6011      	str	r1, [r2, #0]
 801a386:	f1b9 0f0e 	cmp.w	r9, #14
 801a38a:	d86c      	bhi.n	801a466 <_dtoa_r+0x3ce>
 801a38c:	2c00      	cmp	r4, #0
 801a38e:	d06a      	beq.n	801a466 <_dtoa_r+0x3ce>
 801a390:	f1bb 0f00 	cmp.w	fp, #0
 801a394:	f340 80a0 	ble.w	801a4d8 <_dtoa_r+0x440>
 801a398:	4ac1      	ldr	r2, [pc, #772]	; (801a6a0 <_dtoa_r+0x608>)
 801a39a:	f00b 010f 	and.w	r1, fp, #15
 801a39e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801a3a2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801a3a6:	ed92 7b00 	vldr	d7, [r2]
 801a3aa:	ea4f 122b 	mov.w	r2, fp, asr #4
 801a3ae:	f000 8087 	beq.w	801a4c0 <_dtoa_r+0x428>
 801a3b2:	49bc      	ldr	r1, [pc, #752]	; (801a6a4 <_dtoa_r+0x60c>)
 801a3b4:	ed91 6b08 	vldr	d6, [r1, #32]
 801a3b8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801a3bc:	ed8d 6b02 	vstr	d6, [sp, #8]
 801a3c0:	f002 020f 	and.w	r2, r2, #15
 801a3c4:	2103      	movs	r1, #3
 801a3c6:	48b7      	ldr	r0, [pc, #732]	; (801a6a4 <_dtoa_r+0x60c>)
 801a3c8:	2a00      	cmp	r2, #0
 801a3ca:	d17b      	bne.n	801a4c4 <_dtoa_r+0x42c>
 801a3cc:	ed9d 6b02 	vldr	d6, [sp, #8]
 801a3d0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801a3d4:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a3d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a3da:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a3de:	2a00      	cmp	r2, #0
 801a3e0:	f000 80a0 	beq.w	801a524 <_dtoa_r+0x48c>
 801a3e4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801a3e8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801a3ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a3f0:	f140 8098 	bpl.w	801a524 <_dtoa_r+0x48c>
 801a3f4:	f1b9 0f00 	cmp.w	r9, #0
 801a3f8:	f000 8094 	beq.w	801a524 <_dtoa_r+0x48c>
 801a3fc:	f1ba 0f00 	cmp.w	sl, #0
 801a400:	dd2f      	ble.n	801a462 <_dtoa_r+0x3ca>
 801a402:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801a406:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a40a:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a40e:	f10b 32ff 	add.w	r2, fp, #4294967295
 801a412:	3101      	adds	r1, #1
 801a414:	4654      	mov	r4, sl
 801a416:	ed9d 6b02 	vldr	d6, [sp, #8]
 801a41a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801a41e:	ee07 1a90 	vmov	s15, r1
 801a422:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801a426:	eea7 5b06 	vfma.f64	d5, d7, d6
 801a42a:	ee15 7a90 	vmov	r7, s11
 801a42e:	ec51 0b15 	vmov	r0, r1, d5
 801a432:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 801a436:	2c00      	cmp	r4, #0
 801a438:	d177      	bne.n	801a52a <_dtoa_r+0x492>
 801a43a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801a43e:	ee36 6b47 	vsub.f64	d6, d6, d7
 801a442:	ec41 0b17 	vmov	d7, r0, r1
 801a446:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a44a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a44e:	f300 826a 	bgt.w	801a926 <_dtoa_r+0x88e>
 801a452:	eeb1 7b47 	vneg.f64	d7, d7
 801a456:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a45a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a45e:	f100 8260 	bmi.w	801a922 <_dtoa_r+0x88a>
 801a462:	ed8d 8b02 	vstr	d8, [sp, #8]
 801a466:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a468:	2a00      	cmp	r2, #0
 801a46a:	f2c0 811d 	blt.w	801a6a8 <_dtoa_r+0x610>
 801a46e:	f1bb 0f0e 	cmp.w	fp, #14
 801a472:	f300 8119 	bgt.w	801a6a8 <_dtoa_r+0x610>
 801a476:	4b8a      	ldr	r3, [pc, #552]	; (801a6a0 <_dtoa_r+0x608>)
 801a478:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801a47c:	ed93 6b00 	vldr	d6, [r3]
 801a480:	9b08      	ldr	r3, [sp, #32]
 801a482:	2b00      	cmp	r3, #0
 801a484:	f280 80b7 	bge.w	801a5f6 <_dtoa_r+0x55e>
 801a488:	f1b9 0f00 	cmp.w	r9, #0
 801a48c:	f300 80b3 	bgt.w	801a5f6 <_dtoa_r+0x55e>
 801a490:	f040 8246 	bne.w	801a920 <_dtoa_r+0x888>
 801a494:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801a498:	ee26 6b07 	vmul.f64	d6, d6, d7
 801a49c:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a4a0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a4a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a4a8:	464c      	mov	r4, r9
 801a4aa:	464f      	mov	r7, r9
 801a4ac:	f280 821c 	bge.w	801a8e8 <_dtoa_r+0x850>
 801a4b0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a4b4:	2331      	movs	r3, #49	; 0x31
 801a4b6:	f808 3b01 	strb.w	r3, [r8], #1
 801a4ba:	f10b 0b01 	add.w	fp, fp, #1
 801a4be:	e218      	b.n	801a8f2 <_dtoa_r+0x85a>
 801a4c0:	2102      	movs	r1, #2
 801a4c2:	e780      	b.n	801a3c6 <_dtoa_r+0x32e>
 801a4c4:	07d4      	lsls	r4, r2, #31
 801a4c6:	d504      	bpl.n	801a4d2 <_dtoa_r+0x43a>
 801a4c8:	ed90 6b00 	vldr	d6, [r0]
 801a4cc:	3101      	adds	r1, #1
 801a4ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a4d2:	1052      	asrs	r2, r2, #1
 801a4d4:	3008      	adds	r0, #8
 801a4d6:	e777      	b.n	801a3c8 <_dtoa_r+0x330>
 801a4d8:	d022      	beq.n	801a520 <_dtoa_r+0x488>
 801a4da:	f1cb 0200 	rsb	r2, fp, #0
 801a4de:	4970      	ldr	r1, [pc, #448]	; (801a6a0 <_dtoa_r+0x608>)
 801a4e0:	f002 000f 	and.w	r0, r2, #15
 801a4e4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801a4e8:	ed91 7b00 	vldr	d7, [r1]
 801a4ec:	ee28 7b07 	vmul.f64	d7, d8, d7
 801a4f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a4f4:	486b      	ldr	r0, [pc, #428]	; (801a6a4 <_dtoa_r+0x60c>)
 801a4f6:	1112      	asrs	r2, r2, #4
 801a4f8:	2400      	movs	r4, #0
 801a4fa:	2102      	movs	r1, #2
 801a4fc:	b92a      	cbnz	r2, 801a50a <_dtoa_r+0x472>
 801a4fe:	2c00      	cmp	r4, #0
 801a500:	f43f af6a 	beq.w	801a3d8 <_dtoa_r+0x340>
 801a504:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a508:	e766      	b.n	801a3d8 <_dtoa_r+0x340>
 801a50a:	07d7      	lsls	r7, r2, #31
 801a50c:	d505      	bpl.n	801a51a <_dtoa_r+0x482>
 801a50e:	ed90 6b00 	vldr	d6, [r0]
 801a512:	3101      	adds	r1, #1
 801a514:	2401      	movs	r4, #1
 801a516:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a51a:	1052      	asrs	r2, r2, #1
 801a51c:	3008      	adds	r0, #8
 801a51e:	e7ed      	b.n	801a4fc <_dtoa_r+0x464>
 801a520:	2102      	movs	r1, #2
 801a522:	e759      	b.n	801a3d8 <_dtoa_r+0x340>
 801a524:	465a      	mov	r2, fp
 801a526:	464c      	mov	r4, r9
 801a528:	e775      	b.n	801a416 <_dtoa_r+0x37e>
 801a52a:	ec41 0b17 	vmov	d7, r0, r1
 801a52e:	495c      	ldr	r1, [pc, #368]	; (801a6a0 <_dtoa_r+0x608>)
 801a530:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 801a534:	ed11 4b02 	vldr	d4, [r1, #-8]
 801a538:	9901      	ldr	r1, [sp, #4]
 801a53a:	440c      	add	r4, r1
 801a53c:	9907      	ldr	r1, [sp, #28]
 801a53e:	b351      	cbz	r1, 801a596 <_dtoa_r+0x4fe>
 801a540:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801a544:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801a548:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a54c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801a550:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801a554:	ee35 7b47 	vsub.f64	d7, d5, d7
 801a558:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801a55c:	ee14 1a90 	vmov	r1, s9
 801a560:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801a564:	3130      	adds	r1, #48	; 0x30
 801a566:	ee36 6b45 	vsub.f64	d6, d6, d5
 801a56a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a56e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a572:	f808 1b01 	strb.w	r1, [r8], #1
 801a576:	d439      	bmi.n	801a5ec <_dtoa_r+0x554>
 801a578:	ee32 5b46 	vsub.f64	d5, d2, d6
 801a57c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801a580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a584:	d472      	bmi.n	801a66c <_dtoa_r+0x5d4>
 801a586:	45a0      	cmp	r8, r4
 801a588:	f43f af6b 	beq.w	801a462 <_dtoa_r+0x3ca>
 801a58c:	ee27 7b03 	vmul.f64	d7, d7, d3
 801a590:	ee26 6b03 	vmul.f64	d6, d6, d3
 801a594:	e7e0      	b.n	801a558 <_dtoa_r+0x4c0>
 801a596:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a59a:	ee27 7b04 	vmul.f64	d7, d7, d4
 801a59e:	4620      	mov	r0, r4
 801a5a0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801a5a4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801a5a8:	ee14 1a90 	vmov	r1, s9
 801a5ac:	3130      	adds	r1, #48	; 0x30
 801a5ae:	f808 1b01 	strb.w	r1, [r8], #1
 801a5b2:	45a0      	cmp	r8, r4
 801a5b4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801a5b8:	ee36 6b45 	vsub.f64	d6, d6, d5
 801a5bc:	d118      	bne.n	801a5f0 <_dtoa_r+0x558>
 801a5be:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801a5c2:	ee37 4b05 	vadd.f64	d4, d7, d5
 801a5c6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801a5ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a5ce:	dc4d      	bgt.n	801a66c <_dtoa_r+0x5d4>
 801a5d0:	ee35 5b47 	vsub.f64	d5, d5, d7
 801a5d4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801a5d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a5dc:	f57f af41 	bpl.w	801a462 <_dtoa_r+0x3ca>
 801a5e0:	4680      	mov	r8, r0
 801a5e2:	3801      	subs	r0, #1
 801a5e4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801a5e8:	2b30      	cmp	r3, #48	; 0x30
 801a5ea:	d0f9      	beq.n	801a5e0 <_dtoa_r+0x548>
 801a5ec:	4693      	mov	fp, r2
 801a5ee:	e02a      	b.n	801a646 <_dtoa_r+0x5ae>
 801a5f0:	ee26 6b03 	vmul.f64	d6, d6, d3
 801a5f4:	e7d6      	b.n	801a5a4 <_dtoa_r+0x50c>
 801a5f6:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a5fa:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801a5fe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a602:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801a606:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801a60a:	ee15 3a10 	vmov	r3, s10
 801a60e:	3330      	adds	r3, #48	; 0x30
 801a610:	f808 3b01 	strb.w	r3, [r8], #1
 801a614:	9b01      	ldr	r3, [sp, #4]
 801a616:	eba8 0303 	sub.w	r3, r8, r3
 801a61a:	4599      	cmp	r9, r3
 801a61c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801a620:	eea3 7b46 	vfms.f64	d7, d3, d6
 801a624:	d133      	bne.n	801a68e <_dtoa_r+0x5f6>
 801a626:	ee37 7b07 	vadd.f64	d7, d7, d7
 801a62a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801a62e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a632:	dc1a      	bgt.n	801a66a <_dtoa_r+0x5d2>
 801a634:	eeb4 7b46 	vcmp.f64	d7, d6
 801a638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a63c:	d103      	bne.n	801a646 <_dtoa_r+0x5ae>
 801a63e:	ee15 3a10 	vmov	r3, s10
 801a642:	07d9      	lsls	r1, r3, #31
 801a644:	d411      	bmi.n	801a66a <_dtoa_r+0x5d2>
 801a646:	4629      	mov	r1, r5
 801a648:	4630      	mov	r0, r6
 801a64a:	f000 fbd1 	bl	801adf0 <_Bfree>
 801a64e:	2300      	movs	r3, #0
 801a650:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a652:	f888 3000 	strb.w	r3, [r8]
 801a656:	f10b 0301 	add.w	r3, fp, #1
 801a65a:	6013      	str	r3, [r2, #0]
 801a65c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a65e:	2b00      	cmp	r3, #0
 801a660:	f43f ad69 	beq.w	801a136 <_dtoa_r+0x9e>
 801a664:	f8c3 8000 	str.w	r8, [r3]
 801a668:	e565      	b.n	801a136 <_dtoa_r+0x9e>
 801a66a:	465a      	mov	r2, fp
 801a66c:	4643      	mov	r3, r8
 801a66e:	4698      	mov	r8, r3
 801a670:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 801a674:	2939      	cmp	r1, #57	; 0x39
 801a676:	d106      	bne.n	801a686 <_dtoa_r+0x5ee>
 801a678:	9901      	ldr	r1, [sp, #4]
 801a67a:	4299      	cmp	r1, r3
 801a67c:	d1f7      	bne.n	801a66e <_dtoa_r+0x5d6>
 801a67e:	9801      	ldr	r0, [sp, #4]
 801a680:	2130      	movs	r1, #48	; 0x30
 801a682:	3201      	adds	r2, #1
 801a684:	7001      	strb	r1, [r0, #0]
 801a686:	7819      	ldrb	r1, [r3, #0]
 801a688:	3101      	adds	r1, #1
 801a68a:	7019      	strb	r1, [r3, #0]
 801a68c:	e7ae      	b.n	801a5ec <_dtoa_r+0x554>
 801a68e:	ee27 7b04 	vmul.f64	d7, d7, d4
 801a692:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801a696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a69a:	d1b2      	bne.n	801a602 <_dtoa_r+0x56a>
 801a69c:	e7d3      	b.n	801a646 <_dtoa_r+0x5ae>
 801a69e:	bf00      	nop
 801a6a0:	0801f268 	.word	0x0801f268
 801a6a4:	0801f240 	.word	0x0801f240
 801a6a8:	9907      	ldr	r1, [sp, #28]
 801a6aa:	2900      	cmp	r1, #0
 801a6ac:	f000 80d0 	beq.w	801a850 <_dtoa_r+0x7b8>
 801a6b0:	9906      	ldr	r1, [sp, #24]
 801a6b2:	2901      	cmp	r1, #1
 801a6b4:	f300 80b4 	bgt.w	801a820 <_dtoa_r+0x788>
 801a6b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a6ba:	2900      	cmp	r1, #0
 801a6bc:	f000 80ac 	beq.w	801a818 <_dtoa_r+0x780>
 801a6c0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801a6c4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801a6c8:	461c      	mov	r4, r3
 801a6ca:	9309      	str	r3, [sp, #36]	; 0x24
 801a6cc:	9b04      	ldr	r3, [sp, #16]
 801a6ce:	4413      	add	r3, r2
 801a6d0:	9304      	str	r3, [sp, #16]
 801a6d2:	9b05      	ldr	r3, [sp, #20]
 801a6d4:	2101      	movs	r1, #1
 801a6d6:	4413      	add	r3, r2
 801a6d8:	4630      	mov	r0, r6
 801a6da:	9305      	str	r3, [sp, #20]
 801a6dc:	f000 fc3e 	bl	801af5c <__i2b>
 801a6e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a6e2:	4607      	mov	r7, r0
 801a6e4:	f1b8 0f00 	cmp.w	r8, #0
 801a6e8:	d00d      	beq.n	801a706 <_dtoa_r+0x66e>
 801a6ea:	9a05      	ldr	r2, [sp, #20]
 801a6ec:	2a00      	cmp	r2, #0
 801a6ee:	dd0a      	ble.n	801a706 <_dtoa_r+0x66e>
 801a6f0:	4542      	cmp	r2, r8
 801a6f2:	9904      	ldr	r1, [sp, #16]
 801a6f4:	bfa8      	it	ge
 801a6f6:	4642      	movge	r2, r8
 801a6f8:	1a89      	subs	r1, r1, r2
 801a6fa:	9104      	str	r1, [sp, #16]
 801a6fc:	9905      	ldr	r1, [sp, #20]
 801a6fe:	eba8 0802 	sub.w	r8, r8, r2
 801a702:	1a8a      	subs	r2, r1, r2
 801a704:	9205      	str	r2, [sp, #20]
 801a706:	b303      	cbz	r3, 801a74a <_dtoa_r+0x6b2>
 801a708:	9a07      	ldr	r2, [sp, #28]
 801a70a:	2a00      	cmp	r2, #0
 801a70c:	f000 80a5 	beq.w	801a85a <_dtoa_r+0x7c2>
 801a710:	2c00      	cmp	r4, #0
 801a712:	dd13      	ble.n	801a73c <_dtoa_r+0x6a4>
 801a714:	4639      	mov	r1, r7
 801a716:	4622      	mov	r2, r4
 801a718:	4630      	mov	r0, r6
 801a71a:	930d      	str	r3, [sp, #52]	; 0x34
 801a71c:	f000 fcde 	bl	801b0dc <__pow5mult>
 801a720:	462a      	mov	r2, r5
 801a722:	4601      	mov	r1, r0
 801a724:	4607      	mov	r7, r0
 801a726:	4630      	mov	r0, r6
 801a728:	f000 fc2e 	bl	801af88 <__multiply>
 801a72c:	4629      	mov	r1, r5
 801a72e:	9009      	str	r0, [sp, #36]	; 0x24
 801a730:	4630      	mov	r0, r6
 801a732:	f000 fb5d 	bl	801adf0 <_Bfree>
 801a736:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a738:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a73a:	4615      	mov	r5, r2
 801a73c:	1b1a      	subs	r2, r3, r4
 801a73e:	d004      	beq.n	801a74a <_dtoa_r+0x6b2>
 801a740:	4629      	mov	r1, r5
 801a742:	4630      	mov	r0, r6
 801a744:	f000 fcca 	bl	801b0dc <__pow5mult>
 801a748:	4605      	mov	r5, r0
 801a74a:	2101      	movs	r1, #1
 801a74c:	4630      	mov	r0, r6
 801a74e:	f000 fc05 	bl	801af5c <__i2b>
 801a752:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a754:	2b00      	cmp	r3, #0
 801a756:	4604      	mov	r4, r0
 801a758:	f340 8081 	ble.w	801a85e <_dtoa_r+0x7c6>
 801a75c:	461a      	mov	r2, r3
 801a75e:	4601      	mov	r1, r0
 801a760:	4630      	mov	r0, r6
 801a762:	f000 fcbb 	bl	801b0dc <__pow5mult>
 801a766:	9b06      	ldr	r3, [sp, #24]
 801a768:	2b01      	cmp	r3, #1
 801a76a:	4604      	mov	r4, r0
 801a76c:	dd7a      	ble.n	801a864 <_dtoa_r+0x7cc>
 801a76e:	2300      	movs	r3, #0
 801a770:	9309      	str	r3, [sp, #36]	; 0x24
 801a772:	6922      	ldr	r2, [r4, #16]
 801a774:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801a778:	6910      	ldr	r0, [r2, #16]
 801a77a:	f000 fba1 	bl	801aec0 <__hi0bits>
 801a77e:	f1c0 0020 	rsb	r0, r0, #32
 801a782:	9b05      	ldr	r3, [sp, #20]
 801a784:	4418      	add	r0, r3
 801a786:	f010 001f 	ands.w	r0, r0, #31
 801a78a:	f000 8093 	beq.w	801a8b4 <_dtoa_r+0x81c>
 801a78e:	f1c0 0220 	rsb	r2, r0, #32
 801a792:	2a04      	cmp	r2, #4
 801a794:	f340 8085 	ble.w	801a8a2 <_dtoa_r+0x80a>
 801a798:	9b04      	ldr	r3, [sp, #16]
 801a79a:	f1c0 001c 	rsb	r0, r0, #28
 801a79e:	4403      	add	r3, r0
 801a7a0:	9304      	str	r3, [sp, #16]
 801a7a2:	9b05      	ldr	r3, [sp, #20]
 801a7a4:	4480      	add	r8, r0
 801a7a6:	4403      	add	r3, r0
 801a7a8:	9305      	str	r3, [sp, #20]
 801a7aa:	9b04      	ldr	r3, [sp, #16]
 801a7ac:	2b00      	cmp	r3, #0
 801a7ae:	dd05      	ble.n	801a7bc <_dtoa_r+0x724>
 801a7b0:	4629      	mov	r1, r5
 801a7b2:	461a      	mov	r2, r3
 801a7b4:	4630      	mov	r0, r6
 801a7b6:	f000 fceb 	bl	801b190 <__lshift>
 801a7ba:	4605      	mov	r5, r0
 801a7bc:	9b05      	ldr	r3, [sp, #20]
 801a7be:	2b00      	cmp	r3, #0
 801a7c0:	dd05      	ble.n	801a7ce <_dtoa_r+0x736>
 801a7c2:	4621      	mov	r1, r4
 801a7c4:	461a      	mov	r2, r3
 801a7c6:	4630      	mov	r0, r6
 801a7c8:	f000 fce2 	bl	801b190 <__lshift>
 801a7cc:	4604      	mov	r4, r0
 801a7ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a7d0:	2b00      	cmp	r3, #0
 801a7d2:	d071      	beq.n	801a8b8 <_dtoa_r+0x820>
 801a7d4:	4621      	mov	r1, r4
 801a7d6:	4628      	mov	r0, r5
 801a7d8:	f000 fd46 	bl	801b268 <__mcmp>
 801a7dc:	2800      	cmp	r0, #0
 801a7de:	da6b      	bge.n	801a8b8 <_dtoa_r+0x820>
 801a7e0:	2300      	movs	r3, #0
 801a7e2:	4629      	mov	r1, r5
 801a7e4:	220a      	movs	r2, #10
 801a7e6:	4630      	mov	r0, r6
 801a7e8:	f000 fb24 	bl	801ae34 <__multadd>
 801a7ec:	9b07      	ldr	r3, [sp, #28]
 801a7ee:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a7f2:	4605      	mov	r5, r0
 801a7f4:	2b00      	cmp	r3, #0
 801a7f6:	f000 8197 	beq.w	801ab28 <_dtoa_r+0xa90>
 801a7fa:	4639      	mov	r1, r7
 801a7fc:	2300      	movs	r3, #0
 801a7fe:	220a      	movs	r2, #10
 801a800:	4630      	mov	r0, r6
 801a802:	f000 fb17 	bl	801ae34 <__multadd>
 801a806:	f1ba 0f00 	cmp.w	sl, #0
 801a80a:	4607      	mov	r7, r0
 801a80c:	f300 8093 	bgt.w	801a936 <_dtoa_r+0x89e>
 801a810:	9b06      	ldr	r3, [sp, #24]
 801a812:	2b02      	cmp	r3, #2
 801a814:	dc57      	bgt.n	801a8c6 <_dtoa_r+0x82e>
 801a816:	e08e      	b.n	801a936 <_dtoa_r+0x89e>
 801a818:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a81a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801a81e:	e751      	b.n	801a6c4 <_dtoa_r+0x62c>
 801a820:	f109 34ff 	add.w	r4, r9, #4294967295
 801a824:	42a3      	cmp	r3, r4
 801a826:	bfbf      	itttt	lt
 801a828:	1ae2      	sublt	r2, r4, r3
 801a82a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801a82c:	189b      	addlt	r3, r3, r2
 801a82e:	930a      	strlt	r3, [sp, #40]	; 0x28
 801a830:	bfae      	itee	ge
 801a832:	1b1c      	subge	r4, r3, r4
 801a834:	4623      	movlt	r3, r4
 801a836:	2400      	movlt	r4, #0
 801a838:	f1b9 0f00 	cmp.w	r9, #0
 801a83c:	bfb5      	itete	lt
 801a83e:	9a04      	ldrlt	r2, [sp, #16]
 801a840:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 801a844:	eba2 0809 	sublt.w	r8, r2, r9
 801a848:	464a      	movge	r2, r9
 801a84a:	bfb8      	it	lt
 801a84c:	2200      	movlt	r2, #0
 801a84e:	e73c      	b.n	801a6ca <_dtoa_r+0x632>
 801a850:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801a854:	9f07      	ldr	r7, [sp, #28]
 801a856:	461c      	mov	r4, r3
 801a858:	e744      	b.n	801a6e4 <_dtoa_r+0x64c>
 801a85a:	461a      	mov	r2, r3
 801a85c:	e770      	b.n	801a740 <_dtoa_r+0x6a8>
 801a85e:	9b06      	ldr	r3, [sp, #24]
 801a860:	2b01      	cmp	r3, #1
 801a862:	dc18      	bgt.n	801a896 <_dtoa_r+0x7fe>
 801a864:	9b02      	ldr	r3, [sp, #8]
 801a866:	b9b3      	cbnz	r3, 801a896 <_dtoa_r+0x7fe>
 801a868:	9b03      	ldr	r3, [sp, #12]
 801a86a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801a86e:	b9a2      	cbnz	r2, 801a89a <_dtoa_r+0x802>
 801a870:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801a874:	0d12      	lsrs	r2, r2, #20
 801a876:	0512      	lsls	r2, r2, #20
 801a878:	b18a      	cbz	r2, 801a89e <_dtoa_r+0x806>
 801a87a:	9b04      	ldr	r3, [sp, #16]
 801a87c:	3301      	adds	r3, #1
 801a87e:	9304      	str	r3, [sp, #16]
 801a880:	9b05      	ldr	r3, [sp, #20]
 801a882:	3301      	adds	r3, #1
 801a884:	9305      	str	r3, [sp, #20]
 801a886:	2301      	movs	r3, #1
 801a888:	9309      	str	r3, [sp, #36]	; 0x24
 801a88a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a88c:	2b00      	cmp	r3, #0
 801a88e:	f47f af70 	bne.w	801a772 <_dtoa_r+0x6da>
 801a892:	2001      	movs	r0, #1
 801a894:	e775      	b.n	801a782 <_dtoa_r+0x6ea>
 801a896:	2300      	movs	r3, #0
 801a898:	e7f6      	b.n	801a888 <_dtoa_r+0x7f0>
 801a89a:	9b02      	ldr	r3, [sp, #8]
 801a89c:	e7f4      	b.n	801a888 <_dtoa_r+0x7f0>
 801a89e:	9209      	str	r2, [sp, #36]	; 0x24
 801a8a0:	e7f3      	b.n	801a88a <_dtoa_r+0x7f2>
 801a8a2:	d082      	beq.n	801a7aa <_dtoa_r+0x712>
 801a8a4:	9b04      	ldr	r3, [sp, #16]
 801a8a6:	321c      	adds	r2, #28
 801a8a8:	4413      	add	r3, r2
 801a8aa:	9304      	str	r3, [sp, #16]
 801a8ac:	9b05      	ldr	r3, [sp, #20]
 801a8ae:	4490      	add	r8, r2
 801a8b0:	4413      	add	r3, r2
 801a8b2:	e779      	b.n	801a7a8 <_dtoa_r+0x710>
 801a8b4:	4602      	mov	r2, r0
 801a8b6:	e7f5      	b.n	801a8a4 <_dtoa_r+0x80c>
 801a8b8:	f1b9 0f00 	cmp.w	r9, #0
 801a8bc:	dc36      	bgt.n	801a92c <_dtoa_r+0x894>
 801a8be:	9b06      	ldr	r3, [sp, #24]
 801a8c0:	2b02      	cmp	r3, #2
 801a8c2:	dd33      	ble.n	801a92c <_dtoa_r+0x894>
 801a8c4:	46ca      	mov	sl, r9
 801a8c6:	f1ba 0f00 	cmp.w	sl, #0
 801a8ca:	d10d      	bne.n	801a8e8 <_dtoa_r+0x850>
 801a8cc:	4621      	mov	r1, r4
 801a8ce:	4653      	mov	r3, sl
 801a8d0:	2205      	movs	r2, #5
 801a8d2:	4630      	mov	r0, r6
 801a8d4:	f000 faae 	bl	801ae34 <__multadd>
 801a8d8:	4601      	mov	r1, r0
 801a8da:	4604      	mov	r4, r0
 801a8dc:	4628      	mov	r0, r5
 801a8de:	f000 fcc3 	bl	801b268 <__mcmp>
 801a8e2:	2800      	cmp	r0, #0
 801a8e4:	f73f ade4 	bgt.w	801a4b0 <_dtoa_r+0x418>
 801a8e8:	9b08      	ldr	r3, [sp, #32]
 801a8ea:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a8ee:	ea6f 0b03 	mvn.w	fp, r3
 801a8f2:	f04f 0900 	mov.w	r9, #0
 801a8f6:	4621      	mov	r1, r4
 801a8f8:	4630      	mov	r0, r6
 801a8fa:	f000 fa79 	bl	801adf0 <_Bfree>
 801a8fe:	2f00      	cmp	r7, #0
 801a900:	f43f aea1 	beq.w	801a646 <_dtoa_r+0x5ae>
 801a904:	f1b9 0f00 	cmp.w	r9, #0
 801a908:	d005      	beq.n	801a916 <_dtoa_r+0x87e>
 801a90a:	45b9      	cmp	r9, r7
 801a90c:	d003      	beq.n	801a916 <_dtoa_r+0x87e>
 801a90e:	4649      	mov	r1, r9
 801a910:	4630      	mov	r0, r6
 801a912:	f000 fa6d 	bl	801adf0 <_Bfree>
 801a916:	4639      	mov	r1, r7
 801a918:	4630      	mov	r0, r6
 801a91a:	f000 fa69 	bl	801adf0 <_Bfree>
 801a91e:	e692      	b.n	801a646 <_dtoa_r+0x5ae>
 801a920:	2400      	movs	r4, #0
 801a922:	4627      	mov	r7, r4
 801a924:	e7e0      	b.n	801a8e8 <_dtoa_r+0x850>
 801a926:	4693      	mov	fp, r2
 801a928:	4627      	mov	r7, r4
 801a92a:	e5c1      	b.n	801a4b0 <_dtoa_r+0x418>
 801a92c:	9b07      	ldr	r3, [sp, #28]
 801a92e:	46ca      	mov	sl, r9
 801a930:	2b00      	cmp	r3, #0
 801a932:	f000 8100 	beq.w	801ab36 <_dtoa_r+0xa9e>
 801a936:	f1b8 0f00 	cmp.w	r8, #0
 801a93a:	dd05      	ble.n	801a948 <_dtoa_r+0x8b0>
 801a93c:	4639      	mov	r1, r7
 801a93e:	4642      	mov	r2, r8
 801a940:	4630      	mov	r0, r6
 801a942:	f000 fc25 	bl	801b190 <__lshift>
 801a946:	4607      	mov	r7, r0
 801a948:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a94a:	2b00      	cmp	r3, #0
 801a94c:	d05d      	beq.n	801aa0a <_dtoa_r+0x972>
 801a94e:	6879      	ldr	r1, [r7, #4]
 801a950:	4630      	mov	r0, r6
 801a952:	f000 fa0d 	bl	801ad70 <_Balloc>
 801a956:	4680      	mov	r8, r0
 801a958:	b928      	cbnz	r0, 801a966 <_dtoa_r+0x8ce>
 801a95a:	4b82      	ldr	r3, [pc, #520]	; (801ab64 <_dtoa_r+0xacc>)
 801a95c:	4602      	mov	r2, r0
 801a95e:	f240 21ef 	movw	r1, #751	; 0x2ef
 801a962:	f7ff bbb1 	b.w	801a0c8 <_dtoa_r+0x30>
 801a966:	693a      	ldr	r2, [r7, #16]
 801a968:	3202      	adds	r2, #2
 801a96a:	0092      	lsls	r2, r2, #2
 801a96c:	f107 010c 	add.w	r1, r7, #12
 801a970:	300c      	adds	r0, #12
 801a972:	f7ff fadc 	bl	8019f2e <memcpy>
 801a976:	2201      	movs	r2, #1
 801a978:	4641      	mov	r1, r8
 801a97a:	4630      	mov	r0, r6
 801a97c:	f000 fc08 	bl	801b190 <__lshift>
 801a980:	9b01      	ldr	r3, [sp, #4]
 801a982:	3301      	adds	r3, #1
 801a984:	9304      	str	r3, [sp, #16]
 801a986:	9b01      	ldr	r3, [sp, #4]
 801a988:	4453      	add	r3, sl
 801a98a:	9308      	str	r3, [sp, #32]
 801a98c:	9b02      	ldr	r3, [sp, #8]
 801a98e:	f003 0301 	and.w	r3, r3, #1
 801a992:	46b9      	mov	r9, r7
 801a994:	9307      	str	r3, [sp, #28]
 801a996:	4607      	mov	r7, r0
 801a998:	9b04      	ldr	r3, [sp, #16]
 801a99a:	4621      	mov	r1, r4
 801a99c:	3b01      	subs	r3, #1
 801a99e:	4628      	mov	r0, r5
 801a9a0:	9302      	str	r3, [sp, #8]
 801a9a2:	f7ff faf1 	bl	8019f88 <quorem>
 801a9a6:	4603      	mov	r3, r0
 801a9a8:	3330      	adds	r3, #48	; 0x30
 801a9aa:	9005      	str	r0, [sp, #20]
 801a9ac:	4649      	mov	r1, r9
 801a9ae:	4628      	mov	r0, r5
 801a9b0:	9309      	str	r3, [sp, #36]	; 0x24
 801a9b2:	f000 fc59 	bl	801b268 <__mcmp>
 801a9b6:	463a      	mov	r2, r7
 801a9b8:	4682      	mov	sl, r0
 801a9ba:	4621      	mov	r1, r4
 801a9bc:	4630      	mov	r0, r6
 801a9be:	f000 fc6f 	bl	801b2a0 <__mdiff>
 801a9c2:	68c2      	ldr	r2, [r0, #12]
 801a9c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a9c6:	4680      	mov	r8, r0
 801a9c8:	bb0a      	cbnz	r2, 801aa0e <_dtoa_r+0x976>
 801a9ca:	4601      	mov	r1, r0
 801a9cc:	4628      	mov	r0, r5
 801a9ce:	f000 fc4b 	bl	801b268 <__mcmp>
 801a9d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a9d4:	4602      	mov	r2, r0
 801a9d6:	4641      	mov	r1, r8
 801a9d8:	4630      	mov	r0, r6
 801a9da:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801a9de:	f000 fa07 	bl	801adf0 <_Bfree>
 801a9e2:	9b06      	ldr	r3, [sp, #24]
 801a9e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a9e6:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801a9ea:	ea43 0102 	orr.w	r1, r3, r2
 801a9ee:	9b07      	ldr	r3, [sp, #28]
 801a9f0:	4319      	orrs	r1, r3
 801a9f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a9f4:	d10d      	bne.n	801aa12 <_dtoa_r+0x97a>
 801a9f6:	2b39      	cmp	r3, #57	; 0x39
 801a9f8:	d029      	beq.n	801aa4e <_dtoa_r+0x9b6>
 801a9fa:	f1ba 0f00 	cmp.w	sl, #0
 801a9fe:	dd01      	ble.n	801aa04 <_dtoa_r+0x96c>
 801aa00:	9b05      	ldr	r3, [sp, #20]
 801aa02:	3331      	adds	r3, #49	; 0x31
 801aa04:	9a02      	ldr	r2, [sp, #8]
 801aa06:	7013      	strb	r3, [r2, #0]
 801aa08:	e775      	b.n	801a8f6 <_dtoa_r+0x85e>
 801aa0a:	4638      	mov	r0, r7
 801aa0c:	e7b8      	b.n	801a980 <_dtoa_r+0x8e8>
 801aa0e:	2201      	movs	r2, #1
 801aa10:	e7e1      	b.n	801a9d6 <_dtoa_r+0x93e>
 801aa12:	f1ba 0f00 	cmp.w	sl, #0
 801aa16:	db06      	blt.n	801aa26 <_dtoa_r+0x98e>
 801aa18:	9906      	ldr	r1, [sp, #24]
 801aa1a:	ea41 0a0a 	orr.w	sl, r1, sl
 801aa1e:	9907      	ldr	r1, [sp, #28]
 801aa20:	ea5a 0a01 	orrs.w	sl, sl, r1
 801aa24:	d120      	bne.n	801aa68 <_dtoa_r+0x9d0>
 801aa26:	2a00      	cmp	r2, #0
 801aa28:	ddec      	ble.n	801aa04 <_dtoa_r+0x96c>
 801aa2a:	4629      	mov	r1, r5
 801aa2c:	2201      	movs	r2, #1
 801aa2e:	4630      	mov	r0, r6
 801aa30:	9304      	str	r3, [sp, #16]
 801aa32:	f000 fbad 	bl	801b190 <__lshift>
 801aa36:	4621      	mov	r1, r4
 801aa38:	4605      	mov	r5, r0
 801aa3a:	f000 fc15 	bl	801b268 <__mcmp>
 801aa3e:	2800      	cmp	r0, #0
 801aa40:	9b04      	ldr	r3, [sp, #16]
 801aa42:	dc02      	bgt.n	801aa4a <_dtoa_r+0x9b2>
 801aa44:	d1de      	bne.n	801aa04 <_dtoa_r+0x96c>
 801aa46:	07da      	lsls	r2, r3, #31
 801aa48:	d5dc      	bpl.n	801aa04 <_dtoa_r+0x96c>
 801aa4a:	2b39      	cmp	r3, #57	; 0x39
 801aa4c:	d1d8      	bne.n	801aa00 <_dtoa_r+0x968>
 801aa4e:	9a02      	ldr	r2, [sp, #8]
 801aa50:	2339      	movs	r3, #57	; 0x39
 801aa52:	7013      	strb	r3, [r2, #0]
 801aa54:	4643      	mov	r3, r8
 801aa56:	4698      	mov	r8, r3
 801aa58:	3b01      	subs	r3, #1
 801aa5a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801aa5e:	2a39      	cmp	r2, #57	; 0x39
 801aa60:	d051      	beq.n	801ab06 <_dtoa_r+0xa6e>
 801aa62:	3201      	adds	r2, #1
 801aa64:	701a      	strb	r2, [r3, #0]
 801aa66:	e746      	b.n	801a8f6 <_dtoa_r+0x85e>
 801aa68:	2a00      	cmp	r2, #0
 801aa6a:	dd03      	ble.n	801aa74 <_dtoa_r+0x9dc>
 801aa6c:	2b39      	cmp	r3, #57	; 0x39
 801aa6e:	d0ee      	beq.n	801aa4e <_dtoa_r+0x9b6>
 801aa70:	3301      	adds	r3, #1
 801aa72:	e7c7      	b.n	801aa04 <_dtoa_r+0x96c>
 801aa74:	9a04      	ldr	r2, [sp, #16]
 801aa76:	9908      	ldr	r1, [sp, #32]
 801aa78:	f802 3c01 	strb.w	r3, [r2, #-1]
 801aa7c:	428a      	cmp	r2, r1
 801aa7e:	d02b      	beq.n	801aad8 <_dtoa_r+0xa40>
 801aa80:	4629      	mov	r1, r5
 801aa82:	2300      	movs	r3, #0
 801aa84:	220a      	movs	r2, #10
 801aa86:	4630      	mov	r0, r6
 801aa88:	f000 f9d4 	bl	801ae34 <__multadd>
 801aa8c:	45b9      	cmp	r9, r7
 801aa8e:	4605      	mov	r5, r0
 801aa90:	f04f 0300 	mov.w	r3, #0
 801aa94:	f04f 020a 	mov.w	r2, #10
 801aa98:	4649      	mov	r1, r9
 801aa9a:	4630      	mov	r0, r6
 801aa9c:	d107      	bne.n	801aaae <_dtoa_r+0xa16>
 801aa9e:	f000 f9c9 	bl	801ae34 <__multadd>
 801aaa2:	4681      	mov	r9, r0
 801aaa4:	4607      	mov	r7, r0
 801aaa6:	9b04      	ldr	r3, [sp, #16]
 801aaa8:	3301      	adds	r3, #1
 801aaaa:	9304      	str	r3, [sp, #16]
 801aaac:	e774      	b.n	801a998 <_dtoa_r+0x900>
 801aaae:	f000 f9c1 	bl	801ae34 <__multadd>
 801aab2:	4639      	mov	r1, r7
 801aab4:	4681      	mov	r9, r0
 801aab6:	2300      	movs	r3, #0
 801aab8:	220a      	movs	r2, #10
 801aaba:	4630      	mov	r0, r6
 801aabc:	f000 f9ba 	bl	801ae34 <__multadd>
 801aac0:	4607      	mov	r7, r0
 801aac2:	e7f0      	b.n	801aaa6 <_dtoa_r+0xa0e>
 801aac4:	f1ba 0f00 	cmp.w	sl, #0
 801aac8:	9a01      	ldr	r2, [sp, #4]
 801aaca:	bfcc      	ite	gt
 801aacc:	46d0      	movgt	r8, sl
 801aace:	f04f 0801 	movle.w	r8, #1
 801aad2:	4490      	add	r8, r2
 801aad4:	f04f 0900 	mov.w	r9, #0
 801aad8:	4629      	mov	r1, r5
 801aada:	2201      	movs	r2, #1
 801aadc:	4630      	mov	r0, r6
 801aade:	9302      	str	r3, [sp, #8]
 801aae0:	f000 fb56 	bl	801b190 <__lshift>
 801aae4:	4621      	mov	r1, r4
 801aae6:	4605      	mov	r5, r0
 801aae8:	f000 fbbe 	bl	801b268 <__mcmp>
 801aaec:	2800      	cmp	r0, #0
 801aaee:	dcb1      	bgt.n	801aa54 <_dtoa_r+0x9bc>
 801aaf0:	d102      	bne.n	801aaf8 <_dtoa_r+0xa60>
 801aaf2:	9b02      	ldr	r3, [sp, #8]
 801aaf4:	07db      	lsls	r3, r3, #31
 801aaf6:	d4ad      	bmi.n	801aa54 <_dtoa_r+0x9bc>
 801aaf8:	4643      	mov	r3, r8
 801aafa:	4698      	mov	r8, r3
 801aafc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801ab00:	2a30      	cmp	r2, #48	; 0x30
 801ab02:	d0fa      	beq.n	801aafa <_dtoa_r+0xa62>
 801ab04:	e6f7      	b.n	801a8f6 <_dtoa_r+0x85e>
 801ab06:	9a01      	ldr	r2, [sp, #4]
 801ab08:	429a      	cmp	r2, r3
 801ab0a:	d1a4      	bne.n	801aa56 <_dtoa_r+0x9be>
 801ab0c:	f10b 0b01 	add.w	fp, fp, #1
 801ab10:	2331      	movs	r3, #49	; 0x31
 801ab12:	e778      	b.n	801aa06 <_dtoa_r+0x96e>
 801ab14:	4b14      	ldr	r3, [pc, #80]	; (801ab68 <_dtoa_r+0xad0>)
 801ab16:	f7ff bb2a 	b.w	801a16e <_dtoa_r+0xd6>
 801ab1a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ab1c:	2b00      	cmp	r3, #0
 801ab1e:	f47f ab05 	bne.w	801a12c <_dtoa_r+0x94>
 801ab22:	4b12      	ldr	r3, [pc, #72]	; (801ab6c <_dtoa_r+0xad4>)
 801ab24:	f7ff bb23 	b.w	801a16e <_dtoa_r+0xd6>
 801ab28:	f1ba 0f00 	cmp.w	sl, #0
 801ab2c:	dc03      	bgt.n	801ab36 <_dtoa_r+0xa9e>
 801ab2e:	9b06      	ldr	r3, [sp, #24]
 801ab30:	2b02      	cmp	r3, #2
 801ab32:	f73f aec8 	bgt.w	801a8c6 <_dtoa_r+0x82e>
 801ab36:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801ab3a:	4621      	mov	r1, r4
 801ab3c:	4628      	mov	r0, r5
 801ab3e:	f7ff fa23 	bl	8019f88 <quorem>
 801ab42:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801ab46:	f808 3b01 	strb.w	r3, [r8], #1
 801ab4a:	9a01      	ldr	r2, [sp, #4]
 801ab4c:	eba8 0202 	sub.w	r2, r8, r2
 801ab50:	4592      	cmp	sl, r2
 801ab52:	ddb7      	ble.n	801aac4 <_dtoa_r+0xa2c>
 801ab54:	4629      	mov	r1, r5
 801ab56:	2300      	movs	r3, #0
 801ab58:	220a      	movs	r2, #10
 801ab5a:	4630      	mov	r0, r6
 801ab5c:	f000 f96a 	bl	801ae34 <__multadd>
 801ab60:	4605      	mov	r5, r0
 801ab62:	e7ea      	b.n	801ab3a <_dtoa_r+0xaa2>
 801ab64:	0801f1d3 	.word	0x0801f1d3
 801ab68:	0801f10e 	.word	0x0801f10e
 801ab6c:	0801f16e 	.word	0x0801f16e

0801ab70 <_free_r>:
 801ab70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ab72:	2900      	cmp	r1, #0
 801ab74:	d044      	beq.n	801ac00 <_free_r+0x90>
 801ab76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ab7a:	9001      	str	r0, [sp, #4]
 801ab7c:	2b00      	cmp	r3, #0
 801ab7e:	f1a1 0404 	sub.w	r4, r1, #4
 801ab82:	bfb8      	it	lt
 801ab84:	18e4      	addlt	r4, r4, r3
 801ab86:	f000 f8e7 	bl	801ad58 <__malloc_lock>
 801ab8a:	4a1e      	ldr	r2, [pc, #120]	; (801ac04 <_free_r+0x94>)
 801ab8c:	9801      	ldr	r0, [sp, #4]
 801ab8e:	6813      	ldr	r3, [r2, #0]
 801ab90:	b933      	cbnz	r3, 801aba0 <_free_r+0x30>
 801ab92:	6063      	str	r3, [r4, #4]
 801ab94:	6014      	str	r4, [r2, #0]
 801ab96:	b003      	add	sp, #12
 801ab98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ab9c:	f000 b8e2 	b.w	801ad64 <__malloc_unlock>
 801aba0:	42a3      	cmp	r3, r4
 801aba2:	d908      	bls.n	801abb6 <_free_r+0x46>
 801aba4:	6825      	ldr	r5, [r4, #0]
 801aba6:	1961      	adds	r1, r4, r5
 801aba8:	428b      	cmp	r3, r1
 801abaa:	bf01      	itttt	eq
 801abac:	6819      	ldreq	r1, [r3, #0]
 801abae:	685b      	ldreq	r3, [r3, #4]
 801abb0:	1949      	addeq	r1, r1, r5
 801abb2:	6021      	streq	r1, [r4, #0]
 801abb4:	e7ed      	b.n	801ab92 <_free_r+0x22>
 801abb6:	461a      	mov	r2, r3
 801abb8:	685b      	ldr	r3, [r3, #4]
 801abba:	b10b      	cbz	r3, 801abc0 <_free_r+0x50>
 801abbc:	42a3      	cmp	r3, r4
 801abbe:	d9fa      	bls.n	801abb6 <_free_r+0x46>
 801abc0:	6811      	ldr	r1, [r2, #0]
 801abc2:	1855      	adds	r5, r2, r1
 801abc4:	42a5      	cmp	r5, r4
 801abc6:	d10b      	bne.n	801abe0 <_free_r+0x70>
 801abc8:	6824      	ldr	r4, [r4, #0]
 801abca:	4421      	add	r1, r4
 801abcc:	1854      	adds	r4, r2, r1
 801abce:	42a3      	cmp	r3, r4
 801abd0:	6011      	str	r1, [r2, #0]
 801abd2:	d1e0      	bne.n	801ab96 <_free_r+0x26>
 801abd4:	681c      	ldr	r4, [r3, #0]
 801abd6:	685b      	ldr	r3, [r3, #4]
 801abd8:	6053      	str	r3, [r2, #4]
 801abda:	440c      	add	r4, r1
 801abdc:	6014      	str	r4, [r2, #0]
 801abde:	e7da      	b.n	801ab96 <_free_r+0x26>
 801abe0:	d902      	bls.n	801abe8 <_free_r+0x78>
 801abe2:	230c      	movs	r3, #12
 801abe4:	6003      	str	r3, [r0, #0]
 801abe6:	e7d6      	b.n	801ab96 <_free_r+0x26>
 801abe8:	6825      	ldr	r5, [r4, #0]
 801abea:	1961      	adds	r1, r4, r5
 801abec:	428b      	cmp	r3, r1
 801abee:	bf04      	itt	eq
 801abf0:	6819      	ldreq	r1, [r3, #0]
 801abf2:	685b      	ldreq	r3, [r3, #4]
 801abf4:	6063      	str	r3, [r4, #4]
 801abf6:	bf04      	itt	eq
 801abf8:	1949      	addeq	r1, r1, r5
 801abfa:	6021      	streq	r1, [r4, #0]
 801abfc:	6054      	str	r4, [r2, #4]
 801abfe:	e7ca      	b.n	801ab96 <_free_r+0x26>
 801ac00:	b003      	add	sp, #12
 801ac02:	bd30      	pop	{r4, r5, pc}
 801ac04:	200072e4 	.word	0x200072e4

0801ac08 <malloc>:
 801ac08:	4b02      	ldr	r3, [pc, #8]	; (801ac14 <malloc+0xc>)
 801ac0a:	4601      	mov	r1, r0
 801ac0c:	6818      	ldr	r0, [r3, #0]
 801ac0e:	f000 b823 	b.w	801ac58 <_malloc_r>
 801ac12:	bf00      	nop
 801ac14:	200000bc 	.word	0x200000bc

0801ac18 <sbrk_aligned>:
 801ac18:	b570      	push	{r4, r5, r6, lr}
 801ac1a:	4e0e      	ldr	r6, [pc, #56]	; (801ac54 <sbrk_aligned+0x3c>)
 801ac1c:	460c      	mov	r4, r1
 801ac1e:	6831      	ldr	r1, [r6, #0]
 801ac20:	4605      	mov	r5, r0
 801ac22:	b911      	cbnz	r1, 801ac2a <sbrk_aligned+0x12>
 801ac24:	f000 fea8 	bl	801b978 <_sbrk_r>
 801ac28:	6030      	str	r0, [r6, #0]
 801ac2a:	4621      	mov	r1, r4
 801ac2c:	4628      	mov	r0, r5
 801ac2e:	f000 fea3 	bl	801b978 <_sbrk_r>
 801ac32:	1c43      	adds	r3, r0, #1
 801ac34:	d00a      	beq.n	801ac4c <sbrk_aligned+0x34>
 801ac36:	1cc4      	adds	r4, r0, #3
 801ac38:	f024 0403 	bic.w	r4, r4, #3
 801ac3c:	42a0      	cmp	r0, r4
 801ac3e:	d007      	beq.n	801ac50 <sbrk_aligned+0x38>
 801ac40:	1a21      	subs	r1, r4, r0
 801ac42:	4628      	mov	r0, r5
 801ac44:	f000 fe98 	bl	801b978 <_sbrk_r>
 801ac48:	3001      	adds	r0, #1
 801ac4a:	d101      	bne.n	801ac50 <sbrk_aligned+0x38>
 801ac4c:	f04f 34ff 	mov.w	r4, #4294967295
 801ac50:	4620      	mov	r0, r4
 801ac52:	bd70      	pop	{r4, r5, r6, pc}
 801ac54:	200072e8 	.word	0x200072e8

0801ac58 <_malloc_r>:
 801ac58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ac5c:	1ccd      	adds	r5, r1, #3
 801ac5e:	f025 0503 	bic.w	r5, r5, #3
 801ac62:	3508      	adds	r5, #8
 801ac64:	2d0c      	cmp	r5, #12
 801ac66:	bf38      	it	cc
 801ac68:	250c      	movcc	r5, #12
 801ac6a:	2d00      	cmp	r5, #0
 801ac6c:	4607      	mov	r7, r0
 801ac6e:	db01      	blt.n	801ac74 <_malloc_r+0x1c>
 801ac70:	42a9      	cmp	r1, r5
 801ac72:	d905      	bls.n	801ac80 <_malloc_r+0x28>
 801ac74:	230c      	movs	r3, #12
 801ac76:	603b      	str	r3, [r7, #0]
 801ac78:	2600      	movs	r6, #0
 801ac7a:	4630      	mov	r0, r6
 801ac7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ac80:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801ad54 <_malloc_r+0xfc>
 801ac84:	f000 f868 	bl	801ad58 <__malloc_lock>
 801ac88:	f8d8 3000 	ldr.w	r3, [r8]
 801ac8c:	461c      	mov	r4, r3
 801ac8e:	bb5c      	cbnz	r4, 801ace8 <_malloc_r+0x90>
 801ac90:	4629      	mov	r1, r5
 801ac92:	4638      	mov	r0, r7
 801ac94:	f7ff ffc0 	bl	801ac18 <sbrk_aligned>
 801ac98:	1c43      	adds	r3, r0, #1
 801ac9a:	4604      	mov	r4, r0
 801ac9c:	d155      	bne.n	801ad4a <_malloc_r+0xf2>
 801ac9e:	f8d8 4000 	ldr.w	r4, [r8]
 801aca2:	4626      	mov	r6, r4
 801aca4:	2e00      	cmp	r6, #0
 801aca6:	d145      	bne.n	801ad34 <_malloc_r+0xdc>
 801aca8:	2c00      	cmp	r4, #0
 801acaa:	d048      	beq.n	801ad3e <_malloc_r+0xe6>
 801acac:	6823      	ldr	r3, [r4, #0]
 801acae:	4631      	mov	r1, r6
 801acb0:	4638      	mov	r0, r7
 801acb2:	eb04 0903 	add.w	r9, r4, r3
 801acb6:	f000 fe5f 	bl	801b978 <_sbrk_r>
 801acba:	4581      	cmp	r9, r0
 801acbc:	d13f      	bne.n	801ad3e <_malloc_r+0xe6>
 801acbe:	6821      	ldr	r1, [r4, #0]
 801acc0:	1a6d      	subs	r5, r5, r1
 801acc2:	4629      	mov	r1, r5
 801acc4:	4638      	mov	r0, r7
 801acc6:	f7ff ffa7 	bl	801ac18 <sbrk_aligned>
 801acca:	3001      	adds	r0, #1
 801accc:	d037      	beq.n	801ad3e <_malloc_r+0xe6>
 801acce:	6823      	ldr	r3, [r4, #0]
 801acd0:	442b      	add	r3, r5
 801acd2:	6023      	str	r3, [r4, #0]
 801acd4:	f8d8 3000 	ldr.w	r3, [r8]
 801acd8:	2b00      	cmp	r3, #0
 801acda:	d038      	beq.n	801ad4e <_malloc_r+0xf6>
 801acdc:	685a      	ldr	r2, [r3, #4]
 801acde:	42a2      	cmp	r2, r4
 801ace0:	d12b      	bne.n	801ad3a <_malloc_r+0xe2>
 801ace2:	2200      	movs	r2, #0
 801ace4:	605a      	str	r2, [r3, #4]
 801ace6:	e00f      	b.n	801ad08 <_malloc_r+0xb0>
 801ace8:	6822      	ldr	r2, [r4, #0]
 801acea:	1b52      	subs	r2, r2, r5
 801acec:	d41f      	bmi.n	801ad2e <_malloc_r+0xd6>
 801acee:	2a0b      	cmp	r2, #11
 801acf0:	d917      	bls.n	801ad22 <_malloc_r+0xca>
 801acf2:	1961      	adds	r1, r4, r5
 801acf4:	42a3      	cmp	r3, r4
 801acf6:	6025      	str	r5, [r4, #0]
 801acf8:	bf18      	it	ne
 801acfa:	6059      	strne	r1, [r3, #4]
 801acfc:	6863      	ldr	r3, [r4, #4]
 801acfe:	bf08      	it	eq
 801ad00:	f8c8 1000 	streq.w	r1, [r8]
 801ad04:	5162      	str	r2, [r4, r5]
 801ad06:	604b      	str	r3, [r1, #4]
 801ad08:	4638      	mov	r0, r7
 801ad0a:	f104 060b 	add.w	r6, r4, #11
 801ad0e:	f000 f829 	bl	801ad64 <__malloc_unlock>
 801ad12:	f026 0607 	bic.w	r6, r6, #7
 801ad16:	1d23      	adds	r3, r4, #4
 801ad18:	1af2      	subs	r2, r6, r3
 801ad1a:	d0ae      	beq.n	801ac7a <_malloc_r+0x22>
 801ad1c:	1b9b      	subs	r3, r3, r6
 801ad1e:	50a3      	str	r3, [r4, r2]
 801ad20:	e7ab      	b.n	801ac7a <_malloc_r+0x22>
 801ad22:	42a3      	cmp	r3, r4
 801ad24:	6862      	ldr	r2, [r4, #4]
 801ad26:	d1dd      	bne.n	801ace4 <_malloc_r+0x8c>
 801ad28:	f8c8 2000 	str.w	r2, [r8]
 801ad2c:	e7ec      	b.n	801ad08 <_malloc_r+0xb0>
 801ad2e:	4623      	mov	r3, r4
 801ad30:	6864      	ldr	r4, [r4, #4]
 801ad32:	e7ac      	b.n	801ac8e <_malloc_r+0x36>
 801ad34:	4634      	mov	r4, r6
 801ad36:	6876      	ldr	r6, [r6, #4]
 801ad38:	e7b4      	b.n	801aca4 <_malloc_r+0x4c>
 801ad3a:	4613      	mov	r3, r2
 801ad3c:	e7cc      	b.n	801acd8 <_malloc_r+0x80>
 801ad3e:	230c      	movs	r3, #12
 801ad40:	603b      	str	r3, [r7, #0]
 801ad42:	4638      	mov	r0, r7
 801ad44:	f000 f80e 	bl	801ad64 <__malloc_unlock>
 801ad48:	e797      	b.n	801ac7a <_malloc_r+0x22>
 801ad4a:	6025      	str	r5, [r4, #0]
 801ad4c:	e7dc      	b.n	801ad08 <_malloc_r+0xb0>
 801ad4e:	605b      	str	r3, [r3, #4]
 801ad50:	deff      	udf	#255	; 0xff
 801ad52:	bf00      	nop
 801ad54:	200072e4 	.word	0x200072e4

0801ad58 <__malloc_lock>:
 801ad58:	4801      	ldr	r0, [pc, #4]	; (801ad60 <__malloc_lock+0x8>)
 801ad5a:	f7ff b8e6 	b.w	8019f2a <__retarget_lock_acquire_recursive>
 801ad5e:	bf00      	nop
 801ad60:	200072e0 	.word	0x200072e0

0801ad64 <__malloc_unlock>:
 801ad64:	4801      	ldr	r0, [pc, #4]	; (801ad6c <__malloc_unlock+0x8>)
 801ad66:	f7ff b8e1 	b.w	8019f2c <__retarget_lock_release_recursive>
 801ad6a:	bf00      	nop
 801ad6c:	200072e0 	.word	0x200072e0

0801ad70 <_Balloc>:
 801ad70:	b570      	push	{r4, r5, r6, lr}
 801ad72:	69c6      	ldr	r6, [r0, #28]
 801ad74:	4604      	mov	r4, r0
 801ad76:	460d      	mov	r5, r1
 801ad78:	b976      	cbnz	r6, 801ad98 <_Balloc+0x28>
 801ad7a:	2010      	movs	r0, #16
 801ad7c:	f7ff ff44 	bl	801ac08 <malloc>
 801ad80:	4602      	mov	r2, r0
 801ad82:	61e0      	str	r0, [r4, #28]
 801ad84:	b920      	cbnz	r0, 801ad90 <_Balloc+0x20>
 801ad86:	4b18      	ldr	r3, [pc, #96]	; (801ade8 <_Balloc+0x78>)
 801ad88:	4818      	ldr	r0, [pc, #96]	; (801adec <_Balloc+0x7c>)
 801ad8a:	216b      	movs	r1, #107	; 0x6b
 801ad8c:	f7ff f8de 	bl	8019f4c <__assert_func>
 801ad90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801ad94:	6006      	str	r6, [r0, #0]
 801ad96:	60c6      	str	r6, [r0, #12]
 801ad98:	69e6      	ldr	r6, [r4, #28]
 801ad9a:	68f3      	ldr	r3, [r6, #12]
 801ad9c:	b183      	cbz	r3, 801adc0 <_Balloc+0x50>
 801ad9e:	69e3      	ldr	r3, [r4, #28]
 801ada0:	68db      	ldr	r3, [r3, #12]
 801ada2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801ada6:	b9b8      	cbnz	r0, 801add8 <_Balloc+0x68>
 801ada8:	2101      	movs	r1, #1
 801adaa:	fa01 f605 	lsl.w	r6, r1, r5
 801adae:	1d72      	adds	r2, r6, #5
 801adb0:	0092      	lsls	r2, r2, #2
 801adb2:	4620      	mov	r0, r4
 801adb4:	f000 fdf7 	bl	801b9a6 <_calloc_r>
 801adb8:	b160      	cbz	r0, 801add4 <_Balloc+0x64>
 801adba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801adbe:	e00e      	b.n	801adde <_Balloc+0x6e>
 801adc0:	2221      	movs	r2, #33	; 0x21
 801adc2:	2104      	movs	r1, #4
 801adc4:	4620      	mov	r0, r4
 801adc6:	f000 fdee 	bl	801b9a6 <_calloc_r>
 801adca:	69e3      	ldr	r3, [r4, #28]
 801adcc:	60f0      	str	r0, [r6, #12]
 801adce:	68db      	ldr	r3, [r3, #12]
 801add0:	2b00      	cmp	r3, #0
 801add2:	d1e4      	bne.n	801ad9e <_Balloc+0x2e>
 801add4:	2000      	movs	r0, #0
 801add6:	bd70      	pop	{r4, r5, r6, pc}
 801add8:	6802      	ldr	r2, [r0, #0]
 801adda:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801adde:	2300      	movs	r3, #0
 801ade0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801ade4:	e7f7      	b.n	801add6 <_Balloc+0x66>
 801ade6:	bf00      	nop
 801ade8:	0801ef8e 	.word	0x0801ef8e
 801adec:	0801f1e4 	.word	0x0801f1e4

0801adf0 <_Bfree>:
 801adf0:	b570      	push	{r4, r5, r6, lr}
 801adf2:	69c6      	ldr	r6, [r0, #28]
 801adf4:	4605      	mov	r5, r0
 801adf6:	460c      	mov	r4, r1
 801adf8:	b976      	cbnz	r6, 801ae18 <_Bfree+0x28>
 801adfa:	2010      	movs	r0, #16
 801adfc:	f7ff ff04 	bl	801ac08 <malloc>
 801ae00:	4602      	mov	r2, r0
 801ae02:	61e8      	str	r0, [r5, #28]
 801ae04:	b920      	cbnz	r0, 801ae10 <_Bfree+0x20>
 801ae06:	4b09      	ldr	r3, [pc, #36]	; (801ae2c <_Bfree+0x3c>)
 801ae08:	4809      	ldr	r0, [pc, #36]	; (801ae30 <_Bfree+0x40>)
 801ae0a:	218f      	movs	r1, #143	; 0x8f
 801ae0c:	f7ff f89e 	bl	8019f4c <__assert_func>
 801ae10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801ae14:	6006      	str	r6, [r0, #0]
 801ae16:	60c6      	str	r6, [r0, #12]
 801ae18:	b13c      	cbz	r4, 801ae2a <_Bfree+0x3a>
 801ae1a:	69eb      	ldr	r3, [r5, #28]
 801ae1c:	6862      	ldr	r2, [r4, #4]
 801ae1e:	68db      	ldr	r3, [r3, #12]
 801ae20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801ae24:	6021      	str	r1, [r4, #0]
 801ae26:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801ae2a:	bd70      	pop	{r4, r5, r6, pc}
 801ae2c:	0801ef8e 	.word	0x0801ef8e
 801ae30:	0801f1e4 	.word	0x0801f1e4

0801ae34 <__multadd>:
 801ae34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ae38:	690d      	ldr	r5, [r1, #16]
 801ae3a:	4607      	mov	r7, r0
 801ae3c:	460c      	mov	r4, r1
 801ae3e:	461e      	mov	r6, r3
 801ae40:	f101 0c14 	add.w	ip, r1, #20
 801ae44:	2000      	movs	r0, #0
 801ae46:	f8dc 3000 	ldr.w	r3, [ip]
 801ae4a:	b299      	uxth	r1, r3
 801ae4c:	fb02 6101 	mla	r1, r2, r1, r6
 801ae50:	0c1e      	lsrs	r6, r3, #16
 801ae52:	0c0b      	lsrs	r3, r1, #16
 801ae54:	fb02 3306 	mla	r3, r2, r6, r3
 801ae58:	b289      	uxth	r1, r1
 801ae5a:	3001      	adds	r0, #1
 801ae5c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801ae60:	4285      	cmp	r5, r0
 801ae62:	f84c 1b04 	str.w	r1, [ip], #4
 801ae66:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801ae6a:	dcec      	bgt.n	801ae46 <__multadd+0x12>
 801ae6c:	b30e      	cbz	r6, 801aeb2 <__multadd+0x7e>
 801ae6e:	68a3      	ldr	r3, [r4, #8]
 801ae70:	42ab      	cmp	r3, r5
 801ae72:	dc19      	bgt.n	801aea8 <__multadd+0x74>
 801ae74:	6861      	ldr	r1, [r4, #4]
 801ae76:	4638      	mov	r0, r7
 801ae78:	3101      	adds	r1, #1
 801ae7a:	f7ff ff79 	bl	801ad70 <_Balloc>
 801ae7e:	4680      	mov	r8, r0
 801ae80:	b928      	cbnz	r0, 801ae8e <__multadd+0x5a>
 801ae82:	4602      	mov	r2, r0
 801ae84:	4b0c      	ldr	r3, [pc, #48]	; (801aeb8 <__multadd+0x84>)
 801ae86:	480d      	ldr	r0, [pc, #52]	; (801aebc <__multadd+0x88>)
 801ae88:	21ba      	movs	r1, #186	; 0xba
 801ae8a:	f7ff f85f 	bl	8019f4c <__assert_func>
 801ae8e:	6922      	ldr	r2, [r4, #16]
 801ae90:	3202      	adds	r2, #2
 801ae92:	f104 010c 	add.w	r1, r4, #12
 801ae96:	0092      	lsls	r2, r2, #2
 801ae98:	300c      	adds	r0, #12
 801ae9a:	f7ff f848 	bl	8019f2e <memcpy>
 801ae9e:	4621      	mov	r1, r4
 801aea0:	4638      	mov	r0, r7
 801aea2:	f7ff ffa5 	bl	801adf0 <_Bfree>
 801aea6:	4644      	mov	r4, r8
 801aea8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801aeac:	3501      	adds	r5, #1
 801aeae:	615e      	str	r6, [r3, #20]
 801aeb0:	6125      	str	r5, [r4, #16]
 801aeb2:	4620      	mov	r0, r4
 801aeb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aeb8:	0801f1d3 	.word	0x0801f1d3
 801aebc:	0801f1e4 	.word	0x0801f1e4

0801aec0 <__hi0bits>:
 801aec0:	0c03      	lsrs	r3, r0, #16
 801aec2:	041b      	lsls	r3, r3, #16
 801aec4:	b9d3      	cbnz	r3, 801aefc <__hi0bits+0x3c>
 801aec6:	0400      	lsls	r0, r0, #16
 801aec8:	2310      	movs	r3, #16
 801aeca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801aece:	bf04      	itt	eq
 801aed0:	0200      	lsleq	r0, r0, #8
 801aed2:	3308      	addeq	r3, #8
 801aed4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801aed8:	bf04      	itt	eq
 801aeda:	0100      	lsleq	r0, r0, #4
 801aedc:	3304      	addeq	r3, #4
 801aede:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801aee2:	bf04      	itt	eq
 801aee4:	0080      	lsleq	r0, r0, #2
 801aee6:	3302      	addeq	r3, #2
 801aee8:	2800      	cmp	r0, #0
 801aeea:	db05      	blt.n	801aef8 <__hi0bits+0x38>
 801aeec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801aef0:	f103 0301 	add.w	r3, r3, #1
 801aef4:	bf08      	it	eq
 801aef6:	2320      	moveq	r3, #32
 801aef8:	4618      	mov	r0, r3
 801aefa:	4770      	bx	lr
 801aefc:	2300      	movs	r3, #0
 801aefe:	e7e4      	b.n	801aeca <__hi0bits+0xa>

0801af00 <__lo0bits>:
 801af00:	6803      	ldr	r3, [r0, #0]
 801af02:	f013 0207 	ands.w	r2, r3, #7
 801af06:	d00c      	beq.n	801af22 <__lo0bits+0x22>
 801af08:	07d9      	lsls	r1, r3, #31
 801af0a:	d422      	bmi.n	801af52 <__lo0bits+0x52>
 801af0c:	079a      	lsls	r2, r3, #30
 801af0e:	bf49      	itett	mi
 801af10:	085b      	lsrmi	r3, r3, #1
 801af12:	089b      	lsrpl	r3, r3, #2
 801af14:	6003      	strmi	r3, [r0, #0]
 801af16:	2201      	movmi	r2, #1
 801af18:	bf5c      	itt	pl
 801af1a:	6003      	strpl	r3, [r0, #0]
 801af1c:	2202      	movpl	r2, #2
 801af1e:	4610      	mov	r0, r2
 801af20:	4770      	bx	lr
 801af22:	b299      	uxth	r1, r3
 801af24:	b909      	cbnz	r1, 801af2a <__lo0bits+0x2a>
 801af26:	0c1b      	lsrs	r3, r3, #16
 801af28:	2210      	movs	r2, #16
 801af2a:	b2d9      	uxtb	r1, r3
 801af2c:	b909      	cbnz	r1, 801af32 <__lo0bits+0x32>
 801af2e:	3208      	adds	r2, #8
 801af30:	0a1b      	lsrs	r3, r3, #8
 801af32:	0719      	lsls	r1, r3, #28
 801af34:	bf04      	itt	eq
 801af36:	091b      	lsreq	r3, r3, #4
 801af38:	3204      	addeq	r2, #4
 801af3a:	0799      	lsls	r1, r3, #30
 801af3c:	bf04      	itt	eq
 801af3e:	089b      	lsreq	r3, r3, #2
 801af40:	3202      	addeq	r2, #2
 801af42:	07d9      	lsls	r1, r3, #31
 801af44:	d403      	bmi.n	801af4e <__lo0bits+0x4e>
 801af46:	085b      	lsrs	r3, r3, #1
 801af48:	f102 0201 	add.w	r2, r2, #1
 801af4c:	d003      	beq.n	801af56 <__lo0bits+0x56>
 801af4e:	6003      	str	r3, [r0, #0]
 801af50:	e7e5      	b.n	801af1e <__lo0bits+0x1e>
 801af52:	2200      	movs	r2, #0
 801af54:	e7e3      	b.n	801af1e <__lo0bits+0x1e>
 801af56:	2220      	movs	r2, #32
 801af58:	e7e1      	b.n	801af1e <__lo0bits+0x1e>
	...

0801af5c <__i2b>:
 801af5c:	b510      	push	{r4, lr}
 801af5e:	460c      	mov	r4, r1
 801af60:	2101      	movs	r1, #1
 801af62:	f7ff ff05 	bl	801ad70 <_Balloc>
 801af66:	4602      	mov	r2, r0
 801af68:	b928      	cbnz	r0, 801af76 <__i2b+0x1a>
 801af6a:	4b05      	ldr	r3, [pc, #20]	; (801af80 <__i2b+0x24>)
 801af6c:	4805      	ldr	r0, [pc, #20]	; (801af84 <__i2b+0x28>)
 801af6e:	f240 1145 	movw	r1, #325	; 0x145
 801af72:	f7fe ffeb 	bl	8019f4c <__assert_func>
 801af76:	2301      	movs	r3, #1
 801af78:	6144      	str	r4, [r0, #20]
 801af7a:	6103      	str	r3, [r0, #16]
 801af7c:	bd10      	pop	{r4, pc}
 801af7e:	bf00      	nop
 801af80:	0801f1d3 	.word	0x0801f1d3
 801af84:	0801f1e4 	.word	0x0801f1e4

0801af88 <__multiply>:
 801af88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af8c:	4691      	mov	r9, r2
 801af8e:	690a      	ldr	r2, [r1, #16]
 801af90:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801af94:	429a      	cmp	r2, r3
 801af96:	bfb8      	it	lt
 801af98:	460b      	movlt	r3, r1
 801af9a:	460c      	mov	r4, r1
 801af9c:	bfbc      	itt	lt
 801af9e:	464c      	movlt	r4, r9
 801afa0:	4699      	movlt	r9, r3
 801afa2:	6927      	ldr	r7, [r4, #16]
 801afa4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801afa8:	68a3      	ldr	r3, [r4, #8]
 801afaa:	6861      	ldr	r1, [r4, #4]
 801afac:	eb07 060a 	add.w	r6, r7, sl
 801afb0:	42b3      	cmp	r3, r6
 801afb2:	b085      	sub	sp, #20
 801afb4:	bfb8      	it	lt
 801afb6:	3101      	addlt	r1, #1
 801afb8:	f7ff feda 	bl	801ad70 <_Balloc>
 801afbc:	b930      	cbnz	r0, 801afcc <__multiply+0x44>
 801afbe:	4602      	mov	r2, r0
 801afc0:	4b44      	ldr	r3, [pc, #272]	; (801b0d4 <__multiply+0x14c>)
 801afc2:	4845      	ldr	r0, [pc, #276]	; (801b0d8 <__multiply+0x150>)
 801afc4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801afc8:	f7fe ffc0 	bl	8019f4c <__assert_func>
 801afcc:	f100 0514 	add.w	r5, r0, #20
 801afd0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801afd4:	462b      	mov	r3, r5
 801afd6:	2200      	movs	r2, #0
 801afd8:	4543      	cmp	r3, r8
 801afda:	d321      	bcc.n	801b020 <__multiply+0x98>
 801afdc:	f104 0314 	add.w	r3, r4, #20
 801afe0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801afe4:	f109 0314 	add.w	r3, r9, #20
 801afe8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801afec:	9202      	str	r2, [sp, #8]
 801afee:	1b3a      	subs	r2, r7, r4
 801aff0:	3a15      	subs	r2, #21
 801aff2:	f022 0203 	bic.w	r2, r2, #3
 801aff6:	3204      	adds	r2, #4
 801aff8:	f104 0115 	add.w	r1, r4, #21
 801affc:	428f      	cmp	r7, r1
 801affe:	bf38      	it	cc
 801b000:	2204      	movcc	r2, #4
 801b002:	9201      	str	r2, [sp, #4]
 801b004:	9a02      	ldr	r2, [sp, #8]
 801b006:	9303      	str	r3, [sp, #12]
 801b008:	429a      	cmp	r2, r3
 801b00a:	d80c      	bhi.n	801b026 <__multiply+0x9e>
 801b00c:	2e00      	cmp	r6, #0
 801b00e:	dd03      	ble.n	801b018 <__multiply+0x90>
 801b010:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801b014:	2b00      	cmp	r3, #0
 801b016:	d05b      	beq.n	801b0d0 <__multiply+0x148>
 801b018:	6106      	str	r6, [r0, #16]
 801b01a:	b005      	add	sp, #20
 801b01c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b020:	f843 2b04 	str.w	r2, [r3], #4
 801b024:	e7d8      	b.n	801afd8 <__multiply+0x50>
 801b026:	f8b3 a000 	ldrh.w	sl, [r3]
 801b02a:	f1ba 0f00 	cmp.w	sl, #0
 801b02e:	d024      	beq.n	801b07a <__multiply+0xf2>
 801b030:	f104 0e14 	add.w	lr, r4, #20
 801b034:	46a9      	mov	r9, r5
 801b036:	f04f 0c00 	mov.w	ip, #0
 801b03a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801b03e:	f8d9 1000 	ldr.w	r1, [r9]
 801b042:	fa1f fb82 	uxth.w	fp, r2
 801b046:	b289      	uxth	r1, r1
 801b048:	fb0a 110b 	mla	r1, sl, fp, r1
 801b04c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801b050:	f8d9 2000 	ldr.w	r2, [r9]
 801b054:	4461      	add	r1, ip
 801b056:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801b05a:	fb0a c20b 	mla	r2, sl, fp, ip
 801b05e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801b062:	b289      	uxth	r1, r1
 801b064:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801b068:	4577      	cmp	r7, lr
 801b06a:	f849 1b04 	str.w	r1, [r9], #4
 801b06e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801b072:	d8e2      	bhi.n	801b03a <__multiply+0xb2>
 801b074:	9a01      	ldr	r2, [sp, #4]
 801b076:	f845 c002 	str.w	ip, [r5, r2]
 801b07a:	9a03      	ldr	r2, [sp, #12]
 801b07c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801b080:	3304      	adds	r3, #4
 801b082:	f1b9 0f00 	cmp.w	r9, #0
 801b086:	d021      	beq.n	801b0cc <__multiply+0x144>
 801b088:	6829      	ldr	r1, [r5, #0]
 801b08a:	f104 0c14 	add.w	ip, r4, #20
 801b08e:	46ae      	mov	lr, r5
 801b090:	f04f 0a00 	mov.w	sl, #0
 801b094:	f8bc b000 	ldrh.w	fp, [ip]
 801b098:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801b09c:	fb09 220b 	mla	r2, r9, fp, r2
 801b0a0:	4452      	add	r2, sl
 801b0a2:	b289      	uxth	r1, r1
 801b0a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801b0a8:	f84e 1b04 	str.w	r1, [lr], #4
 801b0ac:	f85c 1b04 	ldr.w	r1, [ip], #4
 801b0b0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801b0b4:	f8be 1000 	ldrh.w	r1, [lr]
 801b0b8:	fb09 110a 	mla	r1, r9, sl, r1
 801b0bc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801b0c0:	4567      	cmp	r7, ip
 801b0c2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801b0c6:	d8e5      	bhi.n	801b094 <__multiply+0x10c>
 801b0c8:	9a01      	ldr	r2, [sp, #4]
 801b0ca:	50a9      	str	r1, [r5, r2]
 801b0cc:	3504      	adds	r5, #4
 801b0ce:	e799      	b.n	801b004 <__multiply+0x7c>
 801b0d0:	3e01      	subs	r6, #1
 801b0d2:	e79b      	b.n	801b00c <__multiply+0x84>
 801b0d4:	0801f1d3 	.word	0x0801f1d3
 801b0d8:	0801f1e4 	.word	0x0801f1e4

0801b0dc <__pow5mult>:
 801b0dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b0e0:	4615      	mov	r5, r2
 801b0e2:	f012 0203 	ands.w	r2, r2, #3
 801b0e6:	4606      	mov	r6, r0
 801b0e8:	460f      	mov	r7, r1
 801b0ea:	d007      	beq.n	801b0fc <__pow5mult+0x20>
 801b0ec:	4c25      	ldr	r4, [pc, #148]	; (801b184 <__pow5mult+0xa8>)
 801b0ee:	3a01      	subs	r2, #1
 801b0f0:	2300      	movs	r3, #0
 801b0f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801b0f6:	f7ff fe9d 	bl	801ae34 <__multadd>
 801b0fa:	4607      	mov	r7, r0
 801b0fc:	10ad      	asrs	r5, r5, #2
 801b0fe:	d03d      	beq.n	801b17c <__pow5mult+0xa0>
 801b100:	69f4      	ldr	r4, [r6, #28]
 801b102:	b97c      	cbnz	r4, 801b124 <__pow5mult+0x48>
 801b104:	2010      	movs	r0, #16
 801b106:	f7ff fd7f 	bl	801ac08 <malloc>
 801b10a:	4602      	mov	r2, r0
 801b10c:	61f0      	str	r0, [r6, #28]
 801b10e:	b928      	cbnz	r0, 801b11c <__pow5mult+0x40>
 801b110:	4b1d      	ldr	r3, [pc, #116]	; (801b188 <__pow5mult+0xac>)
 801b112:	481e      	ldr	r0, [pc, #120]	; (801b18c <__pow5mult+0xb0>)
 801b114:	f240 11b3 	movw	r1, #435	; 0x1b3
 801b118:	f7fe ff18 	bl	8019f4c <__assert_func>
 801b11c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801b120:	6004      	str	r4, [r0, #0]
 801b122:	60c4      	str	r4, [r0, #12]
 801b124:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801b128:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801b12c:	b94c      	cbnz	r4, 801b142 <__pow5mult+0x66>
 801b12e:	f240 2171 	movw	r1, #625	; 0x271
 801b132:	4630      	mov	r0, r6
 801b134:	f7ff ff12 	bl	801af5c <__i2b>
 801b138:	2300      	movs	r3, #0
 801b13a:	f8c8 0008 	str.w	r0, [r8, #8]
 801b13e:	4604      	mov	r4, r0
 801b140:	6003      	str	r3, [r0, #0]
 801b142:	f04f 0900 	mov.w	r9, #0
 801b146:	07eb      	lsls	r3, r5, #31
 801b148:	d50a      	bpl.n	801b160 <__pow5mult+0x84>
 801b14a:	4639      	mov	r1, r7
 801b14c:	4622      	mov	r2, r4
 801b14e:	4630      	mov	r0, r6
 801b150:	f7ff ff1a 	bl	801af88 <__multiply>
 801b154:	4639      	mov	r1, r7
 801b156:	4680      	mov	r8, r0
 801b158:	4630      	mov	r0, r6
 801b15a:	f7ff fe49 	bl	801adf0 <_Bfree>
 801b15e:	4647      	mov	r7, r8
 801b160:	106d      	asrs	r5, r5, #1
 801b162:	d00b      	beq.n	801b17c <__pow5mult+0xa0>
 801b164:	6820      	ldr	r0, [r4, #0]
 801b166:	b938      	cbnz	r0, 801b178 <__pow5mult+0x9c>
 801b168:	4622      	mov	r2, r4
 801b16a:	4621      	mov	r1, r4
 801b16c:	4630      	mov	r0, r6
 801b16e:	f7ff ff0b 	bl	801af88 <__multiply>
 801b172:	6020      	str	r0, [r4, #0]
 801b174:	f8c0 9000 	str.w	r9, [r0]
 801b178:	4604      	mov	r4, r0
 801b17a:	e7e4      	b.n	801b146 <__pow5mult+0x6a>
 801b17c:	4638      	mov	r0, r7
 801b17e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b182:	bf00      	nop
 801b184:	0801f330 	.word	0x0801f330
 801b188:	0801ef8e 	.word	0x0801ef8e
 801b18c:	0801f1e4 	.word	0x0801f1e4

0801b190 <__lshift>:
 801b190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b194:	460c      	mov	r4, r1
 801b196:	6849      	ldr	r1, [r1, #4]
 801b198:	6923      	ldr	r3, [r4, #16]
 801b19a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801b19e:	68a3      	ldr	r3, [r4, #8]
 801b1a0:	4607      	mov	r7, r0
 801b1a2:	4691      	mov	r9, r2
 801b1a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801b1a8:	f108 0601 	add.w	r6, r8, #1
 801b1ac:	42b3      	cmp	r3, r6
 801b1ae:	db0b      	blt.n	801b1c8 <__lshift+0x38>
 801b1b0:	4638      	mov	r0, r7
 801b1b2:	f7ff fddd 	bl	801ad70 <_Balloc>
 801b1b6:	4605      	mov	r5, r0
 801b1b8:	b948      	cbnz	r0, 801b1ce <__lshift+0x3e>
 801b1ba:	4602      	mov	r2, r0
 801b1bc:	4b28      	ldr	r3, [pc, #160]	; (801b260 <__lshift+0xd0>)
 801b1be:	4829      	ldr	r0, [pc, #164]	; (801b264 <__lshift+0xd4>)
 801b1c0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801b1c4:	f7fe fec2 	bl	8019f4c <__assert_func>
 801b1c8:	3101      	adds	r1, #1
 801b1ca:	005b      	lsls	r3, r3, #1
 801b1cc:	e7ee      	b.n	801b1ac <__lshift+0x1c>
 801b1ce:	2300      	movs	r3, #0
 801b1d0:	f100 0114 	add.w	r1, r0, #20
 801b1d4:	f100 0210 	add.w	r2, r0, #16
 801b1d8:	4618      	mov	r0, r3
 801b1da:	4553      	cmp	r3, sl
 801b1dc:	db33      	blt.n	801b246 <__lshift+0xb6>
 801b1de:	6920      	ldr	r0, [r4, #16]
 801b1e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801b1e4:	f104 0314 	add.w	r3, r4, #20
 801b1e8:	f019 091f 	ands.w	r9, r9, #31
 801b1ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801b1f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801b1f4:	d02b      	beq.n	801b24e <__lshift+0xbe>
 801b1f6:	f1c9 0e20 	rsb	lr, r9, #32
 801b1fa:	468a      	mov	sl, r1
 801b1fc:	2200      	movs	r2, #0
 801b1fe:	6818      	ldr	r0, [r3, #0]
 801b200:	fa00 f009 	lsl.w	r0, r0, r9
 801b204:	4310      	orrs	r0, r2
 801b206:	f84a 0b04 	str.w	r0, [sl], #4
 801b20a:	f853 2b04 	ldr.w	r2, [r3], #4
 801b20e:	459c      	cmp	ip, r3
 801b210:	fa22 f20e 	lsr.w	r2, r2, lr
 801b214:	d8f3      	bhi.n	801b1fe <__lshift+0x6e>
 801b216:	ebac 0304 	sub.w	r3, ip, r4
 801b21a:	3b15      	subs	r3, #21
 801b21c:	f023 0303 	bic.w	r3, r3, #3
 801b220:	3304      	adds	r3, #4
 801b222:	f104 0015 	add.w	r0, r4, #21
 801b226:	4584      	cmp	ip, r0
 801b228:	bf38      	it	cc
 801b22a:	2304      	movcc	r3, #4
 801b22c:	50ca      	str	r2, [r1, r3]
 801b22e:	b10a      	cbz	r2, 801b234 <__lshift+0xa4>
 801b230:	f108 0602 	add.w	r6, r8, #2
 801b234:	3e01      	subs	r6, #1
 801b236:	4638      	mov	r0, r7
 801b238:	612e      	str	r6, [r5, #16]
 801b23a:	4621      	mov	r1, r4
 801b23c:	f7ff fdd8 	bl	801adf0 <_Bfree>
 801b240:	4628      	mov	r0, r5
 801b242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b246:	f842 0f04 	str.w	r0, [r2, #4]!
 801b24a:	3301      	adds	r3, #1
 801b24c:	e7c5      	b.n	801b1da <__lshift+0x4a>
 801b24e:	3904      	subs	r1, #4
 801b250:	f853 2b04 	ldr.w	r2, [r3], #4
 801b254:	f841 2f04 	str.w	r2, [r1, #4]!
 801b258:	459c      	cmp	ip, r3
 801b25a:	d8f9      	bhi.n	801b250 <__lshift+0xc0>
 801b25c:	e7ea      	b.n	801b234 <__lshift+0xa4>
 801b25e:	bf00      	nop
 801b260:	0801f1d3 	.word	0x0801f1d3
 801b264:	0801f1e4 	.word	0x0801f1e4

0801b268 <__mcmp>:
 801b268:	b530      	push	{r4, r5, lr}
 801b26a:	6902      	ldr	r2, [r0, #16]
 801b26c:	690c      	ldr	r4, [r1, #16]
 801b26e:	1b12      	subs	r2, r2, r4
 801b270:	d10e      	bne.n	801b290 <__mcmp+0x28>
 801b272:	f100 0314 	add.w	r3, r0, #20
 801b276:	3114      	adds	r1, #20
 801b278:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801b27c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801b280:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801b284:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801b288:	42a5      	cmp	r5, r4
 801b28a:	d003      	beq.n	801b294 <__mcmp+0x2c>
 801b28c:	d305      	bcc.n	801b29a <__mcmp+0x32>
 801b28e:	2201      	movs	r2, #1
 801b290:	4610      	mov	r0, r2
 801b292:	bd30      	pop	{r4, r5, pc}
 801b294:	4283      	cmp	r3, r0
 801b296:	d3f3      	bcc.n	801b280 <__mcmp+0x18>
 801b298:	e7fa      	b.n	801b290 <__mcmp+0x28>
 801b29a:	f04f 32ff 	mov.w	r2, #4294967295
 801b29e:	e7f7      	b.n	801b290 <__mcmp+0x28>

0801b2a0 <__mdiff>:
 801b2a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b2a4:	460c      	mov	r4, r1
 801b2a6:	4606      	mov	r6, r0
 801b2a8:	4611      	mov	r1, r2
 801b2aa:	4620      	mov	r0, r4
 801b2ac:	4690      	mov	r8, r2
 801b2ae:	f7ff ffdb 	bl	801b268 <__mcmp>
 801b2b2:	1e05      	subs	r5, r0, #0
 801b2b4:	d110      	bne.n	801b2d8 <__mdiff+0x38>
 801b2b6:	4629      	mov	r1, r5
 801b2b8:	4630      	mov	r0, r6
 801b2ba:	f7ff fd59 	bl	801ad70 <_Balloc>
 801b2be:	b930      	cbnz	r0, 801b2ce <__mdiff+0x2e>
 801b2c0:	4b3a      	ldr	r3, [pc, #232]	; (801b3ac <__mdiff+0x10c>)
 801b2c2:	4602      	mov	r2, r0
 801b2c4:	f240 2137 	movw	r1, #567	; 0x237
 801b2c8:	4839      	ldr	r0, [pc, #228]	; (801b3b0 <__mdiff+0x110>)
 801b2ca:	f7fe fe3f 	bl	8019f4c <__assert_func>
 801b2ce:	2301      	movs	r3, #1
 801b2d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801b2d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b2d8:	bfa4      	itt	ge
 801b2da:	4643      	movge	r3, r8
 801b2dc:	46a0      	movge	r8, r4
 801b2de:	4630      	mov	r0, r6
 801b2e0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801b2e4:	bfa6      	itte	ge
 801b2e6:	461c      	movge	r4, r3
 801b2e8:	2500      	movge	r5, #0
 801b2ea:	2501      	movlt	r5, #1
 801b2ec:	f7ff fd40 	bl	801ad70 <_Balloc>
 801b2f0:	b920      	cbnz	r0, 801b2fc <__mdiff+0x5c>
 801b2f2:	4b2e      	ldr	r3, [pc, #184]	; (801b3ac <__mdiff+0x10c>)
 801b2f4:	4602      	mov	r2, r0
 801b2f6:	f240 2145 	movw	r1, #581	; 0x245
 801b2fa:	e7e5      	b.n	801b2c8 <__mdiff+0x28>
 801b2fc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801b300:	6926      	ldr	r6, [r4, #16]
 801b302:	60c5      	str	r5, [r0, #12]
 801b304:	f104 0914 	add.w	r9, r4, #20
 801b308:	f108 0514 	add.w	r5, r8, #20
 801b30c:	f100 0e14 	add.w	lr, r0, #20
 801b310:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801b314:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801b318:	f108 0210 	add.w	r2, r8, #16
 801b31c:	46f2      	mov	sl, lr
 801b31e:	2100      	movs	r1, #0
 801b320:	f859 3b04 	ldr.w	r3, [r9], #4
 801b324:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801b328:	fa11 f88b 	uxtah	r8, r1, fp
 801b32c:	b299      	uxth	r1, r3
 801b32e:	0c1b      	lsrs	r3, r3, #16
 801b330:	eba8 0801 	sub.w	r8, r8, r1
 801b334:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801b338:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801b33c:	fa1f f888 	uxth.w	r8, r8
 801b340:	1419      	asrs	r1, r3, #16
 801b342:	454e      	cmp	r6, r9
 801b344:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801b348:	f84a 3b04 	str.w	r3, [sl], #4
 801b34c:	d8e8      	bhi.n	801b320 <__mdiff+0x80>
 801b34e:	1b33      	subs	r3, r6, r4
 801b350:	3b15      	subs	r3, #21
 801b352:	f023 0303 	bic.w	r3, r3, #3
 801b356:	3304      	adds	r3, #4
 801b358:	3415      	adds	r4, #21
 801b35a:	42a6      	cmp	r6, r4
 801b35c:	bf38      	it	cc
 801b35e:	2304      	movcc	r3, #4
 801b360:	441d      	add	r5, r3
 801b362:	4473      	add	r3, lr
 801b364:	469e      	mov	lr, r3
 801b366:	462e      	mov	r6, r5
 801b368:	4566      	cmp	r6, ip
 801b36a:	d30e      	bcc.n	801b38a <__mdiff+0xea>
 801b36c:	f10c 0203 	add.w	r2, ip, #3
 801b370:	1b52      	subs	r2, r2, r5
 801b372:	f022 0203 	bic.w	r2, r2, #3
 801b376:	3d03      	subs	r5, #3
 801b378:	45ac      	cmp	ip, r5
 801b37a:	bf38      	it	cc
 801b37c:	2200      	movcc	r2, #0
 801b37e:	4413      	add	r3, r2
 801b380:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801b384:	b17a      	cbz	r2, 801b3a6 <__mdiff+0x106>
 801b386:	6107      	str	r7, [r0, #16]
 801b388:	e7a4      	b.n	801b2d4 <__mdiff+0x34>
 801b38a:	f856 8b04 	ldr.w	r8, [r6], #4
 801b38e:	fa11 f288 	uxtah	r2, r1, r8
 801b392:	1414      	asrs	r4, r2, #16
 801b394:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801b398:	b292      	uxth	r2, r2
 801b39a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801b39e:	f84e 2b04 	str.w	r2, [lr], #4
 801b3a2:	1421      	asrs	r1, r4, #16
 801b3a4:	e7e0      	b.n	801b368 <__mdiff+0xc8>
 801b3a6:	3f01      	subs	r7, #1
 801b3a8:	e7ea      	b.n	801b380 <__mdiff+0xe0>
 801b3aa:	bf00      	nop
 801b3ac:	0801f1d3 	.word	0x0801f1d3
 801b3b0:	0801f1e4 	.word	0x0801f1e4

0801b3b4 <__d2b>:
 801b3b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801b3b8:	460f      	mov	r7, r1
 801b3ba:	2101      	movs	r1, #1
 801b3bc:	ec59 8b10 	vmov	r8, r9, d0
 801b3c0:	4616      	mov	r6, r2
 801b3c2:	f7ff fcd5 	bl	801ad70 <_Balloc>
 801b3c6:	4604      	mov	r4, r0
 801b3c8:	b930      	cbnz	r0, 801b3d8 <__d2b+0x24>
 801b3ca:	4602      	mov	r2, r0
 801b3cc:	4b24      	ldr	r3, [pc, #144]	; (801b460 <__d2b+0xac>)
 801b3ce:	4825      	ldr	r0, [pc, #148]	; (801b464 <__d2b+0xb0>)
 801b3d0:	f240 310f 	movw	r1, #783	; 0x30f
 801b3d4:	f7fe fdba 	bl	8019f4c <__assert_func>
 801b3d8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801b3dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801b3e0:	bb2d      	cbnz	r5, 801b42e <__d2b+0x7a>
 801b3e2:	9301      	str	r3, [sp, #4]
 801b3e4:	f1b8 0300 	subs.w	r3, r8, #0
 801b3e8:	d026      	beq.n	801b438 <__d2b+0x84>
 801b3ea:	4668      	mov	r0, sp
 801b3ec:	9300      	str	r3, [sp, #0]
 801b3ee:	f7ff fd87 	bl	801af00 <__lo0bits>
 801b3f2:	e9dd 1200 	ldrd	r1, r2, [sp]
 801b3f6:	b1e8      	cbz	r0, 801b434 <__d2b+0x80>
 801b3f8:	f1c0 0320 	rsb	r3, r0, #32
 801b3fc:	fa02 f303 	lsl.w	r3, r2, r3
 801b400:	430b      	orrs	r3, r1
 801b402:	40c2      	lsrs	r2, r0
 801b404:	6163      	str	r3, [r4, #20]
 801b406:	9201      	str	r2, [sp, #4]
 801b408:	9b01      	ldr	r3, [sp, #4]
 801b40a:	61a3      	str	r3, [r4, #24]
 801b40c:	2b00      	cmp	r3, #0
 801b40e:	bf14      	ite	ne
 801b410:	2202      	movne	r2, #2
 801b412:	2201      	moveq	r2, #1
 801b414:	6122      	str	r2, [r4, #16]
 801b416:	b1bd      	cbz	r5, 801b448 <__d2b+0x94>
 801b418:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801b41c:	4405      	add	r5, r0
 801b41e:	603d      	str	r5, [r7, #0]
 801b420:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801b424:	6030      	str	r0, [r6, #0]
 801b426:	4620      	mov	r0, r4
 801b428:	b003      	add	sp, #12
 801b42a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b42e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801b432:	e7d6      	b.n	801b3e2 <__d2b+0x2e>
 801b434:	6161      	str	r1, [r4, #20]
 801b436:	e7e7      	b.n	801b408 <__d2b+0x54>
 801b438:	a801      	add	r0, sp, #4
 801b43a:	f7ff fd61 	bl	801af00 <__lo0bits>
 801b43e:	9b01      	ldr	r3, [sp, #4]
 801b440:	6163      	str	r3, [r4, #20]
 801b442:	3020      	adds	r0, #32
 801b444:	2201      	movs	r2, #1
 801b446:	e7e5      	b.n	801b414 <__d2b+0x60>
 801b448:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801b44c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801b450:	6038      	str	r0, [r7, #0]
 801b452:	6918      	ldr	r0, [r3, #16]
 801b454:	f7ff fd34 	bl	801aec0 <__hi0bits>
 801b458:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801b45c:	e7e2      	b.n	801b424 <__d2b+0x70>
 801b45e:	bf00      	nop
 801b460:	0801f1d3 	.word	0x0801f1d3
 801b464:	0801f1e4 	.word	0x0801f1e4

0801b468 <__sfputc_r>:
 801b468:	6893      	ldr	r3, [r2, #8]
 801b46a:	3b01      	subs	r3, #1
 801b46c:	2b00      	cmp	r3, #0
 801b46e:	b410      	push	{r4}
 801b470:	6093      	str	r3, [r2, #8]
 801b472:	da08      	bge.n	801b486 <__sfputc_r+0x1e>
 801b474:	6994      	ldr	r4, [r2, #24]
 801b476:	42a3      	cmp	r3, r4
 801b478:	db01      	blt.n	801b47e <__sfputc_r+0x16>
 801b47a:	290a      	cmp	r1, #10
 801b47c:	d103      	bne.n	801b486 <__sfputc_r+0x1e>
 801b47e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b482:	f7fe bc36 	b.w	8019cf2 <__swbuf_r>
 801b486:	6813      	ldr	r3, [r2, #0]
 801b488:	1c58      	adds	r0, r3, #1
 801b48a:	6010      	str	r0, [r2, #0]
 801b48c:	7019      	strb	r1, [r3, #0]
 801b48e:	4608      	mov	r0, r1
 801b490:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b494:	4770      	bx	lr

0801b496 <__sfputs_r>:
 801b496:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b498:	4606      	mov	r6, r0
 801b49a:	460f      	mov	r7, r1
 801b49c:	4614      	mov	r4, r2
 801b49e:	18d5      	adds	r5, r2, r3
 801b4a0:	42ac      	cmp	r4, r5
 801b4a2:	d101      	bne.n	801b4a8 <__sfputs_r+0x12>
 801b4a4:	2000      	movs	r0, #0
 801b4a6:	e007      	b.n	801b4b8 <__sfputs_r+0x22>
 801b4a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b4ac:	463a      	mov	r2, r7
 801b4ae:	4630      	mov	r0, r6
 801b4b0:	f7ff ffda 	bl	801b468 <__sfputc_r>
 801b4b4:	1c43      	adds	r3, r0, #1
 801b4b6:	d1f3      	bne.n	801b4a0 <__sfputs_r+0xa>
 801b4b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b4bc <_vfiprintf_r>:
 801b4bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4c0:	460d      	mov	r5, r1
 801b4c2:	b09d      	sub	sp, #116	; 0x74
 801b4c4:	4614      	mov	r4, r2
 801b4c6:	4698      	mov	r8, r3
 801b4c8:	4606      	mov	r6, r0
 801b4ca:	b118      	cbz	r0, 801b4d4 <_vfiprintf_r+0x18>
 801b4cc:	6a03      	ldr	r3, [r0, #32]
 801b4ce:	b90b      	cbnz	r3, 801b4d4 <_vfiprintf_r+0x18>
 801b4d0:	f7fe fb28 	bl	8019b24 <__sinit>
 801b4d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b4d6:	07d9      	lsls	r1, r3, #31
 801b4d8:	d405      	bmi.n	801b4e6 <_vfiprintf_r+0x2a>
 801b4da:	89ab      	ldrh	r3, [r5, #12]
 801b4dc:	059a      	lsls	r2, r3, #22
 801b4de:	d402      	bmi.n	801b4e6 <_vfiprintf_r+0x2a>
 801b4e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b4e2:	f7fe fd22 	bl	8019f2a <__retarget_lock_acquire_recursive>
 801b4e6:	89ab      	ldrh	r3, [r5, #12]
 801b4e8:	071b      	lsls	r3, r3, #28
 801b4ea:	d501      	bpl.n	801b4f0 <_vfiprintf_r+0x34>
 801b4ec:	692b      	ldr	r3, [r5, #16]
 801b4ee:	b99b      	cbnz	r3, 801b518 <_vfiprintf_r+0x5c>
 801b4f0:	4629      	mov	r1, r5
 801b4f2:	4630      	mov	r0, r6
 801b4f4:	f7fe fc3a 	bl	8019d6c <__swsetup_r>
 801b4f8:	b170      	cbz	r0, 801b518 <_vfiprintf_r+0x5c>
 801b4fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b4fc:	07dc      	lsls	r4, r3, #31
 801b4fe:	d504      	bpl.n	801b50a <_vfiprintf_r+0x4e>
 801b500:	f04f 30ff 	mov.w	r0, #4294967295
 801b504:	b01d      	add	sp, #116	; 0x74
 801b506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b50a:	89ab      	ldrh	r3, [r5, #12]
 801b50c:	0598      	lsls	r0, r3, #22
 801b50e:	d4f7      	bmi.n	801b500 <_vfiprintf_r+0x44>
 801b510:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b512:	f7fe fd0b 	bl	8019f2c <__retarget_lock_release_recursive>
 801b516:	e7f3      	b.n	801b500 <_vfiprintf_r+0x44>
 801b518:	2300      	movs	r3, #0
 801b51a:	9309      	str	r3, [sp, #36]	; 0x24
 801b51c:	2320      	movs	r3, #32
 801b51e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b522:	f8cd 800c 	str.w	r8, [sp, #12]
 801b526:	2330      	movs	r3, #48	; 0x30
 801b528:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801b6dc <_vfiprintf_r+0x220>
 801b52c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b530:	f04f 0901 	mov.w	r9, #1
 801b534:	4623      	mov	r3, r4
 801b536:	469a      	mov	sl, r3
 801b538:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b53c:	b10a      	cbz	r2, 801b542 <_vfiprintf_r+0x86>
 801b53e:	2a25      	cmp	r2, #37	; 0x25
 801b540:	d1f9      	bne.n	801b536 <_vfiprintf_r+0x7a>
 801b542:	ebba 0b04 	subs.w	fp, sl, r4
 801b546:	d00b      	beq.n	801b560 <_vfiprintf_r+0xa4>
 801b548:	465b      	mov	r3, fp
 801b54a:	4622      	mov	r2, r4
 801b54c:	4629      	mov	r1, r5
 801b54e:	4630      	mov	r0, r6
 801b550:	f7ff ffa1 	bl	801b496 <__sfputs_r>
 801b554:	3001      	adds	r0, #1
 801b556:	f000 80a9 	beq.w	801b6ac <_vfiprintf_r+0x1f0>
 801b55a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b55c:	445a      	add	r2, fp
 801b55e:	9209      	str	r2, [sp, #36]	; 0x24
 801b560:	f89a 3000 	ldrb.w	r3, [sl]
 801b564:	2b00      	cmp	r3, #0
 801b566:	f000 80a1 	beq.w	801b6ac <_vfiprintf_r+0x1f0>
 801b56a:	2300      	movs	r3, #0
 801b56c:	f04f 32ff 	mov.w	r2, #4294967295
 801b570:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b574:	f10a 0a01 	add.w	sl, sl, #1
 801b578:	9304      	str	r3, [sp, #16]
 801b57a:	9307      	str	r3, [sp, #28]
 801b57c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b580:	931a      	str	r3, [sp, #104]	; 0x68
 801b582:	4654      	mov	r4, sl
 801b584:	2205      	movs	r2, #5
 801b586:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b58a:	4854      	ldr	r0, [pc, #336]	; (801b6dc <_vfiprintf_r+0x220>)
 801b58c:	f7e6 f958 	bl	8001840 <memchr>
 801b590:	9a04      	ldr	r2, [sp, #16]
 801b592:	b9d8      	cbnz	r0, 801b5cc <_vfiprintf_r+0x110>
 801b594:	06d1      	lsls	r1, r2, #27
 801b596:	bf44      	itt	mi
 801b598:	2320      	movmi	r3, #32
 801b59a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b59e:	0713      	lsls	r3, r2, #28
 801b5a0:	bf44      	itt	mi
 801b5a2:	232b      	movmi	r3, #43	; 0x2b
 801b5a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b5a8:	f89a 3000 	ldrb.w	r3, [sl]
 801b5ac:	2b2a      	cmp	r3, #42	; 0x2a
 801b5ae:	d015      	beq.n	801b5dc <_vfiprintf_r+0x120>
 801b5b0:	9a07      	ldr	r2, [sp, #28]
 801b5b2:	4654      	mov	r4, sl
 801b5b4:	2000      	movs	r0, #0
 801b5b6:	f04f 0c0a 	mov.w	ip, #10
 801b5ba:	4621      	mov	r1, r4
 801b5bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b5c0:	3b30      	subs	r3, #48	; 0x30
 801b5c2:	2b09      	cmp	r3, #9
 801b5c4:	d94d      	bls.n	801b662 <_vfiprintf_r+0x1a6>
 801b5c6:	b1b0      	cbz	r0, 801b5f6 <_vfiprintf_r+0x13a>
 801b5c8:	9207      	str	r2, [sp, #28]
 801b5ca:	e014      	b.n	801b5f6 <_vfiprintf_r+0x13a>
 801b5cc:	eba0 0308 	sub.w	r3, r0, r8
 801b5d0:	fa09 f303 	lsl.w	r3, r9, r3
 801b5d4:	4313      	orrs	r3, r2
 801b5d6:	9304      	str	r3, [sp, #16]
 801b5d8:	46a2      	mov	sl, r4
 801b5da:	e7d2      	b.n	801b582 <_vfiprintf_r+0xc6>
 801b5dc:	9b03      	ldr	r3, [sp, #12]
 801b5de:	1d19      	adds	r1, r3, #4
 801b5e0:	681b      	ldr	r3, [r3, #0]
 801b5e2:	9103      	str	r1, [sp, #12]
 801b5e4:	2b00      	cmp	r3, #0
 801b5e6:	bfbb      	ittet	lt
 801b5e8:	425b      	neglt	r3, r3
 801b5ea:	f042 0202 	orrlt.w	r2, r2, #2
 801b5ee:	9307      	strge	r3, [sp, #28]
 801b5f0:	9307      	strlt	r3, [sp, #28]
 801b5f2:	bfb8      	it	lt
 801b5f4:	9204      	strlt	r2, [sp, #16]
 801b5f6:	7823      	ldrb	r3, [r4, #0]
 801b5f8:	2b2e      	cmp	r3, #46	; 0x2e
 801b5fa:	d10c      	bne.n	801b616 <_vfiprintf_r+0x15a>
 801b5fc:	7863      	ldrb	r3, [r4, #1]
 801b5fe:	2b2a      	cmp	r3, #42	; 0x2a
 801b600:	d134      	bne.n	801b66c <_vfiprintf_r+0x1b0>
 801b602:	9b03      	ldr	r3, [sp, #12]
 801b604:	1d1a      	adds	r2, r3, #4
 801b606:	681b      	ldr	r3, [r3, #0]
 801b608:	9203      	str	r2, [sp, #12]
 801b60a:	2b00      	cmp	r3, #0
 801b60c:	bfb8      	it	lt
 801b60e:	f04f 33ff 	movlt.w	r3, #4294967295
 801b612:	3402      	adds	r4, #2
 801b614:	9305      	str	r3, [sp, #20]
 801b616:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801b6ec <_vfiprintf_r+0x230>
 801b61a:	7821      	ldrb	r1, [r4, #0]
 801b61c:	2203      	movs	r2, #3
 801b61e:	4650      	mov	r0, sl
 801b620:	f7e6 f90e 	bl	8001840 <memchr>
 801b624:	b138      	cbz	r0, 801b636 <_vfiprintf_r+0x17a>
 801b626:	9b04      	ldr	r3, [sp, #16]
 801b628:	eba0 000a 	sub.w	r0, r0, sl
 801b62c:	2240      	movs	r2, #64	; 0x40
 801b62e:	4082      	lsls	r2, r0
 801b630:	4313      	orrs	r3, r2
 801b632:	3401      	adds	r4, #1
 801b634:	9304      	str	r3, [sp, #16]
 801b636:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b63a:	4829      	ldr	r0, [pc, #164]	; (801b6e0 <_vfiprintf_r+0x224>)
 801b63c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b640:	2206      	movs	r2, #6
 801b642:	f7e6 f8fd 	bl	8001840 <memchr>
 801b646:	2800      	cmp	r0, #0
 801b648:	d03f      	beq.n	801b6ca <_vfiprintf_r+0x20e>
 801b64a:	4b26      	ldr	r3, [pc, #152]	; (801b6e4 <_vfiprintf_r+0x228>)
 801b64c:	bb1b      	cbnz	r3, 801b696 <_vfiprintf_r+0x1da>
 801b64e:	9b03      	ldr	r3, [sp, #12]
 801b650:	3307      	adds	r3, #7
 801b652:	f023 0307 	bic.w	r3, r3, #7
 801b656:	3308      	adds	r3, #8
 801b658:	9303      	str	r3, [sp, #12]
 801b65a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b65c:	443b      	add	r3, r7
 801b65e:	9309      	str	r3, [sp, #36]	; 0x24
 801b660:	e768      	b.n	801b534 <_vfiprintf_r+0x78>
 801b662:	fb0c 3202 	mla	r2, ip, r2, r3
 801b666:	460c      	mov	r4, r1
 801b668:	2001      	movs	r0, #1
 801b66a:	e7a6      	b.n	801b5ba <_vfiprintf_r+0xfe>
 801b66c:	2300      	movs	r3, #0
 801b66e:	3401      	adds	r4, #1
 801b670:	9305      	str	r3, [sp, #20]
 801b672:	4619      	mov	r1, r3
 801b674:	f04f 0c0a 	mov.w	ip, #10
 801b678:	4620      	mov	r0, r4
 801b67a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b67e:	3a30      	subs	r2, #48	; 0x30
 801b680:	2a09      	cmp	r2, #9
 801b682:	d903      	bls.n	801b68c <_vfiprintf_r+0x1d0>
 801b684:	2b00      	cmp	r3, #0
 801b686:	d0c6      	beq.n	801b616 <_vfiprintf_r+0x15a>
 801b688:	9105      	str	r1, [sp, #20]
 801b68a:	e7c4      	b.n	801b616 <_vfiprintf_r+0x15a>
 801b68c:	fb0c 2101 	mla	r1, ip, r1, r2
 801b690:	4604      	mov	r4, r0
 801b692:	2301      	movs	r3, #1
 801b694:	e7f0      	b.n	801b678 <_vfiprintf_r+0x1bc>
 801b696:	ab03      	add	r3, sp, #12
 801b698:	9300      	str	r3, [sp, #0]
 801b69a:	462a      	mov	r2, r5
 801b69c:	4b12      	ldr	r3, [pc, #72]	; (801b6e8 <_vfiprintf_r+0x22c>)
 801b69e:	a904      	add	r1, sp, #16
 801b6a0:	4630      	mov	r0, r6
 801b6a2:	f7fd fe09 	bl	80192b8 <_printf_float>
 801b6a6:	4607      	mov	r7, r0
 801b6a8:	1c78      	adds	r0, r7, #1
 801b6aa:	d1d6      	bne.n	801b65a <_vfiprintf_r+0x19e>
 801b6ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b6ae:	07d9      	lsls	r1, r3, #31
 801b6b0:	d405      	bmi.n	801b6be <_vfiprintf_r+0x202>
 801b6b2:	89ab      	ldrh	r3, [r5, #12]
 801b6b4:	059a      	lsls	r2, r3, #22
 801b6b6:	d402      	bmi.n	801b6be <_vfiprintf_r+0x202>
 801b6b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b6ba:	f7fe fc37 	bl	8019f2c <__retarget_lock_release_recursive>
 801b6be:	89ab      	ldrh	r3, [r5, #12]
 801b6c0:	065b      	lsls	r3, r3, #25
 801b6c2:	f53f af1d 	bmi.w	801b500 <_vfiprintf_r+0x44>
 801b6c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b6c8:	e71c      	b.n	801b504 <_vfiprintf_r+0x48>
 801b6ca:	ab03      	add	r3, sp, #12
 801b6cc:	9300      	str	r3, [sp, #0]
 801b6ce:	462a      	mov	r2, r5
 801b6d0:	4b05      	ldr	r3, [pc, #20]	; (801b6e8 <_vfiprintf_r+0x22c>)
 801b6d2:	a904      	add	r1, sp, #16
 801b6d4:	4630      	mov	r0, r6
 801b6d6:	f7fe f877 	bl	80197c8 <_printf_i>
 801b6da:	e7e4      	b.n	801b6a6 <_vfiprintf_r+0x1ea>
 801b6dc:	0801f33c 	.word	0x0801f33c
 801b6e0:	0801f346 	.word	0x0801f346
 801b6e4:	080192b9 	.word	0x080192b9
 801b6e8:	0801b497 	.word	0x0801b497
 801b6ec:	0801f342 	.word	0x0801f342

0801b6f0 <__sflush_r>:
 801b6f0:	898a      	ldrh	r2, [r1, #12]
 801b6f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b6f6:	4605      	mov	r5, r0
 801b6f8:	0710      	lsls	r0, r2, #28
 801b6fa:	460c      	mov	r4, r1
 801b6fc:	d458      	bmi.n	801b7b0 <__sflush_r+0xc0>
 801b6fe:	684b      	ldr	r3, [r1, #4]
 801b700:	2b00      	cmp	r3, #0
 801b702:	dc05      	bgt.n	801b710 <__sflush_r+0x20>
 801b704:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801b706:	2b00      	cmp	r3, #0
 801b708:	dc02      	bgt.n	801b710 <__sflush_r+0x20>
 801b70a:	2000      	movs	r0, #0
 801b70c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b710:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b712:	2e00      	cmp	r6, #0
 801b714:	d0f9      	beq.n	801b70a <__sflush_r+0x1a>
 801b716:	2300      	movs	r3, #0
 801b718:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801b71c:	682f      	ldr	r7, [r5, #0]
 801b71e:	6a21      	ldr	r1, [r4, #32]
 801b720:	602b      	str	r3, [r5, #0]
 801b722:	d032      	beq.n	801b78a <__sflush_r+0x9a>
 801b724:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801b726:	89a3      	ldrh	r3, [r4, #12]
 801b728:	075a      	lsls	r2, r3, #29
 801b72a:	d505      	bpl.n	801b738 <__sflush_r+0x48>
 801b72c:	6863      	ldr	r3, [r4, #4]
 801b72e:	1ac0      	subs	r0, r0, r3
 801b730:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b732:	b10b      	cbz	r3, 801b738 <__sflush_r+0x48>
 801b734:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b736:	1ac0      	subs	r0, r0, r3
 801b738:	2300      	movs	r3, #0
 801b73a:	4602      	mov	r2, r0
 801b73c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b73e:	6a21      	ldr	r1, [r4, #32]
 801b740:	4628      	mov	r0, r5
 801b742:	47b0      	blx	r6
 801b744:	1c43      	adds	r3, r0, #1
 801b746:	89a3      	ldrh	r3, [r4, #12]
 801b748:	d106      	bne.n	801b758 <__sflush_r+0x68>
 801b74a:	6829      	ldr	r1, [r5, #0]
 801b74c:	291d      	cmp	r1, #29
 801b74e:	d82b      	bhi.n	801b7a8 <__sflush_r+0xb8>
 801b750:	4a29      	ldr	r2, [pc, #164]	; (801b7f8 <__sflush_r+0x108>)
 801b752:	410a      	asrs	r2, r1
 801b754:	07d6      	lsls	r6, r2, #31
 801b756:	d427      	bmi.n	801b7a8 <__sflush_r+0xb8>
 801b758:	2200      	movs	r2, #0
 801b75a:	6062      	str	r2, [r4, #4]
 801b75c:	04d9      	lsls	r1, r3, #19
 801b75e:	6922      	ldr	r2, [r4, #16]
 801b760:	6022      	str	r2, [r4, #0]
 801b762:	d504      	bpl.n	801b76e <__sflush_r+0x7e>
 801b764:	1c42      	adds	r2, r0, #1
 801b766:	d101      	bne.n	801b76c <__sflush_r+0x7c>
 801b768:	682b      	ldr	r3, [r5, #0]
 801b76a:	b903      	cbnz	r3, 801b76e <__sflush_r+0x7e>
 801b76c:	6560      	str	r0, [r4, #84]	; 0x54
 801b76e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b770:	602f      	str	r7, [r5, #0]
 801b772:	2900      	cmp	r1, #0
 801b774:	d0c9      	beq.n	801b70a <__sflush_r+0x1a>
 801b776:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b77a:	4299      	cmp	r1, r3
 801b77c:	d002      	beq.n	801b784 <__sflush_r+0x94>
 801b77e:	4628      	mov	r0, r5
 801b780:	f7ff f9f6 	bl	801ab70 <_free_r>
 801b784:	2000      	movs	r0, #0
 801b786:	6360      	str	r0, [r4, #52]	; 0x34
 801b788:	e7c0      	b.n	801b70c <__sflush_r+0x1c>
 801b78a:	2301      	movs	r3, #1
 801b78c:	4628      	mov	r0, r5
 801b78e:	47b0      	blx	r6
 801b790:	1c41      	adds	r1, r0, #1
 801b792:	d1c8      	bne.n	801b726 <__sflush_r+0x36>
 801b794:	682b      	ldr	r3, [r5, #0]
 801b796:	2b00      	cmp	r3, #0
 801b798:	d0c5      	beq.n	801b726 <__sflush_r+0x36>
 801b79a:	2b1d      	cmp	r3, #29
 801b79c:	d001      	beq.n	801b7a2 <__sflush_r+0xb2>
 801b79e:	2b16      	cmp	r3, #22
 801b7a0:	d101      	bne.n	801b7a6 <__sflush_r+0xb6>
 801b7a2:	602f      	str	r7, [r5, #0]
 801b7a4:	e7b1      	b.n	801b70a <__sflush_r+0x1a>
 801b7a6:	89a3      	ldrh	r3, [r4, #12]
 801b7a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b7ac:	81a3      	strh	r3, [r4, #12]
 801b7ae:	e7ad      	b.n	801b70c <__sflush_r+0x1c>
 801b7b0:	690f      	ldr	r7, [r1, #16]
 801b7b2:	2f00      	cmp	r7, #0
 801b7b4:	d0a9      	beq.n	801b70a <__sflush_r+0x1a>
 801b7b6:	0793      	lsls	r3, r2, #30
 801b7b8:	680e      	ldr	r6, [r1, #0]
 801b7ba:	bf08      	it	eq
 801b7bc:	694b      	ldreq	r3, [r1, #20]
 801b7be:	600f      	str	r7, [r1, #0]
 801b7c0:	bf18      	it	ne
 801b7c2:	2300      	movne	r3, #0
 801b7c4:	eba6 0807 	sub.w	r8, r6, r7
 801b7c8:	608b      	str	r3, [r1, #8]
 801b7ca:	f1b8 0f00 	cmp.w	r8, #0
 801b7ce:	dd9c      	ble.n	801b70a <__sflush_r+0x1a>
 801b7d0:	6a21      	ldr	r1, [r4, #32]
 801b7d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801b7d4:	4643      	mov	r3, r8
 801b7d6:	463a      	mov	r2, r7
 801b7d8:	4628      	mov	r0, r5
 801b7da:	47b0      	blx	r6
 801b7dc:	2800      	cmp	r0, #0
 801b7de:	dc06      	bgt.n	801b7ee <__sflush_r+0xfe>
 801b7e0:	89a3      	ldrh	r3, [r4, #12]
 801b7e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b7e6:	81a3      	strh	r3, [r4, #12]
 801b7e8:	f04f 30ff 	mov.w	r0, #4294967295
 801b7ec:	e78e      	b.n	801b70c <__sflush_r+0x1c>
 801b7ee:	4407      	add	r7, r0
 801b7f0:	eba8 0800 	sub.w	r8, r8, r0
 801b7f4:	e7e9      	b.n	801b7ca <__sflush_r+0xda>
 801b7f6:	bf00      	nop
 801b7f8:	dfbffffe 	.word	0xdfbffffe

0801b7fc <_fflush_r>:
 801b7fc:	b538      	push	{r3, r4, r5, lr}
 801b7fe:	690b      	ldr	r3, [r1, #16]
 801b800:	4605      	mov	r5, r0
 801b802:	460c      	mov	r4, r1
 801b804:	b913      	cbnz	r3, 801b80c <_fflush_r+0x10>
 801b806:	2500      	movs	r5, #0
 801b808:	4628      	mov	r0, r5
 801b80a:	bd38      	pop	{r3, r4, r5, pc}
 801b80c:	b118      	cbz	r0, 801b816 <_fflush_r+0x1a>
 801b80e:	6a03      	ldr	r3, [r0, #32]
 801b810:	b90b      	cbnz	r3, 801b816 <_fflush_r+0x1a>
 801b812:	f7fe f987 	bl	8019b24 <__sinit>
 801b816:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b81a:	2b00      	cmp	r3, #0
 801b81c:	d0f3      	beq.n	801b806 <_fflush_r+0xa>
 801b81e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801b820:	07d0      	lsls	r0, r2, #31
 801b822:	d404      	bmi.n	801b82e <_fflush_r+0x32>
 801b824:	0599      	lsls	r1, r3, #22
 801b826:	d402      	bmi.n	801b82e <_fflush_r+0x32>
 801b828:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b82a:	f7fe fb7e 	bl	8019f2a <__retarget_lock_acquire_recursive>
 801b82e:	4628      	mov	r0, r5
 801b830:	4621      	mov	r1, r4
 801b832:	f7ff ff5d 	bl	801b6f0 <__sflush_r>
 801b836:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b838:	07da      	lsls	r2, r3, #31
 801b83a:	4605      	mov	r5, r0
 801b83c:	d4e4      	bmi.n	801b808 <_fflush_r+0xc>
 801b83e:	89a3      	ldrh	r3, [r4, #12]
 801b840:	059b      	lsls	r3, r3, #22
 801b842:	d4e1      	bmi.n	801b808 <_fflush_r+0xc>
 801b844:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b846:	f7fe fb71 	bl	8019f2c <__retarget_lock_release_recursive>
 801b84a:	e7dd      	b.n	801b808 <_fflush_r+0xc>

0801b84c <fiprintf>:
 801b84c:	b40e      	push	{r1, r2, r3}
 801b84e:	b503      	push	{r0, r1, lr}
 801b850:	4601      	mov	r1, r0
 801b852:	ab03      	add	r3, sp, #12
 801b854:	4805      	ldr	r0, [pc, #20]	; (801b86c <fiprintf+0x20>)
 801b856:	f853 2b04 	ldr.w	r2, [r3], #4
 801b85a:	6800      	ldr	r0, [r0, #0]
 801b85c:	9301      	str	r3, [sp, #4]
 801b85e:	f7ff fe2d 	bl	801b4bc <_vfiprintf_r>
 801b862:	b002      	add	sp, #8
 801b864:	f85d eb04 	ldr.w	lr, [sp], #4
 801b868:	b003      	add	sp, #12
 801b86a:	4770      	bx	lr
 801b86c:	200000bc 	.word	0x200000bc

0801b870 <__swhatbuf_r>:
 801b870:	b570      	push	{r4, r5, r6, lr}
 801b872:	460c      	mov	r4, r1
 801b874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b878:	2900      	cmp	r1, #0
 801b87a:	b096      	sub	sp, #88	; 0x58
 801b87c:	4615      	mov	r5, r2
 801b87e:	461e      	mov	r6, r3
 801b880:	da0d      	bge.n	801b89e <__swhatbuf_r+0x2e>
 801b882:	89a3      	ldrh	r3, [r4, #12]
 801b884:	f013 0f80 	tst.w	r3, #128	; 0x80
 801b888:	f04f 0100 	mov.w	r1, #0
 801b88c:	bf0c      	ite	eq
 801b88e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801b892:	2340      	movne	r3, #64	; 0x40
 801b894:	2000      	movs	r0, #0
 801b896:	6031      	str	r1, [r6, #0]
 801b898:	602b      	str	r3, [r5, #0]
 801b89a:	b016      	add	sp, #88	; 0x58
 801b89c:	bd70      	pop	{r4, r5, r6, pc}
 801b89e:	466a      	mov	r2, sp
 801b8a0:	f000 f848 	bl	801b934 <_fstat_r>
 801b8a4:	2800      	cmp	r0, #0
 801b8a6:	dbec      	blt.n	801b882 <__swhatbuf_r+0x12>
 801b8a8:	9901      	ldr	r1, [sp, #4]
 801b8aa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801b8ae:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801b8b2:	4259      	negs	r1, r3
 801b8b4:	4159      	adcs	r1, r3
 801b8b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b8ba:	e7eb      	b.n	801b894 <__swhatbuf_r+0x24>

0801b8bc <__smakebuf_r>:
 801b8bc:	898b      	ldrh	r3, [r1, #12]
 801b8be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b8c0:	079d      	lsls	r5, r3, #30
 801b8c2:	4606      	mov	r6, r0
 801b8c4:	460c      	mov	r4, r1
 801b8c6:	d507      	bpl.n	801b8d8 <__smakebuf_r+0x1c>
 801b8c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801b8cc:	6023      	str	r3, [r4, #0]
 801b8ce:	6123      	str	r3, [r4, #16]
 801b8d0:	2301      	movs	r3, #1
 801b8d2:	6163      	str	r3, [r4, #20]
 801b8d4:	b002      	add	sp, #8
 801b8d6:	bd70      	pop	{r4, r5, r6, pc}
 801b8d8:	ab01      	add	r3, sp, #4
 801b8da:	466a      	mov	r2, sp
 801b8dc:	f7ff ffc8 	bl	801b870 <__swhatbuf_r>
 801b8e0:	9900      	ldr	r1, [sp, #0]
 801b8e2:	4605      	mov	r5, r0
 801b8e4:	4630      	mov	r0, r6
 801b8e6:	f7ff f9b7 	bl	801ac58 <_malloc_r>
 801b8ea:	b948      	cbnz	r0, 801b900 <__smakebuf_r+0x44>
 801b8ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b8f0:	059a      	lsls	r2, r3, #22
 801b8f2:	d4ef      	bmi.n	801b8d4 <__smakebuf_r+0x18>
 801b8f4:	f023 0303 	bic.w	r3, r3, #3
 801b8f8:	f043 0302 	orr.w	r3, r3, #2
 801b8fc:	81a3      	strh	r3, [r4, #12]
 801b8fe:	e7e3      	b.n	801b8c8 <__smakebuf_r+0xc>
 801b900:	89a3      	ldrh	r3, [r4, #12]
 801b902:	6020      	str	r0, [r4, #0]
 801b904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b908:	81a3      	strh	r3, [r4, #12]
 801b90a:	9b00      	ldr	r3, [sp, #0]
 801b90c:	6163      	str	r3, [r4, #20]
 801b90e:	9b01      	ldr	r3, [sp, #4]
 801b910:	6120      	str	r0, [r4, #16]
 801b912:	b15b      	cbz	r3, 801b92c <__smakebuf_r+0x70>
 801b914:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b918:	4630      	mov	r0, r6
 801b91a:	f000 f81d 	bl	801b958 <_isatty_r>
 801b91e:	b128      	cbz	r0, 801b92c <__smakebuf_r+0x70>
 801b920:	89a3      	ldrh	r3, [r4, #12]
 801b922:	f023 0303 	bic.w	r3, r3, #3
 801b926:	f043 0301 	orr.w	r3, r3, #1
 801b92a:	81a3      	strh	r3, [r4, #12]
 801b92c:	89a3      	ldrh	r3, [r4, #12]
 801b92e:	431d      	orrs	r5, r3
 801b930:	81a5      	strh	r5, [r4, #12]
 801b932:	e7cf      	b.n	801b8d4 <__smakebuf_r+0x18>

0801b934 <_fstat_r>:
 801b934:	b538      	push	{r3, r4, r5, lr}
 801b936:	4d07      	ldr	r5, [pc, #28]	; (801b954 <_fstat_r+0x20>)
 801b938:	2300      	movs	r3, #0
 801b93a:	4604      	mov	r4, r0
 801b93c:	4608      	mov	r0, r1
 801b93e:	4611      	mov	r1, r2
 801b940:	602b      	str	r3, [r5, #0]
 801b942:	f7e7 fd0a 	bl	800335a <_fstat>
 801b946:	1c43      	adds	r3, r0, #1
 801b948:	d102      	bne.n	801b950 <_fstat_r+0x1c>
 801b94a:	682b      	ldr	r3, [r5, #0]
 801b94c:	b103      	cbz	r3, 801b950 <_fstat_r+0x1c>
 801b94e:	6023      	str	r3, [r4, #0]
 801b950:	bd38      	pop	{r3, r4, r5, pc}
 801b952:	bf00      	nop
 801b954:	200072dc 	.word	0x200072dc

0801b958 <_isatty_r>:
 801b958:	b538      	push	{r3, r4, r5, lr}
 801b95a:	4d06      	ldr	r5, [pc, #24]	; (801b974 <_isatty_r+0x1c>)
 801b95c:	2300      	movs	r3, #0
 801b95e:	4604      	mov	r4, r0
 801b960:	4608      	mov	r0, r1
 801b962:	602b      	str	r3, [r5, #0]
 801b964:	f7e7 fd09 	bl	800337a <_isatty>
 801b968:	1c43      	adds	r3, r0, #1
 801b96a:	d102      	bne.n	801b972 <_isatty_r+0x1a>
 801b96c:	682b      	ldr	r3, [r5, #0]
 801b96e:	b103      	cbz	r3, 801b972 <_isatty_r+0x1a>
 801b970:	6023      	str	r3, [r4, #0]
 801b972:	bd38      	pop	{r3, r4, r5, pc}
 801b974:	200072dc 	.word	0x200072dc

0801b978 <_sbrk_r>:
 801b978:	b538      	push	{r3, r4, r5, lr}
 801b97a:	4d06      	ldr	r5, [pc, #24]	; (801b994 <_sbrk_r+0x1c>)
 801b97c:	2300      	movs	r3, #0
 801b97e:	4604      	mov	r4, r0
 801b980:	4608      	mov	r0, r1
 801b982:	602b      	str	r3, [r5, #0]
 801b984:	f7e7 fd12 	bl	80033ac <_sbrk>
 801b988:	1c43      	adds	r3, r0, #1
 801b98a:	d102      	bne.n	801b992 <_sbrk_r+0x1a>
 801b98c:	682b      	ldr	r3, [r5, #0]
 801b98e:	b103      	cbz	r3, 801b992 <_sbrk_r+0x1a>
 801b990:	6023      	str	r3, [r4, #0]
 801b992:	bd38      	pop	{r3, r4, r5, pc}
 801b994:	200072dc 	.word	0x200072dc

0801b998 <abort>:
 801b998:	b508      	push	{r3, lr}
 801b99a:	2006      	movs	r0, #6
 801b99c:	f000 f860 	bl	801ba60 <raise>
 801b9a0:	2001      	movs	r0, #1
 801b9a2:	f7e7 fc8b 	bl	80032bc <_exit>

0801b9a6 <_calloc_r>:
 801b9a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b9a8:	fba1 2402 	umull	r2, r4, r1, r2
 801b9ac:	b94c      	cbnz	r4, 801b9c2 <_calloc_r+0x1c>
 801b9ae:	4611      	mov	r1, r2
 801b9b0:	9201      	str	r2, [sp, #4]
 801b9b2:	f7ff f951 	bl	801ac58 <_malloc_r>
 801b9b6:	9a01      	ldr	r2, [sp, #4]
 801b9b8:	4605      	mov	r5, r0
 801b9ba:	b930      	cbnz	r0, 801b9ca <_calloc_r+0x24>
 801b9bc:	4628      	mov	r0, r5
 801b9be:	b003      	add	sp, #12
 801b9c0:	bd30      	pop	{r4, r5, pc}
 801b9c2:	220c      	movs	r2, #12
 801b9c4:	6002      	str	r2, [r0, #0]
 801b9c6:	2500      	movs	r5, #0
 801b9c8:	e7f8      	b.n	801b9bc <_calloc_r+0x16>
 801b9ca:	4621      	mov	r1, r4
 801b9cc:	f7fe fa36 	bl	8019e3c <memset>
 801b9d0:	e7f4      	b.n	801b9bc <_calloc_r+0x16>

0801b9d2 <__ascii_mbtowc>:
 801b9d2:	b082      	sub	sp, #8
 801b9d4:	b901      	cbnz	r1, 801b9d8 <__ascii_mbtowc+0x6>
 801b9d6:	a901      	add	r1, sp, #4
 801b9d8:	b142      	cbz	r2, 801b9ec <__ascii_mbtowc+0x1a>
 801b9da:	b14b      	cbz	r3, 801b9f0 <__ascii_mbtowc+0x1e>
 801b9dc:	7813      	ldrb	r3, [r2, #0]
 801b9de:	600b      	str	r3, [r1, #0]
 801b9e0:	7812      	ldrb	r2, [r2, #0]
 801b9e2:	1e10      	subs	r0, r2, #0
 801b9e4:	bf18      	it	ne
 801b9e6:	2001      	movne	r0, #1
 801b9e8:	b002      	add	sp, #8
 801b9ea:	4770      	bx	lr
 801b9ec:	4610      	mov	r0, r2
 801b9ee:	e7fb      	b.n	801b9e8 <__ascii_mbtowc+0x16>
 801b9f0:	f06f 0001 	mvn.w	r0, #1
 801b9f4:	e7f8      	b.n	801b9e8 <__ascii_mbtowc+0x16>

0801b9f6 <__ascii_wctomb>:
 801b9f6:	b149      	cbz	r1, 801ba0c <__ascii_wctomb+0x16>
 801b9f8:	2aff      	cmp	r2, #255	; 0xff
 801b9fa:	bf85      	ittet	hi
 801b9fc:	238a      	movhi	r3, #138	; 0x8a
 801b9fe:	6003      	strhi	r3, [r0, #0]
 801ba00:	700a      	strbls	r2, [r1, #0]
 801ba02:	f04f 30ff 	movhi.w	r0, #4294967295
 801ba06:	bf98      	it	ls
 801ba08:	2001      	movls	r0, #1
 801ba0a:	4770      	bx	lr
 801ba0c:	4608      	mov	r0, r1
 801ba0e:	4770      	bx	lr

0801ba10 <_raise_r>:
 801ba10:	291f      	cmp	r1, #31
 801ba12:	b538      	push	{r3, r4, r5, lr}
 801ba14:	4604      	mov	r4, r0
 801ba16:	460d      	mov	r5, r1
 801ba18:	d904      	bls.n	801ba24 <_raise_r+0x14>
 801ba1a:	2316      	movs	r3, #22
 801ba1c:	6003      	str	r3, [r0, #0]
 801ba1e:	f04f 30ff 	mov.w	r0, #4294967295
 801ba22:	bd38      	pop	{r3, r4, r5, pc}
 801ba24:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801ba26:	b112      	cbz	r2, 801ba2e <_raise_r+0x1e>
 801ba28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ba2c:	b94b      	cbnz	r3, 801ba42 <_raise_r+0x32>
 801ba2e:	4620      	mov	r0, r4
 801ba30:	f000 f830 	bl	801ba94 <_getpid_r>
 801ba34:	462a      	mov	r2, r5
 801ba36:	4601      	mov	r1, r0
 801ba38:	4620      	mov	r0, r4
 801ba3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ba3e:	f000 b817 	b.w	801ba70 <_kill_r>
 801ba42:	2b01      	cmp	r3, #1
 801ba44:	d00a      	beq.n	801ba5c <_raise_r+0x4c>
 801ba46:	1c59      	adds	r1, r3, #1
 801ba48:	d103      	bne.n	801ba52 <_raise_r+0x42>
 801ba4a:	2316      	movs	r3, #22
 801ba4c:	6003      	str	r3, [r0, #0]
 801ba4e:	2001      	movs	r0, #1
 801ba50:	e7e7      	b.n	801ba22 <_raise_r+0x12>
 801ba52:	2400      	movs	r4, #0
 801ba54:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801ba58:	4628      	mov	r0, r5
 801ba5a:	4798      	blx	r3
 801ba5c:	2000      	movs	r0, #0
 801ba5e:	e7e0      	b.n	801ba22 <_raise_r+0x12>

0801ba60 <raise>:
 801ba60:	4b02      	ldr	r3, [pc, #8]	; (801ba6c <raise+0xc>)
 801ba62:	4601      	mov	r1, r0
 801ba64:	6818      	ldr	r0, [r3, #0]
 801ba66:	f7ff bfd3 	b.w	801ba10 <_raise_r>
 801ba6a:	bf00      	nop
 801ba6c:	200000bc 	.word	0x200000bc

0801ba70 <_kill_r>:
 801ba70:	b538      	push	{r3, r4, r5, lr}
 801ba72:	4d07      	ldr	r5, [pc, #28]	; (801ba90 <_kill_r+0x20>)
 801ba74:	2300      	movs	r3, #0
 801ba76:	4604      	mov	r4, r0
 801ba78:	4608      	mov	r0, r1
 801ba7a:	4611      	mov	r1, r2
 801ba7c:	602b      	str	r3, [r5, #0]
 801ba7e:	f7e7 fc0b 	bl	8003298 <_kill>
 801ba82:	1c43      	adds	r3, r0, #1
 801ba84:	d102      	bne.n	801ba8c <_kill_r+0x1c>
 801ba86:	682b      	ldr	r3, [r5, #0]
 801ba88:	b103      	cbz	r3, 801ba8c <_kill_r+0x1c>
 801ba8a:	6023      	str	r3, [r4, #0]
 801ba8c:	bd38      	pop	{r3, r4, r5, pc}
 801ba8e:	bf00      	nop
 801ba90:	200072dc 	.word	0x200072dc

0801ba94 <_getpid_r>:
 801ba94:	f7e7 bbf8 	b.w	8003288 <_getpid>

0801ba98 <_init>:
 801ba98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ba9a:	bf00      	nop
 801ba9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ba9e:	bc08      	pop	{r3}
 801baa0:	469e      	mov	lr, r3
 801baa2:	4770      	bx	lr

0801baa4 <_fini>:
 801baa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801baa6:	bf00      	nop
 801baa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801baaa:	bc08      	pop	{r3}
 801baac:	469e      	mov	lr, r3
 801baae:	4770      	bx	lr

0801bab0 <__MW_update_veneer>:
 801bab0:	f85f f000 	ldr.w	pc, [pc]	; 801bab4 <__MW_update_veneer+0x4>
 801bab4:	00000e25 	.word	0x00000e25

0801bab8 <__start_continuous_MW_sweep_veneer>:
 801bab8:	f85f f000 	ldr.w	pc, [pc]	; 801babc <__start_continuous_MW_sweep_veneer+0x4>
 801babc:	00000e09 	.word	0x00000e09

0801bac0 <__stop_timer_veneer>:
 801bac0:	f85f f000 	ldr.w	pc, [pc]	; 801bac4 <__stop_timer_veneer+0x4>
 801bac4:	00001309 	.word	0x00001309

0801bac8 <__timer_delay_veneer>:
 801bac8:	f85f f000 	ldr.w	pc, [pc]	; 801bacc <__timer_delay_veneer+0x4>
 801bacc:	00001345 	.word	0x00001345

0801bad0 <__stop_pop_veneer>:
 801bad0:	f85f f000 	ldr.w	pc, [pc]	; 801bad4 <__stop_pop_veneer+0x4>
 801bad4:	00001491 	.word	0x00001491

0801bad8 <__start_POP_calibration_veneer>:
 801bad8:	f85f f000 	ldr.w	pc, [pc]	; 801badc <__start_POP_calibration_veneer+0x4>
 801badc:	00000d09 	.word	0x00000d09

0801bae0 <__check_timer_veneer>:
 801bae0:	f85f f000 	ldr.w	pc, [pc]	; 801bae4 <__check_timer_veneer+0x4>
 801bae4:	0000132d 	.word	0x0000132d

0801bae8 <__calc_fixed_time_MW_sweep_veneer>:
 801bae8:	f85f f000 	ldr.w	pc, [pc]	; 801baec <__calc_fixed_time_MW_sweep_veneer+0x4>
 801baec:	00000891 	.word	0x00000891

0801baf0 <__init_synthesiser_veneer>:
 801baf0:	f85f f000 	ldr.w	pc, [pc]	; 801baf4 <__init_synthesiser_veneer+0x4>
 801baf4:	00000181 	.word	0x00000181

0801baf8 <__set_MW_power_veneer>:
 801baf8:	f85f f000 	ldr.w	pc, [pc]	; 801bafc <__set_MW_power_veneer+0x4>
 801bafc:	00000123 	.word	0x00000123

0801bb00 <__start_timer_veneer>:
 801bb00:	f85f f000 	ldr.w	pc, [pc]	; 801bb04 <__start_timer_veneer+0x4>
 801bb04:	000012cd 	.word	0x000012cd

0801bb08 <__start_pop_veneer>:
 801bb08:	f85f f000 	ldr.w	pc, [pc]	; 801bb0c <__start_pop_veneer+0x4>
 801bb0c:	00001435 	.word	0x00001435
