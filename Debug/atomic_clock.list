
atomic_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .itcm         000008f0  00000000  08000298  00020000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00009c60  08000b90  08000b90  00020b90  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .user_flash   00000000  08100000  08100000  000300a0  2**0
                  CONTENTS
  4 .rodata       00000268  0800a7f0  0800a7f0  0002a7f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  0800aa58  0800aa58  0002aa58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .init_array   00000004  0800aa60  0800aa60  0002aa60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa64  0800aa64  0002aa64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  0800aa68  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  200000a0  0800ab08  000300a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000338  0800ab08  00030338  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000300a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f2c5  00000000  00000000  000300ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002eed  00000000  00000000  0004f393  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001800  00000000  00000000  00052280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016e8  00000000  00000000  00053a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003a30b  00000000  00000000  00055168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c152  00000000  00000000  0008f473  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017c85a  00000000  00000000  000ab5c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00227e1f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007080  00000000  00000000  00227e70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .itcm:

00000000 <synth_writereg>:
PUTCHAR_PROTOTYPE {
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
	return ch;
}

static uint32_t synth_writereg(const uint32_t data, const uint32_t reg_address, const uint32_t chip_address, const bool verify) {
   0:	b580      	push	{r7, lr}
   2:	b08a      	sub	sp, #40	; 0x28
   4:	af00      	add	r7, sp, #0
   6:	60f8      	str	r0, [r7, #12]
   8:	60b9      	str	r1, [r7, #8]
   a:	607a      	str	r2, [r7, #4]
   c:	70fb      	strb	r3, [r7, #3]

	uint32_t read_data = 0;
   e:	2300      	movs	r3, #0
  10:	627b      	str	r3, [r7, #36]	; 0x24
	const uint32_t write_data = (data << 8) | (reg_address << 3) | chip_address; // This is what we will write, 32 bits in total.
  12:	68fb      	ldr	r3, [r7, #12]
  14:	021a      	lsls	r2, r3, #8
  16:	68bb      	ldr	r3, [r7, #8]
  18:	00db      	lsls	r3, r3, #3
  1a:	4313      	orrs	r3, r2
  1c:	687a      	ldr	r2, [r7, #4]
  1e:	4313      	orrs	r3, r2
  20:	61fb      	str	r3, [r7, #28]

	//printf("SPI BYTES WRITTEN: 0x%08x \r\n", write_data);

	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
  22:	2200      	movs	r2, #0
  24:	f44f 7180 	mov.w	r1, #256	; 0x100
  28:	4830      	ldr	r0, [pc, #192]	; (ec <synth_writereg+0xec>)
  2a:	f000 fc51 	bl	8d0 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 0); // Take SEN low to indicate we are sending data
  2e:	2200      	movs	r2, #0
  30:	f44f 6100 	mov.w	r1, #2048	; 0x800
  34:	482d      	ldr	r0, [pc, #180]	; (ec <synth_writereg+0xec>)
  36:	f000 fc4b 	bl	8d0 <__HAL_GPIO_WritePin_veneer>

	/* Clock in the data */
	for (uint32_t i = 0; i < SYNTH_SPI_BITS; i++) {
  3a:	2300      	movs	r3, #0
  3c:	623b      	str	r3, [r7, #32]
  3e:	e036      	b.n	ae <synth_writereg+0xae>

		/* Data written on the rising edge */
		uint32_t bit = (SYNTH_SPI_BITS - 1 - i);
  40:	2220      	movs	r2, #32
  42:	6a3b      	ldr	r3, [r7, #32]
  44:	1ad3      	subs	r3, r2, r3
  46:	3b01      	subs	r3, #1
  48:	617b      	str	r3, [r7, #20]
		HAL_GPIO_WritePin(MOSI_GPIO_Port, MOSI_Pin, !!(write_data & (1 << bit)));
  4a:	2201      	movs	r2, #1
  4c:	697b      	ldr	r3, [r7, #20]
  4e:	fa02 f303 	lsl.w	r3, r2, r3
  52:	461a      	mov	r2, r3
  54:	69fb      	ldr	r3, [r7, #28]
  56:	4013      	ands	r3, r2
  58:	2b00      	cmp	r3, #0
  5a:	bf14      	ite	ne
  5c:	2301      	movne	r3, #1
  5e:	2300      	moveq	r3, #0
  60:	b2db      	uxtb	r3, r3
  62:	461a      	mov	r2, r3
  64:	f44f 7100 	mov.w	r1, #512	; 0x200
  68:	4820      	ldr	r0, [pc, #128]	; (ec <synth_writereg+0xec>)
  6a:	f000 fc31 	bl	8d0 <__HAL_GPIO_WritePin_veneer>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 1);
  6e:	2201      	movs	r2, #1
  70:	f44f 7180 	mov.w	r1, #256	; 0x100
  74:	481d      	ldr	r0, [pc, #116]	; (ec <synth_writereg+0xec>)
  76:	f000 fc2b 	bl	8d0 <__HAL_GPIO_WritePin_veneer>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
  7a:	2200      	movs	r2, #0
  7c:	f44f 7180 	mov.w	r1, #256	; 0x100
  80:	481a      	ldr	r0, [pc, #104]	; (ec <synth_writereg+0xec>)
  82:	f000 fc25 	bl	8d0 <__HAL_GPIO_WritePin_veneer>

		/* Data read on the falling edge */
		read_data = read_data
				| (HAL_GPIO_ReadPin(MISO_GPIO_Port, MISO_Pin)
  86:	f44f 6180 	mov.w	r1, #1024	; 0x400
  8a:	4818      	ldr	r0, [pc, #96]	; (ec <synth_writereg+0xec>)
  8c:	f000 fc10 	bl	8b0 <__HAL_GPIO_ReadPin_veneer>
  90:	4603      	mov	r3, r0
  92:	4619      	mov	r1, r3
						<< (SYNTH_SPI_BITS - 1 - i));
  94:	2220      	movs	r2, #32
  96:	6a3b      	ldr	r3, [r7, #32]
  98:	1ad3      	subs	r3, r2, r3
  9a:	3b01      	subs	r3, #1
  9c:	fa01 f303 	lsl.w	r3, r1, r3
  a0:	461a      	mov	r2, r3
		read_data = read_data
  a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  a4:	4313      	orrs	r3, r2
  a6:	627b      	str	r3, [r7, #36]	; 0x24
	for (uint32_t i = 0; i < SYNTH_SPI_BITS; i++) {
  a8:	6a3b      	ldr	r3, [r7, #32]
  aa:	3301      	adds	r3, #1
  ac:	623b      	str	r3, [r7, #32]
  ae:	2220      	movs	r2, #32
  b0:	6a3b      	ldr	r3, [r7, #32]
  b2:	4293      	cmp	r3, r2
  b4:	d3c4      	bcc.n	40 <synth_writereg+0x40>
	}

	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 1); // Assert the SEN line to register the transmitted data
  b6:	2201      	movs	r2, #1
  b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
  bc:	480b      	ldr	r0, [pc, #44]	; (ec <synth_writereg+0xec>)
  be:	f000 fc07 	bl	8d0 <__HAL_GPIO_WritePin_veneer>

	if (verify) {
  c2:	78fb      	ldrb	r3, [r7, #3]
  c4:	2b00      	cmp	r3, #0
  c6:	d00c      	beq.n	e2 <synth_writereg+0xe2>
		const uint32_t verify_data = synth_readreg(reg_address); // Data returned on the second cycle
  c8:	68b8      	ldr	r0, [r7, #8]
  ca:	f000 f813 	bl	f4 <synth_readreg>
  ce:	61b8      	str	r0, [r7, #24]
		if (verify_data != data) {
  d0:	69ba      	ldr	r2, [r7, #24]
  d2:	68fb      	ldr	r3, [r7, #12]
  d4:	429a      	cmp	r2, r3
  d6:	d004      	beq.n	e2 <synth_writereg+0xe2>
			printf("SPI transmission error!\n");
  d8:	4805      	ldr	r0, [pc, #20]	; (f0 <synth_writereg+0xf0>)
  da:	f000 fbdd 	bl	898 <__puts_veneer>
			Error_Handler(); // We enter an infinite loop here
  de:	f000 fc03 	bl	8e8 <__Error_Handler_veneer>
		}
	}

	return read_data;
  e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
  e4:	4618      	mov	r0, r3
  e6:	3728      	adds	r7, #40	; 0x28
  e8:	46bd      	mov	sp, r7
  ea:	bd80      	pop	{r7, pc}
  ec:	58020800 	.word	0x58020800
  f0:	0800a7f0 	.word	0x0800a7f0

000000f4 <synth_readreg>:

static uint32_t synth_readreg(const uint32_t reg_address){
  f4:	b580      	push	{r7, lr}
  f6:	b084      	sub	sp, #16
  f8:	af00      	add	r7, sp, #0
  fa:	6078      	str	r0, [r7, #4]

    synth_writereg(reg_address, 0x0, 0x0, false); // First cycle to send the read address
  fc:	2300      	movs	r3, #0
  fe:	2200      	movs	r2, #0
 100:	2100      	movs	r1, #0
 102:	6878      	ldr	r0, [r7, #4]
 104:	f7ff ff7c 	bl	0 <synth_writereg>
    const uint32_t read_data = synth_writereg(reg_address, 0x0, 0x0, false);  // Data returned on the second cycle
 108:	2300      	movs	r3, #0
 10a:	2200      	movs	r2, #0
 10c:	2100      	movs	r1, #0
 10e:	6878      	ldr	r0, [r7, #4]
 110:	f7ff ff76 	bl	0 <synth_writereg>
 114:	60f8      	str	r0, [r7, #12]

    return (read_data >> 8); // We only care about the first 24 bits returned.
 116:	68fb      	ldr	r3, [r7, #12]
 118:	0a1b      	lsrs	r3, r3, #8

}
 11a:	4618      	mov	r0, r3
 11c:	3710      	adds	r7, #16
 11e:	46bd      	mov	sp, r7
 120:	bd80      	pop	{r7, pc}

00000122 <init_synthesiser>:

static uint32_t init_synthesiser() {
 122:	b580      	push	{r7, lr}
 124:	b082      	sub	sp, #8
 126:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET); // Turn off the lock LED
 128:	2200      	movs	r2, #0
 12a:	2102      	movs	r1, #2
 12c:	4835      	ldr	r0, [pc, #212]	; (204 <_Min_Heap_Size+0x4>)
 12e:	f000 fbcf 	bl	8d0 <__HAL_GPIO_WritePin_veneer>

	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
 132:	2200      	movs	r2, #0
 134:	f44f 7180 	mov.w	r1, #256	; 0x100
 138:	4833      	ldr	r0, [pc, #204]	; (208 <_Min_Heap_Size+0x8>)
 13a:	f000 fbc9 	bl	8d0 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 1);
 13e:	2201      	movs	r2, #1
 140:	f44f 6100 	mov.w	r1, #2048	; 0x800
 144:	4830      	ldr	r0, [pc, #192]	; (208 <_Min_Heap_Size+0x8>)
 146:	f000 fbc3 	bl	8d0 <__HAL_GPIO_WritePin_veneer>

	HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 1); // Enable the main regulator.
 14a:	2201      	movs	r2, #1
 14c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 150:	482d      	ldr	r0, [pc, #180]	; (208 <_Min_Heap_Size+0x8>)
 152:	f000 fbbd 	bl	8d0 <__HAL_GPIO_WritePin_veneer>

	HAL_Delay(100); // Wait 100 ms for the supply to stabilise.
 156:	2064      	movs	r0, #100	; 0x64
 158:	f000 fbae 	bl	8b8 <__HAL_Delay_veneer>

	synth_writereg(0x1UL << 5, 0x0, 0x0, false); // Soft reset.
 15c:	2300      	movs	r3, #0
 15e:	2200      	movs	r2, #0
 160:	2100      	movs	r1, #0
 162:	2020      	movs	r0, #32
 164:	f7ff ff4c 	bl	0 <synth_writereg>
	synth_writereg(0x41BFFF, 0x08, 0x0, true); // Set the SDO output level to 3.3 Volts
 168:	2301      	movs	r3, #1
 16a:	2200      	movs	r2, #0
 16c:	2108      	movs	r1, #8
 16e:	4827      	ldr	r0, [pc, #156]	; (20c <_Min_Heap_Size+0xc>)
 170:	f7ff ff46 	bl	0 <synth_writereg>

	uint32_t read_data = synth_readreg(0x00); // Read the ID register to check the chip is communicating
 174:	2000      	movs	r0, #0
 176:	f7ff ffbd 	bl	f4 <synth_readreg>
 17a:	6078      	str	r0, [r7, #4]
	/* Check we have the correct ID */
	if (read_data != SYNTH_ID) {
 17c:	4a24      	ldr	r2, [pc, #144]	; (210 <_Min_Heap_Size+0x10>)
 17e:	687b      	ldr	r3, [r7, #4]
 180:	4293      	cmp	r3, r2
 182:	d00a      	beq.n	19a <init_synthesiser+0x78>
		HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 0); // Disable the main regulator.
 184:	2200      	movs	r2, #0
 186:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 18a:	481f      	ldr	r0, [pc, #124]	; (208 <_Min_Heap_Size+0x8>)
 18c:	f000 fba0 	bl	8d0 <__HAL_GPIO_WritePin_veneer>
		printf("Incorrect synthesiser ID!\r\n");
 190:	4820      	ldr	r0, [pc, #128]	; (214 <_Min_Heap_Size+0x14>)
 192:	f000 fb81 	bl	898 <__puts_veneer>
		return ERROR;
 196:	2301      	movs	r3, #1
 198:	e030      	b.n	1fc <init_synthesiser+0xda>
	}

	/* Everything looks good, we can communicate with the chip :-) */
	printf("HMC835 Detected.\r\n");
 19a:	481f      	ldr	r0, [pc, #124]	; (218 <_Min_Heap_Size+0x18>)
 19c:	f000 fb7c 	bl	898 <__puts_veneer>

	/* Enables Single-Ended output mode for LO2 output */
	read_data = synth_readreg(0x17); // Get the current value of the modes register
 1a0:	2017      	movs	r0, #23
 1a2:	f7ff ffa7 	bl	f4 <synth_readreg>
 1a6:	6078      	str	r0, [r7, #4]
	read_data |= (0x1UL << 9);     // Enable single ended output for LO2 (LO2_P)
 1a8:	687b      	ldr	r3, [r7, #4]
 1aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 1ae:	607b      	str	r3, [r7, #4]
	synth_writereg(read_data, 0x17, 0x0, true); // Send
 1b0:	2301      	movs	r3, #1
 1b2:	2200      	movs	r2, #0
 1b4:	2117      	movs	r1, #23
 1b6:	6878      	ldr	r0, [r7, #4]
 1b8:	f7ff ff22 	bl	0 <synth_writereg>
	//read_data = synth_readreg(0x7); // Get the current value.
	//read_data &= 0xFFFFFFF8; // Zero the first 3 LSBs.
	//read_data |= 0x07;
	//synth_writereg(read_data, 0x07, 0x0, true); // Update the VCO divide register.

	synth_writereg(1, 0x02, 0x0, true); // Reference divider setting.
 1bc:	2301      	movs	r3, #1
 1be:	2200      	movs	r2, #0
 1c0:	2102      	movs	r1, #2
 1c2:	2001      	movs	r0, #1
 1c4:	f7ff ff1c 	bl	0 <synth_writereg>

	/* Lock detect training: This must be done after any change to the PD
	 * reference frequency or after power cycle. */
	read_data = synth_readreg(0x16); // Get the current value
 1c8:	2016      	movs	r0, #22
 1ca:	f7ff ff93 	bl	f4 <synth_readreg>
 1ce:	6078      	str	r0, [r7, #4]
	read_data |= (0x1UL << 11);      // Enable lock-detect counters.
 1d0:	687b      	ldr	r3, [r7, #4]
 1d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 1d6:	607b      	str	r3, [r7, #4]
	read_data |= (0x1UL << 14);      // Enable the lock-detect timer.
 1d8:	687b      	ldr	r3, [r7, #4]
 1da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 1de:	607b      	str	r3, [r7, #4]
	read_data |= (0x1UL << 20);      // Train the lock-detect timer.
 1e0:	687b      	ldr	r3, [r7, #4]
 1e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 1e6:	607b      	str	r3, [r7, #4]
	synth_writereg(read_data, 0x07, 0x0, true); // Send
 1e8:	2301      	movs	r3, #1
 1ea:	2200      	movs	r2, #0
 1ec:	2107      	movs	r1, #7
 1ee:	6878      	ldr	r0, [r7, #4]
 1f0:	f7ff ff06 	bl	0 <synth_writereg>
	HAL_Delay(10); // Wait 10 ms for training to complete, not sure if we really need to do this.
 1f4:	200a      	movs	r0, #10
 1f6:	f000 fb5f 	bl	8b8 <__HAL_Delay_veneer>

	return SUCCESS;
 1fa:	2300      	movs	r3, #0

}
 1fc:	4618      	mov	r0, r3
 1fe:	3708      	adds	r7, #8
 200:	46bd      	mov	sp, r7
 202:	bd80      	pop	{r7, pc}
 204:	58021000 	.word	0x58021000
 208:	58020800 	.word	0x58020800
 20c:	0041bfff 	.word	0x0041bfff
 210:	00c7701a 	.word	0x00c7701a
 214:	0800a808 	.word	0x0800a808
 218:	0800a824 	.word	0x0800a824

0000021c <check_lock>:

static const bool check_lock(uint32_t timeout) {
 21c:	b580      	push	{r7, lr}
 21e:	b084      	sub	sp, #16
 220:	af00      	add	r7, sp, #0
 222:	6078      	str	r0, [r7, #4]

	bool locked = false;
 224:	2300      	movs	r3, #0
 226:	73fb      	strb	r3, [r7, #15]

	/* Check for lock */
	uint32_t start = start_timer(FAST_TIMER);
 228:	4b16      	ldr	r3, [pc, #88]	; (284 <check_lock+0x68>)
 22a:	681b      	ldr	r3, [r3, #0]
 22c:	4618      	mov	r0, r3
 22e:	f000 fa0f 	bl	650 <start_timer>
 232:	60b8      	str	r0, [r7, #8]

	while ((FAST_TIMER->CNT - start) < timeout) {
 234:	e014      	b.n	260 <check_lock+0x44>
		locked = synth_readreg(0x12) & (1UL << 1);
 236:	2012      	movs	r0, #18
 238:	f7ff ff5c 	bl	f4 <synth_readreg>
 23c:	4603      	mov	r3, r0
 23e:	f003 0302 	and.w	r3, r3, #2
 242:	2b00      	cmp	r3, #0
 244:	bf14      	ite	ne
 246:	2301      	movne	r3, #1
 248:	2300      	moveq	r3, #0
 24a:	73fb      	strb	r3, [r7, #15]
		if (locked) {
 24c:	7bfb      	ldrb	r3, [r7, #15]
 24e:	2b00      	cmp	r3, #0
 250:	d006      	beq.n	260 <check_lock+0x44>
			stop_timer(FAST_TIMER);
 252:	4b0c      	ldr	r3, [pc, #48]	; (284 <check_lock+0x68>)
 254:	681b      	ldr	r3, [r3, #0]
 256:	4618      	mov	r0, r3
 258:	f000 fa18 	bl	68c <stop_timer>
			return true;
 25c:	2301      	movs	r3, #1
 25e:	e00d      	b.n	27c <check_lock+0x60>
	while ((FAST_TIMER->CNT - start) < timeout) {
 260:	4b08      	ldr	r3, [pc, #32]	; (284 <check_lock+0x68>)
 262:	681b      	ldr	r3, [r3, #0]
 264:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 266:	68bb      	ldr	r3, [r7, #8]
 268:	1ad3      	subs	r3, r2, r3
 26a:	687a      	ldr	r2, [r7, #4]
 26c:	429a      	cmp	r2, r3
 26e:	d8e2      	bhi.n	236 <check_lock+0x1a>
		}
	}

	stop_timer(FAST_TIMER);
 270:	4b04      	ldr	r3, [pc, #16]	; (284 <check_lock+0x68>)
 272:	681b      	ldr	r3, [r3, #0]
 274:	4618      	mov	r0, r3
 276:	f000 fa09 	bl	68c <stop_timer>
	return false;
 27a:	2300      	movs	r3, #0
}
 27c:	4618      	mov	r0, r3
 27e:	3710      	adds	r7, #16
 280:	46bd      	mov	sp, r7
 282:	bd80      	pop	{r7, pc}
 284:	20000004 	.word	0x20000004

00000288 <set_frequency>:

static void set_frequency(const uint32_t integer, const uint32_t fraction, const uint32_t vco_divider, bool mute) {
 288:	b580      	push	{r7, lr}
 28a:	b086      	sub	sp, #24
 28c:	af00      	add	r7, sp, #0
 28e:	60f8      	str	r0, [r7, #12]
 290:	60b9      	str	r1, [r7, #8]
 292:	607a      	str	r2, [r7, #4]
 294:	70fb      	strb	r3, [r7, #3]

	static uint32_t last_integer = -1, last_fraction = -1, last_vcodiv = -1;

	uint32_t read_data = 0x0;
 296:	2300      	movs	r3, #0
 298:	617b      	str	r3, [r7, #20]

	if (mute) {
 29a:	78fb      	ldrb	r3, [r7, #3]
 29c:	2b00      	cmp	r3, #0
 29e:	d00d      	beq.n	2bc <set_frequency+0x34>
		/* Mute the outputs */
		read_data = synth_readreg(0x16); // Get the current value.
 2a0:	2016      	movs	r0, #22
 2a2:	f7ff ff27 	bl	f4 <synth_readreg>
 2a6:	6178      	str	r0, [r7, #20]
		read_data &= 0xFFFFFFC0; // Zero the first 6 LSBs (VCO division value - mute).
 2a8:	697b      	ldr	r3, [r7, #20]
 2aa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 2ae:	617b      	str	r3, [r7, #20]
		synth_writereg(read_data, 0x16, 0x0, true); // Update the VCO divide register.
 2b0:	2301      	movs	r3, #1
 2b2:	2200      	movs	r2, #0
 2b4:	2116      	movs	r1, #22
 2b6:	6978      	ldr	r0, [r7, #20]
 2b8:	f7ff fea2 	bl	0 <synth_writereg>
	}

	if (last_integer == -1 || (last_integer != integer)) {
 2bc:	4b2e      	ldr	r3, [pc, #184]	; (378 <set_frequency+0xf0>)
 2be:	681b      	ldr	r3, [r3, #0]
 2c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 2c4:	d004      	beq.n	2d0 <set_frequency+0x48>
 2c6:	4b2c      	ldr	r3, [pc, #176]	; (378 <set_frequency+0xf0>)
 2c8:	681b      	ldr	r3, [r3, #0]
 2ca:	68fa      	ldr	r2, [r7, #12]
 2cc:	429a      	cmp	r2, r3
 2ce:	d008      	beq.n	2e2 <set_frequency+0x5a>
		synth_writereg(integer, 0x03, 0x0, true);   // Integer register.
 2d0:	2301      	movs	r3, #1
 2d2:	2200      	movs	r2, #0
 2d4:	2103      	movs	r1, #3
 2d6:	68f8      	ldr	r0, [r7, #12]
 2d8:	f7ff fe92 	bl	0 <synth_writereg>
		last_integer = integer;
 2dc:	4a26      	ldr	r2, [pc, #152]	; (378 <set_frequency+0xf0>)
 2de:	68fb      	ldr	r3, [r7, #12]
 2e0:	6013      	str	r3, [r2, #0]
	}

	if (last_fraction == -1 || (last_fraction != fraction)) {
 2e2:	4b26      	ldr	r3, [pc, #152]	; (37c <set_frequency+0xf4>)
 2e4:	681b      	ldr	r3, [r3, #0]
 2e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 2ea:	d004      	beq.n	2f6 <set_frequency+0x6e>
 2ec:	4b23      	ldr	r3, [pc, #140]	; (37c <set_frequency+0xf4>)
 2ee:	681b      	ldr	r3, [r3, #0]
 2f0:	68ba      	ldr	r2, [r7, #8]
 2f2:	429a      	cmp	r2, r3
 2f4:	d008      	beq.n	308 <set_frequency+0x80>
		synth_writereg(fraction, 0x04, 0x0, true);  // Fractional register.
 2f6:	2301      	movs	r3, #1
 2f8:	2200      	movs	r2, #0
 2fa:	2104      	movs	r1, #4
 2fc:	68b8      	ldr	r0, [r7, #8]
 2fe:	f7ff fe7f 	bl	0 <synth_writereg>
		last_fraction = fraction;
 302:	4a1e      	ldr	r2, [pc, #120]	; (37c <set_frequency+0xf4>)
 304:	68bb      	ldr	r3, [r7, #8]
 306:	6013      	str	r3, [r2, #0]
	}

	if (last_vcodiv == -1 || (last_vcodiv != vco_divider)) {
 308:	4b1d      	ldr	r3, [pc, #116]	; (380 <set_frequency+0xf8>)
 30a:	681b      	ldr	r3, [r3, #0]
 30c:	f1b3 3fff 	cmp.w	r3, #4294967295
 310:	d004      	beq.n	31c <set_frequency+0x94>
 312:	4b1b      	ldr	r3, [pc, #108]	; (380 <set_frequency+0xf8>)
 314:	681b      	ldr	r3, [r3, #0]
 316:	687a      	ldr	r2, [r7, #4]
 318:	429a      	cmp	r2, r3
 31a:	d014      	beq.n	346 <set_frequency+0xbe>
		read_data = synth_readreg(0x16); // Get the current value.
 31c:	2016      	movs	r0, #22
 31e:	f7ff fee9 	bl	f4 <synth_readreg>
 322:	6178      	str	r0, [r7, #20]
		read_data &= 0xFFFFFFC0; // Zero the first 6 LSBs (VCO division value - mute).
 324:	697b      	ldr	r3, [r7, #20]
 326:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 32a:	617b      	str	r3, [r7, #20]
		read_data |= vco_divider; // This will un-mute the outputs */
 32c:	697a      	ldr	r2, [r7, #20]
 32e:	687b      	ldr	r3, [r7, #4]
 330:	4313      	orrs	r3, r2
 332:	617b      	str	r3, [r7, #20]
		synth_writereg(read_data, 0x16, 0x0, true); // Update the VCO divide register.
 334:	2301      	movs	r3, #1
 336:	2200      	movs	r2, #0
 338:	2116      	movs	r1, #22
 33a:	6978      	ldr	r0, [r7, #20]
 33c:	f7ff fe60 	bl	0 <synth_writereg>
		last_vcodiv = vco_divider;
 340:	4a0f      	ldr	r2, [pc, #60]	; (380 <set_frequency+0xf8>)
 342:	687b      	ldr	r3, [r7, #4]
 344:	6013      	str	r3, [r2, #0]
	}

	if (!check_lock(LOCK_WAIT_US)) {
 346:	230a      	movs	r3, #10
 348:	4618      	mov	r0, r3
 34a:	f7ff ff67 	bl	21c <check_lock>
 34e:	4603      	mov	r3, r0
 350:	f083 0301 	eor.w	r3, r3, #1
 354:	b2db      	uxtb	r3, r3
 356:	2b00      	cmp	r3, #0
 358:	d009      	beq.n	36e <set_frequency+0xe6>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 35a:	2200      	movs	r2, #0
 35c:	2102      	movs	r1, #2
 35e:	4809      	ldr	r0, [pc, #36]	; (384 <set_frequency+0xfc>)
 360:	f000 fab6 	bl	8d0 <__HAL_GPIO_WritePin_veneer>
		printf("Lock failed!\r\n");
 364:	4808      	ldr	r0, [pc, #32]	; (388 <set_frequency+0x100>)
 366:	f000 fa97 	bl	898 <__puts_veneer>
		Error_Handler();
 36a:	f000 fabd 	bl	8e8 <__Error_Handler_veneer>
	}

}
 36e:	bf00      	nop
 370:	3718      	adds	r7, #24
 372:	46bd      	mov	sp, r7
 374:	bd80      	pop	{r7, pc}
 376:	bf00      	nop
 378:	20000008 	.word	0x20000008
 37c:	2000000c 	.word	0x2000000c
 380:	20000010 	.word	0x20000010
 384:	58021000 	.word	0x58021000
 388:	0800a838 	.word	0x0800a838

0000038c <set_frequency_hz>:
	HAL_DAC_Stop(&hdac1, DAC_CHANNEL_1);
#endif

}

static void set_frequency_hz(const double fo) {
 38c:	b580      	push	{r7, lr}
 38e:	b08a      	sub	sp, #40	; 0x28
 390:	af00      	add	r7, sp, #0
 392:	ed87 0b00 	vstr	d0, [r7]

	/* For the k divider we need to find the smallest even integer or use a max of 62*/
	uint32_t k = VCO_MAX_FREQ / fo;
 396:	ed9f 5b3c 	vldr	d5, [pc, #240]	; 488 <_Min_Stack_Size+0x88>
 39a:	ed97 6b00 	vldr	d6, [r7]
 39e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 3a2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 3a6:	ee17 3a90 	vmov	r3, s15
 3aa:	627b      	str	r3, [r7, #36]	; 0x24

	if (k != 1) {
 3ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 3ae:	2b01      	cmp	r3, #1
 3b0:	d00b      	beq.n	3ca <set_frequency_hz+0x3e>
		while (k > 62 || k % 2) {
 3b2:	e002      	b.n	3ba <set_frequency_hz+0x2e>
			k = k - 1;
 3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 3b6:	3b01      	subs	r3, #1
 3b8:	627b      	str	r3, [r7, #36]	; 0x24
		while (k > 62 || k % 2) {
 3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 3bc:	2b3e      	cmp	r3, #62	; 0x3e
 3be:	d8f9      	bhi.n	3b4 <set_frequency_hz+0x28>
 3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 3c2:	f003 0301 	and.w	r3, r3, #1
 3c6:	2b00      	cmp	r3, #0
 3c8:	d1f4      	bne.n	3b4 <set_frequency_hz+0x28>
		}
	}

	/* Calculate the N division ratio */
	const double N = ((fo * k) / REF_FREQ);
 3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 3cc:	ee07 3a90 	vmov	s15, r3
 3d0:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 3d4:	ed97 7b00 	vldr	d7, [r7]
 3d8:	ee26 6b07 	vmul.f64	d6, d6, d7
 3dc:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 490 <_Min_Stack_Size+0x90>
 3e0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 3e4:	ed87 7b06 	vstr	d7, [r7, #24]

	/* Extract the fractional and integer parts */
	const uint32_t NINT = N;
 3e8:	ed97 7b06 	vldr	d7, [r7, #24]
 3ec:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 3f0:	ee17 3a90 	vmov	r3, s15
 3f4:	617b      	str	r3, [r7, #20]
	const uint32_t NFRAC = ((N - NINT) * (1 << 24)) + 0.5;
 3f6:	697b      	ldr	r3, [r7, #20]
 3f8:	ee07 3a90 	vmov	s15, r3
 3fc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 400:	ed97 6b06 	vldr	d6, [r7, #24]
 404:	ee36 7b47 	vsub.f64	d7, d6, d7
 408:	ed9f 6b23 	vldr	d6, [pc, #140]	; 498 <_Min_Stack_Size+0x98>
 40c:	ee27 7b06 	vmul.f64	d7, d7, d6
 410:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 414:	ee37 7b06 	vadd.f64	d7, d7, d6
 418:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 41c:	ee17 3a90 	vmov	r3, s15
 420:	613b      	str	r3, [r7, #16]

	const double fo_check = (REF_FREQ * (NINT + (NFRAC / (double) (1 << 24)))) / k;
 422:	697b      	ldr	r3, [r7, #20]
 424:	ee07 3a90 	vmov	s15, r3
 428:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 42c:	693b      	ldr	r3, [r7, #16]
 42e:	ee07 3a90 	vmov	s15, r3
 432:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 436:	ed9f 4b18 	vldr	d4, [pc, #96]	; 498 <_Min_Stack_Size+0x98>
 43a:	ee85 7b04 	vdiv.f64	d7, d5, d4
 43e:	ee36 7b07 	vadd.f64	d7, d6, d7
 442:	ed9f 6b13 	vldr	d6, [pc, #76]	; 490 <_Min_Stack_Size+0x90>
 446:	ee27 5b06 	vmul.f64	d5, d7, d6
 44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 44c:	ee07 3a90 	vmov	s15, r3
 450:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 454:	ee85 7b06 	vdiv.f64	d7, d5, d6
 458:	ed87 7b02 	vstr	d7, [r7, #8]
	if (fo != fo_check) {
 45c:	ed97 6b00 	vldr	d6, [r7]
 460:	ed97 7b02 	vldr	d7, [r7, #8]
 464:	eeb4 6b47 	vcmp.f64	d6, d7
 468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 46c:	d001      	beq.n	472 <_Min_Stack_Size+0x72>
		Error_Handler();
 46e:	f000 fa3b 	bl	8e8 <__Error_Handler_veneer>
	}

	set_frequency(NINT, NFRAC, k, false);
 472:	2300      	movs	r3, #0
 474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 476:	6939      	ldr	r1, [r7, #16]
 478:	6978      	ldr	r0, [r7, #20]
 47a:	f7ff ff05 	bl	288 <set_frequency>

}
 47e:	bf00      	nop
 480:	3728      	adds	r7, #40	; 0x28
 482:	46bd      	mov	sp, r7
 484:	bd80      	pop	{r7, pc}
 486:	bf00      	nop
 488:	20000000 	.word	0x20000000
 48c:	41ee8c21 	.word	0x41ee8c21
 490:	00000000 	.word	0x00000000
 494:	4187d784 	.word	0x4187d784
 498:	00000000 	.word	0x00000000
 49c:	41700000 	.word	0x41700000

000004a0 <run_sweep>:
static void run_sweep() {
 4a0:	b580      	push	{r7, lr}
 4a2:	b08e      	sub	sp, #56	; 0x38
 4a4:	af04      	add	r7, sp, #16
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET); // Assume we are locked, the LED will be disabled if lock fails.
 4a6:	2201      	movs	r2, #1
 4a8:	2102      	movs	r1, #2
 4aa:	4863      	ldr	r0, [pc, #396]	; (638 <run_sweep+0x198>)
 4ac:	f000 fa10 	bl	8d0 <__HAL_GPIO_WritePin_veneer>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 4b0:	b672      	cpsid	i
}
 4b2:	bf00      	nop
	for (uint32_t i = 0; i < num_points; i++) {
 4b4:	2300      	movs	r3, #0
 4b6:	627b      	str	r3, [r7, #36]	; 0x24
 4b8:	e09b      	b.n	5f2 <run_sweep+0x152>
		double fo = start_freq + (i * sweep_settings.step_size);
 4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 4bc:	ee07 3a90 	vmov	s15, r3
 4c0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 4c4:	ed9f 6b54 	vldr	d6, [pc, #336]	; 618 <run_sweep+0x178>
 4c8:	ee27 6b06 	vmul.f64	d6, d7, d6
 4cc:	4b5b      	ldr	r3, [pc, #364]	; (63c <run_sweep+0x19c>)
 4ce:	ed93 7b00 	vldr	d7, [r3]
 4d2:	ee36 7b07 	vadd.f64	d7, d6, d7
 4d6:	ed87 7b06 	vstr	d7, [r7, #24]
		uint32_t k = VCO_MAX_FREQ / fo;
 4da:	ed9f 5b51 	vldr	d5, [pc, #324]	; 620 <run_sweep+0x180>
 4de:	ed97 6b06 	vldr	d6, [r7, #24]
 4e2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 4e6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 4ea:	ee17 3a90 	vmov	r3, s15
 4ee:	623b      	str	r3, [r7, #32]
		if (k != 1) {
 4f0:	6a3b      	ldr	r3, [r7, #32]
 4f2:	2b01      	cmp	r3, #1
 4f4:	d00b      	beq.n	50e <run_sweep+0x6e>
			while (k > 62 || k % 2) {
 4f6:	e002      	b.n	4fe <run_sweep+0x5e>
				k = k - 1;
 4f8:	6a3b      	ldr	r3, [r7, #32]
 4fa:	3b01      	subs	r3, #1
 4fc:	623b      	str	r3, [r7, #32]
			while (k > 62 || k % 2) {
 4fe:	6a3b      	ldr	r3, [r7, #32]
 500:	2b3e      	cmp	r3, #62	; 0x3e
 502:	d8f9      	bhi.n	4f8 <run_sweep+0x58>
 504:	6a3b      	ldr	r3, [r7, #32]
 506:	f003 0301 	and.w	r3, r3, #1
 50a:	2b00      	cmp	r3, #0
 50c:	d1f4      	bne.n	4f8 <run_sweep+0x58>
		const double N = ((fo * k) / REF_FREQ);
 50e:	6a3b      	ldr	r3, [r7, #32]
 510:	ee07 3a90 	vmov	s15, r3
 514:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 518:	ed97 7b06 	vldr	d7, [r7, #24]
 51c:	ee26 6b07 	vmul.f64	d6, d6, d7
 520:	ed9f 5b41 	vldr	d5, [pc, #260]	; 628 <run_sweep+0x188>
 524:	ee86 7b05 	vdiv.f64	d7, d6, d5
 528:	ed87 7b04 	vstr	d7, [r7, #16]
		const uint32_t NINT = N;
 52c:	ed97 7b04 	vldr	d7, [r7, #16]
 530:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 534:	ee17 3a90 	vmov	r3, s15
 538:	60fb      	str	r3, [r7, #12]
		const uint32_t NFRAC = ((N - NINT) * (1 << 24)) + 0.5;
 53a:	68fb      	ldr	r3, [r7, #12]
 53c:	ee07 3a90 	vmov	s15, r3
 540:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 544:	ed97 6b04 	vldr	d6, [r7, #16]
 548:	ee36 7b47 	vsub.f64	d7, d6, d7
 54c:	ed9f 6b38 	vldr	d6, [pc, #224]	; 630 <run_sweep+0x190>
 550:	ee27 7b06 	vmul.f64	d7, d7, d6
 554:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 558:	ee37 7b06 	vadd.f64	d7, d7, d6
 55c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 560:	ee17 3a90 	vmov	r3, s15
 564:	60bb      	str	r3, [r7, #8]
		const double fo_check = (REF_FREQ * (NINT + (NFRAC / (double) (1 << 24)))) / k;
 566:	68fb      	ldr	r3, [r7, #12]
 568:	ee07 3a90 	vmov	s15, r3
 56c:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 570:	68bb      	ldr	r3, [r7, #8]
 572:	ee07 3a90 	vmov	s15, r3
 576:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 57a:	ed9f 4b2d 	vldr	d4, [pc, #180]	; 630 <run_sweep+0x190>
 57e:	ee85 7b04 	vdiv.f64	d7, d5, d4
 582:	ee36 7b07 	vadd.f64	d7, d6, d7
 586:	ed9f 6b28 	vldr	d6, [pc, #160]	; 628 <run_sweep+0x188>
 58a:	ee27 5b06 	vmul.f64	d5, d7, d6
 58e:	6a3b      	ldr	r3, [r7, #32]
 590:	ee07 3a90 	vmov	s15, r3
 594:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 598:	ee85 7b06 	vdiv.f64	d7, d5, d6
 59c:	ed87 7b00 	vstr	d7, [r7]
		if (fo != fo_check) {
 5a0:	ed97 6b06 	vldr	d6, [r7, #24]
 5a4:	ed97 7b00 	vldr	d7, [r7]
 5a8:	eeb4 6b47 	vcmp.f64	d6, d7
 5ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 5b0:	d001      	beq.n	5b6 <run_sweep+0x116>
			Error_Handler();
 5b2:	f000 f999 	bl	8e8 <__Error_Handler_veneer>
		printf("Setting frequency: k=%ld; N=%f; NINT=%ld; NFRAC=%ld; f=%f Hz\r\n", k,N, NINT, NFRAC, fo);
 5b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 5ba:	e9cd 2302 	strd	r2, r3, [sp, #8]
 5be:	68bb      	ldr	r3, [r7, #8]
 5c0:	9301      	str	r3, [sp, #4]
 5c2:	68fb      	ldr	r3, [r7, #12]
 5c4:	9300      	str	r3, [sp, #0]
 5c6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 5ca:	6a39      	ldr	r1, [r7, #32]
 5cc:	481c      	ldr	r0, [pc, #112]	; (640 <run_sweep+0x1a0>)
 5ce:	f000 f967 	bl	8a0 <__printf_veneer>
		set_frequency(NINT, NFRAC, k, false);
 5d2:	2300      	movs	r3, #0
 5d4:	6a3a      	ldr	r2, [r7, #32]
 5d6:	68b9      	ldr	r1, [r7, #8]
 5d8:	68f8      	ldr	r0, [r7, #12]
 5da:	f7ff fe55 	bl	288 <set_frequency>
		timer_delay(FAST_TIMER, DWELL_TIME_US);
 5de:	4b19      	ldr	r3, [pc, #100]	; (644 <run_sweep+0x1a4>)
 5e0:	681b      	ldr	r3, [r3, #0]
 5e2:	2264      	movs	r2, #100	; 0x64
 5e4:	4611      	mov	r1, r2
 5e6:	4618      	mov	r0, r3
 5e8:	f000 f862 	bl	6b0 <timer_delay>
	for (uint32_t i = 0; i < num_points; i++) {
 5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 5ee:	3301      	adds	r3, #1
 5f0:	627b      	str	r3, [r7, #36]	; 0x24
 5f2:	4b15      	ldr	r3, [pc, #84]	; (648 <run_sweep+0x1a8>)
 5f4:	681b      	ldr	r3, [r3, #0]
 5f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 5f8:	429a      	cmp	r2, r3
 5fa:	f4ff af5e 	bcc.w	4ba <run_sweep+0x1a>
  __ASM volatile ("cpsie i" : : : "memory");
 5fe:	b662      	cpsie	i
}
 600:	bf00      	nop
	printf("Total Points: %lu; s\r\n", num_points);
 602:	4b11      	ldr	r3, [pc, #68]	; (648 <run_sweep+0x1a8>)
 604:	681b      	ldr	r3, [r3, #0]
 606:	4619      	mov	r1, r3
 608:	4810      	ldr	r0, [pc, #64]	; (64c <run_sweep+0x1ac>)
 60a:	f000 f949 	bl	8a0 <__printf_veneer>
}
 60e:	bf00      	nop
 610:	3728      	adds	r7, #40	; 0x28
 612:	46bd      	mov	sp, r7
 614:	bd80      	pop	{r7, pc}
 616:	bf00      	nop
 618:	00000000 	.word	0x00000000
 61c:	4007d784 	.word	0x4007d784
 620:	20000000 	.word	0x20000000
 624:	41ee8c21 	.word	0x41ee8c21
 628:	00000000 	.word	0x00000000
 62c:	4187d784 	.word	0x4187d784
 630:	00000000 	.word	0x00000000
 634:	41700000 	.word	0x41700000
 638:	58021000 	.word	0x58021000
 63c:	0800a970 	.word	0x0800a970
 640:	0800a848 	.word	0x0800a848
 644:	20000004 	.word	0x20000004
 648:	0800a978 	.word	0x0800a978
 64c:	0800a888 	.word	0x0800a888

00000650 <start_timer>:
	HAL_GPIO_WritePin(ATT_8_GPIO_Port, ATT_8_Pin, a.ATT_8DB);
	HAL_GPIO_WritePin(ATT_16_GPIO_Port, ATT_16_Pin, a.ATT_16DB);

}

static uint32_t start_timer(TIM_TypeDef * timer) {
 650:	b480      	push	{r7}
 652:	b083      	sub	sp, #12
 654:	af00      	add	r7, sp, #0
 656:	6078      	str	r0, [r7, #4]

	timer->CR1 &= ~(TIM_CR1_CEN);
 658:	687b      	ldr	r3, [r7, #4]
 65a:	681b      	ldr	r3, [r3, #0]
 65c:	f023 0201 	bic.w	r2, r3, #1
 660:	687b      	ldr	r3, [r7, #4]
 662:	601a      	str	r2, [r3, #0]
	timer->EGR |= TIM_EGR_UG;  // Reset CNT and PSC
 664:	687b      	ldr	r3, [r7, #4]
 666:	695b      	ldr	r3, [r3, #20]
 668:	f043 0201 	orr.w	r2, r3, #1
 66c:	687b      	ldr	r3, [r7, #4]
 66e:	615a      	str	r2, [r3, #20]
	timer->CR1 |= TIM_CR1_CEN;
 670:	687b      	ldr	r3, [r7, #4]
 672:	681b      	ldr	r3, [r3, #0]
 674:	f043 0201 	orr.w	r2, r3, #1
 678:	687b      	ldr	r3, [r7, #4]
 67a:	601a      	str	r2, [r3, #0]
	return timer->CNT;
 67c:	687b      	ldr	r3, [r7, #4]
 67e:	6a5b      	ldr	r3, [r3, #36]	; 0x24

}
 680:	4618      	mov	r0, r3
 682:	370c      	adds	r7, #12
 684:	46bd      	mov	sp, r7
 686:	f85d 7b04 	ldr.w	r7, [sp], #4
 68a:	4770      	bx	lr

0000068c <stop_timer>:

uint32_t stop_timer(TIM_TypeDef *timer) {
 68c:	b480      	push	{r7}
 68e:	b083      	sub	sp, #12
 690:	af00      	add	r7, sp, #0
 692:	6078      	str	r0, [r7, #4]

	timer->CR1 &= ~(TIM_CR1_CEN);
 694:	687b      	ldr	r3, [r7, #4]
 696:	681b      	ldr	r3, [r3, #0]
 698:	f023 0201 	bic.w	r2, r3, #1
 69c:	687b      	ldr	r3, [r7, #4]
 69e:	601a      	str	r2, [r3, #0]
	return timer->CNT;
 6a0:	687b      	ldr	r3, [r7, #4]
 6a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 6a4:	4618      	mov	r0, r3
 6a6:	370c      	adds	r7, #12
 6a8:	46bd      	mov	sp, r7
 6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 6ae:	4770      	bx	lr

000006b0 <timer_delay>:

static void timer_delay(TIM_TypeDef *timer, const uint32_t delay_count){
 6b0:	b480      	push	{r7}
 6b2:	b085      	sub	sp, #20
 6b4:	af00      	add	r7, sp, #0
 6b6:	6078      	str	r0, [r7, #4]
 6b8:	6039      	str	r1, [r7, #0]

	timer->CR1 &= ~(TIM_CR1_CEN); // Disable the timer
 6ba:	687b      	ldr	r3, [r7, #4]
 6bc:	681b      	ldr	r3, [r3, #0]
 6be:	f023 0201 	bic.w	r2, r3, #1
 6c2:	687b      	ldr	r3, [r7, #4]
 6c4:	601a      	str	r2, [r3, #0]
	timer->EGR |= TIM_EGR_UG;  // Reset CNT and PSC
 6c6:	687b      	ldr	r3, [r7, #4]
 6c8:	695b      	ldr	r3, [r3, #20]
 6ca:	f043 0201 	orr.w	r2, r3, #1
 6ce:	687b      	ldr	r3, [r7, #4]
 6d0:	615a      	str	r2, [r3, #20]
	timer->CR1 |= TIM_CR1_CEN; // Enable the timer
 6d2:	687b      	ldr	r3, [r7, #4]
 6d4:	681b      	ldr	r3, [r3, #0]
 6d6:	f043 0201 	orr.w	r2, r3, #1
 6da:	687b      	ldr	r3, [r7, #4]
 6dc:	601a      	str	r2, [r3, #0]
	uint32_t start = timer->CNT; // Get the start value of the timer
 6de:	687b      	ldr	r3, [r7, #4]
 6e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 6e2:	60fb      	str	r3, [r7, #12]

	/* Note that we don't consider overflow, if the timer is clocked at 1 MHz
	 * a 16 bit counter will take approximately 65 ms to overflow. */

	while((timer->CNT - start) < delay_count){} // Loop until delay_us has expired
 6e4:	bf00      	nop
 6e6:	687b      	ldr	r3, [r7, #4]
 6e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 6ea:	68fb      	ldr	r3, [r7, #12]
 6ec:	1ad3      	subs	r3, r2, r3
 6ee:	683a      	ldr	r2, [r7, #0]
 6f0:	429a      	cmp	r2, r3
 6f2:	d8f8      	bhi.n	6e6 <timer_delay+0x36>
	timer->CR1 &= ~(TIM_CR1_CEN); // Disable the timer
 6f4:	687b      	ldr	r3, [r7, #4]
 6f6:	681b      	ldr	r3, [r3, #0]
 6f8:	f023 0201 	bic.w	r2, r3, #1
 6fc:	687b      	ldr	r3, [r7, #4]
 6fe:	601a      	str	r2, [r3, #0]

}
 700:	bf00      	nop
 702:	3714      	adds	r7, #20
 704:	46bd      	mov	sp, r7
 706:	f85d 7b04 	ldr.w	r7, [sp], #4
 70a:	4770      	bx	lr

0000070c <set_aom_atten>:
static void set_aom_atten(const struct AttenuatorSettings a) {
 70c:	b580      	push	{r7, lr}
 70e:	b082      	sub	sp, #8
 710:	af00      	add	r7, sp, #0
 712:	7138      	strb	r0, [r7, #4]
	HAL_GPIO_WritePin(ATT_LE_GPIO_Port, ATT_LE_Pin, GPIO_PIN_SET);
 714:	2201      	movs	r2, #1
 716:	2180      	movs	r1, #128	; 0x80
 718:	4822      	ldr	r0, [pc, #136]	; (7a4 <set_aom_atten+0x98>)
 71a:	f000 f8d9 	bl	8d0 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_025_GPIO_Port, ATT_025_Pin, a.ATT_0DB25);
 71e:	793b      	ldrb	r3, [r7, #4]
 720:	f3c3 0300 	ubfx	r3, r3, #0, #1
 724:	b2db      	uxtb	r3, r3
 726:	461a      	mov	r2, r3
 728:	2140      	movs	r1, #64	; 0x40
 72a:	481e      	ldr	r0, [pc, #120]	; (7a4 <set_aom_atten+0x98>)
 72c:	f000 f8d0 	bl	8d0 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_05_GPIO_Port, ATT_05_Pin, a.ATT_0DB5);
 730:	793b      	ldrb	r3, [r7, #4]
 732:	f3c3 0340 	ubfx	r3, r3, #1, #1
 736:	b2db      	uxtb	r3, r3
 738:	461a      	mov	r2, r3
 73a:	2120      	movs	r1, #32
 73c:	4819      	ldr	r0, [pc, #100]	; (7a4 <set_aom_atten+0x98>)
 73e:	f000 f8c7 	bl	8d0 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_1_GPIO_Port, ATT_1_Pin, a.ATT_1DB);
 742:	793b      	ldrb	r3, [r7, #4]
 744:	f3c3 0380 	ubfx	r3, r3, #2, #1
 748:	b2db      	uxtb	r3, r3
 74a:	461a      	mov	r2, r3
 74c:	2110      	movs	r1, #16
 74e:	4815      	ldr	r0, [pc, #84]	; (7a4 <set_aom_atten+0x98>)
 750:	f000 f8be 	bl	8d0 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_2_GPIO_Port, ATT_2_Pin, a.ATT_2DB);
 754:	793b      	ldrb	r3, [r7, #4]
 756:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 75a:	b2db      	uxtb	r3, r3
 75c:	461a      	mov	r2, r3
 75e:	2108      	movs	r1, #8
 760:	4810      	ldr	r0, [pc, #64]	; (7a4 <set_aom_atten+0x98>)
 762:	f000 f8b5 	bl	8d0 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_4_GPIO_Port, ATT_4_Pin, a.ATT_4DB);
 766:	793b      	ldrb	r3, [r7, #4]
 768:	f3c3 1300 	ubfx	r3, r3, #4, #1
 76c:	b2db      	uxtb	r3, r3
 76e:	461a      	mov	r2, r3
 770:	2104      	movs	r1, #4
 772:	480d      	ldr	r0, [pc, #52]	; (7a8 <set_aom_atten+0x9c>)
 774:	f000 f8ac 	bl	8d0 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_8_GPIO_Port, ATT_8_Pin, a.ATT_8DB);
 778:	793b      	ldrb	r3, [r7, #4]
 77a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 77e:	b2db      	uxtb	r3, r3
 780:	461a      	mov	r2, r3
 782:	2110      	movs	r1, #16
 784:	4808      	ldr	r0, [pc, #32]	; (7a8 <set_aom_atten+0x9c>)
 786:	f000 f8a3 	bl	8d0 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_16_GPIO_Port, ATT_16_Pin, a.ATT_16DB);
 78a:	793b      	ldrb	r3, [r7, #4]
 78c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 790:	b2db      	uxtb	r3, r3
 792:	461a      	mov	r2, r3
 794:	2120      	movs	r1, #32
 796:	4804      	ldr	r0, [pc, #16]	; (7a8 <set_aom_atten+0x9c>)
 798:	f000 f89a 	bl	8d0 <__HAL_GPIO_WritePin_veneer>
}
 79c:	bf00      	nop
 79e:	3708      	adds	r7, #8
 7a0:	46bd      	mov	sp, r7
 7a2:	bd80      	pop	{r7, pc}
 7a4:	58020c00 	.word	0x58020c00
 7a8:	58021000 	.word	0x58021000

000007ac <start_pop>:

	printf("POP cycle stopped!\r\n");

}

static void start_pop() {
 7ac:	b580      	push	{r7, lr}
 7ae:	af00      	add	r7, sp, #0

	/* Timer A is the LASER enable, Timer E is the microwave pulse */
	if (HAL_HRTIM_WaveformOutputStart(&hhrtim,
 7b0:	f240 1103 	movw	r1, #259	; 0x103
 7b4:	481b      	ldr	r0, [pc, #108]	; (824 <start_pop+0x78>)
 7b6:	f000 f877 	bl	8a8 <__HAL_HRTIM_WaveformOutputStart_veneer>
 7ba:	4603      	mov	r3, r0
 7bc:	2b00      	cmp	r3, #0
 7be:	d001      	beq.n	7c4 <start_pop+0x18>
	HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TE1) != HAL_OK) {
		Error_Handler();
 7c0:	f000 f892 	bl	8e8 <__Error_Handler_veneer>
	}

#ifdef POP_START_PULSE

	if (HAL_HRTIM_WaveformSetOutputLevel(&hhrtim,
 7c4:	2302      	movs	r3, #2
 7c6:	2202      	movs	r2, #2
 7c8:	2100      	movs	r1, #0
 7ca:	4816      	ldr	r0, [pc, #88]	; (824 <start_pop+0x78>)
 7cc:	f000 f87c 	bl	8c8 <__HAL_HRTIM_WaveformSetOutputLevel_veneer>
 7d0:	4603      	mov	r3, r0
 7d2:	2b00      	cmp	r3, #0
 7d4:	d001      	beq.n	7da <start_pop+0x2e>
	HRTIM_TIMERINDEX_TIMER_A,
	HRTIM_OUTPUT_TA2, HRTIM_OUTPUTLEVEL_INACTIVE) != HAL_OK) {
		Error_Handler();
 7d6:	f000 f887 	bl	8e8 <__Error_Handler_veneer>
	}

	timer_delay(SLOW_TIMER, 1000);
 7da:	4b13      	ldr	r3, [pc, #76]	; (828 <start_pop+0x7c>)
 7dc:	681b      	ldr	r3, [r3, #0]
 7de:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 7e2:	4618      	mov	r0, r3
 7e4:	f7ff ff64 	bl	6b0 <timer_delay>

	if (HAL_HRTIM_WaveformSetOutputLevel(&hhrtim,
 7e8:	2301      	movs	r3, #1
 7ea:	2202      	movs	r2, #2
 7ec:	2100      	movs	r1, #0
 7ee:	480d      	ldr	r0, [pc, #52]	; (824 <start_pop+0x78>)
 7f0:	f000 f86a 	bl	8c8 <__HAL_HRTIM_WaveformSetOutputLevel_veneer>
 7f4:	4603      	mov	r3, r0
 7f6:	2b00      	cmp	r3, #0
 7f8:	d001      	beq.n	7fe <start_pop+0x52>
	HRTIM_TIMERINDEX_TIMER_A,
	HRTIM_OUTPUT_TA2, HRTIM_OUTPUTLEVEL_ACTIVE) != HAL_OK) {
		Error_Handler();
 7fa:	f000 f875 	bl	8e8 <__Error_Handler_veneer>
	}

#endif

	if (HAL_HRTIM_WaveformCounterStart_IT(&hhrtim,
 7fe:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
 802:	4808      	ldr	r0, [pc, #32]	; (824 <start_pop+0x78>)
 804:	f000 f868 	bl	8d8 <__HAL_HRTIM_WaveformCountStart_IT_veneer>
 808:	4603      	mov	r3, r0
 80a:	2b00      	cmp	r3, #0
 80c:	d001      	beq.n	812 <start_pop+0x66>
	HRTIM_TIMERID_TIMER_A | HRTIM_TIMERID_TIMER_E) != HAL_OK) {
		Error_Handler();
 80e:	f000 f86b 	bl	8e8 <__Error_Handler_veneer>
	}

	pop_running = true;
 812:	4b06      	ldr	r3, [pc, #24]	; (82c <start_pop+0x80>)
 814:	2201      	movs	r2, #1
 816:	701a      	strb	r2, [r3, #0]

	printf("POP cycle running!\r\n");
 818:	4805      	ldr	r0, [pc, #20]	; (830 <start_pop+0x84>)
 81a:	f000 f83d 	bl	898 <__puts_veneer>

}
 81e:	bf00      	nop
 820:	bd80      	pop	{r7, pc}
 822:	bf00      	nop
 824:	200000d0 	.word	0x200000d0
 828:	20000000 	.word	0x20000000
 82c:	20000310 	.word	0x20000310
 830:	0800a8a0 	.word	0x0800a8a0

00000834 <stop_pop>:
static void stop_pop() {
 834:	b580      	push	{r7, lr}
 836:	af00      	add	r7, sp, #0
	if (HAL_HRTIM_WaveformOutputStop(&hhrtim,
 838:	f240 1103 	movw	r1, #259	; 0x103
 83c:	4810      	ldr	r0, [pc, #64]	; (880 <stop_pop+0x4c>)
 83e:	f000 f83f 	bl	8c0 <__HAL_HRTIM_WaveformOutputStop_veneer>
 842:	4603      	mov	r3, r0
 844:	2b00      	cmp	r3, #0
 846:	d001      	beq.n	84c <stop_pop+0x18>
		Error_Handler();
 848:	f000 f84e 	bl	8e8 <__Error_Handler_veneer>
	if (HAL_HRTIM_WaveformCounterStop_IT(&hhrtim,
 84c:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
 850:	480b      	ldr	r0, [pc, #44]	; (880 <stop_pop+0x4c>)
 852:	f000 f845 	bl	8e0 <__HAL_HRTIM_WaveformCountStop_IT_veneer>
 856:	4603      	mov	r3, r0
 858:	2b00      	cmp	r3, #0
 85a:	d001      	beq.n	860 <stop_pop+0x2c>
		Error_Handler();
 85c:	f000 f844 	bl	8e8 <__Error_Handler_veneer>
	pop_cycle_count = 0;
 860:	4b08      	ldr	r3, [pc, #32]	; (884 <stop_pop+0x50>)
 862:	2200      	movs	r2, #0
 864:	601a      	str	r2, [r3, #0]
	pop_running = false;
 866:	4b08      	ldr	r3, [pc, #32]	; (888 <stop_pop+0x54>)
 868:	2200      	movs	r2, #0
 86a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 86c:	2200      	movs	r2, #0
 86e:	2102      	movs	r1, #2
 870:	4806      	ldr	r0, [pc, #24]	; (88c <stop_pop+0x58>)
 872:	f000 f82d 	bl	8d0 <__HAL_GPIO_WritePin_veneer>
	printf("POP cycle stopped!\r\n");
 876:	4806      	ldr	r0, [pc, #24]	; (890 <stop_pop+0x5c>)
 878:	f000 f80e 	bl	898 <__puts_veneer>
}
 87c:	bf00      	nop
 87e:	bd80      	pop	{r7, pc}
 880:	200000d0 	.word	0x200000d0
 884:	20000314 	.word	0x20000314
 888:	20000310 	.word	0x20000310
 88c:	58021000 	.word	0x58021000
 890:	0800a8b4 	.word	0x0800a8b4
 894:	00000000 	.word	0x00000000

00000898 <__puts_veneer>:
 898:	f85f f000 	ldr.w	pc, [pc]	; 89c <__puts_veneer+0x4>
 89c:	080098a1 	.word	0x080098a1

000008a0 <__printf_veneer>:
 8a0:	f85f f000 	ldr.w	pc, [pc]	; 8a4 <__printf_veneer+0x4>
 8a4:	08009795 	.word	0x08009795

000008a8 <__HAL_HRTIM_WaveformOutputStart_veneer>:
 8a8:	f85f f000 	ldr.w	pc, [pc]	; 8ac <__HAL_HRTIM_WaveformOutputStart_veneer+0x4>
 8ac:	08003759 	.word	0x08003759

000008b0 <__HAL_GPIO_ReadPin_veneer>:
 8b0:	f85f f000 	ldr.w	pc, [pc]	; 8b4 <__HAL_GPIO_ReadPin_veneer+0x4>
 8b4:	08002e8d 	.word	0x08002e8d

000008b8 <__HAL_Delay_veneer>:
 8b8:	f85f f000 	ldr.w	pc, [pc]	; 8bc <__HAL_Delay_veneer+0x4>
 8bc:	080025ad 	.word	0x080025ad

000008c0 <__HAL_HRTIM_WaveformOutputStop_veneer>:
 8c0:	f85f f000 	ldr.w	pc, [pc]	; 8c4 <__HAL_HRTIM_WaveformOutputStop_veneer+0x4>
 8c4:	080037b3 	.word	0x080037b3

000008c8 <__HAL_HRTIM_WaveformSetOutputLevel_veneer>:
 8c8:	f85f f000 	ldr.w	pc, [pc]	; 8cc <__HAL_HRTIM_WaveformSetOutputLevel_veneer+0x4>
 8cc:	0800356d 	.word	0x0800356d

000008d0 <__HAL_GPIO_WritePin_veneer>:
 8d0:	f85f f000 	ldr.w	pc, [pc]	; 8d4 <__HAL_GPIO_WritePin_veneer+0x4>
 8d4:	08002ebd 	.word	0x08002ebd

000008d8 <__HAL_HRTIM_WaveformCountStart_IT_veneer>:
 8d8:	f85f f000 	ldr.w	pc, [pc]	; 8dc <__HAL_HRTIM_WaveformCountStart_IT_veneer+0x4>
 8dc:	0800380d 	.word	0x0800380d

000008e0 <__HAL_HRTIM_WaveformCountStop_IT_veneer>:
 8e0:	f85f f000 	ldr.w	pc, [pc]	; 8e4 <__HAL_HRTIM_WaveformCountStop_IT_veneer+0x4>
 8e4:	080038ed 	.word	0x080038ed

000008e8 <__Error_Handler_veneer>:
 8e8:	f85f f000 	ldr.w	pc, [pc]	; 8ec <__Error_Handler_veneer+0x4>
 8ec:	08001cf5 	.word	0x08001cf5

Disassembly of section .text:

08000b90 <__do_global_dtors_aux>:
 8000b90:	b510      	push	{r4, lr}
 8000b92:	4c05      	ldr	r4, [pc, #20]	; (8000ba8 <__do_global_dtors_aux+0x18>)
 8000b94:	7823      	ldrb	r3, [r4, #0]
 8000b96:	b933      	cbnz	r3, 8000ba6 <__do_global_dtors_aux+0x16>
 8000b98:	4b04      	ldr	r3, [pc, #16]	; (8000bac <__do_global_dtors_aux+0x1c>)
 8000b9a:	b113      	cbz	r3, 8000ba2 <__do_global_dtors_aux+0x12>
 8000b9c:	4804      	ldr	r0, [pc, #16]	; (8000bb0 <__do_global_dtors_aux+0x20>)
 8000b9e:	f3af 8000 	nop.w
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	7023      	strb	r3, [r4, #0]
 8000ba6:	bd10      	pop	{r4, pc}
 8000ba8:	200000a0 	.word	0x200000a0
 8000bac:	00000000 	.word	0x00000000
 8000bb0:	0800a79c 	.word	0x0800a79c

08000bb4 <frame_dummy>:
 8000bb4:	b508      	push	{r3, lr}
 8000bb6:	4b03      	ldr	r3, [pc, #12]	; (8000bc4 <frame_dummy+0x10>)
 8000bb8:	b11b      	cbz	r3, 8000bc2 <frame_dummy+0xe>
 8000bba:	4903      	ldr	r1, [pc, #12]	; (8000bc8 <frame_dummy+0x14>)
 8000bbc:	4803      	ldr	r0, [pc, #12]	; (8000bcc <frame_dummy+0x18>)
 8000bbe:	f3af 8000 	nop.w
 8000bc2:	bd08      	pop	{r3, pc}
 8000bc4:	00000000 	.word	0x00000000
 8000bc8:	200000a4 	.word	0x200000a4
 8000bcc:	0800a79c 	.word	0x0800a79c

08000bd0 <memchr>:
 8000bd0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000bd4:	2a10      	cmp	r2, #16
 8000bd6:	db2b      	blt.n	8000c30 <memchr+0x60>
 8000bd8:	f010 0f07 	tst.w	r0, #7
 8000bdc:	d008      	beq.n	8000bf0 <memchr+0x20>
 8000bde:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000be2:	3a01      	subs	r2, #1
 8000be4:	428b      	cmp	r3, r1
 8000be6:	d02d      	beq.n	8000c44 <memchr+0x74>
 8000be8:	f010 0f07 	tst.w	r0, #7
 8000bec:	b342      	cbz	r2, 8000c40 <memchr+0x70>
 8000bee:	d1f6      	bne.n	8000bde <memchr+0xe>
 8000bf0:	b4f0      	push	{r4, r5, r6, r7}
 8000bf2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000bf6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8000bfa:	f022 0407 	bic.w	r4, r2, #7
 8000bfe:	f07f 0700 	mvns.w	r7, #0
 8000c02:	2300      	movs	r3, #0
 8000c04:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000c08:	3c08      	subs	r4, #8
 8000c0a:	ea85 0501 	eor.w	r5, r5, r1
 8000c0e:	ea86 0601 	eor.w	r6, r6, r1
 8000c12:	fa85 f547 	uadd8	r5, r5, r7
 8000c16:	faa3 f587 	sel	r5, r3, r7
 8000c1a:	fa86 f647 	uadd8	r6, r6, r7
 8000c1e:	faa5 f687 	sel	r6, r5, r7
 8000c22:	b98e      	cbnz	r6, 8000c48 <memchr+0x78>
 8000c24:	d1ee      	bne.n	8000c04 <memchr+0x34>
 8000c26:	bcf0      	pop	{r4, r5, r6, r7}
 8000c28:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000c2c:	f002 0207 	and.w	r2, r2, #7
 8000c30:	b132      	cbz	r2, 8000c40 <memchr+0x70>
 8000c32:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000c36:	3a01      	subs	r2, #1
 8000c38:	ea83 0301 	eor.w	r3, r3, r1
 8000c3c:	b113      	cbz	r3, 8000c44 <memchr+0x74>
 8000c3e:	d1f8      	bne.n	8000c32 <memchr+0x62>
 8000c40:	2000      	movs	r0, #0
 8000c42:	4770      	bx	lr
 8000c44:	3801      	subs	r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	2d00      	cmp	r5, #0
 8000c4a:	bf06      	itte	eq
 8000c4c:	4635      	moveq	r5, r6
 8000c4e:	3803      	subeq	r0, #3
 8000c50:	3807      	subne	r0, #7
 8000c52:	f015 0f01 	tst.w	r5, #1
 8000c56:	d107      	bne.n	8000c68 <memchr+0x98>
 8000c58:	3001      	adds	r0, #1
 8000c5a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8000c5e:	bf02      	ittt	eq
 8000c60:	3001      	addeq	r0, #1
 8000c62:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000c66:	3001      	addeq	r0, #1
 8000c68:	bcf0      	pop	{r4, r5, r6, r7}
 8000c6a:	3801      	subs	r0, #1
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop

08000c70 <__aeabi_uldivmod>:
 8000c70:	b953      	cbnz	r3, 8000c88 <__aeabi_uldivmod+0x18>
 8000c72:	b94a      	cbnz	r2, 8000c88 <__aeabi_uldivmod+0x18>
 8000c74:	2900      	cmp	r1, #0
 8000c76:	bf08      	it	eq
 8000c78:	2800      	cmpeq	r0, #0
 8000c7a:	bf1c      	itt	ne
 8000c7c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c80:	f04f 30ff 	movne.w	r0, #4294967295
 8000c84:	f000 b974 	b.w	8000f70 <__aeabi_idiv0>
 8000c88:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c8c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c90:	f000 f806 	bl	8000ca0 <__udivmoddi4>
 8000c94:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c9c:	b004      	add	sp, #16
 8000c9e:	4770      	bx	lr

08000ca0 <__udivmoddi4>:
 8000ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ca4:	9d08      	ldr	r5, [sp, #32]
 8000ca6:	4604      	mov	r4, r0
 8000ca8:	468e      	mov	lr, r1
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d14d      	bne.n	8000d4a <__udivmoddi4+0xaa>
 8000cae:	428a      	cmp	r2, r1
 8000cb0:	4694      	mov	ip, r2
 8000cb2:	d969      	bls.n	8000d88 <__udivmoddi4+0xe8>
 8000cb4:	fab2 f282 	clz	r2, r2
 8000cb8:	b152      	cbz	r2, 8000cd0 <__udivmoddi4+0x30>
 8000cba:	fa01 f302 	lsl.w	r3, r1, r2
 8000cbe:	f1c2 0120 	rsb	r1, r2, #32
 8000cc2:	fa20 f101 	lsr.w	r1, r0, r1
 8000cc6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cca:	ea41 0e03 	orr.w	lr, r1, r3
 8000cce:	4094      	lsls	r4, r2
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	0c21      	lsrs	r1, r4, #16
 8000cd6:	fbbe f6f8 	udiv	r6, lr, r8
 8000cda:	fa1f f78c 	uxth.w	r7, ip
 8000cde:	fb08 e316 	mls	r3, r8, r6, lr
 8000ce2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ce6:	fb06 f107 	mul.w	r1, r6, r7
 8000cea:	4299      	cmp	r1, r3
 8000cec:	d90a      	bls.n	8000d04 <__udivmoddi4+0x64>
 8000cee:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cf6:	f080 811f 	bcs.w	8000f38 <__udivmoddi4+0x298>
 8000cfa:	4299      	cmp	r1, r3
 8000cfc:	f240 811c 	bls.w	8000f38 <__udivmoddi4+0x298>
 8000d00:	3e02      	subs	r6, #2
 8000d02:	4463      	add	r3, ip
 8000d04:	1a5b      	subs	r3, r3, r1
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d0c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d14:	fb00 f707 	mul.w	r7, r0, r7
 8000d18:	42a7      	cmp	r7, r4
 8000d1a:	d90a      	bls.n	8000d32 <__udivmoddi4+0x92>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d24:	f080 810a 	bcs.w	8000f3c <__udivmoddi4+0x29c>
 8000d28:	42a7      	cmp	r7, r4
 8000d2a:	f240 8107 	bls.w	8000f3c <__udivmoddi4+0x29c>
 8000d2e:	4464      	add	r4, ip
 8000d30:	3802      	subs	r0, #2
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	1be4      	subs	r4, r4, r7
 8000d38:	2600      	movs	r6, #0
 8000d3a:	b11d      	cbz	r5, 8000d44 <__udivmoddi4+0xa4>
 8000d3c:	40d4      	lsrs	r4, r2
 8000d3e:	2300      	movs	r3, #0
 8000d40:	e9c5 4300 	strd	r4, r3, [r5]
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	428b      	cmp	r3, r1
 8000d4c:	d909      	bls.n	8000d62 <__udivmoddi4+0xc2>
 8000d4e:	2d00      	cmp	r5, #0
 8000d50:	f000 80ef 	beq.w	8000f32 <__udivmoddi4+0x292>
 8000d54:	2600      	movs	r6, #0
 8000d56:	e9c5 0100 	strd	r0, r1, [r5]
 8000d5a:	4630      	mov	r0, r6
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	fab3 f683 	clz	r6, r3
 8000d66:	2e00      	cmp	r6, #0
 8000d68:	d14a      	bne.n	8000e00 <__udivmoddi4+0x160>
 8000d6a:	428b      	cmp	r3, r1
 8000d6c:	d302      	bcc.n	8000d74 <__udivmoddi4+0xd4>
 8000d6e:	4282      	cmp	r2, r0
 8000d70:	f200 80f9 	bhi.w	8000f66 <__udivmoddi4+0x2c6>
 8000d74:	1a84      	subs	r4, r0, r2
 8000d76:	eb61 0303 	sbc.w	r3, r1, r3
 8000d7a:	2001      	movs	r0, #1
 8000d7c:	469e      	mov	lr, r3
 8000d7e:	2d00      	cmp	r5, #0
 8000d80:	d0e0      	beq.n	8000d44 <__udivmoddi4+0xa4>
 8000d82:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d86:	e7dd      	b.n	8000d44 <__udivmoddi4+0xa4>
 8000d88:	b902      	cbnz	r2, 8000d8c <__udivmoddi4+0xec>
 8000d8a:	deff      	udf	#255	; 0xff
 8000d8c:	fab2 f282 	clz	r2, r2
 8000d90:	2a00      	cmp	r2, #0
 8000d92:	f040 8092 	bne.w	8000eba <__udivmoddi4+0x21a>
 8000d96:	eba1 010c 	sub.w	r1, r1, ip
 8000d9a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d9e:	fa1f fe8c 	uxth.w	lr, ip
 8000da2:	2601      	movs	r6, #1
 8000da4:	0c20      	lsrs	r0, r4, #16
 8000da6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000daa:	fb07 1113 	mls	r1, r7, r3, r1
 8000dae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000db2:	fb0e f003 	mul.w	r0, lr, r3
 8000db6:	4288      	cmp	r0, r1
 8000db8:	d908      	bls.n	8000dcc <__udivmoddi4+0x12c>
 8000dba:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x12a>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f200 80cb 	bhi.w	8000f60 <__udivmoddi4+0x2c0>
 8000dca:	4643      	mov	r3, r8
 8000dcc:	1a09      	subs	r1, r1, r0
 8000dce:	b2a4      	uxth	r4, r4
 8000dd0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd4:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ddc:	fb0e fe00 	mul.w	lr, lr, r0
 8000de0:	45a6      	cmp	lr, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x156>
 8000de4:	eb1c 0404 	adds.w	r4, ip, r4
 8000de8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dec:	d202      	bcs.n	8000df4 <__udivmoddi4+0x154>
 8000dee:	45a6      	cmp	lr, r4
 8000df0:	f200 80bb 	bhi.w	8000f6a <__udivmoddi4+0x2ca>
 8000df4:	4608      	mov	r0, r1
 8000df6:	eba4 040e 	sub.w	r4, r4, lr
 8000dfa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dfe:	e79c      	b.n	8000d3a <__udivmoddi4+0x9a>
 8000e00:	f1c6 0720 	rsb	r7, r6, #32
 8000e04:	40b3      	lsls	r3, r6
 8000e06:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e0a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e0e:	fa20 f407 	lsr.w	r4, r0, r7
 8000e12:	fa01 f306 	lsl.w	r3, r1, r6
 8000e16:	431c      	orrs	r4, r3
 8000e18:	40f9      	lsrs	r1, r7
 8000e1a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e1e:	fa00 f306 	lsl.w	r3, r0, r6
 8000e22:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e26:	0c20      	lsrs	r0, r4, #16
 8000e28:	fa1f fe8c 	uxth.w	lr, ip
 8000e2c:	fb09 1118 	mls	r1, r9, r8, r1
 8000e30:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e34:	fb08 f00e 	mul.w	r0, r8, lr
 8000e38:	4288      	cmp	r0, r1
 8000e3a:	fa02 f206 	lsl.w	r2, r2, r6
 8000e3e:	d90b      	bls.n	8000e58 <__udivmoddi4+0x1b8>
 8000e40:	eb1c 0101 	adds.w	r1, ip, r1
 8000e44:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e48:	f080 8088 	bcs.w	8000f5c <__udivmoddi4+0x2bc>
 8000e4c:	4288      	cmp	r0, r1
 8000e4e:	f240 8085 	bls.w	8000f5c <__udivmoddi4+0x2bc>
 8000e52:	f1a8 0802 	sub.w	r8, r8, #2
 8000e56:	4461      	add	r1, ip
 8000e58:	1a09      	subs	r1, r1, r0
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e60:	fb09 1110 	mls	r1, r9, r0, r1
 8000e64:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e68:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e6c:	458e      	cmp	lr, r1
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x1e2>
 8000e70:	eb1c 0101 	adds.w	r1, ip, r1
 8000e74:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e78:	d26c      	bcs.n	8000f54 <__udivmoddi4+0x2b4>
 8000e7a:	458e      	cmp	lr, r1
 8000e7c:	d96a      	bls.n	8000f54 <__udivmoddi4+0x2b4>
 8000e7e:	3802      	subs	r0, #2
 8000e80:	4461      	add	r1, ip
 8000e82:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e86:	fba0 9402 	umull	r9, r4, r0, r2
 8000e8a:	eba1 010e 	sub.w	r1, r1, lr
 8000e8e:	42a1      	cmp	r1, r4
 8000e90:	46c8      	mov	r8, r9
 8000e92:	46a6      	mov	lr, r4
 8000e94:	d356      	bcc.n	8000f44 <__udivmoddi4+0x2a4>
 8000e96:	d053      	beq.n	8000f40 <__udivmoddi4+0x2a0>
 8000e98:	b15d      	cbz	r5, 8000eb2 <__udivmoddi4+0x212>
 8000e9a:	ebb3 0208 	subs.w	r2, r3, r8
 8000e9e:	eb61 010e 	sbc.w	r1, r1, lr
 8000ea2:	fa01 f707 	lsl.w	r7, r1, r7
 8000ea6:	fa22 f306 	lsr.w	r3, r2, r6
 8000eaa:	40f1      	lsrs	r1, r6
 8000eac:	431f      	orrs	r7, r3
 8000eae:	e9c5 7100 	strd	r7, r1, [r5]
 8000eb2:	2600      	movs	r6, #0
 8000eb4:	4631      	mov	r1, r6
 8000eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eba:	f1c2 0320 	rsb	r3, r2, #32
 8000ebe:	40d8      	lsrs	r0, r3
 8000ec0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec4:	fa21 f303 	lsr.w	r3, r1, r3
 8000ec8:	4091      	lsls	r1, r2
 8000eca:	4301      	orrs	r1, r0
 8000ecc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed0:	fa1f fe8c 	uxth.w	lr, ip
 8000ed4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ed8:	fb07 3610 	mls	r6, r7, r0, r3
 8000edc:	0c0b      	lsrs	r3, r1, #16
 8000ede:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ee2:	fb00 f60e 	mul.w	r6, r0, lr
 8000ee6:	429e      	cmp	r6, r3
 8000ee8:	fa04 f402 	lsl.w	r4, r4, r2
 8000eec:	d908      	bls.n	8000f00 <__udivmoddi4+0x260>
 8000eee:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ef6:	d22f      	bcs.n	8000f58 <__udivmoddi4+0x2b8>
 8000ef8:	429e      	cmp	r6, r3
 8000efa:	d92d      	bls.n	8000f58 <__udivmoddi4+0x2b8>
 8000efc:	3802      	subs	r0, #2
 8000efe:	4463      	add	r3, ip
 8000f00:	1b9b      	subs	r3, r3, r6
 8000f02:	b289      	uxth	r1, r1
 8000f04:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f08:	fb07 3316 	mls	r3, r7, r6, r3
 8000f0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f10:	fb06 f30e 	mul.w	r3, r6, lr
 8000f14:	428b      	cmp	r3, r1
 8000f16:	d908      	bls.n	8000f2a <__udivmoddi4+0x28a>
 8000f18:	eb1c 0101 	adds.w	r1, ip, r1
 8000f1c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f20:	d216      	bcs.n	8000f50 <__udivmoddi4+0x2b0>
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d914      	bls.n	8000f50 <__udivmoddi4+0x2b0>
 8000f26:	3e02      	subs	r6, #2
 8000f28:	4461      	add	r1, ip
 8000f2a:	1ac9      	subs	r1, r1, r3
 8000f2c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f30:	e738      	b.n	8000da4 <__udivmoddi4+0x104>
 8000f32:	462e      	mov	r6, r5
 8000f34:	4628      	mov	r0, r5
 8000f36:	e705      	b.n	8000d44 <__udivmoddi4+0xa4>
 8000f38:	4606      	mov	r6, r0
 8000f3a:	e6e3      	b.n	8000d04 <__udivmoddi4+0x64>
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	e6f8      	b.n	8000d32 <__udivmoddi4+0x92>
 8000f40:	454b      	cmp	r3, r9
 8000f42:	d2a9      	bcs.n	8000e98 <__udivmoddi4+0x1f8>
 8000f44:	ebb9 0802 	subs.w	r8, r9, r2
 8000f48:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f4c:	3801      	subs	r0, #1
 8000f4e:	e7a3      	b.n	8000e98 <__udivmoddi4+0x1f8>
 8000f50:	4646      	mov	r6, r8
 8000f52:	e7ea      	b.n	8000f2a <__udivmoddi4+0x28a>
 8000f54:	4620      	mov	r0, r4
 8000f56:	e794      	b.n	8000e82 <__udivmoddi4+0x1e2>
 8000f58:	4640      	mov	r0, r8
 8000f5a:	e7d1      	b.n	8000f00 <__udivmoddi4+0x260>
 8000f5c:	46d0      	mov	r8, sl
 8000f5e:	e77b      	b.n	8000e58 <__udivmoddi4+0x1b8>
 8000f60:	3b02      	subs	r3, #2
 8000f62:	4461      	add	r1, ip
 8000f64:	e732      	b.n	8000dcc <__udivmoddi4+0x12c>
 8000f66:	4630      	mov	r0, r6
 8000f68:	e709      	b.n	8000d7e <__udivmoddi4+0xde>
 8000f6a:	4464      	add	r4, ip
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	e742      	b.n	8000df6 <__udivmoddi4+0x156>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <__io_putchar>:
PUTCHAR_PROTOTYPE {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 8000f7c:	1d39      	adds	r1, r7, #4
 8000f7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f82:	2201      	movs	r2, #1
 8000f84:	4803      	ldr	r0, [pc, #12]	; (8000f94 <__io_putchar+0x20>)
 8000f86:	f007 fab1 	bl	80084ec <HAL_UART_Transmit>
	return ch;
 8000f8a:	687b      	ldr	r3, [r7, #4]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	2000027c 	.word	0x2000027c

08000f98 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	80fb      	strh	r3, [r7, #6]

#ifdef RAMP_DAC
	static bool dac_enabled = false;
#endif

	SystemClock_Config(); // We were in STOP mode so the HSI is selected.
 8000fa2:	f000 f9db 	bl	800135c <SystemClock_Config>
	HAL_ResumeTick();
 8000fa6:	f001 fb35 	bl	8002614 <HAL_ResumeTick>
		dac_enabled = true;
	}
#endif

#ifdef SYNTH_ENABLE
	if (!synth_init) {
 8000faa:	4b39      	ldr	r3, [pc, #228]	; (8001090 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	f083 0301 	eor.w	r3, r3, #1
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d00c      	beq.n	8000fd2 <HAL_GPIO_EXTI_Callback+0x3a>
		if (init_synthesiser() != SUCCESS) {
 8000fb8:	f009 fbfe 	bl	800a7b8 <__init_synthesiser_veneer>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d004      	beq.n	8000fcc <HAL_GPIO_EXTI_Callback+0x34>
			printf("Synthesiser initialisation failed!\r\n");
 8000fc2:	4834      	ldr	r0, [pc, #208]	; (8001094 <HAL_GPIO_EXTI_Callback+0xfc>)
 8000fc4:	f008 fc6c 	bl	80098a0 <puts>
			Error_Handler();
 8000fc8:	f000 fe94 	bl	8001cf4 <Error_Handler>
		}
		synth_init = true;
 8000fcc:	4b30      	ldr	r3, [pc, #192]	; (8001090 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000fce:	2201      	movs	r2, #1
 8000fd0:	701a      	strb	r2, [r3, #0]
	}
#endif

	if (GPIO_Pin == GPIO_PIN_13) { // Blue button
 8000fd2:	88fb      	ldrh	r3, [r7, #6]
 8000fd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000fd8:	d157      	bne.n	800108a <HAL_GPIO_EXTI_Callback+0xf2>

		/* If the button is held down for more than one second then run the POP cycle */
		HAL_Delay(1000);
 8000fda:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fde:	f001 fae5 	bl	80025ac <HAL_Delay>

		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 8000fe2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fe6:	482c      	ldr	r0, [pc, #176]	; (8001098 <HAL_GPIO_EXTI_Callback+0x100>)
 8000fe8:	f001 ff50 	bl	8002e8c <HAL_GPIO_ReadPin>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d007      	beq.n	8001002 <HAL_GPIO_EXTI_Callback+0x6a>

			if (pop_running) {
 8000ff2:	4b2a      	ldr	r3, [pc, #168]	; (800109c <HAL_GPIO_EXTI_Callback+0x104>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d145      	bne.n	8001088 <HAL_GPIO_EXTI_Callback+0xf0>
				return;
			}

			start_pop();
 8000ffc:	f009 fbf4 	bl	800a7e8 <__start_pop_veneer>
 8001000:	e043      	b.n	800108a <HAL_GPIO_EXTI_Callback+0xf2>

		} else {
			/* We want to run CW so stop the POP cycle if it's running */
			if (pop_running) {
 8001002:	4b26      	ldr	r3, [pc, #152]	; (800109c <HAL_GPIO_EXTI_Callback+0x104>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	b2db      	uxtb	r3, r3
 8001008:	2b00      	cmp	r3, #0
 800100a:	d002      	beq.n	8001012 <HAL_GPIO_EXTI_Callback+0x7a>
				stop_pop();
 800100c:	f009 fbe8 	bl	800a7e0 <__stop_pop_veneer>
 8001010:	e03b      	b.n	800108a <HAL_GPIO_EXTI_Callback+0xf2>
				return;
			}

			/* Set the attenuator for minimum attenuation */
			const struct AttenuatorSettings attenuator_settings = {0,0,0,0,0,0,0}; // 0 dB
 8001012:	2300      	movs	r3, #0
 8001014:	733b      	strb	r3, [r7, #12]
			set_aom_atten(attenuator_settings);
 8001016:	7b38      	ldrb	r0, [r7, #12]
 8001018:	f009 fbd6 	bl	800a7c8 <__set_aom_atten_veneer>

			/* Enable the AOM drive power */
			if (HAL_HRTIM_WaveformOutputStart(&hhrtim,
 800101c:	f240 1103 	movw	r1, #259	; 0x103
 8001020:	481f      	ldr	r0, [pc, #124]	; (80010a0 <HAL_GPIO_EXTI_Callback+0x108>)
 8001022:	f002 fb99 	bl	8003758 <HAL_HRTIM_WaveformOutputStart>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <HAL_GPIO_EXTI_Callback+0x98>
			HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TE1) != HAL_OK) {
				Error_Handler();
 800102c:	f000 fe62 	bl	8001cf4 <Error_Handler>
			}

			if (HAL_HRTIM_WaveformSetOutputLevel(&hhrtim,
 8001030:	2302      	movs	r3, #2
 8001032:	2201      	movs	r2, #1
 8001034:	2100      	movs	r1, #0
 8001036:	481a      	ldr	r0, [pc, #104]	; (80010a0 <HAL_GPIO_EXTI_Callback+0x108>)
 8001038:	f002 fa98 	bl	800356c <HAL_HRTIM_WaveformSetOutputLevel>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <HAL_GPIO_EXTI_Callback+0xae>
					HRTIM_TIMERINDEX_TIMER_A,
					HRTIM_OUTPUT_TA1, HRTIM_OUTPUTLEVEL_INACTIVE) != HAL_OK) {
				Error_Handler();
 8001042:	f000 fe57 	bl	8001cf4 <Error_Handler>
			}

			/* Enable the Microwaves */
			if (HAL_HRTIM_WaveformSetOutputLevel(&hhrtim,
 8001046:	2301      	movs	r3, #1
 8001048:	f44f 7280 	mov.w	r2, #256	; 0x100
 800104c:	2104      	movs	r1, #4
 800104e:	4814      	ldr	r0, [pc, #80]	; (80010a0 <HAL_GPIO_EXTI_Callback+0x108>)
 8001050:	f002 fa8c 	bl	800356c <HAL_HRTIM_WaveformSetOutputLevel>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <HAL_GPIO_EXTI_Callback+0xc6>
					HRTIM_TIMERINDEX_TIMER_E,
					HRTIM_OUTPUT_TE1, HRTIM_OUTPUTLEVEL_ACTIVE) != HAL_OK) {
				Error_Handler();
 800105a:	f000 fe4b 	bl	8001cf4 <Error_Handler>
			};

			/* Run the frequency sweep */
			while (1) {
				printf("Sweep running.\r\n");
 800105e:	4811      	ldr	r0, [pc, #68]	; (80010a4 <HAL_GPIO_EXTI_Callback+0x10c>)
 8001060:	f008 fc1e 	bl	80098a0 <puts>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001064:	2201      	movs	r2, #1
 8001066:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800106a:	480f      	ldr	r0, [pc, #60]	; (80010a8 <HAL_GPIO_EXTI_Callback+0x110>)
 800106c:	f001 ff26 	bl	8002ebc <HAL_GPIO_WritePin>
				run_sweep();
 8001070:	f009 fba6 	bl	800a7c0 <__run_sweep_veneer>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001074:	2200      	movs	r2, #0
 8001076:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800107a:	480b      	ldr	r0, [pc, #44]	; (80010a8 <HAL_GPIO_EXTI_Callback+0x110>)
 800107c:	f001 ff1e 	bl	8002ebc <HAL_GPIO_WritePin>
				printf("Sweep complete.\r\n");
 8001080:	480a      	ldr	r0, [pc, #40]	; (80010ac <HAL_GPIO_EXTI_Callback+0x114>)
 8001082:	f008 fc0d 	bl	80098a0 <puts>
				printf("Sweep running.\r\n");
 8001086:	e7ea      	b.n	800105e <HAL_GPIO_EXTI_Callback+0xc6>
				return;
 8001088:	bf00      	nop
			}
		}

	}
}
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000318 	.word	0x20000318
 8001094:	0800a8c8 	.word	0x0800a8c8
 8001098:	58020800 	.word	0x58020800
 800109c:	20000310 	.word	0x20000310
 80010a0:	200000d0 	.word	0x200000d0
 80010a4:	0800a8ec 	.word	0x0800a8ec
 80010a8:	58020400 	.word	0x58020400
 80010ac:	0800a8fc 	.word	0x0800a8fc

080010b0 <HAL_LPTIM_AutoReloadMatchCallback>:

void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim){
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80010b8:	2101      	movs	r1, #1
 80010ba:	4803      	ldr	r0, [pc, #12]	; (80010c8 <HAL_LPTIM_AutoReloadMatchCallback+0x18>)
 80010bc:	f001 ff17 	bl	8002eee <HAL_GPIO_TogglePin>
}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	58020400 	.word	0x58020400

080010cc <HAL_HRTIM_Compare2EventCallback>:

void HAL_HRTIM_Compare2EventCallback(HRTIM_HandleTypeDef *hhrtim, uint32_t TimerIdx) {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]

	/* Called when the first microwave pulse goes low */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_E) {
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	2b04      	cmp	r3, #4
 80010da:	d11e      	bne.n	800111a <HAL_HRTIM_Compare2EventCallback+0x4e>
		/* Configure the LASER AOM drive attenuator */
		const struct AttenuatorSettings a = {0,0,0,0,0,1,0}; // 8 dB
 80010dc:	7b3b      	ldrb	r3, [r7, #12]
 80010de:	f36f 0300 	bfc	r3, #0, #1
 80010e2:	733b      	strb	r3, [r7, #12]
 80010e4:	7b3b      	ldrb	r3, [r7, #12]
 80010e6:	f36f 0341 	bfc	r3, #1, #1
 80010ea:	733b      	strb	r3, [r7, #12]
 80010ec:	7b3b      	ldrb	r3, [r7, #12]
 80010ee:	f36f 0382 	bfc	r3, #2, #1
 80010f2:	733b      	strb	r3, [r7, #12]
 80010f4:	7b3b      	ldrb	r3, [r7, #12]
 80010f6:	f36f 03c3 	bfc	r3, #3, #1
 80010fa:	733b      	strb	r3, [r7, #12]
 80010fc:	7b3b      	ldrb	r3, [r7, #12]
 80010fe:	f36f 1304 	bfc	r3, #4, #1
 8001102:	733b      	strb	r3, [r7, #12]
 8001104:	7b3b      	ldrb	r3, [r7, #12]
 8001106:	f043 0320 	orr.w	r3, r3, #32
 800110a:	733b      	strb	r3, [r7, #12]
 800110c:	7b3b      	ldrb	r3, [r7, #12]
 800110e:	f36f 1386 	bfc	r3, #6, #1
 8001112:	733b      	strb	r3, [r7, #12]
		set_aom_atten(a);
 8001114:	7b38      	ldrb	r0, [r7, #12]
 8001116:	f009 fb57 	bl	800a7c8 <__set_aom_atten_veneer>
	}

}
 800111a:	bf00      	nop
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	0000      	movs	r0, r0
 8001124:	0000      	movs	r0, r0
	...

08001128 <HAL_HRTIM_Compare3EventCallback>:

void HAL_HRTIM_Compare3EventCallback(HRTIM_HandleTypeDef *hhrtim, uint32_t TimerIdx) {
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]

	/* Called at the end of a POP cycle */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_A) {
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d138      	bne.n	80011aa <HAL_HRTIM_Compare3EventCallback+0x82>

		/* Reset the attenuator to 0 dB */
		const struct AttenuatorSettings a = { 0, 0, 0, 0, 0, 0, 0 }; // 0 dB
 8001138:	2300      	movs	r3, #0
 800113a:	733b      	strb	r3, [r7, #12]
		set_aom_atten(a);
 800113c:	7b38      	ldrb	r0, [r7, #12]
 800113e:	f009 fb43 	bl	800a7c8 <__set_aom_atten_veneer>
		static const double stop_freq = ((long)((sweep_settings.req_stop_freq/sweep_settings.step_size) + 0.5)) * sweep_settings.step_size;
		static const uint32_t num_points = ((stop_freq - start_freq)/sweep_settings.step_size) + 1;
		static uint32_t i = 0;

		/* Configure the Microwave frequency */
		if (i == num_points) {
 8001142:	4b1f      	ldr	r3, [pc, #124]	; (80011c0 <HAL_HRTIM_Compare3EventCallback+0x98>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	4b1f      	ldr	r3, [pc, #124]	; (80011c4 <HAL_HRTIM_Compare3EventCallback+0x9c>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	429a      	cmp	r2, r3
 800114c:	d106      	bne.n	800115c <HAL_HRTIM_Compare3EventCallback+0x34>
			stop_pop();
 800114e:	f009 fb47 	bl	800a7e0 <__stop_pop_veneer>
			i = 0;
 8001152:	4b1b      	ldr	r3, [pc, #108]	; (80011c0 <HAL_HRTIM_Compare3EventCallback+0x98>)
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
			start_pop();
 8001158:	f009 fb46 	bl	800a7e8 <__start_pop_veneer>
		}

#ifdef SYNTH_ENABLE
		set_frequency_hz(start_freq + (i * sweep_settings.step_size));
 800115c:	4b18      	ldr	r3, [pc, #96]	; (80011c0 <HAL_HRTIM_Compare3EventCallback+0x98>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	ee07 3a90 	vmov	s15, r3
 8001164:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001168:	ed9f 6b13 	vldr	d6, [pc, #76]	; 80011b8 <HAL_HRTIM_Compare3EventCallback+0x90>
 800116c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001170:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <HAL_HRTIM_Compare3EventCallback+0xa0>)
 8001172:	ed93 7b00 	vldr	d7, [r3]
 8001176:	ee36 7b07 	vadd.f64	d7, d6, d7
 800117a:	eeb0 0b47 	vmov.f64	d0, d7
 800117e:	f009 fb27 	bl	800a7d0 <__set_frequency_hz_veneer>
#endif

		i = i + 1;
 8001182:	4b0f      	ldr	r3, [pc, #60]	; (80011c0 <HAL_HRTIM_Compare3EventCallback+0x98>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	3301      	adds	r3, #1
 8001188:	4a0d      	ldr	r2, [pc, #52]	; (80011c0 <HAL_HRTIM_Compare3EventCallback+0x98>)
 800118a:	6013      	str	r3, [r2, #0]

		pop_cycle_count = pop_cycle_count + 1;
 800118c:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <HAL_HRTIM_Compare3EventCallback+0xa4>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	3301      	adds	r3, #1
 8001192:	4a0e      	ldr	r2, [pc, #56]	; (80011cc <HAL_HRTIM_Compare3EventCallback+0xa4>)
 8001194:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001196:	2102      	movs	r1, #2
 8001198:	480d      	ldr	r0, [pc, #52]	; (80011d0 <HAL_HRTIM_Compare3EventCallback+0xa8>)
 800119a:	f001 fea8 	bl	8002eee <HAL_GPIO_TogglePin>
		printf("POP Cycle %lu done.\r\n", pop_cycle_count);
 800119e:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <HAL_HRTIM_Compare3EventCallback+0xa4>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4619      	mov	r1, r3
 80011a4:	480b      	ldr	r0, [pc, #44]	; (80011d4 <HAL_HRTIM_Compare3EventCallback+0xac>)
 80011a6:	f008 faf5 	bl	8009794 <iprintf>

	/* Called when the second microwave pulse goes high */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_E) {
	}

}
 80011aa:	bf00      	nop
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	f3af 8000 	nop.w
 80011b8:	00000000 	.word	0x00000000
 80011bc:	4007d784 	.word	0x4007d784
 80011c0:	2000031c 	.word	0x2000031c
 80011c4:	0800a97c 	.word	0x0800a97c
 80011c8:	0800a980 	.word	0x0800a980
 80011cc:	20000314 	.word	0x20000314
 80011d0:	58021000 	.word	0x58021000
 80011d4:	0800a910 	.word	0x0800a910

080011d8 <HAL_HRTIM_RepetitionEventCallback>:

void HAL_HRTIM_RepetitionEventCallback(HRTIM_HandleTypeDef *hhrtim,
		uint32_t TimerIdx) {
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]

	/* Called at the start of the next POP cycle */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_A) {
	}
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
	...

080011f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* Copy from FLASH to itcm */
  memcpy(&_sitcm, &_siitcm, ((void*) &_eitcm - (void*) &_sitcm));
 80011f6:	4a51      	ldr	r2, [pc, #324]	; (800133c <main+0x14c>)
 80011f8:	4b51      	ldr	r3, [pc, #324]	; (8001340 <main+0x150>)
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	461a      	mov	r2, r3
 80011fe:	4951      	ldr	r1, [pc, #324]	; (8001344 <main+0x154>)
 8001200:	484f      	ldr	r0, [pc, #316]	; (8001340 <main+0x150>)
 8001202:	f008 fab1 	bl	8009768 <memcpy>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001206:	4b50      	ldr	r3, [pc, #320]	; (8001348 <main+0x158>)
 8001208:	695b      	ldr	r3, [r3, #20]
 800120a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d11b      	bne.n	800124a <main+0x5a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001212:	f3bf 8f4f 	dsb	sy
}
 8001216:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001218:	f3bf 8f6f 	isb	sy
}
 800121c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800121e:	4b4a      	ldr	r3, [pc, #296]	; (8001348 <main+0x158>)
 8001220:	2200      	movs	r2, #0
 8001222:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001226:	f3bf 8f4f 	dsb	sy
}
 800122a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800122c:	f3bf 8f6f 	isb	sy
}
 8001230:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001232:	4b45      	ldr	r3, [pc, #276]	; (8001348 <main+0x158>)
 8001234:	695b      	ldr	r3, [r3, #20]
 8001236:	4a44      	ldr	r2, [pc, #272]	; (8001348 <main+0x158>)
 8001238:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800123c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800123e:	f3bf 8f4f 	dsb	sy
}
 8001242:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001244:	f3bf 8f6f 	isb	sy
}
 8001248:	e000      	b.n	800124c <main+0x5c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800124a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800124c:	4b3e      	ldr	r3, [pc, #248]	; (8001348 <main+0x158>)
 800124e:	695b      	ldr	r3, [r3, #20]
 8001250:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d138      	bne.n	80012ca <main+0xda>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001258:	4b3b      	ldr	r3, [pc, #236]	; (8001348 <main+0x158>)
 800125a:	2200      	movs	r2, #0
 800125c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001260:	f3bf 8f4f 	dsb	sy
}
 8001264:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001266:	4b38      	ldr	r3, [pc, #224]	; (8001348 <main+0x158>)
 8001268:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800126c:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	0b5b      	lsrs	r3, r3, #13
 8001272:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001276:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	08db      	lsrs	r3, r3, #3
 800127c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001280:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	015a      	lsls	r2, r3, #5
 8001286:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800128a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001290:	492d      	ldr	r1, [pc, #180]	; (8001348 <main+0x158>)
 8001292:	4313      	orrs	r3, r2
 8001294:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	1e5a      	subs	r2, r3, #1
 800129c:	607a      	str	r2, [r7, #4]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1ef      	bne.n	8001282 <main+0x92>
    } while(sets-- != 0U);
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	1e5a      	subs	r2, r3, #1
 80012a6:	60ba      	str	r2, [r7, #8]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d1e5      	bne.n	8001278 <main+0x88>
  __ASM volatile ("dsb 0xF":::"memory");
 80012ac:	f3bf 8f4f 	dsb	sy
}
 80012b0:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80012b2:	4b25      	ldr	r3, [pc, #148]	; (8001348 <main+0x158>)
 80012b4:	695b      	ldr	r3, [r3, #20]
 80012b6:	4a24      	ldr	r2, [pc, #144]	; (8001348 <main+0x158>)
 80012b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012bc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80012be:	f3bf 8f4f 	dsb	sy
}
 80012c2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012c4:	f3bf 8f6f 	isb	sy
}
 80012c8:	e000      	b.n	80012cc <main+0xdc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80012ca:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012cc:	f001 f8dc 	bl	8002488 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012d0:	f000 f844 	bl	800135c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012d4:	f000 fba2 	bl	8001a1c <MX_GPIO_Init>
  MX_LPTIM1_Init();
 80012d8:	f000 fa82 	bl	80017e0 <MX_LPTIM1_Init>
  MX_DAC1_Init();
 80012dc:	f000 f8fc 	bl	80014d8 <MX_DAC1_Init>
  MX_USART3_UART_Init();
 80012e0:	f000 fb4e 	bl	8001980 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 80012e4:	f000 fafe 	bl	80018e4 <MX_TIM3_Init>
  MX_TIM1_Init();
 80012e8:	f000 faa8 	bl	800183c <MX_TIM1_Init>
  MX_HRTIM_Init();
 80012ec:	f000 f926 	bl	800153c <MX_HRTIM_Init>
  /* USER CODE BEGIN 2 */

	printf("Atomic Clock - Source __TIMESTAMP__: %s\r\n", __TIMESTAMP__);
 80012f0:	4916      	ldr	r1, [pc, #88]	; (800134c <main+0x15c>)
 80012f2:	4817      	ldr	r0, [pc, #92]	; (8001350 <main+0x160>)
 80012f4:	f008 fa4e 	bl	8009794 <iprintf>

	/* Start a low power timer to flash an LED approximately every second */
	if (HAL_LPTIM_Counter_Start_IT(&hlptim1, 1024) != HAL_OK) {
 80012f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012fc:	4815      	ldr	r0, [pc, #84]	; (8001354 <main+0x164>)
 80012fe:	f003 fafb 	bl	80048f8 <HAL_LPTIM_Counter_Start_IT>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <main+0x11c>
		Error_Handler();
 8001308:	f000 fcf4 	bl	8001cf4 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		if (!pop_running) {
 800130c:	4b12      	ldr	r3, [pc, #72]	; (8001358 <main+0x168>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	b2db      	uxtb	r3, r3
 8001312:	f083 0301 	eor.w	r3, r3, #1
 8001316:	b2db      	uxtb	r3, r3
 8001318:	2b00      	cmp	r3, #0
 800131a:	d008      	beq.n	800132e <main+0x13e>
			HAL_SuspendTick(); // Needs to be paused or the interrupt will bring us out of STOP mode.
 800131c:	f001 f96a 	bl	80025f4 <HAL_SuspendTick>
			HAL_PWREx_EnableFlashPowerDown();
 8001320:	f003 feda 	bl	80050d8 <HAL_PWREx_EnableFlashPowerDown>
			HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI); // We will only resume when an interrupt occurs
 8001324:	2101      	movs	r1, #1
 8001326:	2001      	movs	r0, #1
 8001328:	f003 fe60 	bl	8004fec <HAL_PWR_EnterSTOPMode>
 800132c:	e7ee      	b.n	800130c <main+0x11c>
		} else {
			HAL_SuspendTick(); // Needs to be paused or the interrupt will bring us out of SLEEP mode.
 800132e:	f001 f961 	bl	80025f4 <HAL_SuspendTick>
			HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI); // We will only resume when an interrupt occurs.
 8001332:	2101      	movs	r1, #1
 8001334:	2000      	movs	r0, #0
 8001336:	f003 fe3f 	bl	8004fb8 <HAL_PWR_EnterSLEEPMode>
		if (!pop_running) {
 800133a:	e7e7      	b.n	800130c <main+0x11c>
 800133c:	000008f0 	.word	0x000008f0
 8001340:	00000000 	.word	0x00000000
 8001344:	08000298 	.word	0x08000298
 8001348:	e000ed00 	.word	0xe000ed00
 800134c:	0800a928 	.word	0x0800a928
 8001350:	0800a944 	.word	0x0800a944
 8001354:	200001ac 	.word	0x200001ac
 8001358:	20000310 	.word	0x20000310

0800135c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b0a4      	sub	sp, #144	; 0x90
 8001360:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001362:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001366:	224c      	movs	r2, #76	; 0x4c
 8001368:	2100      	movs	r1, #0
 800136a:	4618      	mov	r0, r3
 800136c:	f008 fa0a 	bl	8009784 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001370:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001374:	2220      	movs	r2, #32
 8001376:	2100      	movs	r1, #0
 8001378:	4618      	mov	r0, r3
 800137a:	f008 fa03 	bl	8009784 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 800137e:	f107 030c 	add.w	r3, r7, #12
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	605a      	str	r2, [r3, #4]
 8001388:	609a      	str	r2, [r3, #8]
 800138a:	60da      	str	r2, [r3, #12]
 800138c:	611a      	str	r2, [r3, #16]
 800138e:	615a      	str	r2, [r3, #20]

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001390:	2002      	movs	r0, #2
 8001392:	f003 fe67 	bl	8005064 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001396:	2300      	movs	r3, #0
 8001398:	60bb      	str	r3, [r7, #8]
 800139a:	4b4c      	ldr	r3, [pc, #304]	; (80014cc <SystemClock_Config+0x170>)
 800139c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800139e:	4a4b      	ldr	r2, [pc, #300]	; (80014cc <SystemClock_Config+0x170>)
 80013a0:	f023 0301 	bic.w	r3, r3, #1
 80013a4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80013a6:	4b49      	ldr	r3, [pc, #292]	; (80014cc <SystemClock_Config+0x170>)
 80013a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	60bb      	str	r3, [r7, #8]
 80013b0:	4b47      	ldr	r3, [pc, #284]	; (80014d0 <SystemClock_Config+0x174>)
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	4a46      	ldr	r2, [pc, #280]	; (80014d0 <SystemClock_Config+0x174>)
 80013b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013ba:	6193      	str	r3, [r2, #24]
 80013bc:	4b44      	ldr	r3, [pc, #272]	; (80014d0 <SystemClock_Config+0x174>)
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80013c8:	bf00      	nop
 80013ca:	4b41      	ldr	r3, [pc, #260]	; (80014d0 <SystemClock_Config+0x174>)
 80013cc:	699b      	ldr	r3, [r3, #24]
 80013ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013d6:	d1f8      	bne.n	80013ca <SystemClock_Config+0x6e>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80013d8:	f003 fdde 	bl	8004f98 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80013dc:	f001 f92a 	bl	8002634 <HAL_GetREVID>
 80013e0:	4b3c      	ldr	r3, [pc, #240]	; (80014d4 <SystemClock_Config+0x178>)
 80013e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013e4:	4a3b      	ldr	r2, [pc, #236]	; (80014d4 <SystemClock_Config+0x178>)
 80013e6:	f023 0318 	bic.w	r3, r3, #24
 80013ea:	6713      	str	r3, [r2, #112]	; 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 80013ec:	2325      	movs	r3, #37	; 0x25
 80013ee:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80013f0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80013f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80013f6:	2301      	movs	r3, #1
 80013f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80013fa:	2301      	movs	r3, #1
 80013fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013fe:	2302      	movs	r3, #2
 8001400:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001402:	2302      	movs	r3, #2
 8001404:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001406:	2301      	movs	r3, #1
 8001408:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 96;
 800140a:	2360      	movs	r3, #96	; 0x60
 800140c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = 2;
 800140e:	2302      	movs	r3, #2
 8001410:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001412:	2304      	movs	r3, #4
 8001414:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001416:	2302      	movs	r3, #2
 8001418:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800141c:	230c      	movs	r3, #12
 800141e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001422:	2300      	movs	r3, #0
 8001424:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001428:	2300      	movs	r3, #0
 800142a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800142e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001432:	4618      	mov	r0, r3
 8001434:	f003 fe60 	bl	80050f8 <HAL_RCC_OscConfig>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800143e:	f000 fc59 	bl	8001cf4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001442:	233f      	movs	r3, #63	; 0x3f
 8001444:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001446:	2303      	movs	r3, #3
 8001448:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800144a:	2300      	movs	r3, #0
 800144c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV4;
 800144e:	2309      	movs	r3, #9
 8001450:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001452:	2300      	movs	r3, #0
 8001454:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001456:	2300      	movs	r3, #0
 8001458:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV16;
 800145a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800145e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001460:	2300      	movs	r3, #0
 8001462:	643b      	str	r3, [r7, #64]	; 0x40

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001464:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001468:	2101      	movs	r1, #1
 800146a:	4618      	mov	r0, r3
 800146c:	f004 fa9e 	bl	80059ac <HAL_RCC_ClockConfig>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <SystemClock_Config+0x11e>
  {
    Error_Handler();
 8001476:	f000 fc3d 	bl	8001cf4 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800147a:	f004 fc4d 	bl	8005d18 <HAL_RCC_EnableCSS>

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 800147e:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <SystemClock_Config+0x178>)
 8001480:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001484:	4a13      	ldr	r2, [pc, #76]	; (80014d4 <SystemClock_Config+0x178>)
 8001486:	f043 0302 	orr.w	r3, r3, #2
 800148a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800148e:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <SystemClock_Config+0x178>)
 8001490:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001494:	f003 0302 	and.w	r3, r3, #2
 8001498:	607b      	str	r3, [r7, #4]
 800149a:	687b      	ldr	r3, [r7, #4]

  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 800149c:	2300      	movs	r3, #0
 800149e:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_LSE;
 80014a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80014a4:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 80014a6:	2300      	movs	r3, #0
 80014a8:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,32768);
 80014aa:	f240 53b7 	movw	r3, #1463	; 0x5b7
 80014ae:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 80014b0:	2322      	movs	r3, #34	; 0x22
 80014b2:	61fb      	str	r3, [r7, #28]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 80014b4:	2320      	movs	r3, #32
 80014b6:	623b      	str	r3, [r7, #32]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 80014b8:	f107 030c 	add.w	r3, r7, #12
 80014bc:	4618      	mov	r0, r3
 80014be:	f006 faf5 	bl	8007aac <HAL_RCCEx_CRSConfig>
}
 80014c2:	bf00      	nop
 80014c4:	3790      	adds	r7, #144	; 0x90
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	58000400 	.word	0x58000400
 80014d0:	58024800 	.word	0x58024800
 80014d4:	58024400 	.word	0x58024400

080014d8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08a      	sub	sp, #40	; 0x28
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80014de:	1d3b      	adds	r3, r7, #4
 80014e0:	2224      	movs	r2, #36	; 0x24
 80014e2:	2100      	movs	r1, #0
 80014e4:	4618      	mov	r0, r3
 80014e6:	f008 f94d 	bl	8009784 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80014ea:	4b12      	ldr	r3, [pc, #72]	; (8001534 <MX_DAC1_Init+0x5c>)
 80014ec:	4a12      	ldr	r2, [pc, #72]	; (8001538 <MX_DAC1_Init+0x60>)
 80014ee:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80014f0:	4810      	ldr	r0, [pc, #64]	; (8001534 <MX_DAC1_Init+0x5c>)
 80014f2:	f001 f9ba 	bl	800286a <HAL_DAC_Init>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80014fc:	f000 fbfa 	bl	8001cf4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001500:	2300      	movs	r3, #0
 8001502:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001504:	2300      	movs	r3, #0
 8001506:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001508:	2300      	movs	r3, #0
 800150a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800150c:	2301      	movs	r3, #1
 800150e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001510:	2300      	movs	r3, #0
 8001512:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001514:	1d3b      	adds	r3, r7, #4
 8001516:	2200      	movs	r2, #0
 8001518:	4619      	mov	r1, r3
 800151a:	4806      	ldr	r0, [pc, #24]	; (8001534 <MX_DAC1_Init+0x5c>)
 800151c:	f001 f9c8 	bl	80028b0 <HAL_DAC_ConfigChannel>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001526:	f000 fbe5 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800152a:	bf00      	nop
 800152c:	3728      	adds	r7, #40	; 0x28
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	200000bc 	.word	0x200000bc
 8001538:	40007400 	.word	0x40007400

0800153c <MX_HRTIM_Init>:
  * @brief HRTIM Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b0a4      	sub	sp, #144	; 0x90
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM_Init 0 */

  /* USER CODE END HRTIM_Init 0 */

  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8001542:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	605a      	str	r2, [r3, #4]
 800154c:	609a      	str	r2, [r3, #8]
 800154e:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8001550:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001554:	2254      	movs	r2, #84	; 0x54
 8001556:	2100      	movs	r1, #0
 8001558:	4618      	mov	r0, r3
 800155a:	f008 f913 	bl	8009784 <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 800155e:	f107 0320 	add.w	r3, r7, #32
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	605a      	str	r2, [r3, #4]
 8001568:	609a      	str	r2, [r3, #8]
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 800156a:	463b      	mov	r3, r7
 800156c:	2220      	movs	r2, #32
 800156e:	2100      	movs	r1, #0
 8001570:	4618      	mov	r0, r3
 8001572:	f008 f907 	bl	8009784 <memset>

  /* USER CODE BEGIN HRTIM_Init 1 */

  /* USER CODE END HRTIM_Init 1 */
  hhrtim.Instance = HRTIM1;
 8001576:	4b98      	ldr	r3, [pc, #608]	; (80017d8 <MX_HRTIM_Init+0x29c>)
 8001578:	4a98      	ldr	r2, [pc, #608]	; (80017dc <MX_HRTIM_Init+0x2a0>)
 800157a:	601a      	str	r2, [r3, #0]
  hhrtim.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 800157c:	4b96      	ldr	r3, [pc, #600]	; (80017d8 <MX_HRTIM_Init+0x29c>)
 800157e:	2200      	movs	r2, #0
 8001580:	605a      	str	r2, [r3, #4]
  hhrtim.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8001582:	4b95      	ldr	r3, [pc, #596]	; (80017d8 <MX_HRTIM_Init+0x29c>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim) != HAL_OK)
 8001588:	4893      	ldr	r0, [pc, #588]	; (80017d8 <MX_HRTIM_Init+0x29c>)
 800158a:	f001 fce5 	bl	8002f58 <HAL_HRTIM_Init>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_HRTIM_Init+0x5c>
  {
    Error_Handler();
 8001594:	f000 fbae 	bl	8001cf4 <Error_Handler>
  }
  pTimeBaseCfg.Period = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME+PROBE_WIDTH+POP_CYCLE_DELAY;
 8001598:	f24c 2318 	movw	r3, #49688	; 0xc218
 800159c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pTimeBaseCfg.RepetitionCounter = 0x00;
 80015a0:	2300      	movs	r3, #0
 80015a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV4;
 80015a6:	2307      	movs	r3, #7
 80015a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 80015ac:	2308      	movs	r3, #8
 80015ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 80015b2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80015b6:	461a      	mov	r2, r3
 80015b8:	2100      	movs	r1, #0
 80015ba:	4887      	ldr	r0, [pc, #540]	; (80017d8 <MX_HRTIM_Init+0x29c>)
 80015bc:	f001 fd9c 	bl	80030f8 <HAL_HRTIM_TimeBaseConfig>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_HRTIM_Init+0x8e>
  {
    Error_Handler();
 80015c6:	f000 fb95 	bl	8001cf4 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_CMP3|HRTIM_TIM_IT_REP;
 80015ca:	2314      	movs	r3, #20
 80015cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 80015ce:	2300      	movs	r3, #0
 80015d0:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.DMASrcAddress = 0x0000;
 80015d2:	2300      	movs	r3, #0
 80015d4:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.DMADstAddress = 0x0000;
 80015d6:	2300      	movs	r3, #0
 80015d8:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.DMASize = 0x1;
 80015da:	2301      	movs	r3, #1
 80015dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 80015de:	2300      	movs	r3, #0
 80015e0:	643b      	str	r3, [r7, #64]	; 0x40
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 80015e2:	2300      	movs	r3, #0
 80015e4:	647b      	str	r3, [r7, #68]	; 0x44
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 80015e6:	2300      	movs	r3, #0
 80015e8:	64bb      	str	r3, [r7, #72]	; 0x48
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 80015ea:	2300      	movs	r3, #0
 80015ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 80015ee:	2300      	movs	r3, #0
 80015f0:	653b      	str	r3, [r7, #80]	; 0x50
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 80015f2:	2300      	movs	r3, #0
 80015f4:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 80015f6:	2300      	movs	r3, #0
 80015f8:	65bb      	str	r3, [r7, #88]	; 0x58
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 80015fa:	2300      	movs	r3, #0
 80015fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 80015fe:	2300      	movs	r3, #0
 8001600:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8001602:	2300      	movs	r3, #0
 8001604:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8001606:	2300      	movs	r3, #0
 8001608:	66bb      	str	r3, [r7, #104]	; 0x68
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 800160a:	2300      	movs	r3, #0
 800160c:	66fb      	str	r3, [r7, #108]	; 0x6c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 800160e:	2300      	movs	r3, #0
 8001610:	673b      	str	r3, [r7, #112]	; 0x70
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 8001612:	2300      	movs	r3, #0
 8001614:	677b      	str	r3, [r7, #116]	; 0x74
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 8001616:	2300      	movs	r3, #0
 8001618:	67bb      	str	r3, [r7, #120]	; 0x78
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 800161a:	2300      	movs	r3, #0
 800161c:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 800161e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001622:	461a      	mov	r2, r3
 8001624:	2100      	movs	r1, #0
 8001626:	486c      	ldr	r0, [pc, #432]	; (80017d8 <MX_HRTIM_Init+0x29c>)
 8001628:	f001 fd8e 	bl	8003148 <HAL_HRTIM_WaveformTimerConfig>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_HRTIM_Init+0xfa>
  {
    Error_Handler();
 8001632:	f000 fb5f 	bl	8001cf4 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_CMP2|HRTIM_TIM_IT_CMP3;
 8001636:	2306      	movs	r3, #6
 8001638:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 800163a:	2300      	movs	r3, #0
 800163c:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimerCfg) != HAL_OK)
 800163e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001642:	461a      	mov	r2, r3
 8001644:	2104      	movs	r1, #4
 8001646:	4864      	ldr	r0, [pc, #400]	; (80017d8 <MX_HRTIM_Init+0x29c>)
 8001648:	f001 fd7e 	bl	8003148 <HAL_HRTIM_WaveformTimerConfig>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_HRTIM_Init+0x11a>
  {
    Error_Handler();
 8001652:	f000 fb4f 	bl	8001cf4 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH;
 8001656:	f240 631b 	movw	r3, #1563	; 0x61b
 800165a:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 800165c:	f107 0320 	add.w	r3, r7, #32
 8001660:	2201      	movs	r2, #1
 8001662:	2100      	movs	r1, #0
 8001664:	485c      	ldr	r0, [pc, #368]	; (80017d8 <MX_HRTIM_Init+0x29c>)
 8001666:	f001 fde1 	bl	800322c <HAL_HRTIM_WaveformCompareConfig>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_HRTIM_Init+0x138>
  {
    Error_Handler();
 8001670:	f000 fb40 	bl	8001cf4 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME;
 8001674:	f244 5395 	movw	r3, #17813	; 0x4595
 8001678:	623b      	str	r3, [r7, #32]
  pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 800167a:	2300      	movs	r3, #0
 800167c:	627b      	str	r3, [r7, #36]	; 0x24
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 800167e:	2300      	movs	r3, #0
 8001680:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8001682:	f107 0320 	add.w	r3, r7, #32
 8001686:	2202      	movs	r2, #2
 8001688:	2100      	movs	r1, #0
 800168a:	4853      	ldr	r0, [pc, #332]	; (80017d8 <MX_HRTIM_Init+0x29c>)
 800168c:	f001 fdce 	bl	800322c <HAL_HRTIM_WaveformCompareConfig>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_HRTIM_Init+0x15e>
  {
    Error_Handler();
 8001696:	f000 fb2d 	bl	8001cf4 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH;
 800169a:	f640 536e 	movw	r3, #3438	; 0xd6e
 800169e:	623b      	str	r3, [r7, #32]

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 80016a0:	f107 0320 	add.w	r3, r7, #32
 80016a4:	2202      	movs	r2, #2
 80016a6:	2104      	movs	r1, #4
 80016a8:	484b      	ldr	r0, [pc, #300]	; (80017d8 <MX_HRTIM_Init+0x29c>)
 80016aa:	f001 fdbf 	bl	800322c <HAL_HRTIM_WaveformCompareConfig>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_HRTIM_Init+0x17c>
  {
    Error_Handler();
 80016b4:	f000 fb1e 	bl	8001cf4 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME+PROBE_WIDTH;
 80016b8:	f644 0306 	movw	r3, #18438	; 0x4806
 80016bc:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 80016be:	f107 0320 	add.w	r3, r7, #32
 80016c2:	2204      	movs	r2, #4
 80016c4:	2100      	movs	r1, #0
 80016c6:	4844      	ldr	r0, [pc, #272]	; (80017d8 <MX_HRTIM_Init+0x29c>)
 80016c8:	f001 fdb0 	bl	800322c <HAL_HRTIM_WaveformCompareConfig>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_HRTIM_Init+0x19a>
  {
    Error_Handler();
 80016d2:	f000 fb0f 	bl	8001cf4 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH+RAMSEY_TIME+MICROWAVE_WIDTH;
 80016d6:	f244 435d 	movw	r3, #17501	; 0x445d
 80016da:	623b      	str	r3, [r7, #32]

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_4, &pCompareCfg) != HAL_OK)
 80016dc:	f107 0320 	add.w	r3, r7, #32
 80016e0:	2208      	movs	r2, #8
 80016e2:	2104      	movs	r1, #4
 80016e4:	483c      	ldr	r0, [pc, #240]	; (80017d8 <MX_HRTIM_Init+0x29c>)
 80016e6:	f001 fda1 	bl	800322c <HAL_HRTIM_WaveformCompareConfig>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_HRTIM_Init+0x1b8>
  {
    Error_Handler();
 80016f0:	f000 fb00 	bl	8001cf4 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_LOW;
 80016f4:	2302      	movs	r3, #2
 80016f6:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP1|HRTIM_OUTPUTSET_TIMCMP3;
 80016f8:	2328      	movs	r3, #40	; 0x28
 80016fa:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2|HRTIM_OUTPUTRESET_TIMPER;
 80016fc:	2314      	movs	r3, #20
 80016fe:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8001700:	2300      	movs	r3, #0
 8001702:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_ACTIVE;
 8001704:	2308      	movs	r3, #8
 8001706:	613b      	str	r3, [r7, #16]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 800170c:	2300      	movs	r3, #0
 800170e:	61bb      	str	r3, [r7, #24]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8001710:	2300      	movs	r3, #0
 8001712:	61fb      	str	r3, [r7, #28]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 8001714:	463b      	mov	r3, r7
 8001716:	2201      	movs	r2, #1
 8001718:	2100      	movs	r1, #0
 800171a:	482f      	ldr	r0, [pc, #188]	; (80017d8 <MX_HRTIM_Init+0x29c>)
 800171c:	f001 fef4 	bl	8003508 <HAL_HRTIM_WaveformOutputConfig>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_HRTIM_Init+0x1ee>
  {
    Error_Handler();
 8001726:	f000 fae5 	bl	8001cf4 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 800172a:	2300      	movs	r3, #0
 800172c:	603b      	str	r3, [r7, #0]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2|HRTIM_OUTPUTRESET_TIMCMP4;
 800172e:	2350      	movs	r3, #80	; 0x50
 8001730:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8001732:	2300      	movs	r3, #0
 8001734:	613b      	str	r3, [r7, #16]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE1, &pOutputCfg) != HAL_OK)
 8001736:	463b      	mov	r3, r7
 8001738:	f44f 7280 	mov.w	r2, #256	; 0x100
 800173c:	2104      	movs	r1, #4
 800173e:	4826      	ldr	r0, [pc, #152]	; (80017d8 <MX_HRTIM_Init+0x29c>)
 8001740:	f001 fee2 	bl	8003508 <HAL_HRTIM_WaveformOutputConfig>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_HRTIM_Init+0x212>
  {
    Error_Handler();
 800174a:	f000 fad3 	bl	8001cf4 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_LOW;
 800174e:	2302      	movs	r3, #2
 8001750:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP3;
 8001752:	2320      	movs	r3, #32
 8001754:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2;
 8001756:	2310      	movs	r3, #16
 8001758:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_ACTIVE;
 800175a:	2308      	movs	r3, #8
 800175c:	613b      	str	r3, [r7, #16]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 800175e:	463b      	mov	r3, r7
 8001760:	2202      	movs	r2, #2
 8001762:	2100      	movs	r1, #0
 8001764:	481c      	ldr	r0, [pc, #112]	; (80017d8 <MX_HRTIM_Init+0x29c>)
 8001766:	f001 fecf 	bl	8003508 <HAL_HRTIM_WaveformOutputConfig>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_HRTIM_Init+0x238>
  {
    Error_Handler();
 8001770:	f000 fac0 	bl	8001cf4 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimeBaseCfg) != HAL_OK)
 8001774:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001778:	461a      	mov	r2, r3
 800177a:	2104      	movs	r1, #4
 800177c:	4816      	ldr	r0, [pc, #88]	; (80017d8 <MX_HRTIM_Init+0x29c>)
 800177e:	f001 fcbb 	bl	80030f8 <HAL_HRTIM_TimeBaseConfig>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_HRTIM_Init+0x250>
  {
    Error_Handler();
 8001788:	f000 fab4 	bl	8001cf4 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY;
 800178c:	f240 7353 	movw	r3, #1875	; 0x753
 8001790:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8001792:	f107 0320 	add.w	r3, r7, #32
 8001796:	2201      	movs	r2, #1
 8001798:	2104      	movs	r1, #4
 800179a:	480f      	ldr	r0, [pc, #60]	; (80017d8 <MX_HRTIM_Init+0x29c>)
 800179c:	f001 fd46 	bl	800322c <HAL_HRTIM_WaveformCompareConfig>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_HRTIM_Init+0x26e>
  {
    Error_Handler();
 80017a6:	f000 faa5 	bl	8001cf4 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH+RAMSEY_TIME;
 80017aa:	f643 6342 	movw	r3, #15938	; 0x3e42
 80017ae:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 80017b0:	f107 0320 	add.w	r3, r7, #32
 80017b4:	2204      	movs	r2, #4
 80017b6:	2104      	movs	r1, #4
 80017b8:	4807      	ldr	r0, [pc, #28]	; (80017d8 <MX_HRTIM_Init+0x29c>)
 80017ba:	f001 fd37 	bl	800322c <HAL_HRTIM_WaveformCompareConfig>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_HRTIM_Init+0x28c>
  {
    Error_Handler();
 80017c4:	f000 fa96 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM_Init 2 */

  /* USER CODE END HRTIM_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim);
 80017c8:	4803      	ldr	r0, [pc, #12]	; (80017d8 <MX_HRTIM_Init+0x29c>)
 80017ca:	f000 fb67 	bl	8001e9c <HAL_HRTIM_MspPostInit>

}
 80017ce:	bf00      	nop
 80017d0:	3790      	adds	r7, #144	; 0x90
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	200000d0 	.word	0x200000d0
 80017dc:	40017400 	.word	0x40017400

080017e0 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 80017e4:	4b13      	ldr	r3, [pc, #76]	; (8001834 <MX_LPTIM1_Init+0x54>)
 80017e6:	4a14      	ldr	r2, [pc, #80]	; (8001838 <MX_LPTIM1_Init+0x58>)
 80017e8:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80017ea:	4b12      	ldr	r3, [pc, #72]	; (8001834 <MX_LPTIM1_Init+0x54>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV32;
 80017f0:	4b10      	ldr	r3, [pc, #64]	; (8001834 <MX_LPTIM1_Init+0x54>)
 80017f2:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80017f6:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80017f8:	4b0e      	ldr	r3, [pc, #56]	; (8001834 <MX_LPTIM1_Init+0x54>)
 80017fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017fe:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001800:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <MX_LPTIM1_Init+0x54>)
 8001802:	2200      	movs	r2, #0
 8001804:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8001806:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <MX_LPTIM1_Init+0x54>)
 8001808:	2200      	movs	r2, #0
 800180a:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 800180c:	4b09      	ldr	r3, [pc, #36]	; (8001834 <MX_LPTIM1_Init+0x54>)
 800180e:	2200      	movs	r2, #0
 8001810:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001812:	4b08      	ldr	r3, [pc, #32]	; (8001834 <MX_LPTIM1_Init+0x54>)
 8001814:	2200      	movs	r2, #0
 8001816:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8001818:	4b06      	ldr	r3, [pc, #24]	; (8001834 <MX_LPTIM1_Init+0x54>)
 800181a:	2200      	movs	r2, #0
 800181c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 800181e:	4805      	ldr	r0, [pc, #20]	; (8001834 <MX_LPTIM1_Init+0x54>)
 8001820:	f002 ffba 	bl	8004798 <HAL_LPTIM_Init>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 800182a:	f000 fa63 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	200001ac 	.word	0x200001ac
 8001838:	40002400 	.word	0x40002400

0800183c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b088      	sub	sp, #32
 8001840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001842:	f107 0310 	add.w	r3, r7, #16
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	605a      	str	r2, [r3, #4]
 800184c:	609a      	str	r2, [r3, #8]
 800184e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001850:	1d3b      	adds	r3, r7, #4
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	605a      	str	r2, [r3, #4]
 8001858:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800185a:	4b20      	ldr	r3, [pc, #128]	; (80018dc <MX_TIM1_Init+0xa0>)
 800185c:	4a20      	ldr	r2, [pc, #128]	; (80018e0 <MX_TIM1_Init+0xa4>)
 800185e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1249;
 8001860:	4b1e      	ldr	r3, [pc, #120]	; (80018dc <MX_TIM1_Init+0xa0>)
 8001862:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8001866:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001868:	4b1c      	ldr	r3, [pc, #112]	; (80018dc <MX_TIM1_Init+0xa0>)
 800186a:	2200      	movs	r2, #0
 800186c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800186e:	4b1b      	ldr	r3, [pc, #108]	; (80018dc <MX_TIM1_Init+0xa0>)
 8001870:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001874:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001876:	4b19      	ldr	r3, [pc, #100]	; (80018dc <MX_TIM1_Init+0xa0>)
 8001878:	2200      	movs	r2, #0
 800187a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800187c:	4b17      	ldr	r3, [pc, #92]	; (80018dc <MX_TIM1_Init+0xa0>)
 800187e:	2200      	movs	r2, #0
 8001880:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001882:	4b16      	ldr	r3, [pc, #88]	; (80018dc <MX_TIM1_Init+0xa0>)
 8001884:	2200      	movs	r2, #0
 8001886:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001888:	4814      	ldr	r0, [pc, #80]	; (80018dc <MX_TIM1_Init+0xa0>)
 800188a:	f006 fac9 	bl	8007e20 <HAL_TIM_Base_Init>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8001894:	f000 fa2e 	bl	8001cf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001898:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800189c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800189e:	f107 0310 	add.w	r3, r7, #16
 80018a2:	4619      	mov	r1, r3
 80018a4:	480d      	ldr	r0, [pc, #52]	; (80018dc <MX_TIM1_Init+0xa0>)
 80018a6:	f006 fb13 	bl	8007ed0 <HAL_TIM_ConfigClockSource>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80018b0:	f000 fa20 	bl	8001cf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018b4:	2300      	movs	r3, #0
 80018b6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80018b8:	2300      	movs	r3, #0
 80018ba:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018bc:	2300      	movs	r3, #0
 80018be:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018c0:	1d3b      	adds	r3, r7, #4
 80018c2:	4619      	mov	r1, r3
 80018c4:	4805      	ldr	r0, [pc, #20]	; (80018dc <MX_TIM1_Init+0xa0>)
 80018c6:	f006 fd33 	bl	8008330 <HAL_TIMEx_MasterConfigSynchronization>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80018d0:	f000 fa10 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80018d4:	bf00      	nop
 80018d6:	3720      	adds	r7, #32
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	200001e4 	.word	0x200001e4
 80018e0:	40010000 	.word	0x40010000

080018e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b088      	sub	sp, #32
 80018e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ea:	f107 0310 	add.w	r3, r7, #16
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	605a      	str	r2, [r3, #4]
 80018f4:	609a      	str	r2, [r3, #8]
 80018f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018f8:	1d3b      	adds	r3, r7, #4
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	605a      	str	r2, [r3, #4]
 8001900:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001902:	4b1d      	ldr	r3, [pc, #116]	; (8001978 <MX_TIM3_Init+0x94>)
 8001904:	4a1d      	ldr	r2, [pc, #116]	; (800197c <MX_TIM3_Init+0x98>)
 8001906:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 124;
 8001908:	4b1b      	ldr	r3, [pc, #108]	; (8001978 <MX_TIM3_Init+0x94>)
 800190a:	227c      	movs	r2, #124	; 0x7c
 800190c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800190e:	4b1a      	ldr	r3, [pc, #104]	; (8001978 <MX_TIM3_Init+0x94>)
 8001910:	2200      	movs	r2, #0
 8001912:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001914:	4b18      	ldr	r3, [pc, #96]	; (8001978 <MX_TIM3_Init+0x94>)
 8001916:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800191a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800191c:	4b16      	ldr	r3, [pc, #88]	; (8001978 <MX_TIM3_Init+0x94>)
 800191e:	2200      	movs	r2, #0
 8001920:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001922:	4b15      	ldr	r3, [pc, #84]	; (8001978 <MX_TIM3_Init+0x94>)
 8001924:	2200      	movs	r2, #0
 8001926:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001928:	4813      	ldr	r0, [pc, #76]	; (8001978 <MX_TIM3_Init+0x94>)
 800192a:	f006 fa79 	bl	8007e20 <HAL_TIM_Base_Init>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001934:	f000 f9de 	bl	8001cf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001938:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800193c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800193e:	f107 0310 	add.w	r3, r7, #16
 8001942:	4619      	mov	r1, r3
 8001944:	480c      	ldr	r0, [pc, #48]	; (8001978 <MX_TIM3_Init+0x94>)
 8001946:	f006 fac3 	bl	8007ed0 <HAL_TIM_ConfigClockSource>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001950:	f000 f9d0 	bl	8001cf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001954:	2300      	movs	r3, #0
 8001956:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001958:	2300      	movs	r3, #0
 800195a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800195c:	1d3b      	adds	r3, r7, #4
 800195e:	4619      	mov	r1, r3
 8001960:	4805      	ldr	r0, [pc, #20]	; (8001978 <MX_TIM3_Init+0x94>)
 8001962:	f006 fce5 	bl	8008330 <HAL_TIMEx_MasterConfigSynchronization>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800196c:	f000 f9c2 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001970:	bf00      	nop
 8001972:	3720      	adds	r7, #32
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	20000230 	.word	0x20000230
 800197c:	40000400 	.word	0x40000400

08001980 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001984:	4b22      	ldr	r3, [pc, #136]	; (8001a10 <MX_USART3_UART_Init+0x90>)
 8001986:	4a23      	ldr	r2, [pc, #140]	; (8001a14 <MX_USART3_UART_Init+0x94>)
 8001988:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1000000;
 800198a:	4b21      	ldr	r3, [pc, #132]	; (8001a10 <MX_USART3_UART_Init+0x90>)
 800198c:	4a22      	ldr	r2, [pc, #136]	; (8001a18 <MX_USART3_UART_Init+0x98>)
 800198e:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001990:	4b1f      	ldr	r3, [pc, #124]	; (8001a10 <MX_USART3_UART_Init+0x90>)
 8001992:	2200      	movs	r2, #0
 8001994:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001996:	4b1e      	ldr	r3, [pc, #120]	; (8001a10 <MX_USART3_UART_Init+0x90>)
 8001998:	2200      	movs	r2, #0
 800199a:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800199c:	4b1c      	ldr	r3, [pc, #112]	; (8001a10 <MX_USART3_UART_Init+0x90>)
 800199e:	2200      	movs	r2, #0
 80019a0:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80019a2:	4b1b      	ldr	r3, [pc, #108]	; (8001a10 <MX_USART3_UART_Init+0x90>)
 80019a4:	220c      	movs	r2, #12
 80019a6:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019a8:	4b19      	ldr	r3, [pc, #100]	; (8001a10 <MX_USART3_UART_Init+0x90>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80019ae:	4b18      	ldr	r3, [pc, #96]	; (8001a10 <MX_USART3_UART_Init+0x90>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019b4:	4b16      	ldr	r3, [pc, #88]	; (8001a10 <MX_USART3_UART_Init+0x90>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019ba:	4b15      	ldr	r3, [pc, #84]	; (8001a10 <MX_USART3_UART_Init+0x90>)
 80019bc:	2200      	movs	r2, #0
 80019be:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019c0:	4b13      	ldr	r3, [pc, #76]	; (8001a10 <MX_USART3_UART_Init+0x90>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80019c6:	4812      	ldr	r0, [pc, #72]	; (8001a10 <MX_USART3_UART_Init+0x90>)
 80019c8:	f006 fd40 	bl	800844c <HAL_UART_Init>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 80019d2:	f000 f98f 	bl	8001cf4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019d6:	2100      	movs	r1, #0
 80019d8:	480d      	ldr	r0, [pc, #52]	; (8001a10 <MX_USART3_UART_Init+0x90>)
 80019da:	f007 fdd0 	bl	800957e <HAL_UARTEx_SetTxFifoThreshold>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 80019e4:	f000 f986 	bl	8001cf4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019e8:	2100      	movs	r1, #0
 80019ea:	4809      	ldr	r0, [pc, #36]	; (8001a10 <MX_USART3_UART_Init+0x90>)
 80019ec:	f007 fe05 	bl	80095fa <HAL_UARTEx_SetRxFifoThreshold>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 80019f6:	f000 f97d 	bl	8001cf4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80019fa:	4805      	ldr	r0, [pc, #20]	; (8001a10 <MX_USART3_UART_Init+0x90>)
 80019fc:	f007 fd86 	bl	800950c <HAL_UARTEx_DisableFifoMode>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8001a06:	f000 f975 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	2000027c 	.word	0x2000027c
 8001a14:	40004800 	.word	0x40004800
 8001a18:	000f4240 	.word	0x000f4240

08001a1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b08c      	sub	sp, #48	; 0x30
 8001a20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a22:	f107 031c 	add.w	r3, r7, #28
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	605a      	str	r2, [r3, #4]
 8001a2c:	609a      	str	r2, [r3, #8]
 8001a2e:	60da      	str	r2, [r3, #12]
 8001a30:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a32:	4ba9      	ldr	r3, [pc, #676]	; (8001cd8 <MX_GPIO_Init+0x2bc>)
 8001a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a38:	4aa7      	ldr	r2, [pc, #668]	; (8001cd8 <MX_GPIO_Init+0x2bc>)
 8001a3a:	f043 0310 	orr.w	r3, r3, #16
 8001a3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a42:	4ba5      	ldr	r3, [pc, #660]	; (8001cd8 <MX_GPIO_Init+0x2bc>)
 8001a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a48:	f003 0310 	and.w	r3, r3, #16
 8001a4c:	61bb      	str	r3, [r7, #24]
 8001a4e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a50:	4ba1      	ldr	r3, [pc, #644]	; (8001cd8 <MX_GPIO_Init+0x2bc>)
 8001a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a56:	4aa0      	ldr	r2, [pc, #640]	; (8001cd8 <MX_GPIO_Init+0x2bc>)
 8001a58:	f043 0304 	orr.w	r3, r3, #4
 8001a5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a60:	4b9d      	ldr	r3, [pc, #628]	; (8001cd8 <MX_GPIO_Init+0x2bc>)
 8001a62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a66:	f003 0304 	and.w	r3, r3, #4
 8001a6a:	617b      	str	r3, [r7, #20]
 8001a6c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a6e:	4b9a      	ldr	r3, [pc, #616]	; (8001cd8 <MX_GPIO_Init+0x2bc>)
 8001a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a74:	4a98      	ldr	r2, [pc, #608]	; (8001cd8 <MX_GPIO_Init+0x2bc>)
 8001a76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a7e:	4b96      	ldr	r3, [pc, #600]	; (8001cd8 <MX_GPIO_Init+0x2bc>)
 8001a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a88:	613b      	str	r3, [r7, #16]
 8001a8a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8c:	4b92      	ldr	r3, [pc, #584]	; (8001cd8 <MX_GPIO_Init+0x2bc>)
 8001a8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a92:	4a91      	ldr	r2, [pc, #580]	; (8001cd8 <MX_GPIO_Init+0x2bc>)
 8001a94:	f043 0301 	orr.w	r3, r3, #1
 8001a98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a9c:	4b8e      	ldr	r3, [pc, #568]	; (8001cd8 <MX_GPIO_Init+0x2bc>)
 8001a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aaa:	4b8b      	ldr	r3, [pc, #556]	; (8001cd8 <MX_GPIO_Init+0x2bc>)
 8001aac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ab0:	4a89      	ldr	r2, [pc, #548]	; (8001cd8 <MX_GPIO_Init+0x2bc>)
 8001ab2:	f043 0302 	orr.w	r3, r3, #2
 8001ab6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001aba:	4b87      	ldr	r3, [pc, #540]	; (8001cd8 <MX_GPIO_Init+0x2bc>)
 8001abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ac0:	f003 0302 	and.w	r3, r3, #2
 8001ac4:	60bb      	str	r3, [r7, #8]
 8001ac6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ac8:	4b83      	ldr	r3, [pc, #524]	; (8001cd8 <MX_GPIO_Init+0x2bc>)
 8001aca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ace:	4a82      	ldr	r2, [pc, #520]	; (8001cd8 <MX_GPIO_Init+0x2bc>)
 8001ad0:	f043 0308 	orr.w	r3, r3, #8
 8001ad4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ad8:	4b7f      	ldr	r3, [pc, #508]	; (8001cd8 <MX_GPIO_Init+0x2bc>)
 8001ada:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ade:	f003 0308 	and.w	r3, r3, #8
 8001ae2:	607b      	str	r3, [r7, #4]
 8001ae4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ae6:	4b7c      	ldr	r3, [pc, #496]	; (8001cd8 <MX_GPIO_Init+0x2bc>)
 8001ae8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aec:	4a7a      	ldr	r2, [pc, #488]	; (8001cd8 <MX_GPIO_Init+0x2bc>)
 8001aee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001af2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001af6:	4b78      	ldr	r3, [pc, #480]	; (8001cd8 <MX_GPIO_Init+0x2bc>)
 8001af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b00:	603b      	str	r3, [r7, #0]
 8001b02:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ATT_4_Pin|ATT_8_Pin|ATT_16_Pin, GPIO_PIN_SET);
 8001b04:	2201      	movs	r2, #1
 8001b06:	2134      	movs	r1, #52	; 0x34
 8001b08:	4874      	ldr	r0, [pc, #464]	; (8001cdc <MX_GPIO_Init+0x2c0>)
 8001b0a:	f001 f9d7 	bl	8002ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f244 0101 	movw	r1, #16385	; 0x4001
 8001b14:	4872      	ldr	r0, [pc, #456]	; (8001ce0 <MX_GPIO_Init+0x2c4>)
 8001b16:	f001 f9d1 	bl	8002ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b20:	4870      	ldr	r0, [pc, #448]	; (8001ce4 <MX_GPIO_Init+0x2c8>)
 8001b22:	f001 f9cb 	bl	8002ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SCLK_Pin|MOSI_Pin|REG_EN_Pin, GPIO_PIN_RESET);
 8001b26:	2200      	movs	r2, #0
 8001b28:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 8001b2c:	486e      	ldr	r0, [pc, #440]	; (8001ce8 <MX_GPIO_Init+0x2cc>)
 8001b2e:	f001 f9c5 	bl	8002ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 8001b32:	2201      	movs	r2, #1
 8001b34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b38:	486b      	ldr	r0, [pc, #428]	; (8001ce8 <MX_GPIO_Init+0x2cc>)
 8001b3a:	f001 f9bf 	bl	8002ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ATT_2_Pin|ATT_1_Pin|ATT_05_Pin|ATT_025_Pin
 8001b3e:	2201      	movs	r2, #1
 8001b40:	21f8      	movs	r1, #248	; 0xf8
 8001b42:	4868      	ldr	r0, [pc, #416]	; (8001ce4 <MX_GPIO_Init+0x2c8>)
 8001b44:	f001 f9ba 	bl	8002ebc <HAL_GPIO_WritePin>
                          |ATT_LE_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001b48:	2200      	movs	r2, #0
 8001b4a:	2102      	movs	r1, #2
 8001b4c:	4863      	ldr	r0, [pc, #396]	; (8001cdc <MX_GPIO_Init+0x2c0>)
 8001b4e:	f001 f9b5 	bl	8002ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ATT_4_Pin ATT_8_Pin ATT_16_Pin LD2_Pin */
  GPIO_InitStruct.Pin = ATT_4_Pin|ATT_8_Pin|ATT_16_Pin|LD2_Pin;
 8001b52:	2336      	movs	r3, #54	; 0x36
 8001b54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b56:	2301      	movs	r3, #1
 8001b58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b62:	f107 031c 	add.w	r3, r7, #28
 8001b66:	4619      	mov	r1, r3
 8001b68:	485c      	ldr	r0, [pc, #368]	; (8001cdc <MX_GPIO_Init+0x2c0>)
 8001b6a:	f000 ffdf 	bl	8002b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001b6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b74:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b7e:	f107 031c 	add.w	r3, r7, #28
 8001b82:	4619      	mov	r1, r3
 8001b84:	4858      	ldr	r0, [pc, #352]	; (8001ce8 <MX_GPIO_Init+0x2cc>)
 8001b86:	f000 ffd1 	bl	8002b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001b8a:	2332      	movs	r3, #50	; 0x32
 8001b8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b96:	2300      	movs	r3, #0
 8001b98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b9a:	230b      	movs	r3, #11
 8001b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b9e:	f107 031c 	add.w	r3, r7, #28
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4850      	ldr	r0, [pc, #320]	; (8001ce8 <MX_GPIO_Init+0x2cc>)
 8001ba6:	f000 ffc1 	bl	8002b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001baa:	2386      	movs	r3, #134	; 0x86
 8001bac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bae:	2302      	movs	r3, #2
 8001bb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001bba:	230b      	movs	r3, #11
 8001bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bbe:	f107 031c 	add.w	r3, r7, #28
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4849      	ldr	r0, [pc, #292]	; (8001cec <MX_GPIO_Init+0x2d0>)
 8001bc6:	f000 ffb1 	bl	8002b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8001bca:	f244 0301 	movw	r3, #16385	; 0x4001
 8001bce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bdc:	f107 031c 	add.w	r3, r7, #28
 8001be0:	4619      	mov	r1, r3
 8001be2:	483f      	ldr	r0, [pc, #252]	; (8001ce0 <MX_GPIO_Init+0x2c4>)
 8001be4:	f000 ffa2 	bl	8002b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001be8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001bfa:	230b      	movs	r3, #11
 8001bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bfe:	f107 031c 	add.w	r3, r7, #28
 8001c02:	4619      	mov	r1, r3
 8001c04:	4836      	ldr	r0, [pc, #216]	; (8001ce0 <MX_GPIO_Init+0x2c4>)
 8001c06:	f000 ff91 	bl	8002b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin ATT_2_Pin ATT_1_Pin ATT_05_Pin
                           ATT_025_Pin ATT_LE_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|ATT_2_Pin|ATT_1_Pin|ATT_05_Pin
 8001c0a:	f44f 639f 	mov.w	r3, #1272	; 0x4f8
 8001c0e:	61fb      	str	r3, [r7, #28]
                          |ATT_025_Pin|ATT_LE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c10:	2301      	movs	r3, #1
 8001c12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c14:	2300      	movs	r3, #0
 8001c16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c1c:	f107 031c 	add.w	r3, r7, #28
 8001c20:	4619      	mov	r1, r3
 8001c22:	4830      	ldr	r0, [pc, #192]	; (8001ce4 <MX_GPIO_Init+0x2c8>)
 8001c24:	f000 ff82 	bl	8002b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8001c28:	2380      	movs	r3, #128	; 0x80
 8001c2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c2c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001c36:	f107 031c 	add.w	r3, r7, #28
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	482c      	ldr	r0, [pc, #176]	; (8001cf0 <MX_GPIO_Init+0x2d4>)
 8001c3e:	f000 ff75 	bl	8002b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : SCLK_Pin MOSI_Pin SEN_Pin REG_EN_Pin */
  GPIO_InitStruct.Pin = SCLK_Pin|MOSI_Pin|SEN_Pin|REG_EN_Pin;
 8001c42:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8001c46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c50:	2300      	movs	r3, #0
 8001c52:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c54:	f107 031c 	add.w	r3, r7, #28
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4823      	ldr	r0, [pc, #140]	; (8001ce8 <MX_GPIO_Init+0x2cc>)
 8001c5c:	f000 ff66 	bl	8002b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001c60:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001c64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c66:	2302      	movs	r3, #2
 8001c68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001c72:	230a      	movs	r3, #10
 8001c74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c76:	f107 031c 	add.w	r3, r7, #28
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	481b      	ldr	r0, [pc, #108]	; (8001cec <MX_GPIO_Init+0x2d0>)
 8001c7e:	f000 ff55 	bl	8002b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : MISO_Pin */
  GPIO_InitStruct.Pin = MISO_Pin;
 8001c82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MISO_GPIO_Port, &GPIO_InitStruct);
 8001c90:	f107 031c 	add.w	r3, r7, #28
 8001c94:	4619      	mov	r1, r3
 8001c96:	4814      	ldr	r0, [pc, #80]	; (8001ce8 <MX_GPIO_Init+0x2cc>)
 8001c98:	f000 ff48 	bl	8002b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001c9c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001ca0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001caa:	2300      	movs	r3, #0
 8001cac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001cae:	230b      	movs	r3, #11
 8001cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001cb2:	f107 031c 	add.w	r3, r7, #28
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	480d      	ldr	r0, [pc, #52]	; (8001cf0 <MX_GPIO_Init+0x2d4>)
 8001cba:	f000 ff37 	bl	8002b2c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 15, 0);
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	210f      	movs	r1, #15
 8001cc2:	2028      	movs	r0, #40	; 0x28
 8001cc4:	f000 fd9d 	bl	8002802 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001cc8:	2028      	movs	r0, #40	; 0x28
 8001cca:	f000 fdb4 	bl	8002836 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001cce:	bf00      	nop
 8001cd0:	3730      	adds	r7, #48	; 0x30
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	58024400 	.word	0x58024400
 8001cdc:	58021000 	.word	0x58021000
 8001ce0:	58020400 	.word	0x58020400
 8001ce4:	58020c00 	.word	0x58020c00
 8001ce8:	58020800 	.word	0x58020800
 8001cec:	58020000 	.word	0x58020000
 8001cf0:	58021800 	.word	0x58021800

08001cf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001cf8:	b672      	cpsid	i
}
 8001cfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	__disable_irq();

	/* Disable the AOM */
	HAL_HRTIM_WaveformOutputStop(&hhrtim, HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TE1);
 8001cfc:	f240 1103 	movw	r1, #259	; 0x103
 8001d00:	480d      	ldr	r0, [pc, #52]	; (8001d38 <Error_Handler+0x44>)
 8001d02:	f001 fd56 	bl	80037b2 <HAL_HRTIM_WaveformOutputStop>
	HAL_HRTIM_WaveformCounterStop_IT(&hhrtim, HRTIM_TIMERID_TIMER_A | HRTIM_TIMERID_TIMER_E);
 8001d06:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
 8001d0a:	480b      	ldr	r0, [pc, #44]	; (8001d38 <Error_Handler+0x44>)
 8001d0c:	f001 fdee 	bl	80038ec <HAL_HRTIM_WaveformCountStop_IT>

	/* Power down the synthesiser */
	HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 0);
 8001d10:	2200      	movs	r2, #0
 8001d12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d16:	4809      	ldr	r0, [pc, #36]	; (8001d3c <Error_Handler+0x48>)
 8001d18:	f001 f8d0 	bl	8002ebc <HAL_GPIO_WritePin>

	while (1) {
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001d1c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d20:	4807      	ldr	r0, [pc, #28]	; (8001d40 <Error_Handler+0x4c>)
 8001d22:	f001 f8e4 	bl	8002eee <HAL_GPIO_TogglePin>
		timer_delay(SLOW_TIMER, ERROR_LED_DELAY);
 8001d26:	4b07      	ldr	r3, [pc, #28]	; (8001d44 <Error_Handler+0x50>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d2e:	4611      	mov	r1, r2
 8001d30:	4618      	mov	r0, r3
 8001d32:	f008 fd51 	bl	800a7d8 <__timer_delay_veneer>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001d36:	e7f1      	b.n	8001d1c <Error_Handler+0x28>
 8001d38:	200000d0 	.word	0x200000d0
 8001d3c:	58020800 	.word	0x58020800
 8001d40:	58020400 	.word	0x58020400
 8001d44:	20000000 	.word	0x20000000

08001d48 <HAL_MspInit>:
void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef *hhrtim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d4e:	4b0a      	ldr	r3, [pc, #40]	; (8001d78 <HAL_MspInit+0x30>)
 8001d50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d54:	4a08      	ldr	r2, [pc, #32]	; (8001d78 <HAL_MspInit+0x30>)
 8001d56:	f043 0302 	orr.w	r3, r3, #2
 8001d5a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001d5e:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <HAL_MspInit+0x30>)
 8001d60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	607b      	str	r3, [r7, #4]
 8001d6a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d6c:	bf00      	nop
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr
 8001d78:	58024400 	.word	0x58024400

08001d7c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b08a      	sub	sp, #40	; 0x28
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d84:	f107 0314 	add.w	r3, r7, #20
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	60da      	str	r2, [r3, #12]
 8001d92:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a18      	ldr	r2, [pc, #96]	; (8001dfc <HAL_DAC_MspInit+0x80>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d129      	bne.n	8001df2 <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001d9e:	4b18      	ldr	r3, [pc, #96]	; (8001e00 <HAL_DAC_MspInit+0x84>)
 8001da0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001da4:	4a16      	ldr	r2, [pc, #88]	; (8001e00 <HAL_DAC_MspInit+0x84>)
 8001da6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001daa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001dae:	4b14      	ldr	r3, [pc, #80]	; (8001e00 <HAL_DAC_MspInit+0x84>)
 8001db0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001db4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001db8:	613b      	str	r3, [r7, #16]
 8001dba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dbc:	4b10      	ldr	r3, [pc, #64]	; (8001e00 <HAL_DAC_MspInit+0x84>)
 8001dbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dc2:	4a0f      	ldr	r2, [pc, #60]	; (8001e00 <HAL_DAC_MspInit+0x84>)
 8001dc4:	f043 0301 	orr.w	r3, r3, #1
 8001dc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dcc:	4b0c      	ldr	r3, [pc, #48]	; (8001e00 <HAL_DAC_MspInit+0x84>)
 8001dce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001dda:	2310      	movs	r3, #16
 8001ddc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dde:	2303      	movs	r3, #3
 8001de0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de2:	2300      	movs	r3, #0
 8001de4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de6:	f107 0314 	add.w	r3, r7, #20
 8001dea:	4619      	mov	r1, r3
 8001dec:	4805      	ldr	r0, [pc, #20]	; (8001e04 <HAL_DAC_MspInit+0x88>)
 8001dee:	f000 fe9d 	bl	8002b2c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001df2:	bf00      	nop
 8001df4:	3728      	adds	r7, #40	; 0x28
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40007400 	.word	0x40007400
 8001e00:	58024400 	.word	0x58024400
 8001e04:	58020000 	.word	0x58020000

08001e08 <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b0b4      	sub	sp, #208	; 0xd0
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e10:	f107 0310 	add.w	r3, r7, #16
 8001e14:	22c0      	movs	r2, #192	; 0xc0
 8001e16:	2100      	movs	r1, #0
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f007 fcb3 	bl	8009784 <memset>
  if(hhrtim->Instance==HRTIM1)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a1c      	ldr	r2, [pc, #112]	; (8001e94 <HAL_HRTIM_MspInit+0x8c>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d131      	bne.n	8001e8c <HAL_HRTIM_MspInit+0x84>

  /* USER CODE END HRTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1;
 8001e28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e2c:	f04f 0300 	mov.w	r3, #0
 8001e30:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Hrtim1ClockSelection = RCC_HRTIM1CLK_TIMCLK;
 8001e34:	2300      	movs	r3, #0
 8001e36:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e3a:	f107 0310 	add.w	r3, r7, #16
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f004 f96c 	bl	800611c <HAL_RCCEx_PeriphCLKConfig>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <HAL_HRTIM_MspInit+0x46>
    {
      Error_Handler();
 8001e4a:	f7ff ff53 	bl	8001cf4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8001e4e:	4b12      	ldr	r3, [pc, #72]	; (8001e98 <HAL_HRTIM_MspInit+0x90>)
 8001e50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e54:	4a10      	ldr	r2, [pc, #64]	; (8001e98 <HAL_HRTIM_MspInit+0x90>)
 8001e56:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001e5a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001e5e:	4b0e      	ldr	r3, [pc, #56]	; (8001e98 <HAL_HRTIM_MspInit+0x90>)
 8001e60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
    /* HRTIM1 interrupt Init */
    HAL_NVIC_SetPriority(HRTIM1_TIMA_IRQn, 0, 0);
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	2100      	movs	r1, #0
 8001e70:	2068      	movs	r0, #104	; 0x68
 8001e72:	f000 fcc6 	bl	8002802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIMA_IRQn);
 8001e76:	2068      	movs	r0, #104	; 0x68
 8001e78:	f000 fcdd 	bl	8002836 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(HRTIM1_TIME_IRQn, 0, 0);
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	2100      	movs	r1, #0
 8001e80:	206c      	movs	r0, #108	; 0x6c
 8001e82:	f000 fcbe 	bl	8002802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIME_IRQn);
 8001e86:	206c      	movs	r0, #108	; 0x6c
 8001e88:	f000 fcd5 	bl	8002836 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }

}
 8001e8c:	bf00      	nop
 8001e8e:	37d0      	adds	r7, #208	; 0xd0
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40017400 	.word	0x40017400
 8001e98:	58024400 	.word	0x58024400

08001e9c <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b08a      	sub	sp, #40	; 0x28
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea4:	f107 0314 	add.w	r3, r7, #20
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	605a      	str	r2, [r3, #4]
 8001eae:	609a      	str	r2, [r3, #8]
 8001eb0:	60da      	str	r2, [r3, #12]
 8001eb2:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a22      	ldr	r2, [pc, #136]	; (8001f44 <HAL_HRTIM_MspPostInit+0xa8>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d13d      	bne.n	8001f3a <HAL_HRTIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ebe:	4b22      	ldr	r3, [pc, #136]	; (8001f48 <HAL_HRTIM_MspPostInit+0xac>)
 8001ec0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ec4:	4a20      	ldr	r2, [pc, #128]	; (8001f48 <HAL_HRTIM_MspPostInit+0xac>)
 8001ec6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001eca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ece:	4b1e      	ldr	r3, [pc, #120]	; (8001f48 <HAL_HRTIM_MspPostInit+0xac>)
 8001ed0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ed8:	613b      	str	r3, [r7, #16]
 8001eda:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001edc:	4b1a      	ldr	r3, [pc, #104]	; (8001f48 <HAL_HRTIM_MspPostInit+0xac>)
 8001ede:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ee2:	4a19      	ldr	r2, [pc, #100]	; (8001f48 <HAL_HRTIM_MspPostInit+0xac>)
 8001ee4:	f043 0304 	orr.w	r3, r3, #4
 8001ee8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001eec:	4b16      	ldr	r3, [pc, #88]	; (8001f48 <HAL_HRTIM_MspPostInit+0xac>)
 8001eee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ef2:	f003 0304 	and.w	r3, r3, #4
 8001ef6:	60fb      	str	r3, [r7, #12]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
    /**HRTIM GPIO Configuration
    PG6     ------> HRTIM_CHE1
    PC6     ------> HRTIM_CHA1
    PC7     ------> HRTIM_CHA2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001efa:	2340      	movs	r3, #64	; 0x40
 8001efc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efe:	2302      	movs	r3, #2
 8001f00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f02:	2300      	movs	r3, #0
 8001f04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f06:	2303      	movs	r3, #3
 8001f08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_HRTIM1;
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f0e:	f107 0314 	add.w	r3, r7, #20
 8001f12:	4619      	mov	r1, r3
 8001f14:	480d      	ldr	r0, [pc, #52]	; (8001f4c <HAL_HRTIM_MspPostInit+0xb0>)
 8001f16:	f000 fe09 	bl	8002b2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f1a:	23c0      	movs	r3, #192	; 0xc0
 8001f1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1e:	2302      	movs	r3, #2
 8001f20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f22:	2300      	movs	r3, #0
 8001f24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f26:	2303      	movs	r3, #3
 8001f28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_HRTIM1;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f2e:	f107 0314 	add.w	r3, r7, #20
 8001f32:	4619      	mov	r1, r3
 8001f34:	4806      	ldr	r0, [pc, #24]	; (8001f50 <HAL_HRTIM_MspPostInit+0xb4>)
 8001f36:	f000 fdf9 	bl	8002b2c <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8001f3a:	bf00      	nop
 8001f3c:	3728      	adds	r7, #40	; 0x28
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	40017400 	.word	0x40017400
 8001f48:	58024400 	.word	0x58024400
 8001f4c:	58021800 	.word	0x58021800
 8001f50:	58020800 	.word	0x58020800

08001f54 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b0b4      	sub	sp, #208	; 0xd0
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f5c:	f107 0310 	add.w	r3, r7, #16
 8001f60:	22c0      	movs	r2, #192	; 0xc0
 8001f62:	2100      	movs	r1, #0
 8001f64:	4618      	mov	r0, r3
 8001f66:	f007 fc0d 	bl	8009784 <memset>
  if(hlptim->Instance==LPTIM1)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a19      	ldr	r2, [pc, #100]	; (8001fd4 <HAL_LPTIM_MspInit+0x80>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d12a      	bne.n	8001fca <HAL_LPTIM_MspInit+0x76>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8001f74:	f04f 0220 	mov.w	r2, #32
 8001f78:	f04f 0300 	mov.w	r3, #0
 8001f7c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8001f80:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001f84:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f88:	f107 0310 	add.w	r3, r7, #16
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f004 f8c5 	bl	800611c <HAL_RCCEx_PeriphCLKConfig>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <HAL_LPTIM_MspInit+0x48>
    {
      Error_Handler();
 8001f98:	f7ff feac 	bl	8001cf4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8001f9c:	4b0e      	ldr	r3, [pc, #56]	; (8001fd8 <HAL_LPTIM_MspInit+0x84>)
 8001f9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fa2:	4a0d      	ldr	r2, [pc, #52]	; (8001fd8 <HAL_LPTIM_MspInit+0x84>)
 8001fa4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fa8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001fac:	4b0a      	ldr	r3, [pc, #40]	; (8001fd8 <HAL_LPTIM_MspInit+0x84>)
 8001fae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	205d      	movs	r0, #93	; 0x5d
 8001fc0:	f000 fc1f 	bl	8002802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8001fc4:	205d      	movs	r0, #93	; 0x5d
 8001fc6:	f000 fc36 	bl	8002836 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8001fca:	bf00      	nop
 8001fcc:	37d0      	adds	r7, #208	; 0xd0
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40002400 	.word	0x40002400
 8001fd8:	58024400 	.word	0x58024400

08001fdc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a16      	ldr	r2, [pc, #88]	; (8002044 <HAL_TIM_Base_MspInit+0x68>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d10f      	bne.n	800200e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fee:	4b16      	ldr	r3, [pc, #88]	; (8002048 <HAL_TIM_Base_MspInit+0x6c>)
 8001ff0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ff4:	4a14      	ldr	r2, [pc, #80]	; (8002048 <HAL_TIM_Base_MspInit+0x6c>)
 8001ff6:	f043 0301 	orr.w	r3, r3, #1
 8001ffa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001ffe:	4b12      	ldr	r3, [pc, #72]	; (8002048 <HAL_TIM_Base_MspInit+0x6c>)
 8002000:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800200c:	e013      	b.n	8002036 <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM3)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a0e      	ldr	r2, [pc, #56]	; (800204c <HAL_TIM_Base_MspInit+0x70>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d10e      	bne.n	8002036 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002018:	4b0b      	ldr	r3, [pc, #44]	; (8002048 <HAL_TIM_Base_MspInit+0x6c>)
 800201a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800201e:	4a0a      	ldr	r2, [pc, #40]	; (8002048 <HAL_TIM_Base_MspInit+0x6c>)
 8002020:	f043 0302 	orr.w	r3, r3, #2
 8002024:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002028:	4b07      	ldr	r3, [pc, #28]	; (8002048 <HAL_TIM_Base_MspInit+0x6c>)
 800202a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	60bb      	str	r3, [r7, #8]
 8002034:	68bb      	ldr	r3, [r7, #8]
}
 8002036:	bf00      	nop
 8002038:	3714      	adds	r7, #20
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	40010000 	.word	0x40010000
 8002048:	58024400 	.word	0x58024400
 800204c:	40000400 	.word	0x40000400

08002050 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b0ba      	sub	sp, #232	; 0xe8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002058:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	605a      	str	r2, [r3, #4]
 8002062:	609a      	str	r2, [r3, #8]
 8002064:	60da      	str	r2, [r3, #12]
 8002066:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002068:	f107 0310 	add.w	r3, r7, #16
 800206c:	22c0      	movs	r2, #192	; 0xc0
 800206e:	2100      	movs	r1, #0
 8002070:	4618      	mov	r0, r3
 8002072:	f007 fb87 	bl	8009784 <memset>
  if(huart->Instance==USART3)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a27      	ldr	r2, [pc, #156]	; (8002118 <HAL_UART_MspInit+0xc8>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d146      	bne.n	800210e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002080:	f04f 0202 	mov.w	r2, #2
 8002084:	f04f 0300 	mov.w	r3, #0
 8002088:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800208c:	2300      	movs	r3, #0
 800208e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002092:	f107 0310 	add.w	r3, r7, #16
 8002096:	4618      	mov	r0, r3
 8002098:	f004 f840 	bl	800611c <HAL_RCCEx_PeriphCLKConfig>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80020a2:	f7ff fe27 	bl	8001cf4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80020a6:	4b1d      	ldr	r3, [pc, #116]	; (800211c <HAL_UART_MspInit+0xcc>)
 80020a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020ac:	4a1b      	ldr	r2, [pc, #108]	; (800211c <HAL_UART_MspInit+0xcc>)
 80020ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020b2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80020b6:	4b19      	ldr	r3, [pc, #100]	; (800211c <HAL_UART_MspInit+0xcc>)
 80020b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020c0:	60fb      	str	r3, [r7, #12]
 80020c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020c4:	4b15      	ldr	r3, [pc, #84]	; (800211c <HAL_UART_MspInit+0xcc>)
 80020c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020ca:	4a14      	ldr	r2, [pc, #80]	; (800211c <HAL_UART_MspInit+0xcc>)
 80020cc:	f043 0308 	orr.w	r3, r3, #8
 80020d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020d4:	4b11      	ldr	r3, [pc, #68]	; (800211c <HAL_UART_MspInit+0xcc>)
 80020d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020da:	f003 0308 	and.w	r3, r3, #8
 80020de:	60bb      	str	r3, [r7, #8]
 80020e0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80020e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ea:	2302      	movs	r3, #2
 80020ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f0:	2300      	movs	r3, #0
 80020f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f6:	2300      	movs	r3, #0
 80020f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020fc:	2307      	movs	r3, #7
 80020fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002102:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002106:	4619      	mov	r1, r3
 8002108:	4805      	ldr	r0, [pc, #20]	; (8002120 <HAL_UART_MspInit+0xd0>)
 800210a:	f000 fd0f 	bl	8002b2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800210e:	bf00      	nop
 8002110:	37e8      	adds	r7, #232	; 0xe8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40004800 	.word	0x40004800
 800211c:	58024400 	.word	0x58024400
 8002120:	58020c00 	.word	0x58020c00

08002124 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002128:	f003 ffdc 	bl	80060e4 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
		Error_Handler();
 800212c:	f7ff fde2 	bl	8001cf4 <Error_Handler>
 8002130:	e7fc      	b.n	800212c <NMI_Handler+0x8>

08002132 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  Error_Handler();
 8002136:	f7ff fddd 	bl	8001cf4 <Error_Handler>
 800213a:	e7fc      	b.n	8002136 <HardFault_Handler+0x4>

0800213c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  Error_Handler();
 8002140:	f7ff fdd8 	bl	8001cf4 <Error_Handler>
 8002144:	e7fc      	b.n	8002140 <MemManage_Handler+0x4>

08002146 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  Error_Handler();
 800214a:	f7ff fdd3 	bl	8001cf4 <Error_Handler>
 800214e:	e7fc      	b.n	800214a <BusFault_Handler+0x4>

08002150 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  Error_Handler();
 8002154:	f7ff fdce 	bl	8001cf4 <Error_Handler>
 8002158:	e7fc      	b.n	8002154 <UsageFault_Handler+0x4>

0800215a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800215a:	b480      	push	{r7}
 800215c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800215e:	bf00      	nop
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800216c:	bf00      	nop
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr

08002176 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002176:	b480      	push	{r7}
 8002178:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800217a:	bf00      	nop
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002188:	f000 f9f0 	bl	800256c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800218c:	bf00      	nop
 800218e:	bd80      	pop	{r7, pc}

08002190 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002194:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002198:	f000 fec3 	bl	8002f22 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800219c:	bf00      	nop
 800219e:	bd80      	pop	{r7, pc}

080021a0 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */
  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 80021a4:	4802      	ldr	r0, [pc, #8]	; (80021b0 <LPTIM1_IRQHandler+0x10>)
 80021a6:	f002 fc0e 	bl	80049c6 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */
  /* USER CODE END LPTIM1_IRQn 1 */
}
 80021aa:	bf00      	nop
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	200001ac 	.word	0x200001ac

080021b4 <HRTIM1_TIMA_IRQHandler>:

/**
  * @brief This function handles HRTIM timer A global interrupt.
  */
void HRTIM1_TIMA_IRQHandler(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIMA_IRQn 0 */

  /* USER CODE END HRTIM1_TIMA_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim,HRTIM_TIMERINDEX_TIMER_A);
 80021b8:	2100      	movs	r1, #0
 80021ba:	4802      	ldr	r0, [pc, #8]	; (80021c4 <HRTIM1_TIMA_IRQHandler+0x10>)
 80021bc:	f001 fc14 	bl	80039e8 <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIMA_IRQn 1 */

  /* USER CODE END HRTIM1_TIMA_IRQn 1 */
}
 80021c0:	bf00      	nop
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	200000d0 	.word	0x200000d0

080021c8 <HRTIM1_TIME_IRQHandler>:

/**
  * @brief This function handles HRTIM timer E global interrupt.
  */
void HRTIM1_TIME_IRQHandler(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIME_IRQn 0 */

  /* USER CODE END HRTIM1_TIME_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim,HRTIM_TIMERINDEX_TIMER_E);
 80021cc:	2104      	movs	r1, #4
 80021ce:	4802      	ldr	r0, [pc, #8]	; (80021d8 <HRTIM1_TIME_IRQHandler+0x10>)
 80021d0:	f001 fc0a 	bl	80039e8 <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIME_IRQn 1 */

  /* USER CODE END HRTIM1_TIME_IRQn 1 */
}
 80021d4:	bf00      	nop
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	200000d0 	.word	0x200000d0

080021dc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021e8:	2300      	movs	r3, #0
 80021ea:	617b      	str	r3, [r7, #20]
 80021ec:	e00a      	b.n	8002204 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80021ee:	f3af 8000 	nop.w
 80021f2:	4601      	mov	r1, r0
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	1c5a      	adds	r2, r3, #1
 80021f8:	60ba      	str	r2, [r7, #8]
 80021fa:	b2ca      	uxtb	r2, r1
 80021fc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	3301      	adds	r3, #1
 8002202:	617b      	str	r3, [r7, #20]
 8002204:	697a      	ldr	r2, [r7, #20]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	429a      	cmp	r2, r3
 800220a:	dbf0      	blt.n	80021ee <_read+0x12>
	}

return len;
 800220c:	687b      	ldr	r3, [r7, #4]
}
 800220e:	4618      	mov	r0, r3
 8002210:	3718      	adds	r7, #24
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b086      	sub	sp, #24
 800221a:	af00      	add	r7, sp, #0
 800221c:	60f8      	str	r0, [r7, #12]
 800221e:	60b9      	str	r1, [r7, #8]
 8002220:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002222:	2300      	movs	r3, #0
 8002224:	617b      	str	r3, [r7, #20]
 8002226:	e009      	b.n	800223c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	1c5a      	adds	r2, r3, #1
 800222c:	60ba      	str	r2, [r7, #8]
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	4618      	mov	r0, r3
 8002232:	f7fe fe9f 	bl	8000f74 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	3301      	adds	r3, #1
 800223a:	617b      	str	r3, [r7, #20]
 800223c:	697a      	ldr	r2, [r7, #20]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	429a      	cmp	r2, r3
 8002242:	dbf1      	blt.n	8002228 <_write+0x12>
	}
	return len;
 8002244:	687b      	ldr	r3, [r7, #4]
}
 8002246:	4618      	mov	r0, r3
 8002248:	3718      	adds	r7, #24
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <_close>:

int _close(int file)
{
 800224e:	b480      	push	{r7}
 8002250:	b083      	sub	sp, #12
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
	return -1;
 8002256:	f04f 33ff 	mov.w	r3, #4294967295
}
 800225a:	4618      	mov	r0, r3
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr

08002266 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002266:	b480      	push	{r7}
 8002268:	b083      	sub	sp, #12
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
 800226e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002276:	605a      	str	r2, [r3, #4]
	return 0;
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <_isatty>:

int _isatty(int file)
{
 8002286:	b480      	push	{r7}
 8002288:	b083      	sub	sp, #12
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
	return 1;
 800228e:	2301      	movs	r3, #1
}
 8002290:	4618      	mov	r0, r3
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	607a      	str	r2, [r7, #4]
	return 0;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3714      	adds	r7, #20
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
	...

080022b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022c0:	4a14      	ldr	r2, [pc, #80]	; (8002314 <_sbrk+0x5c>)
 80022c2:	4b15      	ldr	r3, [pc, #84]	; (8002318 <_sbrk+0x60>)
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022cc:	4b13      	ldr	r3, [pc, #76]	; (800231c <_sbrk+0x64>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d102      	bne.n	80022da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022d4:	4b11      	ldr	r3, [pc, #68]	; (800231c <_sbrk+0x64>)
 80022d6:	4a12      	ldr	r2, [pc, #72]	; (8002320 <_sbrk+0x68>)
 80022d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022da:	4b10      	ldr	r3, [pc, #64]	; (800231c <_sbrk+0x64>)
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4413      	add	r3, r2
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d207      	bcs.n	80022f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022e8:	f007 fa14 	bl	8009714 <__errno>
 80022ec:	4603      	mov	r3, r0
 80022ee:	220c      	movs	r2, #12
 80022f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022f2:	f04f 33ff 	mov.w	r3, #4294967295
 80022f6:	e009      	b.n	800230c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022f8:	4b08      	ldr	r3, [pc, #32]	; (800231c <_sbrk+0x64>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022fe:	4b07      	ldr	r3, [pc, #28]	; (800231c <_sbrk+0x64>)
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4413      	add	r3, r2
 8002306:	4a05      	ldr	r2, [pc, #20]	; (800231c <_sbrk+0x64>)
 8002308:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800230a:	68fb      	ldr	r3, [r7, #12]
}
 800230c:	4618      	mov	r0, r3
 800230e:	3718      	adds	r7, #24
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	20020000 	.word	0x20020000
 8002318:	00000400 	.word	0x00000400
 800231c:	20000320 	.word	0x20000320
 8002320:	20000338 	.word	0x20000338

08002324 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002328:	4b37      	ldr	r3, [pc, #220]	; (8002408 <SystemInit+0xe4>)
 800232a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800232e:	4a36      	ldr	r2, [pc, #216]	; (8002408 <SystemInit+0xe4>)
 8002330:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002334:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002338:	4b34      	ldr	r3, [pc, #208]	; (800240c <SystemInit+0xe8>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 030f 	and.w	r3, r3, #15
 8002340:	2b06      	cmp	r3, #6
 8002342:	d807      	bhi.n	8002354 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */

	  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002344:	4b31      	ldr	r3, [pc, #196]	; (800240c <SystemInit+0xe8>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f023 030f 	bic.w	r3, r3, #15
 800234c:	4a2f      	ldr	r2, [pc, #188]	; (800240c <SystemInit+0xe8>)
 800234e:	f043 0307 	orr.w	r3, r3, #7
 8002352:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002354:	4b2e      	ldr	r3, [pc, #184]	; (8002410 <SystemInit+0xec>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a2d      	ldr	r2, [pc, #180]	; (8002410 <SystemInit+0xec>)
 800235a:	f043 0301 	orr.w	r3, r3, #1
 800235e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002360:	4b2b      	ldr	r3, [pc, #172]	; (8002410 <SystemInit+0xec>)
 8002362:	2200      	movs	r2, #0
 8002364:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002366:	4b2a      	ldr	r3, [pc, #168]	; (8002410 <SystemInit+0xec>)
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	4929      	ldr	r1, [pc, #164]	; (8002410 <SystemInit+0xec>)
 800236c:	4b29      	ldr	r3, [pc, #164]	; (8002414 <SystemInit+0xf0>)
 800236e:	4013      	ands	r3, r2
 8002370:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002372:	4b26      	ldr	r3, [pc, #152]	; (800240c <SystemInit+0xe8>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0308 	and.w	r3, r3, #8
 800237a:	2b00      	cmp	r3, #0
 800237c:	d007      	beq.n	800238e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800237e:	4b23      	ldr	r3, [pc, #140]	; (800240c <SystemInit+0xe8>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f023 030f 	bic.w	r3, r3, #15
 8002386:	4a21      	ldr	r2, [pc, #132]	; (800240c <SystemInit+0xe8>)
 8002388:	f043 0307 	orr.w	r3, r3, #7
 800238c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800238e:	4b20      	ldr	r3, [pc, #128]	; (8002410 <SystemInit+0xec>)
 8002390:	2200      	movs	r2, #0
 8002392:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002394:	4b1e      	ldr	r3, [pc, #120]	; (8002410 <SystemInit+0xec>)
 8002396:	2200      	movs	r2, #0
 8002398:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800239a:	4b1d      	ldr	r3, [pc, #116]	; (8002410 <SystemInit+0xec>)
 800239c:	2200      	movs	r2, #0
 800239e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80023a0:	4b1b      	ldr	r3, [pc, #108]	; (8002410 <SystemInit+0xec>)
 80023a2:	4a1d      	ldr	r2, [pc, #116]	; (8002418 <SystemInit+0xf4>)
 80023a4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80023a6:	4b1a      	ldr	r3, [pc, #104]	; (8002410 <SystemInit+0xec>)
 80023a8:	4a1c      	ldr	r2, [pc, #112]	; (800241c <SystemInit+0xf8>)
 80023aa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80023ac:	4b18      	ldr	r3, [pc, #96]	; (8002410 <SystemInit+0xec>)
 80023ae:	4a1c      	ldr	r2, [pc, #112]	; (8002420 <SystemInit+0xfc>)
 80023b0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80023b2:	4b17      	ldr	r3, [pc, #92]	; (8002410 <SystemInit+0xec>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80023b8:	4b15      	ldr	r3, [pc, #84]	; (8002410 <SystemInit+0xec>)
 80023ba:	4a19      	ldr	r2, [pc, #100]	; (8002420 <SystemInit+0xfc>)
 80023bc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80023be:	4b14      	ldr	r3, [pc, #80]	; (8002410 <SystemInit+0xec>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80023c4:	4b12      	ldr	r3, [pc, #72]	; (8002410 <SystemInit+0xec>)
 80023c6:	4a16      	ldr	r2, [pc, #88]	; (8002420 <SystemInit+0xfc>)
 80023c8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80023ca:	4b11      	ldr	r3, [pc, #68]	; (8002410 <SystemInit+0xec>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80023d0:	4b0f      	ldr	r3, [pc, #60]	; (8002410 <SystemInit+0xec>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a0e      	ldr	r2, [pc, #56]	; (8002410 <SystemInit+0xec>)
 80023d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023da:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80023dc:	4b0c      	ldr	r3, [pc, #48]	; (8002410 <SystemInit+0xec>)
 80023de:	2200      	movs	r2, #0
 80023e0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80023e2:	4b10      	ldr	r3, [pc, #64]	; (8002424 <SystemInit+0x100>)
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	4b10      	ldr	r3, [pc, #64]	; (8002428 <SystemInit+0x104>)
 80023e8:	4013      	ands	r3, r2
 80023ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023ee:	d202      	bcs.n	80023f6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80023f0:	4b0e      	ldr	r3, [pc, #56]	; (800242c <SystemInit+0x108>)
 80023f2:	2201      	movs	r2, #1
 80023f4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80023f6:	4b0e      	ldr	r3, [pc, #56]	; (8002430 <SystemInit+0x10c>)
 80023f8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80023fc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80023fe:	bf00      	nop
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr
 8002408:	e000ed00 	.word	0xe000ed00
 800240c:	52002000 	.word	0x52002000
 8002410:	58024400 	.word	0x58024400
 8002414:	eaf6ed7f 	.word	0xeaf6ed7f
 8002418:	02020200 	.word	0x02020200
 800241c:	01ff0000 	.word	0x01ff0000
 8002420:	01010280 	.word	0x01010280
 8002424:	5c001000 	.word	0x5c001000
 8002428:	ffff0000 	.word	0xffff0000
 800242c:	51008108 	.word	0x51008108
 8002430:	52004000 	.word	0x52004000

08002434 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002434:	f8df d034 	ldr.w	sp, [pc, #52]	; 800246c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002438:	f7ff ff74 	bl	8002324 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800243c:	480c      	ldr	r0, [pc, #48]	; (8002470 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800243e:	490d      	ldr	r1, [pc, #52]	; (8002474 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002440:	4a0d      	ldr	r2, [pc, #52]	; (8002478 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002442:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002444:	e002      	b.n	800244c <LoopCopyDataInit>

08002446 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002446:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002448:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800244a:	3304      	adds	r3, #4

0800244c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800244c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800244e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002450:	d3f9      	bcc.n	8002446 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002452:	4a0a      	ldr	r2, [pc, #40]	; (800247c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002454:	4c0a      	ldr	r4, [pc, #40]	; (8002480 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002456:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002458:	e001      	b.n	800245e <LoopFillZerobss>

0800245a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800245a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800245c:	3204      	adds	r2, #4

0800245e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800245e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002460:	d3fb      	bcc.n	800245a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002462:	f007 f95d 	bl	8009720 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002466:	f7fe fec3 	bl	80011f0 <main>
  bx  lr
 800246a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800246c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002470:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002474:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8002478:	0800aa68 	.word	0x0800aa68
  ldr r2, =_sbss
 800247c:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8002480:	20000338 	.word	0x20000338

08002484 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002484:	e7fe      	b.n	8002484 <ADC3_IRQHandler>
	...

08002488 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800248e:	2003      	movs	r0, #3
 8002490:	f000 f9ac 	bl	80027ec <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002494:	f003 fc50 	bl	8005d38 <HAL_RCC_GetSysClockFreq>
 8002498:	4602      	mov	r2, r0
 800249a:	4b15      	ldr	r3, [pc, #84]	; (80024f0 <HAL_Init+0x68>)
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	0a1b      	lsrs	r3, r3, #8
 80024a0:	f003 030f 	and.w	r3, r3, #15
 80024a4:	4913      	ldr	r1, [pc, #76]	; (80024f4 <HAL_Init+0x6c>)
 80024a6:	5ccb      	ldrb	r3, [r1, r3]
 80024a8:	f003 031f 	and.w	r3, r3, #31
 80024ac:	fa22 f303 	lsr.w	r3, r2, r3
 80024b0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80024b2:	4b0f      	ldr	r3, [pc, #60]	; (80024f0 <HAL_Init+0x68>)
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	f003 030f 	and.w	r3, r3, #15
 80024ba:	4a0e      	ldr	r2, [pc, #56]	; (80024f4 <HAL_Init+0x6c>)
 80024bc:	5cd3      	ldrb	r3, [r2, r3]
 80024be:	f003 031f 	and.w	r3, r3, #31
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	fa22 f303 	lsr.w	r3, r2, r3
 80024c8:	4a0b      	ldr	r2, [pc, #44]	; (80024f8 <HAL_Init+0x70>)
 80024ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80024cc:	4a0b      	ldr	r2, [pc, #44]	; (80024fc <HAL_Init+0x74>)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024d2:	2000      	movs	r0, #0
 80024d4:	f000 f814 	bl	8002500 <HAL_InitTick>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e002      	b.n	80024e8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80024e2:	f7ff fc31 	bl	8001d48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	58024400 	.word	0x58024400
 80024f4:	0800a988 	.word	0x0800a988
 80024f8:	20000018 	.word	0x20000018
 80024fc:	20000014 	.word	0x20000014

08002500 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002508:	4b15      	ldr	r3, [pc, #84]	; (8002560 <HAL_InitTick+0x60>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d101      	bne.n	8002514 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e021      	b.n	8002558 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002514:	4b13      	ldr	r3, [pc, #76]	; (8002564 <HAL_InitTick+0x64>)
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	4b11      	ldr	r3, [pc, #68]	; (8002560 <HAL_InitTick+0x60>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	4619      	mov	r1, r3
 800251e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002522:	fbb3 f3f1 	udiv	r3, r3, r1
 8002526:	fbb2 f3f3 	udiv	r3, r2, r3
 800252a:	4618      	mov	r0, r3
 800252c:	f000 f991 	bl	8002852 <HAL_SYSTICK_Config>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e00e      	b.n	8002558 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2b0f      	cmp	r3, #15
 800253e:	d80a      	bhi.n	8002556 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002540:	2200      	movs	r2, #0
 8002542:	6879      	ldr	r1, [r7, #4]
 8002544:	f04f 30ff 	mov.w	r0, #4294967295
 8002548:	f000 f95b 	bl	8002802 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800254c:	4a06      	ldr	r2, [pc, #24]	; (8002568 <HAL_InitTick+0x68>)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002552:	2300      	movs	r3, #0
 8002554:	e000      	b.n	8002558 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
}
 8002558:	4618      	mov	r0, r3
 800255a:	3708      	adds	r7, #8
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	20000020 	.word	0x20000020
 8002564:	20000014 	.word	0x20000014
 8002568:	2000001c 	.word	0x2000001c

0800256c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002570:	4b06      	ldr	r3, [pc, #24]	; (800258c <HAL_IncTick+0x20>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	461a      	mov	r2, r3
 8002576:	4b06      	ldr	r3, [pc, #24]	; (8002590 <HAL_IncTick+0x24>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4413      	add	r3, r2
 800257c:	4a04      	ldr	r2, [pc, #16]	; (8002590 <HAL_IncTick+0x24>)
 800257e:	6013      	str	r3, [r2, #0]
}
 8002580:	bf00      	nop
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	20000020 	.word	0x20000020
 8002590:	20000324 	.word	0x20000324

08002594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  return uwTick;
 8002598:	4b03      	ldr	r3, [pc, #12]	; (80025a8 <HAL_GetTick+0x14>)
 800259a:	681b      	ldr	r3, [r3, #0]
}
 800259c:	4618      	mov	r0, r3
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	20000324 	.word	0x20000324

080025ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025b4:	f7ff ffee 	bl	8002594 <HAL_GetTick>
 80025b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c4:	d005      	beq.n	80025d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025c6:	4b0a      	ldr	r3, [pc, #40]	; (80025f0 <HAL_Delay+0x44>)
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	461a      	mov	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	4413      	add	r3, r2
 80025d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025d2:	bf00      	nop
 80025d4:	f7ff ffde 	bl	8002594 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d8f7      	bhi.n	80025d4 <HAL_Delay+0x28>
  {
  }
}
 80025e4:	bf00      	nop
 80025e6:	bf00      	nop
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	20000020 	.word	0x20000020

080025f4 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80025f8:	4b05      	ldr	r3, [pc, #20]	; (8002610 <HAL_SuspendTick+0x1c>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a04      	ldr	r2, [pc, #16]	; (8002610 <HAL_SuspendTick+0x1c>)
 80025fe:	f023 0302 	bic.w	r3, r3, #2
 8002602:	6013      	str	r3, [r2, #0]
}
 8002604:	bf00      	nop
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	e000e010 	.word	0xe000e010

08002614 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8002618:	4b05      	ldr	r3, [pc, #20]	; (8002630 <HAL_ResumeTick+0x1c>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a04      	ldr	r2, [pc, #16]	; (8002630 <HAL_ResumeTick+0x1c>)
 800261e:	f043 0302 	orr.w	r3, r3, #2
 8002622:	6013      	str	r3, [r2, #0]
}
 8002624:	bf00      	nop
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	e000e010 	.word	0xe000e010

08002634 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002638:	4b03      	ldr	r3, [pc, #12]	; (8002648 <HAL_GetREVID+0x14>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	0c1b      	lsrs	r3, r3, #16
}
 800263e:	4618      	mov	r0, r3
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr
 8002648:	5c001000 	.word	0x5c001000

0800264c <__NVIC_SetPriorityGrouping>:
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f003 0307 	and.w	r3, r3, #7
 800265a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800265c:	4b0b      	ldr	r3, [pc, #44]	; (800268c <__NVIC_SetPriorityGrouping+0x40>)
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002662:	68ba      	ldr	r2, [r7, #8]
 8002664:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002668:	4013      	ands	r3, r2
 800266a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002674:	4b06      	ldr	r3, [pc, #24]	; (8002690 <__NVIC_SetPriorityGrouping+0x44>)
 8002676:	4313      	orrs	r3, r2
 8002678:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800267a:	4a04      	ldr	r2, [pc, #16]	; (800268c <__NVIC_SetPriorityGrouping+0x40>)
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	60d3      	str	r3, [r2, #12]
}
 8002680:	bf00      	nop
 8002682:	3714      	adds	r7, #20
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr
 800268c:	e000ed00 	.word	0xe000ed00
 8002690:	05fa0000 	.word	0x05fa0000

08002694 <__NVIC_GetPriorityGrouping>:
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002698:	4b04      	ldr	r3, [pc, #16]	; (80026ac <__NVIC_GetPriorityGrouping+0x18>)
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	0a1b      	lsrs	r3, r3, #8
 800269e:	f003 0307 	and.w	r3, r3, #7
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr
 80026ac:	e000ed00 	.word	0xe000ed00

080026b0 <__NVIC_EnableIRQ>:
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4603      	mov	r3, r0
 80026b8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80026ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	db0b      	blt.n	80026da <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026c2:	88fb      	ldrh	r3, [r7, #6]
 80026c4:	f003 021f 	and.w	r2, r3, #31
 80026c8:	4907      	ldr	r1, [pc, #28]	; (80026e8 <__NVIC_EnableIRQ+0x38>)
 80026ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026ce:	095b      	lsrs	r3, r3, #5
 80026d0:	2001      	movs	r0, #1
 80026d2:	fa00 f202 	lsl.w	r2, r0, r2
 80026d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80026da:	bf00      	nop
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	e000e100 	.word	0xe000e100

080026ec <__NVIC_SetPriority>:
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	4603      	mov	r3, r0
 80026f4:	6039      	str	r1, [r7, #0]
 80026f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80026f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	db0a      	blt.n	8002716 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	b2da      	uxtb	r2, r3
 8002704:	490c      	ldr	r1, [pc, #48]	; (8002738 <__NVIC_SetPriority+0x4c>)
 8002706:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800270a:	0112      	lsls	r2, r2, #4
 800270c:	b2d2      	uxtb	r2, r2
 800270e:	440b      	add	r3, r1
 8002710:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002714:	e00a      	b.n	800272c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	b2da      	uxtb	r2, r3
 800271a:	4908      	ldr	r1, [pc, #32]	; (800273c <__NVIC_SetPriority+0x50>)
 800271c:	88fb      	ldrh	r3, [r7, #6]
 800271e:	f003 030f 	and.w	r3, r3, #15
 8002722:	3b04      	subs	r3, #4
 8002724:	0112      	lsls	r2, r2, #4
 8002726:	b2d2      	uxtb	r2, r2
 8002728:	440b      	add	r3, r1
 800272a:	761a      	strb	r2, [r3, #24]
}
 800272c:	bf00      	nop
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr
 8002738:	e000e100 	.word	0xe000e100
 800273c:	e000ed00 	.word	0xe000ed00

08002740 <NVIC_EncodePriority>:
{
 8002740:	b480      	push	{r7}
 8002742:	b089      	sub	sp, #36	; 0x24
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f003 0307 	and.w	r3, r3, #7
 8002752:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	f1c3 0307 	rsb	r3, r3, #7
 800275a:	2b04      	cmp	r3, #4
 800275c:	bf28      	it	cs
 800275e:	2304      	movcs	r3, #4
 8002760:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	3304      	adds	r3, #4
 8002766:	2b06      	cmp	r3, #6
 8002768:	d902      	bls.n	8002770 <NVIC_EncodePriority+0x30>
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	3b03      	subs	r3, #3
 800276e:	e000      	b.n	8002772 <NVIC_EncodePriority+0x32>
 8002770:	2300      	movs	r3, #0
 8002772:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002774:	f04f 32ff 	mov.w	r2, #4294967295
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	fa02 f303 	lsl.w	r3, r2, r3
 800277e:	43da      	mvns	r2, r3
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	401a      	ands	r2, r3
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002788:	f04f 31ff 	mov.w	r1, #4294967295
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	fa01 f303 	lsl.w	r3, r1, r3
 8002792:	43d9      	mvns	r1, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002798:	4313      	orrs	r3, r2
}
 800279a:	4618      	mov	r0, r3
 800279c:	3724      	adds	r7, #36	; 0x24
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
	...

080027a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	3b01      	subs	r3, #1
 80027b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027b8:	d301      	bcc.n	80027be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027ba:	2301      	movs	r3, #1
 80027bc:	e00f      	b.n	80027de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027be:	4a0a      	ldr	r2, [pc, #40]	; (80027e8 <SysTick_Config+0x40>)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	3b01      	subs	r3, #1
 80027c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027c6:	210f      	movs	r1, #15
 80027c8:	f04f 30ff 	mov.w	r0, #4294967295
 80027cc:	f7ff ff8e 	bl	80026ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027d0:	4b05      	ldr	r3, [pc, #20]	; (80027e8 <SysTick_Config+0x40>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027d6:	4b04      	ldr	r3, [pc, #16]	; (80027e8 <SysTick_Config+0x40>)
 80027d8:	2207      	movs	r2, #7
 80027da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	e000e010 	.word	0xe000e010

080027ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f7ff ff29 	bl	800264c <__NVIC_SetPriorityGrouping>
}
 80027fa:	bf00      	nop
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}

08002802 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b086      	sub	sp, #24
 8002806:	af00      	add	r7, sp, #0
 8002808:	4603      	mov	r3, r0
 800280a:	60b9      	str	r1, [r7, #8]
 800280c:	607a      	str	r2, [r7, #4]
 800280e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002810:	f7ff ff40 	bl	8002694 <__NVIC_GetPriorityGrouping>
 8002814:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	68b9      	ldr	r1, [r7, #8]
 800281a:	6978      	ldr	r0, [r7, #20]
 800281c:	f7ff ff90 	bl	8002740 <NVIC_EncodePriority>
 8002820:	4602      	mov	r2, r0
 8002822:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002826:	4611      	mov	r1, r2
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff ff5f 	bl	80026ec <__NVIC_SetPriority>
}
 800282e:	bf00      	nop
 8002830:	3718      	adds	r7, #24
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b082      	sub	sp, #8
 800283a:	af00      	add	r7, sp, #0
 800283c:	4603      	mov	r3, r0
 800283e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002840:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff ff33 	bl	80026b0 <__NVIC_EnableIRQ>
}
 800284a:	bf00      	nop
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b082      	sub	sp, #8
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f7ff ffa4 	bl	80027a8 <SysTick_Config>
 8002860:	4603      	mov	r3, r0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800286a:	b580      	push	{r7, lr}
 800286c:	b082      	sub	sp, #8
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d101      	bne.n	800287c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e014      	b.n	80028a6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	791b      	ldrb	r3, [r3, #4]
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2b00      	cmp	r3, #0
 8002884:	d105      	bne.n	8002892 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f7ff fa75 	bl	8001d7c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2202      	movs	r2, #2
 8002896:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2201      	movs	r2, #1
 80028a2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
	...

080028b0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b088      	sub	sp, #32
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	795b      	ldrb	r3, [r3, #5]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d101      	bne.n	80028c8 <HAL_DAC_ConfigChannel+0x18>
 80028c4:	2302      	movs	r3, #2
 80028c6:	e12a      	b.n	8002b1e <HAL_DAC_ConfigChannel+0x26e>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2201      	movs	r2, #1
 80028cc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2202      	movs	r2, #2
 80028d2:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2b04      	cmp	r3, #4
 80028da:	f040 8081 	bne.w	80029e0 <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80028de:	f7ff fe59 	bl	8002594 <HAL_GetTick>
 80028e2:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d140      	bne.n	800296c <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80028ea:	e018      	b.n	800291e <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80028ec:	f7ff fe52 	bl	8002594 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d911      	bls.n	800291e <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002900:	4b89      	ldr	r3, [pc, #548]	; (8002b28 <HAL_DAC_ConfigChannel+0x278>)
 8002902:	4013      	ands	r3, r2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d00a      	beq.n	800291e <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	f043 0208 	orr.w	r2, r3, #8
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2203      	movs	r2, #3
 8002918:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e0ff      	b.n	8002b1e <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002924:	4b80      	ldr	r3, [pc, #512]	; (8002b28 <HAL_DAC_ConfigChannel+0x278>)
 8002926:	4013      	ands	r3, r2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d1df      	bne.n	80028ec <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 800292c:	2001      	movs	r0, #1
 800292e:	f7ff fe3d 	bl	80025ac <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68ba      	ldr	r2, [r7, #8]
 8002938:	6992      	ldr	r2, [r2, #24]
 800293a:	641a      	str	r2, [r3, #64]	; 0x40
 800293c:	e023      	b.n	8002986 <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800293e:	f7ff fe29 	bl	8002594 <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	2b01      	cmp	r3, #1
 800294a:	d90f      	bls.n	800296c <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002952:	2b00      	cmp	r3, #0
 8002954:	da0a      	bge.n	800296c <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	f043 0208 	orr.w	r2, r3, #8
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2203      	movs	r2, #3
 8002966:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e0d8      	b.n	8002b1e <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002972:	2b00      	cmp	r3, #0
 8002974:	dbe3      	blt.n	800293e <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 8002976:	2001      	movs	r0, #1
 8002978:	f7ff fe18 	bl	80025ac <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68ba      	ldr	r2, [r7, #8]
 8002982:	6992      	ldr	r2, [r2, #24]
 8002984:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f003 0310 	and.w	r3, r3, #16
 8002992:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002996:	fa01 f303 	lsl.w	r3, r1, r3
 800299a:	43db      	mvns	r3, r3
 800299c:	ea02 0103 	and.w	r1, r2, r3
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	69da      	ldr	r2, [r3, #28]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f003 0310 	and.w	r3, r3, #16
 80029aa:	409a      	lsls	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	430a      	orrs	r2, r1
 80029b2:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f003 0310 	and.w	r3, r3, #16
 80029c0:	21ff      	movs	r1, #255	; 0xff
 80029c2:	fa01 f303 	lsl.w	r3, r1, r3
 80029c6:	43db      	mvns	r3, r3
 80029c8:	ea02 0103 	and.w	r1, r2, r3
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	6a1a      	ldr	r2, [r3, #32]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f003 0310 	and.w	r3, r3, #16
 80029d6:	409a      	lsls	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	430a      	orrs	r2, r1
 80029de:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	691b      	ldr	r3, [r3, #16]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d11d      	bne.n	8002a24 <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ee:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f003 0310 	and.w	r3, r3, #16
 80029f6:	221f      	movs	r2, #31
 80029f8:	fa02 f303 	lsl.w	r3, r2, r3
 80029fc:	43db      	mvns	r3, r3
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	4013      	ands	r3, r2
 8002a02:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	695b      	ldr	r3, [r3, #20]
 8002a08:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f003 0310 	and.w	r3, r3, #16
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	fa02 f303 	lsl.w	r3, r2, r3
 8002a16:	697a      	ldr	r2, [r7, #20]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	697a      	ldr	r2, [r7, #20]
 8002a22:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a2a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f003 0310 	and.w	r3, r3, #16
 8002a32:	2207      	movs	r2, #7
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	43db      	mvns	r3, r3
 8002a3a:	697a      	ldr	r2, [r7, #20]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d102      	bne.n	8002a4e <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	61fb      	str	r3, [r7, #28]
 8002a4c:	e00f      	b.n	8002a6e <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d102      	bne.n	8002a5c <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8002a56:	2301      	movs	r3, #1
 8002a58:	61fb      	str	r3, [r7, #28]
 8002a5a:	e008      	b.n	8002a6e <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d102      	bne.n	8002a6a <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8002a64:	2301      	movs	r3, #1
 8002a66:	61fb      	str	r3, [r7, #28]
 8002a68:	e001      	b.n	8002a6e <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	69fa      	ldr	r2, [r7, #28]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f003 0310 	and.w	r3, r3, #16
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8a:	697a      	ldr	r2, [r7, #20]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6819      	ldr	r1, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f003 0310 	and.w	r3, r3, #16
 8002aa4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	43da      	mvns	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	400a      	ands	r2, r1
 8002ab4:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f003 0310 	and.w	r3, r3, #16
 8002ac4:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	43db      	mvns	r3, r3
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f003 0310 	and.w	r3, r3, #16
 8002ae0:	693a      	ldr	r2, [r7, #16]
 8002ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	697a      	ldr	r2, [r7, #20]
 8002af2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6819      	ldr	r1, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f003 0310 	and.w	r3, r3, #16
 8002b00:	22c0      	movs	r2, #192	; 0xc0
 8002b02:	fa02 f303 	lsl.w	r3, r2, r3
 8002b06:	43da      	mvns	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	400a      	ands	r2, r1
 8002b0e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2201      	movs	r2, #1
 8002b14:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3720      	adds	r7, #32
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	20008000 	.word	0x20008000

08002b2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b089      	sub	sp, #36	; 0x24
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002b36:	2300      	movs	r3, #0
 8002b38:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002b3a:	4b89      	ldr	r3, [pc, #548]	; (8002d60 <HAL_GPIO_Init+0x234>)
 8002b3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002b3e:	e194      	b.n	8002e6a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	2101      	movs	r1, #1
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	fa01 f303 	lsl.w	r3, r1, r3
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f000 8186 	beq.w	8002e64 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f003 0303 	and.w	r3, r3, #3
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d005      	beq.n	8002b70 <HAL_GPIO_Init+0x44>
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f003 0303 	and.w	r3, r3, #3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d130      	bne.n	8002bd2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	005b      	lsls	r3, r3, #1
 8002b7a:	2203      	movs	r2, #3
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	43db      	mvns	r3, r3
 8002b82:	69ba      	ldr	r2, [r7, #24]
 8002b84:	4013      	ands	r3, r2
 8002b86:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	68da      	ldr	r2, [r3, #12]
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bae:	43db      	mvns	r3, r3
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	091b      	lsrs	r3, r3, #4
 8002bbc:	f003 0201 	and.w	r2, r3, #1
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f003 0303 	and.w	r3, r3, #3
 8002bda:	2b03      	cmp	r3, #3
 8002bdc:	d017      	beq.n	8002c0e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	2203      	movs	r2, #3
 8002bea:	fa02 f303 	lsl.w	r3, r2, r3
 8002bee:	43db      	mvns	r3, r3
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	689a      	ldr	r2, [r3, #8]
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f003 0303 	and.w	r3, r3, #3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d123      	bne.n	8002c62 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	08da      	lsrs	r2, r3, #3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	3208      	adds	r2, #8
 8002c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	f003 0307 	and.w	r3, r3, #7
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	220f      	movs	r2, #15
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	43db      	mvns	r3, r3
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	691a      	ldr	r2, [r3, #16]
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	f003 0307 	and.w	r3, r3, #7
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	08da      	lsrs	r2, r3, #3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	3208      	adds	r2, #8
 8002c5c:	69b9      	ldr	r1, [r7, #24]
 8002c5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	2203      	movs	r2, #3
 8002c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c72:	43db      	mvns	r3, r3
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	4013      	ands	r3, r2
 8002c78:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f003 0203 	and.w	r2, r3, #3
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f000 80e0 	beq.w	8002e64 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ca4:	4b2f      	ldr	r3, [pc, #188]	; (8002d64 <HAL_GPIO_Init+0x238>)
 8002ca6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002caa:	4a2e      	ldr	r2, [pc, #184]	; (8002d64 <HAL_GPIO_Init+0x238>)
 8002cac:	f043 0302 	orr.w	r3, r3, #2
 8002cb0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002cb4:	4b2b      	ldr	r3, [pc, #172]	; (8002d64 <HAL_GPIO_Init+0x238>)
 8002cb6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	60fb      	str	r3, [r7, #12]
 8002cc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cc2:	4a29      	ldr	r2, [pc, #164]	; (8002d68 <HAL_GPIO_Init+0x23c>)
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	089b      	lsrs	r3, r3, #2
 8002cc8:	3302      	adds	r3, #2
 8002cca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	f003 0303 	and.w	r3, r3, #3
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	220f      	movs	r2, #15
 8002cda:	fa02 f303 	lsl.w	r3, r2, r3
 8002cde:	43db      	mvns	r3, r3
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a20      	ldr	r2, [pc, #128]	; (8002d6c <HAL_GPIO_Init+0x240>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d052      	beq.n	8002d94 <HAL_GPIO_Init+0x268>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a1f      	ldr	r2, [pc, #124]	; (8002d70 <HAL_GPIO_Init+0x244>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d031      	beq.n	8002d5a <HAL_GPIO_Init+0x22e>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a1e      	ldr	r2, [pc, #120]	; (8002d74 <HAL_GPIO_Init+0x248>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d02b      	beq.n	8002d56 <HAL_GPIO_Init+0x22a>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a1d      	ldr	r2, [pc, #116]	; (8002d78 <HAL_GPIO_Init+0x24c>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d025      	beq.n	8002d52 <HAL_GPIO_Init+0x226>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a1c      	ldr	r2, [pc, #112]	; (8002d7c <HAL_GPIO_Init+0x250>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d01f      	beq.n	8002d4e <HAL_GPIO_Init+0x222>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a1b      	ldr	r2, [pc, #108]	; (8002d80 <HAL_GPIO_Init+0x254>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d019      	beq.n	8002d4a <HAL_GPIO_Init+0x21e>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a1a      	ldr	r2, [pc, #104]	; (8002d84 <HAL_GPIO_Init+0x258>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d013      	beq.n	8002d46 <HAL_GPIO_Init+0x21a>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a19      	ldr	r2, [pc, #100]	; (8002d88 <HAL_GPIO_Init+0x25c>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d00d      	beq.n	8002d42 <HAL_GPIO_Init+0x216>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a18      	ldr	r2, [pc, #96]	; (8002d8c <HAL_GPIO_Init+0x260>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d007      	beq.n	8002d3e <HAL_GPIO_Init+0x212>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a17      	ldr	r2, [pc, #92]	; (8002d90 <HAL_GPIO_Init+0x264>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d101      	bne.n	8002d3a <HAL_GPIO_Init+0x20e>
 8002d36:	2309      	movs	r3, #9
 8002d38:	e02d      	b.n	8002d96 <HAL_GPIO_Init+0x26a>
 8002d3a:	230a      	movs	r3, #10
 8002d3c:	e02b      	b.n	8002d96 <HAL_GPIO_Init+0x26a>
 8002d3e:	2308      	movs	r3, #8
 8002d40:	e029      	b.n	8002d96 <HAL_GPIO_Init+0x26a>
 8002d42:	2307      	movs	r3, #7
 8002d44:	e027      	b.n	8002d96 <HAL_GPIO_Init+0x26a>
 8002d46:	2306      	movs	r3, #6
 8002d48:	e025      	b.n	8002d96 <HAL_GPIO_Init+0x26a>
 8002d4a:	2305      	movs	r3, #5
 8002d4c:	e023      	b.n	8002d96 <HAL_GPIO_Init+0x26a>
 8002d4e:	2304      	movs	r3, #4
 8002d50:	e021      	b.n	8002d96 <HAL_GPIO_Init+0x26a>
 8002d52:	2303      	movs	r3, #3
 8002d54:	e01f      	b.n	8002d96 <HAL_GPIO_Init+0x26a>
 8002d56:	2302      	movs	r3, #2
 8002d58:	e01d      	b.n	8002d96 <HAL_GPIO_Init+0x26a>
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e01b      	b.n	8002d96 <HAL_GPIO_Init+0x26a>
 8002d5e:	bf00      	nop
 8002d60:	58000080 	.word	0x58000080
 8002d64:	58024400 	.word	0x58024400
 8002d68:	58000400 	.word	0x58000400
 8002d6c:	58020000 	.word	0x58020000
 8002d70:	58020400 	.word	0x58020400
 8002d74:	58020800 	.word	0x58020800
 8002d78:	58020c00 	.word	0x58020c00
 8002d7c:	58021000 	.word	0x58021000
 8002d80:	58021400 	.word	0x58021400
 8002d84:	58021800 	.word	0x58021800
 8002d88:	58021c00 	.word	0x58021c00
 8002d8c:	58022000 	.word	0x58022000
 8002d90:	58022400 	.word	0x58022400
 8002d94:	2300      	movs	r3, #0
 8002d96:	69fa      	ldr	r2, [r7, #28]
 8002d98:	f002 0203 	and.w	r2, r2, #3
 8002d9c:	0092      	lsls	r2, r2, #2
 8002d9e:	4093      	lsls	r3, r2
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002da6:	4938      	ldr	r1, [pc, #224]	; (8002e88 <HAL_GPIO_Init+0x35c>)
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	089b      	lsrs	r3, r3, #2
 8002dac:	3302      	adds	r3, #2
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002db4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	43db      	mvns	r3, r3
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d003      	beq.n	8002dda <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002dda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002de2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	43db      	mvns	r3, r3
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	4013      	ands	r3, r2
 8002df2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d003      	beq.n	8002e08 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002e08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d003      	beq.n	8002e34 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	43db      	mvns	r3, r3
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	4013      	ands	r3, r2
 8002e48:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d003      	beq.n	8002e5e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	3301      	adds	r3, #1
 8002e68:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	fa22 f303 	lsr.w	r3, r2, r3
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	f47f ae63 	bne.w	8002b40 <HAL_GPIO_Init+0x14>
  }
}
 8002e7a:	bf00      	nop
 8002e7c:	bf00      	nop
 8002e7e:	3724      	adds	r7, #36	; 0x24
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr
 8002e88:	58000400 	.word	0x58000400

08002e8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b085      	sub	sp, #20
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	460b      	mov	r3, r1
 8002e96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	691a      	ldr	r2, [r3, #16]
 8002e9c:	887b      	ldrh	r3, [r7, #2]
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d002      	beq.n	8002eaa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	73fb      	strb	r3, [r7, #15]
 8002ea8:	e001      	b.n	8002eae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3714      	adds	r7, #20
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	807b      	strh	r3, [r7, #2]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ecc:	787b      	ldrb	r3, [r7, #1]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d003      	beq.n	8002eda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ed2:	887a      	ldrh	r2, [r7, #2]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002ed8:	e003      	b.n	8002ee2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002eda:	887b      	ldrh	r3, [r7, #2]
 8002edc:	041a      	lsls	r2, r3, #16
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	619a      	str	r2, [r3, #24]
}
 8002ee2:	bf00      	nop
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr

08002eee <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b085      	sub	sp, #20
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f00:	887a      	ldrh	r2, [r7, #2]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	4013      	ands	r3, r2
 8002f06:	041a      	lsls	r2, r3, #16
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	43d9      	mvns	r1, r3
 8002f0c:	887b      	ldrh	r3, [r7, #2]
 8002f0e:	400b      	ands	r3, r1
 8002f10:	431a      	orrs	r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	619a      	str	r2, [r3, #24]
}
 8002f16:	bf00      	nop
 8002f18:	3714      	adds	r7, #20
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr

08002f22 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b082      	sub	sp, #8
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	4603      	mov	r3, r0
 8002f2a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8002f2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f30:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002f34:	88fb      	ldrh	r3, [r7, #6]
 8002f36:	4013      	ands	r3, r2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d008      	beq.n	8002f4e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f40:	88fb      	ldrh	r3, [r7, #6]
 8002f42:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f46:	88fb      	ldrh	r3, [r7, #6]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7fe f825 	bl	8000f98 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8002f4e:	bf00      	nop
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
	...

08002f58 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e0bd      	b.n	80030e6 <HAL_HRTIM_Init+0x18e>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2202      	movs	r2, #2
 8002f6e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d031      	beq.n	8003012 <HAL_HRTIM_Init+0xba>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a4f      	ldr	r2, [pc, #316]	; (80030f0 <HAL_HRTIM_Init+0x198>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d10e      	bne.n	8002fd6 <HAL_HRTIM_Init+0x7e>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8002fb8:	4b4e      	ldr	r3, [pc, #312]	; (80030f4 <HAL_HRTIM_Init+0x19c>)
 8002fba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002fbe:	4a4d      	ldr	r2, [pc, #308]	; (80030f4 <HAL_HRTIM_Init+0x19c>)
 8002fc0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002fc4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002fc8:	4b4a      	ldr	r3, [pc, #296]	; (80030f4 <HAL_HRTIM_Init+0x19c>)
 8002fca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002fce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fd2:	60fb      	str	r3, [r7, #12]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002fe4:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002fee:	693a      	ldr	r2, [r7, #16]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ffa:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	695b      	ldr	r3, [r3, #20]
 8003000:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003004:	693a      	ldr	r2, [r7, #16]
 8003006:	4313      	orrs	r3, r2
 8003008:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f7fe fef8 	bl	8001e08 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f003 0302 	and.w	r3, r3, #2
 8003020:	2b00      	cmp	r3, #0
 8003022:	d012      	beq.n	800304a <HAL_HRTIM_Init+0xf2>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003032:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800303c:	693a      	ldr	r2, [r7, #16]
 800303e:	4313      	orrs	r3, r2
 8003040:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2201      	movs	r2, #1
 800304e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 800305a:	2300      	movs	r3, #0
 800305c:	75fb      	strb	r3, [r7, #23]
 800305e:	e03e      	b.n	80030de <HAL_HRTIM_Init+0x186>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8003060:	7dfa      	ldrb	r2, [r7, #23]
 8003062:	6879      	ldr	r1, [r7, #4]
 8003064:	4613      	mov	r3, r2
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	1a9b      	subs	r3, r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	440b      	add	r3, r1
 800306e:	3318      	adds	r3, #24
 8003070:	2200      	movs	r2, #0
 8003072:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8003074:	7dfa      	ldrb	r2, [r7, #23]
 8003076:	6879      	ldr	r1, [r7, #4]
 8003078:	4613      	mov	r3, r2
 800307a:	00db      	lsls	r3, r3, #3
 800307c:	1a9b      	subs	r3, r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	440b      	add	r3, r1
 8003082:	331c      	adds	r3, #28
 8003084:	2200      	movs	r2, #0
 8003086:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8003088:	7dfa      	ldrb	r2, [r7, #23]
 800308a:	6879      	ldr	r1, [r7, #4]
 800308c:	4613      	mov	r3, r2
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	1a9b      	subs	r3, r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	440b      	add	r3, r1
 8003096:	3320      	adds	r3, #32
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 800309c:	7dfa      	ldrb	r2, [r7, #23]
 800309e:	6879      	ldr	r1, [r7, #4]
 80030a0:	4613      	mov	r3, r2
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	1a9b      	subs	r3, r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	440b      	add	r3, r1
 80030aa:	3324      	adds	r3, #36	; 0x24
 80030ac:	2200      	movs	r2, #0
 80030ae:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 80030b0:	7dfa      	ldrb	r2, [r7, #23]
 80030b2:	6879      	ldr	r1, [r7, #4]
 80030b4:	4613      	mov	r3, r2
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	1a9b      	subs	r3, r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	440b      	add	r3, r1
 80030be:	3328      	adds	r3, #40	; 0x28
 80030c0:	2200      	movs	r2, #0
 80030c2:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 80030c4:	7dfa      	ldrb	r2, [r7, #23]
 80030c6:	6879      	ldr	r1, [r7, #4]
 80030c8:	4613      	mov	r3, r2
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	1a9b      	subs	r3, r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	440b      	add	r3, r1
 80030d2:	3330      	adds	r3, #48	; 0x30
 80030d4:	2200      	movs	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]
       timer_idx++)
 80030d8:	7dfb      	ldrb	r3, [r7, #23]
 80030da:	3301      	adds	r3, #1
 80030dc:	75fb      	strb	r3, [r7, #23]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 80030de:	7dfb      	ldrb	r3, [r7, #23]
 80030e0:	2b05      	cmp	r3, #5
 80030e2:	d9bd      	bls.n	8003060 <HAL_HRTIM_Init+0x108>
  }

  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3718      	adds	r7, #24
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	40017400 	.word	0x40017400
 80030f4:	58024400 	.word	0x58024400

080030f8 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b02      	cmp	r3, #2
 800310e:	d101      	bne.n	8003114 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8003110:	2302      	movs	r3, #2
 8003112:	e015      	b.n	8003140 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2202      	movs	r2, #2
 8003118:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	2b05      	cmp	r3, #5
 8003120:	d104      	bne.n	800312c <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8003122:	6879      	ldr	r1, [r7, #4]
 8003124:	68f8      	ldr	r0, [r7, #12]
 8003126:	f000 fd43 	bl	8003bb0 <HRTIM_MasterBase_Config>
 800312a:	e004      	b.n	8003136 <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	68b9      	ldr	r1, [r7, #8]
 8003130:	68f8      	ldr	r0, [r7, #12]
 8003132:	f000 fd6c 	bl	8003c0e <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	3710      	adds	r7, #16
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2b02      	cmp	r3, #2
 800315e:	d101      	bne.n	8003164 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 8003160:	2302      	movs	r3, #2
 8003162:	e05f      	b.n	8003224 <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800316a:	2b01      	cmp	r3, #1
 800316c:	d101      	bne.n	8003172 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 800316e:	2302      	movs	r3, #2
 8003170:	e058      	b.n	8003224 <HAL_HRTIM_WaveformTimerConfig+0xdc>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2202      	movs	r2, #2
 800317e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	2b05      	cmp	r3, #5
 8003186:	d104      	bne.n	8003192 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8003188:	6879      	ldr	r1, [r7, #4]
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f000 fd7f 	bl	8003c8e <HRTIM_MasterWaveform_Config>
 8003190:	e004      	b.n	800319c <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	68b9      	ldr	r1, [r7, #8]
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	f000 fde0 	bl	8003d5c <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6819      	ldr	r1, [r3, #0]
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	68ba      	ldr	r2, [r7, #8]
 80031a4:	4613      	mov	r3, r2
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	1a9b      	subs	r3, r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	4403      	add	r3, r0
 80031ae:	3320      	adds	r3, #32
 80031b0:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6859      	ldr	r1, [r3, #4]
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	68ba      	ldr	r2, [r7, #8]
 80031ba:	4613      	mov	r3, r2
 80031bc:	00db      	lsls	r3, r3, #3
 80031be:	1a9b      	subs	r3, r3, r2
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	4403      	add	r3, r0
 80031c4:	3324      	adds	r3, #36	; 0x24
 80031c6:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6899      	ldr	r1, [r3, #8]
 80031cc:	68f8      	ldr	r0, [r7, #12]
 80031ce:	68ba      	ldr	r2, [r7, #8]
 80031d0:	4613      	mov	r3, r2
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	1a9b      	subs	r3, r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	4403      	add	r3, r0
 80031da:	3328      	adds	r3, #40	; 0x28
 80031dc:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	68d9      	ldr	r1, [r3, #12]
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	68ba      	ldr	r2, [r7, #8]
 80031e6:	4613      	mov	r3, r2
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	1a9b      	subs	r3, r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	4403      	add	r3, r0
 80031f0:	332c      	adds	r3, #44	; 0x2c
 80031f2:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6919      	ldr	r1, [r3, #16]
 80031f8:	68f8      	ldr	r0, [r7, #12]
 80031fa:	68ba      	ldr	r2, [r7, #8]
 80031fc:	4613      	mov	r3, r2
 80031fe:	00db      	lsls	r3, r3, #3
 8003200:	1a9b      	subs	r3, r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	4403      	add	r3, r0
 8003206:	3330      	adds	r3, #48	; 0x30
 8003208:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 800320a:	68b9      	ldr	r1, [r7, #8]
 800320c:	68f8      	ldr	r0, [r7, #12]
 800320e:	f000 ffe3 	bl	80041d8 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2201      	movs	r2, #1
 8003216:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  const HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
 8003238:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b02      	cmp	r3, #2
 8003244:	d101      	bne.n	800324a <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 8003246:	2302      	movs	r3, #2
 8003248:	e157      	b.n	80034fa <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8003250:	2b01      	cmp	r3, #1
 8003252:	d101      	bne.n	8003258 <HAL_HRTIM_WaveformCompareConfig+0x2c>
 8003254:	2302      	movs	r3, #2
 8003256:	e150      	b.n	80034fa <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2202      	movs	r2, #2
 8003264:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	2b05      	cmp	r3, #5
 800326c:	d140      	bne.n	80032f0 <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	3b01      	subs	r3, #1
 8003272:	2b07      	cmp	r3, #7
 8003274:	d82a      	bhi.n	80032cc <HAL_HRTIM_WaveformCompareConfig+0xa0>
 8003276:	a201      	add	r2, pc, #4	; (adr r2, 800327c <HAL_HRTIM_WaveformCompareConfig+0x50>)
 8003278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800327c:	0800329d 	.word	0x0800329d
 8003280:	080032a9 	.word	0x080032a9
 8003284:	080032cd 	.word	0x080032cd
 8003288:	080032b5 	.word	0x080032b5
 800328c:	080032cd 	.word	0x080032cd
 8003290:	080032cd 	.word	0x080032cd
 8003294:	080032cd 	.word	0x080032cd
 8003298:	080032c1 	.word	0x080032c1
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	683a      	ldr	r2, [r7, #0]
 80032a2:	6812      	ldr	r2, [r2, #0]
 80032a4:	61da      	str	r2, [r3, #28]
        break;
 80032a6:	e01a      	b.n	80032de <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	6812      	ldr	r2, [r2, #0]
 80032b0:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 80032b2:	e014      	b.n	80032de <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	6812      	ldr	r2, [r2, #0]
 80032bc:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 80032be:	e00e      	b.n	80032de <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	683a      	ldr	r2, [r7, #0]
 80032c6:	6812      	ldr	r2, [r2, #0]
 80032c8:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 80032ca:	e008      	b.n	80032de <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2207      	movs	r2, #7
 80032d0:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

        break;
 80032dc:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b07      	cmp	r3, #7
 80032e8:	f040 80fe 	bne.w	80034e8 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e104      	b.n	80034fa <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	3b01      	subs	r3, #1
 80032f4:	2b07      	cmp	r3, #7
 80032f6:	f200 80e3 	bhi.w	80034c0 <HAL_HRTIM_WaveformCompareConfig+0x294>
 80032fa:	a201      	add	r2, pc, #4	; (adr r2, 8003300 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 80032fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003300:	08003321 	.word	0x08003321
 8003304:	08003335 	.word	0x08003335
 8003308:	080034c1 	.word	0x080034c1
 800330c:	080033f1 	.word	0x080033f1
 8003310:	080034c1 	.word	0x080034c1
 8003314:	080034c1 	.word	0x080034c1
 8003318:	080034c1 	.word	0x080034c1
 800331c:	08003405 	.word	0x08003405
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6819      	ldr	r1, [r3, #0]
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	01db      	lsls	r3, r3, #7
 800332c:	440b      	add	r3, r1
 800332e:	339c      	adds	r3, #156	; 0x9c
 8003330:	601a      	str	r2, [r3, #0]
        break;
 8003332:	e0d1      	b.n	80034d8 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6819      	ldr	r1, [r3, #0]
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	01db      	lsls	r3, r3, #7
 8003340:	440b      	add	r3, r1
 8003342:	33a4      	adds	r3, #164	; 0xa4
 8003344:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d03f      	beq.n	80033ce <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	3301      	adds	r3, #1
 8003356:	01db      	lsls	r3, r3, #7
 8003358:	4413      	add	r3, r2
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	6811      	ldr	r1, [r2, #0]
 8003360:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	3301      	adds	r3, #1
 8003368:	01db      	lsls	r3, r3, #7
 800336a:	440b      	add	r3, r1
 800336c:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	3301      	adds	r3, #1
 8003376:	01db      	lsls	r3, r3, #7
 8003378:	4413      	add	r3, r2
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	68f9      	ldr	r1, [r7, #12]
 8003382:	6809      	ldr	r1, [r1, #0]
 8003384:	431a      	orrs	r2, r3
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	3301      	adds	r3, #1
 800338a:	01db      	lsls	r3, r3, #7
 800338c:	440b      	add	r3, r1
 800338e:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003398:	d109      	bne.n	80033ae <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6819      	ldr	r1, [r3, #0]
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	689a      	ldr	r2, [r3, #8]
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	01db      	lsls	r3, r3, #7
 80033a6:	440b      	add	r3, r1
 80033a8:	339c      	adds	r3, #156	; 0x9c
 80033aa:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 80033ac:	e091      	b.n	80034d2 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80033b6:	f040 808c 	bne.w	80034d2 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6819      	ldr	r1, [r3, #0]
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	689a      	ldr	r2, [r3, #8]
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	01db      	lsls	r3, r3, #7
 80033c6:	440b      	add	r3, r1
 80033c8:	33a8      	adds	r3, #168	; 0xa8
 80033ca:	601a      	str	r2, [r3, #0]
         break;
 80033cc:	e081      	b.n	80034d2 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	3301      	adds	r3, #1
 80033d6:	01db      	lsls	r3, r3, #7
 80033d8:	4413      	add	r3, r2
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	6811      	ldr	r1, [r2, #0]
 80033e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	3301      	adds	r3, #1
 80033e8:	01db      	lsls	r3, r3, #7
 80033ea:	440b      	add	r3, r1
 80033ec:	601a      	str	r2, [r3, #0]
         break;
 80033ee:	e070      	b.n	80034d2 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6819      	ldr	r1, [r3, #0]
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	01db      	lsls	r3, r3, #7
 80033fc:	440b      	add	r3, r1
 80033fe:	33a8      	adds	r3, #168	; 0xa8
 8003400:	601a      	str	r2, [r3, #0]
        break;
 8003402:	e069      	b.n	80034d8 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6819      	ldr	r1, [r3, #0]
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	01db      	lsls	r3, r3, #7
 8003410:	440b      	add	r3, r1
 8003412:	33ac      	adds	r3, #172	; 0xac
 8003414:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d03f      	beq.n	800349e <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	3301      	adds	r3, #1
 8003426:	01db      	lsls	r3, r3, #7
 8003428:	4413      	add	r3, r2
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	6811      	ldr	r1, [r2, #0]
 8003430:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	3301      	adds	r3, #1
 8003438:	01db      	lsls	r3, r3, #7
 800343a:	440b      	add	r3, r1
 800343c:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	3301      	adds	r3, #1
 8003446:	01db      	lsls	r3, r3, #7
 8003448:	4413      	add	r3, r2
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	68f9      	ldr	r1, [r7, #12]
 8003454:	6809      	ldr	r1, [r1, #0]
 8003456:	431a      	orrs	r2, r3
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	3301      	adds	r3, #1
 800345c:	01db      	lsls	r3, r3, #7
 800345e:	440b      	add	r3, r1
 8003460:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800346a:	d109      	bne.n	8003480 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6819      	ldr	r1, [r3, #0]
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	689a      	ldr	r2, [r3, #8]
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	01db      	lsls	r3, r3, #7
 8003478:	440b      	add	r3, r1
 800347a:	339c      	adds	r3, #156	; 0x9c
 800347c:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 800347e:	e02a      	b.n	80034d6 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003488:	d125      	bne.n	80034d6 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6819      	ldr	r1, [r3, #0]
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	689a      	ldr	r2, [r3, #8]
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	01db      	lsls	r3, r3, #7
 8003496:	440b      	add	r3, r1
 8003498:	33a8      	adds	r3, #168	; 0xa8
 800349a:	601a      	str	r2, [r3, #0]
         break;
 800349c:	e01b      	b.n	80034d6 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	3301      	adds	r3, #1
 80034a6:	01db      	lsls	r3, r3, #7
 80034a8:	4413      	add	r3, r2
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	6811      	ldr	r1, [r2, #0]
 80034b0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	3301      	adds	r3, #1
 80034b8:	01db      	lsls	r3, r3, #7
 80034ba:	440b      	add	r3, r1
 80034bc:	601a      	str	r2, [r3, #0]
         break;
 80034be:	e00a      	b.n	80034d6 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2207      	movs	r2, #7
 80034c4:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      break;
 80034d0:	e002      	b.n	80034d8 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 80034d2:	bf00      	nop
 80034d4:	e000      	b.n	80034d8 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 80034d6:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	2b07      	cmp	r3, #7
 80034e2:	d101      	bne.n	80034e8 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e008      	b.n	80034fa <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3714      	adds	r7, #20
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop

08003508 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
 8003514:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b02      	cmp	r3, #2
 8003520:	d101      	bne.n	8003526 <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 8003522:	2302      	movs	r3, #2
 8003524:	e01d      	b.n	8003562 <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800352c:	2b01      	cmp	r3, #1
 800352e:	d101      	bne.n	8003534 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 8003530:	2302      	movs	r3, #2
 8003532:	e016      	b.n	8003562 <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2202      	movs	r2, #2
 8003540:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	68b9      	ldr	r1, [r7, #8]
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f000 fd46 	bl	8003fdc <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3710      	adds	r7, #16
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
	...

0800356c <HAL_HRTIM_WaveformSetOutputLevel>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformSetOutputLevel(HRTIM_HandleTypeDef * hhrtim,
                                                   uint32_t TimerIdx,
                                                   uint32_t Output,
                                                   uint32_t OutputLevel)
{
 800356c:	b480      	push	{r7}
 800356e:	b085      	sub	sp, #20
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	607a      	str	r2, [r7, #4]
 8003578:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMER_OUTPUT(TimerIdx, Output));
  assert_param(IS_HRTIM_OUTPUTLEVEL(OutputLevel));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d101      	bne.n	800358a <HAL_HRTIM_WaveformSetOutputLevel+0x1e>
  {
     return HAL_BUSY;
 8003586:	2302      	movs	r3, #2
 8003588:	e0df      	b.n	800374a <HAL_HRTIM_WaveformSetOutputLevel+0x1de>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8003590:	2b01      	cmp	r3, #1
 8003592:	d101      	bne.n	8003598 <HAL_HRTIM_WaveformSetOutputLevel+0x2c>
 8003594:	2302      	movs	r3, #2
 8003596:	e0d8      	b.n	800374a <HAL_HRTIM_WaveformSetOutputLevel+0x1de>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2202      	movs	r2, #2
 80035a4:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Force timer output level */
  switch (Output)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035ae:	f000 808d 	beq.w	80036cc <HAL_HRTIM_WaveformSetOutputLevel+0x160>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035b8:	f200 80ad 	bhi.w	8003716 <HAL_HRTIM_WaveformSetOutputLevel+0x1aa>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035c2:	d05e      	beq.n	8003682 <HAL_HRTIM_WaveformSetOutputLevel+0x116>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035ca:	f200 80a4 	bhi.w	8003716 <HAL_HRTIM_WaveformSetOutputLevel+0x1aa>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2b80      	cmp	r3, #128	; 0x80
 80035d2:	d07b      	beq.n	80036cc <HAL_HRTIM_WaveformSetOutputLevel+0x160>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2b80      	cmp	r3, #128	; 0x80
 80035d8:	f200 809d 	bhi.w	8003716 <HAL_HRTIM_WaveformSetOutputLevel+0x1aa>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2b20      	cmp	r3, #32
 80035e0:	d84c      	bhi.n	800367c <HAL_HRTIM_WaveformSetOutputLevel+0x110>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f000 8096 	beq.w	8003716 <HAL_HRTIM_WaveformSetOutputLevel+0x1aa>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	3b01      	subs	r3, #1
 80035ee:	2b1f      	cmp	r3, #31
 80035f0:	f200 8091 	bhi.w	8003716 <HAL_HRTIM_WaveformSetOutputLevel+0x1aa>
 80035f4:	a201      	add	r2, pc, #4	; (adr r2, 80035fc <HAL_HRTIM_WaveformSetOutputLevel+0x90>)
 80035f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035fa:	bf00      	nop
 80035fc:	08003683 	.word	0x08003683
 8003600:	080036cd 	.word	0x080036cd
 8003604:	08003717 	.word	0x08003717
 8003608:	08003683 	.word	0x08003683
 800360c:	08003717 	.word	0x08003717
 8003610:	08003717 	.word	0x08003717
 8003614:	08003717 	.word	0x08003717
 8003618:	080036cd 	.word	0x080036cd
 800361c:	08003717 	.word	0x08003717
 8003620:	08003717 	.word	0x08003717
 8003624:	08003717 	.word	0x08003717
 8003628:	08003717 	.word	0x08003717
 800362c:	08003717 	.word	0x08003717
 8003630:	08003717 	.word	0x08003717
 8003634:	08003717 	.word	0x08003717
 8003638:	08003683 	.word	0x08003683
 800363c:	08003717 	.word	0x08003717
 8003640:	08003717 	.word	0x08003717
 8003644:	08003717 	.word	0x08003717
 8003648:	08003717 	.word	0x08003717
 800364c:	08003717 	.word	0x08003717
 8003650:	08003717 	.word	0x08003717
 8003654:	08003717 	.word	0x08003717
 8003658:	08003717 	.word	0x08003717
 800365c:	08003717 	.word	0x08003717
 8003660:	08003717 	.word	0x08003717
 8003664:	08003717 	.word	0x08003717
 8003668:	08003717 	.word	0x08003717
 800366c:	08003717 	.word	0x08003717
 8003670:	08003717 	.word	0x08003717
 8003674:	08003717 	.word	0x08003717
 8003678:	080036cd 	.word	0x080036cd
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2b40      	cmp	r3, #64	; 0x40
 8003680:	d149      	bne.n	8003716 <HAL_HRTIM_WaveformSetOutputLevel+0x1aa>
  case HRTIM_OUTPUT_TB1:
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      if (OutputLevel == HRTIM_OUTPUTLEVEL_ACTIVE)
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	2b01      	cmp	r3, #1
 8003686:	d110      	bne.n	80036aa <HAL_HRTIM_WaveformSetOutputLevel+0x13e>
      {
        /* Force output to its active state */
        SET_BIT(hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R,HRTIM_SET1R_SST);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	01db      	lsls	r3, r3, #7
 8003690:	4413      	add	r3, r2
 8003692:	33bc      	adds	r3, #188	; 0xbc
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68fa      	ldr	r2, [r7, #12]
 8003698:	6811      	ldr	r1, [r2, #0]
 800369a:	f043 0201 	orr.w	r2, r3, #1
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	01db      	lsls	r3, r3, #7
 80036a2:	440b      	add	r3, r1
 80036a4:	33bc      	adds	r3, #188	; 0xbc
 80036a6:	601a      	str	r2, [r3, #0]
      else
      {
        /* Force output to its inactive state */
        SET_BIT(hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R, HRTIM_RST1R_SRT);
      }
      break;
 80036a8:	e03e      	b.n	8003728 <HAL_HRTIM_WaveformSetOutputLevel+0x1bc>
        SET_BIT(hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R, HRTIM_RST1R_SRT);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	01db      	lsls	r3, r3, #7
 80036b2:	4413      	add	r3, r2
 80036b4:	33c0      	adds	r3, #192	; 0xc0
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	6811      	ldr	r1, [r2, #0]
 80036bc:	f043 0201 	orr.w	r2, r3, #1
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	01db      	lsls	r3, r3, #7
 80036c4:	440b      	add	r3, r1
 80036c6:	33c0      	adds	r3, #192	; 0xc0
 80036c8:	601a      	str	r2, [r3, #0]
      break;
 80036ca:	e02d      	b.n	8003728 <HAL_HRTIM_WaveformSetOutputLevel+0x1bc>
  case HRTIM_OUTPUT_TB2:
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      if (OutputLevel == HRTIM_OUTPUTLEVEL_ACTIVE)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d110      	bne.n	80036f4 <HAL_HRTIM_WaveformSetOutputLevel+0x188>
      {
        /* Force output to its active state */
        SET_BIT(hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R, HRTIM_SET2R_SST);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	01db      	lsls	r3, r3, #7
 80036da:	4413      	add	r3, r2
 80036dc:	33c4      	adds	r3, #196	; 0xc4
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	6811      	ldr	r1, [r2, #0]
 80036e4:	f043 0201 	orr.w	r2, r3, #1
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	01db      	lsls	r3, r3, #7
 80036ec:	440b      	add	r3, r1
 80036ee:	33c4      	adds	r3, #196	; 0xc4
 80036f0:	601a      	str	r2, [r3, #0]
      else
      {
        /* Force output to its inactive state */
        SET_BIT(hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R, HRTIM_RST2R_SRT);
      }
      break;
 80036f2:	e019      	b.n	8003728 <HAL_HRTIM_WaveformSetOutputLevel+0x1bc>
        SET_BIT(hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R, HRTIM_RST2R_SRT);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	01db      	lsls	r3, r3, #7
 80036fc:	4413      	add	r3, r2
 80036fe:	33c8      	adds	r3, #200	; 0xc8
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	6811      	ldr	r1, [r2, #0]
 8003706:	f043 0201 	orr.w	r2, r3, #1
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	01db      	lsls	r3, r3, #7
 800370e:	440b      	add	r3, r1
 8003710:	33c8      	adds	r3, #200	; 0xc8
 8003712:	601a      	str	r2, [r3, #0]
      break;
 8003714:	e008      	b.n	8003728 <HAL_HRTIM_WaveformSetOutputLevel+0x1bc>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2207      	movs	r2, #7
 800371a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      break;
 8003726:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800372e:	b2db      	uxtb	r3, r3
 8003730:	2b07      	cmp	r3, #7
 8003732:	d101      	bne.n	8003738 <HAL_HRTIM_WaveformSetOutputLevel+0x1cc>
  {
     return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e008      	b.n	800374a <HAL_HRTIM_WaveformSetOutputLevel+0x1de>
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3714      	adds	r7, #20
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop

08003758 <HAL_HRTIM_WaveformOutputStart>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t OutputsToStart)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStart));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8003768:	2b01      	cmp	r3, #1
 800376a:	d101      	bne.n	8003770 <HAL_HRTIM_WaveformOutputStart+0x18>
 800376c:	2302      	movs	r3, #2
 800376e:	e01a      	b.n	80037a6 <HAL_HRTIM_WaveformOutputStart+0x4e>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2202      	movs	r2, #2
 800377c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f8d3 1394 	ldr.w	r1, [r3, #916]	; 0x394
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	683a      	ldr	r2, [r7, #0]
 800378e:	430a      	orrs	r2, r1
 8003790:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr

080037b2 <HAL_HRTIM_WaveformOutputStop>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStop(HRTIM_HandleTypeDef * hhrtim,
                                               uint32_t OutputsToStop)
{
 80037b2:	b480      	push	{r7}
 80037b4:	b083      	sub	sp, #12
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
 80037ba:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStop));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d101      	bne.n	80037ca <HAL_HRTIM_WaveformOutputStop+0x18>
 80037c6:	2302      	movs	r3, #2
 80037c8:	e01a      	b.n	8003800 <HAL_HRTIM_WaveformOutputStop+0x4e>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2201      	movs	r2, #1
 80037ce:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2202      	movs	r2, #2
 80037d6:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.ODISR |= (OutputsToStop);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f8d3 1398 	ldr.w	r1, [r3, #920]	; 0x398
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	683a      	ldr	r2, [r7, #0]
 80037e8:	430a      	orrs	r2, r1
 80037ea:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2201      	movs	r2, #1
 80037f2:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <HAL_HRTIM_WaveformCountStart_IT>:
  *       function.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart_IT(HRTIM_HandleTypeDef * hhrtim,
                                                    uint32_t Timers)
{
 800380c:	b480      	push	{r7}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800381c:	2b01      	cmp	r3, #1
 800381e:	d101      	bne.n	8003824 <HAL_HRTIM_WaveformCountStart_IT+0x18>
 8003820:	2302      	movs	r3, #2
 8003822:	e05b      	b.n	80038dc <HAL_HRTIM_WaveformCountStart_IT+0xd0>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2202      	movs	r2, #2
 8003830:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable HRTIM interrupts (if required) */
  __HAL_HRTIM_ENABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f8d3 1390 	ldr.w	r1, [r3, #912]	; 0x390
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685a      	ldr	r2, [r3, #4]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	430a      	orrs	r2, r1
 8003846:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390

  /* Enable master timer related interrupts (if required) */
  if ((Timers & HRTIM_TIMERID_MASTER) != 0U)
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d009      	beq.n	8003868 <HAL_HRTIM_WaveformCountStart_IT+0x5c>
  {
    __HAL_HRTIM_MASTER_ENABLE_IT(hhrtim,
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68d9      	ldr	r1, [r3, #12]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	430a      	orrs	r2, r1
 8003866:	60da      	str	r2, [r3, #12]
                                 hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].InterruptRequests);
  }

  /* Enable timing unit related interrupts (if required) */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8003868:	2300      	movs	r3, #0
 800386a:	73fb      	strb	r3, [r7, #15]
 800386c:	e022      	b.n	80038b4 <HAL_HRTIM_WaveformCountStart_IT+0xa8>
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 800386e:	7bfb      	ldrb	r3, [r7, #15]
 8003870:	4a1d      	ldr	r2, [pc, #116]	; (80038e8 <HAL_HRTIM_WaveformCountStart_IT+0xdc>)
 8003872:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	4013      	ands	r3, r2
 800387a:	2b00      	cmp	r3, #0
 800387c:	d017      	beq.n	80038ae <HAL_HRTIM_WaveformCountStart_IT+0xa2>
    {
      __HAL_HRTIM_TIMER_ENABLE_IT(hhrtim,
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	7bfb      	ldrb	r3, [r7, #15]
 8003884:	01db      	lsls	r3, r3, #7
 8003886:	4413      	add	r3, r2
 8003888:	338c      	adds	r3, #140	; 0x8c
 800388a:	6818      	ldr	r0, [r3, #0]
 800388c:	7bfa      	ldrb	r2, [r7, #15]
 800388e:	6879      	ldr	r1, [r7, #4]
 8003890:	4613      	mov	r3, r2
 8003892:	00db      	lsls	r3, r3, #3
 8003894:	1a9b      	subs	r3, r3, r2
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	440b      	add	r3, r1
 800389a:	3320      	adds	r3, #32
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6819      	ldr	r1, [r3, #0]
 80038a2:	7bfb      	ldrb	r3, [r7, #15]
 80038a4:	4302      	orrs	r2, r0
 80038a6:	01db      	lsls	r3, r3, #7
 80038a8:	440b      	add	r3, r1
 80038aa:	338c      	adds	r3, #140	; 0x8c
 80038ac:	601a      	str	r2, [r3, #0]
       timer_idx++)
 80038ae:	7bfb      	ldrb	r3, [r7, #15]
 80038b0:	3301      	adds	r3, #1
 80038b2:	73fb      	strb	r3, [r7, #15]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 80038b4:	7bfb      	ldrb	r3, [r7, #15]
 80038b6:	2b04      	cmp	r3, #4
 80038b8:	d9d9      	bls.n	800386e <HAL_HRTIM_WaveformCountStart_IT+0x62>
                                  hhrtim->TimerParam[timer_idx].InterruptRequests);
    }
  }

  /* Enable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	6819      	ldr	r1, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	683a      	ldr	r2, [r7, #0]
 80038c6:	430a      	orrs	r2, r1
 80038c8:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;}
 80038da:	2300      	movs	r3, #0
 80038dc:	4618      	mov	r0, r3
 80038de:	3714      	adds	r7, #20
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr
 80038e8:	20000024 	.word	0x20000024

080038ec <HAL_HRTIM_WaveformCountStop_IT>:
  * @note The counter of a timer is stopped only if all timer outputs are disabled
  * @note All enabled timer related interrupts are disabled.
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStop_IT(HRTIM_HandleTypeDef * hhrtim,
                                                   uint32_t Timers)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b085      	sub	sp, #20
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
  /* ++ WA */
  __IO uint32_t delai = (uint32_t)(0x17FU);
 80038f6:	f240 137f 	movw	r3, #383	; 0x17f
 80038fa:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8003902:	2b01      	cmp	r3, #1
 8003904:	d101      	bne.n	800390a <HAL_HRTIM_WaveformCountStop_IT+0x1e>
 8003906:	2302      	movs	r3, #2
 8003908:	e065      	b.n	80039d6 <HAL_HRTIM_WaveformCountStop_IT+0xea>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2201      	movs	r2, #1
 800390e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2202      	movs	r2, #2
 8003916:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Disable HRTIM interrupts (if required) */
  __HAL_HRTIM_DISABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f8d3 1390 	ldr.w	r1, [r3, #912]	; 0x390
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	43da      	mvns	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	400a      	ands	r2, r1
 800392e:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390

  /* Disable master timer related interrupts (if required) */
  if ((Timers & HRTIM_TIMERID_MASTER) != 0U)
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d00a      	beq.n	8003952 <HAL_HRTIM_WaveformCountStop_IT+0x66>
  {
    /* Interrupts enable flag must be cleared one by one */
    __HAL_HRTIM_MASTER_DISABLE_IT(hhrtim, hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].InterruptRequests);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68d9      	ldr	r1, [r3, #12]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003948:	43da      	mvns	r2, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	400a      	ands	r2, r1
 8003950:	60da      	str	r2, [r3, #12]
  }

  /* Disable timing unit related interrupts (if required) */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8003952:	2300      	movs	r3, #0
 8003954:	73fb      	strb	r3, [r7, #15]
 8003956:	e023      	b.n	80039a0 <HAL_HRTIM_WaveformCountStop_IT+0xb4>
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 8003958:	7bfb      	ldrb	r3, [r7, #15]
 800395a:	4a22      	ldr	r2, [pc, #136]	; (80039e4 <HAL_HRTIM_WaveformCountStop_IT+0xf8>)
 800395c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	4013      	ands	r3, r2
 8003964:	2b00      	cmp	r3, #0
 8003966:	d018      	beq.n	800399a <HAL_HRTIM_WaveformCountStop_IT+0xae>
    {
      __HAL_HRTIM_TIMER_DISABLE_IT(hhrtim, timer_idx, hhrtim->TimerParam[timer_idx].InterruptRequests);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	7bfb      	ldrb	r3, [r7, #15]
 800396e:	01db      	lsls	r3, r3, #7
 8003970:	4413      	add	r3, r2
 8003972:	338c      	adds	r3, #140	; 0x8c
 8003974:	6818      	ldr	r0, [r3, #0]
 8003976:	7bfa      	ldrb	r2, [r7, #15]
 8003978:	6879      	ldr	r1, [r7, #4]
 800397a:	4613      	mov	r3, r2
 800397c:	00db      	lsls	r3, r3, #3
 800397e:	1a9b      	subs	r3, r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	440b      	add	r3, r1
 8003984:	3320      	adds	r3, #32
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	43da      	mvns	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6819      	ldr	r1, [r3, #0]
 800398e:	7bfb      	ldrb	r3, [r7, #15]
 8003990:	4002      	ands	r2, r0
 8003992:	01db      	lsls	r3, r3, #7
 8003994:	440b      	add	r3, r1
 8003996:	338c      	adds	r3, #140	; 0x8c
 8003998:	601a      	str	r2, [r3, #0]
       timer_idx++)
 800399a:	7bfb      	ldrb	r3, [r7, #15]
 800399c:	3301      	adds	r3, #1
 800399e:	73fb      	strb	r3, [r7, #15]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 80039a0:	7bfb      	ldrb	r3, [r7, #15]
 80039a2:	2b04      	cmp	r3, #4
 80039a4:	d9d8      	bls.n	8003958 <HAL_HRTIM_WaveformCountStop_IT+0x6c>
    }
  }

  /* ++ WA */
  do { delai--; } while (delai != 0U);
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	3b01      	subs	r3, #1
 80039aa:	60bb      	str	r3, [r7, #8]
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1f9      	bne.n	80039a6 <HAL_HRTIM_WaveformCountStop_IT+0xba>
  /* -- WA */

  /* Disable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR &= ~(Timers);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	6819      	ldr	r1, [r3, #0]
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	43da      	mvns	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	400a      	ands	r2, r1
 80039c2:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3714      	adds	r7, #20
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	20000024 	.word	0x20000024

080039e8 <HAL_HRTIM_IRQHandler>:
  *                   This parameter can be any value of HRTIM_Timer_Index
  * @retval None
  */
void HAL_HRTIM_IRQHandler(HRTIM_HandleTypeDef * hhrtim,
                          uint32_t TimerIdx)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  /* HRTIM interrupts handling */
  if (TimerIdx == HRTIM_TIMERINDEX_COMMON)
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	2bff      	cmp	r3, #255	; 0xff
 80039f6:	d103      	bne.n	8003a00 <HAL_HRTIM_IRQHandler+0x18>
  {
    HRTIM_HRTIM_ISR(hhrtim);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f000 fc4f 	bl	800429c <HRTIM_HRTIM_ISR>
  {
    /* Timing unit related interrupts handling */
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
  }

}
 80039fe:	e00a      	b.n	8003a16 <HAL_HRTIM_IRQHandler+0x2e>
  else if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	2b05      	cmp	r3, #5
 8003a04:	d103      	bne.n	8003a0e <HAL_HRTIM_IRQHandler+0x26>
    HRTIM_Master_ISR(hhrtim);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 fcc6 	bl	8004398 <HRTIM_Master_ISR>
}
 8003a0c:	e003      	b.n	8003a16 <HAL_HRTIM_IRQHandler+0x2e>
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
 8003a0e:	6839      	ldr	r1, [r7, #0]
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f000 fd6b 	bl	80044ec <HRTIM_Timer_ISR>
}
 8003a16:	bf00      	nop
 8003a18:	3708      	adds	r7, #8
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <HAL_HRTIM_Fault1Callback>:
  * @brief  Callback function invoked when a fault 1 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle  * @retval None
  * @retval None
  */
__weak void HAL_HRTIM_Fault1Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	b083      	sub	sp, #12
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault1Callback could be implemented in the user file
   */
}
 8003a26:	bf00      	nop
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr

08003a32 <HAL_HRTIM_Fault2Callback>:
  * @brief  Callback function invoked when a fault 2 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault2Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8003a32:	b480      	push	{r7}
 8003a34:	b083      	sub	sp, #12
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault2Callback could be implemented in the user file
   */
}
 8003a3a:	bf00      	nop
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr

08003a46 <HAL_HRTIM_Fault3Callback>:
  * @brief  Callback function invoked when a fault 3 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault3Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b083      	sub	sp, #12
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault3Callback could be implemented in the user file
   */
}
 8003a4e:	bf00      	nop
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr

08003a5a <HAL_HRTIM_Fault4Callback>:
  * @brief  Callback function invoked when a fault 4 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault4Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b083      	sub	sp, #12
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault4Callback could be implemented in the user file
   */
}
 8003a62:	bf00      	nop
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr

08003a6e <HAL_HRTIM_Fault5Callback>:
  * @brief  Callback function invoked when a fault 5 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault5Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8003a6e:	b480      	push	{r7}
 8003a70:	b083      	sub	sp, #12
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault5Callback could be implemented in the user file
   */
}
 8003a76:	bf00      	nop
 8003a78:	370c      	adds	r7, #12
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr

08003a82 <HAL_HRTIM_SystemFaultCallback>:
  * @brief  Callback function invoked when a system fault interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SystemFaultCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8003a82:	b480      	push	{r7}
 8003a84:	b083      	sub	sp, #12
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SystemFaultCallback could be implemented in the user file
   */
}
 8003a8a:	bf00      	nop
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr

08003a96 <HAL_HRTIM_BurstModePeriodCallback>:
  * @brief  Callback function invoked when the end of the burst mode period is reached
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_BurstModePeriodCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b083      	sub	sp, #12
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_BurstModeCallback could be implemented in the user file
   */
}
 8003a9e:	bf00      	nop
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr

08003aaa <HAL_HRTIM_SynchronizationEventCallback>:
  * @brief  Callback function invoked when a synchronization input event is received
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SynchronizationEventCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b083      	sub	sp, #12
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SynchronizationEventCallback could be implemented in the user file
   */
}
 8003ab2:	bf00      	nop
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <HAL_HRTIM_RegistersUpdateCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_RegistersUpdateCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b083      	sub	sp, #12
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
 8003ac6:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RegistersUpdateCallback could be implemented in the user file
   */
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <HAL_HRTIM_Compare1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare1EventCallback could be implemented in the user file
   */
}
 8003ade:	bf00      	nop
 8003ae0:	370c      	adds	r7, #12
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr

08003aea <HAL_HRTIM_Compare4EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare4EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8003aea:	b480      	push	{r7}
 8003aec:	b083      	sub	sp, #12
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
 8003af2:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare4EventCallback could be implemented in the user file
   */
}
 8003af4:	bf00      	nop
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <HAL_HRTIM_Capture1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Capture1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture1EventCallback could be implemented in the user file
   */
}
 8003b0a:	bf00      	nop
 8003b0c:	370c      	adds	r7, #12
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr

08003b16 <HAL_HRTIM_Capture2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Capture2EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8003b16:	b480      	push	{r7}
 8003b18:	b083      	sub	sp, #12
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
 8003b1e:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture2EventCallback could be implemented in the user file
   */
}
 8003b20:	bf00      	nop
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <HAL_HRTIM_DelayedProtectionCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_DelayedProtectionCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_DelayedProtectionCallback could be implemented in the user file
   */
}
 8003b36:	bf00      	nop
 8003b38:	370c      	adds	r7, #12
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr

08003b42 <HAL_HRTIM_CounterResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_CounterResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8003b42:	b480      	push	{r7}
 8003b44:	b083      	sub	sp, #12
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
 8003b4a:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_CounterResetCallback could be implemented in the user file
   */
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <HAL_HRTIM_Output1SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output1SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1SetCallback could be implemented in the user file
   */
}
 8003b62:	bf00      	nop
 8003b64:	370c      	adds	r7, #12
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr

08003b6e <HAL_HRTIM_Output1ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output1ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8003b6e:	b480      	push	{r7}
 8003b70:	b083      	sub	sp, #12
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
 8003b76:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1ResetCallback could be implemented in the user file
   */
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <HAL_HRTIM_Output2SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output2SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2SetCallback could be implemented in the user file
   */
}
 8003b8e:	bf00      	nop
 8003b90:	370c      	adds	r7, #12
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr

08003b9a <HAL_HRTIM_Output2ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output2ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8003b9a:	b480      	push	{r7}
 8003b9c:	b083      	sub	sp, #12
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
 8003ba2:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2ResetCallback could be implemented in the user file
   */
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f023 0307 	bic.w	r3, r3, #7
 8003bc8:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f023 0318 	bic.w	r3, r3, #24
 8003bda:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	683a      	ldr	r2, [r7, #0]
 8003bf4:	6812      	ldr	r2, [r2, #0]
 8003bf6:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	683a      	ldr	r2, [r7, #0]
 8003bfe:	6852      	ldr	r2, [r2, #4]
 8003c00:	619a      	str	r2, [r3, #24]
}
 8003c02:	bf00      	nop
 8003c04:	3714      	adds	r7, #20
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr

08003c0e <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8003c0e:	b480      	push	{r7}
 8003c10:	b087      	sub	sp, #28
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	60f8      	str	r0, [r7, #12]
 8003c16:	60b9      	str	r1, [r7, #8]
 8003c18:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	3301      	adds	r3, #1
 8003c22:	01db      	lsls	r3, r3, #7
 8003c24:	4413      	add	r3, r2
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	f023 0307 	bic.w	r3, r3, #7
 8003c30:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	697a      	ldr	r2, [r7, #20]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	f023 0318 	bic.w	r3, r3, #24
 8003c42:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	697a      	ldr	r2, [r7, #20]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	3301      	adds	r3, #1
 8003c56:	01db      	lsls	r3, r3, #7
 8003c58:	4413      	add	r3, r2
 8003c5a:	697a      	ldr	r2, [r7, #20]
 8003c5c:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6819      	ldr	r1, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	01db      	lsls	r3, r3, #7
 8003c6a:	440b      	add	r3, r1
 8003c6c:	3394      	adds	r3, #148	; 0x94
 8003c6e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6819      	ldr	r1, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685a      	ldr	r2, [r3, #4]
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	01db      	lsls	r3, r3, #7
 8003c7c:	440b      	add	r3, r1
 8003c7e:	3398      	adds	r3, #152	; 0x98
 8003c80:	601a      	str	r2, [r3, #0]
}
 8003c82:	bf00      	nop
 8003c84:	371c      	adds	r7, #28
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr

08003c8e <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8003c8e:	b480      	push	{r7}
 8003c90:	b085      	sub	sp, #20
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
 8003c96:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8003ca8:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f023 0320 	bic.w	r3, r3, #32
 8003cb0:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cc2:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	699b      	ldr	r3, [r3, #24]
 8003cc8:	68fa      	ldr	r2, [r7, #12]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003cd4:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	69db      	ldr	r3, [r3, #28]
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003ce6:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	6a1b      	ldr	r3, [r3, #32]
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8003cf8:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003d0a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003d1e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d30:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d36:	68ba      	ldr	r2, [r7, #8]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68ba      	ldr	r2, [r7, #8]
 8003d4a:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8003d4e:	bf00      	nop
 8003d50:	3714      	adds	r7, #20
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
	...

08003d5c <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b08b      	sub	sp, #44	; 0x2c
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	3301      	adds	r3, #1
 8003d70:	01db      	lsls	r3, r3, #7
 8003d72:	4413      	add	r3, r2
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	6811      	ldr	r1, [r2, #0]
 8003d7a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	3301      	adds	r3, #1
 8003d82:	01db      	lsls	r3, r3, #7
 8003d84:	440b      	add	r3, r1
 8003d86:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	3301      	adds	r3, #1
 8003d90:	01db      	lsls	r3, r3, #7
 8003d92:	4413      	add	r3, r2
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	01db      	lsls	r3, r3, #7
 8003da0:	4413      	add	r3, r2
 8003da2:	33e8      	adds	r3, #232	; 0xe8
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	01db      	lsls	r3, r3, #7
 8003db0:	4413      	add	r3, r2
 8003db2:	33e4      	adds	r3, #228	; 0xe4
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8003dc0:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8003dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc4:	f023 0320 	bic.w	r3, r3, #32
 8003dc8:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003dda:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003de2:	4313      	orrs	r3, r2
 8003de4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8003de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003dec:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	69db      	ldr	r3, [r3, #28]
 8003df2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003df4:	4313      	orrs	r3, r2
 8003df6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8003df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003dfe:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a1b      	ldr	r3, [r3, #32]
 8003e04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e06:	4313      	orrs	r3, r2
 8003e08:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8003e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0c:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8003e10:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8003e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003e22:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e30:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003e34:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e3e:	d103      	bne.n	8003e48 <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8003e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e46:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8003e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e4e:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e56:	4313      	orrs	r3, r2
 8003e58:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e60:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8003e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6e:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 8003e72:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	f023 031f 	bic.w	r3, r3, #31
 8003e84:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e8a:	f003 031f 	and.w	r3, r3, #31
 8003e8e:	69ba      	ldr	r2, [r7, #24]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003e9a:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ea0:	69ba      	ldr	r2, [r7, #24]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d108      	bne.n	8003ec0 <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8003eae:	6a3b      	ldr	r3, [r7, #32]
 8003eb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003eb4:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eba:	6a3a      	ldr	r2, [r7, #32]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ec4:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8003ec8:	d004      	beq.n	8003ed4 <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ece:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8003ed2:	d103      	bne.n	8003edc <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ed8:	2b40      	cmp	r3, #64	; 0x40
 8003eda:	d108      	bne.n	8003eee <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8003edc:	6a3b      	ldr	r3, [r7, #32]
 8003ede:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 8003ee2:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee8:	6a3a      	ldr	r2, [r7, #32]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ef2:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	2b04      	cmp	r3, #4
 8003ef8:	d843      	bhi.n	8003f82 <HRTIM_TimingUnitWaveform_Config+0x226>
 8003efa:	a201      	add	r2, pc, #4	; (adr r2, 8003f00 <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 8003efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f00:	08003f15 	.word	0x08003f15
 8003f04:	08003f2b 	.word	0x08003f2b
 8003f08:	08003f41 	.word	0x08003f41
 8003f0c:	08003f57 	.word	0x08003f57
 8003f10:	08003f6d 	.word	0x08003f6d
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003f1a:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f20:	005b      	lsls	r3, r3, #1
 8003f22:	69fa      	ldr	r2, [r7, #28]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	61fb      	str	r3, [r7, #28]
      break;
 8003f28:	e02c      	b.n	8003f84 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f30:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	69fa      	ldr	r2, [r7, #28]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	61fb      	str	r3, [r7, #28]
      break;
 8003f3e:	e021      	b.n	8003f84 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003f46:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4c:	00db      	lsls	r3, r3, #3
 8003f4e:	69fa      	ldr	r2, [r7, #28]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	61fb      	str	r3, [r7, #28]
      break;
 8003f54:	e016      	b.n	8003f84 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003f5c:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f62:	011b      	lsls	r3, r3, #4
 8003f64:	69fa      	ldr	r2, [r7, #28]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	61fb      	str	r3, [r7, #28]
      break;
 8003f6a:	e00b      	b.n	8003f84 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f72:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f78:	015b      	lsls	r3, r3, #5
 8003f7a:	69fa      	ldr	r2, [r7, #28]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	61fb      	str	r3, [r7, #28]
      break;
 8003f80:	e000      	b.n	8003f84 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  default:
    break;
 8003f82:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	01db      	lsls	r3, r3, #7
 8003f8e:	4413      	add	r3, r2
 8003f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f92:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	01db      	lsls	r3, r3, #7
 8003f9c:	4413      	add	r3, r2
 8003f9e:	33e8      	adds	r3, #232	; 0xe8
 8003fa0:	69ba      	ldr	r2, [r7, #24]
 8003fa2:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	01db      	lsls	r3, r3, #7
 8003fac:	4413      	add	r3, r2
 8003fae:	33e4      	adds	r3, #228	; 0xe4
 8003fb0:	6a3a      	ldr	r2, [r7, #32]
 8003fb2:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	01db      	lsls	r3, r3, #7
 8003fbc:	4413      	add	r3, r2
 8003fbe:	33d4      	adds	r3, #212	; 0xd4
 8003fc0:	697a      	ldr	r2, [r7, #20]
 8003fc2:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	69fa      	ldr	r2, [r7, #28]
 8003fca:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8003fce:	bf00      	nop
 8003fd0:	372c      	adds	r7, #44	; 0x2c
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop

08003fdc <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b089      	sub	sp, #36	; 0x24
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
 8003fe8:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8003fea:	2300      	movs	r3, #0
 8003fec:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	01db      	lsls	r3, r3, #7
 8003ff6:	4413      	add	r3, r2
 8003ff8:	33e4      	adds	r3, #228	; 0xe4
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	01db      	lsls	r3, r3, #7
 8004006:	4413      	add	r3, r2
 8004008:	33b8      	adds	r3, #184	; 0xb8
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	617b      	str	r3, [r7, #20]

  switch (Output)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004014:	d076      	beq.n	8004104 <HRTIM_OutputConfig+0x128>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800401c:	f200 8087 	bhi.w	800412e <HRTIM_OutputConfig+0x152>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004026:	d05a      	beq.n	80040de <HRTIM_OutputConfig+0x102>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800402e:	d87e      	bhi.n	800412e <HRTIM_OutputConfig+0x152>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2b80      	cmp	r3, #128	; 0x80
 8004034:	d066      	beq.n	8004104 <HRTIM_OutputConfig+0x128>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2b80      	cmp	r3, #128	; 0x80
 800403a:	d878      	bhi.n	800412e <HRTIM_OutputConfig+0x152>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2b20      	cmp	r3, #32
 8004040:	d84a      	bhi.n	80040d8 <HRTIM_OutputConfig+0xfc>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d072      	beq.n	800412e <HRTIM_OutputConfig+0x152>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	3b01      	subs	r3, #1
 800404c:	2b1f      	cmp	r3, #31
 800404e:	d86e      	bhi.n	800412e <HRTIM_OutputConfig+0x152>
 8004050:	a201      	add	r2, pc, #4	; (adr r2, 8004058 <HRTIM_OutputConfig+0x7c>)
 8004052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004056:	bf00      	nop
 8004058:	080040df 	.word	0x080040df
 800405c:	08004105 	.word	0x08004105
 8004060:	0800412f 	.word	0x0800412f
 8004064:	080040df 	.word	0x080040df
 8004068:	0800412f 	.word	0x0800412f
 800406c:	0800412f 	.word	0x0800412f
 8004070:	0800412f 	.word	0x0800412f
 8004074:	08004105 	.word	0x08004105
 8004078:	0800412f 	.word	0x0800412f
 800407c:	0800412f 	.word	0x0800412f
 8004080:	0800412f 	.word	0x0800412f
 8004084:	0800412f 	.word	0x0800412f
 8004088:	0800412f 	.word	0x0800412f
 800408c:	0800412f 	.word	0x0800412f
 8004090:	0800412f 	.word	0x0800412f
 8004094:	080040df 	.word	0x080040df
 8004098:	0800412f 	.word	0x0800412f
 800409c:	0800412f 	.word	0x0800412f
 80040a0:	0800412f 	.word	0x0800412f
 80040a4:	0800412f 	.word	0x0800412f
 80040a8:	0800412f 	.word	0x0800412f
 80040ac:	0800412f 	.word	0x0800412f
 80040b0:	0800412f 	.word	0x0800412f
 80040b4:	0800412f 	.word	0x0800412f
 80040b8:	0800412f 	.word	0x0800412f
 80040bc:	0800412f 	.word	0x0800412f
 80040c0:	0800412f 	.word	0x0800412f
 80040c4:	0800412f 	.word	0x0800412f
 80040c8:	0800412f 	.word	0x0800412f
 80040cc:	0800412f 	.word	0x0800412f
 80040d0:	0800412f 	.word	0x0800412f
 80040d4:	08004105 	.word	0x08004105
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2b40      	cmp	r3, #64	; 0x40
 80040dc:	d127      	bne.n	800412e <HRTIM_OutputConfig+0x152>
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6819      	ldr	r1, [r3, #0]
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	685a      	ldr	r2, [r3, #4]
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	01db      	lsls	r3, r3, #7
 80040ea:	440b      	add	r3, r1
 80040ec:	33bc      	adds	r3, #188	; 0xbc
 80040ee:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6819      	ldr	r1, [r3, #0]
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	689a      	ldr	r2, [r3, #8]
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	01db      	lsls	r3, r3, #7
 80040fc:	440b      	add	r3, r1
 80040fe:	33c0      	adds	r3, #192	; 0xc0
 8004100:	601a      	str	r2, [r3, #0]
      break;
 8004102:	e015      	b.n	8004130 <HRTIM_OutputConfig+0x154>
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6819      	ldr	r1, [r3, #0]
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	685a      	ldr	r2, [r3, #4]
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	01db      	lsls	r3, r3, #7
 8004110:	440b      	add	r3, r1
 8004112:	33c4      	adds	r3, #196	; 0xc4
 8004114:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6819      	ldr	r1, [r3, #0]
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	689a      	ldr	r2, [r3, #8]
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	01db      	lsls	r3, r3, #7
 8004122:	440b      	add	r3, r1
 8004124:	33c8      	adds	r3, #200	; 0xc8
 8004126:	601a      	str	r2, [r3, #0]
      shift = 16U;
 8004128:	2310      	movs	r3, #16
 800412a:	61bb      	str	r3, [r7, #24]
      break;
 800412c:	e000      	b.n	8004130 <HRTIM_OutputConfig+0x154>
    }

  default:
    break;
 800412e:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 8004130:	22fe      	movs	r2, #254	; 0xfe
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8004138:	43db      	mvns	r3, r3
 800413a:	69fa      	ldr	r2, [r7, #28]
 800413c:	4013      	ands	r3, r2
 800413e:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	fa02 f303 	lsl.w	r3, r2, r3
 800414a:	69fa      	ldr	r2, [r7, #28]
 800414c:	4313      	orrs	r3, r2
 800414e:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	68da      	ldr	r2, [r3, #12]
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	fa02 f303 	lsl.w	r3, r2, r3
 800415a:	69fa      	ldr	r2, [r7, #28]
 800415c:	4313      	orrs	r3, r2
 800415e:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	691a      	ldr	r2, [r3, #16]
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	fa02 f303 	lsl.w	r3, r2, r3
 800416a:	69fa      	ldr	r2, [r7, #28]
 800416c:	4313      	orrs	r3, r2
 800416e:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	695a      	ldr	r2, [r3, #20]
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	fa02 f303 	lsl.w	r3, r2, r3
 800417a:	69fa      	ldr	r2, [r7, #28]
 800417c:	4313      	orrs	r3, r2
 800417e:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	699a      	ldr	r2, [r3, #24]
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	fa02 f303 	lsl.w	r3, r2, r3
 800418a:	69fa      	ldr	r2, [r7, #28]
 800418c:	4313      	orrs	r3, r2
 800418e:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	2b08      	cmp	r3, #8
 8004196:	d111      	bne.n	80041bc <HRTIM_OutputConfig+0x1e0>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d10c      	bne.n	80041bc <HRTIM_OutputConfig+0x1e0>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d107      	bne.n	80041bc <HRTIM_OutputConfig+0x1e0>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	69da      	ldr	r2, [r3, #28]
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	fa02 f303 	lsl.w	r3, r2, r3
 80041b6:	69fa      	ldr	r2, [r7, #28]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	01db      	lsls	r3, r3, #7
 80041c4:	4413      	add	r3, r2
 80041c6:	33e4      	adds	r3, #228	; 0xe4
 80041c8:	69fa      	ldr	r2, [r7, #28]
 80041ca:	601a      	str	r2, [r3, #0]
}
 80041cc:	bf00      	nop
 80041ce:	3724      	adds	r7, #36	; 0x24
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	2b05      	cmp	r3, #5
 80041e6:	d851      	bhi.n	800428c <HRTIM_ForceRegistersUpdate+0xb4>
 80041e8:	a201      	add	r2, pc, #4	; (adr r2, 80041f0 <HRTIM_ForceRegistersUpdate+0x18>)
 80041ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ee:	bf00      	nop
 80041f0:	0800421f 	.word	0x0800421f
 80041f4:	08004235 	.word	0x08004235
 80041f8:	0800424b 	.word	0x0800424b
 80041fc:	08004261 	.word	0x08004261
 8004200:	08004277 	.word	0x08004277
 8004204:	08004209 	.word	0x08004209
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f042 0201 	orr.w	r2, r2, #1
 8004218:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800421c:	e037      	b.n	800428e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f042 0202 	orr.w	r2, r2, #2
 800422e:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8004232:	e02c      	b.n	800428e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f042 0204 	orr.w	r2, r2, #4
 8004244:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8004248:	e021      	b.n	800428e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f042 0208 	orr.w	r2, r2, #8
 800425a:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800425e:	e016      	b.n	800428e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f042 0210 	orr.w	r2, r2, #16
 8004270:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8004274:	e00b      	b.n	800428e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f042 0220 	orr.w	r2, r2, #32
 8004286:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800428a:	e000      	b.n	800428e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  default:
    break;
 800428c:	bf00      	nop
  }
}
 800428e:	bf00      	nop
 8004290:	370c      	adds	r7, #12
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop

0800429c <HRTIM_HRTIM_ISR>:
  * @brief  HRTIM interrupts service routine
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
static void HRTIM_HRTIM_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 80042ac:	60fb      	str	r3, [r7, #12]
  uint32_t ierits   = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 80042b6:	60bb      	str	r3, [r7, #8]

  /* Fault 1 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT1) != (uint32_t)RESET)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00c      	beq.n	80042dc <HRTIM_HRTIM_ISR+0x40>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT1) != (uint32_t)RESET)
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	f003 0301 	and.w	r3, r3, #1
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d007      	beq.n	80042dc <HRTIM_HRTIM_ISR+0x40>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT1);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2201      	movs	r2, #1
 80042d2:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault1Callback(hhrtim);
#else
      HAL_HRTIM_Fault1Callback(hhrtim);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f7ff fba1 	bl	8003a1e <HAL_HRTIM_Fault1Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 2 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT2) != (uint32_t)RESET)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00c      	beq.n	8004300 <HRTIM_HRTIM_ISR+0x64>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT2) != (uint32_t)RESET)
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	f003 0302 	and.w	r3, r3, #2
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d007      	beq.n	8004300 <HRTIM_HRTIM_ISR+0x64>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT2);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2202      	movs	r2, #2
 80042f6:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault2Callback(hhrtim);
#else
      HAL_HRTIM_Fault2Callback(hhrtim);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f7ff fb99 	bl	8003a32 <HAL_HRTIM_Fault2Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 3 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT3) != (uint32_t)RESET)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f003 0304 	and.w	r3, r3, #4
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00c      	beq.n	8004324 <HRTIM_HRTIM_ISR+0x88>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT3) != (uint32_t)RESET)
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	f003 0304 	and.w	r3, r3, #4
 8004310:	2b00      	cmp	r3, #0
 8004312:	d007      	beq.n	8004324 <HRTIM_HRTIM_ISR+0x88>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT3);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2204      	movs	r2, #4
 800431a:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault3Callback(hhrtim);
#else
      HAL_HRTIM_Fault3Callback(hhrtim);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f7ff fb91 	bl	8003a46 <HAL_HRTIM_Fault3Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 4 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT4) != (uint32_t)RESET)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f003 0308 	and.w	r3, r3, #8
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00c      	beq.n	8004348 <HRTIM_HRTIM_ISR+0xac>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT4) != (uint32_t)RESET)
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	f003 0308 	and.w	r3, r3, #8
 8004334:	2b00      	cmp	r3, #0
 8004336:	d007      	beq.n	8004348 <HRTIM_HRTIM_ISR+0xac>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT4);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2208      	movs	r2, #8
 800433e:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault4Callback(hhrtim);
#else
      HAL_HRTIM_Fault4Callback(hhrtim);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f7ff fb89 	bl	8003a5a <HAL_HRTIM_Fault4Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 5 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT5) != (uint32_t)RESET)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f003 0310 	and.w	r3, r3, #16
 800434e:	2b00      	cmp	r3, #0
 8004350:	d00c      	beq.n	800436c <HRTIM_HRTIM_ISR+0xd0>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT5) != (uint32_t)RESET)
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	f003 0310 	and.w	r3, r3, #16
 8004358:	2b00      	cmp	r3, #0
 800435a:	d007      	beq.n	800436c <HRTIM_HRTIM_ISR+0xd0>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT5);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2210      	movs	r2, #16
 8004362:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 5 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault5Callback(hhrtim);
#else
      HAL_HRTIM_Fault5Callback(hhrtim);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f7ff fb81 	bl	8003a6e <HAL_HRTIM_Fault5Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* System fault event */
  if((uint32_t)(isrflags & HRTIM_FLAG_SYSFLT) != (uint32_t)RESET)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f003 0320 	and.w	r3, r3, #32
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00c      	beq.n	8004390 <HRTIM_HRTIM_ISR+0xf4>
  {
    if((uint32_t)(ierits & HRTIM_IT_SYSFLT) != (uint32_t)RESET)
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	f003 0320 	and.w	r3, r3, #32
 800437c:	2b00      	cmp	r3, #0
 800437e:	d007      	beq.n	8004390 <HRTIM_HRTIM_ISR+0xf4>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_SYSFLT);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2220      	movs	r2, #32
 8004386:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SystemFaultCallback(hhrtim);
#else
      HAL_HRTIM_SystemFaultCallback(hhrtim);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f7ff fb79 	bl	8003a82 <HAL_HRTIM_SystemFaultCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8004390:	bf00      	nop
 8004392:	3710      	adds	r7, #16
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <HRTIM_Master_ISR>:
* @brief  Master timer interrupts service routine
* @param  hhrtim pointer to HAL HRTIM handle
* @retval None
*/
static void HRTIM_Master_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b086      	sub	sp, #24
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 80043a8:	617b      	str	r3, [r7, #20]
  uint32_t ierits    = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 80043b2:	613b      	str	r3, [r7, #16]
  uint32_t misrflags = READ_REG(hhrtim->Instance->sMasterRegs.MISR);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	60fb      	str	r3, [r7, #12]
  uint32_t mdierits  = READ_REG(hhrtim->Instance->sMasterRegs.MDIER);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	60bb      	str	r3, [r7, #8]

  /* Burst mode period event */
  if((uint32_t)(isrflags & HRTIM_FLAG_BMPER) != (uint32_t)RESET)
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00d      	beq.n	80043ea <HRTIM_Master_ISR+0x52>
  {
    if((uint32_t)(ierits & HRTIM_IT_BMPER) != (uint32_t)RESET)
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d008      	beq.n	80043ea <HRTIM_Master_ISR+0x52>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_BMPER);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80043e0:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Burst mode period event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->BurstModePeriodCallback(hhrtim);
#else
      HAL_HRTIM_BurstModePeriodCallback(hhrtim);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f7ff fb56 	bl	8003a96 <HAL_HRTIM_BurstModePeriodCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 1 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP1) != (uint32_t)RESET)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f003 0301 	and.w	r3, r3, #1
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d00c      	beq.n	800440e <HRTIM_Master_ISR+0x76>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP1) != (uint32_t)RESET)
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d007      	beq.n	800440e <HRTIM_Master_ISR+0x76>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP1);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2201      	movs	r2, #1
 8004404:	609a      	str	r2, [r3, #8]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8004406:	2105      	movs	r1, #5
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f7ff fb63 	bl	8003ad4 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 2 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP2) != (uint32_t)RESET)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f003 0302 	and.w	r3, r3, #2
 8004414:	2b00      	cmp	r3, #0
 8004416:	d00c      	beq.n	8004432 <HRTIM_Master_ISR+0x9a>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP2) != (uint32_t)RESET)
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	f003 0302 	and.w	r3, r3, #2
 800441e:	2b00      	cmp	r3, #0
 8004420:	d007      	beq.n	8004432 <HRTIM_Master_ISR+0x9a>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP2);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2202      	movs	r2, #2
 8004428:	609a      	str	r2, [r3, #8]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800442a:	2105      	movs	r1, #5
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f7fc fe4d 	bl	80010cc <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 3 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP3) != (uint32_t)RESET)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f003 0304 	and.w	r3, r3, #4
 8004438:	2b00      	cmp	r3, #0
 800443a:	d00c      	beq.n	8004456 <HRTIM_Master_ISR+0xbe>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP3) != (uint32_t)RESET)
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	f003 0304 	and.w	r3, r3, #4
 8004442:	2b00      	cmp	r3, #0
 8004444:	d007      	beq.n	8004456 <HRTIM_Master_ISR+0xbe>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP3);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2204      	movs	r2, #4
 800444c:	609a      	str	r2, [r3, #8]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800444e:	2105      	movs	r1, #5
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f7fc fe69 	bl	8001128 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 4 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP4) != (uint32_t)RESET)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f003 0308 	and.w	r3, r3, #8
 800445c:	2b00      	cmp	r3, #0
 800445e:	d00c      	beq.n	800447a <HRTIM_Master_ISR+0xe2>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP4) != (uint32_t)RESET)
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	f003 0308 	and.w	r3, r3, #8
 8004466:	2b00      	cmp	r3, #0
 8004468:	d007      	beq.n	800447a <HRTIM_Master_ISR+0xe2>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP4);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2208      	movs	r2, #8
 8004470:	609a      	str	r2, [r3, #8]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8004472:	2105      	movs	r1, #5
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f7ff fb38 	bl	8003aea <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer repetition event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MREP) != (uint32_t)RESET)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f003 0310 	and.w	r3, r3, #16
 8004480:	2b00      	cmp	r3, #0
 8004482:	d00c      	beq.n	800449e <HRTIM_Master_ISR+0x106>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MREP) != (uint32_t)RESET)
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	f003 0310 	and.w	r3, r3, #16
 800448a:	2b00      	cmp	r3, #0
 800448c:	d007      	beq.n	800449e <HRTIM_Master_ISR+0x106>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MREP);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2210      	movs	r2, #16
 8004494:	609a      	str	r2, [r3, #8]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8004496:	2105      	movs	r1, #5
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f7fc fe9d 	bl	80011d8 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Synchronization input event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_SYNC) != (uint32_t)RESET)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f003 0320 	and.w	r3, r3, #32
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d00b      	beq.n	80044c0 <HRTIM_Master_ISR+0x128>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_SYNC) != (uint32_t)RESET)
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	f003 0320 	and.w	r3, r3, #32
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d006      	beq.n	80044c0 <HRTIM_Master_ISR+0x128>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_SYNC);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2220      	movs	r2, #32
 80044b8:	609a      	str	r2, [r3, #8]

      /* Invoke synchronization event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SynchronizationEventCallback(hhrtim);
#else
      HAL_HRTIM_SynchronizationEventCallback(hhrtim);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f7ff faf5 	bl	8003aaa <HAL_HRTIM_SynchronizationEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer registers update event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MUPD) != (uint32_t)RESET)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00c      	beq.n	80044e4 <HRTIM_Master_ISR+0x14c>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MUPD) != (uint32_t)RESET)
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d007      	beq.n	80044e4 <HRTIM_Master_ISR+0x14c>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MUPD);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2240      	movs	r2, #64	; 0x40
 80044da:	609a      	str	r2, [r3, #8]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80044dc:	2105      	movs	r1, #5
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f7ff faed 	bl	8003abe <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 80044e4:	bf00      	nop
 80044e6:	3718      	adds	r7, #24
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <HRTIM_Timer_ISR>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
*/
static void HRTIM_Timer_ISR(HRTIM_HandleTypeDef * hhrtim,
                     uint32_t TimerIdx)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  uint32_t tisrflags = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxISR);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	3301      	adds	r3, #1
 80044fe:	01db      	lsls	r3, r3, #7
 8004500:	4413      	add	r3, r2
 8004502:	3304      	adds	r3, #4
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	60fb      	str	r3, [r7, #12]
  uint32_t tdierits  = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxDIER);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	01db      	lsls	r3, r3, #7
 8004510:	4413      	add	r3, r2
 8004512:	338c      	adds	r3, #140	; 0x8c
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	60bb      	str	r3, [r7, #8]

  /* Timer compare 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP1) != (uint32_t)RESET)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	2b00      	cmp	r3, #0
 8004520:	d010      	beq.n	8004544 <HRTIM_Timer_ISR+0x58>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP1) != (uint32_t)RESET)
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	f003 0301 	and.w	r3, r3, #1
 8004528:	2b00      	cmp	r3, #0
 800452a:	d00b      	beq.n	8004544 <HRTIM_Timer_ISR+0x58>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP1);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	01db      	lsls	r3, r3, #7
 8004534:	4413      	add	r3, r2
 8004536:	3388      	adds	r3, #136	; 0x88
 8004538:	2201      	movs	r2, #1
 800453a:	601a      	str	r2, [r3, #0]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, TimerIdx);
 800453c:	6839      	ldr	r1, [r7, #0]
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f7ff fac8 	bl	8003ad4 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP2) != (uint32_t)RESET)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	2b00      	cmp	r3, #0
 800454c:	d010      	beq.n	8004570 <HRTIM_Timer_ISR+0x84>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP2) != (uint32_t)RESET)
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00b      	beq.n	8004570 <HRTIM_Timer_ISR+0x84>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP2);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	01db      	lsls	r3, r3, #7
 8004560:	4413      	add	r3, r2
 8004562:	3388      	adds	r3, #136	; 0x88
 8004564:	2202      	movs	r2, #2
 8004566:	601a      	str	r2, [r3, #0]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, TimerIdx);
 8004568:	6839      	ldr	r1, [r7, #0]
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f7fc fdae 	bl	80010cc <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 3 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP3) != (uint32_t)RESET)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f003 0304 	and.w	r3, r3, #4
 8004576:	2b00      	cmp	r3, #0
 8004578:	d010      	beq.n	800459c <HRTIM_Timer_ISR+0xb0>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP3) != (uint32_t)RESET)
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	f003 0304 	and.w	r3, r3, #4
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00b      	beq.n	800459c <HRTIM_Timer_ISR+0xb0>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP3);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	01db      	lsls	r3, r3, #7
 800458c:	4413      	add	r3, r2
 800458e:	3388      	adds	r3, #136	; 0x88
 8004590:	2204      	movs	r2, #4
 8004592:	601a      	str	r2, [r3, #0]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, TimerIdx);
 8004594:	6839      	ldr	r1, [r7, #0]
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f7fc fdc6 	bl	8001128 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 4 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP4) != (uint32_t)RESET)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f003 0308 	and.w	r3, r3, #8
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d010      	beq.n	80045c8 <HRTIM_Timer_ISR+0xdc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP4) != (uint32_t)RESET)
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	f003 0308 	and.w	r3, r3, #8
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d00b      	beq.n	80045c8 <HRTIM_Timer_ISR+0xdc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP4);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	01db      	lsls	r3, r3, #7
 80045b8:	4413      	add	r3, r2
 80045ba:	3388      	adds	r3, #136	; 0x88
 80045bc:	2208      	movs	r2, #8
 80045be:	601a      	str	r2, [r3, #0]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, TimerIdx);
 80045c0:	6839      	ldr	r1, [r7, #0]
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f7ff fa91 	bl	8003aea <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer repetition event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_REP) != (uint32_t)RESET)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f003 0310 	and.w	r3, r3, #16
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d010      	beq.n	80045f4 <HRTIM_Timer_ISR+0x108>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_REP) != (uint32_t)RESET)
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	f003 0310 	and.w	r3, r3, #16
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d00b      	beq.n	80045f4 <HRTIM_Timer_ISR+0x108>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_REP);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	01db      	lsls	r3, r3, #7
 80045e4:	4413      	add	r3, r2
 80045e6:	3388      	adds	r3, #136	; 0x88
 80045e8:	2210      	movs	r2, #16
 80045ea:	601a      	str	r2, [r3, #0]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, TimerIdx);
 80045ec:	6839      	ldr	r1, [r7, #0]
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f7fc fdf2 	bl	80011d8 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer registers update event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_UPD) != (uint32_t)RESET)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d010      	beq.n	8004620 <HRTIM_Timer_ISR+0x134>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_UPD) != (uint32_t)RESET)
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00b      	beq.n	8004620 <HRTIM_Timer_ISR+0x134>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_UPD);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	01db      	lsls	r3, r3, #7
 8004610:	4413      	add	r3, r2
 8004612:	3388      	adds	r3, #136	; 0x88
 8004614:	2240      	movs	r2, #64	; 0x40
 8004616:	601a      	str	r2, [r3, #0]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, TimerIdx);
 8004618:	6839      	ldr	r1, [r7, #0]
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f7ff fa4f 	bl	8003abe <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT1) != (uint32_t)RESET)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004626:	2b00      	cmp	r3, #0
 8004628:	d010      	beq.n	800464c <HRTIM_Timer_ISR+0x160>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT1) != (uint32_t)RESET)
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004630:	2b00      	cmp	r3, #0
 8004632:	d00b      	beq.n	800464c <HRTIM_Timer_ISR+0x160>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT1);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	01db      	lsls	r3, r3, #7
 800463c:	4413      	add	r3, r2
 800463e:	3388      	adds	r3, #136	; 0x88
 8004640:	2280      	movs	r2, #128	; 0x80
 8004642:	601a      	str	r2, [r3, #0]

      /* Invoke capture 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture1EventCallback(hhrtim, TimerIdx);
 8004644:	6839      	ldr	r1, [r7, #0]
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f7ff fa5a 	bl	8003b00 <HAL_HRTIM_Capture1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT2) != (uint32_t)RESET)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004652:	2b00      	cmp	r3, #0
 8004654:	d011      	beq.n	800467a <HRTIM_Timer_ISR+0x18e>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT2) != (uint32_t)RESET)
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00c      	beq.n	800467a <HRTIM_Timer_ISR+0x18e>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT2);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	01db      	lsls	r3, r3, #7
 8004668:	4413      	add	r3, r2
 800466a:	3388      	adds	r3, #136	; 0x88
 800466c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004670:	601a      	str	r2, [r3, #0]

      /* Invoke capture 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture2EventCallback(hhrtim, TimerIdx);
 8004672:	6839      	ldr	r1, [r7, #0]
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f7ff fa4e 	bl	8003b16 <HAL_HRTIM_Capture2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET1) != (uint32_t)RESET)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004680:	2b00      	cmp	r3, #0
 8004682:	d011      	beq.n	80046a8 <HRTIM_Timer_ISR+0x1bc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET1) != (uint32_t)RESET)
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00c      	beq.n	80046a8 <HRTIM_Timer_ISR+0x1bc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET1);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	01db      	lsls	r3, r3, #7
 8004696:	4413      	add	r3, r2
 8004698:	3388      	adds	r3, #136	; 0x88
 800469a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800469e:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1SetCallback(hhrtim, TimerIdx);
 80046a0:	6839      	ldr	r1, [r7, #0]
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f7ff fa58 	bl	8003b58 <HAL_HRTIM_Output1SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST1) != (uint32_t)RESET)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d011      	beq.n	80046d6 <HRTIM_Timer_ISR+0x1ea>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST1) != (uint32_t)RESET)
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d00c      	beq.n	80046d6 <HRTIM_Timer_ISR+0x1ea>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST1);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	01db      	lsls	r3, r3, #7
 80046c4:	4413      	add	r3, r2
 80046c6:	3388      	adds	r3, #136	; 0x88
 80046c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80046cc:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1ResetCallback(hhrtim, TimerIdx);
 80046ce:	6839      	ldr	r1, [r7, #0]
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f7ff fa4c 	bl	8003b6e <HAL_HRTIM_Output1ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET2) != (uint32_t)RESET)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d011      	beq.n	8004704 <HRTIM_Timer_ISR+0x218>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET2) != (uint32_t)RESET)
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00c      	beq.n	8004704 <HRTIM_Timer_ISR+0x218>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET2);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	01db      	lsls	r3, r3, #7
 80046f2:	4413      	add	r3, r2
 80046f4:	3388      	adds	r3, #136	; 0x88
 80046f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046fa:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2SetCallback(hhrtim, TimerIdx);
 80046fc:	6839      	ldr	r1, [r7, #0]
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f7ff fa40 	bl	8003b84 <HAL_HRTIM_Output2SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST2) != (uint32_t)RESET)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d011      	beq.n	8004732 <HRTIM_Timer_ISR+0x246>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST2) != (uint32_t)RESET)
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00c      	beq.n	8004732 <HRTIM_Timer_ISR+0x246>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST2);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	01db      	lsls	r3, r3, #7
 8004720:	4413      	add	r3, r2
 8004722:	3388      	adds	r3, #136	; 0x88
 8004724:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004728:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2ResetCallback(hhrtim, TimerIdx);
 800472a:	6839      	ldr	r1, [r7, #0]
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f7ff fa34 	bl	8003b9a <HAL_HRTIM_Output2ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST) != (uint32_t)RESET)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d011      	beq.n	8004760 <HRTIM_Timer_ISR+0x274>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST) != (uint32_t)RESET)
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00c      	beq.n	8004760 <HRTIM_Timer_ISR+0x274>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	01db      	lsls	r3, r3, #7
 800474e:	4413      	add	r3, r2
 8004750:	3388      	adds	r3, #136	; 0x88
 8004752:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004756:	601a      	str	r2, [r3, #0]

      /* Invoke timer reset callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->CounterResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_CounterResetCallback(hhrtim, TimerIdx);
 8004758:	6839      	ldr	r1, [r7, #0]
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f7ff f9f1 	bl	8003b42 <HAL_HRTIM_CounterResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Delayed protection event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_DLYPRT) != (uint32_t)RESET)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d011      	beq.n	800478e <HRTIM_Timer_ISR+0x2a2>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_DLYPRT) != (uint32_t)RESET)
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00c      	beq.n	800478e <HRTIM_Timer_ISR+0x2a2>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_DLYPRT);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	01db      	lsls	r3, r3, #7
 800477c:	4413      	add	r3, r2
 800477e:	3388      	adds	r3, #136	; 0x88
 8004780:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004784:	601a      	str	r2, [r3, #0]

      /* Invoke delayed protection callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DelayedProtectionCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_DelayedProtectionCallback(hhrtim, TimerIdx);
 8004786:	6839      	ldr	r1, [r7, #0]
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f7ff f9cf 	bl	8003b2c <HAL_HRTIM_DelayedProtectionCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 800478e:	bf00      	nop
 8004790:	3710      	adds	r7, #16
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
	...

08004798 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d101      	bne.n	80047aa <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e097      	b.n	80048da <HAL_LPTIM_Init+0x142>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d106      	bne.n	80047ca <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f7fd fbc5 	bl	8001f54 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2202      	movs	r2, #2
 80047ce:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d004      	beq.n	80047ec <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80047ea:	d103      	bne.n	80047f4 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f023 031e 	bic.w	r3, r3, #30
 80047f2:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	695b      	ldr	r3, [r3, #20]
 80047f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d003      	beq.n	8004808 <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	4b38      	ldr	r3, [pc, #224]	; (80048e4 <HAL_LPTIM_Init+0x14c>)
 8004804:	4013      	ands	r3, r2
 8004806:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	4b37      	ldr	r3, [pc, #220]	; (80048e8 <HAL_LPTIM_Init+0x150>)
 800480c:	4013      	ands	r3, r2
 800480e:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004818:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 800481e:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8004824:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 800482a:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	4313      	orrs	r3, r2
 8004830:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d107      	bne.n	800484a <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004842:	4313      	orrs	r3, r2
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	4313      	orrs	r3, r2
 8004848:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	2b01      	cmp	r3, #1
 8004850:	d004      	beq.n	800485c <HAL_LPTIM_Init+0xc4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004856:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800485a:	d107      	bne.n	800486c <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004864:	4313      	orrs	r3, r2
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	4313      	orrs	r3, r2
 800486a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	695b      	ldr	r3, [r3, #20]
 8004870:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004874:	4293      	cmp	r3, r2
 8004876:	d00a      	beq.n	800488e <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004880:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8004886:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	4313      	orrs	r3, r2
 800488c:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a14      	ldr	r2, [pc, #80]	; (80048ec <HAL_LPTIM_Init+0x154>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d004      	beq.n	80048aa <HAL_LPTIM_Init+0x112>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a12      	ldr	r2, [pc, #72]	; (80048f0 <HAL_LPTIM_Init+0x158>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d108      	bne.n	80048bc <HAL_LPTIM_Init+0x124>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	430a      	orrs	r2, r1
 80048b8:	625a      	str	r2, [r3, #36]	; 0x24
 80048ba:	e009      	b.n	80048d0 <HAL_LPTIM_Init+0x138>
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a0c      	ldr	r2, [pc, #48]	; (80048f4 <HAL_LPTIM_Init+0x15c>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d104      	bne.n	80048d0 <HAL_LPTIM_Init+0x138>
    {
      /* Check LPTIM3 Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM3 Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80048ce:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3710      	adds	r7, #16
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	ffff1f3f 	.word	0xffff1f3f
 80048e8:	ff19f1fe 	.word	0xff19f1fe
 80048ec:	40002400 	.word	0x40002400
 80048f0:	58002400 	.word	0x58002400
 80048f4:	58002800 	.word	0x58002800

080048f8 <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2202      	movs	r2, #2
 8004906:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	2b01      	cmp	r3, #1
 8004910:	d00c      	beq.n	800492c <HAL_LPTIM_Counter_Start_IT+0x34>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004916:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800491a:	d107      	bne.n	800492c <HAL_LPTIM_Counter_Start_IT+0x34>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68da      	ldr	r2, [r3, #12]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 800492a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	691a      	ldr	r2, [r3, #16]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f042 0201 	orr.w	r2, r2, #1
 800493a:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2210      	movs	r2, #16
 8004942:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	683a      	ldr	r2, [r7, #0]
 800494a:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800494c:	2110      	movs	r1, #16
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 f91e 	bl	8004b90 <LPTIM_WaitForFlag>
 8004954:	4603      	mov	r3, r0
 8004956:	2b03      	cmp	r3, #3
 8004958:	d101      	bne.n	800495e <HAL_LPTIM_Counter_Start_IT+0x66>
  {
    return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e02f      	b.n	80049be <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 f946 	bl	8004bf0 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f000 f905 	bl	8004b74 <HAL_LPTIM_GetState>
 800496a:	4603      	mov	r3, r0
 800496c:	2b03      	cmp	r3, #3
 800496e:	d101      	bne.n	8004974 <HAL_LPTIM_Counter_Start_IT+0x7c>
  {
    return HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	e024      	b.n	80049be <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	689a      	ldr	r2, [r3, #8]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f042 0210 	orr.w	r2, r2, #16
 8004982:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	689a      	ldr	r2, [r3, #8]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f042 0202 	orr.w	r2, r2, #2
 8004992:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	691a      	ldr	r2, [r3, #16]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f042 0201 	orr.w	r2, r2, #1
 80049a2:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	691a      	ldr	r2, [r3, #16]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f042 0204 	orr.w	r2, r2, #4
 80049b2:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3708      	adds	r7, #8
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}

080049c6 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b082      	sub	sp, #8
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0301 	and.w	r3, r3, #1
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d10d      	bne.n	80049f8 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f003 0301 	and.w	r3, r3, #1
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d106      	bne.n	80049f8 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2201      	movs	r2, #1
 80049f0:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 f882 	bl	8004afc <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0302 	and.w	r3, r3, #2
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d10d      	bne.n	8004a22 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	f003 0302 	and.w	r3, r3, #2
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d106      	bne.n	8004a22 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2202      	movs	r2, #2
 8004a1a:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f7fc fb47 	bl	80010b0 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 0304 	and.w	r3, r3, #4
 8004a2c:	2b04      	cmp	r3, #4
 8004a2e:	d10d      	bne.n	8004a4c <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f003 0304 	and.w	r3, r3, #4
 8004a3a:	2b04      	cmp	r3, #4
 8004a3c:	d106      	bne.n	8004a4c <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2204      	movs	r2, #4
 8004a44:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 f862 	bl	8004b10 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0308 	and.w	r3, r3, #8
 8004a56:	2b08      	cmp	r3, #8
 8004a58:	d10d      	bne.n	8004a76 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	f003 0308 	and.w	r3, r3, #8
 8004a64:	2b08      	cmp	r3, #8
 8004a66:	d106      	bne.n	8004a76 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2208      	movs	r2, #8
 8004a6e:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f000 f857 	bl	8004b24 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0310 	and.w	r3, r3, #16
 8004a80:	2b10      	cmp	r3, #16
 8004a82:	d10d      	bne.n	8004aa0 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f003 0310 	and.w	r3, r3, #16
 8004a8e:	2b10      	cmp	r3, #16
 8004a90:	d106      	bne.n	8004aa0 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2210      	movs	r2, #16
 8004a98:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 f84c 	bl	8004b38 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0320 	and.w	r3, r3, #32
 8004aaa:	2b20      	cmp	r3, #32
 8004aac:	d10d      	bne.n	8004aca <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	f003 0320 	and.w	r3, r3, #32
 8004ab8:	2b20      	cmp	r3, #32
 8004aba:	d106      	bne.n	8004aca <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2220      	movs	r2, #32
 8004ac2:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f000 f841 	bl	8004b4c <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad4:	2b40      	cmp	r3, #64	; 0x40
 8004ad6:	d10d      	bne.n	8004af4 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae2:	2b40      	cmp	r3, #64	; 0x40
 8004ae4:	d106      	bne.n	8004af4 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2240      	movs	r2, #64	; 0x40
 8004aec:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 f836 	bl	8004b60 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8004af4:	bf00      	nop
 8004af6:	3708      	adds	r7, #8
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8004b04:	bf00      	nop
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8004b18:	bf00      	nop
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8004b2c:	bf00      	nop
 8004b2e:	370c      	adds	r7, #12
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8004b40:	bf00      	nop
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8004b54:	bf00      	nop
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8004b68:	bf00      	nop
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004b82:	b2db      	uxtb	r3, r3
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	370c      	adds	r7, #12
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b085      	sub	sp, #20
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8004b9e:	4b12      	ldr	r3, [pc, #72]	; (8004be8 <LPTIM_WaitForFlag+0x58>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a12      	ldr	r2, [pc, #72]	; (8004bec <LPTIM_WaitForFlag+0x5c>)
 8004ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba8:	0b9b      	lsrs	r3, r3, #14
 8004baa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004bae:	fb02 f303 	mul.w	r3, r2, r3
 8004bb2:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d101      	bne.n	8004bc4 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	4013      	ands	r3, r2
 8004bce:	683a      	ldr	r2, [r7, #0]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d002      	beq.n	8004bda <LPTIM_WaitForFlag+0x4a>
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d1ec      	bne.n	8004bb4 <LPTIM_WaitForFlag+0x24>

  return result;
 8004bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3714      	adds	r7, #20
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr
 8004be8:	20000014 	.word	0x20000014
 8004bec:	d1b71759 	.word	0xd1b71759

08004bf0 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b08c      	sub	sp, #48	; 0x30
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bfc:	f3ef 8310 	mrs	r3, PRIMASK
 8004c00:	60fb      	str	r3, [r7, #12]
  return(result);
 8004c02:	68fb      	ldr	r3, [r7, #12]
  uint32_t tmpARR;
  uint32_t primask_bit;
  uint32_t tmpCFGR2;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8004c04:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c06:	2301      	movs	r3, #1
 8004c08:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	f383 8810 	msr	PRIMASK, r3
}
 8004c10:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a81      	ldr	r2, [pc, #516]	; (8004e1c <LPTIM_Disable+0x22c>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d02d      	beq.n	8004c78 <LPTIM_Disable+0x88>
 8004c1c:	4a7f      	ldr	r2, [pc, #508]	; (8004e1c <LPTIM_Disable+0x22c>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d830      	bhi.n	8004c84 <LPTIM_Disable+0x94>
 8004c22:	4a7f      	ldr	r2, [pc, #508]	; (8004e20 <LPTIM_Disable+0x230>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d021      	beq.n	8004c6c <LPTIM_Disable+0x7c>
 8004c28:	4a7d      	ldr	r2, [pc, #500]	; (8004e20 <LPTIM_Disable+0x230>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d82a      	bhi.n	8004c84 <LPTIM_Disable+0x94>
 8004c2e:	4a7d      	ldr	r2, [pc, #500]	; (8004e24 <LPTIM_Disable+0x234>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d015      	beq.n	8004c60 <LPTIM_Disable+0x70>
 8004c34:	4a7b      	ldr	r2, [pc, #492]	; (8004e24 <LPTIM_Disable+0x234>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d824      	bhi.n	8004c84 <LPTIM_Disable+0x94>
 8004c3a:	4a7b      	ldr	r2, [pc, #492]	; (8004e28 <LPTIM_Disable+0x238>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d003      	beq.n	8004c48 <LPTIM_Disable+0x58>
 8004c40:	4a7a      	ldr	r2, [pc, #488]	; (8004e2c <LPTIM_Disable+0x23c>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d006      	beq.n	8004c54 <LPTIM_Disable+0x64>
    case LPTIM5_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
      break;
#endif /* LPTIM5 */
    default:
      break;
 8004c46:	e01d      	b.n	8004c84 <LPTIM_Disable+0x94>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004c48:	4b79      	ldr	r3, [pc, #484]	; (8004e30 <LPTIM_Disable+0x240>)
 8004c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c4c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8004c50:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8004c52:	e018      	b.n	8004c86 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004c54:	4b76      	ldr	r3, [pc, #472]	; (8004e30 <LPTIM_Disable+0x240>)
 8004c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c58:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8004c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8004c5e:	e012      	b.n	8004c86 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
 8004c60:	4b73      	ldr	r3, [pc, #460]	; (8004e30 <LPTIM_Disable+0x240>)
 8004c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c64:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004c68:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8004c6a:	e00c      	b.n	8004c86 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM4_SOURCE();
 8004c6c:	4b70      	ldr	r3, [pc, #448]	; (8004e30 <LPTIM_Disable+0x240>)
 8004c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c70:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004c74:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8004c76:	e006      	b.n	8004c86 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
 8004c78:	4b6d      	ldr	r3, [pc, #436]	; (8004e30 <LPTIM_Disable+0x240>)
 8004c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c7c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004c80:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8004c82:	e000      	b.n	8004c86 <LPTIM_Disable+0x96>
      break;
 8004c84:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	627b      	str	r3, [r7, #36]	; 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	695b      	ldr	r3, [r3, #20]
 8004c9c:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	61bb      	str	r3, [r7, #24]
  tmpCFGR2 = hlptim->Instance->CFGR2;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cac:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a5a      	ldr	r2, [pc, #360]	; (8004e1c <LPTIM_Disable+0x22c>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d059      	beq.n	8004d6c <LPTIM_Disable+0x17c>
 8004cb8:	4a58      	ldr	r2, [pc, #352]	; (8004e1c <LPTIM_Disable+0x22c>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d867      	bhi.n	8004d8e <LPTIM_Disable+0x19e>
 8004cbe:	4a58      	ldr	r2, [pc, #352]	; (8004e20 <LPTIM_Disable+0x230>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d042      	beq.n	8004d4a <LPTIM_Disable+0x15a>
 8004cc4:	4a56      	ldr	r2, [pc, #344]	; (8004e20 <LPTIM_Disable+0x230>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d861      	bhi.n	8004d8e <LPTIM_Disable+0x19e>
 8004cca:	4a56      	ldr	r2, [pc, #344]	; (8004e24 <LPTIM_Disable+0x234>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d02b      	beq.n	8004d28 <LPTIM_Disable+0x138>
 8004cd0:	4a54      	ldr	r2, [pc, #336]	; (8004e24 <LPTIM_Disable+0x234>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d85b      	bhi.n	8004d8e <LPTIM_Disable+0x19e>
 8004cd6:	4a54      	ldr	r2, [pc, #336]	; (8004e28 <LPTIM_Disable+0x238>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d003      	beq.n	8004ce4 <LPTIM_Disable+0xf4>
 8004cdc:	4a53      	ldr	r2, [pc, #332]	; (8004e2c <LPTIM_Disable+0x23c>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d011      	beq.n	8004d06 <LPTIM_Disable+0x116>
      __HAL_RCC_LPTIM5_FORCE_RESET();
      __HAL_RCC_LPTIM5_RELEASE_RESET();
      break;
#endif /* LPTIM5 */
    default:
      break;
 8004ce2:	e054      	b.n	8004d8e <LPTIM_Disable+0x19e>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8004ce4:	4b52      	ldr	r3, [pc, #328]	; (8004e30 <LPTIM_Disable+0x240>)
 8004ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cea:	4a51      	ldr	r2, [pc, #324]	; (8004e30 <LPTIM_Disable+0x240>)
 8004cec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004cf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8004cf4:	4b4e      	ldr	r3, [pc, #312]	; (8004e30 <LPTIM_Disable+0x240>)
 8004cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cfa:	4a4d      	ldr	r2, [pc, #308]	; (8004e30 <LPTIM_Disable+0x240>)
 8004cfc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      break;
 8004d04:	e044      	b.n	8004d90 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8004d06:	4b4a      	ldr	r3, [pc, #296]	; (8004e30 <LPTIM_Disable+0x240>)
 8004d08:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d0c:	4a48      	ldr	r2, [pc, #288]	; (8004e30 <LPTIM_Disable+0x240>)
 8004d0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d12:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8004d16:	4b46      	ldr	r3, [pc, #280]	; (8004e30 <LPTIM_Disable+0x240>)
 8004d18:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d1c:	4a44      	ldr	r2, [pc, #272]	; (8004e30 <LPTIM_Disable+0x240>)
 8004d1e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d22:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8004d26:	e033      	b.n	8004d90 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM3_FORCE_RESET();
 8004d28:	4b41      	ldr	r3, [pc, #260]	; (8004e30 <LPTIM_Disable+0x240>)
 8004d2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d2e:	4a40      	ldr	r2, [pc, #256]	; (8004e30 <LPTIM_Disable+0x240>)
 8004d30:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d34:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM3_RELEASE_RESET();
 8004d38:	4b3d      	ldr	r3, [pc, #244]	; (8004e30 <LPTIM_Disable+0x240>)
 8004d3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d3e:	4a3c      	ldr	r2, [pc, #240]	; (8004e30 <LPTIM_Disable+0x240>)
 8004d40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d44:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8004d48:	e022      	b.n	8004d90 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM4_FORCE_RESET();
 8004d4a:	4b39      	ldr	r3, [pc, #228]	; (8004e30 <LPTIM_Disable+0x240>)
 8004d4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d50:	4a37      	ldr	r2, [pc, #220]	; (8004e30 <LPTIM_Disable+0x240>)
 8004d52:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004d56:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM4_RELEASE_RESET();
 8004d5a:	4b35      	ldr	r3, [pc, #212]	; (8004e30 <LPTIM_Disable+0x240>)
 8004d5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d60:	4a33      	ldr	r2, [pc, #204]	; (8004e30 <LPTIM_Disable+0x240>)
 8004d62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d66:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8004d6a:	e011      	b.n	8004d90 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM5_FORCE_RESET();
 8004d6c:	4b30      	ldr	r3, [pc, #192]	; (8004e30 <LPTIM_Disable+0x240>)
 8004d6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d72:	4a2f      	ldr	r2, [pc, #188]	; (8004e30 <LPTIM_Disable+0x240>)
 8004d74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004d78:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM5_RELEASE_RESET();
 8004d7c:	4b2c      	ldr	r3, [pc, #176]	; (8004e30 <LPTIM_Disable+0x240>)
 8004d7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d82:	4a2b      	ldr	r2, [pc, #172]	; (8004e30 <LPTIM_Disable+0x240>)
 8004d84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d88:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8004d8c:	e000      	b.n	8004d90 <LPTIM_Disable+0x1a0>
      break;
 8004d8e:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d103      	bne.n	8004d9e <LPTIM_Disable+0x1ae>
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	f000 80d0 	beq.w	8004f3e <LPTIM_Disable+0x34e>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a1e      	ldr	r2, [pc, #120]	; (8004e1c <LPTIM_Disable+0x22c>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d031      	beq.n	8004e0c <LPTIM_Disable+0x21c>
 8004da8:	4a1c      	ldr	r2, [pc, #112]	; (8004e1c <LPTIM_Disable+0x22c>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d842      	bhi.n	8004e34 <LPTIM_Disable+0x244>
 8004dae:	4a1c      	ldr	r2, [pc, #112]	; (8004e20 <LPTIM_Disable+0x230>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d024      	beq.n	8004dfe <LPTIM_Disable+0x20e>
 8004db4:	4a1a      	ldr	r2, [pc, #104]	; (8004e20 <LPTIM_Disable+0x230>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d83c      	bhi.n	8004e34 <LPTIM_Disable+0x244>
 8004dba:	4a1a      	ldr	r2, [pc, #104]	; (8004e24 <LPTIM_Disable+0x234>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d017      	beq.n	8004df0 <LPTIM_Disable+0x200>
 8004dc0:	4a18      	ldr	r2, [pc, #96]	; (8004e24 <LPTIM_Disable+0x234>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d836      	bhi.n	8004e34 <LPTIM_Disable+0x244>
 8004dc6:	4a18      	ldr	r2, [pc, #96]	; (8004e28 <LPTIM_Disable+0x238>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d003      	beq.n	8004dd4 <LPTIM_Disable+0x1e4>
 8004dcc:	4a17      	ldr	r2, [pc, #92]	; (8004e2c <LPTIM_Disable+0x23c>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d007      	beq.n	8004de2 <LPTIM_Disable+0x1f2>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
        break;
#endif /* LPTIM5 */
      default:
        break;
 8004dd2:	e02f      	b.n	8004e34 <LPTIM_Disable+0x244>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_D2PCLK1);
 8004dd4:	4b16      	ldr	r3, [pc, #88]	; (8004e30 <LPTIM_Disable+0x240>)
 8004dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dd8:	4a15      	ldr	r2, [pc, #84]	; (8004e30 <LPTIM_Disable+0x240>)
 8004dda:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8004dde:	6553      	str	r3, [r2, #84]	; 0x54
        break;
 8004de0:	e029      	b.n	8004e36 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_D3PCLK1);
 8004de2:	4b13      	ldr	r3, [pc, #76]	; (8004e30 <LPTIM_Disable+0x240>)
 8004de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004de6:	4a12      	ldr	r2, [pc, #72]	; (8004e30 <LPTIM_Disable+0x240>)
 8004de8:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8004dec:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8004dee:	e022      	b.n	8004e36 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_D3PCLK1);
 8004df0:	4b0f      	ldr	r3, [pc, #60]	; (8004e30 <LPTIM_Disable+0x240>)
 8004df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004df4:	4a0e      	ldr	r2, [pc, #56]	; (8004e30 <LPTIM_Disable+0x240>)
 8004df6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004dfa:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8004dfc:	e01b      	b.n	8004e36 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM4_CONFIG(RCC_LPTIM4CLKSOURCE_D3PCLK1);
 8004dfe:	4b0c      	ldr	r3, [pc, #48]	; (8004e30 <LPTIM_Disable+0x240>)
 8004e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e02:	4a0b      	ldr	r2, [pc, #44]	; (8004e30 <LPTIM_Disable+0x240>)
 8004e04:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004e08:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8004e0a:	e014      	b.n	8004e36 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
 8004e0c:	4b08      	ldr	r3, [pc, #32]	; (8004e30 <LPTIM_Disable+0x240>)
 8004e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e10:	4a07      	ldr	r2, [pc, #28]	; (8004e30 <LPTIM_Disable+0x240>)
 8004e12:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004e16:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8004e18:	e00d      	b.n	8004e36 <LPTIM_Disable+0x246>
 8004e1a:	bf00      	nop
 8004e1c:	58003000 	.word	0x58003000
 8004e20:	58002c00 	.word	0x58002c00
 8004e24:	58002800 	.word	0x58002800
 8004e28:	40002400 	.word	0x40002400
 8004e2c:	58002400 	.word	0x58002400
 8004e30:	58024400 	.word	0x58024400
        break;
 8004e34:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d01a      	beq.n	8004e72 <LPTIM_Disable+0x282>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	691a      	ldr	r2, [r3, #16]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f042 0201 	orr.w	r2, r2, #1
 8004e4a:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	69fa      	ldr	r2, [r7, #28]
 8004e52:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8004e54:	2108      	movs	r1, #8
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f7ff fe9a 	bl	8004b90 <LPTIM_WaitForFlag>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b03      	cmp	r3, #3
 8004e60:	d103      	bne.n	8004e6a <LPTIM_Disable+0x27a>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2203      	movs	r2, #3
 8004e66:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2208      	movs	r2, #8
 8004e70:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d01a      	beq.n	8004eae <LPTIM_Disable+0x2be>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	691a      	ldr	r2, [r3, #16]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f042 0201 	orr.w	r2, r2, #1
 8004e86:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	69ba      	ldr	r2, [r7, #24]
 8004e8e:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8004e90:	2110      	movs	r1, #16
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f7ff fe7c 	bl	8004b90 <LPTIM_WaitForFlag>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b03      	cmp	r3, #3
 8004e9c:	d103      	bne.n	8004ea6 <LPTIM_Disable+0x2b6>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2203      	movs	r2, #3
 8004ea2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2210      	movs	r2, #16
 8004eac:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a33      	ldr	r2, [pc, #204]	; (8004f80 <LPTIM_Disable+0x390>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d039      	beq.n	8004f2c <LPTIM_Disable+0x33c>
 8004eb8:	4a31      	ldr	r2, [pc, #196]	; (8004f80 <LPTIM_Disable+0x390>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d841      	bhi.n	8004f42 <LPTIM_Disable+0x352>
 8004ebe:	4a31      	ldr	r2, [pc, #196]	; (8004f84 <LPTIM_Disable+0x394>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d02a      	beq.n	8004f1a <LPTIM_Disable+0x32a>
 8004ec4:	4a2f      	ldr	r2, [pc, #188]	; (8004f84 <LPTIM_Disable+0x394>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d83b      	bhi.n	8004f42 <LPTIM_Disable+0x352>
 8004eca:	4a2f      	ldr	r2, [pc, #188]	; (8004f88 <LPTIM_Disable+0x398>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d01b      	beq.n	8004f08 <LPTIM_Disable+0x318>
 8004ed0:	4a2d      	ldr	r2, [pc, #180]	; (8004f88 <LPTIM_Disable+0x398>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d835      	bhi.n	8004f42 <LPTIM_Disable+0x352>
 8004ed6:	4a2d      	ldr	r2, [pc, #180]	; (8004f8c <LPTIM_Disable+0x39c>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d003      	beq.n	8004ee4 <LPTIM_Disable+0x2f4>
 8004edc:	4a2c      	ldr	r2, [pc, #176]	; (8004f90 <LPTIM_Disable+0x3a0>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d009      	beq.n	8004ef6 <LPTIM_Disable+0x306>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
        break;
#endif /* LPTIM5 */
      default:
        break;
 8004ee2:	e02e      	b.n	8004f42 <LPTIM_Disable+0x352>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8004ee4:	4b2b      	ldr	r3, [pc, #172]	; (8004f94 <LPTIM_Disable+0x3a4>)
 8004ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ee8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004eec:	4929      	ldr	r1, [pc, #164]	; (8004f94 <LPTIM_Disable+0x3a4>)
 8004eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	654b      	str	r3, [r1, #84]	; 0x54
        break;
 8004ef4:	e026      	b.n	8004f44 <LPTIM_Disable+0x354>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8004ef6:	4b27      	ldr	r3, [pc, #156]	; (8004f94 <LPTIM_Disable+0x3a4>)
 8004ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004efa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004efe:	4925      	ldr	r1, [pc, #148]	; (8004f94 <LPTIM_Disable+0x3a4>)
 8004f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f02:	4313      	orrs	r3, r2
 8004f04:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8004f06:	e01d      	b.n	8004f44 <LPTIM_Disable+0x354>
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
 8004f08:	4b22      	ldr	r3, [pc, #136]	; (8004f94 <LPTIM_Disable+0x3a4>)
 8004f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f0c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f10:	4920      	ldr	r1, [pc, #128]	; (8004f94 <LPTIM_Disable+0x3a4>)
 8004f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f14:	4313      	orrs	r3, r2
 8004f16:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8004f18:	e014      	b.n	8004f44 <LPTIM_Disable+0x354>
        __HAL_RCC_LPTIM4_CONFIG(tmpclksource);
 8004f1a:	4b1e      	ldr	r3, [pc, #120]	; (8004f94 <LPTIM_Disable+0x3a4>)
 8004f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f22:	491c      	ldr	r1, [pc, #112]	; (8004f94 <LPTIM_Disable+0x3a4>)
 8004f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f26:	4313      	orrs	r3, r2
 8004f28:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8004f2a:	e00b      	b.n	8004f44 <LPTIM_Disable+0x354>
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
 8004f2c:	4b19      	ldr	r3, [pc, #100]	; (8004f94 <LPTIM_Disable+0x3a4>)
 8004f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f30:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f34:	4917      	ldr	r1, [pc, #92]	; (8004f94 <LPTIM_Disable+0x3a4>)
 8004f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8004f3c:	e002      	b.n	8004f44 <LPTIM_Disable+0x354>
    }
  }
 8004f3e:	bf00      	nop
 8004f40:	e000      	b.n	8004f44 <LPTIM_Disable+0x354>
        break;
 8004f42:	bf00      	nop

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	691a      	ldr	r2, [r3, #16]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f022 0201 	bic.w	r2, r2, #1
 8004f52:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f5a:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	6a3a      	ldr	r2, [r7, #32]
 8004f62:	60da      	str	r2, [r3, #12]
  hlptim->Instance->CFGR2 = tmpCFGR2;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	697a      	ldr	r2, [r7, #20]
 8004f6a:	625a      	str	r2, [r3, #36]	; 0x24
 8004f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f6e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	f383 8810 	msr	PRIMASK, r3
}
 8004f76:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8004f78:	bf00      	nop
 8004f7a:	3730      	adds	r7, #48	; 0x30
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	58003000 	.word	0x58003000
 8004f84:	58002c00 	.word	0x58002c00
 8004f88:	58002800 	.word	0x58002800
 8004f8c:	40002400 	.word	0x40002400
 8004f90:	58002400 	.word	0x58002400
 8004f94:	58024400 	.word	0x58024400

08004f98 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8004f9c:	4b05      	ldr	r3, [pc, #20]	; (8004fb4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a04      	ldr	r2, [pc, #16]	; (8004fb4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004fa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fa6:	6013      	str	r3, [r2, #0]
}
 8004fa8:	bf00      	nop
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	58024800 	.word	0x58024800

08004fb8 <HAL_PWR_EnterSLEEPMode>:
  * @note   Ensure to clear pending events before calling this API through
  *         HAL_PWREx_ClearPendingEvent() when the SLEEP entry is WFE.
  * @retval None.
  */
void HAL_PWR_EnterSLEEPMode (uint32_t Regulator, uint8_t SLEEPEntry)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_SLEEP_ENTRY (SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8004fc4:	4b08      	ldr	r3, [pc, #32]	; (8004fe8 <HAL_PWR_EnterSLEEPMode+0x30>)
 8004fc6:	691b      	ldr	r3, [r3, #16]
 8004fc8:	4a07      	ldr	r2, [pc, #28]	; (8004fe8 <HAL_PWR_EnterSLEEPMode+0x30>)
 8004fca:	f023 0304 	bic.w	r3, r3, #4
 8004fce:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry */
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8004fd0:	78fb      	ldrb	r3, [r7, #3]
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d101      	bne.n	8004fda <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 8004fd6:	bf30      	wfi
  else
  {
    /* Request Wait For Event */
    __WFE ();
  }
}
 8004fd8:	e000      	b.n	8004fdc <HAL_PWR_EnterSLEEPMode+0x24>
    __WFE ();
 8004fda:	bf20      	wfe
}
 8004fdc:	bf00      	nop
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr
 8004fe8:	e000ed00 	.word	0xe000ed00

08004fec <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8004ff8:	4b18      	ldr	r3, [pc, #96]	; (800505c <HAL_PWR_EnterSTOPMode+0x70>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f023 0201 	bic.w	r2, r3, #1
 8005000:	4916      	ldr	r1, [pc, #88]	; (800505c <HAL_PWR_EnterSTOPMode+0x70>)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4313      	orrs	r3, r2
 8005006:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 8005008:	4b14      	ldr	r3, [pc, #80]	; (800505c <HAL_PWR_EnterSTOPMode+0x70>)
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	4a13      	ldr	r2, [pc, #76]	; (800505c <HAL_PWR_EnterSTOPMode+0x70>)
 800500e:	f023 0305 	bic.w	r3, r3, #5
 8005012:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 8005014:	4b11      	ldr	r3, [pc, #68]	; (800505c <HAL_PWR_EnterSTOPMode+0x70>)
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	4a10      	ldr	r2, [pc, #64]	; (800505c <HAL_PWR_EnterSTOPMode+0x70>)
 800501a:	f023 0302 	bic.w	r3, r3, #2
 800501e:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8005020:	4b0f      	ldr	r3, [pc, #60]	; (8005060 <HAL_PWR_EnterSTOPMode+0x74>)
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	4a0e      	ldr	r2, [pc, #56]	; (8005060 <HAL_PWR_EnterSTOPMode+0x74>)
 8005026:	f043 0304 	orr.w	r3, r3, #4
 800502a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800502c:	f3bf 8f4f 	dsb	sy
}
 8005030:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005032:	f3bf 8f6f 	isb	sy
}
 8005036:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8005038:	78fb      	ldrb	r3, [r7, #3]
 800503a:	2b01      	cmp	r3, #1
 800503c:	d101      	bne.n	8005042 <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 800503e:	bf30      	wfi
 8005040:	e000      	b.n	8005044 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 8005042:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8005044:	4b06      	ldr	r3, [pc, #24]	; (8005060 <HAL_PWR_EnterSTOPMode+0x74>)
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	4a05      	ldr	r2, [pc, #20]	; (8005060 <HAL_PWR_EnterSTOPMode+0x74>)
 800504a:	f023 0304 	bic.w	r3, r3, #4
 800504e:	6113      	str	r3, [r2, #16]
}
 8005050:	bf00      	nop
 8005052:	370c      	adds	r7, #12
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr
 800505c:	58024800 	.word	0x58024800
 8005060:	e000ed00 	.word	0xe000ed00

08005064 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800506c:	4b19      	ldr	r3, [pc, #100]	; (80050d4 <HAL_PWREx_ConfigSupply+0x70>)
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	f003 0304 	and.w	r3, r3, #4
 8005074:	2b04      	cmp	r3, #4
 8005076:	d00a      	beq.n	800508e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005078:	4b16      	ldr	r3, [pc, #88]	; (80050d4 <HAL_PWREx_ConfigSupply+0x70>)
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	f003 0307 	and.w	r3, r3, #7
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	429a      	cmp	r2, r3
 8005084:	d001      	beq.n	800508a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e01f      	b.n	80050ca <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800508a:	2300      	movs	r3, #0
 800508c:	e01d      	b.n	80050ca <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800508e:	4b11      	ldr	r3, [pc, #68]	; (80050d4 <HAL_PWREx_ConfigSupply+0x70>)
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	f023 0207 	bic.w	r2, r3, #7
 8005096:	490f      	ldr	r1, [pc, #60]	; (80050d4 <HAL_PWREx_ConfigSupply+0x70>)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4313      	orrs	r3, r2
 800509c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800509e:	f7fd fa79 	bl	8002594 <HAL_GetTick>
 80050a2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80050a4:	e009      	b.n	80050ba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80050a6:	f7fd fa75 	bl	8002594 <HAL_GetTick>
 80050aa:	4602      	mov	r2, r0
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050b4:	d901      	bls.n	80050ba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e007      	b.n	80050ca <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80050ba:	4b06      	ldr	r3, [pc, #24]	; (80050d4 <HAL_PWREx_ConfigSupply+0x70>)
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050c6:	d1ee      	bne.n	80050a6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3710      	adds	r7, #16
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	58024800 	.word	0x58024800

080050d8 <HAL_PWREx_EnableFlashPowerDown>:
  *         obtain the best trade-off between low-power consumption and restart
  *         time when exiting from DStop mode.
  * @retval None.
  */
void HAL_PWREx_EnableFlashPowerDown (void)
{
 80050d8:	b480      	push	{r7}
 80050da:	af00      	add	r7, sp, #0
  /* Enable the Flash Power Down */
  SET_BIT (PWR->CR1, PWR_CR1_FLPS);
 80050dc:	4b05      	ldr	r3, [pc, #20]	; (80050f4 <HAL_PWREx_EnableFlashPowerDown+0x1c>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a04      	ldr	r2, [pc, #16]	; (80050f4 <HAL_PWREx_EnableFlashPowerDown+0x1c>)
 80050e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80050e6:	6013      	str	r3, [r2, #0]
}
 80050e8:	bf00      	nop
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr
 80050f2:	bf00      	nop
 80050f4:	58024800 	.word	0x58024800

080050f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b08c      	sub	sp, #48	; 0x30
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d102      	bne.n	800510c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	f000 bc48 	b.w	800599c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0301 	and.w	r3, r3, #1
 8005114:	2b00      	cmp	r3, #0
 8005116:	f000 8088 	beq.w	800522a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800511a:	4b99      	ldr	r3, [pc, #612]	; (8005380 <HAL_RCC_OscConfig+0x288>)
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005122:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005124:	4b96      	ldr	r3, [pc, #600]	; (8005380 <HAL_RCC_OscConfig+0x288>)
 8005126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005128:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800512a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800512c:	2b10      	cmp	r3, #16
 800512e:	d007      	beq.n	8005140 <HAL_RCC_OscConfig+0x48>
 8005130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005132:	2b18      	cmp	r3, #24
 8005134:	d111      	bne.n	800515a <HAL_RCC_OscConfig+0x62>
 8005136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005138:	f003 0303 	and.w	r3, r3, #3
 800513c:	2b02      	cmp	r3, #2
 800513e:	d10c      	bne.n	800515a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005140:	4b8f      	ldr	r3, [pc, #572]	; (8005380 <HAL_RCC_OscConfig+0x288>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005148:	2b00      	cmp	r3, #0
 800514a:	d06d      	beq.n	8005228 <HAL_RCC_OscConfig+0x130>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d169      	bne.n	8005228 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	f000 bc21 	b.w	800599c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005162:	d106      	bne.n	8005172 <HAL_RCC_OscConfig+0x7a>
 8005164:	4b86      	ldr	r3, [pc, #536]	; (8005380 <HAL_RCC_OscConfig+0x288>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a85      	ldr	r2, [pc, #532]	; (8005380 <HAL_RCC_OscConfig+0x288>)
 800516a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800516e:	6013      	str	r3, [r2, #0]
 8005170:	e02e      	b.n	80051d0 <HAL_RCC_OscConfig+0xd8>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d10c      	bne.n	8005194 <HAL_RCC_OscConfig+0x9c>
 800517a:	4b81      	ldr	r3, [pc, #516]	; (8005380 <HAL_RCC_OscConfig+0x288>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a80      	ldr	r2, [pc, #512]	; (8005380 <HAL_RCC_OscConfig+0x288>)
 8005180:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005184:	6013      	str	r3, [r2, #0]
 8005186:	4b7e      	ldr	r3, [pc, #504]	; (8005380 <HAL_RCC_OscConfig+0x288>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a7d      	ldr	r2, [pc, #500]	; (8005380 <HAL_RCC_OscConfig+0x288>)
 800518c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005190:	6013      	str	r3, [r2, #0]
 8005192:	e01d      	b.n	80051d0 <HAL_RCC_OscConfig+0xd8>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800519c:	d10c      	bne.n	80051b8 <HAL_RCC_OscConfig+0xc0>
 800519e:	4b78      	ldr	r3, [pc, #480]	; (8005380 <HAL_RCC_OscConfig+0x288>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a77      	ldr	r2, [pc, #476]	; (8005380 <HAL_RCC_OscConfig+0x288>)
 80051a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80051a8:	6013      	str	r3, [r2, #0]
 80051aa:	4b75      	ldr	r3, [pc, #468]	; (8005380 <HAL_RCC_OscConfig+0x288>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a74      	ldr	r2, [pc, #464]	; (8005380 <HAL_RCC_OscConfig+0x288>)
 80051b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051b4:	6013      	str	r3, [r2, #0]
 80051b6:	e00b      	b.n	80051d0 <HAL_RCC_OscConfig+0xd8>
 80051b8:	4b71      	ldr	r3, [pc, #452]	; (8005380 <HAL_RCC_OscConfig+0x288>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a70      	ldr	r2, [pc, #448]	; (8005380 <HAL_RCC_OscConfig+0x288>)
 80051be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051c2:	6013      	str	r3, [r2, #0]
 80051c4:	4b6e      	ldr	r3, [pc, #440]	; (8005380 <HAL_RCC_OscConfig+0x288>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a6d      	ldr	r2, [pc, #436]	; (8005380 <HAL_RCC_OscConfig+0x288>)
 80051ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d013      	beq.n	8005200 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051d8:	f7fd f9dc 	bl	8002594 <HAL_GetTick>
 80051dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80051de:	e008      	b.n	80051f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051e0:	f7fd f9d8 	bl	8002594 <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	2b64      	cmp	r3, #100	; 0x64
 80051ec:	d901      	bls.n	80051f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e3d4      	b.n	800599c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80051f2:	4b63      	ldr	r3, [pc, #396]	; (8005380 <HAL_RCC_OscConfig+0x288>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d0f0      	beq.n	80051e0 <HAL_RCC_OscConfig+0xe8>
 80051fe:	e014      	b.n	800522a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005200:	f7fd f9c8 	bl	8002594 <HAL_GetTick>
 8005204:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005206:	e008      	b.n	800521a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005208:	f7fd f9c4 	bl	8002594 <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	2b64      	cmp	r3, #100	; 0x64
 8005214:	d901      	bls.n	800521a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e3c0      	b.n	800599c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800521a:	4b59      	ldr	r3, [pc, #356]	; (8005380 <HAL_RCC_OscConfig+0x288>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d1f0      	bne.n	8005208 <HAL_RCC_OscConfig+0x110>
 8005226:	e000      	b.n	800522a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005228:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 0302 	and.w	r3, r3, #2
 8005232:	2b00      	cmp	r3, #0
 8005234:	f000 80ca 	beq.w	80053cc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005238:	4b51      	ldr	r3, [pc, #324]	; (8005380 <HAL_RCC_OscConfig+0x288>)
 800523a:	691b      	ldr	r3, [r3, #16]
 800523c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005240:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005242:	4b4f      	ldr	r3, [pc, #316]	; (8005380 <HAL_RCC_OscConfig+0x288>)
 8005244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005246:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005248:	6a3b      	ldr	r3, [r7, #32]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d007      	beq.n	800525e <HAL_RCC_OscConfig+0x166>
 800524e:	6a3b      	ldr	r3, [r7, #32]
 8005250:	2b18      	cmp	r3, #24
 8005252:	d156      	bne.n	8005302 <HAL_RCC_OscConfig+0x20a>
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	f003 0303 	and.w	r3, r3, #3
 800525a:	2b00      	cmp	r3, #0
 800525c:	d151      	bne.n	8005302 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800525e:	4b48      	ldr	r3, [pc, #288]	; (8005380 <HAL_RCC_OscConfig+0x288>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 0304 	and.w	r3, r3, #4
 8005266:	2b00      	cmp	r3, #0
 8005268:	d005      	beq.n	8005276 <HAL_RCC_OscConfig+0x17e>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d101      	bne.n	8005276 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e392      	b.n	800599c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005276:	4b42      	ldr	r3, [pc, #264]	; (8005380 <HAL_RCC_OscConfig+0x288>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f023 0219 	bic.w	r2, r3, #25
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	493f      	ldr	r1, [pc, #252]	; (8005380 <HAL_RCC_OscConfig+0x288>)
 8005284:	4313      	orrs	r3, r2
 8005286:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005288:	f7fd f984 	bl	8002594 <HAL_GetTick>
 800528c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800528e:	e008      	b.n	80052a2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005290:	f7fd f980 	bl	8002594 <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	2b02      	cmp	r3, #2
 800529c:	d901      	bls.n	80052a2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e37c      	b.n	800599c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80052a2:	4b37      	ldr	r3, [pc, #220]	; (8005380 <HAL_RCC_OscConfig+0x288>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 0304 	and.w	r3, r3, #4
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d0f0      	beq.n	8005290 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052ae:	f7fd f9c1 	bl	8002634 <HAL_GetREVID>
 80052b2:	4603      	mov	r3, r0
 80052b4:	f241 0203 	movw	r2, #4099	; 0x1003
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d817      	bhi.n	80052ec <HAL_RCC_OscConfig+0x1f4>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	2b40      	cmp	r3, #64	; 0x40
 80052c2:	d108      	bne.n	80052d6 <HAL_RCC_OscConfig+0x1de>
 80052c4:	4b2e      	ldr	r3, [pc, #184]	; (8005380 <HAL_RCC_OscConfig+0x288>)
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80052cc:	4a2c      	ldr	r2, [pc, #176]	; (8005380 <HAL_RCC_OscConfig+0x288>)
 80052ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052d2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052d4:	e07a      	b.n	80053cc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052d6:	4b2a      	ldr	r3, [pc, #168]	; (8005380 <HAL_RCC_OscConfig+0x288>)
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	031b      	lsls	r3, r3, #12
 80052e4:	4926      	ldr	r1, [pc, #152]	; (8005380 <HAL_RCC_OscConfig+0x288>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052ea:	e06f      	b.n	80053cc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052ec:	4b24      	ldr	r3, [pc, #144]	; (8005380 <HAL_RCC_OscConfig+0x288>)
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	061b      	lsls	r3, r3, #24
 80052fa:	4921      	ldr	r1, [pc, #132]	; (8005380 <HAL_RCC_OscConfig+0x288>)
 80052fc:	4313      	orrs	r3, r2
 80052fe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005300:	e064      	b.n	80053cc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d047      	beq.n	800539a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800530a:	4b1d      	ldr	r3, [pc, #116]	; (8005380 <HAL_RCC_OscConfig+0x288>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f023 0219 	bic.w	r2, r3, #25
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	491a      	ldr	r1, [pc, #104]	; (8005380 <HAL_RCC_OscConfig+0x288>)
 8005318:	4313      	orrs	r3, r2
 800531a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800531c:	f7fd f93a 	bl	8002594 <HAL_GetTick>
 8005320:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005322:	e008      	b.n	8005336 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005324:	f7fd f936 	bl	8002594 <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	2b02      	cmp	r3, #2
 8005330:	d901      	bls.n	8005336 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e332      	b.n	800599c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005336:	4b12      	ldr	r3, [pc, #72]	; (8005380 <HAL_RCC_OscConfig+0x288>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0304 	and.w	r3, r3, #4
 800533e:	2b00      	cmp	r3, #0
 8005340:	d0f0      	beq.n	8005324 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005342:	f7fd f977 	bl	8002634 <HAL_GetREVID>
 8005346:	4603      	mov	r3, r0
 8005348:	f241 0203 	movw	r2, #4099	; 0x1003
 800534c:	4293      	cmp	r3, r2
 800534e:	d819      	bhi.n	8005384 <HAL_RCC_OscConfig+0x28c>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	2b40      	cmp	r3, #64	; 0x40
 8005356:	d108      	bne.n	800536a <HAL_RCC_OscConfig+0x272>
 8005358:	4b09      	ldr	r3, [pc, #36]	; (8005380 <HAL_RCC_OscConfig+0x288>)
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005360:	4a07      	ldr	r2, [pc, #28]	; (8005380 <HAL_RCC_OscConfig+0x288>)
 8005362:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005366:	6053      	str	r3, [r2, #4]
 8005368:	e030      	b.n	80053cc <HAL_RCC_OscConfig+0x2d4>
 800536a:	4b05      	ldr	r3, [pc, #20]	; (8005380 <HAL_RCC_OscConfig+0x288>)
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	031b      	lsls	r3, r3, #12
 8005378:	4901      	ldr	r1, [pc, #4]	; (8005380 <HAL_RCC_OscConfig+0x288>)
 800537a:	4313      	orrs	r3, r2
 800537c:	604b      	str	r3, [r1, #4]
 800537e:	e025      	b.n	80053cc <HAL_RCC_OscConfig+0x2d4>
 8005380:	58024400 	.word	0x58024400
 8005384:	4b9a      	ldr	r3, [pc, #616]	; (80055f0 <HAL_RCC_OscConfig+0x4f8>)
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	691b      	ldr	r3, [r3, #16]
 8005390:	061b      	lsls	r3, r3, #24
 8005392:	4997      	ldr	r1, [pc, #604]	; (80055f0 <HAL_RCC_OscConfig+0x4f8>)
 8005394:	4313      	orrs	r3, r2
 8005396:	604b      	str	r3, [r1, #4]
 8005398:	e018      	b.n	80053cc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800539a:	4b95      	ldr	r3, [pc, #596]	; (80055f0 <HAL_RCC_OscConfig+0x4f8>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a94      	ldr	r2, [pc, #592]	; (80055f0 <HAL_RCC_OscConfig+0x4f8>)
 80053a0:	f023 0301 	bic.w	r3, r3, #1
 80053a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053a6:	f7fd f8f5 	bl	8002594 <HAL_GetTick>
 80053aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80053ac:	e008      	b.n	80053c0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053ae:	f7fd f8f1 	bl	8002594 <HAL_GetTick>
 80053b2:	4602      	mov	r2, r0
 80053b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b6:	1ad3      	subs	r3, r2, r3
 80053b8:	2b02      	cmp	r3, #2
 80053ba:	d901      	bls.n	80053c0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80053bc:	2303      	movs	r3, #3
 80053be:	e2ed      	b.n	800599c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80053c0:	4b8b      	ldr	r3, [pc, #556]	; (80055f0 <HAL_RCC_OscConfig+0x4f8>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0304 	and.w	r3, r3, #4
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d1f0      	bne.n	80053ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0310 	and.w	r3, r3, #16
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	f000 80a9 	beq.w	800552c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053da:	4b85      	ldr	r3, [pc, #532]	; (80055f0 <HAL_RCC_OscConfig+0x4f8>)
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053e2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80053e4:	4b82      	ldr	r3, [pc, #520]	; (80055f0 <HAL_RCC_OscConfig+0x4f8>)
 80053e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053e8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	2b08      	cmp	r3, #8
 80053ee:	d007      	beq.n	8005400 <HAL_RCC_OscConfig+0x308>
 80053f0:	69bb      	ldr	r3, [r7, #24]
 80053f2:	2b18      	cmp	r3, #24
 80053f4:	d13a      	bne.n	800546c <HAL_RCC_OscConfig+0x374>
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	f003 0303 	and.w	r3, r3, #3
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d135      	bne.n	800546c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005400:	4b7b      	ldr	r3, [pc, #492]	; (80055f0 <HAL_RCC_OscConfig+0x4f8>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005408:	2b00      	cmp	r3, #0
 800540a:	d005      	beq.n	8005418 <HAL_RCC_OscConfig+0x320>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	69db      	ldr	r3, [r3, #28]
 8005410:	2b80      	cmp	r3, #128	; 0x80
 8005412:	d001      	beq.n	8005418 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e2c1      	b.n	800599c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005418:	f7fd f90c 	bl	8002634 <HAL_GetREVID>
 800541c:	4603      	mov	r3, r0
 800541e:	f241 0203 	movw	r2, #4099	; 0x1003
 8005422:	4293      	cmp	r3, r2
 8005424:	d817      	bhi.n	8005456 <HAL_RCC_OscConfig+0x35e>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a1b      	ldr	r3, [r3, #32]
 800542a:	2b20      	cmp	r3, #32
 800542c:	d108      	bne.n	8005440 <HAL_RCC_OscConfig+0x348>
 800542e:	4b70      	ldr	r3, [pc, #448]	; (80055f0 <HAL_RCC_OscConfig+0x4f8>)
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005436:	4a6e      	ldr	r2, [pc, #440]	; (80055f0 <HAL_RCC_OscConfig+0x4f8>)
 8005438:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800543c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800543e:	e075      	b.n	800552c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005440:	4b6b      	ldr	r3, [pc, #428]	; (80055f0 <HAL_RCC_OscConfig+0x4f8>)
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6a1b      	ldr	r3, [r3, #32]
 800544c:	069b      	lsls	r3, r3, #26
 800544e:	4968      	ldr	r1, [pc, #416]	; (80055f0 <HAL_RCC_OscConfig+0x4f8>)
 8005450:	4313      	orrs	r3, r2
 8005452:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005454:	e06a      	b.n	800552c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005456:	4b66      	ldr	r3, [pc, #408]	; (80055f0 <HAL_RCC_OscConfig+0x4f8>)
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a1b      	ldr	r3, [r3, #32]
 8005462:	061b      	lsls	r3, r3, #24
 8005464:	4962      	ldr	r1, [pc, #392]	; (80055f0 <HAL_RCC_OscConfig+0x4f8>)
 8005466:	4313      	orrs	r3, r2
 8005468:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800546a:	e05f      	b.n	800552c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	69db      	ldr	r3, [r3, #28]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d042      	beq.n	80054fa <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005474:	4b5e      	ldr	r3, [pc, #376]	; (80055f0 <HAL_RCC_OscConfig+0x4f8>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a5d      	ldr	r2, [pc, #372]	; (80055f0 <HAL_RCC_OscConfig+0x4f8>)
 800547a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800547e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005480:	f7fd f888 	bl	8002594 <HAL_GetTick>
 8005484:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005486:	e008      	b.n	800549a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005488:	f7fd f884 	bl	8002594 <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	2b02      	cmp	r3, #2
 8005494:	d901      	bls.n	800549a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e280      	b.n	800599c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800549a:	4b55      	ldr	r3, [pc, #340]	; (80055f0 <HAL_RCC_OscConfig+0x4f8>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d0f0      	beq.n	8005488 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80054a6:	f7fd f8c5 	bl	8002634 <HAL_GetREVID>
 80054aa:	4603      	mov	r3, r0
 80054ac:	f241 0203 	movw	r2, #4099	; 0x1003
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d817      	bhi.n	80054e4 <HAL_RCC_OscConfig+0x3ec>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a1b      	ldr	r3, [r3, #32]
 80054b8:	2b20      	cmp	r3, #32
 80054ba:	d108      	bne.n	80054ce <HAL_RCC_OscConfig+0x3d6>
 80054bc:	4b4c      	ldr	r3, [pc, #304]	; (80055f0 <HAL_RCC_OscConfig+0x4f8>)
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80054c4:	4a4a      	ldr	r2, [pc, #296]	; (80055f0 <HAL_RCC_OscConfig+0x4f8>)
 80054c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054ca:	6053      	str	r3, [r2, #4]
 80054cc:	e02e      	b.n	800552c <HAL_RCC_OscConfig+0x434>
 80054ce:	4b48      	ldr	r3, [pc, #288]	; (80055f0 <HAL_RCC_OscConfig+0x4f8>)
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a1b      	ldr	r3, [r3, #32]
 80054da:	069b      	lsls	r3, r3, #26
 80054dc:	4944      	ldr	r1, [pc, #272]	; (80055f0 <HAL_RCC_OscConfig+0x4f8>)
 80054de:	4313      	orrs	r3, r2
 80054e0:	604b      	str	r3, [r1, #4]
 80054e2:	e023      	b.n	800552c <HAL_RCC_OscConfig+0x434>
 80054e4:	4b42      	ldr	r3, [pc, #264]	; (80055f0 <HAL_RCC_OscConfig+0x4f8>)
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a1b      	ldr	r3, [r3, #32]
 80054f0:	061b      	lsls	r3, r3, #24
 80054f2:	493f      	ldr	r1, [pc, #252]	; (80055f0 <HAL_RCC_OscConfig+0x4f8>)
 80054f4:	4313      	orrs	r3, r2
 80054f6:	60cb      	str	r3, [r1, #12]
 80054f8:	e018      	b.n	800552c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80054fa:	4b3d      	ldr	r3, [pc, #244]	; (80055f0 <HAL_RCC_OscConfig+0x4f8>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a3c      	ldr	r2, [pc, #240]	; (80055f0 <HAL_RCC_OscConfig+0x4f8>)
 8005500:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005504:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005506:	f7fd f845 	bl	8002594 <HAL_GetTick>
 800550a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800550c:	e008      	b.n	8005520 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800550e:	f7fd f841 	bl	8002594 <HAL_GetTick>
 8005512:	4602      	mov	r2, r0
 8005514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005516:	1ad3      	subs	r3, r2, r3
 8005518:	2b02      	cmp	r3, #2
 800551a:	d901      	bls.n	8005520 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800551c:	2303      	movs	r3, #3
 800551e:	e23d      	b.n	800599c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005520:	4b33      	ldr	r3, [pc, #204]	; (80055f0 <HAL_RCC_OscConfig+0x4f8>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005528:	2b00      	cmp	r3, #0
 800552a:	d1f0      	bne.n	800550e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 0308 	and.w	r3, r3, #8
 8005534:	2b00      	cmp	r3, #0
 8005536:	d036      	beq.n	80055a6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	695b      	ldr	r3, [r3, #20]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d019      	beq.n	8005574 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005540:	4b2b      	ldr	r3, [pc, #172]	; (80055f0 <HAL_RCC_OscConfig+0x4f8>)
 8005542:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005544:	4a2a      	ldr	r2, [pc, #168]	; (80055f0 <HAL_RCC_OscConfig+0x4f8>)
 8005546:	f043 0301 	orr.w	r3, r3, #1
 800554a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800554c:	f7fd f822 	bl	8002594 <HAL_GetTick>
 8005550:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005552:	e008      	b.n	8005566 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005554:	f7fd f81e 	bl	8002594 <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	2b02      	cmp	r3, #2
 8005560:	d901      	bls.n	8005566 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e21a      	b.n	800599c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005566:	4b22      	ldr	r3, [pc, #136]	; (80055f0 <HAL_RCC_OscConfig+0x4f8>)
 8005568:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800556a:	f003 0302 	and.w	r3, r3, #2
 800556e:	2b00      	cmp	r3, #0
 8005570:	d0f0      	beq.n	8005554 <HAL_RCC_OscConfig+0x45c>
 8005572:	e018      	b.n	80055a6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005574:	4b1e      	ldr	r3, [pc, #120]	; (80055f0 <HAL_RCC_OscConfig+0x4f8>)
 8005576:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005578:	4a1d      	ldr	r2, [pc, #116]	; (80055f0 <HAL_RCC_OscConfig+0x4f8>)
 800557a:	f023 0301 	bic.w	r3, r3, #1
 800557e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005580:	f7fd f808 	bl	8002594 <HAL_GetTick>
 8005584:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005586:	e008      	b.n	800559a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005588:	f7fd f804 	bl	8002594 <HAL_GetTick>
 800558c:	4602      	mov	r2, r0
 800558e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	2b02      	cmp	r3, #2
 8005594:	d901      	bls.n	800559a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	e200      	b.n	800599c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800559a:	4b15      	ldr	r3, [pc, #84]	; (80055f0 <HAL_RCC_OscConfig+0x4f8>)
 800559c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800559e:	f003 0302 	and.w	r3, r3, #2
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d1f0      	bne.n	8005588 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 0320 	and.w	r3, r3, #32
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d039      	beq.n	8005626 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	699b      	ldr	r3, [r3, #24]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d01c      	beq.n	80055f4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80055ba:	4b0d      	ldr	r3, [pc, #52]	; (80055f0 <HAL_RCC_OscConfig+0x4f8>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a0c      	ldr	r2, [pc, #48]	; (80055f0 <HAL_RCC_OscConfig+0x4f8>)
 80055c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80055c4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80055c6:	f7fc ffe5 	bl	8002594 <HAL_GetTick>
 80055ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80055cc:	e008      	b.n	80055e0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055ce:	f7fc ffe1 	bl	8002594 <HAL_GetTick>
 80055d2:	4602      	mov	r2, r0
 80055d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d6:	1ad3      	subs	r3, r2, r3
 80055d8:	2b02      	cmp	r3, #2
 80055da:	d901      	bls.n	80055e0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80055dc:	2303      	movs	r3, #3
 80055de:	e1dd      	b.n	800599c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80055e0:	4b03      	ldr	r3, [pc, #12]	; (80055f0 <HAL_RCC_OscConfig+0x4f8>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d0f0      	beq.n	80055ce <HAL_RCC_OscConfig+0x4d6>
 80055ec:	e01b      	b.n	8005626 <HAL_RCC_OscConfig+0x52e>
 80055ee:	bf00      	nop
 80055f0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80055f4:	4b9b      	ldr	r3, [pc, #620]	; (8005864 <HAL_RCC_OscConfig+0x76c>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a9a      	ldr	r2, [pc, #616]	; (8005864 <HAL_RCC_OscConfig+0x76c>)
 80055fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055fe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005600:	f7fc ffc8 	bl	8002594 <HAL_GetTick>
 8005604:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005606:	e008      	b.n	800561a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005608:	f7fc ffc4 	bl	8002594 <HAL_GetTick>
 800560c:	4602      	mov	r2, r0
 800560e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	2b02      	cmp	r3, #2
 8005614:	d901      	bls.n	800561a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e1c0      	b.n	800599c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800561a:	4b92      	ldr	r3, [pc, #584]	; (8005864 <HAL_RCC_OscConfig+0x76c>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d1f0      	bne.n	8005608 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 0304 	and.w	r3, r3, #4
 800562e:	2b00      	cmp	r3, #0
 8005630:	f000 8081 	beq.w	8005736 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005634:	4b8c      	ldr	r3, [pc, #560]	; (8005868 <HAL_RCC_OscConfig+0x770>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a8b      	ldr	r2, [pc, #556]	; (8005868 <HAL_RCC_OscConfig+0x770>)
 800563a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800563e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005640:	f7fc ffa8 	bl	8002594 <HAL_GetTick>
 8005644:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005646:	e008      	b.n	800565a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005648:	f7fc ffa4 	bl	8002594 <HAL_GetTick>
 800564c:	4602      	mov	r2, r0
 800564e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	2b64      	cmp	r3, #100	; 0x64
 8005654:	d901      	bls.n	800565a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e1a0      	b.n	800599c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800565a:	4b83      	ldr	r3, [pc, #524]	; (8005868 <HAL_RCC_OscConfig+0x770>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005662:	2b00      	cmp	r3, #0
 8005664:	d0f0      	beq.n	8005648 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	2b01      	cmp	r3, #1
 800566c:	d106      	bne.n	800567c <HAL_RCC_OscConfig+0x584>
 800566e:	4b7d      	ldr	r3, [pc, #500]	; (8005864 <HAL_RCC_OscConfig+0x76c>)
 8005670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005672:	4a7c      	ldr	r2, [pc, #496]	; (8005864 <HAL_RCC_OscConfig+0x76c>)
 8005674:	f043 0301 	orr.w	r3, r3, #1
 8005678:	6713      	str	r3, [r2, #112]	; 0x70
 800567a:	e02d      	b.n	80056d8 <HAL_RCC_OscConfig+0x5e0>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d10c      	bne.n	800569e <HAL_RCC_OscConfig+0x5a6>
 8005684:	4b77      	ldr	r3, [pc, #476]	; (8005864 <HAL_RCC_OscConfig+0x76c>)
 8005686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005688:	4a76      	ldr	r2, [pc, #472]	; (8005864 <HAL_RCC_OscConfig+0x76c>)
 800568a:	f023 0301 	bic.w	r3, r3, #1
 800568e:	6713      	str	r3, [r2, #112]	; 0x70
 8005690:	4b74      	ldr	r3, [pc, #464]	; (8005864 <HAL_RCC_OscConfig+0x76c>)
 8005692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005694:	4a73      	ldr	r2, [pc, #460]	; (8005864 <HAL_RCC_OscConfig+0x76c>)
 8005696:	f023 0304 	bic.w	r3, r3, #4
 800569a:	6713      	str	r3, [r2, #112]	; 0x70
 800569c:	e01c      	b.n	80056d8 <HAL_RCC_OscConfig+0x5e0>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	2b05      	cmp	r3, #5
 80056a4:	d10c      	bne.n	80056c0 <HAL_RCC_OscConfig+0x5c8>
 80056a6:	4b6f      	ldr	r3, [pc, #444]	; (8005864 <HAL_RCC_OscConfig+0x76c>)
 80056a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056aa:	4a6e      	ldr	r2, [pc, #440]	; (8005864 <HAL_RCC_OscConfig+0x76c>)
 80056ac:	f043 0304 	orr.w	r3, r3, #4
 80056b0:	6713      	str	r3, [r2, #112]	; 0x70
 80056b2:	4b6c      	ldr	r3, [pc, #432]	; (8005864 <HAL_RCC_OscConfig+0x76c>)
 80056b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056b6:	4a6b      	ldr	r2, [pc, #428]	; (8005864 <HAL_RCC_OscConfig+0x76c>)
 80056b8:	f043 0301 	orr.w	r3, r3, #1
 80056bc:	6713      	str	r3, [r2, #112]	; 0x70
 80056be:	e00b      	b.n	80056d8 <HAL_RCC_OscConfig+0x5e0>
 80056c0:	4b68      	ldr	r3, [pc, #416]	; (8005864 <HAL_RCC_OscConfig+0x76c>)
 80056c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056c4:	4a67      	ldr	r2, [pc, #412]	; (8005864 <HAL_RCC_OscConfig+0x76c>)
 80056c6:	f023 0301 	bic.w	r3, r3, #1
 80056ca:	6713      	str	r3, [r2, #112]	; 0x70
 80056cc:	4b65      	ldr	r3, [pc, #404]	; (8005864 <HAL_RCC_OscConfig+0x76c>)
 80056ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056d0:	4a64      	ldr	r2, [pc, #400]	; (8005864 <HAL_RCC_OscConfig+0x76c>)
 80056d2:	f023 0304 	bic.w	r3, r3, #4
 80056d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d015      	beq.n	800570c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056e0:	f7fc ff58 	bl	8002594 <HAL_GetTick>
 80056e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80056e6:	e00a      	b.n	80056fe <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056e8:	f7fc ff54 	bl	8002594 <HAL_GetTick>
 80056ec:	4602      	mov	r2, r0
 80056ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d901      	bls.n	80056fe <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80056fa:	2303      	movs	r3, #3
 80056fc:	e14e      	b.n	800599c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80056fe:	4b59      	ldr	r3, [pc, #356]	; (8005864 <HAL_RCC_OscConfig+0x76c>)
 8005700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005702:	f003 0302 	and.w	r3, r3, #2
 8005706:	2b00      	cmp	r3, #0
 8005708:	d0ee      	beq.n	80056e8 <HAL_RCC_OscConfig+0x5f0>
 800570a:	e014      	b.n	8005736 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800570c:	f7fc ff42 	bl	8002594 <HAL_GetTick>
 8005710:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005712:	e00a      	b.n	800572a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005714:	f7fc ff3e 	bl	8002594 <HAL_GetTick>
 8005718:	4602      	mov	r2, r0
 800571a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005722:	4293      	cmp	r3, r2
 8005724:	d901      	bls.n	800572a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005726:	2303      	movs	r3, #3
 8005728:	e138      	b.n	800599c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800572a:	4b4e      	ldr	r3, [pc, #312]	; (8005864 <HAL_RCC_OscConfig+0x76c>)
 800572c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800572e:	f003 0302 	and.w	r3, r3, #2
 8005732:	2b00      	cmp	r3, #0
 8005734:	d1ee      	bne.n	8005714 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573a:	2b00      	cmp	r3, #0
 800573c:	f000 812d 	beq.w	800599a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005740:	4b48      	ldr	r3, [pc, #288]	; (8005864 <HAL_RCC_OscConfig+0x76c>)
 8005742:	691b      	ldr	r3, [r3, #16]
 8005744:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005748:	2b18      	cmp	r3, #24
 800574a:	f000 80bd 	beq.w	80058c8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005752:	2b02      	cmp	r3, #2
 8005754:	f040 809e 	bne.w	8005894 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005758:	4b42      	ldr	r3, [pc, #264]	; (8005864 <HAL_RCC_OscConfig+0x76c>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a41      	ldr	r2, [pc, #260]	; (8005864 <HAL_RCC_OscConfig+0x76c>)
 800575e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005762:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005764:	f7fc ff16 	bl	8002594 <HAL_GetTick>
 8005768:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800576a:	e008      	b.n	800577e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800576c:	f7fc ff12 	bl	8002594 <HAL_GetTick>
 8005770:	4602      	mov	r2, r0
 8005772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	2b02      	cmp	r3, #2
 8005778:	d901      	bls.n	800577e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e10e      	b.n	800599c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800577e:	4b39      	ldr	r3, [pc, #228]	; (8005864 <HAL_RCC_OscConfig+0x76c>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005786:	2b00      	cmp	r3, #0
 8005788:	d1f0      	bne.n	800576c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800578a:	4b36      	ldr	r3, [pc, #216]	; (8005864 <HAL_RCC_OscConfig+0x76c>)
 800578c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800578e:	4b37      	ldr	r3, [pc, #220]	; (800586c <HAL_RCC_OscConfig+0x774>)
 8005790:	4013      	ands	r3, r2
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800579a:	0112      	lsls	r2, r2, #4
 800579c:	430a      	orrs	r2, r1
 800579e:	4931      	ldr	r1, [pc, #196]	; (8005864 <HAL_RCC_OscConfig+0x76c>)
 80057a0:	4313      	orrs	r3, r2
 80057a2:	628b      	str	r3, [r1, #40]	; 0x28
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a8:	3b01      	subs	r3, #1
 80057aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057b2:	3b01      	subs	r3, #1
 80057b4:	025b      	lsls	r3, r3, #9
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	431a      	orrs	r2, r3
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057be:	3b01      	subs	r3, #1
 80057c0:	041b      	lsls	r3, r3, #16
 80057c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80057c6:	431a      	orrs	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057cc:	3b01      	subs	r3, #1
 80057ce:	061b      	lsls	r3, r3, #24
 80057d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80057d4:	4923      	ldr	r1, [pc, #140]	; (8005864 <HAL_RCC_OscConfig+0x76c>)
 80057d6:	4313      	orrs	r3, r2
 80057d8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80057da:	4b22      	ldr	r3, [pc, #136]	; (8005864 <HAL_RCC_OscConfig+0x76c>)
 80057dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057de:	4a21      	ldr	r2, [pc, #132]	; (8005864 <HAL_RCC_OscConfig+0x76c>)
 80057e0:	f023 0301 	bic.w	r3, r3, #1
 80057e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80057e6:	4b1f      	ldr	r3, [pc, #124]	; (8005864 <HAL_RCC_OscConfig+0x76c>)
 80057e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057ea:	4b21      	ldr	r3, [pc, #132]	; (8005870 <HAL_RCC_OscConfig+0x778>)
 80057ec:	4013      	ands	r3, r2
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80057f2:	00d2      	lsls	r2, r2, #3
 80057f4:	491b      	ldr	r1, [pc, #108]	; (8005864 <HAL_RCC_OscConfig+0x76c>)
 80057f6:	4313      	orrs	r3, r2
 80057f8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80057fa:	4b1a      	ldr	r3, [pc, #104]	; (8005864 <HAL_RCC_OscConfig+0x76c>)
 80057fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057fe:	f023 020c 	bic.w	r2, r3, #12
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005806:	4917      	ldr	r1, [pc, #92]	; (8005864 <HAL_RCC_OscConfig+0x76c>)
 8005808:	4313      	orrs	r3, r2
 800580a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800580c:	4b15      	ldr	r3, [pc, #84]	; (8005864 <HAL_RCC_OscConfig+0x76c>)
 800580e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005810:	f023 0202 	bic.w	r2, r3, #2
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005818:	4912      	ldr	r1, [pc, #72]	; (8005864 <HAL_RCC_OscConfig+0x76c>)
 800581a:	4313      	orrs	r3, r2
 800581c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800581e:	4b11      	ldr	r3, [pc, #68]	; (8005864 <HAL_RCC_OscConfig+0x76c>)
 8005820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005822:	4a10      	ldr	r2, [pc, #64]	; (8005864 <HAL_RCC_OscConfig+0x76c>)
 8005824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005828:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800582a:	4b0e      	ldr	r3, [pc, #56]	; (8005864 <HAL_RCC_OscConfig+0x76c>)
 800582c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582e:	4a0d      	ldr	r2, [pc, #52]	; (8005864 <HAL_RCC_OscConfig+0x76c>)
 8005830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005834:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005836:	4b0b      	ldr	r3, [pc, #44]	; (8005864 <HAL_RCC_OscConfig+0x76c>)
 8005838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800583a:	4a0a      	ldr	r2, [pc, #40]	; (8005864 <HAL_RCC_OscConfig+0x76c>)
 800583c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005840:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005842:	4b08      	ldr	r3, [pc, #32]	; (8005864 <HAL_RCC_OscConfig+0x76c>)
 8005844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005846:	4a07      	ldr	r2, [pc, #28]	; (8005864 <HAL_RCC_OscConfig+0x76c>)
 8005848:	f043 0301 	orr.w	r3, r3, #1
 800584c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800584e:	4b05      	ldr	r3, [pc, #20]	; (8005864 <HAL_RCC_OscConfig+0x76c>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a04      	ldr	r2, [pc, #16]	; (8005864 <HAL_RCC_OscConfig+0x76c>)
 8005854:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005858:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800585a:	f7fc fe9b 	bl	8002594 <HAL_GetTick>
 800585e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005860:	e011      	b.n	8005886 <HAL_RCC_OscConfig+0x78e>
 8005862:	bf00      	nop
 8005864:	58024400 	.word	0x58024400
 8005868:	58024800 	.word	0x58024800
 800586c:	fffffc0c 	.word	0xfffffc0c
 8005870:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005874:	f7fc fe8e 	bl	8002594 <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	2b02      	cmp	r3, #2
 8005880:	d901      	bls.n	8005886 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005882:	2303      	movs	r3, #3
 8005884:	e08a      	b.n	800599c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005886:	4b47      	ldr	r3, [pc, #284]	; (80059a4 <HAL_RCC_OscConfig+0x8ac>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800588e:	2b00      	cmp	r3, #0
 8005890:	d0f0      	beq.n	8005874 <HAL_RCC_OscConfig+0x77c>
 8005892:	e082      	b.n	800599a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005894:	4b43      	ldr	r3, [pc, #268]	; (80059a4 <HAL_RCC_OscConfig+0x8ac>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a42      	ldr	r2, [pc, #264]	; (80059a4 <HAL_RCC_OscConfig+0x8ac>)
 800589a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800589e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058a0:	f7fc fe78 	bl	8002594 <HAL_GetTick>
 80058a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80058a6:	e008      	b.n	80058ba <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058a8:	f7fc fe74 	bl	8002594 <HAL_GetTick>
 80058ac:	4602      	mov	r2, r0
 80058ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	2b02      	cmp	r3, #2
 80058b4:	d901      	bls.n	80058ba <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80058b6:	2303      	movs	r3, #3
 80058b8:	e070      	b.n	800599c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80058ba:	4b3a      	ldr	r3, [pc, #232]	; (80059a4 <HAL_RCC_OscConfig+0x8ac>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d1f0      	bne.n	80058a8 <HAL_RCC_OscConfig+0x7b0>
 80058c6:	e068      	b.n	800599a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80058c8:	4b36      	ldr	r3, [pc, #216]	; (80059a4 <HAL_RCC_OscConfig+0x8ac>)
 80058ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058cc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80058ce:	4b35      	ldr	r3, [pc, #212]	; (80059a4 <HAL_RCC_OscConfig+0x8ac>)
 80058d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d031      	beq.n	8005940 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	f003 0203 	and.w	r2, r3, #3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d12a      	bne.n	8005940 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	091b      	lsrs	r3, r3, #4
 80058ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d122      	bne.n	8005940 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005904:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005906:	429a      	cmp	r2, r3
 8005908:	d11a      	bne.n	8005940 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	0a5b      	lsrs	r3, r3, #9
 800590e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005916:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005918:	429a      	cmp	r2, r3
 800591a:	d111      	bne.n	8005940 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	0c1b      	lsrs	r3, r3, #16
 8005920:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005928:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800592a:	429a      	cmp	r2, r3
 800592c:	d108      	bne.n	8005940 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	0e1b      	lsrs	r3, r3, #24
 8005932:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800593a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800593c:	429a      	cmp	r2, r3
 800593e:	d001      	beq.n	8005944 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	e02b      	b.n	800599c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005944:	4b17      	ldr	r3, [pc, #92]	; (80059a4 <HAL_RCC_OscConfig+0x8ac>)
 8005946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005948:	08db      	lsrs	r3, r3, #3
 800594a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800594e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005954:	693a      	ldr	r2, [r7, #16]
 8005956:	429a      	cmp	r2, r3
 8005958:	d01f      	beq.n	800599a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800595a:	4b12      	ldr	r3, [pc, #72]	; (80059a4 <HAL_RCC_OscConfig+0x8ac>)
 800595c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800595e:	4a11      	ldr	r2, [pc, #68]	; (80059a4 <HAL_RCC_OscConfig+0x8ac>)
 8005960:	f023 0301 	bic.w	r3, r3, #1
 8005964:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005966:	f7fc fe15 	bl	8002594 <HAL_GetTick>
 800596a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800596c:	bf00      	nop
 800596e:	f7fc fe11 	bl	8002594 <HAL_GetTick>
 8005972:	4602      	mov	r2, r0
 8005974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005976:	4293      	cmp	r3, r2
 8005978:	d0f9      	beq.n	800596e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800597a:	4b0a      	ldr	r3, [pc, #40]	; (80059a4 <HAL_RCC_OscConfig+0x8ac>)
 800597c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800597e:	4b0a      	ldr	r3, [pc, #40]	; (80059a8 <HAL_RCC_OscConfig+0x8b0>)
 8005980:	4013      	ands	r3, r2
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005986:	00d2      	lsls	r2, r2, #3
 8005988:	4906      	ldr	r1, [pc, #24]	; (80059a4 <HAL_RCC_OscConfig+0x8ac>)
 800598a:	4313      	orrs	r3, r2
 800598c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800598e:	4b05      	ldr	r3, [pc, #20]	; (80059a4 <HAL_RCC_OscConfig+0x8ac>)
 8005990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005992:	4a04      	ldr	r2, [pc, #16]	; (80059a4 <HAL_RCC_OscConfig+0x8ac>)
 8005994:	f043 0301 	orr.w	r3, r3, #1
 8005998:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800599a:	2300      	movs	r3, #0
}
 800599c:	4618      	mov	r0, r3
 800599e:	3730      	adds	r7, #48	; 0x30
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}
 80059a4:	58024400 	.word	0x58024400
 80059a8:	ffff0007 	.word	0xffff0007

080059ac <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b086      	sub	sp, #24
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d101      	bne.n	80059c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	e19c      	b.n	8005cfa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80059c0:	4b8a      	ldr	r3, [pc, #552]	; (8005bec <HAL_RCC_ClockConfig+0x240>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 030f 	and.w	r3, r3, #15
 80059c8:	683a      	ldr	r2, [r7, #0]
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d910      	bls.n	80059f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059ce:	4b87      	ldr	r3, [pc, #540]	; (8005bec <HAL_RCC_ClockConfig+0x240>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f023 020f 	bic.w	r2, r3, #15
 80059d6:	4985      	ldr	r1, [pc, #532]	; (8005bec <HAL_RCC_ClockConfig+0x240>)
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	4313      	orrs	r3, r2
 80059dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059de:	4b83      	ldr	r3, [pc, #524]	; (8005bec <HAL_RCC_ClockConfig+0x240>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 030f 	and.w	r3, r3, #15
 80059e6:	683a      	ldr	r2, [r7, #0]
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d001      	beq.n	80059f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e184      	b.n	8005cfa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 0304 	and.w	r3, r3, #4
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d010      	beq.n	8005a1e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	691a      	ldr	r2, [r3, #16]
 8005a00:	4b7b      	ldr	r3, [pc, #492]	; (8005bf0 <HAL_RCC_ClockConfig+0x244>)
 8005a02:	699b      	ldr	r3, [r3, #24]
 8005a04:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d908      	bls.n	8005a1e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005a0c:	4b78      	ldr	r3, [pc, #480]	; (8005bf0 <HAL_RCC_ClockConfig+0x244>)
 8005a0e:	699b      	ldr	r3, [r3, #24]
 8005a10:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	4975      	ldr	r1, [pc, #468]	; (8005bf0 <HAL_RCC_ClockConfig+0x244>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 0308 	and.w	r3, r3, #8
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d010      	beq.n	8005a4c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	695a      	ldr	r2, [r3, #20]
 8005a2e:	4b70      	ldr	r3, [pc, #448]	; (8005bf0 <HAL_RCC_ClockConfig+0x244>)
 8005a30:	69db      	ldr	r3, [r3, #28]
 8005a32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d908      	bls.n	8005a4c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005a3a:	4b6d      	ldr	r3, [pc, #436]	; (8005bf0 <HAL_RCC_ClockConfig+0x244>)
 8005a3c:	69db      	ldr	r3, [r3, #28]
 8005a3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	695b      	ldr	r3, [r3, #20]
 8005a46:	496a      	ldr	r1, [pc, #424]	; (8005bf0 <HAL_RCC_ClockConfig+0x244>)
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0310 	and.w	r3, r3, #16
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d010      	beq.n	8005a7a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	699a      	ldr	r2, [r3, #24]
 8005a5c:	4b64      	ldr	r3, [pc, #400]	; (8005bf0 <HAL_RCC_ClockConfig+0x244>)
 8005a5e:	69db      	ldr	r3, [r3, #28]
 8005a60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d908      	bls.n	8005a7a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005a68:	4b61      	ldr	r3, [pc, #388]	; (8005bf0 <HAL_RCC_ClockConfig+0x244>)
 8005a6a:	69db      	ldr	r3, [r3, #28]
 8005a6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	699b      	ldr	r3, [r3, #24]
 8005a74:	495e      	ldr	r1, [pc, #376]	; (8005bf0 <HAL_RCC_ClockConfig+0x244>)
 8005a76:	4313      	orrs	r3, r2
 8005a78:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 0320 	and.w	r3, r3, #32
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d010      	beq.n	8005aa8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	69da      	ldr	r2, [r3, #28]
 8005a8a:	4b59      	ldr	r3, [pc, #356]	; (8005bf0 <HAL_RCC_ClockConfig+0x244>)
 8005a8c:	6a1b      	ldr	r3, [r3, #32]
 8005a8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d908      	bls.n	8005aa8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005a96:	4b56      	ldr	r3, [pc, #344]	; (8005bf0 <HAL_RCC_ClockConfig+0x244>)
 8005a98:	6a1b      	ldr	r3, [r3, #32]
 8005a9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	69db      	ldr	r3, [r3, #28]
 8005aa2:	4953      	ldr	r1, [pc, #332]	; (8005bf0 <HAL_RCC_ClockConfig+0x244>)
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 0302 	and.w	r3, r3, #2
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d010      	beq.n	8005ad6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	68da      	ldr	r2, [r3, #12]
 8005ab8:	4b4d      	ldr	r3, [pc, #308]	; (8005bf0 <HAL_RCC_ClockConfig+0x244>)
 8005aba:	699b      	ldr	r3, [r3, #24]
 8005abc:	f003 030f 	and.w	r3, r3, #15
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d908      	bls.n	8005ad6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ac4:	4b4a      	ldr	r3, [pc, #296]	; (8005bf0 <HAL_RCC_ClockConfig+0x244>)
 8005ac6:	699b      	ldr	r3, [r3, #24]
 8005ac8:	f023 020f 	bic.w	r2, r3, #15
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	4947      	ldr	r1, [pc, #284]	; (8005bf0 <HAL_RCC_ClockConfig+0x244>)
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 0301 	and.w	r3, r3, #1
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d055      	beq.n	8005b8e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005ae2:	4b43      	ldr	r3, [pc, #268]	; (8005bf0 <HAL_RCC_ClockConfig+0x244>)
 8005ae4:	699b      	ldr	r3, [r3, #24]
 8005ae6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	4940      	ldr	r1, [pc, #256]	; (8005bf0 <HAL_RCC_ClockConfig+0x244>)
 8005af0:	4313      	orrs	r3, r2
 8005af2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d107      	bne.n	8005b0c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005afc:	4b3c      	ldr	r3, [pc, #240]	; (8005bf0 <HAL_RCC_ClockConfig+0x244>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d121      	bne.n	8005b4c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e0f6      	b.n	8005cfa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	2b03      	cmp	r3, #3
 8005b12:	d107      	bne.n	8005b24 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005b14:	4b36      	ldr	r3, [pc, #216]	; (8005bf0 <HAL_RCC_ClockConfig+0x244>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d115      	bne.n	8005b4c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e0ea      	b.n	8005cfa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d107      	bne.n	8005b3c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005b2c:	4b30      	ldr	r3, [pc, #192]	; (8005bf0 <HAL_RCC_ClockConfig+0x244>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d109      	bne.n	8005b4c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e0de      	b.n	8005cfa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b3c:	4b2c      	ldr	r3, [pc, #176]	; (8005bf0 <HAL_RCC_ClockConfig+0x244>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 0304 	and.w	r3, r3, #4
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d101      	bne.n	8005b4c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e0d6      	b.n	8005cfa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005b4c:	4b28      	ldr	r3, [pc, #160]	; (8005bf0 <HAL_RCC_ClockConfig+0x244>)
 8005b4e:	691b      	ldr	r3, [r3, #16]
 8005b50:	f023 0207 	bic.w	r2, r3, #7
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	4925      	ldr	r1, [pc, #148]	; (8005bf0 <HAL_RCC_ClockConfig+0x244>)
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b5e:	f7fc fd19 	bl	8002594 <HAL_GetTick>
 8005b62:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b64:	e00a      	b.n	8005b7c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b66:	f7fc fd15 	bl	8002594 <HAL_GetTick>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	1ad3      	subs	r3, r2, r3
 8005b70:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d901      	bls.n	8005b7c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005b78:	2303      	movs	r3, #3
 8005b7a:	e0be      	b.n	8005cfa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b7c:	4b1c      	ldr	r3, [pc, #112]	; (8005bf0 <HAL_RCC_ClockConfig+0x244>)
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	00db      	lsls	r3, r3, #3
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d1eb      	bne.n	8005b66 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 0302 	and.w	r3, r3, #2
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d010      	beq.n	8005bbc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	68da      	ldr	r2, [r3, #12]
 8005b9e:	4b14      	ldr	r3, [pc, #80]	; (8005bf0 <HAL_RCC_ClockConfig+0x244>)
 8005ba0:	699b      	ldr	r3, [r3, #24]
 8005ba2:	f003 030f 	and.w	r3, r3, #15
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d208      	bcs.n	8005bbc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005baa:	4b11      	ldr	r3, [pc, #68]	; (8005bf0 <HAL_RCC_ClockConfig+0x244>)
 8005bac:	699b      	ldr	r3, [r3, #24]
 8005bae:	f023 020f 	bic.w	r2, r3, #15
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	490e      	ldr	r1, [pc, #56]	; (8005bf0 <HAL_RCC_ClockConfig+0x244>)
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005bbc:	4b0b      	ldr	r3, [pc, #44]	; (8005bec <HAL_RCC_ClockConfig+0x240>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 030f 	and.w	r3, r3, #15
 8005bc4:	683a      	ldr	r2, [r7, #0]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d214      	bcs.n	8005bf4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bca:	4b08      	ldr	r3, [pc, #32]	; (8005bec <HAL_RCC_ClockConfig+0x240>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f023 020f 	bic.w	r2, r3, #15
 8005bd2:	4906      	ldr	r1, [pc, #24]	; (8005bec <HAL_RCC_ClockConfig+0x240>)
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bda:	4b04      	ldr	r3, [pc, #16]	; (8005bec <HAL_RCC_ClockConfig+0x240>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 030f 	and.w	r3, r3, #15
 8005be2:	683a      	ldr	r2, [r7, #0]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d005      	beq.n	8005bf4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e086      	b.n	8005cfa <HAL_RCC_ClockConfig+0x34e>
 8005bec:	52002000 	.word	0x52002000
 8005bf0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 0304 	and.w	r3, r3, #4
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d010      	beq.n	8005c22 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	691a      	ldr	r2, [r3, #16]
 8005c04:	4b3f      	ldr	r3, [pc, #252]	; (8005d04 <HAL_RCC_ClockConfig+0x358>)
 8005c06:	699b      	ldr	r3, [r3, #24]
 8005c08:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d208      	bcs.n	8005c22 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005c10:	4b3c      	ldr	r3, [pc, #240]	; (8005d04 <HAL_RCC_ClockConfig+0x358>)
 8005c12:	699b      	ldr	r3, [r3, #24]
 8005c14:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	4939      	ldr	r1, [pc, #228]	; (8005d04 <HAL_RCC_ClockConfig+0x358>)
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 0308 	and.w	r3, r3, #8
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d010      	beq.n	8005c50 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	695a      	ldr	r2, [r3, #20]
 8005c32:	4b34      	ldr	r3, [pc, #208]	; (8005d04 <HAL_RCC_ClockConfig+0x358>)
 8005c34:	69db      	ldr	r3, [r3, #28]
 8005c36:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d208      	bcs.n	8005c50 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005c3e:	4b31      	ldr	r3, [pc, #196]	; (8005d04 <HAL_RCC_ClockConfig+0x358>)
 8005c40:	69db      	ldr	r3, [r3, #28]
 8005c42:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	695b      	ldr	r3, [r3, #20]
 8005c4a:	492e      	ldr	r1, [pc, #184]	; (8005d04 <HAL_RCC_ClockConfig+0x358>)
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f003 0310 	and.w	r3, r3, #16
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d010      	beq.n	8005c7e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	699a      	ldr	r2, [r3, #24]
 8005c60:	4b28      	ldr	r3, [pc, #160]	; (8005d04 <HAL_RCC_ClockConfig+0x358>)
 8005c62:	69db      	ldr	r3, [r3, #28]
 8005c64:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d208      	bcs.n	8005c7e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005c6c:	4b25      	ldr	r3, [pc, #148]	; (8005d04 <HAL_RCC_ClockConfig+0x358>)
 8005c6e:	69db      	ldr	r3, [r3, #28]
 8005c70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	699b      	ldr	r3, [r3, #24]
 8005c78:	4922      	ldr	r1, [pc, #136]	; (8005d04 <HAL_RCC_ClockConfig+0x358>)
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 0320 	and.w	r3, r3, #32
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d010      	beq.n	8005cac <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	69da      	ldr	r2, [r3, #28]
 8005c8e:	4b1d      	ldr	r3, [pc, #116]	; (8005d04 <HAL_RCC_ClockConfig+0x358>)
 8005c90:	6a1b      	ldr	r3, [r3, #32]
 8005c92:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d208      	bcs.n	8005cac <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005c9a:	4b1a      	ldr	r3, [pc, #104]	; (8005d04 <HAL_RCC_ClockConfig+0x358>)
 8005c9c:	6a1b      	ldr	r3, [r3, #32]
 8005c9e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	69db      	ldr	r3, [r3, #28]
 8005ca6:	4917      	ldr	r1, [pc, #92]	; (8005d04 <HAL_RCC_ClockConfig+0x358>)
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005cac:	f000 f844 	bl	8005d38 <HAL_RCC_GetSysClockFreq>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	4b14      	ldr	r3, [pc, #80]	; (8005d04 <HAL_RCC_ClockConfig+0x358>)
 8005cb4:	699b      	ldr	r3, [r3, #24]
 8005cb6:	0a1b      	lsrs	r3, r3, #8
 8005cb8:	f003 030f 	and.w	r3, r3, #15
 8005cbc:	4912      	ldr	r1, [pc, #72]	; (8005d08 <HAL_RCC_ClockConfig+0x35c>)
 8005cbe:	5ccb      	ldrb	r3, [r1, r3]
 8005cc0:	f003 031f 	and.w	r3, r3, #31
 8005cc4:	fa22 f303 	lsr.w	r3, r2, r3
 8005cc8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005cca:	4b0e      	ldr	r3, [pc, #56]	; (8005d04 <HAL_RCC_ClockConfig+0x358>)
 8005ccc:	699b      	ldr	r3, [r3, #24]
 8005cce:	f003 030f 	and.w	r3, r3, #15
 8005cd2:	4a0d      	ldr	r2, [pc, #52]	; (8005d08 <HAL_RCC_ClockConfig+0x35c>)
 8005cd4:	5cd3      	ldrb	r3, [r2, r3]
 8005cd6:	f003 031f 	and.w	r3, r3, #31
 8005cda:	693a      	ldr	r2, [r7, #16]
 8005cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8005ce0:	4a0a      	ldr	r2, [pc, #40]	; (8005d0c <HAL_RCC_ClockConfig+0x360>)
 8005ce2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005ce4:	4a0a      	ldr	r2, [pc, #40]	; (8005d10 <HAL_RCC_ClockConfig+0x364>)
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005cea:	4b0a      	ldr	r3, [pc, #40]	; (8005d14 <HAL_RCC_ClockConfig+0x368>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f7fc fc06 	bl	8002500 <HAL_InitTick>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3718      	adds	r7, #24
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop
 8005d04:	58024400 	.word	0x58024400
 8005d08:	0800a988 	.word	0x0800a988
 8005d0c:	20000018 	.word	0x20000018
 8005d10:	20000014 	.word	0x20000014
 8005d14:	2000001c 	.word	0x2000001c

08005d18 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 8005d1c:	4b05      	ldr	r3, [pc, #20]	; (8005d34 <HAL_RCC_EnableCSS+0x1c>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a04      	ldr	r2, [pc, #16]	; (8005d34 <HAL_RCC_EnableCSS+0x1c>)
 8005d22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d26:	6013      	str	r3, [r2, #0]
}
 8005d28:	bf00      	nop
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop
 8005d34:	58024400 	.word	0x58024400

08005d38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b089      	sub	sp, #36	; 0x24
 8005d3c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d3e:	4bb3      	ldr	r3, [pc, #716]	; (800600c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d46:	2b18      	cmp	r3, #24
 8005d48:	f200 8155 	bhi.w	8005ff6 <HAL_RCC_GetSysClockFreq+0x2be>
 8005d4c:	a201      	add	r2, pc, #4	; (adr r2, 8005d54 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d52:	bf00      	nop
 8005d54:	08005db9 	.word	0x08005db9
 8005d58:	08005ff7 	.word	0x08005ff7
 8005d5c:	08005ff7 	.word	0x08005ff7
 8005d60:	08005ff7 	.word	0x08005ff7
 8005d64:	08005ff7 	.word	0x08005ff7
 8005d68:	08005ff7 	.word	0x08005ff7
 8005d6c:	08005ff7 	.word	0x08005ff7
 8005d70:	08005ff7 	.word	0x08005ff7
 8005d74:	08005ddf 	.word	0x08005ddf
 8005d78:	08005ff7 	.word	0x08005ff7
 8005d7c:	08005ff7 	.word	0x08005ff7
 8005d80:	08005ff7 	.word	0x08005ff7
 8005d84:	08005ff7 	.word	0x08005ff7
 8005d88:	08005ff7 	.word	0x08005ff7
 8005d8c:	08005ff7 	.word	0x08005ff7
 8005d90:	08005ff7 	.word	0x08005ff7
 8005d94:	08005de5 	.word	0x08005de5
 8005d98:	08005ff7 	.word	0x08005ff7
 8005d9c:	08005ff7 	.word	0x08005ff7
 8005da0:	08005ff7 	.word	0x08005ff7
 8005da4:	08005ff7 	.word	0x08005ff7
 8005da8:	08005ff7 	.word	0x08005ff7
 8005dac:	08005ff7 	.word	0x08005ff7
 8005db0:	08005ff7 	.word	0x08005ff7
 8005db4:	08005deb 	.word	0x08005deb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005db8:	4b94      	ldr	r3, [pc, #592]	; (800600c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 0320 	and.w	r3, r3, #32
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d009      	beq.n	8005dd8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005dc4:	4b91      	ldr	r3, [pc, #580]	; (800600c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	08db      	lsrs	r3, r3, #3
 8005dca:	f003 0303 	and.w	r3, r3, #3
 8005dce:	4a90      	ldr	r2, [pc, #576]	; (8006010 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8005dd4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005dd6:	e111      	b.n	8005ffc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005dd8:	4b8d      	ldr	r3, [pc, #564]	; (8006010 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005dda:	61bb      	str	r3, [r7, #24]
      break;
 8005ddc:	e10e      	b.n	8005ffc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005dde:	4b8d      	ldr	r3, [pc, #564]	; (8006014 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005de0:	61bb      	str	r3, [r7, #24]
      break;
 8005de2:	e10b      	b.n	8005ffc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005de4:	4b8c      	ldr	r3, [pc, #560]	; (8006018 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005de6:	61bb      	str	r3, [r7, #24]
      break;
 8005de8:	e108      	b.n	8005ffc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005dea:	4b88      	ldr	r3, [pc, #544]	; (800600c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dee:	f003 0303 	and.w	r3, r3, #3
 8005df2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005df4:	4b85      	ldr	r3, [pc, #532]	; (800600c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df8:	091b      	lsrs	r3, r3, #4
 8005dfa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005dfe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005e00:	4b82      	ldr	r3, [pc, #520]	; (800600c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e04:	f003 0301 	and.w	r3, r3, #1
 8005e08:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005e0a:	4b80      	ldr	r3, [pc, #512]	; (800600c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e0e:	08db      	lsrs	r3, r3, #3
 8005e10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e14:	68fa      	ldr	r2, [r7, #12]
 8005e16:	fb02 f303 	mul.w	r3, r2, r3
 8005e1a:	ee07 3a90 	vmov	s15, r3
 8005e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e22:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	f000 80e1 	beq.w	8005ff0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	2b02      	cmp	r3, #2
 8005e32:	f000 8083 	beq.w	8005f3c <HAL_RCC_GetSysClockFreq+0x204>
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	f200 80a1 	bhi.w	8005f80 <HAL_RCC_GetSysClockFreq+0x248>
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d003      	beq.n	8005e4c <HAL_RCC_GetSysClockFreq+0x114>
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d056      	beq.n	8005ef8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005e4a:	e099      	b.n	8005f80 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e4c:	4b6f      	ldr	r3, [pc, #444]	; (800600c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 0320 	and.w	r3, r3, #32
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d02d      	beq.n	8005eb4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e58:	4b6c      	ldr	r3, [pc, #432]	; (800600c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	08db      	lsrs	r3, r3, #3
 8005e5e:	f003 0303 	and.w	r3, r3, #3
 8005e62:	4a6b      	ldr	r2, [pc, #428]	; (8006010 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005e64:	fa22 f303 	lsr.w	r3, r2, r3
 8005e68:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	ee07 3a90 	vmov	s15, r3
 8005e70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	ee07 3a90 	vmov	s15, r3
 8005e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e82:	4b62      	ldr	r3, [pc, #392]	; (800600c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e8a:	ee07 3a90 	vmov	s15, r3
 8005e8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e92:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e96:	eddf 5a61 	vldr	s11, [pc, #388]	; 800601c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ea2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ea6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eae:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005eb2:	e087      	b.n	8005fc4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	ee07 3a90 	vmov	s15, r3
 8005eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ebe:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006020 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005ec2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ec6:	4b51      	ldr	r3, [pc, #324]	; (800600c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ece:	ee07 3a90 	vmov	s15, r3
 8005ed2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ed6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005eda:	eddf 5a50 	vldr	s11, [pc, #320]	; 800601c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005ede:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ee2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ee6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005eea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ef2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005ef6:	e065      	b.n	8005fc4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	ee07 3a90 	vmov	s15, r3
 8005efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f02:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006024 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005f06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f0a:	4b40      	ldr	r3, [pc, #256]	; (800600c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f12:	ee07 3a90 	vmov	s15, r3
 8005f16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f1e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800601c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005f3a:	e043      	b.n	8005fc4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	ee07 3a90 	vmov	s15, r3
 8005f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f46:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006028 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005f4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f4e:	4b2f      	ldr	r3, [pc, #188]	; (800600c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f56:	ee07 3a90 	vmov	s15, r3
 8005f5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f62:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800601c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005f7e:	e021      	b.n	8005fc4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	ee07 3a90 	vmov	s15, r3
 8005f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f8a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006024 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005f8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f92:	4b1e      	ldr	r3, [pc, #120]	; (800600c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f9a:	ee07 3a90 	vmov	s15, r3
 8005f9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fa2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fa6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800601c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005faa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fbe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005fc2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005fc4:	4b11      	ldr	r3, [pc, #68]	; (800600c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc8:	0a5b      	lsrs	r3, r3, #9
 8005fca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fce:	3301      	adds	r3, #1
 8005fd0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	ee07 3a90 	vmov	s15, r3
 8005fd8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005fdc:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fe0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fe4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fe8:	ee17 3a90 	vmov	r3, s15
 8005fec:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005fee:	e005      	b.n	8005ffc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	61bb      	str	r3, [r7, #24]
      break;
 8005ff4:	e002      	b.n	8005ffc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005ff6:	4b07      	ldr	r3, [pc, #28]	; (8006014 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005ff8:	61bb      	str	r3, [r7, #24]
      break;
 8005ffa:	bf00      	nop
  }

  return sysclockfreq;
 8005ffc:	69bb      	ldr	r3, [r7, #24]
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3724      	adds	r7, #36	; 0x24
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr
 800600a:	bf00      	nop
 800600c:	58024400 	.word	0x58024400
 8006010:	03d09000 	.word	0x03d09000
 8006014:	003d0900 	.word	0x003d0900
 8006018:	007f2815 	.word	0x007f2815
 800601c:	46000000 	.word	0x46000000
 8006020:	4c742400 	.word	0x4c742400
 8006024:	4a742400 	.word	0x4a742400
 8006028:	4afe502a 	.word	0x4afe502a

0800602c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b082      	sub	sp, #8
 8006030:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006032:	f7ff fe81 	bl	8005d38 <HAL_RCC_GetSysClockFreq>
 8006036:	4602      	mov	r2, r0
 8006038:	4b10      	ldr	r3, [pc, #64]	; (800607c <HAL_RCC_GetHCLKFreq+0x50>)
 800603a:	699b      	ldr	r3, [r3, #24]
 800603c:	0a1b      	lsrs	r3, r3, #8
 800603e:	f003 030f 	and.w	r3, r3, #15
 8006042:	490f      	ldr	r1, [pc, #60]	; (8006080 <HAL_RCC_GetHCLKFreq+0x54>)
 8006044:	5ccb      	ldrb	r3, [r1, r3]
 8006046:	f003 031f 	and.w	r3, r3, #31
 800604a:	fa22 f303 	lsr.w	r3, r2, r3
 800604e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006050:	4b0a      	ldr	r3, [pc, #40]	; (800607c <HAL_RCC_GetHCLKFreq+0x50>)
 8006052:	699b      	ldr	r3, [r3, #24]
 8006054:	f003 030f 	and.w	r3, r3, #15
 8006058:	4a09      	ldr	r2, [pc, #36]	; (8006080 <HAL_RCC_GetHCLKFreq+0x54>)
 800605a:	5cd3      	ldrb	r3, [r2, r3]
 800605c:	f003 031f 	and.w	r3, r3, #31
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	fa22 f303 	lsr.w	r3, r2, r3
 8006066:	4a07      	ldr	r2, [pc, #28]	; (8006084 <HAL_RCC_GetHCLKFreq+0x58>)
 8006068:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800606a:	4a07      	ldr	r2, [pc, #28]	; (8006088 <HAL_RCC_GetHCLKFreq+0x5c>)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006070:	4b04      	ldr	r3, [pc, #16]	; (8006084 <HAL_RCC_GetHCLKFreq+0x58>)
 8006072:	681b      	ldr	r3, [r3, #0]
}
 8006074:	4618      	mov	r0, r3
 8006076:	3708      	adds	r7, #8
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}
 800607c:	58024400 	.word	0x58024400
 8006080:	0800a988 	.word	0x0800a988
 8006084:	20000018 	.word	0x20000018
 8006088:	20000014 	.word	0x20000014

0800608c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006090:	f7ff ffcc 	bl	800602c <HAL_RCC_GetHCLKFreq>
 8006094:	4602      	mov	r2, r0
 8006096:	4b06      	ldr	r3, [pc, #24]	; (80060b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006098:	69db      	ldr	r3, [r3, #28]
 800609a:	091b      	lsrs	r3, r3, #4
 800609c:	f003 0307 	and.w	r3, r3, #7
 80060a0:	4904      	ldr	r1, [pc, #16]	; (80060b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80060a2:	5ccb      	ldrb	r3, [r1, r3]
 80060a4:	f003 031f 	and.w	r3, r3, #31
 80060a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	58024400 	.word	0x58024400
 80060b4:	0800a988 	.word	0x0800a988

080060b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80060bc:	f7ff ffb6 	bl	800602c <HAL_RCC_GetHCLKFreq>
 80060c0:	4602      	mov	r2, r0
 80060c2:	4b06      	ldr	r3, [pc, #24]	; (80060dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80060c4:	69db      	ldr	r3, [r3, #28]
 80060c6:	0a1b      	lsrs	r3, r3, #8
 80060c8:	f003 0307 	and.w	r3, r3, #7
 80060cc:	4904      	ldr	r1, [pc, #16]	; (80060e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80060ce:	5ccb      	ldrb	r3, [r1, r3]
 80060d0:	f003 031f 	and.w	r3, r3, #31
 80060d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80060d8:	4618      	mov	r0, r3
 80060da:	bd80      	pop	{r7, pc}
 80060dc:	58024400 	.word	0x58024400
 80060e0:	0800a988 	.word	0x0800a988

080060e4 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 80060e8:	4b07      	ldr	r3, [pc, #28]	; (8006108 <HAL_RCC_NMI_IRQHandler+0x24>)
 80060ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060f4:	d105      	bne.n	8006102 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80060f6:	f000 f809 	bl	800610c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80060fa:	4b03      	ldr	r3, [pc, #12]	; (8006108 <HAL_RCC_NMI_IRQHandler+0x24>)
 80060fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006100:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 8006102:	bf00      	nop
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	58024400 	.word	0x58024400

0800610c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800610c:	b480      	push	{r7}
 800610e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8006110:	bf00      	nop
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr
	...

0800611c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800611c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006120:	b0ca      	sub	sp, #296	; 0x128
 8006122:	af00      	add	r7, sp, #0
 8006124:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006128:	2300      	movs	r3, #0
 800612a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800612e:	2300      	movs	r3, #0
 8006130:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006134:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800613c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8006140:	2500      	movs	r5, #0
 8006142:	ea54 0305 	orrs.w	r3, r4, r5
 8006146:	d049      	beq.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006148:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800614c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800614e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006152:	d02f      	beq.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006154:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006158:	d828      	bhi.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x90>
 800615a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800615e:	d01a      	beq.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006160:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006164:	d822      	bhi.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006166:	2b00      	cmp	r3, #0
 8006168:	d003      	beq.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800616a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800616e:	d007      	beq.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006170:	e01c      	b.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006172:	4bb8      	ldr	r3, [pc, #736]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006176:	4ab7      	ldr	r2, [pc, #732]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800617c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800617e:	e01a      	b.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006180:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006184:	3308      	adds	r3, #8
 8006186:	2102      	movs	r1, #2
 8006188:	4618      	mov	r0, r3
 800618a:	f001 fce5 	bl	8007b58 <RCCEx_PLL2_Config>
 800618e:	4603      	mov	r3, r0
 8006190:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006194:	e00f      	b.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006196:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800619a:	3328      	adds	r3, #40	; 0x28
 800619c:	2102      	movs	r1, #2
 800619e:	4618      	mov	r0, r3
 80061a0:	f001 fd8c 	bl	8007cbc <RCCEx_PLL3_Config>
 80061a4:	4603      	mov	r3, r0
 80061a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80061aa:	e004      	b.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80061b2:	e000      	b.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80061b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d10a      	bne.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80061be:	4ba5      	ldr	r3, [pc, #660]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80061c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061c2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80061c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061cc:	4aa1      	ldr	r2, [pc, #644]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80061ce:	430b      	orrs	r3, r1
 80061d0:	6513      	str	r3, [r2, #80]	; 0x50
 80061d2:	e003      	b.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80061dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80061e8:	f04f 0900 	mov.w	r9, #0
 80061ec:	ea58 0309 	orrs.w	r3, r8, r9
 80061f0:	d047      	beq.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80061f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061f8:	2b04      	cmp	r3, #4
 80061fa:	d82a      	bhi.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80061fc:	a201      	add	r2, pc, #4	; (adr r2, 8006204 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80061fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006202:	bf00      	nop
 8006204:	08006219 	.word	0x08006219
 8006208:	08006227 	.word	0x08006227
 800620c:	0800623d 	.word	0x0800623d
 8006210:	0800625b 	.word	0x0800625b
 8006214:	0800625b 	.word	0x0800625b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006218:	4b8e      	ldr	r3, [pc, #568]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800621a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800621c:	4a8d      	ldr	r2, [pc, #564]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800621e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006222:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006224:	e01a      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006226:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800622a:	3308      	adds	r3, #8
 800622c:	2100      	movs	r1, #0
 800622e:	4618      	mov	r0, r3
 8006230:	f001 fc92 	bl	8007b58 <RCCEx_PLL2_Config>
 8006234:	4603      	mov	r3, r0
 8006236:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800623a:	e00f      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800623c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006240:	3328      	adds	r3, #40	; 0x28
 8006242:	2100      	movs	r1, #0
 8006244:	4618      	mov	r0, r3
 8006246:	f001 fd39 	bl	8007cbc <RCCEx_PLL3_Config>
 800624a:	4603      	mov	r3, r0
 800624c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006250:	e004      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006258:	e000      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800625a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800625c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006260:	2b00      	cmp	r3, #0
 8006262:	d10a      	bne.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006264:	4b7b      	ldr	r3, [pc, #492]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006266:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006268:	f023 0107 	bic.w	r1, r3, #7
 800626c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006272:	4a78      	ldr	r2, [pc, #480]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006274:	430b      	orrs	r3, r1
 8006276:	6513      	str	r3, [r2, #80]	; 0x50
 8006278:	e003      	b.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800627a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800627e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006282:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800628a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800628e:	f04f 0b00 	mov.w	fp, #0
 8006292:	ea5a 030b 	orrs.w	r3, sl, fp
 8006296:	d04c      	beq.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006298:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800629c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800629e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062a2:	d030      	beq.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80062a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062a8:	d829      	bhi.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80062aa:	2bc0      	cmp	r3, #192	; 0xc0
 80062ac:	d02d      	beq.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80062ae:	2bc0      	cmp	r3, #192	; 0xc0
 80062b0:	d825      	bhi.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80062b2:	2b80      	cmp	r3, #128	; 0x80
 80062b4:	d018      	beq.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80062b6:	2b80      	cmp	r3, #128	; 0x80
 80062b8:	d821      	bhi.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d002      	beq.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80062be:	2b40      	cmp	r3, #64	; 0x40
 80062c0:	d007      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80062c2:	e01c      	b.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062c4:	4b63      	ldr	r3, [pc, #396]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80062c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c8:	4a62      	ldr	r2, [pc, #392]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80062ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80062d0:	e01c      	b.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062d6:	3308      	adds	r3, #8
 80062d8:	2100      	movs	r1, #0
 80062da:	4618      	mov	r0, r3
 80062dc:	f001 fc3c 	bl	8007b58 <RCCEx_PLL2_Config>
 80062e0:	4603      	mov	r3, r0
 80062e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80062e6:	e011      	b.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80062e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062ec:	3328      	adds	r3, #40	; 0x28
 80062ee:	2100      	movs	r1, #0
 80062f0:	4618      	mov	r0, r3
 80062f2:	f001 fce3 	bl	8007cbc <RCCEx_PLL3_Config>
 80062f6:	4603      	mov	r3, r0
 80062f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80062fc:	e006      	b.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006304:	e002      	b.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006306:	bf00      	nop
 8006308:	e000      	b.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800630a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800630c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006310:	2b00      	cmp	r3, #0
 8006312:	d10a      	bne.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006314:	4b4f      	ldr	r3, [pc, #316]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006318:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800631c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006322:	4a4c      	ldr	r2, [pc, #304]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006324:	430b      	orrs	r3, r1
 8006326:	6513      	str	r3, [r2, #80]	; 0x50
 8006328:	e003      	b.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800632a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800632e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006332:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800633a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800633e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006342:	2300      	movs	r3, #0
 8006344:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006348:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800634c:	460b      	mov	r3, r1
 800634e:	4313      	orrs	r3, r2
 8006350:	d053      	beq.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006352:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006356:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800635a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800635e:	d035      	beq.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006360:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006364:	d82e      	bhi.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006366:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800636a:	d031      	beq.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800636c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006370:	d828      	bhi.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006372:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006376:	d01a      	beq.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006378:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800637c:	d822      	bhi.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800637e:	2b00      	cmp	r3, #0
 8006380:	d003      	beq.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006382:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006386:	d007      	beq.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006388:	e01c      	b.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800638a:	4b32      	ldr	r3, [pc, #200]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800638c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800638e:	4a31      	ldr	r2, [pc, #196]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006390:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006394:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006396:	e01c      	b.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006398:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800639c:	3308      	adds	r3, #8
 800639e:	2100      	movs	r1, #0
 80063a0:	4618      	mov	r0, r3
 80063a2:	f001 fbd9 	bl	8007b58 <RCCEx_PLL2_Config>
 80063a6:	4603      	mov	r3, r0
 80063a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80063ac:	e011      	b.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80063ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063b2:	3328      	adds	r3, #40	; 0x28
 80063b4:	2100      	movs	r1, #0
 80063b6:	4618      	mov	r0, r3
 80063b8:	f001 fc80 	bl	8007cbc <RCCEx_PLL3_Config>
 80063bc:	4603      	mov	r3, r0
 80063be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80063c2:	e006      	b.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80063ca:	e002      	b.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80063cc:	bf00      	nop
 80063ce:	e000      	b.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80063d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d10b      	bne.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80063da:	4b1e      	ldr	r3, [pc, #120]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80063dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063de:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80063e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80063ea:	4a1a      	ldr	r2, [pc, #104]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80063ec:	430b      	orrs	r3, r1
 80063ee:	6593      	str	r3, [r2, #88]	; 0x58
 80063f0:	e003      	b.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80063f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80063fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006402:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006406:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800640a:	2300      	movs	r3, #0
 800640c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006410:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8006414:	460b      	mov	r3, r1
 8006416:	4313      	orrs	r3, r2
 8006418:	d056      	beq.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800641a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800641e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006422:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006426:	d038      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006428:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800642c:	d831      	bhi.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800642e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006432:	d034      	beq.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006434:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006438:	d82b      	bhi.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800643a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800643e:	d01d      	beq.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006440:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006444:	d825      	bhi.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006446:	2b00      	cmp	r3, #0
 8006448:	d006      	beq.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800644a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800644e:	d00a      	beq.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006450:	e01f      	b.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006452:	bf00      	nop
 8006454:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006458:	4ba2      	ldr	r3, [pc, #648]	; (80066e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800645a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800645c:	4aa1      	ldr	r2, [pc, #644]	; (80066e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800645e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006462:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006464:	e01c      	b.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006466:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800646a:	3308      	adds	r3, #8
 800646c:	2100      	movs	r1, #0
 800646e:	4618      	mov	r0, r3
 8006470:	f001 fb72 	bl	8007b58 <RCCEx_PLL2_Config>
 8006474:	4603      	mov	r3, r0
 8006476:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800647a:	e011      	b.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800647c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006480:	3328      	adds	r3, #40	; 0x28
 8006482:	2100      	movs	r1, #0
 8006484:	4618      	mov	r0, r3
 8006486:	f001 fc19 	bl	8007cbc <RCCEx_PLL3_Config>
 800648a:	4603      	mov	r3, r0
 800648c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006490:	e006      	b.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006498:	e002      	b.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800649a:	bf00      	nop
 800649c:	e000      	b.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800649e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d10b      	bne.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80064a8:	4b8e      	ldr	r3, [pc, #568]	; (80066e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80064aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064ac:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80064b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064b4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80064b8:	4a8a      	ldr	r2, [pc, #552]	; (80066e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80064ba:	430b      	orrs	r3, r1
 80064bc:	6593      	str	r3, [r2, #88]	; 0x58
 80064be:	e003      	b.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80064c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80064d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80064d8:	2300      	movs	r3, #0
 80064da:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80064de:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80064e2:	460b      	mov	r3, r1
 80064e4:	4313      	orrs	r3, r2
 80064e6:	d03a      	beq.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80064e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064ee:	2b30      	cmp	r3, #48	; 0x30
 80064f0:	d01f      	beq.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80064f2:	2b30      	cmp	r3, #48	; 0x30
 80064f4:	d819      	bhi.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80064f6:	2b20      	cmp	r3, #32
 80064f8:	d00c      	beq.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80064fa:	2b20      	cmp	r3, #32
 80064fc:	d815      	bhi.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d019      	beq.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006502:	2b10      	cmp	r3, #16
 8006504:	d111      	bne.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006506:	4b77      	ldr	r3, [pc, #476]	; (80066e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800650a:	4a76      	ldr	r2, [pc, #472]	; (80066e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800650c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006510:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006512:	e011      	b.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006514:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006518:	3308      	adds	r3, #8
 800651a:	2102      	movs	r1, #2
 800651c:	4618      	mov	r0, r3
 800651e:	f001 fb1b 	bl	8007b58 <RCCEx_PLL2_Config>
 8006522:	4603      	mov	r3, r0
 8006524:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006528:	e006      	b.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006530:	e002      	b.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006532:	bf00      	nop
 8006534:	e000      	b.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006536:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006538:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800653c:	2b00      	cmp	r3, #0
 800653e:	d10a      	bne.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006540:	4b68      	ldr	r3, [pc, #416]	; (80066e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006544:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006548:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800654c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800654e:	4a65      	ldr	r2, [pc, #404]	; (80066e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006550:	430b      	orrs	r3, r1
 8006552:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006554:	e003      	b.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006556:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800655a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800655e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006566:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800656a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800656e:	2300      	movs	r3, #0
 8006570:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006574:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8006578:	460b      	mov	r3, r1
 800657a:	4313      	orrs	r3, r2
 800657c:	d051      	beq.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800657e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006582:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006584:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006588:	d035      	beq.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800658a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800658e:	d82e      	bhi.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006590:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006594:	d031      	beq.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006596:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800659a:	d828      	bhi.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800659c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065a0:	d01a      	beq.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80065a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065a6:	d822      	bhi.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d003      	beq.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80065ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065b0:	d007      	beq.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80065b2:	e01c      	b.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065b4:	4b4b      	ldr	r3, [pc, #300]	; (80066e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80065b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b8:	4a4a      	ldr	r2, [pc, #296]	; (80066e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80065ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80065c0:	e01c      	b.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80065c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065c6:	3308      	adds	r3, #8
 80065c8:	2100      	movs	r1, #0
 80065ca:	4618      	mov	r0, r3
 80065cc:	f001 fac4 	bl	8007b58 <RCCEx_PLL2_Config>
 80065d0:	4603      	mov	r3, r0
 80065d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80065d6:	e011      	b.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80065d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065dc:	3328      	adds	r3, #40	; 0x28
 80065de:	2100      	movs	r1, #0
 80065e0:	4618      	mov	r0, r3
 80065e2:	f001 fb6b 	bl	8007cbc <RCCEx_PLL3_Config>
 80065e6:	4603      	mov	r3, r0
 80065e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80065ec:	e006      	b.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80065f4:	e002      	b.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80065f6:	bf00      	nop
 80065f8:	e000      	b.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80065fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006600:	2b00      	cmp	r3, #0
 8006602:	d10a      	bne.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006604:	4b37      	ldr	r3, [pc, #220]	; (80066e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006606:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006608:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800660c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006610:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006612:	4a34      	ldr	r2, [pc, #208]	; (80066e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006614:	430b      	orrs	r3, r1
 8006616:	6513      	str	r3, [r2, #80]	; 0x50
 8006618:	e003      	b.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800661a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800661e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006622:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800662a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800662e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006632:	2300      	movs	r3, #0
 8006634:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006638:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800663c:	460b      	mov	r3, r1
 800663e:	4313      	orrs	r3, r2
 8006640:	d056      	beq.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006642:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006646:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006648:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800664c:	d033      	beq.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800664e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006652:	d82c      	bhi.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006654:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006658:	d02f      	beq.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800665a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800665e:	d826      	bhi.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006660:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006664:	d02b      	beq.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006666:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800666a:	d820      	bhi.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x592>
 800666c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006670:	d012      	beq.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006672:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006676:	d81a      	bhi.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006678:	2b00      	cmp	r3, #0
 800667a:	d022      	beq.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800667c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006680:	d115      	bne.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006682:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006686:	3308      	adds	r3, #8
 8006688:	2101      	movs	r1, #1
 800668a:	4618      	mov	r0, r3
 800668c:	f001 fa64 	bl	8007b58 <RCCEx_PLL2_Config>
 8006690:	4603      	mov	r3, r0
 8006692:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006696:	e015      	b.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006698:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800669c:	3328      	adds	r3, #40	; 0x28
 800669e:	2101      	movs	r1, #1
 80066a0:	4618      	mov	r0, r3
 80066a2:	f001 fb0b 	bl	8007cbc <RCCEx_PLL3_Config>
 80066a6:	4603      	mov	r3, r0
 80066a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80066ac:	e00a      	b.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80066b4:	e006      	b.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80066b6:	bf00      	nop
 80066b8:	e004      	b.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80066ba:	bf00      	nop
 80066bc:	e002      	b.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80066be:	bf00      	nop
 80066c0:	e000      	b.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80066c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d10d      	bne.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80066cc:	4b05      	ldr	r3, [pc, #20]	; (80066e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80066ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066d0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80066d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066da:	4a02      	ldr	r2, [pc, #8]	; (80066e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80066dc:	430b      	orrs	r3, r1
 80066de:	6513      	str	r3, [r2, #80]	; 0x50
 80066e0:	e006      	b.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80066e2:	bf00      	nop
 80066e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80066f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f8:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80066fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006700:	2300      	movs	r3, #0
 8006702:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006706:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800670a:	460b      	mov	r3, r1
 800670c:	4313      	orrs	r3, r2
 800670e:	d055      	beq.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006710:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006714:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006718:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800671c:	d033      	beq.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800671e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006722:	d82c      	bhi.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006728:	d02f      	beq.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800672a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800672e:	d826      	bhi.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006730:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006734:	d02b      	beq.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006736:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800673a:	d820      	bhi.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800673c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006740:	d012      	beq.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006742:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006746:	d81a      	bhi.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006748:	2b00      	cmp	r3, #0
 800674a:	d022      	beq.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800674c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006750:	d115      	bne.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006752:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006756:	3308      	adds	r3, #8
 8006758:	2101      	movs	r1, #1
 800675a:	4618      	mov	r0, r3
 800675c:	f001 f9fc 	bl	8007b58 <RCCEx_PLL2_Config>
 8006760:	4603      	mov	r3, r0
 8006762:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006766:	e015      	b.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006768:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800676c:	3328      	adds	r3, #40	; 0x28
 800676e:	2101      	movs	r1, #1
 8006770:	4618      	mov	r0, r3
 8006772:	f001 faa3 	bl	8007cbc <RCCEx_PLL3_Config>
 8006776:	4603      	mov	r3, r0
 8006778:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800677c:	e00a      	b.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006784:	e006      	b.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006786:	bf00      	nop
 8006788:	e004      	b.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800678a:	bf00      	nop
 800678c:	e002      	b.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800678e:	bf00      	nop
 8006790:	e000      	b.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006792:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006794:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006798:	2b00      	cmp	r3, #0
 800679a:	d10b      	bne.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800679c:	4ba3      	ldr	r3, [pc, #652]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800679e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067a0:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80067a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80067ac:	4a9f      	ldr	r2, [pc, #636]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80067ae:	430b      	orrs	r3, r1
 80067b0:	6593      	str	r3, [r2, #88]	; 0x58
 80067b2:	e003      	b.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80067bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80067c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80067cc:	2300      	movs	r3, #0
 80067ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80067d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80067d6:	460b      	mov	r3, r1
 80067d8:	4313      	orrs	r3, r2
 80067da:	d037      	beq.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80067dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067e6:	d00e      	beq.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80067e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067ec:	d816      	bhi.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x700>
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d018      	beq.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80067f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067f6:	d111      	bne.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067f8:	4b8c      	ldr	r3, [pc, #560]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80067fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067fc:	4a8b      	ldr	r2, [pc, #556]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80067fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006802:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006804:	e00f      	b.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006806:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800680a:	3308      	adds	r3, #8
 800680c:	2101      	movs	r1, #1
 800680e:	4618      	mov	r0, r3
 8006810:	f001 f9a2 	bl	8007b58 <RCCEx_PLL2_Config>
 8006814:	4603      	mov	r3, r0
 8006816:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800681a:	e004      	b.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006822:	e000      	b.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006824:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006826:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800682a:	2b00      	cmp	r3, #0
 800682c:	d10a      	bne.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800682e:	4b7f      	ldr	r3, [pc, #508]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006830:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006832:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006836:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800683a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800683c:	4a7b      	ldr	r2, [pc, #492]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800683e:	430b      	orrs	r3, r1
 8006840:	6513      	str	r3, [r2, #80]	; 0x50
 8006842:	e003      	b.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006844:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006848:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800684c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006854:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8006858:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800685c:	2300      	movs	r3, #0
 800685e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006862:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8006866:	460b      	mov	r3, r1
 8006868:	4313      	orrs	r3, r2
 800686a:	d039      	beq.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800686c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006870:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006872:	2b03      	cmp	r3, #3
 8006874:	d81c      	bhi.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006876:	a201      	add	r2, pc, #4	; (adr r2, 800687c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800687c:	080068b9 	.word	0x080068b9
 8006880:	0800688d 	.word	0x0800688d
 8006884:	0800689b 	.word	0x0800689b
 8006888:	080068b9 	.word	0x080068b9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800688c:	4b67      	ldr	r3, [pc, #412]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800688e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006890:	4a66      	ldr	r2, [pc, #408]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006892:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006896:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006898:	e00f      	b.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800689a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800689e:	3308      	adds	r3, #8
 80068a0:	2102      	movs	r1, #2
 80068a2:	4618      	mov	r0, r3
 80068a4:	f001 f958 	bl	8007b58 <RCCEx_PLL2_Config>
 80068a8:	4603      	mov	r3, r0
 80068aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80068ae:	e004      	b.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80068b6:	e000      	b.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80068b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d10a      	bne.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80068c2:	4b5a      	ldr	r3, [pc, #360]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068c6:	f023 0103 	bic.w	r1, r3, #3
 80068ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068d0:	4a56      	ldr	r2, [pc, #344]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068d2:	430b      	orrs	r3, r1
 80068d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80068d6:	e003      	b.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068dc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80068e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80068ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80068f0:	2300      	movs	r3, #0
 80068f2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80068f6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80068fa:	460b      	mov	r3, r1
 80068fc:	4313      	orrs	r3, r2
 80068fe:	f000 809f 	beq.w	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006902:	4b4b      	ldr	r3, [pc, #300]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a4a      	ldr	r2, [pc, #296]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006908:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800690c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800690e:	f7fb fe41 	bl	8002594 <HAL_GetTick>
 8006912:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006916:	e00b      	b.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006918:	f7fb fe3c 	bl	8002594 <HAL_GetTick>
 800691c:	4602      	mov	r2, r0
 800691e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006922:	1ad3      	subs	r3, r2, r3
 8006924:	2b64      	cmp	r3, #100	; 0x64
 8006926:	d903      	bls.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006928:	2303      	movs	r3, #3
 800692a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800692e:	e005      	b.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006930:	4b3f      	ldr	r3, [pc, #252]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006938:	2b00      	cmp	r3, #0
 800693a:	d0ed      	beq.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800693c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006940:	2b00      	cmp	r3, #0
 8006942:	d179      	bne.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006944:	4b39      	ldr	r3, [pc, #228]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006946:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006948:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800694c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006950:	4053      	eors	r3, r2
 8006952:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006956:	2b00      	cmp	r3, #0
 8006958:	d015      	beq.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800695a:	4b34      	ldr	r3, [pc, #208]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800695c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800695e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006962:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006966:	4b31      	ldr	r3, [pc, #196]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800696a:	4a30      	ldr	r2, [pc, #192]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800696c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006970:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006972:	4b2e      	ldr	r3, [pc, #184]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006976:	4a2d      	ldr	r2, [pc, #180]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006978:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800697c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800697e:	4a2b      	ldr	r2, [pc, #172]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006980:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006984:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006986:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800698a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800698e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006992:	d118      	bne.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006994:	f7fb fdfe 	bl	8002594 <HAL_GetTick>
 8006998:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800699c:	e00d      	b.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800699e:	f7fb fdf9 	bl	8002594 <HAL_GetTick>
 80069a2:	4602      	mov	r2, r0
 80069a4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80069a8:	1ad2      	subs	r2, r2, r3
 80069aa:	f241 3388 	movw	r3, #5000	; 0x1388
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d903      	bls.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80069b2:	2303      	movs	r3, #3
 80069b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80069b8:	e005      	b.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069ba:	4b1c      	ldr	r3, [pc, #112]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80069bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069be:	f003 0302 	and.w	r3, r3, #2
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d0eb      	beq.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80069c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d129      	bne.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80069ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80069d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069de:	d10e      	bne.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80069e0:	4b12      	ldr	r3, [pc, #72]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80069e2:	691b      	ldr	r3, [r3, #16]
 80069e4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80069e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069ec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80069f0:	091a      	lsrs	r2, r3, #4
 80069f2:	4b10      	ldr	r3, [pc, #64]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80069f4:	4013      	ands	r3, r2
 80069f6:	4a0d      	ldr	r2, [pc, #52]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80069f8:	430b      	orrs	r3, r1
 80069fa:	6113      	str	r3, [r2, #16]
 80069fc:	e005      	b.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80069fe:	4b0b      	ldr	r3, [pc, #44]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	4a0a      	ldr	r2, [pc, #40]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a04:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006a08:	6113      	str	r3, [r2, #16]
 8006a0a:	4b08      	ldr	r3, [pc, #32]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a0c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8006a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a12:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006a16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a1a:	4a04      	ldr	r2, [pc, #16]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a1c:	430b      	orrs	r3, r1
 8006a1e:	6713      	str	r3, [r2, #112]	; 0x70
 8006a20:	e00e      	b.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006a22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a26:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8006a2a:	e009      	b.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006a2c:	58024400 	.word	0x58024400
 8006a30:	58024800 	.word	0x58024800
 8006a34:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a3c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a48:	f002 0301 	and.w	r3, r2, #1
 8006a4c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006a50:	2300      	movs	r3, #0
 8006a52:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006a56:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006a5a:	460b      	mov	r3, r1
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	f000 8089 	beq.w	8006b74 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a68:	2b28      	cmp	r3, #40	; 0x28
 8006a6a:	d86b      	bhi.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006a6c:	a201      	add	r2, pc, #4	; (adr r2, 8006a74 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a72:	bf00      	nop
 8006a74:	08006b4d 	.word	0x08006b4d
 8006a78:	08006b45 	.word	0x08006b45
 8006a7c:	08006b45 	.word	0x08006b45
 8006a80:	08006b45 	.word	0x08006b45
 8006a84:	08006b45 	.word	0x08006b45
 8006a88:	08006b45 	.word	0x08006b45
 8006a8c:	08006b45 	.word	0x08006b45
 8006a90:	08006b45 	.word	0x08006b45
 8006a94:	08006b19 	.word	0x08006b19
 8006a98:	08006b45 	.word	0x08006b45
 8006a9c:	08006b45 	.word	0x08006b45
 8006aa0:	08006b45 	.word	0x08006b45
 8006aa4:	08006b45 	.word	0x08006b45
 8006aa8:	08006b45 	.word	0x08006b45
 8006aac:	08006b45 	.word	0x08006b45
 8006ab0:	08006b45 	.word	0x08006b45
 8006ab4:	08006b2f 	.word	0x08006b2f
 8006ab8:	08006b45 	.word	0x08006b45
 8006abc:	08006b45 	.word	0x08006b45
 8006ac0:	08006b45 	.word	0x08006b45
 8006ac4:	08006b45 	.word	0x08006b45
 8006ac8:	08006b45 	.word	0x08006b45
 8006acc:	08006b45 	.word	0x08006b45
 8006ad0:	08006b45 	.word	0x08006b45
 8006ad4:	08006b4d 	.word	0x08006b4d
 8006ad8:	08006b45 	.word	0x08006b45
 8006adc:	08006b45 	.word	0x08006b45
 8006ae0:	08006b45 	.word	0x08006b45
 8006ae4:	08006b45 	.word	0x08006b45
 8006ae8:	08006b45 	.word	0x08006b45
 8006aec:	08006b45 	.word	0x08006b45
 8006af0:	08006b45 	.word	0x08006b45
 8006af4:	08006b4d 	.word	0x08006b4d
 8006af8:	08006b45 	.word	0x08006b45
 8006afc:	08006b45 	.word	0x08006b45
 8006b00:	08006b45 	.word	0x08006b45
 8006b04:	08006b45 	.word	0x08006b45
 8006b08:	08006b45 	.word	0x08006b45
 8006b0c:	08006b45 	.word	0x08006b45
 8006b10:	08006b45 	.word	0x08006b45
 8006b14:	08006b4d 	.word	0x08006b4d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b1c:	3308      	adds	r3, #8
 8006b1e:	2101      	movs	r1, #1
 8006b20:	4618      	mov	r0, r3
 8006b22:	f001 f819 	bl	8007b58 <RCCEx_PLL2_Config>
 8006b26:	4603      	mov	r3, r0
 8006b28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006b2c:	e00f      	b.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b32:	3328      	adds	r3, #40	; 0x28
 8006b34:	2101      	movs	r1, #1
 8006b36:	4618      	mov	r0, r3
 8006b38:	f001 f8c0 	bl	8007cbc <RCCEx_PLL3_Config>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006b42:	e004      	b.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b44:	2301      	movs	r3, #1
 8006b46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006b4a:	e000      	b.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006b4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d10a      	bne.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006b56:	4bbf      	ldr	r3, [pc, #764]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b5a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8006b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b64:	4abb      	ldr	r2, [pc, #748]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006b66:	430b      	orrs	r3, r1
 8006b68:	6553      	str	r3, [r2, #84]	; 0x54
 8006b6a:	e003      	b.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b70:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b7c:	f002 0302 	and.w	r3, r2, #2
 8006b80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b84:	2300      	movs	r3, #0
 8006b86:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006b8a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8006b8e:	460b      	mov	r3, r1
 8006b90:	4313      	orrs	r3, r2
 8006b92:	d041      	beq.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b9a:	2b05      	cmp	r3, #5
 8006b9c:	d824      	bhi.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006b9e:	a201      	add	r2, pc, #4	; (adr r2, 8006ba4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ba4:	08006bf1 	.word	0x08006bf1
 8006ba8:	08006bbd 	.word	0x08006bbd
 8006bac:	08006bd3 	.word	0x08006bd3
 8006bb0:	08006bf1 	.word	0x08006bf1
 8006bb4:	08006bf1 	.word	0x08006bf1
 8006bb8:	08006bf1 	.word	0x08006bf1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bc0:	3308      	adds	r3, #8
 8006bc2:	2101      	movs	r1, #1
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f000 ffc7 	bl	8007b58 <RCCEx_PLL2_Config>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006bd0:	e00f      	b.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bd6:	3328      	adds	r3, #40	; 0x28
 8006bd8:	2101      	movs	r1, #1
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f001 f86e 	bl	8007cbc <RCCEx_PLL3_Config>
 8006be0:	4603      	mov	r3, r0
 8006be2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006be6:	e004      	b.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006bee:	e000      	b.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006bf0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bf2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d10a      	bne.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006bfa:	4b96      	ldr	r3, [pc, #600]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bfe:	f023 0107 	bic.w	r1, r3, #7
 8006c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c08:	4a92      	ldr	r2, [pc, #584]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006c0a:	430b      	orrs	r3, r1
 8006c0c:	6553      	str	r3, [r2, #84]	; 0x54
 8006c0e:	e003      	b.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c14:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c20:	f002 0304 	and.w	r3, r2, #4
 8006c24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006c28:	2300      	movs	r3, #0
 8006c2a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c2e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8006c32:	460b      	mov	r3, r1
 8006c34:	4313      	orrs	r3, r2
 8006c36:	d044      	beq.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c40:	2b05      	cmp	r3, #5
 8006c42:	d825      	bhi.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006c44:	a201      	add	r2, pc, #4	; (adr r2, 8006c4c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c4a:	bf00      	nop
 8006c4c:	08006c99 	.word	0x08006c99
 8006c50:	08006c65 	.word	0x08006c65
 8006c54:	08006c7b 	.word	0x08006c7b
 8006c58:	08006c99 	.word	0x08006c99
 8006c5c:	08006c99 	.word	0x08006c99
 8006c60:	08006c99 	.word	0x08006c99
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c68:	3308      	adds	r3, #8
 8006c6a:	2101      	movs	r1, #1
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f000 ff73 	bl	8007b58 <RCCEx_PLL2_Config>
 8006c72:	4603      	mov	r3, r0
 8006c74:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006c78:	e00f      	b.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c7e:	3328      	adds	r3, #40	; 0x28
 8006c80:	2101      	movs	r1, #1
 8006c82:	4618      	mov	r0, r3
 8006c84:	f001 f81a 	bl	8007cbc <RCCEx_PLL3_Config>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006c8e:	e004      	b.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006c96:	e000      	b.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006c98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d10b      	bne.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006ca2:	4b6c      	ldr	r3, [pc, #432]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ca6:	f023 0107 	bic.w	r1, r3, #7
 8006caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006cb2:	4a68      	ldr	r2, [pc, #416]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006cb4:	430b      	orrs	r3, r1
 8006cb6:	6593      	str	r3, [r2, #88]	; 0x58
 8006cb8:	e003      	b.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006cbe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cca:	f002 0320 	and.w	r3, r2, #32
 8006cce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006cd8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006cdc:	460b      	mov	r3, r1
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	d055      	beq.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006cee:	d033      	beq.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006cf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006cf4:	d82c      	bhi.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cfa:	d02f      	beq.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d00:	d826      	bhi.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006d02:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006d06:	d02b      	beq.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006d08:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006d0c:	d820      	bhi.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006d0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d12:	d012      	beq.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006d14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d18:	d81a      	bhi.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d022      	beq.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006d1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d22:	d115      	bne.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d28:	3308      	adds	r3, #8
 8006d2a:	2100      	movs	r1, #0
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f000 ff13 	bl	8007b58 <RCCEx_PLL2_Config>
 8006d32:	4603      	mov	r3, r0
 8006d34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006d38:	e015      	b.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d3e:	3328      	adds	r3, #40	; 0x28
 8006d40:	2102      	movs	r1, #2
 8006d42:	4618      	mov	r0, r3
 8006d44:	f000 ffba 	bl	8007cbc <RCCEx_PLL3_Config>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006d4e:	e00a      	b.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d50:	2301      	movs	r3, #1
 8006d52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006d56:	e006      	b.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006d58:	bf00      	nop
 8006d5a:	e004      	b.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006d5c:	bf00      	nop
 8006d5e:	e002      	b.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006d60:	bf00      	nop
 8006d62:	e000      	b.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006d64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d10b      	bne.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006d6e:	4b39      	ldr	r3, [pc, #228]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d72:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d7e:	4a35      	ldr	r2, [pc, #212]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006d80:	430b      	orrs	r3, r1
 8006d82:	6553      	str	r3, [r2, #84]	; 0x54
 8006d84:	e003      	b.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d8a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d96:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8006d9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006d9e:	2300      	movs	r3, #0
 8006da0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006da4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006da8:	460b      	mov	r3, r1
 8006daa:	4313      	orrs	r3, r2
 8006dac:	d058      	beq.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006db2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006db6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006dba:	d033      	beq.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006dbc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006dc0:	d82c      	bhi.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006dc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dc6:	d02f      	beq.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006dc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dcc:	d826      	bhi.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006dce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006dd2:	d02b      	beq.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006dd4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006dd8:	d820      	bhi.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006dda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dde:	d012      	beq.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006de0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006de4:	d81a      	bhi.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d022      	beq.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006dea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dee:	d115      	bne.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006df4:	3308      	adds	r3, #8
 8006df6:	2100      	movs	r1, #0
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f000 fead 	bl	8007b58 <RCCEx_PLL2_Config>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006e04:	e015      	b.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e0a:	3328      	adds	r3, #40	; 0x28
 8006e0c:	2102      	movs	r1, #2
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f000 ff54 	bl	8007cbc <RCCEx_PLL3_Config>
 8006e14:	4603      	mov	r3, r0
 8006e16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006e1a:	e00a      	b.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006e22:	e006      	b.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006e24:	bf00      	nop
 8006e26:	e004      	b.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006e28:	bf00      	nop
 8006e2a:	e002      	b.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006e2c:	bf00      	nop
 8006e2e:	e000      	b.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006e30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d10e      	bne.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006e3a:	4b06      	ldr	r3, [pc, #24]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e3e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8006e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006e4a:	4a02      	ldr	r2, [pc, #8]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006e4c:	430b      	orrs	r3, r1
 8006e4e:	6593      	str	r3, [r2, #88]	; 0x58
 8006e50:	e006      	b.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006e52:	bf00      	nop
 8006e54:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e5c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e68:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006e6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006e70:	2300      	movs	r3, #0
 8006e72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006e76:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8006e7a:	460b      	mov	r3, r1
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	d055      	beq.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e84:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006e88:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006e8c:	d033      	beq.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006e8e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006e92:	d82c      	bhi.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006e94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e98:	d02f      	beq.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006e9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e9e:	d826      	bhi.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006ea0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006ea4:	d02b      	beq.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006ea6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006eaa:	d820      	bhi.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006eac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006eb0:	d012      	beq.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006eb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006eb6:	d81a      	bhi.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d022      	beq.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006ebc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ec0:	d115      	bne.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ec6:	3308      	adds	r3, #8
 8006ec8:	2100      	movs	r1, #0
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f000 fe44 	bl	8007b58 <RCCEx_PLL2_Config>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006ed6:	e015      	b.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006edc:	3328      	adds	r3, #40	; 0x28
 8006ede:	2102      	movs	r1, #2
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f000 feeb 	bl	8007cbc <RCCEx_PLL3_Config>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006eec:	e00a      	b.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006ef4:	e006      	b.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006ef6:	bf00      	nop
 8006ef8:	e004      	b.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006efa:	bf00      	nop
 8006efc:	e002      	b.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006efe:	bf00      	nop
 8006f00:	e000      	b.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006f02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d10b      	bne.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006f0c:	4ba1      	ldr	r3, [pc, #644]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f10:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8006f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f18:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006f1c:	4a9d      	ldr	r2, [pc, #628]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f1e:	430b      	orrs	r3, r1
 8006f20:	6593      	str	r3, [r2, #88]	; 0x58
 8006f22:	e003      	b.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f28:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f34:	f002 0308 	and.w	r3, r2, #8
 8006f38:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006f42:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006f46:	460b      	mov	r3, r1
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	d01e      	beq.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f58:	d10c      	bne.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f5e:	3328      	adds	r3, #40	; 0x28
 8006f60:	2102      	movs	r1, #2
 8006f62:	4618      	mov	r0, r3
 8006f64:	f000 feaa 	bl	8007cbc <RCCEx_PLL3_Config>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d002      	beq.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006f74:	4b87      	ldr	r3, [pc, #540]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f78:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f84:	4a83      	ldr	r2, [pc, #524]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f86:	430b      	orrs	r3, r1
 8006f88:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f92:	f002 0310 	and.w	r3, r2, #16
 8006f96:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006fa0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006fa4:	460b      	mov	r3, r1
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	d01e      	beq.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006fb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fb6:	d10c      	bne.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006fb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fbc:	3328      	adds	r3, #40	; 0x28
 8006fbe:	2102      	movs	r1, #2
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f000 fe7b 	bl	8007cbc <RCCEx_PLL3_Config>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d002      	beq.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006fd2:	4b70      	ldr	r3, [pc, #448]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fd6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fde:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006fe2:	4a6c      	ldr	r2, [pc, #432]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006fe4:	430b      	orrs	r3, r1
 8006fe6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006ff4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006ffe:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8007002:	460b      	mov	r3, r1
 8007004:	4313      	orrs	r3, r2
 8007006:	d03e      	beq.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007008:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800700c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007010:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007014:	d022      	beq.n	800705c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007016:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800701a:	d81b      	bhi.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800701c:	2b00      	cmp	r3, #0
 800701e:	d003      	beq.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007024:	d00b      	beq.n	800703e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007026:	e015      	b.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007028:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800702c:	3308      	adds	r3, #8
 800702e:	2100      	movs	r1, #0
 8007030:	4618      	mov	r0, r3
 8007032:	f000 fd91 	bl	8007b58 <RCCEx_PLL2_Config>
 8007036:	4603      	mov	r3, r0
 8007038:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800703c:	e00f      	b.n	800705e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800703e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007042:	3328      	adds	r3, #40	; 0x28
 8007044:	2102      	movs	r1, #2
 8007046:	4618      	mov	r0, r3
 8007048:	f000 fe38 	bl	8007cbc <RCCEx_PLL3_Config>
 800704c:	4603      	mov	r3, r0
 800704e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007052:	e004      	b.n	800705e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007054:	2301      	movs	r3, #1
 8007056:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800705a:	e000      	b.n	800705e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800705c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800705e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007062:	2b00      	cmp	r3, #0
 8007064:	d10b      	bne.n	800707e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007066:	4b4b      	ldr	r3, [pc, #300]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800706a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800706e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007072:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007076:	4a47      	ldr	r2, [pc, #284]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007078:	430b      	orrs	r3, r1
 800707a:	6593      	str	r3, [r2, #88]	; 0x58
 800707c:	e003      	b.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800707e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007082:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007086:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800708a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800708e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8007092:	67bb      	str	r3, [r7, #120]	; 0x78
 8007094:	2300      	movs	r3, #0
 8007096:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007098:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800709c:	460b      	mov	r3, r1
 800709e:	4313      	orrs	r3, r2
 80070a0:	d03b      	beq.n	800711a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80070a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070aa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80070ae:	d01f      	beq.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80070b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80070b4:	d818      	bhi.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80070b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070ba:	d003      	beq.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80070bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80070c0:	d007      	beq.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80070c2:	e011      	b.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070c4:	4b33      	ldr	r3, [pc, #204]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80070c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c8:	4a32      	ldr	r2, [pc, #200]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80070ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80070d0:	e00f      	b.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80070d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070d6:	3328      	adds	r3, #40	; 0x28
 80070d8:	2101      	movs	r1, #1
 80070da:	4618      	mov	r0, r3
 80070dc:	f000 fdee 	bl	8007cbc <RCCEx_PLL3_Config>
 80070e0:	4603      	mov	r3, r0
 80070e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80070e6:	e004      	b.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070e8:	2301      	movs	r3, #1
 80070ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80070ee:	e000      	b.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80070f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d10b      	bne.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80070fa:	4b26      	ldr	r3, [pc, #152]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80070fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070fe:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007102:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800710a:	4a22      	ldr	r2, [pc, #136]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800710c:	430b      	orrs	r3, r1
 800710e:	6553      	str	r3, [r2, #84]	; 0x54
 8007110:	e003      	b.n	800711a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007112:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007116:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800711a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800711e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007122:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8007126:	673b      	str	r3, [r7, #112]	; 0x70
 8007128:	2300      	movs	r3, #0
 800712a:	677b      	str	r3, [r7, #116]	; 0x74
 800712c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8007130:	460b      	mov	r3, r1
 8007132:	4313      	orrs	r3, r2
 8007134:	d034      	beq.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007136:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800713a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800713c:	2b00      	cmp	r3, #0
 800713e:	d003      	beq.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007144:	d007      	beq.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007146:	e011      	b.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007148:	4b12      	ldr	r3, [pc, #72]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800714a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800714c:	4a11      	ldr	r2, [pc, #68]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800714e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007152:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007154:	e00e      	b.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007156:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800715a:	3308      	adds	r3, #8
 800715c:	2102      	movs	r1, #2
 800715e:	4618      	mov	r0, r3
 8007160:	f000 fcfa 	bl	8007b58 <RCCEx_PLL2_Config>
 8007164:	4603      	mov	r3, r0
 8007166:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800716a:	e003      	b.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007172:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007174:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007178:	2b00      	cmp	r3, #0
 800717a:	d10d      	bne.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800717c:	4b05      	ldr	r3, [pc, #20]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800717e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007180:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007184:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800718a:	4a02      	ldr	r2, [pc, #8]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800718c:	430b      	orrs	r3, r1
 800718e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007190:	e006      	b.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007192:	bf00      	nop
 8007194:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007198:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800719c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80071a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80071ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80071ae:	2300      	movs	r3, #0
 80071b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80071b2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80071b6:	460b      	mov	r3, r1
 80071b8:	4313      	orrs	r3, r2
 80071ba:	d00c      	beq.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80071bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071c0:	3328      	adds	r3, #40	; 0x28
 80071c2:	2102      	movs	r1, #2
 80071c4:	4618      	mov	r0, r3
 80071c6:	f000 fd79 	bl	8007cbc <RCCEx_PLL3_Config>
 80071ca:	4603      	mov	r3, r0
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d002      	beq.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80071d0:	2301      	movs	r3, #1
 80071d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80071d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071de:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80071e2:	663b      	str	r3, [r7, #96]	; 0x60
 80071e4:	2300      	movs	r3, #0
 80071e6:	667b      	str	r3, [r7, #100]	; 0x64
 80071e8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80071ec:	460b      	mov	r3, r1
 80071ee:	4313      	orrs	r3, r2
 80071f0:	d038      	beq.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80071f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071fe:	d018      	beq.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007200:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007204:	d811      	bhi.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007206:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800720a:	d014      	beq.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800720c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007210:	d80b      	bhi.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007212:	2b00      	cmp	r3, #0
 8007214:	d011      	beq.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007216:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800721a:	d106      	bne.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800721c:	4bc3      	ldr	r3, [pc, #780]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800721e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007220:	4ac2      	ldr	r2, [pc, #776]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007222:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007226:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007228:	e008      	b.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800722a:	2301      	movs	r3, #1
 800722c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007230:	e004      	b.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007232:	bf00      	nop
 8007234:	e002      	b.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007236:	bf00      	nop
 8007238:	e000      	b.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800723a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800723c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007240:	2b00      	cmp	r3, #0
 8007242:	d10b      	bne.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007244:	4bb9      	ldr	r3, [pc, #740]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007248:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800724c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007250:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007254:	4ab5      	ldr	r2, [pc, #724]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007256:	430b      	orrs	r3, r1
 8007258:	6553      	str	r3, [r2, #84]	; 0x54
 800725a:	e003      	b.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800725c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007260:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007264:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800726c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8007270:	65bb      	str	r3, [r7, #88]	; 0x58
 8007272:	2300      	movs	r3, #0
 8007274:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007276:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800727a:	460b      	mov	r3, r1
 800727c:	4313      	orrs	r3, r2
 800727e:	d009      	beq.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007280:	4baa      	ldr	r3, [pc, #680]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007284:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007288:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800728c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800728e:	4aa7      	ldr	r2, [pc, #668]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007290:	430b      	orrs	r3, r1
 8007292:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007294:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800729c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80072a0:	653b      	str	r3, [r7, #80]	; 0x50
 80072a2:	2300      	movs	r3, #0
 80072a4:	657b      	str	r3, [r7, #84]	; 0x54
 80072a6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80072aa:	460b      	mov	r3, r1
 80072ac:	4313      	orrs	r3, r2
 80072ae:	d00a      	beq.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80072b0:	4b9e      	ldr	r3, [pc, #632]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072b2:	691b      	ldr	r3, [r3, #16]
 80072b4:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80072b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072bc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80072c0:	4a9a      	ldr	r2, [pc, #616]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072c2:	430b      	orrs	r3, r1
 80072c4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80072c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ce:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80072d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80072d4:	2300      	movs	r3, #0
 80072d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072d8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80072dc:	460b      	mov	r3, r1
 80072de:	4313      	orrs	r3, r2
 80072e0:	d009      	beq.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80072e2:	4b92      	ldr	r3, [pc, #584]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072e6:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80072ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072f0:	4a8e      	ldr	r2, [pc, #568]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072f2:	430b      	orrs	r3, r1
 80072f4:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80072f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072fe:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8007302:	643b      	str	r3, [r7, #64]	; 0x40
 8007304:	2300      	movs	r3, #0
 8007306:	647b      	str	r3, [r7, #68]	; 0x44
 8007308:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800730c:	460b      	mov	r3, r1
 800730e:	4313      	orrs	r3, r2
 8007310:	d00e      	beq.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007312:	4b86      	ldr	r3, [pc, #536]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007314:	691b      	ldr	r3, [r3, #16]
 8007316:	4a85      	ldr	r2, [pc, #532]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007318:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800731c:	6113      	str	r3, [r2, #16]
 800731e:	4b83      	ldr	r3, [pc, #524]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007320:	6919      	ldr	r1, [r3, #16]
 8007322:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007326:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800732a:	4a80      	ldr	r2, [pc, #512]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800732c:	430b      	orrs	r3, r1
 800732e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007330:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007338:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800733c:	63bb      	str	r3, [r7, #56]	; 0x38
 800733e:	2300      	movs	r3, #0
 8007340:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007342:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8007346:	460b      	mov	r3, r1
 8007348:	4313      	orrs	r3, r2
 800734a:	d009      	beq.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800734c:	4b77      	ldr	r3, [pc, #476]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800734e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007350:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007354:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800735a:	4a74      	ldr	r2, [pc, #464]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800735c:	430b      	orrs	r3, r1
 800735e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007360:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007368:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800736c:	633b      	str	r3, [r7, #48]	; 0x30
 800736e:	2300      	movs	r3, #0
 8007370:	637b      	str	r3, [r7, #52]	; 0x34
 8007372:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8007376:	460b      	mov	r3, r1
 8007378:	4313      	orrs	r3, r2
 800737a:	d00a      	beq.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800737c:	4b6b      	ldr	r3, [pc, #428]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800737e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007380:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8007384:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007388:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800738c:	4a67      	ldr	r2, [pc, #412]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800738e:	430b      	orrs	r3, r1
 8007390:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007392:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800739a:	2100      	movs	r1, #0
 800739c:	62b9      	str	r1, [r7, #40]	; 0x28
 800739e:	f003 0301 	and.w	r3, r3, #1
 80073a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073a4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80073a8:	460b      	mov	r3, r1
 80073aa:	4313      	orrs	r3, r2
 80073ac:	d011      	beq.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80073ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073b2:	3308      	adds	r3, #8
 80073b4:	2100      	movs	r1, #0
 80073b6:	4618      	mov	r0, r3
 80073b8:	f000 fbce 	bl	8007b58 <RCCEx_PLL2_Config>
 80073bc:	4603      	mov	r3, r0
 80073be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80073c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d003      	beq.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80073ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80073d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073da:	2100      	movs	r1, #0
 80073dc:	6239      	str	r1, [r7, #32]
 80073de:	f003 0302 	and.w	r3, r3, #2
 80073e2:	627b      	str	r3, [r7, #36]	; 0x24
 80073e4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80073e8:	460b      	mov	r3, r1
 80073ea:	4313      	orrs	r3, r2
 80073ec:	d011      	beq.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80073ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073f2:	3308      	adds	r3, #8
 80073f4:	2101      	movs	r1, #1
 80073f6:	4618      	mov	r0, r3
 80073f8:	f000 fbae 	bl	8007b58 <RCCEx_PLL2_Config>
 80073fc:	4603      	mov	r3, r0
 80073fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007402:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007406:	2b00      	cmp	r3, #0
 8007408:	d003      	beq.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800740a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800740e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007412:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800741a:	2100      	movs	r1, #0
 800741c:	61b9      	str	r1, [r7, #24]
 800741e:	f003 0304 	and.w	r3, r3, #4
 8007422:	61fb      	str	r3, [r7, #28]
 8007424:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007428:	460b      	mov	r3, r1
 800742a:	4313      	orrs	r3, r2
 800742c:	d011      	beq.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800742e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007432:	3308      	adds	r3, #8
 8007434:	2102      	movs	r1, #2
 8007436:	4618      	mov	r0, r3
 8007438:	f000 fb8e 	bl	8007b58 <RCCEx_PLL2_Config>
 800743c:	4603      	mov	r3, r0
 800743e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007442:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007446:	2b00      	cmp	r3, #0
 8007448:	d003      	beq.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800744a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800744e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007452:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800745a:	2100      	movs	r1, #0
 800745c:	6139      	str	r1, [r7, #16]
 800745e:	f003 0308 	and.w	r3, r3, #8
 8007462:	617b      	str	r3, [r7, #20]
 8007464:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007468:	460b      	mov	r3, r1
 800746a:	4313      	orrs	r3, r2
 800746c:	d011      	beq.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800746e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007472:	3328      	adds	r3, #40	; 0x28
 8007474:	2100      	movs	r1, #0
 8007476:	4618      	mov	r0, r3
 8007478:	f000 fc20 	bl	8007cbc <RCCEx_PLL3_Config>
 800747c:	4603      	mov	r3, r0
 800747e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8007482:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007486:	2b00      	cmp	r3, #0
 8007488:	d003      	beq.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800748a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800748e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007492:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800749a:	2100      	movs	r1, #0
 800749c:	60b9      	str	r1, [r7, #8]
 800749e:	f003 0310 	and.w	r3, r3, #16
 80074a2:	60fb      	str	r3, [r7, #12]
 80074a4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80074a8:	460b      	mov	r3, r1
 80074aa:	4313      	orrs	r3, r2
 80074ac:	d011      	beq.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80074ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074b2:	3328      	adds	r3, #40	; 0x28
 80074b4:	2101      	movs	r1, #1
 80074b6:	4618      	mov	r0, r3
 80074b8:	f000 fc00 	bl	8007cbc <RCCEx_PLL3_Config>
 80074bc:	4603      	mov	r3, r0
 80074be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80074c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d003      	beq.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80074ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80074d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074da:	2100      	movs	r1, #0
 80074dc:	6039      	str	r1, [r7, #0]
 80074de:	f003 0320 	and.w	r3, r3, #32
 80074e2:	607b      	str	r3, [r7, #4]
 80074e4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80074e8:	460b      	mov	r3, r1
 80074ea:	4313      	orrs	r3, r2
 80074ec:	d011      	beq.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80074ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074f2:	3328      	adds	r3, #40	; 0x28
 80074f4:	2102      	movs	r1, #2
 80074f6:	4618      	mov	r0, r3
 80074f8:	f000 fbe0 	bl	8007cbc <RCCEx_PLL3_Config>
 80074fc:	4603      	mov	r3, r0
 80074fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007502:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007506:	2b00      	cmp	r3, #0
 8007508:	d003      	beq.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800750a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800750e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8007512:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8007516:	2b00      	cmp	r3, #0
 8007518:	d101      	bne.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800751a:	2300      	movs	r3, #0
 800751c:	e000      	b.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800751e:	2301      	movs	r3, #1
}
 8007520:	4618      	mov	r0, r3
 8007522:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8007526:	46bd      	mov	sp, r7
 8007528:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800752c:	58024400 	.word	0x58024400

08007530 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007534:	f7fe fd7a 	bl	800602c <HAL_RCC_GetHCLKFreq>
 8007538:	4602      	mov	r2, r0
 800753a:	4b06      	ldr	r3, [pc, #24]	; (8007554 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800753c:	6a1b      	ldr	r3, [r3, #32]
 800753e:	091b      	lsrs	r3, r3, #4
 8007540:	f003 0307 	and.w	r3, r3, #7
 8007544:	4904      	ldr	r1, [pc, #16]	; (8007558 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007546:	5ccb      	ldrb	r3, [r1, r3]
 8007548:	f003 031f 	and.w	r3, r3, #31
 800754c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007550:	4618      	mov	r0, r3
 8007552:	bd80      	pop	{r7, pc}
 8007554:	58024400 	.word	0x58024400
 8007558:	0800a988 	.word	0x0800a988

0800755c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800755c:	b480      	push	{r7}
 800755e:	b089      	sub	sp, #36	; 0x24
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007564:	4ba1      	ldr	r3, [pc, #644]	; (80077ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007568:	f003 0303 	and.w	r3, r3, #3
 800756c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800756e:	4b9f      	ldr	r3, [pc, #636]	; (80077ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007572:	0b1b      	lsrs	r3, r3, #12
 8007574:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007578:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800757a:	4b9c      	ldr	r3, [pc, #624]	; (80077ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800757c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800757e:	091b      	lsrs	r3, r3, #4
 8007580:	f003 0301 	and.w	r3, r3, #1
 8007584:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007586:	4b99      	ldr	r3, [pc, #612]	; (80077ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800758a:	08db      	lsrs	r3, r3, #3
 800758c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007590:	693a      	ldr	r2, [r7, #16]
 8007592:	fb02 f303 	mul.w	r3, r2, r3
 8007596:	ee07 3a90 	vmov	s15, r3
 800759a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800759e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	f000 8111 	beq.w	80077cc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80075aa:	69bb      	ldr	r3, [r7, #24]
 80075ac:	2b02      	cmp	r3, #2
 80075ae:	f000 8083 	beq.w	80076b8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80075b2:	69bb      	ldr	r3, [r7, #24]
 80075b4:	2b02      	cmp	r3, #2
 80075b6:	f200 80a1 	bhi.w	80076fc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80075ba:	69bb      	ldr	r3, [r7, #24]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d003      	beq.n	80075c8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80075c0:	69bb      	ldr	r3, [r7, #24]
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	d056      	beq.n	8007674 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80075c6:	e099      	b.n	80076fc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075c8:	4b88      	ldr	r3, [pc, #544]	; (80077ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f003 0320 	and.w	r3, r3, #32
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d02d      	beq.n	8007630 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80075d4:	4b85      	ldr	r3, [pc, #532]	; (80077ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	08db      	lsrs	r3, r3, #3
 80075da:	f003 0303 	and.w	r3, r3, #3
 80075de:	4a84      	ldr	r2, [pc, #528]	; (80077f0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80075e0:	fa22 f303 	lsr.w	r3, r2, r3
 80075e4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	ee07 3a90 	vmov	s15, r3
 80075ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	ee07 3a90 	vmov	s15, r3
 80075f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075fe:	4b7b      	ldr	r3, [pc, #492]	; (80077ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007602:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007606:	ee07 3a90 	vmov	s15, r3
 800760a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800760e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007612:	eddf 5a78 	vldr	s11, [pc, #480]	; 80077f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007616:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800761a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800761e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007622:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800762a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800762e:	e087      	b.n	8007740 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	ee07 3a90 	vmov	s15, r3
 8007636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800763a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80077f8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800763e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007642:	4b6a      	ldr	r3, [pc, #424]	; (80077ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007646:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800764a:	ee07 3a90 	vmov	s15, r3
 800764e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007652:	ed97 6a03 	vldr	s12, [r7, #12]
 8007656:	eddf 5a67 	vldr	s11, [pc, #412]	; 80077f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800765a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800765e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007662:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007666:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800766a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800766e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007672:	e065      	b.n	8007740 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	ee07 3a90 	vmov	s15, r3
 800767a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800767e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80077fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007682:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007686:	4b59      	ldr	r3, [pc, #356]	; (80077ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800768a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800768e:	ee07 3a90 	vmov	s15, r3
 8007692:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007696:	ed97 6a03 	vldr	s12, [r7, #12]
 800769a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80077f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800769e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076b6:	e043      	b.n	8007740 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	ee07 3a90 	vmov	s15, r3
 80076be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076c2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007800 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80076c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076ca:	4b48      	ldr	r3, [pc, #288]	; (80077ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076d2:	ee07 3a90 	vmov	s15, r3
 80076d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076da:	ed97 6a03 	vldr	s12, [r7, #12]
 80076de:	eddf 5a45 	vldr	s11, [pc, #276]	; 80077f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80076e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076fa:	e021      	b.n	8007740 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	ee07 3a90 	vmov	s15, r3
 8007702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007706:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80077fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800770a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800770e:	4b37      	ldr	r3, [pc, #220]	; (80077ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007716:	ee07 3a90 	vmov	s15, r3
 800771a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800771e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007722:	eddf 5a34 	vldr	s11, [pc, #208]	; 80077f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800772a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800772e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800773a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800773e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007740:	4b2a      	ldr	r3, [pc, #168]	; (80077ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007744:	0a5b      	lsrs	r3, r3, #9
 8007746:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800774a:	ee07 3a90 	vmov	s15, r3
 800774e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007752:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007756:	ee37 7a87 	vadd.f32	s14, s15, s14
 800775a:	edd7 6a07 	vldr	s13, [r7, #28]
 800775e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007762:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007766:	ee17 2a90 	vmov	r2, s15
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800776e:	4b1f      	ldr	r3, [pc, #124]	; (80077ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007772:	0c1b      	lsrs	r3, r3, #16
 8007774:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007778:	ee07 3a90 	vmov	s15, r3
 800777c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007780:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007784:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007788:	edd7 6a07 	vldr	s13, [r7, #28]
 800778c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007790:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007794:	ee17 2a90 	vmov	r2, s15
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800779c:	4b13      	ldr	r3, [pc, #76]	; (80077ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800779e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077a0:	0e1b      	lsrs	r3, r3, #24
 80077a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077a6:	ee07 3a90 	vmov	s15, r3
 80077aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80077ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077c2:	ee17 2a90 	vmov	r2, s15
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80077ca:	e008      	b.n	80077de <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2200      	movs	r2, #0
 80077d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2200      	movs	r2, #0
 80077dc:	609a      	str	r2, [r3, #8]
}
 80077de:	bf00      	nop
 80077e0:	3724      	adds	r7, #36	; 0x24
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr
 80077ea:	bf00      	nop
 80077ec:	58024400 	.word	0x58024400
 80077f0:	03d09000 	.word	0x03d09000
 80077f4:	46000000 	.word	0x46000000
 80077f8:	4c742400 	.word	0x4c742400
 80077fc:	4a742400 	.word	0x4a742400
 8007800:	4afe502a 	.word	0x4afe502a

08007804 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007804:	b480      	push	{r7}
 8007806:	b089      	sub	sp, #36	; 0x24
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800780c:	4ba1      	ldr	r3, [pc, #644]	; (8007a94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800780e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007810:	f003 0303 	and.w	r3, r3, #3
 8007814:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007816:	4b9f      	ldr	r3, [pc, #636]	; (8007a94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800781a:	0d1b      	lsrs	r3, r3, #20
 800781c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007820:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007822:	4b9c      	ldr	r3, [pc, #624]	; (8007a94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007826:	0a1b      	lsrs	r3, r3, #8
 8007828:	f003 0301 	and.w	r3, r3, #1
 800782c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800782e:	4b99      	ldr	r3, [pc, #612]	; (8007a94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007832:	08db      	lsrs	r3, r3, #3
 8007834:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007838:	693a      	ldr	r2, [r7, #16]
 800783a:	fb02 f303 	mul.w	r3, r2, r3
 800783e:	ee07 3a90 	vmov	s15, r3
 8007842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007846:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	2b00      	cmp	r3, #0
 800784e:	f000 8111 	beq.w	8007a74 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007852:	69bb      	ldr	r3, [r7, #24]
 8007854:	2b02      	cmp	r3, #2
 8007856:	f000 8083 	beq.w	8007960 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800785a:	69bb      	ldr	r3, [r7, #24]
 800785c:	2b02      	cmp	r3, #2
 800785e:	f200 80a1 	bhi.w	80079a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007862:	69bb      	ldr	r3, [r7, #24]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d003      	beq.n	8007870 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007868:	69bb      	ldr	r3, [r7, #24]
 800786a:	2b01      	cmp	r3, #1
 800786c:	d056      	beq.n	800791c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800786e:	e099      	b.n	80079a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007870:	4b88      	ldr	r3, [pc, #544]	; (8007a94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f003 0320 	and.w	r3, r3, #32
 8007878:	2b00      	cmp	r3, #0
 800787a:	d02d      	beq.n	80078d8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800787c:	4b85      	ldr	r3, [pc, #532]	; (8007a94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	08db      	lsrs	r3, r3, #3
 8007882:	f003 0303 	and.w	r3, r3, #3
 8007886:	4a84      	ldr	r2, [pc, #528]	; (8007a98 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007888:	fa22 f303 	lsr.w	r3, r2, r3
 800788c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	ee07 3a90 	vmov	s15, r3
 8007894:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	ee07 3a90 	vmov	s15, r3
 800789e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078a6:	4b7b      	ldr	r3, [pc, #492]	; (8007a94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078ae:	ee07 3a90 	vmov	s15, r3
 80078b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80078ba:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007a9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80078be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078d2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80078d6:	e087      	b.n	80079e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	ee07 3a90 	vmov	s15, r3
 80078de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078e2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80078e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078ea:	4b6a      	ldr	r3, [pc, #424]	; (8007a94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078f2:	ee07 3a90 	vmov	s15, r3
 80078f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80078fe:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007a9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007902:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007906:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800790a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800790e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007916:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800791a:	e065      	b.n	80079e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	ee07 3a90 	vmov	s15, r3
 8007922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007926:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800792a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800792e:	4b59      	ldr	r3, [pc, #356]	; (8007a94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007936:	ee07 3a90 	vmov	s15, r3
 800793a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800793e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007942:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007a9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007946:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800794a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800794e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007952:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800795a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800795e:	e043      	b.n	80079e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	ee07 3a90 	vmov	s15, r3
 8007966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800796a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800796e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007972:	4b48      	ldr	r3, [pc, #288]	; (8007a94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800797a:	ee07 3a90 	vmov	s15, r3
 800797e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007982:	ed97 6a03 	vldr	s12, [r7, #12]
 8007986:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007a9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800798a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800798e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007992:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007996:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800799a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800799e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079a2:	e021      	b.n	80079e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	ee07 3a90 	vmov	s15, r3
 80079aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079ae:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80079b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079b6:	4b37      	ldr	r3, [pc, #220]	; (8007a94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079be:	ee07 3a90 	vmov	s15, r3
 80079c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80079ca:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007a9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80079ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079e6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80079e8:	4b2a      	ldr	r3, [pc, #168]	; (8007a94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ec:	0a5b      	lsrs	r3, r3, #9
 80079ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079f2:	ee07 3a90 	vmov	s15, r3
 80079f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80079fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a02:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a0e:	ee17 2a90 	vmov	r2, s15
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007a16:	4b1f      	ldr	r3, [pc, #124]	; (8007a94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a1a:	0c1b      	lsrs	r3, r3, #16
 8007a1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a20:	ee07 3a90 	vmov	s15, r3
 8007a24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a30:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a3c:	ee17 2a90 	vmov	r2, s15
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007a44:	4b13      	ldr	r3, [pc, #76]	; (8007a94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a48:	0e1b      	lsrs	r3, r3, #24
 8007a4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a4e:	ee07 3a90 	vmov	s15, r3
 8007a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a6a:	ee17 2a90 	vmov	r2, s15
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007a72:	e008      	b.n	8007a86 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2200      	movs	r2, #0
 8007a78:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2200      	movs	r2, #0
 8007a84:	609a      	str	r2, [r3, #8]
}
 8007a86:	bf00      	nop
 8007a88:	3724      	adds	r7, #36	; 0x24
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a90:	4770      	bx	lr
 8007a92:	bf00      	nop
 8007a94:	58024400 	.word	0x58024400
 8007a98:	03d09000 	.word	0x03d09000
 8007a9c:	46000000 	.word	0x46000000
 8007aa0:	4c742400 	.word	0x4c742400
 8007aa4:	4a742400 	.word	0x4a742400
 8007aa8:	4afe502a 	.word	0x4afe502a

08007aac <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b084      	sub	sp, #16
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 8007ab4:	4b26      	ldr	r3, [pc, #152]	; (8007b50 <HAL_RCCEx_CRSConfig+0xa4>)
 8007ab6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007aba:	4a25      	ldr	r2, [pc, #148]	; (8007b50 <HAL_RCCEx_CRSConfig+0xa4>)
 8007abc:	f043 0302 	orr.w	r3, r3, #2
 8007ac0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
 8007ac4:	4b22      	ldr	r3, [pc, #136]	; (8007b50 <HAL_RCCEx_CRSConfig+0xa4>)
 8007ac6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007aca:	4a21      	ldr	r2, [pc, #132]	; (8007b50 <HAL_RCCEx_CRSConfig+0xa4>)
 8007acc:	f023 0302 	bic.w	r3, r3, #2
 8007ad0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
 8007ad4:	f7fa fdae 	bl	8002634 <HAL_GetREVID>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	f241 0203 	movw	r2, #4099	; 0x1003
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d80b      	bhi.n	8007afa <HAL_RCCEx_CRSConfig+0x4e>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007aea:	d106      	bne.n	8007afa <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681a      	ldr	r2, [r3, #0]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	4313      	orrs	r3, r2
 8007af6:	60fb      	str	r3, [r7, #12]
 8007af8:	e008      	b.n	8007b0c <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681a      	ldr	r2, [r3, #0]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	431a      	orrs	r2, r3
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	689b      	ldr	r3, [r3, #8]
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	68db      	ldr	r3, [r3, #12]
 8007b10:	68fa      	ldr	r2, [r7, #12]
 8007b12:	4313      	orrs	r3, r2
 8007b14:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	691b      	ldr	r3, [r3, #16]
 8007b1a:	041b      	lsls	r3, r3, #16
 8007b1c:	68fa      	ldr	r2, [r7, #12]
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 8007b22:	4a0c      	ldr	r2, [pc, #48]	; (8007b54 <HAL_RCCEx_CRSConfig+0xa8>)
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 8007b28:	4b0a      	ldr	r3, [pc, #40]	; (8007b54 <HAL_RCCEx_CRSConfig+0xa8>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	695b      	ldr	r3, [r3, #20]
 8007b34:	021b      	lsls	r3, r3, #8
 8007b36:	4907      	ldr	r1, [pc, #28]	; (8007b54 <HAL_RCCEx_CRSConfig+0xa8>)
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 8007b3c:	4b05      	ldr	r3, [pc, #20]	; (8007b54 <HAL_RCCEx_CRSConfig+0xa8>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a04      	ldr	r2, [pc, #16]	; (8007b54 <HAL_RCCEx_CRSConfig+0xa8>)
 8007b42:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007b46:	6013      	str	r3, [r2, #0]
}
 8007b48:	bf00      	nop
 8007b4a:	3710      	adds	r7, #16
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}
 8007b50:	58024400 	.word	0x58024400
 8007b54:	40008400 	.word	0x40008400

08007b58 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b084      	sub	sp, #16
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007b62:	2300      	movs	r3, #0
 8007b64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007b66:	4b53      	ldr	r3, [pc, #332]	; (8007cb4 <RCCEx_PLL2_Config+0x15c>)
 8007b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b6a:	f003 0303 	and.w	r3, r3, #3
 8007b6e:	2b03      	cmp	r3, #3
 8007b70:	d101      	bne.n	8007b76 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	e099      	b.n	8007caa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007b76:	4b4f      	ldr	r3, [pc, #316]	; (8007cb4 <RCCEx_PLL2_Config+0x15c>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a4e      	ldr	r2, [pc, #312]	; (8007cb4 <RCCEx_PLL2_Config+0x15c>)
 8007b7c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007b80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b82:	f7fa fd07 	bl	8002594 <HAL_GetTick>
 8007b86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007b88:	e008      	b.n	8007b9c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007b8a:	f7fa fd03 	bl	8002594 <HAL_GetTick>
 8007b8e:	4602      	mov	r2, r0
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	1ad3      	subs	r3, r2, r3
 8007b94:	2b02      	cmp	r3, #2
 8007b96:	d901      	bls.n	8007b9c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007b98:	2303      	movs	r3, #3
 8007b9a:	e086      	b.n	8007caa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007b9c:	4b45      	ldr	r3, [pc, #276]	; (8007cb4 <RCCEx_PLL2_Config+0x15c>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d1f0      	bne.n	8007b8a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007ba8:	4b42      	ldr	r3, [pc, #264]	; (8007cb4 <RCCEx_PLL2_Config+0x15c>)
 8007baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	031b      	lsls	r3, r3, #12
 8007bb6:	493f      	ldr	r1, [pc, #252]	; (8007cb4 <RCCEx_PLL2_Config+0x15c>)
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	628b      	str	r3, [r1, #40]	; 0x28
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	3b01      	subs	r3, #1
 8007bc2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	689b      	ldr	r3, [r3, #8]
 8007bca:	3b01      	subs	r3, #1
 8007bcc:	025b      	lsls	r3, r3, #9
 8007bce:	b29b      	uxth	r3, r3
 8007bd0:	431a      	orrs	r2, r3
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	68db      	ldr	r3, [r3, #12]
 8007bd6:	3b01      	subs	r3, #1
 8007bd8:	041b      	lsls	r3, r3, #16
 8007bda:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007bde:	431a      	orrs	r2, r3
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	691b      	ldr	r3, [r3, #16]
 8007be4:	3b01      	subs	r3, #1
 8007be6:	061b      	lsls	r3, r3, #24
 8007be8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007bec:	4931      	ldr	r1, [pc, #196]	; (8007cb4 <RCCEx_PLL2_Config+0x15c>)
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007bf2:	4b30      	ldr	r3, [pc, #192]	; (8007cb4 <RCCEx_PLL2_Config+0x15c>)
 8007bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bf6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	695b      	ldr	r3, [r3, #20]
 8007bfe:	492d      	ldr	r1, [pc, #180]	; (8007cb4 <RCCEx_PLL2_Config+0x15c>)
 8007c00:	4313      	orrs	r3, r2
 8007c02:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007c04:	4b2b      	ldr	r3, [pc, #172]	; (8007cb4 <RCCEx_PLL2_Config+0x15c>)
 8007c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c08:	f023 0220 	bic.w	r2, r3, #32
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	699b      	ldr	r3, [r3, #24]
 8007c10:	4928      	ldr	r1, [pc, #160]	; (8007cb4 <RCCEx_PLL2_Config+0x15c>)
 8007c12:	4313      	orrs	r3, r2
 8007c14:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007c16:	4b27      	ldr	r3, [pc, #156]	; (8007cb4 <RCCEx_PLL2_Config+0x15c>)
 8007c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c1a:	4a26      	ldr	r2, [pc, #152]	; (8007cb4 <RCCEx_PLL2_Config+0x15c>)
 8007c1c:	f023 0310 	bic.w	r3, r3, #16
 8007c20:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007c22:	4b24      	ldr	r3, [pc, #144]	; (8007cb4 <RCCEx_PLL2_Config+0x15c>)
 8007c24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c26:	4b24      	ldr	r3, [pc, #144]	; (8007cb8 <RCCEx_PLL2_Config+0x160>)
 8007c28:	4013      	ands	r3, r2
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	69d2      	ldr	r2, [r2, #28]
 8007c2e:	00d2      	lsls	r2, r2, #3
 8007c30:	4920      	ldr	r1, [pc, #128]	; (8007cb4 <RCCEx_PLL2_Config+0x15c>)
 8007c32:	4313      	orrs	r3, r2
 8007c34:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007c36:	4b1f      	ldr	r3, [pc, #124]	; (8007cb4 <RCCEx_PLL2_Config+0x15c>)
 8007c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c3a:	4a1e      	ldr	r2, [pc, #120]	; (8007cb4 <RCCEx_PLL2_Config+0x15c>)
 8007c3c:	f043 0310 	orr.w	r3, r3, #16
 8007c40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d106      	bne.n	8007c56 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007c48:	4b1a      	ldr	r3, [pc, #104]	; (8007cb4 <RCCEx_PLL2_Config+0x15c>)
 8007c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c4c:	4a19      	ldr	r2, [pc, #100]	; (8007cb4 <RCCEx_PLL2_Config+0x15c>)
 8007c4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007c52:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007c54:	e00f      	b.n	8007c76 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	d106      	bne.n	8007c6a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007c5c:	4b15      	ldr	r3, [pc, #84]	; (8007cb4 <RCCEx_PLL2_Config+0x15c>)
 8007c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c60:	4a14      	ldr	r2, [pc, #80]	; (8007cb4 <RCCEx_PLL2_Config+0x15c>)
 8007c62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c66:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007c68:	e005      	b.n	8007c76 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007c6a:	4b12      	ldr	r3, [pc, #72]	; (8007cb4 <RCCEx_PLL2_Config+0x15c>)
 8007c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c6e:	4a11      	ldr	r2, [pc, #68]	; (8007cb4 <RCCEx_PLL2_Config+0x15c>)
 8007c70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007c74:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007c76:	4b0f      	ldr	r3, [pc, #60]	; (8007cb4 <RCCEx_PLL2_Config+0x15c>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a0e      	ldr	r2, [pc, #56]	; (8007cb4 <RCCEx_PLL2_Config+0x15c>)
 8007c7c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007c80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c82:	f7fa fc87 	bl	8002594 <HAL_GetTick>
 8007c86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007c88:	e008      	b.n	8007c9c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007c8a:	f7fa fc83 	bl	8002594 <HAL_GetTick>
 8007c8e:	4602      	mov	r2, r0
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	1ad3      	subs	r3, r2, r3
 8007c94:	2b02      	cmp	r3, #2
 8007c96:	d901      	bls.n	8007c9c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007c98:	2303      	movs	r3, #3
 8007c9a:	e006      	b.n	8007caa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007c9c:	4b05      	ldr	r3, [pc, #20]	; (8007cb4 <RCCEx_PLL2_Config+0x15c>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d0f0      	beq.n	8007c8a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3710      	adds	r7, #16
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
 8007cb2:	bf00      	nop
 8007cb4:	58024400 	.word	0x58024400
 8007cb8:	ffff0007 	.word	0xffff0007

08007cbc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007cca:	4b53      	ldr	r3, [pc, #332]	; (8007e18 <RCCEx_PLL3_Config+0x15c>)
 8007ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cce:	f003 0303 	and.w	r3, r3, #3
 8007cd2:	2b03      	cmp	r3, #3
 8007cd4:	d101      	bne.n	8007cda <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	e099      	b.n	8007e0e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007cda:	4b4f      	ldr	r3, [pc, #316]	; (8007e18 <RCCEx_PLL3_Config+0x15c>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a4e      	ldr	r2, [pc, #312]	; (8007e18 <RCCEx_PLL3_Config+0x15c>)
 8007ce0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ce4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ce6:	f7fa fc55 	bl	8002594 <HAL_GetTick>
 8007cea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007cec:	e008      	b.n	8007d00 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007cee:	f7fa fc51 	bl	8002594 <HAL_GetTick>
 8007cf2:	4602      	mov	r2, r0
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	1ad3      	subs	r3, r2, r3
 8007cf8:	2b02      	cmp	r3, #2
 8007cfa:	d901      	bls.n	8007d00 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007cfc:	2303      	movs	r3, #3
 8007cfe:	e086      	b.n	8007e0e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007d00:	4b45      	ldr	r3, [pc, #276]	; (8007e18 <RCCEx_PLL3_Config+0x15c>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d1f0      	bne.n	8007cee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007d0c:	4b42      	ldr	r3, [pc, #264]	; (8007e18 <RCCEx_PLL3_Config+0x15c>)
 8007d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d10:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	051b      	lsls	r3, r3, #20
 8007d1a:	493f      	ldr	r1, [pc, #252]	; (8007e18 <RCCEx_PLL3_Config+0x15c>)
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	628b      	str	r3, [r1, #40]	; 0x28
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	3b01      	subs	r3, #1
 8007d26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	3b01      	subs	r3, #1
 8007d30:	025b      	lsls	r3, r3, #9
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	431a      	orrs	r2, r3
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	68db      	ldr	r3, [r3, #12]
 8007d3a:	3b01      	subs	r3, #1
 8007d3c:	041b      	lsls	r3, r3, #16
 8007d3e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007d42:	431a      	orrs	r2, r3
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	691b      	ldr	r3, [r3, #16]
 8007d48:	3b01      	subs	r3, #1
 8007d4a:	061b      	lsls	r3, r3, #24
 8007d4c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007d50:	4931      	ldr	r1, [pc, #196]	; (8007e18 <RCCEx_PLL3_Config+0x15c>)
 8007d52:	4313      	orrs	r3, r2
 8007d54:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007d56:	4b30      	ldr	r3, [pc, #192]	; (8007e18 <RCCEx_PLL3_Config+0x15c>)
 8007d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d5a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	695b      	ldr	r3, [r3, #20]
 8007d62:	492d      	ldr	r1, [pc, #180]	; (8007e18 <RCCEx_PLL3_Config+0x15c>)
 8007d64:	4313      	orrs	r3, r2
 8007d66:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007d68:	4b2b      	ldr	r3, [pc, #172]	; (8007e18 <RCCEx_PLL3_Config+0x15c>)
 8007d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d6c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	699b      	ldr	r3, [r3, #24]
 8007d74:	4928      	ldr	r1, [pc, #160]	; (8007e18 <RCCEx_PLL3_Config+0x15c>)
 8007d76:	4313      	orrs	r3, r2
 8007d78:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007d7a:	4b27      	ldr	r3, [pc, #156]	; (8007e18 <RCCEx_PLL3_Config+0x15c>)
 8007d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d7e:	4a26      	ldr	r2, [pc, #152]	; (8007e18 <RCCEx_PLL3_Config+0x15c>)
 8007d80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d84:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007d86:	4b24      	ldr	r3, [pc, #144]	; (8007e18 <RCCEx_PLL3_Config+0x15c>)
 8007d88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d8a:	4b24      	ldr	r3, [pc, #144]	; (8007e1c <RCCEx_PLL3_Config+0x160>)
 8007d8c:	4013      	ands	r3, r2
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	69d2      	ldr	r2, [r2, #28]
 8007d92:	00d2      	lsls	r2, r2, #3
 8007d94:	4920      	ldr	r1, [pc, #128]	; (8007e18 <RCCEx_PLL3_Config+0x15c>)
 8007d96:	4313      	orrs	r3, r2
 8007d98:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007d9a:	4b1f      	ldr	r3, [pc, #124]	; (8007e18 <RCCEx_PLL3_Config+0x15c>)
 8007d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d9e:	4a1e      	ldr	r2, [pc, #120]	; (8007e18 <RCCEx_PLL3_Config+0x15c>)
 8007da0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007da4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d106      	bne.n	8007dba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007dac:	4b1a      	ldr	r3, [pc, #104]	; (8007e18 <RCCEx_PLL3_Config+0x15c>)
 8007dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007db0:	4a19      	ldr	r2, [pc, #100]	; (8007e18 <RCCEx_PLL3_Config+0x15c>)
 8007db2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007db6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007db8:	e00f      	b.n	8007dda <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d106      	bne.n	8007dce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007dc0:	4b15      	ldr	r3, [pc, #84]	; (8007e18 <RCCEx_PLL3_Config+0x15c>)
 8007dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc4:	4a14      	ldr	r2, [pc, #80]	; (8007e18 <RCCEx_PLL3_Config+0x15c>)
 8007dc6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007dca:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007dcc:	e005      	b.n	8007dda <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007dce:	4b12      	ldr	r3, [pc, #72]	; (8007e18 <RCCEx_PLL3_Config+0x15c>)
 8007dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd2:	4a11      	ldr	r2, [pc, #68]	; (8007e18 <RCCEx_PLL3_Config+0x15c>)
 8007dd4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007dd8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007dda:	4b0f      	ldr	r3, [pc, #60]	; (8007e18 <RCCEx_PLL3_Config+0x15c>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a0e      	ldr	r2, [pc, #56]	; (8007e18 <RCCEx_PLL3_Config+0x15c>)
 8007de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007de4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007de6:	f7fa fbd5 	bl	8002594 <HAL_GetTick>
 8007dea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007dec:	e008      	b.n	8007e00 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007dee:	f7fa fbd1 	bl	8002594 <HAL_GetTick>
 8007df2:	4602      	mov	r2, r0
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	1ad3      	subs	r3, r2, r3
 8007df8:	2b02      	cmp	r3, #2
 8007dfa:	d901      	bls.n	8007e00 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007dfc:	2303      	movs	r3, #3
 8007dfe:	e006      	b.n	8007e0e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007e00:	4b05      	ldr	r3, [pc, #20]	; (8007e18 <RCCEx_PLL3_Config+0x15c>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d0f0      	beq.n	8007dee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3710      	adds	r7, #16
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
 8007e16:	bf00      	nop
 8007e18:	58024400 	.word	0x58024400
 8007e1c:	ffff0007 	.word	0xffff0007

08007e20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b082      	sub	sp, #8
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d101      	bne.n	8007e32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	e049      	b.n	8007ec6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e38:	b2db      	uxtb	r3, r3
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d106      	bne.n	8007e4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2200      	movs	r2, #0
 8007e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f7fa f8c8 	bl	8001fdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2202      	movs	r2, #2
 8007e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681a      	ldr	r2, [r3, #0]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	3304      	adds	r3, #4
 8007e5c:	4619      	mov	r1, r3
 8007e5e:	4610      	mov	r0, r2
 8007e60:	f000 f92e 	bl	80080c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2201      	movs	r2, #1
 8007e68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2201      	movs	r2, #1
 8007e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2201      	movs	r2, #1
 8007e78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2201      	movs	r2, #1
 8007e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2201      	movs	r2, #1
 8007e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2201      	movs	r2, #1
 8007e98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ec4:	2300      	movs	r3, #0
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3708      	adds	r7, #8
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
	...

08007ed0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b084      	sub	sp, #16
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007eda:	2300      	movs	r3, #0
 8007edc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d101      	bne.n	8007eec <HAL_TIM_ConfigClockSource+0x1c>
 8007ee8:	2302      	movs	r3, #2
 8007eea:	e0dc      	b.n	80080a6 <HAL_TIM_ConfigClockSource+0x1d6>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2201      	movs	r2, #1
 8007ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2202      	movs	r2, #2
 8007ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	689b      	ldr	r3, [r3, #8]
 8007f02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007f04:	68ba      	ldr	r2, [r7, #8]
 8007f06:	4b6a      	ldr	r3, [pc, #424]	; (80080b0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8007f08:	4013      	ands	r3, r2
 8007f0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	68ba      	ldr	r2, [r7, #8]
 8007f1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a64      	ldr	r2, [pc, #400]	; (80080b4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	f000 80a9 	beq.w	800807a <HAL_TIM_ConfigClockSource+0x1aa>
 8007f28:	4a62      	ldr	r2, [pc, #392]	; (80080b4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	f200 80ae 	bhi.w	800808c <HAL_TIM_ConfigClockSource+0x1bc>
 8007f30:	4a61      	ldr	r2, [pc, #388]	; (80080b8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	f000 80a1 	beq.w	800807a <HAL_TIM_ConfigClockSource+0x1aa>
 8007f38:	4a5f      	ldr	r2, [pc, #380]	; (80080b8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	f200 80a6 	bhi.w	800808c <HAL_TIM_ConfigClockSource+0x1bc>
 8007f40:	4a5e      	ldr	r2, [pc, #376]	; (80080bc <HAL_TIM_ConfigClockSource+0x1ec>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	f000 8099 	beq.w	800807a <HAL_TIM_ConfigClockSource+0x1aa>
 8007f48:	4a5c      	ldr	r2, [pc, #368]	; (80080bc <HAL_TIM_ConfigClockSource+0x1ec>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	f200 809e 	bhi.w	800808c <HAL_TIM_ConfigClockSource+0x1bc>
 8007f50:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007f54:	f000 8091 	beq.w	800807a <HAL_TIM_ConfigClockSource+0x1aa>
 8007f58:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007f5c:	f200 8096 	bhi.w	800808c <HAL_TIM_ConfigClockSource+0x1bc>
 8007f60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f64:	f000 8089 	beq.w	800807a <HAL_TIM_ConfigClockSource+0x1aa>
 8007f68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f6c:	f200 808e 	bhi.w	800808c <HAL_TIM_ConfigClockSource+0x1bc>
 8007f70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f74:	d03e      	beq.n	8007ff4 <HAL_TIM_ConfigClockSource+0x124>
 8007f76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f7a:	f200 8087 	bhi.w	800808c <HAL_TIM_ConfigClockSource+0x1bc>
 8007f7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f82:	f000 8086 	beq.w	8008092 <HAL_TIM_ConfigClockSource+0x1c2>
 8007f86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f8a:	d87f      	bhi.n	800808c <HAL_TIM_ConfigClockSource+0x1bc>
 8007f8c:	2b70      	cmp	r3, #112	; 0x70
 8007f8e:	d01a      	beq.n	8007fc6 <HAL_TIM_ConfigClockSource+0xf6>
 8007f90:	2b70      	cmp	r3, #112	; 0x70
 8007f92:	d87b      	bhi.n	800808c <HAL_TIM_ConfigClockSource+0x1bc>
 8007f94:	2b60      	cmp	r3, #96	; 0x60
 8007f96:	d050      	beq.n	800803a <HAL_TIM_ConfigClockSource+0x16a>
 8007f98:	2b60      	cmp	r3, #96	; 0x60
 8007f9a:	d877      	bhi.n	800808c <HAL_TIM_ConfigClockSource+0x1bc>
 8007f9c:	2b50      	cmp	r3, #80	; 0x50
 8007f9e:	d03c      	beq.n	800801a <HAL_TIM_ConfigClockSource+0x14a>
 8007fa0:	2b50      	cmp	r3, #80	; 0x50
 8007fa2:	d873      	bhi.n	800808c <HAL_TIM_ConfigClockSource+0x1bc>
 8007fa4:	2b40      	cmp	r3, #64	; 0x40
 8007fa6:	d058      	beq.n	800805a <HAL_TIM_ConfigClockSource+0x18a>
 8007fa8:	2b40      	cmp	r3, #64	; 0x40
 8007faa:	d86f      	bhi.n	800808c <HAL_TIM_ConfigClockSource+0x1bc>
 8007fac:	2b30      	cmp	r3, #48	; 0x30
 8007fae:	d064      	beq.n	800807a <HAL_TIM_ConfigClockSource+0x1aa>
 8007fb0:	2b30      	cmp	r3, #48	; 0x30
 8007fb2:	d86b      	bhi.n	800808c <HAL_TIM_ConfigClockSource+0x1bc>
 8007fb4:	2b20      	cmp	r3, #32
 8007fb6:	d060      	beq.n	800807a <HAL_TIM_ConfigClockSource+0x1aa>
 8007fb8:	2b20      	cmp	r3, #32
 8007fba:	d867      	bhi.n	800808c <HAL_TIM_ConfigClockSource+0x1bc>
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d05c      	beq.n	800807a <HAL_TIM_ConfigClockSource+0x1aa>
 8007fc0:	2b10      	cmp	r3, #16
 8007fc2:	d05a      	beq.n	800807a <HAL_TIM_ConfigClockSource+0x1aa>
 8007fc4:	e062      	b.n	800808c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6818      	ldr	r0, [r3, #0]
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	6899      	ldr	r1, [r3, #8]
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	685a      	ldr	r2, [r3, #4]
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	68db      	ldr	r3, [r3, #12]
 8007fd6:	f000 f98b 	bl	80082f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	689b      	ldr	r3, [r3, #8]
 8007fe0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007fe8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	68ba      	ldr	r2, [r7, #8]
 8007ff0:	609a      	str	r2, [r3, #8]
      break;
 8007ff2:	e04f      	b.n	8008094 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6818      	ldr	r0, [r3, #0]
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	6899      	ldr	r1, [r3, #8]
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	685a      	ldr	r2, [r3, #4]
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	68db      	ldr	r3, [r3, #12]
 8008004:	f000 f974 	bl	80082f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	689a      	ldr	r2, [r3, #8]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008016:	609a      	str	r2, [r3, #8]
      break;
 8008018:	e03c      	b.n	8008094 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6818      	ldr	r0, [r3, #0]
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	6859      	ldr	r1, [r3, #4]
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	68db      	ldr	r3, [r3, #12]
 8008026:	461a      	mov	r2, r3
 8008028:	f000 f8e4 	bl	80081f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	2150      	movs	r1, #80	; 0x50
 8008032:	4618      	mov	r0, r3
 8008034:	f000 f93e 	bl	80082b4 <TIM_ITRx_SetConfig>
      break;
 8008038:	e02c      	b.n	8008094 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6818      	ldr	r0, [r3, #0]
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	6859      	ldr	r1, [r3, #4]
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	68db      	ldr	r3, [r3, #12]
 8008046:	461a      	mov	r2, r3
 8008048:	f000 f903 	bl	8008252 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	2160      	movs	r1, #96	; 0x60
 8008052:	4618      	mov	r0, r3
 8008054:	f000 f92e 	bl	80082b4 <TIM_ITRx_SetConfig>
      break;
 8008058:	e01c      	b.n	8008094 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6818      	ldr	r0, [r3, #0]
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	6859      	ldr	r1, [r3, #4]
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	68db      	ldr	r3, [r3, #12]
 8008066:	461a      	mov	r2, r3
 8008068:	f000 f8c4 	bl	80081f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	2140      	movs	r1, #64	; 0x40
 8008072:	4618      	mov	r0, r3
 8008074:	f000 f91e 	bl	80082b4 <TIM_ITRx_SetConfig>
      break;
 8008078:	e00c      	b.n	8008094 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681a      	ldr	r2, [r3, #0]
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4619      	mov	r1, r3
 8008084:	4610      	mov	r0, r2
 8008086:	f000 f915 	bl	80082b4 <TIM_ITRx_SetConfig>
      break;
 800808a:	e003      	b.n	8008094 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800808c:	2301      	movs	r3, #1
 800808e:	73fb      	strb	r3, [r7, #15]
      break;
 8008090:	e000      	b.n	8008094 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8008092:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2201      	movs	r2, #1
 8008098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2200      	movs	r2, #0
 80080a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80080a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3710      	adds	r7, #16
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}
 80080ae:	bf00      	nop
 80080b0:	ffceff88 	.word	0xffceff88
 80080b4:	00100040 	.word	0x00100040
 80080b8:	00100030 	.word	0x00100030
 80080bc:	00100020 	.word	0x00100020

080080c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b085      	sub	sp, #20
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	4a40      	ldr	r2, [pc, #256]	; (80081d4 <TIM_Base_SetConfig+0x114>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d013      	beq.n	8008100 <TIM_Base_SetConfig+0x40>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080de:	d00f      	beq.n	8008100 <TIM_Base_SetConfig+0x40>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	4a3d      	ldr	r2, [pc, #244]	; (80081d8 <TIM_Base_SetConfig+0x118>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d00b      	beq.n	8008100 <TIM_Base_SetConfig+0x40>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	4a3c      	ldr	r2, [pc, #240]	; (80081dc <TIM_Base_SetConfig+0x11c>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d007      	beq.n	8008100 <TIM_Base_SetConfig+0x40>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	4a3b      	ldr	r2, [pc, #236]	; (80081e0 <TIM_Base_SetConfig+0x120>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d003      	beq.n	8008100 <TIM_Base_SetConfig+0x40>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	4a3a      	ldr	r2, [pc, #232]	; (80081e4 <TIM_Base_SetConfig+0x124>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d108      	bne.n	8008112 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008106:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	68fa      	ldr	r2, [r7, #12]
 800810e:	4313      	orrs	r3, r2
 8008110:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	4a2f      	ldr	r2, [pc, #188]	; (80081d4 <TIM_Base_SetConfig+0x114>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d01f      	beq.n	800815a <TIM_Base_SetConfig+0x9a>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008120:	d01b      	beq.n	800815a <TIM_Base_SetConfig+0x9a>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	4a2c      	ldr	r2, [pc, #176]	; (80081d8 <TIM_Base_SetConfig+0x118>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d017      	beq.n	800815a <TIM_Base_SetConfig+0x9a>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	4a2b      	ldr	r2, [pc, #172]	; (80081dc <TIM_Base_SetConfig+0x11c>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d013      	beq.n	800815a <TIM_Base_SetConfig+0x9a>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	4a2a      	ldr	r2, [pc, #168]	; (80081e0 <TIM_Base_SetConfig+0x120>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d00f      	beq.n	800815a <TIM_Base_SetConfig+0x9a>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	4a29      	ldr	r2, [pc, #164]	; (80081e4 <TIM_Base_SetConfig+0x124>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d00b      	beq.n	800815a <TIM_Base_SetConfig+0x9a>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	4a28      	ldr	r2, [pc, #160]	; (80081e8 <TIM_Base_SetConfig+0x128>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d007      	beq.n	800815a <TIM_Base_SetConfig+0x9a>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	4a27      	ldr	r2, [pc, #156]	; (80081ec <TIM_Base_SetConfig+0x12c>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d003      	beq.n	800815a <TIM_Base_SetConfig+0x9a>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	4a26      	ldr	r2, [pc, #152]	; (80081f0 <TIM_Base_SetConfig+0x130>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d108      	bne.n	800816c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008160:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	68db      	ldr	r3, [r3, #12]
 8008166:	68fa      	ldr	r2, [r7, #12]
 8008168:	4313      	orrs	r3, r2
 800816a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	695b      	ldr	r3, [r3, #20]
 8008176:	4313      	orrs	r3, r2
 8008178:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	68fa      	ldr	r2, [r7, #12]
 800817e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	689a      	ldr	r2, [r3, #8]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	681a      	ldr	r2, [r3, #0]
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	4a10      	ldr	r2, [pc, #64]	; (80081d4 <TIM_Base_SetConfig+0x114>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d00f      	beq.n	80081b8 <TIM_Base_SetConfig+0xf8>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	4a12      	ldr	r2, [pc, #72]	; (80081e4 <TIM_Base_SetConfig+0x124>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d00b      	beq.n	80081b8 <TIM_Base_SetConfig+0xf8>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	4a11      	ldr	r2, [pc, #68]	; (80081e8 <TIM_Base_SetConfig+0x128>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d007      	beq.n	80081b8 <TIM_Base_SetConfig+0xf8>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	4a10      	ldr	r2, [pc, #64]	; (80081ec <TIM_Base_SetConfig+0x12c>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d003      	beq.n	80081b8 <TIM_Base_SetConfig+0xf8>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	4a0f      	ldr	r2, [pc, #60]	; (80081f0 <TIM_Base_SetConfig+0x130>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d103      	bne.n	80081c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	691a      	ldr	r2, [r3, #16]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2201      	movs	r2, #1
 80081c4:	615a      	str	r2, [r3, #20]
}
 80081c6:	bf00      	nop
 80081c8:	3714      	adds	r7, #20
 80081ca:	46bd      	mov	sp, r7
 80081cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d0:	4770      	bx	lr
 80081d2:	bf00      	nop
 80081d4:	40010000 	.word	0x40010000
 80081d8:	40000400 	.word	0x40000400
 80081dc:	40000800 	.word	0x40000800
 80081e0:	40000c00 	.word	0x40000c00
 80081e4:	40010400 	.word	0x40010400
 80081e8:	40014000 	.word	0x40014000
 80081ec:	40014400 	.word	0x40014400
 80081f0:	40014800 	.word	0x40014800

080081f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b087      	sub	sp, #28
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	60f8      	str	r0, [r7, #12]
 80081fc:	60b9      	str	r1, [r7, #8]
 80081fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	6a1b      	ldr	r3, [r3, #32]
 8008204:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	6a1b      	ldr	r3, [r3, #32]
 800820a:	f023 0201 	bic.w	r2, r3, #1
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	699b      	ldr	r3, [r3, #24]
 8008216:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800821e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	011b      	lsls	r3, r3, #4
 8008224:	693a      	ldr	r2, [r7, #16]
 8008226:	4313      	orrs	r3, r2
 8008228:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	f023 030a 	bic.w	r3, r3, #10
 8008230:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008232:	697a      	ldr	r2, [r7, #20]
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	4313      	orrs	r3, r2
 8008238:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	693a      	ldr	r2, [r7, #16]
 800823e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	697a      	ldr	r2, [r7, #20]
 8008244:	621a      	str	r2, [r3, #32]
}
 8008246:	bf00      	nop
 8008248:	371c      	adds	r7, #28
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr

08008252 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008252:	b480      	push	{r7}
 8008254:	b087      	sub	sp, #28
 8008256:	af00      	add	r7, sp, #0
 8008258:	60f8      	str	r0, [r7, #12]
 800825a:	60b9      	str	r1, [r7, #8]
 800825c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	6a1b      	ldr	r3, [r3, #32]
 8008262:	f023 0210 	bic.w	r2, r3, #16
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	699b      	ldr	r3, [r3, #24]
 800826e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	6a1b      	ldr	r3, [r3, #32]
 8008274:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800827c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	031b      	lsls	r3, r3, #12
 8008282:	697a      	ldr	r2, [r7, #20]
 8008284:	4313      	orrs	r3, r2
 8008286:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800828e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	011b      	lsls	r3, r3, #4
 8008294:	693a      	ldr	r2, [r7, #16]
 8008296:	4313      	orrs	r3, r2
 8008298:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	697a      	ldr	r2, [r7, #20]
 800829e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	693a      	ldr	r2, [r7, #16]
 80082a4:	621a      	str	r2, [r3, #32]
}
 80082a6:	bf00      	nop
 80082a8:	371c      	adds	r7, #28
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr
	...

080082b4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b085      	sub	sp, #20
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	689b      	ldr	r3, [r3, #8]
 80082c2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80082c4:	68fa      	ldr	r2, [r7, #12]
 80082c6:	4b09      	ldr	r3, [pc, #36]	; (80082ec <TIM_ITRx_SetConfig+0x38>)
 80082c8:	4013      	ands	r3, r2
 80082ca:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80082cc:	683a      	ldr	r2, [r7, #0]
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	4313      	orrs	r3, r2
 80082d2:	f043 0307 	orr.w	r3, r3, #7
 80082d6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	68fa      	ldr	r2, [r7, #12]
 80082dc:	609a      	str	r2, [r3, #8]
}
 80082de:	bf00      	nop
 80082e0:	3714      	adds	r7, #20
 80082e2:	46bd      	mov	sp, r7
 80082e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e8:	4770      	bx	lr
 80082ea:	bf00      	nop
 80082ec:	ffcfff8f 	.word	0xffcfff8f

080082f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b087      	sub	sp, #28
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	60b9      	str	r1, [r7, #8]
 80082fa:	607a      	str	r2, [r7, #4]
 80082fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	689b      	ldr	r3, [r3, #8]
 8008302:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800830a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	021a      	lsls	r2, r3, #8
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	431a      	orrs	r2, r3
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	4313      	orrs	r3, r2
 8008318:	697a      	ldr	r2, [r7, #20]
 800831a:	4313      	orrs	r3, r2
 800831c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	697a      	ldr	r2, [r7, #20]
 8008322:	609a      	str	r2, [r3, #8]
}
 8008324:	bf00      	nop
 8008326:	371c      	adds	r7, #28
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr

08008330 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008330:	b480      	push	{r7}
 8008332:	b085      	sub	sp, #20
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008340:	2b01      	cmp	r3, #1
 8008342:	d101      	bne.n	8008348 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008344:	2302      	movs	r3, #2
 8008346:	e06d      	b.n	8008424 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2201      	movs	r2, #1
 800834c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2202      	movs	r2, #2
 8008354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	689b      	ldr	r3, [r3, #8]
 8008366:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a30      	ldr	r2, [pc, #192]	; (8008430 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d004      	beq.n	800837c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4a2f      	ldr	r2, [pc, #188]	; (8008434 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d108      	bne.n	800838e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008382:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	68fa      	ldr	r2, [r7, #12]
 800838a:	4313      	orrs	r3, r2
 800838c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008394:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	68fa      	ldr	r2, [r7, #12]
 800839c:	4313      	orrs	r3, r2
 800839e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	68fa      	ldr	r2, [r7, #12]
 80083a6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a20      	ldr	r2, [pc, #128]	; (8008430 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d022      	beq.n	80083f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083ba:	d01d      	beq.n	80083f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a1d      	ldr	r2, [pc, #116]	; (8008438 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d018      	beq.n	80083f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a1c      	ldr	r2, [pc, #112]	; (800843c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d013      	beq.n	80083f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4a1a      	ldr	r2, [pc, #104]	; (8008440 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d00e      	beq.n	80083f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4a15      	ldr	r2, [pc, #84]	; (8008434 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d009      	beq.n	80083f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a16      	ldr	r2, [pc, #88]	; (8008444 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d004      	beq.n	80083f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4a15      	ldr	r2, [pc, #84]	; (8008448 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d10c      	bne.n	8008412 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	68ba      	ldr	r2, [r7, #8]
 8008406:	4313      	orrs	r3, r2
 8008408:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	68ba      	ldr	r2, [r7, #8]
 8008410:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2201      	movs	r2, #1
 8008416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2200      	movs	r2, #0
 800841e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008422:	2300      	movs	r3, #0
}
 8008424:	4618      	mov	r0, r3
 8008426:	3714      	adds	r7, #20
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr
 8008430:	40010000 	.word	0x40010000
 8008434:	40010400 	.word	0x40010400
 8008438:	40000400 	.word	0x40000400
 800843c:	40000800 	.word	0x40000800
 8008440:	40000c00 	.word	0x40000c00
 8008444:	40001800 	.word	0x40001800
 8008448:	40014000 	.word	0x40014000

0800844c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b082      	sub	sp, #8
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d101      	bne.n	800845e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800845a:	2301      	movs	r3, #1
 800845c:	e042      	b.n	80084e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008464:	2b00      	cmp	r3, #0
 8008466:	d106      	bne.n	8008476 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2200      	movs	r2, #0
 800846c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f7f9 fded 	bl	8002050 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2224      	movs	r2, #36	; 0x24
 800847a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	681a      	ldr	r2, [r3, #0]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f022 0201 	bic.w	r2, r2, #1
 800848c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 f8ba 	bl	8008608 <UART_SetConfig>
 8008494:	4603      	mov	r3, r0
 8008496:	2b01      	cmp	r3, #1
 8008498:	d101      	bne.n	800849e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800849a:	2301      	movs	r3, #1
 800849c:	e022      	b.n	80084e4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d002      	beq.n	80084ac <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 fe16 	bl	80090d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	685a      	ldr	r2, [r3, #4]
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80084ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	689a      	ldr	r2, [r3, #8]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80084ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	681a      	ldr	r2, [r3, #0]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f042 0201 	orr.w	r2, r2, #1
 80084da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f000 fe9d 	bl	800921c <UART_CheckIdleState>
 80084e2:	4603      	mov	r3, r0
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3708      	adds	r7, #8
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}

080084ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b08a      	sub	sp, #40	; 0x28
 80084f0:	af02      	add	r7, sp, #8
 80084f2:	60f8      	str	r0, [r7, #12]
 80084f4:	60b9      	str	r1, [r7, #8]
 80084f6:	603b      	str	r3, [r7, #0]
 80084f8:	4613      	mov	r3, r2
 80084fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008502:	2b20      	cmp	r3, #32
 8008504:	d17b      	bne.n	80085fe <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d002      	beq.n	8008512 <HAL_UART_Transmit+0x26>
 800850c:	88fb      	ldrh	r3, [r7, #6]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d101      	bne.n	8008516 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008512:	2301      	movs	r3, #1
 8008514:	e074      	b.n	8008600 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2200      	movs	r2, #0
 800851a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2221      	movs	r2, #33	; 0x21
 8008522:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008526:	f7fa f835 	bl	8002594 <HAL_GetTick>
 800852a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	88fa      	ldrh	r2, [r7, #6]
 8008530:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	88fa      	ldrh	r2, [r7, #6]
 8008538:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	689b      	ldr	r3, [r3, #8]
 8008540:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008544:	d108      	bne.n	8008558 <HAL_UART_Transmit+0x6c>
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	691b      	ldr	r3, [r3, #16]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d104      	bne.n	8008558 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800854e:	2300      	movs	r3, #0
 8008550:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	61bb      	str	r3, [r7, #24]
 8008556:	e003      	b.n	8008560 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800855c:	2300      	movs	r3, #0
 800855e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008560:	e030      	b.n	80085c4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	9300      	str	r3, [sp, #0]
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	2200      	movs	r2, #0
 800856a:	2180      	movs	r1, #128	; 0x80
 800856c:	68f8      	ldr	r0, [r7, #12]
 800856e:	f000 feff 	bl	8009370 <UART_WaitOnFlagUntilTimeout>
 8008572:	4603      	mov	r3, r0
 8008574:	2b00      	cmp	r3, #0
 8008576:	d005      	beq.n	8008584 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2220      	movs	r2, #32
 800857c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8008580:	2303      	movs	r3, #3
 8008582:	e03d      	b.n	8008600 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008584:	69fb      	ldr	r3, [r7, #28]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d10b      	bne.n	80085a2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800858a:	69bb      	ldr	r3, [r7, #24]
 800858c:	881b      	ldrh	r3, [r3, #0]
 800858e:	461a      	mov	r2, r3
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008598:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800859a:	69bb      	ldr	r3, [r7, #24]
 800859c:	3302      	adds	r3, #2
 800859e:	61bb      	str	r3, [r7, #24]
 80085a0:	e007      	b.n	80085b2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80085a2:	69fb      	ldr	r3, [r7, #28]
 80085a4:	781a      	ldrb	r2, [r3, #0]
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80085ac:	69fb      	ldr	r3, [r7, #28]
 80085ae:	3301      	adds	r3, #1
 80085b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80085b8:	b29b      	uxth	r3, r3
 80085ba:	3b01      	subs	r3, #1
 80085bc:	b29a      	uxth	r2, r3
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80085ca:	b29b      	uxth	r3, r3
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d1c8      	bne.n	8008562 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	9300      	str	r3, [sp, #0]
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	2200      	movs	r2, #0
 80085d8:	2140      	movs	r1, #64	; 0x40
 80085da:	68f8      	ldr	r0, [r7, #12]
 80085dc:	f000 fec8 	bl	8009370 <UART_WaitOnFlagUntilTimeout>
 80085e0:	4603      	mov	r3, r0
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d005      	beq.n	80085f2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	2220      	movs	r2, #32
 80085ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80085ee:	2303      	movs	r3, #3
 80085f0:	e006      	b.n	8008600 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	2220      	movs	r2, #32
 80085f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80085fa:	2300      	movs	r3, #0
 80085fc:	e000      	b.n	8008600 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80085fe:	2302      	movs	r3, #2
  }
}
 8008600:	4618      	mov	r0, r3
 8008602:	3720      	adds	r7, #32
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}

08008608 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008608:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800860c:	b092      	sub	sp, #72	; 0x48
 800860e:	af00      	add	r7, sp, #0
 8008610:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008612:	2300      	movs	r3, #0
 8008614:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	689a      	ldr	r2, [r3, #8]
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	691b      	ldr	r3, [r3, #16]
 8008620:	431a      	orrs	r2, r3
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	695b      	ldr	r3, [r3, #20]
 8008626:	431a      	orrs	r2, r3
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	69db      	ldr	r3, [r3, #28]
 800862c:	4313      	orrs	r3, r2
 800862e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	681a      	ldr	r2, [r3, #0]
 8008636:	4bbe      	ldr	r3, [pc, #760]	; (8008930 <UART_SetConfig+0x328>)
 8008638:	4013      	ands	r3, r2
 800863a:	697a      	ldr	r2, [r7, #20]
 800863c:	6812      	ldr	r2, [r2, #0]
 800863e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008640:	430b      	orrs	r3, r1
 8008642:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	685b      	ldr	r3, [r3, #4]
 800864a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	68da      	ldr	r2, [r3, #12]
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	430a      	orrs	r2, r1
 8008658:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	699b      	ldr	r3, [r3, #24]
 800865e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4ab3      	ldr	r2, [pc, #716]	; (8008934 <UART_SetConfig+0x32c>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d004      	beq.n	8008674 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	6a1b      	ldr	r3, [r3, #32]
 800866e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008670:	4313      	orrs	r3, r2
 8008672:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	689a      	ldr	r2, [r3, #8]
 800867a:	4baf      	ldr	r3, [pc, #700]	; (8008938 <UART_SetConfig+0x330>)
 800867c:	4013      	ands	r3, r2
 800867e:	697a      	ldr	r2, [r7, #20]
 8008680:	6812      	ldr	r2, [r2, #0]
 8008682:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008684:	430b      	orrs	r3, r1
 8008686:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800868e:	f023 010f 	bic.w	r1, r3, #15
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	430a      	orrs	r2, r1
 800869c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4aa6      	ldr	r2, [pc, #664]	; (800893c <UART_SetConfig+0x334>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d177      	bne.n	8008798 <UART_SetConfig+0x190>
 80086a8:	4ba5      	ldr	r3, [pc, #660]	; (8008940 <UART_SetConfig+0x338>)
 80086aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80086b0:	2b28      	cmp	r3, #40	; 0x28
 80086b2:	d86d      	bhi.n	8008790 <UART_SetConfig+0x188>
 80086b4:	a201      	add	r2, pc, #4	; (adr r2, 80086bc <UART_SetConfig+0xb4>)
 80086b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ba:	bf00      	nop
 80086bc:	08008761 	.word	0x08008761
 80086c0:	08008791 	.word	0x08008791
 80086c4:	08008791 	.word	0x08008791
 80086c8:	08008791 	.word	0x08008791
 80086cc:	08008791 	.word	0x08008791
 80086d0:	08008791 	.word	0x08008791
 80086d4:	08008791 	.word	0x08008791
 80086d8:	08008791 	.word	0x08008791
 80086dc:	08008769 	.word	0x08008769
 80086e0:	08008791 	.word	0x08008791
 80086e4:	08008791 	.word	0x08008791
 80086e8:	08008791 	.word	0x08008791
 80086ec:	08008791 	.word	0x08008791
 80086f0:	08008791 	.word	0x08008791
 80086f4:	08008791 	.word	0x08008791
 80086f8:	08008791 	.word	0x08008791
 80086fc:	08008771 	.word	0x08008771
 8008700:	08008791 	.word	0x08008791
 8008704:	08008791 	.word	0x08008791
 8008708:	08008791 	.word	0x08008791
 800870c:	08008791 	.word	0x08008791
 8008710:	08008791 	.word	0x08008791
 8008714:	08008791 	.word	0x08008791
 8008718:	08008791 	.word	0x08008791
 800871c:	08008779 	.word	0x08008779
 8008720:	08008791 	.word	0x08008791
 8008724:	08008791 	.word	0x08008791
 8008728:	08008791 	.word	0x08008791
 800872c:	08008791 	.word	0x08008791
 8008730:	08008791 	.word	0x08008791
 8008734:	08008791 	.word	0x08008791
 8008738:	08008791 	.word	0x08008791
 800873c:	08008781 	.word	0x08008781
 8008740:	08008791 	.word	0x08008791
 8008744:	08008791 	.word	0x08008791
 8008748:	08008791 	.word	0x08008791
 800874c:	08008791 	.word	0x08008791
 8008750:	08008791 	.word	0x08008791
 8008754:	08008791 	.word	0x08008791
 8008758:	08008791 	.word	0x08008791
 800875c:	08008789 	.word	0x08008789
 8008760:	2301      	movs	r3, #1
 8008762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008766:	e222      	b.n	8008bae <UART_SetConfig+0x5a6>
 8008768:	2304      	movs	r3, #4
 800876a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800876e:	e21e      	b.n	8008bae <UART_SetConfig+0x5a6>
 8008770:	2308      	movs	r3, #8
 8008772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008776:	e21a      	b.n	8008bae <UART_SetConfig+0x5a6>
 8008778:	2310      	movs	r3, #16
 800877a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800877e:	e216      	b.n	8008bae <UART_SetConfig+0x5a6>
 8008780:	2320      	movs	r3, #32
 8008782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008786:	e212      	b.n	8008bae <UART_SetConfig+0x5a6>
 8008788:	2340      	movs	r3, #64	; 0x40
 800878a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800878e:	e20e      	b.n	8008bae <UART_SetConfig+0x5a6>
 8008790:	2380      	movs	r3, #128	; 0x80
 8008792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008796:	e20a      	b.n	8008bae <UART_SetConfig+0x5a6>
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a69      	ldr	r2, [pc, #420]	; (8008944 <UART_SetConfig+0x33c>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d130      	bne.n	8008804 <UART_SetConfig+0x1fc>
 80087a2:	4b67      	ldr	r3, [pc, #412]	; (8008940 <UART_SetConfig+0x338>)
 80087a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087a6:	f003 0307 	and.w	r3, r3, #7
 80087aa:	2b05      	cmp	r3, #5
 80087ac:	d826      	bhi.n	80087fc <UART_SetConfig+0x1f4>
 80087ae:	a201      	add	r2, pc, #4	; (adr r2, 80087b4 <UART_SetConfig+0x1ac>)
 80087b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087b4:	080087cd 	.word	0x080087cd
 80087b8:	080087d5 	.word	0x080087d5
 80087bc:	080087dd 	.word	0x080087dd
 80087c0:	080087e5 	.word	0x080087e5
 80087c4:	080087ed 	.word	0x080087ed
 80087c8:	080087f5 	.word	0x080087f5
 80087cc:	2300      	movs	r3, #0
 80087ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087d2:	e1ec      	b.n	8008bae <UART_SetConfig+0x5a6>
 80087d4:	2304      	movs	r3, #4
 80087d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087da:	e1e8      	b.n	8008bae <UART_SetConfig+0x5a6>
 80087dc:	2308      	movs	r3, #8
 80087de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087e2:	e1e4      	b.n	8008bae <UART_SetConfig+0x5a6>
 80087e4:	2310      	movs	r3, #16
 80087e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087ea:	e1e0      	b.n	8008bae <UART_SetConfig+0x5a6>
 80087ec:	2320      	movs	r3, #32
 80087ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087f2:	e1dc      	b.n	8008bae <UART_SetConfig+0x5a6>
 80087f4:	2340      	movs	r3, #64	; 0x40
 80087f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087fa:	e1d8      	b.n	8008bae <UART_SetConfig+0x5a6>
 80087fc:	2380      	movs	r3, #128	; 0x80
 80087fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008802:	e1d4      	b.n	8008bae <UART_SetConfig+0x5a6>
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a4f      	ldr	r2, [pc, #316]	; (8008948 <UART_SetConfig+0x340>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d130      	bne.n	8008870 <UART_SetConfig+0x268>
 800880e:	4b4c      	ldr	r3, [pc, #304]	; (8008940 <UART_SetConfig+0x338>)
 8008810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008812:	f003 0307 	and.w	r3, r3, #7
 8008816:	2b05      	cmp	r3, #5
 8008818:	d826      	bhi.n	8008868 <UART_SetConfig+0x260>
 800881a:	a201      	add	r2, pc, #4	; (adr r2, 8008820 <UART_SetConfig+0x218>)
 800881c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008820:	08008839 	.word	0x08008839
 8008824:	08008841 	.word	0x08008841
 8008828:	08008849 	.word	0x08008849
 800882c:	08008851 	.word	0x08008851
 8008830:	08008859 	.word	0x08008859
 8008834:	08008861 	.word	0x08008861
 8008838:	2300      	movs	r3, #0
 800883a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800883e:	e1b6      	b.n	8008bae <UART_SetConfig+0x5a6>
 8008840:	2304      	movs	r3, #4
 8008842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008846:	e1b2      	b.n	8008bae <UART_SetConfig+0x5a6>
 8008848:	2308      	movs	r3, #8
 800884a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800884e:	e1ae      	b.n	8008bae <UART_SetConfig+0x5a6>
 8008850:	2310      	movs	r3, #16
 8008852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008856:	e1aa      	b.n	8008bae <UART_SetConfig+0x5a6>
 8008858:	2320      	movs	r3, #32
 800885a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800885e:	e1a6      	b.n	8008bae <UART_SetConfig+0x5a6>
 8008860:	2340      	movs	r3, #64	; 0x40
 8008862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008866:	e1a2      	b.n	8008bae <UART_SetConfig+0x5a6>
 8008868:	2380      	movs	r3, #128	; 0x80
 800886a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800886e:	e19e      	b.n	8008bae <UART_SetConfig+0x5a6>
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4a35      	ldr	r2, [pc, #212]	; (800894c <UART_SetConfig+0x344>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d130      	bne.n	80088dc <UART_SetConfig+0x2d4>
 800887a:	4b31      	ldr	r3, [pc, #196]	; (8008940 <UART_SetConfig+0x338>)
 800887c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800887e:	f003 0307 	and.w	r3, r3, #7
 8008882:	2b05      	cmp	r3, #5
 8008884:	d826      	bhi.n	80088d4 <UART_SetConfig+0x2cc>
 8008886:	a201      	add	r2, pc, #4	; (adr r2, 800888c <UART_SetConfig+0x284>)
 8008888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800888c:	080088a5 	.word	0x080088a5
 8008890:	080088ad 	.word	0x080088ad
 8008894:	080088b5 	.word	0x080088b5
 8008898:	080088bd 	.word	0x080088bd
 800889c:	080088c5 	.word	0x080088c5
 80088a0:	080088cd 	.word	0x080088cd
 80088a4:	2300      	movs	r3, #0
 80088a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088aa:	e180      	b.n	8008bae <UART_SetConfig+0x5a6>
 80088ac:	2304      	movs	r3, #4
 80088ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088b2:	e17c      	b.n	8008bae <UART_SetConfig+0x5a6>
 80088b4:	2308      	movs	r3, #8
 80088b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088ba:	e178      	b.n	8008bae <UART_SetConfig+0x5a6>
 80088bc:	2310      	movs	r3, #16
 80088be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088c2:	e174      	b.n	8008bae <UART_SetConfig+0x5a6>
 80088c4:	2320      	movs	r3, #32
 80088c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088ca:	e170      	b.n	8008bae <UART_SetConfig+0x5a6>
 80088cc:	2340      	movs	r3, #64	; 0x40
 80088ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088d2:	e16c      	b.n	8008bae <UART_SetConfig+0x5a6>
 80088d4:	2380      	movs	r3, #128	; 0x80
 80088d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088da:	e168      	b.n	8008bae <UART_SetConfig+0x5a6>
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a1b      	ldr	r2, [pc, #108]	; (8008950 <UART_SetConfig+0x348>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d142      	bne.n	800896c <UART_SetConfig+0x364>
 80088e6:	4b16      	ldr	r3, [pc, #88]	; (8008940 <UART_SetConfig+0x338>)
 80088e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088ea:	f003 0307 	and.w	r3, r3, #7
 80088ee:	2b05      	cmp	r3, #5
 80088f0:	d838      	bhi.n	8008964 <UART_SetConfig+0x35c>
 80088f2:	a201      	add	r2, pc, #4	; (adr r2, 80088f8 <UART_SetConfig+0x2f0>)
 80088f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088f8:	08008911 	.word	0x08008911
 80088fc:	08008919 	.word	0x08008919
 8008900:	08008921 	.word	0x08008921
 8008904:	08008929 	.word	0x08008929
 8008908:	08008955 	.word	0x08008955
 800890c:	0800895d 	.word	0x0800895d
 8008910:	2300      	movs	r3, #0
 8008912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008916:	e14a      	b.n	8008bae <UART_SetConfig+0x5a6>
 8008918:	2304      	movs	r3, #4
 800891a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800891e:	e146      	b.n	8008bae <UART_SetConfig+0x5a6>
 8008920:	2308      	movs	r3, #8
 8008922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008926:	e142      	b.n	8008bae <UART_SetConfig+0x5a6>
 8008928:	2310      	movs	r3, #16
 800892a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800892e:	e13e      	b.n	8008bae <UART_SetConfig+0x5a6>
 8008930:	cfff69f3 	.word	0xcfff69f3
 8008934:	58000c00 	.word	0x58000c00
 8008938:	11fff4ff 	.word	0x11fff4ff
 800893c:	40011000 	.word	0x40011000
 8008940:	58024400 	.word	0x58024400
 8008944:	40004400 	.word	0x40004400
 8008948:	40004800 	.word	0x40004800
 800894c:	40004c00 	.word	0x40004c00
 8008950:	40005000 	.word	0x40005000
 8008954:	2320      	movs	r3, #32
 8008956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800895a:	e128      	b.n	8008bae <UART_SetConfig+0x5a6>
 800895c:	2340      	movs	r3, #64	; 0x40
 800895e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008962:	e124      	b.n	8008bae <UART_SetConfig+0x5a6>
 8008964:	2380      	movs	r3, #128	; 0x80
 8008966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800896a:	e120      	b.n	8008bae <UART_SetConfig+0x5a6>
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4acb      	ldr	r2, [pc, #812]	; (8008ca0 <UART_SetConfig+0x698>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d176      	bne.n	8008a64 <UART_SetConfig+0x45c>
 8008976:	4bcb      	ldr	r3, [pc, #812]	; (8008ca4 <UART_SetConfig+0x69c>)
 8008978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800897a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800897e:	2b28      	cmp	r3, #40	; 0x28
 8008980:	d86c      	bhi.n	8008a5c <UART_SetConfig+0x454>
 8008982:	a201      	add	r2, pc, #4	; (adr r2, 8008988 <UART_SetConfig+0x380>)
 8008984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008988:	08008a2d 	.word	0x08008a2d
 800898c:	08008a5d 	.word	0x08008a5d
 8008990:	08008a5d 	.word	0x08008a5d
 8008994:	08008a5d 	.word	0x08008a5d
 8008998:	08008a5d 	.word	0x08008a5d
 800899c:	08008a5d 	.word	0x08008a5d
 80089a0:	08008a5d 	.word	0x08008a5d
 80089a4:	08008a5d 	.word	0x08008a5d
 80089a8:	08008a35 	.word	0x08008a35
 80089ac:	08008a5d 	.word	0x08008a5d
 80089b0:	08008a5d 	.word	0x08008a5d
 80089b4:	08008a5d 	.word	0x08008a5d
 80089b8:	08008a5d 	.word	0x08008a5d
 80089bc:	08008a5d 	.word	0x08008a5d
 80089c0:	08008a5d 	.word	0x08008a5d
 80089c4:	08008a5d 	.word	0x08008a5d
 80089c8:	08008a3d 	.word	0x08008a3d
 80089cc:	08008a5d 	.word	0x08008a5d
 80089d0:	08008a5d 	.word	0x08008a5d
 80089d4:	08008a5d 	.word	0x08008a5d
 80089d8:	08008a5d 	.word	0x08008a5d
 80089dc:	08008a5d 	.word	0x08008a5d
 80089e0:	08008a5d 	.word	0x08008a5d
 80089e4:	08008a5d 	.word	0x08008a5d
 80089e8:	08008a45 	.word	0x08008a45
 80089ec:	08008a5d 	.word	0x08008a5d
 80089f0:	08008a5d 	.word	0x08008a5d
 80089f4:	08008a5d 	.word	0x08008a5d
 80089f8:	08008a5d 	.word	0x08008a5d
 80089fc:	08008a5d 	.word	0x08008a5d
 8008a00:	08008a5d 	.word	0x08008a5d
 8008a04:	08008a5d 	.word	0x08008a5d
 8008a08:	08008a4d 	.word	0x08008a4d
 8008a0c:	08008a5d 	.word	0x08008a5d
 8008a10:	08008a5d 	.word	0x08008a5d
 8008a14:	08008a5d 	.word	0x08008a5d
 8008a18:	08008a5d 	.word	0x08008a5d
 8008a1c:	08008a5d 	.word	0x08008a5d
 8008a20:	08008a5d 	.word	0x08008a5d
 8008a24:	08008a5d 	.word	0x08008a5d
 8008a28:	08008a55 	.word	0x08008a55
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a32:	e0bc      	b.n	8008bae <UART_SetConfig+0x5a6>
 8008a34:	2304      	movs	r3, #4
 8008a36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a3a:	e0b8      	b.n	8008bae <UART_SetConfig+0x5a6>
 8008a3c:	2308      	movs	r3, #8
 8008a3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a42:	e0b4      	b.n	8008bae <UART_SetConfig+0x5a6>
 8008a44:	2310      	movs	r3, #16
 8008a46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a4a:	e0b0      	b.n	8008bae <UART_SetConfig+0x5a6>
 8008a4c:	2320      	movs	r3, #32
 8008a4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a52:	e0ac      	b.n	8008bae <UART_SetConfig+0x5a6>
 8008a54:	2340      	movs	r3, #64	; 0x40
 8008a56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a5a:	e0a8      	b.n	8008bae <UART_SetConfig+0x5a6>
 8008a5c:	2380      	movs	r3, #128	; 0x80
 8008a5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a62:	e0a4      	b.n	8008bae <UART_SetConfig+0x5a6>
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4a8f      	ldr	r2, [pc, #572]	; (8008ca8 <UART_SetConfig+0x6a0>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d130      	bne.n	8008ad0 <UART_SetConfig+0x4c8>
 8008a6e:	4b8d      	ldr	r3, [pc, #564]	; (8008ca4 <UART_SetConfig+0x69c>)
 8008a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a72:	f003 0307 	and.w	r3, r3, #7
 8008a76:	2b05      	cmp	r3, #5
 8008a78:	d826      	bhi.n	8008ac8 <UART_SetConfig+0x4c0>
 8008a7a:	a201      	add	r2, pc, #4	; (adr r2, 8008a80 <UART_SetConfig+0x478>)
 8008a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a80:	08008a99 	.word	0x08008a99
 8008a84:	08008aa1 	.word	0x08008aa1
 8008a88:	08008aa9 	.word	0x08008aa9
 8008a8c:	08008ab1 	.word	0x08008ab1
 8008a90:	08008ab9 	.word	0x08008ab9
 8008a94:	08008ac1 	.word	0x08008ac1
 8008a98:	2300      	movs	r3, #0
 8008a9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a9e:	e086      	b.n	8008bae <UART_SetConfig+0x5a6>
 8008aa0:	2304      	movs	r3, #4
 8008aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aa6:	e082      	b.n	8008bae <UART_SetConfig+0x5a6>
 8008aa8:	2308      	movs	r3, #8
 8008aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aae:	e07e      	b.n	8008bae <UART_SetConfig+0x5a6>
 8008ab0:	2310      	movs	r3, #16
 8008ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ab6:	e07a      	b.n	8008bae <UART_SetConfig+0x5a6>
 8008ab8:	2320      	movs	r3, #32
 8008aba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008abe:	e076      	b.n	8008bae <UART_SetConfig+0x5a6>
 8008ac0:	2340      	movs	r3, #64	; 0x40
 8008ac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ac6:	e072      	b.n	8008bae <UART_SetConfig+0x5a6>
 8008ac8:	2380      	movs	r3, #128	; 0x80
 8008aca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ace:	e06e      	b.n	8008bae <UART_SetConfig+0x5a6>
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4a75      	ldr	r2, [pc, #468]	; (8008cac <UART_SetConfig+0x6a4>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d130      	bne.n	8008b3c <UART_SetConfig+0x534>
 8008ada:	4b72      	ldr	r3, [pc, #456]	; (8008ca4 <UART_SetConfig+0x69c>)
 8008adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ade:	f003 0307 	and.w	r3, r3, #7
 8008ae2:	2b05      	cmp	r3, #5
 8008ae4:	d826      	bhi.n	8008b34 <UART_SetConfig+0x52c>
 8008ae6:	a201      	add	r2, pc, #4	; (adr r2, 8008aec <UART_SetConfig+0x4e4>)
 8008ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aec:	08008b05 	.word	0x08008b05
 8008af0:	08008b0d 	.word	0x08008b0d
 8008af4:	08008b15 	.word	0x08008b15
 8008af8:	08008b1d 	.word	0x08008b1d
 8008afc:	08008b25 	.word	0x08008b25
 8008b00:	08008b2d 	.word	0x08008b2d
 8008b04:	2300      	movs	r3, #0
 8008b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b0a:	e050      	b.n	8008bae <UART_SetConfig+0x5a6>
 8008b0c:	2304      	movs	r3, #4
 8008b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b12:	e04c      	b.n	8008bae <UART_SetConfig+0x5a6>
 8008b14:	2308      	movs	r3, #8
 8008b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b1a:	e048      	b.n	8008bae <UART_SetConfig+0x5a6>
 8008b1c:	2310      	movs	r3, #16
 8008b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b22:	e044      	b.n	8008bae <UART_SetConfig+0x5a6>
 8008b24:	2320      	movs	r3, #32
 8008b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b2a:	e040      	b.n	8008bae <UART_SetConfig+0x5a6>
 8008b2c:	2340      	movs	r3, #64	; 0x40
 8008b2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b32:	e03c      	b.n	8008bae <UART_SetConfig+0x5a6>
 8008b34:	2380      	movs	r3, #128	; 0x80
 8008b36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b3a:	e038      	b.n	8008bae <UART_SetConfig+0x5a6>
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4a5b      	ldr	r2, [pc, #364]	; (8008cb0 <UART_SetConfig+0x6a8>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d130      	bne.n	8008ba8 <UART_SetConfig+0x5a0>
 8008b46:	4b57      	ldr	r3, [pc, #348]	; (8008ca4 <UART_SetConfig+0x69c>)
 8008b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b4a:	f003 0307 	and.w	r3, r3, #7
 8008b4e:	2b05      	cmp	r3, #5
 8008b50:	d826      	bhi.n	8008ba0 <UART_SetConfig+0x598>
 8008b52:	a201      	add	r2, pc, #4	; (adr r2, 8008b58 <UART_SetConfig+0x550>)
 8008b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b58:	08008b71 	.word	0x08008b71
 8008b5c:	08008b79 	.word	0x08008b79
 8008b60:	08008b81 	.word	0x08008b81
 8008b64:	08008b89 	.word	0x08008b89
 8008b68:	08008b91 	.word	0x08008b91
 8008b6c:	08008b99 	.word	0x08008b99
 8008b70:	2302      	movs	r3, #2
 8008b72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b76:	e01a      	b.n	8008bae <UART_SetConfig+0x5a6>
 8008b78:	2304      	movs	r3, #4
 8008b7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b7e:	e016      	b.n	8008bae <UART_SetConfig+0x5a6>
 8008b80:	2308      	movs	r3, #8
 8008b82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b86:	e012      	b.n	8008bae <UART_SetConfig+0x5a6>
 8008b88:	2310      	movs	r3, #16
 8008b8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b8e:	e00e      	b.n	8008bae <UART_SetConfig+0x5a6>
 8008b90:	2320      	movs	r3, #32
 8008b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b96:	e00a      	b.n	8008bae <UART_SetConfig+0x5a6>
 8008b98:	2340      	movs	r3, #64	; 0x40
 8008b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b9e:	e006      	b.n	8008bae <UART_SetConfig+0x5a6>
 8008ba0:	2380      	movs	r3, #128	; 0x80
 8008ba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ba6:	e002      	b.n	8008bae <UART_SetConfig+0x5a6>
 8008ba8:	2380      	movs	r3, #128	; 0x80
 8008baa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	4a3f      	ldr	r2, [pc, #252]	; (8008cb0 <UART_SetConfig+0x6a8>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	f040 80f8 	bne.w	8008daa <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008bba:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008bbe:	2b20      	cmp	r3, #32
 8008bc0:	dc46      	bgt.n	8008c50 <UART_SetConfig+0x648>
 8008bc2:	2b02      	cmp	r3, #2
 8008bc4:	f2c0 8082 	blt.w	8008ccc <UART_SetConfig+0x6c4>
 8008bc8:	3b02      	subs	r3, #2
 8008bca:	2b1e      	cmp	r3, #30
 8008bcc:	d87e      	bhi.n	8008ccc <UART_SetConfig+0x6c4>
 8008bce:	a201      	add	r2, pc, #4	; (adr r2, 8008bd4 <UART_SetConfig+0x5cc>)
 8008bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bd4:	08008c57 	.word	0x08008c57
 8008bd8:	08008ccd 	.word	0x08008ccd
 8008bdc:	08008c5f 	.word	0x08008c5f
 8008be0:	08008ccd 	.word	0x08008ccd
 8008be4:	08008ccd 	.word	0x08008ccd
 8008be8:	08008ccd 	.word	0x08008ccd
 8008bec:	08008c6f 	.word	0x08008c6f
 8008bf0:	08008ccd 	.word	0x08008ccd
 8008bf4:	08008ccd 	.word	0x08008ccd
 8008bf8:	08008ccd 	.word	0x08008ccd
 8008bfc:	08008ccd 	.word	0x08008ccd
 8008c00:	08008ccd 	.word	0x08008ccd
 8008c04:	08008ccd 	.word	0x08008ccd
 8008c08:	08008ccd 	.word	0x08008ccd
 8008c0c:	08008c7f 	.word	0x08008c7f
 8008c10:	08008ccd 	.word	0x08008ccd
 8008c14:	08008ccd 	.word	0x08008ccd
 8008c18:	08008ccd 	.word	0x08008ccd
 8008c1c:	08008ccd 	.word	0x08008ccd
 8008c20:	08008ccd 	.word	0x08008ccd
 8008c24:	08008ccd 	.word	0x08008ccd
 8008c28:	08008ccd 	.word	0x08008ccd
 8008c2c:	08008ccd 	.word	0x08008ccd
 8008c30:	08008ccd 	.word	0x08008ccd
 8008c34:	08008ccd 	.word	0x08008ccd
 8008c38:	08008ccd 	.word	0x08008ccd
 8008c3c:	08008ccd 	.word	0x08008ccd
 8008c40:	08008ccd 	.word	0x08008ccd
 8008c44:	08008ccd 	.word	0x08008ccd
 8008c48:	08008ccd 	.word	0x08008ccd
 8008c4c:	08008cbf 	.word	0x08008cbf
 8008c50:	2b40      	cmp	r3, #64	; 0x40
 8008c52:	d037      	beq.n	8008cc4 <UART_SetConfig+0x6bc>
 8008c54:	e03a      	b.n	8008ccc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008c56:	f7fe fc6b 	bl	8007530 <HAL_RCCEx_GetD3PCLK1Freq>
 8008c5a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008c5c:	e03c      	b.n	8008cd8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c62:	4618      	mov	r0, r3
 8008c64:	f7fe fc7a 	bl	800755c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c6c:	e034      	b.n	8008cd8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c6e:	f107 0318 	add.w	r3, r7, #24
 8008c72:	4618      	mov	r0, r3
 8008c74:	f7fe fdc6 	bl	8007804 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008c78:	69fb      	ldr	r3, [r7, #28]
 8008c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c7c:	e02c      	b.n	8008cd8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c7e:	4b09      	ldr	r3, [pc, #36]	; (8008ca4 <UART_SetConfig+0x69c>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f003 0320 	and.w	r3, r3, #32
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d016      	beq.n	8008cb8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008c8a:	4b06      	ldr	r3, [pc, #24]	; (8008ca4 <UART_SetConfig+0x69c>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	08db      	lsrs	r3, r3, #3
 8008c90:	f003 0303 	and.w	r3, r3, #3
 8008c94:	4a07      	ldr	r2, [pc, #28]	; (8008cb4 <UART_SetConfig+0x6ac>)
 8008c96:	fa22 f303 	lsr.w	r3, r2, r3
 8008c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008c9c:	e01c      	b.n	8008cd8 <UART_SetConfig+0x6d0>
 8008c9e:	bf00      	nop
 8008ca0:	40011400 	.word	0x40011400
 8008ca4:	58024400 	.word	0x58024400
 8008ca8:	40007800 	.word	0x40007800
 8008cac:	40007c00 	.word	0x40007c00
 8008cb0:	58000c00 	.word	0x58000c00
 8008cb4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008cb8:	4b9d      	ldr	r3, [pc, #628]	; (8008f30 <UART_SetConfig+0x928>)
 8008cba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cbc:	e00c      	b.n	8008cd8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008cbe:	4b9d      	ldr	r3, [pc, #628]	; (8008f34 <UART_SetConfig+0x92c>)
 8008cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cc2:	e009      	b.n	8008cd8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008cc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cca:	e005      	b.n	8008cd8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008cd6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	f000 81de 	beq.w	800909c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce4:	4a94      	ldr	r2, [pc, #592]	; (8008f38 <UART_SetConfig+0x930>)
 8008ce6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cea:	461a      	mov	r2, r3
 8008cec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cee:	fbb3 f3f2 	udiv	r3, r3, r2
 8008cf2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	685a      	ldr	r2, [r3, #4]
 8008cf8:	4613      	mov	r3, r2
 8008cfa:	005b      	lsls	r3, r3, #1
 8008cfc:	4413      	add	r3, r2
 8008cfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d00:	429a      	cmp	r2, r3
 8008d02:	d305      	bcc.n	8008d10 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008d0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d0c:	429a      	cmp	r2, r3
 8008d0e:	d903      	bls.n	8008d18 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008d10:	2301      	movs	r3, #1
 8008d12:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008d16:	e1c1      	b.n	800909c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	60bb      	str	r3, [r7, #8]
 8008d1e:	60fa      	str	r2, [r7, #12]
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d24:	4a84      	ldr	r2, [pc, #528]	; (8008f38 <UART_SetConfig+0x930>)
 8008d26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d2a:	b29b      	uxth	r3, r3
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	603b      	str	r3, [r7, #0]
 8008d30:	607a      	str	r2, [r7, #4]
 8008d32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d36:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008d3a:	f7f7 ff99 	bl	8000c70 <__aeabi_uldivmod>
 8008d3e:	4602      	mov	r2, r0
 8008d40:	460b      	mov	r3, r1
 8008d42:	4610      	mov	r0, r2
 8008d44:	4619      	mov	r1, r3
 8008d46:	f04f 0200 	mov.w	r2, #0
 8008d4a:	f04f 0300 	mov.w	r3, #0
 8008d4e:	020b      	lsls	r3, r1, #8
 8008d50:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008d54:	0202      	lsls	r2, r0, #8
 8008d56:	6979      	ldr	r1, [r7, #20]
 8008d58:	6849      	ldr	r1, [r1, #4]
 8008d5a:	0849      	lsrs	r1, r1, #1
 8008d5c:	2000      	movs	r0, #0
 8008d5e:	460c      	mov	r4, r1
 8008d60:	4605      	mov	r5, r0
 8008d62:	eb12 0804 	adds.w	r8, r2, r4
 8008d66:	eb43 0905 	adc.w	r9, r3, r5
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	469a      	mov	sl, r3
 8008d72:	4693      	mov	fp, r2
 8008d74:	4652      	mov	r2, sl
 8008d76:	465b      	mov	r3, fp
 8008d78:	4640      	mov	r0, r8
 8008d7a:	4649      	mov	r1, r9
 8008d7c:	f7f7 ff78 	bl	8000c70 <__aeabi_uldivmod>
 8008d80:	4602      	mov	r2, r0
 8008d82:	460b      	mov	r3, r1
 8008d84:	4613      	mov	r3, r2
 8008d86:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d8e:	d308      	bcc.n	8008da2 <UART_SetConfig+0x79a>
 8008d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d96:	d204      	bcs.n	8008da2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d9e:	60da      	str	r2, [r3, #12]
 8008da0:	e17c      	b.n	800909c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008da2:	2301      	movs	r3, #1
 8008da4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008da8:	e178      	b.n	800909c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	69db      	ldr	r3, [r3, #28]
 8008dae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008db2:	f040 80c5 	bne.w	8008f40 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008db6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008dba:	2b20      	cmp	r3, #32
 8008dbc:	dc48      	bgt.n	8008e50 <UART_SetConfig+0x848>
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	db7b      	blt.n	8008eba <UART_SetConfig+0x8b2>
 8008dc2:	2b20      	cmp	r3, #32
 8008dc4:	d879      	bhi.n	8008eba <UART_SetConfig+0x8b2>
 8008dc6:	a201      	add	r2, pc, #4	; (adr r2, 8008dcc <UART_SetConfig+0x7c4>)
 8008dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dcc:	08008e57 	.word	0x08008e57
 8008dd0:	08008e5f 	.word	0x08008e5f
 8008dd4:	08008ebb 	.word	0x08008ebb
 8008dd8:	08008ebb 	.word	0x08008ebb
 8008ddc:	08008e67 	.word	0x08008e67
 8008de0:	08008ebb 	.word	0x08008ebb
 8008de4:	08008ebb 	.word	0x08008ebb
 8008de8:	08008ebb 	.word	0x08008ebb
 8008dec:	08008e77 	.word	0x08008e77
 8008df0:	08008ebb 	.word	0x08008ebb
 8008df4:	08008ebb 	.word	0x08008ebb
 8008df8:	08008ebb 	.word	0x08008ebb
 8008dfc:	08008ebb 	.word	0x08008ebb
 8008e00:	08008ebb 	.word	0x08008ebb
 8008e04:	08008ebb 	.word	0x08008ebb
 8008e08:	08008ebb 	.word	0x08008ebb
 8008e0c:	08008e87 	.word	0x08008e87
 8008e10:	08008ebb 	.word	0x08008ebb
 8008e14:	08008ebb 	.word	0x08008ebb
 8008e18:	08008ebb 	.word	0x08008ebb
 8008e1c:	08008ebb 	.word	0x08008ebb
 8008e20:	08008ebb 	.word	0x08008ebb
 8008e24:	08008ebb 	.word	0x08008ebb
 8008e28:	08008ebb 	.word	0x08008ebb
 8008e2c:	08008ebb 	.word	0x08008ebb
 8008e30:	08008ebb 	.word	0x08008ebb
 8008e34:	08008ebb 	.word	0x08008ebb
 8008e38:	08008ebb 	.word	0x08008ebb
 8008e3c:	08008ebb 	.word	0x08008ebb
 8008e40:	08008ebb 	.word	0x08008ebb
 8008e44:	08008ebb 	.word	0x08008ebb
 8008e48:	08008ebb 	.word	0x08008ebb
 8008e4c:	08008ead 	.word	0x08008ead
 8008e50:	2b40      	cmp	r3, #64	; 0x40
 8008e52:	d02e      	beq.n	8008eb2 <UART_SetConfig+0x8aa>
 8008e54:	e031      	b.n	8008eba <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e56:	f7fd f919 	bl	800608c <HAL_RCC_GetPCLK1Freq>
 8008e5a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008e5c:	e033      	b.n	8008ec6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e5e:	f7fd f92b 	bl	80060b8 <HAL_RCC_GetPCLK2Freq>
 8008e62:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008e64:	e02f      	b.n	8008ec6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f7fe fb76 	bl	800755c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e74:	e027      	b.n	8008ec6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e76:	f107 0318 	add.w	r3, r7, #24
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f7fe fcc2 	bl	8007804 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008e80:	69fb      	ldr	r3, [r7, #28]
 8008e82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e84:	e01f      	b.n	8008ec6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e86:	4b2d      	ldr	r3, [pc, #180]	; (8008f3c <UART_SetConfig+0x934>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f003 0320 	and.w	r3, r3, #32
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d009      	beq.n	8008ea6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008e92:	4b2a      	ldr	r3, [pc, #168]	; (8008f3c <UART_SetConfig+0x934>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	08db      	lsrs	r3, r3, #3
 8008e98:	f003 0303 	and.w	r3, r3, #3
 8008e9c:	4a24      	ldr	r2, [pc, #144]	; (8008f30 <UART_SetConfig+0x928>)
 8008e9e:	fa22 f303 	lsr.w	r3, r2, r3
 8008ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008ea4:	e00f      	b.n	8008ec6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008ea6:	4b22      	ldr	r3, [pc, #136]	; (8008f30 <UART_SetConfig+0x928>)
 8008ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008eaa:	e00c      	b.n	8008ec6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008eac:	4b21      	ldr	r3, [pc, #132]	; (8008f34 <UART_SetConfig+0x92c>)
 8008eae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008eb0:	e009      	b.n	8008ec6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008eb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008eb8:	e005      	b.n	8008ec6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008ec4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	f000 80e7 	beq.w	800909c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed2:	4a19      	ldr	r2, [pc, #100]	; (8008f38 <UART_SetConfig+0x930>)
 8008ed4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ed8:	461a      	mov	r2, r3
 8008eda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008edc:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ee0:	005a      	lsls	r2, r3, #1
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	685b      	ldr	r3, [r3, #4]
 8008ee6:	085b      	lsrs	r3, r3, #1
 8008ee8:	441a      	add	r2, r3
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	685b      	ldr	r3, [r3, #4]
 8008eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ef2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ef6:	2b0f      	cmp	r3, #15
 8008ef8:	d916      	bls.n	8008f28 <UART_SetConfig+0x920>
 8008efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f00:	d212      	bcs.n	8008f28 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f04:	b29b      	uxth	r3, r3
 8008f06:	f023 030f 	bic.w	r3, r3, #15
 8008f0a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f0e:	085b      	lsrs	r3, r3, #1
 8008f10:	b29b      	uxth	r3, r3
 8008f12:	f003 0307 	and.w	r3, r3, #7
 8008f16:	b29a      	uxth	r2, r3
 8008f18:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008f1a:	4313      	orrs	r3, r2
 8008f1c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008f24:	60da      	str	r2, [r3, #12]
 8008f26:	e0b9      	b.n	800909c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008f28:	2301      	movs	r3, #1
 8008f2a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008f2e:	e0b5      	b.n	800909c <UART_SetConfig+0xa94>
 8008f30:	03d09000 	.word	0x03d09000
 8008f34:	003d0900 	.word	0x003d0900
 8008f38:	0800a998 	.word	0x0800a998
 8008f3c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008f40:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008f44:	2b20      	cmp	r3, #32
 8008f46:	dc49      	bgt.n	8008fdc <UART_SetConfig+0x9d4>
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	db7c      	blt.n	8009046 <UART_SetConfig+0xa3e>
 8008f4c:	2b20      	cmp	r3, #32
 8008f4e:	d87a      	bhi.n	8009046 <UART_SetConfig+0xa3e>
 8008f50:	a201      	add	r2, pc, #4	; (adr r2, 8008f58 <UART_SetConfig+0x950>)
 8008f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f56:	bf00      	nop
 8008f58:	08008fe3 	.word	0x08008fe3
 8008f5c:	08008feb 	.word	0x08008feb
 8008f60:	08009047 	.word	0x08009047
 8008f64:	08009047 	.word	0x08009047
 8008f68:	08008ff3 	.word	0x08008ff3
 8008f6c:	08009047 	.word	0x08009047
 8008f70:	08009047 	.word	0x08009047
 8008f74:	08009047 	.word	0x08009047
 8008f78:	08009003 	.word	0x08009003
 8008f7c:	08009047 	.word	0x08009047
 8008f80:	08009047 	.word	0x08009047
 8008f84:	08009047 	.word	0x08009047
 8008f88:	08009047 	.word	0x08009047
 8008f8c:	08009047 	.word	0x08009047
 8008f90:	08009047 	.word	0x08009047
 8008f94:	08009047 	.word	0x08009047
 8008f98:	08009013 	.word	0x08009013
 8008f9c:	08009047 	.word	0x08009047
 8008fa0:	08009047 	.word	0x08009047
 8008fa4:	08009047 	.word	0x08009047
 8008fa8:	08009047 	.word	0x08009047
 8008fac:	08009047 	.word	0x08009047
 8008fb0:	08009047 	.word	0x08009047
 8008fb4:	08009047 	.word	0x08009047
 8008fb8:	08009047 	.word	0x08009047
 8008fbc:	08009047 	.word	0x08009047
 8008fc0:	08009047 	.word	0x08009047
 8008fc4:	08009047 	.word	0x08009047
 8008fc8:	08009047 	.word	0x08009047
 8008fcc:	08009047 	.word	0x08009047
 8008fd0:	08009047 	.word	0x08009047
 8008fd4:	08009047 	.word	0x08009047
 8008fd8:	08009039 	.word	0x08009039
 8008fdc:	2b40      	cmp	r3, #64	; 0x40
 8008fde:	d02e      	beq.n	800903e <UART_SetConfig+0xa36>
 8008fe0:	e031      	b.n	8009046 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008fe2:	f7fd f853 	bl	800608c <HAL_RCC_GetPCLK1Freq>
 8008fe6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008fe8:	e033      	b.n	8009052 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008fea:	f7fd f865 	bl	80060b8 <HAL_RCC_GetPCLK2Freq>
 8008fee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008ff0:	e02f      	b.n	8009052 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ff2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f7fe fab0 	bl	800755c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009000:	e027      	b.n	8009052 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009002:	f107 0318 	add.w	r3, r7, #24
 8009006:	4618      	mov	r0, r3
 8009008:	f7fe fbfc 	bl	8007804 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800900c:	69fb      	ldr	r3, [r7, #28]
 800900e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009010:	e01f      	b.n	8009052 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009012:	4b2d      	ldr	r3, [pc, #180]	; (80090c8 <UART_SetConfig+0xac0>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f003 0320 	and.w	r3, r3, #32
 800901a:	2b00      	cmp	r3, #0
 800901c:	d009      	beq.n	8009032 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800901e:	4b2a      	ldr	r3, [pc, #168]	; (80090c8 <UART_SetConfig+0xac0>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	08db      	lsrs	r3, r3, #3
 8009024:	f003 0303 	and.w	r3, r3, #3
 8009028:	4a28      	ldr	r2, [pc, #160]	; (80090cc <UART_SetConfig+0xac4>)
 800902a:	fa22 f303 	lsr.w	r3, r2, r3
 800902e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009030:	e00f      	b.n	8009052 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009032:	4b26      	ldr	r3, [pc, #152]	; (80090cc <UART_SetConfig+0xac4>)
 8009034:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009036:	e00c      	b.n	8009052 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009038:	4b25      	ldr	r3, [pc, #148]	; (80090d0 <UART_SetConfig+0xac8>)
 800903a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800903c:	e009      	b.n	8009052 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800903e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009042:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009044:	e005      	b.n	8009052 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8009046:	2300      	movs	r3, #0
 8009048:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800904a:	2301      	movs	r3, #1
 800904c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009050:	bf00      	nop
    }

    if (pclk != 0U)
 8009052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009054:	2b00      	cmp	r3, #0
 8009056:	d021      	beq.n	800909c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800905c:	4a1d      	ldr	r2, [pc, #116]	; (80090d4 <UART_SetConfig+0xacc>)
 800905e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009062:	461a      	mov	r2, r3
 8009064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009066:	fbb3 f2f2 	udiv	r2, r3, r2
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	685b      	ldr	r3, [r3, #4]
 800906e:	085b      	lsrs	r3, r3, #1
 8009070:	441a      	add	r2, r3
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	685b      	ldr	r3, [r3, #4]
 8009076:	fbb2 f3f3 	udiv	r3, r2, r3
 800907a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800907c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800907e:	2b0f      	cmp	r3, #15
 8009080:	d909      	bls.n	8009096 <UART_SetConfig+0xa8e>
 8009082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009084:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009088:	d205      	bcs.n	8009096 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800908a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800908c:	b29a      	uxth	r2, r3
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	60da      	str	r2, [r3, #12]
 8009094:	e002      	b.n	800909c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009096:	2301      	movs	r3, #1
 8009098:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	2201      	movs	r2, #1
 80090a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	2201      	movs	r2, #1
 80090a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80090ac:	697b      	ldr	r3, [r7, #20]
 80090ae:	2200      	movs	r2, #0
 80090b0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	2200      	movs	r2, #0
 80090b6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80090b8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3748      	adds	r7, #72	; 0x48
 80090c0:	46bd      	mov	sp, r7
 80090c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80090c6:	bf00      	nop
 80090c8:	58024400 	.word	0x58024400
 80090cc:	03d09000 	.word	0x03d09000
 80090d0:	003d0900 	.word	0x003d0900
 80090d4:	0800a998 	.word	0x0800a998

080090d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80090d8:	b480      	push	{r7}
 80090da:	b083      	sub	sp, #12
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090e4:	f003 0301 	and.w	r3, r3, #1
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d00a      	beq.n	8009102 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	685b      	ldr	r3, [r3, #4]
 80090f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	430a      	orrs	r2, r1
 8009100:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009106:	f003 0302 	and.w	r3, r3, #2
 800910a:	2b00      	cmp	r3, #0
 800910c:	d00a      	beq.n	8009124 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	685b      	ldr	r3, [r3, #4]
 8009114:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	430a      	orrs	r2, r1
 8009122:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009128:	f003 0304 	and.w	r3, r3, #4
 800912c:	2b00      	cmp	r3, #0
 800912e:	d00a      	beq.n	8009146 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	685b      	ldr	r3, [r3, #4]
 8009136:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	430a      	orrs	r2, r1
 8009144:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800914a:	f003 0308 	and.w	r3, r3, #8
 800914e:	2b00      	cmp	r3, #0
 8009150:	d00a      	beq.n	8009168 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	430a      	orrs	r2, r1
 8009166:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800916c:	f003 0310 	and.w	r3, r3, #16
 8009170:	2b00      	cmp	r3, #0
 8009172:	d00a      	beq.n	800918a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	689b      	ldr	r3, [r3, #8]
 800917a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	430a      	orrs	r2, r1
 8009188:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800918e:	f003 0320 	and.w	r3, r3, #32
 8009192:	2b00      	cmp	r3, #0
 8009194:	d00a      	beq.n	80091ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	689b      	ldr	r3, [r3, #8]
 800919c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	430a      	orrs	r2, r1
 80091aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d01a      	beq.n	80091ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	430a      	orrs	r2, r1
 80091cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80091d6:	d10a      	bne.n	80091ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	685b      	ldr	r3, [r3, #4]
 80091de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	430a      	orrs	r2, r1
 80091ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d00a      	beq.n	8009210 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	685b      	ldr	r3, [r3, #4]
 8009200:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	430a      	orrs	r2, r1
 800920e:	605a      	str	r2, [r3, #4]
  }
}
 8009210:	bf00      	nop
 8009212:	370c      	adds	r7, #12
 8009214:	46bd      	mov	sp, r7
 8009216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921a:	4770      	bx	lr

0800921c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b098      	sub	sp, #96	; 0x60
 8009220:	af02      	add	r7, sp, #8
 8009222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2200      	movs	r2, #0
 8009228:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800922c:	f7f9 f9b2 	bl	8002594 <HAL_GetTick>
 8009230:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f003 0308 	and.w	r3, r3, #8
 800923c:	2b08      	cmp	r3, #8
 800923e:	d12f      	bne.n	80092a0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009240:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009244:	9300      	str	r3, [sp, #0]
 8009246:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009248:	2200      	movs	r2, #0
 800924a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f000 f88e 	bl	8009370 <UART_WaitOnFlagUntilTimeout>
 8009254:	4603      	mov	r3, r0
 8009256:	2b00      	cmp	r3, #0
 8009258:	d022      	beq.n	80092a0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009262:	e853 3f00 	ldrex	r3, [r3]
 8009266:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800926a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800926e:	653b      	str	r3, [r7, #80]	; 0x50
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	461a      	mov	r2, r3
 8009276:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009278:	647b      	str	r3, [r7, #68]	; 0x44
 800927a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800927c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800927e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009280:	e841 2300 	strex	r3, r2, [r1]
 8009284:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009288:	2b00      	cmp	r3, #0
 800928a:	d1e6      	bne.n	800925a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2220      	movs	r2, #32
 8009290:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2200      	movs	r2, #0
 8009298:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800929c:	2303      	movs	r3, #3
 800929e:	e063      	b.n	8009368 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f003 0304 	and.w	r3, r3, #4
 80092aa:	2b04      	cmp	r3, #4
 80092ac:	d149      	bne.n	8009342 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80092ae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80092b2:	9300      	str	r3, [sp, #0]
 80092b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092b6:	2200      	movs	r2, #0
 80092b8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f000 f857 	bl	8009370 <UART_WaitOnFlagUntilTimeout>
 80092c2:	4603      	mov	r3, r0
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d03c      	beq.n	8009342 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d0:	e853 3f00 	ldrex	r3, [r3]
 80092d4:	623b      	str	r3, [r7, #32]
   return(result);
 80092d6:	6a3b      	ldr	r3, [r7, #32]
 80092d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80092dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	461a      	mov	r2, r3
 80092e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092e6:	633b      	str	r3, [r7, #48]	; 0x30
 80092e8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80092ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092ee:	e841 2300 	strex	r3, r2, [r1]
 80092f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80092f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d1e6      	bne.n	80092c8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	3308      	adds	r3, #8
 8009300:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	e853 3f00 	ldrex	r3, [r3]
 8009308:	60fb      	str	r3, [r7, #12]
   return(result);
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	f023 0301 	bic.w	r3, r3, #1
 8009310:	64bb      	str	r3, [r7, #72]	; 0x48
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	3308      	adds	r3, #8
 8009318:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800931a:	61fa      	str	r2, [r7, #28]
 800931c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800931e:	69b9      	ldr	r1, [r7, #24]
 8009320:	69fa      	ldr	r2, [r7, #28]
 8009322:	e841 2300 	strex	r3, r2, [r1]
 8009326:	617b      	str	r3, [r7, #20]
   return(result);
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d1e5      	bne.n	80092fa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2220      	movs	r2, #32
 8009332:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2200      	movs	r2, #0
 800933a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800933e:	2303      	movs	r3, #3
 8009340:	e012      	b.n	8009368 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2220      	movs	r2, #32
 8009346:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2220      	movs	r2, #32
 800934e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2200      	movs	r2, #0
 8009356:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2200      	movs	r2, #0
 800935c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2200      	movs	r2, #0
 8009362:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009366:	2300      	movs	r3, #0
}
 8009368:	4618      	mov	r0, r3
 800936a:	3758      	adds	r7, #88	; 0x58
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}

08009370 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b084      	sub	sp, #16
 8009374:	af00      	add	r7, sp, #0
 8009376:	60f8      	str	r0, [r7, #12]
 8009378:	60b9      	str	r1, [r7, #8]
 800937a:	603b      	str	r3, [r7, #0]
 800937c:	4613      	mov	r3, r2
 800937e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009380:	e049      	b.n	8009416 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009382:	69bb      	ldr	r3, [r7, #24]
 8009384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009388:	d045      	beq.n	8009416 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800938a:	f7f9 f903 	bl	8002594 <HAL_GetTick>
 800938e:	4602      	mov	r2, r0
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	1ad3      	subs	r3, r2, r3
 8009394:	69ba      	ldr	r2, [r7, #24]
 8009396:	429a      	cmp	r2, r3
 8009398:	d302      	bcc.n	80093a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800939a:	69bb      	ldr	r3, [r7, #24]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d101      	bne.n	80093a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80093a0:	2303      	movs	r3, #3
 80093a2:	e048      	b.n	8009436 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f003 0304 	and.w	r3, r3, #4
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d031      	beq.n	8009416 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	69db      	ldr	r3, [r3, #28]
 80093b8:	f003 0308 	and.w	r3, r3, #8
 80093bc:	2b08      	cmp	r3, #8
 80093be:	d110      	bne.n	80093e2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	2208      	movs	r2, #8
 80093c6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80093c8:	68f8      	ldr	r0, [r7, #12]
 80093ca:	f000 f839 	bl	8009440 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	2208      	movs	r2, #8
 80093d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	2200      	movs	r2, #0
 80093da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80093de:	2301      	movs	r3, #1
 80093e0:	e029      	b.n	8009436 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	69db      	ldr	r3, [r3, #28]
 80093e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80093ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80093f0:	d111      	bne.n	8009416 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80093fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80093fc:	68f8      	ldr	r0, [r7, #12]
 80093fe:	f000 f81f 	bl	8009440 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	2220      	movs	r2, #32
 8009406:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	2200      	movs	r2, #0
 800940e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8009412:	2303      	movs	r3, #3
 8009414:	e00f      	b.n	8009436 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	69da      	ldr	r2, [r3, #28]
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	4013      	ands	r3, r2
 8009420:	68ba      	ldr	r2, [r7, #8]
 8009422:	429a      	cmp	r2, r3
 8009424:	bf0c      	ite	eq
 8009426:	2301      	moveq	r3, #1
 8009428:	2300      	movne	r3, #0
 800942a:	b2db      	uxtb	r3, r3
 800942c:	461a      	mov	r2, r3
 800942e:	79fb      	ldrb	r3, [r7, #7]
 8009430:	429a      	cmp	r2, r3
 8009432:	d0a6      	beq.n	8009382 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009434:	2300      	movs	r3, #0
}
 8009436:	4618      	mov	r0, r3
 8009438:	3710      	adds	r7, #16
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}
	...

08009440 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009440:	b480      	push	{r7}
 8009442:	b095      	sub	sp, #84	; 0x54
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800944e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009450:	e853 3f00 	ldrex	r3, [r3]
 8009454:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009458:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800945c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	461a      	mov	r2, r3
 8009464:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009466:	643b      	str	r3, [r7, #64]	; 0x40
 8009468:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800946a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800946c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800946e:	e841 2300 	strex	r3, r2, [r1]
 8009472:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009476:	2b00      	cmp	r3, #0
 8009478:	d1e6      	bne.n	8009448 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	3308      	adds	r3, #8
 8009480:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009482:	6a3b      	ldr	r3, [r7, #32]
 8009484:	e853 3f00 	ldrex	r3, [r3]
 8009488:	61fb      	str	r3, [r7, #28]
   return(result);
 800948a:	69fa      	ldr	r2, [r7, #28]
 800948c:	4b1e      	ldr	r3, [pc, #120]	; (8009508 <UART_EndRxTransfer+0xc8>)
 800948e:	4013      	ands	r3, r2
 8009490:	64bb      	str	r3, [r7, #72]	; 0x48
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	3308      	adds	r3, #8
 8009498:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800949a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800949c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800949e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80094a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094a2:	e841 2300 	strex	r3, r2, [r1]
 80094a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80094a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d1e5      	bne.n	800947a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094b2:	2b01      	cmp	r3, #1
 80094b4:	d118      	bne.n	80094e8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	e853 3f00 	ldrex	r3, [r3]
 80094c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	f023 0310 	bic.w	r3, r3, #16
 80094ca:	647b      	str	r3, [r7, #68]	; 0x44
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	461a      	mov	r2, r3
 80094d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094d4:	61bb      	str	r3, [r7, #24]
 80094d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094d8:	6979      	ldr	r1, [r7, #20]
 80094da:	69ba      	ldr	r2, [r7, #24]
 80094dc:	e841 2300 	strex	r3, r2, [r1]
 80094e0:	613b      	str	r3, [r7, #16]
   return(result);
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d1e6      	bne.n	80094b6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2220      	movs	r2, #32
 80094ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2200      	movs	r2, #0
 80094f4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2200      	movs	r2, #0
 80094fa:	675a      	str	r2, [r3, #116]	; 0x74
}
 80094fc:	bf00      	nop
 80094fe:	3754      	adds	r7, #84	; 0x54
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr
 8009508:	effffffe 	.word	0xeffffffe

0800950c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800950c:	b480      	push	{r7}
 800950e:	b085      	sub	sp, #20
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800951a:	2b01      	cmp	r3, #1
 800951c:	d101      	bne.n	8009522 <HAL_UARTEx_DisableFifoMode+0x16>
 800951e:	2302      	movs	r3, #2
 8009520:	e027      	b.n	8009572 <HAL_UARTEx_DisableFifoMode+0x66>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2201      	movs	r2, #1
 8009526:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2224      	movs	r2, #36	; 0x24
 800952e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	681a      	ldr	r2, [r3, #0]
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f022 0201 	bic.w	r2, r2, #1
 8009548:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009550:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2200      	movs	r2, #0
 8009556:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	68fa      	ldr	r2, [r7, #12]
 800955e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2220      	movs	r2, #32
 8009564:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2200      	movs	r2, #0
 800956c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009570:	2300      	movs	r3, #0
}
 8009572:	4618      	mov	r0, r3
 8009574:	3714      	adds	r7, #20
 8009576:	46bd      	mov	sp, r7
 8009578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957c:	4770      	bx	lr

0800957e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800957e:	b580      	push	{r7, lr}
 8009580:	b084      	sub	sp, #16
 8009582:	af00      	add	r7, sp, #0
 8009584:	6078      	str	r0, [r7, #4]
 8009586:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800958e:	2b01      	cmp	r3, #1
 8009590:	d101      	bne.n	8009596 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009592:	2302      	movs	r3, #2
 8009594:	e02d      	b.n	80095f2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2201      	movs	r2, #1
 800959a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2224      	movs	r2, #36	; 0x24
 80095a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	681a      	ldr	r2, [r3, #0]
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f022 0201 	bic.w	r2, r2, #1
 80095bc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	689b      	ldr	r3, [r3, #8]
 80095c4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	683a      	ldr	r2, [r7, #0]
 80095ce:	430a      	orrs	r2, r1
 80095d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f000 f850 	bl	8009678 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	68fa      	ldr	r2, [r7, #12]
 80095de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2220      	movs	r2, #32
 80095e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2200      	movs	r2, #0
 80095ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80095f0:	2300      	movs	r3, #0
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3710      	adds	r7, #16
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}

080095fa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80095fa:	b580      	push	{r7, lr}
 80095fc:	b084      	sub	sp, #16
 80095fe:	af00      	add	r7, sp, #0
 8009600:	6078      	str	r0, [r7, #4]
 8009602:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800960a:	2b01      	cmp	r3, #1
 800960c:	d101      	bne.n	8009612 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800960e:	2302      	movs	r3, #2
 8009610:	e02d      	b.n	800966e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2201      	movs	r2, #1
 8009616:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2224      	movs	r2, #36	; 0x24
 800961e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	681a      	ldr	r2, [r3, #0]
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f022 0201 	bic.w	r2, r2, #1
 8009638:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	689b      	ldr	r3, [r3, #8]
 8009640:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	683a      	ldr	r2, [r7, #0]
 800964a:	430a      	orrs	r2, r1
 800964c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f000 f812 	bl	8009678 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	68fa      	ldr	r2, [r7, #12]
 800965a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2220      	movs	r2, #32
 8009660:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2200      	movs	r2, #0
 8009668:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800966c:	2300      	movs	r3, #0
}
 800966e:	4618      	mov	r0, r3
 8009670:	3710      	adds	r7, #16
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
	...

08009678 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009678:	b480      	push	{r7}
 800967a:	b085      	sub	sp, #20
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009684:	2b00      	cmp	r3, #0
 8009686:	d108      	bne.n	800969a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2201      	movs	r2, #1
 800968c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2201      	movs	r2, #1
 8009694:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009698:	e031      	b.n	80096fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800969a:	2310      	movs	r3, #16
 800969c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800969e:	2310      	movs	r3, #16
 80096a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	689b      	ldr	r3, [r3, #8]
 80096a8:	0e5b      	lsrs	r3, r3, #25
 80096aa:	b2db      	uxtb	r3, r3
 80096ac:	f003 0307 	and.w	r3, r3, #7
 80096b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	689b      	ldr	r3, [r3, #8]
 80096b8:	0f5b      	lsrs	r3, r3, #29
 80096ba:	b2db      	uxtb	r3, r3
 80096bc:	f003 0307 	and.w	r3, r3, #7
 80096c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80096c2:	7bbb      	ldrb	r3, [r7, #14]
 80096c4:	7b3a      	ldrb	r2, [r7, #12]
 80096c6:	4911      	ldr	r1, [pc, #68]	; (800970c <UARTEx_SetNbDataToProcess+0x94>)
 80096c8:	5c8a      	ldrb	r2, [r1, r2]
 80096ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80096ce:	7b3a      	ldrb	r2, [r7, #12]
 80096d0:	490f      	ldr	r1, [pc, #60]	; (8009710 <UARTEx_SetNbDataToProcess+0x98>)
 80096d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80096d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80096d8:	b29a      	uxth	r2, r3
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80096e0:	7bfb      	ldrb	r3, [r7, #15]
 80096e2:	7b7a      	ldrb	r2, [r7, #13]
 80096e4:	4909      	ldr	r1, [pc, #36]	; (800970c <UARTEx_SetNbDataToProcess+0x94>)
 80096e6:	5c8a      	ldrb	r2, [r1, r2]
 80096e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80096ec:	7b7a      	ldrb	r2, [r7, #13]
 80096ee:	4908      	ldr	r1, [pc, #32]	; (8009710 <UARTEx_SetNbDataToProcess+0x98>)
 80096f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80096f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80096f6:	b29a      	uxth	r2, r3
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80096fe:	bf00      	nop
 8009700:	3714      	adds	r7, #20
 8009702:	46bd      	mov	sp, r7
 8009704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009708:	4770      	bx	lr
 800970a:	bf00      	nop
 800970c:	0800a9b0 	.word	0x0800a9b0
 8009710:	0800a9b8 	.word	0x0800a9b8

08009714 <__errno>:
 8009714:	4b01      	ldr	r3, [pc, #4]	; (800971c <__errno+0x8>)
 8009716:	6818      	ldr	r0, [r3, #0]
 8009718:	4770      	bx	lr
 800971a:	bf00      	nop
 800971c:	2000003c 	.word	0x2000003c

08009720 <__libc_init_array>:
 8009720:	b570      	push	{r4, r5, r6, lr}
 8009722:	4d0d      	ldr	r5, [pc, #52]	; (8009758 <__libc_init_array+0x38>)
 8009724:	4c0d      	ldr	r4, [pc, #52]	; (800975c <__libc_init_array+0x3c>)
 8009726:	1b64      	subs	r4, r4, r5
 8009728:	10a4      	asrs	r4, r4, #2
 800972a:	2600      	movs	r6, #0
 800972c:	42a6      	cmp	r6, r4
 800972e:	d109      	bne.n	8009744 <__libc_init_array+0x24>
 8009730:	4d0b      	ldr	r5, [pc, #44]	; (8009760 <__libc_init_array+0x40>)
 8009732:	4c0c      	ldr	r4, [pc, #48]	; (8009764 <__libc_init_array+0x44>)
 8009734:	f001 f832 	bl	800a79c <_init>
 8009738:	1b64      	subs	r4, r4, r5
 800973a:	10a4      	asrs	r4, r4, #2
 800973c:	2600      	movs	r6, #0
 800973e:	42a6      	cmp	r6, r4
 8009740:	d105      	bne.n	800974e <__libc_init_array+0x2e>
 8009742:	bd70      	pop	{r4, r5, r6, pc}
 8009744:	f855 3b04 	ldr.w	r3, [r5], #4
 8009748:	4798      	blx	r3
 800974a:	3601      	adds	r6, #1
 800974c:	e7ee      	b.n	800972c <__libc_init_array+0xc>
 800974e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009752:	4798      	blx	r3
 8009754:	3601      	adds	r6, #1
 8009756:	e7f2      	b.n	800973e <__libc_init_array+0x1e>
 8009758:	0800aa60 	.word	0x0800aa60
 800975c:	0800aa60 	.word	0x0800aa60
 8009760:	0800aa60 	.word	0x0800aa60
 8009764:	0800aa64 	.word	0x0800aa64

08009768 <memcpy>:
 8009768:	440a      	add	r2, r1
 800976a:	4291      	cmp	r1, r2
 800976c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009770:	d100      	bne.n	8009774 <memcpy+0xc>
 8009772:	4770      	bx	lr
 8009774:	b510      	push	{r4, lr}
 8009776:	f811 4b01 	ldrb.w	r4, [r1], #1
 800977a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800977e:	4291      	cmp	r1, r2
 8009780:	d1f9      	bne.n	8009776 <memcpy+0xe>
 8009782:	bd10      	pop	{r4, pc}

08009784 <memset>:
 8009784:	4402      	add	r2, r0
 8009786:	4603      	mov	r3, r0
 8009788:	4293      	cmp	r3, r2
 800978a:	d100      	bne.n	800978e <memset+0xa>
 800978c:	4770      	bx	lr
 800978e:	f803 1b01 	strb.w	r1, [r3], #1
 8009792:	e7f9      	b.n	8009788 <memset+0x4>

08009794 <iprintf>:
 8009794:	b40f      	push	{r0, r1, r2, r3}
 8009796:	4b0a      	ldr	r3, [pc, #40]	; (80097c0 <iprintf+0x2c>)
 8009798:	b513      	push	{r0, r1, r4, lr}
 800979a:	681c      	ldr	r4, [r3, #0]
 800979c:	b124      	cbz	r4, 80097a8 <iprintf+0x14>
 800979e:	69a3      	ldr	r3, [r4, #24]
 80097a0:	b913      	cbnz	r3, 80097a8 <iprintf+0x14>
 80097a2:	4620      	mov	r0, r4
 80097a4:	f000 fa5e 	bl	8009c64 <__sinit>
 80097a8:	ab05      	add	r3, sp, #20
 80097aa:	9a04      	ldr	r2, [sp, #16]
 80097ac:	68a1      	ldr	r1, [r4, #8]
 80097ae:	9301      	str	r3, [sp, #4]
 80097b0:	4620      	mov	r0, r4
 80097b2:	f000 fc67 	bl	800a084 <_vfiprintf_r>
 80097b6:	b002      	add	sp, #8
 80097b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097bc:	b004      	add	sp, #16
 80097be:	4770      	bx	lr
 80097c0:	2000003c 	.word	0x2000003c

080097c4 <_puts_r>:
 80097c4:	b570      	push	{r4, r5, r6, lr}
 80097c6:	460e      	mov	r6, r1
 80097c8:	4605      	mov	r5, r0
 80097ca:	b118      	cbz	r0, 80097d4 <_puts_r+0x10>
 80097cc:	6983      	ldr	r3, [r0, #24]
 80097ce:	b90b      	cbnz	r3, 80097d4 <_puts_r+0x10>
 80097d0:	f000 fa48 	bl	8009c64 <__sinit>
 80097d4:	69ab      	ldr	r3, [r5, #24]
 80097d6:	68ac      	ldr	r4, [r5, #8]
 80097d8:	b913      	cbnz	r3, 80097e0 <_puts_r+0x1c>
 80097da:	4628      	mov	r0, r5
 80097dc:	f000 fa42 	bl	8009c64 <__sinit>
 80097e0:	4b2c      	ldr	r3, [pc, #176]	; (8009894 <_puts_r+0xd0>)
 80097e2:	429c      	cmp	r4, r3
 80097e4:	d120      	bne.n	8009828 <_puts_r+0x64>
 80097e6:	686c      	ldr	r4, [r5, #4]
 80097e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80097ea:	07db      	lsls	r3, r3, #31
 80097ec:	d405      	bmi.n	80097fa <_puts_r+0x36>
 80097ee:	89a3      	ldrh	r3, [r4, #12]
 80097f0:	0598      	lsls	r0, r3, #22
 80097f2:	d402      	bmi.n	80097fa <_puts_r+0x36>
 80097f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097f6:	f000 fad3 	bl	8009da0 <__retarget_lock_acquire_recursive>
 80097fa:	89a3      	ldrh	r3, [r4, #12]
 80097fc:	0719      	lsls	r1, r3, #28
 80097fe:	d51d      	bpl.n	800983c <_puts_r+0x78>
 8009800:	6923      	ldr	r3, [r4, #16]
 8009802:	b1db      	cbz	r3, 800983c <_puts_r+0x78>
 8009804:	3e01      	subs	r6, #1
 8009806:	68a3      	ldr	r3, [r4, #8]
 8009808:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800980c:	3b01      	subs	r3, #1
 800980e:	60a3      	str	r3, [r4, #8]
 8009810:	bb39      	cbnz	r1, 8009862 <_puts_r+0x9e>
 8009812:	2b00      	cmp	r3, #0
 8009814:	da38      	bge.n	8009888 <_puts_r+0xc4>
 8009816:	4622      	mov	r2, r4
 8009818:	210a      	movs	r1, #10
 800981a:	4628      	mov	r0, r5
 800981c:	f000 f848 	bl	80098b0 <__swbuf_r>
 8009820:	3001      	adds	r0, #1
 8009822:	d011      	beq.n	8009848 <_puts_r+0x84>
 8009824:	250a      	movs	r5, #10
 8009826:	e011      	b.n	800984c <_puts_r+0x88>
 8009828:	4b1b      	ldr	r3, [pc, #108]	; (8009898 <_puts_r+0xd4>)
 800982a:	429c      	cmp	r4, r3
 800982c:	d101      	bne.n	8009832 <_puts_r+0x6e>
 800982e:	68ac      	ldr	r4, [r5, #8]
 8009830:	e7da      	b.n	80097e8 <_puts_r+0x24>
 8009832:	4b1a      	ldr	r3, [pc, #104]	; (800989c <_puts_r+0xd8>)
 8009834:	429c      	cmp	r4, r3
 8009836:	bf08      	it	eq
 8009838:	68ec      	ldreq	r4, [r5, #12]
 800983a:	e7d5      	b.n	80097e8 <_puts_r+0x24>
 800983c:	4621      	mov	r1, r4
 800983e:	4628      	mov	r0, r5
 8009840:	f000 f888 	bl	8009954 <__swsetup_r>
 8009844:	2800      	cmp	r0, #0
 8009846:	d0dd      	beq.n	8009804 <_puts_r+0x40>
 8009848:	f04f 35ff 	mov.w	r5, #4294967295
 800984c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800984e:	07da      	lsls	r2, r3, #31
 8009850:	d405      	bmi.n	800985e <_puts_r+0x9a>
 8009852:	89a3      	ldrh	r3, [r4, #12]
 8009854:	059b      	lsls	r3, r3, #22
 8009856:	d402      	bmi.n	800985e <_puts_r+0x9a>
 8009858:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800985a:	f000 faa2 	bl	8009da2 <__retarget_lock_release_recursive>
 800985e:	4628      	mov	r0, r5
 8009860:	bd70      	pop	{r4, r5, r6, pc}
 8009862:	2b00      	cmp	r3, #0
 8009864:	da04      	bge.n	8009870 <_puts_r+0xac>
 8009866:	69a2      	ldr	r2, [r4, #24]
 8009868:	429a      	cmp	r2, r3
 800986a:	dc06      	bgt.n	800987a <_puts_r+0xb6>
 800986c:	290a      	cmp	r1, #10
 800986e:	d004      	beq.n	800987a <_puts_r+0xb6>
 8009870:	6823      	ldr	r3, [r4, #0]
 8009872:	1c5a      	adds	r2, r3, #1
 8009874:	6022      	str	r2, [r4, #0]
 8009876:	7019      	strb	r1, [r3, #0]
 8009878:	e7c5      	b.n	8009806 <_puts_r+0x42>
 800987a:	4622      	mov	r2, r4
 800987c:	4628      	mov	r0, r5
 800987e:	f000 f817 	bl	80098b0 <__swbuf_r>
 8009882:	3001      	adds	r0, #1
 8009884:	d1bf      	bne.n	8009806 <_puts_r+0x42>
 8009886:	e7df      	b.n	8009848 <_puts_r+0x84>
 8009888:	6823      	ldr	r3, [r4, #0]
 800988a:	250a      	movs	r5, #10
 800988c:	1c5a      	adds	r2, r3, #1
 800988e:	6022      	str	r2, [r4, #0]
 8009890:	701d      	strb	r5, [r3, #0]
 8009892:	e7db      	b.n	800984c <_puts_r+0x88>
 8009894:	0800a9e4 	.word	0x0800a9e4
 8009898:	0800aa04 	.word	0x0800aa04
 800989c:	0800a9c4 	.word	0x0800a9c4

080098a0 <puts>:
 80098a0:	4b02      	ldr	r3, [pc, #8]	; (80098ac <puts+0xc>)
 80098a2:	4601      	mov	r1, r0
 80098a4:	6818      	ldr	r0, [r3, #0]
 80098a6:	f7ff bf8d 	b.w	80097c4 <_puts_r>
 80098aa:	bf00      	nop
 80098ac:	2000003c 	.word	0x2000003c

080098b0 <__swbuf_r>:
 80098b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098b2:	460e      	mov	r6, r1
 80098b4:	4614      	mov	r4, r2
 80098b6:	4605      	mov	r5, r0
 80098b8:	b118      	cbz	r0, 80098c2 <__swbuf_r+0x12>
 80098ba:	6983      	ldr	r3, [r0, #24]
 80098bc:	b90b      	cbnz	r3, 80098c2 <__swbuf_r+0x12>
 80098be:	f000 f9d1 	bl	8009c64 <__sinit>
 80098c2:	4b21      	ldr	r3, [pc, #132]	; (8009948 <__swbuf_r+0x98>)
 80098c4:	429c      	cmp	r4, r3
 80098c6:	d12b      	bne.n	8009920 <__swbuf_r+0x70>
 80098c8:	686c      	ldr	r4, [r5, #4]
 80098ca:	69a3      	ldr	r3, [r4, #24]
 80098cc:	60a3      	str	r3, [r4, #8]
 80098ce:	89a3      	ldrh	r3, [r4, #12]
 80098d0:	071a      	lsls	r2, r3, #28
 80098d2:	d52f      	bpl.n	8009934 <__swbuf_r+0x84>
 80098d4:	6923      	ldr	r3, [r4, #16]
 80098d6:	b36b      	cbz	r3, 8009934 <__swbuf_r+0x84>
 80098d8:	6923      	ldr	r3, [r4, #16]
 80098da:	6820      	ldr	r0, [r4, #0]
 80098dc:	1ac0      	subs	r0, r0, r3
 80098de:	6963      	ldr	r3, [r4, #20]
 80098e0:	b2f6      	uxtb	r6, r6
 80098e2:	4283      	cmp	r3, r0
 80098e4:	4637      	mov	r7, r6
 80098e6:	dc04      	bgt.n	80098f2 <__swbuf_r+0x42>
 80098e8:	4621      	mov	r1, r4
 80098ea:	4628      	mov	r0, r5
 80098ec:	f000 f926 	bl	8009b3c <_fflush_r>
 80098f0:	bb30      	cbnz	r0, 8009940 <__swbuf_r+0x90>
 80098f2:	68a3      	ldr	r3, [r4, #8]
 80098f4:	3b01      	subs	r3, #1
 80098f6:	60a3      	str	r3, [r4, #8]
 80098f8:	6823      	ldr	r3, [r4, #0]
 80098fa:	1c5a      	adds	r2, r3, #1
 80098fc:	6022      	str	r2, [r4, #0]
 80098fe:	701e      	strb	r6, [r3, #0]
 8009900:	6963      	ldr	r3, [r4, #20]
 8009902:	3001      	adds	r0, #1
 8009904:	4283      	cmp	r3, r0
 8009906:	d004      	beq.n	8009912 <__swbuf_r+0x62>
 8009908:	89a3      	ldrh	r3, [r4, #12]
 800990a:	07db      	lsls	r3, r3, #31
 800990c:	d506      	bpl.n	800991c <__swbuf_r+0x6c>
 800990e:	2e0a      	cmp	r6, #10
 8009910:	d104      	bne.n	800991c <__swbuf_r+0x6c>
 8009912:	4621      	mov	r1, r4
 8009914:	4628      	mov	r0, r5
 8009916:	f000 f911 	bl	8009b3c <_fflush_r>
 800991a:	b988      	cbnz	r0, 8009940 <__swbuf_r+0x90>
 800991c:	4638      	mov	r0, r7
 800991e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009920:	4b0a      	ldr	r3, [pc, #40]	; (800994c <__swbuf_r+0x9c>)
 8009922:	429c      	cmp	r4, r3
 8009924:	d101      	bne.n	800992a <__swbuf_r+0x7a>
 8009926:	68ac      	ldr	r4, [r5, #8]
 8009928:	e7cf      	b.n	80098ca <__swbuf_r+0x1a>
 800992a:	4b09      	ldr	r3, [pc, #36]	; (8009950 <__swbuf_r+0xa0>)
 800992c:	429c      	cmp	r4, r3
 800992e:	bf08      	it	eq
 8009930:	68ec      	ldreq	r4, [r5, #12]
 8009932:	e7ca      	b.n	80098ca <__swbuf_r+0x1a>
 8009934:	4621      	mov	r1, r4
 8009936:	4628      	mov	r0, r5
 8009938:	f000 f80c 	bl	8009954 <__swsetup_r>
 800993c:	2800      	cmp	r0, #0
 800993e:	d0cb      	beq.n	80098d8 <__swbuf_r+0x28>
 8009940:	f04f 37ff 	mov.w	r7, #4294967295
 8009944:	e7ea      	b.n	800991c <__swbuf_r+0x6c>
 8009946:	bf00      	nop
 8009948:	0800a9e4 	.word	0x0800a9e4
 800994c:	0800aa04 	.word	0x0800aa04
 8009950:	0800a9c4 	.word	0x0800a9c4

08009954 <__swsetup_r>:
 8009954:	4b32      	ldr	r3, [pc, #200]	; (8009a20 <__swsetup_r+0xcc>)
 8009956:	b570      	push	{r4, r5, r6, lr}
 8009958:	681d      	ldr	r5, [r3, #0]
 800995a:	4606      	mov	r6, r0
 800995c:	460c      	mov	r4, r1
 800995e:	b125      	cbz	r5, 800996a <__swsetup_r+0x16>
 8009960:	69ab      	ldr	r3, [r5, #24]
 8009962:	b913      	cbnz	r3, 800996a <__swsetup_r+0x16>
 8009964:	4628      	mov	r0, r5
 8009966:	f000 f97d 	bl	8009c64 <__sinit>
 800996a:	4b2e      	ldr	r3, [pc, #184]	; (8009a24 <__swsetup_r+0xd0>)
 800996c:	429c      	cmp	r4, r3
 800996e:	d10f      	bne.n	8009990 <__swsetup_r+0x3c>
 8009970:	686c      	ldr	r4, [r5, #4]
 8009972:	89a3      	ldrh	r3, [r4, #12]
 8009974:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009978:	0719      	lsls	r1, r3, #28
 800997a:	d42c      	bmi.n	80099d6 <__swsetup_r+0x82>
 800997c:	06dd      	lsls	r5, r3, #27
 800997e:	d411      	bmi.n	80099a4 <__swsetup_r+0x50>
 8009980:	2309      	movs	r3, #9
 8009982:	6033      	str	r3, [r6, #0]
 8009984:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009988:	81a3      	strh	r3, [r4, #12]
 800998a:	f04f 30ff 	mov.w	r0, #4294967295
 800998e:	e03e      	b.n	8009a0e <__swsetup_r+0xba>
 8009990:	4b25      	ldr	r3, [pc, #148]	; (8009a28 <__swsetup_r+0xd4>)
 8009992:	429c      	cmp	r4, r3
 8009994:	d101      	bne.n	800999a <__swsetup_r+0x46>
 8009996:	68ac      	ldr	r4, [r5, #8]
 8009998:	e7eb      	b.n	8009972 <__swsetup_r+0x1e>
 800999a:	4b24      	ldr	r3, [pc, #144]	; (8009a2c <__swsetup_r+0xd8>)
 800999c:	429c      	cmp	r4, r3
 800999e:	bf08      	it	eq
 80099a0:	68ec      	ldreq	r4, [r5, #12]
 80099a2:	e7e6      	b.n	8009972 <__swsetup_r+0x1e>
 80099a4:	0758      	lsls	r0, r3, #29
 80099a6:	d512      	bpl.n	80099ce <__swsetup_r+0x7a>
 80099a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80099aa:	b141      	cbz	r1, 80099be <__swsetup_r+0x6a>
 80099ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80099b0:	4299      	cmp	r1, r3
 80099b2:	d002      	beq.n	80099ba <__swsetup_r+0x66>
 80099b4:	4630      	mov	r0, r6
 80099b6:	f000 fa5b 	bl	8009e70 <_free_r>
 80099ba:	2300      	movs	r3, #0
 80099bc:	6363      	str	r3, [r4, #52]	; 0x34
 80099be:	89a3      	ldrh	r3, [r4, #12]
 80099c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80099c4:	81a3      	strh	r3, [r4, #12]
 80099c6:	2300      	movs	r3, #0
 80099c8:	6063      	str	r3, [r4, #4]
 80099ca:	6923      	ldr	r3, [r4, #16]
 80099cc:	6023      	str	r3, [r4, #0]
 80099ce:	89a3      	ldrh	r3, [r4, #12]
 80099d0:	f043 0308 	orr.w	r3, r3, #8
 80099d4:	81a3      	strh	r3, [r4, #12]
 80099d6:	6923      	ldr	r3, [r4, #16]
 80099d8:	b94b      	cbnz	r3, 80099ee <__swsetup_r+0x9a>
 80099da:	89a3      	ldrh	r3, [r4, #12]
 80099dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80099e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099e4:	d003      	beq.n	80099ee <__swsetup_r+0x9a>
 80099e6:	4621      	mov	r1, r4
 80099e8:	4630      	mov	r0, r6
 80099ea:	f000 fa01 	bl	8009df0 <__smakebuf_r>
 80099ee:	89a0      	ldrh	r0, [r4, #12]
 80099f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80099f4:	f010 0301 	ands.w	r3, r0, #1
 80099f8:	d00a      	beq.n	8009a10 <__swsetup_r+0xbc>
 80099fa:	2300      	movs	r3, #0
 80099fc:	60a3      	str	r3, [r4, #8]
 80099fe:	6963      	ldr	r3, [r4, #20]
 8009a00:	425b      	negs	r3, r3
 8009a02:	61a3      	str	r3, [r4, #24]
 8009a04:	6923      	ldr	r3, [r4, #16]
 8009a06:	b943      	cbnz	r3, 8009a1a <__swsetup_r+0xc6>
 8009a08:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009a0c:	d1ba      	bne.n	8009984 <__swsetup_r+0x30>
 8009a0e:	bd70      	pop	{r4, r5, r6, pc}
 8009a10:	0781      	lsls	r1, r0, #30
 8009a12:	bf58      	it	pl
 8009a14:	6963      	ldrpl	r3, [r4, #20]
 8009a16:	60a3      	str	r3, [r4, #8]
 8009a18:	e7f4      	b.n	8009a04 <__swsetup_r+0xb0>
 8009a1a:	2000      	movs	r0, #0
 8009a1c:	e7f7      	b.n	8009a0e <__swsetup_r+0xba>
 8009a1e:	bf00      	nop
 8009a20:	2000003c 	.word	0x2000003c
 8009a24:	0800a9e4 	.word	0x0800a9e4
 8009a28:	0800aa04 	.word	0x0800aa04
 8009a2c:	0800a9c4 	.word	0x0800a9c4

08009a30 <__sflush_r>:
 8009a30:	898a      	ldrh	r2, [r1, #12]
 8009a32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a36:	4605      	mov	r5, r0
 8009a38:	0710      	lsls	r0, r2, #28
 8009a3a:	460c      	mov	r4, r1
 8009a3c:	d458      	bmi.n	8009af0 <__sflush_r+0xc0>
 8009a3e:	684b      	ldr	r3, [r1, #4]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	dc05      	bgt.n	8009a50 <__sflush_r+0x20>
 8009a44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	dc02      	bgt.n	8009a50 <__sflush_r+0x20>
 8009a4a:	2000      	movs	r0, #0
 8009a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009a52:	2e00      	cmp	r6, #0
 8009a54:	d0f9      	beq.n	8009a4a <__sflush_r+0x1a>
 8009a56:	2300      	movs	r3, #0
 8009a58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009a5c:	682f      	ldr	r7, [r5, #0]
 8009a5e:	602b      	str	r3, [r5, #0]
 8009a60:	d032      	beq.n	8009ac8 <__sflush_r+0x98>
 8009a62:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009a64:	89a3      	ldrh	r3, [r4, #12]
 8009a66:	075a      	lsls	r2, r3, #29
 8009a68:	d505      	bpl.n	8009a76 <__sflush_r+0x46>
 8009a6a:	6863      	ldr	r3, [r4, #4]
 8009a6c:	1ac0      	subs	r0, r0, r3
 8009a6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009a70:	b10b      	cbz	r3, 8009a76 <__sflush_r+0x46>
 8009a72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009a74:	1ac0      	subs	r0, r0, r3
 8009a76:	2300      	movs	r3, #0
 8009a78:	4602      	mov	r2, r0
 8009a7a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009a7c:	6a21      	ldr	r1, [r4, #32]
 8009a7e:	4628      	mov	r0, r5
 8009a80:	47b0      	blx	r6
 8009a82:	1c43      	adds	r3, r0, #1
 8009a84:	89a3      	ldrh	r3, [r4, #12]
 8009a86:	d106      	bne.n	8009a96 <__sflush_r+0x66>
 8009a88:	6829      	ldr	r1, [r5, #0]
 8009a8a:	291d      	cmp	r1, #29
 8009a8c:	d82c      	bhi.n	8009ae8 <__sflush_r+0xb8>
 8009a8e:	4a2a      	ldr	r2, [pc, #168]	; (8009b38 <__sflush_r+0x108>)
 8009a90:	40ca      	lsrs	r2, r1
 8009a92:	07d6      	lsls	r6, r2, #31
 8009a94:	d528      	bpl.n	8009ae8 <__sflush_r+0xb8>
 8009a96:	2200      	movs	r2, #0
 8009a98:	6062      	str	r2, [r4, #4]
 8009a9a:	04d9      	lsls	r1, r3, #19
 8009a9c:	6922      	ldr	r2, [r4, #16]
 8009a9e:	6022      	str	r2, [r4, #0]
 8009aa0:	d504      	bpl.n	8009aac <__sflush_r+0x7c>
 8009aa2:	1c42      	adds	r2, r0, #1
 8009aa4:	d101      	bne.n	8009aaa <__sflush_r+0x7a>
 8009aa6:	682b      	ldr	r3, [r5, #0]
 8009aa8:	b903      	cbnz	r3, 8009aac <__sflush_r+0x7c>
 8009aaa:	6560      	str	r0, [r4, #84]	; 0x54
 8009aac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009aae:	602f      	str	r7, [r5, #0]
 8009ab0:	2900      	cmp	r1, #0
 8009ab2:	d0ca      	beq.n	8009a4a <__sflush_r+0x1a>
 8009ab4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ab8:	4299      	cmp	r1, r3
 8009aba:	d002      	beq.n	8009ac2 <__sflush_r+0x92>
 8009abc:	4628      	mov	r0, r5
 8009abe:	f000 f9d7 	bl	8009e70 <_free_r>
 8009ac2:	2000      	movs	r0, #0
 8009ac4:	6360      	str	r0, [r4, #52]	; 0x34
 8009ac6:	e7c1      	b.n	8009a4c <__sflush_r+0x1c>
 8009ac8:	6a21      	ldr	r1, [r4, #32]
 8009aca:	2301      	movs	r3, #1
 8009acc:	4628      	mov	r0, r5
 8009ace:	47b0      	blx	r6
 8009ad0:	1c41      	adds	r1, r0, #1
 8009ad2:	d1c7      	bne.n	8009a64 <__sflush_r+0x34>
 8009ad4:	682b      	ldr	r3, [r5, #0]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d0c4      	beq.n	8009a64 <__sflush_r+0x34>
 8009ada:	2b1d      	cmp	r3, #29
 8009adc:	d001      	beq.n	8009ae2 <__sflush_r+0xb2>
 8009ade:	2b16      	cmp	r3, #22
 8009ae0:	d101      	bne.n	8009ae6 <__sflush_r+0xb6>
 8009ae2:	602f      	str	r7, [r5, #0]
 8009ae4:	e7b1      	b.n	8009a4a <__sflush_r+0x1a>
 8009ae6:	89a3      	ldrh	r3, [r4, #12]
 8009ae8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009aec:	81a3      	strh	r3, [r4, #12]
 8009aee:	e7ad      	b.n	8009a4c <__sflush_r+0x1c>
 8009af0:	690f      	ldr	r7, [r1, #16]
 8009af2:	2f00      	cmp	r7, #0
 8009af4:	d0a9      	beq.n	8009a4a <__sflush_r+0x1a>
 8009af6:	0793      	lsls	r3, r2, #30
 8009af8:	680e      	ldr	r6, [r1, #0]
 8009afa:	bf08      	it	eq
 8009afc:	694b      	ldreq	r3, [r1, #20]
 8009afe:	600f      	str	r7, [r1, #0]
 8009b00:	bf18      	it	ne
 8009b02:	2300      	movne	r3, #0
 8009b04:	eba6 0807 	sub.w	r8, r6, r7
 8009b08:	608b      	str	r3, [r1, #8]
 8009b0a:	f1b8 0f00 	cmp.w	r8, #0
 8009b0e:	dd9c      	ble.n	8009a4a <__sflush_r+0x1a>
 8009b10:	6a21      	ldr	r1, [r4, #32]
 8009b12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009b14:	4643      	mov	r3, r8
 8009b16:	463a      	mov	r2, r7
 8009b18:	4628      	mov	r0, r5
 8009b1a:	47b0      	blx	r6
 8009b1c:	2800      	cmp	r0, #0
 8009b1e:	dc06      	bgt.n	8009b2e <__sflush_r+0xfe>
 8009b20:	89a3      	ldrh	r3, [r4, #12]
 8009b22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b26:	81a3      	strh	r3, [r4, #12]
 8009b28:	f04f 30ff 	mov.w	r0, #4294967295
 8009b2c:	e78e      	b.n	8009a4c <__sflush_r+0x1c>
 8009b2e:	4407      	add	r7, r0
 8009b30:	eba8 0800 	sub.w	r8, r8, r0
 8009b34:	e7e9      	b.n	8009b0a <__sflush_r+0xda>
 8009b36:	bf00      	nop
 8009b38:	20400001 	.word	0x20400001

08009b3c <_fflush_r>:
 8009b3c:	b538      	push	{r3, r4, r5, lr}
 8009b3e:	690b      	ldr	r3, [r1, #16]
 8009b40:	4605      	mov	r5, r0
 8009b42:	460c      	mov	r4, r1
 8009b44:	b913      	cbnz	r3, 8009b4c <_fflush_r+0x10>
 8009b46:	2500      	movs	r5, #0
 8009b48:	4628      	mov	r0, r5
 8009b4a:	bd38      	pop	{r3, r4, r5, pc}
 8009b4c:	b118      	cbz	r0, 8009b56 <_fflush_r+0x1a>
 8009b4e:	6983      	ldr	r3, [r0, #24]
 8009b50:	b90b      	cbnz	r3, 8009b56 <_fflush_r+0x1a>
 8009b52:	f000 f887 	bl	8009c64 <__sinit>
 8009b56:	4b14      	ldr	r3, [pc, #80]	; (8009ba8 <_fflush_r+0x6c>)
 8009b58:	429c      	cmp	r4, r3
 8009b5a:	d11b      	bne.n	8009b94 <_fflush_r+0x58>
 8009b5c:	686c      	ldr	r4, [r5, #4]
 8009b5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d0ef      	beq.n	8009b46 <_fflush_r+0xa>
 8009b66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009b68:	07d0      	lsls	r0, r2, #31
 8009b6a:	d404      	bmi.n	8009b76 <_fflush_r+0x3a>
 8009b6c:	0599      	lsls	r1, r3, #22
 8009b6e:	d402      	bmi.n	8009b76 <_fflush_r+0x3a>
 8009b70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b72:	f000 f915 	bl	8009da0 <__retarget_lock_acquire_recursive>
 8009b76:	4628      	mov	r0, r5
 8009b78:	4621      	mov	r1, r4
 8009b7a:	f7ff ff59 	bl	8009a30 <__sflush_r>
 8009b7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b80:	07da      	lsls	r2, r3, #31
 8009b82:	4605      	mov	r5, r0
 8009b84:	d4e0      	bmi.n	8009b48 <_fflush_r+0xc>
 8009b86:	89a3      	ldrh	r3, [r4, #12]
 8009b88:	059b      	lsls	r3, r3, #22
 8009b8a:	d4dd      	bmi.n	8009b48 <_fflush_r+0xc>
 8009b8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b8e:	f000 f908 	bl	8009da2 <__retarget_lock_release_recursive>
 8009b92:	e7d9      	b.n	8009b48 <_fflush_r+0xc>
 8009b94:	4b05      	ldr	r3, [pc, #20]	; (8009bac <_fflush_r+0x70>)
 8009b96:	429c      	cmp	r4, r3
 8009b98:	d101      	bne.n	8009b9e <_fflush_r+0x62>
 8009b9a:	68ac      	ldr	r4, [r5, #8]
 8009b9c:	e7df      	b.n	8009b5e <_fflush_r+0x22>
 8009b9e:	4b04      	ldr	r3, [pc, #16]	; (8009bb0 <_fflush_r+0x74>)
 8009ba0:	429c      	cmp	r4, r3
 8009ba2:	bf08      	it	eq
 8009ba4:	68ec      	ldreq	r4, [r5, #12]
 8009ba6:	e7da      	b.n	8009b5e <_fflush_r+0x22>
 8009ba8:	0800a9e4 	.word	0x0800a9e4
 8009bac:	0800aa04 	.word	0x0800aa04
 8009bb0:	0800a9c4 	.word	0x0800a9c4

08009bb4 <std>:
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	b510      	push	{r4, lr}
 8009bb8:	4604      	mov	r4, r0
 8009bba:	e9c0 3300 	strd	r3, r3, [r0]
 8009bbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009bc2:	6083      	str	r3, [r0, #8]
 8009bc4:	8181      	strh	r1, [r0, #12]
 8009bc6:	6643      	str	r3, [r0, #100]	; 0x64
 8009bc8:	81c2      	strh	r2, [r0, #14]
 8009bca:	6183      	str	r3, [r0, #24]
 8009bcc:	4619      	mov	r1, r3
 8009bce:	2208      	movs	r2, #8
 8009bd0:	305c      	adds	r0, #92	; 0x5c
 8009bd2:	f7ff fdd7 	bl	8009784 <memset>
 8009bd6:	4b05      	ldr	r3, [pc, #20]	; (8009bec <std+0x38>)
 8009bd8:	6263      	str	r3, [r4, #36]	; 0x24
 8009bda:	4b05      	ldr	r3, [pc, #20]	; (8009bf0 <std+0x3c>)
 8009bdc:	62a3      	str	r3, [r4, #40]	; 0x28
 8009bde:	4b05      	ldr	r3, [pc, #20]	; (8009bf4 <std+0x40>)
 8009be0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009be2:	4b05      	ldr	r3, [pc, #20]	; (8009bf8 <std+0x44>)
 8009be4:	6224      	str	r4, [r4, #32]
 8009be6:	6323      	str	r3, [r4, #48]	; 0x30
 8009be8:	bd10      	pop	{r4, pc}
 8009bea:	bf00      	nop
 8009bec:	0800a62d 	.word	0x0800a62d
 8009bf0:	0800a64f 	.word	0x0800a64f
 8009bf4:	0800a687 	.word	0x0800a687
 8009bf8:	0800a6ab 	.word	0x0800a6ab

08009bfc <_cleanup_r>:
 8009bfc:	4901      	ldr	r1, [pc, #4]	; (8009c04 <_cleanup_r+0x8>)
 8009bfe:	f000 b8af 	b.w	8009d60 <_fwalk_reent>
 8009c02:	bf00      	nop
 8009c04:	08009b3d 	.word	0x08009b3d

08009c08 <__sfmoreglue>:
 8009c08:	b570      	push	{r4, r5, r6, lr}
 8009c0a:	2268      	movs	r2, #104	; 0x68
 8009c0c:	1e4d      	subs	r5, r1, #1
 8009c0e:	4355      	muls	r5, r2
 8009c10:	460e      	mov	r6, r1
 8009c12:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009c16:	f000 f997 	bl	8009f48 <_malloc_r>
 8009c1a:	4604      	mov	r4, r0
 8009c1c:	b140      	cbz	r0, 8009c30 <__sfmoreglue+0x28>
 8009c1e:	2100      	movs	r1, #0
 8009c20:	e9c0 1600 	strd	r1, r6, [r0]
 8009c24:	300c      	adds	r0, #12
 8009c26:	60a0      	str	r0, [r4, #8]
 8009c28:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009c2c:	f7ff fdaa 	bl	8009784 <memset>
 8009c30:	4620      	mov	r0, r4
 8009c32:	bd70      	pop	{r4, r5, r6, pc}

08009c34 <__sfp_lock_acquire>:
 8009c34:	4801      	ldr	r0, [pc, #4]	; (8009c3c <__sfp_lock_acquire+0x8>)
 8009c36:	f000 b8b3 	b.w	8009da0 <__retarget_lock_acquire_recursive>
 8009c3a:	bf00      	nop
 8009c3c:	20000329 	.word	0x20000329

08009c40 <__sfp_lock_release>:
 8009c40:	4801      	ldr	r0, [pc, #4]	; (8009c48 <__sfp_lock_release+0x8>)
 8009c42:	f000 b8ae 	b.w	8009da2 <__retarget_lock_release_recursive>
 8009c46:	bf00      	nop
 8009c48:	20000329 	.word	0x20000329

08009c4c <__sinit_lock_acquire>:
 8009c4c:	4801      	ldr	r0, [pc, #4]	; (8009c54 <__sinit_lock_acquire+0x8>)
 8009c4e:	f000 b8a7 	b.w	8009da0 <__retarget_lock_acquire_recursive>
 8009c52:	bf00      	nop
 8009c54:	2000032a 	.word	0x2000032a

08009c58 <__sinit_lock_release>:
 8009c58:	4801      	ldr	r0, [pc, #4]	; (8009c60 <__sinit_lock_release+0x8>)
 8009c5a:	f000 b8a2 	b.w	8009da2 <__retarget_lock_release_recursive>
 8009c5e:	bf00      	nop
 8009c60:	2000032a 	.word	0x2000032a

08009c64 <__sinit>:
 8009c64:	b510      	push	{r4, lr}
 8009c66:	4604      	mov	r4, r0
 8009c68:	f7ff fff0 	bl	8009c4c <__sinit_lock_acquire>
 8009c6c:	69a3      	ldr	r3, [r4, #24]
 8009c6e:	b11b      	cbz	r3, 8009c78 <__sinit+0x14>
 8009c70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c74:	f7ff bff0 	b.w	8009c58 <__sinit_lock_release>
 8009c78:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009c7c:	6523      	str	r3, [r4, #80]	; 0x50
 8009c7e:	4b13      	ldr	r3, [pc, #76]	; (8009ccc <__sinit+0x68>)
 8009c80:	4a13      	ldr	r2, [pc, #76]	; (8009cd0 <__sinit+0x6c>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	62a2      	str	r2, [r4, #40]	; 0x28
 8009c86:	42a3      	cmp	r3, r4
 8009c88:	bf04      	itt	eq
 8009c8a:	2301      	moveq	r3, #1
 8009c8c:	61a3      	streq	r3, [r4, #24]
 8009c8e:	4620      	mov	r0, r4
 8009c90:	f000 f820 	bl	8009cd4 <__sfp>
 8009c94:	6060      	str	r0, [r4, #4]
 8009c96:	4620      	mov	r0, r4
 8009c98:	f000 f81c 	bl	8009cd4 <__sfp>
 8009c9c:	60a0      	str	r0, [r4, #8]
 8009c9e:	4620      	mov	r0, r4
 8009ca0:	f000 f818 	bl	8009cd4 <__sfp>
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	60e0      	str	r0, [r4, #12]
 8009ca8:	2104      	movs	r1, #4
 8009caa:	6860      	ldr	r0, [r4, #4]
 8009cac:	f7ff ff82 	bl	8009bb4 <std>
 8009cb0:	68a0      	ldr	r0, [r4, #8]
 8009cb2:	2201      	movs	r2, #1
 8009cb4:	2109      	movs	r1, #9
 8009cb6:	f7ff ff7d 	bl	8009bb4 <std>
 8009cba:	68e0      	ldr	r0, [r4, #12]
 8009cbc:	2202      	movs	r2, #2
 8009cbe:	2112      	movs	r1, #18
 8009cc0:	f7ff ff78 	bl	8009bb4 <std>
 8009cc4:	2301      	movs	r3, #1
 8009cc6:	61a3      	str	r3, [r4, #24]
 8009cc8:	e7d2      	b.n	8009c70 <__sinit+0xc>
 8009cca:	bf00      	nop
 8009ccc:	0800a9c0 	.word	0x0800a9c0
 8009cd0:	08009bfd 	.word	0x08009bfd

08009cd4 <__sfp>:
 8009cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cd6:	4607      	mov	r7, r0
 8009cd8:	f7ff ffac 	bl	8009c34 <__sfp_lock_acquire>
 8009cdc:	4b1e      	ldr	r3, [pc, #120]	; (8009d58 <__sfp+0x84>)
 8009cde:	681e      	ldr	r6, [r3, #0]
 8009ce0:	69b3      	ldr	r3, [r6, #24]
 8009ce2:	b913      	cbnz	r3, 8009cea <__sfp+0x16>
 8009ce4:	4630      	mov	r0, r6
 8009ce6:	f7ff ffbd 	bl	8009c64 <__sinit>
 8009cea:	3648      	adds	r6, #72	; 0x48
 8009cec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009cf0:	3b01      	subs	r3, #1
 8009cf2:	d503      	bpl.n	8009cfc <__sfp+0x28>
 8009cf4:	6833      	ldr	r3, [r6, #0]
 8009cf6:	b30b      	cbz	r3, 8009d3c <__sfp+0x68>
 8009cf8:	6836      	ldr	r6, [r6, #0]
 8009cfa:	e7f7      	b.n	8009cec <__sfp+0x18>
 8009cfc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009d00:	b9d5      	cbnz	r5, 8009d38 <__sfp+0x64>
 8009d02:	4b16      	ldr	r3, [pc, #88]	; (8009d5c <__sfp+0x88>)
 8009d04:	60e3      	str	r3, [r4, #12]
 8009d06:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009d0a:	6665      	str	r5, [r4, #100]	; 0x64
 8009d0c:	f000 f847 	bl	8009d9e <__retarget_lock_init_recursive>
 8009d10:	f7ff ff96 	bl	8009c40 <__sfp_lock_release>
 8009d14:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009d18:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009d1c:	6025      	str	r5, [r4, #0]
 8009d1e:	61a5      	str	r5, [r4, #24]
 8009d20:	2208      	movs	r2, #8
 8009d22:	4629      	mov	r1, r5
 8009d24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009d28:	f7ff fd2c 	bl	8009784 <memset>
 8009d2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009d30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009d34:	4620      	mov	r0, r4
 8009d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d38:	3468      	adds	r4, #104	; 0x68
 8009d3a:	e7d9      	b.n	8009cf0 <__sfp+0x1c>
 8009d3c:	2104      	movs	r1, #4
 8009d3e:	4638      	mov	r0, r7
 8009d40:	f7ff ff62 	bl	8009c08 <__sfmoreglue>
 8009d44:	4604      	mov	r4, r0
 8009d46:	6030      	str	r0, [r6, #0]
 8009d48:	2800      	cmp	r0, #0
 8009d4a:	d1d5      	bne.n	8009cf8 <__sfp+0x24>
 8009d4c:	f7ff ff78 	bl	8009c40 <__sfp_lock_release>
 8009d50:	230c      	movs	r3, #12
 8009d52:	603b      	str	r3, [r7, #0]
 8009d54:	e7ee      	b.n	8009d34 <__sfp+0x60>
 8009d56:	bf00      	nop
 8009d58:	0800a9c0 	.word	0x0800a9c0
 8009d5c:	ffff0001 	.word	0xffff0001

08009d60 <_fwalk_reent>:
 8009d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d64:	4606      	mov	r6, r0
 8009d66:	4688      	mov	r8, r1
 8009d68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009d6c:	2700      	movs	r7, #0
 8009d6e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d72:	f1b9 0901 	subs.w	r9, r9, #1
 8009d76:	d505      	bpl.n	8009d84 <_fwalk_reent+0x24>
 8009d78:	6824      	ldr	r4, [r4, #0]
 8009d7a:	2c00      	cmp	r4, #0
 8009d7c:	d1f7      	bne.n	8009d6e <_fwalk_reent+0xe>
 8009d7e:	4638      	mov	r0, r7
 8009d80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d84:	89ab      	ldrh	r3, [r5, #12]
 8009d86:	2b01      	cmp	r3, #1
 8009d88:	d907      	bls.n	8009d9a <_fwalk_reent+0x3a>
 8009d8a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d8e:	3301      	adds	r3, #1
 8009d90:	d003      	beq.n	8009d9a <_fwalk_reent+0x3a>
 8009d92:	4629      	mov	r1, r5
 8009d94:	4630      	mov	r0, r6
 8009d96:	47c0      	blx	r8
 8009d98:	4307      	orrs	r7, r0
 8009d9a:	3568      	adds	r5, #104	; 0x68
 8009d9c:	e7e9      	b.n	8009d72 <_fwalk_reent+0x12>

08009d9e <__retarget_lock_init_recursive>:
 8009d9e:	4770      	bx	lr

08009da0 <__retarget_lock_acquire_recursive>:
 8009da0:	4770      	bx	lr

08009da2 <__retarget_lock_release_recursive>:
 8009da2:	4770      	bx	lr

08009da4 <__swhatbuf_r>:
 8009da4:	b570      	push	{r4, r5, r6, lr}
 8009da6:	460e      	mov	r6, r1
 8009da8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dac:	2900      	cmp	r1, #0
 8009dae:	b096      	sub	sp, #88	; 0x58
 8009db0:	4614      	mov	r4, r2
 8009db2:	461d      	mov	r5, r3
 8009db4:	da08      	bge.n	8009dc8 <__swhatbuf_r+0x24>
 8009db6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	602a      	str	r2, [r5, #0]
 8009dbe:	061a      	lsls	r2, r3, #24
 8009dc0:	d410      	bmi.n	8009de4 <__swhatbuf_r+0x40>
 8009dc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009dc6:	e00e      	b.n	8009de6 <__swhatbuf_r+0x42>
 8009dc8:	466a      	mov	r2, sp
 8009dca:	f000 fc95 	bl	800a6f8 <_fstat_r>
 8009dce:	2800      	cmp	r0, #0
 8009dd0:	dbf1      	blt.n	8009db6 <__swhatbuf_r+0x12>
 8009dd2:	9a01      	ldr	r2, [sp, #4]
 8009dd4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009dd8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009ddc:	425a      	negs	r2, r3
 8009dde:	415a      	adcs	r2, r3
 8009de0:	602a      	str	r2, [r5, #0]
 8009de2:	e7ee      	b.n	8009dc2 <__swhatbuf_r+0x1e>
 8009de4:	2340      	movs	r3, #64	; 0x40
 8009de6:	2000      	movs	r0, #0
 8009de8:	6023      	str	r3, [r4, #0]
 8009dea:	b016      	add	sp, #88	; 0x58
 8009dec:	bd70      	pop	{r4, r5, r6, pc}
	...

08009df0 <__smakebuf_r>:
 8009df0:	898b      	ldrh	r3, [r1, #12]
 8009df2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009df4:	079d      	lsls	r5, r3, #30
 8009df6:	4606      	mov	r6, r0
 8009df8:	460c      	mov	r4, r1
 8009dfa:	d507      	bpl.n	8009e0c <__smakebuf_r+0x1c>
 8009dfc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009e00:	6023      	str	r3, [r4, #0]
 8009e02:	6123      	str	r3, [r4, #16]
 8009e04:	2301      	movs	r3, #1
 8009e06:	6163      	str	r3, [r4, #20]
 8009e08:	b002      	add	sp, #8
 8009e0a:	bd70      	pop	{r4, r5, r6, pc}
 8009e0c:	ab01      	add	r3, sp, #4
 8009e0e:	466a      	mov	r2, sp
 8009e10:	f7ff ffc8 	bl	8009da4 <__swhatbuf_r>
 8009e14:	9900      	ldr	r1, [sp, #0]
 8009e16:	4605      	mov	r5, r0
 8009e18:	4630      	mov	r0, r6
 8009e1a:	f000 f895 	bl	8009f48 <_malloc_r>
 8009e1e:	b948      	cbnz	r0, 8009e34 <__smakebuf_r+0x44>
 8009e20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e24:	059a      	lsls	r2, r3, #22
 8009e26:	d4ef      	bmi.n	8009e08 <__smakebuf_r+0x18>
 8009e28:	f023 0303 	bic.w	r3, r3, #3
 8009e2c:	f043 0302 	orr.w	r3, r3, #2
 8009e30:	81a3      	strh	r3, [r4, #12]
 8009e32:	e7e3      	b.n	8009dfc <__smakebuf_r+0xc>
 8009e34:	4b0d      	ldr	r3, [pc, #52]	; (8009e6c <__smakebuf_r+0x7c>)
 8009e36:	62b3      	str	r3, [r6, #40]	; 0x28
 8009e38:	89a3      	ldrh	r3, [r4, #12]
 8009e3a:	6020      	str	r0, [r4, #0]
 8009e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e40:	81a3      	strh	r3, [r4, #12]
 8009e42:	9b00      	ldr	r3, [sp, #0]
 8009e44:	6163      	str	r3, [r4, #20]
 8009e46:	9b01      	ldr	r3, [sp, #4]
 8009e48:	6120      	str	r0, [r4, #16]
 8009e4a:	b15b      	cbz	r3, 8009e64 <__smakebuf_r+0x74>
 8009e4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e50:	4630      	mov	r0, r6
 8009e52:	f000 fc63 	bl	800a71c <_isatty_r>
 8009e56:	b128      	cbz	r0, 8009e64 <__smakebuf_r+0x74>
 8009e58:	89a3      	ldrh	r3, [r4, #12]
 8009e5a:	f023 0303 	bic.w	r3, r3, #3
 8009e5e:	f043 0301 	orr.w	r3, r3, #1
 8009e62:	81a3      	strh	r3, [r4, #12]
 8009e64:	89a0      	ldrh	r0, [r4, #12]
 8009e66:	4305      	orrs	r5, r0
 8009e68:	81a5      	strh	r5, [r4, #12]
 8009e6a:	e7cd      	b.n	8009e08 <__smakebuf_r+0x18>
 8009e6c:	08009bfd 	.word	0x08009bfd

08009e70 <_free_r>:
 8009e70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e72:	2900      	cmp	r1, #0
 8009e74:	d044      	beq.n	8009f00 <_free_r+0x90>
 8009e76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e7a:	9001      	str	r0, [sp, #4]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	f1a1 0404 	sub.w	r4, r1, #4
 8009e82:	bfb8      	it	lt
 8009e84:	18e4      	addlt	r4, r4, r3
 8009e86:	f000 fc6b 	bl	800a760 <__malloc_lock>
 8009e8a:	4a1e      	ldr	r2, [pc, #120]	; (8009f04 <_free_r+0x94>)
 8009e8c:	9801      	ldr	r0, [sp, #4]
 8009e8e:	6813      	ldr	r3, [r2, #0]
 8009e90:	b933      	cbnz	r3, 8009ea0 <_free_r+0x30>
 8009e92:	6063      	str	r3, [r4, #4]
 8009e94:	6014      	str	r4, [r2, #0]
 8009e96:	b003      	add	sp, #12
 8009e98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009e9c:	f000 bc66 	b.w	800a76c <__malloc_unlock>
 8009ea0:	42a3      	cmp	r3, r4
 8009ea2:	d908      	bls.n	8009eb6 <_free_r+0x46>
 8009ea4:	6825      	ldr	r5, [r4, #0]
 8009ea6:	1961      	adds	r1, r4, r5
 8009ea8:	428b      	cmp	r3, r1
 8009eaa:	bf01      	itttt	eq
 8009eac:	6819      	ldreq	r1, [r3, #0]
 8009eae:	685b      	ldreq	r3, [r3, #4]
 8009eb0:	1949      	addeq	r1, r1, r5
 8009eb2:	6021      	streq	r1, [r4, #0]
 8009eb4:	e7ed      	b.n	8009e92 <_free_r+0x22>
 8009eb6:	461a      	mov	r2, r3
 8009eb8:	685b      	ldr	r3, [r3, #4]
 8009eba:	b10b      	cbz	r3, 8009ec0 <_free_r+0x50>
 8009ebc:	42a3      	cmp	r3, r4
 8009ebe:	d9fa      	bls.n	8009eb6 <_free_r+0x46>
 8009ec0:	6811      	ldr	r1, [r2, #0]
 8009ec2:	1855      	adds	r5, r2, r1
 8009ec4:	42a5      	cmp	r5, r4
 8009ec6:	d10b      	bne.n	8009ee0 <_free_r+0x70>
 8009ec8:	6824      	ldr	r4, [r4, #0]
 8009eca:	4421      	add	r1, r4
 8009ecc:	1854      	adds	r4, r2, r1
 8009ece:	42a3      	cmp	r3, r4
 8009ed0:	6011      	str	r1, [r2, #0]
 8009ed2:	d1e0      	bne.n	8009e96 <_free_r+0x26>
 8009ed4:	681c      	ldr	r4, [r3, #0]
 8009ed6:	685b      	ldr	r3, [r3, #4]
 8009ed8:	6053      	str	r3, [r2, #4]
 8009eda:	4421      	add	r1, r4
 8009edc:	6011      	str	r1, [r2, #0]
 8009ede:	e7da      	b.n	8009e96 <_free_r+0x26>
 8009ee0:	d902      	bls.n	8009ee8 <_free_r+0x78>
 8009ee2:	230c      	movs	r3, #12
 8009ee4:	6003      	str	r3, [r0, #0]
 8009ee6:	e7d6      	b.n	8009e96 <_free_r+0x26>
 8009ee8:	6825      	ldr	r5, [r4, #0]
 8009eea:	1961      	adds	r1, r4, r5
 8009eec:	428b      	cmp	r3, r1
 8009eee:	bf04      	itt	eq
 8009ef0:	6819      	ldreq	r1, [r3, #0]
 8009ef2:	685b      	ldreq	r3, [r3, #4]
 8009ef4:	6063      	str	r3, [r4, #4]
 8009ef6:	bf04      	itt	eq
 8009ef8:	1949      	addeq	r1, r1, r5
 8009efa:	6021      	streq	r1, [r4, #0]
 8009efc:	6054      	str	r4, [r2, #4]
 8009efe:	e7ca      	b.n	8009e96 <_free_r+0x26>
 8009f00:	b003      	add	sp, #12
 8009f02:	bd30      	pop	{r4, r5, pc}
 8009f04:	2000032c 	.word	0x2000032c

08009f08 <sbrk_aligned>:
 8009f08:	b570      	push	{r4, r5, r6, lr}
 8009f0a:	4e0e      	ldr	r6, [pc, #56]	; (8009f44 <sbrk_aligned+0x3c>)
 8009f0c:	460c      	mov	r4, r1
 8009f0e:	6831      	ldr	r1, [r6, #0]
 8009f10:	4605      	mov	r5, r0
 8009f12:	b911      	cbnz	r1, 8009f1a <sbrk_aligned+0x12>
 8009f14:	f000 fb7a 	bl	800a60c <_sbrk_r>
 8009f18:	6030      	str	r0, [r6, #0]
 8009f1a:	4621      	mov	r1, r4
 8009f1c:	4628      	mov	r0, r5
 8009f1e:	f000 fb75 	bl	800a60c <_sbrk_r>
 8009f22:	1c43      	adds	r3, r0, #1
 8009f24:	d00a      	beq.n	8009f3c <sbrk_aligned+0x34>
 8009f26:	1cc4      	adds	r4, r0, #3
 8009f28:	f024 0403 	bic.w	r4, r4, #3
 8009f2c:	42a0      	cmp	r0, r4
 8009f2e:	d007      	beq.n	8009f40 <sbrk_aligned+0x38>
 8009f30:	1a21      	subs	r1, r4, r0
 8009f32:	4628      	mov	r0, r5
 8009f34:	f000 fb6a 	bl	800a60c <_sbrk_r>
 8009f38:	3001      	adds	r0, #1
 8009f3a:	d101      	bne.n	8009f40 <sbrk_aligned+0x38>
 8009f3c:	f04f 34ff 	mov.w	r4, #4294967295
 8009f40:	4620      	mov	r0, r4
 8009f42:	bd70      	pop	{r4, r5, r6, pc}
 8009f44:	20000330 	.word	0x20000330

08009f48 <_malloc_r>:
 8009f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f4c:	1ccd      	adds	r5, r1, #3
 8009f4e:	f025 0503 	bic.w	r5, r5, #3
 8009f52:	3508      	adds	r5, #8
 8009f54:	2d0c      	cmp	r5, #12
 8009f56:	bf38      	it	cc
 8009f58:	250c      	movcc	r5, #12
 8009f5a:	2d00      	cmp	r5, #0
 8009f5c:	4607      	mov	r7, r0
 8009f5e:	db01      	blt.n	8009f64 <_malloc_r+0x1c>
 8009f60:	42a9      	cmp	r1, r5
 8009f62:	d905      	bls.n	8009f70 <_malloc_r+0x28>
 8009f64:	230c      	movs	r3, #12
 8009f66:	603b      	str	r3, [r7, #0]
 8009f68:	2600      	movs	r6, #0
 8009f6a:	4630      	mov	r0, r6
 8009f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f70:	4e2e      	ldr	r6, [pc, #184]	; (800a02c <_malloc_r+0xe4>)
 8009f72:	f000 fbf5 	bl	800a760 <__malloc_lock>
 8009f76:	6833      	ldr	r3, [r6, #0]
 8009f78:	461c      	mov	r4, r3
 8009f7a:	bb34      	cbnz	r4, 8009fca <_malloc_r+0x82>
 8009f7c:	4629      	mov	r1, r5
 8009f7e:	4638      	mov	r0, r7
 8009f80:	f7ff ffc2 	bl	8009f08 <sbrk_aligned>
 8009f84:	1c43      	adds	r3, r0, #1
 8009f86:	4604      	mov	r4, r0
 8009f88:	d14d      	bne.n	800a026 <_malloc_r+0xde>
 8009f8a:	6834      	ldr	r4, [r6, #0]
 8009f8c:	4626      	mov	r6, r4
 8009f8e:	2e00      	cmp	r6, #0
 8009f90:	d140      	bne.n	800a014 <_malloc_r+0xcc>
 8009f92:	6823      	ldr	r3, [r4, #0]
 8009f94:	4631      	mov	r1, r6
 8009f96:	4638      	mov	r0, r7
 8009f98:	eb04 0803 	add.w	r8, r4, r3
 8009f9c:	f000 fb36 	bl	800a60c <_sbrk_r>
 8009fa0:	4580      	cmp	r8, r0
 8009fa2:	d13a      	bne.n	800a01a <_malloc_r+0xd2>
 8009fa4:	6821      	ldr	r1, [r4, #0]
 8009fa6:	3503      	adds	r5, #3
 8009fa8:	1a6d      	subs	r5, r5, r1
 8009faa:	f025 0503 	bic.w	r5, r5, #3
 8009fae:	3508      	adds	r5, #8
 8009fb0:	2d0c      	cmp	r5, #12
 8009fb2:	bf38      	it	cc
 8009fb4:	250c      	movcc	r5, #12
 8009fb6:	4629      	mov	r1, r5
 8009fb8:	4638      	mov	r0, r7
 8009fba:	f7ff ffa5 	bl	8009f08 <sbrk_aligned>
 8009fbe:	3001      	adds	r0, #1
 8009fc0:	d02b      	beq.n	800a01a <_malloc_r+0xd2>
 8009fc2:	6823      	ldr	r3, [r4, #0]
 8009fc4:	442b      	add	r3, r5
 8009fc6:	6023      	str	r3, [r4, #0]
 8009fc8:	e00e      	b.n	8009fe8 <_malloc_r+0xa0>
 8009fca:	6822      	ldr	r2, [r4, #0]
 8009fcc:	1b52      	subs	r2, r2, r5
 8009fce:	d41e      	bmi.n	800a00e <_malloc_r+0xc6>
 8009fd0:	2a0b      	cmp	r2, #11
 8009fd2:	d916      	bls.n	800a002 <_malloc_r+0xba>
 8009fd4:	1961      	adds	r1, r4, r5
 8009fd6:	42a3      	cmp	r3, r4
 8009fd8:	6025      	str	r5, [r4, #0]
 8009fda:	bf18      	it	ne
 8009fdc:	6059      	strne	r1, [r3, #4]
 8009fde:	6863      	ldr	r3, [r4, #4]
 8009fe0:	bf08      	it	eq
 8009fe2:	6031      	streq	r1, [r6, #0]
 8009fe4:	5162      	str	r2, [r4, r5]
 8009fe6:	604b      	str	r3, [r1, #4]
 8009fe8:	4638      	mov	r0, r7
 8009fea:	f104 060b 	add.w	r6, r4, #11
 8009fee:	f000 fbbd 	bl	800a76c <__malloc_unlock>
 8009ff2:	f026 0607 	bic.w	r6, r6, #7
 8009ff6:	1d23      	adds	r3, r4, #4
 8009ff8:	1af2      	subs	r2, r6, r3
 8009ffa:	d0b6      	beq.n	8009f6a <_malloc_r+0x22>
 8009ffc:	1b9b      	subs	r3, r3, r6
 8009ffe:	50a3      	str	r3, [r4, r2]
 800a000:	e7b3      	b.n	8009f6a <_malloc_r+0x22>
 800a002:	6862      	ldr	r2, [r4, #4]
 800a004:	42a3      	cmp	r3, r4
 800a006:	bf0c      	ite	eq
 800a008:	6032      	streq	r2, [r6, #0]
 800a00a:	605a      	strne	r2, [r3, #4]
 800a00c:	e7ec      	b.n	8009fe8 <_malloc_r+0xa0>
 800a00e:	4623      	mov	r3, r4
 800a010:	6864      	ldr	r4, [r4, #4]
 800a012:	e7b2      	b.n	8009f7a <_malloc_r+0x32>
 800a014:	4634      	mov	r4, r6
 800a016:	6876      	ldr	r6, [r6, #4]
 800a018:	e7b9      	b.n	8009f8e <_malloc_r+0x46>
 800a01a:	230c      	movs	r3, #12
 800a01c:	603b      	str	r3, [r7, #0]
 800a01e:	4638      	mov	r0, r7
 800a020:	f000 fba4 	bl	800a76c <__malloc_unlock>
 800a024:	e7a1      	b.n	8009f6a <_malloc_r+0x22>
 800a026:	6025      	str	r5, [r4, #0]
 800a028:	e7de      	b.n	8009fe8 <_malloc_r+0xa0>
 800a02a:	bf00      	nop
 800a02c:	2000032c 	.word	0x2000032c

0800a030 <__sfputc_r>:
 800a030:	6893      	ldr	r3, [r2, #8]
 800a032:	3b01      	subs	r3, #1
 800a034:	2b00      	cmp	r3, #0
 800a036:	b410      	push	{r4}
 800a038:	6093      	str	r3, [r2, #8]
 800a03a:	da08      	bge.n	800a04e <__sfputc_r+0x1e>
 800a03c:	6994      	ldr	r4, [r2, #24]
 800a03e:	42a3      	cmp	r3, r4
 800a040:	db01      	blt.n	800a046 <__sfputc_r+0x16>
 800a042:	290a      	cmp	r1, #10
 800a044:	d103      	bne.n	800a04e <__sfputc_r+0x1e>
 800a046:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a04a:	f7ff bc31 	b.w	80098b0 <__swbuf_r>
 800a04e:	6813      	ldr	r3, [r2, #0]
 800a050:	1c58      	adds	r0, r3, #1
 800a052:	6010      	str	r0, [r2, #0]
 800a054:	7019      	strb	r1, [r3, #0]
 800a056:	4608      	mov	r0, r1
 800a058:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a05c:	4770      	bx	lr

0800a05e <__sfputs_r>:
 800a05e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a060:	4606      	mov	r6, r0
 800a062:	460f      	mov	r7, r1
 800a064:	4614      	mov	r4, r2
 800a066:	18d5      	adds	r5, r2, r3
 800a068:	42ac      	cmp	r4, r5
 800a06a:	d101      	bne.n	800a070 <__sfputs_r+0x12>
 800a06c:	2000      	movs	r0, #0
 800a06e:	e007      	b.n	800a080 <__sfputs_r+0x22>
 800a070:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a074:	463a      	mov	r2, r7
 800a076:	4630      	mov	r0, r6
 800a078:	f7ff ffda 	bl	800a030 <__sfputc_r>
 800a07c:	1c43      	adds	r3, r0, #1
 800a07e:	d1f3      	bne.n	800a068 <__sfputs_r+0xa>
 800a080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a084 <_vfiprintf_r>:
 800a084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a088:	460d      	mov	r5, r1
 800a08a:	b09d      	sub	sp, #116	; 0x74
 800a08c:	4614      	mov	r4, r2
 800a08e:	4698      	mov	r8, r3
 800a090:	4606      	mov	r6, r0
 800a092:	b118      	cbz	r0, 800a09c <_vfiprintf_r+0x18>
 800a094:	6983      	ldr	r3, [r0, #24]
 800a096:	b90b      	cbnz	r3, 800a09c <_vfiprintf_r+0x18>
 800a098:	f7ff fde4 	bl	8009c64 <__sinit>
 800a09c:	4b89      	ldr	r3, [pc, #548]	; (800a2c4 <_vfiprintf_r+0x240>)
 800a09e:	429d      	cmp	r5, r3
 800a0a0:	d11b      	bne.n	800a0da <_vfiprintf_r+0x56>
 800a0a2:	6875      	ldr	r5, [r6, #4]
 800a0a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0a6:	07d9      	lsls	r1, r3, #31
 800a0a8:	d405      	bmi.n	800a0b6 <_vfiprintf_r+0x32>
 800a0aa:	89ab      	ldrh	r3, [r5, #12]
 800a0ac:	059a      	lsls	r2, r3, #22
 800a0ae:	d402      	bmi.n	800a0b6 <_vfiprintf_r+0x32>
 800a0b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0b2:	f7ff fe75 	bl	8009da0 <__retarget_lock_acquire_recursive>
 800a0b6:	89ab      	ldrh	r3, [r5, #12]
 800a0b8:	071b      	lsls	r3, r3, #28
 800a0ba:	d501      	bpl.n	800a0c0 <_vfiprintf_r+0x3c>
 800a0bc:	692b      	ldr	r3, [r5, #16]
 800a0be:	b9eb      	cbnz	r3, 800a0fc <_vfiprintf_r+0x78>
 800a0c0:	4629      	mov	r1, r5
 800a0c2:	4630      	mov	r0, r6
 800a0c4:	f7ff fc46 	bl	8009954 <__swsetup_r>
 800a0c8:	b1c0      	cbz	r0, 800a0fc <_vfiprintf_r+0x78>
 800a0ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0cc:	07dc      	lsls	r4, r3, #31
 800a0ce:	d50e      	bpl.n	800a0ee <_vfiprintf_r+0x6a>
 800a0d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a0d4:	b01d      	add	sp, #116	; 0x74
 800a0d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0da:	4b7b      	ldr	r3, [pc, #492]	; (800a2c8 <_vfiprintf_r+0x244>)
 800a0dc:	429d      	cmp	r5, r3
 800a0de:	d101      	bne.n	800a0e4 <_vfiprintf_r+0x60>
 800a0e0:	68b5      	ldr	r5, [r6, #8]
 800a0e2:	e7df      	b.n	800a0a4 <_vfiprintf_r+0x20>
 800a0e4:	4b79      	ldr	r3, [pc, #484]	; (800a2cc <_vfiprintf_r+0x248>)
 800a0e6:	429d      	cmp	r5, r3
 800a0e8:	bf08      	it	eq
 800a0ea:	68f5      	ldreq	r5, [r6, #12]
 800a0ec:	e7da      	b.n	800a0a4 <_vfiprintf_r+0x20>
 800a0ee:	89ab      	ldrh	r3, [r5, #12]
 800a0f0:	0598      	lsls	r0, r3, #22
 800a0f2:	d4ed      	bmi.n	800a0d0 <_vfiprintf_r+0x4c>
 800a0f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0f6:	f7ff fe54 	bl	8009da2 <__retarget_lock_release_recursive>
 800a0fa:	e7e9      	b.n	800a0d0 <_vfiprintf_r+0x4c>
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	9309      	str	r3, [sp, #36]	; 0x24
 800a100:	2320      	movs	r3, #32
 800a102:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a106:	f8cd 800c 	str.w	r8, [sp, #12]
 800a10a:	2330      	movs	r3, #48	; 0x30
 800a10c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a2d0 <_vfiprintf_r+0x24c>
 800a110:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a114:	f04f 0901 	mov.w	r9, #1
 800a118:	4623      	mov	r3, r4
 800a11a:	469a      	mov	sl, r3
 800a11c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a120:	b10a      	cbz	r2, 800a126 <_vfiprintf_r+0xa2>
 800a122:	2a25      	cmp	r2, #37	; 0x25
 800a124:	d1f9      	bne.n	800a11a <_vfiprintf_r+0x96>
 800a126:	ebba 0b04 	subs.w	fp, sl, r4
 800a12a:	d00b      	beq.n	800a144 <_vfiprintf_r+0xc0>
 800a12c:	465b      	mov	r3, fp
 800a12e:	4622      	mov	r2, r4
 800a130:	4629      	mov	r1, r5
 800a132:	4630      	mov	r0, r6
 800a134:	f7ff ff93 	bl	800a05e <__sfputs_r>
 800a138:	3001      	adds	r0, #1
 800a13a:	f000 80aa 	beq.w	800a292 <_vfiprintf_r+0x20e>
 800a13e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a140:	445a      	add	r2, fp
 800a142:	9209      	str	r2, [sp, #36]	; 0x24
 800a144:	f89a 3000 	ldrb.w	r3, [sl]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	f000 80a2 	beq.w	800a292 <_vfiprintf_r+0x20e>
 800a14e:	2300      	movs	r3, #0
 800a150:	f04f 32ff 	mov.w	r2, #4294967295
 800a154:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a158:	f10a 0a01 	add.w	sl, sl, #1
 800a15c:	9304      	str	r3, [sp, #16]
 800a15e:	9307      	str	r3, [sp, #28]
 800a160:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a164:	931a      	str	r3, [sp, #104]	; 0x68
 800a166:	4654      	mov	r4, sl
 800a168:	2205      	movs	r2, #5
 800a16a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a16e:	4858      	ldr	r0, [pc, #352]	; (800a2d0 <_vfiprintf_r+0x24c>)
 800a170:	f7f6 fd2e 	bl	8000bd0 <memchr>
 800a174:	9a04      	ldr	r2, [sp, #16]
 800a176:	b9d8      	cbnz	r0, 800a1b0 <_vfiprintf_r+0x12c>
 800a178:	06d1      	lsls	r1, r2, #27
 800a17a:	bf44      	itt	mi
 800a17c:	2320      	movmi	r3, #32
 800a17e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a182:	0713      	lsls	r3, r2, #28
 800a184:	bf44      	itt	mi
 800a186:	232b      	movmi	r3, #43	; 0x2b
 800a188:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a18c:	f89a 3000 	ldrb.w	r3, [sl]
 800a190:	2b2a      	cmp	r3, #42	; 0x2a
 800a192:	d015      	beq.n	800a1c0 <_vfiprintf_r+0x13c>
 800a194:	9a07      	ldr	r2, [sp, #28]
 800a196:	4654      	mov	r4, sl
 800a198:	2000      	movs	r0, #0
 800a19a:	f04f 0c0a 	mov.w	ip, #10
 800a19e:	4621      	mov	r1, r4
 800a1a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1a4:	3b30      	subs	r3, #48	; 0x30
 800a1a6:	2b09      	cmp	r3, #9
 800a1a8:	d94e      	bls.n	800a248 <_vfiprintf_r+0x1c4>
 800a1aa:	b1b0      	cbz	r0, 800a1da <_vfiprintf_r+0x156>
 800a1ac:	9207      	str	r2, [sp, #28]
 800a1ae:	e014      	b.n	800a1da <_vfiprintf_r+0x156>
 800a1b0:	eba0 0308 	sub.w	r3, r0, r8
 800a1b4:	fa09 f303 	lsl.w	r3, r9, r3
 800a1b8:	4313      	orrs	r3, r2
 800a1ba:	9304      	str	r3, [sp, #16]
 800a1bc:	46a2      	mov	sl, r4
 800a1be:	e7d2      	b.n	800a166 <_vfiprintf_r+0xe2>
 800a1c0:	9b03      	ldr	r3, [sp, #12]
 800a1c2:	1d19      	adds	r1, r3, #4
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	9103      	str	r1, [sp, #12]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	bfbb      	ittet	lt
 800a1cc:	425b      	neglt	r3, r3
 800a1ce:	f042 0202 	orrlt.w	r2, r2, #2
 800a1d2:	9307      	strge	r3, [sp, #28]
 800a1d4:	9307      	strlt	r3, [sp, #28]
 800a1d6:	bfb8      	it	lt
 800a1d8:	9204      	strlt	r2, [sp, #16]
 800a1da:	7823      	ldrb	r3, [r4, #0]
 800a1dc:	2b2e      	cmp	r3, #46	; 0x2e
 800a1de:	d10c      	bne.n	800a1fa <_vfiprintf_r+0x176>
 800a1e0:	7863      	ldrb	r3, [r4, #1]
 800a1e2:	2b2a      	cmp	r3, #42	; 0x2a
 800a1e4:	d135      	bne.n	800a252 <_vfiprintf_r+0x1ce>
 800a1e6:	9b03      	ldr	r3, [sp, #12]
 800a1e8:	1d1a      	adds	r2, r3, #4
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	9203      	str	r2, [sp, #12]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	bfb8      	it	lt
 800a1f2:	f04f 33ff 	movlt.w	r3, #4294967295
 800a1f6:	3402      	adds	r4, #2
 800a1f8:	9305      	str	r3, [sp, #20]
 800a1fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a2e0 <_vfiprintf_r+0x25c>
 800a1fe:	7821      	ldrb	r1, [r4, #0]
 800a200:	2203      	movs	r2, #3
 800a202:	4650      	mov	r0, sl
 800a204:	f7f6 fce4 	bl	8000bd0 <memchr>
 800a208:	b140      	cbz	r0, 800a21c <_vfiprintf_r+0x198>
 800a20a:	2340      	movs	r3, #64	; 0x40
 800a20c:	eba0 000a 	sub.w	r0, r0, sl
 800a210:	fa03 f000 	lsl.w	r0, r3, r0
 800a214:	9b04      	ldr	r3, [sp, #16]
 800a216:	4303      	orrs	r3, r0
 800a218:	3401      	adds	r4, #1
 800a21a:	9304      	str	r3, [sp, #16]
 800a21c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a220:	482c      	ldr	r0, [pc, #176]	; (800a2d4 <_vfiprintf_r+0x250>)
 800a222:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a226:	2206      	movs	r2, #6
 800a228:	f7f6 fcd2 	bl	8000bd0 <memchr>
 800a22c:	2800      	cmp	r0, #0
 800a22e:	d03f      	beq.n	800a2b0 <_vfiprintf_r+0x22c>
 800a230:	4b29      	ldr	r3, [pc, #164]	; (800a2d8 <_vfiprintf_r+0x254>)
 800a232:	bb1b      	cbnz	r3, 800a27c <_vfiprintf_r+0x1f8>
 800a234:	9b03      	ldr	r3, [sp, #12]
 800a236:	3307      	adds	r3, #7
 800a238:	f023 0307 	bic.w	r3, r3, #7
 800a23c:	3308      	adds	r3, #8
 800a23e:	9303      	str	r3, [sp, #12]
 800a240:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a242:	443b      	add	r3, r7
 800a244:	9309      	str	r3, [sp, #36]	; 0x24
 800a246:	e767      	b.n	800a118 <_vfiprintf_r+0x94>
 800a248:	fb0c 3202 	mla	r2, ip, r2, r3
 800a24c:	460c      	mov	r4, r1
 800a24e:	2001      	movs	r0, #1
 800a250:	e7a5      	b.n	800a19e <_vfiprintf_r+0x11a>
 800a252:	2300      	movs	r3, #0
 800a254:	3401      	adds	r4, #1
 800a256:	9305      	str	r3, [sp, #20]
 800a258:	4619      	mov	r1, r3
 800a25a:	f04f 0c0a 	mov.w	ip, #10
 800a25e:	4620      	mov	r0, r4
 800a260:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a264:	3a30      	subs	r2, #48	; 0x30
 800a266:	2a09      	cmp	r2, #9
 800a268:	d903      	bls.n	800a272 <_vfiprintf_r+0x1ee>
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d0c5      	beq.n	800a1fa <_vfiprintf_r+0x176>
 800a26e:	9105      	str	r1, [sp, #20]
 800a270:	e7c3      	b.n	800a1fa <_vfiprintf_r+0x176>
 800a272:	fb0c 2101 	mla	r1, ip, r1, r2
 800a276:	4604      	mov	r4, r0
 800a278:	2301      	movs	r3, #1
 800a27a:	e7f0      	b.n	800a25e <_vfiprintf_r+0x1da>
 800a27c:	ab03      	add	r3, sp, #12
 800a27e:	9300      	str	r3, [sp, #0]
 800a280:	462a      	mov	r2, r5
 800a282:	4b16      	ldr	r3, [pc, #88]	; (800a2dc <_vfiprintf_r+0x258>)
 800a284:	a904      	add	r1, sp, #16
 800a286:	4630      	mov	r0, r6
 800a288:	f3af 8000 	nop.w
 800a28c:	4607      	mov	r7, r0
 800a28e:	1c78      	adds	r0, r7, #1
 800a290:	d1d6      	bne.n	800a240 <_vfiprintf_r+0x1bc>
 800a292:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a294:	07d9      	lsls	r1, r3, #31
 800a296:	d405      	bmi.n	800a2a4 <_vfiprintf_r+0x220>
 800a298:	89ab      	ldrh	r3, [r5, #12]
 800a29a:	059a      	lsls	r2, r3, #22
 800a29c:	d402      	bmi.n	800a2a4 <_vfiprintf_r+0x220>
 800a29e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2a0:	f7ff fd7f 	bl	8009da2 <__retarget_lock_release_recursive>
 800a2a4:	89ab      	ldrh	r3, [r5, #12]
 800a2a6:	065b      	lsls	r3, r3, #25
 800a2a8:	f53f af12 	bmi.w	800a0d0 <_vfiprintf_r+0x4c>
 800a2ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a2ae:	e711      	b.n	800a0d4 <_vfiprintf_r+0x50>
 800a2b0:	ab03      	add	r3, sp, #12
 800a2b2:	9300      	str	r3, [sp, #0]
 800a2b4:	462a      	mov	r2, r5
 800a2b6:	4b09      	ldr	r3, [pc, #36]	; (800a2dc <_vfiprintf_r+0x258>)
 800a2b8:	a904      	add	r1, sp, #16
 800a2ba:	4630      	mov	r0, r6
 800a2bc:	f000 f880 	bl	800a3c0 <_printf_i>
 800a2c0:	e7e4      	b.n	800a28c <_vfiprintf_r+0x208>
 800a2c2:	bf00      	nop
 800a2c4:	0800a9e4 	.word	0x0800a9e4
 800a2c8:	0800aa04 	.word	0x0800aa04
 800a2cc:	0800a9c4 	.word	0x0800a9c4
 800a2d0:	0800aa24 	.word	0x0800aa24
 800a2d4:	0800aa2e 	.word	0x0800aa2e
 800a2d8:	00000000 	.word	0x00000000
 800a2dc:	0800a05f 	.word	0x0800a05f
 800a2e0:	0800aa2a 	.word	0x0800aa2a

0800a2e4 <_printf_common>:
 800a2e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2e8:	4616      	mov	r6, r2
 800a2ea:	4699      	mov	r9, r3
 800a2ec:	688a      	ldr	r2, [r1, #8]
 800a2ee:	690b      	ldr	r3, [r1, #16]
 800a2f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a2f4:	4293      	cmp	r3, r2
 800a2f6:	bfb8      	it	lt
 800a2f8:	4613      	movlt	r3, r2
 800a2fa:	6033      	str	r3, [r6, #0]
 800a2fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a300:	4607      	mov	r7, r0
 800a302:	460c      	mov	r4, r1
 800a304:	b10a      	cbz	r2, 800a30a <_printf_common+0x26>
 800a306:	3301      	adds	r3, #1
 800a308:	6033      	str	r3, [r6, #0]
 800a30a:	6823      	ldr	r3, [r4, #0]
 800a30c:	0699      	lsls	r1, r3, #26
 800a30e:	bf42      	ittt	mi
 800a310:	6833      	ldrmi	r3, [r6, #0]
 800a312:	3302      	addmi	r3, #2
 800a314:	6033      	strmi	r3, [r6, #0]
 800a316:	6825      	ldr	r5, [r4, #0]
 800a318:	f015 0506 	ands.w	r5, r5, #6
 800a31c:	d106      	bne.n	800a32c <_printf_common+0x48>
 800a31e:	f104 0a19 	add.w	sl, r4, #25
 800a322:	68e3      	ldr	r3, [r4, #12]
 800a324:	6832      	ldr	r2, [r6, #0]
 800a326:	1a9b      	subs	r3, r3, r2
 800a328:	42ab      	cmp	r3, r5
 800a32a:	dc26      	bgt.n	800a37a <_printf_common+0x96>
 800a32c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a330:	1e13      	subs	r3, r2, #0
 800a332:	6822      	ldr	r2, [r4, #0]
 800a334:	bf18      	it	ne
 800a336:	2301      	movne	r3, #1
 800a338:	0692      	lsls	r2, r2, #26
 800a33a:	d42b      	bmi.n	800a394 <_printf_common+0xb0>
 800a33c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a340:	4649      	mov	r1, r9
 800a342:	4638      	mov	r0, r7
 800a344:	47c0      	blx	r8
 800a346:	3001      	adds	r0, #1
 800a348:	d01e      	beq.n	800a388 <_printf_common+0xa4>
 800a34a:	6823      	ldr	r3, [r4, #0]
 800a34c:	68e5      	ldr	r5, [r4, #12]
 800a34e:	6832      	ldr	r2, [r6, #0]
 800a350:	f003 0306 	and.w	r3, r3, #6
 800a354:	2b04      	cmp	r3, #4
 800a356:	bf08      	it	eq
 800a358:	1aad      	subeq	r5, r5, r2
 800a35a:	68a3      	ldr	r3, [r4, #8]
 800a35c:	6922      	ldr	r2, [r4, #16]
 800a35e:	bf0c      	ite	eq
 800a360:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a364:	2500      	movne	r5, #0
 800a366:	4293      	cmp	r3, r2
 800a368:	bfc4      	itt	gt
 800a36a:	1a9b      	subgt	r3, r3, r2
 800a36c:	18ed      	addgt	r5, r5, r3
 800a36e:	2600      	movs	r6, #0
 800a370:	341a      	adds	r4, #26
 800a372:	42b5      	cmp	r5, r6
 800a374:	d11a      	bne.n	800a3ac <_printf_common+0xc8>
 800a376:	2000      	movs	r0, #0
 800a378:	e008      	b.n	800a38c <_printf_common+0xa8>
 800a37a:	2301      	movs	r3, #1
 800a37c:	4652      	mov	r2, sl
 800a37e:	4649      	mov	r1, r9
 800a380:	4638      	mov	r0, r7
 800a382:	47c0      	blx	r8
 800a384:	3001      	adds	r0, #1
 800a386:	d103      	bne.n	800a390 <_printf_common+0xac>
 800a388:	f04f 30ff 	mov.w	r0, #4294967295
 800a38c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a390:	3501      	adds	r5, #1
 800a392:	e7c6      	b.n	800a322 <_printf_common+0x3e>
 800a394:	18e1      	adds	r1, r4, r3
 800a396:	1c5a      	adds	r2, r3, #1
 800a398:	2030      	movs	r0, #48	; 0x30
 800a39a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a39e:	4422      	add	r2, r4
 800a3a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a3a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a3a8:	3302      	adds	r3, #2
 800a3aa:	e7c7      	b.n	800a33c <_printf_common+0x58>
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	4622      	mov	r2, r4
 800a3b0:	4649      	mov	r1, r9
 800a3b2:	4638      	mov	r0, r7
 800a3b4:	47c0      	blx	r8
 800a3b6:	3001      	adds	r0, #1
 800a3b8:	d0e6      	beq.n	800a388 <_printf_common+0xa4>
 800a3ba:	3601      	adds	r6, #1
 800a3bc:	e7d9      	b.n	800a372 <_printf_common+0x8e>
	...

0800a3c0 <_printf_i>:
 800a3c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a3c4:	7e0f      	ldrb	r7, [r1, #24]
 800a3c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a3c8:	2f78      	cmp	r7, #120	; 0x78
 800a3ca:	4691      	mov	r9, r2
 800a3cc:	4680      	mov	r8, r0
 800a3ce:	460c      	mov	r4, r1
 800a3d0:	469a      	mov	sl, r3
 800a3d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a3d6:	d807      	bhi.n	800a3e8 <_printf_i+0x28>
 800a3d8:	2f62      	cmp	r7, #98	; 0x62
 800a3da:	d80a      	bhi.n	800a3f2 <_printf_i+0x32>
 800a3dc:	2f00      	cmp	r7, #0
 800a3de:	f000 80d8 	beq.w	800a592 <_printf_i+0x1d2>
 800a3e2:	2f58      	cmp	r7, #88	; 0x58
 800a3e4:	f000 80a3 	beq.w	800a52e <_printf_i+0x16e>
 800a3e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a3ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a3f0:	e03a      	b.n	800a468 <_printf_i+0xa8>
 800a3f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a3f6:	2b15      	cmp	r3, #21
 800a3f8:	d8f6      	bhi.n	800a3e8 <_printf_i+0x28>
 800a3fa:	a101      	add	r1, pc, #4	; (adr r1, 800a400 <_printf_i+0x40>)
 800a3fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a400:	0800a459 	.word	0x0800a459
 800a404:	0800a46d 	.word	0x0800a46d
 800a408:	0800a3e9 	.word	0x0800a3e9
 800a40c:	0800a3e9 	.word	0x0800a3e9
 800a410:	0800a3e9 	.word	0x0800a3e9
 800a414:	0800a3e9 	.word	0x0800a3e9
 800a418:	0800a46d 	.word	0x0800a46d
 800a41c:	0800a3e9 	.word	0x0800a3e9
 800a420:	0800a3e9 	.word	0x0800a3e9
 800a424:	0800a3e9 	.word	0x0800a3e9
 800a428:	0800a3e9 	.word	0x0800a3e9
 800a42c:	0800a579 	.word	0x0800a579
 800a430:	0800a49d 	.word	0x0800a49d
 800a434:	0800a55b 	.word	0x0800a55b
 800a438:	0800a3e9 	.word	0x0800a3e9
 800a43c:	0800a3e9 	.word	0x0800a3e9
 800a440:	0800a59b 	.word	0x0800a59b
 800a444:	0800a3e9 	.word	0x0800a3e9
 800a448:	0800a49d 	.word	0x0800a49d
 800a44c:	0800a3e9 	.word	0x0800a3e9
 800a450:	0800a3e9 	.word	0x0800a3e9
 800a454:	0800a563 	.word	0x0800a563
 800a458:	682b      	ldr	r3, [r5, #0]
 800a45a:	1d1a      	adds	r2, r3, #4
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	602a      	str	r2, [r5, #0]
 800a460:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a464:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a468:	2301      	movs	r3, #1
 800a46a:	e0a3      	b.n	800a5b4 <_printf_i+0x1f4>
 800a46c:	6820      	ldr	r0, [r4, #0]
 800a46e:	6829      	ldr	r1, [r5, #0]
 800a470:	0606      	lsls	r6, r0, #24
 800a472:	f101 0304 	add.w	r3, r1, #4
 800a476:	d50a      	bpl.n	800a48e <_printf_i+0xce>
 800a478:	680e      	ldr	r6, [r1, #0]
 800a47a:	602b      	str	r3, [r5, #0]
 800a47c:	2e00      	cmp	r6, #0
 800a47e:	da03      	bge.n	800a488 <_printf_i+0xc8>
 800a480:	232d      	movs	r3, #45	; 0x2d
 800a482:	4276      	negs	r6, r6
 800a484:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a488:	485e      	ldr	r0, [pc, #376]	; (800a604 <_printf_i+0x244>)
 800a48a:	230a      	movs	r3, #10
 800a48c:	e019      	b.n	800a4c2 <_printf_i+0x102>
 800a48e:	680e      	ldr	r6, [r1, #0]
 800a490:	602b      	str	r3, [r5, #0]
 800a492:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a496:	bf18      	it	ne
 800a498:	b236      	sxthne	r6, r6
 800a49a:	e7ef      	b.n	800a47c <_printf_i+0xbc>
 800a49c:	682b      	ldr	r3, [r5, #0]
 800a49e:	6820      	ldr	r0, [r4, #0]
 800a4a0:	1d19      	adds	r1, r3, #4
 800a4a2:	6029      	str	r1, [r5, #0]
 800a4a4:	0601      	lsls	r1, r0, #24
 800a4a6:	d501      	bpl.n	800a4ac <_printf_i+0xec>
 800a4a8:	681e      	ldr	r6, [r3, #0]
 800a4aa:	e002      	b.n	800a4b2 <_printf_i+0xf2>
 800a4ac:	0646      	lsls	r6, r0, #25
 800a4ae:	d5fb      	bpl.n	800a4a8 <_printf_i+0xe8>
 800a4b0:	881e      	ldrh	r6, [r3, #0]
 800a4b2:	4854      	ldr	r0, [pc, #336]	; (800a604 <_printf_i+0x244>)
 800a4b4:	2f6f      	cmp	r7, #111	; 0x6f
 800a4b6:	bf0c      	ite	eq
 800a4b8:	2308      	moveq	r3, #8
 800a4ba:	230a      	movne	r3, #10
 800a4bc:	2100      	movs	r1, #0
 800a4be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a4c2:	6865      	ldr	r5, [r4, #4]
 800a4c4:	60a5      	str	r5, [r4, #8]
 800a4c6:	2d00      	cmp	r5, #0
 800a4c8:	bfa2      	ittt	ge
 800a4ca:	6821      	ldrge	r1, [r4, #0]
 800a4cc:	f021 0104 	bicge.w	r1, r1, #4
 800a4d0:	6021      	strge	r1, [r4, #0]
 800a4d2:	b90e      	cbnz	r6, 800a4d8 <_printf_i+0x118>
 800a4d4:	2d00      	cmp	r5, #0
 800a4d6:	d04d      	beq.n	800a574 <_printf_i+0x1b4>
 800a4d8:	4615      	mov	r5, r2
 800a4da:	fbb6 f1f3 	udiv	r1, r6, r3
 800a4de:	fb03 6711 	mls	r7, r3, r1, r6
 800a4e2:	5dc7      	ldrb	r7, [r0, r7]
 800a4e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a4e8:	4637      	mov	r7, r6
 800a4ea:	42bb      	cmp	r3, r7
 800a4ec:	460e      	mov	r6, r1
 800a4ee:	d9f4      	bls.n	800a4da <_printf_i+0x11a>
 800a4f0:	2b08      	cmp	r3, #8
 800a4f2:	d10b      	bne.n	800a50c <_printf_i+0x14c>
 800a4f4:	6823      	ldr	r3, [r4, #0]
 800a4f6:	07de      	lsls	r6, r3, #31
 800a4f8:	d508      	bpl.n	800a50c <_printf_i+0x14c>
 800a4fa:	6923      	ldr	r3, [r4, #16]
 800a4fc:	6861      	ldr	r1, [r4, #4]
 800a4fe:	4299      	cmp	r1, r3
 800a500:	bfde      	ittt	le
 800a502:	2330      	movle	r3, #48	; 0x30
 800a504:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a508:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a50c:	1b52      	subs	r2, r2, r5
 800a50e:	6122      	str	r2, [r4, #16]
 800a510:	f8cd a000 	str.w	sl, [sp]
 800a514:	464b      	mov	r3, r9
 800a516:	aa03      	add	r2, sp, #12
 800a518:	4621      	mov	r1, r4
 800a51a:	4640      	mov	r0, r8
 800a51c:	f7ff fee2 	bl	800a2e4 <_printf_common>
 800a520:	3001      	adds	r0, #1
 800a522:	d14c      	bne.n	800a5be <_printf_i+0x1fe>
 800a524:	f04f 30ff 	mov.w	r0, #4294967295
 800a528:	b004      	add	sp, #16
 800a52a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a52e:	4835      	ldr	r0, [pc, #212]	; (800a604 <_printf_i+0x244>)
 800a530:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a534:	6829      	ldr	r1, [r5, #0]
 800a536:	6823      	ldr	r3, [r4, #0]
 800a538:	f851 6b04 	ldr.w	r6, [r1], #4
 800a53c:	6029      	str	r1, [r5, #0]
 800a53e:	061d      	lsls	r5, r3, #24
 800a540:	d514      	bpl.n	800a56c <_printf_i+0x1ac>
 800a542:	07df      	lsls	r7, r3, #31
 800a544:	bf44      	itt	mi
 800a546:	f043 0320 	orrmi.w	r3, r3, #32
 800a54a:	6023      	strmi	r3, [r4, #0]
 800a54c:	b91e      	cbnz	r6, 800a556 <_printf_i+0x196>
 800a54e:	6823      	ldr	r3, [r4, #0]
 800a550:	f023 0320 	bic.w	r3, r3, #32
 800a554:	6023      	str	r3, [r4, #0]
 800a556:	2310      	movs	r3, #16
 800a558:	e7b0      	b.n	800a4bc <_printf_i+0xfc>
 800a55a:	6823      	ldr	r3, [r4, #0]
 800a55c:	f043 0320 	orr.w	r3, r3, #32
 800a560:	6023      	str	r3, [r4, #0]
 800a562:	2378      	movs	r3, #120	; 0x78
 800a564:	4828      	ldr	r0, [pc, #160]	; (800a608 <_printf_i+0x248>)
 800a566:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a56a:	e7e3      	b.n	800a534 <_printf_i+0x174>
 800a56c:	0659      	lsls	r1, r3, #25
 800a56e:	bf48      	it	mi
 800a570:	b2b6      	uxthmi	r6, r6
 800a572:	e7e6      	b.n	800a542 <_printf_i+0x182>
 800a574:	4615      	mov	r5, r2
 800a576:	e7bb      	b.n	800a4f0 <_printf_i+0x130>
 800a578:	682b      	ldr	r3, [r5, #0]
 800a57a:	6826      	ldr	r6, [r4, #0]
 800a57c:	6961      	ldr	r1, [r4, #20]
 800a57e:	1d18      	adds	r0, r3, #4
 800a580:	6028      	str	r0, [r5, #0]
 800a582:	0635      	lsls	r5, r6, #24
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	d501      	bpl.n	800a58c <_printf_i+0x1cc>
 800a588:	6019      	str	r1, [r3, #0]
 800a58a:	e002      	b.n	800a592 <_printf_i+0x1d2>
 800a58c:	0670      	lsls	r0, r6, #25
 800a58e:	d5fb      	bpl.n	800a588 <_printf_i+0x1c8>
 800a590:	8019      	strh	r1, [r3, #0]
 800a592:	2300      	movs	r3, #0
 800a594:	6123      	str	r3, [r4, #16]
 800a596:	4615      	mov	r5, r2
 800a598:	e7ba      	b.n	800a510 <_printf_i+0x150>
 800a59a:	682b      	ldr	r3, [r5, #0]
 800a59c:	1d1a      	adds	r2, r3, #4
 800a59e:	602a      	str	r2, [r5, #0]
 800a5a0:	681d      	ldr	r5, [r3, #0]
 800a5a2:	6862      	ldr	r2, [r4, #4]
 800a5a4:	2100      	movs	r1, #0
 800a5a6:	4628      	mov	r0, r5
 800a5a8:	f7f6 fb12 	bl	8000bd0 <memchr>
 800a5ac:	b108      	cbz	r0, 800a5b2 <_printf_i+0x1f2>
 800a5ae:	1b40      	subs	r0, r0, r5
 800a5b0:	6060      	str	r0, [r4, #4]
 800a5b2:	6863      	ldr	r3, [r4, #4]
 800a5b4:	6123      	str	r3, [r4, #16]
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a5bc:	e7a8      	b.n	800a510 <_printf_i+0x150>
 800a5be:	6923      	ldr	r3, [r4, #16]
 800a5c0:	462a      	mov	r2, r5
 800a5c2:	4649      	mov	r1, r9
 800a5c4:	4640      	mov	r0, r8
 800a5c6:	47d0      	blx	sl
 800a5c8:	3001      	adds	r0, #1
 800a5ca:	d0ab      	beq.n	800a524 <_printf_i+0x164>
 800a5cc:	6823      	ldr	r3, [r4, #0]
 800a5ce:	079b      	lsls	r3, r3, #30
 800a5d0:	d413      	bmi.n	800a5fa <_printf_i+0x23a>
 800a5d2:	68e0      	ldr	r0, [r4, #12]
 800a5d4:	9b03      	ldr	r3, [sp, #12]
 800a5d6:	4298      	cmp	r0, r3
 800a5d8:	bfb8      	it	lt
 800a5da:	4618      	movlt	r0, r3
 800a5dc:	e7a4      	b.n	800a528 <_printf_i+0x168>
 800a5de:	2301      	movs	r3, #1
 800a5e0:	4632      	mov	r2, r6
 800a5e2:	4649      	mov	r1, r9
 800a5e4:	4640      	mov	r0, r8
 800a5e6:	47d0      	blx	sl
 800a5e8:	3001      	adds	r0, #1
 800a5ea:	d09b      	beq.n	800a524 <_printf_i+0x164>
 800a5ec:	3501      	adds	r5, #1
 800a5ee:	68e3      	ldr	r3, [r4, #12]
 800a5f0:	9903      	ldr	r1, [sp, #12]
 800a5f2:	1a5b      	subs	r3, r3, r1
 800a5f4:	42ab      	cmp	r3, r5
 800a5f6:	dcf2      	bgt.n	800a5de <_printf_i+0x21e>
 800a5f8:	e7eb      	b.n	800a5d2 <_printf_i+0x212>
 800a5fa:	2500      	movs	r5, #0
 800a5fc:	f104 0619 	add.w	r6, r4, #25
 800a600:	e7f5      	b.n	800a5ee <_printf_i+0x22e>
 800a602:	bf00      	nop
 800a604:	0800aa35 	.word	0x0800aa35
 800a608:	0800aa46 	.word	0x0800aa46

0800a60c <_sbrk_r>:
 800a60c:	b538      	push	{r3, r4, r5, lr}
 800a60e:	4d06      	ldr	r5, [pc, #24]	; (800a628 <_sbrk_r+0x1c>)
 800a610:	2300      	movs	r3, #0
 800a612:	4604      	mov	r4, r0
 800a614:	4608      	mov	r0, r1
 800a616:	602b      	str	r3, [r5, #0]
 800a618:	f7f7 fe4e 	bl	80022b8 <_sbrk>
 800a61c:	1c43      	adds	r3, r0, #1
 800a61e:	d102      	bne.n	800a626 <_sbrk_r+0x1a>
 800a620:	682b      	ldr	r3, [r5, #0]
 800a622:	b103      	cbz	r3, 800a626 <_sbrk_r+0x1a>
 800a624:	6023      	str	r3, [r4, #0]
 800a626:	bd38      	pop	{r3, r4, r5, pc}
 800a628:	20000334 	.word	0x20000334

0800a62c <__sread>:
 800a62c:	b510      	push	{r4, lr}
 800a62e:	460c      	mov	r4, r1
 800a630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a634:	f000 f8a0 	bl	800a778 <_read_r>
 800a638:	2800      	cmp	r0, #0
 800a63a:	bfab      	itete	ge
 800a63c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a63e:	89a3      	ldrhlt	r3, [r4, #12]
 800a640:	181b      	addge	r3, r3, r0
 800a642:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a646:	bfac      	ite	ge
 800a648:	6563      	strge	r3, [r4, #84]	; 0x54
 800a64a:	81a3      	strhlt	r3, [r4, #12]
 800a64c:	bd10      	pop	{r4, pc}

0800a64e <__swrite>:
 800a64e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a652:	461f      	mov	r7, r3
 800a654:	898b      	ldrh	r3, [r1, #12]
 800a656:	05db      	lsls	r3, r3, #23
 800a658:	4605      	mov	r5, r0
 800a65a:	460c      	mov	r4, r1
 800a65c:	4616      	mov	r6, r2
 800a65e:	d505      	bpl.n	800a66c <__swrite+0x1e>
 800a660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a664:	2302      	movs	r3, #2
 800a666:	2200      	movs	r2, #0
 800a668:	f000 f868 	bl	800a73c <_lseek_r>
 800a66c:	89a3      	ldrh	r3, [r4, #12]
 800a66e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a672:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a676:	81a3      	strh	r3, [r4, #12]
 800a678:	4632      	mov	r2, r6
 800a67a:	463b      	mov	r3, r7
 800a67c:	4628      	mov	r0, r5
 800a67e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a682:	f000 b817 	b.w	800a6b4 <_write_r>

0800a686 <__sseek>:
 800a686:	b510      	push	{r4, lr}
 800a688:	460c      	mov	r4, r1
 800a68a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a68e:	f000 f855 	bl	800a73c <_lseek_r>
 800a692:	1c43      	adds	r3, r0, #1
 800a694:	89a3      	ldrh	r3, [r4, #12]
 800a696:	bf15      	itete	ne
 800a698:	6560      	strne	r0, [r4, #84]	; 0x54
 800a69a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a69e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a6a2:	81a3      	strheq	r3, [r4, #12]
 800a6a4:	bf18      	it	ne
 800a6a6:	81a3      	strhne	r3, [r4, #12]
 800a6a8:	bd10      	pop	{r4, pc}

0800a6aa <__sclose>:
 800a6aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6ae:	f000 b813 	b.w	800a6d8 <_close_r>
	...

0800a6b4 <_write_r>:
 800a6b4:	b538      	push	{r3, r4, r5, lr}
 800a6b6:	4d07      	ldr	r5, [pc, #28]	; (800a6d4 <_write_r+0x20>)
 800a6b8:	4604      	mov	r4, r0
 800a6ba:	4608      	mov	r0, r1
 800a6bc:	4611      	mov	r1, r2
 800a6be:	2200      	movs	r2, #0
 800a6c0:	602a      	str	r2, [r5, #0]
 800a6c2:	461a      	mov	r2, r3
 800a6c4:	f7f7 fda7 	bl	8002216 <_write>
 800a6c8:	1c43      	adds	r3, r0, #1
 800a6ca:	d102      	bne.n	800a6d2 <_write_r+0x1e>
 800a6cc:	682b      	ldr	r3, [r5, #0]
 800a6ce:	b103      	cbz	r3, 800a6d2 <_write_r+0x1e>
 800a6d0:	6023      	str	r3, [r4, #0]
 800a6d2:	bd38      	pop	{r3, r4, r5, pc}
 800a6d4:	20000334 	.word	0x20000334

0800a6d8 <_close_r>:
 800a6d8:	b538      	push	{r3, r4, r5, lr}
 800a6da:	4d06      	ldr	r5, [pc, #24]	; (800a6f4 <_close_r+0x1c>)
 800a6dc:	2300      	movs	r3, #0
 800a6de:	4604      	mov	r4, r0
 800a6e0:	4608      	mov	r0, r1
 800a6e2:	602b      	str	r3, [r5, #0]
 800a6e4:	f7f7 fdb3 	bl	800224e <_close>
 800a6e8:	1c43      	adds	r3, r0, #1
 800a6ea:	d102      	bne.n	800a6f2 <_close_r+0x1a>
 800a6ec:	682b      	ldr	r3, [r5, #0]
 800a6ee:	b103      	cbz	r3, 800a6f2 <_close_r+0x1a>
 800a6f0:	6023      	str	r3, [r4, #0]
 800a6f2:	bd38      	pop	{r3, r4, r5, pc}
 800a6f4:	20000334 	.word	0x20000334

0800a6f8 <_fstat_r>:
 800a6f8:	b538      	push	{r3, r4, r5, lr}
 800a6fa:	4d07      	ldr	r5, [pc, #28]	; (800a718 <_fstat_r+0x20>)
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	4604      	mov	r4, r0
 800a700:	4608      	mov	r0, r1
 800a702:	4611      	mov	r1, r2
 800a704:	602b      	str	r3, [r5, #0]
 800a706:	f7f7 fdae 	bl	8002266 <_fstat>
 800a70a:	1c43      	adds	r3, r0, #1
 800a70c:	d102      	bne.n	800a714 <_fstat_r+0x1c>
 800a70e:	682b      	ldr	r3, [r5, #0]
 800a710:	b103      	cbz	r3, 800a714 <_fstat_r+0x1c>
 800a712:	6023      	str	r3, [r4, #0]
 800a714:	bd38      	pop	{r3, r4, r5, pc}
 800a716:	bf00      	nop
 800a718:	20000334 	.word	0x20000334

0800a71c <_isatty_r>:
 800a71c:	b538      	push	{r3, r4, r5, lr}
 800a71e:	4d06      	ldr	r5, [pc, #24]	; (800a738 <_isatty_r+0x1c>)
 800a720:	2300      	movs	r3, #0
 800a722:	4604      	mov	r4, r0
 800a724:	4608      	mov	r0, r1
 800a726:	602b      	str	r3, [r5, #0]
 800a728:	f7f7 fdad 	bl	8002286 <_isatty>
 800a72c:	1c43      	adds	r3, r0, #1
 800a72e:	d102      	bne.n	800a736 <_isatty_r+0x1a>
 800a730:	682b      	ldr	r3, [r5, #0]
 800a732:	b103      	cbz	r3, 800a736 <_isatty_r+0x1a>
 800a734:	6023      	str	r3, [r4, #0]
 800a736:	bd38      	pop	{r3, r4, r5, pc}
 800a738:	20000334 	.word	0x20000334

0800a73c <_lseek_r>:
 800a73c:	b538      	push	{r3, r4, r5, lr}
 800a73e:	4d07      	ldr	r5, [pc, #28]	; (800a75c <_lseek_r+0x20>)
 800a740:	4604      	mov	r4, r0
 800a742:	4608      	mov	r0, r1
 800a744:	4611      	mov	r1, r2
 800a746:	2200      	movs	r2, #0
 800a748:	602a      	str	r2, [r5, #0]
 800a74a:	461a      	mov	r2, r3
 800a74c:	f7f7 fda6 	bl	800229c <_lseek>
 800a750:	1c43      	adds	r3, r0, #1
 800a752:	d102      	bne.n	800a75a <_lseek_r+0x1e>
 800a754:	682b      	ldr	r3, [r5, #0]
 800a756:	b103      	cbz	r3, 800a75a <_lseek_r+0x1e>
 800a758:	6023      	str	r3, [r4, #0]
 800a75a:	bd38      	pop	{r3, r4, r5, pc}
 800a75c:	20000334 	.word	0x20000334

0800a760 <__malloc_lock>:
 800a760:	4801      	ldr	r0, [pc, #4]	; (800a768 <__malloc_lock+0x8>)
 800a762:	f7ff bb1d 	b.w	8009da0 <__retarget_lock_acquire_recursive>
 800a766:	bf00      	nop
 800a768:	20000328 	.word	0x20000328

0800a76c <__malloc_unlock>:
 800a76c:	4801      	ldr	r0, [pc, #4]	; (800a774 <__malloc_unlock+0x8>)
 800a76e:	f7ff bb18 	b.w	8009da2 <__retarget_lock_release_recursive>
 800a772:	bf00      	nop
 800a774:	20000328 	.word	0x20000328

0800a778 <_read_r>:
 800a778:	b538      	push	{r3, r4, r5, lr}
 800a77a:	4d07      	ldr	r5, [pc, #28]	; (800a798 <_read_r+0x20>)
 800a77c:	4604      	mov	r4, r0
 800a77e:	4608      	mov	r0, r1
 800a780:	4611      	mov	r1, r2
 800a782:	2200      	movs	r2, #0
 800a784:	602a      	str	r2, [r5, #0]
 800a786:	461a      	mov	r2, r3
 800a788:	f7f7 fd28 	bl	80021dc <_read>
 800a78c:	1c43      	adds	r3, r0, #1
 800a78e:	d102      	bne.n	800a796 <_read_r+0x1e>
 800a790:	682b      	ldr	r3, [r5, #0]
 800a792:	b103      	cbz	r3, 800a796 <_read_r+0x1e>
 800a794:	6023      	str	r3, [r4, #0]
 800a796:	bd38      	pop	{r3, r4, r5, pc}
 800a798:	20000334 	.word	0x20000334

0800a79c <_init>:
 800a79c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a79e:	bf00      	nop
 800a7a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7a2:	bc08      	pop	{r3}
 800a7a4:	469e      	mov	lr, r3
 800a7a6:	4770      	bx	lr

0800a7a8 <_fini>:
 800a7a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7aa:	bf00      	nop
 800a7ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7ae:	bc08      	pop	{r3}
 800a7b0:	469e      	mov	lr, r3
 800a7b2:	4770      	bx	lr
 800a7b4:	0000      	movs	r0, r0
	...

0800a7b8 <__init_synthesiser_veneer>:
 800a7b8:	f85f f000 	ldr.w	pc, [pc]	; 800a7bc <__init_synthesiser_veneer+0x4>
 800a7bc:	00000123 	.word	0x00000123

0800a7c0 <__run_sweep_veneer>:
 800a7c0:	f85f f000 	ldr.w	pc, [pc]	; 800a7c4 <__run_sweep_veneer+0x4>
 800a7c4:	000004a1 	.word	0x000004a1

0800a7c8 <__set_aom_atten_veneer>:
 800a7c8:	f85f f000 	ldr.w	pc, [pc]	; 800a7cc <__set_aom_atten_veneer+0x4>
 800a7cc:	0000070d 	.word	0x0000070d

0800a7d0 <__set_frequency_hz_veneer>:
 800a7d0:	f85f f000 	ldr.w	pc, [pc]	; 800a7d4 <__set_frequency_hz_veneer+0x4>
 800a7d4:	0000038d 	.word	0x0000038d

0800a7d8 <__timer_delay_veneer>:
 800a7d8:	f85f f000 	ldr.w	pc, [pc]	; 800a7dc <__timer_delay_veneer+0x4>
 800a7dc:	000006b1 	.word	0x000006b1

0800a7e0 <__stop_pop_veneer>:
 800a7e0:	f85f f000 	ldr.w	pc, [pc]	; 800a7e4 <__stop_pop_veneer+0x4>
 800a7e4:	00000835 	.word	0x00000835

0800a7e8 <__start_pop_veneer>:
 800a7e8:	f85f f000 	ldr.w	pc, [pc]	; 800a7ec <__start_pop_veneer+0x4>
 800a7ec:	000007ad 	.word	0x000007ad
